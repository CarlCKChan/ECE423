
ECE423_Lab1.elf:     file format elf32-littlenios2
ECE423_Lab1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013b84 memsz 0x00013b84 flags r-x
    LOAD off    0x00014ba4 vaddr 0x00813ba4 paddr 0x00815880 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x0001755c vaddr 0x0081755c paddr 0x0081755c align 2**12
         filesz 0x00000000 memsz 0x00000890 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001343c  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005e4  008135c0  008135c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  00813ba4  00815880  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000890  0081755c  0081755c  0001755c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00016880  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  000168a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001daa  00000000  00000000  00017720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a3fb  00000000  00000000  000194ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000097b0  00000000  00000000  000438c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b774  00000000  00000000  0004d075  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e08  00000000  00000000  000687ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000045bb  00000000  00000000  0006a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011c41  00000000  00000000  0006ebaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000807f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001ff0  00000000  00000000  00080820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00086583  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00086586  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0008658b  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0008658c  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00086590  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00086594  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00086598  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000865a3  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000865ae  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  000865b9  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  000865c0  2**0
                  CONTENTS, READONLY
 28 .jdi          000041ac  00000000  00000000  000865dc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
008135c0 l    d  .rodata	00000000 .rodata
00813ba4 l    d  .rwdata	00000000 .rwdata
0081755c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 main_code.c
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802118 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00813da4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803efc l     F .text	00000058 __sprint_r
008139fe l     O .rodata	00000010 blanks.3452
008139ee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00805f60 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00806114 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00807b10 l     F .text	00000058 std
00807c1c l     F .text	00000008 __fp_lock
00807c24 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00815854 l     O .rwdata	00000004 charset
00813a30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00813b78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0080a678 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080bfe8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080c224 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
0080c3d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815870 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00814760 l     O .rwdata	00001060 jtag_uart_0
008157c0 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00815814 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ca00 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0080cad8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080cfa8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812bb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00817594 g     O .bss	00000004 aux_status_register
00803ce0 g     F .text	0000001c putchar
00817560 g     O .bss	00000004 sectors
008090ec g     F .text	00000094 _mprec_log10
008091d8 g     F .text	00000088 __any_on
0080ad8c g     F .text	00000070 _isatty_r
00813b50 g     O .rodata	00000028 __mprec_tinytens
0080c4dc g     F .text	00000060 alt_main
0080d03c g     F .text	00000178 alt_up_pixel_buffer_dma_draw_vline
00803d04 g     F .text	000000a0 _puts_r
00817b5c g     O .bss	00000100 alt_irq
0080adfc g     F .text	00000078 _lseek_r
00801cb4 g     F .text	0000002c sd_card_wait_read_sector
008015d0 g     F .text	000005d8 ycbcr_to_rgb
00815880 g       *ABS*	00000000 __flash_rwdata_start
0080bcd0 g     F .text	00000088 __eqdf2
0080f2ec g     F .text	000001c8 Check_for_Master_Boot_Record
00817dec g       *ABS*	00000000 __alt_heap_start
0080ec74 g     F .text	00000160 alt_up_sd_card_fclose
00803c68 g     F .text	00000044 printf
00813ba4 g     O .rwdata	00000080 Yquant
0080a70c g     F .text	00000068 __sseek
00807b78 g     F .text	000000a4 __sinit
0080a90c g     F .text	00000130 __swbuf_r
00808850 g     F .text	00000084 _setlocale_r
00807c78 g     F .text	00000068 __sfmoreglue
0080c55c g     F .text	00000020 __malloc_unlock
008175b8 g     O .bss	00000004 current_sector_modified
00801c10 g     F .text	00000080 GetInputString
00808b68 g     F .text	000000e0 memmove
00807c68 g     F .text	00000010 _cleanup
00809260 g     F .text	000000bc _Balloc
0080e3c0 g     F .text	0000006c alt_up_sd_card_is_Present
0080f81c g     F .text	000000bc Save_Modified_Sector
0080d6c0 g     F .text	000000c0 alt_up_pixel_buffer_dma_draw
008029e0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080d7b8 g     F .text	0000000c alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
008175b0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0081755c g     O .bss	00000004 edge_capture
00801f04 g     F .text	00000214 ceil
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080ad18 g     F .text	00000074 _fstat_r
00817570 g     O .bss	00000004 errno
00803e04 g     F .text	00000014 __srget
00817584 g     O .bss	00000004 alt_argv
0081d840 g       *ABS*	00000000 _gp
00812770 g     F .text	000002e8 alt_up_sd_card_fopen
0081167c g     F .text	000000dc alt_up_sd_card_find_first
0080d790 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
008175a4 g     O .bss	00000004 command_argument_register
008145e0 g     O .rwdata	00000180 alt_fd_list
008033d0 g     F .text	00000090 _getc_r
00803338 g     F .text	00000098 getc
00803cfc g     F .text	00000008 _putchar_r
0080edd4 g     F .text	000000b4 find_first_empty_record_in_root_directory
00812ce0 g     F .text	00000094 alt_find_dev
00803bc8 g     F .text	000000a0 memcpy
00807c5c g     F .text	0000000c _cleanup_r
0080bef0 g     F .text	000000f8 __floatsidf
00812ea4 g     F .text	00000104 alt_io_redirect
0080be68 g     F .text	00000088 __ltdf2
008135c0 g       *ABS*	00000000 __DTOR_END__
00803da4 g     F .text	00000014 puts
0080ee88 g     F .text	000000f4 find_first_empty_cluster
00813244 g     F .text	00000008 altera_nios2_irq_init
0080903c g     F .text	000000b0 __ratio
0080e42c g     F .text	0000006c alt_up_sd_card_open_dev
0080d780 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080cc68 g     F .text	0000016c altera_avalon_jtag_uart_read
00803474 g     F .text	00000014 malloc
00803cac g     F .text	00000034 _printf_r
00800a28 g     F .text	00000448 lossless_decode
0080c124 g     F .text	00000008 __udivsi3
0080c2d0 g     F .text	00000084 isatty
00813a60 g     O .rodata	000000c8 __mprec_tens
0080d1b4 g     F .text	00000168 alt_up_pixel_buffer_dma_draw_hline
0080882c g     F .text	00000008 __locale_charset
0081335c g     F .text	00000038 alt_icache_flush
00817564 g     O .bss	00000004 __malloc_top_pad
00815850 g     O .rwdata	00000004 __mb_cur_max
00808834 g     F .text	0000000c _localeconv_r
00809958 g     F .text	0000003c __i2b
00808210 g     F .text	0000049c __sfvwrite_r
0080e498 g     F .text	00000080 get_dir_divider_location
00803e18 g     F .text	00000070 _sbrk_r
0080cfe4 g     F .text	00000058 helper_plot_pixel
0080e624 g     F .text	0000005c filename_to_upper_case
0080e348 g     F .text	00000038 alt_up_sd_card_set_attributes
0080e8a4 g     F .text	000001e0 Read_File_Record_At_Offset
0080ae74 g     F .text	00000078 _read_r
008145ac g     O .rwdata	0000000c __lc_ctype
00815868 g     O .rwdata	00000004 alt_max_fd
00803100 g     F .text	00000138 __unpack_d
0080fcec g     F .text	00000cc4 find_file_in_directory
0080abf4 g     F .text	00000110 _fclose_r
00807adc g     F .text	00000034 fflush
00817568 g     O .bss	00000004 __malloc_max_sbrked_mem
0080f5ac g     F .text	00000138 alt_up_sd_card_is_FAT16
008025a8 g     F .text	00000074 __adddf3
00808f1c g     F .text	00000120 __b2d
0080d5f4 g     F .text	000000a8 alt_up_pixel_buffer_dma_clear_screen
0080b4c8 g     F .text	000005b0 __umoddi3
0080c440 g     F .text	0000009c lseek
008001d0 g     F .text	000000bc print_dct
00815844 g     O .rwdata	00000004 _global_impure_ptr
008109b0 g     F .text	00000ccc get_home_directory_cluster_for_file
00809ec0 g     F .text	000005f4 _realloc_r
00817dec g       *ABS*	00000000 __bss_end
00812e1c g     F .text	00000088 alt_iic_isr_register
0080d3e8 g     F .text	0000020c alt_up_pixel_buffer_dma_draw_box
0081315c g     F .text	000000e8 alt_tick
0080aeec g     F .text	000005dc __udivdi3
00813b28 g     O .rodata	00000028 __mprec_bigtens
00809bb4 g     F .text	00000120 __s2b
00802b40 g     F .text	00000194 __floatunsidf
00808e3c g     F .text	00000060 __mcmp
008175bc g     O .bss	00000004 current_sector_index
00807c44 g     F .text	00000018 __fp_lock_all
00812d80 g     F .text	00000018 alt_ic_irq_enabled
00813128 g     F .text	00000034 alt_alarm_stop
00801d50 g     F .text	000001b4 sd_card_create_sectors_list
0080f6e4 g     F .text	000000b0 mark_cluster
008009ac g     F .text	0000007c input_AC
008175c0 g     O .bss	00000004 alt_irq_active
00800e70 g     F .text	00000760 mjpeg423_decode
008000ec g     F .exceptions	00000098 alt_irq_handler
008145b8 g     O .rwdata	00000028 alt_dev_null
0080df30 g     F .text	000002e0 convert_filename_to_name_extension
00812aec g     F .text	00000018 alt_dcache_flush_all
00808d08 g     F .text	00000070 __hi0bits
00817590 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0080d31c g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
00802a68 g     F .text	000000d8 __fixdfsi
00811d38 g     F .text	0000032c find_first_empty_record_in_a_subdirectory
00815880 g       *ABS*	00000000 __ram_rwdata_end
00815860 g     O .rwdata	00000008 alt_dev_list
0080c710 g     F .text	00000118 write
00809dd8 g     F .text	000000e8 _putc_r
008175b4 g     O .bss	00000004 device_pointer
0080d7c4 g     F .text	0000029c alt_up_pixel_buffer_dma_draw_line
00813ba4 g       *ABS*	00000000 __ram_rodata_end
0080c240 g     F .text	00000090 fstat
00809a94 g     F .text	00000120 __pow5mult
00817574 g     O .bss	00000004 __nlocale_changed
0080c12c g     F .text	00000008 __umodsi3
00817dec g       *ABS*	00000000 end
0080ca58 g     F .text	00000080 altera_avalon_jtag_uart_init
008135bc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080cf58 g     F .text	00000050 alt_avalon_timer_sc_init
00802d6c g     F .text	00000080 __clzsi2
0080cdd4 g     F .text	00000184 altera_avalon_jtag_uart_write
00807b68 g     F .text	00000004 __sfp_lock_acquire
00808a84 g     F .text	000000e4 memchr
00803f54 g     F .text	00001eac ___vfprintf_internal_r
00807efc g     F .text	00000314 _free_r
00803db8 g     F .text	0000004c __srget_r
00805f64 g     F .text	000001b0 __call_exitprocs
00817578 g     O .bss	00000004 __mlocale_changed
0081584c g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000004c _start
008175c4 g     O .bss	00000004 _alt_tick_rate
0080028c g     F .text	000000c4 print_block
00800350 g     F .text	00000108 print_bitstream
00809624 g     F .text	0000014c __lshift
00801ce0 g     F .text	00000070 sd_card_start_read_sector
008175c8 g     O .bss	00000004 _alt_nticks
0080c57c g     F .text	0000011c read
0080c848 g     F .text	00000134 alt_sys_init
0081341c g     F .text	00000134 __register_exitproc
00809770 g     F .text	000001e8 __multiply
0080c9b8 g     F .text	00000048 altera_avalon_jtag_uart_close
00813ba4 g       *ABS*	00000000 __ram_rwdata_start
008135c0 g       *ABS*	00000000 __ram_rodata_start
008175cc g     O .bss	00000028 __malloc_current_mallinfo
0080931c g     F .text	0000017c __d2b
0081758c g     O .bss	00000004 initialized
0080c9a8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
008132fc g     F .text	00000060 alt_get_fd
008175f4 g     O .bss	00000014 search_data
00803238 g     F .text	000000c8 __fpcmp_parts_d
0080ab84 g     F .text	00000070 _close_r
008133a8 g     F .text	00000074 memcmp
0080c988 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00817dec g       *ABS*	00000000 __alt_stack_base
0080c97c g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00800478 g     F .text	00000404 idct
00805e24 g     F .text	0000013c __swsetup_r
0080ba78 g     F .text	00000258 __divdf3
00807ce0 g     F .text	000000f0 __sfp
00817608 g     O .bss	00000054 boot_sector_data
00809180 g     F .text	00000058 __copybits
008141a4 g     O .rwdata	00000408 __malloc_av_
00807b74 g     F .text	00000004 __sinit_lock_release
0080261c g     F .text	000003c4 __muldf3
0080a7f0 g     F .text	00000060 __sread
0081324c g     F .text	000000b0 alt_find_file
00812b04 g     F .text	000000b4 alt_dev_llist_insert
0080c53c g     F .text	00000020 __malloc_lock
0080c6bc g     F .text	00000054 sbrk
008078e0 g     F .text	000001fc _fflush_r
0080aad0 g     F .text	000000b4 _calloc_r
00800938 g     F .text	00000074 input_DC
0081755c g       *ABS*	00000000 __bss_start
00808c48 g     F .text	00000098 memset
00801ba8 g     F .text	00000068 main
00817588 g     O .bss	00000004 alt_envp
0081756c g     O .bss	00000004 __malloc_max_total_mem
0080d69c g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0080c998 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0080aa3c g     F .text	0000001c __swbuf
0080e380 g     F .text	00000040 alt_up_sd_card_get_attributes
0080ea84 g     F .text	000000ac Write_Sector_Data
008118fc g     F .text	0000043c alt_up_sd_card_write
0080a704 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ad04 g     F .text	00000014 fclose
00817c5c g     O .bss	00000190 _atexit0
0080632c g     F .text	000015b4 _dtoa_r
00803488 g     F .text	00000740 _malloc_r
0081586c g     O .rwdata	00000004 alt_errno
00801c90 g     F .text	00000024 sd_card_file_size
00808774 g     F .text	000000b8 _fwalk
00809cd4 g     F .text	00000104 putc
0080c064 g     F .text	00000060 __divsi3
00813880 g     O .rodata	00000014 __thenan_df
00807dd0 g     F .text	0000012c _malloc_trim_r
008135c0 g       *ABS*	00000000 __CTOR_END__
00817598 g     O .bss	00000004 status_register
0080a850 g     F .text	000000bc strcmp
008175a0 g     O .bss	00000004 command_register
008135c0 g       *ABS*	00000000 __flash_rodata_start
008135c0 g       *ABS*	00000000 __DTOR_LIST__
0080bd58 g     F .text	00000088 __nedf2
0080c828 g     F .text	00000020 alt_irq_init
0080c698 g     F .text	00000024 alt_release_fd
0080f794 g     F .text	00000088 get_cluster_flag
00813894 g     O .rodata	00000100 __clz_tab
0080e680 g     F .text	00000224 Write_File_Record_At_Offset
0081757c g     O .bss	00000004 _PathLocale
00813394 g     F .text	00000014 atexit
0080aa58 g     F .text	00000078 _write_r
008088d4 g     F .text	0000001c setlocale
0080ef7c g     F .text	00000370 Check_for_DOS_FAT
00812064 g     F .text	0000070c create_file
00815840 g     O .rwdata	00000004 _impure_ptr
0081759c g     O .bss	00000004 CSD_register_w0
00817580 g     O .bss	00000004 alt_argc
00812c7c g     F .text	00000064 _do_dtors
0080a4b4 g     F .text	000001c4 __srefill_r
00813ca4 g     O .rwdata	00000100 zigzag_table
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800458 g     F .text	00000020 error_and_exit
00808e9c g     F .text	00000080 __ulp
0080a694 g     F .text	00000040 __isinfd
00807c2c g     F .text	00000018 __fp_unlock_all
00815858 g     O .rwdata	00000008 alt_fs_list
0080e518 g     F .text	0000010c check_file_name_for_FAT16_compliance
008175a8 g     O .bss	00000004 buffer_memory
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808840 g     F .text	00000010 localeconv
00812e18 g     F .text	00000004 alt_ic_isr_register
008175ac g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00815880 g       *ABS*	00000000 _edata
0080087c g     F .text	000000bc update_buffer
00817dec g       *ABS*	00000000 _end
0081765c g     O .bss	00000500 active_files
00800184 g       *ABS*	00000000 __ram_exceptions_end
0080e210 g     F .text	00000138 copy_file_record_name_to_string
0080cbe0 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
0080f4b4 g     F .text	000000f8 Look_for_FAT16
00812dd8 g     F .text	00000040 alt_ic_irq_disable
0080a774 g     F .text	0000007c __swrite
00815848 g     O .rwdata	00000004 __malloc_trim_threshold
00803300 g     F .text	00000038 exit
0080f8d8 g     F .text	00000414 alt_up_sd_card_find_next
008086ac g     F .text	000000c8 _fwalk_reent
00809498 g     F .text	0000018c __mdiff
0080c0c4 g     F .text	00000060 __modsi3
0080eb30 g     F .text	00000144 Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807b6c g     F .text	00000004 __sfp_lock_release
0080a6d4 g     F .text	00000030 __isnand
0080c22c g     F .text	00000014 _exit
00812a58 g     F .text	00000094 alt_alarm_start
00802cd4 g     F .text	00000098 __muldi3
00811758 g     F .text	000001a4 alt_up_sd_card_read
008088f0 g     F .text	00000194 __smakebuf_r
00803e88 g     F .text	00000074 strlen
00812fa8 g     F .text	00000180 open
0080bde0 g     F .text	00000088 __gedf2
00812d74 g     F .text	0000000c alt_icache_flush_all
00815874 g     O .rwdata	00000004 alt_priority_mask
00813c24 g     O .rwdata	00000080 Cquant
00812d98 g     F .text	00000040 alt_ic_irq_enable
00805e00 g     F .text	00000024 __vfprintf_internal
00802528 g     F .text	00000080 __subdf3
00808d78 g     F .text	000000c4 __lo0bits
00815878 g     O .rwdata	00000008 alt_alarm_list
00812c18 g     F .text	00000064 _do_ctors
0080c134 g     F .text	000000f0 close
0080c354 g     F .text	00000080 alt_load
00802dec g     F .text	00000314 __pack_d
0080da60 g     F .text	000004d0 match_file_record_to_name_ext
00803460 g     F .text	00000014 free
00807b70 g     F .text	00000004 __sinit_lock_acquire
00809994 g     F .text	00000100 __multadd
00808ce0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002074 	movhi	r16,129
  800108:	841ed704 	addi	r16,r16,31580
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800184:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800188:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80018c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  800190:	00bffd16 	blt	zero,r2,800188 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001a0:	d6b61014 	ori	gp,gp,55360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001a8:	109d5714 	ori	r2,r2,30044

    movhi r3, %hi(__bss_end)
  8001ac:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001b0:	18df7b14 	ori	r3,r3,32236

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x40>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	080c3540 	call	80c354 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	080c4dc0 	call	80c4dc <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <print_dct>:
            else printf("%u\n", b[row][column]);
        } 
}

void print_dct(pdct_block_t b)
{
  8001d0:	defffd04 	addi	sp,sp,-12
  8001d4:	dc400115 	stw	r17,4(sp)
  8001d8:	dc000015 	stw	r16,0(sp)
  8001dc:	dfc00215 	stw	ra,8(sp)
  8001e0:	2021883a 	mov	r16,r4
  8001e4:	0023883a 	mov	r17,zero
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8001e8:	8140000f 	ldh	r5,0(r16)
  8001ec:	01002074 	movhi	r4,129
  8001f0:	210d7004 	addi	r4,r4,13760
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  8001f4:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8001f8:	0803c680 	call	803c68 <printf>
  8001fc:	8140008f 	ldh	r5,2(r16)
  800200:	01002074 	movhi	r4,129
  800204:	210d7004 	addi	r4,r4,13760
  800208:	0803c680 	call	803c68 <printf>
  80020c:	8140010f 	ldh	r5,4(r16)
  800210:	01002074 	movhi	r4,129
  800214:	210d7004 	addi	r4,r4,13760
  800218:	0803c680 	call	803c68 <printf>
  80021c:	8140018f 	ldh	r5,6(r16)
  800220:	01002074 	movhi	r4,129
  800224:	210d7004 	addi	r4,r4,13760
  800228:	0803c680 	call	803c68 <printf>
  80022c:	8140020f 	ldh	r5,8(r16)
  800230:	01002074 	movhi	r4,129
  800234:	210d7004 	addi	r4,r4,13760
  800238:	0803c680 	call	803c68 <printf>
  80023c:	8140028f 	ldh	r5,10(r16)
  800240:	01002074 	movhi	r4,129
  800244:	210d7004 	addi	r4,r4,13760
  800248:	0803c680 	call	803c68 <printf>
  80024c:	8140030f 	ldh	r5,12(r16)
  800250:	01002074 	movhi	r4,129
  800254:	210d7004 	addi	r4,r4,13760
  800258:	0803c680 	call	803c68 <printf>
            else printf("%d\n", b[row][column]);
  80025c:	8140038f 	ldh	r5,14(r16)
  800260:	01002074 	movhi	r4,129
  800264:	210d7104 	addi	r4,r4,13764
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800268:	84000404 	addi	r16,r16,16
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
  80026c:	0803c680 	call	803c68 <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800270:	00c00204 	movi	r3,8
  800274:	88ffdc1e 	bne	r17,r3,8001e8 <print_dct+0x18>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
  800278:	dfc00217 	ldw	ra,8(sp)
  80027c:	dc400117 	ldw	r17,4(sp)
  800280:	dc000017 	ldw	r16,0(sp)
  800284:	dec00304 	addi	sp,sp,12
  800288:	f800283a 	ret

0080028c <print_block>:
    printf("Error: %s\n", str);
    exit(-1);
}

void print_block(pcolor_block_t b)
{
  80028c:	defffc04 	addi	sp,sp,-16
  800290:	dc800215 	stw	r18,8(sp)
  800294:	dc400115 	stw	r17,4(sp)
  800298:	dc000015 	stw	r16,0(sp)
  80029c:	dfc00315 	stw	ra,12(sp)
  8002a0:	2021883a 	mov	r16,r4
  8002a4:	0023883a 	mov	r17,zero
  8002a8:	04800204 	movi	r18,8
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8002ac:	81400003 	ldbu	r5,0(r16)
  8002b0:	01002074 	movhi	r4,129
  8002b4:	210d7004 	addi	r4,r4,13760
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  8002b8:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8002bc:	0803c680 	call	803c68 <printf>
  8002c0:	81400043 	ldbu	r5,1(r16)
  8002c4:	01002074 	movhi	r4,129
  8002c8:	210d7004 	addi	r4,r4,13760
  8002cc:	0803c680 	call	803c68 <printf>
  8002d0:	81400083 	ldbu	r5,2(r16)
  8002d4:	01002074 	movhi	r4,129
  8002d8:	210d7004 	addi	r4,r4,13760
  8002dc:	0803c680 	call	803c68 <printf>
  8002e0:	814000c3 	ldbu	r5,3(r16)
  8002e4:	01002074 	movhi	r4,129
  8002e8:	210d7004 	addi	r4,r4,13760
  8002ec:	0803c680 	call	803c68 <printf>
  8002f0:	81400103 	ldbu	r5,4(r16)
  8002f4:	01002074 	movhi	r4,129
  8002f8:	210d7004 	addi	r4,r4,13760
  8002fc:	0803c680 	call	803c68 <printf>
  800300:	81400143 	ldbu	r5,5(r16)
  800304:	01002074 	movhi	r4,129
  800308:	210d7004 	addi	r4,r4,13760
  80030c:	0803c680 	call	803c68 <printf>
  800310:	81400183 	ldbu	r5,6(r16)
  800314:	01002074 	movhi	r4,129
  800318:	210d7004 	addi	r4,r4,13760
  80031c:	0803c680 	call	803c68 <printf>
            else printf("%u\n", b[row][column]);
  800320:	814001c3 	ldbu	r5,7(r16)
  800324:	01002074 	movhi	r4,129
  800328:	210d7204 	addi	r4,r4,13768
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  80032c:	84000204 	addi	r16,r16,8
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
  800330:	0803c680 	call	803c68 <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  800334:	8cbfdd1e 	bne	r17,r18,8002ac <print_block+0x20>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
  800338:	dfc00317 	ldw	ra,12(sp)
  80033c:	dc800217 	ldw	r18,8(sp)
  800340:	dc400117 	ldw	r17,4(sp)
  800344:	dc000017 	ldw	r16,0(sp)
  800348:	dec00404 	addi	sp,sp,16
  80034c:	f800283a 	ret

00800350 <print_bitstream>:
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
  800350:	defffd04 	addi	sp,sp,-12
  800354:	dfc00215 	stw	ra,8(sp)
  800358:	dc400115 	stw	r17,4(sp)
  80035c:	dc000015 	stw	r16,0(sp)
    for (int index = 0; index < num_bytes; index++)
  800360:	0100370e 	bge	zero,r4,800440 <print_bitstream+0xf0>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800364:	2821883a 	mov	r16,r5
  800368:	2923883a 	add	r17,r5,r4

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
  80036c:	81400003 	ldbu	r5,0(r16)
  800370:	01002074 	movhi	r4,129
  800374:	210d7304 	addi	r4,r4,13772
  800378:	280ad1fa 	srli	r5,r5,7
  80037c:	0803c680 	call	803c68 <printf>
  800380:	81400003 	ldbu	r5,0(r16)
  800384:	01002074 	movhi	r4,129
  800388:	210d7304 	addi	r4,r4,13772
  80038c:	294b883a 	add	r5,r5,r5
  800390:	29403fcc 	andi	r5,r5,255
  800394:	280ad1fa 	srli	r5,r5,7
  800398:	0803c680 	call	803c68 <printf>
  80039c:	81400003 	ldbu	r5,0(r16)
  8003a0:	01002074 	movhi	r4,129
  8003a4:	210d7304 	addi	r4,r4,13772
  8003a8:	294b883a 	add	r5,r5,r5
  8003ac:	294b883a 	add	r5,r5,r5
  8003b0:	29403fcc 	andi	r5,r5,255
  8003b4:	280ad1fa 	srli	r5,r5,7
  8003b8:	0803c680 	call	803c68 <printf>
  8003bc:	81400003 	ldbu	r5,0(r16)
  8003c0:	01002074 	movhi	r4,129
  8003c4:	210d7304 	addi	r4,r4,13772
  8003c8:	280ad13a 	srli	r5,r5,4
  8003cc:	2940004c 	andi	r5,r5,1
  8003d0:	0803c680 	call	803c68 <printf>
  8003d4:	81400003 	ldbu	r5,0(r16)
  8003d8:	01002074 	movhi	r4,129
  8003dc:	210d7304 	addi	r4,r4,13772
  8003e0:	280ad0fa 	srli	r5,r5,3
  8003e4:	2940004c 	andi	r5,r5,1
  8003e8:	0803c680 	call	803c68 <printf>
  8003ec:	81400003 	ldbu	r5,0(r16)
  8003f0:	01002074 	movhi	r4,129
  8003f4:	210d7304 	addi	r4,r4,13772
  8003f8:	280ad0ba 	srli	r5,r5,2
  8003fc:	2940004c 	andi	r5,r5,1
  800400:	0803c680 	call	803c68 <printf>
  800404:	81400003 	ldbu	r5,0(r16)
  800408:	01002074 	movhi	r4,129
  80040c:	210d7304 	addi	r4,r4,13772
  800410:	280ad07a 	srli	r5,r5,1
  800414:	2940004c 	andi	r5,r5,1
  800418:	0803c680 	call	803c68 <printf>
  80041c:	81400003 	ldbu	r5,0(r16)
  800420:	01002074 	movhi	r4,129
  800424:	210d7304 	addi	r4,r4,13772
  800428:	84000044 	addi	r16,r16,1
  80042c:	280a91fa 	slli	r5,r5,7
  800430:	29403fcc 	andi	r5,r5,255
  800434:	280ac03a 	cmpne	r5,r5,zero
  800438:	0803c680 	call	803c68 <printf>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
  80043c:	8c3fcb1e 	bne	r17,r16,80036c <print_bitstream+0x1c>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800440:	01000284 	movi	r4,10
}
  800444:	dfc00217 	ldw	ra,8(sp)
  800448:	dc400117 	ldw	r17,4(sp)
  80044c:	dc000017 	ldw	r16,0(sp)
  800450:	dec00304 	addi	sp,sp,12
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800454:	0803ce01 	jmpi	803ce0 <putchar>

00800458 <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800458:	deffff04 	addi	sp,sp,-4
  80045c:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
  800460:	01002074 	movhi	r4,129
  800464:	210d7404 	addi	r4,r4,13776

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800468:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
  80046c:	0803c680 	call	803c68 <printf>
    exit(-1);
  800470:	013fffc4 	movi	r4,-1
  800474:	08033000 	call	803300 <exit>

00800478 <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
  800478:	deffb904 	addi	sp,sp,-284
  80047c:	dd004415 	stw	r20,272(sp)
  800480:	dcc04315 	stw	r19,268(sp)
  800484:	dc804215 	stw	r18,264(sp)
  800488:	dc404115 	stw	r17,260(sp)
  80048c:	dd804615 	stw	r22,280(sp)
  800490:	dd404515 	stw	r21,276(sp)
  800494:	dc004015 	stw	r16,256(sp)
  800498:	2829883a 	mov	r20,r5
    
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
  80049c:	2023883a 	mov	r17,r4
  8004a0:	d825883a 	mov	r18,sp
  8004a4:	dcc00804 	addi	r19,sp,32
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
  8004a8:	8a401c0f 	ldh	r9,112(r17)
        tmp1 =inptr[DCTSIZE*5];
  8004ac:	8a80140f 	ldh	r10,80(r17)
        tmp2 = inptr[DCTSIZE*3];
  8004b0:	89c00c0f 	ldh	r7,48(r17)
        tmp3 = inptr[DCTSIZE*1];
  8004b4:	8980040f 	ldh	r6,16(r17)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
  8004b8:	88c0080f 	ldh	r3,32(r17)
        z3 = inptr[DCTSIZE*6];
  8004bc:	8b80180f 	ldh	r14,96(r17)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
  8004c0:	8a00000f 	ldh	r8,0(r17)
        z3 = inptr[DCTSIZE*4];
  8004c4:	8c00100f 	ldh	r16,64(r17)
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
  8004c8:	49d9883a 	add	r12,r9,r7
        z4 = tmp1 + tmp3;
  8004cc:	518b883a 	add	r5,r10,r6
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  8004d0:	1b85883a 	add	r2,r3,r14
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
  8004d4:	4997883a 	add	r11,r9,r6
        z2 = tmp1 + tmp2;
  8004d8:	51db883a 	add	r13,r10,r7
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  8004dc:	6149883a 	add	r4,r12,r5
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
  8004e0:	5af8cce4 	muli	r11,r11,-7373
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
  8004e4:	6b6b7f64 	muli	r13,r13,-20995
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
  8004e8:	441fc83a 	sub	r15,r8,r16
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  8004ec:	10845464 	muli	r2,r2,4433
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  8004f0:	21096864 	muli	r4,r4,9633
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
  8004f4:	63304ee4 	muli	r12,r12,-16069
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  8004f8:	73b137e4 	muli	r14,r14,-15137
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  8004fc:	18c61fa4 	muli	r3,r3,6270
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
  800500:	297ce124 	muli	r5,r5,-3196
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  800504:	4a4263a4 	muli	r9,r9,2446
        tmp1 += z2 + z4;
  800508:	52906ce4 	muli	r10,r10,16819
        tmp2 += z2 + z3;
  80050c:	39d89524 	muli	r7,r7,25172
        tmp3 += z1 + z4;
  800510:	318c02e4 	muli	r6,r6,12299
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
  800514:	4411883a 	add	r8,r8,r16
  800518:	4010937a 	slli	r8,r8,13
        tmp1 = (z2 - z3) << CONST_BITS;
  80051c:	781e937a 	slli	r15,r15,13
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  800520:	10c7883a 	add	r3,r2,r3
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
  800524:	214b883a 	add	r5,r4,r5
        
        tmp0 += z1 + z3;
  800528:	4ad3883a 	add	r9,r9,r11
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
  80052c:	2309883a 	add	r4,r4,r12
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
  800530:	5355883a 	add	r10,r10,r13
        tmp2 += z2 + z3;
  800534:	3b4f883a 	add	r7,r7,r13
        tmp3 += z1 + z4;
  800538:	32cd883a 	add	r6,r6,r11
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  80053c:	1385883a 	add	r2,r2,r14
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
  800540:	40d9c83a 	sub	r12,r8,r3
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
  800544:	7897c83a 	sub	r11,r15,r2
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
  800548:	21cf883a 	add	r7,r4,r7
        tmp3 += z1 + z4;
  80054c:	298d883a 	add	r6,r5,r6
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  800550:	2249883a 	add	r4,r4,r9
        tmp1 += z2 + z4;
  800554:	2a8b883a 	add	r5,r5,r10
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
  800558:	1a07883a 	add	r3,r3,r8
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
  80055c:	13c5883a 	add	r2,r2,r15
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  800560:	1991c83a 	sub	r8,r3,r6
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  800564:	11d3c83a 	sub	r9,r2,r7
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  800568:	5955c83a 	sub	r10,r11,r5
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  80056c:	611bc83a 	sub	r13,r12,r4
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  800570:	18c10004 	addi	r3,r3,1024
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  800574:	10810004 	addi	r2,r2,1024
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  800578:	5ac10004 	addi	r11,r11,1024
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  80057c:	63010004 	addi	r12,r12,1024
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  800580:	30cd883a 	add	r6,r6,r3
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  800584:	42010004 	addi	r8,r8,1024
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  800588:	388f883a 	add	r7,r7,r2
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  80058c:	4a410004 	addi	r9,r9,1024
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  800590:	2acb883a 	add	r5,r5,r11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  800594:	52810004 	addi	r10,r10,1024
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  800598:	2309883a 	add	r4,r4,r12
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  80059c:	6b410004 	addi	r13,r13,1024
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  8005a0:	300dd2fa 	srai	r6,r6,11
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  8005a4:	4011d2fa 	srai	r8,r8,11
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  8005a8:	380fd2fa 	srai	r7,r7,11
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  8005ac:	4813d2fa 	srai	r9,r9,11
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  8005b0:	280bd2fa 	srai	r5,r5,11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  8005b4:	5015d2fa 	srai	r10,r10,11
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  8005b8:	2009d2fa 	srai	r4,r4,11
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  8005bc:	681bd2fa 	srai	r13,r13,11
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  8005c0:	91800015 	stw	r6,0(r18)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  8005c4:	92003815 	stw	r8,224(r18)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  8005c8:	91c00815 	stw	r7,32(r18)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  8005cc:	92403015 	stw	r9,192(r18)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  8005d0:	91401015 	stw	r5,64(r18)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  8005d4:	92802815 	stw	r10,160(r18)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  8005d8:	91001815 	stw	r4,96(r18)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  8005dc:	93402015 	stw	r13,128(r18)
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
  8005e0:	94800104 	addi	r18,r18,4
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
  8005e4:	8c400084 	addi	r17,r17,2
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
  8005e8:	9cbfaf1e 	bne	r19,r18,8004a8 <idct+0x30>
  8005ec:	a023883a 	mov	r17,r20
  8005f0:	d825883a 	mov	r18,sp
  8005f4:	dd803804 	addi	r22,sp,224
  8005f8:	054000b4 	movhi	r21,2
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
  8005fc:	92800717 	ldw	r10,28(r18)
        tmp1 = (int32_t) wsptr[5];
  800600:	92c00517 	ldw	r11,20(r18)
        tmp2 = (int32_t) wsptr[3];
  800604:	92400317 	ldw	r9,12(r18)
        tmp3 = (int32_t) wsptr[1];
  800608:	90800117 	ldw	r2,4(r18)
        outptr = block[ctr];
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
  80060c:	91c00217 	ldw	r7,8(r18)
        z3 = (int32_t) wsptr[6];
  800610:	93c00617 	ldw	r15,24(r18)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
  800614:	92000017 	ldw	r8,0(r18)
  800618:	94000417 	ldw	r16,16(r18)
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
  80061c:	525d883a 	add	r14,r10,r9
        z4 = tmp1 + tmp3;
  800620:	5889883a 	add	r4,r11,r2
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  800624:	3bcb883a 	add	r5,r7,r15
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
  800628:	5099883a 	add	r12,r10,r2
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  80062c:	7107883a 	add	r3,r14,r4
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  800630:	29445464 	muli	r5,r5,4433
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
  800634:	441b883a 	add	r13,r8,r16
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  800638:	39c61fa4 	muli	r7,r7,6270
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
  80063c:	681a937a 	slli	r13,r13,13
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
  800640:	6338cce4 	muli	r12,r12,-7373
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  800644:	18c96864 	muli	r3,r3,9633
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
  800648:	213ce124 	muli	r4,r4,-3196
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
  80064c:	108c02e4 	muli	r2,r2,12299
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  800650:	29cf883a 	add	r7,r5,r7
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
  800654:	1909883a 	add	r4,r3,r4
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
  800658:	1305883a 	add	r2,r2,r12
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
  80065c:	3b69883a 	add	r20,r7,r13
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
  800660:	5a4d883a 	add	r6,r11,r9
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
  800664:	20a7883a 	add	r19,r4,r2
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800668:	a545883a 	add	r2,r20,r21
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
  80066c:	31ab7f64 	muli	r6,r6,-20995
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
  800670:	73b04ee4 	muli	r14,r14,-16069
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
  800674:	4411c83a 	sub	r8,r8,r16
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  800678:	7bf137e4 	muli	r15,r15,-15137
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  80067c:	528263a4 	muli	r10,r10,2446
        tmp1 += z2 + z4;
  800680:	5ad06ce4 	muli	r11,r11,16819
        tmp2 += z2 + z3;
  800684:	4a589524 	muli	r9,r9,25172
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800688:	9885883a 	add	r2,r19,r2
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
  80068c:	4010937a 	slli	r8,r8,13
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800690:	1005d4ba 	srai	r2,r2,18
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
  800694:	1b87883a 	add	r3,r3,r14
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
  800698:	4993883a 	add	r9,r9,r6
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  80069c:	2bcb883a 	add	r5,r5,r15
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  8006a0:	5315883a 	add	r10,r10,r12
        tmp1 += z2 + z4;
  8006a4:	5997883a 	add	r11,r11,r6
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
  8006a8:	69ddc83a 	sub	r14,r13,r7
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
  8006ac:	4159c83a 	sub	r12,r8,r5
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
  8006b0:	1a4f883a 	add	r7,r3,r9
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  8006b4:	1a9b883a 	add	r13,r3,r10
        tmp1 += z2 + z4;
  8006b8:	22d3883a 	add	r9,r4,r11
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
  8006bc:	2a0b883a 	add	r5,r5,r8
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  8006c0:	10006c16 	blt	r2,zero,800874 <idct+0x3fc>
  8006c4:	01803fc4 	movi	r6,255
  8006c8:	3080010e 	bge	r6,r2,8006d0 <idct+0x258>
  8006cc:	3005883a 	mov	r2,r6
  8006d0:	100d883a 	mov	r6,r2
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  8006d4:	a4c5c83a 	sub	r2,r20,r19
  8006d8:	1545883a 	add	r2,r2,r21
  8006dc:	1005d4ba 	srai	r2,r2,18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  8006e0:	89800005 	stb	r6,0(r17)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  8006e4:	10006116 	blt	r2,zero,80086c <idct+0x3f4>
  8006e8:	01803fc4 	movi	r6,255
  8006ec:	3080010e 	bge	r6,r2,8006f4 <idct+0x27c>
  8006f0:	3005883a 	mov	r2,r6
  8006f4:	1009883a 	mov	r4,r2
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  8006f8:	2d45883a 	add	r2,r5,r21
  8006fc:	3885883a 	add	r2,r7,r2
  800700:	1005d4ba 	srai	r2,r2,18
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  800704:	890001c5 	stb	r4,7(r17)
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  800708:	10005616 	blt	r2,zero,800864 <idct+0x3ec>
  80070c:	01803fc4 	movi	r6,255
  800710:	3080010e 	bge	r6,r2,800718 <idct+0x2a0>
  800714:	3005883a 	mov	r2,r6
  800718:	100d883a 	mov	r6,r2
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  80071c:	29c5c83a 	sub	r2,r5,r7
  800720:	1545883a 	add	r2,r2,r21
  800724:	1005d4ba 	srai	r2,r2,18
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  800728:	89800045 	stb	r6,1(r17)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  80072c:	10003916 	blt	r2,zero,800814 <idct+0x39c>
  800730:	01403fc4 	movi	r5,255
  800734:	2880010e 	bge	r5,r2,80073c <idct+0x2c4>
  800738:	2805883a 	mov	r2,r5
  80073c:	1007883a 	mov	r3,r2
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800740:	6545883a 	add	r2,r12,r21
  800744:	4885883a 	add	r2,r9,r2
  800748:	1005d4ba 	srai	r2,r2,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  80074c:	88c00185 	stb	r3,6(r17)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800750:	10003616 	blt	r2,zero,80082c <idct+0x3b4>
  800754:	01403fc4 	movi	r5,255
  800758:	2880010e 	bge	r5,r2,800760 <idct+0x2e8>
  80075c:	2805883a 	mov	r2,r5
  800760:	100b883a 	mov	r5,r2
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800764:	6245c83a 	sub	r2,r12,r9
  800768:	1545883a 	add	r2,r2,r21
  80076c:	1005d4ba 	srai	r2,r2,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800770:	89400085 	stb	r5,2(r17)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800774:	10003316 	blt	r2,zero,800844 <idct+0x3cc>
  800778:	01003fc4 	movi	r4,255
  80077c:	2080010e 	bge	r4,r2,800784 <idct+0x30c>
  800780:	2005883a 	mov	r2,r4
  800784:	1009883a 	mov	r4,r2
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800788:	7545883a 	add	r2,r14,r21
  80078c:	6885883a 	add	r2,r13,r2
  800790:	1005d4ba 	srai	r2,r2,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800794:	89000145 	stb	r4,5(r17)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800798:	10003016 	blt	r2,zero,80085c <idct+0x3e4>
  80079c:	01003fc4 	movi	r4,255
  8007a0:	2080010e 	bge	r4,r2,8007a8 <idct+0x330>
  8007a4:	2005883a 	mov	r2,r4
  8007a8:	1009883a 	mov	r4,r2
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
  8007ac:	7345c83a 	sub	r2,r14,r13
  8007b0:	1545883a 	add	r2,r2,r21
  8007b4:	1005d4ba 	srai	r2,r2,18
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  8007b8:	890000c5 	stb	r4,3(r17)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
  8007bc:	10000816 	blt	r2,zero,8007e0 <idct+0x368>
  8007c0:	00c03fc4 	movi	r3,255
  8007c4:	1880010e 	bge	r3,r2,8007cc <idct+0x354>
  8007c8:	1805883a 	mov	r2,r3
  8007cc:	88800105 	stb	r2,4(r17)
  8007d0:	8c400204 	addi	r17,r17,8
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
  8007d4:	b4800626 	beq	r22,r18,8007f0 <idct+0x378>
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
  8007d8:	94800804 	addi	r18,r18,32
  8007dc:	003f8706 	br	8005fc <idct+0x184>
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
  8007e0:	0005883a 	mov	r2,zero
  8007e4:	88800105 	stb	r2,4(r17)
  8007e8:	8c400204 	addi	r17,r17,8
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
  8007ec:	b4bffa1e 	bne	r22,r18,8007d8 <idct+0x360>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
  8007f0:	dd804617 	ldw	r22,280(sp)
  8007f4:	dd404517 	ldw	r21,276(sp)
  8007f8:	dd004417 	ldw	r20,272(sp)
  8007fc:	dcc04317 	ldw	r19,268(sp)
  800800:	dc804217 	ldw	r18,264(sp)
  800804:	dc404117 	ldw	r17,260(sp)
  800808:	dc004017 	ldw	r16,256(sp)
  80080c:	dec04704 	addi	sp,sp,284
  800810:	f800283a 	ret
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800814:	6545883a 	add	r2,r12,r21
  800818:	4885883a 	add	r2,r9,r2
  80081c:	1005d4ba 	srai	r2,r2,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  800820:	0007883a 	mov	r3,zero
  800824:	88c00185 	stb	r3,6(r17)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800828:	103fca0e 	bge	r2,zero,800754 <idct+0x2dc>
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  80082c:	6245c83a 	sub	r2,r12,r9
  800830:	1545883a 	add	r2,r2,r21
  800834:	1005d4ba 	srai	r2,r2,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800838:	000b883a 	mov	r5,zero
  80083c:	89400085 	stb	r5,2(r17)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800840:	103fcd0e 	bge	r2,zero,800778 <idct+0x300>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800844:	7545883a 	add	r2,r14,r21
  800848:	6885883a 	add	r2,r13,r2
  80084c:	1005d4ba 	srai	r2,r2,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800850:	0009883a 	mov	r4,zero
  800854:	89000145 	stb	r4,5(r17)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800858:	103fd00e 	bge	r2,zero,80079c <idct+0x324>
  80085c:	0009883a 	mov	r4,zero
  800860:	003fd206 	br	8007ac <idct+0x334>
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  800864:	000d883a 	mov	r6,zero
  800868:	003fac06 	br	80071c <idct+0x2a4>
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  80086c:	0009883a 	mov	r4,zero
  800870:	003fa106 	br	8006f8 <idct+0x280>
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800874:	000d883a 	mov	r6,zero
  800878:	003f9606 	br	8006d4 <idct+0x25c>

0080087c <update_buffer>:
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  80087c:	20c00017 	ldw	r3,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  800880:	30800017 	ldw	r2,0(r6)
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800884:	39c03fcc 	andi	r7,r7,255
  800888:	19d2983a 	sll	r9,r3,r7
    //total number of bits to be shifted in
    *pbitcount += size;
  80088c:	388f883a 	add	r7,r7,r2
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800890:	008001c4 	movi	r2,7
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800894:	3abffe04 	addi	r10,r7,-8
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800898:	3b4001cc 	andi	r13,r7,7
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  80089c:	22400015 	stw	r9,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  8008a0:	31c00015 	stw	r7,0(r6)
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8008a4:	11c01c0e 	bge	r2,r7,800918 <update_buffer+0x9c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008a8:	2a000017 	ldw	r8,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008ac:	3b3ffc04 	addi	r12,r7,-16
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008b0:	40800003 	ldbu	r2,0(r8)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008b4:	40c00044 	addi	r3,r8,1
  8008b8:	28c00015 	stw	r3,0(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008bc:	1284983a 	sll	r2,r2,r10
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008c0:	42c00084 	addi	r11,r8,2
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008c4:	4886b03a 	or	r3,r9,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8008c8:	008003c4 	movi	r2,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008cc:	20c00015 	stw	r3,0(r4)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8008d0:	11c0110e 	bge	r2,r7,800918 <update_buffer+0x9c>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008d4:	40800043 	ldbu	r2,1(r8)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8008d8:	3abffa04 	addi	r10,r7,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008dc:	424000c4 	addi	r9,r8,3
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008e0:	1304983a 	sll	r2,r2,r12
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008e4:	2ac00015 	stw	r11,0(r5)
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008e8:	1886b03a 	or	r3,r3,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8008ec:	008005c4 	movi	r2,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008f0:	20c00015 	stw	r3,0(r4)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8008f4:	11c0080e 	bge	r2,r7,800918 <update_buffer+0x9c>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8008f8:	40800083 	ldbu	r2,2(r8)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008fc:	42c00104 	addi	r11,r8,4
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800900:	2a400015 	stw	r9,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800904:	1284983a 	sll	r2,r2,r10
  800908:	1886b03a 	or	r3,r3,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  80090c:	00800804 	movi	r2,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800910:	20c00015 	stw	r3,0(r4)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800914:	38800226 	beq	r7,r2,800920 <update_buffer+0xa4>
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800918:	33400015 	stw	r13,0(r6)
}
  80091c:	f800283a 	ret
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800920:	408000c3 	ldbu	r2,3(r8)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800924:	2ac00015 	stw	r11,0(r5)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800928:	33400015 	stw	r13,0(r6)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  80092c:	1884b03a 	or	r2,r3,r2
  800930:	20800015 	stw	r2,0(r4)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
}
  800934:	f800283a 	ret

00800938 <input_DC>:
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800938:	2006913a 	slli	r3,r4,4

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  80093c:	2008d73a 	srli	r4,r4,28
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800940:	00800804 	movi	r2,32
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
  800944:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800948:	21403fcc 	andi	r5,r4,255
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  80094c:	1145c83a 	sub	r2,r2,r5
  800950:	188cd83a 	srl	r6,r3,r2
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800954:	02000104 	movi	r8,4
  800958:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  80095c:	28bfffc4 	addi	r2,r5,-1
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800960:	28000626 	beq	r5,zero,80097c <input_DC+0x44>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800964:	3086d83a 	srl	r3,r6,r2
  800968:	00bfffc4 	movi	r2,-1
  80096c:	300f883a 	mov	r7,r6
  800970:	1144983a 	sll	r2,r2,r5
  800974:	18000a26 	beq	r3,zero,8009a0 <input_DC+0x68>
        ib.bits = size + 4;
  800978:	22000104 	addi	r8,r4,4
    }
    return ib;
  80097c:	d8800045 	stb	r2,1(sp)
  800980:	da000005 	stb	r8,0(sp)
  800984:	38bfffcc 	andi	r2,r7,65535
  800988:	d8c0000b 	ldhu	r3,0(sp)
  80098c:	1004943a 	slli	r2,r2,16
  800990:	d9c0008d 	sth	r7,2(sp)
}
  800994:	1884b03a 	or	r2,r3,r2
  800998:	dec00104 	addi	sp,sp,4
  80099c:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009a0:	10800044 	addi	r2,r2,1
  8009a4:	308f883a 	add	r7,r6,r2
  8009a8:	003ff306 	br	800978 <input_DC+0x40>

008009ac <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  8009ac:	2004913a 	slli	r2,r4,4
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009b0:	2006923a 	slli	r3,r4,8
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
  8009b4:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  8009b8:	1010d73a 	srli	r8,r2,28
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009bc:	00800804 	movi	r2,32
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8009c0:	02400204 	movi	r9,8
  8009c4:	41403fcc 	andi	r5,r8,255
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009c8:	1145c83a 	sub	r2,r2,r5
  8009cc:	188cd83a 	srl	r6,r3,r2
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8009d0:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009d4:	28ffffc4 	addi	r3,r5,-1
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8009d8:	28000726 	beq	r5,zero,8009f8 <input_AC+0x4c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009dc:	00bfffc4 	movi	r2,-1
  8009e0:	1144983a 	sll	r2,r2,r5
  8009e4:	30c6d83a 	srl	r3,r6,r3
  8009e8:	300f883a 	mov	r7,r6
  8009ec:	10800044 	addi	r2,r2,1
  8009f0:	18000b26 	beq	r3,zero,800a20 <input_AC+0x74>
        ib.bits = size + 8;
  8009f4:	42400204 	addi	r9,r8,8
    }
    return ib;
  8009f8:	2004d73a 	srli	r2,r4,28
  8009fc:	38ffffcc 	andi	r3,r7,65535
  800a00:	da400005 	stb	r9,0(sp)
  800a04:	d8800045 	stb	r2,1(sp)
  800a08:	1806943a 	slli	r3,r3,16
  800a0c:	d880000b 	ldhu	r2,0(sp)
  800a10:	d9c0008d 	sth	r7,2(sp)
}
  800a14:	10c4b03a 	or	r2,r2,r3
  800a18:	dec00104 	addi	sp,sp,4
  800a1c:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a20:	308f883a 	add	r7,r6,r2
  800a24:	003ff306 	br	8009f4 <input_AC+0x48>

00800a28 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800a28:	defffa04 	addi	sp,sp,-24
  800a2c:	dd400515 	stw	r21,20(sp)
  800a30:	dd000415 	stw	r20,16(sp)
  800a34:	dcc00315 	stw	r19,12(sp)
  800a38:	dc800215 	stw	r18,8(sp)
  800a3c:	dc400115 	stw	r17,4(sp)
  800a40:	dc000015 	stw	r16,0(sp)
  800a44:	2029883a 	mov	r20,r4
  800a48:	2811883a 	mov	r8,r5
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a4c:	29000003 	ldbu	r4,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a50:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a54:	28800083 	ldbu	r2,2(r5)
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800a58:	dd400617 	ldw	r21,24(sp)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a5c:	294000c3 	ldbu	r5,3(r5)
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800a60:	0500b70e 	bge	zero,r20,800d40 <lossless_decode+0x318>
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a64:	18c03fcc 	andi	r3,r3,255
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a68:	2008963a 	slli	r4,r4,24
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a6c:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a70:	10803fcc 	andi	r2,r2,255
  800a74:	1004923a 	slli	r2,r2,8
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a78:	20c8b03a 	or	r4,r4,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a7c:	29403fcc 	andi	r5,r5,255
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a80:	2088b03a 	or	r4,r4,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a84:	214ab03a 	or	r5,r4,r5
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a88:	43000104 	addi	r12,r8,4
  800a8c:	0027883a 	mov	r19,zero
  800a90:	0025883a 	mov	r18,zero
  800a94:	001d883a 	mov	r14,zero
  800a98:	a81f003a 	cmpeq	r15,r21,zero

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  800a9c:	2812d73a 	srli	r9,r5,28
    if(size == 0){
  800aa0:	4a003fcc 	andi	r8,r9,255
  800aa4:	4000d41e 	bne	r8,zero,800df8 <lossless_decode+0x3d0>
  800aa8:	0009883a 	mov	r4,zero
  800aac:	00800104 	movi	r2,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800ab0:	1391883a 	add	r8,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800ab4:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800ab8:	008001c4 	movi	r2,7
  800abc:	1200160e 	bge	r2,r8,800b18 <lossless_decode+0xf0>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800ac0:	60800003 	ldbu	r2,0(r12)
  800ac4:	40fffe04 	addi	r3,r8,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ac8:	62400044 	addi	r9,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800acc:	10c4983a 	sll	r2,r2,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800ad0:	00c003c4 	movi	r3,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800ad4:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800ad8:	1a000e0e 	bge	r3,r8,800b14 <lossless_decode+0xec>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800adc:	60800043 	ldbu	r2,1(r12)
  800ae0:	40fffc04 	addi	r3,r8,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ae4:	62400084 	addi	r9,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800ae8:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800aec:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800af0:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800af4:	1a00070e 	bge	r3,r8,800b14 <lossless_decode+0xec>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800af8:	60800083 	ldbu	r2,2(r12)
  800afc:	40fffa04 	addi	r3,r8,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b00:	624000c4 	addi	r9,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b04:	10c4983a 	sll	r2,r2,r3
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800b08:	00c00804 	movi	r3,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b0c:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800b10:	40c0d326 	beq	r8,r3,800e60 <lossless_decode+0x438>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b14:	4819883a 	mov	r12,r9
        
        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
  800b18:	7800c91e 	bne	r15,zero,800e40 <lossless_decode+0x418>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
  800b1c:	3880000b 	ldhu	r2,0(r7)
  800b20:	30c0000b 	ldhu	r3,0(r6)
  800b24:	2085383a 	mul	r2,r4,r2
  800b28:	10c5883a 	add	r2,r2,r3
  800b2c:	3080000d 	sth	r2,0(r6)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800b30:	438001cc 	andi	r14,r8,7
  800b34:	02400044 	movi	r9,1
  800b38:	04400804 	movi	r17,32
  800b3c:	040003c4 	movi	r16,15
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800b40:	2804913a 	slli	r2,r5,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800b44:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800b48:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  800b4c:	52003fcc 	andi	r8,r10,255
  800b50:	4000281e 	bne	r8,zero,800bf4 <lossless_decode+0x1cc>
  800b54:	001b883a 	mov	r13,zero
  800b58:	00800204 	movi	r2,8
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800b5c:	1389883a 	add	r4,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800b60:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800b64:	008001c4 	movi	r2,7
  800b68:	1100140e 	bge	r2,r4,800bbc <lossless_decode+0x194>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800b6c:	60800003 	ldbu	r2,0(r12)
  800b70:	20fffe04 	addi	r3,r4,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b74:	62000044 	addi	r8,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800b78:	10c4983a 	sll	r2,r2,r3
  800b7c:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800b80:	81000d0e 	bge	r16,r4,800bb8 <lossless_decode+0x190>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b84:	60800043 	ldbu	r2,1(r12)
  800b88:	20fffc04 	addi	r3,r4,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b8c:	62000084 	addi	r8,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b90:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800b94:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b98:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800b9c:	1900060e 	bge	r3,r4,800bb8 <lossless_decode+0x190>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800ba0:	60800083 	ldbu	r2,2(r12)
  800ba4:	20fffa04 	addi	r3,r4,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ba8:	620000c4 	addi	r8,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800bac:	10c4983a 	sll	r2,r2,r3
  800bb0:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800bb4:	24401c26 	beq	r4,r17,800c28 <lossless_decode+0x200>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800bb8:	4019883a 	mov	r12,r8
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800bbc:	68bfffcc 	andi	r2,r13,65535
  800bc0:	10a0001c 	xori	r2,r2,32768
  800bc4:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800bc8:	238001cc 	andi	r14,r4,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800bcc:	10001e1e 	bne	r2,zero,800c48 <lossless_decode+0x220>
                if(ib.runlength == 15){
  800bd0:	58803fcc 	andi	r2,r11,255
  800bd4:	1400731e 	bne	r2,r16,800da4 <lossless_decode+0x37c>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
  800bd8:	7800611e 	bne	r15,zero,800d60 <lossless_decode+0x338>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800bdc:	2804913a 	slli	r2,r5,4
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
  800be0:	4a400404 	addi	r9,r9,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800be4:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800be8:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  800bec:	52003fcc 	andi	r8,r10,255
  800bf0:	403fd826 	beq	r8,zero,800b54 <lossless_decode+0x12c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800bf4:	2808923a 	slli	r4,r5,8
  800bf8:	8a07c83a 	sub	r3,r17,r8
  800bfc:	40bfffc4 	addi	r2,r8,-1
  800c00:	20c8d83a 	srl	r4,r4,r3
  800c04:	2084d83a 	srl	r2,r4,r2
  800c08:	1000241e 	bne	r2,zero,800c9c <lossless_decode+0x274>
  800c0c:	00bfffc4 	movi	r2,-1
  800c10:	1204983a 	sll	r2,r2,r8
  800c14:	10800044 	addi	r2,r2,1
  800c18:	209b883a 	add	r13,r4,r2
  800c1c:	50800204 	addi	r2,r10,8
  800c20:	10803fcc 	andi	r2,r2,255
  800c24:	003fcd06 	br	800b5c <lossless_decode+0x134>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800c28:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800c2c:	238001cc 	andi	r14,r4,7
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800c30:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800c34:	288ab03a 	or	r5,r5,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800c38:	68bfffcc 	andi	r2,r13,65535
  800c3c:	10a0001c 	xori	r2,r2,32768
  800c40:	10a00004 	addi	r2,r2,-32768
  800c44:	103fe226 	beq	r2,zero,800bd0 <lossless_decode+0x1a8>
                    //if P == 1, then don't change the values
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
  800c48:	7800161e 	bne	r15,zero,800ca4 <lossless_decode+0x27c>
                    index += ib.runlength;
  800c4c:	4ad3883a 	add	r9,r9,r11
                        pe[zigzag_table[index]] = 0;
                }
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800c50:	4a003fcc 	andi	r8,r9,255
  800c54:	4205883a 	add	r2,r8,r8
  800c58:	1085883a 	add	r2,r2,r2
  800c5c:	02c02074 	movhi	r11,129
  800c60:	5acf2904 	addi	r11,r11,15524
  800c64:	12c5883a 	add	r2,r2,r11
  800c68:	10c00017 	ldw	r3,0(r2)
  800c6c:	18c7883a 	add	r3,r3,r3
  800c70:	19c9883a 	add	r4,r3,r7
  800c74:	2080000b 	ldhu	r2,0(r4)
  800c78:	30c7883a 	add	r3,r6,r3
  800c7c:	1900000b 	ldhu	r4,0(r3)
  800c80:	6885383a 	mul	r2,r13,r2
  800c84:	1105883a 	add	r2,r2,r4
  800c88:	1880000d 	sth	r2,0(r3)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800c8c:	00800f84 	movi	r2,62
  800c90:	12002836 	bltu	r2,r8,800d34 <lossless_decode+0x30c>
                index++;
  800c94:	4a400044 	addi	r9,r9,1
  800c98:	003fa906 	br	800b40 <lossless_decode+0x118>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800c9c:	201b883a 	mov	r13,r4
  800ca0:	003fde06 	br	800c1c <lossless_decode+0x1f4>
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
  800ca4:	4ac7883a 	add	r3,r9,r11
                    for(; index < terminal; index++)
  800ca8:	4a003fcc 	andi	r8,r9,255
  800cac:	18803fcc 	andi	r2,r3,255
  800cb0:	40805f2e 	bgeu	r8,r2,800e30 <lossless_decode+0x408>
  800cb4:	4005883a 	mov	r2,r8
  800cb8:	1815883a 	mov	r10,r3
  800cbc:	4809883a 	mov	r4,r9
  800cc0:	02c02074 	movhi	r11,129
  800cc4:	5acf2904 	addi	r11,r11,15524
  800cc8:	1a003fcc 	andi	r8,r3,255
                        pe[zigzag_table[index]] = 0;
  800ccc:	1085883a 	add	r2,r2,r2
  800cd0:	1085883a 	add	r2,r2,r2
  800cd4:	12c5883a 	add	r2,r2,r11
  800cd8:	10c00017 	ldw	r3,0(r2)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800cdc:	21000044 	addi	r4,r4,1
  800ce0:	20803fcc 	andi	r2,r4,255
                        pe[zigzag_table[index]] = 0;
  800ce4:	18c7883a 	add	r3,r3,r3
  800ce8:	1987883a 	add	r3,r3,r6
  800cec:	1800000d 	sth	zero,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800cf0:	123ff61e 	bne	r2,r8,800ccc <lossless_decode+0x2a4>
  800cf4:	5005883a 	mov	r2,r10
  800cf8:	5013883a 	mov	r9,r10
  800cfc:	52003fcc 	andi	r8,r10,255
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1085883a 	add	r2,r2,r2
  800d08:	1085883a 	add	r2,r2,r2
  800d0c:	12c5883a 	add	r2,r2,r11
  800d10:	10c00017 	ldw	r3,0(r2)
  800d14:	18c7883a 	add	r3,r3,r3
  800d18:	19c9883a 	add	r4,r3,r7
  800d1c:	2080000b 	ldhu	r2,0(r4)
  800d20:	30c7883a 	add	r3,r6,r3
  800d24:	6885383a 	mul	r2,r13,r2
  800d28:	1880000d 	sth	r2,0(r3)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800d2c:	00800f84 	movi	r2,62
  800d30:	123fd82e 	bgeu	r2,r8,800c94 <lossless_decode+0x26c>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800d34:	94800044 	addi	r18,r18,1
  800d38:	31802004 	addi	r6,r6,128
  800d3c:	a4bf571e 	bne	r20,r18,800a9c <lossless_decode+0x74>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800d40:	dd400517 	ldw	r21,20(sp)
  800d44:	dd000417 	ldw	r20,16(sp)
  800d48:	dcc00317 	ldw	r19,12(sp)
  800d4c:	dc800217 	ldw	r18,8(sp)
  800d50:	dc400117 	ldw	r17,4(sp)
  800d54:	dc000017 	ldw	r16,0(sp)
  800d58:	dec00604 	addi	sp,sp,24
  800d5c:	f800283a 	ret
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
  800d60:	48800404 	addi	r2,r9,16
                        for(; index < terminal; index++)
  800d64:	11003fcc 	andi	r4,r2,255
  800d68:	4a003fcc 	andi	r8,r9,255
  800d6c:	413f742e 	bgeu	r8,r4,800b40 <lossless_decode+0x118>
  800d70:	02c02074 	movhi	r11,129
  800d74:	5acf2904 	addi	r11,r11,15524
                            pe[zigzag_table[index]] = 0;
  800d78:	4205883a 	add	r2,r8,r8
  800d7c:	1085883a 	add	r2,r2,r2
  800d80:	12c5883a 	add	r2,r2,r11
  800d84:	10c00017 	ldw	r3,0(r2)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800d88:	4a400044 	addi	r9,r9,1
  800d8c:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  800d90:	18c7883a 	add	r3,r3,r3
  800d94:	1987883a 	add	r3,r3,r6
  800d98:	1800000d 	sth	zero,0(r3)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800d9c:	413ff636 	bltu	r8,r4,800d78 <lossless_decode+0x350>
  800da0:	003f6706 	br	800b40 <lossless_decode+0x118>
                            pe[zigzag_table[index]] = 0;
                    }
                }
                else {
                    //END
                    if(P == 0){
  800da4:	a83fe31e 	bne	r21,zero,800d34 <lossless_decode+0x30c>
                        //output all zeros
                        for(; index < 64; index++)
  800da8:	4a003fcc 	andi	r8,r9,255
  800dac:	00800fc4 	movi	r2,63
  800db0:	123fe036 	bltu	r2,r8,800d34 <lossless_decode+0x30c>
  800db4:	02c02074 	movhi	r11,129
  800db8:	5acf2904 	addi	r11,r11,15524
  800dbc:	01001004 	movi	r4,64
                            pe[zigzag_table[index]] = 0;
  800dc0:	4205883a 	add	r2,r8,r8
  800dc4:	1085883a 	add	r2,r2,r2
  800dc8:	12c5883a 	add	r2,r2,r11
  800dcc:	10c00017 	ldw	r3,0(r2)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800dd0:	4a400044 	addi	r9,r9,1
  800dd4:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  800dd8:	18c7883a 	add	r3,r3,r3
  800ddc:	1987883a 	add	r3,r3,r6
  800de0:	1800000d 	sth	zero,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800de4:	413ff61e 	bne	r8,r4,800dc0 <lossless_decode+0x398>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800de8:	94800044 	addi	r18,r18,1
  800dec:	31802004 	addi	r6,r6,128
  800df0:	a4bf2a1e 	bne	r20,r18,800a9c <lossless_decode+0x74>
  800df4:	003fd206 	br	800d40 <lossless_decode+0x318>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800df8:	2804913a 	slli	r2,r5,4
  800dfc:	00c00804 	movi	r3,32
  800e00:	1a07c83a 	sub	r3,r3,r8
  800e04:	10c6d83a 	srl	r3,r2,r3
  800e08:	413fffc4 	addi	r4,r8,-1
  800e0c:	1908d83a 	srl	r4,r3,r4
  800e10:	2000111e 	bne	r4,zero,800e58 <lossless_decode+0x430>
  800e14:	00bfffc4 	movi	r2,-1
  800e18:	1204983a 	sll	r2,r2,r8
  800e1c:	10800044 	addi	r2,r2,1
  800e20:	1889883a 	add	r4,r3,r2
  800e24:	48800104 	addi	r2,r9,4
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	003f2006 	br	800ab0 <lossless_decode+0x88>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800e30:	4805883a 	mov	r2,r9
  800e34:	02c02074 	movhi	r11,129
  800e38:	5acf2904 	addi	r11,r11,15524
  800e3c:	003fb006 	br	800d00 <lossless_decode+0x2d8>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800e40:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  800e44:	9905883a 	add	r2,r19,r4
  800e48:	1027883a 	mov	r19,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800e4c:	10c5383a 	mul	r2,r2,r3
  800e50:	3080000d 	sth	r2,0(r6)
  800e54:	003f3606 	br	800b30 <lossless_decode+0x108>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800e58:	1809883a 	mov	r4,r3
  800e5c:	003ff106 	br	800e24 <lossless_decode+0x3fc>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800e60:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800e64:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800e68:	288ab03a 	or	r5,r5,r2
  800e6c:	003f2a06 	br	800b18 <lossless_decode+0xf0>

00800e70 <mjpeg423_decode>:
uint32_t Cbsize;
uint32_t* Ybitstream;
} frame;

void mjpeg423_decode(const char* filename_in)
{
  800e70:	deffe004 	addi	sp,sp,-128
  800e74:	dc001615 	stw	r16,88(sp)
  800e78:	2021883a 	mov	r16,r4
    FILE* file_in;
    //if((file_in = alt_up_sd_card_fopen("v3fps.mpg", 0)) == NULL) error_and_exit("cannot open input file");
    //char* filename_out = malloc(strlen(filenamebase_out)+1);
    //strcpy(filename_out, filenamebase_out);
    
    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  800e7c:	01002074 	movhi	r4,129
  800e80:	210d7704 	addi	r4,r4,13788
uint32_t Cbsize;
uint32_t* Ybitstream;
} frame;

void mjpeg423_decode(const char* filename_in)
{
  800e84:	dfc01f15 	stw	ra,124(sp)
  800e88:	df001e15 	stw	fp,120(sp)
  800e8c:	ddc01d15 	stw	r23,116(sp)
  800e90:	dd801c15 	stw	r22,112(sp)
  800e94:	dd401b15 	stw	r21,108(sp)
  800e98:	dd001a15 	stw	r20,104(sp)
  800e9c:	dcc01915 	stw	r19,100(sp)
  800ea0:	dc801815 	stw	r18,96(sp)
  800ea4:	dc401715 	stw	r17,92(sp)
    FILE* file_in;
    //if((file_in = alt_up_sd_card_fopen("v3fps.mpg", 0)) == NULL) error_and_exit("cannot open input file");
    //char* filename_out = malloc(strlen(filenamebase_out)+1);
    //strcpy(filename_out, filenamebase_out);
    
    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  800ea8:	080d7b80 	call	80d7b8 <alt_up_pixel_buffer_dma_open_dev>
  800eac:	d8801115 	stw	r2,68(sp)
    if ( pixel_buf_dev == NULL){
  800eb0:	1001c326 	beq	r2,zero,8015c0 <mjpeg423_decode+0x750>
    	error_and_exit ("Error: could not open pixel buffer device \n");
    }

    short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
  800eb4:	8009883a 	mov	r4,r16
  800eb8:	000b883a 	mov	r5,zero
  800ebc:	08127700 	call	812770 <alt_up_sd_card_fopen>
	if(file_handle == -1){
  800ec0:	10bfffcc 	andi	r2,r2,65535
  800ec4:	10a0001c 	xori	r2,r2,32768
  800ec8:	10a00004 	addi	r2,r2,-32768
  800ecc:	d8801315 	stw	r2,76(sp)
  800ed0:	d8c01317 	ldw	r3,76(sp)
  800ed4:	00bfffc4 	movi	r2,-1
  800ed8:	18819126 	beq	r3,r2,801520 <mjpeg423_decode+0x6b0>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if(!sd_card_create_sectors_list(file_handle)){
  800edc:	d9001317 	ldw	r4,76(sp)
  800ee0:	0801d500 	call	801d50 <sd_card_create_sectors_list>
  800ee4:	10018a26 	beq	r2,zero,801510 <mjpeg423_decode+0x6a0>
		error_and_exit("Cannot create sectors list\n");
	}

	//create filebuffer to hold entire file
	printf("File size %d\n",sd_card_file_size(file_handle));
  800ee8:	d9001317 	ldw	r4,76(sp)
  800eec:	0801c900 	call	801c90 <sd_card_file_size>
  800ef0:	100b883a 	mov	r5,r2
  800ef4:	01002074 	movhi	r4,129
  800ef8:	210d9604 	addi	r4,r4,13912
  800efc:	0803c680 	call	803c68 <printf>

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
  800f00:	d9001317 	ldw	r4,76(sp)
  800f04:	0801c900 	call	801c90 <sd_card_file_size>
  800f08:	1009883a 	mov	r4,r2
  800f0c:	0802b400 	call	802b40 <__floatunsidf>
  800f10:	0011883a 	mov	r8,zero
  800f14:	024fd834 	movhi	r9,16224
  800f18:	480f883a 	mov	r7,r9
  800f1c:	400d883a 	mov	r6,r8
  800f20:	180b883a 	mov	r5,r3
  800f24:	1009883a 	mov	r4,r2
  800f28:	080261c0 	call	80261c <__muldf3>
  800f2c:	180b883a 	mov	r5,r3
  800f30:	1009883a 	mov	r4,r2
  800f34:	0801f040 	call	801f04 <ceil>
  800f38:	180b883a 	mov	r5,r3
  800f3c:	1009883a 	mov	r4,r2
  800f40:	0802a680 	call	802a68 <__fixdfsi>
	if((filebuffer = malloc(sectors_num*512)) == NULL){
  800f44:	1008927a 	slli	r4,r2,9
	}

	//create filebuffer to hold entire file
	printf("File size %d\n",sd_card_file_size(file_handle));

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
  800f48:	1025883a 	mov	r18,r2
	if((filebuffer = malloc(sectors_num*512)) == NULL){
  800f4c:	08034740 	call	803474 <malloc>
  800f50:	102f883a 	mov	r23,r2
  800f54:	10017626 	beq	r2,zero,801530 <mjpeg423_decode+0x6c0>
		error_and_exit("Cannot allocate filebuffer\n");
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	for(int i = 0; i < sectors_num; i++){
  800f58:	04801d0e 	bge	zero,r18,800fd0 <mjpeg423_decode+0x160>
  800f5c:	0023883a 	mov	r17,zero
	  sd_card_start_read_sector(i);
  800f60:	8809883a 	mov	r4,r17
		error_and_exit("Cannot allocate filebuffer\n");
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	for(int i = 0; i < sectors_num; i++){
  800f64:	b821883a 	mov	r16,r23
	  sd_card_start_read_sector(i);
  800f68:	0801ce00 	call	801ce0 <sd_card_start_read_sector>
	  if(!sd_card_wait_read_sector()){
  800f6c:	0801cb40 	call	801cb4 <sd_card_wait_read_sector>
  800f70:	10001226 	beq	r2,zero,800fbc <mjpeg423_decode+0x14c>
  800f74:	00802074 	movhi	r2,129
  800f78:	109d6a04 	addi	r2,r2,30120
  800f7c:	11800017 	ldw	r6,0(r2)
		  printf("Cannot read %d-th sector\n", i);
		  return -1;
  800f80:	000b883a 	mov	r5,zero
  800f84:	01c08004 	movi	r7,512
		}
	  //move sector to filebuffer 32bits at a time
	  for(int j = 0; j < 512; j+=4){
		  *((uint32_t*)(pos+j)) = IORD_32DIRECT(buffer_memory, j);
  800f88:	2985883a 	add	r2,r5,r6
  800f8c:	11000037 	ldwio	r4,0(r2)
  800f90:	2c07883a 	add	r3,r5,r16
	  if(!sd_card_wait_read_sector()){
		  printf("Cannot read %d-th sector\n", i);
		  return -1;
		}
	  //move sector to filebuffer 32bits at a time
	  for(int j = 0; j < 512; j+=4){
  800f94:	29400104 	addi	r5,r5,4
		  *((uint32_t*)(pos+j)) = IORD_32DIRECT(buffer_memory, j);
  800f98:	19000015 	stw	r4,0(r3)
	  if(!sd_card_wait_read_sector()){
		  printf("Cannot read %d-th sector\n", i);
		  return -1;
		}
	  //move sector to filebuffer 32bits at a time
	  for(int j = 0; j < 512; j+=4){
  800f9c:	29fffa1e 	bne	r5,r7,800f88 <mjpeg423_decode+0x118>
		error_and_exit("Cannot allocate filebuffer\n");
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	for(int i = 0; i < sectors_num; i++){
  800fa0:	8c400044 	addi	r17,r17,1
  800fa4:	94400a26 	beq	r18,r17,800fd0 <mjpeg423_decode+0x160>
	  sd_card_start_read_sector(i);
  800fa8:	8809883a 	mov	r4,r17
		}
	  //move sector to filebuffer 32bits at a time
	  for(int j = 0; j < 512; j+=4){
		  *((uint32_t*)(pos+j)) = IORD_32DIRECT(buffer_memory, j);
	  }
	  pos+=512;
  800fac:	84008004 	addi	r16,r16,512
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	for(int i = 0; i < sectors_num; i++){
	  sd_card_start_read_sector(i);
  800fb0:	0801ce00 	call	801ce0 <sd_card_start_read_sector>
	  if(!sd_card_wait_read_sector()){
  800fb4:	0801cb40 	call	801cb4 <sd_card_wait_read_sector>
  800fb8:	103fee1e 	bne	r2,zero,800f74 <mjpeg423_decode+0x104>
		  printf("Cannot read %d-th sector\n", i);
  800fbc:	880b883a 	mov	r5,r17
  800fc0:	01002074 	movhi	r4,129
  800fc4:	210da104 	addi	r4,r4,13956
  800fc8:	0803c680 	call	803c68 <printf>
  800fcc:	00014006 	br	8014d0 <mjpeg423_decode+0x660>
	  }
	  pos+=512;
	}

	//close file
	if(!alt_up_sd_card_fclose(file_handle)){
  800fd0:	d9001317 	ldw	r4,76(sp)
  800fd4:	080ec740 	call	80ec74 <alt_up_sd_card_fclose>
  800fd8:	10014926 	beq	r2,zero,801500 <mjpeg423_decode+0x690>
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800fdc:	b8800104 	addi	r2,r23,4
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800fe0:	b8c00204 	addi	r3,r23,8
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800fe4:	b9000304 	addi	r4,r23,12
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800fe8:	1a0000c3 	ldbu	r8,3(r3)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800fec:	224000c3 	ldbu	r9,3(r4)
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800ff0:	12800043 	ldbu	r10,1(r2)
  800ff4:	12c00083 	ldbu	r11,2(r2)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800ff8:	1b000043 	ldbu	r12,1(r3)
  800ffc:	1b400083 	ldbu	r13,2(r3)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  801000:	23800043 	ldbu	r14,1(r4)
  801004:	23c00083 	ldbu	r15,2(r4)
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  801008:	11c000c3 	ldbu	r7,3(r2)
	if(!alt_up_sd_card_fclose(file_handle)){
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  80100c:	b8c00043 	ldbu	r3,1(r23)
  801010:	b8800003 	ldbu	r2,0(r23)
  801014:	b9000083 	ldbu	r4,2(r23)
  801018:	b94000c3 	ldbu	r5,3(r23)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  80101c:	b9800103 	ldbu	r6,4(r23)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  801020:	bc000203 	ldbu	r16,8(r23)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  801024:	bc400303 	ldbu	r17,12(r23)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  801028:	bc800403 	ldbu	r18,16(r23)
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  80102c:	da800445 	stb	r10,17(sp)
  801030:	dac00485 	stb	r11,18(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  801034:	db000545 	stb	r12,21(sp)
  801038:	db400585 	stb	r13,22(sp)
  80103c:	da0005c5 	stb	r8,23(sp)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  801040:	db800645 	stb	r14,25(sp)
  801044:	dbc00685 	stb	r15,26(sp)
  801048:	da4006c5 	stb	r9,27(sp)
	if(!alt_up_sd_card_fclose(file_handle)){
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  80104c:	d8800305 	stb	r2,12(sp)
  801050:	d8c00345 	stb	r3,13(sp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  801054:	b8800404 	addi	r2,r23,16
	if(!alt_up_sd_card_fclose(file_handle)){
	  printf("Failed to close the file\n");
	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  801058:	d9000385 	stb	r4,14(sp)
  80105c:	d94003c5 	stb	r5,15(sp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  801060:	d9800405 	stb	r6,16(sp)
  801064:	d9c004c5 	stb	r7,19(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  801068:	dc000505 	stb	r16,20(sp)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  80106c:	dc400605 	stb	r17,24(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  801070:	dc800705 	stb	r18,28(sp)
  801074:	11c000c3 	ldbu	r7,3(r2)
  801078:	10c00043 	ldbu	r3,1(r2)
  80107c:	11800083 	ldbu	r6,2(r2)
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
  801080:	d9400617 	ldw	r5,24(sp)
  801084:	01002074 	movhi	r4,129
  801088:	210daf04 	addi	r4,r4,14012
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  80108c:	d8c00745 	stb	r3,29(sp)
  801090:	d9800785 	stb	r6,30(sp)
  801094:	d9c007c5 	stb	r7,31(sp)
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
  801098:	0803c680 	call	803c68 <printf>
    DEBUG_PRINT_ARG("payload_size %u\n", payload_size)
  80109c:	d9400717 	ldw	r5,28(sp)
  8010a0:	01002074 	movhi	r4,129
  8010a4:	210db304 	addi	r4,r4,14028
  8010a8:	0803c680 	call	803c68 <printf>
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  8010ac:	d9000317 	ldw	r4,12(sp)
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
    DEBUG_PRINT_ARG("payload_size %u\n", payload_size)

    int hCb_size = h_size/8;           //number of chrominance blocks
    int wCb_size = w_size/8;
  8010b0:	d8800417 	ldw	r2,16(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
    DEBUG_PRINT_ARG("payload_size %u\n", payload_size)

    int hCb_size = h_size/8;           //number of chrominance blocks
  8010b4:	dc400517 	ldw	r17,20(sp)
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  8010b8:	200890fa 	slli	r4,r4,3
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
    DEBUG_PRINT_ARG("payload_size %u\n", payload_size)

    int hCb_size = h_size/8;           //number of chrominance blocks
    int wCb_size = w_size/8;
  8010bc:	102cd0fa 	srli	r22,r2,3
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  8010c0:	08034740 	call	803474 <malloc>
    
    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
  8010c4:	d9000417 	ldw	r4,16(sp)
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  8010c8:	1021883a 	mov	r16,r2
    
    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
  8010cc:	d8800517 	ldw	r2,20(sp)
  8010d0:	2109883a 	add	r4,r4,r4
  8010d4:	2109883a 	add	r4,r4,r4
  8010d8:	2089383a 	mul	r4,r4,r2
  8010dc:	08034740 	call	803474 <malloc>
  8010e0:	d8801215 	stw	r2,72(sp)
  8010e4:	10011626 	beq	r2,zero,801540 <mjpeg423_decode+0x6d0>
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  8010e8:	8804d0fa 	srli	r2,r17,3
  8010ec:	15ab383a 	mul	r21,r2,r22
  8010f0:	a82291ba 	slli	r17,r21,6
  8010f4:	8809883a 	mov	r4,r17
  8010f8:	08034740 	call	803474 <malloc>
  8010fc:	1039883a 	mov	fp,r2
  801100:	10011326 	beq	r2,zero,801550 <mjpeg423_decode+0x6e0>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
  801104:	8809883a 	mov	r4,r17
  801108:	08034740 	call	803474 <malloc>
  80110c:	d8800d15 	stw	r2,52(sp)
  801110:	10011326 	beq	r2,zero,801560 <mjpeg423_decode+0x6f0>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
  801114:	8809883a 	mov	r4,r17
  801118:	08034740 	call	803474 <malloc>
  80111c:	d8800f15 	stw	r2,60(sp)
  801120:	10011326 	beq	r2,zero,801570 <mjpeg423_decode+0x700>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
  801124:	a82291fa 	slli	r17,r21,7
  801128:	8809883a 	mov	r4,r17
  80112c:	08034740 	call	803474 <malloc>
  801130:	d8800c15 	stw	r2,48(sp)
  801134:	10011226 	beq	r2,zero,801580 <mjpeg423_decode+0x710>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
  801138:	8809883a 	mov	r4,r17
  80113c:	08034740 	call	803474 <malloc>
  801140:	d8800e15 	stw	r2,56(sp)
  801144:	10011226 	beq	r2,zero,801590 <mjpeg423_decode+0x720>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
  801148:	8809883a 	mov	r4,r17
  80114c:	08034740 	call	803474 <malloc>
  801150:	d8801015 	stw	r2,64(sp)
  801154:	10011226 	beq	r2,zero,8015a0 <mjpeg423_decode+0x730>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
  801158:	ad49883a 	add	r4,r21,r21
  80115c:	2549883a 	add	r4,r4,r21
  801160:	200891fa 	slli	r4,r4,7
  801164:	08034740 	call	803474 <malloc>
  801168:	d8801415 	stw	r2,80(sp)
  80116c:	10011026 	beq	r2,zero,8015b0 <mjpeg423_decode+0x740>
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
  801170:	d8800617 	ldw	r2,24(sp)
  801174:	10002a26 	beq	r2,zero,801220 <mjpeg423_decode+0x3b0>
  801178:	0025883a 	mov	r18,zero
  80117c:	0007883a 	mov	r3,zero
  801180:	0023883a 	mov	r17,zero
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
  801184:	18c5883a 	add	r2,r3,r3
  801188:	d8c00717 	ldw	r3,28(sp)
  80118c:	1085883a 	add	r2,r2,r2
  801190:	b8c7883a 	add	r3,r23,r3
  801194:	1885883a 	add	r2,r3,r2
  801198:	11000504 	addi	r4,r2,20
  80119c:	21c000c3 	ldbu	r7,3(r4)
  8011a0:	21400083 	ldbu	r5,2(r4)
  8011a4:	11800503 	ldbu	r6,20(r2)
  8011a8:	20800043 	ldbu	r2,1(r4)
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  8011ac:	1c47883a 	add	r3,r3,r17
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
  8011b0:	81800005 	stb	r6,0(r16)
  8011b4:	80800045 	stb	r2,1(r16)
  8011b8:	81400085 	stb	r5,2(r16)
  8011bc:	81c000c5 	stb	r7,3(r16)
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  8011c0:	19000603 	ldbu	r4,24(r3)
  8011c4:	18c00604 	addi	r3,r3,24
  8011c8:	1a0000c3 	ldbu	r8,3(r3)
  8011cc:	19800043 	ldbu	r6,1(r3)
  8011d0:	19c00083 	ldbu	r7,2(r3)

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  8011d4:	81400017 	ldw	r5,0(r16)
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  8011d8:	81000105 	stb	r4,4(r16)
  8011dc:	80800104 	addi	r2,r16,4

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  8011e0:	01002074 	movhi	r4,129
  8011e4:	210dea04 	addi	r4,r4,14248
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  8011e8:	120000c5 	stb	r8,3(r2)
  8011ec:	11800045 	stb	r6,1(r2)
  8011f0:	11c00085 	stb	r7,2(r2)

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  8011f4:	0803c680 	call	803c68 <printf>
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  8011f8:	81400117 	ldw	r5,4(r16)
  8011fc:	01002074 	movhi	r4,129
  801200:	210def04 	addi	r4,r4,14268
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
  801204:	84000404 	addi	r16,r16,16
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  801208:	0803c680 	call	803c68 <printf>
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
  80120c:	d8800617 	ldw	r2,24(sp)
  801210:	90c00084 	addi	r3,r18,2
  801214:	8c400204 	addi	r17,r17,8
  801218:	1825883a 	mov	r18,r3
  80121c:	18bfd936 	bltu	r3,r2,801184 <mjpeg423_decode+0x314>
    //set it back to beginning of payload
    //if(fseek(file_in,5 * sizeof(uint32_t),SEEK_SET) != 0) error_and_exit("cannot seek into file");
    
    
    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  801220:	d8800717 	ldw	r2,28(sp)
  801224:	05000504 	movi	r20,20
  801228:	a080942e 	bgeu	r20,r2,80147c <mjpeg423_decode+0x60c>
  80122c:	a9800050 	cmplti	r6,r21,1
  801230:	a021883a 	mov	r16,r20
  801234:	d9801515 	stw	r6,84(sp)
        //DEBUG_PRINT_ARG("\nFrame #%u\n",)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801238:	bc05883a 	add	r2,r23,r16
  80123c:	118000c3 	ldbu	r6,3(r2)
  801240:	10c00003 	ldbu	r3,0(r2)
  801244:	11000043 	ldbu	r4,1(r2)
  801248:	11400083 	ldbu	r5,2(r2)
  80124c:	d8c00a05 	stb	r3,40(sp)
  801250:	d9000a45 	stb	r4,41(sp)
  801254:	d9800ac5 	stb	r6,43(sp)
  801258:	d9400a85 	stb	r5,42(sp)
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
  80125c:	d9400a17 	ldw	r5,40(sp)
  801260:	01002074 	movhi	r4,129
  801264:	210df304 	addi	r4,r4,14284
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
        //DEBUG_PRINT_ARG("\nFrame #%u\n",)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
  801268:	a4000104 	addi	r16,r20,4
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
  80126c:	0803c680 	call	803c68 <printf>
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
  801270:	a0c00204 	addi	r3,r20,8
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
  801274:	a0800304 	addi	r2,r20,12
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801278:	b8c7883a 	add	r3,r23,r3
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  80127c:	b885883a 	add	r2,r23,r2
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801280:	bc21883a 	add	r16,r23,r16
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  801284:	d9800a17 	ldw	r6,40(sp)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801288:	83c000c3 	ldbu	r15,3(r16)
  80128c:	82000043 	ldbu	r8,1(r16)
  801290:	82400083 	ldbu	r9,2(r16)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801294:	1a800003 	ldbu	r10,0(r3)
  801298:	1ac00043 	ldbu	r11,1(r3)
  80129c:	1b000083 	ldbu	r12,2(r3)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012a0:	13400003 	ldbu	r13,0(r2)
  8012a4:	13800083 	ldbu	r14,2(r2)
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012a8:	1c4000c3 	ldbu	r17,3(r3)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012ac:	81c00003 	ldbu	r7,0(r16)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012b0:	10c00043 	ldbu	r3,1(r2)
  8012b4:	148000c3 	ldbu	r18,3(r2)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  8012b8:	d9001417 	ldw	r4,80(sp)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
  8012bc:	a5000404 	addi	r20,r20,16
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  8012c0:	bd0b883a 	add	r5,r23,r20
  8012c4:	31bffc04 	addi	r6,r6,-16
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012c8:	da000b45 	stb	r8,45(sp)
  8012cc:	da400b85 	stb	r9,46(sp)
  8012d0:	dbc00bc5 	stb	r15,47(sp)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012d4:	da800805 	stb	r10,32(sp)
  8012d8:	dac00845 	stb	r11,33(sp)
  8012dc:	db000885 	stb	r12,34(sp)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012e0:	db400905 	stb	r13,36(sp)
  8012e4:	db800985 	stb	r14,38(sp)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012e8:	d9c00b05 	stb	r7,44(sp)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012ec:	dc4008c5 	stb	r17,35(sp)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8012f0:	d8c00945 	stb	r3,37(sp)
  8012f4:	dc8009c5 	stb	r18,39(sp)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  8012f8:	0803bc80 	call	803bc8 <memcpy>
        if(fread(&Cbsize, sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
  8012fc:	d8801417 	ldw	r2,80(sp)
  801300:	dc400817 	ldw	r17,32(sp)
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  801304:	d8c00a17 	ldw	r3,40(sp)
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  801308:	100b883a 	mov	r5,r2
        if(fread(&Cbsize, sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
  80130c:	1463883a 	add	r17,r2,r17
        Crbitstream = Cbbitstream + Cbsize;
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  801310:	d9800c17 	ldw	r6,48(sp)
  801314:	d8800b17 	ldw	r2,44(sp)
  801318:	a809883a 	mov	r4,r21
  80131c:	01c02074 	movhi	r7,129
  801320:	39cee904 	addi	r7,r7,15268
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  801324:	a0e9883a 	add	r20,r20,r3
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  801328:	d8800015 	stw	r2,0(sp)
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
  80132c:	dcc00917 	ldw	r19,36(sp)
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  801330:	0800a280 	call	800a28 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
  801334:	d8800b17 	ldw	r2,44(sp)
  801338:	d9800e17 	ldw	r6,56(sp)
  80133c:	880b883a 	mov	r5,r17
  801340:	a809883a 	mov	r4,r21
  801344:	01c02074 	movhi	r7,129
  801348:	39cf0904 	addi	r7,r7,15396
  80134c:	d8800015 	stw	r2,0(sp)
  801350:	0800a280 	call	800a28 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
  801354:	d8800b17 	ldw	r2,44(sp)
  801358:	d9801017 	ldw	r6,64(sp)
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
  80135c:	8ce7883a 	add	r19,r17,r19
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
  801360:	980b883a 	mov	r5,r19
  801364:	a809883a 	mov	r4,r21
  801368:	01c02074 	movhi	r7,129
  80136c:	39cf0904 	addi	r7,r7,15396
  801370:	d8800015 	stw	r2,0(sp)
  801374:	0800a280 	call	800a28 <lossless_decode>
        
        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
  801378:	d8c01517 	ldw	r3,84(sp)
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  80137c:	a43ffc04 	addi	r16,r20,-16
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
        
        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
  801380:	18001e1e 	bne	r3,zero,8013fc <mjpeg423_decode+0x58c>
  801384:	dc800c17 	ldw	r18,48(sp)
  801388:	e023883a 	mov	r17,fp
  80138c:	0027883a 	mov	r19,zero
  801390:	9009883a 	mov	r4,r18
  801394:	880b883a 	mov	r5,r17
  801398:	9cc00044 	addi	r19,r19,1
  80139c:	08004780 	call	800478 <idct>
  8013a0:	94802004 	addi	r18,r18,128
  8013a4:	8c401004 	addi	r17,r17,64
  8013a8:	acfff91e 	bne	r21,r19,801390 <mjpeg423_decode+0x520>
  8013ac:	dc800e17 	ldw	r18,56(sp)
  8013b0:	dc400d17 	ldw	r17,52(sp)
  8013b4:	0027883a 	mov	r19,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
  8013b8:	9009883a 	mov	r4,r18
  8013bc:	880b883a 	mov	r5,r17
  8013c0:	9cc00044 	addi	r19,r19,1
  8013c4:	08004780 	call	800478 <idct>
  8013c8:	94802004 	addi	r18,r18,128
  8013cc:	8c401004 	addi	r17,r17,64
  8013d0:	acfff91e 	bne	r21,r19,8013b8 <mjpeg423_decode+0x548>
  8013d4:	dc801017 	ldw	r18,64(sp)
  8013d8:	dc400f17 	ldw	r17,60(sp)
  8013dc:	0027883a 	mov	r19,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
  8013e0:	9009883a 	mov	r4,r18
  8013e4:	880b883a 	mov	r5,r17
  8013e8:	9cc00044 	addi	r19,r19,1
  8013ec:	08004780 	call	800478 <idct>
  8013f0:	94802004 	addi	r18,r18,128
  8013f4:	8c401004 	addi	r17,r17,64
  8013f8:	9d7ff916 	blt	r19,r21,8013e0 <mjpeg423_decode+0x570>
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
  8013fc:	d9001117 	ldw	r4,68(sp)
  801400:	080d7800 	call	80d780 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  801404:	103ffd1e 	bne	r2,zero,8013fc <mjpeg423_decode+0x58c>
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  801408:	d9801517 	ldw	r6,84(sp)
  80140c:	3000161e 	bne	r6,zero,801468 <mjpeg423_decode+0x5f8>
  801410:	0025883a 	mov	r18,zero
  801414:	0023883a 	mov	r17,zero
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  801418:	d8c00d17 	ldw	r3,52(sp)
  80141c:	d9800f17 	ldw	r6,60(sp)
  801420:	9589283a 	div	r4,r18,r22
  801424:	88c5883a 	add	r2,r17,r3
  801428:	258b383a 	mul	r5,r4,r22
  80142c:	8987883a 	add	r3,r17,r6
  801430:	d8c00115 	stw	r3,4(sp)
  801434:	d8c01117 	ldw	r3,68(sp)
  801438:	d8800015 	stw	r2,0(sp)
  80143c:	914bc83a 	sub	r5,r18,r5
  801440:	18800c17 	ldw	r2,48(r3)
  801444:	d9800417 	ldw	r6,16(sp)
  801448:	200890fa 	slli	r4,r4,3
  80144c:	280a90fa 	slli	r5,r5,3
  801450:	e44f883a 	add	r7,fp,r17
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  801454:	94800044 	addi	r18,r18,1
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  801458:	d8800215 	stw	r2,8(sp)
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  80145c:	8c401004 	addi	r17,r17,64
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  801460:	08015d00 	call	8015d0 <ycbcr_to_rgb>
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  801464:	acbfec1e 	bne	r21,r18,801418 <mjpeg423_decode+0x5a8>
//        		 alt_up_pixel_buffer_dma_draw(pixel_buf_dev, rgbblock[x+y], x, y);
//        	}
//        }
        //alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dev);
        //alt_up_pixel_buffer_draw_box(pixel_buf_dev, 0, 0, 319, 239, 0x001F, 0);
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  801468:	d9001117 	ldw	r4,68(sp)
    //set it back to beginning of payload
    //if(fseek(file_in,5 * sizeof(uint32_t),SEEK_SET) != 0) error_and_exit("cannot seek into file");
    
    
    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  80146c:	8029883a 	mov	r20,r16
//        		 alt_up_pixel_buffer_dma_draw(pixel_buf_dev, rgbblock[x+y], x, y);
//        	}
//        }
        //alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dev);
        //alt_up_pixel_buffer_draw_box(pixel_buf_dev, 0, 0, 319, 239, 0x001F, 0);
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  801470:	080d69c0 	call	80d69c <alt_up_pixel_buffer_dma_swap_buffers>
    //set it back to beginning of payload
    //if(fseek(file_in,5 * sizeof(uint32_t),SEEK_SET) != 0) error_and_exit("cannot seek into file");
    
    
    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  801474:	d8800717 	ldw	r2,28(sp)
  801478:	80bf6f36 	bltu	r16,r2,801238 <mjpeg423_decode+0x3c8>
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);


    } //end frame iteration
    
    DEBUG_PRINT("\nDecoder done.\n\n\n")
  80147c:	01002074 	movhi	r4,129
  801480:	210df704 	addi	r4,r4,14300
  801484:	0803da40 	call	803da4 <puts>
    
    //close down
    //fclose(file_in);
    alt_up_sd_card_fclose(file_handle);
  801488:	d9001317 	ldw	r4,76(sp)
  80148c:	080ec740 	call	80ec74 <alt_up_sd_card_fclose>
    free(rgbblock); 
  801490:	d9001217 	ldw	r4,72(sp)
  801494:	08034600 	call	803460 <free>
    free(Yblock);
  801498:	e009883a 	mov	r4,fp
  80149c:	08034600 	call	803460 <free>
    free(Cbblock);
  8014a0:	d9000d17 	ldw	r4,52(sp)
  8014a4:	08034600 	call	803460 <free>
    free(Crblock);
  8014a8:	d9000f17 	ldw	r4,60(sp)
  8014ac:	08034600 	call	803460 <free>
    free(YDCAC);
  8014b0:	d9000c17 	ldw	r4,48(sp)
  8014b4:	08034600 	call	803460 <free>
    free(CbDCAC);
  8014b8:	d9000e17 	ldw	r4,56(sp)
  8014bc:	08034600 	call	803460 <free>
    free(CrDCAC);
  8014c0:	d9001017 	ldw	r4,64(sp)
  8014c4:	08034600 	call	803460 <free>
    free(Ybitstream);
  8014c8:	d9001417 	ldw	r4,80(sp)
  8014cc:	08034600 	call	803460 <free>

}
  8014d0:	dfc01f17 	ldw	ra,124(sp)
  8014d4:	df001e17 	ldw	fp,120(sp)
  8014d8:	ddc01d17 	ldw	r23,116(sp)
  8014dc:	dd801c17 	ldw	r22,112(sp)
  8014e0:	dd401b17 	ldw	r21,108(sp)
  8014e4:	dd001a17 	ldw	r20,104(sp)
  8014e8:	dcc01917 	ldw	r19,100(sp)
  8014ec:	dc801817 	ldw	r18,96(sp)
  8014f0:	dc401717 	ldw	r17,92(sp)
  8014f4:	dc001617 	ldw	r16,88(sp)
  8014f8:	dec02004 	addi	sp,sp,128
  8014fc:	f800283a 	ret
	  pos+=512;
	}

	//close file
	if(!alt_up_sd_card_fclose(file_handle)){
	  printf("Failed to close the file\n");
  801500:	01002074 	movhi	r4,129
  801504:	210da804 	addi	r4,r4,13984
  801508:	0803da40 	call	803da4 <puts>
  80150c:	003eb306 	br	800fdc <mjpeg423_decode+0x16c>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if(!sd_card_create_sectors_list(file_handle)){
		error_and_exit("Cannot create sectors list\n");
  801510:	01002074 	movhi	r4,129
  801514:	210d8f04 	addi	r4,r4,13884
  801518:	08004580 	call	800458 <error_and_exit>
  80151c:	003e7206 	br	800ee8 <mjpeg423_decode+0x78>
    	error_and_exit ("Error: could not open pixel buffer device \n");
    }

    short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
	if(file_handle == -1){
		error_and_exit("Cannot find file\n");
  801520:	01002074 	movhi	r4,129
  801524:	210d8a04 	addi	r4,r4,13864
  801528:	08004580 	call	800458 <error_and_exit>
  80152c:	003e6b06 	br	800edc <mjpeg423_decode+0x6c>
	//create filebuffer to hold entire file
	printf("File size %d\n",sd_card_file_size(file_handle));

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
	if((filebuffer = malloc(sectors_num*512)) == NULL){
		error_and_exit("Cannot allocate filebuffer\n");
  801530:	01002074 	movhi	r4,129
  801534:	210d9a04 	addi	r4,r4,13928
  801538:	08004580 	call	800458 <error_and_exit>
  80153c:	003e8606 	br	800f58 <mjpeg423_decode+0xe8>
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
    
    //main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
  801540:	01002074 	movhi	r4,129
  801544:	210db804 	addi	r4,r4,14048
  801548:	08004580 	call	800458 <error_and_exit>
  80154c:	003ee606 	br	8010e8 <mjpeg423_decode+0x278>
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  801550:	01002074 	movhi	r4,129
  801554:	210dbf04 	addi	r4,r4,14076
  801558:	08004580 	call	800458 <error_and_exit>
  80155c:	003ee906 	br	801104 <mjpeg423_decode+0x294>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
  801560:	01002074 	movhi	r4,129
  801564:	210dc504 	addi	r4,r4,14100
  801568:	08004580 	call	800458 <error_and_exit>
  80156c:	003ee906 	br	801114 <mjpeg423_decode+0x2a4>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
  801570:	01002074 	movhi	r4,129
  801574:	210dcb04 	addi	r4,r4,14124
  801578:	08004580 	call	800458 <error_and_exit>
  80157c:	003ee906 	br	801124 <mjpeg423_decode+0x2b4>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
  801580:	01002074 	movhi	r4,129
  801584:	210dd104 	addi	r4,r4,14148
  801588:	08004580 	call	800458 <error_and_exit>
  80158c:	003eea06 	br	801138 <mjpeg423_decode+0x2c8>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
  801590:	01002074 	movhi	r4,129
  801594:	210dd704 	addi	r4,r4,14172
  801598:	08004580 	call	800458 <error_and_exit>
  80159c:	003eea06 	br	801148 <mjpeg423_decode+0x2d8>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
  8015a0:	01002074 	movhi	r4,129
  8015a4:	210ddd04 	addi	r4,r4,14196
  8015a8:	08004580 	call	800458 <error_and_exit>
  8015ac:	003eea06 	br	801158 <mjpeg423_decode+0x2e8>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
  8015b0:	01002074 	movhi	r4,129
  8015b4:	210de304 	addi	r4,r4,14220
  8015b8:	08004580 	call	800458 <error_and_exit>
  8015bc:	003eec06 	br	801170 <mjpeg423_decode+0x300>
    //char* filename_out = malloc(strlen(filenamebase_out)+1);
    //strcpy(filename_out, filenamebase_out);
    
    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
    if ( pixel_buf_dev == NULL){
    	error_and_exit ("Error: could not open pixel buffer device \n");
  8015c0:	01002074 	movhi	r4,129
  8015c4:	210d7f04 	addi	r4,r4,13820
  8015c8:	08004580 	call	800458 <error_and_exit>
  8015cc:	003e3906 	br	800eb4 <mjpeg423_decode+0x44>

008015d0 <ycbcr_to_rgb>:
//values are first scaled by 14 bits, then summed, then rescaled back by 14 bits
//the result fits in 24 bits when using two's complement
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
  8015d0:	3109383a 	mul	r4,r6,r4
  8015d4:	defffb04 	addi	sp,sp,-20
  8015d8:	d8800717 	ldw	r2,28(sp)
  8015dc:	290b883a 	add	r5,r5,r4
  8015e0:	dd000415 	stw	r20,16(sp)
  8015e4:	dcc00315 	stw	r19,12(sp)
  8015e8:	294b883a 	add	r5,r5,r5
  8015ec:	dcc00517 	ldw	r19,20(sp)
  8015f0:	dd000617 	ldw	r20,24(sp)
  8015f4:	294b883a 	add	r5,r5,r5
  8015f8:	1151883a 	add	r8,r2,r5
  8015fc:	318d883a 	add	r6,r6,r6
  801600:	dc800215 	stw	r18,8(sp)
  801604:	dc400115 	stw	r17,4(sp)
  801608:	dc000015 	stw	r16,0(sp)
  80160c:	3825883a 	mov	r18,r7
  801610:	3813883a 	mov	r9,r7
  801614:	401d883a 	mov	r14,r8
  801618:	319b883a 	add	r13,r6,r6
  80161c:	9817883a 	mov	r11,r19
  801620:	a015883a 	mov	r10,r20
  801624:	44000044 	addi	r16,r8,1
  801628:	41c00084 	addi	r7,r8,2
  80162c:	43c000c4 	addi	r15,r8,3
  801630:	0023883a 	mov	r17,zero
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801634:	8d05883a 	add	r2,r17,r20
  801638:	11000003 	ldbu	r4,0(r2)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80163c:	8c87883a 	add	r3,r17,r18
  801640:	19400003 	ldbu	r5,0(r3)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801644:	213fe004 	addi	r4,r4,-128
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801648:	9c4d883a 	add	r6,r19,r17
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80164c:	280a93ba 	slli	r5,r5,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801650:	20966ea4 	muli	r2,r4,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801654:	30c00003 	ldbu	r3,0(r6)
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801658:	1145883a 	add	r2,r2,r5
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  80165c:	19bfe004 	addi	r6,r3,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801660:	10014f16 	blt	r2,zero,801ba0 <ycbcr_to_rgb+0x5d0>
  801664:	1005d3ba 	srai	r2,r2,14
  801668:	00c03fc4 	movi	r3,255
  80166c:	1880010e 	bge	r3,r2,801674 <ycbcr_to_rgb+0xa4>
  801670:	1805883a 	mov	r2,r3
  801674:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801678:	308581a4 	muli	r2,r6,5638
  80167c:	20cb6d24 	muli	r3,r4,11700
  801680:	2885c83a 	sub	r2,r5,r2
  801684:	10c5c83a 	sub	r2,r2,r3
  801688:	10014316 	blt	r2,zero,801b98 <ycbcr_to_rgb+0x5c8>
  80168c:	1005d3ba 	srai	r2,r2,14
  801690:	00c03fc4 	movi	r3,255
  801694:	1880010e 	bge	r3,r2,80169c <ycbcr_to_rgb+0xcc>
  801698:	1805883a 	mov	r2,r3
  80169c:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8016a0:	309c5a24 	muli	r2,r6,29032
  8016a4:	1145883a 	add	r2,r2,r5
  8016a8:	10013916 	blt	r2,zero,801b90 <ycbcr_to_rgb+0x5c0>
  8016ac:	1005d3ba 	srai	r2,r2,14
  8016b0:	01403fc4 	movi	r5,255
  8016b4:	2880010e 	bge	r5,r2,8016bc <ycbcr_to_rgb+0xec>
  8016b8:	2805883a 	mov	r2,r5
            rgbblock[index] = pixel;
  8016bc:	70800005 	stb	r2,0(r14)
  8016c0:	80c00005 	stb	r3,0(r16)
  8016c4:	3b000005 	stb	r12,0(r7)
  8016c8:	78000005 	stb	zero,0(r15)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8016cc:	50800043 	ldbu	r2,1(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8016d0:	48c00043 	ldbu	r3,1(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8016d4:	59000043 	ldbu	r4,1(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8016d8:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8016dc:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8016e0:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8016e4:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8016e8:	1145883a 	add	r2,r2,r5
  8016ec:	10012616 	blt	r2,zero,801b88 <ycbcr_to_rgb+0x5b8>
  8016f0:	1005d3ba 	srai	r2,r2,14
  8016f4:	00c03fc4 	movi	r3,255
  8016f8:	1880010e 	bge	r3,r2,801700 <ycbcr_to_rgb+0x130>
  8016fc:	1805883a 	mov	r2,r3
  801700:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801704:	208581a4 	muli	r2,r4,5638
  801708:	30cb6d24 	muli	r3,r6,11700
  80170c:	2885c83a 	sub	r2,r5,r2
  801710:	10c5c83a 	sub	r2,r2,r3
  801714:	10011a16 	blt	r2,zero,801b80 <ycbcr_to_rgb+0x5b0>
  801718:	1005d3ba 	srai	r2,r2,14
  80171c:	00c03fc4 	movi	r3,255
  801720:	1880010e 	bge	r3,r2,801728 <ycbcr_to_rgb+0x158>
  801724:	1805883a 	mov	r2,r3
  801728:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  80172c:	209c5a24 	muli	r2,r4,29032
  801730:	1145883a 	add	r2,r2,r5
  801734:	10011016 	blt	r2,zero,801b78 <ycbcr_to_rgb+0x5a8>
  801738:	1005d3ba 	srai	r2,r2,14
  80173c:	01003fc4 	movi	r4,255
  801740:	2080010e 	bge	r4,r2,801748 <ycbcr_to_rgb+0x178>
  801744:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  801748:	40800105 	stb	r2,4(r8)
  80174c:	40c00145 	stb	r3,5(r8)
  801750:	43000185 	stb	r12,6(r8)
  801754:	400001c5 	stb	zero,7(r8)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801758:	50800083 	ldbu	r2,2(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80175c:	48c00083 	ldbu	r3,2(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801760:	59000083 	ldbu	r4,2(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801764:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801768:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  80176c:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801770:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801774:	1145883a 	add	r2,r2,r5
  801778:	1000fd16 	blt	r2,zero,801b70 <ycbcr_to_rgb+0x5a0>
  80177c:	1005d3ba 	srai	r2,r2,14
  801780:	00c03fc4 	movi	r3,255
  801784:	1880010e 	bge	r3,r2,80178c <ycbcr_to_rgb+0x1bc>
  801788:	1805883a 	mov	r2,r3
  80178c:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801790:	208581a4 	muli	r2,r4,5638
  801794:	30cb6d24 	muli	r3,r6,11700
  801798:	2885c83a 	sub	r2,r5,r2
  80179c:	10c5c83a 	sub	r2,r2,r3
  8017a0:	1000f116 	blt	r2,zero,801b68 <ycbcr_to_rgb+0x598>
  8017a4:	1005d3ba 	srai	r2,r2,14
  8017a8:	00c03fc4 	movi	r3,255
  8017ac:	1880010e 	bge	r3,r2,8017b4 <ycbcr_to_rgb+0x1e4>
  8017b0:	1805883a 	mov	r2,r3
  8017b4:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8017b8:	209c5a24 	muli	r2,r4,29032
  8017bc:	1145883a 	add	r2,r2,r5
  8017c0:	1000e716 	blt	r2,zero,801b60 <ycbcr_to_rgb+0x590>
  8017c4:	1005d3ba 	srai	r2,r2,14
  8017c8:	01003fc4 	movi	r4,255
  8017cc:	2080010e 	bge	r4,r2,8017d4 <ycbcr_to_rgb+0x204>
  8017d0:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  8017d4:	40800205 	stb	r2,8(r8)
  8017d8:	40c00245 	stb	r3,9(r8)
  8017dc:	43000285 	stb	r12,10(r8)
  8017e0:	400002c5 	stb	zero,11(r8)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8017e4:	508000c3 	ldbu	r2,3(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8017e8:	48c000c3 	ldbu	r3,3(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8017ec:	590000c3 	ldbu	r4,3(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8017f0:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8017f4:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8017f8:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8017fc:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801800:	1145883a 	add	r2,r2,r5
  801804:	1000d416 	blt	r2,zero,801b58 <ycbcr_to_rgb+0x588>
  801808:	1005d3ba 	srai	r2,r2,14
  80180c:	00c03fc4 	movi	r3,255
  801810:	1880010e 	bge	r3,r2,801818 <ycbcr_to_rgb+0x248>
  801814:	1805883a 	mov	r2,r3
  801818:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  80181c:	208581a4 	muli	r2,r4,5638
  801820:	30cb6d24 	muli	r3,r6,11700
  801824:	2885c83a 	sub	r2,r5,r2
  801828:	10c5c83a 	sub	r2,r2,r3
  80182c:	1000c816 	blt	r2,zero,801b50 <ycbcr_to_rgb+0x580>
  801830:	1005d3ba 	srai	r2,r2,14
  801834:	00c03fc4 	movi	r3,255
  801838:	1880010e 	bge	r3,r2,801840 <ycbcr_to_rgb+0x270>
  80183c:	1805883a 	mov	r2,r3
  801840:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801844:	209c5a24 	muli	r2,r4,29032
  801848:	1145883a 	add	r2,r2,r5
  80184c:	1000be16 	blt	r2,zero,801b48 <ycbcr_to_rgb+0x578>
  801850:	1005d3ba 	srai	r2,r2,14
  801854:	01003fc4 	movi	r4,255
  801858:	2080010e 	bge	r4,r2,801860 <ycbcr_to_rgb+0x290>
  80185c:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  801860:	40800305 	stb	r2,12(r8)
  801864:	40c00345 	stb	r3,13(r8)
  801868:	43000385 	stb	r12,14(r8)
  80186c:	400003c5 	stb	zero,15(r8)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801870:	50800103 	ldbu	r2,4(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801874:	48c00103 	ldbu	r3,4(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801878:	59000103 	ldbu	r4,4(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  80187c:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801880:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801884:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801888:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  80188c:	1145883a 	add	r2,r2,r5
  801890:	1000ab16 	blt	r2,zero,801b40 <ycbcr_to_rgb+0x570>
  801894:	1005d3ba 	srai	r2,r2,14
  801898:	00c03fc4 	movi	r3,255
  80189c:	1880010e 	bge	r3,r2,8018a4 <ycbcr_to_rgb+0x2d4>
  8018a0:	1805883a 	mov	r2,r3
  8018a4:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  8018a8:	208581a4 	muli	r2,r4,5638
  8018ac:	30cb6d24 	muli	r3,r6,11700
  8018b0:	2885c83a 	sub	r2,r5,r2
  8018b4:	10c5c83a 	sub	r2,r2,r3
  8018b8:	10009f16 	blt	r2,zero,801b38 <ycbcr_to_rgb+0x568>
  8018bc:	1005d3ba 	srai	r2,r2,14
  8018c0:	00c03fc4 	movi	r3,255
  8018c4:	1880010e 	bge	r3,r2,8018cc <ycbcr_to_rgb+0x2fc>
  8018c8:	1805883a 	mov	r2,r3
  8018cc:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8018d0:	209c5a24 	muli	r2,r4,29032
  8018d4:	1145883a 	add	r2,r2,r5
  8018d8:	10009516 	blt	r2,zero,801b30 <ycbcr_to_rgb+0x560>
  8018dc:	1005d3ba 	srai	r2,r2,14
  8018e0:	01003fc4 	movi	r4,255
  8018e4:	2080010e 	bge	r4,r2,8018ec <ycbcr_to_rgb+0x31c>
  8018e8:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  8018ec:	40800405 	stb	r2,16(r8)
  8018f0:	40c00445 	stb	r3,17(r8)
  8018f4:	43000485 	stb	r12,18(r8)
  8018f8:	400004c5 	stb	zero,19(r8)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8018fc:	50800143 	ldbu	r2,5(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801900:	48c00143 	ldbu	r3,5(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801904:	59000143 	ldbu	r4,5(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801908:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80190c:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801910:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801914:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801918:	1145883a 	add	r2,r2,r5
  80191c:	10008216 	blt	r2,zero,801b28 <ycbcr_to_rgb+0x558>
  801920:	1005d3ba 	srai	r2,r2,14
  801924:	00c03fc4 	movi	r3,255
  801928:	1880010e 	bge	r3,r2,801930 <ycbcr_to_rgb+0x360>
  80192c:	1805883a 	mov	r2,r3
  801930:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801934:	208581a4 	muli	r2,r4,5638
  801938:	30cb6d24 	muli	r3,r6,11700
  80193c:	2885c83a 	sub	r2,r5,r2
  801940:	10c5c83a 	sub	r2,r2,r3
  801944:	10007616 	blt	r2,zero,801b20 <ycbcr_to_rgb+0x550>
  801948:	1005d3ba 	srai	r2,r2,14
  80194c:	00c03fc4 	movi	r3,255
  801950:	1880010e 	bge	r3,r2,801958 <ycbcr_to_rgb+0x388>
  801954:	1805883a 	mov	r2,r3
  801958:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  80195c:	209c5a24 	muli	r2,r4,29032
  801960:	1145883a 	add	r2,r2,r5
  801964:	10006c16 	blt	r2,zero,801b18 <ycbcr_to_rgb+0x548>
  801968:	1005d3ba 	srai	r2,r2,14
  80196c:	01003fc4 	movi	r4,255
  801970:	2080010e 	bge	r4,r2,801978 <ycbcr_to_rgb+0x3a8>
  801974:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  801978:	40800505 	stb	r2,20(r8)
  80197c:	40c00545 	stb	r3,21(r8)
  801980:	43000585 	stb	r12,22(r8)
  801984:	400005c5 	stb	zero,23(r8)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801988:	50800183 	ldbu	r2,6(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80198c:	48c00183 	ldbu	r3,6(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801990:	59000183 	ldbu	r4,6(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801994:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801998:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  80199c:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8019a0:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8019a4:	1145883a 	add	r2,r2,r5
  8019a8:	10005916 	blt	r2,zero,801b10 <ycbcr_to_rgb+0x540>
  8019ac:	1005d3ba 	srai	r2,r2,14
  8019b0:	00c03fc4 	movi	r3,255
  8019b4:	1880010e 	bge	r3,r2,8019bc <ycbcr_to_rgb+0x3ec>
  8019b8:	1805883a 	mov	r2,r3
  8019bc:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  8019c0:	208581a4 	muli	r2,r4,5638
  8019c4:	30cb6d24 	muli	r3,r6,11700
  8019c8:	2885c83a 	sub	r2,r5,r2
  8019cc:	10c5c83a 	sub	r2,r2,r3
  8019d0:	10004d16 	blt	r2,zero,801b08 <ycbcr_to_rgb+0x538>
  8019d4:	1005d3ba 	srai	r2,r2,14
  8019d8:	00c03fc4 	movi	r3,255
  8019dc:	1880010e 	bge	r3,r2,8019e4 <ycbcr_to_rgb+0x414>
  8019e0:	1805883a 	mov	r2,r3
  8019e4:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8019e8:	209c5a24 	muli	r2,r4,29032
  8019ec:	1145883a 	add	r2,r2,r5
  8019f0:	10004316 	blt	r2,zero,801b00 <ycbcr_to_rgb+0x530>
  8019f4:	1005d3ba 	srai	r2,r2,14
  8019f8:	01003fc4 	movi	r4,255
  8019fc:	2080010e 	bge	r4,r2,801a04 <ycbcr_to_rgb+0x434>
  801a00:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  801a04:	40800605 	stb	r2,24(r8)
  801a08:	40c00645 	stb	r3,25(r8)
  801a0c:	43000685 	stb	r12,26(r8)
  801a10:	400006c5 	stb	zero,27(r8)
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801a14:	508001c3 	ldbu	r2,7(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801a18:	48c001c3 	ldbu	r3,7(r9)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801a1c:	590001c3 	ldbu	r4,7(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801a20:	11bfe004 	addi	r6,r2,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801a24:	180a93ba 	slli	r5,r3,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801a28:	30966ea4 	muli	r2,r6,22970
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801a2c:	213fe004 	addi	r4,r4,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801a30:	1145883a 	add	r2,r2,r5
  801a34:	10003016 	blt	r2,zero,801af8 <ycbcr_to_rgb+0x528>
  801a38:	1005d3ba 	srai	r2,r2,14
  801a3c:	00c03fc4 	movi	r3,255
  801a40:	1880010e 	bge	r3,r2,801a48 <ycbcr_to_rgb+0x478>
  801a44:	1805883a 	mov	r2,r3
  801a48:	1019883a 	mov	r12,r2
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801a4c:	208581a4 	muli	r2,r4,5638
  801a50:	30cb6d24 	muli	r3,r6,11700
  801a54:	2885c83a 	sub	r2,r5,r2
  801a58:	10c5c83a 	sub	r2,r2,r3
  801a5c:	10002416 	blt	r2,zero,801af0 <ycbcr_to_rgb+0x520>
  801a60:	1005d3ba 	srai	r2,r2,14
  801a64:	00c03fc4 	movi	r3,255
  801a68:	1880010e 	bge	r3,r2,801a70 <ycbcr_to_rgb+0x4a0>
  801a6c:	1805883a 	mov	r2,r3
  801a70:	1007883a 	mov	r3,r2
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801a74:	209c5a24 	muli	r2,r4,29032
  801a78:	1145883a 	add	r2,r2,r5
  801a7c:	10001a16 	blt	r2,zero,801ae8 <ycbcr_to_rgb+0x518>
  801a80:	1005d3ba 	srai	r2,r2,14
  801a84:	01003fc4 	movi	r4,255
  801a88:	2080010e 	bge	r4,r2,801a90 <ycbcr_to_rgb+0x4c0>
  801a8c:	2005883a 	mov	r2,r4
            rgbblock[index] = pixel;
  801a90:	40800705 	stb	r2,28(r8)
  801a94:	8c400204 	addi	r17,r17,8
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  801a98:	00801004 	movi	r2,64
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
            rgbblock[index] = pixel;
  801a9c:	40c00745 	stb	r3,29(r8)
  801aa0:	43000785 	stb	r12,30(r8)
  801aa4:	400007c5 	stb	zero,31(r8)
  801aa8:	5ac00204 	addi	r11,r11,8
  801aac:	4351883a 	add	r8,r8,r13
  801ab0:	52800204 	addi	r10,r10,8
  801ab4:	4a400204 	addi	r9,r9,8
  801ab8:	735d883a 	add	r14,r14,r13
  801abc:	8361883a 	add	r16,r16,r13
  801ac0:	3b4f883a 	add	r7,r7,r13
  801ac4:	7b5f883a 	add	r15,r15,r13
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  801ac8:	88beda1e 	bne	r17,r2,801634 <ycbcr_to_rgb+0x64>
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
            rgbblock[index] = pixel;
            index++;
        }
    }
}
  801acc:	dd000417 	ldw	r20,16(sp)
  801ad0:	dcc00317 	ldw	r19,12(sp)
  801ad4:	dc800217 	ldw	r18,8(sp)
  801ad8:	dc400117 	ldw	r17,4(sp)
  801adc:	dc000017 	ldw	r16,0(sp)
  801ae0:	dec00504 	addi	sp,sp,20
  801ae4:	f800283a 	ret
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801ae8:	0005883a 	mov	r2,zero
  801aec:	003fe806 	br	801a90 <ycbcr_to_rgb+0x4c0>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801af0:	0007883a 	mov	r3,zero
  801af4:	003fdf06 	br	801a74 <ycbcr_to_rgb+0x4a4>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801af8:	0019883a 	mov	r12,zero
  801afc:	003fd306 	br	801a4c <ycbcr_to_rgb+0x47c>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b00:	0005883a 	mov	r2,zero
  801b04:	003fbf06 	br	801a04 <ycbcr_to_rgb+0x434>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b08:	0007883a 	mov	r3,zero
  801b0c:	003fb606 	br	8019e8 <ycbcr_to_rgb+0x418>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801b10:	0019883a 	mov	r12,zero
  801b14:	003faa06 	br	8019c0 <ycbcr_to_rgb+0x3f0>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b18:	0005883a 	mov	r2,zero
  801b1c:	003f9606 	br	801978 <ycbcr_to_rgb+0x3a8>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b20:	0007883a 	mov	r3,zero
  801b24:	003f8d06 	br	80195c <ycbcr_to_rgb+0x38c>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801b28:	0019883a 	mov	r12,zero
  801b2c:	003f8106 	br	801934 <ycbcr_to_rgb+0x364>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b30:	0005883a 	mov	r2,zero
  801b34:	003f6d06 	br	8018ec <ycbcr_to_rgb+0x31c>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b38:	0007883a 	mov	r3,zero
  801b3c:	003f6406 	br	8018d0 <ycbcr_to_rgb+0x300>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801b40:	0019883a 	mov	r12,zero
  801b44:	003f5806 	br	8018a8 <ycbcr_to_rgb+0x2d8>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b48:	0005883a 	mov	r2,zero
  801b4c:	003f4406 	br	801860 <ycbcr_to_rgb+0x290>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b50:	0007883a 	mov	r3,zero
  801b54:	003f3b06 	br	801844 <ycbcr_to_rgb+0x274>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801b58:	0019883a 	mov	r12,zero
  801b5c:	003f2f06 	br	80181c <ycbcr_to_rgb+0x24c>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b60:	0005883a 	mov	r2,zero
  801b64:	003f1b06 	br	8017d4 <ycbcr_to_rgb+0x204>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b68:	0007883a 	mov	r3,zero
  801b6c:	003f1206 	br	8017b8 <ycbcr_to_rgb+0x1e8>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801b70:	0019883a 	mov	r12,zero
  801b74:	003f0606 	br	801790 <ycbcr_to_rgb+0x1c0>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b78:	0005883a 	mov	r2,zero
  801b7c:	003ef206 	br	801748 <ycbcr_to_rgb+0x178>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b80:	0007883a 	mov	r3,zero
  801b84:	003ee906 	br	80172c <ycbcr_to_rgb+0x15c>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801b88:	0019883a 	mov	r12,zero
  801b8c:	003edd06 	br	801704 <ycbcr_to_rgb+0x134>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801b90:	0005883a 	mov	r2,zero
  801b94:	003ec906 	br	8016bc <ycbcr_to_rgb+0xec>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801b98:	0007883a 	mov	r3,zero
  801b9c:	003ec006 	br	8016a0 <ycbcr_to_rgb+0xd0>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801ba0:	0019883a 	mov	r12,zero
  801ba4:	003eb406 	br	801678 <ycbcr_to_rgb+0xa8>

00801ba8 <main>:
}

#endif

int main()
{
  801ba8:	deffff04 	addi	sp,sp,-4
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  801bac:	01002074 	movhi	r4,129
  801bb0:	210dfc04 	addi	r4,r4,14320
}

#endif

int main()
{
  801bb4:	dfc00015 	stw	ra,0(sp)
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  801bb8:	080e42c0 	call	80e42c <alt_up_sd_card_open_dev>
	if(device_reference == NULL){
	  printf("Cannot open SD Device\n");
  801bbc:	01002074 	movhi	r4,129
  801bc0:	210e0704 	addi	r4,r4,14364
#endif

int main()
{
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
	if(device_reference == NULL){
  801bc4:	10000f26 	beq	r2,zero,801c04 <main+0x5c>
	  printf("Cannot open SD Device\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_Present()){
  801bc8:	080e3c00 	call	80e3c0 <alt_up_sd_card_is_Present>
	  printf("There is no SD card in the slot\n");
  801bcc:	01002074 	movhi	r4,129
  801bd0:	210e0d04 	addi	r4,r4,14388
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
	if(device_reference == NULL){
	  printf("Cannot open SD Device\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_Present()){
  801bd4:	10000b26 	beq	r2,zero,801c04 <main+0x5c>
	  printf("There is no SD card in the slot\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
  801bd8:	080f5ac0 	call	80f5ac <alt_up_sd_card_is_FAT16>
	  printf("SD card is not of FAT16 type\n");
  801bdc:	01002074 	movhi	r4,129
  801be0:	210e1504 	addi	r4,r4,14420
	}
	if(!alt_up_sd_card_is_Present()){
	  printf("There is no SD card in the slot\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
  801be4:	10000726 	beq	r2,zero,801c04 <main+0x5c>
	  printf("SD card is not of FAT16 type\n");
	  return -1;
	}

	mjpeg423_decode("v3fps.mpg");
  801be8:	01002074 	movhi	r4,129
  801bec:	210e1d04 	addi	r4,r4,14452
  801bf0:	0800e700 	call	800e70 <mjpeg423_decode>
  801bf4:	0005883a 	mov	r2,zero

  return( 0 );
}
  801bf8:	dfc00017 	ldw	ra,0(sp)
  801bfc:	dec00104 	addi	sp,sp,4
  801c00:	f800283a 	ret
	if(!alt_up_sd_card_is_Present()){
	  printf("There is no SD card in the slot\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
	  printf("SD card is not of FAT16 type\n");
  801c04:	0803da40 	call	803da4 <puts>
  801c08:	00bfffc4 	movi	r2,-1
  801c0c:	003ffa06 	br	801bf8 <main+0x50>

00801c10 <GetInputString>:
*           returns the string, minus any '\r' characters it
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
  801c10:	defff904 	addi	sp,sp,-28
  801c14:	dcc00315 	stw	r19,12(sp)
  801c18:	dc800215 	stw	r18,8(sp)
  801c1c:	dc400115 	stw	r17,4(sp)
  801c20:	dfc00615 	stw	ra,24(sp)
  801c24:	dd400515 	stw	r21,20(sp)
  801c28:	dd000415 	stw	r20,16(sp)
  801c2c:	dc000015 	stw	r16,0(sp)
  801c30:	2827883a 	mov	r19,r5
  801c34:	2025883a 	mov	r18,r4
  801c38:	3023883a 	mov	r17,r6
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801c3c:	01400b0e 	bge	zero,r5,801c6c <GetInputString+0x5c>
  801c40:	0021883a 	mov	r16,zero
  801c44:	05000344 	movi	r20,13
  801c48:	05400284 	movi	r21,10
  {
    if( (ch = getc(stream)) != '\r')
  801c4c:	8809883a 	mov	r4,r17
  801c50:	08033380 	call	803338 <getc>
    {
      entry[i] = ch;
  801c54:	8487883a 	add	r3,r16,r18
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  {
    if( (ch = getc(stream)) != '\r')
  801c58:	15000326 	beq	r2,r20,801c68 <GetInputString+0x58>
    {
      entry[i] = ch;
  801c5c:	18800005 	stb	r2,0(r3)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801c60:	15400226 	beq	r2,r21,801c6c <GetInputString+0x5c>
  {
    if( (ch = getc(stream)) != '\r')
    {
      entry[i] = ch;
      i++;
  801c64:	84000044 	addi	r16,r16,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801c68:	84fff816 	blt	r16,r19,801c4c <GetInputString+0x3c>
    {
      entry[i] = ch;
      i++;
    }
  }
}
  801c6c:	dfc00617 	ldw	ra,24(sp)
  801c70:	dd400517 	ldw	r21,20(sp)
  801c74:	dd000417 	ldw	r20,16(sp)
  801c78:	dcc00317 	ldw	r19,12(sp)
  801c7c:	dc800217 	ldw	r18,8(sp)
  801c80:	dc400117 	ldw	r17,4(sp)
  801c84:	dc000017 	ldw	r16,0(sp)
  801c88:	dec00704 	addi	sp,sp,28
  801c8c:	f800283a 	ret

00801c90 <sd_card_file_size>:
	}
	return true;
}

unsigned int sd_card_file_size(short int file_handle)
{
  801c90:	213fffcc 	andi	r4,r4,65535
  801c94:	2120001c 	xori	r4,r4,32768
  801c98:	21200004 	addi	r4,r4,-32768
  801c9c:	200891ba 	slli	r4,r4,6
  801ca0:	00802074 	movhi	r2,129
  801ca4:	109d9d04 	addi	r2,r2,30324
  801ca8:	2089883a 	add	r4,r4,r2
	return active_files[file_handle].file_size_in_bytes;
}
  801cac:	20800017 	ldw	r2,0(r4)
  801cb0:	f800283a 	ret

00801cb4 <sd_card_wait_read_sector>:
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
}

bool sd_card_wait_read_sector()
{
  801cb4:	00802074 	movhi	r2,129
  801cb8:	109d6504 	addi	r2,r2,30100
  801cbc:	11000017 	ldw	r4,0(r2)
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  801cc0:	2080002b 	ldhuio	r2,0(r4)
	} while ((reg_state & 0x04)!=0);
  801cc4:	10bfffcc 	andi	r2,r2,65535
  801cc8:	10c0010c 	andi	r3,r2,4
  801ccc:	183ffc1e 	bne	r3,zero,801cc0 <sd_card_wait_read_sector+0xc>
  801cd0:	1004d13a 	srli	r2,r2,4
  801cd4:	1080005c 	xori	r2,r2,1
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
		return true;
	else
		return false;
}
  801cd8:	1080004c 	andi	r2,r2,1
  801cdc:	f800283a 	ret

00801ce0 <sd_card_start_read_sector>:
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  801ce0:	d0a74817 	ldw	r2,-25312(gp)
  801ce4:	2109883a 	add	r4,r4,r4
  801ce8:	2109883a 	add	r4,r4,r4
  801cec:	2085883a 	add	r2,r4,r2
  801cf0:	01c02074 	movhi	r7,129
  801cf4:	39dd6b04 	addi	r7,r7,30124
  801cf8:	10c00017 	ldw	r3,0(r2)
  801cfc:	39400017 	ldw	r5,0(r7)
  801d00:	00802074 	movhi	r2,129
  801d04:	109d6904 	addi	r2,r2,30116
  801d08:	11800017 	ldw	r6,0(r2)
  801d0c:	1947883a 	add	r3,r3,r5
  801d10:	1806927a 	slli	r3,r3,9
  801d14:	30c00035 	stwio	r3,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  801d18:	00802074 	movhi	r2,129
  801d1c:	109d6804 	addi	r2,r2,30112
  801d20:	11400017 	ldw	r5,0(r2)
  801d24:	00c00444 	movi	r3,17
  801d28:	28c0002d 	sthio	r3,0(r5)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  801d2c:	d0e74817 	ldw	r3,-25312(gp)
  801d30:	39800017 	ldw	r6,0(r7)
  801d34:	20c9883a 	add	r4,r4,r3
  801d38:	20800017 	ldw	r2,0(r4)
  801d3c:	00c02074 	movhi	r3,129
  801d40:	18dd6f04 	addi	r3,r3,30140
  801d44:	1185883a 	add	r2,r2,r6
  801d48:	18800015 	stw	r2,0(r3)
}
  801d4c:	f800283a 	ret

00801d50 <sd_card_create_sectors_list>:

unsigned int *sectors = NULL;

bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);
  801d50:	d0a74817 	ldw	r2,-25312(gp)
extern unsigned int current_sector_index;

unsigned int *sectors = NULL;

bool sd_card_create_sectors_list(short int file_handle)
{
  801d54:	defff604 	addi	sp,sp,-40
  801d58:	dc000115 	stw	r16,4(sp)
  801d5c:	dfc00915 	stw	ra,36(sp)
  801d60:	ddc00815 	stw	r23,32(sp)
  801d64:	dd800715 	stw	r22,28(sp)
  801d68:	dd400615 	stw	r21,24(sp)
  801d6c:	dd000515 	stw	r20,20(sp)
  801d70:	dcc00415 	stw	r19,16(sp)
  801d74:	dc800315 	stw	r18,12(sp)
  801d78:	dc400215 	stw	r17,8(sp)
  801d7c:	2021883a 	mov	r16,r4
	if(sectors != NULL) free(sectors);
  801d80:	10000226 	beq	r2,zero,801d8c <sd_card_create_sectors_list+0x3c>
  801d84:	1009883a 	mov	r4,r2
  801d88:	08034600 	call	803460 <free>

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801d8c:	80bfffcc 	andi	r2,r16,65535
  801d90:	10a0001c 	xori	r2,r2,32768
  801d94:	10a00004 	addi	r2,r2,-32768
  801d98:	100491ba 	slli	r2,r2,6
  801d9c:	00c02074 	movhi	r3,129
  801da0:	18dd9704 	addi	r3,r3,30300
	//allocate sector list
	sectors = malloc(4*sectors_num);

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801da4:	05402074 	movhi	r21,129
  801da8:	ad5d8204 	addi	r21,r21,30216
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801dac:	10e1883a 	add	r16,r2,r3
  801db0:	81000617 	ldw	r4,24(r16)
  801db4:	0802b400 	call	802b40 <__floatunsidf>
  801db8:	0011883a 	mov	r8,zero
  801dbc:	024fd834 	movhi	r9,16224
  801dc0:	480f883a 	mov	r7,r9
  801dc4:	400d883a 	mov	r6,r8
  801dc8:	180b883a 	mov	r5,r3
  801dcc:	1009883a 	mov	r4,r2
  801dd0:	080261c0 	call	80261c <__muldf3>
  801dd4:	180b883a 	mov	r5,r3
  801dd8:	1009883a 	mov	r4,r2
  801ddc:	0801f040 	call	801f04 <ceil>
  801de0:	180b883a 	mov	r5,r3
  801de4:	1009883a 	mov	r4,r2
  801de8:	0802a680 	call	802a68 <__fixdfsi>

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801dec:	1089883a 	add	r4,r2,r2
  801df0:	2109883a 	add	r4,r4,r4
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801df4:	1027883a 	mov	r19,r2

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801df8:	08034740 	call	803474 <malloc>

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801dfc:	80c00717 	ldw	r3,28(r16)
  801e00:	a9800383 	ldbu	r6,14(r21)
  801e04:	a9001417 	ldw	r4,80(r21)
  801e08:	81400817 	ldw	r5,32(r16)
  801e0c:	18ffff84 	addi	r3,r3,-2
  801e10:	1987383a 	mul	r3,r3,r6
  801e14:	2149883a 	add	r4,r4,r5
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e18:	01c00044 	movi	r7,1
	//allocate sector list
	sectors = malloc(4*sectors_num);

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801e1c:	190d883a 	add	r6,r3,r4
	sectors[0] = data_sector;
  801e20:	11800015 	stw	r6,0(r2)

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801e24:	d0a74815 	stw	r2,-25312(gp)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e28:	3cc0280e 	bge	r7,r19,801ecc <sd_card_create_sectors_list+0x17c>
  801e2c:	8023883a 	mov	r17,r16
  801e30:	3825883a 	mov	r18,r7
  801e34:	04000104 	movi	r16,4
  801e38:	8d000804 	addi	r20,r17,32
  801e3c:	a82d883a 	mov	r22,r21
  801e40:	05fffe14 	movui	r23,65528
  801e44:	00000806 	br	801e68 <sd_card_create_sectors_list+0x118>
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801e48:	d0a74817 	ldw	r2,-25312(gp)
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  801e4c:	a1000015 	stw	r4,0(r20)
			data_sector = data_sector + 1;
  801e50:	31800044 	addi	r6,r6,1
		}

		sectors[i] = data_sector;
  801e54:	8085883a 	add	r2,r16,r2
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e58:	94800044 	addi	r18,r18,1
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801e5c:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e60:	84000104 	addi	r16,r16,4
  801e64:	9c801926 	beq	r19,r18,801ecc <sd_card_create_sectors_list+0x17c>

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801e68:	a8800383 	ldbu	r2,14(r21)
  801e6c:	88c00817 	ldw	r3,32(r17)
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  801e70:	d80b883a 	mov	r5,sp

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801e74:	10bfffc4 	addi	r2,r2,-1
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  801e78:	19000044 	addi	r4,r3,1

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801e7c:	18bff21e 	bne	r3,r2,801e48 <sd_card_create_sectors_list+0xf8>
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  801e80:	89000717 	ldw	r4,28(r17)
  801e84:	080f7940 	call	80f794 <get_cluster_flag>
  801e88:	10001c26 	beq	r2,zero,801efc <sd_card_create_sectors_list+0x1ac>
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  801e8c:	d900000b 	ldhu	r4,0(sp)
  801e90:	20bffe0c 	andi	r2,r4,65528
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801e94:	217fff84 	addi	r5,r4,-2
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  801e98:	15c01826 	beq	r2,r23,801efc <sd_card_create_sectors_list+0x1ac>
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801e9c:	b0800383 	ldbu	r2,14(r22)
  801ea0:	b0c01417 	ldw	r3,80(r22)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801ea4:	94800044 	addi	r18,r18,1
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801ea8:	2885383a 	mul	r2,r5,r2
					/* End of file */
					return false;
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
  801eac:	89000715 	stw	r4,28(r17)
					active_files[file_handle].current_sector_in_cluster = 0;
  801eb0:	88000815 	stw	zero,32(r17)
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801eb4:	10cd883a 	add	r6,r2,r3
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801eb8:	d0a74817 	ldw	r2,-25312(gp)
  801ebc:	8085883a 	add	r2,r16,r2
  801ec0:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801ec4:	84000104 	addi	r16,r16,4
  801ec8:	9cbfe71e 	bne	r19,r18,801e68 <sd_card_create_sectors_list+0x118>
  801ecc:	00800044 	movi	r2,1
		}

		sectors[i] = data_sector;
	}
	return true;
}
  801ed0:	dfc00917 	ldw	ra,36(sp)
  801ed4:	ddc00817 	ldw	r23,32(sp)
  801ed8:	dd800717 	ldw	r22,28(sp)
  801edc:	dd400617 	ldw	r21,24(sp)
  801ee0:	dd000517 	ldw	r20,20(sp)
  801ee4:	dcc00417 	ldw	r19,16(sp)
  801ee8:	dc800317 	ldw	r18,12(sp)
  801eec:	dc400217 	ldw	r17,8(sp)
  801ef0:	dc000117 	ldw	r16,4(sp)
  801ef4:	dec00a04 	addi	sp,sp,40
  801ef8:	f800283a 	ret
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801efc:	0005883a 	mov	r2,zero
  801f00:	003ff306 	br	801ed0 <sd_card_create_sectors_list+0x180>

00801f04 <ceil>:
  801f04:	2805d53a 	srai	r2,r5,20
  801f08:	defff604 	addi	sp,sp,-40
  801f0c:	dd800615 	stw	r22,24(sp)
  801f10:	10c1ffcc 	andi	r3,r2,2047
  801f14:	1dbf0044 	addi	r22,r3,-1023
  801f18:	008004c4 	movi	r2,19
  801f1c:	ddc00715 	stw	r23,28(sp)
  801f20:	dc800215 	stw	r18,8(sp)
  801f24:	dc400115 	stw	r17,4(sp)
  801f28:	dc000015 	stw	r16,0(sp)
  801f2c:	dfc00915 	stw	ra,36(sp)
  801f30:	df000815 	stw	fp,32(sp)
  801f34:	dd400515 	stw	r21,20(sp)
  801f38:	dd000415 	stw	r20,16(sp)
  801f3c:	dcc00315 	stw	r19,12(sp)
  801f40:	2021883a 	mov	r16,r4
  801f44:	2823883a 	mov	r17,r5
  801f48:	282f883a 	mov	r23,r5
  801f4c:	2025883a 	mov	r18,r4
  801f50:	15802c16 	blt	r2,r22,802004 <ceil+0x100>
  801f54:	b0005416 	blt	r22,zero,8020a8 <ceil+0x1a4>
  801f58:	00800434 	movhi	r2,16
  801f5c:	10bfffc4 	addi	r2,r2,-1
  801f60:	15b9d83a 	sra	fp,r2,r22
  801f64:	282f883a 	mov	r23,r5
  801f68:	e144703a 	and	r2,fp,r5
  801f6c:	1104b03a 	or	r2,r2,r4
  801f70:	10001626 	beq	r2,zero,801fcc <ceil+0xc8>
  801f74:	00a20034 	movhi	r2,34816
  801f78:	109d6704 	addi	r2,r2,30108
  801f7c:	00df8e34 	movhi	r3,32312
  801f80:	18f90f04 	addi	r3,r3,-7108
  801f84:	180f883a 	mov	r7,r3
  801f88:	100d883a 	mov	r6,r2
  801f8c:	08025a80 	call	8025a8 <__adddf3>
  801f90:	180b883a 	mov	r5,r3
  801f94:	000d883a 	mov	r6,zero
  801f98:	000f883a 	mov	r7,zero
  801f9c:	1009883a 	mov	r4,r2
  801fa0:	08029e00 	call	8029e0 <__gtdf2>
  801fa4:	0080070e 	bge	zero,r2,801fc4 <ceil+0xc0>
  801fa8:	0440030e 	bge	zero,r17,801fb8 <ceil+0xb4>
  801fac:	00800434 	movhi	r2,16
  801fb0:	1585d83a 	sra	r2,r2,r22
  801fb4:	88af883a 	add	r23,r17,r2
  801fb8:	0704303a 	nor	r2,zero,fp
  801fbc:	b8ae703a 	and	r23,r23,r2
  801fc0:	0025883a 	mov	r18,zero
  801fc4:	9021883a 	mov	r16,r18
  801fc8:	b823883a 	mov	r17,r23
  801fcc:	8005883a 	mov	r2,r16
  801fd0:	8807883a 	mov	r3,r17
  801fd4:	dfc00917 	ldw	ra,36(sp)
  801fd8:	df000817 	ldw	fp,32(sp)
  801fdc:	ddc00717 	ldw	r23,28(sp)
  801fe0:	dd800617 	ldw	r22,24(sp)
  801fe4:	dd400517 	ldw	r21,20(sp)
  801fe8:	dd000417 	ldw	r20,16(sp)
  801fec:	dcc00317 	ldw	r19,12(sp)
  801ff0:	dc800217 	ldw	r18,8(sp)
  801ff4:	dc400117 	ldw	r17,4(sp)
  801ff8:	dc000017 	ldw	r16,0(sp)
  801ffc:	dec00a04 	addi	sp,sp,40
  802000:	f800283a 	ret
  802004:	00800cc4 	movi	r2,51
  802008:	15801f16 	blt	r2,r22,802088 <ceil+0x184>
  80200c:	18befb44 	addi	r2,r3,-1043
  802010:	00ffffc4 	movi	r3,-1
  802014:	18b8d83a 	srl	fp,r3,r2
  802018:	e104703a 	and	r2,fp,r4
  80201c:	103feb26 	beq	r2,zero,801fcc <ceil+0xc8>
  802020:	00a20034 	movhi	r2,34816
  802024:	109d6704 	addi	r2,r2,30108
  802028:	00df8e34 	movhi	r3,32312
  80202c:	18f90f04 	addi	r3,r3,-7108
  802030:	180f883a 	mov	r7,r3
  802034:	100d883a 	mov	r6,r2
  802038:	08025a80 	call	8025a8 <__adddf3>
  80203c:	180b883a 	mov	r5,r3
  802040:	000d883a 	mov	r6,zero
  802044:	000f883a 	mov	r7,zero
  802048:	1009883a 	mov	r4,r2
  80204c:	08029e00 	call	8029e0 <__gtdf2>
  802050:	0080250e 	bge	zero,r2,8020e8 <ceil+0x1e4>
  802054:	0440090e 	bge	zero,r17,80207c <ceil+0x178>
  802058:	00800504 	movi	r2,20
  80205c:	b0802926 	beq	r22,r2,802104 <ceil+0x200>
  802060:	00c00d04 	movi	r3,52
  802064:	1d87c83a 	sub	r3,r3,r22
  802068:	00800044 	movi	r2,1
  80206c:	10c4983a 	sll	r2,r2,r3
  802070:	8085883a 	add	r2,r16,r2
  802074:	14001e36 	bltu	r2,r16,8020f0 <ceil+0x1ec>
  802078:	1025883a 	mov	r18,r2
  80207c:	0704303a 	nor	r2,zero,fp
  802080:	90a4703a 	and	r18,r18,r2
  802084:	003fcf06 	br	801fc4 <ceil+0xc0>
  802088:	00810004 	movi	r2,1024
  80208c:	b0bfcf1e 	bne	r22,r2,801fcc <ceil+0xc8>
  802090:	800d883a 	mov	r6,r16
  802094:	280f883a 	mov	r7,r5
  802098:	08025a80 	call	8025a8 <__adddf3>
  80209c:	1021883a 	mov	r16,r2
  8020a0:	1823883a 	mov	r17,r3
  8020a4:	003fc906 	br	801fcc <ceil+0xc8>
  8020a8:	00a20034 	movhi	r2,34816
  8020ac:	109d6704 	addi	r2,r2,30108
  8020b0:	00df8e34 	movhi	r3,32312
  8020b4:	18f90f04 	addi	r3,r3,-7108
  8020b8:	180f883a 	mov	r7,r3
  8020bc:	100d883a 	mov	r6,r2
  8020c0:	08025a80 	call	8025a8 <__adddf3>
  8020c4:	180b883a 	mov	r5,r3
  8020c8:	000d883a 	mov	r6,zero
  8020cc:	000f883a 	mov	r7,zero
  8020d0:	1009883a 	mov	r4,r2
  8020d4:	08029e00 	call	8029e0 <__gtdf2>
  8020d8:	00bfba0e 	bge	zero,r2,801fc4 <ceil+0xc0>
  8020dc:	88000b16 	blt	r17,zero,80210c <ceil+0x208>
  8020e0:	8c04b03a 	or	r2,r17,r16
  8020e4:	1000041e 	bne	r2,zero,8020f8 <ceil+0x1f4>
  8020e8:	882f883a 	mov	r23,r17
  8020ec:	003fb506 	br	801fc4 <ceil+0xc0>
  8020f0:	8dc00044 	addi	r23,r17,1
  8020f4:	003fe006 	br	802078 <ceil+0x174>
  8020f8:	05cffc34 	movhi	r23,16368
  8020fc:	0025883a 	mov	r18,zero
  802100:	003fb006 	br	801fc4 <ceil+0xc0>
  802104:	8dc00044 	addi	r23,r17,1
  802108:	003fdc06 	br	80207c <ceil+0x178>
  80210c:	05e00034 	movhi	r23,32768
  802110:	0025883a 	mov	r18,zero
  802114:	003fab06 	br	801fc4 <ceil+0xc0>

00802118 <_fpadd_parts>:
  802118:	defff804 	addi	sp,sp,-32
  80211c:	dcc00315 	stw	r19,12(sp)
  802120:	2027883a 	mov	r19,r4
  802124:	21000017 	ldw	r4,0(r4)
  802128:	00c00044 	movi	r3,1
  80212c:	dd400515 	stw	r21,20(sp)
  802130:	dd000415 	stw	r20,16(sp)
  802134:	ddc00715 	stw	r23,28(sp)
  802138:	dd800615 	stw	r22,24(sp)
  80213c:	dc800215 	stw	r18,8(sp)
  802140:	dc400115 	stw	r17,4(sp)
  802144:	dc000015 	stw	r16,0(sp)
  802148:	282b883a 	mov	r21,r5
  80214c:	3029883a 	mov	r20,r6
  802150:	1900632e 	bgeu	r3,r4,8022e0 <_fpadd_parts+0x1c8>
  802154:	28800017 	ldw	r2,0(r5)
  802158:	1880812e 	bgeu	r3,r2,802360 <_fpadd_parts+0x248>
  80215c:	00c00104 	movi	r3,4
  802160:	20c0dc26 	beq	r4,r3,8024d4 <_fpadd_parts+0x3bc>
  802164:	10c07e26 	beq	r2,r3,802360 <_fpadd_parts+0x248>
  802168:	00c00084 	movi	r3,2
  80216c:	10c06726 	beq	r2,r3,80230c <_fpadd_parts+0x1f4>
  802170:	20c07b26 	beq	r4,r3,802360 <_fpadd_parts+0x248>
  802174:	9dc00217 	ldw	r23,8(r19)
  802178:	28c00217 	ldw	r3,8(r5)
  80217c:	9c400317 	ldw	r17,12(r19)
  802180:	2bc00317 	ldw	r15,12(r5)
  802184:	b8cdc83a 	sub	r6,r23,r3
  802188:	9c800417 	ldw	r18,16(r19)
  80218c:	2c000417 	ldw	r16,16(r5)
  802190:	3009883a 	mov	r4,r6
  802194:	30009716 	blt	r6,zero,8023f4 <_fpadd_parts+0x2dc>
  802198:	00800fc4 	movi	r2,63
  80219c:	11806b16 	blt	r2,r6,80234c <_fpadd_parts+0x234>
  8021a0:	0100a40e 	bge	zero,r4,802434 <_fpadd_parts+0x31c>
  8021a4:	35bff804 	addi	r22,r6,-32
  8021a8:	b000bc16 	blt	r22,zero,80249c <_fpadd_parts+0x384>
  8021ac:	8596d83a 	srl	r11,r16,r22
  8021b0:	0019883a 	mov	r12,zero
  8021b4:	0013883a 	mov	r9,zero
  8021b8:	01000044 	movi	r4,1
  8021bc:	0015883a 	mov	r10,zero
  8021c0:	b000be16 	blt	r22,zero,8024bc <_fpadd_parts+0x3a4>
  8021c4:	2590983a 	sll	r8,r4,r22
  8021c8:	000f883a 	mov	r7,zero
  8021cc:	00bfffc4 	movi	r2,-1
  8021d0:	3889883a 	add	r4,r7,r2
  8021d4:	408b883a 	add	r5,r8,r2
  8021d8:	21cd803a 	cmpltu	r6,r4,r7
  8021dc:	314b883a 	add	r5,r6,r5
  8021e0:	7904703a 	and	r2,r15,r4
  8021e4:	8146703a 	and	r3,r16,r5
  8021e8:	10c4b03a 	or	r2,r2,r3
  8021ec:	10000226 	beq	r2,zero,8021f8 <_fpadd_parts+0xe0>
  8021f0:	02400044 	movi	r9,1
  8021f4:	0015883a 	mov	r10,zero
  8021f8:	5a5eb03a 	or	r15,r11,r9
  8021fc:	62a0b03a 	or	r16,r12,r10
  802200:	99400117 	ldw	r5,4(r19)
  802204:	a8800117 	ldw	r2,4(r21)
  802208:	28806e26 	beq	r5,r2,8023c4 <_fpadd_parts+0x2ac>
  80220c:	28006626 	beq	r5,zero,8023a8 <_fpadd_parts+0x290>
  802210:	7c45c83a 	sub	r2,r15,r17
  802214:	7889803a 	cmpltu	r4,r15,r2
  802218:	8487c83a 	sub	r3,r16,r18
  80221c:	1909c83a 	sub	r4,r3,r4
  802220:	100d883a 	mov	r6,r2
  802224:	200f883a 	mov	r7,r4
  802228:	38007716 	blt	r7,zero,802408 <_fpadd_parts+0x2f0>
  80222c:	a5c00215 	stw	r23,8(r20)
  802230:	a1c00415 	stw	r7,16(r20)
  802234:	a0000115 	stw	zero,4(r20)
  802238:	a1800315 	stw	r6,12(r20)
  80223c:	a2000317 	ldw	r8,12(r20)
  802240:	a2400417 	ldw	r9,16(r20)
  802244:	00bfffc4 	movi	r2,-1
  802248:	408b883a 	add	r5,r8,r2
  80224c:	2a09803a 	cmpltu	r4,r5,r8
  802250:	488d883a 	add	r6,r9,r2
  802254:	01c40034 	movhi	r7,4096
  802258:	39ffffc4 	addi	r7,r7,-1
  80225c:	218d883a 	add	r6,r4,r6
  802260:	39801736 	bltu	r7,r6,8022c0 <_fpadd_parts+0x1a8>
  802264:	31c06526 	beq	r6,r7,8023fc <_fpadd_parts+0x2e4>
  802268:	a3000217 	ldw	r12,8(r20)
  80226c:	4209883a 	add	r4,r8,r8
  802270:	00bfffc4 	movi	r2,-1
  802274:	220f803a 	cmpltu	r7,r4,r8
  802278:	4a4b883a 	add	r5,r9,r9
  80227c:	394f883a 	add	r7,r7,r5
  802280:	2095883a 	add	r10,r4,r2
  802284:	3897883a 	add	r11,r7,r2
  802288:	510d803a 	cmpltu	r6,r10,r4
  80228c:	6099883a 	add	r12,r12,r2
  802290:	32d7883a 	add	r11,r6,r11
  802294:	00840034 	movhi	r2,4096
  802298:	10bfffc4 	addi	r2,r2,-1
  80229c:	2011883a 	mov	r8,r4
  8022a0:	3813883a 	mov	r9,r7
  8022a4:	a1000315 	stw	r4,12(r20)
  8022a8:	a1c00415 	stw	r7,16(r20)
  8022ac:	a3000215 	stw	r12,8(r20)
  8022b0:	12c00336 	bltu	r2,r11,8022c0 <_fpadd_parts+0x1a8>
  8022b4:	58bfed1e 	bne	r11,r2,80226c <_fpadd_parts+0x154>
  8022b8:	00bfff84 	movi	r2,-2
  8022bc:	12bfeb2e 	bgeu	r2,r10,80226c <_fpadd_parts+0x154>
  8022c0:	a2800417 	ldw	r10,16(r20)
  8022c4:	008000c4 	movi	r2,3
  8022c8:	00c80034 	movhi	r3,8192
  8022cc:	18ffffc4 	addi	r3,r3,-1
  8022d0:	a2400317 	ldw	r9,12(r20)
  8022d4:	a0800015 	stw	r2,0(r20)
  8022d8:	1a802336 	bltu	r3,r10,802368 <_fpadd_parts+0x250>
  8022dc:	a027883a 	mov	r19,r20
  8022e0:	9805883a 	mov	r2,r19
  8022e4:	ddc00717 	ldw	r23,28(sp)
  8022e8:	dd800617 	ldw	r22,24(sp)
  8022ec:	dd400517 	ldw	r21,20(sp)
  8022f0:	dd000417 	ldw	r20,16(sp)
  8022f4:	dcc00317 	ldw	r19,12(sp)
  8022f8:	dc800217 	ldw	r18,8(sp)
  8022fc:	dc400117 	ldw	r17,4(sp)
  802300:	dc000017 	ldw	r16,0(sp)
  802304:	dec00804 	addi	sp,sp,32
  802308:	f800283a 	ret
  80230c:	20fff41e 	bne	r4,r3,8022e0 <_fpadd_parts+0x1c8>
  802310:	31000015 	stw	r4,0(r6)
  802314:	98800117 	ldw	r2,4(r19)
  802318:	30800115 	stw	r2,4(r6)
  80231c:	98c00217 	ldw	r3,8(r19)
  802320:	30c00215 	stw	r3,8(r6)
  802324:	98800317 	ldw	r2,12(r19)
  802328:	30800315 	stw	r2,12(r6)
  80232c:	98c00417 	ldw	r3,16(r19)
  802330:	30c00415 	stw	r3,16(r6)
  802334:	98800117 	ldw	r2,4(r19)
  802338:	28c00117 	ldw	r3,4(r5)
  80233c:	3027883a 	mov	r19,r6
  802340:	10c4703a 	and	r2,r2,r3
  802344:	30800115 	stw	r2,4(r6)
  802348:	003fe506 	br	8022e0 <_fpadd_parts+0x1c8>
  80234c:	1dc02616 	blt	r3,r23,8023e8 <_fpadd_parts+0x2d0>
  802350:	0023883a 	mov	r17,zero
  802354:	182f883a 	mov	r23,r3
  802358:	0025883a 	mov	r18,zero
  80235c:	003fa806 	br	802200 <_fpadd_parts+0xe8>
  802360:	a827883a 	mov	r19,r21
  802364:	003fde06 	br	8022e0 <_fpadd_parts+0x1c8>
  802368:	01800044 	movi	r6,1
  80236c:	500497fa 	slli	r2,r10,31
  802370:	4808d07a 	srli	r4,r9,1
  802374:	518ad83a 	srl	r5,r10,r6
  802378:	a2000217 	ldw	r8,8(r20)
  80237c:	1108b03a 	or	r4,r2,r4
  802380:	0007883a 	mov	r3,zero
  802384:	4984703a 	and	r2,r9,r6
  802388:	208cb03a 	or	r6,r4,r2
  80238c:	28ceb03a 	or	r7,r5,r3
  802390:	42000044 	addi	r8,r8,1
  802394:	a027883a 	mov	r19,r20
  802398:	a1c00415 	stw	r7,16(r20)
  80239c:	a2000215 	stw	r8,8(r20)
  8023a0:	a1800315 	stw	r6,12(r20)
  8023a4:	003fce06 	br	8022e0 <_fpadd_parts+0x1c8>
  8023a8:	8bc5c83a 	sub	r2,r17,r15
  8023ac:	8889803a 	cmpltu	r4,r17,r2
  8023b0:	9407c83a 	sub	r3,r18,r16
  8023b4:	1909c83a 	sub	r4,r3,r4
  8023b8:	100d883a 	mov	r6,r2
  8023bc:	200f883a 	mov	r7,r4
  8023c0:	003f9906 	br	802228 <_fpadd_parts+0x110>
  8023c4:	8bc5883a 	add	r2,r17,r15
  8023c8:	1449803a 	cmpltu	r4,r2,r17
  8023cc:	9407883a 	add	r3,r18,r16
  8023d0:	20c9883a 	add	r4,r4,r3
  8023d4:	a1400115 	stw	r5,4(r20)
  8023d8:	a5c00215 	stw	r23,8(r20)
  8023dc:	a0800315 	stw	r2,12(r20)
  8023e0:	a1000415 	stw	r4,16(r20)
  8023e4:	003fb606 	br	8022c0 <_fpadd_parts+0x1a8>
  8023e8:	001f883a 	mov	r15,zero
  8023ec:	0021883a 	mov	r16,zero
  8023f0:	003f8306 	br	802200 <_fpadd_parts+0xe8>
  8023f4:	018dc83a 	sub	r6,zero,r6
  8023f8:	003f6706 	br	802198 <_fpadd_parts+0x80>
  8023fc:	00bfff84 	movi	r2,-2
  802400:	117faf36 	bltu	r2,r5,8022c0 <_fpadd_parts+0x1a8>
  802404:	003f9806 	br	802268 <_fpadd_parts+0x150>
  802408:	0005883a 	mov	r2,zero
  80240c:	1189c83a 	sub	r4,r2,r6
  802410:	1105803a 	cmpltu	r2,r2,r4
  802414:	01cbc83a 	sub	r5,zero,r7
  802418:	2885c83a 	sub	r2,r5,r2
  80241c:	01800044 	movi	r6,1
  802420:	a1800115 	stw	r6,4(r20)
  802424:	a5c00215 	stw	r23,8(r20)
  802428:	a1000315 	stw	r4,12(r20)
  80242c:	a0800415 	stw	r2,16(r20)
  802430:	003f8206 	br	80223c <_fpadd_parts+0x124>
  802434:	203f7226 	beq	r4,zero,802200 <_fpadd_parts+0xe8>
  802438:	35bff804 	addi	r22,r6,-32
  80243c:	b9af883a 	add	r23,r23,r6
  802440:	b0003116 	blt	r22,zero,802508 <_fpadd_parts+0x3f0>
  802444:	959ad83a 	srl	r13,r18,r22
  802448:	001d883a 	mov	r14,zero
  80244c:	000f883a 	mov	r7,zero
  802450:	01000044 	movi	r4,1
  802454:	0011883a 	mov	r8,zero
  802458:	b0002516 	blt	r22,zero,8024f0 <_fpadd_parts+0x3d8>
  80245c:	2594983a 	sll	r10,r4,r22
  802460:	0013883a 	mov	r9,zero
  802464:	00bfffc4 	movi	r2,-1
  802468:	4889883a 	add	r4,r9,r2
  80246c:	508b883a 	add	r5,r10,r2
  802470:	224d803a 	cmpltu	r6,r4,r9
  802474:	314b883a 	add	r5,r6,r5
  802478:	8904703a 	and	r2,r17,r4
  80247c:	9146703a 	and	r3,r18,r5
  802480:	10c4b03a 	or	r2,r2,r3
  802484:	10000226 	beq	r2,zero,802490 <_fpadd_parts+0x378>
  802488:	01c00044 	movi	r7,1
  80248c:	0011883a 	mov	r8,zero
  802490:	69e2b03a 	or	r17,r13,r7
  802494:	7224b03a 	or	r18,r14,r8
  802498:	003f5906 	br	802200 <_fpadd_parts+0xe8>
  80249c:	8407883a 	add	r3,r16,r16
  8024a0:	008007c4 	movi	r2,31
  8024a4:	1185c83a 	sub	r2,r2,r6
  8024a8:	1886983a 	sll	r3,r3,r2
  8024ac:	7996d83a 	srl	r11,r15,r6
  8024b0:	8198d83a 	srl	r12,r16,r6
  8024b4:	1ad6b03a 	or	r11,r3,r11
  8024b8:	003f3e06 	br	8021b4 <_fpadd_parts+0x9c>
  8024bc:	2006d07a 	srli	r3,r4,1
  8024c0:	008007c4 	movi	r2,31
  8024c4:	1185c83a 	sub	r2,r2,r6
  8024c8:	1890d83a 	srl	r8,r3,r2
  8024cc:	218e983a 	sll	r7,r4,r6
  8024d0:	003f3e06 	br	8021cc <_fpadd_parts+0xb4>
  8024d4:	113f821e 	bne	r2,r4,8022e0 <_fpadd_parts+0x1c8>
  8024d8:	28c00117 	ldw	r3,4(r5)
  8024dc:	98800117 	ldw	r2,4(r19)
  8024e0:	10ff7f26 	beq	r2,r3,8022e0 <_fpadd_parts+0x1c8>
  8024e4:	04c02074 	movhi	r19,129
  8024e8:	9cce2004 	addi	r19,r19,14464
  8024ec:	003f7c06 	br	8022e0 <_fpadd_parts+0x1c8>
  8024f0:	2006d07a 	srli	r3,r4,1
  8024f4:	008007c4 	movi	r2,31
  8024f8:	1185c83a 	sub	r2,r2,r6
  8024fc:	1894d83a 	srl	r10,r3,r2
  802500:	2192983a 	sll	r9,r4,r6
  802504:	003fd706 	br	802464 <_fpadd_parts+0x34c>
  802508:	9487883a 	add	r3,r18,r18
  80250c:	008007c4 	movi	r2,31
  802510:	1185c83a 	sub	r2,r2,r6
  802514:	1886983a 	sll	r3,r3,r2
  802518:	899ad83a 	srl	r13,r17,r6
  80251c:	919cd83a 	srl	r14,r18,r6
  802520:	1b5ab03a 	or	r13,r3,r13
  802524:	003fc906 	br	80244c <_fpadd_parts+0x334>

00802528 <__subdf3>:
  802528:	deffea04 	addi	sp,sp,-88
  80252c:	dcc01415 	stw	r19,80(sp)
  802530:	dcc00404 	addi	r19,sp,16
  802534:	2011883a 	mov	r8,r4
  802538:	2813883a 	mov	r9,r5
  80253c:	dc401315 	stw	r17,76(sp)
  802540:	d809883a 	mov	r4,sp
  802544:	980b883a 	mov	r5,r19
  802548:	dc400904 	addi	r17,sp,36
  80254c:	dfc01515 	stw	ra,84(sp)
  802550:	da400115 	stw	r9,4(sp)
  802554:	d9c00315 	stw	r7,12(sp)
  802558:	da000015 	stw	r8,0(sp)
  80255c:	d9800215 	stw	r6,8(sp)
  802560:	08031000 	call	803100 <__unpack_d>
  802564:	d9000204 	addi	r4,sp,8
  802568:	880b883a 	mov	r5,r17
  80256c:	08031000 	call	803100 <__unpack_d>
  802570:	d8800a17 	ldw	r2,40(sp)
  802574:	880b883a 	mov	r5,r17
  802578:	9809883a 	mov	r4,r19
  80257c:	d9800e04 	addi	r6,sp,56
  802580:	1080005c 	xori	r2,r2,1
  802584:	d8800a15 	stw	r2,40(sp)
  802588:	08021180 	call	802118 <_fpadd_parts>
  80258c:	1009883a 	mov	r4,r2
  802590:	0802dec0 	call	802dec <__pack_d>
  802594:	dfc01517 	ldw	ra,84(sp)
  802598:	dcc01417 	ldw	r19,80(sp)
  80259c:	dc401317 	ldw	r17,76(sp)
  8025a0:	dec01604 	addi	sp,sp,88
  8025a4:	f800283a 	ret

008025a8 <__adddf3>:
  8025a8:	deffea04 	addi	sp,sp,-88
  8025ac:	dcc01415 	stw	r19,80(sp)
  8025b0:	dcc00404 	addi	r19,sp,16
  8025b4:	2011883a 	mov	r8,r4
  8025b8:	2813883a 	mov	r9,r5
  8025bc:	dc401315 	stw	r17,76(sp)
  8025c0:	d809883a 	mov	r4,sp
  8025c4:	980b883a 	mov	r5,r19
  8025c8:	dc400904 	addi	r17,sp,36
  8025cc:	dfc01515 	stw	ra,84(sp)
  8025d0:	da400115 	stw	r9,4(sp)
  8025d4:	d9c00315 	stw	r7,12(sp)
  8025d8:	da000015 	stw	r8,0(sp)
  8025dc:	d9800215 	stw	r6,8(sp)
  8025e0:	08031000 	call	803100 <__unpack_d>
  8025e4:	d9000204 	addi	r4,sp,8
  8025e8:	880b883a 	mov	r5,r17
  8025ec:	08031000 	call	803100 <__unpack_d>
  8025f0:	d9800e04 	addi	r6,sp,56
  8025f4:	9809883a 	mov	r4,r19
  8025f8:	880b883a 	mov	r5,r17
  8025fc:	08021180 	call	802118 <_fpadd_parts>
  802600:	1009883a 	mov	r4,r2
  802604:	0802dec0 	call	802dec <__pack_d>
  802608:	dfc01517 	ldw	ra,84(sp)
  80260c:	dcc01417 	ldw	r19,80(sp)
  802610:	dc401317 	ldw	r17,76(sp)
  802614:	dec01604 	addi	sp,sp,88
  802618:	f800283a 	ret

0080261c <__muldf3>:
  80261c:	deffe004 	addi	sp,sp,-128
  802620:	dc401815 	stw	r17,96(sp)
  802624:	dc400404 	addi	r17,sp,16
  802628:	2011883a 	mov	r8,r4
  80262c:	2813883a 	mov	r9,r5
  802630:	dc001715 	stw	r16,92(sp)
  802634:	d809883a 	mov	r4,sp
  802638:	880b883a 	mov	r5,r17
  80263c:	dc000904 	addi	r16,sp,36
  802640:	dfc01f15 	stw	ra,124(sp)
  802644:	da400115 	stw	r9,4(sp)
  802648:	d9c00315 	stw	r7,12(sp)
  80264c:	da000015 	stw	r8,0(sp)
  802650:	d9800215 	stw	r6,8(sp)
  802654:	ddc01e15 	stw	r23,120(sp)
  802658:	dd801d15 	stw	r22,116(sp)
  80265c:	dd401c15 	stw	r21,112(sp)
  802660:	dd001b15 	stw	r20,108(sp)
  802664:	dcc01a15 	stw	r19,104(sp)
  802668:	dc801915 	stw	r18,100(sp)
  80266c:	08031000 	call	803100 <__unpack_d>
  802670:	d9000204 	addi	r4,sp,8
  802674:	800b883a 	mov	r5,r16
  802678:	08031000 	call	803100 <__unpack_d>
  80267c:	d9000417 	ldw	r4,16(sp)
  802680:	00800044 	movi	r2,1
  802684:	1100102e 	bgeu	r2,r4,8026c8 <__muldf3+0xac>
  802688:	d8c00917 	ldw	r3,36(sp)
  80268c:	10c0062e 	bgeu	r2,r3,8026a8 <__muldf3+0x8c>
  802690:	00800104 	movi	r2,4
  802694:	20800a26 	beq	r4,r2,8026c0 <__muldf3+0xa4>
  802698:	1880cc26 	beq	r3,r2,8029cc <__muldf3+0x3b0>
  80269c:	00800084 	movi	r2,2
  8026a0:	20800926 	beq	r4,r2,8026c8 <__muldf3+0xac>
  8026a4:	1880191e 	bne	r3,r2,80270c <__muldf3+0xf0>
  8026a8:	d8c00a17 	ldw	r3,40(sp)
  8026ac:	d8800517 	ldw	r2,20(sp)
  8026b0:	8009883a 	mov	r4,r16
  8026b4:	10c4c03a 	cmpne	r2,r2,r3
  8026b8:	d8800a15 	stw	r2,40(sp)
  8026bc:	00000706 	br	8026dc <__muldf3+0xc0>
  8026c0:	00800084 	movi	r2,2
  8026c4:	1880c326 	beq	r3,r2,8029d4 <__muldf3+0x3b8>
  8026c8:	d8800517 	ldw	r2,20(sp)
  8026cc:	d8c00a17 	ldw	r3,40(sp)
  8026d0:	8809883a 	mov	r4,r17
  8026d4:	10c4c03a 	cmpne	r2,r2,r3
  8026d8:	d8800515 	stw	r2,20(sp)
  8026dc:	0802dec0 	call	802dec <__pack_d>
  8026e0:	dfc01f17 	ldw	ra,124(sp)
  8026e4:	ddc01e17 	ldw	r23,120(sp)
  8026e8:	dd801d17 	ldw	r22,116(sp)
  8026ec:	dd401c17 	ldw	r21,112(sp)
  8026f0:	dd001b17 	ldw	r20,108(sp)
  8026f4:	dcc01a17 	ldw	r19,104(sp)
  8026f8:	dc801917 	ldw	r18,100(sp)
  8026fc:	dc401817 	ldw	r17,96(sp)
  802700:	dc001717 	ldw	r16,92(sp)
  802704:	dec02004 	addi	sp,sp,128
  802708:	f800283a 	ret
  80270c:	dd800717 	ldw	r22,28(sp)
  802710:	dc800c17 	ldw	r18,48(sp)
  802714:	002b883a 	mov	r21,zero
  802718:	0023883a 	mov	r17,zero
  80271c:	a80b883a 	mov	r5,r21
  802720:	b00d883a 	mov	r6,r22
  802724:	880f883a 	mov	r7,r17
  802728:	ddc00817 	ldw	r23,32(sp)
  80272c:	dcc00d17 	ldw	r19,52(sp)
  802730:	9009883a 	mov	r4,r18
  802734:	0802cd40 	call	802cd4 <__muldi3>
  802738:	001b883a 	mov	r13,zero
  80273c:	680f883a 	mov	r7,r13
  802740:	b009883a 	mov	r4,r22
  802744:	000b883a 	mov	r5,zero
  802748:	980d883a 	mov	r6,r19
  80274c:	b82d883a 	mov	r22,r23
  802750:	002f883a 	mov	r23,zero
  802754:	db401615 	stw	r13,88(sp)
  802758:	d8801315 	stw	r2,76(sp)
  80275c:	d8c01415 	stw	r3,80(sp)
  802760:	dcc01515 	stw	r19,84(sp)
  802764:	0802cd40 	call	802cd4 <__muldi3>
  802768:	b00d883a 	mov	r6,r22
  80276c:	000b883a 	mov	r5,zero
  802770:	9009883a 	mov	r4,r18
  802774:	b80f883a 	mov	r7,r23
  802778:	1021883a 	mov	r16,r2
  80277c:	1823883a 	mov	r17,r3
  802780:	0802cd40 	call	802cd4 <__muldi3>
  802784:	8085883a 	add	r2,r16,r2
  802788:	140d803a 	cmpltu	r6,r2,r16
  80278c:	88c7883a 	add	r3,r17,r3
  802790:	30cd883a 	add	r6,r6,r3
  802794:	1029883a 	mov	r20,r2
  802798:	302b883a 	mov	r21,r6
  80279c:	da801317 	ldw	r10,76(sp)
  8027a0:	dac01417 	ldw	r11,80(sp)
  8027a4:	db001517 	ldw	r12,84(sp)
  8027a8:	db401617 	ldw	r13,88(sp)
  8027ac:	3440612e 	bgeu	r6,r17,802934 <__muldf3+0x318>
  8027b0:	0009883a 	mov	r4,zero
  8027b4:	5105883a 	add	r2,r10,r4
  8027b8:	128d803a 	cmpltu	r6,r2,r10
  8027bc:	5d07883a 	add	r3,r11,r20
  8027c0:	30cd883a 	add	r6,r6,r3
  8027c4:	0021883a 	mov	r16,zero
  8027c8:	04400044 	movi	r17,1
  8027cc:	1025883a 	mov	r18,r2
  8027d0:	3027883a 	mov	r19,r6
  8027d4:	32c06236 	bltu	r6,r11,802960 <__muldf3+0x344>
  8027d8:	59807a26 	beq	r11,r6,8029c4 <__muldf3+0x3a8>
  8027dc:	680b883a 	mov	r5,r13
  8027e0:	b80f883a 	mov	r7,r23
  8027e4:	6009883a 	mov	r4,r12
  8027e8:	b00d883a 	mov	r6,r22
  8027ec:	0802cd40 	call	802cd4 <__muldi3>
  8027f0:	1009883a 	mov	r4,r2
  8027f4:	000f883a 	mov	r7,zero
  8027f8:	1545883a 	add	r2,r2,r21
  8027fc:	1111803a 	cmpltu	r8,r2,r4
  802800:	19c7883a 	add	r3,r3,r7
  802804:	40c7883a 	add	r3,r8,r3
  802808:	88cb883a 	add	r5,r17,r3
  80280c:	d8c00617 	ldw	r3,24(sp)
  802810:	8089883a 	add	r4,r16,r2
  802814:	d8800b17 	ldw	r2,44(sp)
  802818:	18c00104 	addi	r3,r3,4
  80281c:	240d803a 	cmpltu	r6,r4,r16
  802820:	10c7883a 	add	r3,r2,r3
  802824:	2013883a 	mov	r9,r4
  802828:	d8800a17 	ldw	r2,40(sp)
  80282c:	d9000517 	ldw	r4,20(sp)
  802830:	314d883a 	add	r6,r6,r5
  802834:	3015883a 	mov	r10,r6
  802838:	2088c03a 	cmpne	r4,r4,r2
  80283c:	00880034 	movhi	r2,8192
  802840:	10bfffc4 	addi	r2,r2,-1
  802844:	d9000f15 	stw	r4,60(sp)
  802848:	d8c01015 	stw	r3,64(sp)
  80284c:	1180162e 	bgeu	r2,r6,8028a8 <__muldf3+0x28c>
  802850:	1811883a 	mov	r8,r3
  802854:	101f883a 	mov	r15,r2
  802858:	980497fa 	slli	r2,r19,31
  80285c:	9016d07a 	srli	r11,r18,1
  802860:	500697fa 	slli	r3,r10,31
  802864:	480cd07a 	srli	r6,r9,1
  802868:	500ed07a 	srli	r7,r10,1
  80286c:	12d6b03a 	or	r11,r2,r11
  802870:	00800044 	movi	r2,1
  802874:	198cb03a 	or	r6,r3,r6
  802878:	4888703a 	and	r4,r9,r2
  80287c:	9818d07a 	srli	r12,r19,1
  802880:	001b883a 	mov	r13,zero
  802884:	03a00034 	movhi	r14,32768
  802888:	3013883a 	mov	r9,r6
  80288c:	3815883a 	mov	r10,r7
  802890:	4091883a 	add	r8,r8,r2
  802894:	20000226 	beq	r4,zero,8028a0 <__muldf3+0x284>
  802898:	5b64b03a 	or	r18,r11,r13
  80289c:	63a6b03a 	or	r19,r12,r14
  8028a0:	7abfed36 	bltu	r15,r10,802858 <__muldf3+0x23c>
  8028a4:	da001015 	stw	r8,64(sp)
  8028a8:	00840034 	movhi	r2,4096
  8028ac:	10bfffc4 	addi	r2,r2,-1
  8028b0:	12801436 	bltu	r2,r10,802904 <__muldf3+0x2e8>
  8028b4:	da001017 	ldw	r8,64(sp)
  8028b8:	101f883a 	mov	r15,r2
  8028bc:	4a45883a 	add	r2,r9,r9
  8028c0:	124d803a 	cmpltu	r6,r2,r9
  8028c4:	5287883a 	add	r3,r10,r10
  8028c8:	9497883a 	add	r11,r18,r18
  8028cc:	5c8f803a 	cmpltu	r7,r11,r18
  8028d0:	9cd9883a 	add	r12,r19,r19
  8028d4:	01000044 	movi	r4,1
  8028d8:	30cd883a 	add	r6,r6,r3
  8028dc:	3b0f883a 	add	r7,r7,r12
  8028e0:	423fffc4 	addi	r8,r8,-1
  8028e4:	1013883a 	mov	r9,r2
  8028e8:	3015883a 	mov	r10,r6
  8028ec:	111ab03a 	or	r13,r2,r4
  8028f0:	98003016 	blt	r19,zero,8029b4 <__muldf3+0x398>
  8028f4:	5825883a 	mov	r18,r11
  8028f8:	3827883a 	mov	r19,r7
  8028fc:	7abfef2e 	bgeu	r15,r10,8028bc <__muldf3+0x2a0>
  802900:	da001015 	stw	r8,64(sp)
  802904:	00803fc4 	movi	r2,255
  802908:	488e703a 	and	r7,r9,r2
  80290c:	00802004 	movi	r2,128
  802910:	0007883a 	mov	r3,zero
  802914:	0011883a 	mov	r8,zero
  802918:	38801826 	beq	r7,r2,80297c <__muldf3+0x360>
  80291c:	008000c4 	movi	r2,3
  802920:	d9000e04 	addi	r4,sp,56
  802924:	da801215 	stw	r10,72(sp)
  802928:	d8800e15 	stw	r2,56(sp)
  80292c:	da401115 	stw	r9,68(sp)
  802930:	003f6a06 	br	8026dc <__muldf3+0xc0>
  802934:	89802126 	beq	r17,r6,8029bc <__muldf3+0x3a0>
  802938:	0009883a 	mov	r4,zero
  80293c:	5105883a 	add	r2,r10,r4
  802940:	128d803a 	cmpltu	r6,r2,r10
  802944:	5d07883a 	add	r3,r11,r20
  802948:	30cd883a 	add	r6,r6,r3
  80294c:	0021883a 	mov	r16,zero
  802950:	0023883a 	mov	r17,zero
  802954:	1025883a 	mov	r18,r2
  802958:	3027883a 	mov	r19,r6
  80295c:	32ff9e2e 	bgeu	r6,r11,8027d8 <__muldf3+0x1bc>
  802960:	00800044 	movi	r2,1
  802964:	8089883a 	add	r4,r16,r2
  802968:	240d803a 	cmpltu	r6,r4,r16
  80296c:	344d883a 	add	r6,r6,r17
  802970:	2021883a 	mov	r16,r4
  802974:	3023883a 	mov	r17,r6
  802978:	003f9806 	br	8027dc <__muldf3+0x1c0>
  80297c:	403fe71e 	bne	r8,zero,80291c <__muldf3+0x300>
  802980:	01004004 	movi	r4,256
  802984:	4904703a 	and	r2,r9,r4
  802988:	10c4b03a 	or	r2,r2,r3
  80298c:	103fe31e 	bne	r2,zero,80291c <__muldf3+0x300>
  802990:	94c4b03a 	or	r2,r18,r19
  802994:	103fe126 	beq	r2,zero,80291c <__muldf3+0x300>
  802998:	49c5883a 	add	r2,r9,r7
  80299c:	1251803a 	cmpltu	r8,r2,r9
  8029a0:	4291883a 	add	r8,r8,r10
  8029a4:	013fc004 	movi	r4,-256
  8029a8:	1112703a 	and	r9,r2,r4
  8029ac:	4015883a 	mov	r10,r8
  8029b0:	003fda06 	br	80291c <__muldf3+0x300>
  8029b4:	6813883a 	mov	r9,r13
  8029b8:	003fce06 	br	8028f4 <__muldf3+0x2d8>
  8029bc:	143f7c36 	bltu	r2,r16,8027b0 <__muldf3+0x194>
  8029c0:	003fdd06 	br	802938 <__muldf3+0x31c>
  8029c4:	12bf852e 	bgeu	r2,r10,8027dc <__muldf3+0x1c0>
  8029c8:	003fe506 	br	802960 <__muldf3+0x344>
  8029cc:	00800084 	movi	r2,2
  8029d0:	20bf351e 	bne	r4,r2,8026a8 <__muldf3+0x8c>
  8029d4:	01002074 	movhi	r4,129
  8029d8:	210e2004 	addi	r4,r4,14464
  8029dc:	003f3f06 	br	8026dc <__muldf3+0xc0>

008029e0 <__gtdf2>:
  8029e0:	deffef04 	addi	sp,sp,-68
  8029e4:	dc400f15 	stw	r17,60(sp)
  8029e8:	dc400404 	addi	r17,sp,16
  8029ec:	2005883a 	mov	r2,r4
  8029f0:	2807883a 	mov	r3,r5
  8029f4:	dc000e15 	stw	r16,56(sp)
  8029f8:	d809883a 	mov	r4,sp
  8029fc:	880b883a 	mov	r5,r17
  802a00:	dc000904 	addi	r16,sp,36
  802a04:	d8c00115 	stw	r3,4(sp)
  802a08:	d8800015 	stw	r2,0(sp)
  802a0c:	d9800215 	stw	r6,8(sp)
  802a10:	dfc01015 	stw	ra,64(sp)
  802a14:	d9c00315 	stw	r7,12(sp)
  802a18:	08031000 	call	803100 <__unpack_d>
  802a1c:	d9000204 	addi	r4,sp,8
  802a20:	800b883a 	mov	r5,r16
  802a24:	08031000 	call	803100 <__unpack_d>
  802a28:	d8800417 	ldw	r2,16(sp)
  802a2c:	00c00044 	movi	r3,1
  802a30:	01bfffc4 	movi	r6,-1
  802a34:	1880062e 	bgeu	r3,r2,802a50 <__gtdf2+0x70>
  802a38:	d8800917 	ldw	r2,36(sp)
  802a3c:	8809883a 	mov	r4,r17
  802a40:	800b883a 	mov	r5,r16
  802a44:	1880022e 	bgeu	r3,r2,802a50 <__gtdf2+0x70>
  802a48:	08032380 	call	803238 <__fpcmp_parts_d>
  802a4c:	100d883a 	mov	r6,r2
  802a50:	3005883a 	mov	r2,r6
  802a54:	dfc01017 	ldw	ra,64(sp)
  802a58:	dc400f17 	ldw	r17,60(sp)
  802a5c:	dc000e17 	ldw	r16,56(sp)
  802a60:	dec01104 	addi	sp,sp,68
  802a64:	f800283a 	ret

00802a68 <__fixdfsi>:
  802a68:	defff804 	addi	sp,sp,-32
  802a6c:	2005883a 	mov	r2,r4
  802a70:	2807883a 	mov	r3,r5
  802a74:	d809883a 	mov	r4,sp
  802a78:	d9400204 	addi	r5,sp,8
  802a7c:	d8c00115 	stw	r3,4(sp)
  802a80:	d8800015 	stw	r2,0(sp)
  802a84:	dfc00715 	stw	ra,28(sp)
  802a88:	08031000 	call	803100 <__unpack_d>
  802a8c:	d8c00217 	ldw	r3,8(sp)
  802a90:	00800084 	movi	r2,2
  802a94:	1880051e 	bne	r3,r2,802aac <__fixdfsi+0x44>
  802a98:	0007883a 	mov	r3,zero
  802a9c:	1805883a 	mov	r2,r3
  802aa0:	dfc00717 	ldw	ra,28(sp)
  802aa4:	dec00804 	addi	sp,sp,32
  802aa8:	f800283a 	ret
  802aac:	00800044 	movi	r2,1
  802ab0:	10fff92e 	bgeu	r2,r3,802a98 <__fixdfsi+0x30>
  802ab4:	00800104 	movi	r2,4
  802ab8:	18800426 	beq	r3,r2,802acc <__fixdfsi+0x64>
  802abc:	d8c00417 	ldw	r3,16(sp)
  802ac0:	183ff516 	blt	r3,zero,802a98 <__fixdfsi+0x30>
  802ac4:	00800784 	movi	r2,30
  802ac8:	10c0080e 	bge	r2,r3,802aec <__fixdfsi+0x84>
  802acc:	d8800317 	ldw	r2,12(sp)
  802ad0:	1000121e 	bne	r2,zero,802b1c <__fixdfsi+0xb4>
  802ad4:	00e00034 	movhi	r3,32768
  802ad8:	18ffffc4 	addi	r3,r3,-1
  802adc:	1805883a 	mov	r2,r3
  802ae0:	dfc00717 	ldw	ra,28(sp)
  802ae4:	dec00804 	addi	sp,sp,32
  802ae8:	f800283a 	ret
  802aec:	00800f04 	movi	r2,60
  802af0:	10d1c83a 	sub	r8,r2,r3
  802af4:	40bff804 	addi	r2,r8,-32
  802af8:	d9800517 	ldw	r6,20(sp)
  802afc:	d9c00617 	ldw	r7,24(sp)
  802b00:	10000816 	blt	r2,zero,802b24 <__fixdfsi+0xbc>
  802b04:	3888d83a 	srl	r4,r7,r2
  802b08:	d8800317 	ldw	r2,12(sp)
  802b0c:	2007883a 	mov	r3,r4
  802b10:	103fe226 	beq	r2,zero,802a9c <__fixdfsi+0x34>
  802b14:	0107c83a 	sub	r3,zero,r4
  802b18:	003fe006 	br	802a9c <__fixdfsi+0x34>
  802b1c:	00e00034 	movhi	r3,32768
  802b20:	003fde06 	br	802a9c <__fixdfsi+0x34>
  802b24:	39c7883a 	add	r3,r7,r7
  802b28:	008007c4 	movi	r2,31
  802b2c:	1205c83a 	sub	r2,r2,r8
  802b30:	1886983a 	sll	r3,r3,r2
  802b34:	3208d83a 	srl	r4,r6,r8
  802b38:	1908b03a 	or	r4,r3,r4
  802b3c:	003ff206 	br	802b08 <__fixdfsi+0xa0>

00802b40 <__floatunsidf>:
  802b40:	defff204 	addi	sp,sp,-56
  802b44:	dfc00d15 	stw	ra,52(sp)
  802b48:	ddc00c15 	stw	r23,48(sp)
  802b4c:	dd800b15 	stw	r22,44(sp)
  802b50:	dd400a15 	stw	r21,40(sp)
  802b54:	dd000915 	stw	r20,36(sp)
  802b58:	dcc00815 	stw	r19,32(sp)
  802b5c:	dc800715 	stw	r18,28(sp)
  802b60:	dc400615 	stw	r17,24(sp)
  802b64:	dc000515 	stw	r16,20(sp)
  802b68:	d8000115 	stw	zero,4(sp)
  802b6c:	20000f1e 	bne	r4,zero,802bac <__floatunsidf+0x6c>
  802b70:	00800084 	movi	r2,2
  802b74:	d8800015 	stw	r2,0(sp)
  802b78:	d809883a 	mov	r4,sp
  802b7c:	0802dec0 	call	802dec <__pack_d>
  802b80:	dfc00d17 	ldw	ra,52(sp)
  802b84:	ddc00c17 	ldw	r23,48(sp)
  802b88:	dd800b17 	ldw	r22,44(sp)
  802b8c:	dd400a17 	ldw	r21,40(sp)
  802b90:	dd000917 	ldw	r20,36(sp)
  802b94:	dcc00817 	ldw	r19,32(sp)
  802b98:	dc800717 	ldw	r18,28(sp)
  802b9c:	dc400617 	ldw	r17,24(sp)
  802ba0:	dc000517 	ldw	r16,20(sp)
  802ba4:	dec00e04 	addi	sp,sp,56
  802ba8:	f800283a 	ret
  802bac:	008000c4 	movi	r2,3
  802bb0:	00c00f04 	movi	r3,60
  802bb4:	002f883a 	mov	r23,zero
  802bb8:	202d883a 	mov	r22,r4
  802bbc:	d8800015 	stw	r2,0(sp)
  802bc0:	d8c00215 	stw	r3,8(sp)
  802bc4:	d9000315 	stw	r4,12(sp)
  802bc8:	ddc00415 	stw	r23,16(sp)
  802bcc:	0802d6c0 	call	802d6c <__clzsi2>
  802bd0:	12400744 	addi	r9,r2,29
  802bd4:	48000b16 	blt	r9,zero,802c04 <__floatunsidf+0xc4>
  802bd8:	483fe726 	beq	r9,zero,802b78 <__floatunsidf+0x38>
  802bdc:	10bfff44 	addi	r2,r2,-3
  802be0:	10002e16 	blt	r2,zero,802c9c <__floatunsidf+0x15c>
  802be4:	b0a2983a 	sll	r17,r22,r2
  802be8:	0021883a 	mov	r16,zero
  802bec:	d8800217 	ldw	r2,8(sp)
  802bf0:	dc400415 	stw	r17,16(sp)
  802bf4:	dc000315 	stw	r16,12(sp)
  802bf8:	1245c83a 	sub	r2,r2,r9
  802bfc:	d8800215 	stw	r2,8(sp)
  802c00:	003fdd06 	br	802b78 <__floatunsidf+0x38>
  802c04:	0255c83a 	sub	r10,zero,r9
  802c08:	51bff804 	addi	r6,r10,-32
  802c0c:	30001b16 	blt	r6,zero,802c7c <__floatunsidf+0x13c>
  802c10:	b9a8d83a 	srl	r20,r23,r6
  802c14:	002b883a 	mov	r21,zero
  802c18:	000f883a 	mov	r7,zero
  802c1c:	01000044 	movi	r4,1
  802c20:	0011883a 	mov	r8,zero
  802c24:	30002516 	blt	r6,zero,802cbc <__floatunsidf+0x17c>
  802c28:	21a6983a 	sll	r19,r4,r6
  802c2c:	0025883a 	mov	r18,zero
  802c30:	00bfffc4 	movi	r2,-1
  802c34:	9089883a 	add	r4,r18,r2
  802c38:	988b883a 	add	r5,r19,r2
  802c3c:	248d803a 	cmpltu	r6,r4,r18
  802c40:	314b883a 	add	r5,r6,r5
  802c44:	b104703a 	and	r2,r22,r4
  802c48:	b946703a 	and	r3,r23,r5
  802c4c:	10c4b03a 	or	r2,r2,r3
  802c50:	10000226 	beq	r2,zero,802c5c <__floatunsidf+0x11c>
  802c54:	01c00044 	movi	r7,1
  802c58:	0011883a 	mov	r8,zero
  802c5c:	d9000217 	ldw	r4,8(sp)
  802c60:	a1c4b03a 	or	r2,r20,r7
  802c64:	aa06b03a 	or	r3,r21,r8
  802c68:	2249c83a 	sub	r4,r4,r9
  802c6c:	d8c00415 	stw	r3,16(sp)
  802c70:	d9000215 	stw	r4,8(sp)
  802c74:	d8800315 	stw	r2,12(sp)
  802c78:	003fbf06 	br	802b78 <__floatunsidf+0x38>
  802c7c:	bdc7883a 	add	r3,r23,r23
  802c80:	008007c4 	movi	r2,31
  802c84:	1285c83a 	sub	r2,r2,r10
  802c88:	1886983a 	sll	r3,r3,r2
  802c8c:	b2a8d83a 	srl	r20,r22,r10
  802c90:	baaad83a 	srl	r21,r23,r10
  802c94:	1d28b03a 	or	r20,r3,r20
  802c98:	003fdf06 	br	802c18 <__floatunsidf+0xd8>
  802c9c:	b006d07a 	srli	r3,r22,1
  802ca0:	008007c4 	movi	r2,31
  802ca4:	1245c83a 	sub	r2,r2,r9
  802ca8:	1886d83a 	srl	r3,r3,r2
  802cac:	ba62983a 	sll	r17,r23,r9
  802cb0:	b260983a 	sll	r16,r22,r9
  802cb4:	1c62b03a 	or	r17,r3,r17
  802cb8:	003fcc06 	br	802bec <__floatunsidf+0xac>
  802cbc:	2006d07a 	srli	r3,r4,1
  802cc0:	008007c4 	movi	r2,31
  802cc4:	1285c83a 	sub	r2,r2,r10
  802cc8:	18a6d83a 	srl	r19,r3,r2
  802ccc:	22a4983a 	sll	r18,r4,r10
  802cd0:	003fd706 	br	802c30 <__floatunsidf+0xf0>

00802cd4 <__muldi3>:
  802cd4:	2011883a 	mov	r8,r4
  802cd8:	427fffcc 	andi	r9,r8,65535
  802cdc:	4018d43a 	srli	r12,r8,16
  802ce0:	32bfffcc 	andi	r10,r6,65535
  802ce4:	3016d43a 	srli	r11,r6,16
  802ce8:	4a85383a 	mul	r2,r9,r10
  802cec:	6295383a 	mul	r10,r12,r10
  802cf0:	4ad3383a 	mul	r9,r9,r11
  802cf4:	113fffcc 	andi	r4,r2,65535
  802cf8:	1004d43a 	srli	r2,r2,16
  802cfc:	4a93883a 	add	r9,r9,r10
  802d00:	3807883a 	mov	r3,r7
  802d04:	1245883a 	add	r2,r2,r9
  802d08:	280f883a 	mov	r7,r5
  802d0c:	180b883a 	mov	r5,r3
  802d10:	1006943a 	slli	r3,r2,16
  802d14:	defffd04 	addi	sp,sp,-12
  802d18:	dc800215 	stw	r18,8(sp)
  802d1c:	1907883a 	add	r3,r3,r4
  802d20:	dc400115 	stw	r17,4(sp)
  802d24:	dc000015 	stw	r16,0(sp)
  802d28:	4165383a 	mul	r18,r8,r5
  802d2c:	31e3383a 	mul	r17,r6,r7
  802d30:	1012d43a 	srli	r9,r2,16
  802d34:	62d9383a 	mul	r12,r12,r11
  802d38:	181f883a 	mov	r15,r3
  802d3c:	1280022e 	bgeu	r2,r10,802d48 <__muldi3+0x74>
  802d40:	00800074 	movhi	r2,1
  802d44:	6099883a 	add	r12,r12,r2
  802d48:	624d883a 	add	r6,r12,r9
  802d4c:	9187883a 	add	r3,r18,r6
  802d50:	88c7883a 	add	r3,r17,r3
  802d54:	7805883a 	mov	r2,r15
  802d58:	dc800217 	ldw	r18,8(sp)
  802d5c:	dc400117 	ldw	r17,4(sp)
  802d60:	dc000017 	ldw	r16,0(sp)
  802d64:	dec00304 	addi	sp,sp,12
  802d68:	f800283a 	ret

00802d6c <__clzsi2>:
  802d6c:	00bfffd4 	movui	r2,65535
  802d70:	11000e36 	bltu	r2,r4,802dac <__clzsi2+0x40>
  802d74:	00803fc4 	movi	r2,255
  802d78:	01400204 	movi	r5,8
  802d7c:	0007883a 	mov	r3,zero
  802d80:	11001036 	bltu	r2,r4,802dc4 <__clzsi2+0x58>
  802d84:	000b883a 	mov	r5,zero
  802d88:	20c6d83a 	srl	r3,r4,r3
  802d8c:	00802074 	movhi	r2,129
  802d90:	108e2504 	addi	r2,r2,14484
  802d94:	1887883a 	add	r3,r3,r2
  802d98:	18800003 	ldbu	r2,0(r3)
  802d9c:	00c00804 	movi	r3,32
  802da0:	2885883a 	add	r2,r5,r2
  802da4:	1885c83a 	sub	r2,r3,r2
  802da8:	f800283a 	ret
  802dac:	01400404 	movi	r5,16
  802db0:	00804034 	movhi	r2,256
  802db4:	10bfffc4 	addi	r2,r2,-1
  802db8:	2807883a 	mov	r3,r5
  802dbc:	113ff22e 	bgeu	r2,r4,802d88 <__clzsi2+0x1c>
  802dc0:	01400604 	movi	r5,24
  802dc4:	2807883a 	mov	r3,r5
  802dc8:	20c6d83a 	srl	r3,r4,r3
  802dcc:	00802074 	movhi	r2,129
  802dd0:	108e2504 	addi	r2,r2,14484
  802dd4:	1887883a 	add	r3,r3,r2
  802dd8:	18800003 	ldbu	r2,0(r3)
  802ddc:	00c00804 	movi	r3,32
  802de0:	2885883a 	add	r2,r5,r2
  802de4:	1885c83a 	sub	r2,r3,r2
  802de8:	f800283a 	ret

00802dec <__pack_d>:
  802dec:	20c00017 	ldw	r3,0(r4)
  802df0:	defffd04 	addi	sp,sp,-12
  802df4:	dc000015 	stw	r16,0(sp)
  802df8:	dc800215 	stw	r18,8(sp)
  802dfc:	dc400115 	stw	r17,4(sp)
  802e00:	00800044 	movi	r2,1
  802e04:	22000317 	ldw	r8,12(r4)
  802e08:	001f883a 	mov	r15,zero
  802e0c:	22400417 	ldw	r9,16(r4)
  802e10:	24000117 	ldw	r16,4(r4)
  802e14:	10c0552e 	bgeu	r2,r3,802f6c <__pack_d+0x180>
  802e18:	00800104 	movi	r2,4
  802e1c:	18804f26 	beq	r3,r2,802f5c <__pack_d+0x170>
  802e20:	00800084 	movi	r2,2
  802e24:	18800226 	beq	r3,r2,802e30 <__pack_d+0x44>
  802e28:	4244b03a 	or	r2,r8,r9
  802e2c:	10001a1e 	bne	r2,zero,802e98 <__pack_d+0xac>
  802e30:	000d883a 	mov	r6,zero
  802e34:	000f883a 	mov	r7,zero
  802e38:	0011883a 	mov	r8,zero
  802e3c:	00800434 	movhi	r2,16
  802e40:	10bfffc4 	addi	r2,r2,-1
  802e44:	301d883a 	mov	r14,r6
  802e48:	3884703a 	and	r2,r7,r2
  802e4c:	400a953a 	slli	r5,r8,20
  802e50:	79bffc2c 	andhi	r6,r15,65520
  802e54:	308cb03a 	or	r6,r6,r2
  802e58:	00e00434 	movhi	r3,32784
  802e5c:	18ffffc4 	addi	r3,r3,-1
  802e60:	800497fa 	slli	r2,r16,31
  802e64:	30c6703a 	and	r3,r6,r3
  802e68:	1946b03a 	or	r3,r3,r5
  802e6c:	01600034 	movhi	r5,32768
  802e70:	297fffc4 	addi	r5,r5,-1
  802e74:	194a703a 	and	r5,r3,r5
  802e78:	288ab03a 	or	r5,r5,r2
  802e7c:	2807883a 	mov	r3,r5
  802e80:	7005883a 	mov	r2,r14
  802e84:	dc800217 	ldw	r18,8(sp)
  802e88:	dc400117 	ldw	r17,4(sp)
  802e8c:	dc000017 	ldw	r16,0(sp)
  802e90:	dec00304 	addi	sp,sp,12
  802e94:	f800283a 	ret
  802e98:	21000217 	ldw	r4,8(r4)
  802e9c:	00bf0084 	movi	r2,-1022
  802ea0:	20803f16 	blt	r4,r2,802fa0 <__pack_d+0x1b4>
  802ea4:	0080ffc4 	movi	r2,1023
  802ea8:	11002c16 	blt	r2,r4,802f5c <__pack_d+0x170>
  802eac:	00803fc4 	movi	r2,255
  802eb0:	408c703a 	and	r6,r8,r2
  802eb4:	00802004 	movi	r2,128
  802eb8:	0007883a 	mov	r3,zero
  802ebc:	000f883a 	mov	r7,zero
  802ec0:	2280ffc4 	addi	r10,r4,1023
  802ec4:	30801e26 	beq	r6,r2,802f40 <__pack_d+0x154>
  802ec8:	00801fc4 	movi	r2,127
  802ecc:	4089883a 	add	r4,r8,r2
  802ed0:	220d803a 	cmpltu	r6,r4,r8
  802ed4:	324d883a 	add	r6,r6,r9
  802ed8:	2011883a 	mov	r8,r4
  802edc:	3013883a 	mov	r9,r6
  802ee0:	00880034 	movhi	r2,8192
  802ee4:	10bfffc4 	addi	r2,r2,-1
  802ee8:	12400d36 	bltu	r2,r9,802f20 <__pack_d+0x134>
  802eec:	4804963a 	slli	r2,r9,24
  802ef0:	400cd23a 	srli	r6,r8,8
  802ef4:	480ed23a 	srli	r7,r9,8
  802ef8:	013fffc4 	movi	r4,-1
  802efc:	118cb03a 	or	r6,r2,r6
  802f00:	01400434 	movhi	r5,16
  802f04:	297fffc4 	addi	r5,r5,-1
  802f08:	3104703a 	and	r2,r6,r4
  802f0c:	3946703a 	and	r3,r7,r5
  802f10:	5201ffcc 	andi	r8,r10,2047
  802f14:	100d883a 	mov	r6,r2
  802f18:	180f883a 	mov	r7,r3
  802f1c:	003fc706 	br	802e3c <__pack_d+0x50>
  802f20:	480897fa 	slli	r4,r9,31
  802f24:	4004d07a 	srli	r2,r8,1
  802f28:	4806d07a 	srli	r3,r9,1
  802f2c:	52800044 	addi	r10,r10,1
  802f30:	2084b03a 	or	r2,r4,r2
  802f34:	1011883a 	mov	r8,r2
  802f38:	1813883a 	mov	r9,r3
  802f3c:	003feb06 	br	802eec <__pack_d+0x100>
  802f40:	383fe11e 	bne	r7,zero,802ec8 <__pack_d+0xdc>
  802f44:	01004004 	movi	r4,256
  802f48:	4104703a 	and	r2,r8,r4
  802f4c:	10c4b03a 	or	r2,r2,r3
  802f50:	103fe326 	beq	r2,zero,802ee0 <__pack_d+0xf4>
  802f54:	3005883a 	mov	r2,r6
  802f58:	003fdc06 	br	802ecc <__pack_d+0xe0>
  802f5c:	000d883a 	mov	r6,zero
  802f60:	000f883a 	mov	r7,zero
  802f64:	0201ffc4 	movi	r8,2047
  802f68:	003fb406 	br	802e3c <__pack_d+0x50>
  802f6c:	0005883a 	mov	r2,zero
  802f70:	00c00234 	movhi	r3,8
  802f74:	408cb03a 	or	r6,r8,r2
  802f78:	48ceb03a 	or	r7,r9,r3
  802f7c:	013fffc4 	movi	r4,-1
  802f80:	01400434 	movhi	r5,16
  802f84:	297fffc4 	addi	r5,r5,-1
  802f88:	3104703a 	and	r2,r6,r4
  802f8c:	3946703a 	and	r3,r7,r5
  802f90:	100d883a 	mov	r6,r2
  802f94:	180f883a 	mov	r7,r3
  802f98:	0201ffc4 	movi	r8,2047
  802f9c:	003fa706 	br	802e3c <__pack_d+0x50>
  802fa0:	1109c83a 	sub	r4,r2,r4
  802fa4:	00800e04 	movi	r2,56
  802fa8:	11004316 	blt	r2,r4,8030b8 <__pack_d+0x2cc>
  802fac:	21fff804 	addi	r7,r4,-32
  802fb0:	38004516 	blt	r7,zero,8030c8 <__pack_d+0x2dc>
  802fb4:	49d8d83a 	srl	r12,r9,r7
  802fb8:	001b883a 	mov	r13,zero
  802fbc:	0023883a 	mov	r17,zero
  802fc0:	01400044 	movi	r5,1
  802fc4:	0025883a 	mov	r18,zero
  802fc8:	38004716 	blt	r7,zero,8030e8 <__pack_d+0x2fc>
  802fcc:	29d6983a 	sll	r11,r5,r7
  802fd0:	0015883a 	mov	r10,zero
  802fd4:	00bfffc4 	movi	r2,-1
  802fd8:	5089883a 	add	r4,r10,r2
  802fdc:	588b883a 	add	r5,r11,r2
  802fe0:	228d803a 	cmpltu	r6,r4,r10
  802fe4:	314b883a 	add	r5,r6,r5
  802fe8:	4104703a 	and	r2,r8,r4
  802fec:	4946703a 	and	r3,r9,r5
  802ff0:	10c4b03a 	or	r2,r2,r3
  802ff4:	10000226 	beq	r2,zero,803000 <__pack_d+0x214>
  802ff8:	04400044 	movi	r17,1
  802ffc:	0025883a 	mov	r18,zero
  803000:	00803fc4 	movi	r2,255
  803004:	644eb03a 	or	r7,r12,r17
  803008:	3892703a 	and	r9,r7,r2
  80300c:	00802004 	movi	r2,128
  803010:	6c90b03a 	or	r8,r13,r18
  803014:	0015883a 	mov	r10,zero
  803018:	48801626 	beq	r9,r2,803074 <__pack_d+0x288>
  80301c:	01001fc4 	movi	r4,127
  803020:	3905883a 	add	r2,r7,r4
  803024:	11cd803a 	cmpltu	r6,r2,r7
  803028:	320d883a 	add	r6,r6,r8
  80302c:	100f883a 	mov	r7,r2
  803030:	00840034 	movhi	r2,4096
  803034:	10bfffc4 	addi	r2,r2,-1
  803038:	3011883a 	mov	r8,r6
  80303c:	0007883a 	mov	r3,zero
  803040:	11801b36 	bltu	r2,r6,8030b0 <__pack_d+0x2c4>
  803044:	4004963a 	slli	r2,r8,24
  803048:	3808d23a 	srli	r4,r7,8
  80304c:	400ad23a 	srli	r5,r8,8
  803050:	1813883a 	mov	r9,r3
  803054:	1108b03a 	or	r4,r2,r4
  803058:	00bfffc4 	movi	r2,-1
  80305c:	00c00434 	movhi	r3,16
  803060:	18ffffc4 	addi	r3,r3,-1
  803064:	208c703a 	and	r6,r4,r2
  803068:	28ce703a 	and	r7,r5,r3
  80306c:	4a01ffcc 	andi	r8,r9,2047
  803070:	003f7206 	br	802e3c <__pack_d+0x50>
  803074:	503fe91e 	bne	r10,zero,80301c <__pack_d+0x230>
  803078:	01004004 	movi	r4,256
  80307c:	3904703a 	and	r2,r7,r4
  803080:	0007883a 	mov	r3,zero
  803084:	10c4b03a 	or	r2,r2,r3
  803088:	10000626 	beq	r2,zero,8030a4 <__pack_d+0x2b8>
  80308c:	3a45883a 	add	r2,r7,r9
  803090:	11cd803a 	cmpltu	r6,r2,r7
  803094:	320d883a 	add	r6,r6,r8
  803098:	100f883a 	mov	r7,r2
  80309c:	3011883a 	mov	r8,r6
  8030a0:	0007883a 	mov	r3,zero
  8030a4:	00840034 	movhi	r2,4096
  8030a8:	10bfffc4 	addi	r2,r2,-1
  8030ac:	123fe52e 	bgeu	r2,r8,803044 <__pack_d+0x258>
  8030b0:	00c00044 	movi	r3,1
  8030b4:	003fe306 	br	803044 <__pack_d+0x258>
  8030b8:	0009883a 	mov	r4,zero
  8030bc:	0013883a 	mov	r9,zero
  8030c0:	000b883a 	mov	r5,zero
  8030c4:	003fe406 	br	803058 <__pack_d+0x26c>
  8030c8:	4a47883a 	add	r3,r9,r9
  8030cc:	008007c4 	movi	r2,31
  8030d0:	1105c83a 	sub	r2,r2,r4
  8030d4:	1886983a 	sll	r3,r3,r2
  8030d8:	4118d83a 	srl	r12,r8,r4
  8030dc:	491ad83a 	srl	r13,r9,r4
  8030e0:	1b18b03a 	or	r12,r3,r12
  8030e4:	003fb506 	br	802fbc <__pack_d+0x1d0>
  8030e8:	2806d07a 	srli	r3,r5,1
  8030ec:	008007c4 	movi	r2,31
  8030f0:	1105c83a 	sub	r2,r2,r4
  8030f4:	1896d83a 	srl	r11,r3,r2
  8030f8:	2914983a 	sll	r10,r5,r4
  8030fc:	003fb506 	br	802fd4 <__pack_d+0x1e8>

00803100 <__unpack_d>:
  803100:	20c00117 	ldw	r3,4(r4)
  803104:	22400017 	ldw	r9,0(r4)
  803108:	00800434 	movhi	r2,16
  80310c:	10bfffc4 	addi	r2,r2,-1
  803110:	1808d53a 	srli	r4,r3,20
  803114:	180cd7fa 	srli	r6,r3,31
  803118:	1894703a 	and	r10,r3,r2
  80311c:	2201ffcc 	andi	r8,r4,2047
  803120:	281b883a 	mov	r13,r5
  803124:	4817883a 	mov	r11,r9
  803128:	29800115 	stw	r6,4(r5)
  80312c:	5019883a 	mov	r12,r10
  803130:	40001e1e 	bne	r8,zero,8031ac <__unpack_d+0xac>
  803134:	4a84b03a 	or	r2,r9,r10
  803138:	10001926 	beq	r2,zero,8031a0 <__unpack_d+0xa0>
  80313c:	4804d63a 	srli	r2,r9,24
  803140:	500c923a 	slli	r6,r10,8
  803144:	013f0084 	movi	r4,-1022
  803148:	00c40034 	movhi	r3,4096
  80314c:	18ffffc4 	addi	r3,r3,-1
  803150:	118cb03a 	or	r6,r2,r6
  803154:	008000c4 	movi	r2,3
  803158:	480a923a 	slli	r5,r9,8
  80315c:	68800015 	stw	r2,0(r13)
  803160:	69000215 	stw	r4,8(r13)
  803164:	19800b36 	bltu	r3,r6,803194 <__unpack_d+0x94>
  803168:	200f883a 	mov	r7,r4
  80316c:	1811883a 	mov	r8,r3
  803170:	2945883a 	add	r2,r5,r5
  803174:	1149803a 	cmpltu	r4,r2,r5
  803178:	3187883a 	add	r3,r6,r6
  80317c:	20c9883a 	add	r4,r4,r3
  803180:	100b883a 	mov	r5,r2
  803184:	200d883a 	mov	r6,r4
  803188:	39ffffc4 	addi	r7,r7,-1
  80318c:	413ff82e 	bgeu	r8,r4,803170 <__unpack_d+0x70>
  803190:	69c00215 	stw	r7,8(r13)
  803194:	69800415 	stw	r6,16(r13)
  803198:	69400315 	stw	r5,12(r13)
  80319c:	f800283a 	ret
  8031a0:	00800084 	movi	r2,2
  8031a4:	28800015 	stw	r2,0(r5)
  8031a8:	f800283a 	ret
  8031ac:	0081ffc4 	movi	r2,2047
  8031b0:	40800f26 	beq	r8,r2,8031f0 <__unpack_d+0xf0>
  8031b4:	480cd63a 	srli	r6,r9,24
  8031b8:	5006923a 	slli	r3,r10,8
  8031bc:	4804923a 	slli	r2,r9,8
  8031c0:	0009883a 	mov	r4,zero
  8031c4:	30c6b03a 	or	r3,r6,r3
  8031c8:	01440034 	movhi	r5,4096
  8031cc:	110cb03a 	or	r6,r2,r4
  8031d0:	423f0044 	addi	r8,r8,-1023
  8031d4:	194eb03a 	or	r7,r3,r5
  8031d8:	008000c4 	movi	r2,3
  8031dc:	69c00415 	stw	r7,16(r13)
  8031e0:	6a000215 	stw	r8,8(r13)
  8031e4:	68800015 	stw	r2,0(r13)
  8031e8:	69800315 	stw	r6,12(r13)
  8031ec:	f800283a 	ret
  8031f0:	4a84b03a 	or	r2,r9,r10
  8031f4:	1000031e 	bne	r2,zero,803204 <__unpack_d+0x104>
  8031f8:	00800104 	movi	r2,4
  8031fc:	28800015 	stw	r2,0(r5)
  803200:	f800283a 	ret
  803204:	0009883a 	mov	r4,zero
  803208:	01400234 	movhi	r5,8
  80320c:	4904703a 	and	r2,r9,r4
  803210:	5146703a 	and	r3,r10,r5
  803214:	10c4b03a 	or	r2,r2,r3
  803218:	10000526 	beq	r2,zero,803230 <__unpack_d+0x130>
  80321c:	00800044 	movi	r2,1
  803220:	68800015 	stw	r2,0(r13)
  803224:	6b000415 	stw	r12,16(r13)
  803228:	6ac00315 	stw	r11,12(r13)
  80322c:	f800283a 	ret
  803230:	68000015 	stw	zero,0(r13)
  803234:	003ffb06 	br	803224 <__unpack_d+0x124>

00803238 <__fpcmp_parts_d>:
  803238:	21800017 	ldw	r6,0(r4)
  80323c:	00c00044 	movi	r3,1
  803240:	19800a2e 	bgeu	r3,r6,80326c <__fpcmp_parts_d+0x34>
  803244:	28800017 	ldw	r2,0(r5)
  803248:	1880082e 	bgeu	r3,r2,80326c <__fpcmp_parts_d+0x34>
  80324c:	00c00104 	movi	r3,4
  803250:	30c02626 	beq	r6,r3,8032ec <__fpcmp_parts_d+0xb4>
  803254:	10c02226 	beq	r2,r3,8032e0 <__fpcmp_parts_d+0xa8>
  803258:	00c00084 	movi	r3,2
  80325c:	30c00526 	beq	r6,r3,803274 <__fpcmp_parts_d+0x3c>
  803260:	10c0071e 	bne	r2,r3,803280 <__fpcmp_parts_d+0x48>
  803264:	20800117 	ldw	r2,4(r4)
  803268:	1000091e 	bne	r2,zero,803290 <__fpcmp_parts_d+0x58>
  80326c:	00800044 	movi	r2,1
  803270:	f800283a 	ret
  803274:	10c01a1e 	bne	r2,r3,8032e0 <__fpcmp_parts_d+0xa8>
  803278:	0005883a 	mov	r2,zero
  80327c:	f800283a 	ret
  803280:	22000117 	ldw	r8,4(r4)
  803284:	28800117 	ldw	r2,4(r5)
  803288:	40800326 	beq	r8,r2,803298 <__fpcmp_parts_d+0x60>
  80328c:	403ff726 	beq	r8,zero,80326c <__fpcmp_parts_d+0x34>
  803290:	00bfffc4 	movi	r2,-1
  803294:	f800283a 	ret
  803298:	20c00217 	ldw	r3,8(r4)
  80329c:	28800217 	ldw	r2,8(r5)
  8032a0:	10fffa16 	blt	r2,r3,80328c <__fpcmp_parts_d+0x54>
  8032a4:	18800916 	blt	r3,r2,8032cc <__fpcmp_parts_d+0x94>
  8032a8:	21c00417 	ldw	r7,16(r4)
  8032ac:	28c00417 	ldw	r3,16(r5)
  8032b0:	21800317 	ldw	r6,12(r4)
  8032b4:	28800317 	ldw	r2,12(r5)
  8032b8:	19fff436 	bltu	r3,r7,80328c <__fpcmp_parts_d+0x54>
  8032bc:	38c00526 	beq	r7,r3,8032d4 <__fpcmp_parts_d+0x9c>
  8032c0:	38c00236 	bltu	r7,r3,8032cc <__fpcmp_parts_d+0x94>
  8032c4:	19ffec1e 	bne	r3,r7,803278 <__fpcmp_parts_d+0x40>
  8032c8:	30bfeb2e 	bgeu	r6,r2,803278 <__fpcmp_parts_d+0x40>
  8032cc:	403fe71e 	bne	r8,zero,80326c <__fpcmp_parts_d+0x34>
  8032d0:	003fef06 	br	803290 <__fpcmp_parts_d+0x58>
  8032d4:	11bffa2e 	bgeu	r2,r6,8032c0 <__fpcmp_parts_d+0x88>
  8032d8:	403fe426 	beq	r8,zero,80326c <__fpcmp_parts_d+0x34>
  8032dc:	003fec06 	br	803290 <__fpcmp_parts_d+0x58>
  8032e0:	28800117 	ldw	r2,4(r5)
  8032e4:	103fe11e 	bne	r2,zero,80326c <__fpcmp_parts_d+0x34>
  8032e8:	003fe906 	br	803290 <__fpcmp_parts_d+0x58>
  8032ec:	11bfdd1e 	bne	r2,r6,803264 <__fpcmp_parts_d+0x2c>
  8032f0:	28c00117 	ldw	r3,4(r5)
  8032f4:	20800117 	ldw	r2,4(r4)
  8032f8:	1885c83a 	sub	r2,r3,r2
  8032fc:	f800283a 	ret

00803300 <exit>:
  803300:	defffe04 	addi	sp,sp,-8
  803304:	000b883a 	mov	r5,zero
  803308:	dc000015 	stw	r16,0(sp)
  80330c:	dfc00115 	stw	ra,4(sp)
  803310:	2021883a 	mov	r16,r4
  803314:	0805f640 	call	805f64 <__call_exitprocs>
  803318:	00802074 	movhi	r2,129
  80331c:	10961104 	addi	r2,r2,22596
  803320:	11000017 	ldw	r4,0(r2)
  803324:	20800f17 	ldw	r2,60(r4)
  803328:	10000126 	beq	r2,zero,803330 <exit+0x30>
  80332c:	103ee83a 	callr	r2
  803330:	8009883a 	mov	r4,r16
  803334:	080c22c0 	call	80c22c <_exit>

00803338 <getc>:
  803338:	defffd04 	addi	sp,sp,-12
  80333c:	dc400115 	stw	r17,4(sp)
  803340:	04402074 	movhi	r17,129
  803344:	8c561004 	addi	r17,r17,22592
  803348:	88c00017 	ldw	r3,0(r17)
  80334c:	dc000015 	stw	r16,0(sp)
  803350:	dfc00215 	stw	ra,8(sp)
  803354:	2021883a 	mov	r16,r4
  803358:	18000326 	beq	r3,zero,803368 <getc+0x30>
  80335c:	18800e17 	ldw	r2,56(r3)
  803360:	1809883a 	mov	r4,r3
  803364:	10000e26 	beq	r2,zero,8033a0 <getc+0x68>
  803368:	80800117 	ldw	r2,4(r16)
  80336c:	800b883a 	mov	r5,r16
  803370:	10bfffc4 	addi	r2,r2,-1
  803374:	80800115 	stw	r2,4(r16)
  803378:	10000f16 	blt	r2,zero,8033b8 <getc+0x80>
  80337c:	80c00017 	ldw	r3,0(r16)
  803380:	18800003 	ldbu	r2,0(r3)
  803384:	18c00044 	addi	r3,r3,1
  803388:	80c00015 	stw	r3,0(r16)
  80338c:	dfc00217 	ldw	ra,8(sp)
  803390:	dc400117 	ldw	r17,4(sp)
  803394:	dc000017 	ldw	r16,0(sp)
  803398:	dec00304 	addi	sp,sp,12
  80339c:	f800283a 	ret
  8033a0:	0807b780 	call	807b78 <__sinit>
  8033a4:	80800117 	ldw	r2,4(r16)
  8033a8:	800b883a 	mov	r5,r16
  8033ac:	10bfffc4 	addi	r2,r2,-1
  8033b0:	80800115 	stw	r2,4(r16)
  8033b4:	103ff10e 	bge	r2,zero,80337c <getc+0x44>
  8033b8:	89000017 	ldw	r4,0(r17)
  8033bc:	dfc00217 	ldw	ra,8(sp)
  8033c0:	dc400117 	ldw	r17,4(sp)
  8033c4:	dc000017 	ldw	r16,0(sp)
  8033c8:	dec00304 	addi	sp,sp,12
  8033cc:	0803db81 	jmpi	803db8 <__srget_r>

008033d0 <_getc_r>:
  8033d0:	defffd04 	addi	sp,sp,-12
  8033d4:	dc400115 	stw	r17,4(sp)
  8033d8:	dc000015 	stw	r16,0(sp)
  8033dc:	dfc00215 	stw	ra,8(sp)
  8033e0:	2021883a 	mov	r16,r4
  8033e4:	2823883a 	mov	r17,r5
  8033e8:	20000226 	beq	r4,zero,8033f4 <_getc_r+0x24>
  8033ec:	20800e17 	ldw	r2,56(r4)
  8033f0:	10000f26 	beq	r2,zero,803430 <_getc_r+0x60>
  8033f4:	88800117 	ldw	r2,4(r17)
  8033f8:	8009883a 	mov	r4,r16
  8033fc:	880b883a 	mov	r5,r17
  803400:	10bfffc4 	addi	r2,r2,-1
  803404:	88800115 	stw	r2,4(r17)
  803408:	10001016 	blt	r2,zero,80344c <_getc_r+0x7c>
  80340c:	88c00017 	ldw	r3,0(r17)
  803410:	18800003 	ldbu	r2,0(r3)
  803414:	18c00044 	addi	r3,r3,1
  803418:	88c00015 	stw	r3,0(r17)
  80341c:	dfc00217 	ldw	ra,8(sp)
  803420:	dc400117 	ldw	r17,4(sp)
  803424:	dc000017 	ldw	r16,0(sp)
  803428:	dec00304 	addi	sp,sp,12
  80342c:	f800283a 	ret
  803430:	0807b780 	call	807b78 <__sinit>
  803434:	88800117 	ldw	r2,4(r17)
  803438:	8009883a 	mov	r4,r16
  80343c:	880b883a 	mov	r5,r17
  803440:	10bfffc4 	addi	r2,r2,-1
  803444:	88800115 	stw	r2,4(r17)
  803448:	103ff00e 	bge	r2,zero,80340c <_getc_r+0x3c>
  80344c:	dfc00217 	ldw	ra,8(sp)
  803450:	dc400117 	ldw	r17,4(sp)
  803454:	dc000017 	ldw	r16,0(sp)
  803458:	dec00304 	addi	sp,sp,12
  80345c:	0803db81 	jmpi	803db8 <__srget_r>

00803460 <free>:
  803460:	00802074 	movhi	r2,129
  803464:	10961004 	addi	r2,r2,22592
  803468:	200b883a 	mov	r5,r4
  80346c:	11000017 	ldw	r4,0(r2)
  803470:	0807efc1 	jmpi	807efc <_free_r>

00803474 <malloc>:
  803474:	00802074 	movhi	r2,129
  803478:	10961004 	addi	r2,r2,22592
  80347c:	200b883a 	mov	r5,r4
  803480:	11000017 	ldw	r4,0(r2)
  803484:	08034881 	jmpi	803488 <_malloc_r>

00803488 <_malloc_r>:
  803488:	defff604 	addi	sp,sp,-40
  80348c:	28c002c4 	addi	r3,r5,11
  803490:	00800584 	movi	r2,22
  803494:	dc800215 	stw	r18,8(sp)
  803498:	dfc00915 	stw	ra,36(sp)
  80349c:	df000815 	stw	fp,32(sp)
  8034a0:	ddc00715 	stw	r23,28(sp)
  8034a4:	dd800615 	stw	r22,24(sp)
  8034a8:	dd400515 	stw	r21,20(sp)
  8034ac:	dd000415 	stw	r20,16(sp)
  8034b0:	dcc00315 	stw	r19,12(sp)
  8034b4:	dc400115 	stw	r17,4(sp)
  8034b8:	dc000015 	stw	r16,0(sp)
  8034bc:	2025883a 	mov	r18,r4
  8034c0:	10c01236 	bltu	r2,r3,80350c <_malloc_r+0x84>
  8034c4:	04400404 	movi	r17,16
  8034c8:	8940142e 	bgeu	r17,r5,80351c <_malloc_r+0x94>
  8034cc:	00800304 	movi	r2,12
  8034d0:	0007883a 	mov	r3,zero
  8034d4:	90800015 	stw	r2,0(r18)
  8034d8:	1805883a 	mov	r2,r3
  8034dc:	dfc00917 	ldw	ra,36(sp)
  8034e0:	df000817 	ldw	fp,32(sp)
  8034e4:	ddc00717 	ldw	r23,28(sp)
  8034e8:	dd800617 	ldw	r22,24(sp)
  8034ec:	dd400517 	ldw	r21,20(sp)
  8034f0:	dd000417 	ldw	r20,16(sp)
  8034f4:	dcc00317 	ldw	r19,12(sp)
  8034f8:	dc800217 	ldw	r18,8(sp)
  8034fc:	dc400117 	ldw	r17,4(sp)
  803500:	dc000017 	ldw	r16,0(sp)
  803504:	dec00a04 	addi	sp,sp,40
  803508:	f800283a 	ret
  80350c:	00bffe04 	movi	r2,-8
  803510:	18a2703a 	and	r17,r3,r2
  803514:	883fed16 	blt	r17,zero,8034cc <_malloc_r+0x44>
  803518:	897fec36 	bltu	r17,r5,8034cc <_malloc_r+0x44>
  80351c:	9009883a 	mov	r4,r18
  803520:	080c53c0 	call	80c53c <__malloc_lock>
  803524:	00807dc4 	movi	r2,503
  803528:	14402b2e 	bgeu	r2,r17,8035d8 <_malloc_r+0x150>
  80352c:	8806d27a 	srli	r3,r17,9
  803530:	18003f1e 	bne	r3,zero,803630 <_malloc_r+0x1a8>
  803534:	880cd0fa 	srli	r6,r17,3
  803538:	300490fa 	slli	r2,r6,3
  80353c:	02c02074 	movhi	r11,129
  803540:	5ad06904 	addi	r11,r11,16804
  803544:	12cb883a 	add	r5,r2,r11
  803548:	2c000317 	ldw	r16,12(r5)
  80354c:	580f883a 	mov	r7,r11
  803550:	2c00041e 	bne	r5,r16,803564 <_malloc_r+0xdc>
  803554:	00000a06 	br	803580 <_malloc_r+0xf8>
  803558:	1800860e 	bge	r3,zero,803774 <_malloc_r+0x2ec>
  80355c:	84000317 	ldw	r16,12(r16)
  803560:	2c000726 	beq	r5,r16,803580 <_malloc_r+0xf8>
  803564:	80800117 	ldw	r2,4(r16)
  803568:	00ffff04 	movi	r3,-4
  80356c:	10c8703a 	and	r4,r2,r3
  803570:	2447c83a 	sub	r3,r4,r17
  803574:	008003c4 	movi	r2,15
  803578:	10fff70e 	bge	r2,r3,803558 <_malloc_r+0xd0>
  80357c:	31bfffc4 	addi	r6,r6,-1
  803580:	32400044 	addi	r9,r6,1
  803584:	02802074 	movhi	r10,129
  803588:	52906b04 	addi	r10,r10,16812
  80358c:	54000217 	ldw	r16,8(r10)
  803590:	8280a026 	beq	r16,r10,803814 <_malloc_r+0x38c>
  803594:	80800117 	ldw	r2,4(r16)
  803598:	00ffff04 	movi	r3,-4
  80359c:	10ca703a 	and	r5,r2,r3
  8035a0:	2c4dc83a 	sub	r6,r5,r17
  8035a4:	008003c4 	movi	r2,15
  8035a8:	11808316 	blt	r2,r6,8037b8 <_malloc_r+0x330>
  8035ac:	52800315 	stw	r10,12(r10)
  8035b0:	52800215 	stw	r10,8(r10)
  8035b4:	30002916 	blt	r6,zero,80365c <_malloc_r+0x1d4>
  8035b8:	8147883a 	add	r3,r16,r5
  8035bc:	18800117 	ldw	r2,4(r3)
  8035c0:	9009883a 	mov	r4,r18
  8035c4:	10800054 	ori	r2,r2,1
  8035c8:	18800115 	stw	r2,4(r3)
  8035cc:	080c55c0 	call	80c55c <__malloc_unlock>
  8035d0:	80c00204 	addi	r3,r16,8
  8035d4:	003fc006 	br	8034d8 <_malloc_r+0x50>
  8035d8:	02c02074 	movhi	r11,129
  8035dc:	5ad06904 	addi	r11,r11,16804
  8035e0:	8ac5883a 	add	r2,r17,r11
  8035e4:	14000317 	ldw	r16,12(r2)
  8035e8:	580f883a 	mov	r7,r11
  8035ec:	8806d0fa 	srli	r3,r17,3
  8035f0:	14006c26 	beq	r2,r16,8037a4 <_malloc_r+0x31c>
  8035f4:	80c00117 	ldw	r3,4(r16)
  8035f8:	00bfff04 	movi	r2,-4
  8035fc:	81800317 	ldw	r6,12(r16)
  803600:	1886703a 	and	r3,r3,r2
  803604:	80c7883a 	add	r3,r16,r3
  803608:	18800117 	ldw	r2,4(r3)
  80360c:	81400217 	ldw	r5,8(r16)
  803610:	9009883a 	mov	r4,r18
  803614:	10800054 	ori	r2,r2,1
  803618:	18800115 	stw	r2,4(r3)
  80361c:	31400215 	stw	r5,8(r6)
  803620:	29800315 	stw	r6,12(r5)
  803624:	080c55c0 	call	80c55c <__malloc_unlock>
  803628:	80c00204 	addi	r3,r16,8
  80362c:	003faa06 	br	8034d8 <_malloc_r+0x50>
  803630:	00800104 	movi	r2,4
  803634:	10c0052e 	bgeu	r2,r3,80364c <_malloc_r+0x1c4>
  803638:	00800504 	movi	r2,20
  80363c:	10c07836 	bltu	r2,r3,803820 <_malloc_r+0x398>
  803640:	198016c4 	addi	r6,r3,91
  803644:	300490fa 	slli	r2,r6,3
  803648:	003fbc06 	br	80353c <_malloc_r+0xb4>
  80364c:	8804d1ba 	srli	r2,r17,6
  803650:	11800e04 	addi	r6,r2,56
  803654:	300490fa 	slli	r2,r6,3
  803658:	003fb806 	br	80353c <_malloc_r+0xb4>
  80365c:	00807fc4 	movi	r2,511
  803660:	1140bb36 	bltu	r2,r5,803950 <_malloc_r+0x4c8>
  803664:	2806d0fa 	srli	r3,r5,3
  803668:	573ffe04 	addi	fp,r10,-8
  80366c:	00800044 	movi	r2,1
  803670:	180890fa 	slli	r4,r3,3
  803674:	1807d0ba 	srai	r3,r3,2
  803678:	e1c00117 	ldw	r7,4(fp)
  80367c:	5909883a 	add	r4,r11,r4
  803680:	21400217 	ldw	r5,8(r4)
  803684:	10c4983a 	sll	r2,r2,r3
  803688:	81000315 	stw	r4,12(r16)
  80368c:	81400215 	stw	r5,8(r16)
  803690:	388eb03a 	or	r7,r7,r2
  803694:	2c000315 	stw	r16,12(r5)
  803698:	24000215 	stw	r16,8(r4)
  80369c:	e1c00115 	stw	r7,4(fp)
  8036a0:	4807883a 	mov	r3,r9
  8036a4:	4800cd16 	blt	r9,zero,8039dc <_malloc_r+0x554>
  8036a8:	1807d0ba 	srai	r3,r3,2
  8036ac:	00800044 	movi	r2,1
  8036b0:	10c8983a 	sll	r4,r2,r3
  8036b4:	39004436 	bltu	r7,r4,8037c8 <_malloc_r+0x340>
  8036b8:	21c4703a 	and	r2,r4,r7
  8036bc:	10000a1e 	bne	r2,zero,8036e8 <_malloc_r+0x260>
  8036c0:	2109883a 	add	r4,r4,r4
  8036c4:	00bfff04 	movi	r2,-4
  8036c8:	4884703a 	and	r2,r9,r2
  8036cc:	3906703a 	and	r3,r7,r4
  8036d0:	12400104 	addi	r9,r2,4
  8036d4:	1800041e 	bne	r3,zero,8036e8 <_malloc_r+0x260>
  8036d8:	2109883a 	add	r4,r4,r4
  8036dc:	3904703a 	and	r2,r7,r4
  8036e0:	4a400104 	addi	r9,r9,4
  8036e4:	103ffc26 	beq	r2,zero,8036d8 <_malloc_r+0x250>
  8036e8:	480490fa 	slli	r2,r9,3
  8036ec:	4819883a 	mov	r12,r9
  8036f0:	023fff04 	movi	r8,-4
  8036f4:	589b883a 	add	r13,r11,r2
  8036f8:	6807883a 	mov	r3,r13
  8036fc:	014003c4 	movi	r5,15
  803700:	1c000317 	ldw	r16,12(r3)
  803704:	1c00041e 	bne	r3,r16,803718 <_malloc_r+0x290>
  803708:	0000a706 	br	8039a8 <_malloc_r+0x520>
  80370c:	3000ab0e 	bge	r6,zero,8039bc <_malloc_r+0x534>
  803710:	84000317 	ldw	r16,12(r16)
  803714:	1c00a426 	beq	r3,r16,8039a8 <_malloc_r+0x520>
  803718:	80800117 	ldw	r2,4(r16)
  80371c:	1204703a 	and	r2,r2,r8
  803720:	144dc83a 	sub	r6,r2,r17
  803724:	29bff90e 	bge	r5,r6,80370c <_malloc_r+0x284>
  803728:	81000317 	ldw	r4,12(r16)
  80372c:	80c00217 	ldw	r3,8(r16)
  803730:	89400054 	ori	r5,r17,1
  803734:	8445883a 	add	r2,r16,r17
  803738:	20c00215 	stw	r3,8(r4)
  80373c:	19000315 	stw	r4,12(r3)
  803740:	81400115 	stw	r5,4(r16)
  803744:	1187883a 	add	r3,r2,r6
  803748:	31000054 	ori	r4,r6,1
  80374c:	50800315 	stw	r2,12(r10)
  803750:	50800215 	stw	r2,8(r10)
  803754:	19800015 	stw	r6,0(r3)
  803758:	11000115 	stw	r4,4(r2)
  80375c:	12800215 	stw	r10,8(r2)
  803760:	12800315 	stw	r10,12(r2)
  803764:	9009883a 	mov	r4,r18
  803768:	080c55c0 	call	80c55c <__malloc_unlock>
  80376c:	80c00204 	addi	r3,r16,8
  803770:	003f5906 	br	8034d8 <_malloc_r+0x50>
  803774:	8109883a 	add	r4,r16,r4
  803778:	20800117 	ldw	r2,4(r4)
  80377c:	80c00217 	ldw	r3,8(r16)
  803780:	81400317 	ldw	r5,12(r16)
  803784:	10800054 	ori	r2,r2,1
  803788:	20800115 	stw	r2,4(r4)
  80378c:	28c00215 	stw	r3,8(r5)
  803790:	19400315 	stw	r5,12(r3)
  803794:	9009883a 	mov	r4,r18
  803798:	080c55c0 	call	80c55c <__malloc_unlock>
  80379c:	80c00204 	addi	r3,r16,8
  8037a0:	003f4d06 	br	8034d8 <_malloc_r+0x50>
  8037a4:	80800204 	addi	r2,r16,8
  8037a8:	14000317 	ldw	r16,12(r2)
  8037ac:	143f911e 	bne	r2,r16,8035f4 <_malloc_r+0x16c>
  8037b0:	1a400084 	addi	r9,r3,2
  8037b4:	003f7306 	br	803584 <_malloc_r+0xfc>
  8037b8:	88c00054 	ori	r3,r17,1
  8037bc:	8445883a 	add	r2,r16,r17
  8037c0:	80c00115 	stw	r3,4(r16)
  8037c4:	003fdf06 	br	803744 <_malloc_r+0x2bc>
  8037c8:	e4000217 	ldw	r16,8(fp)
  8037cc:	00bfff04 	movi	r2,-4
  8037d0:	80c00117 	ldw	r3,4(r16)
  8037d4:	802d883a 	mov	r22,r16
  8037d8:	18aa703a 	and	r21,r3,r2
  8037dc:	ac401636 	bltu	r21,r17,803838 <_malloc_r+0x3b0>
  8037e0:	ac49c83a 	sub	r4,r21,r17
  8037e4:	008003c4 	movi	r2,15
  8037e8:	1100130e 	bge	r2,r4,803838 <_malloc_r+0x3b0>
  8037ec:	88800054 	ori	r2,r17,1
  8037f0:	8447883a 	add	r3,r16,r17
  8037f4:	80800115 	stw	r2,4(r16)
  8037f8:	20800054 	ori	r2,r4,1
  8037fc:	18800115 	stw	r2,4(r3)
  803800:	e0c00215 	stw	r3,8(fp)
  803804:	9009883a 	mov	r4,r18
  803808:	080c55c0 	call	80c55c <__malloc_unlock>
  80380c:	80c00204 	addi	r3,r16,8
  803810:	003f3106 	br	8034d8 <_malloc_r+0x50>
  803814:	39c00117 	ldw	r7,4(r7)
  803818:	573ffe04 	addi	fp,r10,-8
  80381c:	003fa006 	br	8036a0 <_malloc_r+0x218>
  803820:	00801504 	movi	r2,84
  803824:	10c06736 	bltu	r2,r3,8039c4 <_malloc_r+0x53c>
  803828:	8804d33a 	srli	r2,r17,12
  80382c:	11801b84 	addi	r6,r2,110
  803830:	300490fa 	slli	r2,r6,3
  803834:	003f4106 	br	80353c <_malloc_r+0xb4>
  803838:	d0a74917 	ldw	r2,-25308(gp)
  80383c:	d0e00317 	ldw	r3,-32756(gp)
  803840:	053fffc4 	movi	r20,-1
  803844:	10800404 	addi	r2,r2,16
  803848:	88a7883a 	add	r19,r17,r2
  80384c:	1d000326 	beq	r3,r20,80385c <_malloc_r+0x3d4>
  803850:	98c3ffc4 	addi	r3,r19,4095
  803854:	00bc0004 	movi	r2,-4096
  803858:	18a6703a 	and	r19,r3,r2
  80385c:	9009883a 	mov	r4,r18
  803860:	980b883a 	mov	r5,r19
  803864:	0803e180 	call	803e18 <_sbrk_r>
  803868:	1009883a 	mov	r4,r2
  80386c:	15000426 	beq	r2,r20,803880 <_malloc_r+0x3f8>
  803870:	854b883a 	add	r5,r16,r21
  803874:	1029883a 	mov	r20,r2
  803878:	11405a2e 	bgeu	r2,r5,8039e4 <_malloc_r+0x55c>
  80387c:	87000c26 	beq	r16,fp,8038b0 <_malloc_r+0x428>
  803880:	e4000217 	ldw	r16,8(fp)
  803884:	80c00117 	ldw	r3,4(r16)
  803888:	00bfff04 	movi	r2,-4
  80388c:	1884703a 	and	r2,r3,r2
  803890:	14400336 	bltu	r2,r17,8038a0 <_malloc_r+0x418>
  803894:	1449c83a 	sub	r4,r2,r17
  803898:	008003c4 	movi	r2,15
  80389c:	113fd316 	blt	r2,r4,8037ec <_malloc_r+0x364>
  8038a0:	9009883a 	mov	r4,r18
  8038a4:	080c55c0 	call	80c55c <__malloc_unlock>
  8038a8:	0007883a 	mov	r3,zero
  8038ac:	003f0a06 	br	8034d8 <_malloc_r+0x50>
  8038b0:	05c02074 	movhi	r23,129
  8038b4:	bddd7304 	addi	r23,r23,30156
  8038b8:	b8800017 	ldw	r2,0(r23)
  8038bc:	988d883a 	add	r6,r19,r2
  8038c0:	b9800015 	stw	r6,0(r23)
  8038c4:	d0e00317 	ldw	r3,-32756(gp)
  8038c8:	00bfffc4 	movi	r2,-1
  8038cc:	18808e26 	beq	r3,r2,803b08 <_malloc_r+0x680>
  8038d0:	2145c83a 	sub	r2,r4,r5
  8038d4:	3085883a 	add	r2,r6,r2
  8038d8:	b8800015 	stw	r2,0(r23)
  8038dc:	20c001cc 	andi	r3,r4,7
  8038e0:	18005f1e 	bne	r3,zero,803a60 <_malloc_r+0x5d8>
  8038e4:	000b883a 	mov	r5,zero
  8038e8:	a4c5883a 	add	r2,r20,r19
  8038ec:	1083ffcc 	andi	r2,r2,4095
  8038f0:	00c40004 	movi	r3,4096
  8038f4:	1887c83a 	sub	r3,r3,r2
  8038f8:	28e7883a 	add	r19,r5,r3
  8038fc:	9009883a 	mov	r4,r18
  803900:	980b883a 	mov	r5,r19
  803904:	0803e180 	call	803e18 <_sbrk_r>
  803908:	1007883a 	mov	r3,r2
  80390c:	00bfffc4 	movi	r2,-1
  803910:	18807a26 	beq	r3,r2,803afc <_malloc_r+0x674>
  803914:	1d05c83a 	sub	r2,r3,r20
  803918:	9885883a 	add	r2,r19,r2
  80391c:	10c00054 	ori	r3,r2,1
  803920:	b8800017 	ldw	r2,0(r23)
  803924:	a021883a 	mov	r16,r20
  803928:	a0c00115 	stw	r3,4(r20)
  80392c:	9885883a 	add	r2,r19,r2
  803930:	b8800015 	stw	r2,0(r23)
  803934:	e5000215 	stw	r20,8(fp)
  803938:	b7003626 	beq	r22,fp,803a14 <_malloc_r+0x58c>
  80393c:	018003c4 	movi	r6,15
  803940:	35404b36 	bltu	r6,r21,803a70 <_malloc_r+0x5e8>
  803944:	00800044 	movi	r2,1
  803948:	a0800115 	stw	r2,4(r20)
  80394c:	003fcd06 	br	803884 <_malloc_r+0x3fc>
  803950:	2808d27a 	srli	r4,r5,9
  803954:	2000371e 	bne	r4,zero,803a34 <_malloc_r+0x5ac>
  803958:	2808d0fa 	srli	r4,r5,3
  80395c:	200690fa 	slli	r3,r4,3
  803960:	1ad1883a 	add	r8,r3,r11
  803964:	41800217 	ldw	r6,8(r8)
  803968:	41805b26 	beq	r8,r6,803ad8 <_malloc_r+0x650>
  80396c:	30800117 	ldw	r2,4(r6)
  803970:	00ffff04 	movi	r3,-4
  803974:	10c4703a 	and	r2,r2,r3
  803978:	2880022e 	bgeu	r5,r2,803984 <_malloc_r+0x4fc>
  80397c:	31800217 	ldw	r6,8(r6)
  803980:	41bffa1e 	bne	r8,r6,80396c <_malloc_r+0x4e4>
  803984:	32000317 	ldw	r8,12(r6)
  803988:	39c00117 	ldw	r7,4(r7)
  80398c:	82000315 	stw	r8,12(r16)
  803990:	81800215 	stw	r6,8(r16)
  803994:	07002074 	movhi	fp,129
  803998:	e7106904 	addi	fp,fp,16804
  80399c:	34000315 	stw	r16,12(r6)
  8039a0:	44000215 	stw	r16,8(r8)
  8039a4:	003f3e06 	br	8036a0 <_malloc_r+0x218>
  8039a8:	63000044 	addi	r12,r12,1
  8039ac:	608000cc 	andi	r2,r12,3
  8039b0:	10005d26 	beq	r2,zero,803b28 <_malloc_r+0x6a0>
  8039b4:	18c00204 	addi	r3,r3,8
  8039b8:	003f5106 	br	803700 <_malloc_r+0x278>
  8039bc:	8089883a 	add	r4,r16,r2
  8039c0:	003f6d06 	br	803778 <_malloc_r+0x2f0>
  8039c4:	00805504 	movi	r2,340
  8039c8:	10c02036 	bltu	r2,r3,803a4c <_malloc_r+0x5c4>
  8039cc:	8804d3fa 	srli	r2,r17,15
  8039d0:	11801dc4 	addi	r6,r2,119
  8039d4:	300490fa 	slli	r2,r6,3
  8039d8:	003ed806 	br	80353c <_malloc_r+0xb4>
  8039dc:	48c000c4 	addi	r3,r9,3
  8039e0:	003f3106 	br	8036a8 <_malloc_r+0x220>
  8039e4:	05c02074 	movhi	r23,129
  8039e8:	bddd7304 	addi	r23,r23,30156
  8039ec:	b8800017 	ldw	r2,0(r23)
  8039f0:	988d883a 	add	r6,r19,r2
  8039f4:	b9800015 	stw	r6,0(r23)
  8039f8:	293fb21e 	bne	r5,r4,8038c4 <_malloc_r+0x43c>
  8039fc:	2083ffcc 	andi	r2,r4,4095
  803a00:	103fb01e 	bne	r2,zero,8038c4 <_malloc_r+0x43c>
  803a04:	e4000217 	ldw	r16,8(fp)
  803a08:	9d45883a 	add	r2,r19,r21
  803a0c:	10800054 	ori	r2,r2,1
  803a10:	80800115 	stw	r2,4(r16)
  803a14:	b8c00017 	ldw	r3,0(r23)
  803a18:	d0a74a17 	ldw	r2,-25304(gp)
  803a1c:	10c0012e 	bgeu	r2,r3,803a24 <_malloc_r+0x59c>
  803a20:	d0e74a15 	stw	r3,-25304(gp)
  803a24:	d0a74b17 	ldw	r2,-25300(gp)
  803a28:	10ff962e 	bgeu	r2,r3,803884 <_malloc_r+0x3fc>
  803a2c:	d0e74b15 	stw	r3,-25300(gp)
  803a30:	003f9406 	br	803884 <_malloc_r+0x3fc>
  803a34:	00800104 	movi	r2,4
  803a38:	11001e36 	bltu	r2,r4,803ab4 <_malloc_r+0x62c>
  803a3c:	2804d1ba 	srli	r2,r5,6
  803a40:	11000e04 	addi	r4,r2,56
  803a44:	200690fa 	slli	r3,r4,3
  803a48:	003fc506 	br	803960 <_malloc_r+0x4d8>
  803a4c:	00815504 	movi	r2,1364
  803a50:	10c01d2e 	bgeu	r2,r3,803ac8 <_malloc_r+0x640>
  803a54:	01801f84 	movi	r6,126
  803a58:	0080fc04 	movi	r2,1008
  803a5c:	003eb706 	br	80353c <_malloc_r+0xb4>
  803a60:	00800204 	movi	r2,8
  803a64:	10cbc83a 	sub	r5,r2,r3
  803a68:	2169883a 	add	r20,r4,r5
  803a6c:	003f9e06 	br	8038e8 <_malloc_r+0x460>
  803a70:	00bffe04 	movi	r2,-8
  803a74:	a93ffd04 	addi	r4,r21,-12
  803a78:	2088703a 	and	r4,r4,r2
  803a7c:	b10b883a 	add	r5,r22,r4
  803a80:	00c00144 	movi	r3,5
  803a84:	28c00215 	stw	r3,8(r5)
  803a88:	28c00115 	stw	r3,4(r5)
  803a8c:	b0800117 	ldw	r2,4(r22)
  803a90:	1080004c 	andi	r2,r2,1
  803a94:	2084b03a 	or	r2,r4,r2
  803a98:	b0800115 	stw	r2,4(r22)
  803a9c:	313fdd2e 	bgeu	r6,r4,803a14 <_malloc_r+0x58c>
  803aa0:	b1400204 	addi	r5,r22,8
  803aa4:	9009883a 	mov	r4,r18
  803aa8:	0807efc0 	call	807efc <_free_r>
  803aac:	e4000217 	ldw	r16,8(fp)
  803ab0:	003fd806 	br	803a14 <_malloc_r+0x58c>
  803ab4:	00800504 	movi	r2,20
  803ab8:	11001536 	bltu	r2,r4,803b10 <_malloc_r+0x688>
  803abc:	210016c4 	addi	r4,r4,91
  803ac0:	200690fa 	slli	r3,r4,3
  803ac4:	003fa606 	br	803960 <_malloc_r+0x4d8>
  803ac8:	8804d4ba 	srli	r2,r17,18
  803acc:	11801f04 	addi	r6,r2,124
  803ad0:	300490fa 	slli	r2,r6,3
  803ad4:	003e9906 	br	80353c <_malloc_r+0xb4>
  803ad8:	2009d0ba 	srai	r4,r4,2
  803adc:	01402074 	movhi	r5,129
  803ae0:	29506904 	addi	r5,r5,16804
  803ae4:	00c00044 	movi	r3,1
  803ae8:	28800117 	ldw	r2,4(r5)
  803aec:	1906983a 	sll	r3,r3,r4
  803af0:	10c4b03a 	or	r2,r2,r3
  803af4:	28800115 	stw	r2,4(r5)
  803af8:	003fa306 	br	803988 <_malloc_r+0x500>
  803afc:	0027883a 	mov	r19,zero
  803b00:	00c00044 	movi	r3,1
  803b04:	003f8606 	br	803920 <_malloc_r+0x498>
  803b08:	d1200315 	stw	r4,-32756(gp)
  803b0c:	003f7306 	br	8038dc <_malloc_r+0x454>
  803b10:	00801504 	movi	r2,84
  803b14:	11001936 	bltu	r2,r4,803b7c <_malloc_r+0x6f4>
  803b18:	2804d33a 	srli	r2,r5,12
  803b1c:	11001b84 	addi	r4,r2,110
  803b20:	200690fa 	slli	r3,r4,3
  803b24:	003f8e06 	br	803960 <_malloc_r+0x4d8>
  803b28:	480b883a 	mov	r5,r9
  803b2c:	6807883a 	mov	r3,r13
  803b30:	288000cc 	andi	r2,r5,3
  803b34:	18fffe04 	addi	r3,r3,-8
  803b38:	297fffc4 	addi	r5,r5,-1
  803b3c:	10001526 	beq	r2,zero,803b94 <_malloc_r+0x70c>
  803b40:	18800217 	ldw	r2,8(r3)
  803b44:	10fffa26 	beq	r2,r3,803b30 <_malloc_r+0x6a8>
  803b48:	2109883a 	add	r4,r4,r4
  803b4c:	393f1e36 	bltu	r7,r4,8037c8 <_malloc_r+0x340>
  803b50:	203f1d26 	beq	r4,zero,8037c8 <_malloc_r+0x340>
  803b54:	21c4703a 	and	r2,r4,r7
  803b58:	10000226 	beq	r2,zero,803b64 <_malloc_r+0x6dc>
  803b5c:	6013883a 	mov	r9,r12
  803b60:	003ee106 	br	8036e8 <_malloc_r+0x260>
  803b64:	2109883a 	add	r4,r4,r4
  803b68:	3904703a 	and	r2,r7,r4
  803b6c:	63000104 	addi	r12,r12,4
  803b70:	103ffc26 	beq	r2,zero,803b64 <_malloc_r+0x6dc>
  803b74:	6013883a 	mov	r9,r12
  803b78:	003edb06 	br	8036e8 <_malloc_r+0x260>
  803b7c:	00805504 	movi	r2,340
  803b80:	11000836 	bltu	r2,r4,803ba4 <_malloc_r+0x71c>
  803b84:	2804d3fa 	srli	r2,r5,15
  803b88:	11001dc4 	addi	r4,r2,119
  803b8c:	200690fa 	slli	r3,r4,3
  803b90:	003f7306 	br	803960 <_malloc_r+0x4d8>
  803b94:	0104303a 	nor	r2,zero,r4
  803b98:	388e703a 	and	r7,r7,r2
  803b9c:	e1c00115 	stw	r7,4(fp)
  803ba0:	003fe906 	br	803b48 <_malloc_r+0x6c0>
  803ba4:	00815504 	movi	r2,1364
  803ba8:	1100032e 	bgeu	r2,r4,803bb8 <_malloc_r+0x730>
  803bac:	01001f84 	movi	r4,126
  803bb0:	00c0fc04 	movi	r3,1008
  803bb4:	003f6a06 	br	803960 <_malloc_r+0x4d8>
  803bb8:	2804d4ba 	srli	r2,r5,18
  803bbc:	11001f04 	addi	r4,r2,124
  803bc0:	200690fa 	slli	r3,r4,3
  803bc4:	003f6606 	br	803960 <_malloc_r+0x4d8>

00803bc8 <memcpy>:
  803bc8:	01c003c4 	movi	r7,15
  803bcc:	2007883a 	mov	r3,r4
  803bd0:	3980032e 	bgeu	r7,r6,803be0 <memcpy+0x18>
  803bd4:	2904b03a 	or	r2,r5,r4
  803bd8:	108000cc 	andi	r2,r2,3
  803bdc:	10000926 	beq	r2,zero,803c04 <memcpy+0x3c>
  803be0:	30000626 	beq	r6,zero,803bfc <memcpy+0x34>
  803be4:	30cd883a 	add	r6,r6,r3
  803be8:	28800003 	ldbu	r2,0(r5)
  803bec:	29400044 	addi	r5,r5,1
  803bf0:	18800005 	stb	r2,0(r3)
  803bf4:	18c00044 	addi	r3,r3,1
  803bf8:	30fffb1e 	bne	r6,r3,803be8 <memcpy+0x20>
  803bfc:	2005883a 	mov	r2,r4
  803c00:	f800283a 	ret
  803c04:	3811883a 	mov	r8,r7
  803c08:	200f883a 	mov	r7,r4
  803c0c:	28c00017 	ldw	r3,0(r5)
  803c10:	31bffc04 	addi	r6,r6,-16
  803c14:	38c00015 	stw	r3,0(r7)
  803c18:	28800117 	ldw	r2,4(r5)
  803c1c:	38800115 	stw	r2,4(r7)
  803c20:	28c00217 	ldw	r3,8(r5)
  803c24:	38c00215 	stw	r3,8(r7)
  803c28:	28800317 	ldw	r2,12(r5)
  803c2c:	29400404 	addi	r5,r5,16
  803c30:	38800315 	stw	r2,12(r7)
  803c34:	39c00404 	addi	r7,r7,16
  803c38:	41bff436 	bltu	r8,r6,803c0c <memcpy+0x44>
  803c3c:	008000c4 	movi	r2,3
  803c40:	1180072e 	bgeu	r2,r6,803c60 <memcpy+0x98>
  803c44:	1007883a 	mov	r3,r2
  803c48:	28800017 	ldw	r2,0(r5)
  803c4c:	31bfff04 	addi	r6,r6,-4
  803c50:	29400104 	addi	r5,r5,4
  803c54:	38800015 	stw	r2,0(r7)
  803c58:	39c00104 	addi	r7,r7,4
  803c5c:	19bffa36 	bltu	r3,r6,803c48 <memcpy+0x80>
  803c60:	3807883a 	mov	r3,r7
  803c64:	003fde06 	br	803be0 <memcpy+0x18>

00803c68 <printf>:
  803c68:	defffb04 	addi	sp,sp,-20
  803c6c:	dfc00115 	stw	ra,4(sp)
  803c70:	d9400215 	stw	r5,8(sp)
  803c74:	d9800315 	stw	r6,12(sp)
  803c78:	d9c00415 	stw	r7,16(sp)
  803c7c:	00802074 	movhi	r2,129
  803c80:	10961004 	addi	r2,r2,22592
  803c84:	10c00017 	ldw	r3,0(r2)
  803c88:	200b883a 	mov	r5,r4
  803c8c:	d8800204 	addi	r2,sp,8
  803c90:	19000217 	ldw	r4,8(r3)
  803c94:	100d883a 	mov	r6,r2
  803c98:	d8800015 	stw	r2,0(sp)
  803c9c:	0805e000 	call	805e00 <__vfprintf_internal>
  803ca0:	dfc00117 	ldw	ra,4(sp)
  803ca4:	dec00504 	addi	sp,sp,20
  803ca8:	f800283a 	ret

00803cac <_printf_r>:
  803cac:	defffc04 	addi	sp,sp,-16
  803cb0:	dfc00115 	stw	ra,4(sp)
  803cb4:	d9800215 	stw	r6,8(sp)
  803cb8:	d9c00315 	stw	r7,12(sp)
  803cbc:	280d883a 	mov	r6,r5
  803cc0:	21400217 	ldw	r5,8(r4)
  803cc4:	d8c00204 	addi	r3,sp,8
  803cc8:	180f883a 	mov	r7,r3
  803ccc:	d8c00015 	stw	r3,0(sp)
  803cd0:	0803f540 	call	803f54 <___vfprintf_internal_r>
  803cd4:	dfc00117 	ldw	ra,4(sp)
  803cd8:	dec00404 	addi	sp,sp,16
  803cdc:	f800283a 	ret

00803ce0 <putchar>:
  803ce0:	00802074 	movhi	r2,129
  803ce4:	10961004 	addi	r2,r2,22592
  803ce8:	11800017 	ldw	r6,0(r2)
  803cec:	200b883a 	mov	r5,r4
  803cf0:	3009883a 	mov	r4,r6
  803cf4:	31800217 	ldw	r6,8(r6)
  803cf8:	0809dd81 	jmpi	809dd8 <_putc_r>

00803cfc <_putchar_r>:
  803cfc:	21800217 	ldw	r6,8(r4)
  803d00:	0809dd81 	jmpi	809dd8 <_putc_r>

00803d04 <_puts_r>:
  803d04:	defff604 	addi	sp,sp,-40
  803d08:	dc400715 	stw	r17,28(sp)
  803d0c:	2023883a 	mov	r17,r4
  803d10:	2809883a 	mov	r4,r5
  803d14:	dfc00915 	stw	ra,36(sp)
  803d18:	dcc00815 	stw	r19,32(sp)
  803d1c:	2827883a 	mov	r19,r5
  803d20:	0803e880 	call	803e88 <strlen>
  803d24:	89400217 	ldw	r5,8(r17)
  803d28:	00c02074 	movhi	r3,129
  803d2c:	18cd9904 	addi	r3,r3,13924
  803d30:	01c00044 	movi	r7,1
  803d34:	12000044 	addi	r8,r2,1
  803d38:	d8c00515 	stw	r3,20(sp)
  803d3c:	d9c00615 	stw	r7,24(sp)
  803d40:	d8c00304 	addi	r3,sp,12
  803d44:	01c00084 	movi	r7,2
  803d48:	8809883a 	mov	r4,r17
  803d4c:	d80d883a 	mov	r6,sp
  803d50:	d8c00015 	stw	r3,0(sp)
  803d54:	dcc00315 	stw	r19,12(sp)
  803d58:	da000215 	stw	r8,8(sp)
  803d5c:	d9c00115 	stw	r7,4(sp)
  803d60:	d8800415 	stw	r2,16(sp)
  803d64:	08082100 	call	808210 <__sfvwrite_r>
  803d68:	00ffffc4 	movi	r3,-1
  803d6c:	10000626 	beq	r2,zero,803d88 <_puts_r+0x84>
  803d70:	1805883a 	mov	r2,r3
  803d74:	dfc00917 	ldw	ra,36(sp)
  803d78:	dcc00817 	ldw	r19,32(sp)
  803d7c:	dc400717 	ldw	r17,28(sp)
  803d80:	dec00a04 	addi	sp,sp,40
  803d84:	f800283a 	ret
  803d88:	00c00284 	movi	r3,10
  803d8c:	1805883a 	mov	r2,r3
  803d90:	dfc00917 	ldw	ra,36(sp)
  803d94:	dcc00817 	ldw	r19,32(sp)
  803d98:	dc400717 	ldw	r17,28(sp)
  803d9c:	dec00a04 	addi	sp,sp,40
  803da0:	f800283a 	ret

00803da4 <puts>:
  803da4:	00802074 	movhi	r2,129
  803da8:	10961004 	addi	r2,r2,22592
  803dac:	200b883a 	mov	r5,r4
  803db0:	11000017 	ldw	r4,0(r2)
  803db4:	0803d041 	jmpi	803d04 <_puts_r>

00803db8 <__srget_r>:
  803db8:	defffe04 	addi	sp,sp,-8
  803dbc:	dc000015 	stw	r16,0(sp)
  803dc0:	dfc00115 	stw	ra,4(sp)
  803dc4:	2821883a 	mov	r16,r5
  803dc8:	080a4b40 	call	80a4b4 <__srefill_r>
  803dcc:	013fffc4 	movi	r4,-1
  803dd0:	1000071e 	bne	r2,zero,803df0 <__srget_r+0x38>
  803dd4:	80800117 	ldw	r2,4(r16)
  803dd8:	81000017 	ldw	r4,0(r16)
  803ddc:	10bfffc4 	addi	r2,r2,-1
  803de0:	20c00044 	addi	r3,r4,1
  803de4:	80800115 	stw	r2,4(r16)
  803de8:	21000003 	ldbu	r4,0(r4)
  803dec:	80c00015 	stw	r3,0(r16)
  803df0:	2005883a 	mov	r2,r4
  803df4:	dfc00117 	ldw	ra,4(sp)
  803df8:	dc000017 	ldw	r16,0(sp)
  803dfc:	dec00204 	addi	sp,sp,8
  803e00:	f800283a 	ret

00803e04 <__srget>:
  803e04:	00802074 	movhi	r2,129
  803e08:	10961004 	addi	r2,r2,22592
  803e0c:	200b883a 	mov	r5,r4
  803e10:	11000017 	ldw	r4,0(r2)
  803e14:	0803db81 	jmpi	803db8 <__srget_r>

00803e18 <_sbrk_r>:
  803e18:	defffd04 	addi	sp,sp,-12
  803e1c:	dc000015 	stw	r16,0(sp)
  803e20:	04002074 	movhi	r16,129
  803e24:	841d5c04 	addi	r16,r16,30064
  803e28:	dc400115 	stw	r17,4(sp)
  803e2c:	80000015 	stw	zero,0(r16)
  803e30:	2023883a 	mov	r17,r4
  803e34:	2809883a 	mov	r4,r5
  803e38:	dfc00215 	stw	ra,8(sp)
  803e3c:	080c6bc0 	call	80c6bc <sbrk>
  803e40:	1007883a 	mov	r3,r2
  803e44:	00bfffc4 	movi	r2,-1
  803e48:	18800626 	beq	r3,r2,803e64 <_sbrk_r+0x4c>
  803e4c:	1805883a 	mov	r2,r3
  803e50:	dfc00217 	ldw	ra,8(sp)
  803e54:	dc400117 	ldw	r17,4(sp)
  803e58:	dc000017 	ldw	r16,0(sp)
  803e5c:	dec00304 	addi	sp,sp,12
  803e60:	f800283a 	ret
  803e64:	80800017 	ldw	r2,0(r16)
  803e68:	103ff826 	beq	r2,zero,803e4c <_sbrk_r+0x34>
  803e6c:	88800015 	stw	r2,0(r17)
  803e70:	1805883a 	mov	r2,r3
  803e74:	dfc00217 	ldw	ra,8(sp)
  803e78:	dc400117 	ldw	r17,4(sp)
  803e7c:	dc000017 	ldw	r16,0(sp)
  803e80:	dec00304 	addi	sp,sp,12
  803e84:	f800283a 	ret

00803e88 <strlen>:
  803e88:	208000cc 	andi	r2,r4,3
  803e8c:	2011883a 	mov	r8,r4
  803e90:	1000161e 	bne	r2,zero,803eec <strlen+0x64>
  803e94:	20c00017 	ldw	r3,0(r4)
  803e98:	017fbff4 	movhi	r5,65279
  803e9c:	297fbfc4 	addi	r5,r5,-257
  803ea0:	01e02074 	movhi	r7,32897
  803ea4:	39e02004 	addi	r7,r7,-32640
  803ea8:	1945883a 	add	r2,r3,r5
  803eac:	11c4703a 	and	r2,r2,r7
  803eb0:	00c6303a 	nor	r3,zero,r3
  803eb4:	1886703a 	and	r3,r3,r2
  803eb8:	18000c1e 	bne	r3,zero,803eec <strlen+0x64>
  803ebc:	280d883a 	mov	r6,r5
  803ec0:	380b883a 	mov	r5,r7
  803ec4:	21000104 	addi	r4,r4,4
  803ec8:	20800017 	ldw	r2,0(r4)
  803ecc:	1187883a 	add	r3,r2,r6
  803ed0:	1946703a 	and	r3,r3,r5
  803ed4:	0084303a 	nor	r2,zero,r2
  803ed8:	10c4703a 	and	r2,r2,r3
  803edc:	103ff926 	beq	r2,zero,803ec4 <strlen+0x3c>
  803ee0:	20800007 	ldb	r2,0(r4)
  803ee4:	10000326 	beq	r2,zero,803ef4 <strlen+0x6c>
  803ee8:	21000044 	addi	r4,r4,1
  803eec:	20800007 	ldb	r2,0(r4)
  803ef0:	103ffd1e 	bne	r2,zero,803ee8 <strlen+0x60>
  803ef4:	2205c83a 	sub	r2,r4,r8
  803ef8:	f800283a 	ret

00803efc <__sprint_r>:
  803efc:	30800217 	ldw	r2,8(r6)
  803f00:	defffe04 	addi	sp,sp,-8
  803f04:	dc000015 	stw	r16,0(sp)
  803f08:	dfc00115 	stw	ra,4(sp)
  803f0c:	3021883a 	mov	r16,r6
  803f10:	0007883a 	mov	r3,zero
  803f14:	1000061e 	bne	r2,zero,803f30 <__sprint_r+0x34>
  803f18:	1805883a 	mov	r2,r3
  803f1c:	30000115 	stw	zero,4(r6)
  803f20:	dfc00117 	ldw	ra,4(sp)
  803f24:	dc000017 	ldw	r16,0(sp)
  803f28:	dec00204 	addi	sp,sp,8
  803f2c:	f800283a 	ret
  803f30:	08082100 	call	808210 <__sfvwrite_r>
  803f34:	1007883a 	mov	r3,r2
  803f38:	1805883a 	mov	r2,r3
  803f3c:	80000115 	stw	zero,4(r16)
  803f40:	80000215 	stw	zero,8(r16)
  803f44:	dfc00117 	ldw	ra,4(sp)
  803f48:	dc000017 	ldw	r16,0(sp)
  803f4c:	dec00204 	addi	sp,sp,8
  803f50:	f800283a 	ret

00803f54 <___vfprintf_internal_r>:
  803f54:	defea404 	addi	sp,sp,-1392
  803f58:	dd815815 	stw	r22,1376(sp)
  803f5c:	dc015215 	stw	r16,1352(sp)
  803f60:	d9c15115 	stw	r7,1348(sp)
  803f64:	dfc15b15 	stw	ra,1388(sp)
  803f68:	df015a15 	stw	fp,1384(sp)
  803f6c:	ddc15915 	stw	r23,1380(sp)
  803f70:	dd415715 	stw	r21,1372(sp)
  803f74:	dd015615 	stw	r20,1368(sp)
  803f78:	dcc15515 	stw	r19,1364(sp)
  803f7c:	dc815415 	stw	r18,1360(sp)
  803f80:	dc415315 	stw	r17,1356(sp)
  803f84:	282d883a 	mov	r22,r5
  803f88:	3021883a 	mov	r16,r6
  803f8c:	d9014f15 	stw	r4,1340(sp)
  803f90:	08088340 	call	808834 <_localeconv_r>
  803f94:	10800017 	ldw	r2,0(r2)
  803f98:	d9c15117 	ldw	r7,1348(sp)
  803f9c:	d8814915 	stw	r2,1316(sp)
  803fa0:	d8814f17 	ldw	r2,1340(sp)
  803fa4:	10000226 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x5c>
  803fa8:	10800e17 	ldw	r2,56(r2)
  803fac:	10020d26 	beq	r2,zero,8047e4 <___vfprintf_internal_r+0x890>
  803fb0:	b080030b 	ldhu	r2,12(r22)
  803fb4:	1080020c 	andi	r2,r2,8
  803fb8:	10020e26 	beq	r2,zero,8047f4 <___vfprintf_internal_r+0x8a0>
  803fbc:	b0800417 	ldw	r2,16(r22)
  803fc0:	10020c26 	beq	r2,zero,8047f4 <___vfprintf_internal_r+0x8a0>
  803fc4:	b200030b 	ldhu	r8,12(r22)
  803fc8:	00800284 	movi	r2,10
  803fcc:	40c0068c 	andi	r3,r8,26
  803fd0:	18802f1e 	bne	r3,r2,804090 <___vfprintf_internal_r+0x13c>
  803fd4:	b080038f 	ldh	r2,14(r22)
  803fd8:	10002d16 	blt	r2,zero,804090 <___vfprintf_internal_r+0x13c>
  803fdc:	b240038b 	ldhu	r9,14(r22)
  803fe0:	b2800717 	ldw	r10,28(r22)
  803fe4:	b2c00917 	ldw	r11,36(r22)
  803fe8:	d9014f17 	ldw	r4,1340(sp)
  803fec:	dc402904 	addi	r17,sp,164
  803ff0:	d8804004 	addi	r2,sp,256
  803ff4:	00c10004 	movi	r3,1024
  803ff8:	423fff4c 	andi	r8,r8,65533
  803ffc:	800d883a 	mov	r6,r16
  804000:	880b883a 	mov	r5,r17
  804004:	da002c0d 	sth	r8,176(sp)
  804008:	da402c8d 	sth	r9,178(sp)
  80400c:	da803015 	stw	r10,192(sp)
  804010:	dac03215 	stw	r11,200(sp)
  804014:	d8802d15 	stw	r2,180(sp)
  804018:	d8c02e15 	stw	r3,184(sp)
  80401c:	d8802915 	stw	r2,164(sp)
  804020:	d8c02b15 	stw	r3,172(sp)
  804024:	d8002f15 	stw	zero,188(sp)
  804028:	0803f540 	call	803f54 <___vfprintf_internal_r>
  80402c:	d8814b15 	stw	r2,1324(sp)
  804030:	10000416 	blt	r2,zero,804044 <___vfprintf_internal_r+0xf0>
  804034:	d9014f17 	ldw	r4,1340(sp)
  804038:	880b883a 	mov	r5,r17
  80403c:	08078e00 	call	8078e0 <_fflush_r>
  804040:	1002321e 	bne	r2,zero,80490c <___vfprintf_internal_r+0x9b8>
  804044:	d8802c0b 	ldhu	r2,176(sp)
  804048:	1080100c 	andi	r2,r2,64
  80404c:	10000326 	beq	r2,zero,80405c <___vfprintf_internal_r+0x108>
  804050:	b080030b 	ldhu	r2,12(r22)
  804054:	10801014 	ori	r2,r2,64
  804058:	b080030d 	sth	r2,12(r22)
  80405c:	d8814b17 	ldw	r2,1324(sp)
  804060:	dfc15b17 	ldw	ra,1388(sp)
  804064:	df015a17 	ldw	fp,1384(sp)
  804068:	ddc15917 	ldw	r23,1380(sp)
  80406c:	dd815817 	ldw	r22,1376(sp)
  804070:	dd415717 	ldw	r21,1372(sp)
  804074:	dd015617 	ldw	r20,1368(sp)
  804078:	dcc15517 	ldw	r19,1364(sp)
  80407c:	dc815417 	ldw	r18,1360(sp)
  804080:	dc415317 	ldw	r17,1356(sp)
  804084:	dc015217 	ldw	r16,1352(sp)
  804088:	dec15c04 	addi	sp,sp,1392
  80408c:	f800283a 	ret
  804090:	0005883a 	mov	r2,zero
  804094:	0007883a 	mov	r3,zero
  804098:	dd401904 	addi	r21,sp,100
  80409c:	d8814215 	stw	r2,1288(sp)
  8040a0:	802f883a 	mov	r23,r16
  8040a4:	d8c14315 	stw	r3,1292(sp)
  8040a8:	d8014b15 	stw	zero,1324(sp)
  8040ac:	d8014815 	stw	zero,1312(sp)
  8040b0:	d8014415 	stw	zero,1296(sp)
  8040b4:	d8014715 	stw	zero,1308(sp)
  8040b8:	dd400c15 	stw	r21,48(sp)
  8040bc:	d8000e15 	stw	zero,56(sp)
  8040c0:	d8000d15 	stw	zero,52(sp)
  8040c4:	b8800007 	ldb	r2,0(r23)
  8040c8:	10001926 	beq	r2,zero,804130 <___vfprintf_internal_r+0x1dc>
  8040cc:	00c00944 	movi	r3,37
  8040d0:	10c01726 	beq	r2,r3,804130 <___vfprintf_internal_r+0x1dc>
  8040d4:	b821883a 	mov	r16,r23
  8040d8:	00000106 	br	8040e0 <___vfprintf_internal_r+0x18c>
  8040dc:	10c00326 	beq	r2,r3,8040ec <___vfprintf_internal_r+0x198>
  8040e0:	84000044 	addi	r16,r16,1
  8040e4:	80800007 	ldb	r2,0(r16)
  8040e8:	103ffc1e 	bne	r2,zero,8040dc <___vfprintf_internal_r+0x188>
  8040ec:	85e7c83a 	sub	r19,r16,r23
  8040f0:	98000e26 	beq	r19,zero,80412c <___vfprintf_internal_r+0x1d8>
  8040f4:	dc800e17 	ldw	r18,56(sp)
  8040f8:	dc400d17 	ldw	r17,52(sp)
  8040fc:	008001c4 	movi	r2,7
  804100:	94e5883a 	add	r18,r18,r19
  804104:	8c400044 	addi	r17,r17,1
  804108:	adc00015 	stw	r23,0(r21)
  80410c:	dc800e15 	stw	r18,56(sp)
  804110:	acc00115 	stw	r19,4(r21)
  804114:	dc400d15 	stw	r17,52(sp)
  804118:	14428b16 	blt	r2,r17,804b48 <___vfprintf_internal_r+0xbf4>
  80411c:	ad400204 	addi	r21,r21,8
  804120:	d9014b17 	ldw	r4,1324(sp)
  804124:	24c9883a 	add	r4,r4,r19
  804128:	d9014b15 	stw	r4,1324(sp)
  80412c:	802f883a 	mov	r23,r16
  804130:	b8800007 	ldb	r2,0(r23)
  804134:	10013c26 	beq	r2,zero,804628 <___vfprintf_internal_r+0x6d4>
  804138:	bdc00044 	addi	r23,r23,1
  80413c:	d8000405 	stb	zero,16(sp)
  804140:	b8c00007 	ldb	r3,0(r23)
  804144:	04ffffc4 	movi	r19,-1
  804148:	d8014c15 	stw	zero,1328(sp)
  80414c:	d8014a15 	stw	zero,1320(sp)
  804150:	d8c14d15 	stw	r3,1332(sp)
  804154:	bdc00044 	addi	r23,r23,1
  804158:	d9414d17 	ldw	r5,1332(sp)
  80415c:	00801604 	movi	r2,88
  804160:	28fff804 	addi	r3,r5,-32
  804164:	10c06036 	bltu	r2,r3,8042e8 <___vfprintf_internal_r+0x394>
  804168:	18c5883a 	add	r2,r3,r3
  80416c:	1085883a 	add	r2,r2,r2
  804170:	00c02034 	movhi	r3,128
  804174:	18d06104 	addi	r3,r3,16772
  804178:	10c5883a 	add	r2,r2,r3
  80417c:	11000017 	ldw	r4,0(r2)
  804180:	2000683a 	jmp	r4
  804184:	008050f8 	rdprs	r2,zero,323
  804188:	008042e8 	cmpgeui	r2,zero,267
  80418c:	008042e8 	cmpgeui	r2,zero,267
  804190:	008050e4 	muli	r2,zero,323
  804194:	008042e8 	cmpgeui	r2,zero,267
  804198:	008042e8 	cmpgeui	r2,zero,267
  80419c:	008042e8 	cmpgeui	r2,zero,267
  8041a0:	008042e8 	cmpgeui	r2,zero,267
  8041a4:	008042e8 	cmpgeui	r2,zero,267
  8041a8:	008042e8 	cmpgeui	r2,zero,267
  8041ac:	00804ec4 	movi	r2,315
  8041b0:	008050d4 	movui	r2,323
  8041b4:	008042e8 	cmpgeui	r2,zero,267
  8041b8:	00804edc 	xori	r2,zero,315
  8041bc:	00805170 	cmpltui	r2,zero,325
  8041c0:	008042e8 	cmpgeui	r2,zero,267
  8041c4:	0080515c 	xori	r2,zero,325
  8041c8:	00805124 	muli	r2,zero,324
  8041cc:	00805124 	muli	r2,zero,324
  8041d0:	00805124 	muli	r2,zero,324
  8041d4:	00805124 	muli	r2,zero,324
  8041d8:	00805124 	muli	r2,zero,324
  8041dc:	00805124 	muli	r2,zero,324
  8041e0:	00805124 	muli	r2,zero,324
  8041e4:	00805124 	muli	r2,zero,324
  8041e8:	00805124 	muli	r2,zero,324
  8041ec:	008042e8 	cmpgeui	r2,zero,267
  8041f0:	008042e8 	cmpgeui	r2,zero,267
  8041f4:	008042e8 	cmpgeui	r2,zero,267
  8041f8:	008042e8 	cmpgeui	r2,zero,267
  8041fc:	008042e8 	cmpgeui	r2,zero,267
  804200:	008042e8 	cmpgeui	r2,zero,267
  804204:	008042e8 	cmpgeui	r2,zero,267
  804208:	008042e8 	cmpgeui	r2,zero,267
  80420c:	008042e8 	cmpgeui	r2,zero,267
  804210:	008042e8 	cmpgeui	r2,zero,267
  804214:	00804940 	call	80494 <__alt_mem_sdram_0-0x77fb6c>
  804218:	00804fac 	andhi	r2,zero,318
  80421c:	008042e8 	cmpgeui	r2,zero,267
  804220:	00804fac 	andhi	r2,zero,318
  804224:	008042e8 	cmpgeui	r2,zero,267
  804228:	008042e8 	cmpgeui	r2,zero,267
  80422c:	008042e8 	cmpgeui	r2,zero,267
  804230:	008042e8 	cmpgeui	r2,zero,267
  804234:	00805110 	cmplti	r2,zero,324
  804238:	008042e8 	cmpgeui	r2,zero,267
  80423c:	008042e8 	cmpgeui	r2,zero,267
  804240:	008049f4 	movhi	r2,295
  804244:	008042e8 	cmpgeui	r2,zero,267
  804248:	008042e8 	cmpgeui	r2,zero,267
  80424c:	008042e8 	cmpgeui	r2,zero,267
  804250:	008042e8 	cmpgeui	r2,zero,267
  804254:	008042e8 	cmpgeui	r2,zero,267
  804258:	00804a40 	call	804a4 <__alt_mem_sdram_0-0x77fb5c>
  80425c:	008042e8 	cmpgeui	r2,zero,267
  804260:	008042e8 	cmpgeui	r2,zero,267
  804264:	00805060 	cmpeqi	r2,zero,321
  804268:	008042e8 	cmpgeui	r2,zero,267
  80426c:	008042e8 	cmpgeui	r2,zero,267
  804270:	008042e8 	cmpgeui	r2,zero,267
  804274:	008042e8 	cmpgeui	r2,zero,267
  804278:	008042e8 	cmpgeui	r2,zero,267
  80427c:	008042e8 	cmpgeui	r2,zero,267
  804280:	008042e8 	cmpgeui	r2,zero,267
  804284:	008042e8 	cmpgeui	r2,zero,267
  804288:	008042e8 	cmpgeui	r2,zero,267
  80428c:	008042e8 	cmpgeui	r2,zero,267
  804290:	00805034 	movhi	r2,320
  804294:	0080494c 	andi	r2,zero,293
  804298:	00804fac 	andhi	r2,zero,318
  80429c:	00804fac 	andhi	r2,zero,318
  8042a0:	00804fac 	andhi	r2,zero,318
  8042a4:	00804f98 	cmpnei	r2,zero,318
  8042a8:	0080494c 	andi	r2,zero,293
  8042ac:	008042e8 	cmpgeui	r2,zero,267
  8042b0:	008042e8 	cmpgeui	r2,zero,267
  8042b4:	00804f20 	cmpeqi	r2,zero,316
  8042b8:	008042e8 	cmpgeui	r2,zero,267
  8042bc:	00804ef0 	cmpltui	r2,zero,315
  8042c0:	00804a00 	call	804a0 <__alt_mem_sdram_0-0x77fb60>
  8042c4:	00804f50 	cmplti	r2,zero,317
  8042c8:	00804f3c 	xorhi	r2,zero,316
  8042cc:	008042e8 	cmpgeui	r2,zero,267
  8042d0:	008051cc 	andi	r2,zero,327
  8042d4:	008042e8 	cmpgeui	r2,zero,267
  8042d8:	00804a4c 	andi	r2,zero,297
  8042dc:	008042e8 	cmpgeui	r2,zero,267
  8042e0:	008042e8 	cmpgeui	r2,zero,267
  8042e4:	008050c4 	movi	r2,323
  8042e8:	d9014d17 	ldw	r4,1332(sp)
  8042ec:	2000ce26 	beq	r4,zero,804628 <___vfprintf_internal_r+0x6d4>
  8042f0:	01400044 	movi	r5,1
  8042f4:	d9800f04 	addi	r6,sp,60
  8042f8:	d9c14015 	stw	r7,1280(sp)
  8042fc:	d9414515 	stw	r5,1300(sp)
  804300:	d9814115 	stw	r6,1284(sp)
  804304:	280f883a 	mov	r7,r5
  804308:	d9000f05 	stb	r4,60(sp)
  80430c:	d8000405 	stb	zero,16(sp)
  804310:	d8014615 	stw	zero,1304(sp)
  804314:	d8c14c17 	ldw	r3,1328(sp)
  804318:	1880008c 	andi	r2,r3,2
  80431c:	1005003a 	cmpeq	r2,r2,zero
  804320:	d8815015 	stw	r2,1344(sp)
  804324:	1000031e 	bne	r2,zero,804334 <___vfprintf_internal_r+0x3e0>
  804328:	d9014517 	ldw	r4,1300(sp)
  80432c:	21000084 	addi	r4,r4,2
  804330:	d9014515 	stw	r4,1300(sp)
  804334:	d9414c17 	ldw	r5,1328(sp)
  804338:	2940210c 	andi	r5,r5,132
  80433c:	d9414e15 	stw	r5,1336(sp)
  804340:	28002d1e 	bne	r5,zero,8043f8 <___vfprintf_internal_r+0x4a4>
  804344:	d9814a17 	ldw	r6,1320(sp)
  804348:	d8814517 	ldw	r2,1300(sp)
  80434c:	30a1c83a 	sub	r16,r6,r2
  804350:	0400290e 	bge	zero,r16,8043f8 <___vfprintf_internal_r+0x4a4>
  804354:	00800404 	movi	r2,16
  804358:	1404580e 	bge	r2,r16,8054bc <___vfprintf_internal_r+0x1568>
  80435c:	dc800e17 	ldw	r18,56(sp)
  804360:	dc400d17 	ldw	r17,52(sp)
  804364:	1027883a 	mov	r19,r2
  804368:	07002074 	movhi	fp,129
  80436c:	e70e7f84 	addi	fp,fp,14846
  804370:	050001c4 	movi	r20,7
  804374:	00000306 	br	804384 <___vfprintf_internal_r+0x430>
  804378:	843ffc04 	addi	r16,r16,-16
  80437c:	ad400204 	addi	r21,r21,8
  804380:	9c00130e 	bge	r19,r16,8043d0 <___vfprintf_internal_r+0x47c>
  804384:	94800404 	addi	r18,r18,16
  804388:	8c400044 	addi	r17,r17,1
  80438c:	af000015 	stw	fp,0(r21)
  804390:	acc00115 	stw	r19,4(r21)
  804394:	dc800e15 	stw	r18,56(sp)
  804398:	dc400d15 	stw	r17,52(sp)
  80439c:	a47ff60e 	bge	r20,r17,804378 <___vfprintf_internal_r+0x424>
  8043a0:	d9014f17 	ldw	r4,1340(sp)
  8043a4:	b00b883a 	mov	r5,r22
  8043a8:	d9800c04 	addi	r6,sp,48
  8043ac:	d9c15115 	stw	r7,1348(sp)
  8043b0:	0803efc0 	call	803efc <__sprint_r>
  8043b4:	d9c15117 	ldw	r7,1348(sp)
  8043b8:	10009e1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8043bc:	843ffc04 	addi	r16,r16,-16
  8043c0:	dc800e17 	ldw	r18,56(sp)
  8043c4:	dc400d17 	ldw	r17,52(sp)
  8043c8:	dd401904 	addi	r21,sp,100
  8043cc:	9c3fed16 	blt	r19,r16,804384 <___vfprintf_internal_r+0x430>
  8043d0:	9425883a 	add	r18,r18,r16
  8043d4:	8c400044 	addi	r17,r17,1
  8043d8:	008001c4 	movi	r2,7
  8043dc:	af000015 	stw	fp,0(r21)
  8043e0:	ac000115 	stw	r16,4(r21)
  8043e4:	dc800e15 	stw	r18,56(sp)
  8043e8:	dc400d15 	stw	r17,52(sp)
  8043ec:	1441f516 	blt	r2,r17,804bc4 <___vfprintf_internal_r+0xc70>
  8043f0:	ad400204 	addi	r21,r21,8
  8043f4:	00000206 	br	804400 <___vfprintf_internal_r+0x4ac>
  8043f8:	dc800e17 	ldw	r18,56(sp)
  8043fc:	dc400d17 	ldw	r17,52(sp)
  804400:	d8800407 	ldb	r2,16(sp)
  804404:	10000b26 	beq	r2,zero,804434 <___vfprintf_internal_r+0x4e0>
  804408:	00800044 	movi	r2,1
  80440c:	94800044 	addi	r18,r18,1
  804410:	8c400044 	addi	r17,r17,1
  804414:	a8800115 	stw	r2,4(r21)
  804418:	d8c00404 	addi	r3,sp,16
  80441c:	008001c4 	movi	r2,7
  804420:	a8c00015 	stw	r3,0(r21)
  804424:	dc800e15 	stw	r18,56(sp)
  804428:	dc400d15 	stw	r17,52(sp)
  80442c:	1441da16 	blt	r2,r17,804b98 <___vfprintf_internal_r+0xc44>
  804430:	ad400204 	addi	r21,r21,8
  804434:	d9015017 	ldw	r4,1344(sp)
  804438:	20000b1e 	bne	r4,zero,804468 <___vfprintf_internal_r+0x514>
  80443c:	d8800444 	addi	r2,sp,17
  804440:	94800084 	addi	r18,r18,2
  804444:	8c400044 	addi	r17,r17,1
  804448:	a8800015 	stw	r2,0(r21)
  80444c:	00c00084 	movi	r3,2
  804450:	008001c4 	movi	r2,7
  804454:	a8c00115 	stw	r3,4(r21)
  804458:	dc800e15 	stw	r18,56(sp)
  80445c:	dc400d15 	stw	r17,52(sp)
  804460:	1441c216 	blt	r2,r17,804b6c <___vfprintf_internal_r+0xc18>
  804464:	ad400204 	addi	r21,r21,8
  804468:	d9414e17 	ldw	r5,1336(sp)
  80446c:	00802004 	movi	r2,128
  804470:	2880b126 	beq	r5,r2,804738 <___vfprintf_internal_r+0x7e4>
  804474:	d8c14617 	ldw	r3,1304(sp)
  804478:	19e1c83a 	sub	r16,r3,r7
  80447c:	0400260e 	bge	zero,r16,804518 <___vfprintf_internal_r+0x5c4>
  804480:	00800404 	movi	r2,16
  804484:	1403c90e 	bge	r2,r16,8053ac <___vfprintf_internal_r+0x1458>
  804488:	1027883a 	mov	r19,r2
  80448c:	07002074 	movhi	fp,129
  804490:	e70e7b84 	addi	fp,fp,14830
  804494:	050001c4 	movi	r20,7
  804498:	00000306 	br	8044a8 <___vfprintf_internal_r+0x554>
  80449c:	843ffc04 	addi	r16,r16,-16
  8044a0:	ad400204 	addi	r21,r21,8
  8044a4:	9c00130e 	bge	r19,r16,8044f4 <___vfprintf_internal_r+0x5a0>
  8044a8:	94800404 	addi	r18,r18,16
  8044ac:	8c400044 	addi	r17,r17,1
  8044b0:	af000015 	stw	fp,0(r21)
  8044b4:	acc00115 	stw	r19,4(r21)
  8044b8:	dc800e15 	stw	r18,56(sp)
  8044bc:	dc400d15 	stw	r17,52(sp)
  8044c0:	a47ff60e 	bge	r20,r17,80449c <___vfprintf_internal_r+0x548>
  8044c4:	d9014f17 	ldw	r4,1340(sp)
  8044c8:	b00b883a 	mov	r5,r22
  8044cc:	d9800c04 	addi	r6,sp,48
  8044d0:	d9c15115 	stw	r7,1348(sp)
  8044d4:	0803efc0 	call	803efc <__sprint_r>
  8044d8:	d9c15117 	ldw	r7,1348(sp)
  8044dc:	1000551e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8044e0:	843ffc04 	addi	r16,r16,-16
  8044e4:	dc800e17 	ldw	r18,56(sp)
  8044e8:	dc400d17 	ldw	r17,52(sp)
  8044ec:	dd401904 	addi	r21,sp,100
  8044f0:	9c3fed16 	blt	r19,r16,8044a8 <___vfprintf_internal_r+0x554>
  8044f4:	9425883a 	add	r18,r18,r16
  8044f8:	8c400044 	addi	r17,r17,1
  8044fc:	008001c4 	movi	r2,7
  804500:	af000015 	stw	fp,0(r21)
  804504:	ac000115 	stw	r16,4(r21)
  804508:	dc800e15 	stw	r18,56(sp)
  80450c:	dc400d15 	stw	r17,52(sp)
  804510:	14418216 	blt	r2,r17,804b1c <___vfprintf_internal_r+0xbc8>
  804514:	ad400204 	addi	r21,r21,8
  804518:	d9014c17 	ldw	r4,1328(sp)
  80451c:	2080400c 	andi	r2,r4,256
  804520:	10004a1e 	bne	r2,zero,80464c <___vfprintf_internal_r+0x6f8>
  804524:	d9414117 	ldw	r5,1284(sp)
  804528:	91e5883a 	add	r18,r18,r7
  80452c:	8c400044 	addi	r17,r17,1
  804530:	008001c4 	movi	r2,7
  804534:	a9400015 	stw	r5,0(r21)
  804538:	a9c00115 	stw	r7,4(r21)
  80453c:	dc800e15 	stw	r18,56(sp)
  804540:	dc400d15 	stw	r17,52(sp)
  804544:	14416716 	blt	r2,r17,804ae4 <___vfprintf_internal_r+0xb90>
  804548:	a8c00204 	addi	r3,r21,8
  80454c:	d9814c17 	ldw	r6,1328(sp)
  804550:	3080010c 	andi	r2,r6,4
  804554:	10002826 	beq	r2,zero,8045f8 <___vfprintf_internal_r+0x6a4>
  804558:	d8814a17 	ldw	r2,1320(sp)
  80455c:	d9014517 	ldw	r4,1300(sp)
  804560:	1121c83a 	sub	r16,r2,r4
  804564:	0400240e 	bge	zero,r16,8045f8 <___vfprintf_internal_r+0x6a4>
  804568:	00800404 	movi	r2,16
  80456c:	14044f0e 	bge	r2,r16,8056ac <___vfprintf_internal_r+0x1758>
  804570:	dc400d17 	ldw	r17,52(sp)
  804574:	1027883a 	mov	r19,r2
  804578:	07002074 	movhi	fp,129
  80457c:	e70e7f84 	addi	fp,fp,14846
  804580:	050001c4 	movi	r20,7
  804584:	00000306 	br	804594 <___vfprintf_internal_r+0x640>
  804588:	843ffc04 	addi	r16,r16,-16
  80458c:	18c00204 	addi	r3,r3,8
  804590:	9c00110e 	bge	r19,r16,8045d8 <___vfprintf_internal_r+0x684>
  804594:	94800404 	addi	r18,r18,16
  804598:	8c400044 	addi	r17,r17,1
  80459c:	1f000015 	stw	fp,0(r3)
  8045a0:	1cc00115 	stw	r19,4(r3)
  8045a4:	dc800e15 	stw	r18,56(sp)
  8045a8:	dc400d15 	stw	r17,52(sp)
  8045ac:	a47ff60e 	bge	r20,r17,804588 <___vfprintf_internal_r+0x634>
  8045b0:	d9014f17 	ldw	r4,1340(sp)
  8045b4:	b00b883a 	mov	r5,r22
  8045b8:	d9800c04 	addi	r6,sp,48
  8045bc:	0803efc0 	call	803efc <__sprint_r>
  8045c0:	10001c1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8045c4:	843ffc04 	addi	r16,r16,-16
  8045c8:	dc800e17 	ldw	r18,56(sp)
  8045cc:	dc400d17 	ldw	r17,52(sp)
  8045d0:	d8c01904 	addi	r3,sp,100
  8045d4:	9c3fef16 	blt	r19,r16,804594 <___vfprintf_internal_r+0x640>
  8045d8:	9425883a 	add	r18,r18,r16
  8045dc:	8c400044 	addi	r17,r17,1
  8045e0:	008001c4 	movi	r2,7
  8045e4:	1f000015 	stw	fp,0(r3)
  8045e8:	1c000115 	stw	r16,4(r3)
  8045ec:	dc800e15 	stw	r18,56(sp)
  8045f0:	dc400d15 	stw	r17,52(sp)
  8045f4:	1440cb16 	blt	r2,r17,804924 <___vfprintf_internal_r+0x9d0>
  8045f8:	d8814a17 	ldw	r2,1320(sp)
  8045fc:	d9414517 	ldw	r5,1300(sp)
  804600:	1140010e 	bge	r2,r5,804608 <___vfprintf_internal_r+0x6b4>
  804604:	2805883a 	mov	r2,r5
  804608:	d9814b17 	ldw	r6,1324(sp)
  80460c:	308d883a 	add	r6,r6,r2
  804610:	d9814b15 	stw	r6,1324(sp)
  804614:	90013b1e 	bne	r18,zero,804b04 <___vfprintf_internal_r+0xbb0>
  804618:	d9c14017 	ldw	r7,1280(sp)
  80461c:	dd401904 	addi	r21,sp,100
  804620:	d8000d15 	stw	zero,52(sp)
  804624:	003ea706 	br	8040c4 <___vfprintf_internal_r+0x170>
  804628:	d8800e17 	ldw	r2,56(sp)
  80462c:	10053f1e 	bne	r2,zero,805b2c <___vfprintf_internal_r+0x1bd8>
  804630:	d8000d15 	stw	zero,52(sp)
  804634:	b080030b 	ldhu	r2,12(r22)
  804638:	1080100c 	andi	r2,r2,64
  80463c:	103e8726 	beq	r2,zero,80405c <___vfprintf_internal_r+0x108>
  804640:	00bfffc4 	movi	r2,-1
  804644:	d8814b15 	stw	r2,1324(sp)
  804648:	003e8406 	br	80405c <___vfprintf_internal_r+0x108>
  80464c:	d9814d17 	ldw	r6,1332(sp)
  804650:	00801944 	movi	r2,101
  804654:	11806e16 	blt	r2,r6,804810 <___vfprintf_internal_r+0x8bc>
  804658:	d9414717 	ldw	r5,1308(sp)
  80465c:	00c00044 	movi	r3,1
  804660:	1943430e 	bge	r3,r5,805370 <___vfprintf_internal_r+0x141c>
  804664:	d8814117 	ldw	r2,1284(sp)
  804668:	94800044 	addi	r18,r18,1
  80466c:	8c400044 	addi	r17,r17,1
  804670:	a8800015 	stw	r2,0(r21)
  804674:	008001c4 	movi	r2,7
  804678:	a8c00115 	stw	r3,4(r21)
  80467c:	dc800e15 	stw	r18,56(sp)
  804680:	dc400d15 	stw	r17,52(sp)
  804684:	1441ca16 	blt	r2,r17,804db0 <___vfprintf_internal_r+0xe5c>
  804688:	a8c00204 	addi	r3,r21,8
  80468c:	d9014917 	ldw	r4,1316(sp)
  804690:	00800044 	movi	r2,1
  804694:	94800044 	addi	r18,r18,1
  804698:	8c400044 	addi	r17,r17,1
  80469c:	18800115 	stw	r2,4(r3)
  8046a0:	008001c4 	movi	r2,7
  8046a4:	19000015 	stw	r4,0(r3)
  8046a8:	dc800e15 	stw	r18,56(sp)
  8046ac:	dc400d15 	stw	r17,52(sp)
  8046b0:	1441b616 	blt	r2,r17,804d8c <___vfprintf_internal_r+0xe38>
  8046b4:	1cc00204 	addi	r19,r3,8
  8046b8:	d9014217 	ldw	r4,1288(sp)
  8046bc:	d9414317 	ldw	r5,1292(sp)
  8046c0:	000d883a 	mov	r6,zero
  8046c4:	000f883a 	mov	r7,zero
  8046c8:	080bd580 	call	80bd58 <__nedf2>
  8046cc:	10017426 	beq	r2,zero,804ca0 <___vfprintf_internal_r+0xd4c>
  8046d0:	d9414717 	ldw	r5,1308(sp)
  8046d4:	d9814117 	ldw	r6,1284(sp)
  8046d8:	8c400044 	addi	r17,r17,1
  8046dc:	2c85883a 	add	r2,r5,r18
  8046e0:	14bfffc4 	addi	r18,r2,-1
  8046e4:	28bfffc4 	addi	r2,r5,-1
  8046e8:	30c00044 	addi	r3,r6,1
  8046ec:	98800115 	stw	r2,4(r19)
  8046f0:	008001c4 	movi	r2,7
  8046f4:	98c00015 	stw	r3,0(r19)
  8046f8:	dc800e15 	stw	r18,56(sp)
  8046fc:	dc400d15 	stw	r17,52(sp)
  804700:	14418e16 	blt	r2,r17,804d3c <___vfprintf_internal_r+0xde8>
  804704:	9cc00204 	addi	r19,r19,8
  804708:	d9414817 	ldw	r5,1312(sp)
  80470c:	d8800804 	addi	r2,sp,32
  804710:	8c400044 	addi	r17,r17,1
  804714:	9165883a 	add	r18,r18,r5
  804718:	98800015 	stw	r2,0(r19)
  80471c:	008001c4 	movi	r2,7
  804720:	99400115 	stw	r5,4(r19)
  804724:	dc800e15 	stw	r18,56(sp)
  804728:	dc400d15 	stw	r17,52(sp)
  80472c:	1440ed16 	blt	r2,r17,804ae4 <___vfprintf_internal_r+0xb90>
  804730:	98c00204 	addi	r3,r19,8
  804734:	003f8506 	br	80454c <___vfprintf_internal_r+0x5f8>
  804738:	d9814a17 	ldw	r6,1320(sp)
  80473c:	d8814517 	ldw	r2,1300(sp)
  804740:	30a1c83a 	sub	r16,r6,r2
  804744:	043f4b0e 	bge	zero,r16,804474 <___vfprintf_internal_r+0x520>
  804748:	00800404 	movi	r2,16
  80474c:	1404340e 	bge	r2,r16,805820 <___vfprintf_internal_r+0x18cc>
  804750:	1027883a 	mov	r19,r2
  804754:	07002074 	movhi	fp,129
  804758:	e70e7b84 	addi	fp,fp,14830
  80475c:	050001c4 	movi	r20,7
  804760:	00000306 	br	804770 <___vfprintf_internal_r+0x81c>
  804764:	843ffc04 	addi	r16,r16,-16
  804768:	ad400204 	addi	r21,r21,8
  80476c:	9c00130e 	bge	r19,r16,8047bc <___vfprintf_internal_r+0x868>
  804770:	94800404 	addi	r18,r18,16
  804774:	8c400044 	addi	r17,r17,1
  804778:	af000015 	stw	fp,0(r21)
  80477c:	acc00115 	stw	r19,4(r21)
  804780:	dc800e15 	stw	r18,56(sp)
  804784:	dc400d15 	stw	r17,52(sp)
  804788:	a47ff60e 	bge	r20,r17,804764 <___vfprintf_internal_r+0x810>
  80478c:	d9014f17 	ldw	r4,1340(sp)
  804790:	b00b883a 	mov	r5,r22
  804794:	d9800c04 	addi	r6,sp,48
  804798:	d9c15115 	stw	r7,1348(sp)
  80479c:	0803efc0 	call	803efc <__sprint_r>
  8047a0:	d9c15117 	ldw	r7,1348(sp)
  8047a4:	103fa31e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8047a8:	843ffc04 	addi	r16,r16,-16
  8047ac:	dc800e17 	ldw	r18,56(sp)
  8047b0:	dc400d17 	ldw	r17,52(sp)
  8047b4:	dd401904 	addi	r21,sp,100
  8047b8:	9c3fed16 	blt	r19,r16,804770 <___vfprintf_internal_r+0x81c>
  8047bc:	9425883a 	add	r18,r18,r16
  8047c0:	8c400044 	addi	r17,r17,1
  8047c4:	008001c4 	movi	r2,7
  8047c8:	af000015 	stw	fp,0(r21)
  8047cc:	ac000115 	stw	r16,4(r21)
  8047d0:	dc800e15 	stw	r18,56(sp)
  8047d4:	dc400d15 	stw	r17,52(sp)
  8047d8:	14416116 	blt	r2,r17,804d60 <___vfprintf_internal_r+0xe0c>
  8047dc:	ad400204 	addi	r21,r21,8
  8047e0:	003f2406 	br	804474 <___vfprintf_internal_r+0x520>
  8047e4:	d9014f17 	ldw	r4,1340(sp)
  8047e8:	0807b780 	call	807b78 <__sinit>
  8047ec:	d9c15117 	ldw	r7,1348(sp)
  8047f0:	003def06 	br	803fb0 <___vfprintf_internal_r+0x5c>
  8047f4:	d9014f17 	ldw	r4,1340(sp)
  8047f8:	b00b883a 	mov	r5,r22
  8047fc:	d9c15115 	stw	r7,1348(sp)
  804800:	0805e240 	call	805e24 <__swsetup_r>
  804804:	d9c15117 	ldw	r7,1348(sp)
  804808:	103dee26 	beq	r2,zero,803fc4 <___vfprintf_internal_r+0x70>
  80480c:	003f8c06 	br	804640 <___vfprintf_internal_r+0x6ec>
  804810:	d9014217 	ldw	r4,1288(sp)
  804814:	d9414317 	ldw	r5,1292(sp)
  804818:	000d883a 	mov	r6,zero
  80481c:	000f883a 	mov	r7,zero
  804820:	080bcd00 	call	80bcd0 <__eqdf2>
  804824:	1000f21e 	bne	r2,zero,804bf0 <___vfprintf_internal_r+0xc9c>
  804828:	00802074 	movhi	r2,129
  80482c:	108d7e04 	addi	r2,r2,13816
  804830:	94800044 	addi	r18,r18,1
  804834:	8c400044 	addi	r17,r17,1
  804838:	a8800015 	stw	r2,0(r21)
  80483c:	00c00044 	movi	r3,1
  804840:	008001c4 	movi	r2,7
  804844:	a8c00115 	stw	r3,4(r21)
  804848:	dc800e15 	stw	r18,56(sp)
  80484c:	dc400d15 	stw	r17,52(sp)
  804850:	1442fa16 	blt	r2,r17,80543c <___vfprintf_internal_r+0x14e8>
  804854:	a8c00204 	addi	r3,r21,8
  804858:	d8800517 	ldw	r2,20(sp)
  80485c:	d9014717 	ldw	r4,1308(sp)
  804860:	11015c0e 	bge	r2,r4,804dd4 <___vfprintf_internal_r+0xe80>
  804864:	dc400d17 	ldw	r17,52(sp)
  804868:	d9814917 	ldw	r6,1316(sp)
  80486c:	00800044 	movi	r2,1
  804870:	94800044 	addi	r18,r18,1
  804874:	8c400044 	addi	r17,r17,1
  804878:	18800115 	stw	r2,4(r3)
  80487c:	008001c4 	movi	r2,7
  804880:	19800015 	stw	r6,0(r3)
  804884:	dc800e15 	stw	r18,56(sp)
  804888:	dc400d15 	stw	r17,52(sp)
  80488c:	14431016 	blt	r2,r17,8054d0 <___vfprintf_internal_r+0x157c>
  804890:	18c00204 	addi	r3,r3,8
  804894:	d8814717 	ldw	r2,1308(sp)
  804898:	143fffc4 	addi	r16,r2,-1
  80489c:	043f2b0e 	bge	zero,r16,80454c <___vfprintf_internal_r+0x5f8>
  8048a0:	00800404 	movi	r2,16
  8048a4:	1402a20e 	bge	r2,r16,805330 <___vfprintf_internal_r+0x13dc>
  8048a8:	dc400d17 	ldw	r17,52(sp)
  8048ac:	1027883a 	mov	r19,r2
  8048b0:	07002074 	movhi	fp,129
  8048b4:	e70e7b84 	addi	fp,fp,14830
  8048b8:	050001c4 	movi	r20,7
  8048bc:	00000306 	br	8048cc <___vfprintf_internal_r+0x978>
  8048c0:	18c00204 	addi	r3,r3,8
  8048c4:	843ffc04 	addi	r16,r16,-16
  8048c8:	9c029c0e 	bge	r19,r16,80533c <___vfprintf_internal_r+0x13e8>
  8048cc:	94800404 	addi	r18,r18,16
  8048d0:	8c400044 	addi	r17,r17,1
  8048d4:	1f000015 	stw	fp,0(r3)
  8048d8:	1cc00115 	stw	r19,4(r3)
  8048dc:	dc800e15 	stw	r18,56(sp)
  8048e0:	dc400d15 	stw	r17,52(sp)
  8048e4:	a47ff60e 	bge	r20,r17,8048c0 <___vfprintf_internal_r+0x96c>
  8048e8:	d9014f17 	ldw	r4,1340(sp)
  8048ec:	b00b883a 	mov	r5,r22
  8048f0:	d9800c04 	addi	r6,sp,48
  8048f4:	0803efc0 	call	803efc <__sprint_r>
  8048f8:	103f4e1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8048fc:	dc800e17 	ldw	r18,56(sp)
  804900:	dc400d17 	ldw	r17,52(sp)
  804904:	d8c01904 	addi	r3,sp,100
  804908:	003fee06 	br	8048c4 <___vfprintf_internal_r+0x970>
  80490c:	d8802c0b 	ldhu	r2,176(sp)
  804910:	00ffffc4 	movi	r3,-1
  804914:	d8c14b15 	stw	r3,1324(sp)
  804918:	1080100c 	andi	r2,r2,64
  80491c:	103dcc1e 	bne	r2,zero,804050 <___vfprintf_internal_r+0xfc>
  804920:	003dce06 	br	80405c <___vfprintf_internal_r+0x108>
  804924:	d9014f17 	ldw	r4,1340(sp)
  804928:	b00b883a 	mov	r5,r22
  80492c:	d9800c04 	addi	r6,sp,48
  804930:	0803efc0 	call	803efc <__sprint_r>
  804934:	103f3f1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804938:	dc800e17 	ldw	r18,56(sp)
  80493c:	003f2e06 	br	8045f8 <___vfprintf_internal_r+0x6a4>
  804940:	d9414c17 	ldw	r5,1328(sp)
  804944:	29400414 	ori	r5,r5,16
  804948:	d9414c15 	stw	r5,1328(sp)
  80494c:	d9814c17 	ldw	r6,1328(sp)
  804950:	3080080c 	andi	r2,r6,32
  804954:	10014f1e 	bne	r2,zero,804e94 <___vfprintf_internal_r+0xf40>
  804958:	d8c14c17 	ldw	r3,1328(sp)
  80495c:	1880040c 	andi	r2,r3,16
  804960:	1002ea1e 	bne	r2,zero,80550c <___vfprintf_internal_r+0x15b8>
  804964:	d9014c17 	ldw	r4,1328(sp)
  804968:	2080100c 	andi	r2,r4,64
  80496c:	1002e726 	beq	r2,zero,80550c <___vfprintf_internal_r+0x15b8>
  804970:	3880000f 	ldh	r2,0(r7)
  804974:	39c00104 	addi	r7,r7,4
  804978:	d9c14015 	stw	r7,1280(sp)
  80497c:	1023d7fa 	srai	r17,r2,31
  804980:	1021883a 	mov	r16,r2
  804984:	88037216 	blt	r17,zero,805750 <___vfprintf_internal_r+0x17fc>
  804988:	01000044 	movi	r4,1
  80498c:	98000416 	blt	r19,zero,8049a0 <___vfprintf_internal_r+0xa4c>
  804990:	d8c14c17 	ldw	r3,1328(sp)
  804994:	00bfdfc4 	movi	r2,-129
  804998:	1886703a 	and	r3,r3,r2
  80499c:	d8c14c15 	stw	r3,1328(sp)
  8049a0:	8444b03a 	or	r2,r16,r17
  8049a4:	1002261e 	bne	r2,zero,805240 <___vfprintf_internal_r+0x12ec>
  8049a8:	9802251e 	bne	r19,zero,805240 <___vfprintf_internal_r+0x12ec>
  8049ac:	20803fcc 	andi	r2,r4,255
  8049b0:	10029b26 	beq	r2,zero,805420 <___vfprintf_internal_r+0x14cc>
  8049b4:	d8c01904 	addi	r3,sp,100
  8049b8:	dd000f04 	addi	r20,sp,60
  8049bc:	d8c14115 	stw	r3,1284(sp)
  8049c0:	d8c14117 	ldw	r3,1284(sp)
  8049c4:	dcc14515 	stw	r19,1300(sp)
  8049c8:	a0c5c83a 	sub	r2,r20,r3
  8049cc:	11c00a04 	addi	r7,r2,40
  8049d0:	99c0010e 	bge	r19,r7,8049d8 <___vfprintf_internal_r+0xa84>
  8049d4:	d9c14515 	stw	r7,1300(sp)
  8049d8:	dcc14615 	stw	r19,1304(sp)
  8049dc:	d8800407 	ldb	r2,16(sp)
  8049e0:	103e4c26 	beq	r2,zero,804314 <___vfprintf_internal_r+0x3c0>
  8049e4:	d8814517 	ldw	r2,1300(sp)
  8049e8:	10800044 	addi	r2,r2,1
  8049ec:	d8814515 	stw	r2,1300(sp)
  8049f0:	003e4806 	br	804314 <___vfprintf_internal_r+0x3c0>
  8049f4:	d9814c17 	ldw	r6,1328(sp)
  8049f8:	31800414 	ori	r6,r6,16
  8049fc:	d9814c15 	stw	r6,1328(sp)
  804a00:	d8c14c17 	ldw	r3,1328(sp)
  804a04:	1880080c 	andi	r2,r3,32
  804a08:	1001271e 	bne	r2,zero,804ea8 <___vfprintf_internal_r+0xf54>
  804a0c:	d9414c17 	ldw	r5,1328(sp)
  804a10:	2880040c 	andi	r2,r5,16
  804a14:	1002b61e 	bne	r2,zero,8054f0 <___vfprintf_internal_r+0x159c>
  804a18:	d9814c17 	ldw	r6,1328(sp)
  804a1c:	3080100c 	andi	r2,r6,64
  804a20:	1002b326 	beq	r2,zero,8054f0 <___vfprintf_internal_r+0x159c>
  804a24:	3c00000b 	ldhu	r16,0(r7)
  804a28:	0009883a 	mov	r4,zero
  804a2c:	39c00104 	addi	r7,r7,4
  804a30:	0023883a 	mov	r17,zero
  804a34:	d9c14015 	stw	r7,1280(sp)
  804a38:	d8000405 	stb	zero,16(sp)
  804a3c:	003fd306 	br	80498c <___vfprintf_internal_r+0xa38>
  804a40:	d9014c17 	ldw	r4,1328(sp)
  804a44:	21000414 	ori	r4,r4,16
  804a48:	d9014c15 	stw	r4,1328(sp)
  804a4c:	d9414c17 	ldw	r5,1328(sp)
  804a50:	2880080c 	andi	r2,r5,32
  804a54:	1001081e 	bne	r2,zero,804e78 <___vfprintf_internal_r+0xf24>
  804a58:	d8c14c17 	ldw	r3,1328(sp)
  804a5c:	1880040c 	andi	r2,r3,16
  804a60:	1002b01e 	bne	r2,zero,805524 <___vfprintf_internal_r+0x15d0>
  804a64:	d9014c17 	ldw	r4,1328(sp)
  804a68:	2080100c 	andi	r2,r4,64
  804a6c:	1002ad26 	beq	r2,zero,805524 <___vfprintf_internal_r+0x15d0>
  804a70:	3c00000b 	ldhu	r16,0(r7)
  804a74:	01000044 	movi	r4,1
  804a78:	39c00104 	addi	r7,r7,4
  804a7c:	0023883a 	mov	r17,zero
  804a80:	d9c14015 	stw	r7,1280(sp)
  804a84:	d8000405 	stb	zero,16(sp)
  804a88:	003fc006 	br	80498c <___vfprintf_internal_r+0xa38>
  804a8c:	d9014f17 	ldw	r4,1340(sp)
  804a90:	b00b883a 	mov	r5,r22
  804a94:	d9800c04 	addi	r6,sp,48
  804a98:	0803efc0 	call	803efc <__sprint_r>
  804a9c:	103ee51e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804aa0:	dc800e17 	ldw	r18,56(sp)
  804aa4:	d8c01904 	addi	r3,sp,100
  804aa8:	d9814c17 	ldw	r6,1328(sp)
  804aac:	3080004c 	andi	r2,r6,1
  804ab0:	1005003a 	cmpeq	r2,r2,zero
  804ab4:	103ea51e 	bne	r2,zero,80454c <___vfprintf_internal_r+0x5f8>
  804ab8:	00800044 	movi	r2,1
  804abc:	dc400d17 	ldw	r17,52(sp)
  804ac0:	18800115 	stw	r2,4(r3)
  804ac4:	d8814917 	ldw	r2,1316(sp)
  804ac8:	94800044 	addi	r18,r18,1
  804acc:	8c400044 	addi	r17,r17,1
  804ad0:	18800015 	stw	r2,0(r3)
  804ad4:	008001c4 	movi	r2,7
  804ad8:	dc800e15 	stw	r18,56(sp)
  804adc:	dc400d15 	stw	r17,52(sp)
  804ae0:	14421e0e 	bge	r2,r17,80535c <___vfprintf_internal_r+0x1408>
  804ae4:	d9014f17 	ldw	r4,1340(sp)
  804ae8:	b00b883a 	mov	r5,r22
  804aec:	d9800c04 	addi	r6,sp,48
  804af0:	0803efc0 	call	803efc <__sprint_r>
  804af4:	103ecf1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804af8:	dc800e17 	ldw	r18,56(sp)
  804afc:	d8c01904 	addi	r3,sp,100
  804b00:	003e9206 	br	80454c <___vfprintf_internal_r+0x5f8>
  804b04:	d9014f17 	ldw	r4,1340(sp)
  804b08:	b00b883a 	mov	r5,r22
  804b0c:	d9800c04 	addi	r6,sp,48
  804b10:	0803efc0 	call	803efc <__sprint_r>
  804b14:	103ec026 	beq	r2,zero,804618 <___vfprintf_internal_r+0x6c4>
  804b18:	003ec606 	br	804634 <___vfprintf_internal_r+0x6e0>
  804b1c:	d9014f17 	ldw	r4,1340(sp)
  804b20:	b00b883a 	mov	r5,r22
  804b24:	d9800c04 	addi	r6,sp,48
  804b28:	d9c15115 	stw	r7,1348(sp)
  804b2c:	0803efc0 	call	803efc <__sprint_r>
  804b30:	d9c15117 	ldw	r7,1348(sp)
  804b34:	103ebf1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804b38:	dc800e17 	ldw	r18,56(sp)
  804b3c:	dc400d17 	ldw	r17,52(sp)
  804b40:	dd401904 	addi	r21,sp,100
  804b44:	003e7406 	br	804518 <___vfprintf_internal_r+0x5c4>
  804b48:	d9014f17 	ldw	r4,1340(sp)
  804b4c:	b00b883a 	mov	r5,r22
  804b50:	d9800c04 	addi	r6,sp,48
  804b54:	d9c15115 	stw	r7,1348(sp)
  804b58:	0803efc0 	call	803efc <__sprint_r>
  804b5c:	d9c15117 	ldw	r7,1348(sp)
  804b60:	103eb41e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804b64:	dd401904 	addi	r21,sp,100
  804b68:	003d6d06 	br	804120 <___vfprintf_internal_r+0x1cc>
  804b6c:	d9014f17 	ldw	r4,1340(sp)
  804b70:	b00b883a 	mov	r5,r22
  804b74:	d9800c04 	addi	r6,sp,48
  804b78:	d9c15115 	stw	r7,1348(sp)
  804b7c:	0803efc0 	call	803efc <__sprint_r>
  804b80:	d9c15117 	ldw	r7,1348(sp)
  804b84:	103eab1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804b88:	dc800e17 	ldw	r18,56(sp)
  804b8c:	dc400d17 	ldw	r17,52(sp)
  804b90:	dd401904 	addi	r21,sp,100
  804b94:	003e3406 	br	804468 <___vfprintf_internal_r+0x514>
  804b98:	d9014f17 	ldw	r4,1340(sp)
  804b9c:	b00b883a 	mov	r5,r22
  804ba0:	d9800c04 	addi	r6,sp,48
  804ba4:	d9c15115 	stw	r7,1348(sp)
  804ba8:	0803efc0 	call	803efc <__sprint_r>
  804bac:	d9c15117 	ldw	r7,1348(sp)
  804bb0:	103ea01e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804bb4:	dc800e17 	ldw	r18,56(sp)
  804bb8:	dc400d17 	ldw	r17,52(sp)
  804bbc:	dd401904 	addi	r21,sp,100
  804bc0:	003e1c06 	br	804434 <___vfprintf_internal_r+0x4e0>
  804bc4:	d9014f17 	ldw	r4,1340(sp)
  804bc8:	b00b883a 	mov	r5,r22
  804bcc:	d9800c04 	addi	r6,sp,48
  804bd0:	d9c15115 	stw	r7,1348(sp)
  804bd4:	0803efc0 	call	803efc <__sprint_r>
  804bd8:	d9c15117 	ldw	r7,1348(sp)
  804bdc:	103e951e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804be0:	dc800e17 	ldw	r18,56(sp)
  804be4:	dc400d17 	ldw	r17,52(sp)
  804be8:	dd401904 	addi	r21,sp,100
  804bec:	003e0406 	br	804400 <___vfprintf_internal_r+0x4ac>
  804bf0:	d9000517 	ldw	r4,20(sp)
  804bf4:	0102520e 	bge	zero,r4,805540 <___vfprintf_internal_r+0x15ec>
  804bf8:	d9814717 	ldw	r6,1308(sp)
  804bfc:	21807a16 	blt	r4,r6,804de8 <___vfprintf_internal_r+0xe94>
  804c00:	d8814117 	ldw	r2,1284(sp)
  804c04:	91a5883a 	add	r18,r18,r6
  804c08:	8c400044 	addi	r17,r17,1
  804c0c:	a8800015 	stw	r2,0(r21)
  804c10:	008001c4 	movi	r2,7
  804c14:	a9800115 	stw	r6,4(r21)
  804c18:	dc800e15 	stw	r18,56(sp)
  804c1c:	dc400d15 	stw	r17,52(sp)
  804c20:	1442f616 	blt	r2,r17,8057fc <___vfprintf_internal_r+0x18a8>
  804c24:	a8c00204 	addi	r3,r21,8
  804c28:	d9414717 	ldw	r5,1308(sp)
  804c2c:	2161c83a 	sub	r16,r4,r5
  804c30:	043f9d0e 	bge	zero,r16,804aa8 <___vfprintf_internal_r+0xb54>
  804c34:	00800404 	movi	r2,16
  804c38:	1402130e 	bge	r2,r16,805488 <___vfprintf_internal_r+0x1534>
  804c3c:	dc400d17 	ldw	r17,52(sp)
  804c40:	1027883a 	mov	r19,r2
  804c44:	07002074 	movhi	fp,129
  804c48:	e70e7b84 	addi	fp,fp,14830
  804c4c:	050001c4 	movi	r20,7
  804c50:	00000306 	br	804c60 <___vfprintf_internal_r+0xd0c>
  804c54:	18c00204 	addi	r3,r3,8
  804c58:	843ffc04 	addi	r16,r16,-16
  804c5c:	9c020d0e 	bge	r19,r16,805494 <___vfprintf_internal_r+0x1540>
  804c60:	94800404 	addi	r18,r18,16
  804c64:	8c400044 	addi	r17,r17,1
  804c68:	1f000015 	stw	fp,0(r3)
  804c6c:	1cc00115 	stw	r19,4(r3)
  804c70:	dc800e15 	stw	r18,56(sp)
  804c74:	dc400d15 	stw	r17,52(sp)
  804c78:	a47ff60e 	bge	r20,r17,804c54 <___vfprintf_internal_r+0xd00>
  804c7c:	d9014f17 	ldw	r4,1340(sp)
  804c80:	b00b883a 	mov	r5,r22
  804c84:	d9800c04 	addi	r6,sp,48
  804c88:	0803efc0 	call	803efc <__sprint_r>
  804c8c:	103e691e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804c90:	dc800e17 	ldw	r18,56(sp)
  804c94:	dc400d17 	ldw	r17,52(sp)
  804c98:	d8c01904 	addi	r3,sp,100
  804c9c:	003fee06 	br	804c58 <___vfprintf_internal_r+0xd04>
  804ca0:	d8814717 	ldw	r2,1308(sp)
  804ca4:	143fffc4 	addi	r16,r2,-1
  804ca8:	043e970e 	bge	zero,r16,804708 <___vfprintf_internal_r+0x7b4>
  804cac:	00800404 	movi	r2,16
  804cb0:	1400180e 	bge	r2,r16,804d14 <___vfprintf_internal_r+0xdc0>
  804cb4:	1029883a 	mov	r20,r2
  804cb8:	07002074 	movhi	fp,129
  804cbc:	e70e7b84 	addi	fp,fp,14830
  804cc0:	054001c4 	movi	r21,7
  804cc4:	00000306 	br	804cd4 <___vfprintf_internal_r+0xd80>
  804cc8:	9cc00204 	addi	r19,r19,8
  804ccc:	843ffc04 	addi	r16,r16,-16
  804cd0:	a400120e 	bge	r20,r16,804d1c <___vfprintf_internal_r+0xdc8>
  804cd4:	94800404 	addi	r18,r18,16
  804cd8:	8c400044 	addi	r17,r17,1
  804cdc:	9f000015 	stw	fp,0(r19)
  804ce0:	9d000115 	stw	r20,4(r19)
  804ce4:	dc800e15 	stw	r18,56(sp)
  804ce8:	dc400d15 	stw	r17,52(sp)
  804cec:	ac7ff60e 	bge	r21,r17,804cc8 <___vfprintf_internal_r+0xd74>
  804cf0:	d9014f17 	ldw	r4,1340(sp)
  804cf4:	b00b883a 	mov	r5,r22
  804cf8:	d9800c04 	addi	r6,sp,48
  804cfc:	0803efc0 	call	803efc <__sprint_r>
  804d00:	103e4c1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804d04:	dc800e17 	ldw	r18,56(sp)
  804d08:	dc400d17 	ldw	r17,52(sp)
  804d0c:	dcc01904 	addi	r19,sp,100
  804d10:	003fee06 	br	804ccc <___vfprintf_internal_r+0xd78>
  804d14:	07002074 	movhi	fp,129
  804d18:	e70e7b84 	addi	fp,fp,14830
  804d1c:	9425883a 	add	r18,r18,r16
  804d20:	8c400044 	addi	r17,r17,1
  804d24:	008001c4 	movi	r2,7
  804d28:	9f000015 	stw	fp,0(r19)
  804d2c:	9c000115 	stw	r16,4(r19)
  804d30:	dc800e15 	stw	r18,56(sp)
  804d34:	dc400d15 	stw	r17,52(sp)
  804d38:	147e720e 	bge	r2,r17,804704 <___vfprintf_internal_r+0x7b0>
  804d3c:	d9014f17 	ldw	r4,1340(sp)
  804d40:	b00b883a 	mov	r5,r22
  804d44:	d9800c04 	addi	r6,sp,48
  804d48:	0803efc0 	call	803efc <__sprint_r>
  804d4c:	103e391e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804d50:	dc800e17 	ldw	r18,56(sp)
  804d54:	dc400d17 	ldw	r17,52(sp)
  804d58:	dcc01904 	addi	r19,sp,100
  804d5c:	003e6a06 	br	804708 <___vfprintf_internal_r+0x7b4>
  804d60:	d9014f17 	ldw	r4,1340(sp)
  804d64:	b00b883a 	mov	r5,r22
  804d68:	d9800c04 	addi	r6,sp,48
  804d6c:	d9c15115 	stw	r7,1348(sp)
  804d70:	0803efc0 	call	803efc <__sprint_r>
  804d74:	d9c15117 	ldw	r7,1348(sp)
  804d78:	103e2e1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804d7c:	dc800e17 	ldw	r18,56(sp)
  804d80:	dc400d17 	ldw	r17,52(sp)
  804d84:	dd401904 	addi	r21,sp,100
  804d88:	003dba06 	br	804474 <___vfprintf_internal_r+0x520>
  804d8c:	d9014f17 	ldw	r4,1340(sp)
  804d90:	b00b883a 	mov	r5,r22
  804d94:	d9800c04 	addi	r6,sp,48
  804d98:	0803efc0 	call	803efc <__sprint_r>
  804d9c:	103e251e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804da0:	dc800e17 	ldw	r18,56(sp)
  804da4:	dc400d17 	ldw	r17,52(sp)
  804da8:	dcc01904 	addi	r19,sp,100
  804dac:	003e4206 	br	8046b8 <___vfprintf_internal_r+0x764>
  804db0:	d9014f17 	ldw	r4,1340(sp)
  804db4:	b00b883a 	mov	r5,r22
  804db8:	d9800c04 	addi	r6,sp,48
  804dbc:	0803efc0 	call	803efc <__sprint_r>
  804dc0:	103e1c1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  804dc4:	dc800e17 	ldw	r18,56(sp)
  804dc8:	dc400d17 	ldw	r17,52(sp)
  804dcc:	d8c01904 	addi	r3,sp,100
  804dd0:	003e2e06 	br	80468c <___vfprintf_internal_r+0x738>
  804dd4:	d9414c17 	ldw	r5,1328(sp)
  804dd8:	2880004c 	andi	r2,r5,1
  804ddc:	1005003a 	cmpeq	r2,r2,zero
  804de0:	103dda1e 	bne	r2,zero,80454c <___vfprintf_internal_r+0x5f8>
  804de4:	003e9f06 	br	804864 <___vfprintf_internal_r+0x910>
  804de8:	d8c14117 	ldw	r3,1284(sp)
  804dec:	9125883a 	add	r18,r18,r4
  804df0:	8c400044 	addi	r17,r17,1
  804df4:	008001c4 	movi	r2,7
  804df8:	a8c00015 	stw	r3,0(r21)
  804dfc:	a9000115 	stw	r4,4(r21)
  804e00:	dc800e15 	stw	r18,56(sp)
  804e04:	dc400d15 	stw	r17,52(sp)
  804e08:	14426616 	blt	r2,r17,8057a4 <___vfprintf_internal_r+0x1850>
  804e0c:	a8c00204 	addi	r3,r21,8
  804e10:	d9414917 	ldw	r5,1316(sp)
  804e14:	00800044 	movi	r2,1
  804e18:	94800044 	addi	r18,r18,1
  804e1c:	8c400044 	addi	r17,r17,1
  804e20:	18800115 	stw	r2,4(r3)
  804e24:	008001c4 	movi	r2,7
  804e28:	19400015 	stw	r5,0(r3)
  804e2c:	dc800e15 	stw	r18,56(sp)
  804e30:	dc400d15 	stw	r17,52(sp)
  804e34:	2021883a 	mov	r16,r4
  804e38:	14425016 	blt	r2,r17,80577c <___vfprintf_internal_r+0x1828>
  804e3c:	19400204 	addi	r5,r3,8
  804e40:	d9814717 	ldw	r6,1308(sp)
  804e44:	8c400044 	addi	r17,r17,1
  804e48:	dc400d15 	stw	r17,52(sp)
  804e4c:	3107c83a 	sub	r3,r6,r4
  804e50:	d9014117 	ldw	r4,1284(sp)
  804e54:	90e5883a 	add	r18,r18,r3
  804e58:	28c00115 	stw	r3,4(r5)
  804e5c:	8105883a 	add	r2,r16,r4
  804e60:	28800015 	stw	r2,0(r5)
  804e64:	008001c4 	movi	r2,7
  804e68:	dc800e15 	stw	r18,56(sp)
  804e6c:	147f1d16 	blt	r2,r17,804ae4 <___vfprintf_internal_r+0xb90>
  804e70:	28c00204 	addi	r3,r5,8
  804e74:	003db506 	br	80454c <___vfprintf_internal_r+0x5f8>
  804e78:	3c000017 	ldw	r16,0(r7)
  804e7c:	3c400117 	ldw	r17,4(r7)
  804e80:	39800204 	addi	r6,r7,8
  804e84:	01000044 	movi	r4,1
  804e88:	d9814015 	stw	r6,1280(sp)
  804e8c:	d8000405 	stb	zero,16(sp)
  804e90:	003ebe06 	br	80498c <___vfprintf_internal_r+0xa38>
  804e94:	3c000017 	ldw	r16,0(r7)
  804e98:	3c400117 	ldw	r17,4(r7)
  804e9c:	38800204 	addi	r2,r7,8
  804ea0:	d8814015 	stw	r2,1280(sp)
  804ea4:	003eb706 	br	804984 <___vfprintf_internal_r+0xa30>
  804ea8:	3c000017 	ldw	r16,0(r7)
  804eac:	3c400117 	ldw	r17,4(r7)
  804eb0:	39000204 	addi	r4,r7,8
  804eb4:	d9014015 	stw	r4,1280(sp)
  804eb8:	0009883a 	mov	r4,zero
  804ebc:	d8000405 	stb	zero,16(sp)
  804ec0:	003eb206 	br	80498c <___vfprintf_internal_r+0xa38>
  804ec4:	38c00017 	ldw	r3,0(r7)
  804ec8:	39c00104 	addi	r7,r7,4
  804ecc:	d8c14a15 	stw	r3,1320(sp)
  804ed0:	1800d10e 	bge	r3,zero,805218 <___vfprintf_internal_r+0x12c4>
  804ed4:	00c7c83a 	sub	r3,zero,r3
  804ed8:	d8c14a15 	stw	r3,1320(sp)
  804edc:	d9014c17 	ldw	r4,1328(sp)
  804ee0:	b8c00007 	ldb	r3,0(r23)
  804ee4:	21000114 	ori	r4,r4,4
  804ee8:	d9014c15 	stw	r4,1328(sp)
  804eec:	003c9806 	br	804150 <___vfprintf_internal_r+0x1fc>
  804ef0:	d9814c17 	ldw	r6,1328(sp)
  804ef4:	3080080c 	andi	r2,r6,32
  804ef8:	1001f026 	beq	r2,zero,8056bc <___vfprintf_internal_r+0x1768>
  804efc:	d9014b17 	ldw	r4,1324(sp)
  804f00:	38800017 	ldw	r2,0(r7)
  804f04:	39c00104 	addi	r7,r7,4
  804f08:	d9c14015 	stw	r7,1280(sp)
  804f0c:	2007d7fa 	srai	r3,r4,31
  804f10:	d9c14017 	ldw	r7,1280(sp)
  804f14:	11000015 	stw	r4,0(r2)
  804f18:	10c00115 	stw	r3,4(r2)
  804f1c:	003c6906 	br	8040c4 <___vfprintf_internal_r+0x170>
  804f20:	b8c00007 	ldb	r3,0(r23)
  804f24:	00801b04 	movi	r2,108
  804f28:	18824f26 	beq	r3,r2,805868 <___vfprintf_internal_r+0x1914>
  804f2c:	d9414c17 	ldw	r5,1328(sp)
  804f30:	29400414 	ori	r5,r5,16
  804f34:	d9414c15 	stw	r5,1328(sp)
  804f38:	003c8506 	br	804150 <___vfprintf_internal_r+0x1fc>
  804f3c:	d9814c17 	ldw	r6,1328(sp)
  804f40:	b8c00007 	ldb	r3,0(r23)
  804f44:	31800814 	ori	r6,r6,32
  804f48:	d9814c15 	stw	r6,1328(sp)
  804f4c:	003c8006 	br	804150 <___vfprintf_internal_r+0x1fc>
  804f50:	d8814c17 	ldw	r2,1328(sp)
  804f54:	3c000017 	ldw	r16,0(r7)
  804f58:	00c01e04 	movi	r3,120
  804f5c:	10800094 	ori	r2,r2,2
  804f60:	d8814c15 	stw	r2,1328(sp)
  804f64:	39c00104 	addi	r7,r7,4
  804f68:	01402074 	movhi	r5,129
  804f6c:	294e6504 	addi	r5,r5,14740
  804f70:	00800c04 	movi	r2,48
  804f74:	0023883a 	mov	r17,zero
  804f78:	01000084 	movi	r4,2
  804f7c:	d9c14015 	stw	r7,1280(sp)
  804f80:	d8c14d15 	stw	r3,1332(sp)
  804f84:	d9414415 	stw	r5,1296(sp)
  804f88:	d8800445 	stb	r2,17(sp)
  804f8c:	d8c00485 	stb	r3,18(sp)
  804f90:	d8000405 	stb	zero,16(sp)
  804f94:	003e7d06 	br	80498c <___vfprintf_internal_r+0xa38>
  804f98:	d8814c17 	ldw	r2,1328(sp)
  804f9c:	b8c00007 	ldb	r3,0(r23)
  804fa0:	10801014 	ori	r2,r2,64
  804fa4:	d8814c15 	stw	r2,1328(sp)
  804fa8:	003c6906 	br	804150 <___vfprintf_internal_r+0x1fc>
  804fac:	d9414c17 	ldw	r5,1328(sp)
  804fb0:	2880020c 	andi	r2,r5,8
  804fb4:	1001df26 	beq	r2,zero,805734 <___vfprintf_internal_r+0x17e0>
  804fb8:	39800017 	ldw	r6,0(r7)
  804fbc:	38800204 	addi	r2,r7,8
  804fc0:	d8814015 	stw	r2,1280(sp)
  804fc4:	d9814215 	stw	r6,1288(sp)
  804fc8:	39c00117 	ldw	r7,4(r7)
  804fcc:	d9c14315 	stw	r7,1292(sp)
  804fd0:	d9014217 	ldw	r4,1288(sp)
  804fd4:	d9414317 	ldw	r5,1292(sp)
  804fd8:	080a6940 	call	80a694 <__isinfd>
  804fdc:	10021726 	beq	r2,zero,80583c <___vfprintf_internal_r+0x18e8>
  804fe0:	d9014217 	ldw	r4,1288(sp)
  804fe4:	d9414317 	ldw	r5,1292(sp)
  804fe8:	000d883a 	mov	r6,zero
  804fec:	000f883a 	mov	r7,zero
  804ff0:	080be680 	call	80be68 <__ltdf2>
  804ff4:	1002ca16 	blt	r2,zero,805b20 <___vfprintf_internal_r+0x1bcc>
  804ff8:	d9414d17 	ldw	r5,1332(sp)
  804ffc:	008011c4 	movi	r2,71
  805000:	11420a16 	blt	r2,r5,80582c <___vfprintf_internal_r+0x18d8>
  805004:	01802074 	movhi	r6,129
  805008:	318e6a04 	addi	r6,r6,14760
  80500c:	d9814115 	stw	r6,1284(sp)
  805010:	d9014c17 	ldw	r4,1328(sp)
  805014:	00c000c4 	movi	r3,3
  805018:	00bfdfc4 	movi	r2,-129
  80501c:	2088703a 	and	r4,r4,r2
  805020:	180f883a 	mov	r7,r3
  805024:	d8c14515 	stw	r3,1300(sp)
  805028:	d9014c15 	stw	r4,1328(sp)
  80502c:	d8014615 	stw	zero,1304(sp)
  805030:	003e6a06 	br	8049dc <___vfprintf_internal_r+0xa88>
  805034:	38800017 	ldw	r2,0(r7)
  805038:	00c00044 	movi	r3,1
  80503c:	39c00104 	addi	r7,r7,4
  805040:	d9c14015 	stw	r7,1280(sp)
  805044:	d9000f04 	addi	r4,sp,60
  805048:	180f883a 	mov	r7,r3
  80504c:	d8c14515 	stw	r3,1300(sp)
  805050:	d9014115 	stw	r4,1284(sp)
  805054:	d8800f05 	stb	r2,60(sp)
  805058:	d8000405 	stb	zero,16(sp)
  80505c:	003cac06 	br	804310 <___vfprintf_internal_r+0x3bc>
  805060:	01402074 	movhi	r5,129
  805064:	294e7004 	addi	r5,r5,14784
  805068:	d9414415 	stw	r5,1296(sp)
  80506c:	d9814c17 	ldw	r6,1328(sp)
  805070:	3080080c 	andi	r2,r6,32
  805074:	1000f926 	beq	r2,zero,80545c <___vfprintf_internal_r+0x1508>
  805078:	3c000017 	ldw	r16,0(r7)
  80507c:	3c400117 	ldw	r17,4(r7)
  805080:	38800204 	addi	r2,r7,8
  805084:	d8814015 	stw	r2,1280(sp)
  805088:	d9414c17 	ldw	r5,1328(sp)
  80508c:	2880004c 	andi	r2,r5,1
  805090:	1005003a 	cmpeq	r2,r2,zero
  805094:	1000b31e 	bne	r2,zero,805364 <___vfprintf_internal_r+0x1410>
  805098:	8444b03a 	or	r2,r16,r17
  80509c:	1000b126 	beq	r2,zero,805364 <___vfprintf_internal_r+0x1410>
  8050a0:	d9814d17 	ldw	r6,1332(sp)
  8050a4:	29400094 	ori	r5,r5,2
  8050a8:	00800c04 	movi	r2,48
  8050ac:	01000084 	movi	r4,2
  8050b0:	d9414c15 	stw	r5,1328(sp)
  8050b4:	d8800445 	stb	r2,17(sp)
  8050b8:	d9800485 	stb	r6,18(sp)
  8050bc:	d8000405 	stb	zero,16(sp)
  8050c0:	003e3206 	br	80498c <___vfprintf_internal_r+0xa38>
  8050c4:	01802074 	movhi	r6,129
  8050c8:	318e6504 	addi	r6,r6,14740
  8050cc:	d9814415 	stw	r6,1296(sp)
  8050d0:	003fe606 	br	80506c <___vfprintf_internal_r+0x1118>
  8050d4:	00800ac4 	movi	r2,43
  8050d8:	d8800405 	stb	r2,16(sp)
  8050dc:	b8c00007 	ldb	r3,0(r23)
  8050e0:	003c1b06 	br	804150 <___vfprintf_internal_r+0x1fc>
  8050e4:	d8814c17 	ldw	r2,1328(sp)
  8050e8:	b8c00007 	ldb	r3,0(r23)
  8050ec:	10800054 	ori	r2,r2,1
  8050f0:	d8814c15 	stw	r2,1328(sp)
  8050f4:	003c1606 	br	804150 <___vfprintf_internal_r+0x1fc>
  8050f8:	d8800407 	ldb	r2,16(sp)
  8050fc:	1000461e 	bne	r2,zero,805218 <___vfprintf_internal_r+0x12c4>
  805100:	00800804 	movi	r2,32
  805104:	d8800405 	stb	r2,16(sp)
  805108:	b8c00007 	ldb	r3,0(r23)
  80510c:	003c1006 	br	804150 <___vfprintf_internal_r+0x1fc>
  805110:	d9814c17 	ldw	r6,1328(sp)
  805114:	b8c00007 	ldb	r3,0(r23)
  805118:	31800214 	ori	r6,r6,8
  80511c:	d9814c15 	stw	r6,1328(sp)
  805120:	003c0b06 	br	804150 <___vfprintf_internal_r+0x1fc>
  805124:	0007883a 	mov	r3,zero
  805128:	01000244 	movi	r4,9
  80512c:	188002a4 	muli	r2,r3,10
  805130:	b8c00007 	ldb	r3,0(r23)
  805134:	d9814d17 	ldw	r6,1332(sp)
  805138:	bdc00044 	addi	r23,r23,1
  80513c:	d8c14d15 	stw	r3,1332(sp)
  805140:	d9414d17 	ldw	r5,1332(sp)
  805144:	3085883a 	add	r2,r6,r2
  805148:	10fff404 	addi	r3,r2,-48
  80514c:	28bff404 	addi	r2,r5,-48
  805150:	20bff62e 	bgeu	r4,r2,80512c <___vfprintf_internal_r+0x11d8>
  805154:	d8c14a15 	stw	r3,1320(sp)
  805158:	003bff06 	br	804158 <___vfprintf_internal_r+0x204>
  80515c:	d9414c17 	ldw	r5,1328(sp)
  805160:	b8c00007 	ldb	r3,0(r23)
  805164:	29402014 	ori	r5,r5,128
  805168:	d9414c15 	stw	r5,1328(sp)
  80516c:	003bf806 	br	804150 <___vfprintf_internal_r+0x1fc>
  805170:	b8c00007 	ldb	r3,0(r23)
  805174:	00800a84 	movi	r2,42
  805178:	bdc00044 	addi	r23,r23,1
  80517c:	18831526 	beq	r3,r2,805dd4 <___vfprintf_internal_r+0x1e80>
  805180:	d8c14d15 	stw	r3,1332(sp)
  805184:	18bff404 	addi	r2,r3,-48
  805188:	00c00244 	movi	r3,9
  80518c:	18827836 	bltu	r3,r2,805b70 <___vfprintf_internal_r+0x1c1c>
  805190:	000d883a 	mov	r6,zero
  805194:	308002a4 	muli	r2,r6,10
  805198:	b9800007 	ldb	r6,0(r23)
  80519c:	d9414d17 	ldw	r5,1332(sp)
  8051a0:	bdc00044 	addi	r23,r23,1
  8051a4:	d9814d15 	stw	r6,1332(sp)
  8051a8:	d9014d17 	ldw	r4,1332(sp)
  8051ac:	1145883a 	add	r2,r2,r5
  8051b0:	11bff404 	addi	r6,r2,-48
  8051b4:	20bff404 	addi	r2,r4,-48
  8051b8:	18bff62e 	bgeu	r3,r2,805194 <___vfprintf_internal_r+0x1240>
  8051bc:	3027883a 	mov	r19,r6
  8051c0:	303be50e 	bge	r6,zero,804158 <___vfprintf_internal_r+0x204>
  8051c4:	04ffffc4 	movi	r19,-1
  8051c8:	003be306 	br	804158 <___vfprintf_internal_r+0x204>
  8051cc:	d8000405 	stb	zero,16(sp)
  8051d0:	39800017 	ldw	r6,0(r7)
  8051d4:	39c00104 	addi	r7,r7,4
  8051d8:	d9c14015 	stw	r7,1280(sp)
  8051dc:	d9814115 	stw	r6,1284(sp)
  8051e0:	3001c926 	beq	r6,zero,805908 <___vfprintf_internal_r+0x19b4>
  8051e4:	98000e16 	blt	r19,zero,805220 <___vfprintf_internal_r+0x12cc>
  8051e8:	d9014117 	ldw	r4,1284(sp)
  8051ec:	000b883a 	mov	r5,zero
  8051f0:	980d883a 	mov	r6,r19
  8051f4:	0808a840 	call	808a84 <memchr>
  8051f8:	10025926 	beq	r2,zero,805b60 <___vfprintf_internal_r+0x1c0c>
  8051fc:	d8c14117 	ldw	r3,1284(sp)
  805200:	10cfc83a 	sub	r7,r2,r3
  805204:	99c19e16 	blt	r19,r7,805880 <___vfprintf_internal_r+0x192c>
  805208:	d9c14515 	stw	r7,1300(sp)
  80520c:	38000916 	blt	r7,zero,805234 <___vfprintf_internal_r+0x12e0>
  805210:	d8014615 	stw	zero,1304(sp)
  805214:	003df106 	br	8049dc <___vfprintf_internal_r+0xa88>
  805218:	b8c00007 	ldb	r3,0(r23)
  80521c:	003bcc06 	br	804150 <___vfprintf_internal_r+0x1fc>
  805220:	d9014117 	ldw	r4,1284(sp)
  805224:	0803e880 	call	803e88 <strlen>
  805228:	d8814515 	stw	r2,1300(sp)
  80522c:	100f883a 	mov	r7,r2
  805230:	103ff70e 	bge	r2,zero,805210 <___vfprintf_internal_r+0x12bc>
  805234:	d8014515 	stw	zero,1300(sp)
  805238:	d8014615 	stw	zero,1304(sp)
  80523c:	003de706 	br	8049dc <___vfprintf_internal_r+0xa88>
  805240:	20c03fcc 	andi	r3,r4,255
  805244:	00800044 	movi	r2,1
  805248:	18802d26 	beq	r3,r2,805300 <___vfprintf_internal_r+0x13ac>
  80524c:	18800e36 	bltu	r3,r2,805288 <___vfprintf_internal_r+0x1334>
  805250:	00800084 	movi	r2,2
  805254:	1880fa26 	beq	r3,r2,805640 <___vfprintf_internal_r+0x16ec>
  805258:	01002074 	movhi	r4,129
  80525c:	210e7504 	addi	r4,r4,14804
  805260:	0803e880 	call	803e88 <strlen>
  805264:	100f883a 	mov	r7,r2
  805268:	dcc14515 	stw	r19,1300(sp)
  80526c:	9880010e 	bge	r19,r2,805274 <___vfprintf_internal_r+0x1320>
  805270:	d8814515 	stw	r2,1300(sp)
  805274:	00802074 	movhi	r2,129
  805278:	108e7504 	addi	r2,r2,14804
  80527c:	dcc14615 	stw	r19,1304(sp)
  805280:	d8814115 	stw	r2,1284(sp)
  805284:	003dd506 	br	8049dc <___vfprintf_internal_r+0xa88>
  805288:	d9401904 	addi	r5,sp,100
  80528c:	dd000f04 	addi	r20,sp,60
  805290:	d9414115 	stw	r5,1284(sp)
  805294:	880a977a 	slli	r5,r17,29
  805298:	d9814117 	ldw	r6,1284(sp)
  80529c:	8004d0fa 	srli	r2,r16,3
  8052a0:	8806d0fa 	srli	r3,r17,3
  8052a4:	810001cc 	andi	r4,r16,7
  8052a8:	2884b03a 	or	r2,r5,r2
  8052ac:	31bfffc4 	addi	r6,r6,-1
  8052b0:	21000c04 	addi	r4,r4,48
  8052b4:	d9814115 	stw	r6,1284(sp)
  8052b8:	10cab03a 	or	r5,r2,r3
  8052bc:	31000005 	stb	r4,0(r6)
  8052c0:	1021883a 	mov	r16,r2
  8052c4:	1823883a 	mov	r17,r3
  8052c8:	283ff21e 	bne	r5,zero,805294 <___vfprintf_internal_r+0x1340>
  8052cc:	d8c14c17 	ldw	r3,1328(sp)
  8052d0:	1880004c 	andi	r2,r3,1
  8052d4:	1005003a 	cmpeq	r2,r2,zero
  8052d8:	103db91e 	bne	r2,zero,8049c0 <___vfprintf_internal_r+0xa6c>
  8052dc:	20803fcc 	andi	r2,r4,255
  8052e0:	1080201c 	xori	r2,r2,128
  8052e4:	10bfe004 	addi	r2,r2,-128
  8052e8:	00c00c04 	movi	r3,48
  8052ec:	10fdb426 	beq	r2,r3,8049c0 <___vfprintf_internal_r+0xa6c>
  8052f0:	31bfffc4 	addi	r6,r6,-1
  8052f4:	d9814115 	stw	r6,1284(sp)
  8052f8:	30c00005 	stb	r3,0(r6)
  8052fc:	003db006 	br	8049c0 <___vfprintf_internal_r+0xa6c>
  805300:	88800068 	cmpgeui	r2,r17,1
  805304:	10002c1e 	bne	r2,zero,8053b8 <___vfprintf_internal_r+0x1464>
  805308:	8800021e 	bne	r17,zero,805314 <___vfprintf_internal_r+0x13c0>
  80530c:	00800244 	movi	r2,9
  805310:	14002936 	bltu	r2,r16,8053b8 <___vfprintf_internal_r+0x1464>
  805314:	d90018c4 	addi	r4,sp,99
  805318:	dd000f04 	addi	r20,sp,60
  80531c:	d9014115 	stw	r4,1284(sp)
  805320:	d9014117 	ldw	r4,1284(sp)
  805324:	80800c04 	addi	r2,r16,48
  805328:	20800005 	stb	r2,0(r4)
  80532c:	003da406 	br	8049c0 <___vfprintf_internal_r+0xa6c>
  805330:	dc400d17 	ldw	r17,52(sp)
  805334:	07002074 	movhi	fp,129
  805338:	e70e7b84 	addi	fp,fp,14830
  80533c:	9425883a 	add	r18,r18,r16
  805340:	8c400044 	addi	r17,r17,1
  805344:	008001c4 	movi	r2,7
  805348:	1f000015 	stw	fp,0(r3)
  80534c:	1c000115 	stw	r16,4(r3)
  805350:	dc800e15 	stw	r18,56(sp)
  805354:	dc400d15 	stw	r17,52(sp)
  805358:	147de216 	blt	r2,r17,804ae4 <___vfprintf_internal_r+0xb90>
  80535c:	18c00204 	addi	r3,r3,8
  805360:	003c7a06 	br	80454c <___vfprintf_internal_r+0x5f8>
  805364:	01000084 	movi	r4,2
  805368:	d8000405 	stb	zero,16(sp)
  80536c:	003d8706 	br	80498c <___vfprintf_internal_r+0xa38>
  805370:	d9814c17 	ldw	r6,1328(sp)
  805374:	30c4703a 	and	r2,r6,r3
  805378:	1005003a 	cmpeq	r2,r2,zero
  80537c:	103cb926 	beq	r2,zero,804664 <___vfprintf_internal_r+0x710>
  805380:	d9014117 	ldw	r4,1284(sp)
  805384:	94800044 	addi	r18,r18,1
  805388:	8c400044 	addi	r17,r17,1
  80538c:	008001c4 	movi	r2,7
  805390:	a9000015 	stw	r4,0(r21)
  805394:	a8c00115 	stw	r3,4(r21)
  805398:	dc800e15 	stw	r18,56(sp)
  80539c:	dc400d15 	stw	r17,52(sp)
  8053a0:	147e6616 	blt	r2,r17,804d3c <___vfprintf_internal_r+0xde8>
  8053a4:	acc00204 	addi	r19,r21,8
  8053a8:	003cd706 	br	804708 <___vfprintf_internal_r+0x7b4>
  8053ac:	07002074 	movhi	fp,129
  8053b0:	e70e7b84 	addi	fp,fp,14830
  8053b4:	003c4f06 	br	8044f4 <___vfprintf_internal_r+0x5a0>
  8053b8:	dd000f04 	addi	r20,sp,60
  8053bc:	dc801904 	addi	r18,sp,100
  8053c0:	8009883a 	mov	r4,r16
  8053c4:	880b883a 	mov	r5,r17
  8053c8:	01800284 	movi	r6,10
  8053cc:	000f883a 	mov	r7,zero
  8053d0:	080b4c80 	call	80b4c8 <__umoddi3>
  8053d4:	12000c04 	addi	r8,r2,48
  8053d8:	94bfffc4 	addi	r18,r18,-1
  8053dc:	8009883a 	mov	r4,r16
  8053e0:	880b883a 	mov	r5,r17
  8053e4:	01800284 	movi	r6,10
  8053e8:	000f883a 	mov	r7,zero
  8053ec:	92000005 	stb	r8,0(r18)
  8053f0:	080aeec0 	call	80aeec <__udivdi3>
  8053f4:	1009883a 	mov	r4,r2
  8053f8:	1021883a 	mov	r16,r2
  8053fc:	18800068 	cmpgeui	r2,r3,1
  805400:	1823883a 	mov	r17,r3
  805404:	103fee1e 	bne	r2,zero,8053c0 <___vfprintf_internal_r+0x146c>
  805408:	1800021e 	bne	r3,zero,805414 <___vfprintf_internal_r+0x14c0>
  80540c:	00800244 	movi	r2,9
  805410:	113feb36 	bltu	r2,r4,8053c0 <___vfprintf_internal_r+0x146c>
  805414:	94bfffc4 	addi	r18,r18,-1
  805418:	dc814115 	stw	r18,1284(sp)
  80541c:	003fc006 	br	805320 <___vfprintf_internal_r+0x13cc>
  805420:	d9014c17 	ldw	r4,1328(sp)
  805424:	2080004c 	andi	r2,r4,1
  805428:	10009a1e 	bne	r2,zero,805694 <___vfprintf_internal_r+0x1740>
  80542c:	d9401904 	addi	r5,sp,100
  805430:	dd000f04 	addi	r20,sp,60
  805434:	d9414115 	stw	r5,1284(sp)
  805438:	003d6106 	br	8049c0 <___vfprintf_internal_r+0xa6c>
  80543c:	d9014f17 	ldw	r4,1340(sp)
  805440:	b00b883a 	mov	r5,r22
  805444:	d9800c04 	addi	r6,sp,48
  805448:	0803efc0 	call	803efc <__sprint_r>
  80544c:	103c791e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  805450:	dc800e17 	ldw	r18,56(sp)
  805454:	d8c01904 	addi	r3,sp,100
  805458:	003cff06 	br	804858 <___vfprintf_internal_r+0x904>
  80545c:	d8c14c17 	ldw	r3,1328(sp)
  805460:	1880040c 	andi	r2,r3,16
  805464:	1000711e 	bne	r2,zero,80562c <___vfprintf_internal_r+0x16d8>
  805468:	d9014c17 	ldw	r4,1328(sp)
  80546c:	2080100c 	andi	r2,r4,64
  805470:	10006e26 	beq	r2,zero,80562c <___vfprintf_internal_r+0x16d8>
  805474:	3c00000b 	ldhu	r16,0(r7)
  805478:	0023883a 	mov	r17,zero
  80547c:	39c00104 	addi	r7,r7,4
  805480:	d9c14015 	stw	r7,1280(sp)
  805484:	003f0006 	br	805088 <___vfprintf_internal_r+0x1134>
  805488:	dc400d17 	ldw	r17,52(sp)
  80548c:	07002074 	movhi	fp,129
  805490:	e70e7b84 	addi	fp,fp,14830
  805494:	9425883a 	add	r18,r18,r16
  805498:	8c400044 	addi	r17,r17,1
  80549c:	008001c4 	movi	r2,7
  8054a0:	1f000015 	stw	fp,0(r3)
  8054a4:	1c000115 	stw	r16,4(r3)
  8054a8:	dc800e15 	stw	r18,56(sp)
  8054ac:	dc400d15 	stw	r17,52(sp)
  8054b0:	147d7616 	blt	r2,r17,804a8c <___vfprintf_internal_r+0xb38>
  8054b4:	18c00204 	addi	r3,r3,8
  8054b8:	003d7b06 	br	804aa8 <___vfprintf_internal_r+0xb54>
  8054bc:	dc800e17 	ldw	r18,56(sp)
  8054c0:	dc400d17 	ldw	r17,52(sp)
  8054c4:	07002074 	movhi	fp,129
  8054c8:	e70e7f84 	addi	fp,fp,14846
  8054cc:	003bc006 	br	8043d0 <___vfprintf_internal_r+0x47c>
  8054d0:	d9014f17 	ldw	r4,1340(sp)
  8054d4:	b00b883a 	mov	r5,r22
  8054d8:	d9800c04 	addi	r6,sp,48
  8054dc:	0803efc0 	call	803efc <__sprint_r>
  8054e0:	103c541e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8054e4:	dc800e17 	ldw	r18,56(sp)
  8054e8:	d8c01904 	addi	r3,sp,100
  8054ec:	003ce906 	br	804894 <___vfprintf_internal_r+0x940>
  8054f0:	3c000017 	ldw	r16,0(r7)
  8054f4:	0009883a 	mov	r4,zero
  8054f8:	39c00104 	addi	r7,r7,4
  8054fc:	0023883a 	mov	r17,zero
  805500:	d9c14015 	stw	r7,1280(sp)
  805504:	d8000405 	stb	zero,16(sp)
  805508:	003d2006 	br	80498c <___vfprintf_internal_r+0xa38>
  80550c:	38800017 	ldw	r2,0(r7)
  805510:	39c00104 	addi	r7,r7,4
  805514:	d9c14015 	stw	r7,1280(sp)
  805518:	1023d7fa 	srai	r17,r2,31
  80551c:	1021883a 	mov	r16,r2
  805520:	003d1806 	br	804984 <___vfprintf_internal_r+0xa30>
  805524:	3c000017 	ldw	r16,0(r7)
  805528:	01000044 	movi	r4,1
  80552c:	39c00104 	addi	r7,r7,4
  805530:	0023883a 	mov	r17,zero
  805534:	d9c14015 	stw	r7,1280(sp)
  805538:	d8000405 	stb	zero,16(sp)
  80553c:	003d1306 	br	80498c <___vfprintf_internal_r+0xa38>
  805540:	00802074 	movhi	r2,129
  805544:	108d7e04 	addi	r2,r2,13816
  805548:	94800044 	addi	r18,r18,1
  80554c:	8c400044 	addi	r17,r17,1
  805550:	a8800015 	stw	r2,0(r21)
  805554:	00c00044 	movi	r3,1
  805558:	008001c4 	movi	r2,7
  80555c:	a8c00115 	stw	r3,4(r21)
  805560:	dc800e15 	stw	r18,56(sp)
  805564:	dc400d15 	stw	r17,52(sp)
  805568:	1440ca16 	blt	r2,r17,805894 <___vfprintf_internal_r+0x1940>
  80556c:	a8c00204 	addi	r3,r21,8
  805570:	2000061e 	bne	r4,zero,80558c <___vfprintf_internal_r+0x1638>
  805574:	d9414717 	ldw	r5,1308(sp)
  805578:	2800041e 	bne	r5,zero,80558c <___vfprintf_internal_r+0x1638>
  80557c:	d9814c17 	ldw	r6,1328(sp)
  805580:	3080004c 	andi	r2,r6,1
  805584:	1005003a 	cmpeq	r2,r2,zero
  805588:	103bf01e 	bne	r2,zero,80454c <___vfprintf_internal_r+0x5f8>
  80558c:	00800044 	movi	r2,1
  805590:	dc400d17 	ldw	r17,52(sp)
  805594:	18800115 	stw	r2,4(r3)
  805598:	d8814917 	ldw	r2,1316(sp)
  80559c:	94800044 	addi	r18,r18,1
  8055a0:	8c400044 	addi	r17,r17,1
  8055a4:	18800015 	stw	r2,0(r3)
  8055a8:	008001c4 	movi	r2,7
  8055ac:	dc800e15 	stw	r18,56(sp)
  8055b0:	dc400d15 	stw	r17,52(sp)
  8055b4:	1440ca16 	blt	r2,r17,8058e0 <___vfprintf_internal_r+0x198c>
  8055b8:	18c00204 	addi	r3,r3,8
  8055bc:	0121c83a 	sub	r16,zero,r4
  8055c0:	0400500e 	bge	zero,r16,805704 <___vfprintf_internal_r+0x17b0>
  8055c4:	00800404 	movi	r2,16
  8055c8:	1400800e 	bge	r2,r16,8057cc <___vfprintf_internal_r+0x1878>
  8055cc:	1027883a 	mov	r19,r2
  8055d0:	07002074 	movhi	fp,129
  8055d4:	e70e7b84 	addi	fp,fp,14830
  8055d8:	050001c4 	movi	r20,7
  8055dc:	00000306 	br	8055ec <___vfprintf_internal_r+0x1698>
  8055e0:	18c00204 	addi	r3,r3,8
  8055e4:	843ffc04 	addi	r16,r16,-16
  8055e8:	9c007a0e 	bge	r19,r16,8057d4 <___vfprintf_internal_r+0x1880>
  8055ec:	94800404 	addi	r18,r18,16
  8055f0:	8c400044 	addi	r17,r17,1
  8055f4:	1f000015 	stw	fp,0(r3)
  8055f8:	1cc00115 	stw	r19,4(r3)
  8055fc:	dc800e15 	stw	r18,56(sp)
  805600:	dc400d15 	stw	r17,52(sp)
  805604:	a47ff60e 	bge	r20,r17,8055e0 <___vfprintf_internal_r+0x168c>
  805608:	d9014f17 	ldw	r4,1340(sp)
  80560c:	b00b883a 	mov	r5,r22
  805610:	d9800c04 	addi	r6,sp,48
  805614:	0803efc0 	call	803efc <__sprint_r>
  805618:	103c061e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  80561c:	dc800e17 	ldw	r18,56(sp)
  805620:	dc400d17 	ldw	r17,52(sp)
  805624:	d8c01904 	addi	r3,sp,100
  805628:	003fee06 	br	8055e4 <___vfprintf_internal_r+0x1690>
  80562c:	3c000017 	ldw	r16,0(r7)
  805630:	0023883a 	mov	r17,zero
  805634:	39c00104 	addi	r7,r7,4
  805638:	d9c14015 	stw	r7,1280(sp)
  80563c:	003e9206 	br	805088 <___vfprintf_internal_r+0x1134>
  805640:	d9401904 	addi	r5,sp,100
  805644:	dd000f04 	addi	r20,sp,60
  805648:	d9414115 	stw	r5,1284(sp)
  80564c:	d9814417 	ldw	r6,1296(sp)
  805650:	880a973a 	slli	r5,r17,28
  805654:	8004d13a 	srli	r2,r16,4
  805658:	810003cc 	andi	r4,r16,15
  80565c:	3109883a 	add	r4,r6,r4
  805660:	2884b03a 	or	r2,r5,r2
  805664:	21400003 	ldbu	r5,0(r4)
  805668:	d9014117 	ldw	r4,1284(sp)
  80566c:	8806d13a 	srli	r3,r17,4
  805670:	1021883a 	mov	r16,r2
  805674:	213fffc4 	addi	r4,r4,-1
  805678:	d9014115 	stw	r4,1284(sp)
  80567c:	d9814117 	ldw	r6,1284(sp)
  805680:	10c8b03a 	or	r4,r2,r3
  805684:	1823883a 	mov	r17,r3
  805688:	31400005 	stb	r5,0(r6)
  80568c:	203fef1e 	bne	r4,zero,80564c <___vfprintf_internal_r+0x16f8>
  805690:	003ccb06 	br	8049c0 <___vfprintf_internal_r+0xa6c>
  805694:	00800c04 	movi	r2,48
  805698:	d98018c4 	addi	r6,sp,99
  80569c:	dd000f04 	addi	r20,sp,60
  8056a0:	d88018c5 	stb	r2,99(sp)
  8056a4:	d9814115 	stw	r6,1284(sp)
  8056a8:	003cc506 	br	8049c0 <___vfprintf_internal_r+0xa6c>
  8056ac:	dc400d17 	ldw	r17,52(sp)
  8056b0:	07002074 	movhi	fp,129
  8056b4:	e70e7f84 	addi	fp,fp,14846
  8056b8:	003bc706 	br	8045d8 <___vfprintf_internal_r+0x684>
  8056bc:	d9414c17 	ldw	r5,1328(sp)
  8056c0:	2880040c 	andi	r2,r5,16
  8056c4:	10007c26 	beq	r2,zero,8058b8 <___vfprintf_internal_r+0x1964>
  8056c8:	38800017 	ldw	r2,0(r7)
  8056cc:	39c00104 	addi	r7,r7,4
  8056d0:	d9c14015 	stw	r7,1280(sp)
  8056d4:	d9814b17 	ldw	r6,1324(sp)
  8056d8:	d9c14017 	ldw	r7,1280(sp)
  8056dc:	11800015 	stw	r6,0(r2)
  8056e0:	003a7806 	br	8040c4 <___vfprintf_internal_r+0x170>
  8056e4:	d9014f17 	ldw	r4,1340(sp)
  8056e8:	b00b883a 	mov	r5,r22
  8056ec:	d9800c04 	addi	r6,sp,48
  8056f0:	0803efc0 	call	803efc <__sprint_r>
  8056f4:	103bcf1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8056f8:	dc800e17 	ldw	r18,56(sp)
  8056fc:	dc400d17 	ldw	r17,52(sp)
  805700:	d8c01904 	addi	r3,sp,100
  805704:	d9014717 	ldw	r4,1308(sp)
  805708:	d9414117 	ldw	r5,1284(sp)
  80570c:	8c400044 	addi	r17,r17,1
  805710:	9125883a 	add	r18,r18,r4
  805714:	008001c4 	movi	r2,7
  805718:	19400015 	stw	r5,0(r3)
  80571c:	19000115 	stw	r4,4(r3)
  805720:	dc800e15 	stw	r18,56(sp)
  805724:	dc400d15 	stw	r17,52(sp)
  805728:	147cee16 	blt	r2,r17,804ae4 <___vfprintf_internal_r+0xb90>
  80572c:	18c00204 	addi	r3,r3,8
  805730:	003b8606 	br	80454c <___vfprintf_internal_r+0x5f8>
  805734:	38c00017 	ldw	r3,0(r7)
  805738:	39000204 	addi	r4,r7,8
  80573c:	d9014015 	stw	r4,1280(sp)
  805740:	d8c14215 	stw	r3,1288(sp)
  805744:	39c00117 	ldw	r7,4(r7)
  805748:	d9c14315 	stw	r7,1292(sp)
  80574c:	003e2006 	br	804fd0 <___vfprintf_internal_r+0x107c>
  805750:	0005883a 	mov	r2,zero
  805754:	1409c83a 	sub	r4,r2,r16
  805758:	1105803a 	cmpltu	r2,r2,r4
  80575c:	044bc83a 	sub	r5,zero,r17
  805760:	2885c83a 	sub	r2,r5,r2
  805764:	2021883a 	mov	r16,r4
  805768:	1023883a 	mov	r17,r2
  80576c:	01000044 	movi	r4,1
  805770:	00800b44 	movi	r2,45
  805774:	d8800405 	stb	r2,16(sp)
  805778:	003c8406 	br	80498c <___vfprintf_internal_r+0xa38>
  80577c:	d9014f17 	ldw	r4,1340(sp)
  805780:	b00b883a 	mov	r5,r22
  805784:	d9800c04 	addi	r6,sp,48
  805788:	0803efc0 	call	803efc <__sprint_r>
  80578c:	103ba91e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  805790:	dc800e17 	ldw	r18,56(sp)
  805794:	dc400d17 	ldw	r17,52(sp)
  805798:	d9000517 	ldw	r4,20(sp)
  80579c:	d9401904 	addi	r5,sp,100
  8057a0:	003da706 	br	804e40 <___vfprintf_internal_r+0xeec>
  8057a4:	d9014f17 	ldw	r4,1340(sp)
  8057a8:	b00b883a 	mov	r5,r22
  8057ac:	d9800c04 	addi	r6,sp,48
  8057b0:	0803efc0 	call	803efc <__sprint_r>
  8057b4:	103b9f1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8057b8:	dc800e17 	ldw	r18,56(sp)
  8057bc:	dc400d17 	ldw	r17,52(sp)
  8057c0:	d9000517 	ldw	r4,20(sp)
  8057c4:	d8c01904 	addi	r3,sp,100
  8057c8:	003d9106 	br	804e10 <___vfprintf_internal_r+0xebc>
  8057cc:	07002074 	movhi	fp,129
  8057d0:	e70e7b84 	addi	fp,fp,14830
  8057d4:	9425883a 	add	r18,r18,r16
  8057d8:	8c400044 	addi	r17,r17,1
  8057dc:	008001c4 	movi	r2,7
  8057e0:	1f000015 	stw	fp,0(r3)
  8057e4:	1c000115 	stw	r16,4(r3)
  8057e8:	dc800e15 	stw	r18,56(sp)
  8057ec:	dc400d15 	stw	r17,52(sp)
  8057f0:	147fbc16 	blt	r2,r17,8056e4 <___vfprintf_internal_r+0x1790>
  8057f4:	18c00204 	addi	r3,r3,8
  8057f8:	003fc206 	br	805704 <___vfprintf_internal_r+0x17b0>
  8057fc:	d9014f17 	ldw	r4,1340(sp)
  805800:	b00b883a 	mov	r5,r22
  805804:	d9800c04 	addi	r6,sp,48
  805808:	0803efc0 	call	803efc <__sprint_r>
  80580c:	103b891e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  805810:	dc800e17 	ldw	r18,56(sp)
  805814:	d9000517 	ldw	r4,20(sp)
  805818:	d8c01904 	addi	r3,sp,100
  80581c:	003d0206 	br	804c28 <___vfprintf_internal_r+0xcd4>
  805820:	07002074 	movhi	fp,129
  805824:	e70e7b84 	addi	fp,fp,14830
  805828:	003be406 	br	8047bc <___vfprintf_internal_r+0x868>
  80582c:	00802074 	movhi	r2,129
  805830:	108e6b04 	addi	r2,r2,14764
  805834:	d8814115 	stw	r2,1284(sp)
  805838:	003df506 	br	805010 <___vfprintf_internal_r+0x10bc>
  80583c:	d9014217 	ldw	r4,1288(sp)
  805840:	d9414317 	ldw	r5,1292(sp)
  805844:	080a6d40 	call	80a6d4 <__isnand>
  805848:	10003926 	beq	r2,zero,805930 <___vfprintf_internal_r+0x19dc>
  80584c:	d9414d17 	ldw	r5,1332(sp)
  805850:	008011c4 	movi	r2,71
  805854:	1140ce16 	blt	r2,r5,805b90 <___vfprintf_internal_r+0x1c3c>
  805858:	01802074 	movhi	r6,129
  80585c:	318e6c04 	addi	r6,r6,14768
  805860:	d9814115 	stw	r6,1284(sp)
  805864:	003dea06 	br	805010 <___vfprintf_internal_r+0x10bc>
  805868:	d9014c17 	ldw	r4,1328(sp)
  80586c:	bdc00044 	addi	r23,r23,1
  805870:	b8c00007 	ldb	r3,0(r23)
  805874:	21000814 	ori	r4,r4,32
  805878:	d9014c15 	stw	r4,1328(sp)
  80587c:	003a3406 	br	804150 <___vfprintf_internal_r+0x1fc>
  805880:	dcc14515 	stw	r19,1300(sp)
  805884:	98011016 	blt	r19,zero,805cc8 <___vfprintf_internal_r+0x1d74>
  805888:	980f883a 	mov	r7,r19
  80588c:	d8014615 	stw	zero,1304(sp)
  805890:	003c5206 	br	8049dc <___vfprintf_internal_r+0xa88>
  805894:	d9014f17 	ldw	r4,1340(sp)
  805898:	b00b883a 	mov	r5,r22
  80589c:	d9800c04 	addi	r6,sp,48
  8058a0:	0803efc0 	call	803efc <__sprint_r>
  8058a4:	103b631e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8058a8:	dc800e17 	ldw	r18,56(sp)
  8058ac:	d9000517 	ldw	r4,20(sp)
  8058b0:	d8c01904 	addi	r3,sp,100
  8058b4:	003f2e06 	br	805570 <___vfprintf_internal_r+0x161c>
  8058b8:	d8c14c17 	ldw	r3,1328(sp)
  8058bc:	1880100c 	andi	r2,r3,64
  8058c0:	1000a026 	beq	r2,zero,805b44 <___vfprintf_internal_r+0x1bf0>
  8058c4:	38800017 	ldw	r2,0(r7)
  8058c8:	39c00104 	addi	r7,r7,4
  8058cc:	d9c14015 	stw	r7,1280(sp)
  8058d0:	d9014b17 	ldw	r4,1324(sp)
  8058d4:	d9c14017 	ldw	r7,1280(sp)
  8058d8:	1100000d 	sth	r4,0(r2)
  8058dc:	0039f906 	br	8040c4 <___vfprintf_internal_r+0x170>
  8058e0:	d9014f17 	ldw	r4,1340(sp)
  8058e4:	b00b883a 	mov	r5,r22
  8058e8:	d9800c04 	addi	r6,sp,48
  8058ec:	0803efc0 	call	803efc <__sprint_r>
  8058f0:	103b501e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  8058f4:	dc800e17 	ldw	r18,56(sp)
  8058f8:	dc400d17 	ldw	r17,52(sp)
  8058fc:	d9000517 	ldw	r4,20(sp)
  805900:	d8c01904 	addi	r3,sp,100
  805904:	003f2d06 	br	8055bc <___vfprintf_internal_r+0x1668>
  805908:	00800184 	movi	r2,6
  80590c:	14c09a36 	bltu	r2,r19,805b78 <___vfprintf_internal_r+0x1c24>
  805910:	dcc14515 	stw	r19,1300(sp)
  805914:	9800010e 	bge	r19,zero,80591c <___vfprintf_internal_r+0x19c8>
  805918:	d8014515 	stw	zero,1300(sp)
  80591c:	00802074 	movhi	r2,129
  805920:	108e6e04 	addi	r2,r2,14776
  805924:	980f883a 	mov	r7,r19
  805928:	d8814115 	stw	r2,1284(sp)
  80592c:	003a7806 	br	804310 <___vfprintf_internal_r+0x3bc>
  805930:	00bfffc4 	movi	r2,-1
  805934:	9880e226 	beq	r19,r2,805cc0 <___vfprintf_internal_r+0x1d6c>
  805938:	d9414d17 	ldw	r5,1332(sp)
  80593c:	008019c4 	movi	r2,103
  805940:	2880dc26 	beq	r5,r2,805cb4 <___vfprintf_internal_r+0x1d60>
  805944:	008011c4 	movi	r2,71
  805948:	2880da26 	beq	r5,r2,805cb4 <___vfprintf_internal_r+0x1d60>
  80594c:	d9414c17 	ldw	r5,1328(sp)
  805950:	d9014317 	ldw	r4,1292(sp)
  805954:	d9814217 	ldw	r6,1288(sp)
  805958:	29404014 	ori	r5,r5,256
  80595c:	d9414c15 	stw	r5,1328(sp)
  805960:	2000cc16 	blt	r4,zero,805c94 <___vfprintf_internal_r+0x1d40>
  805964:	3021883a 	mov	r16,r6
  805968:	2023883a 	mov	r17,r4
  80596c:	0039883a 	mov	fp,zero
  805970:	d9414d17 	ldw	r5,1332(sp)
  805974:	00801984 	movi	r2,102
  805978:	2880b726 	beq	r5,r2,805c58 <___vfprintf_internal_r+0x1d04>
  80597c:	00801184 	movi	r2,70
  805980:	2880b526 	beq	r5,r2,805c58 <___vfprintf_internal_r+0x1d04>
  805984:	00801944 	movi	r2,101
  805988:	2880c826 	beq	r5,r2,805cac <___vfprintf_internal_r+0x1d58>
  80598c:	00801144 	movi	r2,69
  805990:	2880c626 	beq	r5,r2,805cac <___vfprintf_internal_r+0x1d58>
  805994:	9829883a 	mov	r20,r19
  805998:	d9014f17 	ldw	r4,1340(sp)
  80599c:	d8800504 	addi	r2,sp,20
  8059a0:	880d883a 	mov	r6,r17
  8059a4:	d8800115 	stw	r2,4(sp)
  8059a8:	d8c00604 	addi	r3,sp,24
  8059ac:	d8800704 	addi	r2,sp,28
  8059b0:	800b883a 	mov	r5,r16
  8059b4:	01c00084 	movi	r7,2
  8059b8:	d8c00215 	stw	r3,8(sp)
  8059bc:	d8800315 	stw	r2,12(sp)
  8059c0:	dd000015 	stw	r20,0(sp)
  8059c4:	080632c0 	call	80632c <_dtoa_r>
  8059c8:	d9814d17 	ldw	r6,1332(sp)
  8059cc:	d8814115 	stw	r2,1284(sp)
  8059d0:	008019c4 	movi	r2,103
  8059d4:	30809526 	beq	r6,r2,805c2c <___vfprintf_internal_r+0x1cd8>
  8059d8:	d8c14d17 	ldw	r3,1332(sp)
  8059dc:	008011c4 	movi	r2,71
  8059e0:	18809226 	beq	r3,r2,805c2c <___vfprintf_internal_r+0x1cd8>
  8059e4:	d9414117 	ldw	r5,1284(sp)
  8059e8:	d9814d17 	ldw	r6,1332(sp)
  8059ec:	00801984 	movi	r2,102
  8059f0:	2d25883a 	add	r18,r5,r20
  8059f4:	30808626 	beq	r6,r2,805c10 <___vfprintf_internal_r+0x1cbc>
  8059f8:	00801184 	movi	r2,70
  8059fc:	30808426 	beq	r6,r2,805c10 <___vfprintf_internal_r+0x1cbc>
  805a00:	000d883a 	mov	r6,zero
  805a04:	000f883a 	mov	r7,zero
  805a08:	880b883a 	mov	r5,r17
  805a0c:	8009883a 	mov	r4,r16
  805a10:	080bcd00 	call	80bcd0 <__eqdf2>
  805a14:	1000751e 	bne	r2,zero,805bec <___vfprintf_internal_r+0x1c98>
  805a18:	9005883a 	mov	r2,r18
  805a1c:	dc800715 	stw	r18,28(sp)
  805a20:	d9014117 	ldw	r4,1284(sp)
  805a24:	d9414d17 	ldw	r5,1332(sp)
  805a28:	00c019c4 	movi	r3,103
  805a2c:	1125c83a 	sub	r18,r2,r4
  805a30:	28c06826 	beq	r5,r3,805bd4 <___vfprintf_internal_r+0x1c80>
  805a34:	008011c4 	movi	r2,71
  805a38:	28806626 	beq	r5,r2,805bd4 <___vfprintf_internal_r+0x1c80>
  805a3c:	d9000517 	ldw	r4,20(sp)
  805a40:	d8c14d17 	ldw	r3,1332(sp)
  805a44:	00801944 	movi	r2,101
  805a48:	10c05516 	blt	r2,r3,805ba0 <___vfprintf_internal_r+0x1c4c>
  805a4c:	213fffc4 	addi	r4,r4,-1
  805a50:	d9000515 	stw	r4,20(sp)
  805a54:	d8c00805 	stb	r3,32(sp)
  805a58:	2021883a 	mov	r16,r4
  805a5c:	2000c116 	blt	r4,zero,805d64 <___vfprintf_internal_r+0x1e10>
  805a60:	00800ac4 	movi	r2,43
  805a64:	d8800845 	stb	r2,33(sp)
  805a68:	00800244 	movi	r2,9
  805a6c:	1400af0e 	bge	r2,r16,805d2c <___vfprintf_internal_r+0x1dd8>
  805a70:	1027883a 	mov	r19,r2
  805a74:	dc400b84 	addi	r17,sp,46
  805a78:	8009883a 	mov	r4,r16
  805a7c:	01400284 	movi	r5,10
  805a80:	080c0c40 	call	80c0c4 <__modsi3>
  805a84:	10800c04 	addi	r2,r2,48
  805a88:	8c7fffc4 	addi	r17,r17,-1
  805a8c:	8009883a 	mov	r4,r16
  805a90:	01400284 	movi	r5,10
  805a94:	88800005 	stb	r2,0(r17)
  805a98:	080c0640 	call	80c064 <__divsi3>
  805a9c:	1021883a 	mov	r16,r2
  805aa0:	98bff516 	blt	r19,r2,805a78 <___vfprintf_internal_r+0x1b24>
  805aa4:	10c00c04 	addi	r3,r2,48
  805aa8:	d88009c4 	addi	r2,sp,39
  805aac:	108001c4 	addi	r2,r2,7
  805ab0:	897fffc4 	addi	r5,r17,-1
  805ab4:	88ffffc5 	stb	r3,-1(r17)
  805ab8:	2880a72e 	bgeu	r5,r2,805d58 <___vfprintf_internal_r+0x1e04>
  805abc:	1009883a 	mov	r4,r2
  805ac0:	d9800804 	addi	r6,sp,32
  805ac4:	d8c00884 	addi	r3,sp,34
  805ac8:	28800003 	ldbu	r2,0(r5)
  805acc:	29400044 	addi	r5,r5,1
  805ad0:	18800005 	stb	r2,0(r3)
  805ad4:	18c00044 	addi	r3,r3,1
  805ad8:	293ffb36 	bltu	r5,r4,805ac8 <___vfprintf_internal_r+0x1b74>
  805adc:	1987c83a 	sub	r3,r3,r6
  805ae0:	00800044 	movi	r2,1
  805ae4:	d8c14815 	stw	r3,1312(sp)
  805ae8:	90cf883a 	add	r7,r18,r3
  805aec:	1480960e 	bge	r2,r18,805d48 <___vfprintf_internal_r+0x1df4>
  805af0:	39c00044 	addi	r7,r7,1
  805af4:	d9c14515 	stw	r7,1300(sp)
  805af8:	38003416 	blt	r7,zero,805bcc <___vfprintf_internal_r+0x1c78>
  805afc:	e0803fcc 	andi	r2,fp,255
  805b00:	1080201c 	xori	r2,r2,128
  805b04:	10bfe004 	addi	r2,r2,-128
  805b08:	10004e26 	beq	r2,zero,805c44 <___vfprintf_internal_r+0x1cf0>
  805b0c:	00800b44 	movi	r2,45
  805b10:	dc814715 	stw	r18,1308(sp)
  805b14:	d8014615 	stw	zero,1304(sp)
  805b18:	d8800405 	stb	r2,16(sp)
  805b1c:	003bb106 	br	8049e4 <___vfprintf_internal_r+0xa90>
  805b20:	00800b44 	movi	r2,45
  805b24:	d8800405 	stb	r2,16(sp)
  805b28:	003d3306 	br	804ff8 <___vfprintf_internal_r+0x10a4>
  805b2c:	d9014f17 	ldw	r4,1340(sp)
  805b30:	b00b883a 	mov	r5,r22
  805b34:	d9800c04 	addi	r6,sp,48
  805b38:	0803efc0 	call	803efc <__sprint_r>
  805b3c:	103abd1e 	bne	r2,zero,804634 <___vfprintf_internal_r+0x6e0>
  805b40:	003abb06 	br	804630 <___vfprintf_internal_r+0x6dc>
  805b44:	38800017 	ldw	r2,0(r7)
  805b48:	39c00104 	addi	r7,r7,4
  805b4c:	d9c14015 	stw	r7,1280(sp)
  805b50:	d9414b17 	ldw	r5,1324(sp)
  805b54:	d9c14017 	ldw	r7,1280(sp)
  805b58:	11400015 	stw	r5,0(r2)
  805b5c:	00395906 	br	8040c4 <___vfprintf_internal_r+0x170>
  805b60:	980f883a 	mov	r7,r19
  805b64:	dcc14515 	stw	r19,1300(sp)
  805b68:	d8014615 	stw	zero,1304(sp)
  805b6c:	003b9b06 	br	8049dc <___vfprintf_internal_r+0xa88>
  805b70:	0027883a 	mov	r19,zero
  805b74:	00397806 	br	804158 <___vfprintf_internal_r+0x204>
  805b78:	00c02074 	movhi	r3,129
  805b7c:	18ce6e04 	addi	r3,r3,14776
  805b80:	100f883a 	mov	r7,r2
  805b84:	d8814515 	stw	r2,1300(sp)
  805b88:	d8c14115 	stw	r3,1284(sp)
  805b8c:	0039e006 	br	804310 <___vfprintf_internal_r+0x3bc>
  805b90:	00802074 	movhi	r2,129
  805b94:	108e6d04 	addi	r2,r2,14772
  805b98:	d8814115 	stw	r2,1284(sp)
  805b9c:	003d1c06 	br	805010 <___vfprintf_internal_r+0x10bc>
  805ba0:	d9414d17 	ldw	r5,1332(sp)
  805ba4:	00801984 	movi	r2,102
  805ba8:	28804926 	beq	r5,r2,805cd0 <___vfprintf_internal_r+0x1d7c>
  805bac:	200f883a 	mov	r7,r4
  805bb0:	24805716 	blt	r4,r18,805d10 <___vfprintf_internal_r+0x1dbc>
  805bb4:	d9414c17 	ldw	r5,1328(sp)
  805bb8:	2880004c 	andi	r2,r5,1
  805bbc:	10000126 	beq	r2,zero,805bc4 <___vfprintf_internal_r+0x1c70>
  805bc0:	21c00044 	addi	r7,r4,1
  805bc4:	d9c14515 	stw	r7,1300(sp)
  805bc8:	383fcc0e 	bge	r7,zero,805afc <___vfprintf_internal_r+0x1ba8>
  805bcc:	d8014515 	stw	zero,1300(sp)
  805bd0:	003fca06 	br	805afc <___vfprintf_internal_r+0x1ba8>
  805bd4:	d9000517 	ldw	r4,20(sp)
  805bd8:	00bfff04 	movi	r2,-4
  805bdc:	1100480e 	bge	r2,r4,805d00 <___vfprintf_internal_r+0x1dac>
  805be0:	99004716 	blt	r19,r4,805d00 <___vfprintf_internal_r+0x1dac>
  805be4:	d8c14d15 	stw	r3,1332(sp)
  805be8:	003ff006 	br	805bac <___vfprintf_internal_r+0x1c58>
  805bec:	d8800717 	ldw	r2,28(sp)
  805bf0:	14bf8b2e 	bgeu	r2,r18,805a20 <___vfprintf_internal_r+0x1acc>
  805bf4:	9007883a 	mov	r3,r18
  805bf8:	01000c04 	movi	r4,48
  805bfc:	11000005 	stb	r4,0(r2)
  805c00:	10800044 	addi	r2,r2,1
  805c04:	d8800715 	stw	r2,28(sp)
  805c08:	18bffc1e 	bne	r3,r2,805bfc <___vfprintf_internal_r+0x1ca8>
  805c0c:	003f8406 	br	805a20 <___vfprintf_internal_r+0x1acc>
  805c10:	d8814117 	ldw	r2,1284(sp)
  805c14:	10c00007 	ldb	r3,0(r2)
  805c18:	00800c04 	movi	r2,48
  805c1c:	18805b26 	beq	r3,r2,805d8c <___vfprintf_internal_r+0x1e38>
  805c20:	d9000517 	ldw	r4,20(sp)
  805c24:	9125883a 	add	r18,r18,r4
  805c28:	003f7506 	br	805a00 <___vfprintf_internal_r+0x1aac>
  805c2c:	d9014c17 	ldw	r4,1328(sp)
  805c30:	2080004c 	andi	r2,r4,1
  805c34:	1005003a 	cmpeq	r2,r2,zero
  805c38:	103f6a26 	beq	r2,zero,8059e4 <___vfprintf_internal_r+0x1a90>
  805c3c:	d8800717 	ldw	r2,28(sp)
  805c40:	003f7706 	br	805a20 <___vfprintf_internal_r+0x1acc>
  805c44:	d9c14515 	stw	r7,1300(sp)
  805c48:	38004d16 	blt	r7,zero,805d80 <___vfprintf_internal_r+0x1e2c>
  805c4c:	dc814715 	stw	r18,1308(sp)
  805c50:	d8014615 	stw	zero,1304(sp)
  805c54:	003b6106 	br	8049dc <___vfprintf_internal_r+0xa88>
  805c58:	d9014f17 	ldw	r4,1340(sp)
  805c5c:	d8800504 	addi	r2,sp,20
  805c60:	d8800115 	stw	r2,4(sp)
  805c64:	d8c00604 	addi	r3,sp,24
  805c68:	d8800704 	addi	r2,sp,28
  805c6c:	800b883a 	mov	r5,r16
  805c70:	880d883a 	mov	r6,r17
  805c74:	01c000c4 	movi	r7,3
  805c78:	d8c00215 	stw	r3,8(sp)
  805c7c:	d8800315 	stw	r2,12(sp)
  805c80:	dcc00015 	stw	r19,0(sp)
  805c84:	9829883a 	mov	r20,r19
  805c88:	080632c0 	call	80632c <_dtoa_r>
  805c8c:	d8814115 	stw	r2,1284(sp)
  805c90:	003f5106 	br	8059d8 <___vfprintf_internal_r+0x1a84>
  805c94:	d8c14217 	ldw	r3,1288(sp)
  805c98:	d9014317 	ldw	r4,1292(sp)
  805c9c:	07000b44 	movi	fp,45
  805ca0:	1821883a 	mov	r16,r3
  805ca4:	2460003c 	xorhi	r17,r4,32768
  805ca8:	003f3106 	br	805970 <___vfprintf_internal_r+0x1a1c>
  805cac:	9d000044 	addi	r20,r19,1
  805cb0:	003f3906 	br	805998 <___vfprintf_internal_r+0x1a44>
  805cb4:	983f251e 	bne	r19,zero,80594c <___vfprintf_internal_r+0x19f8>
  805cb8:	04c00044 	movi	r19,1
  805cbc:	003f2306 	br	80594c <___vfprintf_internal_r+0x19f8>
  805cc0:	04c00184 	movi	r19,6
  805cc4:	003f2106 	br	80594c <___vfprintf_internal_r+0x19f8>
  805cc8:	d8014515 	stw	zero,1300(sp)
  805ccc:	003eee06 	br	805888 <___vfprintf_internal_r+0x1934>
  805cd0:	200f883a 	mov	r7,r4
  805cd4:	0100370e 	bge	zero,r4,805db4 <___vfprintf_internal_r+0x1e60>
  805cd8:	9800031e 	bne	r19,zero,805ce8 <___vfprintf_internal_r+0x1d94>
  805cdc:	d9814c17 	ldw	r6,1328(sp)
  805ce0:	3080004c 	andi	r2,r6,1
  805ce4:	103fb726 	beq	r2,zero,805bc4 <___vfprintf_internal_r+0x1c70>
  805ce8:	20800044 	addi	r2,r4,1
  805cec:	98a7883a 	add	r19,r19,r2
  805cf0:	dcc14515 	stw	r19,1300(sp)
  805cf4:	980f883a 	mov	r7,r19
  805cf8:	983f800e 	bge	r19,zero,805afc <___vfprintf_internal_r+0x1ba8>
  805cfc:	003fb306 	br	805bcc <___vfprintf_internal_r+0x1c78>
  805d00:	d9814d17 	ldw	r6,1332(sp)
  805d04:	31bfff84 	addi	r6,r6,-2
  805d08:	d9814d15 	stw	r6,1332(sp)
  805d0c:	003f4c06 	br	805a40 <___vfprintf_internal_r+0x1aec>
  805d10:	0100180e 	bge	zero,r4,805d74 <___vfprintf_internal_r+0x1e20>
  805d14:	00800044 	movi	r2,1
  805d18:	1485883a 	add	r2,r2,r18
  805d1c:	d8814515 	stw	r2,1300(sp)
  805d20:	100f883a 	mov	r7,r2
  805d24:	103f750e 	bge	r2,zero,805afc <___vfprintf_internal_r+0x1ba8>
  805d28:	003fa806 	br	805bcc <___vfprintf_internal_r+0x1c78>
  805d2c:	80c00c04 	addi	r3,r16,48
  805d30:	00800c04 	movi	r2,48
  805d34:	d8c008c5 	stb	r3,35(sp)
  805d38:	d9800804 	addi	r6,sp,32
  805d3c:	d8c00904 	addi	r3,sp,36
  805d40:	d8800885 	stb	r2,34(sp)
  805d44:	003f6506 	br	805adc <___vfprintf_internal_r+0x1b88>
  805d48:	d9014c17 	ldw	r4,1328(sp)
  805d4c:	2084703a 	and	r2,r4,r2
  805d50:	103f9c26 	beq	r2,zero,805bc4 <___vfprintf_internal_r+0x1c70>
  805d54:	003f6606 	br	805af0 <___vfprintf_internal_r+0x1b9c>
  805d58:	d9800804 	addi	r6,sp,32
  805d5c:	d8c00884 	addi	r3,sp,34
  805d60:	003f5e06 	br	805adc <___vfprintf_internal_r+0x1b88>
  805d64:	00800b44 	movi	r2,45
  805d68:	0121c83a 	sub	r16,zero,r4
  805d6c:	d8800845 	stb	r2,33(sp)
  805d70:	003f3d06 	br	805a68 <___vfprintf_internal_r+0x1b14>
  805d74:	00800084 	movi	r2,2
  805d78:	1105c83a 	sub	r2,r2,r4
  805d7c:	003fe606 	br	805d18 <___vfprintf_internal_r+0x1dc4>
  805d80:	d8014515 	stw	zero,1300(sp)
  805d84:	dc814715 	stw	r18,1308(sp)
  805d88:	003fb106 	br	805c50 <___vfprintf_internal_r+0x1cfc>
  805d8c:	000d883a 	mov	r6,zero
  805d90:	000f883a 	mov	r7,zero
  805d94:	8009883a 	mov	r4,r16
  805d98:	880b883a 	mov	r5,r17
  805d9c:	080bd580 	call	80bd58 <__nedf2>
  805da0:	103f9f26 	beq	r2,zero,805c20 <___vfprintf_internal_r+0x1ccc>
  805da4:	00800044 	movi	r2,1
  805da8:	1509c83a 	sub	r4,r2,r20
  805dac:	d9000515 	stw	r4,20(sp)
  805db0:	003f9b06 	br	805c20 <___vfprintf_internal_r+0x1ccc>
  805db4:	98000d1e 	bne	r19,zero,805dec <___vfprintf_internal_r+0x1e98>
  805db8:	d8c14c17 	ldw	r3,1328(sp)
  805dbc:	1880004c 	andi	r2,r3,1
  805dc0:	10000a1e 	bne	r2,zero,805dec <___vfprintf_internal_r+0x1e98>
  805dc4:	01000044 	movi	r4,1
  805dc8:	200f883a 	mov	r7,r4
  805dcc:	d9014515 	stw	r4,1300(sp)
  805dd0:	003f4a06 	br	805afc <___vfprintf_internal_r+0x1ba8>
  805dd4:	3cc00017 	ldw	r19,0(r7)
  805dd8:	39c00104 	addi	r7,r7,4
  805ddc:	983d0e0e 	bge	r19,zero,805218 <___vfprintf_internal_r+0x12c4>
  805de0:	b8c00007 	ldb	r3,0(r23)
  805de4:	04ffffc4 	movi	r19,-1
  805de8:	0038d906 	br	804150 <___vfprintf_internal_r+0x1fc>
  805dec:	9cc00084 	addi	r19,r19,2
  805df0:	dcc14515 	stw	r19,1300(sp)
  805df4:	980f883a 	mov	r7,r19
  805df8:	983f400e 	bge	r19,zero,805afc <___vfprintf_internal_r+0x1ba8>
  805dfc:	003f7306 	br	805bcc <___vfprintf_internal_r+0x1c78>

00805e00 <__vfprintf_internal>:
  805e00:	00802074 	movhi	r2,129
  805e04:	10961004 	addi	r2,r2,22592
  805e08:	2013883a 	mov	r9,r4
  805e0c:	11000017 	ldw	r4,0(r2)
  805e10:	2805883a 	mov	r2,r5
  805e14:	300f883a 	mov	r7,r6
  805e18:	480b883a 	mov	r5,r9
  805e1c:	100d883a 	mov	r6,r2
  805e20:	0803f541 	jmpi	803f54 <___vfprintf_internal_r>

00805e24 <__swsetup_r>:
  805e24:	00802074 	movhi	r2,129
  805e28:	10961004 	addi	r2,r2,22592
  805e2c:	10c00017 	ldw	r3,0(r2)
  805e30:	defffd04 	addi	sp,sp,-12
  805e34:	dc400115 	stw	r17,4(sp)
  805e38:	dc000015 	stw	r16,0(sp)
  805e3c:	dfc00215 	stw	ra,8(sp)
  805e40:	2023883a 	mov	r17,r4
  805e44:	2821883a 	mov	r16,r5
  805e48:	18000226 	beq	r3,zero,805e54 <__swsetup_r+0x30>
  805e4c:	18800e17 	ldw	r2,56(r3)
  805e50:	10001f26 	beq	r2,zero,805ed0 <__swsetup_r+0xac>
  805e54:	8100030b 	ldhu	r4,12(r16)
  805e58:	2080020c 	andi	r2,r4,8
  805e5c:	10002826 	beq	r2,zero,805f00 <__swsetup_r+0xdc>
  805e60:	81400417 	ldw	r5,16(r16)
  805e64:	28001d26 	beq	r5,zero,805edc <__swsetup_r+0xb8>
  805e68:	2080004c 	andi	r2,r4,1
  805e6c:	1005003a 	cmpeq	r2,r2,zero
  805e70:	10000b26 	beq	r2,zero,805ea0 <__swsetup_r+0x7c>
  805e74:	2080008c 	andi	r2,r4,2
  805e78:	10001226 	beq	r2,zero,805ec4 <__swsetup_r+0xa0>
  805e7c:	0005883a 	mov	r2,zero
  805e80:	80800215 	stw	r2,8(r16)
  805e84:	28000b26 	beq	r5,zero,805eb4 <__swsetup_r+0x90>
  805e88:	0005883a 	mov	r2,zero
  805e8c:	dfc00217 	ldw	ra,8(sp)
  805e90:	dc400117 	ldw	r17,4(sp)
  805e94:	dc000017 	ldw	r16,0(sp)
  805e98:	dec00304 	addi	sp,sp,12
  805e9c:	f800283a 	ret
  805ea0:	80800517 	ldw	r2,20(r16)
  805ea4:	80000215 	stw	zero,8(r16)
  805ea8:	0085c83a 	sub	r2,zero,r2
  805eac:	80800615 	stw	r2,24(r16)
  805eb0:	283ff51e 	bne	r5,zero,805e88 <__swsetup_r+0x64>
  805eb4:	2080200c 	andi	r2,r4,128
  805eb8:	103ff326 	beq	r2,zero,805e88 <__swsetup_r+0x64>
  805ebc:	00bfffc4 	movi	r2,-1
  805ec0:	003ff206 	br	805e8c <__swsetup_r+0x68>
  805ec4:	80800517 	ldw	r2,20(r16)
  805ec8:	80800215 	stw	r2,8(r16)
  805ecc:	003fed06 	br	805e84 <__swsetup_r+0x60>
  805ed0:	1809883a 	mov	r4,r3
  805ed4:	0807b780 	call	807b78 <__sinit>
  805ed8:	003fde06 	br	805e54 <__swsetup_r+0x30>
  805edc:	20c0a00c 	andi	r3,r4,640
  805ee0:	00808004 	movi	r2,512
  805ee4:	18bfe026 	beq	r3,r2,805e68 <__swsetup_r+0x44>
  805ee8:	8809883a 	mov	r4,r17
  805eec:	800b883a 	mov	r5,r16
  805ef0:	08088f00 	call	8088f0 <__smakebuf_r>
  805ef4:	8100030b 	ldhu	r4,12(r16)
  805ef8:	81400417 	ldw	r5,16(r16)
  805efc:	003fda06 	br	805e68 <__swsetup_r+0x44>
  805f00:	2080040c 	andi	r2,r4,16
  805f04:	103fed26 	beq	r2,zero,805ebc <__swsetup_r+0x98>
  805f08:	2080010c 	andi	r2,r4,4
  805f0c:	10001226 	beq	r2,zero,805f58 <__swsetup_r+0x134>
  805f10:	81400c17 	ldw	r5,48(r16)
  805f14:	28000526 	beq	r5,zero,805f2c <__swsetup_r+0x108>
  805f18:	80801004 	addi	r2,r16,64
  805f1c:	28800226 	beq	r5,r2,805f28 <__swsetup_r+0x104>
  805f20:	8809883a 	mov	r4,r17
  805f24:	0807efc0 	call	807efc <_free_r>
  805f28:	80000c15 	stw	zero,48(r16)
  805f2c:	8080030b 	ldhu	r2,12(r16)
  805f30:	81400417 	ldw	r5,16(r16)
  805f34:	80000115 	stw	zero,4(r16)
  805f38:	10bff6cc 	andi	r2,r2,65499
  805f3c:	8080030d 	sth	r2,12(r16)
  805f40:	81400015 	stw	r5,0(r16)
  805f44:	8080030b 	ldhu	r2,12(r16)
  805f48:	10800214 	ori	r2,r2,8
  805f4c:	113fffcc 	andi	r4,r2,65535
  805f50:	8080030d 	sth	r2,12(r16)
  805f54:	003fc306 	br	805e64 <__swsetup_r+0x40>
  805f58:	81400417 	ldw	r5,16(r16)
  805f5c:	003ff906 	br	805f44 <__swsetup_r+0x120>

00805f60 <register_fini>:
  805f60:	f800283a 	ret

00805f64 <__call_exitprocs>:
  805f64:	00802074 	movhi	r2,129
  805f68:	10961104 	addi	r2,r2,22596
  805f6c:	10800017 	ldw	r2,0(r2)
  805f70:	defff304 	addi	sp,sp,-52
  805f74:	df000b15 	stw	fp,44(sp)
  805f78:	d8800115 	stw	r2,4(sp)
  805f7c:	00802034 	movhi	r2,128
  805f80:	108d1804 	addi	r2,r2,13408
  805f84:	1005003a 	cmpeq	r2,r2,zero
  805f88:	d8800215 	stw	r2,8(sp)
  805f8c:	d8800117 	ldw	r2,4(sp)
  805f90:	dd400815 	stw	r21,32(sp)
  805f94:	dd000715 	stw	r20,28(sp)
  805f98:	10805204 	addi	r2,r2,328
  805f9c:	dfc00c15 	stw	ra,48(sp)
  805fa0:	ddc00a15 	stw	r23,40(sp)
  805fa4:	dd800915 	stw	r22,36(sp)
  805fa8:	dcc00615 	stw	r19,24(sp)
  805fac:	dc800515 	stw	r18,20(sp)
  805fb0:	dc400415 	stw	r17,16(sp)
  805fb4:	dc000315 	stw	r16,12(sp)
  805fb8:	282b883a 	mov	r21,r5
  805fbc:	2039883a 	mov	fp,r4
  805fc0:	d8800015 	stw	r2,0(sp)
  805fc4:	2829003a 	cmpeq	r20,r5,zero
  805fc8:	d8800117 	ldw	r2,4(sp)
  805fcc:	14405217 	ldw	r17,328(r2)
  805fd0:	88001026 	beq	r17,zero,806014 <__call_exitprocs+0xb0>
  805fd4:	ddc00017 	ldw	r23,0(sp)
  805fd8:	88800117 	ldw	r2,4(r17)
  805fdc:	8c802204 	addi	r18,r17,136
  805fe0:	143fffc4 	addi	r16,r2,-1
  805fe4:	80000916 	blt	r16,zero,80600c <__call_exitprocs+0xa8>
  805fe8:	05bfffc4 	movi	r22,-1
  805fec:	a000151e 	bne	r20,zero,806044 <__call_exitprocs+0xe0>
  805ff0:	8409883a 	add	r4,r16,r16
  805ff4:	2105883a 	add	r2,r4,r4
  805ff8:	1485883a 	add	r2,r2,r18
  805ffc:	10c02017 	ldw	r3,128(r2)
  806000:	a8c01126 	beq	r21,r3,806048 <__call_exitprocs+0xe4>
  806004:	843fffc4 	addi	r16,r16,-1
  806008:	85bff81e 	bne	r16,r22,805fec <__call_exitprocs+0x88>
  80600c:	d8800217 	ldw	r2,8(sp)
  806010:	10003126 	beq	r2,zero,8060d8 <__call_exitprocs+0x174>
  806014:	dfc00c17 	ldw	ra,48(sp)
  806018:	df000b17 	ldw	fp,44(sp)
  80601c:	ddc00a17 	ldw	r23,40(sp)
  806020:	dd800917 	ldw	r22,36(sp)
  806024:	dd400817 	ldw	r21,32(sp)
  806028:	dd000717 	ldw	r20,28(sp)
  80602c:	dcc00617 	ldw	r19,24(sp)
  806030:	dc800517 	ldw	r18,20(sp)
  806034:	dc400417 	ldw	r17,16(sp)
  806038:	dc000317 	ldw	r16,12(sp)
  80603c:	dec00d04 	addi	sp,sp,52
  806040:	f800283a 	ret
  806044:	8409883a 	add	r4,r16,r16
  806048:	88c00117 	ldw	r3,4(r17)
  80604c:	2105883a 	add	r2,r4,r4
  806050:	1445883a 	add	r2,r2,r17
  806054:	18ffffc4 	addi	r3,r3,-1
  806058:	11800217 	ldw	r6,8(r2)
  80605c:	1c001526 	beq	r3,r16,8060b4 <__call_exitprocs+0x150>
  806060:	10000215 	stw	zero,8(r2)
  806064:	303fe726 	beq	r6,zero,806004 <__call_exitprocs+0xa0>
  806068:	00c00044 	movi	r3,1
  80606c:	1c06983a 	sll	r3,r3,r16
  806070:	90804017 	ldw	r2,256(r18)
  806074:	8cc00117 	ldw	r19,4(r17)
  806078:	1884703a 	and	r2,r3,r2
  80607c:	10001426 	beq	r2,zero,8060d0 <__call_exitprocs+0x16c>
  806080:	90804117 	ldw	r2,260(r18)
  806084:	1884703a 	and	r2,r3,r2
  806088:	10000c1e 	bne	r2,zero,8060bc <__call_exitprocs+0x158>
  80608c:	2105883a 	add	r2,r4,r4
  806090:	1485883a 	add	r2,r2,r18
  806094:	11400017 	ldw	r5,0(r2)
  806098:	e009883a 	mov	r4,fp
  80609c:	303ee83a 	callr	r6
  8060a0:	88800117 	ldw	r2,4(r17)
  8060a4:	98bfc81e 	bne	r19,r2,805fc8 <__call_exitprocs+0x64>
  8060a8:	b8800017 	ldw	r2,0(r23)
  8060ac:	147fd526 	beq	r2,r17,806004 <__call_exitprocs+0xa0>
  8060b0:	003fc506 	br	805fc8 <__call_exitprocs+0x64>
  8060b4:	8c000115 	stw	r16,4(r17)
  8060b8:	003fea06 	br	806064 <__call_exitprocs+0x100>
  8060bc:	2105883a 	add	r2,r4,r4
  8060c0:	1485883a 	add	r2,r2,r18
  8060c4:	11000017 	ldw	r4,0(r2)
  8060c8:	303ee83a 	callr	r6
  8060cc:	003ff406 	br	8060a0 <__call_exitprocs+0x13c>
  8060d0:	303ee83a 	callr	r6
  8060d4:	003ff206 	br	8060a0 <__call_exitprocs+0x13c>
  8060d8:	88800117 	ldw	r2,4(r17)
  8060dc:	1000081e 	bne	r2,zero,806100 <__call_exitprocs+0x19c>
  8060e0:	89000017 	ldw	r4,0(r17)
  8060e4:	20000726 	beq	r4,zero,806104 <__call_exitprocs+0x1a0>
  8060e8:	b9000015 	stw	r4,0(r23)
  8060ec:	8809883a 	mov	r4,r17
  8060f0:	08034600 	call	803460 <free>
  8060f4:	bc400017 	ldw	r17,0(r23)
  8060f8:	883fb71e 	bne	r17,zero,805fd8 <__call_exitprocs+0x74>
  8060fc:	003fc506 	br	806014 <__call_exitprocs+0xb0>
  806100:	89000017 	ldw	r4,0(r17)
  806104:	882f883a 	mov	r23,r17
  806108:	2023883a 	mov	r17,r4
  80610c:	883fb21e 	bne	r17,zero,805fd8 <__call_exitprocs+0x74>
  806110:	003fc006 	br	806014 <__call_exitprocs+0xb0>

00806114 <quorem>:
  806114:	28c00417 	ldw	r3,16(r5)
  806118:	20800417 	ldw	r2,16(r4)
  80611c:	defff604 	addi	sp,sp,-40
  806120:	ddc00715 	stw	r23,28(sp)
  806124:	dd400515 	stw	r21,20(sp)
  806128:	dfc00915 	stw	ra,36(sp)
  80612c:	df000815 	stw	fp,32(sp)
  806130:	dd800615 	stw	r22,24(sp)
  806134:	dd000415 	stw	r20,16(sp)
  806138:	dcc00315 	stw	r19,12(sp)
  80613c:	dc800215 	stw	r18,8(sp)
  806140:	dc400115 	stw	r17,4(sp)
  806144:	dc000015 	stw	r16,0(sp)
  806148:	202f883a 	mov	r23,r4
  80614c:	282b883a 	mov	r21,r5
  806150:	10c07416 	blt	r2,r3,806324 <quorem+0x210>
  806154:	1c7fffc4 	addi	r17,r3,-1
  806158:	8c45883a 	add	r2,r17,r17
  80615c:	1085883a 	add	r2,r2,r2
  806160:	2c000504 	addi	r16,r5,20
  806164:	24c00504 	addi	r19,r4,20
  806168:	14ed883a 	add	r22,r2,r19
  80616c:	80a5883a 	add	r18,r16,r2
  806170:	b7000017 	ldw	fp,0(r22)
  806174:	91400017 	ldw	r5,0(r18)
  806178:	e009883a 	mov	r4,fp
  80617c:	29400044 	addi	r5,r5,1
  806180:	080c1240 	call	80c124 <__udivsi3>
  806184:	1029883a 	mov	r20,r2
  806188:	10003c1e 	bne	r2,zero,80627c <quorem+0x168>
  80618c:	a80b883a 	mov	r5,r21
  806190:	b809883a 	mov	r4,r23
  806194:	0808e3c0 	call	808e3c <__mcmp>
  806198:	10002b16 	blt	r2,zero,806248 <quorem+0x134>
  80619c:	a5000044 	addi	r20,r20,1
  8061a0:	980f883a 	mov	r7,r19
  8061a4:	0011883a 	mov	r8,zero
  8061a8:	0009883a 	mov	r4,zero
  8061ac:	81400017 	ldw	r5,0(r16)
  8061b0:	38c00017 	ldw	r3,0(r7)
  8061b4:	84000104 	addi	r16,r16,4
  8061b8:	28bfffcc 	andi	r2,r5,65535
  8061bc:	2085883a 	add	r2,r4,r2
  8061c0:	11bfffcc 	andi	r6,r2,65535
  8061c4:	193fffcc 	andi	r4,r3,65535
  8061c8:	1004d43a 	srli	r2,r2,16
  8061cc:	280ad43a 	srli	r5,r5,16
  8061d0:	2189c83a 	sub	r4,r4,r6
  8061d4:	2209883a 	add	r4,r4,r8
  8061d8:	1806d43a 	srli	r3,r3,16
  8061dc:	288b883a 	add	r5,r5,r2
  8061e0:	200dd43a 	srai	r6,r4,16
  8061e4:	28bfffcc 	andi	r2,r5,65535
  8061e8:	1887c83a 	sub	r3,r3,r2
  8061ec:	1987883a 	add	r3,r3,r6
  8061f0:	3900000d 	sth	r4,0(r7)
  8061f4:	38c0008d 	sth	r3,2(r7)
  8061f8:	2808d43a 	srli	r4,r5,16
  8061fc:	39c00104 	addi	r7,r7,4
  806200:	1811d43a 	srai	r8,r3,16
  806204:	943fe92e 	bgeu	r18,r16,8061ac <quorem+0x98>
  806208:	8c45883a 	add	r2,r17,r17
  80620c:	1085883a 	add	r2,r2,r2
  806210:	9885883a 	add	r2,r19,r2
  806214:	10c00017 	ldw	r3,0(r2)
  806218:	18000b1e 	bne	r3,zero,806248 <quorem+0x134>
  80621c:	113fff04 	addi	r4,r2,-4
  806220:	9900082e 	bgeu	r19,r4,806244 <quorem+0x130>
  806224:	10bfff17 	ldw	r2,-4(r2)
  806228:	10000326 	beq	r2,zero,806238 <quorem+0x124>
  80622c:	00000506 	br	806244 <quorem+0x130>
  806230:	20800017 	ldw	r2,0(r4)
  806234:	1000031e 	bne	r2,zero,806244 <quorem+0x130>
  806238:	213fff04 	addi	r4,r4,-4
  80623c:	8c7fffc4 	addi	r17,r17,-1
  806240:	993ffb36 	bltu	r19,r4,806230 <quorem+0x11c>
  806244:	bc400415 	stw	r17,16(r23)
  806248:	a005883a 	mov	r2,r20
  80624c:	dfc00917 	ldw	ra,36(sp)
  806250:	df000817 	ldw	fp,32(sp)
  806254:	ddc00717 	ldw	r23,28(sp)
  806258:	dd800617 	ldw	r22,24(sp)
  80625c:	dd400517 	ldw	r21,20(sp)
  806260:	dd000417 	ldw	r20,16(sp)
  806264:	dcc00317 	ldw	r19,12(sp)
  806268:	dc800217 	ldw	r18,8(sp)
  80626c:	dc400117 	ldw	r17,4(sp)
  806270:	dc000017 	ldw	r16,0(sp)
  806274:	dec00a04 	addi	sp,sp,40
  806278:	f800283a 	ret
  80627c:	980f883a 	mov	r7,r19
  806280:	8011883a 	mov	r8,r16
  806284:	0013883a 	mov	r9,zero
  806288:	000d883a 	mov	r6,zero
  80628c:	40c00017 	ldw	r3,0(r8)
  806290:	39000017 	ldw	r4,0(r7)
  806294:	42000104 	addi	r8,r8,4
  806298:	18bfffcc 	andi	r2,r3,65535
  80629c:	a085383a 	mul	r2,r20,r2
  8062a0:	1806d43a 	srli	r3,r3,16
  8062a4:	217fffcc 	andi	r5,r4,65535
  8062a8:	3085883a 	add	r2,r6,r2
  8062ac:	11bfffcc 	andi	r6,r2,65535
  8062b0:	a0c7383a 	mul	r3,r20,r3
  8062b4:	1004d43a 	srli	r2,r2,16
  8062b8:	298bc83a 	sub	r5,r5,r6
  8062bc:	2a4b883a 	add	r5,r5,r9
  8062c0:	2008d43a 	srli	r4,r4,16
  8062c4:	1887883a 	add	r3,r3,r2
  8062c8:	280dd43a 	srai	r6,r5,16
  8062cc:	18bfffcc 	andi	r2,r3,65535
  8062d0:	2089c83a 	sub	r4,r4,r2
  8062d4:	2189883a 	add	r4,r4,r6
  8062d8:	3900008d 	sth	r4,2(r7)
  8062dc:	3940000d 	sth	r5,0(r7)
  8062e0:	180cd43a 	srli	r6,r3,16
  8062e4:	39c00104 	addi	r7,r7,4
  8062e8:	2013d43a 	srai	r9,r4,16
  8062ec:	923fe72e 	bgeu	r18,r8,80628c <quorem+0x178>
  8062f0:	e03fa61e 	bne	fp,zero,80618c <quorem+0x78>
  8062f4:	b0ffff04 	addi	r3,r22,-4
  8062f8:	98c0082e 	bgeu	r19,r3,80631c <quorem+0x208>
  8062fc:	b0bfff17 	ldw	r2,-4(r22)
  806300:	10000326 	beq	r2,zero,806310 <quorem+0x1fc>
  806304:	00000506 	br	80631c <quorem+0x208>
  806308:	18800017 	ldw	r2,0(r3)
  80630c:	1000031e 	bne	r2,zero,80631c <quorem+0x208>
  806310:	18ffff04 	addi	r3,r3,-4
  806314:	8c7fffc4 	addi	r17,r17,-1
  806318:	98fffb36 	bltu	r19,r3,806308 <quorem+0x1f4>
  80631c:	bc400415 	stw	r17,16(r23)
  806320:	003f9a06 	br	80618c <quorem+0x78>
  806324:	0005883a 	mov	r2,zero
  806328:	003fc806 	br	80624c <quorem+0x138>

0080632c <_dtoa_r>:
  80632c:	22001017 	ldw	r8,64(r4)
  806330:	deffda04 	addi	sp,sp,-152
  806334:	dd402115 	stw	r21,132(sp)
  806338:	dd002015 	stw	r20,128(sp)
  80633c:	dc801e15 	stw	r18,120(sp)
  806340:	dc401d15 	stw	r17,116(sp)
  806344:	dfc02515 	stw	ra,148(sp)
  806348:	df002415 	stw	fp,144(sp)
  80634c:	ddc02315 	stw	r23,140(sp)
  806350:	dd802215 	stw	r22,136(sp)
  806354:	dcc01f15 	stw	r19,124(sp)
  806358:	dc001c15 	stw	r16,112(sp)
  80635c:	d9001615 	stw	r4,88(sp)
  806360:	3023883a 	mov	r17,r6
  806364:	2829883a 	mov	r20,r5
  806368:	d9c01715 	stw	r7,92(sp)
  80636c:	dc802817 	ldw	r18,160(sp)
  806370:	302b883a 	mov	r21,r6
  806374:	40000a26 	beq	r8,zero,8063a0 <_dtoa_r+0x74>
  806378:	20801117 	ldw	r2,68(r4)
  80637c:	400b883a 	mov	r5,r8
  806380:	40800115 	stw	r2,4(r8)
  806384:	20c01117 	ldw	r3,68(r4)
  806388:	00800044 	movi	r2,1
  80638c:	10c4983a 	sll	r2,r2,r3
  806390:	40800215 	stw	r2,8(r8)
  806394:	0808ce00 	call	808ce0 <_Bfree>
  806398:	d8c01617 	ldw	r3,88(sp)
  80639c:	18001015 	stw	zero,64(r3)
  8063a0:	8800a316 	blt	r17,zero,806630 <_dtoa_r+0x304>
  8063a4:	90000015 	stw	zero,0(r18)
  8063a8:	a8dffc2c 	andhi	r3,r21,32752
  8063ac:	009ffc34 	movhi	r2,32752
  8063b0:	18809126 	beq	r3,r2,8065f8 <_dtoa_r+0x2cc>
  8063b4:	000d883a 	mov	r6,zero
  8063b8:	000f883a 	mov	r7,zero
  8063bc:	a009883a 	mov	r4,r20
  8063c0:	a80b883a 	mov	r5,r21
  8063c4:	dd001215 	stw	r20,72(sp)
  8063c8:	dd401315 	stw	r21,76(sp)
  8063cc:	080bd580 	call	80bd58 <__nedf2>
  8063d0:	1000171e 	bne	r2,zero,806430 <_dtoa_r+0x104>
  8063d4:	d9802717 	ldw	r6,156(sp)
  8063d8:	00800044 	movi	r2,1
  8063dc:	30800015 	stw	r2,0(r6)
  8063e0:	d8802917 	ldw	r2,164(sp)
  8063e4:	10029b26 	beq	r2,zero,806e54 <_dtoa_r+0xb28>
  8063e8:	d9002917 	ldw	r4,164(sp)
  8063ec:	00802074 	movhi	r2,129
  8063f0:	108d7e44 	addi	r2,r2,13817
  8063f4:	10ffffc4 	addi	r3,r2,-1
  8063f8:	20800015 	stw	r2,0(r4)
  8063fc:	1805883a 	mov	r2,r3
  806400:	dfc02517 	ldw	ra,148(sp)
  806404:	df002417 	ldw	fp,144(sp)
  806408:	ddc02317 	ldw	r23,140(sp)
  80640c:	dd802217 	ldw	r22,136(sp)
  806410:	dd402117 	ldw	r21,132(sp)
  806414:	dd002017 	ldw	r20,128(sp)
  806418:	dcc01f17 	ldw	r19,124(sp)
  80641c:	dc801e17 	ldw	r18,120(sp)
  806420:	dc401d17 	ldw	r17,116(sp)
  806424:	dc001c17 	ldw	r16,112(sp)
  806428:	dec02604 	addi	sp,sp,152
  80642c:	f800283a 	ret
  806430:	d9001617 	ldw	r4,88(sp)
  806434:	d9401217 	ldw	r5,72(sp)
  806438:	d8800104 	addi	r2,sp,4
  80643c:	a80d883a 	mov	r6,r21
  806440:	d9c00204 	addi	r7,sp,8
  806444:	d8800015 	stw	r2,0(sp)
  806448:	080931c0 	call	80931c <__d2b>
  80644c:	d8800715 	stw	r2,28(sp)
  806450:	a804d53a 	srli	r2,r21,20
  806454:	1101ffcc 	andi	r4,r2,2047
  806458:	20008626 	beq	r4,zero,806674 <_dtoa_r+0x348>
  80645c:	d8c01217 	ldw	r3,72(sp)
  806460:	00800434 	movhi	r2,16
  806464:	10bfffc4 	addi	r2,r2,-1
  806468:	ddc00117 	ldw	r23,4(sp)
  80646c:	a884703a 	and	r2,r21,r2
  806470:	1811883a 	mov	r8,r3
  806474:	124ffc34 	orhi	r9,r2,16368
  806478:	25bf0044 	addi	r22,r4,-1023
  80647c:	d8000815 	stw	zero,32(sp)
  806480:	0005883a 	mov	r2,zero
  806484:	00cffe34 	movhi	r3,16376
  806488:	480b883a 	mov	r5,r9
  80648c:	4009883a 	mov	r4,r8
  806490:	180f883a 	mov	r7,r3
  806494:	100d883a 	mov	r6,r2
  806498:	08025280 	call	802528 <__subdf3>
  80649c:	0218dbf4 	movhi	r8,25455
  8064a0:	4210d844 	addi	r8,r8,17249
  8064a4:	024ff4f4 	movhi	r9,16339
  8064a8:	4a61e9c4 	addi	r9,r9,-30809
  8064ac:	480f883a 	mov	r7,r9
  8064b0:	400d883a 	mov	r6,r8
  8064b4:	180b883a 	mov	r5,r3
  8064b8:	1009883a 	mov	r4,r2
  8064bc:	080261c0 	call	80261c <__muldf3>
  8064c0:	0222d874 	movhi	r8,35681
  8064c4:	42322cc4 	addi	r8,r8,-14157
  8064c8:	024ff1f4 	movhi	r9,16327
  8064cc:	4a628a04 	addi	r9,r9,-30168
  8064d0:	480f883a 	mov	r7,r9
  8064d4:	400d883a 	mov	r6,r8
  8064d8:	180b883a 	mov	r5,r3
  8064dc:	1009883a 	mov	r4,r2
  8064e0:	08025a80 	call	8025a8 <__adddf3>
  8064e4:	b009883a 	mov	r4,r22
  8064e8:	1021883a 	mov	r16,r2
  8064ec:	1823883a 	mov	r17,r3
  8064f0:	080bef00 	call	80bef0 <__floatsidf>
  8064f4:	021427f4 	movhi	r8,20639
  8064f8:	421e7ec4 	addi	r8,r8,31227
  8064fc:	024ff4f4 	movhi	r9,16339
  806500:	4a5104c4 	addi	r9,r9,17427
  806504:	480f883a 	mov	r7,r9
  806508:	400d883a 	mov	r6,r8
  80650c:	180b883a 	mov	r5,r3
  806510:	1009883a 	mov	r4,r2
  806514:	080261c0 	call	80261c <__muldf3>
  806518:	180f883a 	mov	r7,r3
  80651c:	880b883a 	mov	r5,r17
  806520:	100d883a 	mov	r6,r2
  806524:	8009883a 	mov	r4,r16
  806528:	08025a80 	call	8025a8 <__adddf3>
  80652c:	1009883a 	mov	r4,r2
  806530:	180b883a 	mov	r5,r3
  806534:	1021883a 	mov	r16,r2
  806538:	1823883a 	mov	r17,r3
  80653c:	0802a680 	call	802a68 <__fixdfsi>
  806540:	000d883a 	mov	r6,zero
  806544:	000f883a 	mov	r7,zero
  806548:	8009883a 	mov	r4,r16
  80654c:	880b883a 	mov	r5,r17
  806550:	d8800d15 	stw	r2,52(sp)
  806554:	080be680 	call	80be68 <__ltdf2>
  806558:	10031716 	blt	r2,zero,8071b8 <_dtoa_r+0xe8c>
  80655c:	d8c00d17 	ldw	r3,52(sp)
  806560:	00800584 	movi	r2,22
  806564:	10c1482e 	bgeu	r2,r3,806a88 <_dtoa_r+0x75c>
  806568:	01000044 	movi	r4,1
  80656c:	d9000c15 	stw	r4,48(sp)
  806570:	bd85c83a 	sub	r2,r23,r22
  806574:	11bfffc4 	addi	r6,r2,-1
  806578:	30030b16 	blt	r6,zero,8071a8 <_dtoa_r+0xe7c>
  80657c:	d9800a15 	stw	r6,40(sp)
  806580:	d8001115 	stw	zero,68(sp)
  806584:	d8c00d17 	ldw	r3,52(sp)
  806588:	1802ff16 	blt	r3,zero,807188 <_dtoa_r+0xe5c>
  80658c:	d9000a17 	ldw	r4,40(sp)
  806590:	d8c00915 	stw	r3,36(sp)
  806594:	d8001015 	stw	zero,64(sp)
  806598:	20c9883a 	add	r4,r4,r3
  80659c:	d9000a15 	stw	r4,40(sp)
  8065a0:	d9001717 	ldw	r4,92(sp)
  8065a4:	00800244 	movi	r2,9
  8065a8:	11004636 	bltu	r2,r4,8066c4 <_dtoa_r+0x398>
  8065ac:	00800144 	movi	r2,5
  8065b0:	11020416 	blt	r2,r4,806dc4 <_dtoa_r+0xa98>
  8065b4:	04400044 	movi	r17,1
  8065b8:	d8c01717 	ldw	r3,92(sp)
  8065bc:	00800144 	movi	r2,5
  8065c0:	10c1ed36 	bltu	r2,r3,806d78 <_dtoa_r+0xa4c>
  8065c4:	18c5883a 	add	r2,r3,r3
  8065c8:	1085883a 	add	r2,r2,r2
  8065cc:	00c02034 	movhi	r3,128
  8065d0:	18d97804 	addi	r3,r3,26080
  8065d4:	10c5883a 	add	r2,r2,r3
  8065d8:	11000017 	ldw	r4,0(r2)
  8065dc:	2000683a 	jmp	r4
  8065e0:	008066cc 	andi	r2,zero,411
  8065e4:	008066cc 	andi	r2,zero,411
  8065e8:	008070cc 	andi	r2,zero,451
  8065ec:	008070a4 	muli	r2,zero,450
  8065f0:	008070e8 	cmpgeui	r2,zero,451
  8065f4:	008070f4 	movhi	r2,451
  8065f8:	d9002717 	ldw	r4,156(sp)
  8065fc:	0089c3c4 	movi	r2,9999
  806600:	20800015 	stw	r2,0(r4)
  806604:	a0001026 	beq	r20,zero,806648 <_dtoa_r+0x31c>
  806608:	00c02074 	movhi	r3,129
  80660c:	18ce8704 	addi	r3,r3,14876
  806610:	d9802917 	ldw	r6,164(sp)
  806614:	303f7926 	beq	r6,zero,8063fc <_dtoa_r+0xd0>
  806618:	188000c7 	ldb	r2,3(r3)
  80661c:	190000c4 	addi	r4,r3,3
  806620:	1000101e 	bne	r2,zero,806664 <_dtoa_r+0x338>
  806624:	d8802917 	ldw	r2,164(sp)
  806628:	11000015 	stw	r4,0(r2)
  80662c:	003f7306 	br	8063fc <_dtoa_r+0xd0>
  806630:	00a00034 	movhi	r2,32768
  806634:	10bfffc4 	addi	r2,r2,-1
  806638:	00c00044 	movi	r3,1
  80663c:	88aa703a 	and	r21,r17,r2
  806640:	90c00015 	stw	r3,0(r18)
  806644:	003f5806 	br	8063a8 <_dtoa_r+0x7c>
  806648:	00800434 	movhi	r2,16
  80664c:	10bfffc4 	addi	r2,r2,-1
  806650:	a884703a 	and	r2,r21,r2
  806654:	103fec1e 	bne	r2,zero,806608 <_dtoa_r+0x2dc>
  806658:	00c02074 	movhi	r3,129
  80665c:	18ce8404 	addi	r3,r3,14864
  806660:	003feb06 	br	806610 <_dtoa_r+0x2e4>
  806664:	d8802917 	ldw	r2,164(sp)
  806668:	19000204 	addi	r4,r3,8
  80666c:	11000015 	stw	r4,0(r2)
  806670:	003f6206 	br	8063fc <_dtoa_r+0xd0>
  806674:	ddc00117 	ldw	r23,4(sp)
  806678:	d8800217 	ldw	r2,8(sp)
  80667c:	01000804 	movi	r4,32
  806680:	b8c10c84 	addi	r3,r23,1074
  806684:	18a3883a 	add	r17,r3,r2
  806688:	2441b80e 	bge	r4,r17,806d6c <_dtoa_r+0xa40>
  80668c:	00c01004 	movi	r3,64
  806690:	1c47c83a 	sub	r3,r3,r17
  806694:	88bff804 	addi	r2,r17,-32
  806698:	a8c6983a 	sll	r3,r21,r3
  80669c:	a084d83a 	srl	r2,r20,r2
  8066a0:	1888b03a 	or	r4,r3,r2
  8066a4:	0802b400 	call	802b40 <__floatunsidf>
  8066a8:	1011883a 	mov	r8,r2
  8066ac:	00bf8434 	movhi	r2,65040
  8066b0:	01000044 	movi	r4,1
  8066b4:	10d3883a 	add	r9,r2,r3
  8066b8:	8dbef344 	addi	r22,r17,-1075
  8066bc:	d9000815 	stw	r4,32(sp)
  8066c0:	003f6f06 	br	806480 <_dtoa_r+0x154>
  8066c4:	d8001715 	stw	zero,92(sp)
  8066c8:	04400044 	movi	r17,1
  8066cc:	00bfffc4 	movi	r2,-1
  8066d0:	00c00044 	movi	r3,1
  8066d4:	d8800e15 	stw	r2,56(sp)
  8066d8:	d8002615 	stw	zero,152(sp)
  8066dc:	d8800f15 	stw	r2,60(sp)
  8066e0:	d8c00b15 	stw	r3,44(sp)
  8066e4:	1021883a 	mov	r16,r2
  8066e8:	d8801617 	ldw	r2,88(sp)
  8066ec:	10001115 	stw	zero,68(r2)
  8066f0:	d8801617 	ldw	r2,88(sp)
  8066f4:	11401117 	ldw	r5,68(r2)
  8066f8:	1009883a 	mov	r4,r2
  8066fc:	08092600 	call	809260 <_Balloc>
  806700:	d8c01617 	ldw	r3,88(sp)
  806704:	d8800515 	stw	r2,20(sp)
  806708:	18801015 	stw	r2,64(r3)
  80670c:	00800384 	movi	r2,14
  806710:	14006836 	bltu	r2,r16,8068b4 <_dtoa_r+0x588>
  806714:	8805003a 	cmpeq	r2,r17,zero
  806718:	1000661e 	bne	r2,zero,8068b4 <_dtoa_r+0x588>
  80671c:	d9000d17 	ldw	r4,52(sp)
  806720:	0102300e 	bge	zero,r4,806fe4 <_dtoa_r+0xcb8>
  806724:	208003cc 	andi	r2,r4,15
  806728:	100490fa 	slli	r2,r2,3
  80672c:	2025d13a 	srai	r18,r4,4
  806730:	00c02074 	movhi	r3,129
  806734:	18ce9804 	addi	r3,r3,14944
  806738:	10c5883a 	add	r2,r2,r3
  80673c:	90c0040c 	andi	r3,r18,16
  806740:	14000017 	ldw	r16,0(r2)
  806744:	14400117 	ldw	r17,4(r2)
  806748:	18036a1e 	bne	r3,zero,8074f4 <_dtoa_r+0x11c8>
  80674c:	05800084 	movi	r22,2
  806750:	90001026 	beq	r18,zero,806794 <_dtoa_r+0x468>
  806754:	04c02074 	movhi	r19,129
  806758:	9cceca04 	addi	r19,r19,15144
  80675c:	9080004c 	andi	r2,r18,1
  806760:	1005003a 	cmpeq	r2,r2,zero
  806764:	1000081e 	bne	r2,zero,806788 <_dtoa_r+0x45c>
  806768:	99800017 	ldw	r6,0(r19)
  80676c:	99c00117 	ldw	r7,4(r19)
  806770:	880b883a 	mov	r5,r17
  806774:	8009883a 	mov	r4,r16
  806778:	080261c0 	call	80261c <__muldf3>
  80677c:	1021883a 	mov	r16,r2
  806780:	b5800044 	addi	r22,r22,1
  806784:	1823883a 	mov	r17,r3
  806788:	9025d07a 	srai	r18,r18,1
  80678c:	9cc00204 	addi	r19,r19,8
  806790:	903ff21e 	bne	r18,zero,80675c <_dtoa_r+0x430>
  806794:	a80b883a 	mov	r5,r21
  806798:	a009883a 	mov	r4,r20
  80679c:	880f883a 	mov	r7,r17
  8067a0:	800d883a 	mov	r6,r16
  8067a4:	080ba780 	call	80ba78 <__divdf3>
  8067a8:	1029883a 	mov	r20,r2
  8067ac:	182b883a 	mov	r21,r3
  8067b0:	d8c00c17 	ldw	r3,48(sp)
  8067b4:	1805003a 	cmpeq	r2,r3,zero
  8067b8:	1000081e 	bne	r2,zero,8067dc <_dtoa_r+0x4b0>
  8067bc:	0005883a 	mov	r2,zero
  8067c0:	00cffc34 	movhi	r3,16368
  8067c4:	180f883a 	mov	r7,r3
  8067c8:	a009883a 	mov	r4,r20
  8067cc:	a80b883a 	mov	r5,r21
  8067d0:	100d883a 	mov	r6,r2
  8067d4:	080be680 	call	80be68 <__ltdf2>
  8067d8:	1003fe16 	blt	r2,zero,8077d4 <_dtoa_r+0x14a8>
  8067dc:	b009883a 	mov	r4,r22
  8067e0:	080bef00 	call	80bef0 <__floatsidf>
  8067e4:	180b883a 	mov	r5,r3
  8067e8:	1009883a 	mov	r4,r2
  8067ec:	a00d883a 	mov	r6,r20
  8067f0:	a80f883a 	mov	r7,r21
  8067f4:	080261c0 	call	80261c <__muldf3>
  8067f8:	0011883a 	mov	r8,zero
  8067fc:	02500734 	movhi	r9,16412
  806800:	1009883a 	mov	r4,r2
  806804:	180b883a 	mov	r5,r3
  806808:	480f883a 	mov	r7,r9
  80680c:	400d883a 	mov	r6,r8
  806810:	08025a80 	call	8025a8 <__adddf3>
  806814:	d9000f17 	ldw	r4,60(sp)
  806818:	102d883a 	mov	r22,r2
  80681c:	00bf3034 	movhi	r2,64704
  806820:	18b9883a 	add	fp,r3,r2
  806824:	e02f883a 	mov	r23,fp
  806828:	20028f1e 	bne	r4,zero,807268 <_dtoa_r+0xf3c>
  80682c:	0005883a 	mov	r2,zero
  806830:	00d00534 	movhi	r3,16404
  806834:	a009883a 	mov	r4,r20
  806838:	a80b883a 	mov	r5,r21
  80683c:	180f883a 	mov	r7,r3
  806840:	100d883a 	mov	r6,r2
  806844:	08025280 	call	802528 <__subdf3>
  806848:	1009883a 	mov	r4,r2
  80684c:	e00f883a 	mov	r7,fp
  806850:	180b883a 	mov	r5,r3
  806854:	b00d883a 	mov	r6,r22
  806858:	1025883a 	mov	r18,r2
  80685c:	1827883a 	mov	r19,r3
  806860:	08029e00 	call	8029e0 <__gtdf2>
  806864:	00834f16 	blt	zero,r2,8075a4 <_dtoa_r+0x1278>
  806868:	e0e0003c 	xorhi	r3,fp,32768
  80686c:	9009883a 	mov	r4,r18
  806870:	980b883a 	mov	r5,r19
  806874:	180f883a 	mov	r7,r3
  806878:	b00d883a 	mov	r6,r22
  80687c:	080be680 	call	80be68 <__ltdf2>
  806880:	1000080e 	bge	r2,zero,8068a4 <_dtoa_r+0x578>
  806884:	0027883a 	mov	r19,zero
  806888:	0025883a 	mov	r18,zero
  80688c:	d8802617 	ldw	r2,152(sp)
  806890:	df000517 	ldw	fp,20(sp)
  806894:	d8000615 	stw	zero,24(sp)
  806898:	0084303a 	nor	r2,zero,r2
  80689c:	d8800d15 	stw	r2,52(sp)
  8068a0:	00019b06 	br	806f10 <_dtoa_r+0xbe4>
  8068a4:	d9801217 	ldw	r6,72(sp)
  8068a8:	d8801317 	ldw	r2,76(sp)
  8068ac:	3029883a 	mov	r20,r6
  8068b0:	102b883a 	mov	r21,r2
  8068b4:	d8c00217 	ldw	r3,8(sp)
  8068b8:	18008516 	blt	r3,zero,806ad0 <_dtoa_r+0x7a4>
  8068bc:	d9000d17 	ldw	r4,52(sp)
  8068c0:	00800384 	movi	r2,14
  8068c4:	11008216 	blt	r2,r4,806ad0 <_dtoa_r+0x7a4>
  8068c8:	200490fa 	slli	r2,r4,3
  8068cc:	d9802617 	ldw	r6,152(sp)
  8068d0:	00c02074 	movhi	r3,129
  8068d4:	18ce9804 	addi	r3,r3,14944
  8068d8:	10c5883a 	add	r2,r2,r3
  8068dc:	14800017 	ldw	r18,0(r2)
  8068e0:	14c00117 	ldw	r19,4(r2)
  8068e4:	30031e16 	blt	r6,zero,807560 <_dtoa_r+0x1234>
  8068e8:	d9000517 	ldw	r4,20(sp)
  8068ec:	d8c00f17 	ldw	r3,60(sp)
  8068f0:	a823883a 	mov	r17,r21
  8068f4:	a021883a 	mov	r16,r20
  8068f8:	192b883a 	add	r21,r3,r4
  8068fc:	2039883a 	mov	fp,r4
  806900:	00000f06 	br	806940 <_dtoa_r+0x614>
  806904:	0005883a 	mov	r2,zero
  806908:	00d00934 	movhi	r3,16420
  80690c:	5009883a 	mov	r4,r10
  806910:	580b883a 	mov	r5,r11
  806914:	180f883a 	mov	r7,r3
  806918:	100d883a 	mov	r6,r2
  80691c:	080261c0 	call	80261c <__muldf3>
  806920:	180b883a 	mov	r5,r3
  806924:	000d883a 	mov	r6,zero
  806928:	000f883a 	mov	r7,zero
  80692c:	1009883a 	mov	r4,r2
  806930:	1021883a 	mov	r16,r2
  806934:	1823883a 	mov	r17,r3
  806938:	080bd580 	call	80bd58 <__nedf2>
  80693c:	10004526 	beq	r2,zero,806a54 <_dtoa_r+0x728>
  806940:	900d883a 	mov	r6,r18
  806944:	980f883a 	mov	r7,r19
  806948:	8009883a 	mov	r4,r16
  80694c:	880b883a 	mov	r5,r17
  806950:	080ba780 	call	80ba78 <__divdf3>
  806954:	180b883a 	mov	r5,r3
  806958:	1009883a 	mov	r4,r2
  80695c:	0802a680 	call	802a68 <__fixdfsi>
  806960:	1009883a 	mov	r4,r2
  806964:	1029883a 	mov	r20,r2
  806968:	080bef00 	call	80bef0 <__floatsidf>
  80696c:	180f883a 	mov	r7,r3
  806970:	9009883a 	mov	r4,r18
  806974:	980b883a 	mov	r5,r19
  806978:	100d883a 	mov	r6,r2
  80697c:	080261c0 	call	80261c <__muldf3>
  806980:	180f883a 	mov	r7,r3
  806984:	880b883a 	mov	r5,r17
  806988:	8009883a 	mov	r4,r16
  80698c:	100d883a 	mov	r6,r2
  806990:	08025280 	call	802528 <__subdf3>
  806994:	1015883a 	mov	r10,r2
  806998:	a0800c04 	addi	r2,r20,48
  80699c:	e0800005 	stb	r2,0(fp)
  8069a0:	e7000044 	addi	fp,fp,1
  8069a4:	1817883a 	mov	r11,r3
  8069a8:	e57fd61e 	bne	fp,r21,806904 <_dtoa_r+0x5d8>
  8069ac:	500d883a 	mov	r6,r10
  8069b0:	180f883a 	mov	r7,r3
  8069b4:	5009883a 	mov	r4,r10
  8069b8:	180b883a 	mov	r5,r3
  8069bc:	08025a80 	call	8025a8 <__adddf3>
  8069c0:	100d883a 	mov	r6,r2
  8069c4:	9009883a 	mov	r4,r18
  8069c8:	980b883a 	mov	r5,r19
  8069cc:	180f883a 	mov	r7,r3
  8069d0:	1021883a 	mov	r16,r2
  8069d4:	1823883a 	mov	r17,r3
  8069d8:	080be680 	call	80be68 <__ltdf2>
  8069dc:	10000816 	blt	r2,zero,806a00 <_dtoa_r+0x6d4>
  8069e0:	980b883a 	mov	r5,r19
  8069e4:	800d883a 	mov	r6,r16
  8069e8:	880f883a 	mov	r7,r17
  8069ec:	9009883a 	mov	r4,r18
  8069f0:	080bcd00 	call	80bcd0 <__eqdf2>
  8069f4:	1000171e 	bne	r2,zero,806a54 <_dtoa_r+0x728>
  8069f8:	a080004c 	andi	r2,r20,1
  8069fc:	10001526 	beq	r2,zero,806a54 <_dtoa_r+0x728>
  806a00:	d8800d17 	ldw	r2,52(sp)
  806a04:	d8800415 	stw	r2,16(sp)
  806a08:	e009883a 	mov	r4,fp
  806a0c:	213fffc4 	addi	r4,r4,-1
  806a10:	20c00007 	ldb	r3,0(r4)
  806a14:	00800e44 	movi	r2,57
  806a18:	1880081e 	bne	r3,r2,806a3c <_dtoa_r+0x710>
  806a1c:	d8800517 	ldw	r2,20(sp)
  806a20:	113ffa1e 	bne	r2,r4,806a0c <_dtoa_r+0x6e0>
  806a24:	d8c00417 	ldw	r3,16(sp)
  806a28:	d9800517 	ldw	r6,20(sp)
  806a2c:	00800c04 	movi	r2,48
  806a30:	18c00044 	addi	r3,r3,1
  806a34:	d8c00415 	stw	r3,16(sp)
  806a38:	30800005 	stb	r2,0(r6)
  806a3c:	20800003 	ldbu	r2,0(r4)
  806a40:	d8c00417 	ldw	r3,16(sp)
  806a44:	27000044 	addi	fp,r4,1
  806a48:	10800044 	addi	r2,r2,1
  806a4c:	d8c00d15 	stw	r3,52(sp)
  806a50:	20800005 	stb	r2,0(r4)
  806a54:	d9001617 	ldw	r4,88(sp)
  806a58:	d9400717 	ldw	r5,28(sp)
  806a5c:	0808ce00 	call	808ce0 <_Bfree>
  806a60:	e0000005 	stb	zero,0(fp)
  806a64:	d9800d17 	ldw	r6,52(sp)
  806a68:	d8c02717 	ldw	r3,156(sp)
  806a6c:	d9002917 	ldw	r4,164(sp)
  806a70:	30800044 	addi	r2,r6,1
  806a74:	18800015 	stw	r2,0(r3)
  806a78:	20029c26 	beq	r4,zero,8074ec <_dtoa_r+0x11c0>
  806a7c:	d8c00517 	ldw	r3,20(sp)
  806a80:	27000015 	stw	fp,0(r4)
  806a84:	003e5d06 	br	8063fc <_dtoa_r+0xd0>
  806a88:	d9800d17 	ldw	r6,52(sp)
  806a8c:	00c02074 	movhi	r3,129
  806a90:	18ce9804 	addi	r3,r3,14944
  806a94:	d9001217 	ldw	r4,72(sp)
  806a98:	300490fa 	slli	r2,r6,3
  806a9c:	d9401317 	ldw	r5,76(sp)
  806aa0:	10c5883a 	add	r2,r2,r3
  806aa4:	12000017 	ldw	r8,0(r2)
  806aa8:	12400117 	ldw	r9,4(r2)
  806aac:	400d883a 	mov	r6,r8
  806ab0:	480f883a 	mov	r7,r9
  806ab4:	080be680 	call	80be68 <__ltdf2>
  806ab8:	1000030e 	bge	r2,zero,806ac8 <_dtoa_r+0x79c>
  806abc:	d8800d17 	ldw	r2,52(sp)
  806ac0:	10bfffc4 	addi	r2,r2,-1
  806ac4:	d8800d15 	stw	r2,52(sp)
  806ac8:	d8000c15 	stw	zero,48(sp)
  806acc:	003ea806 	br	806570 <_dtoa_r+0x244>
  806ad0:	d9000b17 	ldw	r4,44(sp)
  806ad4:	202cc03a 	cmpne	r22,r4,zero
  806ad8:	b000c71e 	bne	r22,zero,806df8 <_dtoa_r+0xacc>
  806adc:	dc001117 	ldw	r16,68(sp)
  806ae0:	dc801017 	ldw	r18,64(sp)
  806ae4:	0027883a 	mov	r19,zero
  806ae8:	04000b0e 	bge	zero,r16,806b18 <_dtoa_r+0x7ec>
  806aec:	d8c00a17 	ldw	r3,40(sp)
  806af0:	00c0090e 	bge	zero,r3,806b18 <_dtoa_r+0x7ec>
  806af4:	8005883a 	mov	r2,r16
  806af8:	1c011316 	blt	r3,r16,806f48 <_dtoa_r+0xc1c>
  806afc:	d9000a17 	ldw	r4,40(sp)
  806b00:	d9801117 	ldw	r6,68(sp)
  806b04:	80a1c83a 	sub	r16,r16,r2
  806b08:	2089c83a 	sub	r4,r4,r2
  806b0c:	308dc83a 	sub	r6,r6,r2
  806b10:	d9000a15 	stw	r4,40(sp)
  806b14:	d9801115 	stw	r6,68(sp)
  806b18:	d8801017 	ldw	r2,64(sp)
  806b1c:	0080150e 	bge	zero,r2,806b74 <_dtoa_r+0x848>
  806b20:	d8c00b17 	ldw	r3,44(sp)
  806b24:	1805003a 	cmpeq	r2,r3,zero
  806b28:	1001c91e 	bne	r2,zero,807250 <_dtoa_r+0xf24>
  806b2c:	04800e0e 	bge	zero,r18,806b68 <_dtoa_r+0x83c>
  806b30:	d9001617 	ldw	r4,88(sp)
  806b34:	980b883a 	mov	r5,r19
  806b38:	900d883a 	mov	r6,r18
  806b3c:	0809a940 	call	809a94 <__pow5mult>
  806b40:	d9001617 	ldw	r4,88(sp)
  806b44:	d9800717 	ldw	r6,28(sp)
  806b48:	100b883a 	mov	r5,r2
  806b4c:	1027883a 	mov	r19,r2
  806b50:	08097700 	call	809770 <__multiply>
  806b54:	d9001617 	ldw	r4,88(sp)
  806b58:	d9400717 	ldw	r5,28(sp)
  806b5c:	1023883a 	mov	r17,r2
  806b60:	0808ce00 	call	808ce0 <_Bfree>
  806b64:	dc400715 	stw	r17,28(sp)
  806b68:	d9001017 	ldw	r4,64(sp)
  806b6c:	248dc83a 	sub	r6,r4,r18
  806b70:	30010e1e 	bne	r6,zero,806fac <_dtoa_r+0xc80>
  806b74:	d9001617 	ldw	r4,88(sp)
  806b78:	04400044 	movi	r17,1
  806b7c:	880b883a 	mov	r5,r17
  806b80:	08099580 	call	809958 <__i2b>
  806b84:	d9800917 	ldw	r6,36(sp)
  806b88:	1025883a 	mov	r18,r2
  806b8c:	0180040e 	bge	zero,r6,806ba0 <_dtoa_r+0x874>
  806b90:	d9001617 	ldw	r4,88(sp)
  806b94:	100b883a 	mov	r5,r2
  806b98:	0809a940 	call	809a94 <__pow5mult>
  806b9c:	1025883a 	mov	r18,r2
  806ba0:	d8801717 	ldw	r2,92(sp)
  806ba4:	8880f30e 	bge	r17,r2,806f74 <_dtoa_r+0xc48>
  806ba8:	0023883a 	mov	r17,zero
  806bac:	d9800917 	ldw	r6,36(sp)
  806bb0:	30019e1e 	bne	r6,zero,80722c <_dtoa_r+0xf00>
  806bb4:	00c00044 	movi	r3,1
  806bb8:	d9000a17 	ldw	r4,40(sp)
  806bbc:	20c5883a 	add	r2,r4,r3
  806bc0:	10c007cc 	andi	r3,r2,31
  806bc4:	1800841e 	bne	r3,zero,806dd8 <_dtoa_r+0xaac>
  806bc8:	00800704 	movi	r2,28
  806bcc:	d9000a17 	ldw	r4,40(sp)
  806bd0:	d9801117 	ldw	r6,68(sp)
  806bd4:	80a1883a 	add	r16,r16,r2
  806bd8:	2089883a 	add	r4,r4,r2
  806bdc:	308d883a 	add	r6,r6,r2
  806be0:	d9000a15 	stw	r4,40(sp)
  806be4:	d9801115 	stw	r6,68(sp)
  806be8:	d8801117 	ldw	r2,68(sp)
  806bec:	0080050e 	bge	zero,r2,806c04 <_dtoa_r+0x8d8>
  806bf0:	d9400717 	ldw	r5,28(sp)
  806bf4:	d9001617 	ldw	r4,88(sp)
  806bf8:	100d883a 	mov	r6,r2
  806bfc:	08096240 	call	809624 <__lshift>
  806c00:	d8800715 	stw	r2,28(sp)
  806c04:	d8c00a17 	ldw	r3,40(sp)
  806c08:	00c0050e 	bge	zero,r3,806c20 <_dtoa_r+0x8f4>
  806c0c:	d9001617 	ldw	r4,88(sp)
  806c10:	900b883a 	mov	r5,r18
  806c14:	180d883a 	mov	r6,r3
  806c18:	08096240 	call	809624 <__lshift>
  806c1c:	1025883a 	mov	r18,r2
  806c20:	d9000c17 	ldw	r4,48(sp)
  806c24:	2005003a 	cmpeq	r2,r4,zero
  806c28:	10016f26 	beq	r2,zero,8071e8 <_dtoa_r+0xebc>
  806c2c:	d9000f17 	ldw	r4,60(sp)
  806c30:	0102170e 	bge	zero,r4,807490 <_dtoa_r+0x1164>
  806c34:	d9800b17 	ldw	r6,44(sp)
  806c38:	3005003a 	cmpeq	r2,r6,zero
  806c3c:	1000881e 	bne	r2,zero,806e60 <_dtoa_r+0xb34>
  806c40:	0400050e 	bge	zero,r16,806c58 <_dtoa_r+0x92c>
  806c44:	d9001617 	ldw	r4,88(sp)
  806c48:	980b883a 	mov	r5,r19
  806c4c:	800d883a 	mov	r6,r16
  806c50:	08096240 	call	809624 <__lshift>
  806c54:	1027883a 	mov	r19,r2
  806c58:	8804c03a 	cmpne	r2,r17,zero
  806c5c:	1002541e 	bne	r2,zero,8075b0 <_dtoa_r+0x1284>
  806c60:	980b883a 	mov	r5,r19
  806c64:	dd800517 	ldw	r22,20(sp)
  806c68:	dcc00615 	stw	r19,24(sp)
  806c6c:	a700004c 	andi	fp,r20,1
  806c70:	2827883a 	mov	r19,r5
  806c74:	d9000717 	ldw	r4,28(sp)
  806c78:	900b883a 	mov	r5,r18
  806c7c:	08061140 	call	806114 <quorem>
  806c80:	d9000717 	ldw	r4,28(sp)
  806c84:	d9400617 	ldw	r5,24(sp)
  806c88:	1023883a 	mov	r17,r2
  806c8c:	8dc00c04 	addi	r23,r17,48
  806c90:	0808e3c0 	call	808e3c <__mcmp>
  806c94:	d9001617 	ldw	r4,88(sp)
  806c98:	900b883a 	mov	r5,r18
  806c9c:	980d883a 	mov	r6,r19
  806ca0:	1029883a 	mov	r20,r2
  806ca4:	08094980 	call	809498 <__mdiff>
  806ca8:	102b883a 	mov	r21,r2
  806cac:	10800317 	ldw	r2,12(r2)
  806cb0:	1001281e 	bne	r2,zero,807154 <_dtoa_r+0xe28>
  806cb4:	d9000717 	ldw	r4,28(sp)
  806cb8:	a80b883a 	mov	r5,r21
  806cbc:	0808e3c0 	call	808e3c <__mcmp>
  806cc0:	d9001617 	ldw	r4,88(sp)
  806cc4:	1021883a 	mov	r16,r2
  806cc8:	a80b883a 	mov	r5,r21
  806ccc:	0808ce00 	call	808ce0 <_Bfree>
  806cd0:	8000041e 	bne	r16,zero,806ce4 <_dtoa_r+0x9b8>
  806cd4:	d8801717 	ldw	r2,92(sp)
  806cd8:	1000021e 	bne	r2,zero,806ce4 <_dtoa_r+0x9b8>
  806cdc:	e004c03a 	cmpne	r2,fp,zero
  806ce0:	10011726 	beq	r2,zero,807140 <_dtoa_r+0xe14>
  806ce4:	a0010616 	blt	r20,zero,807100 <_dtoa_r+0xdd4>
  806ce8:	a000041e 	bne	r20,zero,806cfc <_dtoa_r+0x9d0>
  806cec:	d8c01717 	ldw	r3,92(sp)
  806cf0:	1800021e 	bne	r3,zero,806cfc <_dtoa_r+0x9d0>
  806cf4:	e004c03a 	cmpne	r2,fp,zero
  806cf8:	10010126 	beq	r2,zero,807100 <_dtoa_r+0xdd4>
  806cfc:	04023d16 	blt	zero,r16,8075f4 <_dtoa_r+0x12c8>
  806d00:	b5c00005 	stb	r23,0(r22)
  806d04:	d9800517 	ldw	r6,20(sp)
  806d08:	d9000f17 	ldw	r4,60(sp)
  806d0c:	b5800044 	addi	r22,r22,1
  806d10:	3105883a 	add	r2,r6,r4
  806d14:	b0806526 	beq	r22,r2,806eac <_dtoa_r+0xb80>
  806d18:	d9400717 	ldw	r5,28(sp)
  806d1c:	d9001617 	ldw	r4,88(sp)
  806d20:	01800284 	movi	r6,10
  806d24:	000f883a 	mov	r7,zero
  806d28:	08099940 	call	809994 <__multadd>
  806d2c:	d8800715 	stw	r2,28(sp)
  806d30:	d8800617 	ldw	r2,24(sp)
  806d34:	14c10c26 	beq	r2,r19,807168 <_dtoa_r+0xe3c>
  806d38:	d9400617 	ldw	r5,24(sp)
  806d3c:	d9001617 	ldw	r4,88(sp)
  806d40:	01800284 	movi	r6,10
  806d44:	000f883a 	mov	r7,zero
  806d48:	08099940 	call	809994 <__multadd>
  806d4c:	d9001617 	ldw	r4,88(sp)
  806d50:	980b883a 	mov	r5,r19
  806d54:	01800284 	movi	r6,10
  806d58:	000f883a 	mov	r7,zero
  806d5c:	d8800615 	stw	r2,24(sp)
  806d60:	08099940 	call	809994 <__multadd>
  806d64:	1027883a 	mov	r19,r2
  806d68:	003fc206 	br	806c74 <_dtoa_r+0x948>
  806d6c:	2445c83a 	sub	r2,r4,r17
  806d70:	a088983a 	sll	r4,r20,r2
  806d74:	003e4b06 	br	8066a4 <_dtoa_r+0x378>
  806d78:	01bfffc4 	movi	r6,-1
  806d7c:	00800044 	movi	r2,1
  806d80:	d9800e15 	stw	r6,56(sp)
  806d84:	d9800f15 	stw	r6,60(sp)
  806d88:	d8800b15 	stw	r2,44(sp)
  806d8c:	d8c01617 	ldw	r3,88(sp)
  806d90:	008005c4 	movi	r2,23
  806d94:	18001115 	stw	zero,68(r3)
  806d98:	1580082e 	bgeu	r2,r22,806dbc <_dtoa_r+0xa90>
  806d9c:	00c00104 	movi	r3,4
  806da0:	0009883a 	mov	r4,zero
  806da4:	18c7883a 	add	r3,r3,r3
  806da8:	18800504 	addi	r2,r3,20
  806dac:	21000044 	addi	r4,r4,1
  806db0:	b0bffc2e 	bgeu	r22,r2,806da4 <_dtoa_r+0xa78>
  806db4:	d9801617 	ldw	r6,88(sp)
  806db8:	31001115 	stw	r4,68(r6)
  806dbc:	dc000f17 	ldw	r16,60(sp)
  806dc0:	003e4b06 	br	8066f0 <_dtoa_r+0x3c4>
  806dc4:	d9801717 	ldw	r6,92(sp)
  806dc8:	0023883a 	mov	r17,zero
  806dcc:	31bfff04 	addi	r6,r6,-4
  806dd0:	d9801715 	stw	r6,92(sp)
  806dd4:	003df806 	br	8065b8 <_dtoa_r+0x28c>
  806dd8:	00800804 	movi	r2,32
  806ddc:	10c9c83a 	sub	r4,r2,r3
  806de0:	00c00104 	movi	r3,4
  806de4:	19005a16 	blt	r3,r4,806f50 <_dtoa_r+0xc24>
  806de8:	008000c4 	movi	r2,3
  806dec:	113f7e16 	blt	r2,r4,806be8 <_dtoa_r+0x8bc>
  806df0:	20800704 	addi	r2,r4,28
  806df4:	003f7506 	br	806bcc <_dtoa_r+0x8a0>
  806df8:	d9801717 	ldw	r6,92(sp)
  806dfc:	00800044 	movi	r2,1
  806e00:	1180a10e 	bge	r2,r6,807088 <_dtoa_r+0xd5c>
  806e04:	d9800f17 	ldw	r6,60(sp)
  806e08:	d8c01017 	ldw	r3,64(sp)
  806e0c:	30bfffc4 	addi	r2,r6,-1
  806e10:	1881c616 	blt	r3,r2,80752c <_dtoa_r+0x1200>
  806e14:	18a5c83a 	sub	r18,r3,r2
  806e18:	d8800f17 	ldw	r2,60(sp)
  806e1c:	10026216 	blt	r2,zero,8077a8 <_dtoa_r+0x147c>
  806e20:	dc001117 	ldw	r16,68(sp)
  806e24:	1007883a 	mov	r3,r2
  806e28:	d9800a17 	ldw	r6,40(sp)
  806e2c:	d8801117 	ldw	r2,68(sp)
  806e30:	d9001617 	ldw	r4,88(sp)
  806e34:	30cd883a 	add	r6,r6,r3
  806e38:	10c5883a 	add	r2,r2,r3
  806e3c:	01400044 	movi	r5,1
  806e40:	d9800a15 	stw	r6,40(sp)
  806e44:	d8801115 	stw	r2,68(sp)
  806e48:	08099580 	call	809958 <__i2b>
  806e4c:	1027883a 	mov	r19,r2
  806e50:	003f2506 	br	806ae8 <_dtoa_r+0x7bc>
  806e54:	00c02074 	movhi	r3,129
  806e58:	18cd7e04 	addi	r3,r3,13816
  806e5c:	003d6706 	br	8063fc <_dtoa_r+0xd0>
  806e60:	dd800517 	ldw	r22,20(sp)
  806e64:	04000044 	movi	r16,1
  806e68:	00000706 	br	806e88 <_dtoa_r+0xb5c>
  806e6c:	d9400717 	ldw	r5,28(sp)
  806e70:	d9001617 	ldw	r4,88(sp)
  806e74:	01800284 	movi	r6,10
  806e78:	000f883a 	mov	r7,zero
  806e7c:	08099940 	call	809994 <__multadd>
  806e80:	d8800715 	stw	r2,28(sp)
  806e84:	84000044 	addi	r16,r16,1
  806e88:	d9000717 	ldw	r4,28(sp)
  806e8c:	900b883a 	mov	r5,r18
  806e90:	08061140 	call	806114 <quorem>
  806e94:	15c00c04 	addi	r23,r2,48
  806e98:	b5c00005 	stb	r23,0(r22)
  806e9c:	d8c00f17 	ldw	r3,60(sp)
  806ea0:	b5800044 	addi	r22,r22,1
  806ea4:	80fff116 	blt	r16,r3,806e6c <_dtoa_r+0xb40>
  806ea8:	d8000615 	stw	zero,24(sp)
  806eac:	d9400717 	ldw	r5,28(sp)
  806eb0:	d9001617 	ldw	r4,88(sp)
  806eb4:	01800044 	movi	r6,1
  806eb8:	08096240 	call	809624 <__lshift>
  806ebc:	1009883a 	mov	r4,r2
  806ec0:	900b883a 	mov	r5,r18
  806ec4:	d8800715 	stw	r2,28(sp)
  806ec8:	0808e3c0 	call	808e3c <__mcmp>
  806ecc:	00803c0e 	bge	zero,r2,806fc0 <_dtoa_r+0xc94>
  806ed0:	b009883a 	mov	r4,r22
  806ed4:	213fffc4 	addi	r4,r4,-1
  806ed8:	21400003 	ldbu	r5,0(r4)
  806edc:	00800e44 	movi	r2,57
  806ee0:	28c03fcc 	andi	r3,r5,255
  806ee4:	18c0201c 	xori	r3,r3,128
  806ee8:	18ffe004 	addi	r3,r3,-128
  806eec:	1881981e 	bne	r3,r2,807550 <_dtoa_r+0x1224>
  806ef0:	d9800517 	ldw	r6,20(sp)
  806ef4:	21bff71e 	bne	r4,r6,806ed4 <_dtoa_r+0xba8>
  806ef8:	d8800d17 	ldw	r2,52(sp)
  806efc:	37000044 	addi	fp,r6,1
  806f00:	10800044 	addi	r2,r2,1
  806f04:	d8800d15 	stw	r2,52(sp)
  806f08:	00800c44 	movi	r2,49
  806f0c:	30800005 	stb	r2,0(r6)
  806f10:	d9001617 	ldw	r4,88(sp)
  806f14:	900b883a 	mov	r5,r18
  806f18:	0808ce00 	call	808ce0 <_Bfree>
  806f1c:	983ecd26 	beq	r19,zero,806a54 <_dtoa_r+0x728>
  806f20:	d8c00617 	ldw	r3,24(sp)
  806f24:	18000426 	beq	r3,zero,806f38 <_dtoa_r+0xc0c>
  806f28:	1cc00326 	beq	r3,r19,806f38 <_dtoa_r+0xc0c>
  806f2c:	d9001617 	ldw	r4,88(sp)
  806f30:	180b883a 	mov	r5,r3
  806f34:	0808ce00 	call	808ce0 <_Bfree>
  806f38:	d9001617 	ldw	r4,88(sp)
  806f3c:	980b883a 	mov	r5,r19
  806f40:	0808ce00 	call	808ce0 <_Bfree>
  806f44:	003ec306 	br	806a54 <_dtoa_r+0x728>
  806f48:	1805883a 	mov	r2,r3
  806f4c:	003eeb06 	br	806afc <_dtoa_r+0x7d0>
  806f50:	d9800a17 	ldw	r6,40(sp)
  806f54:	d8c01117 	ldw	r3,68(sp)
  806f58:	20bfff04 	addi	r2,r4,-4
  806f5c:	308d883a 	add	r6,r6,r2
  806f60:	1887883a 	add	r3,r3,r2
  806f64:	80a1883a 	add	r16,r16,r2
  806f68:	d9800a15 	stw	r6,40(sp)
  806f6c:	d8c01115 	stw	r3,68(sp)
  806f70:	003f1d06 	br	806be8 <_dtoa_r+0x8bc>
  806f74:	a03f0c1e 	bne	r20,zero,806ba8 <_dtoa_r+0x87c>
  806f78:	00800434 	movhi	r2,16
  806f7c:	10bfffc4 	addi	r2,r2,-1
  806f80:	a884703a 	and	r2,r21,r2
  806f84:	103f081e 	bne	r2,zero,806ba8 <_dtoa_r+0x87c>
  806f88:	a89ffc2c 	andhi	r2,r21,32752
  806f8c:	103f0626 	beq	r2,zero,806ba8 <_dtoa_r+0x87c>
  806f90:	d8c01117 	ldw	r3,68(sp)
  806f94:	d9000a17 	ldw	r4,40(sp)
  806f98:	18c00044 	addi	r3,r3,1
  806f9c:	21000044 	addi	r4,r4,1
  806fa0:	d8c01115 	stw	r3,68(sp)
  806fa4:	d9000a15 	stw	r4,40(sp)
  806fa8:	003f0006 	br	806bac <_dtoa_r+0x880>
  806fac:	d9400717 	ldw	r5,28(sp)
  806fb0:	d9001617 	ldw	r4,88(sp)
  806fb4:	0809a940 	call	809a94 <__pow5mult>
  806fb8:	d8800715 	stw	r2,28(sp)
  806fbc:	003eed06 	br	806b74 <_dtoa_r+0x848>
  806fc0:	1000021e 	bne	r2,zero,806fcc <_dtoa_r+0xca0>
  806fc4:	b880004c 	andi	r2,r23,1
  806fc8:	103fc11e 	bne	r2,zero,806ed0 <_dtoa_r+0xba4>
  806fcc:	b5bfffc4 	addi	r22,r22,-1
  806fd0:	b0c00007 	ldb	r3,0(r22)
  806fd4:	00800c04 	movi	r2,48
  806fd8:	18bffc26 	beq	r3,r2,806fcc <_dtoa_r+0xca0>
  806fdc:	b7000044 	addi	fp,r22,1
  806fe0:	003fcb06 	br	806f10 <_dtoa_r+0xbe4>
  806fe4:	d9800d17 	ldw	r6,52(sp)
  806fe8:	018fc83a 	sub	r7,zero,r6
  806fec:	3801f726 	beq	r7,zero,8077cc <_dtoa_r+0x14a0>
  806ff0:	398003cc 	andi	r6,r7,15
  806ff4:	300c90fa 	slli	r6,r6,3
  806ff8:	01402074 	movhi	r5,129
  806ffc:	294e9804 	addi	r5,r5,14944
  807000:	d9001217 	ldw	r4,72(sp)
  807004:	314d883a 	add	r6,r6,r5
  807008:	30c00117 	ldw	r3,4(r6)
  80700c:	30800017 	ldw	r2,0(r6)
  807010:	d9401317 	ldw	r5,76(sp)
  807014:	3821d13a 	srai	r16,r7,4
  807018:	100d883a 	mov	r6,r2
  80701c:	180f883a 	mov	r7,r3
  807020:	080261c0 	call	80261c <__muldf3>
  807024:	1011883a 	mov	r8,r2
  807028:	1813883a 	mov	r9,r3
  80702c:	1029883a 	mov	r20,r2
  807030:	182b883a 	mov	r21,r3
  807034:	8001e526 	beq	r16,zero,8077cc <_dtoa_r+0x14a0>
  807038:	05800084 	movi	r22,2
  80703c:	04402074 	movhi	r17,129
  807040:	8c4eca04 	addi	r17,r17,15144
  807044:	8080004c 	andi	r2,r16,1
  807048:	1005003a 	cmpeq	r2,r2,zero
  80704c:	1000081e 	bne	r2,zero,807070 <_dtoa_r+0xd44>
  807050:	89800017 	ldw	r6,0(r17)
  807054:	89c00117 	ldw	r7,4(r17)
  807058:	480b883a 	mov	r5,r9
  80705c:	4009883a 	mov	r4,r8
  807060:	080261c0 	call	80261c <__muldf3>
  807064:	1011883a 	mov	r8,r2
  807068:	b5800044 	addi	r22,r22,1
  80706c:	1813883a 	mov	r9,r3
  807070:	8021d07a 	srai	r16,r16,1
  807074:	8c400204 	addi	r17,r17,8
  807078:	803ff21e 	bne	r16,zero,807044 <_dtoa_r+0xd18>
  80707c:	4029883a 	mov	r20,r8
  807080:	482b883a 	mov	r21,r9
  807084:	003dca06 	br	8067b0 <_dtoa_r+0x484>
  807088:	d9000817 	ldw	r4,32(sp)
  80708c:	2005003a 	cmpeq	r2,r4,zero
  807090:	1001f61e 	bne	r2,zero,80786c <_dtoa_r+0x1540>
  807094:	dc001117 	ldw	r16,68(sp)
  807098:	dc801017 	ldw	r18,64(sp)
  80709c:	18c10cc4 	addi	r3,r3,1075
  8070a0:	003f6106 	br	806e28 <_dtoa_r+0xafc>
  8070a4:	d8000b15 	stw	zero,44(sp)
  8070a8:	d9802617 	ldw	r6,152(sp)
  8070ac:	d8c00d17 	ldw	r3,52(sp)
  8070b0:	30800044 	addi	r2,r6,1
  8070b4:	18ad883a 	add	r22,r3,r2
  8070b8:	b13fffc4 	addi	r4,r22,-1
  8070bc:	d9000e15 	stw	r4,56(sp)
  8070c0:	0581f60e 	bge	zero,r22,80789c <_dtoa_r+0x1570>
  8070c4:	dd800f15 	stw	r22,60(sp)
  8070c8:	003f3006 	br	806d8c <_dtoa_r+0xa60>
  8070cc:	d8000b15 	stw	zero,44(sp)
  8070d0:	d9002617 	ldw	r4,152(sp)
  8070d4:	0101eb0e 	bge	zero,r4,807884 <_dtoa_r+0x1558>
  8070d8:	202d883a 	mov	r22,r4
  8070dc:	d9000e15 	stw	r4,56(sp)
  8070e0:	d9000f15 	stw	r4,60(sp)
  8070e4:	003f2906 	br	806d8c <_dtoa_r+0xa60>
  8070e8:	01800044 	movi	r6,1
  8070ec:	d9800b15 	stw	r6,44(sp)
  8070f0:	003ff706 	br	8070d0 <_dtoa_r+0xda4>
  8070f4:	01000044 	movi	r4,1
  8070f8:	d9000b15 	stw	r4,44(sp)
  8070fc:	003fea06 	br	8070a8 <_dtoa_r+0xd7c>
  807100:	04000c0e 	bge	zero,r16,807134 <_dtoa_r+0xe08>
  807104:	d9400717 	ldw	r5,28(sp)
  807108:	d9001617 	ldw	r4,88(sp)
  80710c:	01800044 	movi	r6,1
  807110:	08096240 	call	809624 <__lshift>
  807114:	1009883a 	mov	r4,r2
  807118:	900b883a 	mov	r5,r18
  80711c:	d8800715 	stw	r2,28(sp)
  807120:	0808e3c0 	call	808e3c <__mcmp>
  807124:	0081e00e 	bge	zero,r2,8078a8 <_dtoa_r+0x157c>
  807128:	bdc00044 	addi	r23,r23,1
  80712c:	00800e84 	movi	r2,58
  807130:	b881a226 	beq	r23,r2,8077bc <_dtoa_r+0x1490>
  807134:	b7000044 	addi	fp,r22,1
  807138:	b5c00005 	stb	r23,0(r22)
  80713c:	003f7406 	br	806f10 <_dtoa_r+0xbe4>
  807140:	00800e44 	movi	r2,57
  807144:	b8819d26 	beq	r23,r2,8077bc <_dtoa_r+0x1490>
  807148:	053ffa0e 	bge	zero,r20,807134 <_dtoa_r+0xe08>
  80714c:	8dc00c44 	addi	r23,r17,49
  807150:	003ff806 	br	807134 <_dtoa_r+0xe08>
  807154:	d9001617 	ldw	r4,88(sp)
  807158:	a80b883a 	mov	r5,r21
  80715c:	04000044 	movi	r16,1
  807160:	0808ce00 	call	808ce0 <_Bfree>
  807164:	003edf06 	br	806ce4 <_dtoa_r+0x9b8>
  807168:	d9001617 	ldw	r4,88(sp)
  80716c:	980b883a 	mov	r5,r19
  807170:	01800284 	movi	r6,10
  807174:	000f883a 	mov	r7,zero
  807178:	08099940 	call	809994 <__multadd>
  80717c:	1027883a 	mov	r19,r2
  807180:	d8800615 	stw	r2,24(sp)
  807184:	003ebb06 	br	806c74 <_dtoa_r+0x948>
  807188:	d9801117 	ldw	r6,68(sp)
  80718c:	d8800d17 	ldw	r2,52(sp)
  807190:	d8000915 	stw	zero,36(sp)
  807194:	308dc83a 	sub	r6,r6,r2
  807198:	0087c83a 	sub	r3,zero,r2
  80719c:	d9801115 	stw	r6,68(sp)
  8071a0:	d8c01015 	stw	r3,64(sp)
  8071a4:	003cfe06 	br	8065a0 <_dtoa_r+0x274>
  8071a8:	018dc83a 	sub	r6,zero,r6
  8071ac:	d9801115 	stw	r6,68(sp)
  8071b0:	d8000a15 	stw	zero,40(sp)
  8071b4:	003cf306 	br	806584 <_dtoa_r+0x258>
  8071b8:	d9000d17 	ldw	r4,52(sp)
  8071bc:	080bef00 	call	80bef0 <__floatsidf>
  8071c0:	880b883a 	mov	r5,r17
  8071c4:	8009883a 	mov	r4,r16
  8071c8:	180f883a 	mov	r7,r3
  8071cc:	100d883a 	mov	r6,r2
  8071d0:	080bd580 	call	80bd58 <__nedf2>
  8071d4:	103ce126 	beq	r2,zero,80655c <_dtoa_r+0x230>
  8071d8:	d9800d17 	ldw	r6,52(sp)
  8071dc:	31bfffc4 	addi	r6,r6,-1
  8071e0:	d9800d15 	stw	r6,52(sp)
  8071e4:	003cdd06 	br	80655c <_dtoa_r+0x230>
  8071e8:	d9000717 	ldw	r4,28(sp)
  8071ec:	900b883a 	mov	r5,r18
  8071f0:	0808e3c0 	call	808e3c <__mcmp>
  8071f4:	103e8d0e 	bge	r2,zero,806c2c <_dtoa_r+0x900>
  8071f8:	d9400717 	ldw	r5,28(sp)
  8071fc:	d9001617 	ldw	r4,88(sp)
  807200:	01800284 	movi	r6,10
  807204:	000f883a 	mov	r7,zero
  807208:	08099940 	call	809994 <__multadd>
  80720c:	d9800d17 	ldw	r6,52(sp)
  807210:	d8800715 	stw	r2,28(sp)
  807214:	31bfffc4 	addi	r6,r6,-1
  807218:	d9800d15 	stw	r6,52(sp)
  80721c:	b001a71e 	bne	r22,zero,8078bc <_dtoa_r+0x1590>
  807220:	d8800e17 	ldw	r2,56(sp)
  807224:	d8800f15 	stw	r2,60(sp)
  807228:	003e8006 	br	806c2c <_dtoa_r+0x900>
  80722c:	90800417 	ldw	r2,16(r18)
  807230:	1085883a 	add	r2,r2,r2
  807234:	1085883a 	add	r2,r2,r2
  807238:	1485883a 	add	r2,r2,r18
  80723c:	11000417 	ldw	r4,16(r2)
  807240:	0808d080 	call	808d08 <__hi0bits>
  807244:	00c00804 	movi	r3,32
  807248:	1887c83a 	sub	r3,r3,r2
  80724c:	003e5a06 	br	806bb8 <_dtoa_r+0x88c>
  807250:	d9400717 	ldw	r5,28(sp)
  807254:	d9801017 	ldw	r6,64(sp)
  807258:	d9001617 	ldw	r4,88(sp)
  80725c:	0809a940 	call	809a94 <__pow5mult>
  807260:	d8800715 	stw	r2,28(sp)
  807264:	003e4306 	br	806b74 <_dtoa_r+0x848>
  807268:	d9800f17 	ldw	r6,60(sp)
  80726c:	d8800d17 	ldw	r2,52(sp)
  807270:	d9800315 	stw	r6,12(sp)
  807274:	d8800415 	stw	r2,16(sp)
  807278:	d8c00b17 	ldw	r3,44(sp)
  80727c:	1805003a 	cmpeq	r2,r3,zero
  807280:	1000e21e 	bne	r2,zero,80760c <_dtoa_r+0x12e0>
  807284:	d9000317 	ldw	r4,12(sp)
  807288:	0005883a 	mov	r2,zero
  80728c:	00cff834 	movhi	r3,16352
  807290:	200c90fa 	slli	r6,r4,3
  807294:	01002074 	movhi	r4,129
  807298:	210e9804 	addi	r4,r4,14944
  80729c:	180b883a 	mov	r5,r3
  8072a0:	310d883a 	add	r6,r6,r4
  8072a4:	327fff17 	ldw	r9,-4(r6)
  8072a8:	323ffe17 	ldw	r8,-8(r6)
  8072ac:	1009883a 	mov	r4,r2
  8072b0:	480f883a 	mov	r7,r9
  8072b4:	400d883a 	mov	r6,r8
  8072b8:	080ba780 	call	80ba78 <__divdf3>
  8072bc:	180b883a 	mov	r5,r3
  8072c0:	b00d883a 	mov	r6,r22
  8072c4:	b80f883a 	mov	r7,r23
  8072c8:	1009883a 	mov	r4,r2
  8072cc:	08025280 	call	802528 <__subdf3>
  8072d0:	a80b883a 	mov	r5,r21
  8072d4:	a009883a 	mov	r4,r20
  8072d8:	d8c01915 	stw	r3,100(sp)
  8072dc:	d8801815 	stw	r2,96(sp)
  8072e0:	0802a680 	call	802a68 <__fixdfsi>
  8072e4:	1009883a 	mov	r4,r2
  8072e8:	1027883a 	mov	r19,r2
  8072ec:	080bef00 	call	80bef0 <__floatsidf>
  8072f0:	a80b883a 	mov	r5,r21
  8072f4:	a009883a 	mov	r4,r20
  8072f8:	180f883a 	mov	r7,r3
  8072fc:	100d883a 	mov	r6,r2
  807300:	08025280 	call	802528 <__subdf3>
  807304:	d9801817 	ldw	r6,96(sp)
  807308:	1823883a 	mov	r17,r3
  80730c:	d8801415 	stw	r2,80(sp)
  807310:	302d883a 	mov	r22,r6
  807314:	d9800517 	ldw	r6,20(sp)
  807318:	9cc00c04 	addi	r19,r19,48
  80731c:	dc401515 	stw	r17,84(sp)
  807320:	d8c01917 	ldw	r3,100(sp)
  807324:	34c00005 	stb	r19,0(r6)
  807328:	d8800517 	ldw	r2,20(sp)
  80732c:	d9401917 	ldw	r5,100(sp)
  807330:	d9801417 	ldw	r6,80(sp)
  807334:	b009883a 	mov	r4,r22
  807338:	880f883a 	mov	r7,r17
  80733c:	182f883a 	mov	r23,r3
  807340:	17000044 	addi	fp,r2,1
  807344:	08029e00 	call	8029e0 <__gtdf2>
  807348:	00804e16 	blt	zero,r2,807484 <_dtoa_r+0x1158>
  80734c:	d9801417 	ldw	r6,80(sp)
  807350:	0005883a 	mov	r2,zero
  807354:	00cffc34 	movhi	r3,16368
  807358:	180b883a 	mov	r5,r3
  80735c:	880f883a 	mov	r7,r17
  807360:	1009883a 	mov	r4,r2
  807364:	08025280 	call	802528 <__subdf3>
  807368:	d9401917 	ldw	r5,100(sp)
  80736c:	180f883a 	mov	r7,r3
  807370:	b009883a 	mov	r4,r22
  807374:	100d883a 	mov	r6,r2
  807378:	08029e00 	call	8029e0 <__gtdf2>
  80737c:	00bda216 	blt	zero,r2,806a08 <_dtoa_r+0x6dc>
  807380:	d8c00317 	ldw	r3,12(sp)
  807384:	00800044 	movi	r2,1
  807388:	10c01216 	blt	r2,r3,8073d4 <_dtoa_r+0x10a8>
  80738c:	003d4506 	br	8068a4 <_dtoa_r+0x578>
  807390:	d9801417 	ldw	r6,80(sp)
  807394:	0005883a 	mov	r2,zero
  807398:	00cffc34 	movhi	r3,16368
  80739c:	180b883a 	mov	r5,r3
  8073a0:	880f883a 	mov	r7,r17
  8073a4:	1009883a 	mov	r4,r2
  8073a8:	08025280 	call	802528 <__subdf3>
  8073ac:	d9c01b17 	ldw	r7,108(sp)
  8073b0:	180b883a 	mov	r5,r3
  8073b4:	1009883a 	mov	r4,r2
  8073b8:	b00d883a 	mov	r6,r22
  8073bc:	080be680 	call	80be68 <__ltdf2>
  8073c0:	103d9116 	blt	r2,zero,806a08 <_dtoa_r+0x6dc>
  8073c4:	d9800517 	ldw	r6,20(sp)
  8073c8:	d9000317 	ldw	r4,12(sp)
  8073cc:	3105883a 	add	r2,r6,r4
  8073d0:	e0bd3426 	beq	fp,r2,8068a4 <_dtoa_r+0x578>
  8073d4:	04500934 	movhi	r17,16420
  8073d8:	0021883a 	mov	r16,zero
  8073dc:	b80b883a 	mov	r5,r23
  8073e0:	b009883a 	mov	r4,r22
  8073e4:	800d883a 	mov	r6,r16
  8073e8:	880f883a 	mov	r7,r17
  8073ec:	080261c0 	call	80261c <__muldf3>
  8073f0:	d9401517 	ldw	r5,84(sp)
  8073f4:	d9001417 	ldw	r4,80(sp)
  8073f8:	880f883a 	mov	r7,r17
  8073fc:	000d883a 	mov	r6,zero
  807400:	d8801a15 	stw	r2,104(sp)
  807404:	d8c01b15 	stw	r3,108(sp)
  807408:	080261c0 	call	80261c <__muldf3>
  80740c:	180b883a 	mov	r5,r3
  807410:	1009883a 	mov	r4,r2
  807414:	1823883a 	mov	r17,r3
  807418:	1021883a 	mov	r16,r2
  80741c:	0802a680 	call	802a68 <__fixdfsi>
  807420:	1009883a 	mov	r4,r2
  807424:	102b883a 	mov	r21,r2
  807428:	080bef00 	call	80bef0 <__floatsidf>
  80742c:	880b883a 	mov	r5,r17
  807430:	8009883a 	mov	r4,r16
  807434:	180f883a 	mov	r7,r3
  807438:	100d883a 	mov	r6,r2
  80743c:	08025280 	call	802528 <__subdf3>
  807440:	1021883a 	mov	r16,r2
  807444:	d9001b17 	ldw	r4,108(sp)
  807448:	1823883a 	mov	r17,r3
  80744c:	dc001415 	stw	r16,80(sp)
  807450:	ad400c04 	addi	r21,r21,48
  807454:	dc401515 	stw	r17,84(sp)
  807458:	d8801a17 	ldw	r2,104(sp)
  80745c:	e5400005 	stb	r21,0(fp)
  807460:	202f883a 	mov	r23,r4
  807464:	d9c01b17 	ldw	r7,108(sp)
  807468:	d9001417 	ldw	r4,80(sp)
  80746c:	880b883a 	mov	r5,r17
  807470:	100d883a 	mov	r6,r2
  807474:	102d883a 	mov	r22,r2
  807478:	e7000044 	addi	fp,fp,1
  80747c:	080be680 	call	80be68 <__ltdf2>
  807480:	103fc30e 	bge	r2,zero,807390 <_dtoa_r+0x1064>
  807484:	d9000417 	ldw	r4,16(sp)
  807488:	d9000d15 	stw	r4,52(sp)
  80748c:	003d7106 	br	806a54 <_dtoa_r+0x728>
  807490:	d9801717 	ldw	r6,92(sp)
  807494:	00800084 	movi	r2,2
  807498:	11bde60e 	bge	r2,r6,806c34 <_dtoa_r+0x908>
  80749c:	203cfb1e 	bne	r4,zero,80688c <_dtoa_r+0x560>
  8074a0:	d9001617 	ldw	r4,88(sp)
  8074a4:	900b883a 	mov	r5,r18
  8074a8:	01800144 	movi	r6,5
  8074ac:	000f883a 	mov	r7,zero
  8074b0:	08099940 	call	809994 <__multadd>
  8074b4:	d9000717 	ldw	r4,28(sp)
  8074b8:	100b883a 	mov	r5,r2
  8074bc:	1025883a 	mov	r18,r2
  8074c0:	0808e3c0 	call	808e3c <__mcmp>
  8074c4:	00bcf10e 	bge	zero,r2,80688c <_dtoa_r+0x560>
  8074c8:	d8c00d17 	ldw	r3,52(sp)
  8074cc:	d9000517 	ldw	r4,20(sp)
  8074d0:	d8000615 	stw	zero,24(sp)
  8074d4:	18c00044 	addi	r3,r3,1
  8074d8:	d8c00d15 	stw	r3,52(sp)
  8074dc:	00800c44 	movi	r2,49
  8074e0:	27000044 	addi	fp,r4,1
  8074e4:	20800005 	stb	r2,0(r4)
  8074e8:	003e8906 	br	806f10 <_dtoa_r+0xbe4>
  8074ec:	d8c00517 	ldw	r3,20(sp)
  8074f0:	003bc206 	br	8063fc <_dtoa_r+0xd0>
  8074f4:	01802074 	movhi	r6,129
  8074f8:	318eca04 	addi	r6,r6,15144
  8074fc:	30c00917 	ldw	r3,36(r6)
  807500:	30800817 	ldw	r2,32(r6)
  807504:	d9001217 	ldw	r4,72(sp)
  807508:	d9401317 	ldw	r5,76(sp)
  80750c:	180f883a 	mov	r7,r3
  807510:	100d883a 	mov	r6,r2
  807514:	080ba780 	call	80ba78 <__divdf3>
  807518:	948003cc 	andi	r18,r18,15
  80751c:	058000c4 	movi	r22,3
  807520:	1029883a 	mov	r20,r2
  807524:	182b883a 	mov	r21,r3
  807528:	003c8906 	br	806750 <_dtoa_r+0x424>
  80752c:	d9001017 	ldw	r4,64(sp)
  807530:	d9800917 	ldw	r6,36(sp)
  807534:	0025883a 	mov	r18,zero
  807538:	1105c83a 	sub	r2,r2,r4
  80753c:	2089883a 	add	r4,r4,r2
  807540:	308d883a 	add	r6,r6,r2
  807544:	d9001015 	stw	r4,64(sp)
  807548:	d9800915 	stw	r6,36(sp)
  80754c:	003e3206 	br	806e18 <_dtoa_r+0xaec>
  807550:	28800044 	addi	r2,r5,1
  807554:	27000044 	addi	fp,r4,1
  807558:	20800005 	stb	r2,0(r4)
  80755c:	003e6c06 	br	806f10 <_dtoa_r+0xbe4>
  807560:	d8800f17 	ldw	r2,60(sp)
  807564:	00bce016 	blt	zero,r2,8068e8 <_dtoa_r+0x5bc>
  807568:	d9800f17 	ldw	r6,60(sp)
  80756c:	303cc51e 	bne	r6,zero,806884 <_dtoa_r+0x558>
  807570:	0005883a 	mov	r2,zero
  807574:	00d00534 	movhi	r3,16404
  807578:	980b883a 	mov	r5,r19
  80757c:	180f883a 	mov	r7,r3
  807580:	9009883a 	mov	r4,r18
  807584:	100d883a 	mov	r6,r2
  807588:	080261c0 	call	80261c <__muldf3>
  80758c:	180b883a 	mov	r5,r3
  807590:	a80f883a 	mov	r7,r21
  807594:	1009883a 	mov	r4,r2
  807598:	a00d883a 	mov	r6,r20
  80759c:	080bde00 	call	80bde0 <__gedf2>
  8075a0:	103cb80e 	bge	r2,zero,806884 <_dtoa_r+0x558>
  8075a4:	0027883a 	mov	r19,zero
  8075a8:	0025883a 	mov	r18,zero
  8075ac:	003fc606 	br	8074c8 <_dtoa_r+0x119c>
  8075b0:	99400117 	ldw	r5,4(r19)
  8075b4:	d9001617 	ldw	r4,88(sp)
  8075b8:	08092600 	call	809260 <_Balloc>
  8075bc:	99800417 	ldw	r6,16(r19)
  8075c0:	11000304 	addi	r4,r2,12
  8075c4:	99400304 	addi	r5,r19,12
  8075c8:	318d883a 	add	r6,r6,r6
  8075cc:	318d883a 	add	r6,r6,r6
  8075d0:	31800204 	addi	r6,r6,8
  8075d4:	1023883a 	mov	r17,r2
  8075d8:	0803bc80 	call	803bc8 <memcpy>
  8075dc:	d9001617 	ldw	r4,88(sp)
  8075e0:	880b883a 	mov	r5,r17
  8075e4:	01800044 	movi	r6,1
  8075e8:	08096240 	call	809624 <__lshift>
  8075ec:	100b883a 	mov	r5,r2
  8075f0:	003d9c06 	br	806c64 <_dtoa_r+0x938>
  8075f4:	00800e44 	movi	r2,57
  8075f8:	b8807026 	beq	r23,r2,8077bc <_dtoa_r+0x1490>
  8075fc:	b8800044 	addi	r2,r23,1
  807600:	b7000044 	addi	fp,r22,1
  807604:	b0800005 	stb	r2,0(r22)
  807608:	003e4106 	br	806f10 <_dtoa_r+0xbe4>
  80760c:	d8800317 	ldw	r2,12(sp)
  807610:	01802074 	movhi	r6,129
  807614:	318e9804 	addi	r6,r6,14944
  807618:	b009883a 	mov	r4,r22
  80761c:	100e90fa 	slli	r7,r2,3
  807620:	b80b883a 	mov	r5,r23
  807624:	398f883a 	add	r7,r7,r6
  807628:	38bffe17 	ldw	r2,-8(r7)
  80762c:	d9800517 	ldw	r6,20(sp)
  807630:	38ffff17 	ldw	r3,-4(r7)
  807634:	37000044 	addi	fp,r6,1
  807638:	180f883a 	mov	r7,r3
  80763c:	100d883a 	mov	r6,r2
  807640:	080261c0 	call	80261c <__muldf3>
  807644:	a80b883a 	mov	r5,r21
  807648:	a009883a 	mov	r4,r20
  80764c:	182f883a 	mov	r23,r3
  807650:	102d883a 	mov	r22,r2
  807654:	0802a680 	call	802a68 <__fixdfsi>
  807658:	1009883a 	mov	r4,r2
  80765c:	1027883a 	mov	r19,r2
  807660:	080bef00 	call	80bef0 <__floatsidf>
  807664:	a80b883a 	mov	r5,r21
  807668:	a009883a 	mov	r4,r20
  80766c:	180f883a 	mov	r7,r3
  807670:	100d883a 	mov	r6,r2
  807674:	08025280 	call	802528 <__subdf3>
  807678:	180b883a 	mov	r5,r3
  80767c:	d8c00517 	ldw	r3,20(sp)
  807680:	9cc00c04 	addi	r19,r19,48
  807684:	1009883a 	mov	r4,r2
  807688:	1cc00005 	stb	r19,0(r3)
  80768c:	2021883a 	mov	r16,r4
  807690:	d9000317 	ldw	r4,12(sp)
  807694:	00800044 	movi	r2,1
  807698:	2823883a 	mov	r17,r5
  80769c:	20802226 	beq	r4,r2,807728 <_dtoa_r+0x13fc>
  8076a0:	1029883a 	mov	r20,r2
  8076a4:	0005883a 	mov	r2,zero
  8076a8:	00d00934 	movhi	r3,16420
  8076ac:	180f883a 	mov	r7,r3
  8076b0:	100d883a 	mov	r6,r2
  8076b4:	880b883a 	mov	r5,r17
  8076b8:	8009883a 	mov	r4,r16
  8076bc:	080261c0 	call	80261c <__muldf3>
  8076c0:	180b883a 	mov	r5,r3
  8076c4:	1009883a 	mov	r4,r2
  8076c8:	1823883a 	mov	r17,r3
  8076cc:	1021883a 	mov	r16,r2
  8076d0:	0802a680 	call	802a68 <__fixdfsi>
  8076d4:	1009883a 	mov	r4,r2
  8076d8:	102b883a 	mov	r21,r2
  8076dc:	080bef00 	call	80bef0 <__floatsidf>
  8076e0:	880b883a 	mov	r5,r17
  8076e4:	8009883a 	mov	r4,r16
  8076e8:	180f883a 	mov	r7,r3
  8076ec:	100d883a 	mov	r6,r2
  8076f0:	08025280 	call	802528 <__subdf3>
  8076f4:	180b883a 	mov	r5,r3
  8076f8:	d8c00517 	ldw	r3,20(sp)
  8076fc:	1009883a 	mov	r4,r2
  807700:	ad400c04 	addi	r21,r21,48
  807704:	1d05883a 	add	r2,r3,r20
  807708:	15400005 	stb	r21,0(r2)
  80770c:	2021883a 	mov	r16,r4
  807710:	d9000317 	ldw	r4,12(sp)
  807714:	a5000044 	addi	r20,r20,1
  807718:	2823883a 	mov	r17,r5
  80771c:	a13fe11e 	bne	r20,r4,8076a4 <_dtoa_r+0x1378>
  807720:	e505883a 	add	r2,fp,r20
  807724:	173fffc4 	addi	fp,r2,-1
  807728:	0025883a 	mov	r18,zero
  80772c:	04cff834 	movhi	r19,16352
  807730:	b009883a 	mov	r4,r22
  807734:	b80b883a 	mov	r5,r23
  807738:	900d883a 	mov	r6,r18
  80773c:	980f883a 	mov	r7,r19
  807740:	08025a80 	call	8025a8 <__adddf3>
  807744:	180b883a 	mov	r5,r3
  807748:	1009883a 	mov	r4,r2
  80774c:	800d883a 	mov	r6,r16
  807750:	880f883a 	mov	r7,r17
  807754:	080be680 	call	80be68 <__ltdf2>
  807758:	103cab16 	blt	r2,zero,806a08 <_dtoa_r+0x6dc>
  80775c:	0009883a 	mov	r4,zero
  807760:	980b883a 	mov	r5,r19
  807764:	b80f883a 	mov	r7,r23
  807768:	b00d883a 	mov	r6,r22
  80776c:	08025280 	call	802528 <__subdf3>
  807770:	180b883a 	mov	r5,r3
  807774:	880f883a 	mov	r7,r17
  807778:	1009883a 	mov	r4,r2
  80777c:	800d883a 	mov	r6,r16
  807780:	08029e00 	call	8029e0 <__gtdf2>
  807784:	00bc470e 	bge	zero,r2,8068a4 <_dtoa_r+0x578>
  807788:	00c00c04 	movi	r3,48
  80778c:	e73fffc4 	addi	fp,fp,-1
  807790:	e0800007 	ldb	r2,0(fp)
  807794:	10fffd26 	beq	r2,r3,80778c <_dtoa_r+0x1460>
  807798:	d9800417 	ldw	r6,16(sp)
  80779c:	e7000044 	addi	fp,fp,1
  8077a0:	d9800d15 	stw	r6,52(sp)
  8077a4:	003cab06 	br	806a54 <_dtoa_r+0x728>
  8077a8:	d8c00f17 	ldw	r3,60(sp)
  8077ac:	d9001117 	ldw	r4,68(sp)
  8077b0:	20e1c83a 	sub	r16,r4,r3
  8077b4:	0007883a 	mov	r3,zero
  8077b8:	003d9b06 	br	806e28 <_dtoa_r+0xafc>
  8077bc:	00800e44 	movi	r2,57
  8077c0:	b0800005 	stb	r2,0(r22)
  8077c4:	b5800044 	addi	r22,r22,1
  8077c8:	003dc106 	br	806ed0 <_dtoa_r+0xba4>
  8077cc:	05800084 	movi	r22,2
  8077d0:	003bf706 	br	8067b0 <_dtoa_r+0x484>
  8077d4:	d9000f17 	ldw	r4,60(sp)
  8077d8:	013c000e 	bge	zero,r4,8067dc <_dtoa_r+0x4b0>
  8077dc:	d9800e17 	ldw	r6,56(sp)
  8077e0:	01bc300e 	bge	zero,r6,8068a4 <_dtoa_r+0x578>
  8077e4:	0005883a 	mov	r2,zero
  8077e8:	00d00934 	movhi	r3,16420
  8077ec:	a80b883a 	mov	r5,r21
  8077f0:	180f883a 	mov	r7,r3
  8077f4:	a009883a 	mov	r4,r20
  8077f8:	100d883a 	mov	r6,r2
  8077fc:	080261c0 	call	80261c <__muldf3>
  807800:	b1000044 	addi	r4,r22,1
  807804:	1021883a 	mov	r16,r2
  807808:	1823883a 	mov	r17,r3
  80780c:	080bef00 	call	80bef0 <__floatsidf>
  807810:	880b883a 	mov	r5,r17
  807814:	8009883a 	mov	r4,r16
  807818:	180f883a 	mov	r7,r3
  80781c:	100d883a 	mov	r6,r2
  807820:	080261c0 	call	80261c <__muldf3>
  807824:	0011883a 	mov	r8,zero
  807828:	02500734 	movhi	r9,16412
  80782c:	180b883a 	mov	r5,r3
  807830:	480f883a 	mov	r7,r9
  807834:	1009883a 	mov	r4,r2
  807838:	400d883a 	mov	r6,r8
  80783c:	08025a80 	call	8025a8 <__adddf3>
  807840:	102d883a 	mov	r22,r2
  807844:	00bf3034 	movhi	r2,64704
  807848:	10ef883a 	add	r23,r2,r3
  80784c:	d8800d17 	ldw	r2,52(sp)
  807850:	d8c00e17 	ldw	r3,56(sp)
  807854:	8029883a 	mov	r20,r16
  807858:	10bfffc4 	addi	r2,r2,-1
  80785c:	882b883a 	mov	r21,r17
  807860:	d8800415 	stw	r2,16(sp)
  807864:	d8c00315 	stw	r3,12(sp)
  807868:	003e8306 	br	807278 <_dtoa_r+0xf4c>
  80786c:	d8800117 	ldw	r2,4(sp)
  807870:	dc001117 	ldw	r16,68(sp)
  807874:	dc801017 	ldw	r18,64(sp)
  807878:	00c00d84 	movi	r3,54
  80787c:	1887c83a 	sub	r3,r3,r2
  807880:	003d6906 	br	806e28 <_dtoa_r+0xafc>
  807884:	01800044 	movi	r6,1
  807888:	3021883a 	mov	r16,r6
  80788c:	d9800f15 	stw	r6,60(sp)
  807890:	d9802615 	stw	r6,152(sp)
  807894:	d9800e15 	stw	r6,56(sp)
  807898:	003b9306 	br	8066e8 <_dtoa_r+0x3bc>
  80789c:	b021883a 	mov	r16,r22
  8078a0:	dd800f15 	stw	r22,60(sp)
  8078a4:	003b9006 	br	8066e8 <_dtoa_r+0x3bc>
  8078a8:	103e221e 	bne	r2,zero,807134 <_dtoa_r+0xe08>
  8078ac:	b880004c 	andi	r2,r23,1
  8078b0:	1005003a 	cmpeq	r2,r2,zero
  8078b4:	103e1f1e 	bne	r2,zero,807134 <_dtoa_r+0xe08>
  8078b8:	003e1b06 	br	807128 <_dtoa_r+0xdfc>
  8078bc:	d9001617 	ldw	r4,88(sp)
  8078c0:	980b883a 	mov	r5,r19
  8078c4:	01800284 	movi	r6,10
  8078c8:	000f883a 	mov	r7,zero
  8078cc:	08099940 	call	809994 <__multadd>
  8078d0:	d8c00e17 	ldw	r3,56(sp)
  8078d4:	1027883a 	mov	r19,r2
  8078d8:	d8c00f15 	stw	r3,60(sp)
  8078dc:	003cd306 	br	806c2c <_dtoa_r+0x900>

008078e0 <_fflush_r>:
  8078e0:	defffb04 	addi	sp,sp,-20
  8078e4:	dcc00315 	stw	r19,12(sp)
  8078e8:	dc800215 	stw	r18,8(sp)
  8078ec:	dfc00415 	stw	ra,16(sp)
  8078f0:	dc400115 	stw	r17,4(sp)
  8078f4:	dc000015 	stw	r16,0(sp)
  8078f8:	2027883a 	mov	r19,r4
  8078fc:	2825883a 	mov	r18,r5
  807900:	20000226 	beq	r4,zero,80790c <_fflush_r+0x2c>
  807904:	20800e17 	ldw	r2,56(r4)
  807908:	10005626 	beq	r2,zero,807a64 <_fflush_r+0x184>
  80790c:	9100030b 	ldhu	r4,12(r18)
  807910:	20ffffcc 	andi	r3,r4,65535
  807914:	18e0001c 	xori	r3,r3,32768
  807918:	18e00004 	addi	r3,r3,-32768
  80791c:	1880020c 	andi	r2,r3,8
  807920:	1000261e 	bne	r2,zero,8079bc <_fflush_r+0xdc>
  807924:	90c00117 	ldw	r3,4(r18)
  807928:	20820014 	ori	r2,r4,2048
  80792c:	9080030d 	sth	r2,12(r18)
  807930:	1009883a 	mov	r4,r2
  807934:	00c0400e 	bge	zero,r3,807a38 <_fflush_r+0x158>
  807938:	92000a17 	ldw	r8,40(r18)
  80793c:	40004026 	beq	r8,zero,807a40 <_fflush_r+0x160>
  807940:	2084000c 	andi	r2,r4,4096
  807944:	10005326 	beq	r2,zero,807a94 <_fflush_r+0x1b4>
  807948:	94001417 	ldw	r16,80(r18)
  80794c:	9080030b 	ldhu	r2,12(r18)
  807950:	1080010c 	andi	r2,r2,4
  807954:	1000481e 	bne	r2,zero,807a78 <_fflush_r+0x198>
  807958:	91400717 	ldw	r5,28(r18)
  80795c:	9809883a 	mov	r4,r19
  807960:	800d883a 	mov	r6,r16
  807964:	000f883a 	mov	r7,zero
  807968:	403ee83a 	callr	r8
  80796c:	8080261e 	bne	r16,r2,807a08 <_fflush_r+0x128>
  807970:	9080030b 	ldhu	r2,12(r18)
  807974:	91000417 	ldw	r4,16(r18)
  807978:	90000115 	stw	zero,4(r18)
  80797c:	10bdffcc 	andi	r2,r2,63487
  807980:	10ffffcc 	andi	r3,r2,65535
  807984:	18c4000c 	andi	r3,r3,4096
  807988:	9080030d 	sth	r2,12(r18)
  80798c:	91000015 	stw	r4,0(r18)
  807990:	18002b26 	beq	r3,zero,807a40 <_fflush_r+0x160>
  807994:	0007883a 	mov	r3,zero
  807998:	1805883a 	mov	r2,r3
  80799c:	94001415 	stw	r16,80(r18)
  8079a0:	dfc00417 	ldw	ra,16(sp)
  8079a4:	dcc00317 	ldw	r19,12(sp)
  8079a8:	dc800217 	ldw	r18,8(sp)
  8079ac:	dc400117 	ldw	r17,4(sp)
  8079b0:	dc000017 	ldw	r16,0(sp)
  8079b4:	dec00504 	addi	sp,sp,20
  8079b8:	f800283a 	ret
  8079bc:	94400417 	ldw	r17,16(r18)
  8079c0:	88001f26 	beq	r17,zero,807a40 <_fflush_r+0x160>
  8079c4:	90800017 	ldw	r2,0(r18)
  8079c8:	18c000cc 	andi	r3,r3,3
  8079cc:	94400015 	stw	r17,0(r18)
  8079d0:	1461c83a 	sub	r16,r2,r17
  8079d4:	18002526 	beq	r3,zero,807a6c <_fflush_r+0x18c>
  8079d8:	0005883a 	mov	r2,zero
  8079dc:	90800215 	stw	r2,8(r18)
  8079e0:	0400170e 	bge	zero,r16,807a40 <_fflush_r+0x160>
  8079e4:	90c00917 	ldw	r3,36(r18)
  8079e8:	91400717 	ldw	r5,28(r18)
  8079ec:	880d883a 	mov	r6,r17
  8079f0:	800f883a 	mov	r7,r16
  8079f4:	9809883a 	mov	r4,r19
  8079f8:	183ee83a 	callr	r3
  8079fc:	88a3883a 	add	r17,r17,r2
  807a00:	80a1c83a 	sub	r16,r16,r2
  807a04:	00bff616 	blt	zero,r2,8079e0 <_fflush_r+0x100>
  807a08:	9080030b 	ldhu	r2,12(r18)
  807a0c:	00ffffc4 	movi	r3,-1
  807a10:	10801014 	ori	r2,r2,64
  807a14:	9080030d 	sth	r2,12(r18)
  807a18:	1805883a 	mov	r2,r3
  807a1c:	dfc00417 	ldw	ra,16(sp)
  807a20:	dcc00317 	ldw	r19,12(sp)
  807a24:	dc800217 	ldw	r18,8(sp)
  807a28:	dc400117 	ldw	r17,4(sp)
  807a2c:	dc000017 	ldw	r16,0(sp)
  807a30:	dec00504 	addi	sp,sp,20
  807a34:	f800283a 	ret
  807a38:	90800f17 	ldw	r2,60(r18)
  807a3c:	00bfbe16 	blt	zero,r2,807938 <_fflush_r+0x58>
  807a40:	0007883a 	mov	r3,zero
  807a44:	1805883a 	mov	r2,r3
  807a48:	dfc00417 	ldw	ra,16(sp)
  807a4c:	dcc00317 	ldw	r19,12(sp)
  807a50:	dc800217 	ldw	r18,8(sp)
  807a54:	dc400117 	ldw	r17,4(sp)
  807a58:	dc000017 	ldw	r16,0(sp)
  807a5c:	dec00504 	addi	sp,sp,20
  807a60:	f800283a 	ret
  807a64:	0807b780 	call	807b78 <__sinit>
  807a68:	003fa806 	br	80790c <_fflush_r+0x2c>
  807a6c:	90800517 	ldw	r2,20(r18)
  807a70:	90800215 	stw	r2,8(r18)
  807a74:	003fda06 	br	8079e0 <_fflush_r+0x100>
  807a78:	90800117 	ldw	r2,4(r18)
  807a7c:	90c00c17 	ldw	r3,48(r18)
  807a80:	80a1c83a 	sub	r16,r16,r2
  807a84:	183fb426 	beq	r3,zero,807958 <_fflush_r+0x78>
  807a88:	90800f17 	ldw	r2,60(r18)
  807a8c:	80a1c83a 	sub	r16,r16,r2
  807a90:	003fb106 	br	807958 <_fflush_r+0x78>
  807a94:	91400717 	ldw	r5,28(r18)
  807a98:	9809883a 	mov	r4,r19
  807a9c:	000d883a 	mov	r6,zero
  807aa0:	01c00044 	movi	r7,1
  807aa4:	403ee83a 	callr	r8
  807aa8:	1021883a 	mov	r16,r2
  807aac:	00bfffc4 	movi	r2,-1
  807ab0:	80800226 	beq	r16,r2,807abc <_fflush_r+0x1dc>
  807ab4:	92000a17 	ldw	r8,40(r18)
  807ab8:	003fa406 	br	80794c <_fflush_r+0x6c>
  807abc:	98c00017 	ldw	r3,0(r19)
  807ac0:	00800744 	movi	r2,29
  807ac4:	18bfde26 	beq	r3,r2,807a40 <_fflush_r+0x160>
  807ac8:	9080030b 	ldhu	r2,12(r18)
  807acc:	8007883a 	mov	r3,r16
  807ad0:	10801014 	ori	r2,r2,64
  807ad4:	9080030d 	sth	r2,12(r18)
  807ad8:	003fcf06 	br	807a18 <_fflush_r+0x138>

00807adc <fflush>:
  807adc:	01402034 	movhi	r5,128
  807ae0:	295e3804 	addi	r5,r5,30944
  807ae4:	2007883a 	mov	r3,r4
  807ae8:	20000526 	beq	r4,zero,807b00 <fflush+0x24>
  807aec:	00802074 	movhi	r2,129
  807af0:	10961004 	addi	r2,r2,22592
  807af4:	11000017 	ldw	r4,0(r2)
  807af8:	180b883a 	mov	r5,r3
  807afc:	08078e01 	jmpi	8078e0 <_fflush_r>
  807b00:	00802074 	movhi	r2,129
  807b04:	10961104 	addi	r2,r2,22596
  807b08:	11000017 	ldw	r4,0(r2)
  807b0c:	08086ac1 	jmpi	8086ac <_fwalk_reent>

00807b10 <std>:
  807b10:	00802074 	movhi	r2,129
  807b14:	10a9c104 	addi	r2,r2,-22780
  807b18:	20800b15 	stw	r2,44(r4)
  807b1c:	00802074 	movhi	r2,129
  807b20:	10a9fc04 	addi	r2,r2,-22544
  807b24:	20800815 	stw	r2,32(r4)
  807b28:	00c02074 	movhi	r3,129
  807b2c:	18e9dd04 	addi	r3,r3,-22668
  807b30:	00802074 	movhi	r2,129
  807b34:	10a9c304 	addi	r2,r2,-22772
  807b38:	2140030d 	sth	r5,12(r4)
  807b3c:	2180038d 	sth	r6,14(r4)
  807b40:	20c00915 	stw	r3,36(r4)
  807b44:	20800a15 	stw	r2,40(r4)
  807b48:	20000015 	stw	zero,0(r4)
  807b4c:	20000115 	stw	zero,4(r4)
  807b50:	20000215 	stw	zero,8(r4)
  807b54:	20000415 	stw	zero,16(r4)
  807b58:	20000515 	stw	zero,20(r4)
  807b5c:	20000615 	stw	zero,24(r4)
  807b60:	21000715 	stw	r4,28(r4)
  807b64:	f800283a 	ret

00807b68 <__sfp_lock_acquire>:
  807b68:	f800283a 	ret

00807b6c <__sfp_lock_release>:
  807b6c:	f800283a 	ret

00807b70 <__sinit_lock_acquire>:
  807b70:	f800283a 	ret

00807b74 <__sinit_lock_release>:
  807b74:	f800283a 	ret

00807b78 <__sinit>:
  807b78:	20800e17 	ldw	r2,56(r4)
  807b7c:	defffd04 	addi	sp,sp,-12
  807b80:	dc400115 	stw	r17,4(sp)
  807b84:	dc000015 	stw	r16,0(sp)
  807b88:	dfc00215 	stw	ra,8(sp)
  807b8c:	04400044 	movi	r17,1
  807b90:	01400104 	movi	r5,4
  807b94:	000d883a 	mov	r6,zero
  807b98:	2021883a 	mov	r16,r4
  807b9c:	2200bb04 	addi	r8,r4,748
  807ba0:	200f883a 	mov	r7,r4
  807ba4:	10000526 	beq	r2,zero,807bbc <__sinit+0x44>
  807ba8:	dfc00217 	ldw	ra,8(sp)
  807bac:	dc400117 	ldw	r17,4(sp)
  807bb0:	dc000017 	ldw	r16,0(sp)
  807bb4:	dec00304 	addi	sp,sp,12
  807bb8:	f800283a 	ret
  807bbc:	21000117 	ldw	r4,4(r4)
  807bc0:	00802034 	movhi	r2,128
  807bc4:	109f1704 	addi	r2,r2,31836
  807bc8:	00c000c4 	movi	r3,3
  807bcc:	80800f15 	stw	r2,60(r16)
  807bd0:	80c0b915 	stw	r3,740(r16)
  807bd4:	8200ba15 	stw	r8,744(r16)
  807bd8:	84400e15 	stw	r17,56(r16)
  807bdc:	8000b815 	stw	zero,736(r16)
  807be0:	0807b100 	call	807b10 <std>
  807be4:	81000217 	ldw	r4,8(r16)
  807be8:	880d883a 	mov	r6,r17
  807bec:	800f883a 	mov	r7,r16
  807bf0:	01400284 	movi	r5,10
  807bf4:	0807b100 	call	807b10 <std>
  807bf8:	81000317 	ldw	r4,12(r16)
  807bfc:	800f883a 	mov	r7,r16
  807c00:	01400484 	movi	r5,18
  807c04:	01800084 	movi	r6,2
  807c08:	dfc00217 	ldw	ra,8(sp)
  807c0c:	dc400117 	ldw	r17,4(sp)
  807c10:	dc000017 	ldw	r16,0(sp)
  807c14:	dec00304 	addi	sp,sp,12
  807c18:	0807b101 	jmpi	807b10 <std>

00807c1c <__fp_lock>:
  807c1c:	0005883a 	mov	r2,zero
  807c20:	f800283a 	ret

00807c24 <__fp_unlock>:
  807c24:	0005883a 	mov	r2,zero
  807c28:	f800283a 	ret

00807c2c <__fp_unlock_all>:
  807c2c:	00802074 	movhi	r2,129
  807c30:	10961004 	addi	r2,r2,22592
  807c34:	11000017 	ldw	r4,0(r2)
  807c38:	01402034 	movhi	r5,128
  807c3c:	295f0904 	addi	r5,r5,31780
  807c40:	08087741 	jmpi	808774 <_fwalk>

00807c44 <__fp_lock_all>:
  807c44:	00802074 	movhi	r2,129
  807c48:	10961004 	addi	r2,r2,22592
  807c4c:	11000017 	ldw	r4,0(r2)
  807c50:	01402034 	movhi	r5,128
  807c54:	295f0704 	addi	r5,r5,31772
  807c58:	08087741 	jmpi	808774 <_fwalk>

00807c5c <_cleanup_r>:
  807c5c:	01402074 	movhi	r5,129
  807c60:	296b4104 	addi	r5,r5,-21244
  807c64:	08087741 	jmpi	808774 <_fwalk>

00807c68 <_cleanup>:
  807c68:	00802074 	movhi	r2,129
  807c6c:	10961104 	addi	r2,r2,22596
  807c70:	11000017 	ldw	r4,0(r2)
  807c74:	0807c5c1 	jmpi	807c5c <_cleanup_r>

00807c78 <__sfmoreglue>:
  807c78:	defffc04 	addi	sp,sp,-16
  807c7c:	dc400115 	stw	r17,4(sp)
  807c80:	2c401724 	muli	r17,r5,92
  807c84:	dc800215 	stw	r18,8(sp)
  807c88:	2825883a 	mov	r18,r5
  807c8c:	89400304 	addi	r5,r17,12
  807c90:	dc000015 	stw	r16,0(sp)
  807c94:	dfc00315 	stw	ra,12(sp)
  807c98:	08034880 	call	803488 <_malloc_r>
  807c9c:	0021883a 	mov	r16,zero
  807ca0:	880d883a 	mov	r6,r17
  807ca4:	000b883a 	mov	r5,zero
  807ca8:	10000626 	beq	r2,zero,807cc4 <__sfmoreglue+0x4c>
  807cac:	11000304 	addi	r4,r2,12
  807cb0:	14800115 	stw	r18,4(r2)
  807cb4:	10000015 	stw	zero,0(r2)
  807cb8:	11000215 	stw	r4,8(r2)
  807cbc:	1021883a 	mov	r16,r2
  807cc0:	0808c480 	call	808c48 <memset>
  807cc4:	8005883a 	mov	r2,r16
  807cc8:	dfc00317 	ldw	ra,12(sp)
  807ccc:	dc800217 	ldw	r18,8(sp)
  807cd0:	dc400117 	ldw	r17,4(sp)
  807cd4:	dc000017 	ldw	r16,0(sp)
  807cd8:	dec00404 	addi	sp,sp,16
  807cdc:	f800283a 	ret

00807ce0 <__sfp>:
  807ce0:	defffd04 	addi	sp,sp,-12
  807ce4:	00802074 	movhi	r2,129
  807ce8:	10961104 	addi	r2,r2,22596
  807cec:	dc000015 	stw	r16,0(sp)
  807cf0:	14000017 	ldw	r16,0(r2)
  807cf4:	dc400115 	stw	r17,4(sp)
  807cf8:	dfc00215 	stw	ra,8(sp)
  807cfc:	80800e17 	ldw	r2,56(r16)
  807d00:	2023883a 	mov	r17,r4
  807d04:	10002626 	beq	r2,zero,807da0 <__sfp+0xc0>
  807d08:	8400b804 	addi	r16,r16,736
  807d0c:	80800117 	ldw	r2,4(r16)
  807d10:	81000217 	ldw	r4,8(r16)
  807d14:	10ffffc4 	addi	r3,r2,-1
  807d18:	18000916 	blt	r3,zero,807d40 <__sfp+0x60>
  807d1c:	2080030f 	ldh	r2,12(r4)
  807d20:	10000b26 	beq	r2,zero,807d50 <__sfp+0x70>
  807d24:	017fffc4 	movi	r5,-1
  807d28:	00000206 	br	807d34 <__sfp+0x54>
  807d2c:	2080030f 	ldh	r2,12(r4)
  807d30:	10000726 	beq	r2,zero,807d50 <__sfp+0x70>
  807d34:	18ffffc4 	addi	r3,r3,-1
  807d38:	21001704 	addi	r4,r4,92
  807d3c:	197ffb1e 	bne	r3,r5,807d2c <__sfp+0x4c>
  807d40:	80800017 	ldw	r2,0(r16)
  807d44:	10001926 	beq	r2,zero,807dac <__sfp+0xcc>
  807d48:	1021883a 	mov	r16,r2
  807d4c:	003fef06 	br	807d0c <__sfp+0x2c>
  807d50:	00bfffc4 	movi	r2,-1
  807d54:	00c00044 	movi	r3,1
  807d58:	2080038d 	sth	r2,14(r4)
  807d5c:	20c0030d 	sth	r3,12(r4)
  807d60:	20000015 	stw	zero,0(r4)
  807d64:	20000215 	stw	zero,8(r4)
  807d68:	20000115 	stw	zero,4(r4)
  807d6c:	20000415 	stw	zero,16(r4)
  807d70:	20000515 	stw	zero,20(r4)
  807d74:	20000615 	stw	zero,24(r4)
  807d78:	20000c15 	stw	zero,48(r4)
  807d7c:	20000d15 	stw	zero,52(r4)
  807d80:	20001115 	stw	zero,68(r4)
  807d84:	20001215 	stw	zero,72(r4)
  807d88:	2005883a 	mov	r2,r4
  807d8c:	dfc00217 	ldw	ra,8(sp)
  807d90:	dc400117 	ldw	r17,4(sp)
  807d94:	dc000017 	ldw	r16,0(sp)
  807d98:	dec00304 	addi	sp,sp,12
  807d9c:	f800283a 	ret
  807da0:	8009883a 	mov	r4,r16
  807da4:	0807b780 	call	807b78 <__sinit>
  807da8:	003fd706 	br	807d08 <__sfp+0x28>
  807dac:	8809883a 	mov	r4,r17
  807db0:	01400104 	movi	r5,4
  807db4:	0807c780 	call	807c78 <__sfmoreglue>
  807db8:	80800015 	stw	r2,0(r16)
  807dbc:	103fe21e 	bne	r2,zero,807d48 <__sfp+0x68>
  807dc0:	00800304 	movi	r2,12
  807dc4:	0009883a 	mov	r4,zero
  807dc8:	88800015 	stw	r2,0(r17)
  807dcc:	003fee06 	br	807d88 <__sfp+0xa8>

00807dd0 <_malloc_trim_r>:
  807dd0:	defffb04 	addi	sp,sp,-20
  807dd4:	dcc00315 	stw	r19,12(sp)
  807dd8:	04c02074 	movhi	r19,129
  807ddc:	9cd06904 	addi	r19,r19,16804
  807de0:	dc800215 	stw	r18,8(sp)
  807de4:	dc400115 	stw	r17,4(sp)
  807de8:	dc000015 	stw	r16,0(sp)
  807dec:	2823883a 	mov	r17,r5
  807df0:	2025883a 	mov	r18,r4
  807df4:	dfc00415 	stw	ra,16(sp)
  807df8:	080c53c0 	call	80c53c <__malloc_lock>
  807dfc:	98800217 	ldw	r2,8(r19)
  807e00:	9009883a 	mov	r4,r18
  807e04:	000b883a 	mov	r5,zero
  807e08:	10c00117 	ldw	r3,4(r2)
  807e0c:	00bfff04 	movi	r2,-4
  807e10:	18a0703a 	and	r16,r3,r2
  807e14:	8463c83a 	sub	r17,r16,r17
  807e18:	8c43fbc4 	addi	r17,r17,4079
  807e1c:	8822d33a 	srli	r17,r17,12
  807e20:	0083ffc4 	movi	r2,4095
  807e24:	8c7fffc4 	addi	r17,r17,-1
  807e28:	8822933a 	slli	r17,r17,12
  807e2c:	1440060e 	bge	r2,r17,807e48 <_malloc_trim_r+0x78>
  807e30:	0803e180 	call	803e18 <_sbrk_r>
  807e34:	98c00217 	ldw	r3,8(r19)
  807e38:	9009883a 	mov	r4,r18
  807e3c:	044bc83a 	sub	r5,zero,r17
  807e40:	80c7883a 	add	r3,r16,r3
  807e44:	10c00926 	beq	r2,r3,807e6c <_malloc_trim_r+0x9c>
  807e48:	080c55c0 	call	80c55c <__malloc_unlock>
  807e4c:	0005883a 	mov	r2,zero
  807e50:	dfc00417 	ldw	ra,16(sp)
  807e54:	dcc00317 	ldw	r19,12(sp)
  807e58:	dc800217 	ldw	r18,8(sp)
  807e5c:	dc400117 	ldw	r17,4(sp)
  807e60:	dc000017 	ldw	r16,0(sp)
  807e64:	dec00504 	addi	sp,sp,20
  807e68:	f800283a 	ret
  807e6c:	9009883a 	mov	r4,r18
  807e70:	0803e180 	call	803e18 <_sbrk_r>
  807e74:	844dc83a 	sub	r6,r16,r17
  807e78:	00ffffc4 	movi	r3,-1
  807e7c:	9009883a 	mov	r4,r18
  807e80:	000b883a 	mov	r5,zero
  807e84:	01c02074 	movhi	r7,129
  807e88:	39dd7304 	addi	r7,r7,30156
  807e8c:	31800054 	ori	r6,r6,1
  807e90:	10c00926 	beq	r2,r3,807eb8 <_malloc_trim_r+0xe8>
  807e94:	38800017 	ldw	r2,0(r7)
  807e98:	98c00217 	ldw	r3,8(r19)
  807e9c:	9009883a 	mov	r4,r18
  807ea0:	1445c83a 	sub	r2,r2,r17
  807ea4:	38800015 	stw	r2,0(r7)
  807ea8:	19800115 	stw	r6,4(r3)
  807eac:	080c55c0 	call	80c55c <__malloc_unlock>
  807eb0:	00800044 	movi	r2,1
  807eb4:	003fe606 	br	807e50 <_malloc_trim_r+0x80>
  807eb8:	0803e180 	call	803e18 <_sbrk_r>
  807ebc:	99800217 	ldw	r6,8(r19)
  807ec0:	100f883a 	mov	r7,r2
  807ec4:	9009883a 	mov	r4,r18
  807ec8:	1187c83a 	sub	r3,r2,r6
  807ecc:	008003c4 	movi	r2,15
  807ed0:	19400054 	ori	r5,r3,1
  807ed4:	10ffdc0e 	bge	r2,r3,807e48 <_malloc_trim_r+0x78>
  807ed8:	00802074 	movhi	r2,129
  807edc:	10961304 	addi	r2,r2,22604
  807ee0:	10c00017 	ldw	r3,0(r2)
  807ee4:	00802074 	movhi	r2,129
  807ee8:	109d7304 	addi	r2,r2,30156
  807eec:	31400115 	stw	r5,4(r6)
  807ef0:	38c7c83a 	sub	r3,r7,r3
  807ef4:	10c00015 	stw	r3,0(r2)
  807ef8:	003fd306 	br	807e48 <_malloc_trim_r+0x78>

00807efc <_free_r>:
  807efc:	defffd04 	addi	sp,sp,-12
  807f00:	dc400115 	stw	r17,4(sp)
  807f04:	dc000015 	stw	r16,0(sp)
  807f08:	dfc00215 	stw	ra,8(sp)
  807f0c:	2821883a 	mov	r16,r5
  807f10:	2023883a 	mov	r17,r4
  807f14:	28005a26 	beq	r5,zero,808080 <_free_r+0x184>
  807f18:	080c53c0 	call	80c53c <__malloc_lock>
  807f1c:	823ffe04 	addi	r8,r16,-8
  807f20:	41400117 	ldw	r5,4(r8)
  807f24:	00bfff84 	movi	r2,-2
  807f28:	02802074 	movhi	r10,129
  807f2c:	52906904 	addi	r10,r10,16804
  807f30:	288e703a 	and	r7,r5,r2
  807f34:	41cd883a 	add	r6,r8,r7
  807f38:	30c00117 	ldw	r3,4(r6)
  807f3c:	51000217 	ldw	r4,8(r10)
  807f40:	00bfff04 	movi	r2,-4
  807f44:	1892703a 	and	r9,r3,r2
  807f48:	5017883a 	mov	r11,r10
  807f4c:	31006726 	beq	r6,r4,8080ec <_free_r+0x1f0>
  807f50:	2880004c 	andi	r2,r5,1
  807f54:	1005003a 	cmpeq	r2,r2,zero
  807f58:	32400115 	stw	r9,4(r6)
  807f5c:	10001a1e 	bne	r2,zero,807fc8 <_free_r+0xcc>
  807f60:	000b883a 	mov	r5,zero
  807f64:	3247883a 	add	r3,r6,r9
  807f68:	18800117 	ldw	r2,4(r3)
  807f6c:	1080004c 	andi	r2,r2,1
  807f70:	1000231e 	bne	r2,zero,808000 <_free_r+0x104>
  807f74:	280ac03a 	cmpne	r5,r5,zero
  807f78:	3a4f883a 	add	r7,r7,r9
  807f7c:	2800451e 	bne	r5,zero,808094 <_free_r+0x198>
  807f80:	31000217 	ldw	r4,8(r6)
  807f84:	00802074 	movhi	r2,129
  807f88:	10906b04 	addi	r2,r2,16812
  807f8c:	20807b26 	beq	r4,r2,80817c <_free_r+0x280>
  807f90:	30800317 	ldw	r2,12(r6)
  807f94:	3a07883a 	add	r3,r7,r8
  807f98:	19c00015 	stw	r7,0(r3)
  807f9c:	11000215 	stw	r4,8(r2)
  807fa0:	20800315 	stw	r2,12(r4)
  807fa4:	38800054 	ori	r2,r7,1
  807fa8:	40800115 	stw	r2,4(r8)
  807fac:	28001a26 	beq	r5,zero,808018 <_free_r+0x11c>
  807fb0:	8809883a 	mov	r4,r17
  807fb4:	dfc00217 	ldw	ra,8(sp)
  807fb8:	dc400117 	ldw	r17,4(sp)
  807fbc:	dc000017 	ldw	r16,0(sp)
  807fc0:	dec00304 	addi	sp,sp,12
  807fc4:	080c55c1 	jmpi	80c55c <__malloc_unlock>
  807fc8:	80bffe17 	ldw	r2,-8(r16)
  807fcc:	50c00204 	addi	r3,r10,8
  807fd0:	4091c83a 	sub	r8,r8,r2
  807fd4:	41000217 	ldw	r4,8(r8)
  807fd8:	388f883a 	add	r7,r7,r2
  807fdc:	20c06126 	beq	r4,r3,808164 <_free_r+0x268>
  807fe0:	40800317 	ldw	r2,12(r8)
  807fe4:	3247883a 	add	r3,r6,r9
  807fe8:	000b883a 	mov	r5,zero
  807fec:	11000215 	stw	r4,8(r2)
  807ff0:	20800315 	stw	r2,12(r4)
  807ff4:	18800117 	ldw	r2,4(r3)
  807ff8:	1080004c 	andi	r2,r2,1
  807ffc:	103fdd26 	beq	r2,zero,807f74 <_free_r+0x78>
  808000:	38800054 	ori	r2,r7,1
  808004:	3a07883a 	add	r3,r7,r8
  808008:	280ac03a 	cmpne	r5,r5,zero
  80800c:	40800115 	stw	r2,4(r8)
  808010:	19c00015 	stw	r7,0(r3)
  808014:	283fe61e 	bne	r5,zero,807fb0 <_free_r+0xb4>
  808018:	00807fc4 	movi	r2,511
  80801c:	11c01f2e 	bgeu	r2,r7,80809c <_free_r+0x1a0>
  808020:	3806d27a 	srli	r3,r7,9
  808024:	1800481e 	bne	r3,zero,808148 <_free_r+0x24c>
  808028:	3804d0fa 	srli	r2,r7,3
  80802c:	100690fa 	slli	r3,r2,3
  808030:	1acd883a 	add	r6,r3,r11
  808034:	31400217 	ldw	r5,8(r6)
  808038:	31405926 	beq	r6,r5,8081a0 <_free_r+0x2a4>
  80803c:	28800117 	ldw	r2,4(r5)
  808040:	00ffff04 	movi	r3,-4
  808044:	10c4703a 	and	r2,r2,r3
  808048:	3880022e 	bgeu	r7,r2,808054 <_free_r+0x158>
  80804c:	29400217 	ldw	r5,8(r5)
  808050:	317ffa1e 	bne	r6,r5,80803c <_free_r+0x140>
  808054:	29800317 	ldw	r6,12(r5)
  808058:	41800315 	stw	r6,12(r8)
  80805c:	41400215 	stw	r5,8(r8)
  808060:	8809883a 	mov	r4,r17
  808064:	2a000315 	stw	r8,12(r5)
  808068:	32000215 	stw	r8,8(r6)
  80806c:	dfc00217 	ldw	ra,8(sp)
  808070:	dc400117 	ldw	r17,4(sp)
  808074:	dc000017 	ldw	r16,0(sp)
  808078:	dec00304 	addi	sp,sp,12
  80807c:	080c55c1 	jmpi	80c55c <__malloc_unlock>
  808080:	dfc00217 	ldw	ra,8(sp)
  808084:	dc400117 	ldw	r17,4(sp)
  808088:	dc000017 	ldw	r16,0(sp)
  80808c:	dec00304 	addi	sp,sp,12
  808090:	f800283a 	ret
  808094:	31000217 	ldw	r4,8(r6)
  808098:	003fbd06 	br	807f90 <_free_r+0x94>
  80809c:	3806d0fa 	srli	r3,r7,3
  8080a0:	00800044 	movi	r2,1
  8080a4:	51400117 	ldw	r5,4(r10)
  8080a8:	180890fa 	slli	r4,r3,3
  8080ac:	1807d0ba 	srai	r3,r3,2
  8080b0:	22c9883a 	add	r4,r4,r11
  8080b4:	21800217 	ldw	r6,8(r4)
  8080b8:	10c4983a 	sll	r2,r2,r3
  8080bc:	41000315 	stw	r4,12(r8)
  8080c0:	41800215 	stw	r6,8(r8)
  8080c4:	288ab03a 	or	r5,r5,r2
  8080c8:	22000215 	stw	r8,8(r4)
  8080cc:	8809883a 	mov	r4,r17
  8080d0:	51400115 	stw	r5,4(r10)
  8080d4:	32000315 	stw	r8,12(r6)
  8080d8:	dfc00217 	ldw	ra,8(sp)
  8080dc:	dc400117 	ldw	r17,4(sp)
  8080e0:	dc000017 	ldw	r16,0(sp)
  8080e4:	dec00304 	addi	sp,sp,12
  8080e8:	080c55c1 	jmpi	80c55c <__malloc_unlock>
  8080ec:	2880004c 	andi	r2,r5,1
  8080f0:	3a4d883a 	add	r6,r7,r9
  8080f4:	1000071e 	bne	r2,zero,808114 <_free_r+0x218>
  8080f8:	80bffe17 	ldw	r2,-8(r16)
  8080fc:	4091c83a 	sub	r8,r8,r2
  808100:	41000317 	ldw	r4,12(r8)
  808104:	40c00217 	ldw	r3,8(r8)
  808108:	308d883a 	add	r6,r6,r2
  80810c:	20c00215 	stw	r3,8(r4)
  808110:	19000315 	stw	r4,12(r3)
  808114:	00802074 	movhi	r2,129
  808118:	10961204 	addi	r2,r2,22600
  80811c:	11000017 	ldw	r4,0(r2)
  808120:	30c00054 	ori	r3,r6,1
  808124:	52000215 	stw	r8,8(r10)
  808128:	40c00115 	stw	r3,4(r8)
  80812c:	313fa036 	bltu	r6,r4,807fb0 <_free_r+0xb4>
  808130:	00802074 	movhi	r2,129
  808134:	109d5904 	addi	r2,r2,30052
  808138:	11400017 	ldw	r5,0(r2)
  80813c:	8809883a 	mov	r4,r17
  808140:	0807dd00 	call	807dd0 <_malloc_trim_r>
  808144:	003f9a06 	br	807fb0 <_free_r+0xb4>
  808148:	00800104 	movi	r2,4
  80814c:	10c0072e 	bgeu	r2,r3,80816c <_free_r+0x270>
  808150:	00800504 	movi	r2,20
  808154:	10c01936 	bltu	r2,r3,8081bc <_free_r+0x2c0>
  808158:	188016c4 	addi	r2,r3,91
  80815c:	100690fa 	slli	r3,r2,3
  808160:	003fb306 	br	808030 <_free_r+0x134>
  808164:	01400044 	movi	r5,1
  808168:	003f7e06 	br	807f64 <_free_r+0x68>
  80816c:	3804d1ba 	srli	r2,r7,6
  808170:	10800e04 	addi	r2,r2,56
  808174:	100690fa 	slli	r3,r2,3
  808178:	003fad06 	br	808030 <_free_r+0x134>
  80817c:	22000315 	stw	r8,12(r4)
  808180:	22000215 	stw	r8,8(r4)
  808184:	3a05883a 	add	r2,r7,r8
  808188:	38c00054 	ori	r3,r7,1
  80818c:	11c00015 	stw	r7,0(r2)
  808190:	41000215 	stw	r4,8(r8)
  808194:	40c00115 	stw	r3,4(r8)
  808198:	41000315 	stw	r4,12(r8)
  80819c:	003f8406 	br	807fb0 <_free_r+0xb4>
  8081a0:	1005d0ba 	srai	r2,r2,2
  8081a4:	00c00044 	movi	r3,1
  8081a8:	51000117 	ldw	r4,4(r10)
  8081ac:	1886983a 	sll	r3,r3,r2
  8081b0:	20c8b03a 	or	r4,r4,r3
  8081b4:	51000115 	stw	r4,4(r10)
  8081b8:	003fa706 	br	808058 <_free_r+0x15c>
  8081bc:	00801504 	movi	r2,84
  8081c0:	10c00436 	bltu	r2,r3,8081d4 <_free_r+0x2d8>
  8081c4:	3804d33a 	srli	r2,r7,12
  8081c8:	10801b84 	addi	r2,r2,110
  8081cc:	100690fa 	slli	r3,r2,3
  8081d0:	003f9706 	br	808030 <_free_r+0x134>
  8081d4:	00805504 	movi	r2,340
  8081d8:	10c00436 	bltu	r2,r3,8081ec <_free_r+0x2f0>
  8081dc:	3804d3fa 	srli	r2,r7,15
  8081e0:	10801dc4 	addi	r2,r2,119
  8081e4:	100690fa 	slli	r3,r2,3
  8081e8:	003f9106 	br	808030 <_free_r+0x134>
  8081ec:	00815504 	movi	r2,1364
  8081f0:	10c0032e 	bgeu	r2,r3,808200 <_free_r+0x304>
  8081f4:	00801f84 	movi	r2,126
  8081f8:	00c0fc04 	movi	r3,1008
  8081fc:	003f8c06 	br	808030 <_free_r+0x134>
  808200:	3804d4ba 	srli	r2,r7,18
  808204:	10801f04 	addi	r2,r2,124
  808208:	100690fa 	slli	r3,r2,3
  80820c:	003f8806 	br	808030 <_free_r+0x134>

00808210 <__sfvwrite_r>:
  808210:	30800217 	ldw	r2,8(r6)
  808214:	defff504 	addi	sp,sp,-44
  808218:	df000915 	stw	fp,36(sp)
  80821c:	dd800715 	stw	r22,28(sp)
  808220:	dc800315 	stw	r18,12(sp)
  808224:	dfc00a15 	stw	ra,40(sp)
  808228:	ddc00815 	stw	r23,32(sp)
  80822c:	dd400615 	stw	r21,24(sp)
  808230:	dd000515 	stw	r20,20(sp)
  808234:	dcc00415 	stw	r19,16(sp)
  808238:	dc400215 	stw	r17,8(sp)
  80823c:	dc000115 	stw	r16,4(sp)
  808240:	302d883a 	mov	r22,r6
  808244:	2039883a 	mov	fp,r4
  808248:	2825883a 	mov	r18,r5
  80824c:	10001c26 	beq	r2,zero,8082c0 <__sfvwrite_r+0xb0>
  808250:	29c0030b 	ldhu	r7,12(r5)
  808254:	3880020c 	andi	r2,r7,8
  808258:	10002726 	beq	r2,zero,8082f8 <__sfvwrite_r+0xe8>
  80825c:	28800417 	ldw	r2,16(r5)
  808260:	10002526 	beq	r2,zero,8082f8 <__sfvwrite_r+0xe8>
  808264:	3880008c 	andi	r2,r7,2
  808268:	b5400017 	ldw	r21,0(r22)
  80826c:	10002826 	beq	r2,zero,808310 <__sfvwrite_r+0x100>
  808270:	0021883a 	mov	r16,zero
  808274:	0023883a 	mov	r17,zero
  808278:	880d883a 	mov	r6,r17
  80827c:	e009883a 	mov	r4,fp
  808280:	00810004 	movi	r2,1024
  808284:	80006e26 	beq	r16,zero,808440 <__sfvwrite_r+0x230>
  808288:	800f883a 	mov	r7,r16
  80828c:	91400717 	ldw	r5,28(r18)
  808290:	1400012e 	bgeu	r2,r16,808298 <__sfvwrite_r+0x88>
  808294:	100f883a 	mov	r7,r2
  808298:	90c00917 	ldw	r3,36(r18)
  80829c:	183ee83a 	callr	r3
  8082a0:	1007883a 	mov	r3,r2
  8082a4:	80a1c83a 	sub	r16,r16,r2
  8082a8:	88a3883a 	add	r17,r17,r2
  8082ac:	00806d0e 	bge	zero,r2,808464 <__sfvwrite_r+0x254>
  8082b0:	b0800217 	ldw	r2,8(r22)
  8082b4:	10c5c83a 	sub	r2,r2,r3
  8082b8:	b0800215 	stw	r2,8(r22)
  8082bc:	103fee1e 	bne	r2,zero,808278 <__sfvwrite_r+0x68>
  8082c0:	0009883a 	mov	r4,zero
  8082c4:	2005883a 	mov	r2,r4
  8082c8:	dfc00a17 	ldw	ra,40(sp)
  8082cc:	df000917 	ldw	fp,36(sp)
  8082d0:	ddc00817 	ldw	r23,32(sp)
  8082d4:	dd800717 	ldw	r22,28(sp)
  8082d8:	dd400617 	ldw	r21,24(sp)
  8082dc:	dd000517 	ldw	r20,20(sp)
  8082e0:	dcc00417 	ldw	r19,16(sp)
  8082e4:	dc800317 	ldw	r18,12(sp)
  8082e8:	dc400217 	ldw	r17,8(sp)
  8082ec:	dc000117 	ldw	r16,4(sp)
  8082f0:	dec00b04 	addi	sp,sp,44
  8082f4:	f800283a 	ret
  8082f8:	0805e240 	call	805e24 <__swsetup_r>
  8082fc:	1000e41e 	bne	r2,zero,808690 <__sfvwrite_r+0x480>
  808300:	91c0030b 	ldhu	r7,12(r18)
  808304:	b5400017 	ldw	r21,0(r22)
  808308:	3880008c 	andi	r2,r7,2
  80830c:	103fd81e 	bne	r2,zero,808270 <__sfvwrite_r+0x60>
  808310:	3880004c 	andi	r2,r7,1
  808314:	1005003a 	cmpeq	r2,r2,zero
  808318:	10005726 	beq	r2,zero,808478 <__sfvwrite_r+0x268>
  80831c:	0029883a 	mov	r20,zero
  808320:	002f883a 	mov	r23,zero
  808324:	a0004226 	beq	r20,zero,808430 <__sfvwrite_r+0x220>
  808328:	3880800c 	andi	r2,r7,512
  80832c:	94000217 	ldw	r16,8(r18)
  808330:	10008b26 	beq	r2,zero,808560 <__sfvwrite_r+0x350>
  808334:	800d883a 	mov	r6,r16
  808338:	a400a536 	bltu	r20,r16,8085d0 <__sfvwrite_r+0x3c0>
  80833c:	3881200c 	andi	r2,r7,1152
  808340:	10002726 	beq	r2,zero,8083e0 <__sfvwrite_r+0x1d0>
  808344:	90800517 	ldw	r2,20(r18)
  808348:	92000417 	ldw	r8,16(r18)
  80834c:	91400017 	ldw	r5,0(r18)
  808350:	1087883a 	add	r3,r2,r2
  808354:	1887883a 	add	r3,r3,r2
  808358:	1808d7fa 	srli	r4,r3,31
  80835c:	2a21c83a 	sub	r16,r5,r8
  808360:	80800044 	addi	r2,r16,1
  808364:	20c9883a 	add	r4,r4,r3
  808368:	2027d07a 	srai	r19,r4,1
  80836c:	a085883a 	add	r2,r20,r2
  808370:	980d883a 	mov	r6,r19
  808374:	9880022e 	bgeu	r19,r2,808380 <__sfvwrite_r+0x170>
  808378:	1027883a 	mov	r19,r2
  80837c:	100d883a 	mov	r6,r2
  808380:	3881000c 	andi	r2,r7,1024
  808384:	1000b826 	beq	r2,zero,808668 <__sfvwrite_r+0x458>
  808388:	300b883a 	mov	r5,r6
  80838c:	e009883a 	mov	r4,fp
  808390:	08034880 	call	803488 <_malloc_r>
  808394:	10003126 	beq	r2,zero,80845c <__sfvwrite_r+0x24c>
  808398:	91400417 	ldw	r5,16(r18)
  80839c:	1009883a 	mov	r4,r2
  8083a0:	800d883a 	mov	r6,r16
  8083a4:	1023883a 	mov	r17,r2
  8083a8:	0803bc80 	call	803bc8 <memcpy>
  8083ac:	90c0030b 	ldhu	r3,12(r18)
  8083b0:	00beffc4 	movi	r2,-1025
  8083b4:	1886703a 	and	r3,r3,r2
  8083b8:	18c02014 	ori	r3,r3,128
  8083bc:	90c0030d 	sth	r3,12(r18)
  8083c0:	9c07c83a 	sub	r3,r19,r16
  8083c4:	8c05883a 	add	r2,r17,r16
  8083c8:	a00d883a 	mov	r6,r20
  8083cc:	a021883a 	mov	r16,r20
  8083d0:	90800015 	stw	r2,0(r18)
  8083d4:	90c00215 	stw	r3,8(r18)
  8083d8:	94400415 	stw	r17,16(r18)
  8083dc:	94c00515 	stw	r19,20(r18)
  8083e0:	91000017 	ldw	r4,0(r18)
  8083e4:	b80b883a 	mov	r5,r23
  8083e8:	a023883a 	mov	r17,r20
  8083ec:	0808b680 	call	808b68 <memmove>
  8083f0:	90c00217 	ldw	r3,8(r18)
  8083f4:	90800017 	ldw	r2,0(r18)
  8083f8:	a027883a 	mov	r19,r20
  8083fc:	1c07c83a 	sub	r3,r3,r16
  808400:	1405883a 	add	r2,r2,r16
  808404:	90c00215 	stw	r3,8(r18)
  808408:	a021883a 	mov	r16,r20
  80840c:	90800015 	stw	r2,0(r18)
  808410:	b0800217 	ldw	r2,8(r22)
  808414:	1405c83a 	sub	r2,r2,r16
  808418:	b0800215 	stw	r2,8(r22)
  80841c:	103fa826 	beq	r2,zero,8082c0 <__sfvwrite_r+0xb0>
  808420:	a469c83a 	sub	r20,r20,r17
  808424:	91c0030b 	ldhu	r7,12(r18)
  808428:	bcef883a 	add	r23,r23,r19
  80842c:	a03fbe1e 	bne	r20,zero,808328 <__sfvwrite_r+0x118>
  808430:	adc00017 	ldw	r23,0(r21)
  808434:	ad000117 	ldw	r20,4(r21)
  808438:	ad400204 	addi	r21,r21,8
  80843c:	003fb906 	br	808324 <__sfvwrite_r+0x114>
  808440:	ac400017 	ldw	r17,0(r21)
  808444:	ac000117 	ldw	r16,4(r21)
  808448:	ad400204 	addi	r21,r21,8
  80844c:	003f8a06 	br	808278 <__sfvwrite_r+0x68>
  808450:	91400417 	ldw	r5,16(r18)
  808454:	e009883a 	mov	r4,fp
  808458:	0807efc0 	call	807efc <_free_r>
  80845c:	00800304 	movi	r2,12
  808460:	e0800015 	stw	r2,0(fp)
  808464:	9080030b 	ldhu	r2,12(r18)
  808468:	013fffc4 	movi	r4,-1
  80846c:	10801014 	ori	r2,r2,64
  808470:	9080030d 	sth	r2,12(r18)
  808474:	003f9306 	br	8082c4 <__sfvwrite_r+0xb4>
  808478:	0027883a 	mov	r19,zero
  80847c:	002f883a 	mov	r23,zero
  808480:	d8000015 	stw	zero,0(sp)
  808484:	0029883a 	mov	r20,zero
  808488:	98001e26 	beq	r19,zero,808504 <__sfvwrite_r+0x2f4>
  80848c:	d8c00017 	ldw	r3,0(sp)
  808490:	1804c03a 	cmpne	r2,r3,zero
  808494:	10005e26 	beq	r2,zero,808610 <__sfvwrite_r+0x400>
  808498:	9821883a 	mov	r16,r19
  80849c:	a4c0012e 	bgeu	r20,r19,8084a4 <__sfvwrite_r+0x294>
  8084a0:	a021883a 	mov	r16,r20
  8084a4:	91000017 	ldw	r4,0(r18)
  8084a8:	90800417 	ldw	r2,16(r18)
  8084ac:	91800217 	ldw	r6,8(r18)
  8084b0:	91c00517 	ldw	r7,20(r18)
  8084b4:	1100022e 	bgeu	r2,r4,8084c0 <__sfvwrite_r+0x2b0>
  8084b8:	31e3883a 	add	r17,r6,r7
  8084bc:	8c001616 	blt	r17,r16,808518 <__sfvwrite_r+0x308>
  8084c0:	81c03816 	blt	r16,r7,8085a4 <__sfvwrite_r+0x394>
  8084c4:	90c00917 	ldw	r3,36(r18)
  8084c8:	91400717 	ldw	r5,28(r18)
  8084cc:	e009883a 	mov	r4,fp
  8084d0:	b80d883a 	mov	r6,r23
  8084d4:	183ee83a 	callr	r3
  8084d8:	1023883a 	mov	r17,r2
  8084dc:	00bfe10e 	bge	zero,r2,808464 <__sfvwrite_r+0x254>
  8084e0:	a469c83a 	sub	r20,r20,r17
  8084e4:	a0001826 	beq	r20,zero,808548 <__sfvwrite_r+0x338>
  8084e8:	b0800217 	ldw	r2,8(r22)
  8084ec:	1445c83a 	sub	r2,r2,r17
  8084f0:	b0800215 	stw	r2,8(r22)
  8084f4:	103f7226 	beq	r2,zero,8082c0 <__sfvwrite_r+0xb0>
  8084f8:	9c67c83a 	sub	r19,r19,r17
  8084fc:	bc6f883a 	add	r23,r23,r17
  808500:	983fe21e 	bne	r19,zero,80848c <__sfvwrite_r+0x27c>
  808504:	adc00017 	ldw	r23,0(r21)
  808508:	acc00117 	ldw	r19,4(r21)
  80850c:	ad400204 	addi	r21,r21,8
  808510:	d8000015 	stw	zero,0(sp)
  808514:	003fdc06 	br	808488 <__sfvwrite_r+0x278>
  808518:	b80b883a 	mov	r5,r23
  80851c:	880d883a 	mov	r6,r17
  808520:	0808b680 	call	808b68 <memmove>
  808524:	90c00017 	ldw	r3,0(r18)
  808528:	e009883a 	mov	r4,fp
  80852c:	900b883a 	mov	r5,r18
  808530:	1c47883a 	add	r3,r3,r17
  808534:	90c00015 	stw	r3,0(r18)
  808538:	08078e00 	call	8078e0 <_fflush_r>
  80853c:	103fc91e 	bne	r2,zero,808464 <__sfvwrite_r+0x254>
  808540:	a469c83a 	sub	r20,r20,r17
  808544:	a03fe81e 	bne	r20,zero,8084e8 <__sfvwrite_r+0x2d8>
  808548:	e009883a 	mov	r4,fp
  80854c:	900b883a 	mov	r5,r18
  808550:	08078e00 	call	8078e0 <_fflush_r>
  808554:	103fc31e 	bne	r2,zero,808464 <__sfvwrite_r+0x254>
  808558:	d8000015 	stw	zero,0(sp)
  80855c:	003fe206 	br	8084e8 <__sfvwrite_r+0x2d8>
  808560:	91000017 	ldw	r4,0(r18)
  808564:	90800417 	ldw	r2,16(r18)
  808568:	1100022e 	bgeu	r2,r4,808574 <__sfvwrite_r+0x364>
  80856c:	8023883a 	mov	r17,r16
  808570:	85003136 	bltu	r16,r20,808638 <__sfvwrite_r+0x428>
  808574:	91c00517 	ldw	r7,20(r18)
  808578:	a1c01836 	bltu	r20,r7,8085dc <__sfvwrite_r+0x3cc>
  80857c:	90c00917 	ldw	r3,36(r18)
  808580:	91400717 	ldw	r5,28(r18)
  808584:	e009883a 	mov	r4,fp
  808588:	b80d883a 	mov	r6,r23
  80858c:	183ee83a 	callr	r3
  808590:	1021883a 	mov	r16,r2
  808594:	00bfb30e 	bge	zero,r2,808464 <__sfvwrite_r+0x254>
  808598:	1023883a 	mov	r17,r2
  80859c:	1027883a 	mov	r19,r2
  8085a0:	003f9b06 	br	808410 <__sfvwrite_r+0x200>
  8085a4:	b80b883a 	mov	r5,r23
  8085a8:	800d883a 	mov	r6,r16
  8085ac:	0808b680 	call	808b68 <memmove>
  8085b0:	90c00217 	ldw	r3,8(r18)
  8085b4:	90800017 	ldw	r2,0(r18)
  8085b8:	8023883a 	mov	r17,r16
  8085bc:	1c07c83a 	sub	r3,r3,r16
  8085c0:	1405883a 	add	r2,r2,r16
  8085c4:	90c00215 	stw	r3,8(r18)
  8085c8:	90800015 	stw	r2,0(r18)
  8085cc:	003fc406 	br	8084e0 <__sfvwrite_r+0x2d0>
  8085d0:	a00d883a 	mov	r6,r20
  8085d4:	a021883a 	mov	r16,r20
  8085d8:	003f8106 	br	8083e0 <__sfvwrite_r+0x1d0>
  8085dc:	b80b883a 	mov	r5,r23
  8085e0:	a00d883a 	mov	r6,r20
  8085e4:	0808b680 	call	808b68 <memmove>
  8085e8:	90c00217 	ldw	r3,8(r18)
  8085ec:	90800017 	ldw	r2,0(r18)
  8085f0:	a021883a 	mov	r16,r20
  8085f4:	1d07c83a 	sub	r3,r3,r20
  8085f8:	1505883a 	add	r2,r2,r20
  8085fc:	a023883a 	mov	r17,r20
  808600:	a027883a 	mov	r19,r20
  808604:	90c00215 	stw	r3,8(r18)
  808608:	90800015 	stw	r2,0(r18)
  80860c:	003f8006 	br	808410 <__sfvwrite_r+0x200>
  808610:	b809883a 	mov	r4,r23
  808614:	01400284 	movi	r5,10
  808618:	980d883a 	mov	r6,r19
  80861c:	0808a840 	call	808a84 <memchr>
  808620:	10001726 	beq	r2,zero,808680 <__sfvwrite_r+0x470>
  808624:	15c5c83a 	sub	r2,r2,r23
  808628:	15000044 	addi	r20,r2,1
  80862c:	00800044 	movi	r2,1
  808630:	d8800015 	stw	r2,0(sp)
  808634:	003f9806 	br	808498 <__sfvwrite_r+0x288>
  808638:	b80b883a 	mov	r5,r23
  80863c:	800d883a 	mov	r6,r16
  808640:	0808b680 	call	808b68 <memmove>
  808644:	90c00017 	ldw	r3,0(r18)
  808648:	e009883a 	mov	r4,fp
  80864c:	900b883a 	mov	r5,r18
  808650:	1c07883a 	add	r3,r3,r16
  808654:	90c00015 	stw	r3,0(r18)
  808658:	8027883a 	mov	r19,r16
  80865c:	08078e00 	call	8078e0 <_fflush_r>
  808660:	103f6b26 	beq	r2,zero,808410 <__sfvwrite_r+0x200>
  808664:	003f7f06 	br	808464 <__sfvwrite_r+0x254>
  808668:	400b883a 	mov	r5,r8
  80866c:	e009883a 	mov	r4,fp
  808670:	0809ec00 	call	809ec0 <_realloc_r>
  808674:	103f7626 	beq	r2,zero,808450 <__sfvwrite_r+0x240>
  808678:	1023883a 	mov	r17,r2
  80867c:	003f5006 	br	8083c0 <__sfvwrite_r+0x1b0>
  808680:	00c00044 	movi	r3,1
  808684:	9d000044 	addi	r20,r19,1
  808688:	d8c00015 	stw	r3,0(sp)
  80868c:	003f8206 	br	808498 <__sfvwrite_r+0x288>
  808690:	9080030b 	ldhu	r2,12(r18)
  808694:	00c00244 	movi	r3,9
  808698:	013fffc4 	movi	r4,-1
  80869c:	10801014 	ori	r2,r2,64
  8086a0:	9080030d 	sth	r2,12(r18)
  8086a4:	e0c00015 	stw	r3,0(fp)
  8086a8:	003f0606 	br	8082c4 <__sfvwrite_r+0xb4>

008086ac <_fwalk_reent>:
  8086ac:	defff704 	addi	sp,sp,-36
  8086b0:	dcc00315 	stw	r19,12(sp)
  8086b4:	24c0b804 	addi	r19,r4,736
  8086b8:	dd800615 	stw	r22,24(sp)
  8086bc:	dd400515 	stw	r21,20(sp)
  8086c0:	dfc00815 	stw	ra,32(sp)
  8086c4:	ddc00715 	stw	r23,28(sp)
  8086c8:	dd000415 	stw	r20,16(sp)
  8086cc:	dc800215 	stw	r18,8(sp)
  8086d0:	dc400115 	stw	r17,4(sp)
  8086d4:	dc000015 	stw	r16,0(sp)
  8086d8:	202b883a 	mov	r21,r4
  8086dc:	282d883a 	mov	r22,r5
  8086e0:	0807b680 	call	807b68 <__sfp_lock_acquire>
  8086e4:	98002126 	beq	r19,zero,80876c <_fwalk_reent+0xc0>
  8086e8:	002f883a 	mov	r23,zero
  8086ec:	9c800117 	ldw	r18,4(r19)
  8086f0:	9c000217 	ldw	r16,8(r19)
  8086f4:	90bfffc4 	addi	r2,r18,-1
  8086f8:	10000d16 	blt	r2,zero,808730 <_fwalk_reent+0x84>
  8086fc:	0023883a 	mov	r17,zero
  808700:	053fffc4 	movi	r20,-1
  808704:	8080030f 	ldh	r2,12(r16)
  808708:	8c400044 	addi	r17,r17,1
  80870c:	10000626 	beq	r2,zero,808728 <_fwalk_reent+0x7c>
  808710:	8080038f 	ldh	r2,14(r16)
  808714:	800b883a 	mov	r5,r16
  808718:	a809883a 	mov	r4,r21
  80871c:	15000226 	beq	r2,r20,808728 <_fwalk_reent+0x7c>
  808720:	b03ee83a 	callr	r22
  808724:	b8aeb03a 	or	r23,r23,r2
  808728:	84001704 	addi	r16,r16,92
  80872c:	947ff51e 	bne	r18,r17,808704 <_fwalk_reent+0x58>
  808730:	9cc00017 	ldw	r19,0(r19)
  808734:	983fed1e 	bne	r19,zero,8086ec <_fwalk_reent+0x40>
  808738:	0807b6c0 	call	807b6c <__sfp_lock_release>
  80873c:	b805883a 	mov	r2,r23
  808740:	dfc00817 	ldw	ra,32(sp)
  808744:	ddc00717 	ldw	r23,28(sp)
  808748:	dd800617 	ldw	r22,24(sp)
  80874c:	dd400517 	ldw	r21,20(sp)
  808750:	dd000417 	ldw	r20,16(sp)
  808754:	dcc00317 	ldw	r19,12(sp)
  808758:	dc800217 	ldw	r18,8(sp)
  80875c:	dc400117 	ldw	r17,4(sp)
  808760:	dc000017 	ldw	r16,0(sp)
  808764:	dec00904 	addi	sp,sp,36
  808768:	f800283a 	ret
  80876c:	002f883a 	mov	r23,zero
  808770:	003ff106 	br	808738 <_fwalk_reent+0x8c>

00808774 <_fwalk>:
  808774:	defff804 	addi	sp,sp,-32
  808778:	dcc00315 	stw	r19,12(sp)
  80877c:	24c0b804 	addi	r19,r4,736
  808780:	dd400515 	stw	r21,20(sp)
  808784:	dfc00715 	stw	ra,28(sp)
  808788:	dd800615 	stw	r22,24(sp)
  80878c:	dd000415 	stw	r20,16(sp)
  808790:	dc800215 	stw	r18,8(sp)
  808794:	dc400115 	stw	r17,4(sp)
  808798:	dc000015 	stw	r16,0(sp)
  80879c:	282b883a 	mov	r21,r5
  8087a0:	0807b680 	call	807b68 <__sfp_lock_acquire>
  8087a4:	98001f26 	beq	r19,zero,808824 <_fwalk+0xb0>
  8087a8:	002d883a 	mov	r22,zero
  8087ac:	9c800117 	ldw	r18,4(r19)
  8087b0:	9c000217 	ldw	r16,8(r19)
  8087b4:	90bfffc4 	addi	r2,r18,-1
  8087b8:	10000c16 	blt	r2,zero,8087ec <_fwalk+0x78>
  8087bc:	0023883a 	mov	r17,zero
  8087c0:	053fffc4 	movi	r20,-1
  8087c4:	8080030f 	ldh	r2,12(r16)
  8087c8:	8c400044 	addi	r17,r17,1
  8087cc:	10000526 	beq	r2,zero,8087e4 <_fwalk+0x70>
  8087d0:	8080038f 	ldh	r2,14(r16)
  8087d4:	8009883a 	mov	r4,r16
  8087d8:	15000226 	beq	r2,r20,8087e4 <_fwalk+0x70>
  8087dc:	a83ee83a 	callr	r21
  8087e0:	b0acb03a 	or	r22,r22,r2
  8087e4:	84001704 	addi	r16,r16,92
  8087e8:	947ff61e 	bne	r18,r17,8087c4 <_fwalk+0x50>
  8087ec:	9cc00017 	ldw	r19,0(r19)
  8087f0:	983fee1e 	bne	r19,zero,8087ac <_fwalk+0x38>
  8087f4:	0807b6c0 	call	807b6c <__sfp_lock_release>
  8087f8:	b005883a 	mov	r2,r22
  8087fc:	dfc00717 	ldw	ra,28(sp)
  808800:	dd800617 	ldw	r22,24(sp)
  808804:	dd400517 	ldw	r21,20(sp)
  808808:	dd000417 	ldw	r20,16(sp)
  80880c:	dcc00317 	ldw	r19,12(sp)
  808810:	dc800217 	ldw	r18,8(sp)
  808814:	dc400117 	ldw	r17,4(sp)
  808818:	dc000017 	ldw	r16,0(sp)
  80881c:	dec00804 	addi	sp,sp,32
  808820:	f800283a 	ret
  808824:	002d883a 	mov	r22,zero
  808828:	003ff206 	br	8087f4 <_fwalk+0x80>

0080882c <__locale_charset>:
  80882c:	d0a00517 	ldw	r2,-32748(gp)
  808830:	f800283a 	ret

00808834 <_localeconv_r>:
  808834:	00802074 	movhi	r2,129
  808838:	108e8c04 	addi	r2,r2,14896
  80883c:	f800283a 	ret

00808840 <localeconv>:
  808840:	00802074 	movhi	r2,129
  808844:	10961004 	addi	r2,r2,22592
  808848:	11000017 	ldw	r4,0(r2)
  80884c:	08088341 	jmpi	808834 <_localeconv_r>

00808850 <_setlocale_r>:
  808850:	defffc04 	addi	sp,sp,-16
  808854:	00c02074 	movhi	r3,129
  808858:	18cdd604 	addi	r3,r3,14168
  80885c:	dc800215 	stw	r18,8(sp)
  808860:	dc400115 	stw	r17,4(sp)
  808864:	dc000015 	stw	r16,0(sp)
  808868:	2023883a 	mov	r17,r4
  80886c:	2825883a 	mov	r18,r5
  808870:	dfc00315 	stw	ra,12(sp)
  808874:	3021883a 	mov	r16,r6
  808878:	3009883a 	mov	r4,r6
  80887c:	180b883a 	mov	r5,r3
  808880:	30000926 	beq	r6,zero,8088a8 <_setlocale_r+0x58>
  808884:	080a8500 	call	80a850 <strcmp>
  808888:	8009883a 	mov	r4,r16
  80888c:	01402074 	movhi	r5,129
  808890:	294dfb04 	addi	r5,r5,14316
  808894:	10000b1e 	bne	r2,zero,8088c4 <_setlocale_r+0x74>
  808898:	8c000d15 	stw	r16,52(r17)
  80889c:	8c800c15 	stw	r18,48(r17)
  8088a0:	00c02074 	movhi	r3,129
  8088a4:	18cdd604 	addi	r3,r3,14168
  8088a8:	1805883a 	mov	r2,r3
  8088ac:	dfc00317 	ldw	ra,12(sp)
  8088b0:	dc800217 	ldw	r18,8(sp)
  8088b4:	dc400117 	ldw	r17,4(sp)
  8088b8:	dc000017 	ldw	r16,0(sp)
  8088bc:	dec00404 	addi	sp,sp,16
  8088c0:	f800283a 	ret
  8088c4:	080a8500 	call	80a850 <strcmp>
  8088c8:	0007883a 	mov	r3,zero
  8088cc:	103ff226 	beq	r2,zero,808898 <_setlocale_r+0x48>
  8088d0:	003ff506 	br	8088a8 <_setlocale_r+0x58>

008088d4 <setlocale>:
  8088d4:	01802074 	movhi	r6,129
  8088d8:	31961004 	addi	r6,r6,22592
  8088dc:	2007883a 	mov	r3,r4
  8088e0:	31000017 	ldw	r4,0(r6)
  8088e4:	280d883a 	mov	r6,r5
  8088e8:	180b883a 	mov	r5,r3
  8088ec:	08088501 	jmpi	808850 <_setlocale_r>

008088f0 <__smakebuf_r>:
  8088f0:	2880030b 	ldhu	r2,12(r5)
  8088f4:	deffed04 	addi	sp,sp,-76
  8088f8:	dc401015 	stw	r17,64(sp)
  8088fc:	1080008c 	andi	r2,r2,2
  808900:	dc000f15 	stw	r16,60(sp)
  808904:	dfc01215 	stw	ra,72(sp)
  808908:	dc801115 	stw	r18,68(sp)
  80890c:	2821883a 	mov	r16,r5
  808910:	2023883a 	mov	r17,r4
  808914:	10000b26 	beq	r2,zero,808944 <__smakebuf_r+0x54>
  808918:	28c010c4 	addi	r3,r5,67
  80891c:	00800044 	movi	r2,1
  808920:	28800515 	stw	r2,20(r5)
  808924:	28c00415 	stw	r3,16(r5)
  808928:	28c00015 	stw	r3,0(r5)
  80892c:	dfc01217 	ldw	ra,72(sp)
  808930:	dc801117 	ldw	r18,68(sp)
  808934:	dc401017 	ldw	r17,64(sp)
  808938:	dc000f17 	ldw	r16,60(sp)
  80893c:	dec01304 	addi	sp,sp,76
  808940:	f800283a 	ret
  808944:	2940038f 	ldh	r5,14(r5)
  808948:	28002116 	blt	r5,zero,8089d0 <__smakebuf_r+0xe0>
  80894c:	d80d883a 	mov	r6,sp
  808950:	080ad180 	call	80ad18 <_fstat_r>
  808954:	10001e16 	blt	r2,zero,8089d0 <__smakebuf_r+0xe0>
  808958:	d8800117 	ldw	r2,4(sp)
  80895c:	00e00014 	movui	r3,32768
  808960:	113c000c 	andi	r4,r2,61440
  808964:	20c03126 	beq	r4,r3,808a2c <__smakebuf_r+0x13c>
  808968:	8080030b 	ldhu	r2,12(r16)
  80896c:	00c80004 	movi	r3,8192
  808970:	10820014 	ori	r2,r2,2048
  808974:	8080030d 	sth	r2,12(r16)
  808978:	20c01e26 	beq	r4,r3,8089f4 <__smakebuf_r+0x104>
  80897c:	04810004 	movi	r18,1024
  808980:	8809883a 	mov	r4,r17
  808984:	900b883a 	mov	r5,r18
  808988:	08034880 	call	803488 <_malloc_r>
  80898c:	1009883a 	mov	r4,r2
  808990:	10003126 	beq	r2,zero,808a58 <__smakebuf_r+0x168>
  808994:	80c0030b 	ldhu	r3,12(r16)
  808998:	00802034 	movhi	r2,128
  80899c:	109f1704 	addi	r2,r2,31836
  8089a0:	88800f15 	stw	r2,60(r17)
  8089a4:	18c02014 	ori	r3,r3,128
  8089a8:	84800515 	stw	r18,20(r16)
  8089ac:	80c0030d 	sth	r3,12(r16)
  8089b0:	81000415 	stw	r4,16(r16)
  8089b4:	81000015 	stw	r4,0(r16)
  8089b8:	dfc01217 	ldw	ra,72(sp)
  8089bc:	dc801117 	ldw	r18,68(sp)
  8089c0:	dc401017 	ldw	r17,64(sp)
  8089c4:	dc000f17 	ldw	r16,60(sp)
  8089c8:	dec01304 	addi	sp,sp,76
  8089cc:	f800283a 	ret
  8089d0:	80c0030b 	ldhu	r3,12(r16)
  8089d4:	1880200c 	andi	r2,r3,128
  8089d8:	10000426 	beq	r2,zero,8089ec <__smakebuf_r+0xfc>
  8089dc:	04801004 	movi	r18,64
  8089e0:	18820014 	ori	r2,r3,2048
  8089e4:	8080030d 	sth	r2,12(r16)
  8089e8:	003fe506 	br	808980 <__smakebuf_r+0x90>
  8089ec:	04810004 	movi	r18,1024
  8089f0:	003ffb06 	br	8089e0 <__smakebuf_r+0xf0>
  8089f4:	8140038f 	ldh	r5,14(r16)
  8089f8:	8809883a 	mov	r4,r17
  8089fc:	080ad8c0 	call	80ad8c <_isatty_r>
  808a00:	103fde26 	beq	r2,zero,80897c <__smakebuf_r+0x8c>
  808a04:	8080030b 	ldhu	r2,12(r16)
  808a08:	80c010c4 	addi	r3,r16,67
  808a0c:	04810004 	movi	r18,1024
  808a10:	10800054 	ori	r2,r2,1
  808a14:	8080030d 	sth	r2,12(r16)
  808a18:	00800044 	movi	r2,1
  808a1c:	80c00415 	stw	r3,16(r16)
  808a20:	80800515 	stw	r2,20(r16)
  808a24:	80c00015 	stw	r3,0(r16)
  808a28:	003fd506 	br	808980 <__smakebuf_r+0x90>
  808a2c:	80c00a17 	ldw	r3,40(r16)
  808a30:	00802074 	movhi	r2,129
  808a34:	10a9c304 	addi	r2,r2,-22772
  808a38:	18bfcb1e 	bne	r3,r2,808968 <__smakebuf_r+0x78>
  808a3c:	8080030b 	ldhu	r2,12(r16)
  808a40:	00c10004 	movi	r3,1024
  808a44:	1825883a 	mov	r18,r3
  808a48:	10c4b03a 	or	r2,r2,r3
  808a4c:	8080030d 	sth	r2,12(r16)
  808a50:	80c01315 	stw	r3,76(r16)
  808a54:	003fca06 	br	808980 <__smakebuf_r+0x90>
  808a58:	8100030b 	ldhu	r4,12(r16)
  808a5c:	2080800c 	andi	r2,r4,512
  808a60:	103fb21e 	bne	r2,zero,80892c <__smakebuf_r+0x3c>
  808a64:	80c010c4 	addi	r3,r16,67
  808a68:	21000094 	ori	r4,r4,2
  808a6c:	00800044 	movi	r2,1
  808a70:	80800515 	stw	r2,20(r16)
  808a74:	8100030d 	sth	r4,12(r16)
  808a78:	80c00415 	stw	r3,16(r16)
  808a7c:	80c00015 	stw	r3,0(r16)
  808a80:	003faa06 	br	80892c <__smakebuf_r+0x3c>

00808a84 <memchr>:
  808a84:	008000c4 	movi	r2,3
  808a88:	29403fcc 	andi	r5,r5,255
  808a8c:	2007883a 	mov	r3,r4
  808a90:	1180022e 	bgeu	r2,r6,808a9c <memchr+0x18>
  808a94:	2084703a 	and	r2,r4,r2
  808a98:	10000b26 	beq	r2,zero,808ac8 <memchr+0x44>
  808a9c:	313fffc4 	addi	r4,r6,-1
  808aa0:	3000051e 	bne	r6,zero,808ab8 <memchr+0x34>
  808aa4:	00002c06 	br	808b58 <memchr+0xd4>
  808aa8:	213fffc4 	addi	r4,r4,-1
  808aac:	00bfffc4 	movi	r2,-1
  808ab0:	18c00044 	addi	r3,r3,1
  808ab4:	20802826 	beq	r4,r2,808b58 <memchr+0xd4>
  808ab8:	18800003 	ldbu	r2,0(r3)
  808abc:	28bffa1e 	bne	r5,r2,808aa8 <memchr+0x24>
  808ac0:	1805883a 	mov	r2,r3
  808ac4:	f800283a 	ret
  808ac8:	0011883a 	mov	r8,zero
  808acc:	0007883a 	mov	r3,zero
  808ad0:	01c00104 	movi	r7,4
  808ad4:	4004923a 	slli	r2,r8,8
  808ad8:	18c00044 	addi	r3,r3,1
  808adc:	1151883a 	add	r8,r2,r5
  808ae0:	19fffc1e 	bne	r3,r7,808ad4 <memchr+0x50>
  808ae4:	02bfbff4 	movhi	r10,65279
  808ae8:	52bfbfc4 	addi	r10,r10,-257
  808aec:	02602074 	movhi	r9,32897
  808af0:	4a602004 	addi	r9,r9,-32640
  808af4:	02c000c4 	movi	r11,3
  808af8:	20800017 	ldw	r2,0(r4)
  808afc:	31bfff04 	addi	r6,r6,-4
  808b00:	200f883a 	mov	r7,r4
  808b04:	1204f03a 	xor	r2,r2,r8
  808b08:	1287883a 	add	r3,r2,r10
  808b0c:	1a46703a 	and	r3,r3,r9
  808b10:	0084303a 	nor	r2,zero,r2
  808b14:	10c4703a 	and	r2,r2,r3
  808b18:	10000b26 	beq	r2,zero,808b48 <memchr+0xc4>
  808b1c:	20800003 	ldbu	r2,0(r4)
  808b20:	28800f26 	beq	r5,r2,808b60 <memchr+0xdc>
  808b24:	20800043 	ldbu	r2,1(r4)
  808b28:	21c00044 	addi	r7,r4,1
  808b2c:	28800c26 	beq	r5,r2,808b60 <memchr+0xdc>
  808b30:	20800083 	ldbu	r2,2(r4)
  808b34:	21c00084 	addi	r7,r4,2
  808b38:	28800926 	beq	r5,r2,808b60 <memchr+0xdc>
  808b3c:	208000c3 	ldbu	r2,3(r4)
  808b40:	21c000c4 	addi	r7,r4,3
  808b44:	28800626 	beq	r5,r2,808b60 <memchr+0xdc>
  808b48:	21000104 	addi	r4,r4,4
  808b4c:	59bfea36 	bltu	r11,r6,808af8 <memchr+0x74>
  808b50:	2007883a 	mov	r3,r4
  808b54:	003fd106 	br	808a9c <memchr+0x18>
  808b58:	0005883a 	mov	r2,zero
  808b5c:	f800283a 	ret
  808b60:	3805883a 	mov	r2,r7
  808b64:	f800283a 	ret

00808b68 <memmove>:
  808b68:	2807883a 	mov	r3,r5
  808b6c:	2011883a 	mov	r8,r4
  808b70:	29000c2e 	bgeu	r5,r4,808ba4 <memmove+0x3c>
  808b74:	298f883a 	add	r7,r5,r6
  808b78:	21c00a2e 	bgeu	r4,r7,808ba4 <memmove+0x3c>
  808b7c:	30000726 	beq	r6,zero,808b9c <memmove+0x34>
  808b80:	2187883a 	add	r3,r4,r6
  808b84:	198dc83a 	sub	r6,r3,r6
  808b88:	39ffffc4 	addi	r7,r7,-1
  808b8c:	38800003 	ldbu	r2,0(r7)
  808b90:	18ffffc4 	addi	r3,r3,-1
  808b94:	18800005 	stb	r2,0(r3)
  808b98:	19bffb1e 	bne	r3,r6,808b88 <memmove+0x20>
  808b9c:	2005883a 	mov	r2,r4
  808ba0:	f800283a 	ret
  808ba4:	01c003c4 	movi	r7,15
  808ba8:	39800a36 	bltu	r7,r6,808bd4 <memmove+0x6c>
  808bac:	303ffb26 	beq	r6,zero,808b9c <memmove+0x34>
  808bb0:	400f883a 	mov	r7,r8
  808bb4:	320d883a 	add	r6,r6,r8
  808bb8:	28800003 	ldbu	r2,0(r5)
  808bbc:	29400044 	addi	r5,r5,1
  808bc0:	38800005 	stb	r2,0(r7)
  808bc4:	39c00044 	addi	r7,r7,1
  808bc8:	39bffb1e 	bne	r7,r6,808bb8 <memmove+0x50>
  808bcc:	2005883a 	mov	r2,r4
  808bd0:	f800283a 	ret
  808bd4:	1904b03a 	or	r2,r3,r4
  808bd8:	108000cc 	andi	r2,r2,3
  808bdc:	103ff31e 	bne	r2,zero,808bac <memmove+0x44>
  808be0:	3811883a 	mov	r8,r7
  808be4:	180b883a 	mov	r5,r3
  808be8:	200f883a 	mov	r7,r4
  808bec:	28c00017 	ldw	r3,0(r5)
  808bf0:	31bffc04 	addi	r6,r6,-16
  808bf4:	38c00015 	stw	r3,0(r7)
  808bf8:	28800117 	ldw	r2,4(r5)
  808bfc:	38800115 	stw	r2,4(r7)
  808c00:	28c00217 	ldw	r3,8(r5)
  808c04:	38c00215 	stw	r3,8(r7)
  808c08:	28800317 	ldw	r2,12(r5)
  808c0c:	29400404 	addi	r5,r5,16
  808c10:	38800315 	stw	r2,12(r7)
  808c14:	39c00404 	addi	r7,r7,16
  808c18:	41bff436 	bltu	r8,r6,808bec <memmove+0x84>
  808c1c:	008000c4 	movi	r2,3
  808c20:	1180072e 	bgeu	r2,r6,808c40 <memmove+0xd8>
  808c24:	1007883a 	mov	r3,r2
  808c28:	28800017 	ldw	r2,0(r5)
  808c2c:	31bfff04 	addi	r6,r6,-4
  808c30:	29400104 	addi	r5,r5,4
  808c34:	38800015 	stw	r2,0(r7)
  808c38:	39c00104 	addi	r7,r7,4
  808c3c:	19bffa36 	bltu	r3,r6,808c28 <memmove+0xc0>
  808c40:	3811883a 	mov	r8,r7
  808c44:	003fd906 	br	808bac <memmove+0x44>

00808c48 <memset>:
  808c48:	008000c4 	movi	r2,3
  808c4c:	29403fcc 	andi	r5,r5,255
  808c50:	2007883a 	mov	r3,r4
  808c54:	1180022e 	bgeu	r2,r6,808c60 <memset+0x18>
  808c58:	2084703a 	and	r2,r4,r2
  808c5c:	10000826 	beq	r2,zero,808c80 <memset+0x38>
  808c60:	30000526 	beq	r6,zero,808c78 <memset+0x30>
  808c64:	2805883a 	mov	r2,r5
  808c68:	30cd883a 	add	r6,r6,r3
  808c6c:	18800005 	stb	r2,0(r3)
  808c70:	18c00044 	addi	r3,r3,1
  808c74:	19bffd1e 	bne	r3,r6,808c6c <memset+0x24>
  808c78:	2005883a 	mov	r2,r4
  808c7c:	f800283a 	ret
  808c80:	2804923a 	slli	r2,r5,8
  808c84:	020003c4 	movi	r8,15
  808c88:	200f883a 	mov	r7,r4
  808c8c:	2884b03a 	or	r2,r5,r2
  808c90:	1006943a 	slli	r3,r2,16
  808c94:	10c6b03a 	or	r3,r2,r3
  808c98:	41800a2e 	bgeu	r8,r6,808cc4 <memset+0x7c>
  808c9c:	4005883a 	mov	r2,r8
  808ca0:	31bffc04 	addi	r6,r6,-16
  808ca4:	38c00015 	stw	r3,0(r7)
  808ca8:	38c00115 	stw	r3,4(r7)
  808cac:	38c00215 	stw	r3,8(r7)
  808cb0:	38c00315 	stw	r3,12(r7)
  808cb4:	39c00404 	addi	r7,r7,16
  808cb8:	11bff936 	bltu	r2,r6,808ca0 <memset+0x58>
  808cbc:	008000c4 	movi	r2,3
  808cc0:	1180052e 	bgeu	r2,r6,808cd8 <memset+0x90>
  808cc4:	31bfff04 	addi	r6,r6,-4
  808cc8:	008000c4 	movi	r2,3
  808ccc:	38c00015 	stw	r3,0(r7)
  808cd0:	39c00104 	addi	r7,r7,4
  808cd4:	11bffb36 	bltu	r2,r6,808cc4 <memset+0x7c>
  808cd8:	3807883a 	mov	r3,r7
  808cdc:	003fe006 	br	808c60 <memset+0x18>

00808ce0 <_Bfree>:
  808ce0:	28000826 	beq	r5,zero,808d04 <_Bfree+0x24>
  808ce4:	28800117 	ldw	r2,4(r5)
  808ce8:	21001317 	ldw	r4,76(r4)
  808cec:	1085883a 	add	r2,r2,r2
  808cf0:	1085883a 	add	r2,r2,r2
  808cf4:	1105883a 	add	r2,r2,r4
  808cf8:	10c00017 	ldw	r3,0(r2)
  808cfc:	28c00015 	stw	r3,0(r5)
  808d00:	11400015 	stw	r5,0(r2)
  808d04:	f800283a 	ret

00808d08 <__hi0bits>:
  808d08:	20bfffec 	andhi	r2,r4,65535
  808d0c:	10001426 	beq	r2,zero,808d60 <__hi0bits+0x58>
  808d10:	0007883a 	mov	r3,zero
  808d14:	20bfc02c 	andhi	r2,r4,65280
  808d18:	1000021e 	bne	r2,zero,808d24 <__hi0bits+0x1c>
  808d1c:	2008923a 	slli	r4,r4,8
  808d20:	18c00204 	addi	r3,r3,8
  808d24:	20bc002c 	andhi	r2,r4,61440
  808d28:	1000021e 	bne	r2,zero,808d34 <__hi0bits+0x2c>
  808d2c:	2008913a 	slli	r4,r4,4
  808d30:	18c00104 	addi	r3,r3,4
  808d34:	20b0002c 	andhi	r2,r4,49152
  808d38:	1000031e 	bne	r2,zero,808d48 <__hi0bits+0x40>
  808d3c:	2105883a 	add	r2,r4,r4
  808d40:	18c00084 	addi	r3,r3,2
  808d44:	1089883a 	add	r4,r2,r2
  808d48:	20000316 	blt	r4,zero,808d58 <__hi0bits+0x50>
  808d4c:	2090002c 	andhi	r2,r4,16384
  808d50:	10000626 	beq	r2,zero,808d6c <__hi0bits+0x64>
  808d54:	18c00044 	addi	r3,r3,1
  808d58:	1805883a 	mov	r2,r3
  808d5c:	f800283a 	ret
  808d60:	2008943a 	slli	r4,r4,16
  808d64:	00c00404 	movi	r3,16
  808d68:	003fea06 	br	808d14 <__hi0bits+0xc>
  808d6c:	00c00804 	movi	r3,32
  808d70:	1805883a 	mov	r2,r3
  808d74:	f800283a 	ret

00808d78 <__lo0bits>:
  808d78:	20c00017 	ldw	r3,0(r4)
  808d7c:	188001cc 	andi	r2,r3,7
  808d80:	10000a26 	beq	r2,zero,808dac <__lo0bits+0x34>
  808d84:	1880004c 	andi	r2,r3,1
  808d88:	1005003a 	cmpeq	r2,r2,zero
  808d8c:	10002126 	beq	r2,zero,808e14 <__lo0bits+0x9c>
  808d90:	1880008c 	andi	r2,r3,2
  808d94:	1000251e 	bne	r2,zero,808e2c <__lo0bits+0xb4>
  808d98:	1804d0ba 	srli	r2,r3,2
  808d9c:	01400084 	movi	r5,2
  808da0:	20800015 	stw	r2,0(r4)
  808da4:	2805883a 	mov	r2,r5
  808da8:	f800283a 	ret
  808dac:	18bfffcc 	andi	r2,r3,65535
  808db0:	10001526 	beq	r2,zero,808e08 <__lo0bits+0x90>
  808db4:	000b883a 	mov	r5,zero
  808db8:	18803fcc 	andi	r2,r3,255
  808dbc:	1000021e 	bne	r2,zero,808dc8 <__lo0bits+0x50>
  808dc0:	1806d23a 	srli	r3,r3,8
  808dc4:	29400204 	addi	r5,r5,8
  808dc8:	188003cc 	andi	r2,r3,15
  808dcc:	1000021e 	bne	r2,zero,808dd8 <__lo0bits+0x60>
  808dd0:	1806d13a 	srli	r3,r3,4
  808dd4:	29400104 	addi	r5,r5,4
  808dd8:	188000cc 	andi	r2,r3,3
  808ddc:	1000021e 	bne	r2,zero,808de8 <__lo0bits+0x70>
  808de0:	1806d0ba 	srli	r3,r3,2
  808de4:	29400084 	addi	r5,r5,2
  808de8:	1880004c 	andi	r2,r3,1
  808dec:	1000031e 	bne	r2,zero,808dfc <__lo0bits+0x84>
  808df0:	1806d07a 	srli	r3,r3,1
  808df4:	18000a26 	beq	r3,zero,808e20 <__lo0bits+0xa8>
  808df8:	29400044 	addi	r5,r5,1
  808dfc:	2805883a 	mov	r2,r5
  808e00:	20c00015 	stw	r3,0(r4)
  808e04:	f800283a 	ret
  808e08:	1806d43a 	srli	r3,r3,16
  808e0c:	01400404 	movi	r5,16
  808e10:	003fe906 	br	808db8 <__lo0bits+0x40>
  808e14:	000b883a 	mov	r5,zero
  808e18:	2805883a 	mov	r2,r5
  808e1c:	f800283a 	ret
  808e20:	01400804 	movi	r5,32
  808e24:	2805883a 	mov	r2,r5
  808e28:	f800283a 	ret
  808e2c:	1804d07a 	srli	r2,r3,1
  808e30:	01400044 	movi	r5,1
  808e34:	20800015 	stw	r2,0(r4)
  808e38:	003fda06 	br	808da4 <__lo0bits+0x2c>

00808e3c <__mcmp>:
  808e3c:	20800417 	ldw	r2,16(r4)
  808e40:	28c00417 	ldw	r3,16(r5)
  808e44:	10cfc83a 	sub	r7,r2,r3
  808e48:	38000c1e 	bne	r7,zero,808e7c <__mcmp+0x40>
  808e4c:	18c5883a 	add	r2,r3,r3
  808e50:	1085883a 	add	r2,r2,r2
  808e54:	10c00504 	addi	r3,r2,20
  808e58:	21000504 	addi	r4,r4,20
  808e5c:	28cb883a 	add	r5,r5,r3
  808e60:	2085883a 	add	r2,r4,r2
  808e64:	10bfff04 	addi	r2,r2,-4
  808e68:	297fff04 	addi	r5,r5,-4
  808e6c:	11800017 	ldw	r6,0(r2)
  808e70:	28c00017 	ldw	r3,0(r5)
  808e74:	30c0031e 	bne	r6,r3,808e84 <__mcmp+0x48>
  808e78:	20bffa36 	bltu	r4,r2,808e64 <__mcmp+0x28>
  808e7c:	3805883a 	mov	r2,r7
  808e80:	f800283a 	ret
  808e84:	30c00336 	bltu	r6,r3,808e94 <__mcmp+0x58>
  808e88:	01c00044 	movi	r7,1
  808e8c:	3805883a 	mov	r2,r7
  808e90:	f800283a 	ret
  808e94:	01ffffc4 	movi	r7,-1
  808e98:	003ff806 	br	808e7c <__mcmp+0x40>

00808e9c <__ulp>:
  808e9c:	295ffc2c 	andhi	r5,r5,32752
  808ea0:	013f3034 	movhi	r4,64704
  808ea4:	290b883a 	add	r5,r5,r4
  808ea8:	0145c83a 	sub	r2,zero,r5
  808eac:	1007d53a 	srai	r3,r2,20
  808eb0:	000d883a 	mov	r6,zero
  808eb4:	0140040e 	bge	zero,r5,808ec8 <__ulp+0x2c>
  808eb8:	280f883a 	mov	r7,r5
  808ebc:	3807883a 	mov	r3,r7
  808ec0:	3005883a 	mov	r2,r6
  808ec4:	f800283a 	ret
  808ec8:	008004c4 	movi	r2,19
  808ecc:	193ffb04 	addi	r4,r3,-20
  808ed0:	10c00c0e 	bge	r2,r3,808f04 <__ulp+0x68>
  808ed4:	008007c4 	movi	r2,31
  808ed8:	1107c83a 	sub	r3,r2,r4
  808edc:	00800784 	movi	r2,30
  808ee0:	01400044 	movi	r5,1
  808ee4:	11000216 	blt	r2,r4,808ef0 <__ulp+0x54>
  808ee8:	00800044 	movi	r2,1
  808eec:	10ca983a 	sll	r5,r2,r3
  808ef0:	000f883a 	mov	r7,zero
  808ef4:	280d883a 	mov	r6,r5
  808ef8:	3807883a 	mov	r3,r7
  808efc:	3005883a 	mov	r2,r6
  808f00:	f800283a 	ret
  808f04:	00800234 	movhi	r2,8
  808f08:	10cfd83a 	sra	r7,r2,r3
  808f0c:	000d883a 	mov	r6,zero
  808f10:	3005883a 	mov	r2,r6
  808f14:	3807883a 	mov	r3,r7
  808f18:	f800283a 	ret

00808f1c <__b2d>:
  808f1c:	20800417 	ldw	r2,16(r4)
  808f20:	defff904 	addi	sp,sp,-28
  808f24:	dd000415 	stw	r20,16(sp)
  808f28:	1085883a 	add	r2,r2,r2
  808f2c:	25000504 	addi	r20,r4,20
  808f30:	1085883a 	add	r2,r2,r2
  808f34:	dc000015 	stw	r16,0(sp)
  808f38:	a0a1883a 	add	r16,r20,r2
  808f3c:	dd400515 	stw	r21,20(sp)
  808f40:	857fff17 	ldw	r21,-4(r16)
  808f44:	dc400115 	stw	r17,4(sp)
  808f48:	dfc00615 	stw	ra,24(sp)
  808f4c:	a809883a 	mov	r4,r21
  808f50:	2823883a 	mov	r17,r5
  808f54:	dcc00315 	stw	r19,12(sp)
  808f58:	dc800215 	stw	r18,8(sp)
  808f5c:	0808d080 	call	808d08 <__hi0bits>
  808f60:	100b883a 	mov	r5,r2
  808f64:	00800804 	movi	r2,32
  808f68:	1145c83a 	sub	r2,r2,r5
  808f6c:	88800015 	stw	r2,0(r17)
  808f70:	00800284 	movi	r2,10
  808f74:	80ffff04 	addi	r3,r16,-4
  808f78:	11401416 	blt	r2,r5,808fcc <__b2d+0xb0>
  808f7c:	008002c4 	movi	r2,11
  808f80:	1149c83a 	sub	r4,r2,r5
  808f84:	a0c02736 	bltu	r20,r3,809024 <__b2d+0x108>
  808f88:	000d883a 	mov	r6,zero
  808f8c:	28800544 	addi	r2,r5,21
  808f90:	a906d83a 	srl	r3,r21,r4
  808f94:	a884983a 	sll	r2,r21,r2
  808f98:	1ccffc34 	orhi	r19,r3,16368
  808f9c:	11a4b03a 	or	r18,r2,r6
  808fa0:	9005883a 	mov	r2,r18
  808fa4:	9807883a 	mov	r3,r19
  808fa8:	dfc00617 	ldw	ra,24(sp)
  808fac:	dd400517 	ldw	r21,20(sp)
  808fb0:	dd000417 	ldw	r20,16(sp)
  808fb4:	dcc00317 	ldw	r19,12(sp)
  808fb8:	dc800217 	ldw	r18,8(sp)
  808fbc:	dc400117 	ldw	r17,4(sp)
  808fc0:	dc000017 	ldw	r16,0(sp)
  808fc4:	dec00704 	addi	sp,sp,28
  808fc8:	f800283a 	ret
  808fcc:	a0c00e36 	bltu	r20,r3,809008 <__b2d+0xec>
  808fd0:	293ffd44 	addi	r4,r5,-11
  808fd4:	000d883a 	mov	r6,zero
  808fd8:	20000f26 	beq	r4,zero,809018 <__b2d+0xfc>
  808fdc:	00800804 	movi	r2,32
  808fe0:	110bc83a 	sub	r5,r2,r4
  808fe4:	a0c01236 	bltu	r20,r3,809030 <__b2d+0x114>
  808fe8:	000f883a 	mov	r7,zero
  808fec:	a904983a 	sll	r2,r21,r4
  808ff0:	3146d83a 	srl	r3,r6,r5
  808ff4:	3108983a 	sll	r4,r6,r4
  808ff8:	108ffc34 	orhi	r2,r2,16368
  808ffc:	18a6b03a 	or	r19,r3,r2
  809000:	3924b03a 	or	r18,r7,r4
  809004:	003fe606 	br	808fa0 <__b2d+0x84>
  809008:	293ffd44 	addi	r4,r5,-11
  80900c:	81bffe17 	ldw	r6,-8(r16)
  809010:	80fffe04 	addi	r3,r16,-8
  809014:	203ff11e 	bne	r4,zero,808fdc <__b2d+0xc0>
  809018:	accffc34 	orhi	r19,r21,16368
  80901c:	3025883a 	mov	r18,r6
  809020:	003fdf06 	br	808fa0 <__b2d+0x84>
  809024:	18bfff17 	ldw	r2,-4(r3)
  809028:	110cd83a 	srl	r6,r2,r4
  80902c:	003fd706 	br	808f8c <__b2d+0x70>
  809030:	18bfff17 	ldw	r2,-4(r3)
  809034:	114ed83a 	srl	r7,r2,r5
  809038:	003fec06 	br	808fec <__b2d+0xd0>

0080903c <__ratio>:
  80903c:	defff904 	addi	sp,sp,-28
  809040:	dc400215 	stw	r17,8(sp)
  809044:	2823883a 	mov	r17,r5
  809048:	d80b883a 	mov	r5,sp
  80904c:	dfc00615 	stw	ra,24(sp)
  809050:	dd000515 	stw	r20,20(sp)
  809054:	dcc00415 	stw	r19,16(sp)
  809058:	dc800315 	stw	r18,12(sp)
  80905c:	2025883a 	mov	r18,r4
  809060:	0808f1c0 	call	808f1c <__b2d>
  809064:	8809883a 	mov	r4,r17
  809068:	d9400104 	addi	r5,sp,4
  80906c:	1027883a 	mov	r19,r2
  809070:	1829883a 	mov	r20,r3
  809074:	0808f1c0 	call	808f1c <__b2d>
  809078:	89000417 	ldw	r4,16(r17)
  80907c:	91c00417 	ldw	r7,16(r18)
  809080:	d9800117 	ldw	r6,4(sp)
  809084:	180b883a 	mov	r5,r3
  809088:	390fc83a 	sub	r7,r7,r4
  80908c:	1009883a 	mov	r4,r2
  809090:	d8800017 	ldw	r2,0(sp)
  809094:	380e917a 	slli	r7,r7,5
  809098:	2011883a 	mov	r8,r4
  80909c:	1185c83a 	sub	r2,r2,r6
  8090a0:	11c5883a 	add	r2,r2,r7
  8090a4:	1006953a 	slli	r3,r2,20
  8090a8:	2813883a 	mov	r9,r5
  8090ac:	00800d0e 	bge	zero,r2,8090e4 <__ratio+0xa8>
  8090b0:	1d29883a 	add	r20,r3,r20
  8090b4:	a00b883a 	mov	r5,r20
  8090b8:	480f883a 	mov	r7,r9
  8090bc:	9809883a 	mov	r4,r19
  8090c0:	400d883a 	mov	r6,r8
  8090c4:	080ba780 	call	80ba78 <__divdf3>
  8090c8:	dfc00617 	ldw	ra,24(sp)
  8090cc:	dd000517 	ldw	r20,20(sp)
  8090d0:	dcc00417 	ldw	r19,16(sp)
  8090d4:	dc800317 	ldw	r18,12(sp)
  8090d8:	dc400217 	ldw	r17,8(sp)
  8090dc:	dec00704 	addi	sp,sp,28
  8090e0:	f800283a 	ret
  8090e4:	28d3c83a 	sub	r9,r5,r3
  8090e8:	003ff206 	br	8090b4 <__ratio+0x78>

008090ec <_mprec_log10>:
  8090ec:	defffe04 	addi	sp,sp,-8
  8090f0:	008005c4 	movi	r2,23
  8090f4:	dc000015 	stw	r16,0(sp)
  8090f8:	dfc00115 	stw	ra,4(sp)
  8090fc:	2021883a 	mov	r16,r4
  809100:	11000c16 	blt	r2,r4,809134 <_mprec_log10+0x48>
  809104:	200490fa 	slli	r2,r4,3
  809108:	00c02074 	movhi	r3,129
  80910c:	18ce9804 	addi	r3,r3,14944
  809110:	10c5883a 	add	r2,r2,r3
  809114:	12400117 	ldw	r9,4(r2)
  809118:	12000017 	ldw	r8,0(r2)
  80911c:	4807883a 	mov	r3,r9
  809120:	4005883a 	mov	r2,r8
  809124:	dfc00117 	ldw	ra,4(sp)
  809128:	dc000017 	ldw	r16,0(sp)
  80912c:	dec00204 	addi	sp,sp,8
  809130:	f800283a 	ret
  809134:	0011883a 	mov	r8,zero
  809138:	024ffc34 	movhi	r9,16368
  80913c:	0005883a 	mov	r2,zero
  809140:	00d00934 	movhi	r3,16420
  809144:	480b883a 	mov	r5,r9
  809148:	4009883a 	mov	r4,r8
  80914c:	180f883a 	mov	r7,r3
  809150:	100d883a 	mov	r6,r2
  809154:	080261c0 	call	80261c <__muldf3>
  809158:	843fffc4 	addi	r16,r16,-1
  80915c:	1011883a 	mov	r8,r2
  809160:	1813883a 	mov	r9,r3
  809164:	803ff51e 	bne	r16,zero,80913c <_mprec_log10+0x50>
  809168:	4005883a 	mov	r2,r8
  80916c:	4807883a 	mov	r3,r9
  809170:	dfc00117 	ldw	ra,4(sp)
  809174:	dc000017 	ldw	r16,0(sp)
  809178:	dec00204 	addi	sp,sp,8
  80917c:	f800283a 	ret

00809180 <__copybits>:
  809180:	297fffc4 	addi	r5,r5,-1
  809184:	30800417 	ldw	r2,16(r6)
  809188:	280bd17a 	srai	r5,r5,5
  80918c:	31800504 	addi	r6,r6,20
  809190:	1085883a 	add	r2,r2,r2
  809194:	294b883a 	add	r5,r5,r5
  809198:	294b883a 	add	r5,r5,r5
  80919c:	1085883a 	add	r2,r2,r2
  8091a0:	290b883a 	add	r5,r5,r4
  8091a4:	3087883a 	add	r3,r6,r2
  8091a8:	29400104 	addi	r5,r5,4
  8091ac:	30c0052e 	bgeu	r6,r3,8091c4 <__copybits+0x44>
  8091b0:	30800017 	ldw	r2,0(r6)
  8091b4:	31800104 	addi	r6,r6,4
  8091b8:	20800015 	stw	r2,0(r4)
  8091bc:	21000104 	addi	r4,r4,4
  8091c0:	30fffb36 	bltu	r6,r3,8091b0 <__copybits+0x30>
  8091c4:	2140032e 	bgeu	r4,r5,8091d4 <__copybits+0x54>
  8091c8:	20000015 	stw	zero,0(r4)
  8091cc:	21000104 	addi	r4,r4,4
  8091d0:	217ffd36 	bltu	r4,r5,8091c8 <__copybits+0x48>
  8091d4:	f800283a 	ret

008091d8 <__any_on>:
  8091d8:	20800417 	ldw	r2,16(r4)
  8091dc:	2807d17a 	srai	r3,r5,5
  8091e0:	21000504 	addi	r4,r4,20
  8091e4:	10c00d0e 	bge	r2,r3,80921c <__any_on+0x44>
  8091e8:	1085883a 	add	r2,r2,r2
  8091ec:	1085883a 	add	r2,r2,r2
  8091f0:	208d883a 	add	r6,r4,r2
  8091f4:	2180182e 	bgeu	r4,r6,809258 <__any_on+0x80>
  8091f8:	30bfff17 	ldw	r2,-4(r6)
  8091fc:	30ffff04 	addi	r3,r6,-4
  809200:	1000041e 	bne	r2,zero,809214 <__any_on+0x3c>
  809204:	20c0142e 	bgeu	r4,r3,809258 <__any_on+0x80>
  809208:	18ffff04 	addi	r3,r3,-4
  80920c:	18800017 	ldw	r2,0(r3)
  809210:	103ffc26 	beq	r2,zero,809204 <__any_on+0x2c>
  809214:	00800044 	movi	r2,1
  809218:	f800283a 	ret
  80921c:	18800a0e 	bge	r3,r2,809248 <__any_on+0x70>
  809220:	294007cc 	andi	r5,r5,31
  809224:	28000826 	beq	r5,zero,809248 <__any_on+0x70>
  809228:	18c5883a 	add	r2,r3,r3
  80922c:	1085883a 	add	r2,r2,r2
  809230:	208d883a 	add	r6,r4,r2
  809234:	30c00017 	ldw	r3,0(r6)
  809238:	1944d83a 	srl	r2,r3,r5
  80923c:	1144983a 	sll	r2,r2,r5
  809240:	18bff41e 	bne	r3,r2,809214 <__any_on+0x3c>
  809244:	003feb06 	br	8091f4 <__any_on+0x1c>
  809248:	18c5883a 	add	r2,r3,r3
  80924c:	1085883a 	add	r2,r2,r2
  809250:	208d883a 	add	r6,r4,r2
  809254:	003fe706 	br	8091f4 <__any_on+0x1c>
  809258:	0005883a 	mov	r2,zero
  80925c:	f800283a 	ret

00809260 <_Balloc>:
  809260:	20c01317 	ldw	r3,76(r4)
  809264:	defffb04 	addi	sp,sp,-20
  809268:	dcc00315 	stw	r19,12(sp)
  80926c:	dc800215 	stw	r18,8(sp)
  809270:	dfc00415 	stw	ra,16(sp)
  809274:	2825883a 	mov	r18,r5
  809278:	dc400115 	stw	r17,4(sp)
  80927c:	dc000015 	stw	r16,0(sp)
  809280:	2027883a 	mov	r19,r4
  809284:	01800404 	movi	r6,16
  809288:	01400104 	movi	r5,4
  80928c:	18001726 	beq	r3,zero,8092ec <_Balloc+0x8c>
  809290:	01400044 	movi	r5,1
  809294:	9485883a 	add	r2,r18,r18
  809298:	2ca2983a 	sll	r17,r5,r18
  80929c:	1085883a 	add	r2,r2,r2
  8092a0:	10c7883a 	add	r3,r2,r3
  8092a4:	1c000017 	ldw	r16,0(r3)
  8092a8:	8c4d883a 	add	r6,r17,r17
  8092ac:	318d883a 	add	r6,r6,r6
  8092b0:	9809883a 	mov	r4,r19
  8092b4:	31800504 	addi	r6,r6,20
  8092b8:	80001226 	beq	r16,zero,809304 <_Balloc+0xa4>
  8092bc:	80800017 	ldw	r2,0(r16)
  8092c0:	18800015 	stw	r2,0(r3)
  8092c4:	80000415 	stw	zero,16(r16)
  8092c8:	80000315 	stw	zero,12(r16)
  8092cc:	8005883a 	mov	r2,r16
  8092d0:	dfc00417 	ldw	ra,16(sp)
  8092d4:	dcc00317 	ldw	r19,12(sp)
  8092d8:	dc800217 	ldw	r18,8(sp)
  8092dc:	dc400117 	ldw	r17,4(sp)
  8092e0:	dc000017 	ldw	r16,0(sp)
  8092e4:	dec00504 	addi	sp,sp,20
  8092e8:	f800283a 	ret
  8092ec:	080aad00 	call	80aad0 <_calloc_r>
  8092f0:	1007883a 	mov	r3,r2
  8092f4:	0021883a 	mov	r16,zero
  8092f8:	98801315 	stw	r2,76(r19)
  8092fc:	103fe41e 	bne	r2,zero,809290 <_Balloc+0x30>
  809300:	003ff206 	br	8092cc <_Balloc+0x6c>
  809304:	080aad00 	call	80aad0 <_calloc_r>
  809308:	103ff026 	beq	r2,zero,8092cc <_Balloc+0x6c>
  80930c:	1021883a 	mov	r16,r2
  809310:	14800115 	stw	r18,4(r2)
  809314:	14400215 	stw	r17,8(r2)
  809318:	003fea06 	br	8092c4 <_Balloc+0x64>

0080931c <__d2b>:
  80931c:	defff504 	addi	sp,sp,-44
  809320:	dcc00515 	stw	r19,20(sp)
  809324:	04c00044 	movi	r19,1
  809328:	dc000215 	stw	r16,8(sp)
  80932c:	2821883a 	mov	r16,r5
  809330:	980b883a 	mov	r5,r19
  809334:	ddc00915 	stw	r23,36(sp)
  809338:	dd800815 	stw	r22,32(sp)
  80933c:	dd400715 	stw	r21,28(sp)
  809340:	dd000615 	stw	r20,24(sp)
  809344:	dc800415 	stw	r18,16(sp)
  809348:	dc400315 	stw	r17,12(sp)
  80934c:	dfc00a15 	stw	ra,40(sp)
  809350:	3023883a 	mov	r17,r6
  809354:	382d883a 	mov	r22,r7
  809358:	ddc00b17 	ldw	r23,44(sp)
  80935c:	08092600 	call	809260 <_Balloc>
  809360:	1025883a 	mov	r18,r2
  809364:	00a00034 	movhi	r2,32768
  809368:	10bfffc4 	addi	r2,r2,-1
  80936c:	8888703a 	and	r4,r17,r2
  809370:	202ad53a 	srli	r21,r4,20
  809374:	00800434 	movhi	r2,16
  809378:	10bfffc4 	addi	r2,r2,-1
  80937c:	8886703a 	and	r3,r17,r2
  809380:	a829003a 	cmpeq	r20,r21,zero
  809384:	800b883a 	mov	r5,r16
  809388:	d8c00115 	stw	r3,4(sp)
  80938c:	94000504 	addi	r16,r18,20
  809390:	a000021e 	bne	r20,zero,80939c <__d2b+0x80>
  809394:	18c00434 	orhi	r3,r3,16
  809398:	d8c00115 	stw	r3,4(sp)
  80939c:	28002726 	beq	r5,zero,80943c <__d2b+0x120>
  8093a0:	d809883a 	mov	r4,sp
  8093a4:	d9400015 	stw	r5,0(sp)
  8093a8:	0808d780 	call	808d78 <__lo0bits>
  8093ac:	100d883a 	mov	r6,r2
  8093b0:	10003526 	beq	r2,zero,809488 <__d2b+0x16c>
  8093b4:	d8c00117 	ldw	r3,4(sp)
  8093b8:	00800804 	movi	r2,32
  8093bc:	1185c83a 	sub	r2,r2,r6
  8093c0:	d9000017 	ldw	r4,0(sp)
  8093c4:	1886983a 	sll	r3,r3,r2
  8093c8:	1906b03a 	or	r3,r3,r4
  8093cc:	90c00515 	stw	r3,20(r18)
  8093d0:	d8c00117 	ldw	r3,4(sp)
  8093d4:	1986d83a 	srl	r3,r3,r6
  8093d8:	d8c00115 	stw	r3,4(sp)
  8093dc:	180b003a 	cmpeq	r5,r3,zero
  8093e0:	00800084 	movi	r2,2
  8093e4:	114bc83a 	sub	r5,r2,r5
  8093e8:	80c00115 	stw	r3,4(r16)
  8093ec:	91400415 	stw	r5,16(r18)
  8093f0:	a0001a1e 	bne	r20,zero,80945c <__d2b+0x140>
  8093f4:	3545883a 	add	r2,r6,r21
  8093f8:	10bef344 	addi	r2,r2,-1075
  8093fc:	00c00d44 	movi	r3,53
  809400:	b0800015 	stw	r2,0(r22)
  809404:	1987c83a 	sub	r3,r3,r6
  809408:	b8c00015 	stw	r3,0(r23)
  80940c:	9005883a 	mov	r2,r18
  809410:	dfc00a17 	ldw	ra,40(sp)
  809414:	ddc00917 	ldw	r23,36(sp)
  809418:	dd800817 	ldw	r22,32(sp)
  80941c:	dd400717 	ldw	r21,28(sp)
  809420:	dd000617 	ldw	r20,24(sp)
  809424:	dcc00517 	ldw	r19,20(sp)
  809428:	dc800417 	ldw	r18,16(sp)
  80942c:	dc400317 	ldw	r17,12(sp)
  809430:	dc000217 	ldw	r16,8(sp)
  809434:	dec00b04 	addi	sp,sp,44
  809438:	f800283a 	ret
  80943c:	d9000104 	addi	r4,sp,4
  809440:	0808d780 	call	808d78 <__lo0bits>
  809444:	11800804 	addi	r6,r2,32
  809448:	d8800117 	ldw	r2,4(sp)
  80944c:	94c00415 	stw	r19,16(r18)
  809450:	980b883a 	mov	r5,r19
  809454:	90800515 	stw	r2,20(r18)
  809458:	a03fe626 	beq	r20,zero,8093f4 <__d2b+0xd8>
  80945c:	2945883a 	add	r2,r5,r5
  809460:	1085883a 	add	r2,r2,r2
  809464:	1405883a 	add	r2,r2,r16
  809468:	113fff17 	ldw	r4,-4(r2)
  80946c:	30fef384 	addi	r3,r6,-1074
  809470:	2820917a 	slli	r16,r5,5
  809474:	b0c00015 	stw	r3,0(r22)
  809478:	0808d080 	call	808d08 <__hi0bits>
  80947c:	80a1c83a 	sub	r16,r16,r2
  809480:	bc000015 	stw	r16,0(r23)
  809484:	003fe106 	br	80940c <__d2b+0xf0>
  809488:	d8800017 	ldw	r2,0(sp)
  80948c:	90800515 	stw	r2,20(r18)
  809490:	d8c00117 	ldw	r3,4(sp)
  809494:	003fd106 	br	8093dc <__d2b+0xc0>

00809498 <__mdiff>:
  809498:	defffb04 	addi	sp,sp,-20
  80949c:	dc000015 	stw	r16,0(sp)
  8094a0:	2821883a 	mov	r16,r5
  8094a4:	dc800215 	stw	r18,8(sp)
  8094a8:	300b883a 	mov	r5,r6
  8094ac:	2025883a 	mov	r18,r4
  8094b0:	8009883a 	mov	r4,r16
  8094b4:	dc400115 	stw	r17,4(sp)
  8094b8:	dfc00415 	stw	ra,16(sp)
  8094bc:	dcc00315 	stw	r19,12(sp)
  8094c0:	3023883a 	mov	r17,r6
  8094c4:	0808e3c0 	call	808e3c <__mcmp>
  8094c8:	10004226 	beq	r2,zero,8095d4 <__mdiff+0x13c>
  8094cc:	10005016 	blt	r2,zero,809610 <__mdiff+0x178>
  8094d0:	0027883a 	mov	r19,zero
  8094d4:	81400117 	ldw	r5,4(r16)
  8094d8:	9009883a 	mov	r4,r18
  8094dc:	08092600 	call	809260 <_Balloc>
  8094e0:	1019883a 	mov	r12,r2
  8094e4:	82800417 	ldw	r10,16(r16)
  8094e8:	88800417 	ldw	r2,16(r17)
  8094ec:	81800504 	addi	r6,r16,20
  8094f0:	5287883a 	add	r3,r10,r10
  8094f4:	1085883a 	add	r2,r2,r2
  8094f8:	18c7883a 	add	r3,r3,r3
  8094fc:	1085883a 	add	r2,r2,r2
  809500:	8a000504 	addi	r8,r17,20
  809504:	64c00315 	stw	r19,12(r12)
  809508:	30db883a 	add	r13,r6,r3
  80950c:	4097883a 	add	r11,r8,r2
  809510:	61c00504 	addi	r7,r12,20
  809514:	0013883a 	mov	r9,zero
  809518:	31000017 	ldw	r4,0(r6)
  80951c:	41400017 	ldw	r5,0(r8)
  809520:	42000104 	addi	r8,r8,4
  809524:	20bfffcc 	andi	r2,r4,65535
  809528:	28ffffcc 	andi	r3,r5,65535
  80952c:	10c5c83a 	sub	r2,r2,r3
  809530:	1245883a 	add	r2,r2,r9
  809534:	2008d43a 	srli	r4,r4,16
  809538:	280ad43a 	srli	r5,r5,16
  80953c:	1007d43a 	srai	r3,r2,16
  809540:	3880000d 	sth	r2,0(r7)
  809544:	2149c83a 	sub	r4,r4,r5
  809548:	20c9883a 	add	r4,r4,r3
  80954c:	3900008d 	sth	r4,2(r7)
  809550:	31800104 	addi	r6,r6,4
  809554:	39c00104 	addi	r7,r7,4
  809558:	2013d43a 	srai	r9,r4,16
  80955c:	42ffee36 	bltu	r8,r11,809518 <__mdiff+0x80>
  809560:	33400c2e 	bgeu	r6,r13,809594 <__mdiff+0xfc>
  809564:	30800017 	ldw	r2,0(r6)
  809568:	31800104 	addi	r6,r6,4
  80956c:	10ffffcc 	andi	r3,r2,65535
  809570:	1a47883a 	add	r3,r3,r9
  809574:	1004d43a 	srli	r2,r2,16
  809578:	1809d43a 	srai	r4,r3,16
  80957c:	38c0000d 	sth	r3,0(r7)
  809580:	1105883a 	add	r2,r2,r4
  809584:	3880008d 	sth	r2,2(r7)
  809588:	1013d43a 	srai	r9,r2,16
  80958c:	39c00104 	addi	r7,r7,4
  809590:	337ff436 	bltu	r6,r13,809564 <__mdiff+0xcc>
  809594:	38bfff17 	ldw	r2,-4(r7)
  809598:	38ffff04 	addi	r3,r7,-4
  80959c:	1000041e 	bne	r2,zero,8095b0 <__mdiff+0x118>
  8095a0:	18ffff04 	addi	r3,r3,-4
  8095a4:	18800017 	ldw	r2,0(r3)
  8095a8:	52bfffc4 	addi	r10,r10,-1
  8095ac:	103ffc26 	beq	r2,zero,8095a0 <__mdiff+0x108>
  8095b0:	6005883a 	mov	r2,r12
  8095b4:	62800415 	stw	r10,16(r12)
  8095b8:	dfc00417 	ldw	ra,16(sp)
  8095bc:	dcc00317 	ldw	r19,12(sp)
  8095c0:	dc800217 	ldw	r18,8(sp)
  8095c4:	dc400117 	ldw	r17,4(sp)
  8095c8:	dc000017 	ldw	r16,0(sp)
  8095cc:	dec00504 	addi	sp,sp,20
  8095d0:	f800283a 	ret
  8095d4:	9009883a 	mov	r4,r18
  8095d8:	000b883a 	mov	r5,zero
  8095dc:	08092600 	call	809260 <_Balloc>
  8095e0:	1019883a 	mov	r12,r2
  8095e4:	00800044 	movi	r2,1
  8095e8:	60800415 	stw	r2,16(r12)
  8095ec:	6005883a 	mov	r2,r12
  8095f0:	60000515 	stw	zero,20(r12)
  8095f4:	dfc00417 	ldw	ra,16(sp)
  8095f8:	dcc00317 	ldw	r19,12(sp)
  8095fc:	dc800217 	ldw	r18,8(sp)
  809600:	dc400117 	ldw	r17,4(sp)
  809604:	dc000017 	ldw	r16,0(sp)
  809608:	dec00504 	addi	sp,sp,20
  80960c:	f800283a 	ret
  809610:	880d883a 	mov	r6,r17
  809614:	04c00044 	movi	r19,1
  809618:	8023883a 	mov	r17,r16
  80961c:	3021883a 	mov	r16,r6
  809620:	003fac06 	br	8094d4 <__mdiff+0x3c>

00809624 <__lshift>:
  809624:	defff904 	addi	sp,sp,-28
  809628:	28800417 	ldw	r2,16(r5)
  80962c:	dc000015 	stw	r16,0(sp)
  809630:	3021d17a 	srai	r16,r6,5
  809634:	28c00217 	ldw	r3,8(r5)
  809638:	10800044 	addi	r2,r2,1
  80963c:	dc400115 	stw	r17,4(sp)
  809640:	80a3883a 	add	r17,r16,r2
  809644:	dd400515 	stw	r21,20(sp)
  809648:	dd000415 	stw	r20,16(sp)
  80964c:	dc800215 	stw	r18,8(sp)
  809650:	dfc00615 	stw	ra,24(sp)
  809654:	2825883a 	mov	r18,r5
  809658:	dcc00315 	stw	r19,12(sp)
  80965c:	3029883a 	mov	r20,r6
  809660:	202b883a 	mov	r21,r4
  809664:	29400117 	ldw	r5,4(r5)
  809668:	1c40030e 	bge	r3,r17,809678 <__lshift+0x54>
  80966c:	18c7883a 	add	r3,r3,r3
  809670:	29400044 	addi	r5,r5,1
  809674:	1c7ffd16 	blt	r3,r17,80966c <__lshift+0x48>
  809678:	a809883a 	mov	r4,r21
  80967c:	08092600 	call	809260 <_Balloc>
  809680:	1027883a 	mov	r19,r2
  809684:	11400504 	addi	r5,r2,20
  809688:	0400090e 	bge	zero,r16,8096b0 <__lshift+0x8c>
  80968c:	2805883a 	mov	r2,r5
  809690:	0007883a 	mov	r3,zero
  809694:	18c00044 	addi	r3,r3,1
  809698:	10000015 	stw	zero,0(r2)
  80969c:	10800104 	addi	r2,r2,4
  8096a0:	80fffc1e 	bne	r16,r3,809694 <__lshift+0x70>
  8096a4:	8405883a 	add	r2,r16,r16
  8096a8:	1085883a 	add	r2,r2,r2
  8096ac:	288b883a 	add	r5,r5,r2
  8096b0:	90800417 	ldw	r2,16(r18)
  8096b4:	91000504 	addi	r4,r18,20
  8096b8:	a18007cc 	andi	r6,r20,31
  8096bc:	1085883a 	add	r2,r2,r2
  8096c0:	1085883a 	add	r2,r2,r2
  8096c4:	208f883a 	add	r7,r4,r2
  8096c8:	30001e26 	beq	r6,zero,809744 <__lshift+0x120>
  8096cc:	00800804 	movi	r2,32
  8096d0:	1191c83a 	sub	r8,r2,r6
  8096d4:	0007883a 	mov	r3,zero
  8096d8:	20800017 	ldw	r2,0(r4)
  8096dc:	1184983a 	sll	r2,r2,r6
  8096e0:	1884b03a 	or	r2,r3,r2
  8096e4:	28800015 	stw	r2,0(r5)
  8096e8:	20c00017 	ldw	r3,0(r4)
  8096ec:	21000104 	addi	r4,r4,4
  8096f0:	29400104 	addi	r5,r5,4
  8096f4:	1a06d83a 	srl	r3,r3,r8
  8096f8:	21fff736 	bltu	r4,r7,8096d8 <__lshift+0xb4>
  8096fc:	28c00015 	stw	r3,0(r5)
  809700:	18000126 	beq	r3,zero,809708 <__lshift+0xe4>
  809704:	8c400044 	addi	r17,r17,1
  809708:	88bfffc4 	addi	r2,r17,-1
  80970c:	98800415 	stw	r2,16(r19)
  809710:	a809883a 	mov	r4,r21
  809714:	900b883a 	mov	r5,r18
  809718:	0808ce00 	call	808ce0 <_Bfree>
  80971c:	9805883a 	mov	r2,r19
  809720:	dfc00617 	ldw	ra,24(sp)
  809724:	dd400517 	ldw	r21,20(sp)
  809728:	dd000417 	ldw	r20,16(sp)
  80972c:	dcc00317 	ldw	r19,12(sp)
  809730:	dc800217 	ldw	r18,8(sp)
  809734:	dc400117 	ldw	r17,4(sp)
  809738:	dc000017 	ldw	r16,0(sp)
  80973c:	dec00704 	addi	sp,sp,28
  809740:	f800283a 	ret
  809744:	20800017 	ldw	r2,0(r4)
  809748:	21000104 	addi	r4,r4,4
  80974c:	28800015 	stw	r2,0(r5)
  809750:	29400104 	addi	r5,r5,4
  809754:	21ffec2e 	bgeu	r4,r7,809708 <__lshift+0xe4>
  809758:	20800017 	ldw	r2,0(r4)
  80975c:	21000104 	addi	r4,r4,4
  809760:	28800015 	stw	r2,0(r5)
  809764:	29400104 	addi	r5,r5,4
  809768:	21fff636 	bltu	r4,r7,809744 <__lshift+0x120>
  80976c:	003fe606 	br	809708 <__lshift+0xe4>

00809770 <__multiply>:
  809770:	defff904 	addi	sp,sp,-28
  809774:	dcc00315 	stw	r19,12(sp)
  809778:	dc800215 	stw	r18,8(sp)
  80977c:	2cc00417 	ldw	r19,16(r5)
  809780:	34800417 	ldw	r18,16(r6)
  809784:	dd000415 	stw	r20,16(sp)
  809788:	dc400115 	stw	r17,4(sp)
  80978c:	dfc00615 	stw	ra,24(sp)
  809790:	dd400515 	stw	r21,20(sp)
  809794:	dc000015 	stw	r16,0(sp)
  809798:	2823883a 	mov	r17,r5
  80979c:	3029883a 	mov	r20,r6
  8097a0:	9c80040e 	bge	r19,r18,8097b4 <__multiply+0x44>
  8097a4:	9027883a 	mov	r19,r18
  8097a8:	2c800417 	ldw	r18,16(r5)
  8097ac:	2829883a 	mov	r20,r5
  8097b0:	3023883a 	mov	r17,r6
  8097b4:	88800217 	ldw	r2,8(r17)
  8097b8:	9ca1883a 	add	r16,r19,r18
  8097bc:	89400117 	ldw	r5,4(r17)
  8097c0:	1400010e 	bge	r2,r16,8097c8 <__multiply+0x58>
  8097c4:	29400044 	addi	r5,r5,1
  8097c8:	08092600 	call	809260 <_Balloc>
  8097cc:	102b883a 	mov	r21,r2
  8097d0:	8405883a 	add	r2,r16,r16
  8097d4:	1085883a 	add	r2,r2,r2
  8097d8:	a9000504 	addi	r4,r21,20
  8097dc:	209d883a 	add	r14,r4,r2
  8097e0:	2380042e 	bgeu	r4,r14,8097f4 <__multiply+0x84>
  8097e4:	2005883a 	mov	r2,r4
  8097e8:	10000015 	stw	zero,0(r2)
  8097ec:	10800104 	addi	r2,r2,4
  8097f0:	13bffd36 	bltu	r2,r14,8097e8 <__multiply+0x78>
  8097f4:	9485883a 	add	r2,r18,r18
  8097f8:	9cc7883a 	add	r3,r19,r19
  8097fc:	a1800504 	addi	r6,r20,20
  809800:	1085883a 	add	r2,r2,r2
  809804:	8b400504 	addi	r13,r17,20
  809808:	18c7883a 	add	r3,r3,r3
  80980c:	309f883a 	add	r15,r6,r2
  809810:	68d7883a 	add	r11,r13,r3
  809814:	33c03b2e 	bgeu	r6,r15,809904 <__multiply+0x194>
  809818:	2019883a 	mov	r12,r4
  80981c:	30800017 	ldw	r2,0(r6)
  809820:	127fffcc 	andi	r9,r2,65535
  809824:	48001826 	beq	r9,zero,809888 <__multiply+0x118>
  809828:	6811883a 	mov	r8,r13
  80982c:	600f883a 	mov	r7,r12
  809830:	0015883a 	mov	r10,zero
  809834:	40c00017 	ldw	r3,0(r8)
  809838:	39400017 	ldw	r5,0(r7)
  80983c:	42000104 	addi	r8,r8,4
  809840:	193fffcc 	andi	r4,r3,65535
  809844:	4909383a 	mul	r4,r9,r4
  809848:	1806d43a 	srli	r3,r3,16
  80984c:	28bfffcc 	andi	r2,r5,65535
  809850:	5085883a 	add	r2,r10,r2
  809854:	2089883a 	add	r4,r4,r2
  809858:	48c7383a 	mul	r3,r9,r3
  80985c:	280ad43a 	srli	r5,r5,16
  809860:	2004d43a 	srli	r2,r4,16
  809864:	3900000d 	sth	r4,0(r7)
  809868:	1947883a 	add	r3,r3,r5
  80986c:	10c5883a 	add	r2,r2,r3
  809870:	3880008d 	sth	r2,2(r7)
  809874:	1014d43a 	srli	r10,r2,16
  809878:	39c00104 	addi	r7,r7,4
  80987c:	42ffed36 	bltu	r8,r11,809834 <__multiply+0xc4>
  809880:	3a800015 	stw	r10,0(r7)
  809884:	30800017 	ldw	r2,0(r6)
  809888:	1012d43a 	srli	r9,r2,16
  80988c:	48001926 	beq	r9,zero,8098f4 <__multiply+0x184>
  809890:	60800017 	ldw	r2,0(r12)
  809894:	6811883a 	mov	r8,r13
  809898:	600f883a 	mov	r7,r12
  80989c:	0015883a 	mov	r10,zero
  8098a0:	100b883a 	mov	r5,r2
  8098a4:	41000017 	ldw	r4,0(r8)
  8098a8:	2806d43a 	srli	r3,r5,16
  8098ac:	3880000d 	sth	r2,0(r7)
  8098b0:	20bfffcc 	andi	r2,r4,65535
  8098b4:	4885383a 	mul	r2,r9,r2
  8098b8:	50c7883a 	add	r3,r10,r3
  8098bc:	2008d43a 	srli	r4,r4,16
  8098c0:	10c5883a 	add	r2,r2,r3
  8098c4:	3880008d 	sth	r2,2(r7)
  8098c8:	39c00104 	addi	r7,r7,4
  8098cc:	39400017 	ldw	r5,0(r7)
  8098d0:	4909383a 	mul	r4,r9,r4
  8098d4:	1004d43a 	srli	r2,r2,16
  8098d8:	28ffffcc 	andi	r3,r5,65535
  8098dc:	20c9883a 	add	r4,r4,r3
  8098e0:	1105883a 	add	r2,r2,r4
  8098e4:	42000104 	addi	r8,r8,4
  8098e8:	1014d43a 	srli	r10,r2,16
  8098ec:	42ffed36 	bltu	r8,r11,8098a4 <__multiply+0x134>
  8098f0:	38800015 	stw	r2,0(r7)
  8098f4:	31800104 	addi	r6,r6,4
  8098f8:	33c0022e 	bgeu	r6,r15,809904 <__multiply+0x194>
  8098fc:	63000104 	addi	r12,r12,4
  809900:	003fc606 	br	80981c <__multiply+0xac>
  809904:	0400090e 	bge	zero,r16,80992c <__multiply+0x1bc>
  809908:	70bfff17 	ldw	r2,-4(r14)
  80990c:	70ffff04 	addi	r3,r14,-4
  809910:	10000326 	beq	r2,zero,809920 <__multiply+0x1b0>
  809914:	00000506 	br	80992c <__multiply+0x1bc>
  809918:	18800017 	ldw	r2,0(r3)
  80991c:	1000031e 	bne	r2,zero,80992c <__multiply+0x1bc>
  809920:	843fffc4 	addi	r16,r16,-1
  809924:	18ffff04 	addi	r3,r3,-4
  809928:	803ffb1e 	bne	r16,zero,809918 <__multiply+0x1a8>
  80992c:	a805883a 	mov	r2,r21
  809930:	ac000415 	stw	r16,16(r21)
  809934:	dfc00617 	ldw	ra,24(sp)
  809938:	dd400517 	ldw	r21,20(sp)
  80993c:	dd000417 	ldw	r20,16(sp)
  809940:	dcc00317 	ldw	r19,12(sp)
  809944:	dc800217 	ldw	r18,8(sp)
  809948:	dc400117 	ldw	r17,4(sp)
  80994c:	dc000017 	ldw	r16,0(sp)
  809950:	dec00704 	addi	sp,sp,28
  809954:	f800283a 	ret

00809958 <__i2b>:
  809958:	defffd04 	addi	sp,sp,-12
  80995c:	dc000015 	stw	r16,0(sp)
  809960:	04000044 	movi	r16,1
  809964:	dc800115 	stw	r18,4(sp)
  809968:	2825883a 	mov	r18,r5
  80996c:	800b883a 	mov	r5,r16
  809970:	dfc00215 	stw	ra,8(sp)
  809974:	08092600 	call	809260 <_Balloc>
  809978:	14000415 	stw	r16,16(r2)
  80997c:	14800515 	stw	r18,20(r2)
  809980:	dfc00217 	ldw	ra,8(sp)
  809984:	dc800117 	ldw	r18,4(sp)
  809988:	dc000017 	ldw	r16,0(sp)
  80998c:	dec00304 	addi	sp,sp,12
  809990:	f800283a 	ret

00809994 <__multadd>:
  809994:	defffa04 	addi	sp,sp,-24
  809998:	dc800215 	stw	r18,8(sp)
  80999c:	2c800417 	ldw	r18,16(r5)
  8099a0:	dd000415 	stw	r20,16(sp)
  8099a4:	dcc00315 	stw	r19,12(sp)
  8099a8:	dc000015 	stw	r16,0(sp)
  8099ac:	dfc00515 	stw	ra,20(sp)
  8099b0:	3821883a 	mov	r16,r7
  8099b4:	dc400115 	stw	r17,4(sp)
  8099b8:	2827883a 	mov	r19,r5
  8099bc:	2029883a 	mov	r20,r4
  8099c0:	2a000504 	addi	r8,r5,20
  8099c4:	000f883a 	mov	r7,zero
  8099c8:	40800017 	ldw	r2,0(r8)
  8099cc:	39c00044 	addi	r7,r7,1
  8099d0:	10ffffcc 	andi	r3,r2,65535
  8099d4:	1987383a 	mul	r3,r3,r6
  8099d8:	1004d43a 	srli	r2,r2,16
  8099dc:	1c07883a 	add	r3,r3,r16
  8099e0:	180ad43a 	srli	r5,r3,16
  8099e4:	1185383a 	mul	r2,r2,r6
  8099e8:	18ffffcc 	andi	r3,r3,65535
  8099ec:	1145883a 	add	r2,r2,r5
  8099f0:	1008943a 	slli	r4,r2,16
  8099f4:	1020d43a 	srli	r16,r2,16
  8099f8:	20c9883a 	add	r4,r4,r3
  8099fc:	41000015 	stw	r4,0(r8)
  809a00:	42000104 	addi	r8,r8,4
  809a04:	3cbff016 	blt	r7,r18,8099c8 <__multadd+0x34>
  809a08:	80000826 	beq	r16,zero,809a2c <__multadd+0x98>
  809a0c:	98800217 	ldw	r2,8(r19)
  809a10:	90800f0e 	bge	r18,r2,809a50 <__multadd+0xbc>
  809a14:	9485883a 	add	r2,r18,r18
  809a18:	1085883a 	add	r2,r2,r2
  809a1c:	14c5883a 	add	r2,r2,r19
  809a20:	90c00044 	addi	r3,r18,1
  809a24:	14000515 	stw	r16,20(r2)
  809a28:	98c00415 	stw	r3,16(r19)
  809a2c:	9805883a 	mov	r2,r19
  809a30:	dfc00517 	ldw	ra,20(sp)
  809a34:	dd000417 	ldw	r20,16(sp)
  809a38:	dcc00317 	ldw	r19,12(sp)
  809a3c:	dc800217 	ldw	r18,8(sp)
  809a40:	dc400117 	ldw	r17,4(sp)
  809a44:	dc000017 	ldw	r16,0(sp)
  809a48:	dec00604 	addi	sp,sp,24
  809a4c:	f800283a 	ret
  809a50:	99400117 	ldw	r5,4(r19)
  809a54:	a009883a 	mov	r4,r20
  809a58:	29400044 	addi	r5,r5,1
  809a5c:	08092600 	call	809260 <_Balloc>
  809a60:	99800417 	ldw	r6,16(r19)
  809a64:	99400304 	addi	r5,r19,12
  809a68:	11000304 	addi	r4,r2,12
  809a6c:	318d883a 	add	r6,r6,r6
  809a70:	318d883a 	add	r6,r6,r6
  809a74:	31800204 	addi	r6,r6,8
  809a78:	1023883a 	mov	r17,r2
  809a7c:	0803bc80 	call	803bc8 <memcpy>
  809a80:	980b883a 	mov	r5,r19
  809a84:	a009883a 	mov	r4,r20
  809a88:	0808ce00 	call	808ce0 <_Bfree>
  809a8c:	8827883a 	mov	r19,r17
  809a90:	003fe006 	br	809a14 <__multadd+0x80>

00809a94 <__pow5mult>:
  809a94:	defffa04 	addi	sp,sp,-24
  809a98:	308000cc 	andi	r2,r6,3
  809a9c:	dd000415 	stw	r20,16(sp)
  809aa0:	dcc00315 	stw	r19,12(sp)
  809aa4:	dc000015 	stw	r16,0(sp)
  809aa8:	dfc00515 	stw	ra,20(sp)
  809aac:	dc800215 	stw	r18,8(sp)
  809ab0:	dc400115 	stw	r17,4(sp)
  809ab4:	3021883a 	mov	r16,r6
  809ab8:	2027883a 	mov	r19,r4
  809abc:	2829883a 	mov	r20,r5
  809ac0:	10002b1e 	bne	r2,zero,809b70 <__pow5mult+0xdc>
  809ac4:	8025d0ba 	srai	r18,r16,2
  809ac8:	90001b26 	beq	r18,zero,809b38 <__pow5mult+0xa4>
  809acc:	9c001217 	ldw	r16,72(r19)
  809ad0:	8000081e 	bne	r16,zero,809af4 <__pow5mult+0x60>
  809ad4:	00003006 	br	809b98 <__pow5mult+0x104>
  809ad8:	800b883a 	mov	r5,r16
  809adc:	800d883a 	mov	r6,r16
  809ae0:	9809883a 	mov	r4,r19
  809ae4:	90001426 	beq	r18,zero,809b38 <__pow5mult+0xa4>
  809ae8:	80800017 	ldw	r2,0(r16)
  809aec:	10001b26 	beq	r2,zero,809b5c <__pow5mult+0xc8>
  809af0:	1021883a 	mov	r16,r2
  809af4:	9080004c 	andi	r2,r18,1
  809af8:	1005003a 	cmpeq	r2,r2,zero
  809afc:	9025d07a 	srai	r18,r18,1
  809b00:	800d883a 	mov	r6,r16
  809b04:	9809883a 	mov	r4,r19
  809b08:	a00b883a 	mov	r5,r20
  809b0c:	103ff21e 	bne	r2,zero,809ad8 <__pow5mult+0x44>
  809b10:	08097700 	call	809770 <__multiply>
  809b14:	a00b883a 	mov	r5,r20
  809b18:	9809883a 	mov	r4,r19
  809b1c:	1023883a 	mov	r17,r2
  809b20:	0808ce00 	call	808ce0 <_Bfree>
  809b24:	8829883a 	mov	r20,r17
  809b28:	800b883a 	mov	r5,r16
  809b2c:	800d883a 	mov	r6,r16
  809b30:	9809883a 	mov	r4,r19
  809b34:	903fec1e 	bne	r18,zero,809ae8 <__pow5mult+0x54>
  809b38:	a005883a 	mov	r2,r20
  809b3c:	dfc00517 	ldw	ra,20(sp)
  809b40:	dd000417 	ldw	r20,16(sp)
  809b44:	dcc00317 	ldw	r19,12(sp)
  809b48:	dc800217 	ldw	r18,8(sp)
  809b4c:	dc400117 	ldw	r17,4(sp)
  809b50:	dc000017 	ldw	r16,0(sp)
  809b54:	dec00604 	addi	sp,sp,24
  809b58:	f800283a 	ret
  809b5c:	08097700 	call	809770 <__multiply>
  809b60:	80800015 	stw	r2,0(r16)
  809b64:	1021883a 	mov	r16,r2
  809b68:	10000015 	stw	zero,0(r2)
  809b6c:	003fe106 	br	809af4 <__pow5mult+0x60>
  809b70:	1085883a 	add	r2,r2,r2
  809b74:	00c02074 	movhi	r3,129
  809b78:	18cede04 	addi	r3,r3,15224
  809b7c:	1085883a 	add	r2,r2,r2
  809b80:	10c5883a 	add	r2,r2,r3
  809b84:	11bfff17 	ldw	r6,-4(r2)
  809b88:	000f883a 	mov	r7,zero
  809b8c:	08099940 	call	809994 <__multadd>
  809b90:	1029883a 	mov	r20,r2
  809b94:	003fcb06 	br	809ac4 <__pow5mult+0x30>
  809b98:	9809883a 	mov	r4,r19
  809b9c:	01409c44 	movi	r5,625
  809ba0:	08099580 	call	809958 <__i2b>
  809ba4:	98801215 	stw	r2,72(r19)
  809ba8:	1021883a 	mov	r16,r2
  809bac:	10000015 	stw	zero,0(r2)
  809bb0:	003fd006 	br	809af4 <__pow5mult+0x60>

00809bb4 <__s2b>:
  809bb4:	defff904 	addi	sp,sp,-28
  809bb8:	dcc00315 	stw	r19,12(sp)
  809bbc:	dc800215 	stw	r18,8(sp)
  809bc0:	2827883a 	mov	r19,r5
  809bc4:	2025883a 	mov	r18,r4
  809bc8:	01400244 	movi	r5,9
  809bcc:	39000204 	addi	r4,r7,8
  809bd0:	dd000415 	stw	r20,16(sp)
  809bd4:	dc400115 	stw	r17,4(sp)
  809bd8:	dfc00615 	stw	ra,24(sp)
  809bdc:	dd400515 	stw	r21,20(sp)
  809be0:	dc000015 	stw	r16,0(sp)
  809be4:	3829883a 	mov	r20,r7
  809be8:	3023883a 	mov	r17,r6
  809bec:	080c0640 	call	80c064 <__divsi3>
  809bf0:	00c00044 	movi	r3,1
  809bf4:	1880350e 	bge	r3,r2,809ccc <__s2b+0x118>
  809bf8:	000b883a 	mov	r5,zero
  809bfc:	18c7883a 	add	r3,r3,r3
  809c00:	29400044 	addi	r5,r5,1
  809c04:	18bffd16 	blt	r3,r2,809bfc <__s2b+0x48>
  809c08:	9009883a 	mov	r4,r18
  809c0c:	08092600 	call	809260 <_Balloc>
  809c10:	1011883a 	mov	r8,r2
  809c14:	d8800717 	ldw	r2,28(sp)
  809c18:	00c00044 	movi	r3,1
  809c1c:	01800244 	movi	r6,9
  809c20:	40800515 	stw	r2,20(r8)
  809c24:	40c00415 	stw	r3,16(r8)
  809c28:	3440260e 	bge	r6,r17,809cc4 <__s2b+0x110>
  809c2c:	3021883a 	mov	r16,r6
  809c30:	99ab883a 	add	r21,r19,r6
  809c34:	9c05883a 	add	r2,r19,r16
  809c38:	11c00007 	ldb	r7,0(r2)
  809c3c:	400b883a 	mov	r5,r8
  809c40:	9009883a 	mov	r4,r18
  809c44:	39fff404 	addi	r7,r7,-48
  809c48:	01800284 	movi	r6,10
  809c4c:	08099940 	call	809994 <__multadd>
  809c50:	84000044 	addi	r16,r16,1
  809c54:	1011883a 	mov	r8,r2
  809c58:	8c3ff61e 	bne	r17,r16,809c34 <__s2b+0x80>
  809c5c:	ac45883a 	add	r2,r21,r17
  809c60:	117ffe04 	addi	r5,r2,-8
  809c64:	880d883a 	mov	r6,r17
  809c68:	35000c0e 	bge	r6,r20,809c9c <__s2b+0xe8>
  809c6c:	a185c83a 	sub	r2,r20,r6
  809c70:	2821883a 	mov	r16,r5
  809c74:	28a3883a 	add	r17,r5,r2
  809c78:	81c00007 	ldb	r7,0(r16)
  809c7c:	400b883a 	mov	r5,r8
  809c80:	9009883a 	mov	r4,r18
  809c84:	39fff404 	addi	r7,r7,-48
  809c88:	01800284 	movi	r6,10
  809c8c:	08099940 	call	809994 <__multadd>
  809c90:	84000044 	addi	r16,r16,1
  809c94:	1011883a 	mov	r8,r2
  809c98:	847ff71e 	bne	r16,r17,809c78 <__s2b+0xc4>
  809c9c:	4005883a 	mov	r2,r8
  809ca0:	dfc00617 	ldw	ra,24(sp)
  809ca4:	dd400517 	ldw	r21,20(sp)
  809ca8:	dd000417 	ldw	r20,16(sp)
  809cac:	dcc00317 	ldw	r19,12(sp)
  809cb0:	dc800217 	ldw	r18,8(sp)
  809cb4:	dc400117 	ldw	r17,4(sp)
  809cb8:	dc000017 	ldw	r16,0(sp)
  809cbc:	dec00704 	addi	sp,sp,28
  809cc0:	f800283a 	ret
  809cc4:	99400284 	addi	r5,r19,10
  809cc8:	003fe706 	br	809c68 <__s2b+0xb4>
  809ccc:	000b883a 	mov	r5,zero
  809cd0:	003fcd06 	br	809c08 <__s2b+0x54>

00809cd4 <putc>:
  809cd4:	defffc04 	addi	sp,sp,-16
  809cd8:	dc800215 	stw	r18,8(sp)
  809cdc:	04802074 	movhi	r18,129
  809ce0:	94961004 	addi	r18,r18,22592
  809ce4:	90c00017 	ldw	r3,0(r18)
  809ce8:	dc400115 	stw	r17,4(sp)
  809cec:	dc000015 	stw	r16,0(sp)
  809cf0:	dfc00315 	stw	ra,12(sp)
  809cf4:	2023883a 	mov	r17,r4
  809cf8:	2821883a 	mov	r16,r5
  809cfc:	18000226 	beq	r3,zero,809d08 <putc+0x34>
  809d00:	18800e17 	ldw	r2,56(r3)
  809d04:	10001126 	beq	r2,zero,809d4c <putc+0x78>
  809d08:	80800217 	ldw	r2,8(r16)
  809d0c:	10ffffc4 	addi	r3,r2,-1
  809d10:	80c00215 	stw	r3,8(r16)
  809d14:	18001316 	blt	r3,zero,809d64 <putc+0x90>
  809d18:	80800017 	ldw	r2,0(r16)
  809d1c:	14400005 	stb	r17,0(r2)
  809d20:	80c00017 	ldw	r3,0(r16)
  809d24:	18800044 	addi	r2,r3,1
  809d28:	18c00003 	ldbu	r3,0(r3)
  809d2c:	80800015 	stw	r2,0(r16)
  809d30:	1805883a 	mov	r2,r3
  809d34:	dfc00317 	ldw	ra,12(sp)
  809d38:	dc800217 	ldw	r18,8(sp)
  809d3c:	dc400117 	ldw	r17,4(sp)
  809d40:	dc000017 	ldw	r16,0(sp)
  809d44:	dec00404 	addi	sp,sp,16
  809d48:	f800283a 	ret
  809d4c:	1809883a 	mov	r4,r3
  809d50:	0807b780 	call	807b78 <__sinit>
  809d54:	80800217 	ldw	r2,8(r16)
  809d58:	10ffffc4 	addi	r3,r2,-1
  809d5c:	80c00215 	stw	r3,8(r16)
  809d60:	183fed0e 	bge	r3,zero,809d18 <putc+0x44>
  809d64:	80800617 	ldw	r2,24(r16)
  809d68:	18800f16 	blt	r3,r2,809da8 <putc+0xd4>
  809d6c:	80800017 	ldw	r2,0(r16)
  809d70:	14400005 	stb	r17,0(r2)
  809d74:	81000017 	ldw	r4,0(r16)
  809d78:	00800284 	movi	r2,10
  809d7c:	20c00003 	ldbu	r3,0(r4)
  809d80:	18801226 	beq	r3,r2,809dcc <putc+0xf8>
  809d84:	20800044 	addi	r2,r4,1
  809d88:	80800015 	stw	r2,0(r16)
  809d8c:	1805883a 	mov	r2,r3
  809d90:	dfc00317 	ldw	ra,12(sp)
  809d94:	dc800217 	ldw	r18,8(sp)
  809d98:	dc400117 	ldw	r17,4(sp)
  809d9c:	dc000017 	ldw	r16,0(sp)
  809da0:	dec00404 	addi	sp,sp,16
  809da4:	f800283a 	ret
  809da8:	91000017 	ldw	r4,0(r18)
  809dac:	880b883a 	mov	r5,r17
  809db0:	800d883a 	mov	r6,r16
  809db4:	dfc00317 	ldw	ra,12(sp)
  809db8:	dc800217 	ldw	r18,8(sp)
  809dbc:	dc400117 	ldw	r17,4(sp)
  809dc0:	dc000017 	ldw	r16,0(sp)
  809dc4:	dec00404 	addi	sp,sp,16
  809dc8:	080a90c1 	jmpi	80a90c <__swbuf_r>
  809dcc:	91000017 	ldw	r4,0(r18)
  809dd0:	180b883a 	mov	r5,r3
  809dd4:	003ff606 	br	809db0 <putc+0xdc>

00809dd8 <_putc_r>:
  809dd8:	defffc04 	addi	sp,sp,-16
  809ddc:	dc400215 	stw	r17,8(sp)
  809de0:	dc000115 	stw	r16,4(sp)
  809de4:	dfc00315 	stw	ra,12(sp)
  809de8:	2021883a 	mov	r16,r4
  809dec:	2823883a 	mov	r17,r5
  809df0:	20000226 	beq	r4,zero,809dfc <_putc_r+0x24>
  809df4:	20800e17 	ldw	r2,56(r4)
  809df8:	10001026 	beq	r2,zero,809e3c <_putc_r+0x64>
  809dfc:	30800217 	ldw	r2,8(r6)
  809e00:	10ffffc4 	addi	r3,r2,-1
  809e04:	30c00215 	stw	r3,8(r6)
  809e08:	18001316 	blt	r3,zero,809e58 <_putc_r+0x80>
  809e0c:	30800017 	ldw	r2,0(r6)
  809e10:	14400005 	stb	r17,0(r2)
  809e14:	30c00017 	ldw	r3,0(r6)
  809e18:	18800044 	addi	r2,r3,1
  809e1c:	18c00003 	ldbu	r3,0(r3)
  809e20:	30800015 	stw	r2,0(r6)
  809e24:	1805883a 	mov	r2,r3
  809e28:	dfc00317 	ldw	ra,12(sp)
  809e2c:	dc400217 	ldw	r17,8(sp)
  809e30:	dc000117 	ldw	r16,4(sp)
  809e34:	dec00404 	addi	sp,sp,16
  809e38:	f800283a 	ret
  809e3c:	d9800015 	stw	r6,0(sp)
  809e40:	0807b780 	call	807b78 <__sinit>
  809e44:	d9800017 	ldw	r6,0(sp)
  809e48:	30800217 	ldw	r2,8(r6)
  809e4c:	10ffffc4 	addi	r3,r2,-1
  809e50:	30c00215 	stw	r3,8(r6)
  809e54:	183fed0e 	bge	r3,zero,809e0c <_putc_r+0x34>
  809e58:	30800617 	ldw	r2,24(r6)
  809e5c:	18800e16 	blt	r3,r2,809e98 <_putc_r+0xc0>
  809e60:	30800017 	ldw	r2,0(r6)
  809e64:	14400005 	stb	r17,0(r2)
  809e68:	31000017 	ldw	r4,0(r6)
  809e6c:	00800284 	movi	r2,10
  809e70:	20c00003 	ldbu	r3,0(r4)
  809e74:	18800f26 	beq	r3,r2,809eb4 <_putc_r+0xdc>
  809e78:	20800044 	addi	r2,r4,1
  809e7c:	30800015 	stw	r2,0(r6)
  809e80:	1805883a 	mov	r2,r3
  809e84:	dfc00317 	ldw	ra,12(sp)
  809e88:	dc400217 	ldw	r17,8(sp)
  809e8c:	dc000117 	ldw	r16,4(sp)
  809e90:	dec00404 	addi	sp,sp,16
  809e94:	f800283a 	ret
  809e98:	8009883a 	mov	r4,r16
  809e9c:	880b883a 	mov	r5,r17
  809ea0:	dfc00317 	ldw	ra,12(sp)
  809ea4:	dc400217 	ldw	r17,8(sp)
  809ea8:	dc000117 	ldw	r16,4(sp)
  809eac:	dec00404 	addi	sp,sp,16
  809eb0:	080a90c1 	jmpi	80a90c <__swbuf_r>
  809eb4:	8009883a 	mov	r4,r16
  809eb8:	180b883a 	mov	r5,r3
  809ebc:	003ff806 	br	809ea0 <_putc_r+0xc8>

00809ec0 <_realloc_r>:
  809ec0:	defff404 	addi	sp,sp,-48
  809ec4:	dd800815 	stw	r22,32(sp)
  809ec8:	dc800415 	stw	r18,16(sp)
  809ecc:	dc400315 	stw	r17,12(sp)
  809ed0:	dfc00b15 	stw	ra,44(sp)
  809ed4:	df000a15 	stw	fp,40(sp)
  809ed8:	ddc00915 	stw	r23,36(sp)
  809edc:	dd400715 	stw	r21,28(sp)
  809ee0:	dd000615 	stw	r20,24(sp)
  809ee4:	dcc00515 	stw	r19,20(sp)
  809ee8:	dc000215 	stw	r16,8(sp)
  809eec:	2825883a 	mov	r18,r5
  809ef0:	3023883a 	mov	r17,r6
  809ef4:	202d883a 	mov	r22,r4
  809ef8:	2800c926 	beq	r5,zero,80a220 <_realloc_r+0x360>
  809efc:	080c53c0 	call	80c53c <__malloc_lock>
  809f00:	943ffe04 	addi	r16,r18,-8
  809f04:	88c002c4 	addi	r3,r17,11
  809f08:	00800584 	movi	r2,22
  809f0c:	82000117 	ldw	r8,4(r16)
  809f10:	10c01b2e 	bgeu	r2,r3,809f80 <_realloc_r+0xc0>
  809f14:	00bffe04 	movi	r2,-8
  809f18:	188e703a 	and	r7,r3,r2
  809f1c:	3839883a 	mov	fp,r7
  809f20:	38001a16 	blt	r7,zero,809f8c <_realloc_r+0xcc>
  809f24:	e4401936 	bltu	fp,r17,809f8c <_realloc_r+0xcc>
  809f28:	013fff04 	movi	r4,-4
  809f2c:	4126703a 	and	r19,r8,r4
  809f30:	99c02616 	blt	r19,r7,809fcc <_realloc_r+0x10c>
  809f34:	802b883a 	mov	r21,r16
  809f38:	9829883a 	mov	r20,r19
  809f3c:	84000204 	addi	r16,r16,8
  809f40:	a80f883a 	mov	r7,r21
  809f44:	a70dc83a 	sub	r6,r20,fp
  809f48:	008003c4 	movi	r2,15
  809f4c:	1180c136 	bltu	r2,r6,80a254 <_realloc_r+0x394>
  809f50:	38800117 	ldw	r2,4(r7)
  809f54:	a549883a 	add	r4,r20,r21
  809f58:	1080004c 	andi	r2,r2,1
  809f5c:	a084b03a 	or	r2,r20,r2
  809f60:	38800115 	stw	r2,4(r7)
  809f64:	20c00117 	ldw	r3,4(r4)
  809f68:	18c00054 	ori	r3,r3,1
  809f6c:	20c00115 	stw	r3,4(r4)
  809f70:	b009883a 	mov	r4,r22
  809f74:	080c55c0 	call	80c55c <__malloc_unlock>
  809f78:	8023883a 	mov	r17,r16
  809f7c:	00000606 	br	809f98 <_realloc_r+0xd8>
  809f80:	01c00404 	movi	r7,16
  809f84:	3839883a 	mov	fp,r7
  809f88:	e47fe72e 	bgeu	fp,r17,809f28 <_realloc_r+0x68>
  809f8c:	00800304 	movi	r2,12
  809f90:	0023883a 	mov	r17,zero
  809f94:	b0800015 	stw	r2,0(r22)
  809f98:	8805883a 	mov	r2,r17
  809f9c:	dfc00b17 	ldw	ra,44(sp)
  809fa0:	df000a17 	ldw	fp,40(sp)
  809fa4:	ddc00917 	ldw	r23,36(sp)
  809fa8:	dd800817 	ldw	r22,32(sp)
  809fac:	dd400717 	ldw	r21,28(sp)
  809fb0:	dd000617 	ldw	r20,24(sp)
  809fb4:	dcc00517 	ldw	r19,20(sp)
  809fb8:	dc800417 	ldw	r18,16(sp)
  809fbc:	dc400317 	ldw	r17,12(sp)
  809fc0:	dc000217 	ldw	r16,8(sp)
  809fc4:	dec00c04 	addi	sp,sp,48
  809fc8:	f800283a 	ret
  809fcc:	00802074 	movhi	r2,129
  809fd0:	10906904 	addi	r2,r2,16804
  809fd4:	12400217 	ldw	r9,8(r2)
  809fd8:	84cd883a 	add	r6,r16,r19
  809fdc:	802b883a 	mov	r21,r16
  809fe0:	3240b926 	beq	r6,r9,80a2c8 <_realloc_r+0x408>
  809fe4:	31400117 	ldw	r5,4(r6)
  809fe8:	00bfff84 	movi	r2,-2
  809fec:	2884703a 	and	r2,r5,r2
  809ff0:	1185883a 	add	r2,r2,r6
  809ff4:	10c00117 	ldw	r3,4(r2)
  809ff8:	18c0004c 	andi	r3,r3,1
  809ffc:	1807003a 	cmpeq	r3,r3,zero
  80a000:	1800a326 	beq	r3,zero,80a290 <_realloc_r+0x3d0>
  80a004:	2908703a 	and	r4,r5,r4
  80a008:	9929883a 	add	r20,r19,r4
  80a00c:	a1c0a30e 	bge	r20,r7,80a29c <_realloc_r+0x3dc>
  80a010:	4080004c 	andi	r2,r8,1
  80a014:	1000551e 	bne	r2,zero,80a16c <_realloc_r+0x2ac>
  80a018:	80800017 	ldw	r2,0(r16)
  80a01c:	80afc83a 	sub	r23,r16,r2
  80a020:	b8c00117 	ldw	r3,4(r23)
  80a024:	00bfff04 	movi	r2,-4
  80a028:	1884703a 	and	r2,r3,r2
  80a02c:	30002e26 	beq	r6,zero,80a0e8 <_realloc_r+0x228>
  80a030:	3240b926 	beq	r6,r9,80a318 <_realloc_r+0x458>
  80a034:	98a9883a 	add	r20,r19,r2
  80a038:	2509883a 	add	r4,r4,r20
  80a03c:	d9000015 	stw	r4,0(sp)
  80a040:	21c02a16 	blt	r4,r7,80a0ec <_realloc_r+0x22c>
  80a044:	30800317 	ldw	r2,12(r6)
  80a048:	30c00217 	ldw	r3,8(r6)
  80a04c:	01400904 	movi	r5,36
  80a050:	99bfff04 	addi	r6,r19,-4
  80a054:	18800315 	stw	r2,12(r3)
  80a058:	10c00215 	stw	r3,8(r2)
  80a05c:	b9000317 	ldw	r4,12(r23)
  80a060:	b8800217 	ldw	r2,8(r23)
  80a064:	b82b883a 	mov	r21,r23
  80a068:	bc000204 	addi	r16,r23,8
  80a06c:	20800215 	stw	r2,8(r4)
  80a070:	11000315 	stw	r4,12(r2)
  80a074:	2980e436 	bltu	r5,r6,80a408 <_realloc_r+0x548>
  80a078:	008004c4 	movi	r2,19
  80a07c:	9009883a 	mov	r4,r18
  80a080:	8011883a 	mov	r8,r16
  80a084:	11800f2e 	bgeu	r2,r6,80a0c4 <_realloc_r+0x204>
  80a088:	90800017 	ldw	r2,0(r18)
  80a08c:	ba000404 	addi	r8,r23,16
  80a090:	91000204 	addi	r4,r18,8
  80a094:	b8800215 	stw	r2,8(r23)
  80a098:	90c00117 	ldw	r3,4(r18)
  80a09c:	008006c4 	movi	r2,27
  80a0a0:	b8c00315 	stw	r3,12(r23)
  80a0a4:	1180072e 	bgeu	r2,r6,80a0c4 <_realloc_r+0x204>
  80a0a8:	90c00217 	ldw	r3,8(r18)
  80a0ac:	ba000604 	addi	r8,r23,24
  80a0b0:	91000404 	addi	r4,r18,16
  80a0b4:	b8c00415 	stw	r3,16(r23)
  80a0b8:	90800317 	ldw	r2,12(r18)
  80a0bc:	b8800515 	stw	r2,20(r23)
  80a0c0:	3140e726 	beq	r6,r5,80a460 <_realloc_r+0x5a0>
  80a0c4:	20800017 	ldw	r2,0(r4)
  80a0c8:	dd000017 	ldw	r20,0(sp)
  80a0cc:	b80f883a 	mov	r7,r23
  80a0d0:	40800015 	stw	r2,0(r8)
  80a0d4:	20c00117 	ldw	r3,4(r4)
  80a0d8:	40c00115 	stw	r3,4(r8)
  80a0dc:	20800217 	ldw	r2,8(r4)
  80a0e0:	40800215 	stw	r2,8(r8)
  80a0e4:	003f9706 	br	809f44 <_realloc_r+0x84>
  80a0e8:	98a9883a 	add	r20,r19,r2
  80a0ec:	a1c01f16 	blt	r20,r7,80a16c <_realloc_r+0x2ac>
  80a0f0:	b8c00317 	ldw	r3,12(r23)
  80a0f4:	b8800217 	ldw	r2,8(r23)
  80a0f8:	99bfff04 	addi	r6,r19,-4
  80a0fc:	01400904 	movi	r5,36
  80a100:	b82b883a 	mov	r21,r23
  80a104:	18800215 	stw	r2,8(r3)
  80a108:	10c00315 	stw	r3,12(r2)
  80a10c:	bc000204 	addi	r16,r23,8
  80a110:	2980c336 	bltu	r5,r6,80a420 <_realloc_r+0x560>
  80a114:	008004c4 	movi	r2,19
  80a118:	9009883a 	mov	r4,r18
  80a11c:	8011883a 	mov	r8,r16
  80a120:	11800f2e 	bgeu	r2,r6,80a160 <_realloc_r+0x2a0>
  80a124:	90800017 	ldw	r2,0(r18)
  80a128:	ba000404 	addi	r8,r23,16
  80a12c:	91000204 	addi	r4,r18,8
  80a130:	b8800215 	stw	r2,8(r23)
  80a134:	90c00117 	ldw	r3,4(r18)
  80a138:	008006c4 	movi	r2,27
  80a13c:	b8c00315 	stw	r3,12(r23)
  80a140:	1180072e 	bgeu	r2,r6,80a160 <_realloc_r+0x2a0>
  80a144:	90c00217 	ldw	r3,8(r18)
  80a148:	ba000604 	addi	r8,r23,24
  80a14c:	91000404 	addi	r4,r18,16
  80a150:	b8c00415 	stw	r3,16(r23)
  80a154:	90800317 	ldw	r2,12(r18)
  80a158:	b8800515 	stw	r2,20(r23)
  80a15c:	3140c726 	beq	r6,r5,80a47c <_realloc_r+0x5bc>
  80a160:	20800017 	ldw	r2,0(r4)
  80a164:	b80f883a 	mov	r7,r23
  80a168:	003fd906 	br	80a0d0 <_realloc_r+0x210>
  80a16c:	880b883a 	mov	r5,r17
  80a170:	b009883a 	mov	r4,r22
  80a174:	08034880 	call	803488 <_malloc_r>
  80a178:	1023883a 	mov	r17,r2
  80a17c:	10002526 	beq	r2,zero,80a214 <_realloc_r+0x354>
  80a180:	80800117 	ldw	r2,4(r16)
  80a184:	00ffff84 	movi	r3,-2
  80a188:	893ffe04 	addi	r4,r17,-8
  80a18c:	10c4703a 	and	r2,r2,r3
  80a190:	8085883a 	add	r2,r16,r2
  80a194:	20809526 	beq	r4,r2,80a3ec <_realloc_r+0x52c>
  80a198:	99bfff04 	addi	r6,r19,-4
  80a19c:	01c00904 	movi	r7,36
  80a1a0:	39804536 	bltu	r7,r6,80a2b8 <_realloc_r+0x3f8>
  80a1a4:	008004c4 	movi	r2,19
  80a1a8:	9009883a 	mov	r4,r18
  80a1ac:	880b883a 	mov	r5,r17
  80a1b0:	11800f2e 	bgeu	r2,r6,80a1f0 <_realloc_r+0x330>
  80a1b4:	90800017 	ldw	r2,0(r18)
  80a1b8:	89400204 	addi	r5,r17,8
  80a1bc:	91000204 	addi	r4,r18,8
  80a1c0:	88800015 	stw	r2,0(r17)
  80a1c4:	90c00117 	ldw	r3,4(r18)
  80a1c8:	008006c4 	movi	r2,27
  80a1cc:	88c00115 	stw	r3,4(r17)
  80a1d0:	1180072e 	bgeu	r2,r6,80a1f0 <_realloc_r+0x330>
  80a1d4:	90c00217 	ldw	r3,8(r18)
  80a1d8:	89400404 	addi	r5,r17,16
  80a1dc:	91000404 	addi	r4,r18,16
  80a1e0:	88c00215 	stw	r3,8(r17)
  80a1e4:	90800317 	ldw	r2,12(r18)
  80a1e8:	88800315 	stw	r2,12(r17)
  80a1ec:	31c09126 	beq	r6,r7,80a434 <_realloc_r+0x574>
  80a1f0:	20800017 	ldw	r2,0(r4)
  80a1f4:	28800015 	stw	r2,0(r5)
  80a1f8:	20c00117 	ldw	r3,4(r4)
  80a1fc:	28c00115 	stw	r3,4(r5)
  80a200:	20800217 	ldw	r2,8(r4)
  80a204:	28800215 	stw	r2,8(r5)
  80a208:	900b883a 	mov	r5,r18
  80a20c:	b009883a 	mov	r4,r22
  80a210:	0807efc0 	call	807efc <_free_r>
  80a214:	b009883a 	mov	r4,r22
  80a218:	080c55c0 	call	80c55c <__malloc_unlock>
  80a21c:	003f5e06 	br	809f98 <_realloc_r+0xd8>
  80a220:	300b883a 	mov	r5,r6
  80a224:	dfc00b17 	ldw	ra,44(sp)
  80a228:	df000a17 	ldw	fp,40(sp)
  80a22c:	ddc00917 	ldw	r23,36(sp)
  80a230:	dd800817 	ldw	r22,32(sp)
  80a234:	dd400717 	ldw	r21,28(sp)
  80a238:	dd000617 	ldw	r20,24(sp)
  80a23c:	dcc00517 	ldw	r19,20(sp)
  80a240:	dc800417 	ldw	r18,16(sp)
  80a244:	dc400317 	ldw	r17,12(sp)
  80a248:	dc000217 	ldw	r16,8(sp)
  80a24c:	dec00c04 	addi	sp,sp,48
  80a250:	08034881 	jmpi	803488 <_malloc_r>
  80a254:	38800117 	ldw	r2,4(r7)
  80a258:	e54b883a 	add	r5,fp,r21
  80a25c:	31000054 	ori	r4,r6,1
  80a260:	1080004c 	andi	r2,r2,1
  80a264:	1704b03a 	or	r2,r2,fp
  80a268:	38800115 	stw	r2,4(r7)
  80a26c:	29000115 	stw	r4,4(r5)
  80a270:	2987883a 	add	r3,r5,r6
  80a274:	18800117 	ldw	r2,4(r3)
  80a278:	29400204 	addi	r5,r5,8
  80a27c:	b009883a 	mov	r4,r22
  80a280:	10800054 	ori	r2,r2,1
  80a284:	18800115 	stw	r2,4(r3)
  80a288:	0807efc0 	call	807efc <_free_r>
  80a28c:	003f3806 	br	809f70 <_realloc_r+0xb0>
  80a290:	000d883a 	mov	r6,zero
  80a294:	0009883a 	mov	r4,zero
  80a298:	003f5d06 	br	80a010 <_realloc_r+0x150>
  80a29c:	30c00217 	ldw	r3,8(r6)
  80a2a0:	30800317 	ldw	r2,12(r6)
  80a2a4:	800f883a 	mov	r7,r16
  80a2a8:	84000204 	addi	r16,r16,8
  80a2ac:	10c00215 	stw	r3,8(r2)
  80a2b0:	18800315 	stw	r2,12(r3)
  80a2b4:	003f2306 	br	809f44 <_realloc_r+0x84>
  80a2b8:	8809883a 	mov	r4,r17
  80a2bc:	900b883a 	mov	r5,r18
  80a2c0:	0808b680 	call	808b68 <memmove>
  80a2c4:	003fd006 	br	80a208 <_realloc_r+0x348>
  80a2c8:	30800117 	ldw	r2,4(r6)
  80a2cc:	e0c00404 	addi	r3,fp,16
  80a2d0:	1108703a 	and	r4,r2,r4
  80a2d4:	9905883a 	add	r2,r19,r4
  80a2d8:	10ff4d16 	blt	r2,r3,80a010 <_realloc_r+0x150>
  80a2dc:	1705c83a 	sub	r2,r2,fp
  80a2e0:	870b883a 	add	r5,r16,fp
  80a2e4:	10800054 	ori	r2,r2,1
  80a2e8:	28800115 	stw	r2,4(r5)
  80a2ec:	80c00117 	ldw	r3,4(r16)
  80a2f0:	00802074 	movhi	r2,129
  80a2f4:	10906904 	addi	r2,r2,16804
  80a2f8:	b009883a 	mov	r4,r22
  80a2fc:	18c0004c 	andi	r3,r3,1
  80a300:	e0c6b03a 	or	r3,fp,r3
  80a304:	11400215 	stw	r5,8(r2)
  80a308:	80c00115 	stw	r3,4(r16)
  80a30c:	080c55c0 	call	80c55c <__malloc_unlock>
  80a310:	84400204 	addi	r17,r16,8
  80a314:	003f2006 	br	809f98 <_realloc_r+0xd8>
  80a318:	98a9883a 	add	r20,r19,r2
  80a31c:	2509883a 	add	r4,r4,r20
  80a320:	e0800404 	addi	r2,fp,16
  80a324:	d9000115 	stw	r4,4(sp)
  80a328:	20bf7016 	blt	r4,r2,80a0ec <_realloc_r+0x22c>
  80a32c:	b8c00317 	ldw	r3,12(r23)
  80a330:	b8800217 	ldw	r2,8(r23)
  80a334:	99bfff04 	addi	r6,r19,-4
  80a338:	01400904 	movi	r5,36
  80a33c:	18800215 	stw	r2,8(r3)
  80a340:	10c00315 	stw	r3,12(r2)
  80a344:	bc400204 	addi	r17,r23,8
  80a348:	29804136 	bltu	r5,r6,80a450 <_realloc_r+0x590>
  80a34c:	008004c4 	movi	r2,19
  80a350:	9009883a 	mov	r4,r18
  80a354:	880f883a 	mov	r7,r17
  80a358:	11800f2e 	bgeu	r2,r6,80a398 <_realloc_r+0x4d8>
  80a35c:	90800017 	ldw	r2,0(r18)
  80a360:	b9c00404 	addi	r7,r23,16
  80a364:	91000204 	addi	r4,r18,8
  80a368:	b8800215 	stw	r2,8(r23)
  80a36c:	90c00117 	ldw	r3,4(r18)
  80a370:	008006c4 	movi	r2,27
  80a374:	b8c00315 	stw	r3,12(r23)
  80a378:	1180072e 	bgeu	r2,r6,80a398 <_realloc_r+0x4d8>
  80a37c:	90c00217 	ldw	r3,8(r18)
  80a380:	b9c00604 	addi	r7,r23,24
  80a384:	91000404 	addi	r4,r18,16
  80a388:	b8c00415 	stw	r3,16(r23)
  80a38c:	90800317 	ldw	r2,12(r18)
  80a390:	b8800515 	stw	r2,20(r23)
  80a394:	31404026 	beq	r6,r5,80a498 <_realloc_r+0x5d8>
  80a398:	20800017 	ldw	r2,0(r4)
  80a39c:	38800015 	stw	r2,0(r7)
  80a3a0:	20c00117 	ldw	r3,4(r4)
  80a3a4:	38c00115 	stw	r3,4(r7)
  80a3a8:	20800217 	ldw	r2,8(r4)
  80a3ac:	38800215 	stw	r2,8(r7)
  80a3b0:	d8c00117 	ldw	r3,4(sp)
  80a3b4:	bf0b883a 	add	r5,r23,fp
  80a3b8:	b009883a 	mov	r4,r22
  80a3bc:	1f05c83a 	sub	r2,r3,fp
  80a3c0:	10800054 	ori	r2,r2,1
  80a3c4:	28800115 	stw	r2,4(r5)
  80a3c8:	b8c00117 	ldw	r3,4(r23)
  80a3cc:	00802074 	movhi	r2,129
  80a3d0:	10906904 	addi	r2,r2,16804
  80a3d4:	11400215 	stw	r5,8(r2)
  80a3d8:	18c0004c 	andi	r3,r3,1
  80a3dc:	e0c6b03a 	or	r3,fp,r3
  80a3e0:	b8c00115 	stw	r3,4(r23)
  80a3e4:	080c55c0 	call	80c55c <__malloc_unlock>
  80a3e8:	003eeb06 	br	809f98 <_realloc_r+0xd8>
  80a3ec:	20800117 	ldw	r2,4(r4)
  80a3f0:	00ffff04 	movi	r3,-4
  80a3f4:	800f883a 	mov	r7,r16
  80a3f8:	10c4703a 	and	r2,r2,r3
  80a3fc:	98a9883a 	add	r20,r19,r2
  80a400:	84000204 	addi	r16,r16,8
  80a404:	003ecf06 	br	809f44 <_realloc_r+0x84>
  80a408:	900b883a 	mov	r5,r18
  80a40c:	8009883a 	mov	r4,r16
  80a410:	0808b680 	call	808b68 <memmove>
  80a414:	dd000017 	ldw	r20,0(sp)
  80a418:	b80f883a 	mov	r7,r23
  80a41c:	003ec906 	br	809f44 <_realloc_r+0x84>
  80a420:	900b883a 	mov	r5,r18
  80a424:	8009883a 	mov	r4,r16
  80a428:	0808b680 	call	808b68 <memmove>
  80a42c:	b80f883a 	mov	r7,r23
  80a430:	003ec406 	br	809f44 <_realloc_r+0x84>
  80a434:	90c00417 	ldw	r3,16(r18)
  80a438:	89400604 	addi	r5,r17,24
  80a43c:	91000604 	addi	r4,r18,24
  80a440:	88c00415 	stw	r3,16(r17)
  80a444:	90800517 	ldw	r2,20(r18)
  80a448:	88800515 	stw	r2,20(r17)
  80a44c:	003f6806 	br	80a1f0 <_realloc_r+0x330>
  80a450:	900b883a 	mov	r5,r18
  80a454:	8809883a 	mov	r4,r17
  80a458:	0808b680 	call	808b68 <memmove>
  80a45c:	003fd406 	br	80a3b0 <_realloc_r+0x4f0>
  80a460:	90c00417 	ldw	r3,16(r18)
  80a464:	91000604 	addi	r4,r18,24
  80a468:	ba000804 	addi	r8,r23,32
  80a46c:	b8c00615 	stw	r3,24(r23)
  80a470:	90800517 	ldw	r2,20(r18)
  80a474:	b8800715 	stw	r2,28(r23)
  80a478:	003f1206 	br	80a0c4 <_realloc_r+0x204>
  80a47c:	90c00417 	ldw	r3,16(r18)
  80a480:	91000604 	addi	r4,r18,24
  80a484:	ba000804 	addi	r8,r23,32
  80a488:	b8c00615 	stw	r3,24(r23)
  80a48c:	90800517 	ldw	r2,20(r18)
  80a490:	b8800715 	stw	r2,28(r23)
  80a494:	003f3206 	br	80a160 <_realloc_r+0x2a0>
  80a498:	90c00417 	ldw	r3,16(r18)
  80a49c:	91000604 	addi	r4,r18,24
  80a4a0:	b9c00804 	addi	r7,r23,32
  80a4a4:	b8c00615 	stw	r3,24(r23)
  80a4a8:	90800517 	ldw	r2,20(r18)
  80a4ac:	b8800715 	stw	r2,28(r23)
  80a4b0:	003fb906 	br	80a398 <_realloc_r+0x4d8>

0080a4b4 <__srefill_r>:
  80a4b4:	defffd04 	addi	sp,sp,-12
  80a4b8:	dc400115 	stw	r17,4(sp)
  80a4bc:	dc000015 	stw	r16,0(sp)
  80a4c0:	dfc00215 	stw	ra,8(sp)
  80a4c4:	2023883a 	mov	r17,r4
  80a4c8:	2821883a 	mov	r16,r5
  80a4cc:	20000226 	beq	r4,zero,80a4d8 <__srefill_r+0x24>
  80a4d0:	20800e17 	ldw	r2,56(r4)
  80a4d4:	10004126 	beq	r2,zero,80a5dc <__srefill_r+0x128>
  80a4d8:	80c0030b 	ldhu	r3,12(r16)
  80a4dc:	80000115 	stw	zero,4(r16)
  80a4e0:	1880080c 	andi	r2,r3,32
  80a4e4:	1000361e 	bne	r2,zero,80a5c0 <__srefill_r+0x10c>
  80a4e8:	1880010c 	andi	r2,r3,4
  80a4ec:	1000211e 	bne	r2,zero,80a574 <__srefill_r+0xc0>
  80a4f0:	1880040c 	andi	r2,r3,16
  80a4f4:	10005026 	beq	r2,zero,80a638 <__srefill_r+0x184>
  80a4f8:	1880020c 	andi	r2,r3,8
  80a4fc:	1000541e 	bne	r2,zero,80a650 <__srefill_r+0x19c>
  80a500:	8080030b 	ldhu	r2,12(r16)
  80a504:	10800114 	ori	r2,r2,4
  80a508:	8080030d 	sth	r2,12(r16)
  80a50c:	80800417 	ldw	r2,16(r16)
  80a510:	10004526 	beq	r2,zero,80a628 <__srefill_r+0x174>
  80a514:	8080030b 	ldhu	r2,12(r16)
  80a518:	108000cc 	andi	r2,r2,3
  80a51c:	1000361e 	bne	r2,zero,80a5f8 <__srefill_r+0x144>
  80a520:	81800417 	ldw	r6,16(r16)
  80a524:	80c00817 	ldw	r3,32(r16)
  80a528:	81400717 	ldw	r5,28(r16)
  80a52c:	81c00517 	ldw	r7,20(r16)
  80a530:	8809883a 	mov	r4,r17
  80a534:	81800015 	stw	r6,0(r16)
  80a538:	183ee83a 	callr	r3
  80a53c:	80c0030b 	ldhu	r3,12(r16)
  80a540:	1009883a 	mov	r4,r2
  80a544:	80800115 	stw	r2,4(r16)
  80a548:	00b7ffc4 	movi	r2,-8193
  80a54c:	1884703a 	and	r2,r3,r2
  80a550:	8080030d 	sth	r2,12(r16)
  80a554:	0100230e 	bge	zero,r4,80a5e4 <__srefill_r+0x130>
  80a558:	0009883a 	mov	r4,zero
  80a55c:	2005883a 	mov	r2,r4
  80a560:	dfc00217 	ldw	ra,8(sp)
  80a564:	dc400117 	ldw	r17,4(sp)
  80a568:	dc000017 	ldw	r16,0(sp)
  80a56c:	dec00304 	addi	sp,sp,12
  80a570:	f800283a 	ret
  80a574:	81400c17 	ldw	r5,48(r16)
  80a578:	283fe426 	beq	r5,zero,80a50c <__srefill_r+0x58>
  80a57c:	80801004 	addi	r2,r16,64
  80a580:	28800226 	beq	r5,r2,80a58c <__srefill_r+0xd8>
  80a584:	8809883a 	mov	r4,r17
  80a588:	0807efc0 	call	807efc <_free_r>
  80a58c:	80800f17 	ldw	r2,60(r16)
  80a590:	80000c15 	stw	zero,48(r16)
  80a594:	80800115 	stw	r2,4(r16)
  80a598:	103fdc26 	beq	r2,zero,80a50c <__srefill_r+0x58>
  80a59c:	80800e17 	ldw	r2,56(r16)
  80a5a0:	0009883a 	mov	r4,zero
  80a5a4:	80800015 	stw	r2,0(r16)
  80a5a8:	2005883a 	mov	r2,r4
  80a5ac:	dfc00217 	ldw	ra,8(sp)
  80a5b0:	dc400117 	ldw	r17,4(sp)
  80a5b4:	dc000017 	ldw	r16,0(sp)
  80a5b8:	dec00304 	addi	sp,sp,12
  80a5bc:	f800283a 	ret
  80a5c0:	013fffc4 	movi	r4,-1
  80a5c4:	2005883a 	mov	r2,r4
  80a5c8:	dfc00217 	ldw	ra,8(sp)
  80a5cc:	dc400117 	ldw	r17,4(sp)
  80a5d0:	dc000017 	ldw	r16,0(sp)
  80a5d4:	dec00304 	addi	sp,sp,12
  80a5d8:	f800283a 	ret
  80a5dc:	0807b780 	call	807b78 <__sinit>
  80a5e0:	003fbd06 	br	80a4d8 <__srefill_r+0x24>
  80a5e4:	20000b1e 	bne	r4,zero,80a614 <__srefill_r+0x160>
  80a5e8:	10800814 	ori	r2,r2,32
  80a5ec:	013fffc4 	movi	r4,-1
  80a5f0:	8080030d 	sth	r2,12(r16)
  80a5f4:	003fd906 	br	80a55c <__srefill_r+0xa8>
  80a5f8:	00802074 	movhi	r2,129
  80a5fc:	10961104 	addi	r2,r2,22596
  80a600:	11000017 	ldw	r4,0(r2)
  80a604:	01402074 	movhi	r5,129
  80a608:	29699e04 	addi	r5,r5,-22920
  80a60c:	08087740 	call	808774 <_fwalk>
  80a610:	003fc306 	br	80a520 <__srefill_r+0x6c>
  80a614:	10801014 	ori	r2,r2,64
  80a618:	013fffc4 	movi	r4,-1
  80a61c:	8080030d 	sth	r2,12(r16)
  80a620:	80000115 	stw	zero,4(r16)
  80a624:	003fcd06 	br	80a55c <__srefill_r+0xa8>
  80a628:	8809883a 	mov	r4,r17
  80a62c:	800b883a 	mov	r5,r16
  80a630:	08088f00 	call	8088f0 <__smakebuf_r>
  80a634:	003fb706 	br	80a514 <__srefill_r+0x60>
  80a638:	18c01014 	ori	r3,r3,64
  80a63c:	00800244 	movi	r2,9
  80a640:	013fffc4 	movi	r4,-1
  80a644:	88800015 	stw	r2,0(r17)
  80a648:	80c0030d 	sth	r3,12(r16)
  80a64c:	003fc306 	br	80a55c <__srefill_r+0xa8>
  80a650:	8809883a 	mov	r4,r17
  80a654:	800b883a 	mov	r5,r16
  80a658:	08078e00 	call	8078e0 <_fflush_r>
  80a65c:	103fd81e 	bne	r2,zero,80a5c0 <__srefill_r+0x10c>
  80a660:	8080030b 	ldhu	r2,12(r16)
  80a664:	80000215 	stw	zero,8(r16)
  80a668:	80000615 	stw	zero,24(r16)
  80a66c:	10bffdcc 	andi	r2,r2,65527
  80a670:	8080030d 	sth	r2,12(r16)
  80a674:	003fa206 	br	80a500 <__srefill_r+0x4c>

0080a678 <lflush>:
  80a678:	20c0030b 	ldhu	r3,12(r4)
  80a67c:	01400244 	movi	r5,9
  80a680:	0005883a 	mov	r2,zero
  80a684:	18c0024c 	andi	r3,r3,9
  80a688:	19400126 	beq	r3,r5,80a690 <lflush+0x18>
  80a68c:	f800283a 	ret
  80a690:	0807adc1 	jmpi	807adc <fflush>

0080a694 <__isinfd>:
  80a694:	200d883a 	mov	r6,r4
  80a698:	0109c83a 	sub	r4,zero,r4
  80a69c:	2188b03a 	or	r4,r4,r6
  80a6a0:	2008d7fa 	srli	r4,r4,31
  80a6a4:	00a00034 	movhi	r2,32768
  80a6a8:	10bfffc4 	addi	r2,r2,-1
  80a6ac:	1144703a 	and	r2,r2,r5
  80a6b0:	2088b03a 	or	r4,r4,r2
  80a6b4:	009ffc34 	movhi	r2,32752
  80a6b8:	1105c83a 	sub	r2,r2,r4
  80a6bc:	0087c83a 	sub	r3,zero,r2
  80a6c0:	10c4b03a 	or	r2,r2,r3
  80a6c4:	1004d7fa 	srli	r2,r2,31
  80a6c8:	00c00044 	movi	r3,1
  80a6cc:	1885c83a 	sub	r2,r3,r2
  80a6d0:	f800283a 	ret

0080a6d4 <__isnand>:
  80a6d4:	200d883a 	mov	r6,r4
  80a6d8:	0109c83a 	sub	r4,zero,r4
  80a6dc:	2188b03a 	or	r4,r4,r6
  80a6e0:	2008d7fa 	srli	r4,r4,31
  80a6e4:	00a00034 	movhi	r2,32768
  80a6e8:	10bfffc4 	addi	r2,r2,-1
  80a6ec:	1144703a 	and	r2,r2,r5
  80a6f0:	2088b03a 	or	r4,r4,r2
  80a6f4:	009ffc34 	movhi	r2,32752
  80a6f8:	1105c83a 	sub	r2,r2,r4
  80a6fc:	1004d7fa 	srli	r2,r2,31
  80a700:	f800283a 	ret

0080a704 <__sclose>:
  80a704:	2940038f 	ldh	r5,14(r5)
  80a708:	080ab841 	jmpi	80ab84 <_close_r>

0080a70c <__sseek>:
  80a70c:	defffe04 	addi	sp,sp,-8
  80a710:	dc000015 	stw	r16,0(sp)
  80a714:	2821883a 	mov	r16,r5
  80a718:	2940038f 	ldh	r5,14(r5)
  80a71c:	dfc00115 	stw	ra,4(sp)
  80a720:	080adfc0 	call	80adfc <_lseek_r>
  80a724:	1007883a 	mov	r3,r2
  80a728:	00bfffc4 	movi	r2,-1
  80a72c:	18800926 	beq	r3,r2,80a754 <__sseek+0x48>
  80a730:	8080030b 	ldhu	r2,12(r16)
  80a734:	80c01415 	stw	r3,80(r16)
  80a738:	10840014 	ori	r2,r2,4096
  80a73c:	8080030d 	sth	r2,12(r16)
  80a740:	1805883a 	mov	r2,r3
  80a744:	dfc00117 	ldw	ra,4(sp)
  80a748:	dc000017 	ldw	r16,0(sp)
  80a74c:	dec00204 	addi	sp,sp,8
  80a750:	f800283a 	ret
  80a754:	8080030b 	ldhu	r2,12(r16)
  80a758:	10bbffcc 	andi	r2,r2,61439
  80a75c:	8080030d 	sth	r2,12(r16)
  80a760:	1805883a 	mov	r2,r3
  80a764:	dfc00117 	ldw	ra,4(sp)
  80a768:	dc000017 	ldw	r16,0(sp)
  80a76c:	dec00204 	addi	sp,sp,8
  80a770:	f800283a 	ret

0080a774 <__swrite>:
  80a774:	2880030b 	ldhu	r2,12(r5)
  80a778:	defffb04 	addi	sp,sp,-20
  80a77c:	dcc00315 	stw	r19,12(sp)
  80a780:	1080400c 	andi	r2,r2,256
  80a784:	dc800215 	stw	r18,8(sp)
  80a788:	dc400115 	stw	r17,4(sp)
  80a78c:	dc000015 	stw	r16,0(sp)
  80a790:	3027883a 	mov	r19,r6
  80a794:	3825883a 	mov	r18,r7
  80a798:	dfc00415 	stw	ra,16(sp)
  80a79c:	2821883a 	mov	r16,r5
  80a7a0:	000d883a 	mov	r6,zero
  80a7a4:	01c00084 	movi	r7,2
  80a7a8:	2023883a 	mov	r17,r4
  80a7ac:	10000226 	beq	r2,zero,80a7b8 <__swrite+0x44>
  80a7b0:	2940038f 	ldh	r5,14(r5)
  80a7b4:	080adfc0 	call	80adfc <_lseek_r>
  80a7b8:	8080030b 	ldhu	r2,12(r16)
  80a7bc:	8140038f 	ldh	r5,14(r16)
  80a7c0:	8809883a 	mov	r4,r17
  80a7c4:	10bbffcc 	andi	r2,r2,61439
  80a7c8:	980d883a 	mov	r6,r19
  80a7cc:	900f883a 	mov	r7,r18
  80a7d0:	8080030d 	sth	r2,12(r16)
  80a7d4:	dfc00417 	ldw	ra,16(sp)
  80a7d8:	dcc00317 	ldw	r19,12(sp)
  80a7dc:	dc800217 	ldw	r18,8(sp)
  80a7e0:	dc400117 	ldw	r17,4(sp)
  80a7e4:	dc000017 	ldw	r16,0(sp)
  80a7e8:	dec00504 	addi	sp,sp,20
  80a7ec:	080aa581 	jmpi	80aa58 <_write_r>

0080a7f0 <__sread>:
  80a7f0:	defffe04 	addi	sp,sp,-8
  80a7f4:	dc000015 	stw	r16,0(sp)
  80a7f8:	2821883a 	mov	r16,r5
  80a7fc:	2940038f 	ldh	r5,14(r5)
  80a800:	dfc00115 	stw	ra,4(sp)
  80a804:	080ae740 	call	80ae74 <_read_r>
  80a808:	1007883a 	mov	r3,r2
  80a80c:	10000816 	blt	r2,zero,80a830 <__sread+0x40>
  80a810:	80801417 	ldw	r2,80(r16)
  80a814:	10c5883a 	add	r2,r2,r3
  80a818:	80801415 	stw	r2,80(r16)
  80a81c:	1805883a 	mov	r2,r3
  80a820:	dfc00117 	ldw	ra,4(sp)
  80a824:	dc000017 	ldw	r16,0(sp)
  80a828:	dec00204 	addi	sp,sp,8
  80a82c:	f800283a 	ret
  80a830:	8080030b 	ldhu	r2,12(r16)
  80a834:	10bbffcc 	andi	r2,r2,61439
  80a838:	8080030d 	sth	r2,12(r16)
  80a83c:	1805883a 	mov	r2,r3
  80a840:	dfc00117 	ldw	ra,4(sp)
  80a844:	dc000017 	ldw	r16,0(sp)
  80a848:	dec00204 	addi	sp,sp,8
  80a84c:	f800283a 	ret

0080a850 <strcmp>:
  80a850:	2144b03a 	or	r2,r4,r5
  80a854:	108000cc 	andi	r2,r2,3
  80a858:	10001d1e 	bne	r2,zero,80a8d0 <strcmp+0x80>
  80a85c:	200f883a 	mov	r7,r4
  80a860:	28800017 	ldw	r2,0(r5)
  80a864:	21000017 	ldw	r4,0(r4)
  80a868:	280d883a 	mov	r6,r5
  80a86c:	2080161e 	bne	r4,r2,80a8c8 <strcmp+0x78>
  80a870:	023fbff4 	movhi	r8,65279
  80a874:	423fbfc4 	addi	r8,r8,-257
  80a878:	2207883a 	add	r3,r4,r8
  80a87c:	01602074 	movhi	r5,32897
  80a880:	29602004 	addi	r5,r5,-32640
  80a884:	1946703a 	and	r3,r3,r5
  80a888:	0104303a 	nor	r2,zero,r4
  80a88c:	10c4703a 	and	r2,r2,r3
  80a890:	10001c1e 	bne	r2,zero,80a904 <strcmp+0xb4>
  80a894:	4013883a 	mov	r9,r8
  80a898:	2811883a 	mov	r8,r5
  80a89c:	00000106 	br	80a8a4 <strcmp+0x54>
  80a8a0:	1800181e 	bne	r3,zero,80a904 <strcmp+0xb4>
  80a8a4:	39c00104 	addi	r7,r7,4
  80a8a8:	39000017 	ldw	r4,0(r7)
  80a8ac:	31800104 	addi	r6,r6,4
  80a8b0:	31400017 	ldw	r5,0(r6)
  80a8b4:	2245883a 	add	r2,r4,r9
  80a8b8:	1204703a 	and	r2,r2,r8
  80a8bc:	0106303a 	nor	r3,zero,r4
  80a8c0:	1886703a 	and	r3,r3,r2
  80a8c4:	217ff626 	beq	r4,r5,80a8a0 <strcmp+0x50>
  80a8c8:	3809883a 	mov	r4,r7
  80a8cc:	300b883a 	mov	r5,r6
  80a8d0:	20c00007 	ldb	r3,0(r4)
  80a8d4:	1800051e 	bne	r3,zero,80a8ec <strcmp+0x9c>
  80a8d8:	00000606 	br	80a8f4 <strcmp+0xa4>
  80a8dc:	21000044 	addi	r4,r4,1
  80a8e0:	20c00007 	ldb	r3,0(r4)
  80a8e4:	29400044 	addi	r5,r5,1
  80a8e8:	18000226 	beq	r3,zero,80a8f4 <strcmp+0xa4>
  80a8ec:	28800007 	ldb	r2,0(r5)
  80a8f0:	18bffa26 	beq	r3,r2,80a8dc <strcmp+0x8c>
  80a8f4:	20c00003 	ldbu	r3,0(r4)
  80a8f8:	28800003 	ldbu	r2,0(r5)
  80a8fc:	1885c83a 	sub	r2,r3,r2
  80a900:	f800283a 	ret
  80a904:	0005883a 	mov	r2,zero
  80a908:	f800283a 	ret

0080a90c <__swbuf_r>:
  80a90c:	defffc04 	addi	sp,sp,-16
  80a910:	dc400215 	stw	r17,8(sp)
  80a914:	dc000115 	stw	r16,4(sp)
  80a918:	dfc00315 	stw	ra,12(sp)
  80a91c:	2023883a 	mov	r17,r4
  80a920:	2821883a 	mov	r16,r5
  80a924:	20000226 	beq	r4,zero,80a930 <__swbuf_r+0x24>
  80a928:	20800e17 	ldw	r2,56(r4)
  80a92c:	10002f26 	beq	r2,zero,80a9ec <__swbuf_r+0xe0>
  80a930:	3080030b 	ldhu	r2,12(r6)
  80a934:	30c00617 	ldw	r3,24(r6)
  80a938:	1080020c 	andi	r2,r2,8
  80a93c:	30c00215 	stw	r3,8(r6)
  80a940:	10002226 	beq	r2,zero,80a9cc <__swbuf_r+0xc0>
  80a944:	30c00417 	ldw	r3,16(r6)
  80a948:	18002026 	beq	r3,zero,80a9cc <__swbuf_r+0xc0>
  80a94c:	31000017 	ldw	r4,0(r6)
  80a950:	30800517 	ldw	r2,20(r6)
  80a954:	20c7c83a 	sub	r3,r4,r3
  80a958:	18802f0e 	bge	r3,r2,80aa18 <__swbuf_r+0x10c>
  80a95c:	19400044 	addi	r5,r3,1
  80a960:	30800217 	ldw	r2,8(r6)
  80a964:	84003fcc 	andi	r16,r16,255
  80a968:	20c00044 	addi	r3,r4,1
  80a96c:	10bfffc4 	addi	r2,r2,-1
  80a970:	30800215 	stw	r2,8(r6)
  80a974:	24000005 	stb	r16,0(r4)
  80a978:	30800517 	ldw	r2,20(r6)
  80a97c:	30c00015 	stw	r3,0(r6)
  80a980:	11400c26 	beq	r2,r5,80a9b4 <__swbuf_r+0xa8>
  80a984:	3080030b 	ldhu	r2,12(r6)
  80a988:	1080004c 	andi	r2,r2,1
  80a98c:	1005003a 	cmpeq	r2,r2,zero
  80a990:	10000626 	beq	r2,zero,80a9ac <__swbuf_r+0xa0>
  80a994:	8005883a 	mov	r2,r16
  80a998:	dfc00317 	ldw	ra,12(sp)
  80a99c:	dc400217 	ldw	r17,8(sp)
  80a9a0:	dc000117 	ldw	r16,4(sp)
  80a9a4:	dec00404 	addi	sp,sp,16
  80a9a8:	f800283a 	ret
  80a9ac:	00800284 	movi	r2,10
  80a9b0:	80bff81e 	bne	r16,r2,80a994 <__swbuf_r+0x88>
  80a9b4:	8809883a 	mov	r4,r17
  80a9b8:	300b883a 	mov	r5,r6
  80a9bc:	08078e00 	call	8078e0 <_fflush_r>
  80a9c0:	103ff426 	beq	r2,zero,80a994 <__swbuf_r+0x88>
  80a9c4:	043fffc4 	movi	r16,-1
  80a9c8:	003ff206 	br	80a994 <__swbuf_r+0x88>
  80a9cc:	300b883a 	mov	r5,r6
  80a9d0:	8809883a 	mov	r4,r17
  80a9d4:	d9800015 	stw	r6,0(sp)
  80a9d8:	0805e240 	call	805e24 <__swsetup_r>
  80a9dc:	d9800017 	ldw	r6,0(sp)
  80a9e0:	1000061e 	bne	r2,zero,80a9fc <__swbuf_r+0xf0>
  80a9e4:	30c00417 	ldw	r3,16(r6)
  80a9e8:	003fd806 	br	80a94c <__swbuf_r+0x40>
  80a9ec:	d9800015 	stw	r6,0(sp)
  80a9f0:	0807b780 	call	807b78 <__sinit>
  80a9f4:	d9800017 	ldw	r6,0(sp)
  80a9f8:	003fcd06 	br	80a930 <__swbuf_r+0x24>
  80a9fc:	3080030b 	ldhu	r2,12(r6)
  80aa00:	00c00244 	movi	r3,9
  80aa04:	043fffc4 	movi	r16,-1
  80aa08:	10801014 	ori	r2,r2,64
  80aa0c:	3080030d 	sth	r2,12(r6)
  80aa10:	88c00015 	stw	r3,0(r17)
  80aa14:	003fdf06 	br	80a994 <__swbuf_r+0x88>
  80aa18:	300b883a 	mov	r5,r6
  80aa1c:	8809883a 	mov	r4,r17
  80aa20:	d9800015 	stw	r6,0(sp)
  80aa24:	08078e00 	call	8078e0 <_fflush_r>
  80aa28:	d9800017 	ldw	r6,0(sp)
  80aa2c:	103fe51e 	bne	r2,zero,80a9c4 <__swbuf_r+0xb8>
  80aa30:	31000017 	ldw	r4,0(r6)
  80aa34:	01400044 	movi	r5,1
  80aa38:	003fc906 	br	80a960 <__swbuf_r+0x54>

0080aa3c <__swbuf>:
  80aa3c:	01802074 	movhi	r6,129
  80aa40:	31961004 	addi	r6,r6,22592
  80aa44:	2007883a 	mov	r3,r4
  80aa48:	31000017 	ldw	r4,0(r6)
  80aa4c:	280d883a 	mov	r6,r5
  80aa50:	180b883a 	mov	r5,r3
  80aa54:	080a90c1 	jmpi	80a90c <__swbuf_r>

0080aa58 <_write_r>:
  80aa58:	defffd04 	addi	sp,sp,-12
  80aa5c:	dc000015 	stw	r16,0(sp)
  80aa60:	04002074 	movhi	r16,129
  80aa64:	841d5c04 	addi	r16,r16,30064
  80aa68:	dc400115 	stw	r17,4(sp)
  80aa6c:	80000015 	stw	zero,0(r16)
  80aa70:	2023883a 	mov	r17,r4
  80aa74:	2809883a 	mov	r4,r5
  80aa78:	300b883a 	mov	r5,r6
  80aa7c:	380d883a 	mov	r6,r7
  80aa80:	dfc00215 	stw	ra,8(sp)
  80aa84:	080c7100 	call	80c710 <write>
  80aa88:	1007883a 	mov	r3,r2
  80aa8c:	00bfffc4 	movi	r2,-1
  80aa90:	18800626 	beq	r3,r2,80aaac <_write_r+0x54>
  80aa94:	1805883a 	mov	r2,r3
  80aa98:	dfc00217 	ldw	ra,8(sp)
  80aa9c:	dc400117 	ldw	r17,4(sp)
  80aaa0:	dc000017 	ldw	r16,0(sp)
  80aaa4:	dec00304 	addi	sp,sp,12
  80aaa8:	f800283a 	ret
  80aaac:	80800017 	ldw	r2,0(r16)
  80aab0:	103ff826 	beq	r2,zero,80aa94 <_write_r+0x3c>
  80aab4:	88800015 	stw	r2,0(r17)
  80aab8:	1805883a 	mov	r2,r3
  80aabc:	dfc00217 	ldw	ra,8(sp)
  80aac0:	dc400117 	ldw	r17,4(sp)
  80aac4:	dc000017 	ldw	r16,0(sp)
  80aac8:	dec00304 	addi	sp,sp,12
  80aacc:	f800283a 	ret

0080aad0 <_calloc_r>:
  80aad0:	298b383a 	mul	r5,r5,r6
  80aad4:	defffe04 	addi	sp,sp,-8
  80aad8:	dc000015 	stw	r16,0(sp)
  80aadc:	dfc00115 	stw	ra,4(sp)
  80aae0:	08034880 	call	803488 <_malloc_r>
  80aae4:	1021883a 	mov	r16,r2
  80aae8:	01c00904 	movi	r7,36
  80aaec:	10000d26 	beq	r2,zero,80ab24 <_calloc_r+0x54>
  80aaf0:	10ffff17 	ldw	r3,-4(r2)
  80aaf4:	1009883a 	mov	r4,r2
  80aaf8:	00bfff04 	movi	r2,-4
  80aafc:	1886703a 	and	r3,r3,r2
  80ab00:	1887883a 	add	r3,r3,r2
  80ab04:	180d883a 	mov	r6,r3
  80ab08:	000b883a 	mov	r5,zero
  80ab0c:	38c01736 	bltu	r7,r3,80ab6c <_calloc_r+0x9c>
  80ab10:	008004c4 	movi	r2,19
  80ab14:	10c00836 	bltu	r2,r3,80ab38 <_calloc_r+0x68>
  80ab18:	20000215 	stw	zero,8(r4)
  80ab1c:	20000015 	stw	zero,0(r4)
  80ab20:	20000115 	stw	zero,4(r4)
  80ab24:	8005883a 	mov	r2,r16
  80ab28:	dfc00117 	ldw	ra,4(sp)
  80ab2c:	dc000017 	ldw	r16,0(sp)
  80ab30:	dec00204 	addi	sp,sp,8
  80ab34:	f800283a 	ret
  80ab38:	008006c4 	movi	r2,27
  80ab3c:	80000015 	stw	zero,0(r16)
  80ab40:	80000115 	stw	zero,4(r16)
  80ab44:	81000204 	addi	r4,r16,8
  80ab48:	10fff32e 	bgeu	r2,r3,80ab18 <_calloc_r+0x48>
  80ab4c:	80000215 	stw	zero,8(r16)
  80ab50:	80000315 	stw	zero,12(r16)
  80ab54:	81000404 	addi	r4,r16,16
  80ab58:	19ffef1e 	bne	r3,r7,80ab18 <_calloc_r+0x48>
  80ab5c:	81000604 	addi	r4,r16,24
  80ab60:	80000415 	stw	zero,16(r16)
  80ab64:	80000515 	stw	zero,20(r16)
  80ab68:	003feb06 	br	80ab18 <_calloc_r+0x48>
  80ab6c:	0808c480 	call	808c48 <memset>
  80ab70:	8005883a 	mov	r2,r16
  80ab74:	dfc00117 	ldw	ra,4(sp)
  80ab78:	dc000017 	ldw	r16,0(sp)
  80ab7c:	dec00204 	addi	sp,sp,8
  80ab80:	f800283a 	ret

0080ab84 <_close_r>:
  80ab84:	defffd04 	addi	sp,sp,-12
  80ab88:	dc000015 	stw	r16,0(sp)
  80ab8c:	04002074 	movhi	r16,129
  80ab90:	841d5c04 	addi	r16,r16,30064
  80ab94:	dc400115 	stw	r17,4(sp)
  80ab98:	80000015 	stw	zero,0(r16)
  80ab9c:	2023883a 	mov	r17,r4
  80aba0:	2809883a 	mov	r4,r5
  80aba4:	dfc00215 	stw	ra,8(sp)
  80aba8:	080c1340 	call	80c134 <close>
  80abac:	1007883a 	mov	r3,r2
  80abb0:	00bfffc4 	movi	r2,-1
  80abb4:	18800626 	beq	r3,r2,80abd0 <_close_r+0x4c>
  80abb8:	1805883a 	mov	r2,r3
  80abbc:	dfc00217 	ldw	ra,8(sp)
  80abc0:	dc400117 	ldw	r17,4(sp)
  80abc4:	dc000017 	ldw	r16,0(sp)
  80abc8:	dec00304 	addi	sp,sp,12
  80abcc:	f800283a 	ret
  80abd0:	80800017 	ldw	r2,0(r16)
  80abd4:	103ff826 	beq	r2,zero,80abb8 <_close_r+0x34>
  80abd8:	88800015 	stw	r2,0(r17)
  80abdc:	1805883a 	mov	r2,r3
  80abe0:	dfc00217 	ldw	ra,8(sp)
  80abe4:	dc400117 	ldw	r17,4(sp)
  80abe8:	dc000017 	ldw	r16,0(sp)
  80abec:	dec00304 	addi	sp,sp,12
  80abf0:	f800283a 	ret

0080abf4 <_fclose_r>:
  80abf4:	defffc04 	addi	sp,sp,-16
  80abf8:	dc400115 	stw	r17,4(sp)
  80abfc:	dc000015 	stw	r16,0(sp)
  80ac00:	dfc00315 	stw	ra,12(sp)
  80ac04:	dc800215 	stw	r18,8(sp)
  80ac08:	2821883a 	mov	r16,r5
  80ac0c:	2023883a 	mov	r17,r4
  80ac10:	28002926 	beq	r5,zero,80acb8 <_fclose_r+0xc4>
  80ac14:	0807b680 	call	807b68 <__sfp_lock_acquire>
  80ac18:	88000226 	beq	r17,zero,80ac24 <_fclose_r+0x30>
  80ac1c:	88800e17 	ldw	r2,56(r17)
  80ac20:	10002d26 	beq	r2,zero,80acd8 <_fclose_r+0xe4>
  80ac24:	8080030f 	ldh	r2,12(r16)
  80ac28:	10002226 	beq	r2,zero,80acb4 <_fclose_r+0xc0>
  80ac2c:	8809883a 	mov	r4,r17
  80ac30:	800b883a 	mov	r5,r16
  80ac34:	08078e00 	call	8078e0 <_fflush_r>
  80ac38:	1025883a 	mov	r18,r2
  80ac3c:	80800b17 	ldw	r2,44(r16)
  80ac40:	10000426 	beq	r2,zero,80ac54 <_fclose_r+0x60>
  80ac44:	81400717 	ldw	r5,28(r16)
  80ac48:	8809883a 	mov	r4,r17
  80ac4c:	103ee83a 	callr	r2
  80ac50:	10002a16 	blt	r2,zero,80acfc <_fclose_r+0x108>
  80ac54:	8080030b 	ldhu	r2,12(r16)
  80ac58:	1080200c 	andi	r2,r2,128
  80ac5c:	1000231e 	bne	r2,zero,80acec <_fclose_r+0xf8>
  80ac60:	81400c17 	ldw	r5,48(r16)
  80ac64:	28000526 	beq	r5,zero,80ac7c <_fclose_r+0x88>
  80ac68:	80801004 	addi	r2,r16,64
  80ac6c:	28800226 	beq	r5,r2,80ac78 <_fclose_r+0x84>
  80ac70:	8809883a 	mov	r4,r17
  80ac74:	0807efc0 	call	807efc <_free_r>
  80ac78:	80000c15 	stw	zero,48(r16)
  80ac7c:	81401117 	ldw	r5,68(r16)
  80ac80:	28000326 	beq	r5,zero,80ac90 <_fclose_r+0x9c>
  80ac84:	8809883a 	mov	r4,r17
  80ac88:	0807efc0 	call	807efc <_free_r>
  80ac8c:	80001115 	stw	zero,68(r16)
  80ac90:	8000030d 	sth	zero,12(r16)
  80ac94:	0807b6c0 	call	807b6c <__sfp_lock_release>
  80ac98:	9005883a 	mov	r2,r18
  80ac9c:	dfc00317 	ldw	ra,12(sp)
  80aca0:	dc800217 	ldw	r18,8(sp)
  80aca4:	dc400117 	ldw	r17,4(sp)
  80aca8:	dc000017 	ldw	r16,0(sp)
  80acac:	dec00404 	addi	sp,sp,16
  80acb0:	f800283a 	ret
  80acb4:	0807b6c0 	call	807b6c <__sfp_lock_release>
  80acb8:	0025883a 	mov	r18,zero
  80acbc:	9005883a 	mov	r2,r18
  80acc0:	dfc00317 	ldw	ra,12(sp)
  80acc4:	dc800217 	ldw	r18,8(sp)
  80acc8:	dc400117 	ldw	r17,4(sp)
  80accc:	dc000017 	ldw	r16,0(sp)
  80acd0:	dec00404 	addi	sp,sp,16
  80acd4:	f800283a 	ret
  80acd8:	8809883a 	mov	r4,r17
  80acdc:	0807b780 	call	807b78 <__sinit>
  80ace0:	8080030f 	ldh	r2,12(r16)
  80ace4:	103fd11e 	bne	r2,zero,80ac2c <_fclose_r+0x38>
  80ace8:	003ff206 	br	80acb4 <_fclose_r+0xc0>
  80acec:	81400417 	ldw	r5,16(r16)
  80acf0:	8809883a 	mov	r4,r17
  80acf4:	0807efc0 	call	807efc <_free_r>
  80acf8:	003fd906 	br	80ac60 <_fclose_r+0x6c>
  80acfc:	04bfffc4 	movi	r18,-1
  80ad00:	003fd406 	br	80ac54 <_fclose_r+0x60>

0080ad04 <fclose>:
  80ad04:	00802074 	movhi	r2,129
  80ad08:	10961004 	addi	r2,r2,22592
  80ad0c:	200b883a 	mov	r5,r4
  80ad10:	11000017 	ldw	r4,0(r2)
  80ad14:	080abf41 	jmpi	80abf4 <_fclose_r>

0080ad18 <_fstat_r>:
  80ad18:	defffd04 	addi	sp,sp,-12
  80ad1c:	dc000015 	stw	r16,0(sp)
  80ad20:	04002074 	movhi	r16,129
  80ad24:	841d5c04 	addi	r16,r16,30064
  80ad28:	dc400115 	stw	r17,4(sp)
  80ad2c:	80000015 	stw	zero,0(r16)
  80ad30:	2023883a 	mov	r17,r4
  80ad34:	2809883a 	mov	r4,r5
  80ad38:	300b883a 	mov	r5,r6
  80ad3c:	dfc00215 	stw	ra,8(sp)
  80ad40:	080c2400 	call	80c240 <fstat>
  80ad44:	1007883a 	mov	r3,r2
  80ad48:	00bfffc4 	movi	r2,-1
  80ad4c:	18800626 	beq	r3,r2,80ad68 <_fstat_r+0x50>
  80ad50:	1805883a 	mov	r2,r3
  80ad54:	dfc00217 	ldw	ra,8(sp)
  80ad58:	dc400117 	ldw	r17,4(sp)
  80ad5c:	dc000017 	ldw	r16,0(sp)
  80ad60:	dec00304 	addi	sp,sp,12
  80ad64:	f800283a 	ret
  80ad68:	80800017 	ldw	r2,0(r16)
  80ad6c:	103ff826 	beq	r2,zero,80ad50 <_fstat_r+0x38>
  80ad70:	88800015 	stw	r2,0(r17)
  80ad74:	1805883a 	mov	r2,r3
  80ad78:	dfc00217 	ldw	ra,8(sp)
  80ad7c:	dc400117 	ldw	r17,4(sp)
  80ad80:	dc000017 	ldw	r16,0(sp)
  80ad84:	dec00304 	addi	sp,sp,12
  80ad88:	f800283a 	ret

0080ad8c <_isatty_r>:
  80ad8c:	defffd04 	addi	sp,sp,-12
  80ad90:	dc000015 	stw	r16,0(sp)
  80ad94:	04002074 	movhi	r16,129
  80ad98:	841d5c04 	addi	r16,r16,30064
  80ad9c:	dc400115 	stw	r17,4(sp)
  80ada0:	80000015 	stw	zero,0(r16)
  80ada4:	2023883a 	mov	r17,r4
  80ada8:	2809883a 	mov	r4,r5
  80adac:	dfc00215 	stw	ra,8(sp)
  80adb0:	080c2d00 	call	80c2d0 <isatty>
  80adb4:	1007883a 	mov	r3,r2
  80adb8:	00bfffc4 	movi	r2,-1
  80adbc:	18800626 	beq	r3,r2,80add8 <_isatty_r+0x4c>
  80adc0:	1805883a 	mov	r2,r3
  80adc4:	dfc00217 	ldw	ra,8(sp)
  80adc8:	dc400117 	ldw	r17,4(sp)
  80adcc:	dc000017 	ldw	r16,0(sp)
  80add0:	dec00304 	addi	sp,sp,12
  80add4:	f800283a 	ret
  80add8:	80800017 	ldw	r2,0(r16)
  80addc:	103ff826 	beq	r2,zero,80adc0 <_isatty_r+0x34>
  80ade0:	88800015 	stw	r2,0(r17)
  80ade4:	1805883a 	mov	r2,r3
  80ade8:	dfc00217 	ldw	ra,8(sp)
  80adec:	dc400117 	ldw	r17,4(sp)
  80adf0:	dc000017 	ldw	r16,0(sp)
  80adf4:	dec00304 	addi	sp,sp,12
  80adf8:	f800283a 	ret

0080adfc <_lseek_r>:
  80adfc:	defffd04 	addi	sp,sp,-12
  80ae00:	dc000015 	stw	r16,0(sp)
  80ae04:	04002074 	movhi	r16,129
  80ae08:	841d5c04 	addi	r16,r16,30064
  80ae0c:	dc400115 	stw	r17,4(sp)
  80ae10:	80000015 	stw	zero,0(r16)
  80ae14:	2023883a 	mov	r17,r4
  80ae18:	2809883a 	mov	r4,r5
  80ae1c:	300b883a 	mov	r5,r6
  80ae20:	380d883a 	mov	r6,r7
  80ae24:	dfc00215 	stw	ra,8(sp)
  80ae28:	080c4400 	call	80c440 <lseek>
  80ae2c:	1007883a 	mov	r3,r2
  80ae30:	00bfffc4 	movi	r2,-1
  80ae34:	18800626 	beq	r3,r2,80ae50 <_lseek_r+0x54>
  80ae38:	1805883a 	mov	r2,r3
  80ae3c:	dfc00217 	ldw	ra,8(sp)
  80ae40:	dc400117 	ldw	r17,4(sp)
  80ae44:	dc000017 	ldw	r16,0(sp)
  80ae48:	dec00304 	addi	sp,sp,12
  80ae4c:	f800283a 	ret
  80ae50:	80800017 	ldw	r2,0(r16)
  80ae54:	103ff826 	beq	r2,zero,80ae38 <_lseek_r+0x3c>
  80ae58:	88800015 	stw	r2,0(r17)
  80ae5c:	1805883a 	mov	r2,r3
  80ae60:	dfc00217 	ldw	ra,8(sp)
  80ae64:	dc400117 	ldw	r17,4(sp)
  80ae68:	dc000017 	ldw	r16,0(sp)
  80ae6c:	dec00304 	addi	sp,sp,12
  80ae70:	f800283a 	ret

0080ae74 <_read_r>:
  80ae74:	defffd04 	addi	sp,sp,-12
  80ae78:	dc000015 	stw	r16,0(sp)
  80ae7c:	04002074 	movhi	r16,129
  80ae80:	841d5c04 	addi	r16,r16,30064
  80ae84:	dc400115 	stw	r17,4(sp)
  80ae88:	80000015 	stw	zero,0(r16)
  80ae8c:	2023883a 	mov	r17,r4
  80ae90:	2809883a 	mov	r4,r5
  80ae94:	300b883a 	mov	r5,r6
  80ae98:	380d883a 	mov	r6,r7
  80ae9c:	dfc00215 	stw	ra,8(sp)
  80aea0:	080c57c0 	call	80c57c <read>
  80aea4:	1007883a 	mov	r3,r2
  80aea8:	00bfffc4 	movi	r2,-1
  80aeac:	18800626 	beq	r3,r2,80aec8 <_read_r+0x54>
  80aeb0:	1805883a 	mov	r2,r3
  80aeb4:	dfc00217 	ldw	ra,8(sp)
  80aeb8:	dc400117 	ldw	r17,4(sp)
  80aebc:	dc000017 	ldw	r16,0(sp)
  80aec0:	dec00304 	addi	sp,sp,12
  80aec4:	f800283a 	ret
  80aec8:	80800017 	ldw	r2,0(r16)
  80aecc:	103ff826 	beq	r2,zero,80aeb0 <_read_r+0x3c>
  80aed0:	88800015 	stw	r2,0(r17)
  80aed4:	1805883a 	mov	r2,r3
  80aed8:	dfc00217 	ldw	ra,8(sp)
  80aedc:	dc400117 	ldw	r17,4(sp)
  80aee0:	dc000017 	ldw	r16,0(sp)
  80aee4:	dec00304 	addi	sp,sp,12
  80aee8:	f800283a 	ret

0080aeec <__udivdi3>:
  80aeec:	defff004 	addi	sp,sp,-64
  80aef0:	2005883a 	mov	r2,r4
  80aef4:	3011883a 	mov	r8,r6
  80aef8:	df000e15 	stw	fp,56(sp)
  80aefc:	dd000a15 	stw	r20,40(sp)
  80af00:	dc000615 	stw	r16,24(sp)
  80af04:	dfc00f15 	stw	ra,60(sp)
  80af08:	ddc00d15 	stw	r23,52(sp)
  80af0c:	dd800c15 	stw	r22,48(sp)
  80af10:	dd400b15 	stw	r21,44(sp)
  80af14:	dcc00915 	stw	r19,36(sp)
  80af18:	dc800815 	stw	r18,32(sp)
  80af1c:	dc400715 	stw	r17,28(sp)
  80af20:	4021883a 	mov	r16,r8
  80af24:	1039883a 	mov	fp,r2
  80af28:	2829883a 	mov	r20,r5
  80af2c:	38003b1e 	bne	r7,zero,80b01c <__udivdi3+0x130>
  80af30:	2a005c36 	bltu	r5,r8,80b0a4 <__udivdi3+0x1b8>
  80af34:	4000a626 	beq	r8,zero,80b1d0 <__udivdi3+0x2e4>
  80af38:	00bfffd4 	movui	r2,65535
  80af3c:	14009e36 	bltu	r2,r16,80b1b8 <__udivdi3+0x2cc>
  80af40:	00803fc4 	movi	r2,255
  80af44:	14013d36 	bltu	r2,r16,80b43c <__udivdi3+0x550>
  80af48:	000b883a 	mov	r5,zero
  80af4c:	0005883a 	mov	r2,zero
  80af50:	8084d83a 	srl	r2,r16,r2
  80af54:	01002074 	movhi	r4,129
  80af58:	210e2504 	addi	r4,r4,14484
  80af5c:	01800804 	movi	r6,32
  80af60:	1105883a 	add	r2,r2,r4
  80af64:	10c00003 	ldbu	r3,0(r2)
  80af68:	28c7883a 	add	r3,r5,r3
  80af6c:	30edc83a 	sub	r22,r6,r3
  80af70:	b000ee1e 	bne	r22,zero,80b32c <__udivdi3+0x440>
  80af74:	802ad43a 	srli	r21,r16,16
  80af78:	00800044 	movi	r2,1
  80af7c:	a423c83a 	sub	r17,r20,r16
  80af80:	85ffffcc 	andi	r23,r16,65535
  80af84:	d8800315 	stw	r2,12(sp)
  80af88:	8809883a 	mov	r4,r17
  80af8c:	a80b883a 	mov	r5,r21
  80af90:	080c1240 	call	80c124 <__udivsi3>
  80af94:	8809883a 	mov	r4,r17
  80af98:	a80b883a 	mov	r5,r21
  80af9c:	102d883a 	mov	r22,r2
  80afa0:	080c12c0 	call	80c12c <__umodsi3>
  80afa4:	1004943a 	slli	r2,r2,16
  80afa8:	e006d43a 	srli	r3,fp,16
  80afac:	bda3383a 	mul	r17,r23,r22
  80afb0:	10c4b03a 	or	r2,r2,r3
  80afb4:	1440042e 	bgeu	r2,r17,80afc8 <__udivdi3+0xdc>
  80afb8:	1405883a 	add	r2,r2,r16
  80afbc:	b5bfffc4 	addi	r22,r22,-1
  80afc0:	14000136 	bltu	r2,r16,80afc8 <__udivdi3+0xdc>
  80afc4:	14413d36 	bltu	r2,r17,80b4bc <__udivdi3+0x5d0>
  80afc8:	1463c83a 	sub	r17,r2,r17
  80afcc:	8809883a 	mov	r4,r17
  80afd0:	a80b883a 	mov	r5,r21
  80afd4:	080c1240 	call	80c124 <__udivsi3>
  80afd8:	8809883a 	mov	r4,r17
  80afdc:	a80b883a 	mov	r5,r21
  80afe0:	1029883a 	mov	r20,r2
  80afe4:	080c12c0 	call	80c12c <__umodsi3>
  80afe8:	1004943a 	slli	r2,r2,16
  80afec:	bd09383a 	mul	r4,r23,r20
  80aff0:	e0ffffcc 	andi	r3,fp,65535
  80aff4:	10c4b03a 	or	r2,r2,r3
  80aff8:	1100042e 	bgeu	r2,r4,80b00c <__udivdi3+0x120>
  80affc:	8085883a 	add	r2,r16,r2
  80b000:	a53fffc4 	addi	r20,r20,-1
  80b004:	14000136 	bltu	r2,r16,80b00c <__udivdi3+0x120>
  80b008:	11012036 	bltu	r2,r4,80b48c <__udivdi3+0x5a0>
  80b00c:	b004943a 	slli	r2,r22,16
  80b010:	d9000317 	ldw	r4,12(sp)
  80b014:	a084b03a 	or	r2,r20,r2
  80b018:	00001506 	br	80b070 <__udivdi3+0x184>
  80b01c:	380d883a 	mov	r6,r7
  80b020:	29c06236 	bltu	r5,r7,80b1ac <__udivdi3+0x2c0>
  80b024:	00bfffd4 	movui	r2,65535
  80b028:	11c05a36 	bltu	r2,r7,80b194 <__udivdi3+0x2a8>
  80b02c:	00803fc4 	movi	r2,255
  80b030:	11c0fc36 	bltu	r2,r7,80b424 <__udivdi3+0x538>
  80b034:	000b883a 	mov	r5,zero
  80b038:	0005883a 	mov	r2,zero
  80b03c:	3084d83a 	srl	r2,r6,r2
  80b040:	01002074 	movhi	r4,129
  80b044:	210e2504 	addi	r4,r4,14484
  80b048:	01c00804 	movi	r7,32
  80b04c:	1105883a 	add	r2,r2,r4
  80b050:	10c00003 	ldbu	r3,0(r2)
  80b054:	28c7883a 	add	r3,r5,r3
  80b058:	38efc83a 	sub	r23,r7,r3
  80b05c:	b800691e 	bne	r23,zero,80b204 <__udivdi3+0x318>
  80b060:	35000136 	bltu	r6,r20,80b068 <__udivdi3+0x17c>
  80b064:	e4005136 	bltu	fp,r16,80b1ac <__udivdi3+0x2c0>
  80b068:	00800044 	movi	r2,1
  80b06c:	0009883a 	mov	r4,zero
  80b070:	2007883a 	mov	r3,r4
  80b074:	dfc00f17 	ldw	ra,60(sp)
  80b078:	df000e17 	ldw	fp,56(sp)
  80b07c:	ddc00d17 	ldw	r23,52(sp)
  80b080:	dd800c17 	ldw	r22,48(sp)
  80b084:	dd400b17 	ldw	r21,44(sp)
  80b088:	dd000a17 	ldw	r20,40(sp)
  80b08c:	dcc00917 	ldw	r19,36(sp)
  80b090:	dc800817 	ldw	r18,32(sp)
  80b094:	dc400717 	ldw	r17,28(sp)
  80b098:	dc000617 	ldw	r16,24(sp)
  80b09c:	dec01004 	addi	sp,sp,64
  80b0a0:	f800283a 	ret
  80b0a4:	00bfffd4 	movui	r2,65535
  80b0a8:	12005036 	bltu	r2,r8,80b1ec <__udivdi3+0x300>
  80b0ac:	00803fc4 	movi	r2,255
  80b0b0:	1200e836 	bltu	r2,r8,80b454 <__udivdi3+0x568>
  80b0b4:	000b883a 	mov	r5,zero
  80b0b8:	0005883a 	mov	r2,zero
  80b0bc:	8084d83a 	srl	r2,r16,r2
  80b0c0:	01002074 	movhi	r4,129
  80b0c4:	210e2504 	addi	r4,r4,14484
  80b0c8:	01800804 	movi	r6,32
  80b0cc:	1105883a 	add	r2,r2,r4
  80b0d0:	10c00003 	ldbu	r3,0(r2)
  80b0d4:	28c7883a 	add	r3,r5,r3
  80b0d8:	30cbc83a 	sub	r5,r6,r3
  80b0dc:	28000626 	beq	r5,zero,80b0f8 <__udivdi3+0x20c>
  80b0e0:	3145c83a 	sub	r2,r6,r5
  80b0e4:	e084d83a 	srl	r2,fp,r2
  80b0e8:	a146983a 	sll	r3,r20,r5
  80b0ec:	e178983a 	sll	fp,fp,r5
  80b0f0:	8160983a 	sll	r16,r16,r5
  80b0f4:	18a8b03a 	or	r20,r3,r2
  80b0f8:	802ad43a 	srli	r21,r16,16
  80b0fc:	a009883a 	mov	r4,r20
  80b100:	85ffffcc 	andi	r23,r16,65535
  80b104:	a80b883a 	mov	r5,r21
  80b108:	080c1240 	call	80c124 <__udivsi3>
  80b10c:	a009883a 	mov	r4,r20
  80b110:	a80b883a 	mov	r5,r21
  80b114:	102d883a 	mov	r22,r2
  80b118:	080c12c0 	call	80c12c <__umodsi3>
  80b11c:	1004943a 	slli	r2,r2,16
  80b120:	e006d43a 	srli	r3,fp,16
  80b124:	bda3383a 	mul	r17,r23,r22
  80b128:	10c4b03a 	or	r2,r2,r3
  80b12c:	1440042e 	bgeu	r2,r17,80b140 <__udivdi3+0x254>
  80b130:	1405883a 	add	r2,r2,r16
  80b134:	b5bfffc4 	addi	r22,r22,-1
  80b138:	14000136 	bltu	r2,r16,80b140 <__udivdi3+0x254>
  80b13c:	1440d536 	bltu	r2,r17,80b494 <__udivdi3+0x5a8>
  80b140:	1463c83a 	sub	r17,r2,r17
  80b144:	8809883a 	mov	r4,r17
  80b148:	a80b883a 	mov	r5,r21
  80b14c:	080c1240 	call	80c124 <__udivsi3>
  80b150:	8809883a 	mov	r4,r17
  80b154:	a80b883a 	mov	r5,r21
  80b158:	1029883a 	mov	r20,r2
  80b15c:	080c12c0 	call	80c12c <__umodsi3>
  80b160:	1004943a 	slli	r2,r2,16
  80b164:	bd09383a 	mul	r4,r23,r20
  80b168:	e0ffffcc 	andi	r3,fp,65535
  80b16c:	10c4b03a 	or	r2,r2,r3
  80b170:	1100042e 	bgeu	r2,r4,80b184 <__udivdi3+0x298>
  80b174:	8085883a 	add	r2,r16,r2
  80b178:	a53fffc4 	addi	r20,r20,-1
  80b17c:	14000136 	bltu	r2,r16,80b184 <__udivdi3+0x298>
  80b180:	1100c736 	bltu	r2,r4,80b4a0 <__udivdi3+0x5b4>
  80b184:	b004943a 	slli	r2,r22,16
  80b188:	0009883a 	mov	r4,zero
  80b18c:	a084b03a 	or	r2,r20,r2
  80b190:	003fb706 	br	80b070 <__udivdi3+0x184>
  80b194:	00804034 	movhi	r2,256
  80b198:	10bfffc4 	addi	r2,r2,-1
  80b19c:	11c0a436 	bltu	r2,r7,80b430 <__udivdi3+0x544>
  80b1a0:	01400404 	movi	r5,16
  80b1a4:	2805883a 	mov	r2,r5
  80b1a8:	003fa406 	br	80b03c <__udivdi3+0x150>
  80b1ac:	0005883a 	mov	r2,zero
  80b1b0:	0009883a 	mov	r4,zero
  80b1b4:	003fae06 	br	80b070 <__udivdi3+0x184>
  80b1b8:	00804034 	movhi	r2,256
  80b1bc:	10bfffc4 	addi	r2,r2,-1
  80b1c0:	1400a136 	bltu	r2,r16,80b448 <__udivdi3+0x55c>
  80b1c4:	01400404 	movi	r5,16
  80b1c8:	2805883a 	mov	r2,r5
  80b1cc:	003f6006 	br	80af50 <__udivdi3+0x64>
  80b1d0:	01000044 	movi	r4,1
  80b1d4:	000b883a 	mov	r5,zero
  80b1d8:	080c1240 	call	80c124 <__udivsi3>
  80b1dc:	1021883a 	mov	r16,r2
  80b1e0:	00bfffd4 	movui	r2,65535
  80b1e4:	143ff436 	bltu	r2,r16,80b1b8 <__udivdi3+0x2cc>
  80b1e8:	003f5506 	br	80af40 <__udivdi3+0x54>
  80b1ec:	00804034 	movhi	r2,256
  80b1f0:	10bfffc4 	addi	r2,r2,-1
  80b1f4:	12009a36 	bltu	r2,r8,80b460 <__udivdi3+0x574>
  80b1f8:	01400404 	movi	r5,16
  80b1fc:	2805883a 	mov	r2,r5
  80b200:	003fae06 	br	80b0bc <__udivdi3+0x1d0>
  80b204:	3dc5c83a 	sub	r2,r7,r23
  80b208:	35c8983a 	sll	r4,r6,r23
  80b20c:	8086d83a 	srl	r3,r16,r2
  80b210:	a0a2d83a 	srl	r17,r20,r2
  80b214:	e084d83a 	srl	r2,fp,r2
  80b218:	20eab03a 	or	r21,r4,r3
  80b21c:	a82cd43a 	srli	r22,r21,16
  80b220:	a5c6983a 	sll	r3,r20,r23
  80b224:	8809883a 	mov	r4,r17
  80b228:	b00b883a 	mov	r5,r22
  80b22c:	1886b03a 	or	r3,r3,r2
  80b230:	d8c00215 	stw	r3,8(sp)
  80b234:	080c1240 	call	80c124 <__udivsi3>
  80b238:	8809883a 	mov	r4,r17
  80b23c:	b00b883a 	mov	r5,r22
  80b240:	1029883a 	mov	r20,r2
  80b244:	080c12c0 	call	80c12c <__umodsi3>
  80b248:	a8ffffcc 	andi	r3,r21,65535
  80b24c:	d8c00515 	stw	r3,20(sp)
  80b250:	d9000217 	ldw	r4,8(sp)
  80b254:	d9400517 	ldw	r5,20(sp)
  80b258:	1004943a 	slli	r2,r2,16
  80b25c:	2006d43a 	srli	r3,r4,16
  80b260:	85e0983a 	sll	r16,r16,r23
  80b264:	2d23383a 	mul	r17,r5,r20
  80b268:	10c4b03a 	or	r2,r2,r3
  80b26c:	dc000015 	stw	r16,0(sp)
  80b270:	1440032e 	bgeu	r2,r17,80b280 <__udivdi3+0x394>
  80b274:	1545883a 	add	r2,r2,r21
  80b278:	a53fffc4 	addi	r20,r20,-1
  80b27c:	15407f2e 	bgeu	r2,r21,80b47c <__udivdi3+0x590>
  80b280:	1463c83a 	sub	r17,r2,r17
  80b284:	8809883a 	mov	r4,r17
  80b288:	b00b883a 	mov	r5,r22
  80b28c:	080c1240 	call	80c124 <__udivsi3>
  80b290:	8809883a 	mov	r4,r17
  80b294:	b00b883a 	mov	r5,r22
  80b298:	1021883a 	mov	r16,r2
  80b29c:	080c12c0 	call	80c12c <__umodsi3>
  80b2a0:	d8c00517 	ldw	r3,20(sp)
  80b2a4:	d9000217 	ldw	r4,8(sp)
  80b2a8:	1004943a 	slli	r2,r2,16
  80b2ac:	1c0f383a 	mul	r7,r3,r16
  80b2b0:	20ffffcc 	andi	r3,r4,65535
  80b2b4:	10e2b03a 	or	r17,r2,r3
  80b2b8:	89c0032e 	bgeu	r17,r7,80b2c8 <__udivdi3+0x3dc>
  80b2bc:	8d63883a 	add	r17,r17,r21
  80b2c0:	843fffc4 	addi	r16,r16,-1
  80b2c4:	8d40692e 	bgeu	r17,r21,80b46c <__udivdi3+0x580>
  80b2c8:	a008943a 	slli	r4,r20,16
  80b2cc:	d9400017 	ldw	r5,0(sp)
  80b2d0:	89e3c83a 	sub	r17,r17,r7
  80b2d4:	8110b03a 	or	r8,r16,r4
  80b2d8:	280cd43a 	srli	r6,r5,16
  80b2dc:	28ffffcc 	andi	r3,r5,65535
  80b2e0:	40bfffcc 	andi	r2,r8,65535
  80b2e4:	400ad43a 	srli	r5,r8,16
  80b2e8:	10d3383a 	mul	r9,r2,r3
  80b2ec:	1185383a 	mul	r2,r2,r6
  80b2f0:	28c7383a 	mul	r3,r5,r3
  80b2f4:	4808d43a 	srli	r4,r9,16
  80b2f8:	298b383a 	mul	r5,r5,r6
  80b2fc:	10c5883a 	add	r2,r2,r3
  80b300:	2089883a 	add	r4,r4,r2
  80b304:	20c0022e 	bgeu	r4,r3,80b310 <__udivdi3+0x424>
  80b308:	00800074 	movhi	r2,1
  80b30c:	288b883a 	add	r5,r5,r2
  80b310:	2004d43a 	srli	r2,r4,16
  80b314:	288b883a 	add	r5,r5,r2
  80b318:	89403f36 	bltu	r17,r5,80b418 <__udivdi3+0x52c>
  80b31c:	89403926 	beq	r17,r5,80b404 <__udivdi3+0x518>
  80b320:	4005883a 	mov	r2,r8
  80b324:	0009883a 	mov	r4,zero
  80b328:	003f5106 	br	80b070 <__udivdi3+0x184>
  80b32c:	85a0983a 	sll	r16,r16,r22
  80b330:	3585c83a 	sub	r2,r6,r22
  80b334:	a0a2d83a 	srl	r17,r20,r2
  80b338:	802ad43a 	srli	r21,r16,16
  80b33c:	e084d83a 	srl	r2,fp,r2
  80b340:	a586983a 	sll	r3,r20,r22
  80b344:	8809883a 	mov	r4,r17
  80b348:	a80b883a 	mov	r5,r21
  80b34c:	1886b03a 	or	r3,r3,r2
  80b350:	d8c00115 	stw	r3,4(sp)
  80b354:	080c1240 	call	80c124 <__udivsi3>
  80b358:	8809883a 	mov	r4,r17
  80b35c:	a80b883a 	mov	r5,r21
  80b360:	d8800415 	stw	r2,16(sp)
  80b364:	080c12c0 	call	80c12c <__umodsi3>
  80b368:	d9000117 	ldw	r4,4(sp)
  80b36c:	d9400417 	ldw	r5,16(sp)
  80b370:	1004943a 	slli	r2,r2,16
  80b374:	85ffffcc 	andi	r23,r16,65535
  80b378:	2006d43a 	srli	r3,r4,16
  80b37c:	b963383a 	mul	r17,r23,r5
  80b380:	10c4b03a 	or	r2,r2,r3
  80b384:	1440042e 	bgeu	r2,r17,80b398 <__udivdi3+0x4ac>
  80b388:	297fffc4 	addi	r5,r5,-1
  80b38c:	1405883a 	add	r2,r2,r16
  80b390:	d9400415 	stw	r5,16(sp)
  80b394:	1400442e 	bgeu	r2,r16,80b4a8 <__udivdi3+0x5bc>
  80b398:	1463c83a 	sub	r17,r2,r17
  80b39c:	8809883a 	mov	r4,r17
  80b3a0:	a80b883a 	mov	r5,r21
  80b3a4:	080c1240 	call	80c124 <__udivsi3>
  80b3a8:	8809883a 	mov	r4,r17
  80b3ac:	a80b883a 	mov	r5,r21
  80b3b0:	1029883a 	mov	r20,r2
  80b3b4:	080c12c0 	call	80c12c <__umodsi3>
  80b3b8:	d9400117 	ldw	r5,4(sp)
  80b3bc:	1004943a 	slli	r2,r2,16
  80b3c0:	bd09383a 	mul	r4,r23,r20
  80b3c4:	28ffffcc 	andi	r3,r5,65535
  80b3c8:	10c6b03a 	or	r3,r2,r3
  80b3cc:	1900062e 	bgeu	r3,r4,80b3e8 <__udivdi3+0x4fc>
  80b3d0:	1c07883a 	add	r3,r3,r16
  80b3d4:	a53fffc4 	addi	r20,r20,-1
  80b3d8:	1c000336 	bltu	r3,r16,80b3e8 <__udivdi3+0x4fc>
  80b3dc:	1900022e 	bgeu	r3,r4,80b3e8 <__udivdi3+0x4fc>
  80b3e0:	a53fffc4 	addi	r20,r20,-1
  80b3e4:	1c07883a 	add	r3,r3,r16
  80b3e8:	d9400417 	ldw	r5,16(sp)
  80b3ec:	e5b8983a 	sll	fp,fp,r22
  80b3f0:	1923c83a 	sub	r17,r3,r4
  80b3f4:	2804943a 	slli	r2,r5,16
  80b3f8:	a0a8b03a 	or	r20,r20,r2
  80b3fc:	dd000315 	stw	r20,12(sp)
  80b400:	003ee106 	br	80af88 <__udivdi3+0x9c>
  80b404:	2004943a 	slli	r2,r4,16
  80b408:	e5c8983a 	sll	r4,fp,r23
  80b40c:	48ffffcc 	andi	r3,r9,65535
  80b410:	10c5883a 	add	r2,r2,r3
  80b414:	20bfc22e 	bgeu	r4,r2,80b320 <__udivdi3+0x434>
  80b418:	40bfffc4 	addi	r2,r8,-1
  80b41c:	0009883a 	mov	r4,zero
  80b420:	003f1306 	br	80b070 <__udivdi3+0x184>
  80b424:	01400204 	movi	r5,8
  80b428:	2805883a 	mov	r2,r5
  80b42c:	003f0306 	br	80b03c <__udivdi3+0x150>
  80b430:	01400604 	movi	r5,24
  80b434:	2805883a 	mov	r2,r5
  80b438:	003f0006 	br	80b03c <__udivdi3+0x150>
  80b43c:	01400204 	movi	r5,8
  80b440:	2805883a 	mov	r2,r5
  80b444:	003ec206 	br	80af50 <__udivdi3+0x64>
  80b448:	01400604 	movi	r5,24
  80b44c:	2805883a 	mov	r2,r5
  80b450:	003ebf06 	br	80af50 <__udivdi3+0x64>
  80b454:	01400204 	movi	r5,8
  80b458:	2805883a 	mov	r2,r5
  80b45c:	003f1706 	br	80b0bc <__udivdi3+0x1d0>
  80b460:	01400604 	movi	r5,24
  80b464:	2805883a 	mov	r2,r5
  80b468:	003f1406 	br	80b0bc <__udivdi3+0x1d0>
  80b46c:	89ff962e 	bgeu	r17,r7,80b2c8 <__udivdi3+0x3dc>
  80b470:	8d63883a 	add	r17,r17,r21
  80b474:	843fffc4 	addi	r16,r16,-1
  80b478:	003f9306 	br	80b2c8 <__udivdi3+0x3dc>
  80b47c:	147f802e 	bgeu	r2,r17,80b280 <__udivdi3+0x394>
  80b480:	a53fffc4 	addi	r20,r20,-1
  80b484:	1545883a 	add	r2,r2,r21
  80b488:	003f7d06 	br	80b280 <__udivdi3+0x394>
  80b48c:	a53fffc4 	addi	r20,r20,-1
  80b490:	003ede06 	br	80b00c <__udivdi3+0x120>
  80b494:	b5bfffc4 	addi	r22,r22,-1
  80b498:	1405883a 	add	r2,r2,r16
  80b49c:	003f2806 	br	80b140 <__udivdi3+0x254>
  80b4a0:	a53fffc4 	addi	r20,r20,-1
  80b4a4:	003f3706 	br	80b184 <__udivdi3+0x298>
  80b4a8:	147fbb2e 	bgeu	r2,r17,80b398 <__udivdi3+0x4ac>
  80b4ac:	297fffc4 	addi	r5,r5,-1
  80b4b0:	1405883a 	add	r2,r2,r16
  80b4b4:	d9400415 	stw	r5,16(sp)
  80b4b8:	003fb706 	br	80b398 <__udivdi3+0x4ac>
  80b4bc:	b5bfffc4 	addi	r22,r22,-1
  80b4c0:	1405883a 	add	r2,r2,r16
  80b4c4:	003ec006 	br	80afc8 <__udivdi3+0xdc>

0080b4c8 <__umoddi3>:
  80b4c8:	defff104 	addi	sp,sp,-60
  80b4cc:	dd800b15 	stw	r22,44(sp)
  80b4d0:	dd000915 	stw	r20,36(sp)
  80b4d4:	dc000515 	stw	r16,20(sp)
  80b4d8:	dfc00e15 	stw	ra,56(sp)
  80b4dc:	df000d15 	stw	fp,52(sp)
  80b4e0:	ddc00c15 	stw	r23,48(sp)
  80b4e4:	dd400a15 	stw	r21,40(sp)
  80b4e8:	dcc00815 	stw	r19,32(sp)
  80b4ec:	dc800715 	stw	r18,28(sp)
  80b4f0:	dc400615 	stw	r17,24(sp)
  80b4f4:	3021883a 	mov	r16,r6
  80b4f8:	202d883a 	mov	r22,r4
  80b4fc:	2829883a 	mov	r20,r5
  80b500:	38002b1e 	bne	r7,zero,80b5b0 <__umoddi3+0xe8>
  80b504:	29805036 	bltu	r5,r6,80b648 <__umoddi3+0x180>
  80b508:	30008a26 	beq	r6,zero,80b734 <__umoddi3+0x26c>
  80b50c:	00bfffd4 	movui	r2,65535
  80b510:	14008236 	bltu	r2,r16,80b71c <__umoddi3+0x254>
  80b514:	00803fc4 	movi	r2,255
  80b518:	14013636 	bltu	r2,r16,80b9f4 <__umoddi3+0x52c>
  80b51c:	000b883a 	mov	r5,zero
  80b520:	0005883a 	mov	r2,zero
  80b524:	8084d83a 	srl	r2,r16,r2
  80b528:	01002074 	movhi	r4,129
  80b52c:	210e2504 	addi	r4,r4,14484
  80b530:	01800804 	movi	r6,32
  80b534:	1105883a 	add	r2,r2,r4
  80b538:	10c00003 	ldbu	r3,0(r2)
  80b53c:	28c7883a 	add	r3,r5,r3
  80b540:	30efc83a 	sub	r23,r6,r3
  80b544:	b800941e 	bne	r23,zero,80b798 <__umoddi3+0x2d0>
  80b548:	802ad43a 	srli	r21,r16,16
  80b54c:	a423c83a 	sub	r17,r20,r16
  80b550:	0039883a 	mov	fp,zero
  80b554:	853fffcc 	andi	r20,r16,65535
  80b558:	8809883a 	mov	r4,r17
  80b55c:	a80b883a 	mov	r5,r21
  80b560:	080c1240 	call	80c124 <__udivsi3>
  80b564:	8809883a 	mov	r4,r17
  80b568:	a80b883a 	mov	r5,r21
  80b56c:	a0a3383a 	mul	r17,r20,r2
  80b570:	080c12c0 	call	80c12c <__umodsi3>
  80b574:	1004943a 	slli	r2,r2,16
  80b578:	b006d43a 	srli	r3,r22,16
  80b57c:	10c4b03a 	or	r2,r2,r3
  80b580:	1440032e 	bgeu	r2,r17,80b590 <__umoddi3+0xc8>
  80b584:	1405883a 	add	r2,r2,r16
  80b588:	14000136 	bltu	r2,r16,80b590 <__umoddi3+0xc8>
  80b58c:	14413536 	bltu	r2,r17,80ba64 <__umoddi3+0x59c>
  80b590:	1463c83a 	sub	r17,r2,r17
  80b594:	8809883a 	mov	r4,r17
  80b598:	a80b883a 	mov	r5,r21
  80b59c:	080c1240 	call	80c124 <__udivsi3>
  80b5a0:	8809883a 	mov	r4,r17
  80b5a4:	a0a3383a 	mul	r17,r20,r2
  80b5a8:	a80b883a 	mov	r5,r21
  80b5ac:	00004d06 	br	80b6e4 <__umoddi3+0x21c>
  80b5b0:	380d883a 	mov	r6,r7
  80b5b4:	29c0102e 	bgeu	r5,r7,80b5f8 <__umoddi3+0x130>
  80b5b8:	2011883a 	mov	r8,r4
  80b5bc:	2813883a 	mov	r9,r5
  80b5c0:	4005883a 	mov	r2,r8
  80b5c4:	4807883a 	mov	r3,r9
  80b5c8:	dfc00e17 	ldw	ra,56(sp)
  80b5cc:	df000d17 	ldw	fp,52(sp)
  80b5d0:	ddc00c17 	ldw	r23,48(sp)
  80b5d4:	dd800b17 	ldw	r22,44(sp)
  80b5d8:	dd400a17 	ldw	r21,40(sp)
  80b5dc:	dd000917 	ldw	r20,36(sp)
  80b5e0:	dcc00817 	ldw	r19,32(sp)
  80b5e4:	dc800717 	ldw	r18,28(sp)
  80b5e8:	dc400617 	ldw	r17,24(sp)
  80b5ec:	dc000517 	ldw	r16,20(sp)
  80b5f0:	dec00f04 	addi	sp,sp,60
  80b5f4:	f800283a 	ret
  80b5f8:	00bfffd4 	movui	r2,65535
  80b5fc:	11c05a36 	bltu	r2,r7,80b768 <__umoddi3+0x2a0>
  80b600:	00803fc4 	movi	r2,255
  80b604:	11c0fe36 	bltu	r2,r7,80ba00 <__umoddi3+0x538>
  80b608:	000b883a 	mov	r5,zero
  80b60c:	0005883a 	mov	r2,zero
  80b610:	3084d83a 	srl	r2,r6,r2
  80b614:	01002074 	movhi	r4,129
  80b618:	210e2504 	addi	r4,r4,14484
  80b61c:	01c00804 	movi	r7,32
  80b620:	1105883a 	add	r2,r2,r4
  80b624:	10c00003 	ldbu	r3,0(r2)
  80b628:	28c7883a 	add	r3,r5,r3
  80b62c:	38ebc83a 	sub	r21,r7,r3
  80b630:	a800851e 	bne	r21,zero,80b848 <__umoddi3+0x380>
  80b634:	35005236 	bltu	r6,r20,80b780 <__umoddi3+0x2b8>
  80b638:	b400512e 	bgeu	r22,r16,80b780 <__umoddi3+0x2b8>
  80b63c:	b011883a 	mov	r8,r22
  80b640:	a013883a 	mov	r9,r20
  80b644:	003fde06 	br	80b5c0 <__umoddi3+0xf8>
  80b648:	00bfffd4 	movui	r2,65535
  80b64c:	11804036 	bltu	r2,r6,80b750 <__umoddi3+0x288>
  80b650:	00803fc4 	movi	r2,255
  80b654:	1180ed36 	bltu	r2,r6,80ba0c <__umoddi3+0x544>
  80b658:	000b883a 	mov	r5,zero
  80b65c:	0005883a 	mov	r2,zero
  80b660:	8084d83a 	srl	r2,r16,r2
  80b664:	01002074 	movhi	r4,129
  80b668:	210e2504 	addi	r4,r4,14484
  80b66c:	01800804 	movi	r6,32
  80b670:	1105883a 	add	r2,r2,r4
  80b674:	10c00003 	ldbu	r3,0(r2)
  80b678:	28c7883a 	add	r3,r5,r3
  80b67c:	30c7c83a 	sub	r3,r6,r3
  80b680:	1800bf1e 	bne	r3,zero,80b980 <__umoddi3+0x4b8>
  80b684:	0039883a 	mov	fp,zero
  80b688:	802ad43a 	srli	r21,r16,16
  80b68c:	a009883a 	mov	r4,r20
  80b690:	85ffffcc 	andi	r23,r16,65535
  80b694:	a80b883a 	mov	r5,r21
  80b698:	080c1240 	call	80c124 <__udivsi3>
  80b69c:	a009883a 	mov	r4,r20
  80b6a0:	a80b883a 	mov	r5,r21
  80b6a4:	b8a3383a 	mul	r17,r23,r2
  80b6a8:	080c12c0 	call	80c12c <__umodsi3>
  80b6ac:	1004943a 	slli	r2,r2,16
  80b6b0:	b006d43a 	srli	r3,r22,16
  80b6b4:	10c4b03a 	or	r2,r2,r3
  80b6b8:	1440032e 	bgeu	r2,r17,80b6c8 <__umoddi3+0x200>
  80b6bc:	1405883a 	add	r2,r2,r16
  80b6c0:	14000136 	bltu	r2,r16,80b6c8 <__umoddi3+0x200>
  80b6c4:	1440e536 	bltu	r2,r17,80ba5c <__umoddi3+0x594>
  80b6c8:	1463c83a 	sub	r17,r2,r17
  80b6cc:	8809883a 	mov	r4,r17
  80b6d0:	a80b883a 	mov	r5,r21
  80b6d4:	080c1240 	call	80c124 <__udivsi3>
  80b6d8:	8809883a 	mov	r4,r17
  80b6dc:	b8a3383a 	mul	r17,r23,r2
  80b6e0:	a80b883a 	mov	r5,r21
  80b6e4:	080c12c0 	call	80c12c <__umodsi3>
  80b6e8:	1004943a 	slli	r2,r2,16
  80b6ec:	b0ffffcc 	andi	r3,r22,65535
  80b6f0:	10c4b03a 	or	r2,r2,r3
  80b6f4:	1440042e 	bgeu	r2,r17,80b708 <__umoddi3+0x240>
  80b6f8:	1405883a 	add	r2,r2,r16
  80b6fc:	14000236 	bltu	r2,r16,80b708 <__umoddi3+0x240>
  80b700:	1440012e 	bgeu	r2,r17,80b708 <__umoddi3+0x240>
  80b704:	1405883a 	add	r2,r2,r16
  80b708:	1445c83a 	sub	r2,r2,r17
  80b70c:	1724d83a 	srl	r18,r2,fp
  80b710:	0013883a 	mov	r9,zero
  80b714:	9011883a 	mov	r8,r18
  80b718:	003fa906 	br	80b5c0 <__umoddi3+0xf8>
  80b71c:	00804034 	movhi	r2,256
  80b720:	10bfffc4 	addi	r2,r2,-1
  80b724:	1400b036 	bltu	r2,r16,80b9e8 <__umoddi3+0x520>
  80b728:	01400404 	movi	r5,16
  80b72c:	2805883a 	mov	r2,r5
  80b730:	003f7c06 	br	80b524 <__umoddi3+0x5c>
  80b734:	01000044 	movi	r4,1
  80b738:	000b883a 	mov	r5,zero
  80b73c:	080c1240 	call	80c124 <__udivsi3>
  80b740:	1021883a 	mov	r16,r2
  80b744:	00bfffd4 	movui	r2,65535
  80b748:	143ff436 	bltu	r2,r16,80b71c <__umoddi3+0x254>
  80b74c:	003f7106 	br	80b514 <__umoddi3+0x4c>
  80b750:	00804034 	movhi	r2,256
  80b754:	10bfffc4 	addi	r2,r2,-1
  80b758:	1180af36 	bltu	r2,r6,80ba18 <__umoddi3+0x550>
  80b75c:	01400404 	movi	r5,16
  80b760:	2805883a 	mov	r2,r5
  80b764:	003fbe06 	br	80b660 <__umoddi3+0x198>
  80b768:	00804034 	movhi	r2,256
  80b76c:	10bfffc4 	addi	r2,r2,-1
  80b770:	11c0ac36 	bltu	r2,r7,80ba24 <__umoddi3+0x55c>
  80b774:	01400404 	movi	r5,16
  80b778:	2805883a 	mov	r2,r5
  80b77c:	003fa406 	br	80b610 <__umoddi3+0x148>
  80b780:	b409c83a 	sub	r4,r22,r16
  80b784:	b105803a 	cmpltu	r2,r22,r4
  80b788:	a187c83a 	sub	r3,r20,r6
  80b78c:	18a9c83a 	sub	r20,r3,r2
  80b790:	202d883a 	mov	r22,r4
  80b794:	003fa906 	br	80b63c <__umoddi3+0x174>
  80b798:	85e0983a 	sll	r16,r16,r23
  80b79c:	35c5c83a 	sub	r2,r6,r23
  80b7a0:	a0a2d83a 	srl	r17,r20,r2
  80b7a4:	802ad43a 	srli	r21,r16,16
  80b7a8:	b084d83a 	srl	r2,r22,r2
  80b7ac:	a5c6983a 	sll	r3,r20,r23
  80b7b0:	8809883a 	mov	r4,r17
  80b7b4:	a80b883a 	mov	r5,r21
  80b7b8:	1886b03a 	or	r3,r3,r2
  80b7bc:	d8c00115 	stw	r3,4(sp)
  80b7c0:	853fffcc 	andi	r20,r16,65535
  80b7c4:	080c1240 	call	80c124 <__udivsi3>
  80b7c8:	8809883a 	mov	r4,r17
  80b7cc:	a80b883a 	mov	r5,r21
  80b7d0:	a0a3383a 	mul	r17,r20,r2
  80b7d4:	080c12c0 	call	80c12c <__umodsi3>
  80b7d8:	d9000117 	ldw	r4,4(sp)
  80b7dc:	1004943a 	slli	r2,r2,16
  80b7e0:	b839883a 	mov	fp,r23
  80b7e4:	2006d43a 	srli	r3,r4,16
  80b7e8:	10c4b03a 	or	r2,r2,r3
  80b7ec:	1440022e 	bgeu	r2,r17,80b7f8 <__umoddi3+0x330>
  80b7f0:	1405883a 	add	r2,r2,r16
  80b7f4:	1400962e 	bgeu	r2,r16,80ba50 <__umoddi3+0x588>
  80b7f8:	1463c83a 	sub	r17,r2,r17
  80b7fc:	8809883a 	mov	r4,r17
  80b800:	a80b883a 	mov	r5,r21
  80b804:	080c1240 	call	80c124 <__udivsi3>
  80b808:	8809883a 	mov	r4,r17
  80b80c:	a80b883a 	mov	r5,r21
  80b810:	a0a3383a 	mul	r17,r20,r2
  80b814:	080c12c0 	call	80c12c <__umodsi3>
  80b818:	d9400117 	ldw	r5,4(sp)
  80b81c:	1004943a 	slli	r2,r2,16
  80b820:	28ffffcc 	andi	r3,r5,65535
  80b824:	10c4b03a 	or	r2,r2,r3
  80b828:	1440042e 	bgeu	r2,r17,80b83c <__umoddi3+0x374>
  80b82c:	1405883a 	add	r2,r2,r16
  80b830:	14000236 	bltu	r2,r16,80b83c <__umoddi3+0x374>
  80b834:	1440012e 	bgeu	r2,r17,80b83c <__umoddi3+0x374>
  80b838:	1405883a 	add	r2,r2,r16
  80b83c:	b5ec983a 	sll	r22,r22,r23
  80b840:	1463c83a 	sub	r17,r2,r17
  80b844:	003f4406 	br	80b558 <__umoddi3+0x90>
  80b848:	3d4fc83a 	sub	r7,r7,r21
  80b84c:	3546983a 	sll	r3,r6,r21
  80b850:	81c4d83a 	srl	r2,r16,r7
  80b854:	a1e2d83a 	srl	r17,r20,r7
  80b858:	a54c983a 	sll	r6,r20,r21
  80b85c:	18aeb03a 	or	r23,r3,r2
  80b860:	b828d43a 	srli	r20,r23,16
  80b864:	b1c4d83a 	srl	r2,r22,r7
  80b868:	8809883a 	mov	r4,r17
  80b86c:	a00b883a 	mov	r5,r20
  80b870:	308cb03a 	or	r6,r6,r2
  80b874:	d9c00315 	stw	r7,12(sp)
  80b878:	d9800215 	stw	r6,8(sp)
  80b87c:	080c1240 	call	80c124 <__udivsi3>
  80b880:	8809883a 	mov	r4,r17
  80b884:	a00b883a 	mov	r5,r20
  80b888:	1039883a 	mov	fp,r2
  80b88c:	080c12c0 	call	80c12c <__umodsi3>
  80b890:	b8ffffcc 	andi	r3,r23,65535
  80b894:	d8c00415 	stw	r3,16(sp)
  80b898:	d9000217 	ldw	r4,8(sp)
  80b89c:	d9400417 	ldw	r5,16(sp)
  80b8a0:	1004943a 	slli	r2,r2,16
  80b8a4:	2006d43a 	srli	r3,r4,16
  80b8a8:	8560983a 	sll	r16,r16,r21
  80b8ac:	2f23383a 	mul	r17,r5,fp
  80b8b0:	10c4b03a 	or	r2,r2,r3
  80b8b4:	dc000015 	stw	r16,0(sp)
  80b8b8:	b56c983a 	sll	r22,r22,r21
  80b8bc:	1440032e 	bgeu	r2,r17,80b8cc <__umoddi3+0x404>
  80b8c0:	15c5883a 	add	r2,r2,r23
  80b8c4:	e73fffc4 	addi	fp,fp,-1
  80b8c8:	15c05d2e 	bgeu	r2,r23,80ba40 <__umoddi3+0x578>
  80b8cc:	1463c83a 	sub	r17,r2,r17
  80b8d0:	8809883a 	mov	r4,r17
  80b8d4:	a00b883a 	mov	r5,r20
  80b8d8:	080c1240 	call	80c124 <__udivsi3>
  80b8dc:	8809883a 	mov	r4,r17
  80b8e0:	a00b883a 	mov	r5,r20
  80b8e4:	1021883a 	mov	r16,r2
  80b8e8:	080c12c0 	call	80c12c <__umodsi3>
  80b8ec:	d8c00417 	ldw	r3,16(sp)
  80b8f0:	d9000217 	ldw	r4,8(sp)
  80b8f4:	1004943a 	slli	r2,r2,16
  80b8f8:	1c23383a 	mul	r17,r3,r16
  80b8fc:	20ffffcc 	andi	r3,r4,65535
  80b900:	10ceb03a 	or	r7,r2,r3
  80b904:	3c40032e 	bgeu	r7,r17,80b914 <__umoddi3+0x44c>
  80b908:	3dcf883a 	add	r7,r7,r23
  80b90c:	843fffc4 	addi	r16,r16,-1
  80b910:	3dc0472e 	bgeu	r7,r23,80ba30 <__umoddi3+0x568>
  80b914:	e004943a 	slli	r2,fp,16
  80b918:	d9400017 	ldw	r5,0(sp)
  80b91c:	3c4fc83a 	sub	r7,r7,r17
  80b920:	8084b03a 	or	r2,r16,r2
  80b924:	28ffffcc 	andi	r3,r5,65535
  80b928:	280cd43a 	srli	r6,r5,16
  80b92c:	100ad43a 	srli	r5,r2,16
  80b930:	10bfffcc 	andi	r2,r2,65535
  80b934:	10d1383a 	mul	r8,r2,r3
  80b938:	28c7383a 	mul	r3,r5,r3
  80b93c:	1185383a 	mul	r2,r2,r6
  80b940:	4008d43a 	srli	r4,r8,16
  80b944:	298b383a 	mul	r5,r5,r6
  80b948:	10c5883a 	add	r2,r2,r3
  80b94c:	2089883a 	add	r4,r4,r2
  80b950:	20c0022e 	bgeu	r4,r3,80b95c <__umoddi3+0x494>
  80b954:	00800074 	movhi	r2,1
  80b958:	288b883a 	add	r5,r5,r2
  80b95c:	2004d43a 	srli	r2,r4,16
  80b960:	2008943a 	slli	r4,r4,16
  80b964:	40ffffcc 	andi	r3,r8,65535
  80b968:	288b883a 	add	r5,r5,r2
  80b96c:	20c9883a 	add	r4,r4,r3
  80b970:	39400b36 	bltu	r7,r5,80b9a0 <__umoddi3+0x4d8>
  80b974:	39403d26 	beq	r7,r5,80ba6c <__umoddi3+0x5a4>
  80b978:	394bc83a 	sub	r5,r7,r5
  80b97c:	00000f06 	br	80b9bc <__umoddi3+0x4f4>
  80b980:	30c5c83a 	sub	r2,r6,r3
  80b984:	1839883a 	mov	fp,r3
  80b988:	b084d83a 	srl	r2,r22,r2
  80b98c:	a0c6983a 	sll	r3,r20,r3
  80b990:	8720983a 	sll	r16,r16,fp
  80b994:	b72c983a 	sll	r22,r22,fp
  80b998:	18a8b03a 	or	r20,r3,r2
  80b99c:	003f3a06 	br	80b688 <__umoddi3+0x1c0>
  80b9a0:	d8c00017 	ldw	r3,0(sp)
  80b9a4:	20c5c83a 	sub	r2,r4,r3
  80b9a8:	2089803a 	cmpltu	r4,r4,r2
  80b9ac:	2dc7c83a 	sub	r3,r5,r23
  80b9b0:	1907c83a 	sub	r3,r3,r4
  80b9b4:	38cbc83a 	sub	r5,r7,r3
  80b9b8:	1009883a 	mov	r4,r2
  80b9bc:	b105c83a 	sub	r2,r22,r4
  80b9c0:	b087803a 	cmpltu	r3,r22,r2
  80b9c4:	28c7c83a 	sub	r3,r5,r3
  80b9c8:	d9400317 	ldw	r5,12(sp)
  80b9cc:	1544d83a 	srl	r2,r2,r21
  80b9d0:	1948983a 	sll	r4,r3,r5
  80b9d4:	1d46d83a 	srl	r3,r3,r21
  80b9d8:	20a4b03a 	or	r18,r4,r2
  80b9dc:	9011883a 	mov	r8,r18
  80b9e0:	1813883a 	mov	r9,r3
  80b9e4:	003ef606 	br	80b5c0 <__umoddi3+0xf8>
  80b9e8:	01400604 	movi	r5,24
  80b9ec:	2805883a 	mov	r2,r5
  80b9f0:	003ecc06 	br	80b524 <__umoddi3+0x5c>
  80b9f4:	01400204 	movi	r5,8
  80b9f8:	2805883a 	mov	r2,r5
  80b9fc:	003ec906 	br	80b524 <__umoddi3+0x5c>
  80ba00:	01400204 	movi	r5,8
  80ba04:	2805883a 	mov	r2,r5
  80ba08:	003f0106 	br	80b610 <__umoddi3+0x148>
  80ba0c:	01400204 	movi	r5,8
  80ba10:	2805883a 	mov	r2,r5
  80ba14:	003f1206 	br	80b660 <__umoddi3+0x198>
  80ba18:	01400604 	movi	r5,24
  80ba1c:	2805883a 	mov	r2,r5
  80ba20:	003f0f06 	br	80b660 <__umoddi3+0x198>
  80ba24:	01400604 	movi	r5,24
  80ba28:	2805883a 	mov	r2,r5
  80ba2c:	003ef806 	br	80b610 <__umoddi3+0x148>
  80ba30:	3c7fb82e 	bgeu	r7,r17,80b914 <__umoddi3+0x44c>
  80ba34:	843fffc4 	addi	r16,r16,-1
  80ba38:	3dcf883a 	add	r7,r7,r23
  80ba3c:	003fb506 	br	80b914 <__umoddi3+0x44c>
  80ba40:	147fa22e 	bgeu	r2,r17,80b8cc <__umoddi3+0x404>
  80ba44:	e73fffc4 	addi	fp,fp,-1
  80ba48:	15c5883a 	add	r2,r2,r23
  80ba4c:	003f9f06 	br	80b8cc <__umoddi3+0x404>
  80ba50:	147f692e 	bgeu	r2,r17,80b7f8 <__umoddi3+0x330>
  80ba54:	1405883a 	add	r2,r2,r16
  80ba58:	003f6706 	br	80b7f8 <__umoddi3+0x330>
  80ba5c:	1405883a 	add	r2,r2,r16
  80ba60:	003f1906 	br	80b6c8 <__umoddi3+0x200>
  80ba64:	1405883a 	add	r2,r2,r16
  80ba68:	003ec906 	br	80b590 <__umoddi3+0xc8>
  80ba6c:	b13fcc36 	bltu	r22,r4,80b9a0 <__umoddi3+0x4d8>
  80ba70:	000b883a 	mov	r5,zero
  80ba74:	003fd106 	br	80b9bc <__umoddi3+0x4f4>

0080ba78 <__divdf3>:
  80ba78:	deffed04 	addi	sp,sp,-76
  80ba7c:	dcc01115 	stw	r19,68(sp)
  80ba80:	dcc00404 	addi	r19,sp,16
  80ba84:	2011883a 	mov	r8,r4
  80ba88:	2813883a 	mov	r9,r5
  80ba8c:	dc000e15 	stw	r16,56(sp)
  80ba90:	d809883a 	mov	r4,sp
  80ba94:	980b883a 	mov	r5,r19
  80ba98:	dc000904 	addi	r16,sp,36
  80ba9c:	dfc01215 	stw	ra,72(sp)
  80baa0:	da400115 	stw	r9,4(sp)
  80baa4:	d9c00315 	stw	r7,12(sp)
  80baa8:	da000015 	stw	r8,0(sp)
  80baac:	d9800215 	stw	r6,8(sp)
  80bab0:	dc801015 	stw	r18,64(sp)
  80bab4:	dc400f15 	stw	r17,60(sp)
  80bab8:	08031000 	call	803100 <__unpack_d>
  80babc:	d9000204 	addi	r4,sp,8
  80bac0:	800b883a 	mov	r5,r16
  80bac4:	08031000 	call	803100 <__unpack_d>
  80bac8:	d9000417 	ldw	r4,16(sp)
  80bacc:	00800044 	movi	r2,1
  80bad0:	11000b2e 	bgeu	r2,r4,80bb00 <__divdf3+0x88>
  80bad4:	d9400917 	ldw	r5,36(sp)
  80bad8:	1140762e 	bgeu	r2,r5,80bcb4 <__divdf3+0x23c>
  80badc:	d8800517 	ldw	r2,20(sp)
  80bae0:	d8c00a17 	ldw	r3,40(sp)
  80bae4:	01800104 	movi	r6,4
  80bae8:	10c4f03a 	xor	r2,r2,r3
  80baec:	d8800515 	stw	r2,20(sp)
  80baf0:	21800226 	beq	r4,r6,80bafc <__divdf3+0x84>
  80baf4:	00800084 	movi	r2,2
  80baf8:	2080141e 	bne	r4,r2,80bb4c <__divdf3+0xd4>
  80bafc:	29000926 	beq	r5,r4,80bb24 <__divdf3+0xac>
  80bb00:	9809883a 	mov	r4,r19
  80bb04:	0802dec0 	call	802dec <__pack_d>
  80bb08:	dfc01217 	ldw	ra,72(sp)
  80bb0c:	dcc01117 	ldw	r19,68(sp)
  80bb10:	dc801017 	ldw	r18,64(sp)
  80bb14:	dc400f17 	ldw	r17,60(sp)
  80bb18:	dc000e17 	ldw	r16,56(sp)
  80bb1c:	dec01304 	addi	sp,sp,76
  80bb20:	f800283a 	ret
  80bb24:	01002074 	movhi	r4,129
  80bb28:	210e2004 	addi	r4,r4,14464
  80bb2c:	0802dec0 	call	802dec <__pack_d>
  80bb30:	dfc01217 	ldw	ra,72(sp)
  80bb34:	dcc01117 	ldw	r19,68(sp)
  80bb38:	dc801017 	ldw	r18,64(sp)
  80bb3c:	dc400f17 	ldw	r17,60(sp)
  80bb40:	dc000e17 	ldw	r16,56(sp)
  80bb44:	dec01304 	addi	sp,sp,76
  80bb48:	f800283a 	ret
  80bb4c:	29805b26 	beq	r5,r6,80bcbc <__divdf3+0x244>
  80bb50:	28802d26 	beq	r5,r2,80bc08 <__divdf3+0x190>
  80bb54:	d8c00617 	ldw	r3,24(sp)
  80bb58:	d8800b17 	ldw	r2,44(sp)
  80bb5c:	d9c00817 	ldw	r7,32(sp)
  80bb60:	dc400d17 	ldw	r17,52(sp)
  80bb64:	188bc83a 	sub	r5,r3,r2
  80bb68:	d9800717 	ldw	r6,28(sp)
  80bb6c:	dc000c17 	ldw	r16,48(sp)
  80bb70:	d9400615 	stw	r5,24(sp)
  80bb74:	3c403836 	bltu	r7,r17,80bc58 <__divdf3+0x1e0>
  80bb78:	89c03626 	beq	r17,r7,80bc54 <__divdf3+0x1dc>
  80bb7c:	0015883a 	mov	r10,zero
  80bb80:	001d883a 	mov	r14,zero
  80bb84:	02c40034 	movhi	r11,4096
  80bb88:	001f883a 	mov	r15,zero
  80bb8c:	003f883a 	mov	ra,zero
  80bb90:	04800f44 	movi	r18,61
  80bb94:	00000f06 	br	80bbd4 <__divdf3+0x15c>
  80bb98:	601d883a 	mov	r14,r12
  80bb9c:	681f883a 	mov	r15,r13
  80bba0:	400d883a 	mov	r6,r8
  80bba4:	100f883a 	mov	r7,r2
  80bba8:	3191883a 	add	r8,r6,r6
  80bbac:	5808d07a 	srli	r4,r11,1
  80bbb0:	4185803a 	cmpltu	r2,r8,r6
  80bbb4:	39d3883a 	add	r9,r7,r7
  80bbb8:	28c6b03a 	or	r3,r5,r3
  80bbbc:	1245883a 	add	r2,r2,r9
  80bbc0:	1815883a 	mov	r10,r3
  80bbc4:	2017883a 	mov	r11,r4
  80bbc8:	400d883a 	mov	r6,r8
  80bbcc:	100f883a 	mov	r7,r2
  80bbd0:	fc801726 	beq	ra,r18,80bc30 <__divdf3+0x1b8>
  80bbd4:	580a97fa 	slli	r5,r11,31
  80bbd8:	5006d07a 	srli	r3,r10,1
  80bbdc:	ffc00044 	addi	ra,ra,1
  80bbe0:	3c7ff136 	bltu	r7,r17,80bba8 <__divdf3+0x130>
  80bbe4:	3411c83a 	sub	r8,r6,r16
  80bbe8:	3205803a 	cmpltu	r2,r6,r8
  80bbec:	3c53c83a 	sub	r9,r7,r17
  80bbf0:	7298b03a 	or	r12,r14,r10
  80bbf4:	7adab03a 	or	r13,r15,r11
  80bbf8:	4885c83a 	sub	r2,r9,r2
  80bbfc:	89ffe61e 	bne	r17,r7,80bb98 <__divdf3+0x120>
  80bc00:	343fe936 	bltu	r6,r16,80bba8 <__divdf3+0x130>
  80bc04:	003fe406 	br	80bb98 <__divdf3+0x120>
  80bc08:	9809883a 	mov	r4,r19
  80bc0c:	d9800415 	stw	r6,16(sp)
  80bc10:	0802dec0 	call	802dec <__pack_d>
  80bc14:	dfc01217 	ldw	ra,72(sp)
  80bc18:	dcc01117 	ldw	r19,68(sp)
  80bc1c:	dc801017 	ldw	r18,64(sp)
  80bc20:	dc400f17 	ldw	r17,60(sp)
  80bc24:	dc000e17 	ldw	r16,56(sp)
  80bc28:	dec01304 	addi	sp,sp,76
  80bc2c:	f800283a 	ret
  80bc30:	00803fc4 	movi	r2,255
  80bc34:	7090703a 	and	r8,r14,r2
  80bc38:	00802004 	movi	r2,128
  80bc3c:	0007883a 	mov	r3,zero
  80bc40:	0013883a 	mov	r9,zero
  80bc44:	40800d26 	beq	r8,r2,80bc7c <__divdf3+0x204>
  80bc48:	dbc00815 	stw	r15,32(sp)
  80bc4c:	db800715 	stw	r14,28(sp)
  80bc50:	003fab06 	br	80bb00 <__divdf3+0x88>
  80bc54:	343fc92e 	bgeu	r6,r16,80bb7c <__divdf3+0x104>
  80bc58:	3185883a 	add	r2,r6,r6
  80bc5c:	1189803a 	cmpltu	r4,r2,r6
  80bc60:	39c7883a 	add	r3,r7,r7
  80bc64:	20c9883a 	add	r4,r4,r3
  80bc68:	297fffc4 	addi	r5,r5,-1
  80bc6c:	100d883a 	mov	r6,r2
  80bc70:	200f883a 	mov	r7,r4
  80bc74:	d9400615 	stw	r5,24(sp)
  80bc78:	003fc006 	br	80bb7c <__divdf3+0x104>
  80bc7c:	483ff21e 	bne	r9,zero,80bc48 <__divdf3+0x1d0>
  80bc80:	01004004 	movi	r4,256
  80bc84:	7104703a 	and	r2,r14,r4
  80bc88:	10c4b03a 	or	r2,r2,r3
  80bc8c:	103fee1e 	bne	r2,zero,80bc48 <__divdf3+0x1d0>
  80bc90:	31c4b03a 	or	r2,r6,r7
  80bc94:	103fec26 	beq	r2,zero,80bc48 <__divdf3+0x1d0>
  80bc98:	7205883a 	add	r2,r14,r8
  80bc9c:	1391803a 	cmpltu	r8,r2,r14
  80bca0:	43d1883a 	add	r8,r8,r15
  80bca4:	013fc004 	movi	r4,-256
  80bca8:	111c703a 	and	r14,r2,r4
  80bcac:	401f883a 	mov	r15,r8
  80bcb0:	003fe506 	br	80bc48 <__divdf3+0x1d0>
  80bcb4:	8009883a 	mov	r4,r16
  80bcb8:	003f9206 	br	80bb04 <__divdf3+0x8c>
  80bcbc:	9809883a 	mov	r4,r19
  80bcc0:	d8000715 	stw	zero,28(sp)
  80bcc4:	d8000815 	stw	zero,32(sp)
  80bcc8:	d8000615 	stw	zero,24(sp)
  80bccc:	003f8d06 	br	80bb04 <__divdf3+0x8c>

0080bcd0 <__eqdf2>:
  80bcd0:	deffef04 	addi	sp,sp,-68
  80bcd4:	dc400f15 	stw	r17,60(sp)
  80bcd8:	dc400404 	addi	r17,sp,16
  80bcdc:	2005883a 	mov	r2,r4
  80bce0:	2807883a 	mov	r3,r5
  80bce4:	dc000e15 	stw	r16,56(sp)
  80bce8:	d809883a 	mov	r4,sp
  80bcec:	880b883a 	mov	r5,r17
  80bcf0:	dc000904 	addi	r16,sp,36
  80bcf4:	d8c00115 	stw	r3,4(sp)
  80bcf8:	d8800015 	stw	r2,0(sp)
  80bcfc:	d9800215 	stw	r6,8(sp)
  80bd00:	dfc01015 	stw	ra,64(sp)
  80bd04:	d9c00315 	stw	r7,12(sp)
  80bd08:	08031000 	call	803100 <__unpack_d>
  80bd0c:	d9000204 	addi	r4,sp,8
  80bd10:	800b883a 	mov	r5,r16
  80bd14:	08031000 	call	803100 <__unpack_d>
  80bd18:	d8800417 	ldw	r2,16(sp)
  80bd1c:	00c00044 	movi	r3,1
  80bd20:	180d883a 	mov	r6,r3
  80bd24:	1880062e 	bgeu	r3,r2,80bd40 <__eqdf2+0x70>
  80bd28:	d8800917 	ldw	r2,36(sp)
  80bd2c:	8809883a 	mov	r4,r17
  80bd30:	800b883a 	mov	r5,r16
  80bd34:	1880022e 	bgeu	r3,r2,80bd40 <__eqdf2+0x70>
  80bd38:	08032380 	call	803238 <__fpcmp_parts_d>
  80bd3c:	100d883a 	mov	r6,r2
  80bd40:	3005883a 	mov	r2,r6
  80bd44:	dfc01017 	ldw	ra,64(sp)
  80bd48:	dc400f17 	ldw	r17,60(sp)
  80bd4c:	dc000e17 	ldw	r16,56(sp)
  80bd50:	dec01104 	addi	sp,sp,68
  80bd54:	f800283a 	ret

0080bd58 <__nedf2>:
  80bd58:	deffef04 	addi	sp,sp,-68
  80bd5c:	dc400f15 	stw	r17,60(sp)
  80bd60:	dc400404 	addi	r17,sp,16
  80bd64:	2005883a 	mov	r2,r4
  80bd68:	2807883a 	mov	r3,r5
  80bd6c:	dc000e15 	stw	r16,56(sp)
  80bd70:	d809883a 	mov	r4,sp
  80bd74:	880b883a 	mov	r5,r17
  80bd78:	dc000904 	addi	r16,sp,36
  80bd7c:	d8c00115 	stw	r3,4(sp)
  80bd80:	d8800015 	stw	r2,0(sp)
  80bd84:	d9800215 	stw	r6,8(sp)
  80bd88:	dfc01015 	stw	ra,64(sp)
  80bd8c:	d9c00315 	stw	r7,12(sp)
  80bd90:	08031000 	call	803100 <__unpack_d>
  80bd94:	d9000204 	addi	r4,sp,8
  80bd98:	800b883a 	mov	r5,r16
  80bd9c:	08031000 	call	803100 <__unpack_d>
  80bda0:	d8800417 	ldw	r2,16(sp)
  80bda4:	00c00044 	movi	r3,1
  80bda8:	180d883a 	mov	r6,r3
  80bdac:	1880062e 	bgeu	r3,r2,80bdc8 <__nedf2+0x70>
  80bdb0:	d8800917 	ldw	r2,36(sp)
  80bdb4:	8809883a 	mov	r4,r17
  80bdb8:	800b883a 	mov	r5,r16
  80bdbc:	1880022e 	bgeu	r3,r2,80bdc8 <__nedf2+0x70>
  80bdc0:	08032380 	call	803238 <__fpcmp_parts_d>
  80bdc4:	100d883a 	mov	r6,r2
  80bdc8:	3005883a 	mov	r2,r6
  80bdcc:	dfc01017 	ldw	ra,64(sp)
  80bdd0:	dc400f17 	ldw	r17,60(sp)
  80bdd4:	dc000e17 	ldw	r16,56(sp)
  80bdd8:	dec01104 	addi	sp,sp,68
  80bddc:	f800283a 	ret

0080bde0 <__gedf2>:
  80bde0:	deffef04 	addi	sp,sp,-68
  80bde4:	dc400f15 	stw	r17,60(sp)
  80bde8:	dc400404 	addi	r17,sp,16
  80bdec:	2005883a 	mov	r2,r4
  80bdf0:	2807883a 	mov	r3,r5
  80bdf4:	dc000e15 	stw	r16,56(sp)
  80bdf8:	d809883a 	mov	r4,sp
  80bdfc:	880b883a 	mov	r5,r17
  80be00:	dc000904 	addi	r16,sp,36
  80be04:	d8c00115 	stw	r3,4(sp)
  80be08:	d8800015 	stw	r2,0(sp)
  80be0c:	d9800215 	stw	r6,8(sp)
  80be10:	dfc01015 	stw	ra,64(sp)
  80be14:	d9c00315 	stw	r7,12(sp)
  80be18:	08031000 	call	803100 <__unpack_d>
  80be1c:	d9000204 	addi	r4,sp,8
  80be20:	800b883a 	mov	r5,r16
  80be24:	08031000 	call	803100 <__unpack_d>
  80be28:	d8800417 	ldw	r2,16(sp)
  80be2c:	00c00044 	movi	r3,1
  80be30:	01bfffc4 	movi	r6,-1
  80be34:	1880062e 	bgeu	r3,r2,80be50 <__gedf2+0x70>
  80be38:	d8800917 	ldw	r2,36(sp)
  80be3c:	8809883a 	mov	r4,r17
  80be40:	800b883a 	mov	r5,r16
  80be44:	1880022e 	bgeu	r3,r2,80be50 <__gedf2+0x70>
  80be48:	08032380 	call	803238 <__fpcmp_parts_d>
  80be4c:	100d883a 	mov	r6,r2
  80be50:	3005883a 	mov	r2,r6
  80be54:	dfc01017 	ldw	ra,64(sp)
  80be58:	dc400f17 	ldw	r17,60(sp)
  80be5c:	dc000e17 	ldw	r16,56(sp)
  80be60:	dec01104 	addi	sp,sp,68
  80be64:	f800283a 	ret

0080be68 <__ltdf2>:
  80be68:	deffef04 	addi	sp,sp,-68
  80be6c:	dc400f15 	stw	r17,60(sp)
  80be70:	dc400404 	addi	r17,sp,16
  80be74:	2005883a 	mov	r2,r4
  80be78:	2807883a 	mov	r3,r5
  80be7c:	dc000e15 	stw	r16,56(sp)
  80be80:	d809883a 	mov	r4,sp
  80be84:	880b883a 	mov	r5,r17
  80be88:	dc000904 	addi	r16,sp,36
  80be8c:	d8c00115 	stw	r3,4(sp)
  80be90:	d8800015 	stw	r2,0(sp)
  80be94:	d9800215 	stw	r6,8(sp)
  80be98:	dfc01015 	stw	ra,64(sp)
  80be9c:	d9c00315 	stw	r7,12(sp)
  80bea0:	08031000 	call	803100 <__unpack_d>
  80bea4:	d9000204 	addi	r4,sp,8
  80bea8:	800b883a 	mov	r5,r16
  80beac:	08031000 	call	803100 <__unpack_d>
  80beb0:	d8800417 	ldw	r2,16(sp)
  80beb4:	00c00044 	movi	r3,1
  80beb8:	180d883a 	mov	r6,r3
  80bebc:	1880062e 	bgeu	r3,r2,80bed8 <__ltdf2+0x70>
  80bec0:	d8800917 	ldw	r2,36(sp)
  80bec4:	8809883a 	mov	r4,r17
  80bec8:	800b883a 	mov	r5,r16
  80becc:	1880022e 	bgeu	r3,r2,80bed8 <__ltdf2+0x70>
  80bed0:	08032380 	call	803238 <__fpcmp_parts_d>
  80bed4:	100d883a 	mov	r6,r2
  80bed8:	3005883a 	mov	r2,r6
  80bedc:	dfc01017 	ldw	ra,64(sp)
  80bee0:	dc400f17 	ldw	r17,60(sp)
  80bee4:	dc000e17 	ldw	r16,56(sp)
  80bee8:	dec01104 	addi	sp,sp,68
  80beec:	f800283a 	ret

0080bef0 <__floatsidf>:
  80bef0:	2006d7fa 	srli	r3,r4,31
  80bef4:	defff604 	addi	sp,sp,-40
  80bef8:	008000c4 	movi	r2,3
  80befc:	dfc00915 	stw	ra,36(sp)
  80bf00:	dcc00815 	stw	r19,32(sp)
  80bf04:	dc800715 	stw	r18,28(sp)
  80bf08:	dc400615 	stw	r17,24(sp)
  80bf0c:	dc000515 	stw	r16,20(sp)
  80bf10:	d8800015 	stw	r2,0(sp)
  80bf14:	d8c00115 	stw	r3,4(sp)
  80bf18:	20000f1e 	bne	r4,zero,80bf58 <__floatsidf+0x68>
  80bf1c:	00800084 	movi	r2,2
  80bf20:	d8800015 	stw	r2,0(sp)
  80bf24:	d809883a 	mov	r4,sp
  80bf28:	0802dec0 	call	802dec <__pack_d>
  80bf2c:	1009883a 	mov	r4,r2
  80bf30:	180b883a 	mov	r5,r3
  80bf34:	2005883a 	mov	r2,r4
  80bf38:	2807883a 	mov	r3,r5
  80bf3c:	dfc00917 	ldw	ra,36(sp)
  80bf40:	dcc00817 	ldw	r19,32(sp)
  80bf44:	dc800717 	ldw	r18,28(sp)
  80bf48:	dc400617 	ldw	r17,24(sp)
  80bf4c:	dc000517 	ldw	r16,20(sp)
  80bf50:	dec00a04 	addi	sp,sp,40
  80bf54:	f800283a 	ret
  80bf58:	00800f04 	movi	r2,60
  80bf5c:	1807003a 	cmpeq	r3,r3,zero
  80bf60:	d8800215 	stw	r2,8(sp)
  80bf64:	18001126 	beq	r3,zero,80bfac <__floatsidf+0xbc>
  80bf68:	0027883a 	mov	r19,zero
  80bf6c:	2025883a 	mov	r18,r4
  80bf70:	d9000315 	stw	r4,12(sp)
  80bf74:	dcc00415 	stw	r19,16(sp)
  80bf78:	0802d6c0 	call	802d6c <__clzsi2>
  80bf7c:	11000744 	addi	r4,r2,29
  80bf80:	013fe80e 	bge	zero,r4,80bf24 <__floatsidf+0x34>
  80bf84:	10bfff44 	addi	r2,r2,-3
  80bf88:	10000c16 	blt	r2,zero,80bfbc <__floatsidf+0xcc>
  80bf8c:	90a2983a 	sll	r17,r18,r2
  80bf90:	0021883a 	mov	r16,zero
  80bf94:	d8800217 	ldw	r2,8(sp)
  80bf98:	dc400415 	stw	r17,16(sp)
  80bf9c:	dc000315 	stw	r16,12(sp)
  80bfa0:	1105c83a 	sub	r2,r2,r4
  80bfa4:	d8800215 	stw	r2,8(sp)
  80bfa8:	003fde06 	br	80bf24 <__floatsidf+0x34>
  80bfac:	00a00034 	movhi	r2,32768
  80bfb0:	20800a26 	beq	r4,r2,80bfdc <__floatsidf+0xec>
  80bfb4:	0109c83a 	sub	r4,zero,r4
  80bfb8:	003feb06 	br	80bf68 <__floatsidf+0x78>
  80bfbc:	9006d07a 	srli	r3,r18,1
  80bfc0:	008007c4 	movi	r2,31
  80bfc4:	1105c83a 	sub	r2,r2,r4
  80bfc8:	1886d83a 	srl	r3,r3,r2
  80bfcc:	9922983a 	sll	r17,r19,r4
  80bfd0:	9120983a 	sll	r16,r18,r4
  80bfd4:	1c62b03a 	or	r17,r3,r17
  80bfd8:	003fee06 	br	80bf94 <__floatsidf+0xa4>
  80bfdc:	0009883a 	mov	r4,zero
  80bfe0:	01707834 	movhi	r5,49632
  80bfe4:	003fd306 	br	80bf34 <__floatsidf+0x44>

0080bfe8 <udivmodsi4>:
  80bfe8:	29001b2e 	bgeu	r5,r4,80c058 <udivmodsi4+0x70>
  80bfec:	28001a16 	blt	r5,zero,80c058 <udivmodsi4+0x70>
  80bff0:	00800044 	movi	r2,1
  80bff4:	0007883a 	mov	r3,zero
  80bff8:	01c007c4 	movi	r7,31
  80bffc:	00000306 	br	80c00c <udivmodsi4+0x24>
  80c000:	19c01326 	beq	r3,r7,80c050 <udivmodsi4+0x68>
  80c004:	18c00044 	addi	r3,r3,1
  80c008:	28000416 	blt	r5,zero,80c01c <udivmodsi4+0x34>
  80c00c:	294b883a 	add	r5,r5,r5
  80c010:	1085883a 	add	r2,r2,r2
  80c014:	293ffa36 	bltu	r5,r4,80c000 <udivmodsi4+0x18>
  80c018:	10000d26 	beq	r2,zero,80c050 <udivmodsi4+0x68>
  80c01c:	0007883a 	mov	r3,zero
  80c020:	21400236 	bltu	r4,r5,80c02c <udivmodsi4+0x44>
  80c024:	2149c83a 	sub	r4,r4,r5
  80c028:	1886b03a 	or	r3,r3,r2
  80c02c:	1004d07a 	srli	r2,r2,1
  80c030:	280ad07a 	srli	r5,r5,1
  80c034:	103ffa1e 	bne	r2,zero,80c020 <udivmodsi4+0x38>
  80c038:	30000226 	beq	r6,zero,80c044 <udivmodsi4+0x5c>
  80c03c:	2005883a 	mov	r2,r4
  80c040:	f800283a 	ret
  80c044:	1809883a 	mov	r4,r3
  80c048:	2005883a 	mov	r2,r4
  80c04c:	f800283a 	ret
  80c050:	0007883a 	mov	r3,zero
  80c054:	003ff806 	br	80c038 <udivmodsi4+0x50>
  80c058:	00800044 	movi	r2,1
  80c05c:	0007883a 	mov	r3,zero
  80c060:	003fef06 	br	80c020 <udivmodsi4+0x38>

0080c064 <__divsi3>:
  80c064:	defffe04 	addi	sp,sp,-8
  80c068:	dc000015 	stw	r16,0(sp)
  80c06c:	dfc00115 	stw	ra,4(sp)
  80c070:	0021883a 	mov	r16,zero
  80c074:	20000c16 	blt	r4,zero,80c0a8 <__divsi3+0x44>
  80c078:	000d883a 	mov	r6,zero
  80c07c:	28000e16 	blt	r5,zero,80c0b8 <__divsi3+0x54>
  80c080:	080bfe80 	call	80bfe8 <udivmodsi4>
  80c084:	1007883a 	mov	r3,r2
  80c088:	8005003a 	cmpeq	r2,r16,zero
  80c08c:	1000011e 	bne	r2,zero,80c094 <__divsi3+0x30>
  80c090:	00c7c83a 	sub	r3,zero,r3
  80c094:	1805883a 	mov	r2,r3
  80c098:	dfc00117 	ldw	ra,4(sp)
  80c09c:	dc000017 	ldw	r16,0(sp)
  80c0a0:	dec00204 	addi	sp,sp,8
  80c0a4:	f800283a 	ret
  80c0a8:	0109c83a 	sub	r4,zero,r4
  80c0ac:	04000044 	movi	r16,1
  80c0b0:	000d883a 	mov	r6,zero
  80c0b4:	283ff20e 	bge	r5,zero,80c080 <__divsi3+0x1c>
  80c0b8:	014bc83a 	sub	r5,zero,r5
  80c0bc:	8021003a 	cmpeq	r16,r16,zero
  80c0c0:	003fef06 	br	80c080 <__divsi3+0x1c>

0080c0c4 <__modsi3>:
  80c0c4:	deffff04 	addi	sp,sp,-4
  80c0c8:	dfc00015 	stw	ra,0(sp)
  80c0cc:	01800044 	movi	r6,1
  80c0d0:	2807883a 	mov	r3,r5
  80c0d4:	20000416 	blt	r4,zero,80c0e8 <__modsi3+0x24>
  80c0d8:	28000c16 	blt	r5,zero,80c10c <__modsi3+0x48>
  80c0dc:	dfc00017 	ldw	ra,0(sp)
  80c0e0:	dec00104 	addi	sp,sp,4
  80c0e4:	080bfe81 	jmpi	80bfe8 <udivmodsi4>
  80c0e8:	0109c83a 	sub	r4,zero,r4
  80c0ec:	28000b16 	blt	r5,zero,80c11c <__modsi3+0x58>
  80c0f0:	180b883a 	mov	r5,r3
  80c0f4:	01800044 	movi	r6,1
  80c0f8:	080bfe80 	call	80bfe8 <udivmodsi4>
  80c0fc:	0085c83a 	sub	r2,zero,r2
  80c100:	dfc00017 	ldw	ra,0(sp)
  80c104:	dec00104 	addi	sp,sp,4
  80c108:	f800283a 	ret
  80c10c:	014bc83a 	sub	r5,zero,r5
  80c110:	dfc00017 	ldw	ra,0(sp)
  80c114:	dec00104 	addi	sp,sp,4
  80c118:	080bfe81 	jmpi	80bfe8 <udivmodsi4>
  80c11c:	0147c83a 	sub	r3,zero,r5
  80c120:	003ff306 	br	80c0f0 <__modsi3+0x2c>

0080c124 <__udivsi3>:
  80c124:	000d883a 	mov	r6,zero
  80c128:	080bfe81 	jmpi	80bfe8 <udivmodsi4>

0080c12c <__umodsi3>:
  80c12c:	01800044 	movi	r6,1
  80c130:	080bfe81 	jmpi	80bfe8 <udivmodsi4>

0080c134 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c134:	defffd04 	addi	sp,sp,-12
  80c138:	dc000015 	stw	r16,0(sp)
  80c13c:	dfc00215 	stw	ra,8(sp)
  80c140:	dc400115 	stw	r17,4(sp)
  80c144:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c148:	20001516 	blt	r4,zero,80c1a0 <close+0x6c>
  80c14c:	20c00324 	muli	r3,r4,12
  80c150:	00802074 	movhi	r2,129
  80c154:	10917804 	addi	r2,r2,17888
  80c158:	1887883a 	add	r3,r3,r2

  if (fd)
  80c15c:	18001026 	beq	r3,zero,80c1a0 <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c160:	18800017 	ldw	r2,0(r3)
  80c164:	10800417 	ldw	r2,16(r2)
  80c168:	10001c26 	beq	r2,zero,80c1dc <close+0xa8>
  80c16c:	1809883a 	mov	r4,r3
  80c170:	103ee83a 	callr	r2
  80c174:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c178:	8009883a 	mov	r4,r16
  80c17c:	080c6980 	call	80c698 <alt_release_fd>
    if (rval < 0)
  80c180:	88001b16 	blt	r17,zero,80c1f0 <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c184:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c188:	1805883a 	mov	r2,r3
  80c18c:	dfc00217 	ldw	ra,8(sp)
  80c190:	dc400117 	ldw	r17,4(sp)
  80c194:	dc000017 	ldw	r16,0(sp)
  80c198:	dec00304 	addi	sp,sp,12
  80c19c:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  80c1a0:	00802074 	movhi	r2,129
  80c1a4:	10961b04 	addi	r2,r2,22636
  80c1a8:	10800017 	ldw	r2,0(r2)
  80c1ac:	10000d26 	beq	r2,zero,80c1e4 <close+0xb0>
  80c1b0:	103ee83a 	callr	r2
  80c1b4:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c1b8:	00ffffc4 	movi	r3,-1
  80c1bc:	00801444 	movi	r2,81
  80c1c0:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  80c1c4:	1805883a 	mov	r2,r3
  80c1c8:	dfc00217 	ldw	ra,8(sp)
  80c1cc:	dc400117 	ldw	r17,4(sp)
  80c1d0:	dc000017 	ldw	r16,0(sp)
  80c1d4:	dec00304 	addi	sp,sp,12
  80c1d8:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c1dc:	080c6980 	call	80c698 <alt_release_fd>
  80c1e0:	003fe806 	br	80c184 <close+0x50>
  80c1e4:	01002074 	movhi	r4,129
  80c1e8:	211d5c04 	addi	r4,r4,30064
  80c1ec:	003ff206 	br	80c1b8 <close+0x84>
  80c1f0:	00802074 	movhi	r2,129
  80c1f4:	10961b04 	addi	r2,r2,22636
  80c1f8:	10800017 	ldw	r2,0(r2)
  80c1fc:	10000626 	beq	r2,zero,80c218 <close+0xe4>
  80c200:	103ee83a 	callr	r2
  80c204:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  80c208:	0445c83a 	sub	r2,zero,r17
  80c20c:	00ffffc4 	movi	r3,-1
  80c210:	20800015 	stw	r2,0(r4)
  80c214:	003fdc06 	br	80c188 <close+0x54>
  80c218:	01002074 	movhi	r4,129
  80c21c:	211d5c04 	addi	r4,r4,30064
  80c220:	003ff906 	br	80c208 <close+0xd4>

0080c224 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  80c224:	3005883a 	mov	r2,r6
  80c228:	f800283a 	ret

0080c22c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c22c:	20000226 	beq	r4,zero,80c238 <_exit+0xc>
    ALT_SIM_FAIL();
  80c230:	002af070 	cmpltui	zero,zero,43969
  80c234:	003fff06 	br	80c234 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  80c238:	002af0b0 	cmpltui	zero,zero,43970
  80c23c:	003ffd06 	br	80c234 <_exit+0x8>

0080c240 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c240:	deffff04 	addi	sp,sp,-4
  80c244:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c248:	20c00324 	muli	r3,r4,12
  80c24c:	20001116 	blt	r4,zero,80c294 <fstat+0x54>
  80c250:	00802074 	movhi	r2,129
  80c254:	10917804 	addi	r2,r2,17888
  80c258:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80c25c:	20000d26 	beq	r4,zero,80c294 <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c260:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c264:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c268:	10800817 	ldw	r2,32(r2)
  80c26c:	10000326 	beq	r2,zero,80c27c <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c270:	dfc00017 	ldw	ra,0(sp)
  80c274:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  80c278:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c27c:	00880004 	movi	r2,8192
  80c280:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c284:	1805883a 	mov	r2,r3
  80c288:	dfc00017 	ldw	ra,0(sp)
  80c28c:	dec00104 	addi	sp,sp,4
  80c290:	f800283a 	ret
  80c294:	00802074 	movhi	r2,129
  80c298:	10961b04 	addi	r2,r2,22636
  80c29c:	10800017 	ldw	r2,0(r2)
  80c2a0:	00c02074 	movhi	r3,129
  80c2a4:	18dd5c04 	addi	r3,r3,30064
  80c2a8:	10000226 	beq	r2,zero,80c2b4 <fstat+0x74>
  80c2ac:	103ee83a 	callr	r2
  80c2b0:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c2b4:	00801444 	movi	r2,81
  80c2b8:	18800015 	stw	r2,0(r3)
  80c2bc:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  80c2c0:	1805883a 	mov	r2,r3
  80c2c4:	dfc00017 	ldw	ra,0(sp)
  80c2c8:	dec00104 	addi	sp,sp,4
  80c2cc:	f800283a 	ret

0080c2d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c2d0:	defff004 	addi	sp,sp,-64
  80c2d4:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c2d8:	20c00324 	muli	r3,r4,12
  80c2dc:	20000f16 	blt	r4,zero,80c31c <isatty+0x4c>
  80c2e0:	00802074 	movhi	r2,129
  80c2e4:	10917804 	addi	r2,r2,17888
  80c2e8:	1885883a 	add	r2,r3,r2
  
  if (fd)
  80c2ec:	10000b26 	beq	r2,zero,80c31c <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c2f0:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c2f4:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c2f8:	10c00817 	ldw	r3,32(r2)
  80c2fc:	00800044 	movi	r2,1
  80c300:	18000326 	beq	r3,zero,80c310 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c304:	080c2400 	call	80c240 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c308:	d8c00117 	ldw	r3,4(sp)
  80c30c:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  80c310:	dfc00f17 	ldw	ra,60(sp)
  80c314:	dec01004 	addi	sp,sp,64
  80c318:	f800283a 	ret
  80c31c:	00802074 	movhi	r2,129
  80c320:	10961b04 	addi	r2,r2,22636
  80c324:	10800017 	ldw	r2,0(r2)
  80c328:	00c02074 	movhi	r3,129
  80c32c:	18dd5c04 	addi	r3,r3,30064
  80c330:	10000226 	beq	r2,zero,80c33c <isatty+0x6c>
  80c334:	103ee83a 	callr	r2
  80c338:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c33c:	00801444 	movi	r2,81
  80c340:	18800015 	stw	r2,0(r3)
  80c344:	0005883a 	mov	r2,zero
    return 0;
  }
}
  80c348:	dfc00f17 	ldw	ra,60(sp)
  80c34c:	dec01004 	addi	sp,sp,64
  80c350:	f800283a 	ret

0080c354 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c354:	defffe04 	addi	sp,sp,-8
  80c358:	dfc00115 	stw	ra,4(sp)
  80c35c:	df000015 	stw	fp,0(sp)
  80c360:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c364:	01002074 	movhi	r4,129
  80c368:	21162004 	addi	r4,r4,22656
  80c36c:	01402074 	movhi	r5,129
  80c370:	294ee904 	addi	r5,r5,15268
  80c374:	01802074 	movhi	r6,129
  80c378:	31962004 	addi	r6,r6,22656
  80c37c:	080c3d40 	call	80c3d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80c380:	01002034 	movhi	r4,128
  80c384:	21000804 	addi	r4,r4,32
  80c388:	01402034 	movhi	r5,128
  80c38c:	29400804 	addi	r5,r5,32
  80c390:	01802034 	movhi	r6,128
  80c394:	31806104 	addi	r6,r6,388
  80c398:	080c3d40 	call	80c3d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80c39c:	01002074 	movhi	r4,129
  80c3a0:	210d7004 	addi	r4,r4,13760
  80c3a4:	01402074 	movhi	r5,129
  80c3a8:	294d7004 	addi	r5,r5,13760
  80c3ac:	01802074 	movhi	r6,129
  80c3b0:	318ee904 	addi	r6,r6,15268
  80c3b4:	080c3d40 	call	80c3d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80c3b8:	0812aec0 	call	812aec <alt_dcache_flush_all>
  alt_icache_flush_all();
  80c3bc:	0812d740 	call	812d74 <alt_icache_flush_all>
}
  80c3c0:	e037883a 	mov	sp,fp
  80c3c4:	dfc00117 	ldw	ra,4(sp)
  80c3c8:	df000017 	ldw	fp,0(sp)
  80c3cc:	dec00204 	addi	sp,sp,8
  80c3d0:	f800283a 	ret

0080c3d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80c3d4:	defffc04 	addi	sp,sp,-16
  80c3d8:	df000315 	stw	fp,12(sp)
  80c3dc:	df000304 	addi	fp,sp,12
  80c3e0:	e13ffd15 	stw	r4,-12(fp)
  80c3e4:	e17ffe15 	stw	r5,-8(fp)
  80c3e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80c3ec:	e0fffe17 	ldw	r3,-8(fp)
  80c3f0:	e0bffd17 	ldw	r2,-12(fp)
  80c3f4:	18800e26 	beq	r3,r2,80c430 <alt_load_section+0x5c>
  {
    while( to != end )
  80c3f8:	00000a06 	br	80c424 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80c3fc:	e0bffd17 	ldw	r2,-12(fp)
  80c400:	10c00017 	ldw	r3,0(r2)
  80c404:	e0bffe17 	ldw	r2,-8(fp)
  80c408:	10c00015 	stw	r3,0(r2)
  80c40c:	e0bffe17 	ldw	r2,-8(fp)
  80c410:	10800104 	addi	r2,r2,4
  80c414:	e0bffe15 	stw	r2,-8(fp)
  80c418:	e0bffd17 	ldw	r2,-12(fp)
  80c41c:	10800104 	addi	r2,r2,4
  80c420:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c424:	e0fffe17 	ldw	r3,-8(fp)
  80c428:	e0bfff17 	ldw	r2,-4(fp)
  80c42c:	18bff31e 	bne	r3,r2,80c3fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80c430:	e037883a 	mov	sp,fp
  80c434:	df000017 	ldw	fp,0(sp)
  80c438:	dec00104 	addi	sp,sp,4
  80c43c:	f800283a 	ret

0080c440 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c440:	defffe04 	addi	sp,sp,-8
  80c444:	dfc00115 	stw	ra,4(sp)
  80c448:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c44c:	20001f16 	blt	r4,zero,80c4cc <lseek+0x8c>
  80c450:	20c00324 	muli	r3,r4,12
  80c454:	00802074 	movhi	r2,129
  80c458:	10917804 	addi	r2,r2,17888
  80c45c:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  80c460:	20001c26 	beq	r4,zero,80c4d4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c464:	20800017 	ldw	r2,0(r4)
  80c468:	10800717 	ldw	r2,28(r2)
  80c46c:	10000626 	beq	r2,zero,80c488 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c470:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80c474:	10000516 	blt	r2,zero,80c48c <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  80c478:	dfc00117 	ldw	ra,4(sp)
  80c47c:	dc000017 	ldw	r16,0(sp)
  80c480:	dec00204 	addi	sp,sp,8
  80c484:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c488:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80c48c:	00a1c83a 	sub	r16,zero,r2
  80c490:	00802074 	movhi	r2,129
  80c494:	10961b04 	addi	r2,r2,22636
  80c498:	10800017 	ldw	r2,0(r2)
  80c49c:	10000826 	beq	r2,zero,80c4c0 <lseek+0x80>
  80c4a0:	103ee83a 	callr	r2
  80c4a4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  80c4a8:	00bfffc4 	movi	r2,-1
  80c4ac:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  80c4b0:	dfc00117 	ldw	ra,4(sp)
  80c4b4:	dc000017 	ldw	r16,0(sp)
  80c4b8:	dec00204 	addi	sp,sp,8
  80c4bc:	f800283a 	ret
  80c4c0:	00c02074 	movhi	r3,129
  80c4c4:	18dd5c04 	addi	r3,r3,30064
  80c4c8:	003ff706 	br	80c4a8 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c4cc:	04001444 	movi	r16,81
  80c4d0:	003fef06 	br	80c490 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  80c4d4:	00bfebc4 	movi	r2,-81
  80c4d8:	003fec06 	br	80c48c <lseek+0x4c>

0080c4dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c4dc:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c4e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c4e4:	dfc00115 	stw	ra,4(sp)
  80c4e8:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c4ec:	080c8280 	call	80c828 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c4f0:	080c8480 	call	80c848 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c4f4:	01002074 	movhi	r4,129
  80c4f8:	210ee404 	addi	r4,r4,15248
  80c4fc:	200b883a 	mov	r5,r4
  80c500:	200d883a 	mov	r6,r4
  80c504:	0812ea40 	call	812ea4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c508:	0812c180 	call	812c18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c50c:	01002074 	movhi	r4,129
  80c510:	210b1f04 	addi	r4,r4,11388
  80c514:	08133940 	call	813394 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c518:	d1275017 	ldw	r4,-25280(gp)
  80c51c:	d1675117 	ldw	r5,-25276(gp)
  80c520:	d1a75217 	ldw	r6,-25272(gp)
  80c524:	0801ba80 	call	801ba8 <main>
  80c528:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  80c52c:	01000044 	movi	r4,1
  80c530:	080c1340 	call	80c134 <close>
  exit (result);
  80c534:	8809883a 	mov	r4,r17
  80c538:	08033000 	call	803300 <exit>

0080c53c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80c53c:	defffe04 	addi	sp,sp,-8
  80c540:	df000115 	stw	fp,4(sp)
  80c544:	df000104 	addi	fp,sp,4
  80c548:	e13fff15 	stw	r4,-4(fp)
}
  80c54c:	e037883a 	mov	sp,fp
  80c550:	df000017 	ldw	fp,0(sp)
  80c554:	dec00104 	addi	sp,sp,4
  80c558:	f800283a 	ret

0080c55c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c55c:	defffe04 	addi	sp,sp,-8
  80c560:	df000115 	stw	fp,4(sp)
  80c564:	df000104 	addi	fp,sp,4
  80c568:	e13fff15 	stw	r4,-4(fp)
}
  80c56c:	e037883a 	mov	sp,fp
  80c570:	df000017 	ldw	fp,0(sp)
  80c574:	dec00104 	addi	sp,sp,4
  80c578:	f800283a 	ret

0080c57c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c57c:	defffe04 	addi	sp,sp,-8
  80c580:	dfc00115 	stw	ra,4(sp)
  80c584:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c588:	20002516 	blt	r4,zero,80c620 <read+0xa4>
  80c58c:	20c00324 	muli	r3,r4,12
  80c590:	00802074 	movhi	r2,129
  80c594:	10917804 	addi	r2,r2,17888
  80c598:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80c59c:	20002026 	beq	r4,zero,80c620 <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c5a0:	20800217 	ldw	r2,8(r4)
  80c5a4:	00c00044 	movi	r3,1
  80c5a8:	108000cc 	andi	r2,r2,3
  80c5ac:	10c00b26 	beq	r2,r3,80c5dc <read+0x60>
  80c5b0:	20800017 	ldw	r2,0(r4)
  80c5b4:	10800517 	ldw	r2,20(r2)
  80c5b8:	10000826 	beq	r2,zero,80c5dc <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c5bc:	103ee83a 	callr	r2
  80c5c0:	1021883a 	mov	r16,r2
  80c5c4:	10002716 	blt	r2,zero,80c664 <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c5c8:	8005883a 	mov	r2,r16
  80c5cc:	dfc00117 	ldw	ra,4(sp)
  80c5d0:	dc000017 	ldw	r16,0(sp)
  80c5d4:	dec00204 	addi	sp,sp,8
  80c5d8:	f800283a 	ret
  80c5dc:	00802074 	movhi	r2,129
  80c5e0:	10961b04 	addi	r2,r2,22636
  80c5e4:	10800017 	ldw	r2,0(r2)
  80c5e8:	10000a26 	beq	r2,zero,80c614 <read+0x98>
  80c5ec:	103ee83a 	callr	r2
  80c5f0:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c5f4:	043fffc4 	movi	r16,-1
  80c5f8:	00800344 	movi	r2,13
  80c5fc:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c600:	8005883a 	mov	r2,r16
  80c604:	dfc00117 	ldw	ra,4(sp)
  80c608:	dc000017 	ldw	r16,0(sp)
  80c60c:	dec00204 	addi	sp,sp,8
  80c610:	f800283a 	ret
  80c614:	00c02074 	movhi	r3,129
  80c618:	18dd5c04 	addi	r3,r3,30064
  80c61c:	003ff506 	br	80c5f4 <read+0x78>
  80c620:	00802074 	movhi	r2,129
  80c624:	10961b04 	addi	r2,r2,22636
  80c628:	10800017 	ldw	r2,0(r2)
  80c62c:	10000a26 	beq	r2,zero,80c658 <read+0xdc>
  80c630:	103ee83a 	callr	r2
  80c634:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c638:	00801444 	movi	r2,81
  80c63c:	043fffc4 	movi	r16,-1
  80c640:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80c644:	8005883a 	mov	r2,r16
  80c648:	dfc00117 	ldw	ra,4(sp)
  80c64c:	dc000017 	ldw	r16,0(sp)
  80c650:	dec00204 	addi	sp,sp,8
  80c654:	f800283a 	ret
  80c658:	00c02074 	movhi	r3,129
  80c65c:	18dd5c04 	addi	r3,r3,30064
  80c660:	003ff506 	br	80c638 <read+0xbc>
  80c664:	00802074 	movhi	r2,129
  80c668:	10961b04 	addi	r2,r2,22636
  80c66c:	10800017 	ldw	r2,0(r2)
  80c670:	10000626 	beq	r2,zero,80c68c <read+0x110>
  80c674:	103ee83a 	callr	r2
  80c678:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  80c67c:	0405c83a 	sub	r2,zero,r16
  80c680:	043fffc4 	movi	r16,-1
  80c684:	18800015 	stw	r2,0(r3)
  80c688:	003fcf06 	br	80c5c8 <read+0x4c>
  80c68c:	00c02074 	movhi	r3,129
  80c690:	18dd5c04 	addi	r3,r3,30064
  80c694:	003ff906 	br	80c67c <read+0x100>

0080c698 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  80c698:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  80c69c:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  80c6a0:	1100050e 	bge	r2,r4,80c6b8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c6a4:	00802074 	movhi	r2,129
  80c6a8:	10917804 	addi	r2,r2,17888
  80c6ac:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  80c6b0:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  80c6b4:	10000215 	stw	zero,8(r2)
  80c6b8:	f800283a 	ret

0080c6bc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c6bc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c6c0:	00bfff84 	movi	r2,-2
  80c6c4:	2884703a 	and	r2,r5,r2
  80c6c8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c6cc:	d0e00c17 	ldw	r3,-32720(gp)
  80c6d0:	00bfff04 	movi	r2,-4
  80c6d4:	18c000c4 	addi	r3,r3,3
  80c6d8:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c6dc:	1909883a 	add	r4,r3,r4
  80c6e0:	00804034 	movhi	r2,256
  80c6e4:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c6e8:	d0e00c15 	stw	r3,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c6ec:	1100042e 	bgeu	r2,r4,80c700 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c6f0:	2801703a 	wrctl	status,r5
  80c6f4:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80c6f8:	1805883a 	mov	r2,r3
  80c6fc:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  80c700:	d1200c15 	stw	r4,-32720(gp)
  80c704:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80c708:	1805883a 	mov	r2,r3
  80c70c:	f800283a 	ret

0080c710 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c710:	defffe04 	addi	sp,sp,-8
  80c714:	dfc00115 	stw	ra,4(sp)
  80c718:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c71c:	20002416 	blt	r4,zero,80c7b0 <write+0xa0>
  80c720:	20c00324 	muli	r3,r4,12
  80c724:	00802074 	movhi	r2,129
  80c728:	10917804 	addi	r2,r2,17888
  80c72c:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80c730:	20001f26 	beq	r4,zero,80c7b0 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80c734:	20800217 	ldw	r2,8(r4)
  80c738:	108000cc 	andi	r2,r2,3
  80c73c:	10000b26 	beq	r2,zero,80c76c <write+0x5c>
  80c740:	20800017 	ldw	r2,0(r4)
  80c744:	10800617 	ldw	r2,24(r2)
  80c748:	10000826 	beq	r2,zero,80c76c <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80c74c:	103ee83a 	callr	r2
  80c750:	1021883a 	mov	r16,r2
  80c754:	10002716 	blt	r2,zero,80c7f4 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c758:	8005883a 	mov	r2,r16
  80c75c:	dfc00117 	ldw	ra,4(sp)
  80c760:	dc000017 	ldw	r16,0(sp)
  80c764:	dec00204 	addi	sp,sp,8
  80c768:	f800283a 	ret
  80c76c:	00802074 	movhi	r2,129
  80c770:	10961b04 	addi	r2,r2,22636
  80c774:	10800017 	ldw	r2,0(r2)
  80c778:	10000a26 	beq	r2,zero,80c7a4 <write+0x94>
  80c77c:	103ee83a 	callr	r2
  80c780:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  80c784:	043fffc4 	movi	r16,-1
  80c788:	00800344 	movi	r2,13
  80c78c:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c790:	8005883a 	mov	r2,r16
  80c794:	dfc00117 	ldw	ra,4(sp)
  80c798:	dc000017 	ldw	r16,0(sp)
  80c79c:	dec00204 	addi	sp,sp,8
  80c7a0:	f800283a 	ret
  80c7a4:	00c02074 	movhi	r3,129
  80c7a8:	18dd5c04 	addi	r3,r3,30064
  80c7ac:	003ff506 	br	80c784 <write+0x74>
  80c7b0:	00802074 	movhi	r2,129
  80c7b4:	10961b04 	addi	r2,r2,22636
  80c7b8:	10800017 	ldw	r2,0(r2)
  80c7bc:	10000a26 	beq	r2,zero,80c7e8 <write+0xd8>
  80c7c0:	103ee83a 	callr	r2
  80c7c4:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80c7c8:	00801444 	movi	r2,81
  80c7cc:	043fffc4 	movi	r16,-1
  80c7d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80c7d4:	8005883a 	mov	r2,r16
  80c7d8:	dfc00117 	ldw	ra,4(sp)
  80c7dc:	dc000017 	ldw	r16,0(sp)
  80c7e0:	dec00204 	addi	sp,sp,8
  80c7e4:	f800283a 	ret
  80c7e8:	00c02074 	movhi	r3,129
  80c7ec:	18dd5c04 	addi	r3,r3,30064
  80c7f0:	003ff506 	br	80c7c8 <write+0xb8>
  80c7f4:	00802074 	movhi	r2,129
  80c7f8:	10961b04 	addi	r2,r2,22636
  80c7fc:	10800017 	ldw	r2,0(r2)
  80c800:	10000626 	beq	r2,zero,80c81c <write+0x10c>
  80c804:	103ee83a 	callr	r2
  80c808:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  80c80c:	0405c83a 	sub	r2,zero,r16
  80c810:	043fffc4 	movi	r16,-1
  80c814:	18800015 	stw	r2,0(r3)
  80c818:	003fcf06 	br	80c758 <write+0x48>
  80c81c:	00c02074 	movhi	r3,129
  80c820:	18dd5c04 	addi	r3,r3,30064
  80c824:	003ff906 	br	80c80c <write+0xfc>

0080c828 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80c828:	deffff04 	addi	sp,sp,-4
  80c82c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80c830:	08132440 	call	813244 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80c834:	00800044 	movi	r2,1
  80c838:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80c83c:	dfc00017 	ldw	ra,0(sp)
  80c840:	dec00104 	addi	sp,sp,4
  80c844:	f800283a 	ret

0080c848 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80c848:	defffe04 	addi	sp,sp,-8
  80c84c:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80c850:	04000044 	movi	r16,1
  80c854:	01c0fa04 	movi	r7,1000
  80c858:	800d883a 	mov	r6,r16
  80c85c:	01004434 	movhi	r4,272
  80c860:	21050004 	addi	r4,r4,5120
  80c864:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80c868:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80c86c:	080cf580 	call	80cf58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80c870:	000d883a 	mov	r6,zero
  80c874:	01002074 	movhi	r4,129
  80c878:	2111e204 	addi	r4,r4,18312
  80c87c:	000b883a 	mov	r5,zero
  80c880:	080ca580 	call	80ca58 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80c884:	01002074 	movhi	r4,129
  80c888:	2111d804 	addi	r4,r4,18272
  80c88c:	01402074 	movhi	r5,129
  80c890:	29561804 	addi	r5,r5,22624
  80c894:	0812b040 	call	812b04 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80c898:	02002074 	movhi	r8,129
  80c89c:	4215f004 	addi	r8,r8,22464
  80c8a0:	41000a17 	ldw	r4,40(r8)
  80c8a4:	01c00084 	movi	r7,2
  80c8a8:	20800017 	ldw	r2,0(r4)
  80c8ac:	40800b15 	stw	r2,44(r8)
  80c8b0:	20c00117 	ldw	r3,4(r4)
  80c8b4:	40c00c15 	stw	r3,48(r8)
  80c8b8:	2080020b 	ldhu	r2,8(r4)
  80c8bc:	40800f15 	stw	r2,60(r8)
  80c8c0:	20c0028b 	ldhu	r3,10(r4)
  80c8c4:	40c01015 	stw	r3,64(r8)
  80c8c8:	20800317 	ldw	r2,12(r4)
  80c8cc:	1405d83a 	sra	r2,r2,r16
  80c8d0:	1404703a 	and	r2,r2,r16
  80c8d4:	40800d15 	stw	r2,52(r8)
  80c8d8:	20c00317 	ldw	r3,12(r4)
  80c8dc:	1807d13a 	srai	r3,r3,4
  80c8e0:	18c003cc 	andi	r3,r3,15
  80c8e4:	40c00e15 	stw	r3,56(r8)
  80c8e8:	21400317 	ldw	r5,12(r4)
  80c8ec:	280cd43a 	srli	r6,r5,16
  80c8f0:	1c001c26 	beq	r3,r16,80c964 <alt_sys_init+0x11c>
  80c8f4:	19c01e26 	beq	r3,r7,80c970 <alt_sys_init+0x128>
  80c8f8:	41c01115 	stw	r7,68(r8)
  80c8fc:	3809883a 	mov	r4,r7
  80c900:	280ad63a 	srli	r5,r5,24
  80c904:	31803fcc 	andi	r6,r6,255
  80c908:	00800804 	movi	r2,32
  80c90c:	118fc83a 	sub	r7,r2,r6
  80c910:	00ffffc4 	movi	r3,-1
  80c914:	1145c83a 	sub	r2,r2,r5
  80c918:	1884d83a 	srl	r2,r3,r2
  80c91c:	19c6d83a 	srl	r3,r3,r7
  80c920:	310d883a 	add	r6,r6,r4
  80c924:	01402074 	movhi	r5,129
  80c928:	29561804 	addi	r5,r5,22624
  80c92c:	01002074 	movhi	r4,129
  80c930:	2115f004 	addi	r4,r4,22464
  80c934:	40801415 	stw	r2,80(r8)
  80c938:	40c01215 	stw	r3,72(r8)
  80c93c:	41801315 	stw	r6,76(r8)
  80c940:	0812b040 	call	812b04 <alt_dev_llist_insert>
  80c944:	01002074 	movhi	r4,129
  80c948:	21160504 	addi	r4,r4,22548
  80c94c:	01402074 	movhi	r5,129
  80c950:	29561804 	addi	r5,r5,22624
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
}
  80c954:	dfc00117 	ldw	ra,4(sp)
  80c958:	dc000017 	ldw	r16,0(sp)
  80c95c:	dec00204 	addi	sp,sp,8
  80c960:	0812b041 	jmpi	812b04 <alt_dev_llist_insert>
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80c964:	40001115 	stw	zero,68(r8)
  80c968:	41001117 	ldw	r4,68(r8)
  80c96c:	003fe406 	br	80c900 <alt_sys_init+0xb8>
  80c970:	8009883a 	mov	r4,r16
  80c974:	44001115 	stw	r16,68(r8)
  80c978:	003fe106 	br	80c900 <alt_sys_init+0xb8>

0080c97c <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80c97c:	21000017 	ldw	r4,0(r4)
  80c980:	21000a04 	addi	r4,r4,40
  80c984:	080cbe01 	jmpi	80cbe0 <altera_avalon_jtag_uart_ioctl>

0080c988 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80c988:	20800017 	ldw	r2,0(r4)
  80c98c:	21400217 	ldw	r5,8(r4)
  80c990:	11000a04 	addi	r4,r2,40
  80c994:	080c9b81 	jmpi	80c9b8 <altera_avalon_jtag_uart_close>

0080c998 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80c998:	20800017 	ldw	r2,0(r4)
  80c99c:	21c00217 	ldw	r7,8(r4)
  80c9a0:	11000a04 	addi	r4,r2,40
  80c9a4:	080cdd41 	jmpi	80cdd4 <altera_avalon_jtag_uart_write>

0080c9a8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80c9a8:	20800017 	ldw	r2,0(r4)
  80c9ac:	21c00217 	ldw	r7,8(r4)
  80c9b0:	11000a04 	addi	r4,r2,40
  80c9b4:	080cc681 	jmpi	80cc68 <altera_avalon_jtag_uart_read>

0080c9b8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c9b8:	2950000c 	andi	r5,r5,16384
  80c9bc:	21800c17 	ldw	r6,48(r4)
  80c9c0:	28000426 	beq	r5,zero,80c9d4 <altera_avalon_jtag_uart_close+0x1c>
  80c9c4:	00000706 	br	80c9e4 <altera_avalon_jtag_uart_close+0x2c>
  80c9c8:	20c00917 	ldw	r3,36(r4)
  80c9cc:	20800117 	ldw	r2,4(r4)
  80c9d0:	1880022e 	bgeu	r3,r2,80c9dc <altera_avalon_jtag_uart_close+0x24>
  80c9d4:	20800d17 	ldw	r2,52(r4)
  80c9d8:	11bffb1e 	bne	r2,r6,80c9c8 <altera_avalon_jtag_uart_close+0x10>
  80c9dc:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  80c9e0:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c9e4:	20800d17 	ldw	r2,52(r4)
  80c9e8:	11bffc26 	beq	r2,r6,80c9dc <altera_avalon_jtag_uart_close+0x24>
  80c9ec:	20c00117 	ldw	r3,4(r4)
  80c9f0:	20800917 	ldw	r2,36(r4)
  80c9f4:	10fff92e 	bgeu	r2,r3,80c9dc <altera_avalon_jtag_uart_close+0x24>
  80c9f8:	00bffd44 	movi	r2,-11
  80c9fc:	f800283a 	ret

0080ca00 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ca00:	20c00017 	ldw	r3,0(r4)
  80ca04:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ca08:	1081000c 	andi	r2,r2,1024
  80ca0c:	10000a1e 	bne	r2,zero,80ca38 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ca10:	20c00917 	ldw	r3,36(r4)
  80ca14:	00a00034 	movhi	r2,32768
  80ca18:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  80ca1c:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ca20:	10c00136 	bltu	r2,r3,80ca28 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  80ca24:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ca28:	00c02074 	movhi	r3,129
  80ca2c:	18dd7104 	addi	r3,r3,30148
  80ca30:	18800017 	ldw	r2,0(r3)
  80ca34:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ca38:	20800817 	ldw	r2,32(r4)
  80ca3c:	10810014 	ori	r2,r2,1024
  80ca40:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ca44:	00c02074 	movhi	r3,129
  80ca48:	18dd7104 	addi	r3,r3,30148
  80ca4c:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  80ca50:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ca54:	f800283a 	ret

0080ca58 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ca58:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ca5c:	defffd04 	addi	sp,sp,-12
  80ca60:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ca64:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ca68:	2021883a 	mov	r16,r4
  80ca6c:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ca70:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ca74:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80ca78:	2809883a 	mov	r4,r5
  80ca7c:	800f883a 	mov	r7,r16
  80ca80:	300b883a 	mov	r5,r6
  80ca84:	01802074 	movhi	r6,129
  80ca88:	31b2b604 	addi	r6,r6,-13608
  80ca8c:	d8000015 	stw	zero,0(sp)
  80ca90:	0812e180 	call	812e18 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80ca94:	00c02074 	movhi	r3,129
  80ca98:	18dd7104 	addi	r3,r3,30148
  80ca9c:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80caa0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80caa4:	81000204 	addi	r4,r16,8
  80caa8:	01802074 	movhi	r6,129
  80caac:	31b28004 	addi	r6,r6,-13824
  80cab0:	800f883a 	mov	r7,r16
  80cab4:	0812a580 	call	812a58 <alt_alarm_start>
  80cab8:	1000030e 	bge	r2,zero,80cac8 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80cabc:	00a00034 	movhi	r2,32768
  80cac0:	10bfffc4 	addi	r2,r2,-1
  80cac4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80cac8:	dfc00217 	ldw	ra,8(sp)
  80cacc:	dc000117 	ldw	r16,4(sp)
  80cad0:	dec00304 	addi	sp,sp,12
  80cad4:	f800283a 	ret

0080cad8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80cad8:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80cadc:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80cae0:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cae4:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80cae8:	4880c00c 	andi	r2,r9,768
  80caec:	10003426 	beq	r2,zero,80cbc0 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80caf0:	4880400c 	andi	r2,r9,256
  80caf4:	10001626 	beq	r2,zero,80cb50 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80caf8:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  80cafc:	2a000b17 	ldw	r8,44(r5)
  80cb00:	10800044 	addi	r2,r2,1
  80cb04:	1081ffcc 	andi	r2,r2,2047
  80cb08:	12000c1e 	bne	r2,r8,80cb3c <altera_avalon_jtag_uart_irq+0x64>
  80cb0c:	00002d06 	br	80cbc4 <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cb10:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cb14:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cb18:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cb1c:	18c00044 	addi	r3,r3,1
  80cb20:	18c1ffcc 	andi	r3,r3,2047
  80cb24:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cb28:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cb2c:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  80cb30:	21000044 	addi	r4,r4,1
  80cb34:	2101ffcc 	andi	r4,r4,2047
  80cb38:	22000326 	beq	r4,r8,80cb48 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80cb3c:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80cb40:	30a0000c 	andi	r2,r6,32768
  80cb44:	103ff21e 	bne	r2,zero,80cb10 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80cb48:	30bfffec 	andhi	r2,r6,65535
  80cb4c:	10001d1e 	bne	r2,zero,80cbc4 <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80cb50:	4880800c 	andi	r2,r9,512
  80cb54:	103fe326 	beq	r2,zero,80cae4 <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80cb58:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cb5c:	20000b1e 	bne	r4,zero,80cb8c <altera_avalon_jtag_uart_irq+0xb4>
  80cb60:	003fe006 	br	80cae4 <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80cb64:	28800d17 	ldw	r2,52(r5)
  80cb68:	1145883a 	add	r2,r2,r5
  80cb6c:	10c20e07 	ldb	r3,2104(r2)
  80cb70:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cb74:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80cb78:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cb7c:	10800044 	addi	r2,r2,1
  80cb80:	1081ffcc 	andi	r2,r2,2047
  80cb84:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cb88:	203fd626 	beq	r4,zero,80cae4 <altera_avalon_jtag_uart_irq+0xc>
  80cb8c:	28c00d17 	ldw	r3,52(r5)
  80cb90:	28800c17 	ldw	r2,48(r5)
  80cb94:	18bff31e 	bne	r3,r2,80cb64 <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cb98:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cb9c:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cba0:	00ffff44 	movi	r3,-3
  80cba4:	10c4703a 	and	r2,r2,r3
  80cba8:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cbac:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cbb0:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cbb4:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80cbb8:	4880c00c 	andi	r2,r9,768
  80cbbc:	103fcc1e 	bne	r2,zero,80caf0 <altera_avalon_jtag_uart_irq+0x18>
  80cbc0:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cbc4:	28800817 	ldw	r2,32(r5)
  80cbc8:	00ffff84 	movi	r3,-2
  80cbcc:	10c4703a 	and	r2,r2,r3
  80cbd0:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80cbd4:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cbd8:	50c00037 	ldwio	r3,0(r10)
  80cbdc:	003fdc06 	br	80cb50 <altera_avalon_jtag_uart_irq+0x78>

0080cbe0 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  80cbe0:	009a8044 	movi	r2,27137
  80cbe4:	28800f26 	beq	r5,r2,80cc24 <altera_avalon_jtag_uart_ioctl+0x44>
  80cbe8:	009a8084 	movi	r2,27138
  80cbec:	28800326 	beq	r5,r2,80cbfc <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80cbf0:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  80cbf4:	1805883a 	mov	r2,r3
  80cbf8:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80cbfc:	21400117 	ldw	r5,4(r4)
  80cc00:	00a00034 	movhi	r2,32768
  80cc04:	10bfffc4 	addi	r2,r2,-1
  80cc08:	28bff926 	beq	r5,r2,80cbf0 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80cc0c:	20800917 	ldw	r2,36(r4)
  80cc10:	0007883a 	mov	r3,zero
  80cc14:	1145803a 	cmpltu	r2,r2,r5
  80cc18:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  80cc1c:	1805883a 	mov	r2,r3
  80cc20:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80cc24:	20c00117 	ldw	r3,4(r4)
  80cc28:	00a00034 	movhi	r2,32768
  80cc2c:	10bfffc4 	addi	r2,r2,-1
  80cc30:	18bfef26 	beq	r3,r2,80cbf0 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cc34:	31800017 	ldw	r6,0(r6)
  80cc38:	10bfff44 	addi	r2,r2,-3
  80cc3c:	30ffff84 	addi	r3,r6,-2
  80cc40:	10c00436 	bltu	r2,r3,80cc54 <altera_avalon_jtag_uart_ioctl+0x74>
  80cc44:	0007883a 	mov	r3,zero
  80cc48:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  80cc4c:	1805883a 	mov	r2,r3
  80cc50:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cc54:	01a00034 	movhi	r6,32768
  80cc58:	31bfff84 	addi	r6,r6,-2
  80cc5c:	0007883a 	mov	r3,zero
  80cc60:	21800115 	stw	r6,4(r4)
  80cc64:	003ff906 	br	80cc4c <altera_avalon_jtag_uart_ioctl+0x6c>

0080cc68 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80cc68:	defff404 	addi	sp,sp,-48
  80cc6c:	dd400715 	stw	r21,28(sp)
  80cc70:	dcc00515 	stw	r19,20(sp)
  80cc74:	dfc00b15 	stw	ra,44(sp)
  80cc78:	df000a15 	stw	fp,40(sp)
  80cc7c:	ddc00915 	stw	r23,36(sp)
  80cc80:	dd800815 	stw	r22,32(sp)
  80cc84:	dd000615 	stw	r20,24(sp)
  80cc88:	dc800415 	stw	r18,16(sp)
  80cc8c:	dc400315 	stw	r17,12(sp)
  80cc90:	dc000215 	stw	r16,8(sp)
  80cc94:	302b883a 	mov	r21,r6
  80cc98:	2027883a 	mov	r19,r4
  80cc9c:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cca0:	0180480e 	bge	zero,r6,80cdc4 <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80cca4:	39d0000c 	andi	r7,r7,16384
  80cca8:	d9c00015 	stw	r7,0(sp)
  80ccac:	dd000117 	ldw	r20,4(sp)
  80ccb0:	07020004 	movi	fp,2048
  80ccb4:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  80ccb8:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ccbc:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80ccc0:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  80ccc4:	b4400136 	bltu	r22,r17,80cccc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ccc8:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80cccc:	a009883a 	mov	r4,r20
  80ccd0:	bc4b883a 	add	r5,r23,r17
  80ccd4:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  80ccd8:	80000826 	beq	r16,zero,80ccfc <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  80ccdc:	ac002036 	bltu	r21,r16,80cd60 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80cce0:	0803bc80 	call	803bc8 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cce4:	8445883a 	add	r2,r16,r17
  80cce8:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80ccec:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ccf0:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80ccf4:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  80ccf8:	057fef16 	blt	zero,r21,80ccb8 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  80ccfc:	d8800117 	ldw	r2,4(sp)
  80cd00:	a080231e 	bne	r20,r2,80cd90 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80cd04:	d8c00017 	ldw	r3,0(sp)
  80cd08:	1800301e 	bne	r3,zero,80cdcc <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80cd0c:	98800a17 	ldw	r2,40(r19)
  80cd10:	b080031e 	bne	r22,r2,80cd20 <altera_avalon_jtag_uart_read+0xb8>
  80cd14:	98c00917 	ldw	r3,36(r19)
  80cd18:	98800117 	ldw	r2,4(r19)
  80cd1c:	18bffb36 	bltu	r3,r2,80cd0c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80cd20:	98800a17 	ldw	r2,40(r19)
  80cd24:	b0800126 	beq	r22,r2,80cd2c <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cd28:	057fe016 	blt	zero,r21,80ccac <altera_avalon_jtag_uart_read+0x44>
  80cd2c:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  80cd30:	dfc00b17 	ldw	ra,44(sp)
  80cd34:	df000a17 	ldw	fp,40(sp)
  80cd38:	ddc00917 	ldw	r23,36(sp)
  80cd3c:	dd800817 	ldw	r22,32(sp)
  80cd40:	dd400717 	ldw	r21,28(sp)
  80cd44:	dd000617 	ldw	r20,24(sp)
  80cd48:	dcc00517 	ldw	r19,20(sp)
  80cd4c:	dc800417 	ldw	r18,16(sp)
  80cd50:	dc400317 	ldw	r17,12(sp)
  80cd54:	dc000217 	ldw	r16,8(sp)
  80cd58:	dec00c04 	addi	sp,sp,48
  80cd5c:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80cd60:	99400e04 	addi	r5,r19,56
  80cd64:	a009883a 	mov	r4,r20
  80cd68:	a80d883a 	mov	r6,r21
  80cd6c:	894b883a 	add	r5,r17,r5
  80cd70:	0803bc80 	call	803bc8 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80cd74:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cd78:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80cd7c:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cd80:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80cd84:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cd88:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80cd8c:	a0bfdd26 	beq	r20,r2,80cd04 <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd90:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd94:	00bfff84 	movi	r2,-2
  80cd98:	2084703a 	and	r2,r4,r2
  80cd9c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cda0:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cda4:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cda8:	18c00054 	ori	r3,r3,1
  80cdac:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cdb0:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cdb4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  80cdb8:	d8c00117 	ldw	r3,4(sp)
  80cdbc:	a0c5c83a 	sub	r2,r20,r3
  80cdc0:	003fdb06 	br	80cd30 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  80cdc4:	3890000c 	andi	r2,r7,16384
  80cdc8:	103fd826 	beq	r2,zero,80cd2c <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cdcc:	00bffd44 	movi	r2,-11
  80cdd0:	003fd706 	br	80cd30 <altera_avalon_jtag_uart_read+0xc8>

0080cdd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80cdd4:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80cdd8:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80cddc:	ddc00715 	stw	r23,28(sp)
  80cde0:	dd800615 	stw	r22,24(sp)
  80cde4:	dcc00315 	stw	r19,12(sp)
  80cde8:	dc000015 	stw	r16,0(sp)
  80cdec:	dfc00815 	stw	ra,32(sp)
  80cdf0:	dd400515 	stw	r21,20(sp)
  80cdf4:	dd000415 	stw	r20,16(sp)
  80cdf8:	dc800215 	stw	r18,8(sp)
  80cdfc:	dc400115 	stw	r17,4(sp)
  80ce00:	3027883a 	mov	r19,r6
  80ce04:	2021883a 	mov	r16,r4
  80ce08:	282d883a 	mov	r22,r5
  80ce0c:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ce10:	40004926 	beq	r8,zero,80cf38 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80ce14:	3d50000c 	andi	r21,r7,16384
  80ce18:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80ce1c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  80ce20:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  80ce24:	91403d2e 	bgeu	r18,r5,80cf1c <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  80ce28:	2c85c83a 	sub	r2,r5,r18
  80ce2c:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  80ce30:	30002626 	beq	r6,zero,80cecc <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  80ce34:	3023883a 	mov	r17,r6
  80ce38:	9980012e 	bgeu	r19,r6,80ce40 <altera_avalon_jtag_uart_write+0x6c>
  80ce3c:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  80ce40:	81020e04 	addi	r4,r16,2104
  80ce44:	a00b883a 	mov	r5,r20
  80ce48:	2489883a 	add	r4,r4,r18
  80ce4c:	880d883a 	mov	r6,r17
  80ce50:	0803bc80 	call	803bc8 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce54:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  80ce58:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce5c:	18c1ffcc 	andi	r3,r3,2047
  80ce60:	9a000048 	cmpgei	r8,r19,1
  80ce64:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  80ce68:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ce6c:	403feb1e 	bne	r8,zero,80ce1c <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ce70:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ce74:	00bfff84 	movi	r2,-2
  80ce78:	2084703a 	and	r2,r4,r2
  80ce7c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ce80:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ce84:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ce88:	18c00094 	ori	r3,r3,2
  80ce8c:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ce90:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ce94:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ce98:	b5002926 	beq	r22,r20,80cf40 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  80ce9c:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  80cea0:	dfc00817 	ldw	ra,32(sp)
  80cea4:	ddc00717 	ldw	r23,28(sp)
  80cea8:	dd800617 	ldw	r22,24(sp)
  80ceac:	dd400517 	ldw	r21,20(sp)
  80ceb0:	dd000417 	ldw	r20,16(sp)
  80ceb4:	dcc00317 	ldw	r19,12(sp)
  80ceb8:	dc800217 	ldw	r18,8(sp)
  80cebc:	dc400117 	ldw	r17,4(sp)
  80cec0:	dc000017 	ldw	r16,0(sp)
  80cec4:	dec00904 	addi	sp,sp,36
  80cec8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cecc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ced0:	00bfff84 	movi	r2,-2
  80ced4:	2084703a 	and	r2,r4,r2
  80ced8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cedc:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cee0:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cee4:	18c00094 	ori	r3,r3,2
  80cee8:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ceec:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cef0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80cef4:	a83fe81e 	bne	r21,zero,80ce98 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80cef8:	80800d17 	ldw	r2,52(r16)
  80cefc:	1140031e 	bne	r2,r5,80cf0c <altera_avalon_jtag_uart_write+0x138>
  80cf00:	80c00917 	ldw	r3,36(r16)
  80cf04:	80800117 	ldw	r2,4(r16)
  80cf08:	18bffb36 	bltu	r3,r2,80cef8 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80cf0c:	80800d17 	ldw	r2,52(r16)
  80cf10:	117fe126 	beq	r2,r5,80ce98 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80cf14:	403fc11e 	bne	r8,zero,80ce1c <altera_avalon_jtag_uart_write+0x48>
  80cf18:	003fd506 	br	80ce70 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  80cf1c:	28000326 	beq	r5,zero,80cf2c <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80cf20:	00820004 	movi	r2,2048
  80cf24:	148dc83a 	sub	r6,r2,r18
  80cf28:	003fc106 	br	80ce30 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80cf2c:	0081ffc4 	movi	r2,2047
  80cf30:	148dc83a 	sub	r6,r2,r18
  80cf34:	003fbe06 	br	80ce30 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80cf38:	2829883a 	mov	r20,r5
  80cf3c:	003fcc06 	br	80ce70 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  80cf40:	b890000c 	andi	r2,r23,16384
  80cf44:	1000021e 	bne	r2,zero,80cf50 <altera_avalon_jtag_uart_write+0x17c>
  80cf48:	00bffec4 	movi	r2,-5
  80cf4c:	003fd406 	br	80cea0 <altera_avalon_jtag_uart_write+0xcc>
  80cf50:	00bffd44 	movi	r2,-11
  80cf54:	003fd206 	br	80cea0 <altera_avalon_jtag_uart_write+0xcc>

0080cf58 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80cf58:	02002074 	movhi	r8,129
  80cf5c:	421d7104 	addi	r8,r8,30148
  80cf60:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80cf64:	defffe04 	addi	sp,sp,-8
  80cf68:	3807883a 	mov	r3,r7
  80cf6c:	dfc00115 	stw	ra,4(sp)
  80cf70:	200f883a 	mov	r7,r4
  80cf74:	1000011e 	bne	r2,zero,80cf7c <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  80cf78:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80cf7c:	008001c4 	movi	r2,7
  80cf80:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80cf84:	2809883a 	mov	r4,r5
  80cf88:	300b883a 	mov	r5,r6
  80cf8c:	01802074 	movhi	r6,129
  80cf90:	31b3ea04 	addi	r6,r6,-12376
  80cf94:	d8000015 	stw	zero,0(sp)
  80cf98:	0812e180 	call	812e18 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80cf9c:	dfc00117 	ldw	ra,4(sp)
  80cfa0:	dec00204 	addi	sp,sp,8
  80cfa4:	f800283a 	ret

0080cfa8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80cfa8:	defffe04 	addi	sp,sp,-8
  80cfac:	dfc00115 	stw	ra,4(sp)
  80cfb0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80cfb4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80cfb8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cfbc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cfc0:	00bfff84 	movi	r2,-2
  80cfc4:	8084703a 	and	r2,r16,r2
  80cfc8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  80cfcc:	081315c0 	call	81315c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cfd0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  80cfd4:	dfc00117 	ldw	ra,4(sp)
  80cfd8:	dc000017 	ldw	r16,0(sp)
  80cfdc:	dec00204 	addi	sp,sp,8
  80cfe0:	f800283a 	ret

0080cfe4 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80cfe4:	da400117 	ldw	r9,4(sp)
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80cfe8:	29c5383a 	mul	r2,r5,r7
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80cfec:	da000017 	ldw	r8,0(sp)
	if (mode == 0)
  80cff0:	48000e26 	beq	r9,zero,80d02c <helper_plot_pixel+0x48>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  80cff4:	00800044 	movi	r2,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80cff8:	29c7383a 	mul	r3,r5,r7
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  80cffc:	48800626 	beq	r9,r2,80d018 <helper_plot_pixel+0x34>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80d000:	1985883a 	add	r2,r3,r6
  80d004:	1085883a 	add	r2,r2,r2
  80d008:	1085883a 	add	r2,r2,r2
  80d00c:	1105883a 	add	r2,r2,r4
  80d010:	12000035 	stwio	r8,0(r2)
  80d014:	f800283a 	ret
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80d018:	30c5883a 	add	r2,r6,r3
  80d01c:	1085883a 	add	r2,r2,r2
  80d020:	1105883a 	add	r2,r2,r4
  80d024:	1200002d 	sthio	r8,0(r2)
  80d028:	f800283a 	ret
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d02c:	3085883a 	add	r2,r6,r2
  80d030:	1105883a 	add	r2,r2,r4
  80d034:	12000025 	stbio	r8,0(r2)
  80d038:	f800283a 	ret

0080d03c <alt_up_pixel_buffer_dma_draw_vline>:
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  80d03c:	3811883a 	mov	r8,r7


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80d040:	dac00017 	ldw	r11,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d044:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d048:	20801017 	ldw	r2,64(r4)
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
  80d04c:	3980022e 	bgeu	r7,r6,80d058 <alt_up_pixel_buffer_dma_draw_vline+0x1c>
  80d050:	3011883a 	mov	r8,r6
  80d054:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80d058:	2a401a2e 	bgeu	r5,r9,80d0c4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
  80d05c:	3080192e 	bgeu	r6,r2,80d0c4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d060:	40800136 	bltu	r8,r2,80d068 <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
  80d064:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d068:	d8c00117 	ldw	r3,4(sp)
  80d06c:	00800044 	movi	r2,1
  80d070:	18803826 	beq	r3,r2,80d154 <alt_up_pixel_buffer_dma_draw_vline+0x118>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d074:	22800b17 	ldw	r10,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d078:	20800d17 	ldw	r2,52(r4)
  80d07c:	1000121e 	bne	r2,zero,80d0c8 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d080:	21c01317 	ldw	r7,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d084:	21000e17 	ldw	r4,56(r4)
  80d088:	02400044 	movi	r9,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d08c:	31c4983a 	sll	r2,r6,r7
  80d090:	5087883a 	add	r3,r10,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d094:	22401e26 	beq	r4,r9,80d110 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d098:	00800084 	movi	r2,2
  80d09c:	20803a26 	beq	r4,r2,80d188 <alt_up_pixel_buffer_dma_draw_vline+0x14c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d0a0:	41804236 	bltu	r8,r6,80d1ac <alt_up_pixel_buffer_dma_draw_vline+0x170>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d0a4:	2945883a 	add	r2,r5,r5
  80d0a8:	49c8983a 	sll	r4,r9,r7
  80d0ac:	1085883a 	add	r2,r2,r2
  80d0b0:	10c5883a 	add	r2,r2,r3
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80d0b4:	12c00035 	stwio	r11,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d0b8:	31800044 	addi	r6,r6,1
  80d0bc:	1105883a 	add	r2,r2,r4
  80d0c0:	41bffc2e 	bgeu	r8,r6,80d0b4 <alt_up_pixel_buffer_dma_draw_vline+0x78>
  80d0c4:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d0c8:	21000e17 	ldw	r4,56(r4)
  80d0cc:	00800044 	movi	r2,1
  80d0d0:	20801726 	beq	r4,r2,80d130 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d0d4:	00800084 	movi	r2,2
  80d0d8:	20802026 	beq	r4,r2,80d15c <alt_up_pixel_buffer_dma_draw_vline+0x120>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d0dc:	41bff936 	bltu	r8,r6,80d0c4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d0e0:	4a45883a 	add	r2,r9,r9
  80d0e4:	1089883a 	add	r4,r2,r2
  80d0e8:	3107383a 	mul	r3,r6,r4
  80d0ec:	2945883a 	add	r2,r5,r5
  80d0f0:	1085883a 	add	r2,r2,r2
  80d0f4:	50c7883a 	add	r3,r10,r3
  80d0f8:	10c5883a 	add	r2,r2,r3
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80d0fc:	12c00035 	stwio	r11,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d100:	31800044 	addi	r6,r6,1
  80d104:	1105883a 	add	r2,r2,r4
  80d108:	41bffc2e 	bgeu	r8,r6,80d0fc <alt_up_pixel_buffer_dma_draw_vline+0xc0>
  80d10c:	f800283a 	ret
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d110:	41bfec36 	bltu	r8,r6,80d0c4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
  80d114:	49c8983a 	sll	r4,r9,r7
  80d118:	1945883a 	add	r2,r3,r5
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80d11c:	12c00025 	stbio	r11,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d120:	31800044 	addi	r6,r6,1
  80d124:	1105883a 	add	r2,r2,r4
  80d128:	41bffc2e 	bgeu	r8,r6,80d11c <alt_up_pixel_buffer_dma_draw_vline+0xe0>
  80d12c:	f800283a 	ret
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d130:	41bfe436 	bltu	r8,r6,80d0c4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
  80d134:	3245383a 	mul	r2,r6,r9
  80d138:	5085883a 	add	r2,r10,r2
  80d13c:	2885883a 	add	r2,r5,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80d140:	12c00025 	stbio	r11,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d144:	31800044 	addi	r6,r6,1
  80d148:	1245883a 	add	r2,r2,r9
  80d14c:	41bffc2e 	bgeu	r8,r6,80d140 <alt_up_pixel_buffer_dma_draw_vline+0x104>
  80d150:	f800283a 	ret
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d154:	22800c17 	ldw	r10,48(r4)
  80d158:	003fc706 	br	80d078 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d15c:	41bfd936 	bltu	r8,r6,80d0c4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  80d160:	4a49883a 	add	r4,r9,r9
  80d164:	3105383a 	mul	r2,r6,r4
  80d168:	2947883a 	add	r3,r5,r5
  80d16c:	5085883a 	add	r2,r10,r2
  80d170:	1885883a 	add	r2,r3,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80d174:	12c0002d 	sthio	r11,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d178:	31800044 	addi	r6,r6,1
  80d17c:	1105883a 	add	r2,r2,r4
  80d180:	41bffc2e 	bgeu	r8,r6,80d174 <alt_up_pixel_buffer_dma_draw_vline+0x138>
  80d184:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d188:	41800936 	bltu	r8,r6,80d1b0 <alt_up_pixel_buffer_dma_draw_vline+0x174>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d18c:	49c8983a 	sll	r4,r9,r7
  80d190:	2945883a 	add	r2,r5,r5
  80d194:	10c5883a 	add	r2,r2,r3
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80d198:	12c0002d 	sthio	r11,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d19c:	31800044 	addi	r6,r6,1
  80d1a0:	1105883a 	add	r2,r2,r4
  80d1a4:	41bffc2e 	bgeu	r8,r6,80d198 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
  80d1a8:	f800283a 	ret
  80d1ac:	f800283a 	ret
  80d1b0:	f800283a 	ret

0080d1b4 <alt_up_pixel_buffer_dma_draw_hline>:
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  80d1b4:	3013883a 	mov	r9,r6
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80d1b8:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d1bc:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d1c0:	20801017 	ldw	r2,64(r4)
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  80d1c4:	3140022e 	bgeu	r6,r5,80d1d0 <alt_up_pixel_buffer_dma_draw_hline+0x1c>
  80d1c8:	2813883a 	mov	r9,r5
  80d1cc:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80d1d0:	2a00192e 	bgeu	r5,r8,80d238 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d1d4:	3880182e 	bgeu	r7,r2,80d238 <alt_up_pixel_buffer_dma_draw_hline+0x84>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d1d8:	4a000136 	bltu	r9,r8,80d1e0 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
  80d1dc:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d1e0:	d8c00117 	ldw	r3,4(sp)
  80d1e4:	00800044 	movi	r2,1
  80d1e8:	18803726 	beq	r3,r2,80d2c8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d1ec:	21800b17 	ldw	r6,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d1f0:	20800d17 	ldw	r2,52(r4)
  80d1f4:	1000111e 	bne	r2,zero,80d23c <alt_up_pixel_buffer_dma_draw_hline+0x88>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  80d1f8:	20801317 	ldw	r2,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d1fc:	21000e17 	ldw	r4,56(r4)
  80d200:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  80d204:	3884983a 	sll	r2,r7,r2
  80d208:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d20c:	20c01d26 	beq	r4,r3,80d284 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d210:	00800084 	movi	r2,2
  80d214:	20803826 	beq	r4,r2,80d2f8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d218:	49403e36 	bltu	r9,r5,80d314 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80d21c:	2945883a 	add	r2,r5,r5
  80d220:	1085883a 	add	r2,r2,r2
  80d224:	11c5883a 	add	r2,r2,r7
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80d228:	12800035 	stwio	r10,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d22c:	29400044 	addi	r5,r5,1
  80d230:	10800104 	addi	r2,r2,4
  80d234:	497ffc2e 	bgeu	r9,r5,80d228 <alt_up_pixel_buffer_dma_draw_hline+0x74>
  80d238:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d23c:	21000e17 	ldw	r4,56(r4)
  80d240:	00800044 	movi	r2,1
  80d244:	20801626 	beq	r4,r2,80d2a0 <alt_up_pixel_buffer_dma_draw_hline+0xec>
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d248:	00800084 	movi	r2,2
  80d24c:	20802026 	beq	r4,r2,80d2d0 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d250:	497ff936 	bltu	r9,r5,80d238 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d254:	4205883a 	add	r2,r8,r8
  80d258:	1085883a 	add	r2,r2,r2
  80d25c:	3885383a 	mul	r2,r7,r2
  80d260:	2947883a 	add	r3,r5,r5
  80d264:	18c7883a 	add	r3,r3,r3
  80d268:	3085883a 	add	r2,r6,r2
  80d26c:	1885883a 	add	r2,r3,r2
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80d270:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d274:	29400044 	addi	r5,r5,1
  80d278:	10800104 	addi	r2,r2,4
  80d27c:	497ffc2e 	bgeu	r9,r5,80d270 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
  80d280:	f800283a 	ret
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d284:	497fec36 	bltu	r9,r5,80d238 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d288:	29c5883a 	add	r2,r5,r7
			{
				IOWR_8DIRECT(addr, x, local_color);
  80d28c:	12800025 	stbio	r10,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d290:	29400044 	addi	r5,r5,1
  80d294:	10800044 	addi	r2,r2,1
  80d298:	497ffc2e 	bgeu	r9,r5,80d28c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
  80d29c:	f800283a 	ret
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d2a0:	497fe536 	bltu	r9,r5,80d238 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d2a4:	41c5383a 	mul	r2,r8,r7
  80d2a8:	2807883a 	mov	r3,r5
  80d2ac:	3085883a 	add	r2,r6,r2
  80d2b0:	2885883a 	add	r2,r5,r2
			{
				IOWR_8DIRECT(addr, x, local_color);
  80d2b4:	12800025 	stbio	r10,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d2b8:	18c00044 	addi	r3,r3,1
  80d2bc:	10800044 	addi	r2,r2,1
  80d2c0:	48fffc2e 	bgeu	r9,r3,80d2b4 <alt_up_pixel_buffer_dma_draw_hline+0x100>
  80d2c4:	f800283a 	ret
		r_x = limit_x - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d2c8:	21800c17 	ldw	r6,48(r4)
  80d2cc:	003fc806 	br	80d1f0 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d2d0:	497fd936 	bltu	r9,r5,80d238 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d2d4:	4205883a 	add	r2,r8,r8
  80d2d8:	3885383a 	mul	r2,r7,r2
  80d2dc:	308f883a 	add	r7,r6,r2
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80d2e0:	2945883a 	add	r2,r5,r5
  80d2e4:	11c5883a 	add	r2,r2,r7
  80d2e8:	1280002d 	sthio	r10,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d2ec:	29400044 	addi	r5,r5,1
  80d2f0:	497ffb2e 	bgeu	r9,r5,80d2e0 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
  80d2f4:	f800283a 	ret
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d2f8:	49400736 	bltu	r9,r5,80d318 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80d2fc:	2945883a 	add	r2,r5,r5
  80d300:	11c5883a 	add	r2,r2,r7
  80d304:	1280002d 	sthio	r10,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d308:	29400044 	addi	r5,r5,1
  80d30c:	497ffb2e 	bgeu	r9,r5,80d2fc <alt_up_pixel_buffer_dma_draw_hline+0x148>
  80d310:	f800283a 	ret
  80d314:	f800283a 	ret
  80d318:	f800283a 	ret

0080d31c <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d31c:	defff604 	addi	sp,sp,-40
  80d320:	dd400715 	stw	r21,28(sp)
  80d324:	dd000615 	stw	r20,24(sp)
  80d328:	dd400c17 	ldw	r21,48(sp)
  80d32c:	dd000b17 	ldw	r20,44(sp)
  80d330:	dc000215 	stw	r16,8(sp)
  80d334:	dc000a17 	ldw	r16,40(sp)
  80d338:	ddc00815 	stw	r23,32(sp)
  80d33c:	302f883a 	mov	r23,r6
  80d340:	dcc00515 	stw	r19,20(sp)
  80d344:	dc800415 	stw	r18,16(sp)
  80d348:	3827883a 	mov	r19,r7
  80d34c:	2825883a 	mov	r18,r5
  80d350:	dc400315 	stw	r17,12(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d354:	380d883a 	mov	r6,r7
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d358:	2023883a 	mov	r17,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d35c:	b80f883a 	mov	r7,r23
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d360:	dfc00915 	stw	ra,36(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d364:	dd000015 	stw	r20,0(sp)
  80d368:	dd400115 	stw	r21,4(sp)
  80d36c:	080d1b40 	call	80d1b4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80d370:	8809883a 	mov	r4,r17
  80d374:	900b883a 	mov	r5,r18
  80d378:	980d883a 	mov	r6,r19
  80d37c:	800f883a 	mov	r7,r16
  80d380:	dd000015 	stw	r20,0(sp)
  80d384:	dd400115 	stw	r21,4(sp)
  80d388:	080d1b40 	call	80d1b4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80d38c:	900b883a 	mov	r5,r18
  80d390:	8809883a 	mov	r4,r17
  80d394:	b80d883a 	mov	r6,r23
  80d398:	800f883a 	mov	r7,r16
  80d39c:	dd000015 	stw	r20,0(sp)
  80d3a0:	dd400115 	stw	r21,4(sp)
  80d3a4:	080d03c0 	call	80d03c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80d3a8:	8809883a 	mov	r4,r17
  80d3ac:	980b883a 	mov	r5,r19
  80d3b0:	b80d883a 	mov	r6,r23
  80d3b4:	800f883a 	mov	r7,r16
  80d3b8:	dd000a15 	stw	r20,40(sp)
  80d3bc:	dd400b15 	stw	r21,44(sp)
}
  80d3c0:	dfc00917 	ldw	ra,36(sp)
  80d3c4:	ddc00817 	ldw	r23,32(sp)
  80d3c8:	dd400717 	ldw	r21,28(sp)
  80d3cc:	dd000617 	ldw	r20,24(sp)
  80d3d0:	dcc00517 	ldw	r19,20(sp)
  80d3d4:	dc800417 	ldw	r18,16(sp)
  80d3d8:	dc400317 	ldw	r17,12(sp)
  80d3dc:	dc000217 	ldw	r16,8(sp)
  80d3e0:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80d3e4:	080d03c1 	jmpi	80d03c <alt_up_pixel_buffer_dma_draw_vline>

0080d3e8 <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d3e8:	d8c00017 	ldw	r3,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d3ec:	2811883a 	mov	r8,r5
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d3f0:	da400117 	ldw	r9,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  80d3f4:	380b883a 	mov	r5,r7

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d3f8:	22c00f17 	ldw	r11,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d3fc:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  80d400:	1815883a 	mov	r10,r3
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  80d404:	3a00022e 	bgeu	r7,r8,80d410 <alt_up_pixel_buffer_dma_draw_box+0x28>
  80d408:	400b883a 	mov	r5,r8
  80d40c:	3811883a 	mov	r8,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
  80d410:	5180022e 	bgeu	r10,r6,80d41c <alt_up_pixel_buffer_dma_draw_box+0x34>
  80d414:	3015883a 	mov	r10,r6
  80d418:	180d883a 	mov	r6,r3
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80d41c:	42c0232e 	bgeu	r8,r11,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
  80d420:	3080222e 	bgeu	r6,r2,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d424:	2ac00136 	bltu	r5,r11,80d42c <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
  80d428:	597fffc4 	addi	r5,r11,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d42c:	50800136 	bltu	r10,r2,80d434 <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
  80d430:	12bfffc4 	addi	r10,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d434:	d8c00217 	ldw	r3,8(sp)
  80d438:	00800044 	movi	r2,1
  80d43c:	18804e26 	beq	r3,r2,80d578 <alt_up_pixel_buffer_dma_draw_box+0x190>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d440:	23000b17 	ldw	r12,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d444:	20800d17 	ldw	r2,52(r4)
  80d448:	1000191e 	bne	r2,zero,80d4b0 <alt_up_pixel_buffer_dma_draw_box+0xc8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d44c:	22c01317 	ldw	r11,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d450:	21000e17 	ldw	r4,56(r4)
  80d454:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d458:	32c4983a 	sll	r2,r6,r11
  80d45c:	608f883a 	add	r7,r12,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d460:	20c01126 	beq	r4,r3,80d4a8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d464:	00800084 	movi	r2,2
  80d468:	20805426 	beq	r4,r2,80d5bc <alt_up_pixel_buffer_dma_draw_box+0x1d4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d46c:	51800f36 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
  80d470:	2a000736 	bltu	r5,r8,80d490 <alt_up_pixel_buffer_dma_draw_box+0xa8>
  80d474:	4007883a 	mov	r3,r8
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d478:	18c5883a 	add	r2,r3,r3
  80d47c:	1085883a 	add	r2,r2,r2
  80d480:	11c5883a 	add	r2,r2,r7
  80d484:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d488:	18c00044 	addi	r3,r3,1
  80d48c:	28fffa2e 	bgeu	r5,r3,80d478 <alt_up_pixel_buffer_dma_draw_box+0x90>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d490:	31800044 	addi	r6,r6,1
  80d494:	51800536 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80d498:	00800044 	movi	r2,1
  80d49c:	12c4983a 	sll	r2,r2,r11
  80d4a0:	388f883a 	add	r7,r7,r2
  80d4a4:	003ff206 	br	80d470 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d4a8:	51801c2e 	bgeu	r10,r6,80d51c <alt_up_pixel_buffer_dma_draw_box+0x134>
  80d4ac:	f800283a 	ret
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d4b0:	21000e17 	ldw	r4,56(r4)
  80d4b4:	00800044 	movi	r2,1
  80d4b8:	20802026 	beq	r4,r2,80d53c <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d4bc:	00800084 	movi	r2,2
  80d4c0:	20802f26 	beq	r4,r2,80d580 <alt_up_pixel_buffer_dma_draw_box+0x198>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d4c4:	51bff936 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d4c8:	5ac5883a 	add	r2,r11,r11
  80d4cc:	108f883a 	add	r7,r2,r2
			addr = addr + t_y * limit_x;
  80d4d0:	31c7383a 	mul	r3,r6,r7
  80d4d4:	60c9883a 	add	r4,r12,r3
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d4d8:	2a000736 	bltu	r5,r8,80d4f8 <alt_up_pixel_buffer_dma_draw_box+0x110>
  80d4dc:	4007883a 	mov	r3,r8
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d4e0:	18c5883a 	add	r2,r3,r3
  80d4e4:	1085883a 	add	r2,r2,r2
  80d4e8:	1105883a 	add	r2,r2,r4
  80d4ec:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d4f0:	18c00044 	addi	r3,r3,1
  80d4f4:	28fffa2e 	bgeu	r5,r3,80d4e0 <alt_up_pixel_buffer_dma_draw_box+0xf8>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d4f8:	31800044 	addi	r6,r6,1
  80d4fc:	51bfeb36 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80d500:	21c9883a 	add	r4,r4,r7
  80d504:	003ff406 	br	80d4d8 <alt_up_pixel_buffer_dma_draw_box+0xf0>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d508:	31800044 	addi	r6,r6,1
  80d50c:	51bfe736 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80d510:	00800044 	movi	r2,1
  80d514:	12c4983a 	sll	r2,r2,r11
  80d518:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d51c:	2a3ffa36 	bltu	r5,r8,80d508 <alt_up_pixel_buffer_dma_draw_box+0x120>
  80d520:	3a07883a 	add	r3,r7,r8
  80d524:	4005883a 	mov	r2,r8
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d528:	1a400025 	stbio	r9,0(r3)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d52c:	10800044 	addi	r2,r2,1
  80d530:	18c00044 	addi	r3,r3,1
  80d534:	28bffc2e 	bgeu	r5,r2,80d528 <alt_up_pixel_buffer_dma_draw_box+0x140>
  80d538:	003ff306 	br	80d508 <alt_up_pixel_buffer_dma_draw_box+0x120>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d53c:	51bfdb36 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
  80d540:	32c5383a 	mul	r2,r6,r11
  80d544:	6085883a 	add	r2,r12,r2
  80d548:	4085883a 	add	r2,r8,r2
			{
				for (x = l_x; x <= r_x; x++)
  80d54c:	2a000636 	bltu	r5,r8,80d568 <alt_up_pixel_buffer_dma_draw_box+0x180>
  80d550:	1009883a 	mov	r4,r2
  80d554:	4007883a 	mov	r3,r8
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d558:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d55c:	18c00044 	addi	r3,r3,1
  80d560:	21000044 	addi	r4,r4,1
  80d564:	28fffc2e 	bgeu	r5,r3,80d558 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d568:	31800044 	addi	r6,r6,1
  80d56c:	12c5883a 	add	r2,r2,r11
  80d570:	51bff62e 	bgeu	r10,r6,80d54c <alt_up_pixel_buffer_dma_draw_box+0x164>
  80d574:	f800283a 	ret
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d578:	23000c17 	ldw	r12,48(r4)
  80d57c:	003fb106 	br	80d444 <alt_up_pixel_buffer_dma_draw_box+0x5c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d580:	51bfca36 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  80d584:	5acf883a 	add	r7,r11,r11
			addr = addr + t_y * limit_x;
  80d588:	31c5383a 	mul	r2,r6,r7
  80d58c:	6089883a 	add	r4,r12,r2
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d590:	2a000636 	bltu	r5,r8,80d5ac <alt_up_pixel_buffer_dma_draw_box+0x1c4>
  80d594:	4007883a 	mov	r3,r8
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80d598:	18c5883a 	add	r2,r3,r3
  80d59c:	1105883a 	add	r2,r2,r4
  80d5a0:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d5a4:	18c00044 	addi	r3,r3,1
  80d5a8:	28fffb2e 	bgeu	r5,r3,80d598 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d5ac:	31800044 	addi	r6,r6,1
  80d5b0:	51bfbe36 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80d5b4:	21c9883a 	add	r4,r4,r7
  80d5b8:	003ff506 	br	80d590 <alt_up_pixel_buffer_dma_draw_box+0x1a8>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d5bc:	51bfbb36 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
  80d5c0:	2a000636 	bltu	r5,r8,80d5dc <alt_up_pixel_buffer_dma_draw_box+0x1f4>
  80d5c4:	4007883a 	mov	r3,r8
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80d5c8:	18c5883a 	add	r2,r3,r3
  80d5cc:	3885883a 	add	r2,r7,r2
  80d5d0:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d5d4:	18c00044 	addi	r3,r3,1
  80d5d8:	28fffb2e 	bgeu	r5,r3,80d5c8 <alt_up_pixel_buffer_dma_draw_box+0x1e0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d5dc:	31800044 	addi	r6,r6,1
  80d5e0:	51bfb236 	bltu	r10,r6,80d4ac <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80d5e4:	00800044 	movi	r2,1
  80d5e8:	12c4983a 	sll	r2,r2,r11
  80d5ec:	388f883a 	add	r7,r7,r2
  80d5f0:	003ff306 	br	80d5c0 <alt_up_pixel_buffer_dma_draw_box+0x1d8>

0080d5f4 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d5f4:	00800044 	movi	r2,1
  80d5f8:	28802626 	beq	r5,r2,80d694 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d5fc:	21800b17 	ldw	r6,44(r4)
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d600:	20c00e17 	ldw	r3,56(r4)
  80d604:	00800084 	movi	r2,2
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
  80d608:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d60c:	18801f26 	beq	r3,r2,80d68c <alt_up_pixel_buffer_dma_clear_screen+0x98>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
  80d610:	2945883a 	add	r2,r5,r5
  80d614:	108b883a 	add	r5,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d618:	20800d17 	ldw	r2,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
  80d61c:	22001017 	ldw	r8,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d620:	1000101e 	bne	r2,zero,80d664 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80d624:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
  80d628:	40001726 	beq	r8,zero,80d688 <alt_up_pixel_buffer_dma_clear_screen+0x94>
  80d62c:	000f883a 	mov	r7,zero
  80d630:	2812c03a 	cmpne	r9,r5,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d634:	48000526 	beq	r9,zero,80d64c <alt_up_pixel_buffer_dma_clear_screen+0x58>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80d638:	0007883a 	mov	r3,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
  80d63c:	1985883a 	add	r2,r3,r6
  80d640:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d644:	18c00104 	addi	r3,r3,4
  80d648:	197ffc36 	bltu	r3,r5,80d63c <alt_up_pixel_buffer_dma_clear_screen+0x48>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80d64c:	39c00044 	addi	r7,r7,1
  80d650:	41c00d26 	beq	r8,r7,80d688 <alt_up_pixel_buffer_dma_clear_screen+0x94>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80d654:	00800044 	movi	r2,1
  80d658:	1104983a 	sll	r2,r2,r4
  80d65c:	308d883a 	add	r6,r6,r2
  80d660:	003ff406 	br	80d634 <alt_up_pixel_buffer_dma_clear_screen+0x40>
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80d664:	2a09383a 	mul	r4,r5,r8

		for (x = 0; x < limit_y; x = x + 4)
  80d668:	20000726 	beq	r4,zero,80d688 <alt_up_pixel_buffer_dma_clear_screen+0x94>
  80d66c:	0007883a 	mov	r3,zero
  80d670:	0005883a 	mov	r2,zero
		{
			IOWR_32DIRECT(addr, x, 0);
  80d674:	1185883a 	add	r2,r2,r6
  80d678:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80d67c:	18800104 	addi	r2,r3,4
  80d680:	1007883a 	mov	r3,r2
  80d684:	113ffb36 	bltu	r2,r4,80d674 <alt_up_pixel_buffer_dma_clear_screen+0x80>
  80d688:	f800283a 	ret
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
  80d68c:	294b883a 	add	r5,r5,r5
  80d690:	003fe106 	br	80d618 <alt_up_pixel_buffer_dma_clear_screen+0x24>
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d694:	21800c17 	ldw	r6,48(r4)
  80d698:	003fd906 	br	80d600 <alt_up_pixel_buffer_dma_clear_screen+0xc>

0080d69c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80d69c:	21800c17 	ldw	r6,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80d6a0:	20c00a17 	ldw	r3,40(r4)
  80d6a4:	00800044 	movi	r2,1
  80d6a8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d6ac:	21400b17 	ldw	r5,44(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  80d6b0:	0005883a 	mov	r2,zero
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
	pixel_buffer->buffer_start_address = temp;
  80d6b4:	21800b15 	stw	r6,44(r4)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d6b8:	21400c15 	stw	r5,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  80d6bc:	f800283a 	ret

0080d6c0 <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d6c0:	22400f17 	ldw	r9,60(r4)
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80d6c4:	2011883a 	mov	r8,r4
  80d6c8:	2815883a 	mov	r10,r5
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d6cc:	32400236 	bltu	r6,r9,80d6d8 <alt_up_pixel_buffer_dma_draw+0x18>
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d6d0:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
  80d6d4:	f800283a 	ret
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d6d8:	20801017 	ldw	r2,64(r4)
  80d6dc:	38bffc2e 	bgeu	r7,r2,80d6d0 <alt_up_pixel_buffer_dma_draw+0x10>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d6e0:	20800d17 	ldw	r2,52(r4)
  80d6e4:	1000131e 	bne	r2,zero,80d734 <alt_up_pixel_buffer_dma_draw+0x74>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80d6e8:	20c01217 	ldw	r3,72(r4)
  80d6ec:	20801417 	ldw	r2,80(r4)
  80d6f0:	41401317 	ldw	r5,76(r8)
  80d6f4:	21001117 	ldw	r4,68(r4)
  80d6f8:	30c6703a 	and	r3,r6,r3
  80d6fc:	3884703a 	and	r2,r7,r2
  80d700:	1906983a 	sll	r3,r3,r4
  80d704:	1144983a 	sll	r2,r2,r5
  80d708:	1886b03a 	or	r3,r3,r2
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d70c:	41000e17 	ldw	r4,56(r8)
  80d710:	00800044 	movi	r2,1
  80d714:	20801526 	beq	r4,r2,80d76c <alt_up_pixel_buffer_dma_draw+0xac>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d718:	00800084 	movi	r2,2
  80d71c:	20800e26 	beq	r4,r2,80d758 <alt_up_pixel_buffer_dma_draw+0x98>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d720:	40800c17 	ldw	r2,48(r8)
  80d724:	1885883a 	add	r2,r3,r2
  80d728:	12800035 	stwio	r10,0(r2)
  80d72c:	0005883a 	mov	r2,zero
  80d730:	f800283a 	ret
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d734:	20801417 	ldw	r2,80(r4)
  80d738:	20c01217 	ldw	r3,72(r4)
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d73c:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d740:	3884703a 	and	r2,r7,r2
  80d744:	4885383a 	mul	r2,r9,r2
  80d748:	30c6703a 	and	r3,r6,r3
  80d74c:	10c5883a 	add	r2,r2,r3
  80d750:	1106983a 	sll	r3,r2,r4
  80d754:	003fed06 	br	80d70c <alt_up_pixel_buffer_dma_draw+0x4c>
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d758:	40800c17 	ldw	r2,48(r8)
  80d75c:	1885883a 	add	r2,r3,r2
  80d760:	1280002d 	sthio	r10,0(r2)
  80d764:	0005883a 	mov	r2,zero
  80d768:	f800283a 	ret
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d76c:	40800c17 	ldw	r2,48(r8)
  80d770:	1885883a 	add	r2,r3,r2
  80d774:	12800025 	stbio	r10,0(r2)
  80d778:	0005883a 	mov	r2,zero
  80d77c:	f800283a 	ret

0080d780 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80d780:	20c00a17 	ldw	r3,40(r4)
  80d784:	18800337 	ldwio	r2,12(r3)
}
  80d788:	1080004c 	andi	r2,r2,1
  80d78c:	f800283a 	ret

0080d790 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80d790:	20c00a17 	ldw	r3,40(r4)
  80d794:	01800104 	movi	r6,4
  80d798:	1987883a 	add	r3,r3,r6
  80d79c:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80d7a0:	20800a17 	ldw	r2,40(r4)
  80d7a4:	1185883a 	add	r2,r2,r6
  80d7a8:	10c00037 	ldwio	r3,0(r2)
	return 0;
}
  80d7ac:	0005883a 	mov	r2,zero

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80d7b0:	20c00c15 	stw	r3,48(r4)
	return 0;
}
  80d7b4:	f800283a 	ret

0080d7b8 <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80d7b8:	01402074 	movhi	r5,129
  80d7bc:	29561804 	addi	r5,r5,22624
  80d7c0:	0812ce01 	jmpi	812ce0 <alt_find_dev>

0080d7c4 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80d7c4:	defffe04 	addi	sp,sp,-8
  80d7c8:	dac00217 	ldw	r11,8(sp)
  80d7cc:	dc000015 	stw	r16,0(sp)
  80d7d0:	dc400115 	stw	r17,4(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80d7d4:	5987c83a 	sub	r3,r11,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80d7d8:	3013883a 	mov	r9,r6
  80d7dc:	dc000317 	ldw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80d7e0:	18009116 	blt	r3,zero,80da28 <alt_up_pixel_buffer_dma_draw_line+0x264>
  80d7e4:	3945c83a 	sub	r2,r7,r5
  80d7e8:	10008d16 	blt	r2,zero,80da20 <alt_up_pixel_buffer_dma_draw_line+0x25c>
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80d7ec:	22000e17 	ldw	r8,56(r4)
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80d7f0:	10c4803a 	cmplt	r2,r2,r3
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80d7f4:	00c00044 	movi	r3,1
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80d7f8:	100d883a 	mov	r6,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80d7fc:	40c08426 	beq	r8,r3,80da10 <alt_up_pixel_buffer_dma_draw_line+0x24c>
  80d800:	43c00098 	cmpnei	r15,r8,2
  80d804:	78df883a 	add	r15,r15,r3
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80d808:	20800d17 	ldw	r2,52(r4)
  80d80c:	1000571e 	bne	r2,zero,80d96c <alt_up_pixel_buffer_dma_draw_line+0x1a8>
  80d810:	20801317 	ldw	r2,76(r4)
  80d814:	00c00044 	movi	r3,1
  80d818:	13c5c83a 	sub	r2,r2,r15
  80d81c:	189a983a 	sll	r13,r3,r2

	if (backbuffer == 1)
  80d820:	d8c00417 	ldw	r3,16(sp)
  80d824:	00800044 	movi	r2,1
  80d828:	18805426 	beq	r3,r2,80d97c <alt_up_pixel_buffer_dma_draw_line+0x1b8>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80d82c:	34403fcc 	andi	r17,r6,255
  80d830:	8c40201c 	xori	r17,r17,128
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;
  80d834:	21000b17 	ldw	r4,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
  80d838:	8c7fe004 	addi	r17,r17,-128
  80d83c:	30005426 	beq	r6,zero,80d990 <alt_up_pixel_buffer_dma_draw_line+0x1cc>
  80d840:	480d883a 	mov	r6,r9
  80d844:	5815883a 	mov	r10,r11
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
  80d848:	5180060e 	bge	r10,r6,80d864 <alt_up_pixel_buffer_dma_draw_line+0xa0>
  80d84c:	5005883a 	mov	r2,r10
  80d850:	3807883a 	mov	r3,r7
  80d854:	3015883a 	mov	r10,r6
  80d858:	280f883a 	mov	r7,r5
  80d85c:	100d883a 	mov	r6,r2
  80d860:	180b883a 	mov	r5,r3
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  80d864:	3957c83a 	sub	r11,r7,r5
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  80d868:	5199c83a 	sub	r12,r10,r6
	deltay = ABS(y_1 - y_0);
  80d86c:	58006a16 	blt	r11,zero,80da18 <alt_up_pixel_buffer_dma_draw_line+0x254>
	error = -(deltax / 2); 
  80d870:	6004d7fa 	srli	r2,r12,31
  80d874:	1305883a 	add	r2,r2,r12
  80d878:	1005d07a 	srai	r2,r2,1
  80d87c:	0091c83a 	sub	r8,zero,r2
	y = y_0;
	if (y_0 < y_1)
  80d880:	29c02416 	blt	r5,r7,80d914 <alt_up_pixel_buffer_dma_draw_line+0x150>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80d884:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  80d888:	03bfffc4 	movi	r14,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80d88c:	88802426 	beq	r17,r2,80d920 <alt_up_pixel_buffer_dma_draw_line+0x15c>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d890:	51801016 	blt	r10,r6,80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80d894:	300f883a 	mov	r7,r6
  80d898:	2807883a 	mov	r3,r5
  80d89c:	78001226 	beq	r15,zero,80d8e8 <alt_up_pixel_buffer_dma_draw_line+0x124>
  80d8a0:	78804126 	beq	r15,r2,80d9a8 <alt_up_pixel_buffer_dma_draw_line+0x1e4>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80d8a4:	68c5383a 	mul	r2,r13,r3
  80d8a8:	11c5883a 	add	r2,r2,r7
  80d8ac:	1085883a 	add	r2,r2,r2
  80d8b0:	1085883a 	add	r2,r2,r2
  80d8b4:	1105883a 	add	r2,r2,r4
  80d8b8:	14000035 	stwio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80d8bc:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d8c0:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80d8c4:	0200020e 	bge	zero,r8,80d8d0 <alt_up_pixel_buffer_dma_draw_line+0x10c>
				y = y + ystep;
  80d8c8:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80d8cc:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d8d0:	51fff40e 	bge	r10,r7,80d8a4 <alt_up_pixel_buffer_dma_draw_line+0xe0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80d8d4:	dc400117 	ldw	r17,4(sp)
  80d8d8:	dc000017 	ldw	r16,0(sp)
  80d8dc:	dec00204 	addi	sp,sp,8
  80d8e0:	f800283a 	ret
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d8e4:	51fffb16 	blt	r10,r7,80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d8e8:	68c5383a 	mul	r2,r13,r3
  80d8ec:	11c5883a 	add	r2,r2,r7
  80d8f0:	1105883a 	add	r2,r2,r4
  80d8f4:	14000025 	stbio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80d8f8:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d8fc:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80d900:	023ff80e 	bge	zero,r8,80d8e4 <alt_up_pixel_buffer_dma_draw_line+0x120>
				y = y + ystep;
  80d904:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80d908:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d90c:	51fff60e 	bge	r10,r7,80d8e8 <alt_up_pixel_buffer_dma_draw_line+0x124>
  80d910:	003ff006 	br	80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80d914:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  80d918:	03800044 	movi	r14,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80d91c:	88bfdc1e 	bne	r17,r2,80d890 <alt_up_pixel_buffer_dma_draw_line+0xcc>
	{
		for (x=x_0; x <= x_1; x++) {
  80d920:	51bfec16 	blt	r10,r6,80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d924:	3013883a 	mov	r9,r6
  80d928:	2807883a 	mov	r3,r5
  80d92c:	334f383a 	mul	r7,r6,r13
  80d930:	78002926 	beq	r15,zero,80d9d8 <alt_up_pixel_buffer_dma_draw_line+0x214>
  80d934:	7c403e26 	beq	r15,r17,80da30 <alt_up_pixel_buffer_dma_draw_line+0x26c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80d938:	38c5883a 	add	r2,r7,r3
  80d93c:	1085883a 	add	r2,r2,r2
  80d940:	1085883a 	add	r2,r2,r2
  80d944:	1105883a 	add	r2,r2,r4
  80d948:	14000035 	stwio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80d94c:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80d950:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80d954:	0200020e 	bge	zero,r8,80d960 <alt_up_pixel_buffer_dma_draw_line+0x19c>
				y = y + ystep;
  80d958:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80d95c:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80d960:	3b4f883a 	add	r7,r7,r13
  80d964:	527ff40e 	bge	r10,r9,80d938 <alt_up_pixel_buffer_dma_draw_line+0x174>
  80d968:	003fda06 	br	80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
  80d96c:	d8c00417 	ldw	r3,16(sp)
  80d970:	00800044 	movi	r2,1
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80d974:	23400f17 	ldw	r13,60(r4)

	if (backbuffer == 1)
  80d978:	18bfac1e 	bne	r3,r2,80d82c <alt_up_pixel_buffer_dma_draw_line+0x68>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80d97c:	34403fcc 	andi	r17,r6,255
  80d980:	8c40201c 	xori	r17,r17,128
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
  80d984:	21000c17 	ldw	r4,48(r4)
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80d988:	8c7fe004 	addi	r17,r17,-128
  80d98c:	303fac1e 	bne	r6,zero,80d840 <alt_up_pixel_buffer_dma_draw_line+0x7c>
  80d990:	280d883a 	mov	r6,r5
  80d994:	3815883a 	mov	r10,r7
  80d998:	480b883a 	mov	r5,r9
  80d99c:	580f883a 	mov	r7,r11
  80d9a0:	003fa906 	br	80d848 <alt_up_pixel_buffer_dma_draw_line+0x84>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d9a4:	51ffcb16 	blt	r10,r7,80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80d9a8:	68c5383a 	mul	r2,r13,r3
  80d9ac:	11c5883a 	add	r2,r2,r7
  80d9b0:	1085883a 	add	r2,r2,r2
  80d9b4:	1105883a 	add	r2,r2,r4
  80d9b8:	1400002d 	sthio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80d9bc:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d9c0:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80d9c4:	023ff70e 	bge	zero,r8,80d9a4 <alt_up_pixel_buffer_dma_draw_line+0x1e0>
				y = y + ystep;
  80d9c8:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80d9cc:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80d9d0:	51fff50e 	bge	r10,r7,80d9a8 <alt_up_pixel_buffer_dma_draw_line+0x1e4>
  80d9d4:	003fbf06 	br	80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d9d8:	38c5883a 	add	r2,r7,r3
  80d9dc:	1105883a 	add	r2,r2,r4
  80d9e0:	14000025 	stbio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80d9e4:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80d9e8:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80d9ec:	0200020e 	bge	zero,r8,80d9f8 <alt_up_pixel_buffer_dma_draw_line+0x234>
				y = y + ystep;
  80d9f0:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80d9f4:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80d9f8:	3b4f883a 	add	r7,r7,r13
  80d9fc:	527ff60e 	bge	r10,r9,80d9d8 <alt_up_pixel_buffer_dma_draw_line+0x214>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80da00:	dc400117 	ldw	r17,4(sp)
  80da04:	dc000017 	ldw	r16,0(sp)
  80da08:	dec00204 	addi	sp,sp,8
  80da0c:	f800283a 	ret
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80da10:	001f883a 	mov	r15,zero
  80da14:	003f7c06 	br	80d808 <alt_up_pixel_buffer_dma_draw_line+0x44>
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  80da18:	02d7c83a 	sub	r11,zero,r11
  80da1c:	003f9406 	br	80d870 <alt_up_pixel_buffer_dma_draw_line+0xac>
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80da20:	0085c83a 	sub	r2,zero,r2
  80da24:	003f7106 	br	80d7ec <alt_up_pixel_buffer_dma_draw_line+0x28>
  80da28:	00c7c83a 	sub	r3,zero,r3
  80da2c:	003f6d06 	br	80d7e4 <alt_up_pixel_buffer_dma_draw_line+0x20>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80da30:	38c5883a 	add	r2,r7,r3
  80da34:	1085883a 	add	r2,r2,r2
  80da38:	1105883a 	add	r2,r2,r4
  80da3c:	1400002d 	sthio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80da40:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80da44:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80da48:	0200020e 	bge	zero,r8,80da54 <alt_up_pixel_buffer_dma_draw_line+0x290>
				y = y + ystep;
  80da4c:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80da50:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80da54:	3b4f883a 	add	r7,r7,r13
  80da58:	527ff50e 	bge	r10,r9,80da30 <alt_up_pixel_buffer_dma_draw_line+0x26c>
  80da5c:	003f9d06 	br	80d8d4 <alt_up_pixel_buffer_dma_draw_line+0x110>

0080da60 <match_file_record_to_name_ext>:
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80da60:	21c00003 	ldbu	r7,0(r4)
  80da64:	00c00644 	movi	r3,25
  80da68:	38bfe7c4 	addi	r2,r7,-97
  80da6c:	10803fcc 	andi	r2,r2,255
  80da70:	1880c12e 	bgeu	r3,r2,80dd78 <match_file_record_to_name_ext+0x318>
  80da74:	3a003fcc 	andi	r8,r7,255
  80da78:	4200201c 	xori	r8,r8,128
  80da7c:	423fe004 	addi	r8,r8,-128
  80da80:	29c00003 	ldbu	r7,0(r5)
  80da84:	00c00644 	movi	r3,25
  80da88:	38bfe7c4 	addi	r2,r7,-97
  80da8c:	10803fcc 	andi	r2,r2,255
  80da90:	1880b42e 	bgeu	r3,r2,80dd64 <match_file_record_to_name_ext+0x304>
  80da94:	38803fcc 	andi	r2,r7,255
  80da98:	1080201c 	xori	r2,r2,128
  80da9c:	10bfe004 	addi	r2,r2,-128
  80daa0:	40811e1e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80daa4:	21c00043 	ldbu	r7,1(r4)
  80daa8:	00c00644 	movi	r3,25
  80daac:	38bfe7c4 	addi	r2,r7,-97
  80dab0:	10803fcc 	andi	r2,r2,255
  80dab4:	1880b52e 	bgeu	r3,r2,80dd8c <match_file_record_to_name_ext+0x32c>
  80dab8:	3a003fcc 	andi	r8,r7,255
  80dabc:	29c00043 	ldbu	r7,1(r5)
  80dac0:	4200201c 	xori	r8,r8,128
  80dac4:	00c00644 	movi	r3,25
  80dac8:	38bfe7c4 	addi	r2,r7,-97
  80dacc:	10803fcc 	andi	r2,r2,255
  80dad0:	423fe004 	addi	r8,r8,-128
  80dad4:	1880b62e 	bgeu	r3,r2,80ddb0 <match_file_record_to_name_ext+0x350>
  80dad8:	38803fcc 	andi	r2,r7,255
  80dadc:	1080201c 	xori	r2,r2,128
  80dae0:	10bfe004 	addi	r2,r2,-128
  80dae4:	40810d1e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80dae8:	21c00083 	ldbu	r7,2(r4)
  80daec:	00c00644 	movi	r3,25
  80daf0:	38bfe7c4 	addi	r2,r7,-97
  80daf4:	10803fcc 	andi	r2,r2,255
  80daf8:	1880cb2e 	bgeu	r3,r2,80de28 <match_file_record_to_name_ext+0x3c8>
  80dafc:	3a003fcc 	andi	r8,r7,255
  80db00:	4200201c 	xori	r8,r8,128
  80db04:	423fe004 	addi	r8,r8,-128
  80db08:	29c00083 	ldbu	r7,2(r5)
  80db0c:	00c00644 	movi	r3,25
  80db10:	38bfe7c4 	addi	r2,r7,-97
  80db14:	10803fcc 	andi	r2,r2,255
  80db18:	1880be2e 	bgeu	r3,r2,80de14 <match_file_record_to_name_ext+0x3b4>
  80db1c:	38803fcc 	andi	r2,r7,255
  80db20:	1080201c 	xori	r2,r2,128
  80db24:	10bfe004 	addi	r2,r2,-128
  80db28:	4080fc1e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80db2c:	21c000c3 	ldbu	r7,3(r4)
  80db30:	00c00644 	movi	r3,25
  80db34:	38bfe7c4 	addi	r2,r7,-97
  80db38:	10803fcc 	andi	r2,r2,255
  80db3c:	1880cc2e 	bgeu	r3,r2,80de70 <match_file_record_to_name_ext+0x410>
  80db40:	3a003fcc 	andi	r8,r7,255
  80db44:	4200201c 	xori	r8,r8,128
  80db48:	423fe004 	addi	r8,r8,-128
  80db4c:	29c000c3 	ldbu	r7,3(r5)
  80db50:	00c00644 	movi	r3,25
  80db54:	38bfe7c4 	addi	r2,r7,-97
  80db58:	10803fcc 	andi	r2,r2,255
  80db5c:	1880bf2e 	bgeu	r3,r2,80de5c <match_file_record_to_name_ext+0x3fc>
  80db60:	38803fcc 	andi	r2,r7,255
  80db64:	1080201c 	xori	r2,r2,128
  80db68:	10bfe004 	addi	r2,r2,-128
  80db6c:	4080eb1e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80db70:	21c00103 	ldbu	r7,4(r4)
  80db74:	00c00644 	movi	r3,25
  80db78:	38bfe7c4 	addi	r2,r7,-97
  80db7c:	10803fcc 	andi	r2,r2,255
  80db80:	1880c52e 	bgeu	r3,r2,80de98 <match_file_record_to_name_ext+0x438>
  80db84:	3a003fcc 	andi	r8,r7,255
  80db88:	4200201c 	xori	r8,r8,128
  80db8c:	423fe004 	addi	r8,r8,-128
  80db90:	29c00103 	ldbu	r7,4(r5)
  80db94:	00c00644 	movi	r3,25
  80db98:	38bfe7c4 	addi	r2,r7,-97
  80db9c:	10803fcc 	andi	r2,r2,255
  80dba0:	1880b82e 	bgeu	r3,r2,80de84 <match_file_record_to_name_ext+0x424>
  80dba4:	38803fcc 	andi	r2,r7,255
  80dba8:	1080201c 	xori	r2,r2,128
  80dbac:	10bfe004 	addi	r2,r2,-128
  80dbb0:	4080da1e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80dbb4:	21c00143 	ldbu	r7,5(r4)
  80dbb8:	00c00644 	movi	r3,25
  80dbbc:	38bfe7c4 	addi	r2,r7,-97
  80dbc0:	10803fcc 	andi	r2,r2,255
  80dbc4:	1880be2e 	bgeu	r3,r2,80dec0 <match_file_record_to_name_ext+0x460>
  80dbc8:	3a003fcc 	andi	r8,r7,255
  80dbcc:	4200201c 	xori	r8,r8,128
  80dbd0:	423fe004 	addi	r8,r8,-128
  80dbd4:	29c00143 	ldbu	r7,5(r5)
  80dbd8:	00c00644 	movi	r3,25
  80dbdc:	38bfe7c4 	addi	r2,r7,-97
  80dbe0:	10803fcc 	andi	r2,r2,255
  80dbe4:	1880b12e 	bgeu	r3,r2,80deac <match_file_record_to_name_ext+0x44c>
  80dbe8:	38803fcc 	andi	r2,r7,255
  80dbec:	1080201c 	xori	r2,r2,128
  80dbf0:	10bfe004 	addi	r2,r2,-128
  80dbf4:	4080c91e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80dbf8:	21c00183 	ldbu	r7,6(r4)
  80dbfc:	00c00644 	movi	r3,25
  80dc00:	38bfe7c4 	addi	r2,r7,-97
  80dc04:	10803fcc 	andi	r2,r2,255
  80dc08:	1880b72e 	bgeu	r3,r2,80dee8 <match_file_record_to_name_ext+0x488>
  80dc0c:	3a003fcc 	andi	r8,r7,255
  80dc10:	4200201c 	xori	r8,r8,128
  80dc14:	423fe004 	addi	r8,r8,-128
  80dc18:	29c00183 	ldbu	r7,6(r5)
  80dc1c:	00c00644 	movi	r3,25
  80dc20:	38bfe7c4 	addi	r2,r7,-97
  80dc24:	10803fcc 	andi	r2,r2,255
  80dc28:	1880aa2e 	bgeu	r3,r2,80ded4 <match_file_record_to_name_ext+0x474>
  80dc2c:	38803fcc 	andi	r2,r7,255
  80dc30:	1080201c 	xori	r2,r2,128
  80dc34:	10bfe004 	addi	r2,r2,-128
  80dc38:	4080b81e 	bne	r8,r2,80df1c <match_file_record_to_name_ext+0x4bc>
  80dc3c:	21c001c3 	ldbu	r7,7(r4)
  80dc40:	00c00644 	movi	r3,25
  80dc44:	38bfe7c4 	addi	r2,r7,-97
  80dc48:	10803fcc 	andi	r2,r2,255
  80dc4c:	1880af36 	bltu	r3,r2,80df0c <match_file_record_to_name_ext+0x4ac>
  80dc50:	38bff804 	addi	r2,r7,-32
  80dc54:	11c03fcc 	andi	r7,r2,255
  80dc58:	39c0201c 	xori	r7,r7,128
  80dc5c:	39ffe004 	addi	r7,r7,-128
  80dc60:	294001c3 	ldbu	r5,7(r5)
  80dc64:	00c00644 	movi	r3,25
  80dc68:	28bfe7c4 	addi	r2,r5,-97
  80dc6c:	10803fcc 	andi	r2,r2,255
  80dc70:	1880a236 	bltu	r3,r2,80defc <match_file_record_to_name_ext+0x49c>
  80dc74:	28bff804 	addi	r2,r5,-32
  80dc78:	10803fcc 	andi	r2,r2,255
  80dc7c:	1080201c 	xori	r2,r2,128
  80dc80:	10bfe004 	addi	r2,r2,-128
  80dc84:	3891003a 	cmpeq	r8,r7,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80dc88:	21400203 	ldbu	r5,8(r4)
  80dc8c:	00c00644 	movi	r3,25
  80dc90:	28bfe7c4 	addi	r2,r5,-97
  80dc94:	10803fcc 	andi	r2,r2,255
  80dc98:	18804f2e 	bgeu	r3,r2,80ddd8 <match_file_record_to_name_ext+0x378>
  80dc9c:	29c03fcc 	andi	r7,r5,255
  80dca0:	39c0201c 	xori	r7,r7,128
  80dca4:	39ffe004 	addi	r7,r7,-128
  80dca8:	31400003 	ldbu	r5,0(r6)
  80dcac:	00c00644 	movi	r3,25
  80dcb0:	28bfe7c4 	addi	r2,r5,-97
  80dcb4:	10803fcc 	andi	r2,r2,255
  80dcb8:	1880422e 	bgeu	r3,r2,80ddc4 <match_file_record_to_name_ext+0x364>
  80dcbc:	28803fcc 	andi	r2,r5,255
  80dcc0:	1080201c 	xori	r2,r2,128
  80dcc4:	10bfe004 	addi	r2,r2,-128
  80dcc8:	3880961e 	bne	r7,r2,80df24 <match_file_record_to_name_ext+0x4c4>
  80dccc:	21400243 	ldbu	r5,9(r4)
  80dcd0:	00c00644 	movi	r3,25
  80dcd4:	28bfe7c4 	addi	r2,r5,-97
  80dcd8:	10803fcc 	andi	r2,r2,255
  80dcdc:	1880482e 	bgeu	r3,r2,80de00 <match_file_record_to_name_ext+0x3a0>
  80dce0:	29c03fcc 	andi	r7,r5,255
  80dce4:	39c0201c 	xori	r7,r7,128
  80dce8:	39ffe004 	addi	r7,r7,-128
  80dcec:	31400043 	ldbu	r5,1(r6)
  80dcf0:	00c00644 	movi	r3,25
  80dcf4:	28bfe7c4 	addi	r2,r5,-97
  80dcf8:	10803fcc 	andi	r2,r2,255
  80dcfc:	18803b2e 	bgeu	r3,r2,80ddec <match_file_record_to_name_ext+0x38c>
  80dd00:	28803fcc 	andi	r2,r5,255
  80dd04:	1080201c 	xori	r2,r2,128
  80dd08:	10bfe004 	addi	r2,r2,-128
  80dd0c:	3880851e 	bne	r7,r2,80df24 <match_file_record_to_name_ext+0x4c4>
  80dd10:	21000283 	ldbu	r4,10(r4)
  80dd14:	00c00644 	movi	r3,25
  80dd18:	20bfe7c4 	addi	r2,r4,-97
  80dd1c:	10803fcc 	andi	r2,r2,255
  80dd20:	18804a36 	bltu	r3,r2,80de4c <match_file_record_to_name_ext+0x3ec>
  80dd24:	20bff804 	addi	r2,r4,-32
  80dd28:	11003fcc 	andi	r4,r2,255
  80dd2c:	2100201c 	xori	r4,r4,128
  80dd30:	213fe004 	addi	r4,r4,-128
  80dd34:	31800083 	ldbu	r6,2(r6)
  80dd38:	00c00644 	movi	r3,25
  80dd3c:	30bfe7c4 	addi	r2,r6,-97
  80dd40:	10803fcc 	andi	r2,r2,255
  80dd44:	18803d36 	bltu	r3,r2,80de3c <match_file_record_to_name_ext+0x3dc>
  80dd48:	30bff804 	addi	r2,r6,-32
  80dd4c:	10803fcc 	andi	r2,r2,255
  80dd50:	1080201c 	xori	r2,r2,128
  80dd54:	10bfe004 	addi	r2,r2,-128
  80dd58:	2080721e 	bne	r4,r2,80df24 <match_file_record_to_name_ext+0x4c4>
            match = false;
			break;
        }
    }
	return match;
}
  80dd5c:	4005883a 	mov	r2,r8
  80dd60:	f800283a 	ret
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80dd64:	38bff804 	addi	r2,r7,-32
  80dd68:	10803fcc 	andi	r2,r2,255
  80dd6c:	1080201c 	xori	r2,r2,128
  80dd70:	10bfe004 	addi	r2,r2,-128
  80dd74:	003f4a06 	br	80daa0 <match_file_record_to_name_ext+0x40>
  80dd78:	38bff804 	addi	r2,r7,-32
  80dd7c:	12003fcc 	andi	r8,r2,255
  80dd80:	4200201c 	xori	r8,r8,128
  80dd84:	423fe004 	addi	r8,r8,-128
  80dd88:	003f3d06 	br	80da80 <match_file_record_to_name_ext+0x20>
  80dd8c:	38bff804 	addi	r2,r7,-32
  80dd90:	29c00043 	ldbu	r7,1(r5)
  80dd94:	12003fcc 	andi	r8,r2,255
  80dd98:	4200201c 	xori	r8,r8,128
  80dd9c:	38bfe7c4 	addi	r2,r7,-97
  80dda0:	10803fcc 	andi	r2,r2,255
  80dda4:	00c00644 	movi	r3,25
  80dda8:	423fe004 	addi	r8,r8,-128
  80ddac:	18bf4a36 	bltu	r3,r2,80dad8 <match_file_record_to_name_ext+0x78>
  80ddb0:	38bff804 	addi	r2,r7,-32
  80ddb4:	10803fcc 	andi	r2,r2,255
  80ddb8:	1080201c 	xori	r2,r2,128
  80ddbc:	10bfe004 	addi	r2,r2,-128
  80ddc0:	003f4806 	br	80dae4 <match_file_record_to_name_ext+0x84>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80ddc4:	28bff804 	addi	r2,r5,-32
  80ddc8:	10803fcc 	andi	r2,r2,255
  80ddcc:	1080201c 	xori	r2,r2,128
  80ddd0:	10bfe004 	addi	r2,r2,-128
  80ddd4:	003fbc06 	br	80dcc8 <match_file_record_to_name_ext+0x268>
  80ddd8:	28bff804 	addi	r2,r5,-32
  80dddc:	11c03fcc 	andi	r7,r2,255
  80dde0:	39c0201c 	xori	r7,r7,128
  80dde4:	39ffe004 	addi	r7,r7,-128
  80dde8:	003faf06 	br	80dca8 <match_file_record_to_name_ext+0x248>
  80ddec:	28bff804 	addi	r2,r5,-32
  80ddf0:	10803fcc 	andi	r2,r2,255
  80ddf4:	1080201c 	xori	r2,r2,128
  80ddf8:	10bfe004 	addi	r2,r2,-128
  80ddfc:	003fc306 	br	80dd0c <match_file_record_to_name_ext+0x2ac>
  80de00:	28bff804 	addi	r2,r5,-32
  80de04:	11c03fcc 	andi	r7,r2,255
  80de08:	39c0201c 	xori	r7,r7,128
  80de0c:	39ffe004 	addi	r7,r7,-128
  80de10:	003fb606 	br	80dcec <match_file_record_to_name_ext+0x28c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80de14:	38bff804 	addi	r2,r7,-32
  80de18:	10803fcc 	andi	r2,r2,255
  80de1c:	1080201c 	xori	r2,r2,128
  80de20:	10bfe004 	addi	r2,r2,-128
  80de24:	003f4006 	br	80db28 <match_file_record_to_name_ext+0xc8>
  80de28:	38bff804 	addi	r2,r7,-32
  80de2c:	12003fcc 	andi	r8,r2,255
  80de30:	4200201c 	xori	r8,r8,128
  80de34:	423fe004 	addi	r8,r8,-128
  80de38:	003f3306 	br	80db08 <match_file_record_to_name_ext+0xa8>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80de3c:	30803fcc 	andi	r2,r6,255
  80de40:	1080201c 	xori	r2,r2,128
  80de44:	10bfe004 	addi	r2,r2,-128
  80de48:	003fc306 	br	80dd58 <match_file_record_to_name_ext+0x2f8>
  80de4c:	21003fcc 	andi	r4,r4,255
  80de50:	2100201c 	xori	r4,r4,128
  80de54:	213fe004 	addi	r4,r4,-128
  80de58:	003fb606 	br	80dd34 <match_file_record_to_name_ext+0x2d4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80de5c:	38bff804 	addi	r2,r7,-32
  80de60:	10803fcc 	andi	r2,r2,255
  80de64:	1080201c 	xori	r2,r2,128
  80de68:	10bfe004 	addi	r2,r2,-128
  80de6c:	003f3f06 	br	80db6c <match_file_record_to_name_ext+0x10c>
  80de70:	38bff804 	addi	r2,r7,-32
  80de74:	12003fcc 	andi	r8,r2,255
  80de78:	4200201c 	xori	r8,r8,128
  80de7c:	423fe004 	addi	r8,r8,-128
  80de80:	003f3206 	br	80db4c <match_file_record_to_name_ext+0xec>
  80de84:	38bff804 	addi	r2,r7,-32
  80de88:	10803fcc 	andi	r2,r2,255
  80de8c:	1080201c 	xori	r2,r2,128
  80de90:	10bfe004 	addi	r2,r2,-128
  80de94:	003f4606 	br	80dbb0 <match_file_record_to_name_ext+0x150>
  80de98:	38bff804 	addi	r2,r7,-32
  80de9c:	12003fcc 	andi	r8,r2,255
  80dea0:	4200201c 	xori	r8,r8,128
  80dea4:	423fe004 	addi	r8,r8,-128
  80dea8:	003f3906 	br	80db90 <match_file_record_to_name_ext+0x130>
  80deac:	38bff804 	addi	r2,r7,-32
  80deb0:	10803fcc 	andi	r2,r2,255
  80deb4:	1080201c 	xori	r2,r2,128
  80deb8:	10bfe004 	addi	r2,r2,-128
  80debc:	003f4d06 	br	80dbf4 <match_file_record_to_name_ext+0x194>
  80dec0:	38bff804 	addi	r2,r7,-32
  80dec4:	12003fcc 	andi	r8,r2,255
  80dec8:	4200201c 	xori	r8,r8,128
  80decc:	423fe004 	addi	r8,r8,-128
  80ded0:	003f4006 	br	80dbd4 <match_file_record_to_name_ext+0x174>
  80ded4:	38bff804 	addi	r2,r7,-32
  80ded8:	10803fcc 	andi	r2,r2,255
  80dedc:	1080201c 	xori	r2,r2,128
  80dee0:	10bfe004 	addi	r2,r2,-128
  80dee4:	003f5406 	br	80dc38 <match_file_record_to_name_ext+0x1d8>
  80dee8:	38bff804 	addi	r2,r7,-32
  80deec:	12003fcc 	andi	r8,r2,255
  80def0:	4200201c 	xori	r8,r8,128
  80def4:	423fe004 	addi	r8,r8,-128
  80def8:	003f4706 	br	80dc18 <match_file_record_to_name_ext+0x1b8>
  80defc:	28803fcc 	andi	r2,r5,255
  80df00:	1080201c 	xori	r2,r2,128
  80df04:	10bfe004 	addi	r2,r2,-128
  80df08:	003f5e06 	br	80dc84 <match_file_record_to_name_ext+0x224>
  80df0c:	39c03fcc 	andi	r7,r7,255
  80df10:	39c0201c 	xori	r7,r7,128
  80df14:	39ffe004 	addi	r7,r7,-128
  80df18:	003f5106 	br	80dc60 <match_file_record_to_name_ext+0x200>
  80df1c:	0011883a 	mov	r8,zero
  80df20:	003f5906 	br	80dc88 <match_file_record_to_name_ext+0x228>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80df24:	0011883a 	mov	r8,zero
            match = false;
			break;
        }
    }
	return match;
}
  80df28:	4005883a 	mov	r2,r8
  80df2c:	f800283a 	ret

0080df30 <convert_filename_to_name_extension>:
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80df30:	21c00003 	ldbu	r7,0(r4)
  80df34:	00800b84 	movi	r2,46
  80df38:	38c03fcc 	andi	r3,r7,255
  80df3c:	18c0201c 	xori	r3,r3,128
  80df40:	18ffe004 	addi	r3,r3,-128
  80df44:	1880ae26 	beq	r3,r2,80e200 <convert_filename_to_name_extension+0x2d0>
        {
            name[counter] = filename[local];
  80df48:	29c00005 	stb	r7,0(r5)
            if (filename[local] != 0) local++;
  80df4c:	20800007 	ldb	r2,0(r4)
  80df50:	10006226 	beq	r2,zero,80e0dc <convert_filename_to_name_extension+0x1ac>
  80df54:	02400044 	movi	r9,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80df58:	224f883a 	add	r7,r4,r9
  80df5c:	3a000003 	ldbu	r8,0(r7)
  80df60:	00800b84 	movi	r2,46
  80df64:	3815883a 	mov	r10,r7
  80df68:	40c03fcc 	andi	r3,r8,255
  80df6c:	18c0201c 	xori	r3,r3,128
  80df70:	18ffe004 	addi	r3,r3,-128
  80df74:	18809726 	beq	r3,r2,80e1d4 <convert_filename_to_name_extension+0x2a4>
        {
            name[counter] = filename[local];
  80df78:	2a000045 	stb	r8,1(r5)
            if (filename[local] != 0) local++;
  80df7c:	50800007 	ldb	r2,0(r10)
  80df80:	10005c26 	beq	r2,zero,80e0f4 <convert_filename_to_name_extension+0x1c4>
  80df84:	4a400044 	addi	r9,r9,1
  80df88:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80df8c:	3a000003 	ldbu	r8,0(r7)
  80df90:	00800b84 	movi	r2,46
  80df94:	40c03fcc 	andi	r3,r8,255
  80df98:	18c0201c 	xori	r3,r3,128
  80df9c:	18ffe004 	addi	r3,r3,-128
  80dfa0:	18809426 	beq	r3,r2,80e1f4 <convert_filename_to_name_extension+0x2c4>
        {
            name[counter] = filename[local];
  80dfa4:	2a000085 	stb	r8,2(r5)
            if (filename[local] != 0) local++;
  80dfa8:	38800007 	ldb	r2,0(r7)
  80dfac:	10005626 	beq	r2,zero,80e108 <convert_filename_to_name_extension+0x1d8>
  80dfb0:	4a400044 	addi	r9,r9,1
  80dfb4:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80dfb8:	3a000003 	ldbu	r8,0(r7)
  80dfbc:	00800b84 	movi	r2,46
  80dfc0:	40c03fcc 	andi	r3,r8,255
  80dfc4:	18c0201c 	xori	r3,r3,128
  80dfc8:	18ffe004 	addi	r3,r3,-128
  80dfcc:	18807e26 	beq	r3,r2,80e1c8 <convert_filename_to_name_extension+0x298>
        {
            name[counter] = filename[local];
  80dfd0:	2a0000c5 	stb	r8,3(r5)
            if (filename[local] != 0) local++;
  80dfd4:	38800007 	ldb	r2,0(r7)
  80dfd8:	10004f26 	beq	r2,zero,80e118 <convert_filename_to_name_extension+0x1e8>
  80dfdc:	4a400044 	addi	r9,r9,1
  80dfe0:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80dfe4:	3a000003 	ldbu	r8,0(r7)
  80dfe8:	00800b84 	movi	r2,46
  80dfec:	40c03fcc 	andi	r3,r8,255
  80dff0:	18c0201c 	xori	r3,r3,128
  80dff4:	18ffe004 	addi	r3,r3,-128
  80dff8:	18807026 	beq	r3,r2,80e1bc <convert_filename_to_name_extension+0x28c>
        {
            name[counter] = filename[local];
  80dffc:	2a000105 	stb	r8,4(r5)
            if (filename[local] != 0) local++;
  80e000:	38800007 	ldb	r2,0(r7)
  80e004:	10004826 	beq	r2,zero,80e128 <convert_filename_to_name_extension+0x1f8>
  80e008:	4a400044 	addi	r9,r9,1
  80e00c:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e010:	3a000003 	ldbu	r8,0(r7)
  80e014:	00800b84 	movi	r2,46
  80e018:	40c03fcc 	andi	r3,r8,255
  80e01c:	18c0201c 	xori	r3,r3,128
  80e020:	18ffe004 	addi	r3,r3,-128
  80e024:	18805226 	beq	r3,r2,80e170 <convert_filename_to_name_extension+0x240>
        {
            name[counter] = filename[local];
  80e028:	2a000145 	stb	r8,5(r5)
            if (filename[local] != 0) local++;
  80e02c:	38800007 	ldb	r2,0(r7)
  80e030:	10004126 	beq	r2,zero,80e138 <convert_filename_to_name_extension+0x208>
  80e034:	4a400044 	addi	r9,r9,1
  80e038:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e03c:	3a000003 	ldbu	r8,0(r7)
  80e040:	00800b84 	movi	r2,46
  80e044:	40c03fcc 	andi	r3,r8,255
  80e048:	18c0201c 	xori	r3,r3,128
  80e04c:	18ffe004 	addi	r3,r3,-128
  80e050:	18804f26 	beq	r3,r2,80e190 <convert_filename_to_name_extension+0x260>
        {
            name[counter] = filename[local];
  80e054:	2a000185 	stb	r8,6(r5)
            if (filename[local] != 0) local++;
  80e058:	38800007 	ldb	r2,0(r7)
  80e05c:	10003a26 	beq	r2,zero,80e148 <convert_filename_to_name_extension+0x218>
  80e060:	4a400044 	addi	r9,r9,1
  80e064:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e068:	3a000003 	ldbu	r8,0(r7)
  80e06c:	00800b84 	movi	r2,46
  80e070:	40c03fcc 	andi	r3,r8,255
  80e074:	18c0201c 	xori	r3,r3,128
  80e078:	18ffe004 	addi	r3,r3,-128
  80e07c:	18804c26 	beq	r3,r2,80e1b0 <convert_filename_to_name_extension+0x280>
        {
            name[counter] = filename[local];
  80e080:	2a0001c5 	stb	r8,7(r5)
            if (filename[local] != 0) local++;
  80e084:	38800007 	ldb	r2,0(r7)
  80e088:	10000726 	beq	r2,zero,80e0a8 <convert_filename_to_name_extension+0x178>
  80e08c:	4a400044 	addi	r9,r9,1
  80e090:	490f883a 	add	r7,r9,r4
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  80e094:	38c00007 	ldb	r3,0(r7)
  80e098:	00800b84 	movi	r2,46
  80e09c:	1880021e 	bne	r3,r2,80e0a8 <convert_filename_to_name_extension+0x178>
  80e0a0:	4a400044 	addi	r9,r9,1
  80e0a4:	224f883a 	add	r7,r4,r9
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e0a8:	38800003 	ldbu	r2,0(r7)
  80e0ac:	10002c1e 	bne	r2,zero,80e160 <convert_filename_to_name_extension+0x230>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e0b0:	00800804 	movi	r2,32
  80e0b4:	30800005 	stb	r2,0(r6)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e0b8:	38800003 	ldbu	r2,0(r7)
  80e0bc:	1000241e 	bne	r2,zero,80e150 <convert_filename_to_name_extension+0x220>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e0c0:	00800804 	movi	r2,32
  80e0c4:	30800045 	stb	r2,1(r6)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e0c8:	38800003 	ldbu	r2,0(r7)
  80e0cc:	1000011e 	bne	r2,zero,80e0d4 <convert_filename_to_name_extension+0x1a4>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e0d0:	00800804 	movi	r2,32
  80e0d4:	30800085 	stb	r2,2(r6)
  80e0d8:	f800283a 	ret
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e0dc:	22000003 	ldbu	r8,0(r4)
  80e0e0:	2015883a 	mov	r10,r4
        {
            extension[counter] = ' ';
        }
    }

}
  80e0e4:	0013883a 	mov	r9,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
  80e0e8:	2a000045 	stb	r8,1(r5)
            if (filename[local] != 0) local++;
  80e0ec:	50800007 	ldb	r2,0(r10)
  80e0f0:	103fa41e 	bne	r2,zero,80df84 <convert_filename_to_name_extension+0x54>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e0f4:	224f883a 	add	r7,r4,r9
  80e0f8:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e0fc:	2a000085 	stb	r8,2(r5)
            if (filename[local] != 0) local++;
  80e100:	38800007 	ldb	r2,0(r7)
  80e104:	103faa1e 	bne	r2,zero,80dfb0 <convert_filename_to_name_extension+0x80>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e108:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e10c:	2a0000c5 	stb	r8,3(r5)
            if (filename[local] != 0) local++;
  80e110:	38800007 	ldb	r2,0(r7)
  80e114:	103fb11e 	bne	r2,zero,80dfdc <convert_filename_to_name_extension+0xac>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e118:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e11c:	2a000105 	stb	r8,4(r5)
            if (filename[local] != 0) local++;
  80e120:	38800007 	ldb	r2,0(r7)
  80e124:	103fb81e 	bne	r2,zero,80e008 <convert_filename_to_name_extension+0xd8>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e128:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e12c:	2a000145 	stb	r8,5(r5)
            if (filename[local] != 0) local++;
  80e130:	38800007 	ldb	r2,0(r7)
  80e134:	103fbf1e 	bne	r2,zero,80e034 <convert_filename_to_name_extension+0x104>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e138:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e13c:	2a000185 	stb	r8,6(r5)
            if (filename[local] != 0) local++;
  80e140:	38800007 	ldb	r2,0(r7)
  80e144:	103fc61e 	bne	r2,zero,80e060 <convert_filename_to_name_extension+0x130>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e148:	3a000003 	ldbu	r8,0(r7)
  80e14c:	003fcc06 	br	80e080 <convert_filename_to_name_extension+0x150>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
  80e150:	4a400044 	addi	r9,r9,1
  80e154:	224f883a 	add	r7,r4,r9
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  80e158:	30800045 	stb	r2,1(r6)
  80e15c:	003fda06 	br	80e0c8 <convert_filename_to_name_extension+0x198>
            local++;
  80e160:	4a400044 	addi	r9,r9,1
  80e164:	224f883a 	add	r7,r4,r9
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  80e168:	30800005 	stb	r2,0(r6)
  80e16c:	003fd206 	br	80e0b8 <convert_filename_to_name_extension+0x188>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e170:	00800804 	movi	r2,32
  80e174:	28800145 	stb	r2,5(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e178:	3a000003 	ldbu	r8,0(r7)
  80e17c:	00800b84 	movi	r2,46
  80e180:	40c03fcc 	andi	r3,r8,255
  80e184:	18c0201c 	xori	r3,r3,128
  80e188:	18ffe004 	addi	r3,r3,-128
  80e18c:	18bfb11e 	bne	r3,r2,80e054 <convert_filename_to_name_extension+0x124>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e190:	00800804 	movi	r2,32
  80e194:	28800185 	stb	r2,6(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e198:	3a000003 	ldbu	r8,0(r7)
  80e19c:	00800b84 	movi	r2,46
  80e1a0:	40c03fcc 	andi	r3,r8,255
  80e1a4:	18c0201c 	xori	r3,r3,128
  80e1a8:	18ffe004 	addi	r3,r3,-128
  80e1ac:	18bfb41e 	bne	r3,r2,80e080 <convert_filename_to_name_extension+0x150>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e1b0:	00800804 	movi	r2,32
  80e1b4:	288001c5 	stb	r2,7(r5)
  80e1b8:	003fb606 	br	80e094 <convert_filename_to_name_extension+0x164>
  80e1bc:	00800804 	movi	r2,32
  80e1c0:	28800105 	stb	r2,4(r5)
  80e1c4:	003f9206 	br	80e010 <convert_filename_to_name_extension+0xe0>
  80e1c8:	00800804 	movi	r2,32
  80e1cc:	288000c5 	stb	r2,3(r5)
  80e1d0:	003f8406 	br	80dfe4 <convert_filename_to_name_extension+0xb4>
  80e1d4:	00800804 	movi	r2,32
  80e1d8:	28800045 	stb	r2,1(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e1dc:	3a000003 	ldbu	r8,0(r7)
  80e1e0:	00800b84 	movi	r2,46
  80e1e4:	40c03fcc 	andi	r3,r8,255
  80e1e8:	18c0201c 	xori	r3,r3,128
  80e1ec:	18ffe004 	addi	r3,r3,-128
  80e1f0:	18bf6c1e 	bne	r3,r2,80dfa4 <convert_filename_to_name_extension+0x74>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e1f4:	00800804 	movi	r2,32
  80e1f8:	28800085 	stb	r2,2(r5)
  80e1fc:	003f6e06 	br	80dfb8 <convert_filename_to_name_extension+0x88>
  80e200:	00800804 	movi	r2,32
  80e204:	0013883a 	mov	r9,zero
  80e208:	28800005 	stb	r2,0(r5)
  80e20c:	003f5206 	br	80df58 <convert_filename_to_name_extension+0x28>

0080e210 <copy_file_record_name_to_string>:
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e210:	21800003 	ldbu	r6,0(r4)
  80e214:	00800804 	movi	r2,32
  80e218:	30c03fcc 	andi	r3,r6,255
  80e21c:	18804826 	beq	r3,r2,80e340 <copy_file_record_name_to_string+0x130>
		{
			file_name[flength] = file_record->name[index];
  80e220:	29800005 	stb	r6,0(r5)
  80e224:	01800044 	movi	r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e228:	20c00043 	ldbu	r3,1(r4)
  80e22c:	01c00804 	movi	r7,32
  80e230:	18803fcc 	andi	r2,r3,255
  80e234:	11c00326 	beq	r2,r7,80e244 <copy_file_record_name_to_string+0x34>
		{
			file_name[flength] = file_record->name[index];
  80e238:	2985883a 	add	r2,r5,r6
  80e23c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e240:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e244:	20c00083 	ldbu	r3,2(r4)
  80e248:	18803fcc 	andi	r2,r3,255
  80e24c:	11c00326 	beq	r2,r7,80e25c <copy_file_record_name_to_string+0x4c>
		{
			file_name[flength] = file_record->name[index];
  80e250:	2985883a 	add	r2,r5,r6
  80e254:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e258:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e25c:	20c000c3 	ldbu	r3,3(r4)
  80e260:	18803fcc 	andi	r2,r3,255
  80e264:	11c00326 	beq	r2,r7,80e274 <copy_file_record_name_to_string+0x64>
		{
			file_name[flength] = file_record->name[index];
  80e268:	2985883a 	add	r2,r5,r6
  80e26c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e270:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e274:	20c00103 	ldbu	r3,4(r4)
  80e278:	18803fcc 	andi	r2,r3,255
  80e27c:	11c00326 	beq	r2,r7,80e28c <copy_file_record_name_to_string+0x7c>
		{
			file_name[flength] = file_record->name[index];
  80e280:	2985883a 	add	r2,r5,r6
  80e284:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e288:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e28c:	20c00143 	ldbu	r3,5(r4)
  80e290:	18803fcc 	andi	r2,r3,255
  80e294:	11c00326 	beq	r2,r7,80e2a4 <copy_file_record_name_to_string+0x94>
		{
			file_name[flength] = file_record->name[index];
  80e298:	2985883a 	add	r2,r5,r6
  80e29c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e2a0:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e2a4:	20c00183 	ldbu	r3,6(r4)
  80e2a8:	18803fcc 	andi	r2,r3,255
  80e2ac:	11c00326 	beq	r2,r7,80e2bc <copy_file_record_name_to_string+0xac>
		{
			file_name[flength] = file_record->name[index];
  80e2b0:	2985883a 	add	r2,r5,r6
  80e2b4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e2b8:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e2bc:	20c001c3 	ldbu	r3,7(r4)
  80e2c0:	18803fcc 	andi	r2,r3,255
  80e2c4:	11c00326 	beq	r2,r7,80e2d4 <copy_file_record_name_to_string+0xc4>
		{
			file_name[flength] = file_record->name[index];
  80e2c8:	2985883a 	add	r2,r5,r6
  80e2cc:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e2d0:	31800044 	addi	r6,r6,1
		}
	}
	if (file_record->extension[0] != ' ')
  80e2d4:	20800203 	ldbu	r2,8(r4)
  80e2d8:	11c01626 	beq	r2,r7,80e334 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
  80e2dc:	2985883a 	add	r2,r5,r6
  80e2e0:	00c00b84 	movi	r3,46
  80e2e4:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e2e8:	20c00203 	ldbu	r3,8(r4)
		}
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
  80e2ec:	31800044 	addi	r6,r6,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e2f0:	18803fcc 	andi	r2,r3,255
  80e2f4:	11c00326 	beq	r2,r7,80e304 <copy_file_record_name_to_string+0xf4>
			{
				file_name[flength] = file_record->extension[index];
  80e2f8:	2985883a 	add	r2,r5,r6
  80e2fc:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80e300:	31800044 	addi	r6,r6,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e304:	20c00243 	ldbu	r3,9(r4)
  80e308:	18803fcc 	andi	r2,r3,255
  80e30c:	11c00326 	beq	r2,r7,80e31c <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
  80e310:	2985883a 	add	r2,r5,r6
  80e314:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80e318:	31800044 	addi	r6,r6,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e31c:	21000283 	ldbu	r4,10(r4)
  80e320:	20803fcc 	andi	r2,r4,255
  80e324:	11c00326 	beq	r2,r7,80e334 <copy_file_record_name_to_string+0x124>
			{
				file_name[flength] = file_record->extension[index];
  80e328:	2985883a 	add	r2,r5,r6
  80e32c:	11000005 	stb	r4,0(r2)
				flength = flength + 1;
  80e330:	31800044 	addi	r6,r6,1
			}
		}
	}
	file_name[flength] = 0;
  80e334:	3145883a 	add	r2,r6,r5
  80e338:	10000005 	stb	zero,0(r2)
}
  80e33c:	f800283a 	ret
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e340:	000d883a 	mov	r6,zero
  80e344:	003fb806 	br	80e228 <copy_file_record_name_to_string+0x18>

0080e348 <alt_up_sd_card_set_attributes>:
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
  80e348:	20bfffcc 	andi	r2,r4,65535
  80e34c:	10a0001c 	xori	r2,r2,32768
  80e350:	10a00004 	addi	r2,r2,-32768
  80e354:	100491ba 	slli	r2,r2,6
  80e358:	00c02074 	movhi	r3,129
  80e35c:	18dd9704 	addi	r3,r3,30300

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e360:	213fffcc 	andi	r4,r4,65535
    {
        if (active_files[file_handle].in_use)
  80e364:	10c7883a 	add	r3,r2,r3

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e368:	008004c4 	movi	r2,19
  80e36c:	11000336 	bltu	r2,r4,80e37c <alt_up_sd_card_set_attributes+0x34>
    {
        if (active_files[file_handle].in_use)
  80e370:	18800f17 	ldw	r2,60(r3)
  80e374:	10000126 	beq	r2,zero,80e37c <alt_up_sd_card_set_attributes+0x34>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  80e378:	194002c5 	stb	r5,11(r3)
  80e37c:	f800283a 	ret

0080e380 <alt_up_sd_card_get_attributes>:
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
  80e380:	20bfffcc 	andi	r2,r4,65535
  80e384:	10a0001c 	xori	r2,r2,32768
  80e388:	10a00004 	addi	r2,r2,-32768
  80e38c:	100491ba 	slli	r2,r2,6
  80e390:	00c02074 	movhi	r3,129
  80e394:	18dd9704 	addi	r3,r3,30300
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e398:	213fffcc 	andi	r4,r4,65535
  80e39c:	014004c4 	movi	r5,19
    {
        if (active_files[file_handle].in_use)
  80e3a0:	10c7883a 	add	r3,r2,r3
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e3a4:	29000436 	bltu	r5,r4,80e3b8 <alt_up_sd_card_get_attributes+0x38>
    {
        if (active_files[file_handle].in_use)
  80e3a8:	18800f17 	ldw	r2,60(r3)
  80e3ac:	10000226 	beq	r2,zero,80e3b8 <alt_up_sd_card_get_attributes+0x38>
  80e3b0:	188002c3 	ldbu	r2,11(r3)
  80e3b4:	f800283a 	ret
  80e3b8:	00bfffc4 	movi	r2,-1
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
		}
	}
	return result;
}
  80e3bc:	f800283a 	ret

0080e3c0 <alt_up_sd_card_is_Present>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e3c0:	d0a75d17 	ldw	r2,-25228(gp)
  80e3c4:	10000426 	beq	r2,zero,80e3d8 <alt_up_sd_card_is_Present+0x18>
  80e3c8:	d0e75517 	ldw	r3,-25260(gp)
  80e3cc:	1880002b 	ldhuio	r2,0(r3)
  80e3d0:	1080008c 	andi	r2,r2,2
  80e3d4:	1000131e 	bne	r2,zero,80e424 <alt_up_sd_card_is_Present+0x64>
    {
        result = true;
    }
	else if (initialized == true)
  80e3d8:	d0e75317 	ldw	r3,-25268(gp)
  80e3dc:	00800044 	movi	r2,1
  80e3e0:	18800226 	beq	r3,r2,80e3ec <alt_up_sd_card_is_Present+0x2c>

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e3e4:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
  80e3e8:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e3ec:	00802074 	movhi	r2,129
  80e3f0:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80e3f4:	00c02074 	movhi	r3,129
  80e3f8:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e3fc:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80e400:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80e404:	d0275415 	stw	zero,-25264(gp)
  80e408:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80e40c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80e410:	183fff15 	stw	zero,-4(r3)
  80e414:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e418:	18bffc1e 	bne	r3,r2,80e40c <alt_up_sd_card_is_Present+0x4c>
  80e41c:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
  80e420:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e424:	00800044 	movi	r2,1
  80e428:	f800283a 	ret

0080e42c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80e42c:	deffff04 	addi	sp,sp,-4
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80e430:	01402074 	movhi	r5,129
  80e434:	29561804 	addi	r5,r5,22624
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80e438:	dfc00015 	stw	ra,0(sp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80e43c:	0812ce00 	call	812ce0 <alt_find_dev>

	if (dev != NULL)
  80e440:	10001226 	beq	r2,zero,80e48c <alt_up_sd_card_open_dev+0x60>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80e444:	11000a17 	ldw	r4,40(r2)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
		search_data.valid = false;
  80e448:	00c02074 	movhi	r3,129
  80e44c:	18dd7d04 	addi	r3,r3,30196
  80e450:	18000415 	stw	zero,16(r3)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80e454:	21408d04 	addi	r5,r4,564
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80e458:	20c08904 	addi	r3,r4,548
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80e45c:	21808404 	addi	r6,r4,528
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80e460:	21c08c04 	addi	r7,r4,560
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80e464:	22008b04 	addi	r8,r4,556
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
  80e468:	d0a75d15 	stw	r2,-25228(gp)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80e46c:	d1675515 	stw	r5,-25260(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80e470:	d0e75615 	stw	r3,-25256(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80e474:	d1a75715 	stw	r6,-25252(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80e478:	d1e75815 	stw	r7,-25248(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80e47c:	d2275915 	stw	r8,-25244(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  80e480:	d1275a15 	stw	r4,-25240(gp)
		device_pointer = dev;
		initialized = false;
  80e484:	d0275315 	stw	zero,-25268(gp)
		is_sd_card_formated_as_FAT16 = false;
  80e488:	d0275415 	stw	zero,-25264(gp)
		search_data.valid = false;
	}
	return dev;
}
  80e48c:	dfc00017 	ldw	ra,0(sp)
  80e490:	dec00104 	addi	sp,sp,4
  80e494:	f800283a 	ret

0080e498 <get_dir_divider_location>:
}


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  80e498:	defffe04 	addi	sp,sp,-8
  80e49c:	dc000015 	stw	r16,0(sp)
  80e4a0:	dfc00115 	stw	ra,4(sp)
  80e4a4:	2021883a 	mov	r16,r4
    int index = 0;
    int length = strlen(name);
  80e4a8:	0803e880 	call	803e88 <strlen>
  80e4ac:	1009883a 	mov	r4,r2
    
    for(index = 0; index < length; index++)
  80e4b0:	0080160e 	bge	zero,r2,80e50c <get_dir_divider_location+0x74>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80e4b4:	80800007 	ldb	r2,0(r16)
  80e4b8:	01401704 	movi	r5,92
  80e4bc:	11401126 	beq	r2,r5,80e504 <get_dir_divider_location+0x6c>
  80e4c0:	00c00bc4 	movi	r3,47
  80e4c4:	10c00f26 	beq	r2,r3,80e504 <get_dir_divider_location+0x6c>
  80e4c8:	280d883a 	mov	r6,r5
  80e4cc:	0005883a 	mov	r2,zero
  80e4d0:	180b883a 	mov	r5,r3
  80e4d4:	00000306 	br	80e4e4 <get_dir_divider_location+0x4c>
  80e4d8:	18c00007 	ldb	r3,0(r3)
  80e4dc:	19800526 	beq	r3,r6,80e4f4 <get_dir_divider_location+0x5c>
  80e4e0:	19400426 	beq	r3,r5,80e4f4 <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80e4e4:	10800044 	addi	r2,r2,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80e4e8:	8087883a 	add	r3,r16,r2
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80e4ec:	20bffa1e 	bne	r4,r2,80e4d8 <get_dir_divider_location+0x40>
        {
            break;
        }
    }
    
    if (index == length)
  80e4f0:	00bfffc4 	movi	r2,-1
    {
        index = -1;
    }
    
    return index;
}
  80e4f4:	dfc00117 	ldw	ra,4(sp)
  80e4f8:	dc000017 	ldw	r16,0(sp)
  80e4fc:	dec00204 	addi	sp,sp,8
  80e500:	f800283a 	ret
        {
            break;
        }
    }
    
    if (index == length)
  80e504:	0005883a 	mov	r2,zero
  80e508:	003ffa06 	br	80e4f4 <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80e50c:	0005883a 	mov	r2,zero
        {
            break;
        }
    }
    
    if (index == length)
  80e510:	203ff81e 	bne	r4,zero,80e4f4 <get_dir_divider_location+0x5c>
  80e514:	003ff606 	br	80e4f0 <get_dir_divider_location+0x58>

0080e518 <check_file_name_for_FAT16_compliance>:
}


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  80e518:	defffe04 	addi	sp,sp,-8
  80e51c:	dc000015 	stw	r16,0(sp)
  80e520:	dfc00115 	stw	ra,4(sp)
  80e524:	2021883a 	mov	r16,r4
    int length = strlen(file_name);
  80e528:	0803e880 	call	803e88 <strlen>
  80e52c:	100f883a 	mov	r7,r2
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e530:	00802e0e 	bge	zero,r2,80e5ec <check_file_name_for_FAT16_compliance+0xd4>
    {
        if ((file_name[index] == ' ') ||
  80e534:	80c00007 	ldb	r3,0(r16)
  80e538:	00800804 	movi	r2,32
  80e53c:	18801826 	beq	r3,r2,80e5a0 <check_file_name_for_FAT16_compliance+0x88>
  80e540:	017fffc4 	movi	r5,-1
  80e544:	1017883a 	mov	r11,r2
  80e548:	0009883a 	mov	r4,zero
  80e54c:	280d883a 	mov	r6,r5
  80e550:	02001704 	movi	r8,92
  80e554:	02400bc4 	movi	r9,47
  80e558:	02800244 	movi	r10,9
  80e55c:	03400b84 	movi	r13,46
  80e560:	030000c4 	movi	r12,3
  80e564:	20bfffc4 	addi	r2,r4,-1
  80e568:	11802b26 	beq	r2,r6,80e618 <check_file_name_for_FAT16_compliance+0x100>
  80e56c:	2145c83a 	sub	r2,r4,r5
  80e570:	12801726 	beq	r2,r10,80e5d0 <check_file_name_for_FAT16_compliance+0xb8>
  80e574:	29801826 	beq	r5,r6,80e5d8 <check_file_name_for_FAT16_compliance+0xc0>
  80e578:	6080170e 	bge	r12,r2,80e5d8 <check_file_name_for_FAT16_compliance+0xc0>
  80e57c:	1a000126 	beq	r3,r8,80e584 <check_file_name_for_FAT16_compliance+0x6c>
  80e580:	1a40071e 	bne	r3,r9,80e5a0 <check_file_name_for_FAT16_compliance+0x88>
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  80e584:	200d883a 	mov	r6,r4
  80e588:	200b883a 	mov	r5,r4
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e58c:	21000044 	addi	r4,r4,1
  80e590:	39001626 	beq	r7,r4,80e5ec <check_file_name_for_FAT16_compliance+0xd4>
    {
        if ((file_name[index] == ' ') ||
  80e594:	2405883a 	add	r2,r4,r16
  80e598:	10c00007 	ldb	r3,0(r2)
  80e59c:	1afff11e 	bne	r3,r11,80e564 <check_file_name_for_FAT16_compliance+0x4c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e5a0:	81c5883a 	add	r2,r16,r7
  80e5a4:	113fffc7 	ldb	r4,-1(r2)
  80e5a8:	00c01704 	movi	r3,92
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e5ac:	000b883a 	mov	r5,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e5b0:	20c01326 	beq	r4,r3,80e600 <check_file_name_for_FAT16_compliance+0xe8>
  80e5b4:	00800bc4 	movi	r2,47
  80e5b8:	20801126 	beq	r4,r2,80e600 <check_file_name_for_FAT16_compliance+0xe8>
    {
        result = false;
    }
    return result;
}
  80e5bc:	2805883a 	mov	r2,r5
  80e5c0:	dfc00117 	ldw	ra,4(sp)
  80e5c4:	dc000017 	ldw	r16,0(sp)
  80e5c8:	dec00204 	addi	sp,sp,8
  80e5cc:	f800283a 	ret
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  80e5d0:	1b7ff31e 	bne	r3,r13,80e5a0 <check_file_name_for_FAT16_compliance+0x88>
  80e5d4:	29bfe81e 	bne	r5,r6,80e578 <check_file_name_for_FAT16_compliance+0x60>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  80e5d8:	1a3fea26 	beq	r3,r8,80e584 <check_file_name_for_FAT16_compliance+0x6c>
  80e5dc:	1a7fe926 	beq	r3,r9,80e584 <check_file_name_for_FAT16_compliance+0x6c>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  80e5e0:	1b7fe926 	beq	r3,r13,80e588 <check_file_name_for_FAT16_compliance+0x70>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e5e4:	21000044 	addi	r4,r4,1
  80e5e8:	393fea1e 	bne	r7,r4,80e594 <check_file_name_for_FAT16_compliance+0x7c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e5ec:	81c5883a 	add	r2,r16,r7
  80e5f0:	113fffc7 	ldb	r4,-1(r2)
  80e5f4:	00c01704 	movi	r3,92
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e5f8:	01400044 	movi	r5,1
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e5fc:	20ffed1e 	bne	r4,r3,80e5b4 <check_file_name_for_FAT16_compliance+0x9c>
  80e600:	000b883a 	mov	r5,zero
    {
        result = false;
    }
    return result;
}
  80e604:	2805883a 	mov	r2,r5
  80e608:	dfc00117 	ldw	ra,4(sp)
  80e60c:	dc000017 	ldw	r16,0(sp)
  80e610:	dec00204 	addi	sp,sp,8
  80e614:	f800283a 	ret
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  80e618:	1a3fe126 	beq	r3,r8,80e5a0 <check_file_name_for_FAT16_compliance+0x88>
  80e61c:	1a7fd31e 	bne	r3,r9,80e56c <check_file_name_for_FAT16_compliance+0x54>
  80e620:	003fdf06 	br	80e5a0 <check_file_name_for_FAT16_compliance+0x88>

0080e624 <filename_to_upper_case>:
}
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  80e624:	defffe04 	addi	sp,sp,-8
  80e628:	dc000015 	stw	r16,0(sp)
  80e62c:	dfc00115 	stw	ra,4(sp)
  80e630:	2021883a 	mov	r16,r4
    int index;
    int length = strlen(file_name);
  80e634:	0803e880 	call	803e88 <strlen>
  80e638:	100d883a 	mov	r6,r2
    
    for (index = 0; index < length; index++)
  80e63c:	00800c0e 	bge	zero,r2,80e670 <filename_to_upper_case+0x4c>
  80e640:	8009883a 	mov	r4,r16
  80e644:	000b883a 	mov	r5,zero
  80e648:	01c00644 	movi	r7,25
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80e64c:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  80e650:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80e654:	18bfe7c4 	addi	r2,r3,-97
  80e658:	10803fcc 	andi	r2,r2,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80e65c:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80e660:	38800136 	bltu	r7,r2,80e668 <filename_to_upper_case+0x44>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80e664:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  80e668:	21000044 	addi	r4,r4,1
  80e66c:	317ff71e 	bne	r6,r5,80e64c <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  80e670:	dfc00117 	ldw	ra,4(sp)
  80e674:	dc000017 	ldw	r16,0(sp)
  80e678:	dec00204 	addi	sp,sp,8
  80e67c:	f800283a 	ret

0080e680 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e680:	208007cc 	andi	r2,r4,31
}


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  80e684:	2013883a 	mov	r9,r4
  80e688:	2815883a 	mov	r10,r5
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e68c:	1000751e 	bne	r2,zero,80e864 <Write_File_Record_At_Offset+0x1e4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e690:	d1275d17 	ldw	r4,-25228(gp)
  80e694:	20007026 	beq	r4,zero,80e858 <Write_File_Record_At_Offset+0x1d8>
  80e698:	d0e75517 	ldw	r3,-25260(gp)
  80e69c:	1880002b 	ldhuio	r2,0(r3)
  80e6a0:	1080008c 	andi	r2,r2,2
  80e6a4:	10006c26 	beq	r2,zero,80e858 <Write_File_Record_At_Offset+0x1d8>

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e6a8:	d0a75417 	ldw	r2,-25264(gp)
  80e6ac:	10006d26 	beq	r2,zero,80e864 <Write_File_Record_At_Offset+0x1e4>
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e6b0:	28800043 	ldbu	r2,1(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e6b4:	28c00003 	ldbu	r3,0(r5)
  80e6b8:	21000a17 	ldw	r4,40(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e6bc:	1004923a 	slli	r2,r2,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e6c0:	4909883a 	add	r4,r9,r4
  80e6c4:	10c4b03a 	or	r2,r2,r3
  80e6c8:	10bfffcc 	andi	r2,r2,65535
  80e6cc:	10a0001c 	xori	r2,r2,32768
  80e6d0:	10a00004 	addi	r2,r2,-32768
  80e6d4:	2080002d 	sthio	r2,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e6d8:	28c000c3 	ldbu	r3,3(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e6dc:	d0a75d17 	ldw	r2,-25228(gp)
  80e6e0:	29400083 	ldbu	r5,2(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e6e4:	1806923a 	slli	r3,r3,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e6e8:	11000a17 	ldw	r4,40(r2)
  80e6ec:	49c00084 	addi	r7,r9,2
  80e6f0:	1946b03a 	or	r3,r3,r5
  80e6f4:	18ffffcc 	andi	r3,r3,65535
  80e6f8:	18e0001c 	xori	r3,r3,32768
  80e6fc:	3909883a 	add	r4,r7,r4
  80e700:	18e00004 	addi	r3,r3,-32768
  80e704:	20c0002d 	sthio	r3,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e708:	50800143 	ldbu	r2,5(r10)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e70c:	51800103 	ldbu	r6,4(r10)
  80e710:	d0e75d17 	ldw	r3,-25228(gp)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e714:	1004923a 	slli	r2,r2,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e718:	49000104 	addi	r4,r9,4
  80e71c:	19400a17 	ldw	r5,40(r3)
  80e720:	1184b03a 	or	r2,r2,r6
  80e724:	10bfffcc 	andi	r2,r2,65535
  80e728:	10a0001c 	xori	r2,r2,32768
  80e72c:	2149883a 	add	r4,r4,r5
  80e730:	10a00004 	addi	r2,r2,-32768
  80e734:	2080002d 	sthio	r2,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e738:	50c001c3 	ldbu	r3,7(r10)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e73c:	51800183 	ldbu	r6,6(r10)
  80e740:	d0a75d17 	ldw	r2,-25228(gp)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e744:	1806923a 	slli	r3,r3,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e748:	49000184 	addi	r4,r9,6
  80e74c:	11400a17 	ldw	r5,40(r2)
  80e750:	1986b03a 	or	r3,r3,r6
  80e754:	18ffffcc 	andi	r3,r3,65535
  80e758:	18e0001c 	xori	r3,r3,32768
  80e75c:	2149883a 	add	r4,r4,r5
  80e760:	18e00004 	addi	r3,r3,-32768
  80e764:	20c0002d 	sthio	r3,0(r4)
        }        
        for (counter = 0; counter < 3; counter++)
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  80e768:	d0e75d17 	ldw	r3,-25228(gp)
  80e76c:	51400203 	ldbu	r5,8(r10)
  80e770:	18800a17 	ldw	r2,40(r3)
  80e774:	4885883a 	add	r2,r9,r2
  80e778:	11400225 	stbio	r5,8(r2)
  80e77c:	d0a75d17 	ldw	r2,-25228(gp)
  80e780:	51800243 	ldbu	r6,9(r10)
  80e784:	48c00044 	addi	r3,r9,1
  80e788:	11000a17 	ldw	r4,40(r2)
  80e78c:	02000044 	movi	r8,1
  80e790:	1907883a 	add	r3,r3,r4
  80e794:	19800225 	stbio	r6,8(r3)
  80e798:	d0a75d17 	ldw	r2,-25228(gp)
  80e79c:	51000283 	ldbu	r4,10(r10)
  80e7a0:	10c00a17 	ldw	r3,40(r2)
  80e7a4:	38cf883a 	add	r7,r7,r3
  80e7a8:	39000225 	stbio	r4,8(r7)
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  80e7ac:	d0e75d17 	ldw	r3,-25228(gp)
  80e7b0:	514002c3 	ldbu	r5,11(r10)
  80e7b4:	18800a17 	ldw	r2,40(r3)
  80e7b8:	4885883a 	add	r2,r9,r2
  80e7bc:	114002e5 	stbio	r5,11(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  80e7c0:	d0e75d17 	ldw	r3,-25228(gp)
  80e7c4:	5100030b 	ldhu	r4,12(r10)
  80e7c8:	18800a17 	ldw	r2,40(r3)
  80e7cc:	4885883a 	add	r2,r9,r2
  80e7d0:	110003ad 	sthio	r4,14(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  80e7d4:	d0e75d17 	ldw	r3,-25228(gp)
  80e7d8:	5140038b 	ldhu	r5,14(r10)
  80e7dc:	18800a17 	ldw	r2,40(r3)
  80e7e0:	4885883a 	add	r2,r9,r2
  80e7e4:	1140042d 	sthio	r5,16(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  80e7e8:	d0e75d17 	ldw	r3,-25228(gp)
  80e7ec:	5100040b 	ldhu	r4,16(r10)
  80e7f0:	18800a17 	ldw	r2,40(r3)
  80e7f4:	4885883a 	add	r2,r9,r2
  80e7f8:	110004ad 	sthio	r4,18(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  80e7fc:	d0e75d17 	ldw	r3,-25228(gp)
  80e800:	5140048b 	ldhu	r5,18(r10)
  80e804:	18800a17 	ldw	r2,40(r3)
  80e808:	4885883a 	add	r2,r9,r2
  80e80c:	114005ad 	sthio	r5,22(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  80e810:	d0e75d17 	ldw	r3,-25228(gp)
  80e814:	5100050b 	ldhu	r4,20(r10)
  80e818:	18800a17 	ldw	r2,40(r3)
  80e81c:	4885883a 	add	r2,r9,r2
  80e820:	1100062d 	sthio	r4,24(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  80e824:	d0e75d17 	ldw	r3,-25228(gp)
  80e828:	5140058b 	ldhu	r5,22(r10)
  80e82c:	18800a17 	ldw	r2,40(r3)
  80e830:	4885883a 	add	r2,r9,r2
  80e834:	114006ad 	sthio	r5,26(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  80e838:	d0e75d17 	ldw	r3,-25228(gp)
  80e83c:	51000617 	ldw	r4,24(r10)
  80e840:	18800a17 	ldw	r2,40(r3)
  80e844:	4885883a 	add	r2,r9,r2
  80e848:	11000735 	stwio	r4,28(r2)
        current_sector_modified = true;                  
  80e84c:	4005883a 	mov	r2,r8
  80e850:	d2275e15 	stw	r8,-25224(gp)
  80e854:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80e858:	d0e75317 	ldw	r3,-25268(gp)
  80e85c:	00800044 	movi	r2,1
  80e860:	18800226 	beq	r3,r2,80e86c <Write_File_Record_At_Offset+0x1ec>
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
  80e864:	0005883a 	mov	r2,zero
        result = true;
    }
    return result;
}
  80e868:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e86c:	00802074 	movhi	r2,129
  80e870:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80e874:	00c02074 	movhi	r3,129
  80e878:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e87c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80e880:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80e884:	d0275415 	stw	zero,-25264(gp)
  80e888:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80e88c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80e890:	183fff15 	stw	zero,-4(r3)
  80e894:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e898:	18bffc1e 	bne	r3,r2,80e88c <Write_File_Record_At_Offset+0x20c>
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
  80e89c:	0005883a 	mov	r2,zero
        result = true;
    }
    return result;
}
  80e8a0:	f800283a 	ret

0080e8a4 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e8a4:	208007cc 	andi	r2,r4,31
}


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  80e8a8:	2013883a 	mov	r9,r4
  80e8ac:	2811883a 	mov	r8,r5
  80e8b0:	3015883a 	mov	r10,r6
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e8b4:	1000631e 	bne	r2,zero,80ea44 <Read_File_Record_At_Offset+0x1a0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e8b8:	d1275d17 	ldw	r4,-25228(gp)
  80e8bc:	20005e26 	beq	r4,zero,80ea38 <Read_File_Record_At_Offset+0x194>
  80e8c0:	d0e75517 	ldw	r3,-25260(gp)
  80e8c4:	1880002b 	ldhuio	r2,0(r3)
  80e8c8:	1080008c 	andi	r2,r2,2
  80e8cc:	10005a26 	beq	r2,zero,80ea38 <Read_File_Record_At_Offset+0x194>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e8d0:	d0a75417 	ldw	r2,-25264(gp)
  80e8d4:	10005b26 	beq	r2,zero,80ea44 <Read_File_Record_At_Offset+0x1a0>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  80e8d8:	20800a17 	ldw	r2,40(r4)
  80e8dc:	4885883a 	add	r2,r9,r2
  80e8e0:	10c00023 	ldbuio	r3,0(r2)
  80e8e4:	28c00005 	stb	r3,0(r5)
  80e8e8:	d0e75d17 	ldw	r3,-25228(gp)
  80e8ec:	49800044 	addi	r6,r9,1
  80e8f0:	18800a17 	ldw	r2,40(r3)
  80e8f4:	3085883a 	add	r2,r6,r2
  80e8f8:	10c00023 	ldbuio	r3,0(r2)
  80e8fc:	28c00045 	stb	r3,1(r5)
  80e900:	d0e75d17 	ldw	r3,-25228(gp)
  80e904:	49400084 	addi	r5,r9,2
  80e908:	18800a17 	ldw	r2,40(r3)
  80e90c:	2885883a 	add	r2,r5,r2
  80e910:	10c00023 	ldbuio	r3,0(r2)
  80e914:	40c00085 	stb	r3,2(r8)
  80e918:	d0e75d17 	ldw	r3,-25228(gp)
  80e91c:	488000c4 	addi	r2,r9,3
  80e920:	19000a17 	ldw	r4,40(r3)
  80e924:	1105883a 	add	r2,r2,r4
  80e928:	10c00023 	ldbuio	r3,0(r2)
  80e92c:	40c000c5 	stb	r3,3(r8)
  80e930:	d0e75d17 	ldw	r3,-25228(gp)
  80e934:	48800104 	addi	r2,r9,4
  80e938:	19000a17 	ldw	r4,40(r3)
  80e93c:	1105883a 	add	r2,r2,r4
  80e940:	10c00023 	ldbuio	r3,0(r2)
  80e944:	40c00105 	stb	r3,4(r8)
  80e948:	d0e75d17 	ldw	r3,-25228(gp)
  80e94c:	48800144 	addi	r2,r9,5
  80e950:	19000a17 	ldw	r4,40(r3)
  80e954:	1105883a 	add	r2,r2,r4
  80e958:	10c00023 	ldbuio	r3,0(r2)
  80e95c:	40c00145 	stb	r3,5(r8)
  80e960:	d0e75d17 	ldw	r3,-25228(gp)
  80e964:	48800184 	addi	r2,r9,6
  80e968:	19000a17 	ldw	r4,40(r3)
  80e96c:	1105883a 	add	r2,r2,r4
  80e970:	10c00023 	ldbuio	r3,0(r2)
  80e974:	40c00185 	stb	r3,6(r8)
  80e978:	d0e75d17 	ldw	r3,-25228(gp)
  80e97c:	488001c4 	addi	r2,r9,7
  80e980:	19000a17 	ldw	r4,40(r3)
  80e984:	1105883a 	add	r2,r2,r4
  80e988:	10c00023 	ldbuio	r3,0(r2)
  80e98c:	40c001c5 	stb	r3,7(r8)
		}        
		for (counter = 0; counter < 3; counter++)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  80e990:	d1275d17 	ldw	r4,-25228(gp)
  80e994:	20800a17 	ldw	r2,40(r4)
  80e998:	4885883a 	add	r2,r9,r2
  80e99c:	10c00223 	ldbuio	r3,8(r2)
  80e9a0:	40c00205 	stb	r3,8(r8)
  80e9a4:	d0a75d17 	ldw	r2,-25228(gp)
  80e9a8:	10c00a17 	ldw	r3,40(r2)
  80e9ac:	30cd883a 	add	r6,r6,r3
  80e9b0:	30800223 	ldbuio	r2,8(r6)
  80e9b4:	40800245 	stb	r2,9(r8)
  80e9b8:	d0e75d17 	ldw	r3,-25228(gp)
  80e9bc:	18800a17 	ldw	r2,40(r3)
  80e9c0:	288b883a 	add	r5,r5,r2
  80e9c4:	28c00223 	ldbuio	r3,8(r5)
  80e9c8:	40c00285 	stb	r3,10(r8)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  80e9cc:	d1275d17 	ldw	r4,-25228(gp)
  80e9d0:	20800a17 	ldw	r2,40(r4)
  80e9d4:	4885883a 	add	r2,r9,r2
  80e9d8:	10c002e3 	ldbuio	r3,11(r2)
  80e9dc:	40c002c5 	stb	r3,11(r8)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  80e9e0:	d1275d17 	ldw	r4,-25228(gp)
  80e9e4:	20800a17 	ldw	r2,40(r4)
  80e9e8:	4885883a 	add	r2,r9,r2
  80e9ec:	10c003ab 	ldhuio	r3,14(r2)
  80e9f0:	40c0030d 	sth	r3,12(r8)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  80e9f4:	1100042b 	ldhuio	r4,16(r2)
  80e9f8:	4100038d 	sth	r4,14(r8)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  80e9fc:	10c004ab 	ldhuio	r3,18(r2)
  80ea00:	40c0040d 	sth	r3,16(r8)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  80ea04:	110005ab 	ldhuio	r4,22(r2)
  80ea08:	4100048d 	sth	r4,18(r8)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  80ea0c:	10c0062b 	ldhuio	r3,24(r2)
  80ea10:	40c0050d 	sth	r3,20(r8)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  80ea14:	110006ab 	ldhuio	r4,26(r2)
  80ea18:	4100058d 	sth	r4,22(r8)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80ea1c:	10c00737 	ldwio	r3,28(r2)
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80ea20:	00800044 	movi	r2,1
  80ea24:	42400c0d 	sth	r9,48(r8)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80ea28:	40c00615 	stw	r3,24(r8)
		record->file_record_cluster = cluster_index;
  80ea2c:	42800a15 	stw	r10,40(r8)
		record->file_record_sector_in_cluster = sector_in_cluster;
  80ea30:	41c00b15 	stw	r7,44(r8)
  80ea34:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80ea38:	d0e75317 	ldw	r3,-25268(gp)
  80ea3c:	00800044 	movi	r2,1
  80ea40:	18800226 	beq	r3,r2,80ea4c <Read_File_Record_At_Offset+0x1a8>
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80ea44:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  80ea48:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ea4c:	00802074 	movhi	r2,129
  80ea50:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80ea54:	00c02074 	movhi	r3,129
  80ea58:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ea5c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ea60:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ea64:	d0275415 	stw	zero,-25264(gp)
  80ea68:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ea6c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ea70:	183fff15 	stw	zero,-4(r3)
  80ea74:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ea78:	18bffc1e 	bne	r3,r2,80ea6c <Read_File_Record_At_Offset+0x1c8>
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80ea7c:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  80ea80:	f800283a 	ret

0080ea84 <Write_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ea84:	d0a75d17 	ldw	r2,-25228(gp)
  80ea88:	10000426 	beq	r2,zero,80ea9c <Write_Sector_Data+0x18>
  80ea8c:	d0e75517 	ldw	r3,-25260(gp)
  80ea90:	1880002b 	ldhuio	r2,0(r3)
  80ea94:	1080008c 	andi	r2,r2,2
  80ea98:	1000131e 	bne	r2,zero,80eae8 <Write_Sector_Data+0x64>
    {
        result = true;
    }
	else if (initialized == true)
  80ea9c:	d0e75317 	ldw	r3,-25268(gp)
  80eaa0:	00800044 	movi	r2,1
  80eaa4:	18800226 	beq	r3,r2,80eab0 <Write_Sector_Data+0x2c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80eaa8:	0005883a 	mov	r2,zero
        }
    }
    return result;
}
  80eaac:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eab0:	00802074 	movhi	r2,129
  80eab4:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80eab8:	00c02074 	movhi	r3,129
  80eabc:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eac0:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80eac4:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80eac8:	d0275415 	stw	zero,-25264(gp)
  80eacc:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ead0:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ead4:	183fff15 	stw	zero,-4(r3)
  80ead8:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80eadc:	18bffc1e 	bne	r3,r2,80ead0 <Write_Sector_Data+0x4c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80eae0:	0005883a 	mov	r2,zero
        }
    }
    return result;
}
  80eae4:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80eae8:	214b883a 	add	r5,r4,r5
  80eaec:	2806927a 	slli	r3,r5,9
  80eaf0:	d0a75917 	ldw	r2,-25244(gp)
  80eaf4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80eaf8:	d0a75817 	ldw	r2,-25248(gp)
  80eafc:	01000604 	movi	r4,24
  80eb00:	1100002d 	sthio	r4,0(r2)
  80eb04:	d1275517 	ldw	r4,-25260(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80eb08:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80eb0c:	10bfffcc 	andi	r2,r2,65535
  80eb10:	10c0010c 	andi	r3,r2,4
  80eb14:	183ffc1e 	bne	r3,zero,80eb08 <Write_Sector_Data+0x84>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80eb18:	1080040c 	andi	r2,r2,16
  80eb1c:	103fe21e 	bne	r2,zero,80eaa8 <Write_Sector_Data+0x24>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80eb20:	00800044 	movi	r2,1
  80eb24:	d1675f15 	stw	r5,-25220(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80eb28:	d0275e15 	stw	zero,-25224(gp)
  80eb2c:	f800283a 	ret

0080eb30 <Read_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80eb30:	d0a75d17 	ldw	r2,-25228(gp)
}


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  80eb34:	200d883a 	mov	r6,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80eb38:	10000f26 	beq	r2,zero,80eb78 <Read_Sector_Data+0x48>
  80eb3c:	d0e75517 	ldw	r3,-25260(gp)
  80eb40:	1880002b 	ldhuio	r2,0(r3)
  80eb44:	1080008c 	andi	r2,r2,2
  80eb48:	10000b26 	beq	r2,zero,80eb78 <Read_Sector_Data+0x48>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  80eb4c:	d0a75e17 	ldw	r2,-25224(gp)
  80eb50:	10002926 	beq	r2,zero,80ebf8 <Read_Sector_Data+0xc8>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  80eb54:	d1e75f17 	ldw	r7,-25220(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80eb58:	1880002b 	ldhuio	r2,0(r3)
  80eb5c:	1080008c 	andi	r2,r2,2
  80eb60:	1000161e 	bne	r2,zero,80ebbc <Read_Sector_Data+0x8c>
    {
        result = true;
    }
	else if (initialized == true)
  80eb64:	d0e75317 	ldw	r3,-25268(gp)
  80eb68:	00800044 	movi	r2,1
  80eb6c:	18803426 	beq	r3,r2,80ec40 <Read_Sector_Data+0x110>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80eb70:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  80eb74:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80eb78:	d0e75317 	ldw	r3,-25268(gp)
  80eb7c:	00800044 	movi	r2,1
  80eb80:	18bffb1e 	bne	r3,r2,80eb70 <Read_Sector_Data+0x40>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eb84:	00802074 	movhi	r2,129
  80eb88:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80eb8c:	00c02074 	movhi	r3,129
  80eb90:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eb94:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80eb98:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80eb9c:	d0275415 	stw	zero,-25264(gp)
  80eba0:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80eba4:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80eba8:	183fff15 	stw	zero,-4(r3)
  80ebac:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ebb0:	18bffc1e 	bne	r3,r2,80eba4 <Read_Sector_Data+0x74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ebb4:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  80ebb8:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80ebbc:	3806927a 	slli	r3,r7,9
  80ebc0:	d0a75917 	ldw	r2,-25244(gp)
  80ebc4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80ebc8:	d0a75817 	ldw	r2,-25248(gp)
  80ebcc:	01000604 	movi	r4,24
  80ebd0:	1100002d 	sthio	r4,0(r2)
  80ebd4:	d1275517 	ldw	r4,-25260(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80ebd8:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80ebdc:	10bfffcc 	andi	r2,r2,65535
  80ebe0:	10c0010c 	andi	r3,r2,4
  80ebe4:	183ffc1e 	bne	r3,zero,80ebd8 <Read_Sector_Data+0xa8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80ebe8:	1080040c 	andi	r2,r2,16
  80ebec:	103fe01e 	bne	r2,zero,80eb70 <Read_Sector_Data+0x40>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ebf0:	d1e75f15 	stw	r7,-25220(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80ebf4:	d0275e15 	stw	zero,-25224(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80ebf8:	314b883a 	add	r5,r6,r5
  80ebfc:	2806927a 	slli	r3,r5,9
  80ec00:	d0a75917 	ldw	r2,-25244(gp)
  80ec04:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  80ec08:	d0a75817 	ldw	r2,-25248(gp)
  80ec0c:	01000444 	movi	r4,17
  80ec10:	1100002d 	sthio	r4,0(r2)
  80ec14:	d1275517 	ldw	r4,-25260(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80ec18:	2080002b 	ldhuio	r2,0(r4)
		} while ((reg_state & 0x04)!=0);
  80ec1c:	10bfffcc 	andi	r2,r2,65535
  80ec20:	10c0010c 	andi	r3,r2,4
  80ec24:	183ffc1e 	bne	r3,zero,80ec18 <Read_Sector_Data+0xe8>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  80ec28:	1080040c 	andi	r2,r2,16
  80ec2c:	103fd01e 	bne	r2,zero,80eb70 <Read_Sector_Data+0x40>
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ec30:	00800044 	movi	r2,1
  80ec34:	d1675f15 	stw	r5,-25220(gp)
		} while ((reg_state & 0x04)!=0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
  80ec38:	d0275e15 	stw	zero,-25224(gp)
  80ec3c:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ec40:	00802074 	movhi	r2,129
  80ec44:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80ec48:	00c02074 	movhi	r3,129
  80ec4c:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ec50:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ec54:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ec58:	d0275415 	stw	zero,-25264(gp)
  80ec5c:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ec60:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ec64:	183fff15 	stw	zero,-4(r3)
  80ec68:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ec6c:	18bffc1e 	bne	r3,r2,80ec60 <Read_Sector_Data+0x130>
  80ec70:	003fbf06 	br	80eb70 <Read_Sector_Data+0x40>

0080ec74 <alt_up_sd_card_fclose>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ec74:	d0a75d17 	ldw	r2,-25228(gp)
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  80ec78:	defffc04 	addi	sp,sp,-16
  80ec7c:	dfc00315 	stw	ra,12(sp)
  80ec80:	dc800215 	stw	r18,8(sp)
  80ec84:	dc400115 	stw	r17,4(sp)
  80ec88:	dc000015 	stw	r16,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ec8c:	10003026 	beq	r2,zero,80ed50 <alt_up_sd_card_fclose+0xdc>
  80ec90:	d0e75517 	ldw	r3,-25260(gp)
  80ec94:	1880002b 	ldhuio	r2,0(r3)
  80ec98:	1080008c 	andi	r2,r2,2
  80ec9c:	10002c26 	beq	r2,zero,80ed50 <alt_up_sd_card_fclose+0xdc>

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80eca0:	d0a75417 	ldw	r2,-25264(gp)
  80eca4:	10002d26 	beq	r2,zero,80ed5c <alt_up_sd_card_fclose+0xe8>
    {
        if (active_files[file_handle].in_use) 
  80eca8:	24bfffcc 	andi	r18,r4,65535
  80ecac:	94a0001c 	xori	r18,r18,32768
  80ecb0:	94a00004 	addi	r18,r18,-32768
  80ecb4:	902091ba 	slli	r16,r18,6
  80ecb8:	04402074 	movhi	r17,129
  80ecbc:	8c5d9704 	addi	r17,r17,30300
  80ecc0:	8449883a 	add	r4,r16,r17
  80ecc4:	20800f17 	ldw	r2,60(r4)
  80ecc8:	10002426 	beq	r2,zero,80ed5c <alt_up_sd_card_fclose+0xe8>
        {
			if (active_files[file_handle].modified)
  80eccc:	20800e17 	ldw	r2,56(r4)
  80ecd0:	10001526 	beq	r2,zero,80ed28 <alt_up_sd_card_fclose+0xb4>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0)
  80ecd4:	20c00a17 	ldw	r3,40(r4)
    {
        if (active_files[file_handle].in_use) 
        {
			if (active_files[file_handle].modified)
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  80ecd8:	21800b17 	ldw	r6,44(r4)
				if (active_files[file_handle].file_record_cluster == 0)
  80ecdc:	1800341e 	bne	r3,zero,80edb0 <alt_up_sd_card_fclose+0x13c>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  80ece0:	00802074 	movhi	r2,129
  80ece4:	109d8204 	addi	r2,r2,30216
  80ece8:	10c01317 	ldw	r3,76(r2)
  80ecec:	30c9883a 	add	r4,r6,r3
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  80ecf0:	d1675b17 	ldw	r5,-25236(gp)
  80ecf4:	080eb300 	call	80eb30 <Read_Sector_Data>
  80ecf8:	10000b26 	beq	r2,zero,80ed28 <alt_up_sd_card_fclose+0xb4>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  80ecfc:	900a91ba 	slli	r5,r18,6
  80ed00:	8445883a 	add	r2,r16,r17
  80ed04:	11000c0f 	ldh	r4,48(r2)
  80ed08:	2c4b883a 	add	r5,r5,r17
  80ed0c:	080e6800 	call	80e680 <Write_File_Record_At_Offset>
  80ed10:	10000526 	beq	r2,zero,80ed28 <alt_up_sd_card_fclose+0xb4>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80ed14:	d0a75e17 	ldw	r2,-25224(gp)
  80ed18:	10000326 	beq	r2,zero,80ed28 <alt_up_sd_card_fclose+0xb4>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80ed1c:	d1275f17 	ldw	r4,-25220(gp)
  80ed20:	000b883a 	mov	r5,zero
  80ed24:	080ea840 	call	80ea84 <Write_Sector_Data>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  80ed28:	8445883a 	add	r2,r16,r17
  80ed2c:	00c00044 	movi	r3,1
  80ed30:	10000f15 	stw	zero,60(r2)
			result = true;
        }
    }
    
    return result;
}
  80ed34:	1805883a 	mov	r2,r3
  80ed38:	dfc00317 	ldw	ra,12(sp)
  80ed3c:	dc800217 	ldw	r18,8(sp)
  80ed40:	dc400117 	ldw	r17,4(sp)
  80ed44:	dc000017 	ldw	r16,0(sp)
  80ed48:	dec00404 	addi	sp,sp,16
  80ed4c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80ed50:	d0e75317 	ldw	r3,-25268(gp)
  80ed54:	00800044 	movi	r2,1
  80ed58:	18800826 	beq	r3,r2,80ed7c <alt_up_sd_card_fclose+0x108>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  80ed5c:	0007883a 	mov	r3,zero
			result = true;
        }
    }
    
    return result;
}
  80ed60:	1805883a 	mov	r2,r3
  80ed64:	dfc00317 	ldw	ra,12(sp)
  80ed68:	dc800217 	ldw	r18,8(sp)
  80ed6c:	dc400117 	ldw	r17,4(sp)
  80ed70:	dc000017 	ldw	r16,0(sp)
  80ed74:	dec00404 	addi	sp,sp,16
  80ed78:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ed7c:	00802074 	movhi	r2,129
  80ed80:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80ed84:	00c02074 	movhi	r3,129
  80ed88:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ed8c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ed90:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ed94:	d0275415 	stw	zero,-25264(gp)
  80ed98:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ed9c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80eda0:	183fff15 	stw	zero,-4(r3)
  80eda4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80eda8:	18bffc1e 	bne	r3,r2,80ed9c <alt_up_sd_card_fclose+0x128>
  80edac:	003feb06 	br	80ed5c <alt_up_sd_card_fclose+0xe8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  80edb0:	01002074 	movhi	r4,129
  80edb4:	211d8204 	addi	r4,r4,30216
  80edb8:	21400383 	ldbu	r5,14(r4)
  80edbc:	20801417 	ldw	r2,80(r4)
  80edc0:	18ffff84 	addi	r3,r3,-2
  80edc4:	1947383a 	mul	r3,r3,r5
  80edc8:	3085883a 	add	r2,r6,r2
  80edcc:	10c9883a 	add	r4,r2,r3
  80edd0:	003fc706 	br	80ecf0 <alt_up_sd_card_fclose+0x7c>

0080edd4 <find_first_empty_record_in_root_directory>:
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80edd4:	defffc04 	addi	sp,sp,-16
  80edd8:	dc400115 	stw	r17,4(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80eddc:	04402074 	movhi	r17,129
  80ede0:	8c5d8204 	addi	r17,r17,30216
  80ede4:	8880050b 	ldhu	r2,20(r17)
  80ede8:	88c0030b 	ldhu	r3,12(r17)
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80edec:	dc800215 	stw	r18,8(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80edf0:	1004917a 	slli	r2,r2,5
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80edf4:	dfc00315 	stw	ra,12(sp)
  80edf8:	dc000015 	stw	r16,0(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80edfc:	10e5283a 	div	r18,r2,r3
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80ee00:	90001726 	beq	r18,zero,80ee60 <find_first_empty_record_in_root_directory+0x8c>
  80ee04:	0021883a 	mov	r16,zero
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80ee08:	89001317 	ldw	r4,76(r17)
  80ee0c:	d1675b17 	ldw	r5,-25236(gp)
  80ee10:	8109883a 	add	r4,r16,r4
  80ee14:	080eb300 	call	80eb30 <Read_Sector_Data>
  80ee18:	10001126 	beq	r2,zero,80ee60 <find_first_empty_record_in_root_directory+0x8c>
  80ee1c:	d0a75d17 	ldw	r2,-25228(gp)
  80ee20:	8012913a 	slli	r9,r16,4
                }
            }
        }
        else
        {
            break;
  80ee24:	000b883a 	mov	r5,zero
  80ee28:	11800a17 	ldw	r6,40(r2)
  80ee2c:	0009883a 	mov	r4,zero
  80ee30:	02003944 	movi	r8,229
  80ee34:	01c00404 	movi	r7,16
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  80ee38:	2185883a 	add	r2,r4,r6
  80ee3c:	10c00023 	ldbuio	r3,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80ee40:	18c03fcc 	andi	r3,r3,255
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  80ee44:	21000804 	addi	r4,r4,32
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80ee48:	1a000726 	beq	r3,r8,80ee68 <find_first_empty_record_in_root_directory+0x94>
  80ee4c:	18000626 	beq	r3,zero,80ee68 <find_first_empty_record_in_root_directory+0x94>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  80ee50:	29400044 	addi	r5,r5,1
  80ee54:	29fff81e 	bne	r5,r7,80ee38 <find_first_empty_record_in_root_directory+0x64>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80ee58:	84000044 	addi	r16,r16,1
  80ee5c:	943fea1e 	bne	r18,r16,80ee08 <find_first_empty_record_in_root_directory+0x34>
  80ee60:	00bfffc4 	movi	r2,-1
  80ee64:	00000206 	br	80ee70 <find_first_empty_record_in_root_directory+0x9c>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
  80ee68:	4945883a 	add	r2,r9,r5
  80ee6c:	1004943a 	slli	r2,r2,16
        {
            break;
        }
    }
    return result;
}
  80ee70:	dfc00317 	ldw	ra,12(sp)
  80ee74:	dc800217 	ldw	r18,8(sp)
  80ee78:	dc400117 	ldw	r17,4(sp)
  80ee7c:	dc000017 	ldw	r16,0(sp)
  80ee80:	dec00404 	addi	sp,sp,16
  80ee84:	f800283a 	ret

0080ee88 <find_first_empty_cluster>:
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80ee88:	defffa04 	addi	sp,sp,-24
  80ee8c:	dcc00315 	stw	r19,12(sp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80ee90:	04c02074 	movhi	r19,129
  80ee94:	9cdd8204 	addi	r19,r19,30216
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80ee98:	dc800215 	stw	r18,8(sp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80ee9c:	98801217 	ldw	r2,72(r19)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80eea0:	9c801117 	ldw	r18,68(r19)
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80eea4:	dd000415 	stw	r20,16(sp)
  80eea8:	dfc00515 	stw	ra,20(sp)
  80eeac:	dc400115 	stw	r17,4(sp)
  80eeb0:	dc000015 	stw	r16,0(sp)
  80eeb4:	2029883a 	mov	r20,r4
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80eeb8:	90801926 	beq	r18,r2,80ef20 <find_first_empty_cluster+0x98>
  80eebc:	04400084 	movi	r17,2
  80eec0:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  80eec4:	d1675b17 	ldw	r5,-25236(gp)
  80eec8:	9009883a 	mov	r4,r18
  80eecc:	080eb300 	call	80eb30 <Read_Sector_Data>
  80eed0:	10001c26 	beq	r2,zero,80ef44 <find_first_empty_cluster+0xbc>
  80eed4:	d0a75d17 	ldw	r2,-25228(gp)
  80eed8:	88c03fcc 	andi	r3,r17,255
  80eedc:	11000a17 	ldw	r4,40(r2)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80eee0:	18c5883a 	add	r2,r3,r3
  80eee4:	1105883a 	add	r2,r2,r4
  80eee8:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  80eeec:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80eef0:	1821883a 	mov	r16,r3
                if (cluster == 0)
  80eef4:	10001726 	beq	r2,zero,80ef54 <find_first_empty_cluster+0xcc>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  80eef8:	8c400044 	addi	r17,r17,1
                } 
            } while ((cluster_index % 256) != 0);
  80eefc:	88c03fcc 	andi	r3,r17,255
  80ef00:	183ff71e 	bne	r3,zero,80eee0 <find_first_empty_cluster+0x58>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80ef04:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  80ef08:	94800044 	addi	r18,r18,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80ef0c:	14bfed1e 	bne	r2,r18,80eec4 <find_first_empty_cluster+0x3c>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  80ef10:	80bfffcc 	andi	r2,r16,65535
  80ef14:	10a0001c 	xori	r2,r2,32768
  80ef18:	10a00004 	addi	r2,r2,-32768
  80ef1c:	10000d26 	beq	r2,zero,80ef54 <find_first_empty_cluster+0xcc>
    {
        *cluster_number = cluster_index;
  80ef20:	0005883a 	mov	r2,zero
		result = true;
    }
    return result;
}
  80ef24:	dfc00517 	ldw	ra,20(sp)
  80ef28:	dd000417 	ldw	r20,16(sp)
  80ef2c:	dcc00317 	ldw	r19,12(sp)
  80ef30:	dc800217 	ldw	r18,8(sp)
  80ef34:	dc400117 	ldw	r17,4(sp)
  80ef38:	dc000017 	ldw	r16,0(sp)
  80ef3c:	dec00604 	addi	sp,sp,24
  80ef40:	f800283a 	ret
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  80ef44:	80bfffcc 	andi	r2,r16,65535
  80ef48:	10a0001c 	xori	r2,r2,32768
  80ef4c:	10a00004 	addi	r2,r2,-32768
  80ef50:	103fec1e 	bne	r2,zero,80ef04 <find_first_empty_cluster+0x7c>
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
  80ef54:	00800044 	movi	r2,1
  80ef58:	a4400015 	stw	r17,0(r20)
		result = true;
    }
    return result;
}
  80ef5c:	dfc00517 	ldw	ra,20(sp)
  80ef60:	dd000417 	ldw	r20,16(sp)
  80ef64:	dcc00317 	ldw	r19,12(sp)
  80ef68:	dc800217 	ldw	r18,8(sp)
  80ef6c:	dc400117 	ldw	r17,4(sp)
  80ef70:	dc000017 	ldw	r16,0(sp)
  80ef74:	dec00604 	addi	sp,sp,24
  80ef78:	f800283a 	ret

0080ef7c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80ef7c:	deffff04 	addi	sp,sp,-4
  80ef80:	200b883a 	mov	r5,r4
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80ef84:	0009883a 	mov	r4,zero
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80ef88:	dfc00015 	stw	ra,0(sp)
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80ef8c:	080eb300 	call	80eb30 <Read_Sector_Data>
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80ef90:	d2675d17 	ldw	r9,-25228(gp)
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80ef94:	1009883a 	mov	r4,r2
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80ef98:	49400a17 	ldw	r5,40(r9)
  80ef9c:	28807fab 	ldhuio	r2,510(r5)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80efa0:	00ea9554 	movui	r3,43605
  80efa4:	10bfffcc 	andi	r2,r2,65535
  80efa8:	10c00526 	beq	r2,r3,80efc0 <Check_for_DOS_FAT+0x44>
  80efac:	0009883a 	mov	r4,zero
    else
    {
        result = false;
    }
	return result;
}
  80efb0:	2005883a 	mov	r2,r4
  80efb4:	dfc00017 	ldw	ra,0(sp)
  80efb8:	dec00104 	addi	sp,sp,4
  80efbc:	f800283a 	ret
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80efc0:	203ffb26 	beq	r4,zero,80efb0 <Check_for_DOS_FAT+0x34>
	{
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  80efc4:	28c00023 	ldbuio	r3,0(r5)
  80efc8:	02802074 	movhi	r10,129
  80efcc:	529d8204 	addi	r10,r10,30216
  80efd0:	50c00005 	stb	r3,0(r10)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  80efd4:	48800a17 	ldw	r2,40(r9)
  80efd8:	10c00063 	ldbuio	r3,1(r2)
  80efdc:	50c00045 	stb	r3,1(r10)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  80efe0:	48800a17 	ldw	r2,40(r9)
  80efe4:	10c000a3 	ldbuio	r3,2(r2)
  80efe8:	50c00085 	stb	r3,2(r10)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  80efec:	48800a17 	ldw	r2,40(r9)
  80eff0:	10c000e3 	ldbuio	r3,3(r2)
  80eff4:	50c000c5 	stb	r3,3(r10)
  80eff8:	48800a17 	ldw	r2,40(r9)
  80effc:	10c00123 	ldbuio	r3,4(r2)
  80f000:	50c00105 	stb	r3,4(r10)
  80f004:	48800a17 	ldw	r2,40(r9)
  80f008:	10c00163 	ldbuio	r3,5(r2)
  80f00c:	50c00145 	stb	r3,5(r10)
  80f010:	48800a17 	ldw	r2,40(r9)
  80f014:	10c001a3 	ldbuio	r3,6(r2)
  80f018:	50c00185 	stb	r3,6(r10)
  80f01c:	48800a17 	ldw	r2,40(r9)
  80f020:	10c001e3 	ldbuio	r3,7(r2)
  80f024:	50c001c5 	stb	r3,7(r10)
  80f028:	48800a17 	ldw	r2,40(r9)
  80f02c:	10c00223 	ldbuio	r3,8(r2)
  80f030:	50c00205 	stb	r3,8(r10)
  80f034:	48800a17 	ldw	r2,40(r9)
  80f038:	10c00263 	ldbuio	r3,9(r2)
  80f03c:	50c00245 	stb	r3,9(r10)
  80f040:	48800a17 	ldw	r2,40(r9)
  80f044:	10c002a3 	ldbuio	r3,10(r2)
  80f048:	50c00285 	stb	r3,10(r10)
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  80f04c:	49000a17 	ldw	r4,40(r9)
  80f050:	20800323 	ldbuio	r2,12(r4)
  80f054:	20c002e3 	ldbuio	r3,11(r4)
  80f058:	10803fcc 	andi	r2,r2,255
  80f05c:	1004923a 	slli	r2,r2,8
  80f060:	18c03fcc 	andi	r3,r3,255
  80f064:	18c0201c 	xori	r3,r3,128
  80f068:	18ffe004 	addi	r3,r3,-128
  80f06c:	10c4b03a 	or	r2,r2,r3
  80f070:	5080030d 	sth	r2,12(r10)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  80f074:	20c00363 	ldbuio	r3,13(r4)
  80f078:	50c00385 	stb	r3,14(r10)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  80f07c:	49000a17 	ldw	r4,40(r9)
  80f080:	208003ab 	ldhuio	r2,14(r4)
  80f084:	5080040d 	sth	r2,16(r10)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  80f088:	20c00423 	ldbuio	r3,16(r4)
  80f08c:	50c00485 	stb	r3,18(r10)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  80f090:	49000a17 	ldw	r4,40(r9)
  80f094:	208004a3 	ldbuio	r2,18(r4)
  80f098:	20c00463 	ldbuio	r3,17(r4)
  80f09c:	10803fcc 	andi	r2,r2,255
  80f0a0:	1004923a 	slli	r2,r2,8
  80f0a4:	18c03fcc 	andi	r3,r3,255
  80f0a8:	10c4b03a 	or	r2,r2,r3
  80f0ac:	5080050d 	sth	r2,20(r10)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  80f0b0:	21400523 	ldbuio	r5,20(r4)
  80f0b4:	208004e3 	ldbuio	r2,19(r4)
  80f0b8:	29403fcc 	andi	r5,r5,255
  80f0bc:	280a923a 	slli	r5,r5,8
  80f0c0:	10803fcc 	andi	r2,r2,255
  80f0c4:	288ab03a 	or	r5,r5,r2
  80f0c8:	5140058d 	sth	r5,22(r10)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  80f0cc:	20800563 	ldbuio	r2,21(r4)
  80f0d0:	50800605 	stb	r2,24(r10)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  80f0d4:	49000a17 	ldw	r4,40(r9)
  80f0d8:	208005ab 	ldhuio	r2,22(r4)
  80f0dc:	5080068d 	sth	r2,26(r10)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  80f0e0:	20c0062b 	ldhuio	r3,24(r4)
  80f0e4:	50c0070d 	sth	r3,28(r10)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  80f0e8:	208006ab 	ldhuio	r2,26(r4)
  80f0ec:	5080078d 	sth	r2,30(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  80f0f0:	20c00737 	ldwio	r3,28(r4)
  80f0f4:	50c00815 	stw	r3,32(r10)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  80f0f8:	48800a17 	ldw	r2,40(r9)
  80f0fc:	12c00837 	ldwio	r11,32(r2)
  80f100:	52c00915 	stw	r11,36(r10)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  80f104:	48800a17 	ldw	r2,40(r9)
  80f108:	10c00923 	ldbuio	r3,36(r2)
  80f10c:	50c00a05 	stb	r3,40(r10)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  80f110:	48800a17 	ldw	r2,40(r9)
  80f114:	10c00963 	ldbuio	r3,37(r2)
  80f118:	50c00a45 	stb	r3,41(r10)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80f11c:	49000a17 	ldw	r4,40(r9)
  80f120:	220009a3 	ldbuio	r8,38(r4)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f124:	5080050b 	ldhu	r2,20(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80f128:	51c0040b 	ldhu	r7,16(r10)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f12c:	50c0068b 	ldhu	r3,26(r10)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f130:	1004917a 	slli	r2,r2,5
  80f134:	5100030b 	ldhu	r4,12(r10)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f138:	38cd883a 	add	r6,r7,r3
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  80f13c:	30c7883a 	add	r3,r6,r3
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f140:	1105283a 	div	r2,r2,r4
  80f144:	1885883a 	add	r2,r3,r2
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80f148:	297fffcc 	andi	r5,r5,65535
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80f14c:	52000a85 	stb	r8,42(r10)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f150:	50801415 	stw	r2,80(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80f154:	51c01115 	stw	r7,68(r10)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f158:	51801215 	stw	r6,72(r10)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  80f15c:	50c01315 	stw	r3,76(r10)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80f160:	28005626 	beq	r5,zero,80f2bc <Check_for_DOS_FAT+0x340>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  80f164:	50800383 	ldbu	r2,14(r10)
  80f168:	288b283a 	div	r5,r5,r2
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087)
  80f16c:	0083fd84 	movi	r2,4086
  80f170:	11405616 	blt	r2,r5,80f2cc <Check_for_DOS_FAT+0x350>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  80f174:	00800304 	movi	r2,12
  80f178:	50801085 	stb	r2,66(r10)
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  80f17c:	48800a17 	ldw	r2,40(r9)
  80f180:	10c009e3 	ldbuio	r3,39(r2)
  80f184:	50c00ac5 	stb	r3,43(r10)
  80f188:	48800a17 	ldw	r2,40(r9)
  80f18c:	10c00a23 	ldbuio	r3,40(r2)
  80f190:	50c00b05 	stb	r3,44(r10)
  80f194:	48800a17 	ldw	r2,40(r9)
  80f198:	10c00a63 	ldbuio	r3,41(r2)
  80f19c:	50c00b45 	stb	r3,45(r10)
  80f1a0:	48800a17 	ldw	r2,40(r9)
  80f1a4:	10c00aa3 	ldbuio	r3,42(r2)
  80f1a8:	50c00b85 	stb	r3,46(r10)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  80f1ac:	48800a17 	ldw	r2,40(r9)
  80f1b0:	10c00ae3 	ldbuio	r3,43(r2)
  80f1b4:	50c00bc5 	stb	r3,47(r10)
  80f1b8:	48800a17 	ldw	r2,40(r9)
  80f1bc:	10c00b23 	ldbuio	r3,44(r2)
  80f1c0:	50c00c05 	stb	r3,48(r10)
  80f1c4:	48800a17 	ldw	r2,40(r9)
  80f1c8:	10c00b63 	ldbuio	r3,45(r2)
  80f1cc:	50c00c45 	stb	r3,49(r10)
  80f1d0:	48800a17 	ldw	r2,40(r9)
  80f1d4:	10c00ba3 	ldbuio	r3,46(r2)
  80f1d8:	50c00c85 	stb	r3,50(r10)
  80f1dc:	48800a17 	ldw	r2,40(r9)
  80f1e0:	10c00be3 	ldbuio	r3,47(r2)
  80f1e4:	50c00cc5 	stb	r3,51(r10)
  80f1e8:	48800a17 	ldw	r2,40(r9)
  80f1ec:	10c00c23 	ldbuio	r3,48(r2)
  80f1f0:	50c00d05 	stb	r3,52(r10)
  80f1f4:	48800a17 	ldw	r2,40(r9)
  80f1f8:	10c00c63 	ldbuio	r3,49(r2)
  80f1fc:	50c00d45 	stb	r3,53(r10)
  80f200:	48800a17 	ldw	r2,40(r9)
  80f204:	10c00ca3 	ldbuio	r3,50(r2)
  80f208:	50c00d85 	stb	r3,54(r10)
  80f20c:	48800a17 	ldw	r2,40(r9)
  80f210:	10c00ce3 	ldbuio	r3,51(r2)
  80f214:	50c00dc5 	stb	r3,55(r10)
  80f218:	48800a17 	ldw	r2,40(r9)
  80f21c:	10c00d23 	ldbuio	r3,52(r2)
  80f220:	50c00e05 	stb	r3,56(r10)
  80f224:	48800a17 	ldw	r2,40(r9)
  80f228:	10c00d63 	ldbuio	r3,53(r2)
  80f22c:	50c00e45 	stb	r3,57(r10)
		}    
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  80f230:	48800a17 	ldw	r2,40(r9)
  80f234:	10c00da3 	ldbuio	r3,54(r2)
  80f238:	50c00e85 	stb	r3,58(r10)
  80f23c:	48800a17 	ldw	r2,40(r9)
  80f240:	10c00de3 	ldbuio	r3,55(r2)
  80f244:	50c00ec5 	stb	r3,59(r10)
  80f248:	48800a17 	ldw	r2,40(r9)
  80f24c:	10c00e23 	ldbuio	r3,56(r2)
  80f250:	50c00f05 	stb	r3,60(r10)
  80f254:	48800a17 	ldw	r2,40(r9)
  80f258:	10c00e63 	ldbuio	r3,57(r2)
  80f25c:	50c00f45 	stb	r3,61(r10)
  80f260:	48800a17 	ldw	r2,40(r9)
  80f264:	10c00ea3 	ldbuio	r3,58(r2)
  80f268:	50c00f85 	stb	r3,62(r10)
  80f26c:	48800a17 	ldw	r2,40(r9)
  80f270:	10c00ee3 	ldbuio	r3,59(r2)
  80f274:	50c00fc5 	stb	r3,63(r10)
  80f278:	48800a17 	ldw	r2,40(r9)
  80f27c:	10c00f23 	ldbuio	r3,60(r2)
  80f280:	50c01005 	stb	r3,64(r10)
  80f284:	48800a17 	ldw	r2,40(r9)
  80f288:	10c00f63 	ldbuio	r3,61(r2)
  80f28c:	00802074 	movhi	r2,129
  80f290:	109da604 	addi	r2,r2,30360
  80f294:	50c01045 	stb	r3,65(r10)
  80f298:	10c14004 	addi	r3,r2,1280
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
		{
			active_files[counter].in_use = false;
  80f29c:	10000015 	stw	zero,0(r2)
  80f2a0:	10801004 	addi	r2,r2,64
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  80f2a4:	10fffd1e 	bne	r2,r3,80f29c <Check_for_DOS_FAT+0x320>
  80f2a8:	01000044 	movi	r4,1
    else
    {
        result = false;
    }
	return result;
}
  80f2ac:	2005883a 	mov	r2,r4
  80f2b0:	dfc00017 	ldw	ra,0(sp)
  80f2b4:	dec00104 	addi	sp,sp,4
  80f2b8:	f800283a 	ret
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  80f2bc:	50800383 	ldbu	r2,14(r10)
  80f2c0:	588b203a 	divu	r5,r11,r2
		}
		if (num_clusters < 4087)
  80f2c4:	0083fd84 	movi	r2,4086
  80f2c8:	117faa0e 	bge	r2,r5,80f174 <Check_for_DOS_FAT+0x1f8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
		}
		else if (num_clusters <= 65517)
  80f2cc:	00bffb54 	movui	r2,65517
  80f2d0:	11400316 	blt	r2,r5,80f2e0 <Check_for_DOS_FAT+0x364>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  80f2d4:	00800404 	movi	r2,16
  80f2d8:	50801085 	stb	r2,66(r10)
  80f2dc:	003fa706 	br	80f17c <Check_for_DOS_FAT+0x200>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  80f2e0:	00800804 	movi	r2,32
  80f2e4:	50801085 	stb	r2,66(r10)
  80f2e8:	003fa406 	br	80f17c <Check_for_DOS_FAT+0x200>

0080f2ec <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80f2ec:	deffff04 	addi	sp,sp,-4
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80f2f0:	0009883a 	mov	r4,zero
  80f2f4:	000b883a 	mov	r5,zero

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80f2f8:	dfc00015 	stw	ra,0(sp)
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80f2fc:	080eb300 	call	80eb30 <Read_Sector_Data>
  80f300:	1000041e 	bne	r2,zero,80f314 <Check_for_Master_Boot_Record+0x28>
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
						break;
  80f304:	0005883a 	mov	r2,zero
			}
		}
	}

	return result;
}
  80f308:	dfc00017 	ldw	ra,0(sp)
  80f30c:	dec00104 	addi	sp,sp,4
  80f310:	f800283a 	ret
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  80f314:	d1a75d17 	ldw	r6,-25228(gp)
  80f318:	31000a17 	ldw	r4,40(r6)
  80f31c:	20807fab 	ldhuio	r2,510(r4)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  80f320:	00ea9554 	movui	r3,43605
  80f324:	10bfffcc 	andi	r2,r2,65535
  80f328:	10fff61e 	bne	r2,r3,80f304 <Check_for_Master_Boot_Record+0x18>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f32c:	208070a3 	ldbuio	r2,450(r4)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f330:	00c00044 	movi	r3,1
  80f334:	11003fcc 	andi	r4,r2,255
  80f338:	20c03726 	beq	r4,r3,80f418 <Check_for_Master_Boot_Record+0x12c>
  80f33c:	00800104 	movi	r2,4
  80f340:	20803526 	beq	r4,r2,80f418 <Check_for_Master_Boot_Record+0x12c>
  80f344:	00800184 	movi	r2,6
  80f348:	20803326 	beq	r4,r2,80f418 <Check_for_Master_Boot_Record+0x12c>
  80f34c:	00800384 	movi	r2,14
  80f350:	20803126 	beq	r4,r2,80f418 <Check_for_Master_Boot_Record+0x12c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f354:	30800a17 	ldw	r2,40(r6)
  80f358:	10c074a3 	ldbuio	r3,466(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f35c:	00800044 	movi	r2,1
  80f360:	18c03fcc 	andi	r3,r3,255
  80f364:	18803926 	beq	r3,r2,80f44c <Check_for_Master_Boot_Record+0x160>
  80f368:	00800104 	movi	r2,4
  80f36c:	18803726 	beq	r3,r2,80f44c <Check_for_Master_Boot_Record+0x160>
  80f370:	00800184 	movi	r2,6
  80f374:	18803526 	beq	r3,r2,80f44c <Check_for_Master_Boot_Record+0x160>
  80f378:	00800384 	movi	r2,14
  80f37c:	18803326 	beq	r3,r2,80f44c <Check_for_Master_Boot_Record+0x160>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f380:	30800a17 	ldw	r2,40(r6)
  80f384:	10c078a3 	ldbuio	r3,482(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f388:	00800044 	movi	r2,1
  80f38c:	18c03fcc 	andi	r3,r3,255
  80f390:	18803b26 	beq	r3,r2,80f480 <Check_for_Master_Boot_Record+0x194>
  80f394:	00800104 	movi	r2,4
  80f398:	18803926 	beq	r3,r2,80f480 <Check_for_Master_Boot_Record+0x194>
  80f39c:	00800184 	movi	r2,6
  80f3a0:	18803726 	beq	r3,r2,80f480 <Check_for_Master_Boot_Record+0x194>
  80f3a4:	00800384 	movi	r2,14
  80f3a8:	18803526 	beq	r3,r2,80f480 <Check_for_Master_Boot_Record+0x194>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f3ac:	30800a17 	ldw	r2,40(r6)
  80f3b0:	10c07ca3 	ldbuio	r3,498(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f3b4:	00800044 	movi	r2,1
  80f3b8:	18c03fcc 	andi	r3,r3,255
  80f3bc:	18800626 	beq	r3,r2,80f3d8 <Check_for_Master_Boot_Record+0xec>
  80f3c0:	00800104 	movi	r2,4
  80f3c4:	18800426 	beq	r3,r2,80f3d8 <Check_for_Master_Boot_Record+0xec>
  80f3c8:	00800184 	movi	r2,6
  80f3cc:	18800226 	beq	r3,r2,80f3d8 <Check_for_Master_Boot_Record+0xec>
  80f3d0:	00800384 	movi	r2,14
  80f3d4:	18bfcb1e 	bne	r3,r2,80f304 <Check_for_Master_Boot_Record+0x18>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f3d8:	31400a17 	ldw	r5,40(r6)
  80f3dc:	28c07e2b 	ldhuio	r3,504(r5)
  80f3e0:	28807dab 	ldhuio	r2,502(r5)
  80f3e4:	1806943a 	slli	r3,r3,16
  80f3e8:	10bfffcc 	andi	r2,r2,65535
  80f3ec:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f3f0:	29007f2b 	ldhuio	r4,508(r5)
  80f3f4:	28807eab 	ldhuio	r2,506(r5)
  80f3f8:	2008943a 	slli	r4,r4,16
  80f3fc:	10bfffcc 	andi	r2,r2,65535
  80f400:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f404:	013fbf0e 	bge	zero,r4,80f304 <Check_for_Master_Boot_Record+0x18>
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
  80f408:	00800044 	movi	r2,1
		            
					// Check if the partition is valid
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
  80f40c:	d1275c15 	stw	r4,-25232(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  80f410:	d0e75b15 	stw	r3,-25236(gp)
  80f414:	003fbc06 	br	80f308 <Check_for_Master_Boot_Record+0x1c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f418:	31400a17 	ldw	r5,40(r6)
  80f41c:	28c0722b 	ldhuio	r3,456(r5)
  80f420:	288071ab 	ldhuio	r2,454(r5)
  80f424:	1806943a 	slli	r3,r3,16
  80f428:	10bfffcc 	andi	r2,r2,65535
  80f42c:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f430:	2900732b 	ldhuio	r4,460(r5)
  80f434:	288072ab 	ldhuio	r2,458(r5)
  80f438:	2008943a 	slli	r4,r4,16
  80f43c:	10bfffcc 	andi	r2,r2,65535
  80f440:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f444:	013fc30e 	bge	zero,r4,80f354 <Check_for_Master_Boot_Record+0x68>
  80f448:	003fef06 	br	80f408 <Check_for_Master_Boot_Record+0x11c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f44c:	31400a17 	ldw	r5,40(r6)
  80f450:	28c0762b 	ldhuio	r3,472(r5)
  80f454:	288075ab 	ldhuio	r2,470(r5)
  80f458:	1806943a 	slli	r3,r3,16
  80f45c:	10bfffcc 	andi	r2,r2,65535
  80f460:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f464:	2900772b 	ldhuio	r4,476(r5)
  80f468:	288076ab 	ldhuio	r2,474(r5)
  80f46c:	2008943a 	slli	r4,r4,16
  80f470:	10bfffcc 	andi	r2,r2,65535
  80f474:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f478:	013fc10e 	bge	zero,r4,80f380 <Check_for_Master_Boot_Record+0x94>
  80f47c:	003fe206 	br	80f408 <Check_for_Master_Boot_Record+0x11c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f480:	31400a17 	ldw	r5,40(r6)
  80f484:	28c07a2b 	ldhuio	r3,488(r5)
  80f488:	288079ab 	ldhuio	r2,486(r5)
  80f48c:	1806943a 	slli	r3,r3,16
  80f490:	10bfffcc 	andi	r2,r2,65535
  80f494:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f498:	29007b2b 	ldhuio	r4,492(r5)
  80f49c:	28807aab 	ldhuio	r2,490(r5)
  80f4a0:	2008943a 	slli	r4,r4,16
  80f4a4:	10bfffcc 	andi	r2,r2,65535
  80f4a8:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f4ac:	013fbf0e 	bge	zero,r4,80f3ac <Check_for_Master_Boot_Record+0xc0>
  80f4b0:	003fd506 	br	80f408 <Check_for_Master_Boot_Record+0x11c>

0080f4b4 <Look_for_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f4b4:	d0a75d17 	ldw	r2,-25228(gp)
}


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  80f4b8:	deffff04 	addi	sp,sp,-4
  80f4bc:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f4c0:	10001726 	beq	r2,zero,80f520 <Look_for_FAT16+0x6c>
  80f4c4:	d0e75517 	ldw	r3,-25260(gp)
  80f4c8:	1880002b 	ldhuio	r2,0(r3)
  80f4cc:	1080008c 	andi	r2,r2,2
  80f4d0:	10001326 	beq	r2,zero,80f520 <Look_for_FAT16+0x6c>
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f4d4:	d0a75717 	ldw	r2,-25252(gp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  80f4d8:	d0275b15 	stw	zero,-25236(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  80f4dc:	d0275c15 	stw	zero,-25232(gp)
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f4e0:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;              

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80f4e4:	10ffffcc 	andi	r3,r2,65535
  80f4e8:	18e0001c 	xori	r3,r3,32768
  80f4ec:	18e00004 	addi	r3,r3,-32768
  80f4f0:	18000616 	blt	r3,zero,80f50c <Look_for_FAT16+0x58>
  80f4f4:	10c3000c 	andi	r3,r2,3072
  80f4f8:	00830004 	movi	r2,3072
  80f4fc:	18800326 	beq	r3,r2,80f50c <Look_for_FAT16+0x58>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80f500:	00810004 	movi	r2,1024
  80f504:	18802526 	beq	r3,r2,80f59c <Look_for_FAT16+0xe8>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80f508:	18001526 	beq	r3,zero,80f560 <Look_for_FAT16+0xac>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f50c:	0009883a 	mov	r4,zero
				}
			}
		}
	}
	return result;
}
  80f510:	2005883a 	mov	r2,r4
  80f514:	dfc00017 	ldw	ra,0(sp)
  80f518:	dec00104 	addi	sp,sp,4
  80f51c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f520:	d0e75317 	ldw	r3,-25268(gp)
  80f524:	00800044 	movi	r2,1
  80f528:	18bff81e 	bne	r3,r2,80f50c <Look_for_FAT16+0x58>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f52c:	00802074 	movhi	r2,129
  80f530:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80f534:	00c02074 	movhi	r3,129
  80f538:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f53c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f540:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f544:	d0275415 	stw	zero,-25264(gp)
  80f548:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f54c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f550:	183fff15 	stw	zero,-4(r3)
  80f554:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f558:	18bffc1e 	bne	r3,r2,80f54c <Look_for_FAT16+0x98>
  80f55c:	003feb06 	br	80f50c <Look_for_FAT16+0x58>
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80f560:	080f2ec0 	call	80f2ec <Check_for_Master_Boot_Record>
  80f564:	103fe926 	beq	r2,zero,80f50c <Look_for_FAT16+0x58>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80f568:	d1275b17 	ldw	r4,-25236(gp)
  80f56c:	080ef7c0 	call	80ef7c <Check_for_DOS_FAT>
  80f570:	1009883a 	mov	r4,r2
				}                        
			}
			if (result == true)
  80f574:	00800044 	movi	r2,1
  80f578:	20bfe51e 	bne	r4,r2,80f510 <Look_for_FAT16+0x5c>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80f57c:	01402074 	movhi	r5,129
  80f580:	295d8204 	addi	r5,r5,30216
  80f584:	28c01083 	ldbu	r3,66(r5)
  80f588:	00800404 	movi	r2,16
  80f58c:	18bfdf1e 	bne	r3,r2,80f50c <Look_for_FAT16+0x58>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f590:	2880058b 	ldhu	r2,22(r5)
  80f594:	d0a75c15 	stw	r2,-25232(gp)
  80f598:	003fdd06 	br	80f510 <Look_for_FAT16+0x5c>
		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80f59c:	0009883a 	mov	r4,zero
  80f5a0:	080ef7c0 	call	80ef7c <Check_for_DOS_FAT>
  80f5a4:	1009883a 	mov	r4,r2
  80f5a8:	003ff206 	br	80f574 <Look_for_FAT16+0xc0>

0080f5ac <alt_up_sd_card_is_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f5ac:	d0a75d17 	ldw	r2,-25228(gp)
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  80f5b0:	deffff04 	addi	sp,sp,-4
  80f5b4:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f5b8:	10002626 	beq	r2,zero,80f654 <alt_up_sd_card_is_FAT16+0xa8>
  80f5bc:	d0e75517 	ldw	r3,-25260(gp)
  80f5c0:	1880002b 	ldhuio	r2,0(r3)
  80f5c4:	1080008c 	andi	r2,r2,2
  80f5c8:	10002226 	beq	r2,zero,80f654 <alt_up_sd_card_is_FAT16+0xa8>
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  80f5cc:	d0a75317 	ldw	r2,-25268(gp)
  80f5d0:	10002f1e 	bne	r2,zero,80f690 <alt_up_sd_card_is_FAT16+0xe4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f5d4:	1880002b 	ldhuio	r2,0(r3)
  80f5d8:	1080008c 	andi	r2,r2,2
  80f5dc:	10002626 	beq	r2,zero,80f678 <alt_up_sd_card_is_FAT16+0xcc>
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f5e0:	d0a75717 	ldw	r2,-25252(gp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  80f5e4:	d0275b15 	stw	zero,-25236(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  80f5e8:	d0275c15 	stw	zero,-25232(gp)
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f5ec:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;              

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80f5f0:	10ffffcc 	andi	r3,r2,65535
  80f5f4:	18e0001c 	xori	r3,r3,32768
  80f5f8:	18e00004 	addi	r3,r3,-32768
  80f5fc:	18001e16 	blt	r3,zero,80f678 <alt_up_sd_card_is_FAT16+0xcc>
  80f600:	10c3000c 	andi	r3,r2,3072
  80f604:	00830004 	movi	r2,3072
  80f608:	18801b26 	beq	r3,r2,80f678 <alt_up_sd_card_is_FAT16+0xcc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80f60c:	00810004 	movi	r2,1024
  80f610:	18803026 	beq	r3,r2,80f6d4 <alt_up_sd_card_is_FAT16+0x128>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80f614:	1800181e 	bne	r3,zero,80f678 <alt_up_sd_card_is_FAT16+0xcc>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80f618:	080f2ec0 	call	80f2ec <Check_for_Master_Boot_Record>
  80f61c:	10001626 	beq	r2,zero,80f678 <alt_up_sd_card_is_FAT16+0xcc>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80f620:	d1275b17 	ldw	r4,-25236(gp)
  80f624:	080ef7c0 	call	80ef7c <Check_for_DOS_FAT>
  80f628:	1009883a 	mov	r4,r2
				}                        
			}
			if (result == true)
  80f62c:	00800044 	movi	r2,1
  80f630:	2080121e 	bne	r4,r2,80f67c <alt_up_sd_card_is_FAT16+0xd0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80f634:	01402074 	movhi	r5,129
  80f638:	295d8204 	addi	r5,r5,30216
  80f63c:	28c01083 	ldbu	r3,66(r5)
  80f640:	00800404 	movi	r2,16
  80f644:	18800c1e 	bne	r3,r2,80f678 <alt_up_sd_card_is_FAT16+0xcc>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f648:	2880058b 	ldhu	r2,22(r5)
  80f64c:	d0a75c15 	stw	r2,-25232(gp)
  80f650:	00000a06 	br	80f67c <alt_up_sd_card_is_FAT16+0xd0>

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f654:	d0e75317 	ldw	r3,-25268(gp)
  80f658:	00800044 	movi	r2,1
  80f65c:	18801026 	beq	r3,r2,80f6a0 <alt_up_sd_card_is_FAT16+0xf4>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
  80f660:	0005883a 	mov	r2,zero
		result = is_sd_card_formated_as_FAT16;
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  80f664:	d0275315 	stw	zero,-25268(gp)
		is_sd_card_formated_as_FAT16 = false;
  80f668:	d0275415 	stw	zero,-25264(gp)
	}

	return result;
}
  80f66c:	dfc00017 	ldw	ra,0(sp)
  80f670:	dec00104 	addi	sp,sp,4
  80f674:	f800283a 	ret
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f678:	0009883a 	mov	r4,zero
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
  80f67c:	00802074 	movhi	r2,129
  80f680:	109d7d04 	addi	r2,r2,30196
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
  80f684:	d1275315 	stw	r4,-25268(gp)
			search_data.valid = false;
  80f688:	10000415 	stw	zero,16(r2)
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  80f68c:	d1275415 	stw	r4,-25264(gp)
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
		}
		result = is_sd_card_formated_as_FAT16;
  80f690:	d0a75417 	ldw	r2,-25264(gp)
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
  80f694:	dfc00017 	ldw	ra,0(sp)
  80f698:	dec00104 	addi	sp,sp,4
  80f69c:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f6a0:	00802074 	movhi	r2,129
  80f6a4:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80f6a8:	00c02074 	movhi	r3,129
  80f6ac:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f6b0:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f6b4:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f6b8:	d0275415 	stw	zero,-25264(gp)
  80f6bc:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f6c0:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f6c4:	183fff15 	stw	zero,-4(r3)
  80f6c8:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f6cc:	18bffc1e 	bne	r3,r2,80f6c0 <alt_up_sd_card_is_FAT16+0x114>
  80f6d0:	003fe306 	br	80f660 <alt_up_sd_card_is_FAT16+0xb4>
		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80f6d4:	0009883a 	mov	r4,zero
  80f6d8:	080ef7c0 	call	80ef7c <Check_for_DOS_FAT>
  80f6dc:	1009883a 	mov	r4,r2
  80f6e0:	003fd206 	br	80f62c <alt_up_sd_card_is_FAT16+0x80>

0080f6e4 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80f6e4:	2006d23a 	srli	r3,r4,8
  80f6e8:	d0a75b17 	ldw	r2,-25236(gp)
}


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  80f6ec:	defffd04 	addi	sp,sp,-12
  80f6f0:	dc400115 	stw	r17,4(sp)
  80f6f4:	dc000015 	stw	r16,0(sp)
  80f6f8:	dfc00215 	stw	ra,8(sp)
  80f6fc:	2021883a 	mov	r16,r4
  80f700:	2823883a 	mov	r17,r5
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80f704:	1889883a 	add	r4,r3,r2
    
    if (first_fat)
  80f708:	30001d26 	beq	r6,zero,80f780 <mark_cluster+0x9c>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80f70c:	00802074 	movhi	r2,129
  80f710:	109d8204 	addi	r2,r2,30216
  80f714:	10c01117 	ldw	r3,68(r2)
  80f718:	20c7883a 	add	r3,r4,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  80f71c:	d0a75f17 	ldw	r2,-25220(gp)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80f720:	1809883a 	mov	r4,r3
  80f724:	000b883a 	mov	r5,zero
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  80f728:	18800326 	beq	r3,r2,80f738 <mark_cluster+0x54>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80f72c:	080eb300 	call	80eb30 <Read_Sector_Data>
  80f730:	0007883a 	mov	r3,zero
  80f734:	10000c26 	beq	r2,zero,80f768 <mark_cluster+0x84>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  80f738:	d0e75d17 	ldw	r3,-25228(gp)
  80f73c:	80803fcc 	andi	r2,r16,255
  80f740:	897fffcc 	andi	r5,r17,65535
  80f744:	19000a17 	ldw	r4,40(r3)
  80f748:	2960001c 	xori	r5,r5,32768
  80f74c:	1085883a 	add	r2,r2,r2
  80f750:	29600004 	addi	r5,r5,-32768
  80f754:	1105883a 	add	r2,r2,r4
  80f758:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  80f75c:	00800044 	movi	r2,1
  80f760:	d0a75e15 	stw	r2,-25224(gp)
  80f764:	1007883a 	mov	r3,r2
    return true;
}
  80f768:	1805883a 	mov	r2,r3
  80f76c:	dfc00217 	ldw	ra,8(sp)
  80f770:	dc400117 	ldw	r17,4(sp)
  80f774:	dc000017 	ldw	r16,0(sp)
  80f778:	dec00304 	addi	sp,sp,12
  80f77c:	f800283a 	ret
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  80f780:	00802074 	movhi	r2,129
  80f784:	109d8204 	addi	r2,r2,30216
  80f788:	10c01217 	ldw	r3,72(r2)
  80f78c:	20c7883a 	add	r3,r4,r3
  80f790:	003fe206 	br	80f71c <mark_cluster+0x38>

0080f794 <get_cluster_flag>:
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80f794:	defffd04 	addi	sp,sp,-12
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80f798:	00802074 	movhi	r2,129
  80f79c:	109d8204 	addi	r2,r2,30216
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80f7a0:	dc000015 	stw	r16,0(sp)
  80f7a4:	2021883a 	mov	r16,r4
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80f7a8:	11001117 	ldw	r4,68(r2)
  80f7ac:	d0a75b17 	ldw	r2,-25236(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80f7b0:	8006d23a 	srli	r3,r16,8
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80f7b4:	dc400115 	stw	r17,4(sp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80f7b8:	1105883a 	add	r2,r2,r4
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80f7bc:	1887883a 	add	r3,r3,r2
     
    if (sector_index != current_sector_index)
  80f7c0:	d0a75f17 	ldw	r2,-25220(gp)
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80f7c4:	2823883a 	mov	r17,r5
  80f7c8:	dfc00215 	stw	ra,8(sp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80f7cc:	1809883a 	mov	r4,r3
  80f7d0:	000b883a 	mov	r5,zero
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  80f7d4:	18800326 	beq	r3,r2,80f7e4 <get_cluster_flag+0x50>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80f7d8:	080eb300 	call	80eb30 <Read_Sector_Data>
  80f7dc:	0009883a 	mov	r4,zero
  80f7e0:	10000826 	beq	r2,zero,80f804 <get_cluster_flag+0x70>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  80f7e4:	d0e75d17 	ldw	r3,-25228(gp)
  80f7e8:	80803fcc 	andi	r2,r16,255
  80f7ec:	1085883a 	add	r2,r2,r2
  80f7f0:	19000a17 	ldw	r4,40(r3)
  80f7f4:	1105883a 	add	r2,r2,r4
  80f7f8:	10c0002b 	ldhuio	r3,0(r2)
  80f7fc:	01000044 	movi	r4,1
  80f800:	88c0000d 	sth	r3,0(r17)
    return true;
}
  80f804:	2005883a 	mov	r2,r4
  80f808:	dfc00217 	ldw	ra,8(sp)
  80f80c:	dc400117 	ldw	r17,4(sp)
  80f810:	dc000017 	ldw	r16,0(sp)
  80f814:	dec00304 	addi	sp,sp,12
  80f818:	f800283a 	ret

0080f81c <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80f81c:	d0a75e17 	ldw	r2,-25224(gp)
  80f820:	10000c26 	beq	r2,zero,80f854 <Save_Modified_Sector+0x38>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f824:	d0a75d17 	ldw	r2,-25228(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80f828:	d1675f17 	ldw	r5,-25220(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f82c:	10000426 	beq	r2,zero,80f840 <Save_Modified_Sector+0x24>
  80f830:	d0e75517 	ldw	r3,-25260(gp)
  80f834:	1880002b 	ldhuio	r2,0(r3)
  80f838:	1080008c 	andi	r2,r2,2
  80f83c:	1000151e 	bne	r2,zero,80f894 <Save_Modified_Sector+0x78>
    {
        result = true;
    }
	else if (initialized == true)
  80f840:	d0e75317 	ldw	r3,-25268(gp)
  80f844:	00800044 	movi	r2,1
  80f848:	18800426 	beq	r3,r2,80f85c <Save_Modified_Sector+0x40>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f84c:	0005883a 	mov	r2,zero
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
}
  80f850:	f800283a 	ret

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80f854:	00800044 	movi	r2,1
  80f858:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f85c:	00802074 	movhi	r2,129
  80f860:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80f864:	00c02074 	movhi	r3,129
  80f868:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f86c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f870:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f874:	d0275415 	stw	zero,-25264(gp)
  80f878:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f87c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f880:	183fff15 	stw	zero,-4(r3)
  80f884:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f888:	18bffc1e 	bne	r3,r2,80f87c <Save_Modified_Sector+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f88c:	0005883a 	mov	r2,zero
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
}
  80f890:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80f894:	2806927a 	slli	r3,r5,9
  80f898:	d0a75917 	ldw	r2,-25244(gp)
  80f89c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80f8a0:	d0a75817 	ldw	r2,-25248(gp)
  80f8a4:	01000604 	movi	r4,24
  80f8a8:	1100002d 	sthio	r4,0(r2)
  80f8ac:	d1275517 	ldw	r4,-25260(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80f8b0:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80f8b4:	10bfffcc 	andi	r2,r2,65535
  80f8b8:	10c0010c 	andi	r3,r2,4
  80f8bc:	183ffc1e 	bne	r3,zero,80f8b0 <Save_Modified_Sector+0x94>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80f8c0:	1080040c 	andi	r2,r2,16
  80f8c4:	103fe11e 	bne	r2,zero,80f84c <Save_Modified_Sector+0x30>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f8c8:	00800044 	movi	r2,1
  80f8cc:	d1675f15 	stw	r5,-25220(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80f8d0:	d0275e15 	stw	zero,-25224(gp)
  80f8d4:	f800283a 	ret

0080f8d8 <alt_up_sd_card_find_next>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f8d8:	d0a75d17 	ldw	r2,-25228(gp)
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  80f8dc:	deffe404 	addi	sp,sp,-112
  80f8e0:	dd801815 	stw	r22,96(sp)
  80f8e4:	dfc01b15 	stw	ra,108(sp)
  80f8e8:	df001a15 	stw	fp,104(sp)
  80f8ec:	ddc01915 	stw	r23,100(sp)
  80f8f0:	dd401715 	stw	r21,92(sp)
  80f8f4:	dd001615 	stw	r20,88(sp)
  80f8f8:	dcc01515 	stw	r19,84(sp)
  80f8fc:	dc801415 	stw	r18,80(sp)
  80f900:	dc401315 	stw	r17,76(sp)
  80f904:	dc001215 	stw	r16,72(sp)
  80f908:	202d883a 	mov	r22,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f90c:	10001426 	beq	r2,zero,80f960 <alt_up_sd_card_find_next+0x88>
  80f910:	d0e75517 	ldw	r3,-25260(gp)
  80f914:	1880002b 	ldhuio	r2,0(r3)
  80f918:	1080008c 	andi	r2,r2,2
  80f91c:	10001026 	beq	r2,zero,80f960 <alt_up_sd_card_find_next+0x88>
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80f920:	d0a75417 	ldw	r2,-25264(gp)
  80f924:	10001e1e 	bne	r2,zero,80f9a0 <alt_up_sd_card_find_next+0xc8>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80f928:	01400084 	movi	r5,2
			// Call Find_First first.
			result = 3;
		}
	}
	return result;
}
  80f92c:	2805883a 	mov	r2,r5
  80f930:	dfc01b17 	ldw	ra,108(sp)
  80f934:	df001a17 	ldw	fp,104(sp)
  80f938:	ddc01917 	ldw	r23,100(sp)
  80f93c:	dd801817 	ldw	r22,96(sp)
  80f940:	dd401717 	ldw	r21,92(sp)
  80f944:	dd001617 	ldw	r20,88(sp)
  80f948:	dcc01517 	ldw	r19,84(sp)
  80f94c:	dc801417 	ldw	r18,80(sp)
  80f950:	dc401317 	ldw	r17,76(sp)
  80f954:	dc001217 	ldw	r16,72(sp)
  80f958:	dec01c04 	addi	sp,sp,112
  80f95c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f960:	d0e75317 	ldw	r3,-25268(gp)
  80f964:	00800044 	movi	r2,1
  80f968:	18bfef1e 	bne	r3,r2,80f928 <alt_up_sd_card_find_next+0x50>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f96c:	00802074 	movhi	r2,129
  80f970:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  80f974:	00c02074 	movhi	r3,129
  80f978:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f97c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f980:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f984:	d0275415 	stw	zero,-25264(gp)
  80f988:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f98c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f990:	183fff15 	stw	zero,-4(r3)
  80f994:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f998:	18bffc1e 	bne	r3,r2,80f98c <alt_up_sd_card_find_next+0xb4>
  80f99c:	003fe206 	br	80f928 <alt_up_sd_card_find_next+0x50>
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
  80f9a0:	05c02074 	movhi	r23,129
  80f9a4:	bddd7d04 	addi	r23,r23,30196
  80f9a8:	b8800417 	ldw	r2,16(r23)
  80f9ac:	1000021e 	bne	r2,zero,80f9b8 <alt_up_sd_card_find_next+0xe0>
  80f9b0:	014000c4 	movi	r5,3
  80f9b4:	003fdd06 	br	80f92c <alt_up_sd_card_find_next+0x54>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80f9b8:	b9800117 	ldw	r6,4(r23)

			if (cluster == 0)
  80f9bc:	30003e26 	beq	r6,zero,80fab8 <alt_up_sd_card_find_next+0x1e0>
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80f9c0:	b880030f 	ldh	r2,12(r23)
  80f9c4:	00c00084 	movi	r3,2
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80f9c8:	3027883a 	mov	r19,r6
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80f9cc:	d8c0110d 	sth	r3,68(sp)
  80f9d0:	14400044 	addi	r17,r2,1
  80f9d4:	07002074 	movhi	fp,129
  80f9d8:	e71d8204 	addi	fp,fp,30216
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80f9dc:	e0800383 	ldbu	r2,14(fp)
  80f9e0:	98ffff84 	addi	r3,r19,-2
  80f9e4:	e1001417 	ldw	r4,80(fp)
  80f9e8:	1887383a 	mul	r3,r3,r2
					int sector_index = search_data.current_sector_in_cluster;
  80f9ec:	bc800217 	ldw	r18,8(r23)
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80f9f0:	1907883a 	add	r3,r3,r4
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80f9f4:	90801d0e 	bge	r18,r2,80fa6c <alt_up_sd_card_find_next+0x194>
  80f9f8:	1cab883a 	add	r21,r3,r18
  80f9fc:	dd000104 	addi	r20,sp,4
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80fa00:	d1675b17 	ldw	r5,-25236(gp)
  80fa04:	a809883a 	mov	r4,r21
  80fa08:	080eb300 	call	80eb30 <Read_Sector_Data>
  80fa0c:	1000a626 	beq	r2,zero,80fca8 <alt_up_sd_card_find_next+0x3d0>
						{        
							for (; file_counter < 16; file_counter++)
  80fa10:	008003c4 	movi	r2,15
  80fa14:	14401016 	blt	r2,r17,80fa58 <alt_up_sd_card_find_next+0x180>
  80fa18:	8820917a 	slli	r16,r17,5
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  80fa1c:	8009883a 	mov	r4,r16
  80fa20:	a00b883a 	mov	r5,r20
  80fa24:	980d883a 	mov	r6,r19
  80fa28:	900f883a 	mov	r7,r18
  80fa2c:	080e8a40 	call	80e8a4 <Read_File_Record_At_Offset>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  80fa30:	84000804 	addi	r16,r16,32
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  80fa34:	10000526 	beq	r2,zero,80fa4c <alt_up_sd_card_find_next+0x174>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  80fa38:	d9000103 	ldbu	r4,4(sp)
  80fa3c:	20c03fcc 	andi	r3,r4,255
  80fa40:	18000226 	beq	r3,zero,80fa4c <alt_up_sd_card_find_next+0x174>
  80fa44:	00803944 	movi	r2,229
  80fa48:	1880451e 	bne	r3,r2,80fb60 <alt_up_sd_card_find_next+0x288>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  80fa4c:	8c400044 	addi	r17,r17,1
  80fa50:	00800404 	movi	r2,16
  80fa54:	88bff11e 	bne	r17,r2,80fa1c <alt_up_sd_card_find_next+0x144>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80fa58:	e0800383 	ldbu	r2,14(fp)
  80fa5c:	94800044 	addi	r18,r18,1
  80fa60:	ad400044 	addi	r21,r21,1
  80fa64:	0023883a 	mov	r17,zero
  80fa68:	90bfe516 	blt	r18,r2,80fa00 <alt_up_sd_card_find_next+0x128>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fa6c:	e0c01117 	ldw	r3,68(fp)
  80fa70:	d0a75b17 	ldw	r2,-25236(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fa74:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fa78:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  80fa7c:	d0e75f17 	ldw	r3,-25220(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fa80:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  80fa84:	20c08b26 	beq	r4,r3,80fcb4 <alt_up_sd_card_find_next+0x3dc>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fa88:	000b883a 	mov	r5,zero
  80fa8c:	080eb300 	call	80eb30 <Read_Sector_Data>
  80fa90:	1000881e 	bne	r2,zero,80fcb4 <alt_up_sd_card_find_next+0x3dc>
						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
							{
								result = -1;
								search_data.valid = false;
  80fa94:	00bfffc4 	movi	r2,-1
  80fa98:	d880110d 	sth	r2,68(sp)
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80fa9c:	00bffdd4 	movui	r2,65527
  80faa0:	14ffce0e 	bge	r2,r19,80f9dc <alt_up_sd_card_find_next+0x104>
  80faa4:	d8c0110b 	ldhu	r3,68(sp)
  80faa8:	197fffcc 	andi	r5,r3,65535
  80faac:	2960001c 	xori	r5,r5,32768
  80fab0:	29600004 	addi	r5,r5,-32768
  80fab4:	003f9d06 	br	80f92c <alt_up_sd_card_find_next+0x54>
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80fab8:	07002074 	movhi	fp,129
  80fabc:	e71d8204 	addi	fp,fp,30216
  80fac0:	e080050b 	ldhu	r2,20(fp)
  80fac4:	e0c0030b 	ldhu	r3,12(fp)
				int sector_index = search_data.current_sector_in_cluster;
  80fac8:	bc800217 	ldw	r18,8(r23)
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80facc:	1004917a 	slli	r2,r2,5
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
  80fad0:	b900030b 	ldhu	r4,12(r23)
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80fad4:	10e9283a 	div	r20,r2,r3
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  80fad8:	95001f0e 	bge	r18,r20,80fb58 <alt_up_sd_card_find_next+0x280>
			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
  80fadc:	20bfffcc 	andi	r2,r4,65535
  80fae0:	10a0001c 	xori	r2,r2,32768
  80fae4:	10a00004 	addi	r2,r2,-32768
  80fae8:	14400044 	addi	r17,r2,1
  80faec:	dcc00104 	addi	r19,sp,4
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80faf0:	e1001317 	ldw	r4,76(fp)
  80faf4:	d1675b17 	ldw	r5,-25236(gp)
  80faf8:	9109883a 	add	r4,r18,r4
  80fafc:	080eb300 	call	80eb30 <Read_Sector_Data>
  80fb00:	10001526 	beq	r2,zero,80fb58 <alt_up_sd_card_find_next+0x280>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80fb04:	008003c4 	movi	r2,15
  80fb08:	14401016 	blt	r2,r17,80fb4c <alt_up_sd_card_find_next+0x274>
  80fb0c:	8820917a 	slli	r16,r17,5
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  80fb10:	8009883a 	mov	r4,r16
  80fb14:	980b883a 	mov	r5,r19
  80fb18:	000d883a 	mov	r6,zero
  80fb1c:	900f883a 	mov	r7,r18
  80fb20:	080e8a40 	call	80e8a4 <Read_File_Record_At_Offset>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80fb24:	84000804 	addi	r16,r16,32
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  80fb28:	10000526 	beq	r2,zero,80fb40 <alt_up_sd_card_find_next+0x268>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  80fb2c:	d9000103 	ldbu	r4,4(sp)
  80fb30:	20c03fcc 	andi	r3,r4,255
  80fb34:	18000226 	beq	r3,zero,80fb40 <alt_up_sd_card_find_next+0x268>
  80fb38:	00803944 	movi	r2,229
  80fb3c:	1880541e 	bne	r3,r2,80fc90 <alt_up_sd_card_find_next+0x3b8>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80fb40:	8c400044 	addi	r17,r17,1
  80fb44:	00800404 	movi	r2,16
  80fb48:	88bff11e 	bne	r17,r2,80fb10 <alt_up_sd_card_find_next+0x238>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  80fb4c:	94800044 	addi	r18,r18,1
  80fb50:	0023883a 	mov	r17,zero
  80fb54:	953fe61e 	bne	r18,r20,80faf0 <alt_up_sd_card_find_next+0x218>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80fb58:	017fffc4 	movi	r5,-1
  80fb5c:	003f7306 	br	80f92c <alt_up_sd_card_find_next+0x54>
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fb60:	00800804 	movi	r2,32
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
										search_data.file_index_in_sector = file_counter;
										search_data.current_sector_in_cluster = sector_index;
  80fb64:	bc800215 	stw	r18,8(r23)
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  80fb68:	bcc00115 	stw	r19,4(r23)
										search_data.file_index_in_sector = file_counter;
  80fb6c:	bc40030d 	sth	r17,12(r23)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fb70:	18804b26 	beq	r3,r2,80fca0 <alt_up_sd_card_find_next+0x3c8>
		{
			file_name[flength] = file_record->name[index];
  80fb74:	b1000005 	stb	r4,0(r22)
  80fb78:	01000044 	movi	r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fb7c:	d8c00143 	ldbu	r3,5(sp)
  80fb80:	01800804 	movi	r6,32
  80fb84:	18803fcc 	andi	r2,r3,255
  80fb88:	11800326 	beq	r2,r6,80fb98 <alt_up_sd_card_find_next+0x2c0>
		{
			file_name[flength] = file_record->name[index];
  80fb8c:	b105883a 	add	r2,r22,r4
  80fb90:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fb94:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fb98:	d8c00183 	ldbu	r3,6(sp)
  80fb9c:	18803fcc 	andi	r2,r3,255
  80fba0:	11800326 	beq	r2,r6,80fbb0 <alt_up_sd_card_find_next+0x2d8>
		{
			file_name[flength] = file_record->name[index];
  80fba4:	b105883a 	add	r2,r22,r4
  80fba8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fbac:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fbb0:	d8c001c3 	ldbu	r3,7(sp)
  80fbb4:	18803fcc 	andi	r2,r3,255
  80fbb8:	11800326 	beq	r2,r6,80fbc8 <alt_up_sd_card_find_next+0x2f0>
		{
			file_name[flength] = file_record->name[index];
  80fbbc:	b105883a 	add	r2,r22,r4
  80fbc0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fbc4:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fbc8:	d8c00203 	ldbu	r3,8(sp)
  80fbcc:	18803fcc 	andi	r2,r3,255
  80fbd0:	11800326 	beq	r2,r6,80fbe0 <alt_up_sd_card_find_next+0x308>
		{
			file_name[flength] = file_record->name[index];
  80fbd4:	b105883a 	add	r2,r22,r4
  80fbd8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fbdc:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fbe0:	d8c00243 	ldbu	r3,9(sp)
  80fbe4:	18803fcc 	andi	r2,r3,255
  80fbe8:	11800326 	beq	r2,r6,80fbf8 <alt_up_sd_card_find_next+0x320>
		{
			file_name[flength] = file_record->name[index];
  80fbec:	b105883a 	add	r2,r22,r4
  80fbf0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fbf4:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fbf8:	d8c00283 	ldbu	r3,10(sp)
  80fbfc:	18803fcc 	andi	r2,r3,255
  80fc00:	11800326 	beq	r2,r6,80fc10 <alt_up_sd_card_find_next+0x338>
		{
			file_name[flength] = file_record->name[index];
  80fc04:	b105883a 	add	r2,r22,r4
  80fc08:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fc0c:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fc10:	d8c002c3 	ldbu	r3,11(sp)
  80fc14:	18803fcc 	andi	r2,r3,255
  80fc18:	11800326 	beq	r2,r6,80fc28 <alt_up_sd_card_find_next+0x350>
		{
			file_name[flength] = file_record->name[index];
  80fc1c:	b105883a 	add	r2,r22,r4
  80fc20:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fc24:	21000044 	addi	r4,r4,1
		}
	}
	if (file_record->extension[0] != ' ')
  80fc28:	d9400303 	ldbu	r5,12(sp)
  80fc2c:	29801426 	beq	r5,r6,80fc80 <alt_up_sd_card_find_next+0x3a8>
	{
		file_name[flength] = '.';
  80fc30:	b107883a 	add	r3,r22,r4
  80fc34:	00800b84 	movi	r2,46
  80fc38:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  80fc3c:	21000044 	addi	r4,r4,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80fc40:	29800326 	beq	r5,r6,80fc50 <alt_up_sd_card_find_next+0x378>
			{
				file_name[flength] = file_record->extension[index];
  80fc44:	b105883a 	add	r2,r22,r4
  80fc48:	11400005 	stb	r5,0(r2)
				flength = flength + 1;
  80fc4c:	21000044 	addi	r4,r4,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80fc50:	d8c00343 	ldbu	r3,13(sp)
  80fc54:	18803fcc 	andi	r2,r3,255
  80fc58:	11800326 	beq	r2,r6,80fc68 <alt_up_sd_card_find_next+0x390>
			{
				file_name[flength] = file_record->extension[index];
  80fc5c:	b105883a 	add	r2,r22,r4
  80fc60:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80fc64:	21000044 	addi	r4,r4,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80fc68:	d8c00383 	ldbu	r3,14(sp)
  80fc6c:	18803fcc 	andi	r2,r3,255
  80fc70:	11800326 	beq	r2,r6,80fc80 <alt_up_sd_card_find_next+0x3a8>
			{
				file_name[flength] = file_record->extension[index];
  80fc74:	b105883a 	add	r2,r22,r4
  80fc78:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80fc7c:	21000044 	addi	r4,r4,1
			}
		}
	}
	file_name[flength] = 0;
  80fc80:	b105883a 	add	r2,r22,r4
  80fc84:	000b883a 	mov	r5,zero
  80fc88:	10000005 	stb	zero,0(r2)
  80fc8c:	003f2706 	br	80f92c <alt_up_sd_card_find_next+0x54>
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fc90:	00800804 	movi	r2,32
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
									search_data.current_sector_in_cluster = sector_index;
  80fc94:	bc800215 	stw	r18,8(r23)
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  80fc98:	bc40030d 	sth	r17,12(r23)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fc9c:	18bfb51e 	bne	r3,r2,80fb74 <alt_up_sd_card_find_next+0x29c>
  80fca0:	0009883a 	mov	r4,zero
  80fca4:	003fb506 	br	80fb7c <alt_up_sd_card_find_next+0x2a4>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  80fca8:	e0800383 	ldbu	r2,14(fp)
  80fcac:	90bf7b16 	blt	r18,r2,80fa9c <alt_up_sd_card_find_next+0x1c4>
  80fcb0:	003f6e06 	br	80fa6c <alt_up_sd_card_find_next+0x194>
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  80fcb4:	d0e75d17 	ldw	r3,-25228(gp)
  80fcb8:	98803fcc 	andi	r2,r19,255
  80fcbc:	1085883a 	add	r2,r2,r2
  80fcc0:	19000a17 	ldw	r4,40(r3)
  80fcc4:	1105883a 	add	r2,r2,r4
  80fcc8:	10c0002b 	ldhuio	r3,0(r2)
  80fccc:	d8c0000d 	sth	r3,0(sp)
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  80fcd0:	d880000f 	ldh	r2,0(sp)
  80fcd4:	00fffe14 	movui	r3,65528
  80fcd8:	14fffe0c 	andi	r19,r2,65528
  80fcdc:	98ff6f1e 	bne	r19,r3,80fa9c <alt_up_sd_card_find_next+0x1c4>
							{
								result = -1;
								search_data.valid = false;
  80fce0:	017fffc4 	movi	r5,-1
  80fce4:	b8000415 	stw	zero,16(r23)
  80fce8:	003f1006 	br	80f92c <alt_up_sd_card_find_next+0x54>

0080fcec <find_file_in_directory>:
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  80fcec:	defff404 	addi	sp,sp,-48
  80fcf0:	dd800915 	stw	r22,36(sp)
  80fcf4:	dcc00615 	stw	r19,24(sp)
  80fcf8:	dc400415 	stw	r17,16(sp)
  80fcfc:	202d883a 	mov	r22,r4
  80fd00:	dfc00b15 	stw	ra,44(sp)
  80fd04:	ddc00a15 	stw	r23,40(sp)
  80fd08:	dd400815 	stw	r21,32(sp)
  80fd0c:	dd000715 	stw	r20,28(sp)
  80fd10:	dc800515 	stw	r18,20(sp)
  80fd14:	dc000315 	stw	r16,12(sp)

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  80fd18:	2809883a 	mov	r4,r5
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  80fd1c:	2827883a 	mov	r19,r5
  80fd20:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  80fd24:	0803e880 	call	803e88 <strlen>
    
    for(index = 0; index < length; index++)
  80fd28:	00810f0e 	bge	zero,r2,810168 <find_file_in_directory+0x47c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80fd2c:	98c00007 	ldb	r3,0(r19)
  80fd30:	01401704 	movi	r5,92
  80fd34:	19430e26 	beq	r3,r5,810970 <find_file_in_directory+0xc84>
  80fd38:	01000bc4 	movi	r4,47
  80fd3c:	19030c26 	beq	r3,r4,810970 <find_file_in_directory+0xc84>
  80fd40:	0021883a 	mov	r16,zero
  80fd44:	00000306 	br	80fd54 <find_file_in_directory+0x68>
  80fd48:	18c00007 	ldb	r3,0(r3)
  80fd4c:	19410826 	beq	r3,r5,810170 <find_file_in_directory+0x484>
  80fd50:	19010726 	beq	r3,r4,810170 <find_file_in_directory+0x484>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80fd54:	84000044 	addi	r16,r16,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80fd58:	9c07883a 	add	r3,r19,r16
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80fd5c:	143ffa1e 	bne	r2,r16,80fd48 <find_file_in_directory+0x5c>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  80fd60:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  80fd64:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  80fd68:	d88000c5 	stb	r2,3(sp)
  80fd6c:	d8800105 	stb	r2,4(sp)
  80fd70:	d8800145 	stb	r2,5(sp)
  80fd74:	d8800185 	stb	r2,6(sp)
  80fd78:	d88001c5 	stb	r2,7(sp)
  80fd7c:	d8800205 	stb	r2,8(sp)
  80fd80:	d8800245 	stb	r2,9(sp)
  80fd84:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  80fd88:	d8800005 	stb	r2,0(sp)
  80fd8c:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  80fd90:	9809883a 	mov	r4,r19
  80fd94:	0803e880 	call	803e88 <strlen>
  80fd98:	102b883a 	mov	r21,r2
  80fd9c:	000d883a 	mov	r6,zero
  80fda0:	0029883a 	mov	r20,zero
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  80fda4:	35401a0e 	bge	r6,r21,80fe10 <find_file_in_directory+0x124>
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  80fda8:	3507c83a 	sub	r3,r6,r20
  80fdac:	d88000c4 	addi	r2,sp,3
  80fdb0:	10cb883a 	add	r5,r2,r3
  80fdb4:	9989883a 	add	r4,r19,r6
  80fdb8:	a811883a 	mov	r8,r21
  80fdbc:	01ffffc4 	movi	r7,-1
  80fdc0:	02400b84 	movi	r9,46
  80fdc4:	00000806 	br	80fde8 <find_file_in_directory+0xfc>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  80fdc8:	31c5c83a 	sub	r2,r6,r7
  80fdcc:	16c5883a 	add	r2,r2,sp
    {
        if (file_name[index] == '.')
        {
            ext_index = index;
        }
        else if (ext_index < 0)
  80fdd0:	38011216 	blt	r7,zero,81021c <find_file_in_directory+0x530>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  80fdd4:	10ffffc5 	stb	r3,-1(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  80fdd8:	31800044 	addi	r6,r6,1
  80fddc:	21000044 	addi	r4,r4,1
  80fde0:	29400044 	addi	r5,r5,1
  80fde4:	32000a26 	beq	r6,r8,80fe10 <find_file_in_directory+0x124>
    {
        if (file_name[index] == '.')
  80fde8:	20c00003 	ldbu	r3,0(r4)
  80fdec:	18803fcc 	andi	r2,r3,255
  80fdf0:	1080201c 	xori	r2,r2,128
  80fdf4:	10bfe004 	addi	r2,r2,-128
  80fdf8:	127ff31e 	bne	r2,r9,80fdc8 <find_file_in_directory+0xdc>
  80fdfc:	300f883a 	mov	r7,r6
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  80fe00:	31800044 	addi	r6,r6,1
  80fe04:	21000044 	addi	r4,r4,1
  80fe08:	29400044 	addi	r5,r5,1
  80fe0c:	323ff61e 	bne	r6,r8,80fde8 <find_file_in_directory+0xfc>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  80fe10:	b001041e 	bne	r22,zero,810224 <find_file_in_directory+0x538>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80fe14:	05c02074 	movhi	r23,129
  80fe18:	bddd8204 	addi	r23,r23,30216
  80fe1c:	b880050b 	ldhu	r2,20(r23)
  80fe20:	b8c0030b 	ldhu	r3,12(r23)
  80fe24:	1004917a 	slli	r2,r2,5
  80fe28:	10e9283a 	div	r20,r2,r3
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80fe2c:	a000c126 	beq	r20,zero,810134 <find_file_in_directory+0x448>
  80fe30:	0027883a 	mov	r19,zero
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80fe34:	b9001317 	ldw	r4,76(r23)
  80fe38:	d1675b17 	ldw	r5,-25236(gp)
  80fe3c:	9909883a 	add	r4,r19,r4
  80fe40:	080eb300 	call	80eb30 <Read_Sector_Data>
  80fe44:	1000bb26 	beq	r2,zero,810134 <find_file_in_directory+0x448>
                    }
                }
            }
            else
            {
                break;
  80fe48:	0025883a 	mov	r18,zero
  80fe4c:	04000644 	movi	r16,25
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  80fe50:	9009883a 	mov	r4,r18
  80fe54:	880b883a 	mov	r5,r17
  80fe58:	000d883a 	mov	r6,zero
  80fe5c:	980f883a 	mov	r7,r19
  80fe60:	080e8a40 	call	80e8a4 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  80fe64:	89000003 	ldbu	r4,0(r17)
  80fe68:	00803944 	movi	r2,229
  80fe6c:	20c03fcc 	andi	r3,r4,255
  80fe70:	1880ab26 	beq	r3,r2,810120 <find_file_in_directory+0x434>
  80fe74:	1800aa26 	beq	r3,zero,810120 <find_file_in_directory+0x434>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80fe78:	20bfe7c4 	addi	r2,r4,-97
  80fe7c:	10803fcc 	andi	r2,r2,255
  80fe80:	8082442e 	bgeu	r16,r2,810794 <find_file_in_directory+0xaa8>
  80fe84:	d8c000c3 	ldbu	r3,3(sp)
  80fe88:	21003fcc 	andi	r4,r4,255
  80fe8c:	2100201c 	xori	r4,r4,128
  80fe90:	18bfe7c4 	addi	r2,r3,-97
  80fe94:	10803fcc 	andi	r2,r2,255
  80fe98:	213fe004 	addi	r4,r4,-128
  80fe9c:	8082452e 	bgeu	r16,r2,8107b4 <find_file_in_directory+0xac8>
  80fea0:	18803fcc 	andi	r2,r3,255
  80fea4:	1080201c 	xori	r2,r2,128
  80fea8:	10bfe004 	addi	r2,r2,-128
  80feac:	2082461e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  80feb0:	88c00043 	ldbu	r3,1(r17)
  80feb4:	18bfe7c4 	addi	r2,r3,-97
  80feb8:	10803fcc 	andi	r2,r2,255
  80febc:	8082592e 	bgeu	r16,r2,810824 <find_file_in_directory+0xb38>
  80fec0:	19003fcc 	andi	r4,r3,255
  80fec4:	2100201c 	xori	r4,r4,128
  80fec8:	213fe004 	addi	r4,r4,-128
  80fecc:	d8c00103 	ldbu	r3,4(sp)
  80fed0:	18bfe7c4 	addi	r2,r3,-97
  80fed4:	10803fcc 	andi	r2,r2,255
  80fed8:	80824d2e 	bgeu	r16,r2,810810 <find_file_in_directory+0xb24>
  80fedc:	18803fcc 	andi	r2,r3,255
  80fee0:	1080201c 	xori	r2,r2,128
  80fee4:	10bfe004 	addi	r2,r2,-128
  80fee8:	2082371e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  80feec:	88c00083 	ldbu	r3,2(r17)
  80fef0:	18bfe7c4 	addi	r2,r3,-97
  80fef4:	10803fcc 	andi	r2,r2,255
  80fef8:	80825e2e 	bgeu	r16,r2,810874 <find_file_in_directory+0xb88>
  80fefc:	19003fcc 	andi	r4,r3,255
  80ff00:	2100201c 	xori	r4,r4,128
  80ff04:	213fe004 	addi	r4,r4,-128
  80ff08:	d8c00143 	ldbu	r3,5(sp)
  80ff0c:	18bfe7c4 	addi	r2,r3,-97
  80ff10:	10803fcc 	andi	r2,r2,255
  80ff14:	8082522e 	bgeu	r16,r2,810860 <find_file_in_directory+0xb74>
  80ff18:	18803fcc 	andi	r2,r3,255
  80ff1c:	1080201c 	xori	r2,r2,128
  80ff20:	10bfe004 	addi	r2,r2,-128
  80ff24:	2082281e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  80ff28:	88c000c3 	ldbu	r3,3(r17)
  80ff2c:	18bfe7c4 	addi	r2,r3,-97
  80ff30:	10803fcc 	andi	r2,r2,255
  80ff34:	8082612e 	bgeu	r16,r2,8108bc <find_file_in_directory+0xbd0>
  80ff38:	19003fcc 	andi	r4,r3,255
  80ff3c:	2100201c 	xori	r4,r4,128
  80ff40:	213fe004 	addi	r4,r4,-128
  80ff44:	d8c00183 	ldbu	r3,6(sp)
  80ff48:	18bfe7c4 	addi	r2,r3,-97
  80ff4c:	10803fcc 	andi	r2,r2,255
  80ff50:	8082552e 	bgeu	r16,r2,8108a8 <find_file_in_directory+0xbbc>
  80ff54:	18803fcc 	andi	r2,r3,255
  80ff58:	1080201c 	xori	r2,r2,128
  80ff5c:	10bfe004 	addi	r2,r2,-128
  80ff60:	2082191e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  80ff64:	88c00103 	ldbu	r3,4(r17)
  80ff68:	18bfe7c4 	addi	r2,r3,-97
  80ff6c:	10803fcc 	andi	r2,r2,255
  80ff70:	80825c2e 	bgeu	r16,r2,8108e4 <find_file_in_directory+0xbf8>
  80ff74:	19003fcc 	andi	r4,r3,255
  80ff78:	2100201c 	xori	r4,r4,128
  80ff7c:	213fe004 	addi	r4,r4,-128
  80ff80:	d8c001c3 	ldbu	r3,7(sp)
  80ff84:	18bfe7c4 	addi	r2,r3,-97
  80ff88:	10803fcc 	andi	r2,r2,255
  80ff8c:	8082502e 	bgeu	r16,r2,8108d0 <find_file_in_directory+0xbe4>
  80ff90:	18803fcc 	andi	r2,r3,255
  80ff94:	1080201c 	xori	r2,r2,128
  80ff98:	10bfe004 	addi	r2,r2,-128
  80ff9c:	20820a1e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  80ffa0:	88c00143 	ldbu	r3,5(r17)
  80ffa4:	18bfe7c4 	addi	r2,r3,-97
  80ffa8:	10803fcc 	andi	r2,r2,255
  80ffac:	8082572e 	bgeu	r16,r2,81090c <find_file_in_directory+0xc20>
  80ffb0:	19003fcc 	andi	r4,r3,255
  80ffb4:	2100201c 	xori	r4,r4,128
  80ffb8:	213fe004 	addi	r4,r4,-128
  80ffbc:	d8c00203 	ldbu	r3,8(sp)
  80ffc0:	18bfe7c4 	addi	r2,r3,-97
  80ffc4:	10803fcc 	andi	r2,r2,255
  80ffc8:	80824b2e 	bgeu	r16,r2,8108f8 <find_file_in_directory+0xc0c>
  80ffcc:	18803fcc 	andi	r2,r3,255
  80ffd0:	1080201c 	xori	r2,r2,128
  80ffd4:	10bfe004 	addi	r2,r2,-128
  80ffd8:	2081fb1e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  80ffdc:	88c00183 	ldbu	r3,6(r17)
  80ffe0:	18bfe7c4 	addi	r2,r3,-97
  80ffe4:	10803fcc 	andi	r2,r2,255
  80ffe8:	8082522e 	bgeu	r16,r2,810934 <find_file_in_directory+0xc48>
  80ffec:	19003fcc 	andi	r4,r3,255
  80fff0:	2100201c 	xori	r4,r4,128
  80fff4:	213fe004 	addi	r4,r4,-128
  80fff8:	d8c00243 	ldbu	r3,9(sp)
  80fffc:	18bfe7c4 	addi	r2,r3,-97
  810000:	10803fcc 	andi	r2,r2,255
  810004:	8082462e 	bgeu	r16,r2,810920 <find_file_in_directory+0xc34>
  810008:	18803fcc 	andi	r2,r3,255
  81000c:	1080201c 	xori	r2,r2,128
  810010:	10bfe004 	addi	r2,r2,-128
  810014:	2081ec1e 	bne	r4,r2,8107c8 <find_file_in_directory+0xadc>
  810018:	88c001c3 	ldbu	r3,7(r17)
  81001c:	18bfe7c4 	addi	r2,r3,-97
  810020:	10803fcc 	andi	r2,r2,255
  810024:	80824c36 	bltu	r16,r2,810958 <find_file_in_directory+0xc6c>
  810028:	18bff804 	addi	r2,r3,-32
  81002c:	11003fcc 	andi	r4,r2,255
  810030:	2100201c 	xori	r4,r4,128
  810034:	213fe004 	addi	r4,r4,-128
  810038:	d8c00283 	ldbu	r3,10(sp)
  81003c:	18bfe7c4 	addi	r2,r3,-97
  810040:	10803fcc 	andi	r2,r2,255
  810044:	80824036 	bltu	r16,r2,810948 <find_file_in_directory+0xc5c>
  810048:	18bff804 	addi	r2,r3,-32
  81004c:	10803fcc 	andi	r2,r2,255
  810050:	1080201c 	xori	r2,r2,128
  810054:	10bfe004 	addi	r2,r2,-128
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810058:	88c00203 	ldbu	r3,8(r17)
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  81005c:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810060:	18bfe7c4 	addi	r2,r3,-97
  810064:	10803fcc 	andi	r2,r2,255
  810068:	8081dc2e 	bgeu	r16,r2,8107dc <find_file_in_directory+0xaf0>
  81006c:	19003fcc 	andi	r4,r3,255
  810070:	d8c00003 	ldbu	r3,0(sp)
  810074:	2100201c 	xori	r4,r4,128
  810078:	213fe004 	addi	r4,r4,-128
  81007c:	18bfe7c4 	addi	r2,r3,-97
  810080:	10803fcc 	andi	r2,r2,255
  810084:	8081dd2e 	bgeu	r16,r2,8107fc <find_file_in_directory+0xb10>
  810088:	18803fcc 	andi	r2,r3,255
  81008c:	1080201c 	xori	r2,r2,128
  810090:	10bfe004 	addi	r2,r2,-128
  810094:	2080221e 	bne	r4,r2,810120 <find_file_in_directory+0x434>
  810098:	88c00243 	ldbu	r3,9(r17)
  81009c:	18bfe7c4 	addi	r2,r3,-97
  8100a0:	10803fcc 	andi	r2,r2,255
  8100a4:	8081e92e 	bgeu	r16,r2,81084c <find_file_in_directory+0xb60>
  8100a8:	19003fcc 	andi	r4,r3,255
  8100ac:	2100201c 	xori	r4,r4,128
  8100b0:	213fe004 	addi	r4,r4,-128
  8100b4:	d8c00043 	ldbu	r3,1(sp)
  8100b8:	18bfe7c4 	addi	r2,r3,-97
  8100bc:	10803fcc 	andi	r2,r2,255
  8100c0:	8081dd2e 	bgeu	r16,r2,810838 <find_file_in_directory+0xb4c>
  8100c4:	18803fcc 	andi	r2,r3,255
  8100c8:	1080201c 	xori	r2,r2,128
  8100cc:	10bfe004 	addi	r2,r2,-128
  8100d0:	2080131e 	bne	r4,r2,810120 <find_file_in_directory+0x434>
  8100d4:	88c00283 	ldbu	r3,10(r17)
  8100d8:	18bfe7c4 	addi	r2,r3,-97
  8100dc:	10803fcc 	andi	r2,r2,255
  8100e0:	8081ed36 	bltu	r16,r2,810898 <find_file_in_directory+0xbac>
  8100e4:	18bff804 	addi	r2,r3,-32
  8100e8:	11003fcc 	andi	r4,r2,255
  8100ec:	2100201c 	xori	r4,r4,128
  8100f0:	213fe004 	addi	r4,r4,-128
  8100f4:	d8c00083 	ldbu	r3,2(sp)
  8100f8:	18bfe7c4 	addi	r2,r3,-97
  8100fc:	10803fcc 	andi	r2,r2,255
  810100:	8081e136 	bltu	r16,r2,810888 <find_file_in_directory+0xb9c>
  810104:	18bff804 	addi	r2,r3,-32
  810108:	10803fcc 	andi	r2,r2,255
  81010c:	1080201c 	xori	r2,r2,128
  810110:	10bfe004 	addi	r2,r2,-128
  810114:	2080021e 	bne	r4,r2,810120 <find_file_in_directory+0x434>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
  810118:	2805003a 	cmpeq	r2,r5,zero
  81011c:	10021226 	beq	r2,zero,810968 <find_file_in_directory+0xc7c>
  810120:	94800804 	addi	r18,r18,32
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  810124:	00808004 	movi	r2,512
  810128:	90bf491e 	bne	r18,r2,80fe50 <find_file_in_directory+0x164>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  81012c:	9cc00044 	addi	r19,r19,1
  810130:	a4ff401e 	bne	r20,r19,80fe34 <find_file_in_directory+0x148>
                {
                    // Directory path is invalid.                 
                    return false;
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  810134:	002b883a 	mov	r21,zero
    }
    
    return result;   
}
  810138:	a805883a 	mov	r2,r21
  81013c:	dfc00b17 	ldw	ra,44(sp)
  810140:	ddc00a17 	ldw	r23,40(sp)
  810144:	dd800917 	ldw	r22,36(sp)
  810148:	dd400817 	ldw	r21,32(sp)
  81014c:	dd000717 	ldw	r20,28(sp)
  810150:	dcc00617 	ldw	r19,24(sp)
  810154:	dc800517 	ldw	r18,20(sp)
  810158:	dc400417 	ldw	r17,16(sp)
  81015c:	dc000317 	ldw	r16,12(sp)
  810160:	dec00c04 	addi	sp,sp,48
  810164:	f800283a 	ret
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810168:	0021883a 	mov	r16,zero
        {
            break;
        }
    }
    
    if (index == length)
  81016c:	103efc26 	beq	r2,zero,80fd60 <find_file_in_directory+0x74>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810170:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  810174:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810178:	d88000c5 	stb	r2,3(sp)
  81017c:	d8800105 	stb	r2,4(sp)
  810180:	d8800145 	stb	r2,5(sp)
  810184:	d8800185 	stb	r2,6(sp)
  810188:	d88001c5 	stb	r2,7(sp)
  81018c:	d8800205 	stb	r2,8(sp)
  810190:	d8800245 	stb	r2,9(sp)
  810194:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810198:	d8800005 	stb	r2,0(sp)
  81019c:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  8101a0:	9809883a 	mov	r4,r19
  8101a4:	0803e880 	call	803e88 <strlen>
  8101a8:	102b883a 	mov	r21,r2
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  8101ac:	043efb0e 	bge	zero,r16,80fd9c <find_file_in_directory+0xb0>
  8101b0:	0029883a 	mov	r20,zero
    {
        last_dir_separator = last_dir_separator+location+1;
  8101b4:	80800044 	addi	r2,r16,1
  8101b8:	a0a9883a 	add	r20,r20,r2
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  8101bc:	9d25883a 	add	r18,r19,r20

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8101c0:	9009883a 	mov	r4,r18
  8101c4:	0803e880 	call	803e88 <strlen>
    
    for(index = 0; index < length; index++)
  8101c8:	00800f0e 	bge	zero,r2,810208 <find_file_in_directory+0x51c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8101cc:	90c00007 	ldb	r3,0(r18)
  8101d0:	01401704 	movi	r5,92
  8101d4:	19400c26 	beq	r3,r5,810208 <find_file_in_directory+0x51c>
  8101d8:	01000bc4 	movi	r4,47
  8101dc:	19000a26 	beq	r3,r4,810208 <find_file_in_directory+0x51c>
  8101e0:	0021883a 	mov	r16,zero
  8101e4:	00000306 	br	8101f4 <find_file_in_directory+0x508>
  8101e8:	18c00007 	ldb	r3,0(r3)
  8101ec:	19400826 	beq	r3,r5,810210 <find_file_in_directory+0x524>
  8101f0:	19000726 	beq	r3,r4,810210 <find_file_in_directory+0x524>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8101f4:	84000044 	addi	r16,r16,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8101f8:	9407883a 	add	r3,r18,r16
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8101fc:	143ffa1e 	bne	r2,r16,8101e8 <find_file_in_directory+0x4fc>
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  810200:	a00d883a 	mov	r6,r20
  810204:	003ee706 	br	80fda4 <find_file_in_directory+0xb8>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810208:	0021883a 	mov	r16,zero
        {
            break;
        }
    }
    
    if (index == length)
  81020c:	103ffc26 	beq	r2,zero,810200 <find_file_in_directory+0x514>
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  810210:	043fe816 	blt	zero,r16,8101b4 <find_file_in_directory+0x4c8>
  810214:	a00d883a 	mov	r6,r20
  810218:	003ee206 	br	80fda4 <find_file_in_directory+0xb8>
        {
            ext_index = index;
        }
        else if (ext_index < 0)
        {
            name[index-last_dir_separator] = file_name[index];
  81021c:	28c00005 	stb	r3,0(r5)
  810220:	003eed06 	br	80fdd8 <find_file_in_directory+0xec>
  810224:	05c02074 	movhi	r23,129
  810228:	bddd8204 	addi	r23,r23,30216
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81022c:	b8800383 	ldbu	r2,14(r23)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810230:	b027883a 	mov	r19,r22
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  810234:	98ffff84 	addi	r3,r19,-2
  810238:	b9001417 	ldw	r4,80(r23)
  81023c:	1887383a 	mul	r3,r3,r2
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810240:	002b883a 	mov	r21,zero
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  810244:	192d883a 	add	r22,r3,r4
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  810248:	1000e126 	beq	r2,zero,8105d0 <find_file_in_directory+0x8e4>
  81024c:	0029883a 	mov	r20,zero
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  810250:	d1675b17 	ldw	r5,-25236(gp)
  810254:	b509883a 	add	r4,r22,r20
  810258:	080eb300 	call	80eb30 <Read_Sector_Data>
  81025c:	1000dc26 	beq	r2,zero,8105d0 <find_file_in_directory+0x8e4>
                        }
                    }
                }
                else
                {
                    break;
  810260:	0025883a 	mov	r18,zero
  810264:	04000644 	movi	r16,25
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  810268:	9009883a 	mov	r4,r18
  81026c:	880b883a 	mov	r5,r17
  810270:	980d883a 	mov	r6,r19
  810274:	a00f883a 	mov	r7,r20
  810278:	080e8a40 	call	80e8a4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81027c:	89000003 	ldbu	r4,0(r17)
  810280:	00803944 	movi	r2,229
  810284:	20c03fcc 	andi	r3,r4,255
  810288:	1880ab26 	beq	r3,r2,810538 <find_file_in_directory+0x84c>
  81028c:	1800aa26 	beq	r3,zero,810538 <find_file_in_directory+0x84c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810290:	20bfe7c4 	addi	r2,r4,-97
  810294:	10803fcc 	andi	r2,r2,255
  810298:	8080e12e 	bgeu	r16,r2,810620 <find_file_in_directory+0x934>
  81029c:	21003fcc 	andi	r4,r4,255
  8102a0:	2100201c 	xori	r4,r4,128
  8102a4:	213fe004 	addi	r4,r4,-128
  8102a8:	d8c000c3 	ldbu	r3,3(sp)
  8102ac:	18bfe7c4 	addi	r2,r3,-97
  8102b0:	10803fcc 	andi	r2,r2,255
  8102b4:	8080d32e 	bgeu	r16,r2,810604 <find_file_in_directory+0x918>
  8102b8:	18803fcc 	andi	r2,r3,255
  8102bc:	1080201c 	xori	r2,r2,128
  8102c0:	10bfe004 	addi	r2,r2,-128
  8102c4:	2080d41e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  8102c8:	88c00043 	ldbu	r3,1(r17)
  8102cc:	18bfe7c4 	addi	r2,r3,-97
  8102d0:	10803fcc 	andi	r2,r2,255
  8102d4:	8080e62e 	bgeu	r16,r2,810670 <find_file_in_directory+0x984>
  8102d8:	19003fcc 	andi	r4,r3,255
  8102dc:	2100201c 	xori	r4,r4,128
  8102e0:	213fe004 	addi	r4,r4,-128
  8102e4:	d8c00103 	ldbu	r3,4(sp)
  8102e8:	18bfe7c4 	addi	r2,r3,-97
  8102ec:	10803fcc 	andi	r2,r2,255
  8102f0:	8080da2e 	bgeu	r16,r2,81065c <find_file_in_directory+0x970>
  8102f4:	18803fcc 	andi	r2,r3,255
  8102f8:	1080201c 	xori	r2,r2,128
  8102fc:	10bfe004 	addi	r2,r2,-128
  810300:	2080c51e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  810304:	88c00083 	ldbu	r3,2(r17)
  810308:	18bfe7c4 	addi	r2,r3,-97
  81030c:	10803fcc 	andi	r2,r2,255
  810310:	8080e92e 	bgeu	r16,r2,8106b8 <find_file_in_directory+0x9cc>
  810314:	19003fcc 	andi	r4,r3,255
  810318:	2100201c 	xori	r4,r4,128
  81031c:	213fe004 	addi	r4,r4,-128
  810320:	d8c00143 	ldbu	r3,5(sp)
  810324:	18bfe7c4 	addi	r2,r3,-97
  810328:	10803fcc 	andi	r2,r2,255
  81032c:	8080dd2e 	bgeu	r16,r2,8106a4 <find_file_in_directory+0x9b8>
  810330:	18803fcc 	andi	r2,r3,255
  810334:	1080201c 	xori	r2,r2,128
  810338:	10bfe004 	addi	r2,r2,-128
  81033c:	2080b61e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  810340:	88c000c3 	ldbu	r3,3(r17)
  810344:	18bfe7c4 	addi	r2,r3,-97
  810348:	10803fcc 	andi	r2,r2,255
  81034c:	8080e42e 	bgeu	r16,r2,8106e0 <find_file_in_directory+0x9f4>
  810350:	19003fcc 	andi	r4,r3,255
  810354:	2100201c 	xori	r4,r4,128
  810358:	213fe004 	addi	r4,r4,-128
  81035c:	d8c00183 	ldbu	r3,6(sp)
  810360:	18bfe7c4 	addi	r2,r3,-97
  810364:	10803fcc 	andi	r2,r2,255
  810368:	8080d82e 	bgeu	r16,r2,8106cc <find_file_in_directory+0x9e0>
  81036c:	18803fcc 	andi	r2,r3,255
  810370:	1080201c 	xori	r2,r2,128
  810374:	10bfe004 	addi	r2,r2,-128
  810378:	2080a71e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  81037c:	88c00103 	ldbu	r3,4(r17)
  810380:	18bfe7c4 	addi	r2,r3,-97
  810384:	10803fcc 	andi	r2,r2,255
  810388:	8080df2e 	bgeu	r16,r2,810708 <find_file_in_directory+0xa1c>
  81038c:	19003fcc 	andi	r4,r3,255
  810390:	2100201c 	xori	r4,r4,128
  810394:	213fe004 	addi	r4,r4,-128
  810398:	d8c001c3 	ldbu	r3,7(sp)
  81039c:	18bfe7c4 	addi	r2,r3,-97
  8103a0:	10803fcc 	andi	r2,r2,255
  8103a4:	8080d32e 	bgeu	r16,r2,8106f4 <find_file_in_directory+0xa08>
  8103a8:	18803fcc 	andi	r2,r3,255
  8103ac:	1080201c 	xori	r2,r2,128
  8103b0:	10bfe004 	addi	r2,r2,-128
  8103b4:	2080981e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  8103b8:	88c00143 	ldbu	r3,5(r17)
  8103bc:	18bfe7c4 	addi	r2,r3,-97
  8103c0:	10803fcc 	andi	r2,r2,255
  8103c4:	8080da2e 	bgeu	r16,r2,810730 <find_file_in_directory+0xa44>
  8103c8:	19003fcc 	andi	r4,r3,255
  8103cc:	2100201c 	xori	r4,r4,128
  8103d0:	213fe004 	addi	r4,r4,-128
  8103d4:	d8c00203 	ldbu	r3,8(sp)
  8103d8:	18bfe7c4 	addi	r2,r3,-97
  8103dc:	10803fcc 	andi	r2,r2,255
  8103e0:	8080ce2e 	bgeu	r16,r2,81071c <find_file_in_directory+0xa30>
  8103e4:	18803fcc 	andi	r2,r3,255
  8103e8:	1080201c 	xori	r2,r2,128
  8103ec:	10bfe004 	addi	r2,r2,-128
  8103f0:	2080891e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  8103f4:	88c00183 	ldbu	r3,6(r17)
  8103f8:	18bfe7c4 	addi	r2,r3,-97
  8103fc:	10803fcc 	andi	r2,r2,255
  810400:	8080d52e 	bgeu	r16,r2,810758 <find_file_in_directory+0xa6c>
  810404:	19003fcc 	andi	r4,r3,255
  810408:	2100201c 	xori	r4,r4,128
  81040c:	213fe004 	addi	r4,r4,-128
  810410:	d8c00243 	ldbu	r3,9(sp)
  810414:	18bfe7c4 	addi	r2,r3,-97
  810418:	10803fcc 	andi	r2,r2,255
  81041c:	8080c92e 	bgeu	r16,r2,810744 <find_file_in_directory+0xa58>
  810420:	18803fcc 	andi	r2,r3,255
  810424:	1080201c 	xori	r2,r2,128
  810428:	10bfe004 	addi	r2,r2,-128
  81042c:	20807a1e 	bne	r4,r2,810618 <find_file_in_directory+0x92c>
  810430:	88c001c3 	ldbu	r3,7(r17)
  810434:	18bfe7c4 	addi	r2,r3,-97
  810438:	10803fcc 	andi	r2,r2,255
  81043c:	8080cf36 	bltu	r16,r2,81077c <find_file_in_directory+0xa90>
  810440:	18bff804 	addi	r2,r3,-32
  810444:	11003fcc 	andi	r4,r2,255
  810448:	2100201c 	xori	r4,r4,128
  81044c:	213fe004 	addi	r4,r4,-128
  810450:	d8c00283 	ldbu	r3,10(sp)
  810454:	18bfe7c4 	addi	r2,r3,-97
  810458:	10803fcc 	andi	r2,r2,255
  81045c:	8080c336 	bltu	r16,r2,81076c <find_file_in_directory+0xa80>
  810460:	18bff804 	addi	r2,r3,-32
  810464:	10803fcc 	andi	r2,r2,255
  810468:	1080201c 	xori	r2,r2,128
  81046c:	10bfe004 	addi	r2,r2,-128
  810470:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810474:	88c00203 	ldbu	r3,8(r17)
  810478:	18bfe7c4 	addi	r2,r3,-97
  81047c:	10803fcc 	andi	r2,r2,255
  810480:	80805b2e 	bgeu	r16,r2,8105f0 <find_file_in_directory+0x904>
  810484:	19003fcc 	andi	r4,r3,255
  810488:	2100201c 	xori	r4,r4,128
  81048c:	213fe004 	addi	r4,r4,-128
  810490:	d8c00003 	ldbu	r3,0(sp)
  810494:	18bfe7c4 	addi	r2,r3,-97
  810498:	10803fcc 	andi	r2,r2,255
  81049c:	80804f2e 	bgeu	r16,r2,8105dc <find_file_in_directory+0x8f0>
  8104a0:	18803fcc 	andi	r2,r3,255
  8104a4:	1080201c 	xori	r2,r2,128
  8104a8:	10bfe004 	addi	r2,r2,-128
  8104ac:	1100221e 	bne	r2,r4,810538 <find_file_in_directory+0x84c>
  8104b0:	88c00243 	ldbu	r3,9(r17)
  8104b4:	18bfe7c4 	addi	r2,r3,-97
  8104b8:	10803fcc 	andi	r2,r2,255
  8104bc:	8080622e 	bgeu	r16,r2,810648 <find_file_in_directory+0x95c>
  8104c0:	19003fcc 	andi	r4,r3,255
  8104c4:	2100201c 	xori	r4,r4,128
  8104c8:	213fe004 	addi	r4,r4,-128
  8104cc:	d8c00043 	ldbu	r3,1(sp)
  8104d0:	18bfe7c4 	addi	r2,r3,-97
  8104d4:	10803fcc 	andi	r2,r2,255
  8104d8:	8080562e 	bgeu	r16,r2,810634 <find_file_in_directory+0x948>
  8104dc:	18803fcc 	andi	r2,r3,255
  8104e0:	1080201c 	xori	r2,r2,128
  8104e4:	10bfe004 	addi	r2,r2,-128
  8104e8:	1100131e 	bne	r2,r4,810538 <find_file_in_directory+0x84c>
  8104ec:	88c00283 	ldbu	r3,10(r17)
  8104f0:	18bfe7c4 	addi	r2,r3,-97
  8104f4:	10803fcc 	andi	r2,r2,255
  8104f8:	80806636 	bltu	r16,r2,810694 <find_file_in_directory+0x9a8>
  8104fc:	18bff804 	addi	r2,r3,-32
  810500:	11003fcc 	andi	r4,r2,255
  810504:	2100201c 	xori	r4,r4,128
  810508:	213fe004 	addi	r4,r4,-128
  81050c:	d8c00083 	ldbu	r3,2(sp)
  810510:	18bfe7c4 	addi	r2,r3,-97
  810514:	10803fcc 	andi	r2,r2,255
  810518:	80805a36 	bltu	r16,r2,810684 <find_file_in_directory+0x998>
  81051c:	18bff804 	addi	r2,r3,-32
  810520:	10803fcc 	andi	r2,r2,255
  810524:	1080201c 	xori	r2,r2,128
  810528:	10bfe004 	addi	r2,r2,-128
  81052c:	1100021e 	bne	r2,r4,810538 <find_file_in_directory+0x84c>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
  810530:	2805003a 	cmpeq	r2,r5,zero
  810534:	10009526 	beq	r2,zero,81078c <find_file_in_directory+0xaa0>
  810538:	94800804 	addi	r18,r18,32
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  81053c:	00808004 	movi	r2,512
  810540:	90bf491e 	bne	r18,r2,810268 <find_file_in_directory+0x57c>
                }
                else
                {
                    break;
                }
                if (result)
  810544:	a804c03a 	cmpne	r2,r21,zero
  810548:	1000171e 	bne	r2,zero,8105a8 <find_file_in_directory+0x8bc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81054c:	b8800383 	ldbu	r2,14(r23)
  810550:	a5000044 	addi	r20,r20,1
  810554:	a0bf3e16 	blt	r20,r2,810250 <find_file_in_directory+0x564>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810558:	b8c01117 	ldw	r3,68(r23)
  81055c:	d0a75b17 	ldw	r2,-25236(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  810560:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810564:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  810568:	d0e75f17 	ldw	r3,-25220(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  81056c:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  810570:	20c00326 	beq	r4,r3,810580 <find_file_in_directory+0x894>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  810574:	000b883a 	mov	r5,zero
  810578:	080eb300 	call	80eb30 <Read_Sector_Data>
  81057c:	103eed26 	beq	r2,zero,810134 <find_file_in_directory+0x448>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  810580:	d0e75d17 	ldw	r3,-25228(gp)
  810584:	98803fcc 	andi	r2,r19,255
  810588:	1085883a 	add	r2,r2,r2
  81058c:	19000a17 	ldw	r4,40(r3)
  810590:	1105883a 	add	r2,r2,r4
  810594:	10c0002b 	ldhuio	r3,0(r2)
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  810598:	00bffe14 	movui	r2,65528
  81059c:	1cfffe0c 	andi	r19,r3,65528
  8105a0:	98bee426 	beq	r19,r2,810134 <find_file_in_directory+0x448>
  8105a4:	002b883a 	mov	r21,zero
                {
                    // Directory path is invalid.                 
                    return false;
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  8105a8:	00bffdd4 	movui	r2,65527
  8105ac:	14fee216 	blt	r2,r19,810138 <find_file_in_directory+0x44c>
  8105b0:	a805003a 	cmpeq	r2,r21,zero
  8105b4:	103ee026 	beq	r2,zero,810138 <find_file_in_directory+0x44c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8105b8:	b8800383 	ldbu	r2,14(r23)
  8105bc:	98ffff84 	addi	r3,r19,-2
  8105c0:	b9001417 	ldw	r4,80(r23)
  8105c4:	1887383a 	mul	r3,r3,r2
  8105c8:	192d883a 	add	r22,r3,r4
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8105cc:	103f1f1e 	bne	r2,zero,81024c <find_file_in_directory+0x560>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  8105d0:	a805003a 	cmpeq	r2,r21,zero
  8105d4:	103ff426 	beq	r2,zero,8105a8 <find_file_in_directory+0x8bc>
  8105d8:	003fdf06 	br	810558 <find_file_in_directory+0x86c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8105dc:	18bff804 	addi	r2,r3,-32
  8105e0:	10803fcc 	andi	r2,r2,255
  8105e4:	1080201c 	xori	r2,r2,128
  8105e8:	10bfe004 	addi	r2,r2,-128
  8105ec:	003faf06 	br	8104ac <find_file_in_directory+0x7c0>
  8105f0:	18bff804 	addi	r2,r3,-32
  8105f4:	11003fcc 	andi	r4,r2,255
  8105f8:	2100201c 	xori	r4,r4,128
  8105fc:	213fe004 	addi	r4,r4,-128
  810600:	003fa306 	br	810490 <find_file_in_directory+0x7a4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810604:	18bff804 	addi	r2,r3,-32
  810608:	10803fcc 	andi	r2,r2,255
  81060c:	1080201c 	xori	r2,r2,128
  810610:	10bfe004 	addi	r2,r2,-128
  810614:	20bf2c26 	beq	r4,r2,8102c8 <find_file_in_directory+0x5dc>
  810618:	000b883a 	mov	r5,zero
  81061c:	003f9506 	br	810474 <find_file_in_directory+0x788>
  810620:	20bff804 	addi	r2,r4,-32
  810624:	11003fcc 	andi	r4,r2,255
  810628:	2100201c 	xori	r4,r4,128
  81062c:	213fe004 	addi	r4,r4,-128
  810630:	003f1d06 	br	8102a8 <find_file_in_directory+0x5bc>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810634:	18bff804 	addi	r2,r3,-32
  810638:	10803fcc 	andi	r2,r2,255
  81063c:	1080201c 	xori	r2,r2,128
  810640:	10bfe004 	addi	r2,r2,-128
  810644:	003fa806 	br	8104e8 <find_file_in_directory+0x7fc>
  810648:	18bff804 	addi	r2,r3,-32
  81064c:	11003fcc 	andi	r4,r2,255
  810650:	2100201c 	xori	r4,r4,128
  810654:	213fe004 	addi	r4,r4,-128
  810658:	003f9c06 	br	8104cc <find_file_in_directory+0x7e0>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  81065c:	18bff804 	addi	r2,r3,-32
  810660:	10803fcc 	andi	r2,r2,255
  810664:	1080201c 	xori	r2,r2,128
  810668:	10bfe004 	addi	r2,r2,-128
  81066c:	003f2406 	br	810300 <find_file_in_directory+0x614>
  810670:	18bff804 	addi	r2,r3,-32
  810674:	11003fcc 	andi	r4,r2,255
  810678:	2100201c 	xori	r4,r4,128
  81067c:	213fe004 	addi	r4,r4,-128
  810680:	003f1806 	br	8102e4 <find_file_in_directory+0x5f8>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810684:	18803fcc 	andi	r2,r3,255
  810688:	1080201c 	xori	r2,r2,128
  81068c:	10bfe004 	addi	r2,r2,-128
  810690:	003fa606 	br	81052c <find_file_in_directory+0x840>
  810694:	19003fcc 	andi	r4,r3,255
  810698:	2100201c 	xori	r4,r4,128
  81069c:	213fe004 	addi	r4,r4,-128
  8106a0:	003f9a06 	br	81050c <find_file_in_directory+0x820>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8106a4:	18bff804 	addi	r2,r3,-32
  8106a8:	10803fcc 	andi	r2,r2,255
  8106ac:	1080201c 	xori	r2,r2,128
  8106b0:	10bfe004 	addi	r2,r2,-128
  8106b4:	003f2106 	br	81033c <find_file_in_directory+0x650>
  8106b8:	18bff804 	addi	r2,r3,-32
  8106bc:	11003fcc 	andi	r4,r2,255
  8106c0:	2100201c 	xori	r4,r4,128
  8106c4:	213fe004 	addi	r4,r4,-128
  8106c8:	003f1506 	br	810320 <find_file_in_directory+0x634>
  8106cc:	18bff804 	addi	r2,r3,-32
  8106d0:	10803fcc 	andi	r2,r2,255
  8106d4:	1080201c 	xori	r2,r2,128
  8106d8:	10bfe004 	addi	r2,r2,-128
  8106dc:	003f2606 	br	810378 <find_file_in_directory+0x68c>
  8106e0:	18bff804 	addi	r2,r3,-32
  8106e4:	11003fcc 	andi	r4,r2,255
  8106e8:	2100201c 	xori	r4,r4,128
  8106ec:	213fe004 	addi	r4,r4,-128
  8106f0:	003f1a06 	br	81035c <find_file_in_directory+0x670>
  8106f4:	18bff804 	addi	r2,r3,-32
  8106f8:	10803fcc 	andi	r2,r2,255
  8106fc:	1080201c 	xori	r2,r2,128
  810700:	10bfe004 	addi	r2,r2,-128
  810704:	003f2b06 	br	8103b4 <find_file_in_directory+0x6c8>
  810708:	18bff804 	addi	r2,r3,-32
  81070c:	11003fcc 	andi	r4,r2,255
  810710:	2100201c 	xori	r4,r4,128
  810714:	213fe004 	addi	r4,r4,-128
  810718:	003f1f06 	br	810398 <find_file_in_directory+0x6ac>
  81071c:	18bff804 	addi	r2,r3,-32
  810720:	10803fcc 	andi	r2,r2,255
  810724:	1080201c 	xori	r2,r2,128
  810728:	10bfe004 	addi	r2,r2,-128
  81072c:	003f3006 	br	8103f0 <find_file_in_directory+0x704>
  810730:	18bff804 	addi	r2,r3,-32
  810734:	11003fcc 	andi	r4,r2,255
  810738:	2100201c 	xori	r4,r4,128
  81073c:	213fe004 	addi	r4,r4,-128
  810740:	003f2406 	br	8103d4 <find_file_in_directory+0x6e8>
  810744:	18bff804 	addi	r2,r3,-32
  810748:	10803fcc 	andi	r2,r2,255
  81074c:	1080201c 	xori	r2,r2,128
  810750:	10bfe004 	addi	r2,r2,-128
  810754:	003f3506 	br	81042c <find_file_in_directory+0x740>
  810758:	18bff804 	addi	r2,r3,-32
  81075c:	11003fcc 	andi	r4,r2,255
  810760:	2100201c 	xori	r4,r4,128
  810764:	213fe004 	addi	r4,r4,-128
  810768:	003f2906 	br	810410 <find_file_in_directory+0x724>
  81076c:	18803fcc 	andi	r2,r3,255
  810770:	1080201c 	xori	r2,r2,128
  810774:	10bfe004 	addi	r2,r2,-128
  810778:	003f3d06 	br	810470 <find_file_in_directory+0x784>
  81077c:	19003fcc 	andi	r4,r3,255
  810780:	2100201c 	xori	r4,r4,128
  810784:	213fe004 	addi	r4,r4,-128
  810788:	003f3106 	br	810450 <find_file_in_directory+0x764>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
  81078c:	05400044 	movi	r21,1
  810790:	003f8506 	br	8105a8 <find_file_in_directory+0x8bc>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810794:	d8c000c3 	ldbu	r3,3(sp)
  810798:	20bff804 	addi	r2,r4,-32
  81079c:	11003fcc 	andi	r4,r2,255
  8107a0:	18bfe7c4 	addi	r2,r3,-97
  8107a4:	2100201c 	xori	r4,r4,128
  8107a8:	10803fcc 	andi	r2,r2,255
  8107ac:	213fe004 	addi	r4,r4,-128
  8107b0:	80bdbb36 	bltu	r16,r2,80fea0 <find_file_in_directory+0x1b4>
  8107b4:	18bff804 	addi	r2,r3,-32
  8107b8:	10803fcc 	andi	r2,r2,255
  8107bc:	1080201c 	xori	r2,r2,128
  8107c0:	10bfe004 	addi	r2,r2,-128
  8107c4:	20bdba26 	beq	r4,r2,80feb0 <find_file_in_directory+0x1c4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8107c8:	88c00203 	ldbu	r3,8(r17)
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8107cc:	000b883a 	mov	r5,zero
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8107d0:	18bfe7c4 	addi	r2,r3,-97
  8107d4:	10803fcc 	andi	r2,r2,255
  8107d8:	80be2436 	bltu	r16,r2,81006c <find_file_in_directory+0x380>
  8107dc:	18bff804 	addi	r2,r3,-32
  8107e0:	d8c00003 	ldbu	r3,0(sp)
  8107e4:	11003fcc 	andi	r4,r2,255
  8107e8:	2100201c 	xori	r4,r4,128
  8107ec:	18bfe7c4 	addi	r2,r3,-97
  8107f0:	10803fcc 	andi	r2,r2,255
  8107f4:	213fe004 	addi	r4,r4,-128
  8107f8:	80be2336 	bltu	r16,r2,810088 <find_file_in_directory+0x39c>
  8107fc:	18bff804 	addi	r2,r3,-32
  810800:	10803fcc 	andi	r2,r2,255
  810804:	1080201c 	xori	r2,r2,128
  810808:	10bfe004 	addi	r2,r2,-128
  81080c:	003e2106 	br	810094 <find_file_in_directory+0x3a8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810810:	18bff804 	addi	r2,r3,-32
  810814:	10803fcc 	andi	r2,r2,255
  810818:	1080201c 	xori	r2,r2,128
  81081c:	10bfe004 	addi	r2,r2,-128
  810820:	003db106 	br	80fee8 <find_file_in_directory+0x1fc>
  810824:	18bff804 	addi	r2,r3,-32
  810828:	11003fcc 	andi	r4,r2,255
  81082c:	2100201c 	xori	r4,r4,128
  810830:	213fe004 	addi	r4,r4,-128
  810834:	003da506 	br	80fecc <find_file_in_directory+0x1e0>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810838:	18bff804 	addi	r2,r3,-32
  81083c:	10803fcc 	andi	r2,r2,255
  810840:	1080201c 	xori	r2,r2,128
  810844:	10bfe004 	addi	r2,r2,-128
  810848:	003e2106 	br	8100d0 <find_file_in_directory+0x3e4>
  81084c:	18bff804 	addi	r2,r3,-32
  810850:	11003fcc 	andi	r4,r2,255
  810854:	2100201c 	xori	r4,r4,128
  810858:	213fe004 	addi	r4,r4,-128
  81085c:	003e1506 	br	8100b4 <find_file_in_directory+0x3c8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810860:	18bff804 	addi	r2,r3,-32
  810864:	10803fcc 	andi	r2,r2,255
  810868:	1080201c 	xori	r2,r2,128
  81086c:	10bfe004 	addi	r2,r2,-128
  810870:	003dac06 	br	80ff24 <find_file_in_directory+0x238>
  810874:	18bff804 	addi	r2,r3,-32
  810878:	11003fcc 	andi	r4,r2,255
  81087c:	2100201c 	xori	r4,r4,128
  810880:	213fe004 	addi	r4,r4,-128
  810884:	003da006 	br	80ff08 <find_file_in_directory+0x21c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810888:	18803fcc 	andi	r2,r3,255
  81088c:	1080201c 	xori	r2,r2,128
  810890:	10bfe004 	addi	r2,r2,-128
  810894:	003e1f06 	br	810114 <find_file_in_directory+0x428>
  810898:	19003fcc 	andi	r4,r3,255
  81089c:	2100201c 	xori	r4,r4,128
  8108a0:	213fe004 	addi	r4,r4,-128
  8108a4:	003e1306 	br	8100f4 <find_file_in_directory+0x408>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8108a8:	18bff804 	addi	r2,r3,-32
  8108ac:	10803fcc 	andi	r2,r2,255
  8108b0:	1080201c 	xori	r2,r2,128
  8108b4:	10bfe004 	addi	r2,r2,-128
  8108b8:	003da906 	br	80ff60 <find_file_in_directory+0x274>
  8108bc:	18bff804 	addi	r2,r3,-32
  8108c0:	11003fcc 	andi	r4,r2,255
  8108c4:	2100201c 	xori	r4,r4,128
  8108c8:	213fe004 	addi	r4,r4,-128
  8108cc:	003d9d06 	br	80ff44 <find_file_in_directory+0x258>
  8108d0:	18bff804 	addi	r2,r3,-32
  8108d4:	10803fcc 	andi	r2,r2,255
  8108d8:	1080201c 	xori	r2,r2,128
  8108dc:	10bfe004 	addi	r2,r2,-128
  8108e0:	003dae06 	br	80ff9c <find_file_in_directory+0x2b0>
  8108e4:	18bff804 	addi	r2,r3,-32
  8108e8:	11003fcc 	andi	r4,r2,255
  8108ec:	2100201c 	xori	r4,r4,128
  8108f0:	213fe004 	addi	r4,r4,-128
  8108f4:	003da206 	br	80ff80 <find_file_in_directory+0x294>
  8108f8:	18bff804 	addi	r2,r3,-32
  8108fc:	10803fcc 	andi	r2,r2,255
  810900:	1080201c 	xori	r2,r2,128
  810904:	10bfe004 	addi	r2,r2,-128
  810908:	003db306 	br	80ffd8 <find_file_in_directory+0x2ec>
  81090c:	18bff804 	addi	r2,r3,-32
  810910:	11003fcc 	andi	r4,r2,255
  810914:	2100201c 	xori	r4,r4,128
  810918:	213fe004 	addi	r4,r4,-128
  81091c:	003da706 	br	80ffbc <find_file_in_directory+0x2d0>
  810920:	18bff804 	addi	r2,r3,-32
  810924:	10803fcc 	andi	r2,r2,255
  810928:	1080201c 	xori	r2,r2,128
  81092c:	10bfe004 	addi	r2,r2,-128
  810930:	003db806 	br	810014 <find_file_in_directory+0x328>
  810934:	18bff804 	addi	r2,r3,-32
  810938:	11003fcc 	andi	r4,r2,255
  81093c:	2100201c 	xori	r4,r4,128
  810940:	213fe004 	addi	r4,r4,-128
  810944:	003dac06 	br	80fff8 <find_file_in_directory+0x30c>
  810948:	18803fcc 	andi	r2,r3,255
  81094c:	1080201c 	xori	r2,r2,128
  810950:	10bfe004 	addi	r2,r2,-128
  810954:	003dc006 	br	810058 <find_file_in_directory+0x36c>
  810958:	19003fcc 	andi	r4,r3,255
  81095c:	2100201c 	xori	r4,r4,128
  810960:	213fe004 	addi	r4,r4,-128
  810964:	003db406 	br	810038 <find_file_in_directory+0x34c>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
  810968:	05400044 	movi	r21,1
  81096c:	003df206 	br	810138 <find_file_in_directory+0x44c>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810970:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  810974:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810978:	d88000c5 	stb	r2,3(sp)
  81097c:	d8800105 	stb	r2,4(sp)
  810980:	d8800145 	stb	r2,5(sp)
  810984:	d8800185 	stb	r2,6(sp)
  810988:	d88001c5 	stb	r2,7(sp)
  81098c:	d8800205 	stb	r2,8(sp)
  810990:	d8800245 	stb	r2,9(sp)
  810994:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810998:	d8800005 	stb	r2,0(sp)
  81099c:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  8109a0:	9809883a 	mov	r4,r19
  8109a4:	0803e880 	call	803e88 <strlen>
  8109a8:	102b883a 	mov	r21,r2
  8109ac:	003cfb06 	br	80fd9c <find_file_in_directory+0xb0>

008109b0 <get_home_directory_cluster_for_file>:
}


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  8109b0:	deffee04 	addi	sp,sp,-72
  8109b4:	dc400915 	stw	r17,36(sp)
  8109b8:	dfc01115 	stw	ra,68(sp)
  8109bc:	df001015 	stw	fp,64(sp)
  8109c0:	ddc00f15 	stw	r23,60(sp)
  8109c4:	dd800e15 	stw	r22,56(sp)
  8109c8:	dd400d15 	stw	r21,52(sp)
  8109cc:	dd000c15 	stw	r20,48(sp)
  8109d0:	dcc00b15 	stw	r19,44(sp)
  8109d4:	dc800a15 	stw	r18,40(sp)
  8109d8:	dc000815 	stw	r16,32(sp)
  8109dc:	d9400715 	stw	r5,28(sp)
  8109e0:	d9000615 	stw	r4,24(sp)
  8109e4:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8109e8:	0803e880 	call	803e88 <strlen>
    
    for(index = 0; index < length; index++)
  8109ec:	00831b0e 	bge	zero,r2,81165c <get_home_directory_cluster_for_file+0xcac>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8109f0:	d9000617 	ldw	r4,24(sp)
  8109f4:	01401704 	movi	r5,92
  8109f8:	20c00007 	ldb	r3,0(r4)
  8109fc:	19431726 	beq	r3,r5,81165c <get_home_directory_cluster_for_file+0xcac>
  810a00:	01000bc4 	movi	r4,47
  810a04:	19031526 	beq	r3,r4,81165c <get_home_directory_cluster_for_file+0xcac>
  810a08:	002d883a 	mov	r22,zero
  810a0c:	00000306 	br	810a1c <get_home_directory_cluster_for_file+0x6c>
  810a10:	18c00007 	ldb	r3,0(r3)
  810a14:	19400b26 	beq	r3,r5,810a44 <get_home_directory_cluster_for_file+0x94>
  810a18:	19000a26 	beq	r3,r4,810a44 <get_home_directory_cluster_for_file+0x94>
  810a1c:	d9800617 	ldw	r6,24(sp)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810a20:	b5800044 	addi	r22,r22,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810a24:	3587883a 	add	r3,r6,r22
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810a28:	15bff91e 	bne	r2,r22,810a10 <get_home_directory_cluster_for_file+0x60>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  810a2c:	d9000717 	ldw	r4,28(sp)
  810a30:	20000015 	stw	zero,0(r4)
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  810a34:	01800044 	movi	r6,1
  810a38:	d9800515 	stw	r6,20(sp)
  810a3c:	88000a15 	stw	zero,40(r17)
  810a40:	0000f106 	br	810e08 <get_home_directory_cluster_for_file+0x458>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  810a44:	0583060e 	bge	zero,r22,811660 <get_home_directory_cluster_for_file+0xcb0>
  810a48:	dc000617 	ldw	r16,24(sp)
  810a4c:	d8000515 	stw	zero,20(sp)
  810a50:	0027883a 	mov	r19,zero
  810a54:	d8000415 	stw	zero,16(sp)
  810a58:	07002074 	movhi	fp,129
  810a5c:	e71d8204 	addi	fp,fp,30216
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810a60:	00800804 	movi	r2,32
        char extension[3] = { ' ', ' ', ' ' };
  810a64:	8009883a 	mov	r4,r16
  810a68:	000d883a 	mov	r6,zero
  810a6c:	01ffffc4 	movi	r7,-1
  810a70:	02000b84 	movi	r8,46
  810a74:	da4000c4 	addi	r9,sp,3
  810a78:	d8800085 	stb	r2,2(sp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810a7c:	d88000c5 	stb	r2,3(sp)
  810a80:	d8800105 	stb	r2,4(sp)
  810a84:	d8800145 	stb	r2,5(sp)
  810a88:	d8800185 	stb	r2,6(sp)
  810a8c:	d88001c5 	stb	r2,7(sp)
  810a90:	d8800205 	stb	r2,8(sp)
  810a94:	d8800245 	stb	r2,9(sp)
  810a98:	d8800285 	stb	r2,10(sp)
        char extension[3] = { ' ', ' ', ' ' };
  810a9c:	d8800005 	stb	r2,0(sp)
  810aa0:	d8800045 	stb	r2,1(sp)
  810aa4:	00000806 	br	810ac8 <get_home_directory_cluster_for_file+0x118>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  810aa8:	31c5c83a 	sub	r2,r6,r7
  810aac:	d885883a 	add	r2,sp,r2
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
  810ab0:	498b883a 	add	r5,r9,r6
        {
            if (file_name[index+start_location] == '.')
            {
                ext_index = index;
            }
            else if (ext_index < 0)
  810ab4:	3800e116 	blt	r7,zero,810e3c <get_home_directory_cluster_for_file+0x48c>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  810ab8:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  810abc:	31800044 	addi	r6,r6,1
  810ac0:	21000044 	addi	r4,r4,1
  810ac4:	3580090e 	bge	r6,r22,810aec <get_home_directory_cluster_for_file+0x13c>
        {
            if (file_name[index+start_location] == '.')
  810ac8:	20c00003 	ldbu	r3,0(r4)
  810acc:	18803fcc 	andi	r2,r3,255
  810ad0:	1080201c 	xori	r2,r2,128
  810ad4:	10bfe004 	addi	r2,r2,-128
  810ad8:	123ff31e 	bne	r2,r8,810aa8 <get_home_directory_cluster_for_file+0xf8>
  810adc:	300f883a 	mov	r7,r6
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  810ae0:	31800044 	addi	r6,r6,1
  810ae4:	21000044 	addi	r4,r4,1
  810ae8:	35bff716 	blt	r6,r22,810ac8 <get_home_directory_cluster_for_file+0x118>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  810aec:	98014c1e 	bne	r19,zero,811020 <get_home_directory_cluster_for_file+0x670>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  810af0:	e080050b 	ldhu	r2,20(fp)
  810af4:	e0c0030b 	ldhu	r3,12(fp)
  810af8:	1004917a 	slli	r2,r2,5
  810afc:	10e9283a 	div	r20,r2,r3
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810b00:	a000c026 	beq	r20,zero,810e04 <get_home_directory_cluster_for_file+0x454>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  810b04:	e1001317 	ldw	r4,76(fp)
  810b08:	d1675b17 	ldw	r5,-25236(gp)
  810b0c:	9909883a 	add	r4,r19,r4
  810b10:	080eb300 	call	80eb30 <Read_Sector_Data>
  810b14:	1000bb26 	beq	r2,zero,810e04 <get_home_directory_cluster_for_file+0x454>
                        }
                    }
                }
                else
                {
                    break;
  810b18:	0025883a 	mov	r18,zero
  810b1c:	04000644 	movi	r16,25
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  810b20:	9009883a 	mov	r4,r18
  810b24:	880b883a 	mov	r5,r17
  810b28:	000d883a 	mov	r6,zero
  810b2c:	980f883a 	mov	r7,r19
  810b30:	080e8a40 	call	80e8a4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  810b34:	89000003 	ldbu	r4,0(r17)
  810b38:	00803944 	movi	r2,229
  810b3c:	20c03fcc 	andi	r3,r4,255
  810b40:	1880ab26 	beq	r3,r2,810df0 <get_home_directory_cluster_for_file+0x440>
  810b44:	1800aa26 	beq	r3,zero,810df0 <get_home_directory_cluster_for_file+0x440>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810b48:	20bfe7c4 	addi	r2,r4,-97
  810b4c:	10803fcc 	andi	r2,r2,255
  810b50:	8080cd2e 	bgeu	r16,r2,810e88 <get_home_directory_cluster_for_file+0x4d8>
  810b54:	21003fcc 	andi	r4,r4,255
  810b58:	2100201c 	xori	r4,r4,128
  810b5c:	213fe004 	addi	r4,r4,-128
  810b60:	d8c000c3 	ldbu	r3,3(sp)
  810b64:	18bfe7c4 	addi	r2,r3,-97
  810b68:	10803fcc 	andi	r2,r2,255
  810b6c:	8080bf2e 	bgeu	r16,r2,810e6c <get_home_directory_cluster_for_file+0x4bc>
  810b70:	18803fcc 	andi	r2,r3,255
  810b74:	1080201c 	xori	r2,r2,128
  810b78:	10bfe004 	addi	r2,r2,-128
  810b7c:	2080c01e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810b80:	88c00043 	ldbu	r3,1(r17)
  810b84:	18bfe7c4 	addi	r2,r3,-97
  810b88:	10803fcc 	andi	r2,r2,255
  810b8c:	8080c82e 	bgeu	r16,r2,810eb0 <get_home_directory_cluster_for_file+0x500>
  810b90:	19003fcc 	andi	r4,r3,255
  810b94:	2100201c 	xori	r4,r4,128
  810b98:	213fe004 	addi	r4,r4,-128
  810b9c:	d8c00103 	ldbu	r3,4(sp)
  810ba0:	18bfe7c4 	addi	r2,r3,-97
  810ba4:	10803fcc 	andi	r2,r2,255
  810ba8:	8080bc2e 	bgeu	r16,r2,810e9c <get_home_directory_cluster_for_file+0x4ec>
  810bac:	18803fcc 	andi	r2,r3,255
  810bb0:	1080201c 	xori	r2,r2,128
  810bb4:	10bfe004 	addi	r2,r2,-128
  810bb8:	2080b11e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810bbc:	88c00083 	ldbu	r3,2(r17)
  810bc0:	18bfe7c4 	addi	r2,r3,-97
  810bc4:	10803fcc 	andi	r2,r2,255
  810bc8:	8080d52e 	bgeu	r16,r2,810f20 <get_home_directory_cluster_for_file+0x570>
  810bcc:	19003fcc 	andi	r4,r3,255
  810bd0:	2100201c 	xori	r4,r4,128
  810bd4:	213fe004 	addi	r4,r4,-128
  810bd8:	d8c00143 	ldbu	r3,5(sp)
  810bdc:	18bfe7c4 	addi	r2,r3,-97
  810be0:	10803fcc 	andi	r2,r2,255
  810be4:	8080c92e 	bgeu	r16,r2,810f0c <get_home_directory_cluster_for_file+0x55c>
  810be8:	18803fcc 	andi	r2,r3,255
  810bec:	1080201c 	xori	r2,r2,128
  810bf0:	10bfe004 	addi	r2,r2,-128
  810bf4:	2080a21e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810bf8:	88c000c3 	ldbu	r3,3(r17)
  810bfc:	18bfe7c4 	addi	r2,r3,-97
  810c00:	10803fcc 	andi	r2,r2,255
  810c04:	8080d02e 	bgeu	r16,r2,810f48 <get_home_directory_cluster_for_file+0x598>
  810c08:	19003fcc 	andi	r4,r3,255
  810c0c:	2100201c 	xori	r4,r4,128
  810c10:	213fe004 	addi	r4,r4,-128
  810c14:	d8c00183 	ldbu	r3,6(sp)
  810c18:	18bfe7c4 	addi	r2,r3,-97
  810c1c:	10803fcc 	andi	r2,r2,255
  810c20:	8080c42e 	bgeu	r16,r2,810f34 <get_home_directory_cluster_for_file+0x584>
  810c24:	18803fcc 	andi	r2,r3,255
  810c28:	1080201c 	xori	r2,r2,128
  810c2c:	10bfe004 	addi	r2,r2,-128
  810c30:	2080931e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810c34:	88c00103 	ldbu	r3,4(r17)
  810c38:	18bfe7c4 	addi	r2,r3,-97
  810c3c:	10803fcc 	andi	r2,r2,255
  810c40:	8080cb2e 	bgeu	r16,r2,810f70 <get_home_directory_cluster_for_file+0x5c0>
  810c44:	19003fcc 	andi	r4,r3,255
  810c48:	2100201c 	xori	r4,r4,128
  810c4c:	213fe004 	addi	r4,r4,-128
  810c50:	d8c001c3 	ldbu	r3,7(sp)
  810c54:	18bfe7c4 	addi	r2,r3,-97
  810c58:	10803fcc 	andi	r2,r2,255
  810c5c:	8080bf2e 	bgeu	r16,r2,810f5c <get_home_directory_cluster_for_file+0x5ac>
  810c60:	18803fcc 	andi	r2,r3,255
  810c64:	1080201c 	xori	r2,r2,128
  810c68:	10bfe004 	addi	r2,r2,-128
  810c6c:	2080841e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810c70:	88c00143 	ldbu	r3,5(r17)
  810c74:	18bfe7c4 	addi	r2,r3,-97
  810c78:	10803fcc 	andi	r2,r2,255
  810c7c:	8080c62e 	bgeu	r16,r2,810f98 <get_home_directory_cluster_for_file+0x5e8>
  810c80:	19003fcc 	andi	r4,r3,255
  810c84:	2100201c 	xori	r4,r4,128
  810c88:	213fe004 	addi	r4,r4,-128
  810c8c:	d8c00203 	ldbu	r3,8(sp)
  810c90:	18bfe7c4 	addi	r2,r3,-97
  810c94:	10803fcc 	andi	r2,r2,255
  810c98:	8080ba2e 	bgeu	r16,r2,810f84 <get_home_directory_cluster_for_file+0x5d4>
  810c9c:	18803fcc 	andi	r2,r3,255
  810ca0:	1080201c 	xori	r2,r2,128
  810ca4:	10bfe004 	addi	r2,r2,-128
  810ca8:	2080751e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810cac:	88c00183 	ldbu	r3,6(r17)
  810cb0:	18bfe7c4 	addi	r2,r3,-97
  810cb4:	10803fcc 	andi	r2,r2,255
  810cb8:	8080c12e 	bgeu	r16,r2,810fc0 <get_home_directory_cluster_for_file+0x610>
  810cbc:	19003fcc 	andi	r4,r3,255
  810cc0:	2100201c 	xori	r4,r4,128
  810cc4:	213fe004 	addi	r4,r4,-128
  810cc8:	d8c00243 	ldbu	r3,9(sp)
  810ccc:	18bfe7c4 	addi	r2,r3,-97
  810cd0:	10803fcc 	andi	r2,r2,255
  810cd4:	8080b52e 	bgeu	r16,r2,810fac <get_home_directory_cluster_for_file+0x5fc>
  810cd8:	18803fcc 	andi	r2,r3,255
  810cdc:	1080201c 	xori	r2,r2,128
  810ce0:	10bfe004 	addi	r2,r2,-128
  810ce4:	2080661e 	bne	r4,r2,810e80 <get_home_directory_cluster_for_file+0x4d0>
  810ce8:	88c001c3 	ldbu	r3,7(r17)
  810cec:	18bfe7c4 	addi	r2,r3,-97
  810cf0:	10803fcc 	andi	r2,r2,255
  810cf4:	8080bb36 	bltu	r16,r2,810fe4 <get_home_directory_cluster_for_file+0x634>
  810cf8:	18bff804 	addi	r2,r3,-32
  810cfc:	11003fcc 	andi	r4,r2,255
  810d00:	2100201c 	xori	r4,r4,128
  810d04:	213fe004 	addi	r4,r4,-128
  810d08:	d8c00283 	ldbu	r3,10(sp)
  810d0c:	18bfe7c4 	addi	r2,r3,-97
  810d10:	10803fcc 	andi	r2,r2,255
  810d14:	8080af36 	bltu	r16,r2,810fd4 <get_home_directory_cluster_for_file+0x624>
  810d18:	18bff804 	addi	r2,r3,-32
  810d1c:	10803fcc 	andi	r2,r2,255
  810d20:	1080201c 	xori	r2,r2,128
  810d24:	10bfe004 	addi	r2,r2,-128
  810d28:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810d2c:	88c00203 	ldbu	r3,8(r17)
  810d30:	18bfe7c4 	addi	r2,r3,-97
  810d34:	10803fcc 	andi	r2,r2,255
  810d38:	8080472e 	bgeu	r16,r2,810e58 <get_home_directory_cluster_for_file+0x4a8>
  810d3c:	19003fcc 	andi	r4,r3,255
  810d40:	2100201c 	xori	r4,r4,128
  810d44:	213fe004 	addi	r4,r4,-128
  810d48:	d8c00003 	ldbu	r3,0(sp)
  810d4c:	18bfe7c4 	addi	r2,r3,-97
  810d50:	10803fcc 	andi	r2,r2,255
  810d54:	80803b2e 	bgeu	r16,r2,810e44 <get_home_directory_cluster_for_file+0x494>
  810d58:	18803fcc 	andi	r2,r3,255
  810d5c:	1080201c 	xori	r2,r2,128
  810d60:	10bfe004 	addi	r2,r2,-128
  810d64:	2080221e 	bne	r4,r2,810df0 <get_home_directory_cluster_for_file+0x440>
  810d68:	88c00243 	ldbu	r3,9(r17)
  810d6c:	18bfe7c4 	addi	r2,r3,-97
  810d70:	10803fcc 	andi	r2,r2,255
  810d74:	8080582e 	bgeu	r16,r2,810ed8 <get_home_directory_cluster_for_file+0x528>
  810d78:	19003fcc 	andi	r4,r3,255
  810d7c:	2100201c 	xori	r4,r4,128
  810d80:	213fe004 	addi	r4,r4,-128
  810d84:	d8c00043 	ldbu	r3,1(sp)
  810d88:	18bfe7c4 	addi	r2,r3,-97
  810d8c:	10803fcc 	andi	r2,r2,255
  810d90:	80804c2e 	bgeu	r16,r2,810ec4 <get_home_directory_cluster_for_file+0x514>
  810d94:	18803fcc 	andi	r2,r3,255
  810d98:	1080201c 	xori	r2,r2,128
  810d9c:	10bfe004 	addi	r2,r2,-128
  810da0:	2080131e 	bne	r4,r2,810df0 <get_home_directory_cluster_for_file+0x440>
  810da4:	88c00283 	ldbu	r3,10(r17)
  810da8:	18bfe7c4 	addi	r2,r3,-97
  810dac:	10803fcc 	andi	r2,r2,255
  810db0:	80805236 	bltu	r16,r2,810efc <get_home_directory_cluster_for_file+0x54c>
  810db4:	18bff804 	addi	r2,r3,-32
  810db8:	11003fcc 	andi	r4,r2,255
  810dbc:	2100201c 	xori	r4,r4,128
  810dc0:	213fe004 	addi	r4,r4,-128
  810dc4:	d8c00083 	ldbu	r3,2(sp)
  810dc8:	18bfe7c4 	addi	r2,r3,-97
  810dcc:	10803fcc 	andi	r2,r2,255
  810dd0:	80804636 	bltu	r16,r2,810eec <get_home_directory_cluster_for_file+0x53c>
  810dd4:	18bff804 	addi	r2,r3,-32
  810dd8:	10803fcc 	andi	r2,r2,255
  810ddc:	1080201c 	xori	r2,r2,128
  810de0:	10bfe004 	addi	r2,r2,-128
  810de4:	2080021e 	bne	r4,r2,810df0 <get_home_directory_cluster_for_file+0x440>
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
  810de8:	2805003a 	cmpeq	r2,r5,zero
  810dec:	10008126 	beq	r2,zero,810ff4 <get_home_directory_cluster_for_file+0x644>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  810df0:	94800804 	addi	r18,r18,32
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  810df4:	00808004 	movi	r2,512
  810df8:	90bf491e 	bne	r18,r2,810b20 <get_home_directory_cluster_for_file+0x170>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810dfc:	9cc00044 	addi	r19,r19,1
  810e00:	a4ff401e 	bne	r20,r19,810b04 <get_home_directory_cluster_for_file+0x154>
    }
    
    *home_directory_cluster = home_dir_cluster;
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  810e04:	d8000515 	stw	zero,20(sp)
		result = true;
    }
    return result;
}
  810e08:	d8800517 	ldw	r2,20(sp)
  810e0c:	dfc01117 	ldw	ra,68(sp)
  810e10:	df001017 	ldw	fp,64(sp)
  810e14:	ddc00f17 	ldw	r23,60(sp)
  810e18:	dd800e17 	ldw	r22,56(sp)
  810e1c:	dd400d17 	ldw	r21,52(sp)
  810e20:	dd000c17 	ldw	r20,48(sp)
  810e24:	dcc00b17 	ldw	r19,44(sp)
  810e28:	dc800a17 	ldw	r18,40(sp)
  810e2c:	dc400917 	ldw	r17,36(sp)
  810e30:	dc000817 	ldw	r16,32(sp)
  810e34:	dec01204 	addi	sp,sp,72
  810e38:	f800283a 	ret
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
  810e3c:	28c00005 	stb	r3,0(r5)
  810e40:	003f1e06 	br	810abc <get_home_directory_cluster_for_file+0x10c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810e44:	18bff804 	addi	r2,r3,-32
  810e48:	10803fcc 	andi	r2,r2,255
  810e4c:	1080201c 	xori	r2,r2,128
  810e50:	10bfe004 	addi	r2,r2,-128
  810e54:	003fc306 	br	810d64 <get_home_directory_cluster_for_file+0x3b4>
  810e58:	18bff804 	addi	r2,r3,-32
  810e5c:	11003fcc 	andi	r4,r2,255
  810e60:	2100201c 	xori	r4,r4,128
  810e64:	213fe004 	addi	r4,r4,-128
  810e68:	003fb706 	br	810d48 <get_home_directory_cluster_for_file+0x398>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810e6c:	18bff804 	addi	r2,r3,-32
  810e70:	10803fcc 	andi	r2,r2,255
  810e74:	1080201c 	xori	r2,r2,128
  810e78:	10bfe004 	addi	r2,r2,-128
  810e7c:	20bf4026 	beq	r4,r2,810b80 <get_home_directory_cluster_for_file+0x1d0>
  810e80:	000b883a 	mov	r5,zero
  810e84:	003fa906 	br	810d2c <get_home_directory_cluster_for_file+0x37c>
  810e88:	20bff804 	addi	r2,r4,-32
  810e8c:	11003fcc 	andi	r4,r2,255
  810e90:	2100201c 	xori	r4,r4,128
  810e94:	213fe004 	addi	r4,r4,-128
  810e98:	003f3106 	br	810b60 <get_home_directory_cluster_for_file+0x1b0>
  810e9c:	18bff804 	addi	r2,r3,-32
  810ea0:	10803fcc 	andi	r2,r2,255
  810ea4:	1080201c 	xori	r2,r2,128
  810ea8:	10bfe004 	addi	r2,r2,-128
  810eac:	003f4206 	br	810bb8 <get_home_directory_cluster_for_file+0x208>
  810eb0:	18bff804 	addi	r2,r3,-32
  810eb4:	11003fcc 	andi	r4,r2,255
  810eb8:	2100201c 	xori	r4,r4,128
  810ebc:	213fe004 	addi	r4,r4,-128
  810ec0:	003f3606 	br	810b9c <get_home_directory_cluster_for_file+0x1ec>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810ec4:	18bff804 	addi	r2,r3,-32
  810ec8:	10803fcc 	andi	r2,r2,255
  810ecc:	1080201c 	xori	r2,r2,128
  810ed0:	10bfe004 	addi	r2,r2,-128
  810ed4:	003fb206 	br	810da0 <get_home_directory_cluster_for_file+0x3f0>
  810ed8:	18bff804 	addi	r2,r3,-32
  810edc:	11003fcc 	andi	r4,r2,255
  810ee0:	2100201c 	xori	r4,r4,128
  810ee4:	213fe004 	addi	r4,r4,-128
  810ee8:	003fa606 	br	810d84 <get_home_directory_cluster_for_file+0x3d4>
  810eec:	18803fcc 	andi	r2,r3,255
  810ef0:	1080201c 	xori	r2,r2,128
  810ef4:	10bfe004 	addi	r2,r2,-128
  810ef8:	003fba06 	br	810de4 <get_home_directory_cluster_for_file+0x434>
  810efc:	19003fcc 	andi	r4,r3,255
  810f00:	2100201c 	xori	r4,r4,128
  810f04:	213fe004 	addi	r4,r4,-128
  810f08:	003fae06 	br	810dc4 <get_home_directory_cluster_for_file+0x414>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810f0c:	18bff804 	addi	r2,r3,-32
  810f10:	10803fcc 	andi	r2,r2,255
  810f14:	1080201c 	xori	r2,r2,128
  810f18:	10bfe004 	addi	r2,r2,-128
  810f1c:	003f3506 	br	810bf4 <get_home_directory_cluster_for_file+0x244>
  810f20:	18bff804 	addi	r2,r3,-32
  810f24:	11003fcc 	andi	r4,r2,255
  810f28:	2100201c 	xori	r4,r4,128
  810f2c:	213fe004 	addi	r4,r4,-128
  810f30:	003f2906 	br	810bd8 <get_home_directory_cluster_for_file+0x228>
  810f34:	18bff804 	addi	r2,r3,-32
  810f38:	10803fcc 	andi	r2,r2,255
  810f3c:	1080201c 	xori	r2,r2,128
  810f40:	10bfe004 	addi	r2,r2,-128
  810f44:	003f3a06 	br	810c30 <get_home_directory_cluster_for_file+0x280>
  810f48:	18bff804 	addi	r2,r3,-32
  810f4c:	11003fcc 	andi	r4,r2,255
  810f50:	2100201c 	xori	r4,r4,128
  810f54:	213fe004 	addi	r4,r4,-128
  810f58:	003f2e06 	br	810c14 <get_home_directory_cluster_for_file+0x264>
  810f5c:	18bff804 	addi	r2,r3,-32
  810f60:	10803fcc 	andi	r2,r2,255
  810f64:	1080201c 	xori	r2,r2,128
  810f68:	10bfe004 	addi	r2,r2,-128
  810f6c:	003f3f06 	br	810c6c <get_home_directory_cluster_for_file+0x2bc>
  810f70:	18bff804 	addi	r2,r3,-32
  810f74:	11003fcc 	andi	r4,r2,255
  810f78:	2100201c 	xori	r4,r4,128
  810f7c:	213fe004 	addi	r4,r4,-128
  810f80:	003f3306 	br	810c50 <get_home_directory_cluster_for_file+0x2a0>
  810f84:	18bff804 	addi	r2,r3,-32
  810f88:	10803fcc 	andi	r2,r2,255
  810f8c:	1080201c 	xori	r2,r2,128
  810f90:	10bfe004 	addi	r2,r2,-128
  810f94:	003f4406 	br	810ca8 <get_home_directory_cluster_for_file+0x2f8>
  810f98:	18bff804 	addi	r2,r3,-32
  810f9c:	11003fcc 	andi	r4,r2,255
  810fa0:	2100201c 	xori	r4,r4,128
  810fa4:	213fe004 	addi	r4,r4,-128
  810fa8:	003f3806 	br	810c8c <get_home_directory_cluster_for_file+0x2dc>
  810fac:	18bff804 	addi	r2,r3,-32
  810fb0:	10803fcc 	andi	r2,r2,255
  810fb4:	1080201c 	xori	r2,r2,128
  810fb8:	10bfe004 	addi	r2,r2,-128
  810fbc:	003f4906 	br	810ce4 <get_home_directory_cluster_for_file+0x334>
  810fc0:	18bff804 	addi	r2,r3,-32
  810fc4:	11003fcc 	andi	r4,r2,255
  810fc8:	2100201c 	xori	r4,r4,128
  810fcc:	213fe004 	addi	r4,r4,-128
  810fd0:	003f3d06 	br	810cc8 <get_home_directory_cluster_for_file+0x318>
  810fd4:	18803fcc 	andi	r2,r3,255
  810fd8:	1080201c 	xori	r2,r2,128
  810fdc:	10bfe004 	addi	r2,r2,-128
  810fe0:	003f5106 	br	810d28 <get_home_directory_cluster_for_file+0x378>
  810fe4:	19003fcc 	andi	r4,r3,255
  810fe8:	2100201c 	xori	r4,r4,128
  810fec:	213fe004 	addi	r4,r4,-128
  810ff0:	003f4506 	br	810d08 <get_home_directory_cluster_for_file+0x358>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
                            {
                                new_cluster = file_record->start_cluster_index;
  810ff4:	8980058b 	ldhu	r6,22(r17)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  810ff8:	00800044 	movi	r2,1
  810ffc:	88800a15 	stw	r2,40(r17)
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  811000:	303f7e26 	beq	r6,zero,810dfc <get_home_directory_cluster_for_file+0x44c>
            }
            if (new_cluster != home_dir_cluster)
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
  811004:	d8c00417 	ldw	r3,16(sp)
  811008:	3027883a 	mov	r19,r6
  81100c:	18800044 	addi	r2,r3,1
  811010:	b0ad883a 	add	r22,r22,r2
  811014:	b007883a 	mov	r3,r22
  811018:	dd800415 	stw	r22,16(sp)
  81101c:	0000f206 	br	8113e8 <get_home_directory_cluster_for_file+0xa38>
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811020:	e1000383 	ldbu	r4,14(fp)
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  811024:	98bfff84 	addi	r2,r19,-2
  811028:	100b883a 	mov	r5,r2
  81102c:	d8800315 	stw	r2,12(sp)
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811030:	e0c01417 	ldw	r3,80(fp)
  811034:	2145383a 	mul	r2,r4,r5
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  811038:	982b883a 	mov	r21,r19
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81103c:	10ef883a 	add	r23,r2,r3
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  811040:	2000df26 	beq	r4,zero,8113c0 <get_home_directory_cluster_for_file+0xa10>
  811044:	0029883a 	mov	r20,zero
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  811048:	d1675b17 	ldw	r5,-25236(gp)
  81104c:	bd09883a 	add	r4,r23,r20
  811050:	080eb300 	call	80eb30 <Read_Sector_Data>
  811054:	1000da26 	beq	r2,zero,8113c0 <get_home_directory_cluster_for_file+0xa10>
                            }
                        }
                    }
                    else
                    {
                        break;
  811058:	0025883a 	mov	r18,zero
  81105c:	04000644 	movi	r16,25
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  811060:	9009883a 	mov	r4,r18
  811064:	880b883a 	mov	r5,r17
  811068:	980d883a 	mov	r6,r19
  81106c:	a00f883a 	mov	r7,r20
  811070:	080e8a40 	call	80e8a4 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  811074:	89000003 	ldbu	r4,0(r17)
  811078:	00803944 	movi	r2,229
  81107c:	20c03fcc 	andi	r3,r4,255
  811080:	1880ab26 	beq	r3,r2,811330 <get_home_directory_cluster_for_file+0x980>
  811084:	1800aa26 	beq	r3,zero,811330 <get_home_directory_cluster_for_file+0x980>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811088:	20bfe7c4 	addi	r2,r4,-97
  81108c:	10803fcc 	andi	r2,r2,255
  811090:	8081002e 	bgeu	r16,r2,811494 <get_home_directory_cluster_for_file+0xae4>
  811094:	21003fcc 	andi	r4,r4,255
  811098:	2100201c 	xori	r4,r4,128
  81109c:	213fe004 	addi	r4,r4,-128
  8110a0:	d8c000c3 	ldbu	r3,3(sp)
  8110a4:	18bfe7c4 	addi	r2,r3,-97
  8110a8:	10803fcc 	andi	r2,r2,255
  8110ac:	8080f22e 	bgeu	r16,r2,811478 <get_home_directory_cluster_for_file+0xac8>
  8110b0:	18803fcc 	andi	r2,r3,255
  8110b4:	1080201c 	xori	r2,r2,128
  8110b8:	10bfe004 	addi	r2,r2,-128
  8110bc:	1100f31e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  8110c0:	88c00043 	ldbu	r3,1(r17)
  8110c4:	18bfe7c4 	addi	r2,r3,-97
  8110c8:	10803fcc 	andi	r2,r2,255
  8110cc:	8080fb2e 	bgeu	r16,r2,8114bc <get_home_directory_cluster_for_file+0xb0c>
  8110d0:	19003fcc 	andi	r4,r3,255
  8110d4:	2100201c 	xori	r4,r4,128
  8110d8:	213fe004 	addi	r4,r4,-128
  8110dc:	d8c00103 	ldbu	r3,4(sp)
  8110e0:	18bfe7c4 	addi	r2,r3,-97
  8110e4:	10803fcc 	andi	r2,r2,255
  8110e8:	8080ef2e 	bgeu	r16,r2,8114a8 <get_home_directory_cluster_for_file+0xaf8>
  8110ec:	18803fcc 	andi	r2,r3,255
  8110f0:	1080201c 	xori	r2,r2,128
  8110f4:	10bfe004 	addi	r2,r2,-128
  8110f8:	1100e41e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  8110fc:	88c00083 	ldbu	r3,2(r17)
  811100:	18bfe7c4 	addi	r2,r3,-97
  811104:	10803fcc 	andi	r2,r2,255
  811108:	8081062e 	bgeu	r16,r2,811524 <get_home_directory_cluster_for_file+0xb74>
  81110c:	19003fcc 	andi	r4,r3,255
  811110:	d8c00143 	ldbu	r3,5(sp)
  811114:	2100201c 	xori	r4,r4,128
  811118:	213fe004 	addi	r4,r4,-128
  81111c:	18bfe7c4 	addi	r2,r3,-97
  811120:	10803fcc 	andi	r2,r2,255
  811124:	8081072e 	bgeu	r16,r2,811544 <get_home_directory_cluster_for_file+0xb94>
  811128:	18803fcc 	andi	r2,r3,255
  81112c:	1080201c 	xori	r2,r2,128
  811130:	10bfe004 	addi	r2,r2,-128
  811134:	1100d51e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  811138:	88c000c3 	ldbu	r3,3(r17)
  81113c:	18bfe7c4 	addi	r2,r3,-97
  811140:	10803fcc 	andi	r2,r2,255
  811144:	8081042e 	bgeu	r16,r2,811558 <get_home_directory_cluster_for_file+0xba8>
  811148:	19003fcc 	andi	r4,r3,255
  81114c:	d8c00183 	ldbu	r3,6(sp)
  811150:	2100201c 	xori	r4,r4,128
  811154:	213fe004 	addi	r4,r4,-128
  811158:	18bfe7c4 	addi	r2,r3,-97
  81115c:	10803fcc 	andi	r2,r2,255
  811160:	8081052e 	bgeu	r16,r2,811578 <get_home_directory_cluster_for_file+0xbc8>
  811164:	18803fcc 	andi	r2,r3,255
  811168:	1080201c 	xori	r2,r2,128
  81116c:	10bfe004 	addi	r2,r2,-128
  811170:	1100c61e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  811174:	88c00103 	ldbu	r3,4(r17)
  811178:	18bfe7c4 	addi	r2,r3,-97
  81117c:	10803fcc 	andi	r2,r2,255
  811180:	8081022e 	bgeu	r16,r2,81158c <get_home_directory_cluster_for_file+0xbdc>
  811184:	19003fcc 	andi	r4,r3,255
  811188:	d8c001c3 	ldbu	r3,7(sp)
  81118c:	2100201c 	xori	r4,r4,128
  811190:	213fe004 	addi	r4,r4,-128
  811194:	18bfe7c4 	addi	r2,r3,-97
  811198:	10803fcc 	andi	r2,r2,255
  81119c:	8081032e 	bgeu	r16,r2,8115ac <get_home_directory_cluster_for_file+0xbfc>
  8111a0:	18803fcc 	andi	r2,r3,255
  8111a4:	1080201c 	xori	r2,r2,128
  8111a8:	10bfe004 	addi	r2,r2,-128
  8111ac:	1100b71e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  8111b0:	88c00143 	ldbu	r3,5(r17)
  8111b4:	18bfe7c4 	addi	r2,r3,-97
  8111b8:	10803fcc 	andi	r2,r2,255
  8111bc:	8081002e 	bgeu	r16,r2,8115c0 <get_home_directory_cluster_for_file+0xc10>
  8111c0:	19003fcc 	andi	r4,r3,255
  8111c4:	d8c00203 	ldbu	r3,8(sp)
  8111c8:	2100201c 	xori	r4,r4,128
  8111cc:	213fe004 	addi	r4,r4,-128
  8111d0:	18bfe7c4 	addi	r2,r3,-97
  8111d4:	10803fcc 	andi	r2,r2,255
  8111d8:	8081012e 	bgeu	r16,r2,8115e0 <get_home_directory_cluster_for_file+0xc30>
  8111dc:	18803fcc 	andi	r2,r3,255
  8111e0:	1080201c 	xori	r2,r2,128
  8111e4:	10bfe004 	addi	r2,r2,-128
  8111e8:	1100a81e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  8111ec:	88c00183 	ldbu	r3,6(r17)
  8111f0:	18bfe7c4 	addi	r2,r3,-97
  8111f4:	10803fcc 	andi	r2,r2,255
  8111f8:	8080fe2e 	bgeu	r16,r2,8115f4 <get_home_directory_cluster_for_file+0xc44>
  8111fc:	19003fcc 	andi	r4,r3,255
  811200:	d8c00243 	ldbu	r3,9(sp)
  811204:	2100201c 	xori	r4,r4,128
  811208:	213fe004 	addi	r4,r4,-128
  81120c:	18bfe7c4 	addi	r2,r3,-97
  811210:	10803fcc 	andi	r2,r2,255
  811214:	8080ff2e 	bgeu	r16,r2,811614 <get_home_directory_cluster_for_file+0xc64>
  811218:	18803fcc 	andi	r2,r3,255
  81121c:	1080201c 	xori	r2,r2,128
  811220:	10bfe004 	addi	r2,r2,-128
  811224:	1100991e 	bne	r2,r4,81148c <get_home_directory_cluster_for_file+0xadc>
  811228:	88c001c3 	ldbu	r3,7(r17)
  81122c:	18bfe7c4 	addi	r2,r3,-97
  811230:	10803fcc 	andi	r2,r2,255
  811234:	80810036 	bltu	r16,r2,811638 <get_home_directory_cluster_for_file+0xc88>
  811238:	18bff804 	addi	r2,r3,-32
  81123c:	11003fcc 	andi	r4,r2,255
  811240:	2100201c 	xori	r4,r4,128
  811244:	213fe004 	addi	r4,r4,-128
  811248:	d8c00283 	ldbu	r3,10(sp)
  81124c:	18bfe7c4 	addi	r2,r3,-97
  811250:	10803fcc 	andi	r2,r2,255
  811254:	8080f436 	bltu	r16,r2,811628 <get_home_directory_cluster_for_file+0xc78>
  811258:	18bff804 	addi	r2,r3,-32
  81125c:	10803fcc 	andi	r2,r2,255
  811260:	1080201c 	xori	r2,r2,128
  811264:	10bfe004 	addi	r2,r2,-128
  811268:	110b003a 	cmpeq	r5,r2,r4
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  81126c:	88c00203 	ldbu	r3,8(r17)
  811270:	18bfe7c4 	addi	r2,r3,-97
  811274:	10803fcc 	andi	r2,r2,255
  811278:	80807a2e 	bgeu	r16,r2,811464 <get_home_directory_cluster_for_file+0xab4>
  81127c:	19003fcc 	andi	r4,r3,255
  811280:	2100201c 	xori	r4,r4,128
  811284:	213fe004 	addi	r4,r4,-128
  811288:	d8c00003 	ldbu	r3,0(sp)
  81128c:	18bfe7c4 	addi	r2,r3,-97
  811290:	10803fcc 	andi	r2,r2,255
  811294:	80806e2e 	bgeu	r16,r2,811450 <get_home_directory_cluster_for_file+0xaa0>
  811298:	18803fcc 	andi	r2,r3,255
  81129c:	1080201c 	xori	r2,r2,128
  8112a0:	10bfe004 	addi	r2,r2,-128
  8112a4:	2080221e 	bne	r4,r2,811330 <get_home_directory_cluster_for_file+0x980>
  8112a8:	88c00243 	ldbu	r3,9(r17)
  8112ac:	18bfe7c4 	addi	r2,r3,-97
  8112b0:	10803fcc 	andi	r2,r2,255
  8112b4:	80808b2e 	bgeu	r16,r2,8114e4 <get_home_directory_cluster_for_file+0xb34>
  8112b8:	19003fcc 	andi	r4,r3,255
  8112bc:	2100201c 	xori	r4,r4,128
  8112c0:	213fe004 	addi	r4,r4,-128
  8112c4:	d8c00043 	ldbu	r3,1(sp)
  8112c8:	18bfe7c4 	addi	r2,r3,-97
  8112cc:	10803fcc 	andi	r2,r2,255
  8112d0:	80807f2e 	bgeu	r16,r2,8114d0 <get_home_directory_cluster_for_file+0xb20>
  8112d4:	18803fcc 	andi	r2,r3,255
  8112d8:	1080201c 	xori	r2,r2,128
  8112dc:	10bfe004 	addi	r2,r2,-128
  8112e0:	2080131e 	bne	r4,r2,811330 <get_home_directory_cluster_for_file+0x980>
  8112e4:	88c00283 	ldbu	r3,10(r17)
  8112e8:	18bfe7c4 	addi	r2,r3,-97
  8112ec:	10803fcc 	andi	r2,r2,255
  8112f0:	80808136 	bltu	r16,r2,8114f8 <get_home_directory_cluster_for_file+0xb48>
  8112f4:	18bff804 	addi	r2,r3,-32
  8112f8:	d8c00083 	ldbu	r3,2(sp)
  8112fc:	11003fcc 	andi	r4,r2,255
  811300:	2100201c 	xori	r4,r4,128
  811304:	18bfe7c4 	addi	r2,r3,-97
  811308:	10803fcc 	andi	r2,r2,255
  81130c:	213fe004 	addi	r4,r4,-128
  811310:	80808036 	bltu	r16,r2,811514 <get_home_directory_cluster_for_file+0xb64>
  811314:	18bff804 	addi	r2,r3,-32
  811318:	10803fcc 	andi	r2,r2,255
  81131c:	1080201c 	xori	r2,r2,128
  811320:	10bfe004 	addi	r2,r2,-128
  811324:	2080021e 	bne	r4,r2,811330 <get_home_directory_cluster_for_file+0x980>
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
  811328:	2805003a 	cmpeq	r2,r5,zero
  81132c:	1000c626 	beq	r2,zero,811648 <get_home_directory_cluster_for_file+0xc98>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
                                    break;
  811330:	94800804 	addi	r18,r18,32
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  811334:	00808004 	movi	r2,512
  811338:	90bf491e 	bne	r18,r2,811060 <get_home_directory_cluster_for_file+0x6b0>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  81133c:	acc0171e 	bne	r21,r19,81139c <get_home_directory_cluster_for_file+0x9ec>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  811340:	e0800383 	ldbu	r2,14(fp)
  811344:	a5000044 	addi	r20,r20,1
  811348:	982b883a 	mov	r21,r19
  81134c:	a0bf3e16 	blt	r20,r2,811048 <get_home_directory_cluster_for_file+0x698>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811350:	e0c01117 	ldw	r3,68(fp)
  811354:	d0a75b17 	ldw	r2,-25236(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811358:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  81135c:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  811360:	d0e75f17 	ldw	r3,-25220(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811364:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  811368:	20c00326 	beq	r4,r3,811378 <get_home_directory_cluster_for_file+0x9c8>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  81136c:	000b883a 	mov	r5,zero
  811370:	080eb300 	call	80eb30 <Read_Sector_Data>
  811374:	103ea326 	beq	r2,zero,810e04 <get_home_directory_cluster_for_file+0x454>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811378:	d0e75d17 	ldw	r3,-25228(gp)
  81137c:	98803fcc 	andi	r2,r19,255
  811380:	1085883a 	add	r2,r2,r2
  811384:	19000a17 	ldw	r4,40(r3)
  811388:	1105883a 	add	r2,r2,r4
  81138c:	10c0002b 	ldhuio	r3,0(r2)
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  811390:	00bffe14 	movui	r2,65528
  811394:	1d7ffe0c 	andi	r21,r3,65528
  811398:	a8be9a26 	beq	r21,r2,810e04 <get_home_directory_cluster_for_file+0x454>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  81139c:	00bffdd4 	movui	r2,65527
  8113a0:	14c00a16 	blt	r2,r19,8113cc <get_home_directory_cluster_for_file+0xa1c>
  8113a4:	acc00a1e 	bne	r21,r19,8113d0 <get_home_directory_cluster_for_file+0xa20>
  8113a8:	d9400317 	ldw	r5,12(sp)
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8113ac:	e1000383 	ldbu	r4,14(fp)
  8113b0:	e0c01417 	ldw	r3,80(fp)
  8113b4:	2145383a 	mul	r2,r4,r5
  8113b8:	10ef883a 	add	r23,r2,r3
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8113bc:	203f211e 	bne	r4,zero,811044 <get_home_directory_cluster_for_file+0x694>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  8113c0:	acffe326 	beq	r21,r19,811350 <get_home_directory_cluster_for_file+0x9a0>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  8113c4:	00bffdd4 	movui	r2,65527
  8113c8:	14fff60e 	bge	r2,r19,8113a4 <get_home_directory_cluster_for_file+0x9f4>
            if (new_cluster != home_dir_cluster)
  8113cc:	acfe8d26 	beq	r21,r19,810e04 <get_home_directory_cluster_for_file+0x454>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
  8113d0:	d9800417 	ldw	r6,16(sp)
  8113d4:	a827883a 	mov	r19,r21
  8113d8:	30800044 	addi	r2,r6,1
  8113dc:	1585883a 	add	r2,r2,r22
  8113e0:	d8800415 	stw	r2,16(sp)
  8113e4:	1007883a 	mov	r3,r2
            {
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  8113e8:	d8800617 	ldw	r2,24(sp)
  8113ec:	10e1883a 	add	r16,r2,r3

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8113f0:	8009883a 	mov	r4,r16
  8113f4:	0803e880 	call	803e88 <strlen>
    
    for(index = 0; index < length; index++)
  8113f8:	00809c0e 	bge	zero,r2,81166c <get_home_directory_cluster_for_file+0xcbc>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8113fc:	80c00007 	ldb	r3,0(r16)
  811400:	01001704 	movi	r4,92
  811404:	19000e26 	beq	r3,r4,811440 <get_home_directory_cluster_for_file+0xa90>
  811408:	01400bc4 	movi	r5,47
  81140c:	19400c26 	beq	r3,r5,811440 <get_home_directory_cluster_for_file+0xa90>
  811410:	002d883a 	mov	r22,zero
  811414:	00000306 	br	811424 <get_home_directory_cluster_for_file+0xa74>
  811418:	18c00007 	ldb	r3,0(r3)
  81141c:	19008c26 	beq	r3,r4,811650 <get_home_directory_cluster_for_file+0xca0>
  811420:	19408b26 	beq	r3,r5,811650 <get_home_directory_cluster_for_file+0xca0>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811424:	b5800044 	addi	r22,r22,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  811428:	8587883a 	add	r3,r16,r22
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  81142c:	15bffa1e 	bne	r2,r22,811418 <get_home_directory_cluster_for_file+0xa68>
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
  811430:	05bfffc4 	movi	r22,-1
  811434:	01000044 	movi	r4,1
  811438:	d9000515 	stw	r4,20(sp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  81143c:	05bd8816 	blt	zero,r22,810a60 <get_home_directory_cluster_for_file+0xb0>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  811440:	d9400717 	ldw	r5,28(sp)
  811444:	2cc00015 	stw	r19,0(r5)
    if (home_dir_cluster == 0)
  811448:	983d7a26 	beq	r19,zero,810a34 <get_home_directory_cluster_for_file+0x84>
  81144c:	003e6e06 	br	810e08 <get_home_directory_cluster_for_file+0x458>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811450:	18bff804 	addi	r2,r3,-32
  811454:	10803fcc 	andi	r2,r2,255
  811458:	1080201c 	xori	r2,r2,128
  81145c:	10bfe004 	addi	r2,r2,-128
  811460:	003f9006 	br	8112a4 <get_home_directory_cluster_for_file+0x8f4>
  811464:	18bff804 	addi	r2,r3,-32
  811468:	11003fcc 	andi	r4,r2,255
  81146c:	2100201c 	xori	r4,r4,128
  811470:	213fe004 	addi	r4,r4,-128
  811474:	003f8406 	br	811288 <get_home_directory_cluster_for_file+0x8d8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811478:	18bff804 	addi	r2,r3,-32
  81147c:	10803fcc 	andi	r2,r2,255
  811480:	1080201c 	xori	r2,r2,128
  811484:	10bfe004 	addi	r2,r2,-128
  811488:	113f0d26 	beq	r2,r4,8110c0 <get_home_directory_cluster_for_file+0x710>
  81148c:	000b883a 	mov	r5,zero
  811490:	003f7606 	br	81126c <get_home_directory_cluster_for_file+0x8bc>
  811494:	20bff804 	addi	r2,r4,-32
  811498:	11003fcc 	andi	r4,r2,255
  81149c:	2100201c 	xori	r4,r4,128
  8114a0:	213fe004 	addi	r4,r4,-128
  8114a4:	003efe06 	br	8110a0 <get_home_directory_cluster_for_file+0x6f0>
  8114a8:	18bff804 	addi	r2,r3,-32
  8114ac:	10803fcc 	andi	r2,r2,255
  8114b0:	1080201c 	xori	r2,r2,128
  8114b4:	10bfe004 	addi	r2,r2,-128
  8114b8:	003f0f06 	br	8110f8 <get_home_directory_cluster_for_file+0x748>
  8114bc:	18bff804 	addi	r2,r3,-32
  8114c0:	11003fcc 	andi	r4,r2,255
  8114c4:	2100201c 	xori	r4,r4,128
  8114c8:	213fe004 	addi	r4,r4,-128
  8114cc:	003f0306 	br	8110dc <get_home_directory_cluster_for_file+0x72c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8114d0:	18bff804 	addi	r2,r3,-32
  8114d4:	10803fcc 	andi	r2,r2,255
  8114d8:	1080201c 	xori	r2,r2,128
  8114dc:	10bfe004 	addi	r2,r2,-128
  8114e0:	003f7f06 	br	8112e0 <get_home_directory_cluster_for_file+0x930>
  8114e4:	18bff804 	addi	r2,r3,-32
  8114e8:	11003fcc 	andi	r4,r2,255
  8114ec:	2100201c 	xori	r4,r4,128
  8114f0:	213fe004 	addi	r4,r4,-128
  8114f4:	003f7306 	br	8112c4 <get_home_directory_cluster_for_file+0x914>
  8114f8:	19003fcc 	andi	r4,r3,255
  8114fc:	d8c00083 	ldbu	r3,2(sp)
  811500:	2100201c 	xori	r4,r4,128
  811504:	213fe004 	addi	r4,r4,-128
  811508:	18bfe7c4 	addi	r2,r3,-97
  81150c:	10803fcc 	andi	r2,r2,255
  811510:	80bf802e 	bgeu	r16,r2,811314 <get_home_directory_cluster_for_file+0x964>
  811514:	18803fcc 	andi	r2,r3,255
  811518:	1080201c 	xori	r2,r2,128
  81151c:	10bfe004 	addi	r2,r2,-128
  811520:	003f8006 	br	811324 <get_home_directory_cluster_for_file+0x974>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811524:	18bff804 	addi	r2,r3,-32
  811528:	d8c00143 	ldbu	r3,5(sp)
  81152c:	11003fcc 	andi	r4,r2,255
  811530:	2100201c 	xori	r4,r4,128
  811534:	18bfe7c4 	addi	r2,r3,-97
  811538:	10803fcc 	andi	r2,r2,255
  81153c:	213fe004 	addi	r4,r4,-128
  811540:	80bef936 	bltu	r16,r2,811128 <get_home_directory_cluster_for_file+0x778>
  811544:	18bff804 	addi	r2,r3,-32
  811548:	10803fcc 	andi	r2,r2,255
  81154c:	1080201c 	xori	r2,r2,128
  811550:	10bfe004 	addi	r2,r2,-128
  811554:	003ef706 	br	811134 <get_home_directory_cluster_for_file+0x784>
  811558:	18bff804 	addi	r2,r3,-32
  81155c:	d8c00183 	ldbu	r3,6(sp)
  811560:	11003fcc 	andi	r4,r2,255
  811564:	2100201c 	xori	r4,r4,128
  811568:	18bfe7c4 	addi	r2,r3,-97
  81156c:	10803fcc 	andi	r2,r2,255
  811570:	213fe004 	addi	r4,r4,-128
  811574:	80befb36 	bltu	r16,r2,811164 <get_home_directory_cluster_for_file+0x7b4>
  811578:	18bff804 	addi	r2,r3,-32
  81157c:	10803fcc 	andi	r2,r2,255
  811580:	1080201c 	xori	r2,r2,128
  811584:	10bfe004 	addi	r2,r2,-128
  811588:	003ef906 	br	811170 <get_home_directory_cluster_for_file+0x7c0>
  81158c:	18bff804 	addi	r2,r3,-32
  811590:	d8c001c3 	ldbu	r3,7(sp)
  811594:	11003fcc 	andi	r4,r2,255
  811598:	2100201c 	xori	r4,r4,128
  81159c:	18bfe7c4 	addi	r2,r3,-97
  8115a0:	10803fcc 	andi	r2,r2,255
  8115a4:	213fe004 	addi	r4,r4,-128
  8115a8:	80befd36 	bltu	r16,r2,8111a0 <get_home_directory_cluster_for_file+0x7f0>
  8115ac:	18bff804 	addi	r2,r3,-32
  8115b0:	10803fcc 	andi	r2,r2,255
  8115b4:	1080201c 	xori	r2,r2,128
  8115b8:	10bfe004 	addi	r2,r2,-128
  8115bc:	003efb06 	br	8111ac <get_home_directory_cluster_for_file+0x7fc>
  8115c0:	18bff804 	addi	r2,r3,-32
  8115c4:	d8c00203 	ldbu	r3,8(sp)
  8115c8:	11003fcc 	andi	r4,r2,255
  8115cc:	2100201c 	xori	r4,r4,128
  8115d0:	18bfe7c4 	addi	r2,r3,-97
  8115d4:	10803fcc 	andi	r2,r2,255
  8115d8:	213fe004 	addi	r4,r4,-128
  8115dc:	80beff36 	bltu	r16,r2,8111dc <get_home_directory_cluster_for_file+0x82c>
  8115e0:	18bff804 	addi	r2,r3,-32
  8115e4:	10803fcc 	andi	r2,r2,255
  8115e8:	1080201c 	xori	r2,r2,128
  8115ec:	10bfe004 	addi	r2,r2,-128
  8115f0:	003efd06 	br	8111e8 <get_home_directory_cluster_for_file+0x838>
  8115f4:	18bff804 	addi	r2,r3,-32
  8115f8:	d8c00243 	ldbu	r3,9(sp)
  8115fc:	11003fcc 	andi	r4,r2,255
  811600:	2100201c 	xori	r4,r4,128
  811604:	18bfe7c4 	addi	r2,r3,-97
  811608:	10803fcc 	andi	r2,r2,255
  81160c:	213fe004 	addi	r4,r4,-128
  811610:	80bf0136 	bltu	r16,r2,811218 <get_home_directory_cluster_for_file+0x868>
  811614:	18bff804 	addi	r2,r3,-32
  811618:	10803fcc 	andi	r2,r2,255
  81161c:	1080201c 	xori	r2,r2,128
  811620:	10bfe004 	addi	r2,r2,-128
  811624:	003eff06 	br	811224 <get_home_directory_cluster_for_file+0x874>
  811628:	18803fcc 	andi	r2,r3,255
  81162c:	1080201c 	xori	r2,r2,128
  811630:	10bfe004 	addi	r2,r2,-128
  811634:	003f0c06 	br	811268 <get_home_directory_cluster_for_file+0x8b8>
  811638:	19003fcc 	andi	r4,r3,255
  81163c:	2100201c 	xori	r4,r4,128
  811640:	213fe004 	addi	r4,r4,-128
  811644:	003f0006 	br	811248 <get_home_directory_cluster_for_file+0x898>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  811648:	8d40058b 	ldhu	r21,22(r17)
  81164c:	003f3b06 	br	81133c <get_home_directory_cluster_for_file+0x98c>
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
  811650:	b03f7816 	blt	r22,zero,811434 <get_home_directory_cluster_for_file+0xa84>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  811654:	05bd0216 	blt	zero,r22,810a60 <get_home_directory_cluster_for_file+0xb0>
  811658:	003f7906 	br	811440 <get_home_directory_cluster_for_file+0xa90>
        {
            break;
        }
    }
    
    if (index == length)
  81165c:	103cf326 	beq	r2,zero,810a2c <get_home_directory_cluster_for_file+0x7c>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  811660:	d9400717 	ldw	r5,28(sp)
  811664:	28000015 	stw	zero,0(r5)
  811668:	003cf206 	br	810a34 <get_home_directory_cluster_for_file+0x84>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  81166c:	002d883a 	mov	r22,zero
        {
            break;
        }
    }
    
    if (index == length)
  811670:	103f6f26 	beq	r2,zero,811430 <get_home_directory_cluster_for_file+0xa80>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  811674:	05bcfa16 	blt	zero,r22,810a60 <get_home_directory_cluster_for_file+0xb0>
  811678:	003f7106 	br	811440 <get_home_directory_cluster_for_file+0xa90>

0081167c <alt_up_sd_card_find_first>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  81167c:	d0a75d17 	ldw	r2,-25228(gp)
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  811680:	deffed04 	addi	sp,sp,-76
  811684:	dc001115 	stw	r16,68(sp)
  811688:	dfc01215 	stw	ra,72(sp)
  81168c:	2821883a 	mov	r16,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  811690:	10000b26 	beq	r2,zero,8116c0 <alt_up_sd_card_find_first+0x44>
  811694:	d0e75517 	ldw	r3,-25260(gp)
  811698:	1880002b 	ldhuio	r2,0(r3)
  81169c:	1080008c 	andi	r2,r2,2
  8116a0:	10000726 	beq	r2,zero,8116c0 <alt_up_sd_card_find_first+0x44>
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8116a4:	d0a75417 	ldw	r2,-25264(gp)
  8116a8:	1000151e 	bne	r2,zero,811700 <alt_up_sd_card_find_first+0x84>
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  8116ac:	00800084 	movi	r2,2
		{
			result = 1;
		}
	}
	return result;
}
  8116b0:	dfc01217 	ldw	ra,72(sp)
  8116b4:	dc001117 	ldw	r16,68(sp)
  8116b8:	dec01304 	addi	sp,sp,76
  8116bc:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  8116c0:	d0e75317 	ldw	r3,-25268(gp)
  8116c4:	00800044 	movi	r2,1
  8116c8:	18bff81e 	bne	r3,r2,8116ac <alt_up_sd_card_find_first+0x30>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  8116cc:	00802074 	movhi	r2,129
  8116d0:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  8116d4:	00c02074 	movhi	r3,129
  8116d8:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  8116dc:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  8116e0:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  8116e4:	d0275415 	stw	zero,-25264(gp)
  8116e8:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  8116ec:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  8116f0:	183fff15 	stw	zero,-4(r3)
  8116f4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  8116f8:	18bffc1e 	bne	r3,r2,8116ec <alt_up_sd_card_find_first+0x70>
  8116fc:	003feb06 	br	8116ac <alt_up_sd_card_find_first+0x30>
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  811700:	d80b883a 	mov	r5,sp
  811704:	d9800104 	addi	r6,sp,4
  811708:	08109b00 	call	8109b0 <get_home_directory_cluster_for_file>
  81170c:	1000021e 	bne	r2,zero,811718 <alt_up_sd_card_find_first+0x9c>
  811710:	00800044 	movi	r2,1
  811714:	003fe606 	br	8116b0 <alt_up_sd_card_find_first+0x34>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  811718:	d9400017 	ldw	r5,0(sp)
  81171c:	00c02074 	movhi	r3,129
  811720:	18dd7d04 	addi	r3,r3,30196
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
  811724:	00800044 	movi	r2,1
  811728:	18800415 	stw	r2,16(r3)
		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  81172c:	00bfffc4 	movi	r2,-1
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  811730:	8009883a 	mov	r4,r16
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
  811734:	19400115 	stw	r5,4(r3)
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  811738:	1880030d 	sth	r2,12(r3)
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
  81173c:	19400015 	stw	r5,0(r3)
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
  811740:	18000215 	stw	zero,8(r3)
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  811744:	080f8d80 	call	80f8d8 <alt_up_sd_card_find_next>
  811748:	10bfffcc 	andi	r2,r2,65535
  81174c:	10a0001c 	xori	r2,r2,32768
  811750:	10a00004 	addi	r2,r2,-32768
  811754:	003fd606 	br	8116b0 <alt_up_sd_card_find_first+0x34>

00811758 <alt_up_sd_card_read>:
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  811758:	defffa04 	addi	sp,sp,-24
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81175c:	20ffffcc 	andi	r3,r4,65535
  811760:	008004c4 	movi	r2,19
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  811764:	dfc00515 	stw	ra,20(sp)
  811768:	dd000415 	stw	r20,16(sp)
  81176c:	dcc00315 	stw	r19,12(sp)
  811770:	dc800215 	stw	r18,8(sp)
  811774:	dc400115 	stw	r17,4(sp)
  811778:	dc000015 	stw	r16,0(sp)
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81177c:	10c00936 	bltu	r2,r3,8117a4 <alt_up_sd_card_read+0x4c>
    {
        if (active_files[file_handle].in_use)
  811780:	20bfffcc 	andi	r2,r4,65535
  811784:	10a0001c 	xori	r2,r2,32768
  811788:	10a00004 	addi	r2,r2,-32768
  81178c:	102491ba 	slli	r18,r2,6
  811790:	05002074 	movhi	r20,129
  811794:	a51d9704 	addi	r20,r20,30300
  811798:	9521883a 	add	r16,r18,r20
  81179c:	80800f17 	ldw	r2,60(r16)
  8117a0:	1000091e 	bne	r2,zero,8117c8 <alt_up_sd_card_read+0x70>
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  8117a4:	00bfffc4 	movi	r2,-1
            }
        }
    }
    
    return ch;
}
  8117a8:	dfc00517 	ldw	ra,20(sp)
  8117ac:	dd000417 	ldw	r20,16(sp)
  8117b0:	dcc00317 	ldw	r19,12(sp)
  8117b4:	dc800217 	ldw	r18,8(sp)
  8117b8:	dc400117 	ldw	r17,4(sp)
  8117bc:	dc000017 	ldw	r16,0(sp)
  8117c0:	dec00604 	addi	sp,sp,24
  8117c4:	f800283a 	ret
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  8117c8:	81400917 	ldw	r5,36(r16)
  8117cc:	80800617 	ldw	r2,24(r16)
  8117d0:	28bff42e 	bgeu	r5,r2,8117a4 <alt_up_sd_card_read+0x4c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  8117d4:	04c02074 	movhi	r19,129
  8117d8:	9cdd8204 	addi	r19,r19,30216
  8117dc:	84400717 	ldw	r17,28(r16)
  8117e0:	99c00383 	ldbu	r7,14(r19)
  8117e4:	81800817 	ldw	r6,32(r16)
  8117e8:	88ffff84 	addi	r3,r17,-2
  8117ec:	98801417 	ldw	r2,80(r19)
  8117f0:	19c7383a 	mul	r3,r3,r7
  8117f4:	3085883a 	add	r2,r6,r2
  8117f8:	1889883a 	add	r4,r3,r2
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  8117fc:	28000226 	beq	r5,zero,811808 <alt_up_sd_card_read+0xb0>
  811800:	28807fcc 	andi	r2,r5,511
  811804:	10001726 	beq	r2,zero,811864 <alt_up_sd_card_read+0x10c>
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
                        data_sector = data_sector + 1;
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  811808:	d1675b17 	ldw	r5,-25236(gp)
  81180c:	d0a75f17 	ldw	r2,-25220(gp)
  811810:	2147883a 	add	r3,r4,r5
  811814:	1880191e 	bne	r3,r2,81187c <alt_up_sd_card_read+0x124>
                    {
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  811818:	950d883a 	add	r6,r18,r20
  81181c:	31000917 	ldw	r4,36(r6)
  811820:	d0e75a17 	ldw	r3,-25240(gp)
  811824:	20807fcc 	andi	r2,r4,511
  811828:	10c5883a 	add	r2,r2,r3
  81182c:	11400023 	ldbuio	r5,0(r2)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811830:	28803fcc 	andi	r2,r5,255
  811834:	1080201c 	xori	r2,r2,128
  811838:	21000044 	addi	r4,r4,1
  81183c:	10bfe004 	addi	r2,r2,-128
  811840:	31000915 	stw	r4,36(r6)
            }
        }
    }
    
    return ch;
}
  811844:	dfc00517 	ldw	ra,20(sp)
  811848:	dd000417 	ldw	r20,16(sp)
  81184c:	dcc00317 	ldw	r19,12(sp)
  811850:	dc800217 	ldw	r18,8(sp)
  811854:	dc400117 	ldw	r17,4(sp)
  811858:	dc000017 	ldw	r16,0(sp)
  81185c:	dec00604 	addi	sp,sp,24
  811860:	f800283a 	ret
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811864:	38bfffc4 	addi	r2,r7,-1
  811868:	30800826 	beq	r6,r2,81188c <alt_up_sd_card_read+0x134>
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  81186c:	30800044 	addi	r2,r6,1
                        data_sector = data_sector + 1;
  811870:	21000044 	addi	r4,r4,1
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811874:	80800815 	stw	r2,32(r16)
  811878:	003fe306 	br	811808 <alt_up_sd_card_read+0xb0>
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  81187c:	080eb300 	call	80eb30 <Read_Sector_Data>
  811880:	103fe51e 	bne	r2,zero,811818 <alt_up_sd_card_read+0xc0>
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811884:	00bfff84 	movi	r2,-2
  811888:	003fc706 	br	8117a8 <alt_up_sd_card_read+0x50>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  81188c:	98c01117 	ldw	r3,68(r19)
  811890:	8804d23a 	srli	r2,r17,8
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811894:	d1275b17 	ldw	r4,-25236(gp)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811898:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  81189c:	d0e75f17 	ldw	r3,-25220(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8118a0:	1109883a 	add	r4,r2,r4
     
    if (sector_index != current_sector_index)
  8118a4:	20c00326 	beq	r4,r3,8118b4 <alt_up_sd_card_read+0x15c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8118a8:	000b883a 	mov	r5,zero
  8118ac:	080eb300 	call	80eb30 <Read_Sector_Data>
  8118b0:	103ff426 	beq	r2,zero,811884 <alt_up_sd_card_read+0x12c>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  8118b4:	d0e75d17 	ldw	r3,-25228(gp)
  8118b8:	88803fcc 	andi	r2,r17,255
  8118bc:	1085883a 	add	r2,r2,r2
  8118c0:	19000a17 	ldw	r4,40(r3)
  8118c4:	1105883a 	add	r2,r2,r4
  8118c8:	10c0002b 	ldhuio	r3,0(r2)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  8118cc:	00bffe14 	movui	r2,65528
  8118d0:	197fffcc 	andi	r5,r3,65535
  8118d4:	293ffe0c 	andi	r4,r5,65528
  8118d8:	20bfb226 	beq	r4,r2,8117a4 <alt_up_sd_card_read+0x4c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  8118dc:	98800383 	ldbu	r2,14(r19)
  8118e0:	28ffff84 	addi	r3,r5,-2
  8118e4:	99001417 	ldw	r4,80(r19)
  8118e8:	1887383a 	mul	r3,r3,r2
                                return -1;
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
  8118ec:	80000815 	stw	zero,32(r16)
                                /* End of file */
                                return -1;
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  8118f0:	81400715 	stw	r5,28(r16)
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  8118f4:	1909883a 	add	r4,r3,r4
  8118f8:	003fc306 	br	811808 <alt_up_sd_card_read+0xb0>

008118fc <alt_up_sd_card_write>:
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  8118fc:	defff604 	addi	sp,sp,-40
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811900:	20ffffcc 	andi	r3,r4,65535
  811904:	008004c4 	movi	r2,19
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  811908:	ddc00715 	stw	r23,28(sp)
  81190c:	dfc00915 	stw	ra,36(sp)
  811910:	df000815 	stw	fp,32(sp)
  811914:	dd800615 	stw	r22,24(sp)
  811918:	dd400515 	stw	r21,20(sp)
  81191c:	dd000415 	stw	r20,16(sp)
  811920:	dcc00315 	stw	r19,12(sp)
  811924:	dc800215 	stw	r18,8(sp)
  811928:	dc400115 	stw	r17,4(sp)
  81192c:	dc000015 	stw	r16,0(sp)
  811930:	282f883a 	mov	r23,r5
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811934:	10c03536 	bltu	r2,r3,811a0c <alt_up_sd_card_write+0x110>
    {
        if (active_files[file_handle].in_use)
  811938:	20bfffcc 	andi	r2,r4,65535
  81193c:	10a0001c 	xori	r2,r2,32768
  811940:	10a00004 	addi	r2,r2,-32768
  811944:	102891ba 	slli	r20,r2,6
  811948:	05802074 	movhi	r22,129
  81194c:	b59d9704 	addi	r22,r22,30300
  811950:	a5a1883a 	add	r16,r20,r22
  811954:	80800f17 	ldw	r2,60(r16)
  811958:	10002c26 	beq	r2,zero,811a0c <alt_up_sd_card_write+0x110>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  81195c:	04c02074 	movhi	r19,129
  811960:	9cdd8204 	addi	r19,r19,30216
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811964:	81800917 	ldw	r6,36(r16)
  811968:	9900030b 	ldhu	r4,12(r19)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  81196c:	84400717 	ldw	r17,28(r16)
  811970:	99c00383 	ldbu	r7,14(r19)
  811974:	82000817 	ldw	r8,32(r16)
  811978:	88ffff84 	addi	r3,r17,-2
  81197c:	98801417 	ldw	r2,80(r19)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811980:	3113203a 	divu	r9,r6,r4
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811984:	19c7383a 	mul	r3,r3,r7
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811988:	4909383a 	mul	r4,r9,r4

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  81198c:	81400617 	ldw	r5,24(r16)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811990:	4085883a 	add	r2,r8,r2
  811994:	18a5883a 	add	r18,r3,r2
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811998:	312bc83a 	sub	r21,r6,r4

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  81199c:	3140282e 	bgeu	r6,r5,811a40 <alt_up_sd_card_write+0x144>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  8119a0:	3000411e 	bne	r6,zero,811aa8 <alt_up_sd_card_write+0x1ac>
  8119a4:	d1675b17 	ldw	r5,-25236(gp)
  8119a8:	d1e75f17 	ldw	r7,-25220(gp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  8119ac:	9145883a 	add	r2,r18,r5
  8119b0:	11c00326 	beq	r2,r7,8119c0 <alt_up_sd_card_write+0xc4>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  8119b4:	9009883a 	mov	r4,r18
  8119b8:	080eb300 	call	80eb30 <Read_Sector_Data>
  8119bc:	10001326 	beq	r2,zero,811a0c <alt_up_sd_card_write+0x110>
                {
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  8119c0:	a8bfffcc 	andi	r2,r21,65535
  8119c4:	d0e75a17 	ldw	r3,-25240(gp)
  8119c8:	b9003fcc 	andi	r4,r23,255
  8119cc:	10a0001c 	xori	r2,r2,32768
  8119d0:	10a00004 	addi	r2,r2,-32768
  8119d4:	2100201c 	xori	r4,r4,128
  8119d8:	213fe004 	addi	r4,r4,-128
  8119dc:	10c5883a 	add	r2,r2,r3
  8119e0:	11000025 	stbio	r4,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  8119e4:	a587883a 	add	r3,r20,r22
  8119e8:	18800917 	ldw	r2,36(r3)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  8119ec:	19000617 	ldw	r4,24(r3)
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  8119f0:	01400044 	movi	r5,1
  8119f4:	1145883a 	add	r2,r2,r5
  8119f8:	18800915 	stw	r2,36(r3)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  8119fc:	1100242e 	bgeu	r2,r4,811a90 <alt_up_sd_card_write+0x194>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  811a00:	2805883a 	mov	r2,r5
  811a04:	d1675e15 	stw	r5,-25224(gp)
  811a08:	00000106 	br	811a10 <alt_up_sd_card_write+0x114>
  811a0c:	0005883a 	mov	r2,zero
			result = true;
		}
    }
    
    return result;
}
  811a10:	dfc00917 	ldw	ra,36(sp)
  811a14:	df000817 	ldw	fp,32(sp)
  811a18:	ddc00717 	ldw	r23,28(sp)
  811a1c:	dd800617 	ldw	r22,24(sp)
  811a20:	dd400517 	ldw	r21,20(sp)
  811a24:	dd000417 	ldw	r20,16(sp)
  811a28:	dcc00317 	ldw	r19,12(sp)
  811a2c:	dc800217 	ldw	r18,8(sp)
  811a30:	dc400117 	ldw	r17,4(sp)
  811a34:	dc000017 	ldw	r16,0(sp)
  811a38:	dec00a04 	addi	sp,sp,40
  811a3c:	f800283a 	ret
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  811a40:	303fd826 	beq	r6,zero,8119a4 <alt_up_sd_card_write+0xa8>
  811a44:	a8bfffcc 	andi	r2,r21,65535
  811a48:	10a0001c 	xori	r2,r2,32768
  811a4c:	10a00004 	addi	r2,r2,-32768
  811a50:	103fd41e 	bne	r2,zero,8119a4 <alt_up_sd_card_write+0xa8>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811a54:	38bfffc4 	addi	r2,r7,-1
  811a58:	40803c26 	beq	r8,r2,811b4c <alt_up_sd_card_write+0x250>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  811a5c:	82400815 	stw	r9,32(r16)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811a60:	a589883a 	add	r4,r20,r22
  811a64:	20800717 	ldw	r2,28(r4)
  811a68:	99400383 	ldbu	r5,14(r19)
  811a6c:	98c01417 	ldw	r3,80(r19)
  811a70:	10bfff84 	addi	r2,r2,-2
  811a74:	21800817 	ldw	r6,32(r4)
  811a78:	1145383a 	mul	r2,r2,r5
  811a7c:	d1e75f17 	ldw	r7,-25220(gp)
  811a80:	d1675b17 	ldw	r5,-25236(gp)
  811a84:	1987883a 	add	r3,r3,r6
  811a88:	10e5883a 	add	r18,r2,r3
  811a8c:	003fc706 	br	8119ac <alt_up_sd_card_write+0xb0>
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  811a90:	2145883a 	add	r2,r4,r5
  811a94:	18800615 	stw	r2,24(r3)
				active_files[file_handle].modified = true;
  811a98:	19400e15 	stw	r5,56(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  811a9c:	2805883a 	mov	r2,r5
  811aa0:	d1675e15 	stw	r5,-25224(gp)
  811aa4:	003fda06 	br	811a10 <alt_up_sd_card_write+0x114>
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  811aa8:	a8bfffcc 	andi	r2,r21,65535
  811aac:	10a0001c 	xori	r2,r2,32768
  811ab0:	10a00004 	addi	r2,r2,-32768
  811ab4:	103fbb1e 	bne	r2,zero,8119a4 <alt_up_sd_card_write+0xa8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811ab8:	38bfffc4 	addi	r2,r7,-1
  811abc:	40800626 	beq	r8,r2,811ad8 <alt_up_sd_card_write+0x1dc>
  811ac0:	d1675b17 	ldw	r5,-25236(gp)
  811ac4:	d1e75f17 	ldw	r7,-25220(gp)
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811ac8:	40800044 	addi	r2,r8,1
                        data_sector = data_sector + 1;
  811acc:	94800044 	addi	r18,r18,1
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811ad0:	80800815 	stw	r2,32(r16)
  811ad4:	003fb506 	br	8119ac <alt_up_sd_card_write+0xb0>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811ad8:	8804d23a 	srli	r2,r17,8
  811adc:	98c01117 	ldw	r3,68(r19)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811ae0:	d1675b17 	ldw	r5,-25236(gp)
     
    if (sector_index != current_sector_index)
  811ae4:	d1e75f17 	ldw	r7,-25220(gp)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811ae8:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811aec:	1149883a 	add	r4,r2,r5
     
    if (sector_index != current_sector_index)
  811af0:	21c00526 	beq	r4,r7,811b08 <alt_up_sd_card_write+0x20c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811af4:	000b883a 	mov	r5,zero
  811af8:	080eb300 	call	80eb30 <Read_Sector_Data>
  811afc:	103fc326 	beq	r2,zero,811a0c <alt_up_sd_card_write+0x110>
  811b00:	d1675b17 	ldw	r5,-25236(gp)
  811b04:	d1e75f17 	ldw	r7,-25220(gp)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811b08:	d0e75d17 	ldw	r3,-25228(gp)
  811b0c:	88803fcc 	andi	r2,r17,255
  811b10:	1085883a 	add	r2,r2,r2
  811b14:	19000a17 	ldw	r4,40(r3)
  811b18:	1105883a 	add	r2,r2,r4
  811b1c:	10c0002b 	ldhuio	r3,0(r2)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
  811b20:	00bffdd4 	movui	r2,65527
  811b24:	19bfffcc 	andi	r6,r3,65535
  811b28:	11bfa036 	bltu	r2,r6,8119ac <alt_up_sd_card_write+0xb0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811b2c:	98800383 	ldbu	r2,14(r19)
  811b30:	30ffff84 	addi	r3,r6,-2
  811b34:	99001417 	ldw	r4,80(r19)
  811b38:	1887383a 	mul	r3,r3,r2
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
  811b3c:	80000815 	stw	zero,32(r16)
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  811b40:	81800715 	stw	r6,28(r16)
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811b44:	1925883a 	add	r18,r3,r4
  811b48:	003f9806 	br	8119ac <alt_up_sd_card_write+0xb0>


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  811b4c:	9c401117 	ldw	r17,68(r19)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811b50:	98801217 	ldw	r2,72(r19)
  811b54:	88bfad26 	beq	r17,r2,811a0c <alt_up_sd_card_write+0x110>
  811b58:	04800084 	movi	r18,2
  811b5c:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  811b60:	d1675b17 	ldw	r5,-25236(gp)
  811b64:	8809883a 	mov	r4,r17
  811b68:	080eb300 	call	80eb30 <Read_Sector_Data>
  811b6c:	10006d26 	beq	r2,zero,811d24 <alt_up_sd_card_write+0x428>
  811b70:	d0a75d17 	ldw	r2,-25228(gp)
  811b74:	90c03fcc 	andi	r3,r18,255
  811b78:	11000a17 	ldw	r4,40(r2)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  811b7c:	18c5883a 	add	r2,r3,r3
  811b80:	1105883a 	add	r2,r2,r4
  811b84:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  811b88:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  811b8c:	1821883a 	mov	r16,r3
                if (cluster == 0)
  811b90:	10000a26 	beq	r2,zero,811bbc <alt_up_sd_card_write+0x2c0>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  811b94:	94800044 	addi	r18,r18,1
                } 
            } while ((cluster_index % 256) != 0);
  811b98:	90c03fcc 	andi	r3,r18,255
  811b9c:	183ff71e 	bne	r3,zero,811b7c <alt_up_sd_card_write+0x280>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811ba0:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  811ba4:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811ba8:	147fed1e 	bne	r2,r17,811b60 <alt_up_sd_card_write+0x264>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  811bac:	80bfffcc 	andi	r2,r16,65535
  811bb0:	10a0001c 	xori	r2,r2,32768
  811bb4:	10a00004 	addi	r2,r2,-32768
  811bb8:	103f941e 	bne	r2,zero,811a0c <alt_up_sd_card_write+0x110>
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  811bbc:	a585883a 	add	r2,r20,r22
  811bc0:	14000717 	ldw	r16,28(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811bc4:	99001117 	ldw	r4,68(r19)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811bc8:	d0e75b17 	ldw	r3,-25236(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811bcc:	8004d23a 	srli	r2,r16,8
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  811bd0:	9039883a 	mov	fp,r18


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811bd4:	1105883a 	add	r2,r2,r4
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811bd8:	d1275f17 	ldw	r4,-25220(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811bdc:	10c5883a 	add	r2,r2,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811be0:	20800426 	beq	r4,r2,811bf4 <alt_up_sd_card_write+0x2f8>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811be4:	1009883a 	mov	r4,r2
  811be8:	000b883a 	mov	r5,zero
  811bec:	080eb300 	call	80eb30 <Read_Sector_Data>
  811bf0:	10000b26 	beq	r2,zero,811c20 <alt_up_sd_card_write+0x324>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811bf4:	d0e75d17 	ldw	r3,-25228(gp)
  811bf8:	80803fcc 	andi	r2,r16,255
  811bfc:	e17fffcc 	andi	r5,fp,65535
  811c00:	19000a17 	ldw	r4,40(r3)
  811c04:	1085883a 	add	r2,r2,r2
  811c08:	2960001c 	xori	r5,r5,32768
  811c0c:	29600004 	addi	r5,r5,-32768
  811c10:	1105883a 	add	r2,r2,r4
  811c14:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  811c18:	00c00044 	movi	r3,1
  811c1c:	d0e75e15 	stw	r3,-25224(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811c20:	98801117 	ldw	r2,68(r19)
  811c24:	d0e75b17 	ldw	r3,-25236(gp)
  811c28:	9022d23a 	srli	r17,r18,8
  811c2c:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811c30:	d0a75f17 	ldw	r2,-25220(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811c34:	88c9883a 	add	r4,r17,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811c38:	11000326 	beq	r2,r4,811c48 <alt_up_sd_card_write+0x34c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811c3c:	000b883a 	mov	r5,zero
  811c40:	080eb300 	call	80eb30 <Read_Sector_Data>
  811c44:	10000926 	beq	r2,zero,811c6c <alt_up_sd_card_write+0x370>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811c48:	d0e75d17 	ldw	r3,-25228(gp)
  811c4c:	90803fcc 	andi	r2,r18,255
  811c50:	1085883a 	add	r2,r2,r2
  811c54:	19000a17 	ldw	r4,40(r3)
  811c58:	00ffffc4 	movi	r3,-1
  811c5c:	1105883a 	add	r2,r2,r4
  811c60:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  811c64:	01000044 	movi	r4,1
  811c68:	d1275e15 	stw	r4,-25224(gp)
						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  811c6c:	a585883a 	add	r2,r20,r22
  811c70:	14000717 	ldw	r16,28(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811c74:	99001217 	ldw	r4,72(r19)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811c78:	d0e75b17 	ldw	r3,-25236(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811c7c:	8004d23a 	srli	r2,r16,8
  811c80:	1105883a 	add	r2,r2,r4
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811c84:	d1275f17 	ldw	r4,-25220(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811c88:	10c5883a 	add	r2,r2,r3
    }
     
    if (sector_index != current_sector_index)
  811c8c:	20800426 	beq	r4,r2,811ca0 <alt_up_sd_card_write+0x3a4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811c90:	1009883a 	mov	r4,r2
  811c94:	000b883a 	mov	r5,zero
  811c98:	080eb300 	call	80eb30 <Read_Sector_Data>
  811c9c:	10000b26 	beq	r2,zero,811ccc <alt_up_sd_card_write+0x3d0>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811ca0:	d0e75d17 	ldw	r3,-25228(gp)
  811ca4:	80803fcc 	andi	r2,r16,255
  811ca8:	e17fffcc 	andi	r5,fp,65535
  811cac:	19000a17 	ldw	r4,40(r3)
  811cb0:	1085883a 	add	r2,r2,r2
  811cb4:	2960001c 	xori	r5,r5,32768
  811cb8:	29600004 	addi	r5,r5,-32768
  811cbc:	1105883a 	add	r2,r2,r4
  811cc0:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  811cc4:	00c00044 	movi	r3,1
  811cc8:	d0e75e15 	stw	r3,-25224(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811ccc:	98801217 	ldw	r2,72(r19)
  811cd0:	d0e75b17 	ldw	r3,-25236(gp)
  811cd4:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811cd8:	d0a75f17 	ldw	r2,-25220(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811cdc:	88c9883a 	add	r4,r17,r3
    }
     
    if (sector_index != current_sector_index)
  811ce0:	11000326 	beq	r2,r4,811cf0 <alt_up_sd_card_write+0x3f4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811ce4:	000b883a 	mov	r5,zero
  811ce8:	080eb300 	call	80eb30 <Read_Sector_Data>
  811cec:	10000926 	beq	r2,zero,811d14 <alt_up_sd_card_write+0x418>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811cf0:	d0e75d17 	ldw	r3,-25228(gp)
  811cf4:	90803fcc 	andi	r2,r18,255
  811cf8:	1085883a 	add	r2,r2,r2
  811cfc:	19000a17 	ldw	r4,40(r3)
  811d00:	00ffffc4 	movi	r3,-1
  811d04:	1105883a 	add	r2,r2,r4
  811d08:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  811d0c:	01000044 	movi	r4,1
  811d10:	d1275e15 	stw	r4,-25224(gp)
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  811d14:	a585883a 	add	r2,r20,r22
  811d18:	14800715 	stw	r18,28(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  811d1c:	10000815 	stw	zero,32(r2)
  811d20:	003f4f06 	br	811a60 <alt_up_sd_card_write+0x164>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  811d24:	80bfffcc 	andi	r2,r16,65535
  811d28:	10a0001c 	xori	r2,r2,32768
  811d2c:	10a00004 	addi	r2,r2,-32768
  811d30:	103f9b1e 	bne	r2,zero,811ba0 <alt_up_sd_card_write+0x2a4>
  811d34:	003fa106 	br	811bbc <alt_up_sd_card_write+0x2c0>

00811d38 <find_first_empty_record_in_a_subdirectory>:
}


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  811d38:	defff504 	addi	sp,sp,-44
  811d3c:	dd000515 	stw	r20,20(sp)
  811d40:	dcc00415 	stw	r19,16(sp)
  811d44:	dc800315 	stw	r18,12(sp)
  811d48:	dfc00a15 	stw	ra,40(sp)
  811d4c:	df000915 	stw	fp,36(sp)
  811d50:	ddc00815 	stw	r23,32(sp)
  811d54:	dd800715 	stw	r22,28(sp)
  811d58:	dd400615 	stw	r21,24(sp)
  811d5c:	dc400215 	stw	r17,8(sp)
  811d60:	dc000115 	stw	r16,4(sp)
  811d64:	2025883a 	mov	r18,r4
  811d68:	053fffc4 	movi	r20,-1
  811d6c:	04c02074 	movhi	r19,129
  811d70:	9cdd8204 	addi	r19,r19,30216
    int result = -1;
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811d74:	98800383 	ldbu	r2,14(r19)
  811d78:	90ffff84 	addi	r3,r18,-2
  811d7c:	99001417 	ldw	r4,80(r19)
  811d80:	1887383a 	mul	r3,r3,r2
  811d84:	1923883a 	add	r17,r3,r4
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  811d88:	10001926 	beq	r2,zero,811df0 <find_first_empty_record_in_a_subdirectory+0xb8>
  811d8c:	0021883a 	mov	r16,zero
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  811d90:	d1675b17 	ldw	r5,-25236(gp)
  811d94:	8c09883a 	add	r4,r17,r16
  811d98:	080eb300 	call	80eb30 <Read_Sector_Data>
  811d9c:	10001426 	beq	r2,zero,811df0 <find_first_empty_record_in_a_subdirectory+0xb8>
  811da0:	d0e75d17 	ldw	r3,-25228(gp)
  811da4:	8008953a 	slli	r4,r16,20
                    }
                }
            }
            else
            {
                break;
  811da8:	000d883a 	mov	r6,zero
  811dac:	19c00a17 	ldw	r7,40(r3)
  811db0:	000b883a 	mov	r5,zero
  811db4:	02803944 	movi	r10,229
  811db8:	02400404 	movi	r9,16
  811dbc:	02000074 	movhi	r8,1
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  811dc0:	29c5883a 	add	r2,r5,r7
  811dc4:	10c00023 	ldbuio	r3,0(r2)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  811dc8:	18c03fcc 	andi	r3,r3,255
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  811dcc:	31800044 	addi	r6,r6,1
  811dd0:	29400804 	addi	r5,r5,32
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  811dd4:	1a800c26 	beq	r3,r10,811e08 <find_first_empty_record_in_a_subdirectory+0xd0>
  811dd8:	18000b26 	beq	r3,zero,811e08 <find_first_empty_record_in_a_subdirectory+0xd0>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  811ddc:	2209883a 	add	r4,r4,r8
  811de0:	327ff71e 	bne	r6,r9,811dc0 <find_first_empty_record_in_a_subdirectory+0x88>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  811de4:	98800383 	ldbu	r2,14(r19)
  811de8:	84000044 	addi	r16,r16,1
  811dec:	80bfe816 	blt	r16,r2,811d90 <find_first_empty_record_in_a_subdirectory+0x58>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  811df0:	a0001316 	blt	r20,zero,811e40 <find_first_empty_record_in_a_subdirectory+0x108>
			{
				// Error encountered.                 
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  811df4:	00bffdd4 	movui	r2,65527
  811df8:	14800416 	blt	r2,r18,811e0c <find_first_empty_record_in_a_subdirectory+0xd4>
  811dfc:	00bfffc4 	movi	r2,-1
  811e00:	a0bfdc26 	beq	r20,r2,811d74 <find_first_empty_record_in_a_subdirectory+0x3c>
  811e04:	00000106 	br	811e0c <find_first_empty_record_in_a_subdirectory+0xd4>
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  811e08:	9128b03a 	or	r20,r18,r4
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
    return result; 
}
  811e0c:	a005883a 	mov	r2,r20
  811e10:	dfc00a17 	ldw	ra,40(sp)
  811e14:	df000917 	ldw	fp,36(sp)
  811e18:	ddc00817 	ldw	r23,32(sp)
  811e1c:	dd800717 	ldw	r22,28(sp)
  811e20:	dd400617 	ldw	r21,24(sp)
  811e24:	dd000517 	ldw	r20,20(sp)
  811e28:	dcc00417 	ldw	r19,16(sp)
  811e2c:	dc800317 	ldw	r18,12(sp)
  811e30:	dc400217 	ldw	r17,8(sp)
  811e34:	dc000117 	ldw	r16,4(sp)
  811e38:	dec00b04 	addi	sp,sp,44
  811e3c:	f800283a 	ret


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811e40:	98801117 	ldw	r2,68(r19)
  811e44:	d0e75b17 	ldw	r3,-25236(gp)
  811e48:	902ed23a 	srli	r23,r18,8
  811e4c:	1887883a 	add	r3,r3,r2
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  811e50:	d0a75f17 	ldw	r2,-25220(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811e54:	b8c9883a 	add	r4,r23,r3
     
    if (sector_index != current_sector_index)
  811e58:	20800526 	beq	r4,r2,811e70 <find_first_empty_record_in_a_subdirectory+0x138>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811e5c:	000b883a 	mov	r5,zero
  811e60:	080eb300 	call	80eb30 <Read_Sector_Data>
  811e64:	1000021e 	bne	r2,zero,811e70 <find_first_empty_record_in_a_subdirectory+0x138>
  811e68:	053fffc4 	movi	r20,-1
  811e6c:	003fe106 	br	811df4 <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811e70:	d0e75d17 	ldw	r3,-25228(gp)
  811e74:	90803fcc 	andi	r2,r18,255
  811e78:	10ad883a 	add	r22,r2,r2
  811e7c:	18800a17 	ldw	r2,40(r3)
  811e80:	b085883a 	add	r2,r22,r2
  811e84:	10c0002b 	ldhuio	r3,0(r2)
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  811e88:	00bffe14 	movui	r2,65528
  811e8c:	18fffe0c 	andi	r3,r3,65528
  811e90:	18bfd81e 	bne	r3,r2,811df4 <find_first_empty_record_in_a_subdirectory+0xbc>


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  811e94:	9c401117 	ldw	r17,68(r19)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811e98:	98801217 	ldw	r2,72(r19)
  811e9c:	88801926 	beq	r17,r2,811f04 <find_first_empty_record_in_a_subdirectory+0x1cc>
  811ea0:	05400084 	movi	r21,2
  811ea4:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  811ea8:	d1675b17 	ldw	r5,-25236(gp)
  811eac:	8809883a 	mov	r4,r17
  811eb0:	080eb300 	call	80eb30 <Read_Sector_Data>
  811eb4:	10001526 	beq	r2,zero,811f0c <find_first_empty_record_in_a_subdirectory+0x1d4>
  811eb8:	d0e75d17 	ldw	r3,-25228(gp)
  811ebc:	a8803fcc 	andi	r2,r21,255
  811ec0:	19000a17 	ldw	r4,40(r3)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  811ec4:	1085883a 	add	r2,r2,r2
  811ec8:	1105883a 	add	r2,r2,r4
  811ecc:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  811ed0:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  811ed4:	1821883a 	mov	r16,r3
                if (cluster == 0)
  811ed8:	10001026 	beq	r2,zero,811f1c <find_first_empty_record_in_a_subdirectory+0x1e4>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  811edc:	ad400044 	addi	r21,r21,1
                } 
            } while ((cluster_index % 256) != 0);
  811ee0:	a8803fcc 	andi	r2,r21,255
  811ee4:	103ff71e 	bne	r2,zero,811ec4 <find_first_empty_record_in_a_subdirectory+0x18c>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811ee8:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  811eec:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811ef0:	147fed1e 	bne	r2,r17,811ea8 <find_first_empty_record_in_a_subdirectory+0x170>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  811ef4:	80bfffcc 	andi	r2,r16,65535
  811ef8:	10a0001c 	xori	r2,r2,32768
  811efc:	10a00004 	addi	r2,r2,-32768
  811f00:	10000626 	beq	r2,zero,811f1c <find_first_empty_record_in_a_subdirectory+0x1e4>
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f04:	04bffe14 	movui	r18,65528
  811f08:	003fba06 	br	811df4 <find_first_empty_record_in_a_subdirectory+0xbc>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  811f0c:	80bfffcc 	andi	r2,r16,65535
  811f10:	10a0001c 	xori	r2,r2,32768
  811f14:	10a00004 	addi	r2,r2,-32768
  811f18:	103ff31e 	bne	r2,zero,811ee8 <find_first_empty_record_in_a_subdirectory+0x1b0>


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f1c:	98801117 	ldw	r2,68(r19)
  811f20:	d0e75b17 	ldw	r3,-25236(gp)
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
  811f24:	dd400015 	stw	r21,0(sp)
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  811f28:	04bffe14 	movui	r18,65528


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f2c:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f30:	d0a75f17 	ldw	r2,-25220(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811f34:	b8c9883a 	add	r4,r23,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f38:	11000326 	beq	r2,r4,811f48 <find_first_empty_record_in_a_subdirectory+0x210>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811f3c:	000b883a 	mov	r5,zero
  811f40:	080eb300 	call	80eb30 <Read_Sector_Data>
  811f44:	103fab26 	beq	r2,zero,811df4 <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811f48:	d0e75d17 	ldw	r3,-25228(gp)
  811f4c:	a93fffcc 	andi	r4,r21,65535
  811f50:	2120001c 	xori	r4,r4,32768
  811f54:	18800a17 	ldw	r2,40(r3)
  811f58:	21200004 	addi	r4,r4,-32768
  811f5c:	b085883a 	add	r2,r22,r2
  811f60:	1100002d 	sthio	r4,0(r2)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  811f64:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f68:	98c01117 	ldw	r3,68(r19)
  811f6c:	d0a75b17 	ldw	r2,-25236(gp)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811f70:	8008d23a 	srli	r4,r16,8
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  811f74:	04400044 	movi	r17,1


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f78:	10c5883a 	add	r2,r2,r3
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811f7c:	2089883a 	add	r4,r4,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f80:	d0a75f17 	ldw	r2,-25220(gp)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  811f84:	d4675e15 	stw	r17,-25224(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f88:	05402074 	movhi	r21,129
  811f8c:	ad5d8204 	addi	r21,r21,30216
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f90:	11000326 	beq	r2,r4,811fa0 <find_first_empty_record_in_a_subdirectory+0x268>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811f94:	000b883a 	mov	r5,zero
  811f98:	080eb300 	call	80eb30 <Read_Sector_Data>
  811f9c:	103f9526 	beq	r2,zero,811df4 <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811fa0:	d0e75d17 	ldw	r3,-25228(gp)
  811fa4:	80803fcc 	andi	r2,r16,255
  811fa8:	1085883a 	add	r2,r2,r2
  811fac:	19000a17 	ldw	r4,40(r3)
  811fb0:	073fffc4 	movi	fp,-1
  811fb4:	1105883a 	add	r2,r2,r4
  811fb8:	1700002d 	sthio	fp,0(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811fbc:	a8c01217 	ldw	r3,72(r21)
  811fc0:	d0a75b17 	ldw	r2,-25236(gp)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  811fc4:	d4675e15 	stw	r17,-25224(gp)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  811fc8:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811fcc:	10c5883a 	add	r2,r2,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811fd0:	b889883a 	add	r4,r23,r2
    }
     
    if (sector_index != current_sector_index)
  811fd4:	d0a75f17 	ldw	r2,-25220(gp)
  811fd8:	11000326 	beq	r2,r4,811fe8 <find_first_empty_record_in_a_subdirectory+0x2b0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811fdc:	000b883a 	mov	r5,zero
  811fe0:	080eb300 	call	80eb30 <Read_Sector_Data>
  811fe4:	103f8326 	beq	r2,zero,811df4 <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811fe8:	d0e75d17 	ldw	r3,-25228(gp)
  811fec:	813fffcc 	andi	r4,r16,65535
  811ff0:	2120001c 	xori	r4,r4,32768
  811ff4:	18800a17 	ldw	r2,40(r3)
  811ff8:	21200004 	addi	r4,r4,-32768
  811ffc:	b085883a 	add	r2,r22,r2
  812000:	1100002d 	sthio	r4,0(r2)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  812004:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812008:	a8c01217 	ldw	r3,72(r21)
  81200c:	d0a75b17 	ldw	r2,-25236(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  812010:	8008d23a 	srli	r4,r16,8
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812014:	d4675e15 	stw	r17,-25224(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812018:	10c5883a 	add	r2,r2,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  81201c:	2089883a 	add	r4,r4,r2
    }
     
    if (sector_index != current_sector_index)
  812020:	d0a75f17 	ldw	r2,-25220(gp)
  812024:	11000326 	beq	r2,r4,812034 <find_first_empty_record_in_a_subdirectory+0x2fc>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812028:	000b883a 	mov	r5,zero
  81202c:	080eb300 	call	80eb30 <Read_Sector_Data>
  812030:	103f7026 	beq	r2,zero,811df4 <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812034:	d0e75d17 	ldw	r3,-25228(gp)
  812038:	80803fcc 	andi	r2,r16,255
  81203c:	1085883a 	add	r2,r2,r2
  812040:	19000a17 	ldw	r4,40(r3)
  812044:	1105883a 	add	r2,r2,r4
  812048:	1700002d 	sthio	fp,0(r2)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  81204c:	d1275f17 	ldw	r4,-25220(gp)
  812050:	000b883a 	mov	r5,zero
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812054:	d4675e15 	stw	r17,-25224(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812058:	080ea840 	call	80ea84 <Write_Sector_Data>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  81205c:	dd000017 	ldw	r20,0(sp)
  812060:	003f6406 	br	811df4 <find_first_empty_record_in_a_subdirectory+0xbc>

00812064 <create_file>:

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  812064:	defff704 	addi	sp,sp,-36
  812068:	dd400515 	stw	r21,20(sp)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81206c:	05402074 	movhi	r21,129
  812070:	ad5d8204 	addi	r21,r21,30216

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  812074:	dc400115 	stw	r17,4(sp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812078:	a8801217 	ldw	r2,72(r21)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81207c:	ac401117 	ldw	r17,68(r21)

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  812080:	ddc00715 	stw	r23,28(sp)
  812084:	dcc00315 	stw	r19,12(sp)
  812088:	dc800215 	stw	r18,8(sp)
  81208c:	dfc00815 	stw	ra,32(sp)
  812090:	dd800615 	stw	r22,24(sp)
  812094:	dd000415 	stw	r20,16(sp)
  812098:	dc000015 	stw	r16,0(sp)
  81209c:	2027883a 	mov	r19,r4
  8120a0:	2825883a 	mov	r18,r5
  8120a4:	302f883a 	mov	r23,r6
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8120a8:	14403726 	beq	r2,r17,812188 <create_file+0x124>
  8120ac:	05000084 	movi	r20,2
  8120b0:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  8120b4:	d1675b17 	ldw	r5,-25236(gp)
  8120b8:	8809883a 	mov	r4,r17
  8120bc:	080eb300 	call	80eb30 <Read_Sector_Data>
  8120c0:	10003d26 	beq	r2,zero,8121b8 <create_file+0x154>
  8120c4:	d0e75d17 	ldw	r3,-25228(gp)
  8120c8:	a0803fcc 	andi	r2,r20,255
  8120cc:	19000a17 	ldw	r4,40(r3)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  8120d0:	1085883a 	add	r2,r2,r2
  8120d4:	1105883a 	add	r2,r2,r4
  8120d8:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  8120dc:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  8120e0:	1821883a 	mov	r16,r3
                if (cluster == 0)
  8120e4:	10000a26 	beq	r2,zero,812110 <create_file+0xac>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  8120e8:	a5000044 	addi	r20,r20,1
                } 
            } while ((cluster_index % 256) != 0);
  8120ec:	a0803fcc 	andi	r2,r20,255
  8120f0:	103ff71e 	bne	r2,zero,8120d0 <create_file+0x6c>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8120f4:	a8801217 	ldw	r2,72(r21)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  8120f8:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8120fc:	147fed1e 	bne	r2,r17,8120b4 <create_file+0x50>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  812100:	80bfffcc 	andi	r2,r16,65535
  812104:	10a0001c 	xori	r2,r2,32768
  812108:	10a00004 	addi	r2,r2,-32768
  81210c:	10001e1e 	bne	r2,zero,812188 <create_file+0x124>
    
    if (find_first_empty_cluster(&cluster_number))
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  812110:	b8800a17 	ldw	r2,40(r23)
  812114:	1000301e 	bne	r2,zero,8121d8 <create_file+0x174>


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  812118:	a880050b 	ldhu	r2,20(r21)
  81211c:	a8c0030b 	ldhu	r3,12(r21)
  812120:	1004917a 	slli	r2,r2,5
  812124:	10e3283a 	div	r17,r2,r3
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  812128:	88001726 	beq	r17,zero,812188 <create_file+0x124>
  81212c:	0021883a 	mov	r16,zero
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  812130:	a9001317 	ldw	r4,76(r21)
  812134:	d1675b17 	ldw	r5,-25236(gp)
  812138:	8109883a 	add	r4,r16,r4
  81213c:	080eb300 	call	80eb30 <Read_Sector_Data>
  812140:	10001126 	beq	r2,zero,812188 <create_file+0x124>
  812144:	d0e75d17 	ldw	r3,-25228(gp)
  812148:	8012913a 	slli	r9,r16,4
                }
            }
        }
        else
        {
            break;
  81214c:	000b883a 	mov	r5,zero
  812150:	19800a17 	ldw	r6,40(r3)
  812154:	0009883a 	mov	r4,zero
  812158:	02003944 	movi	r8,229
  81215c:	01c00404 	movi	r7,16
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  812160:	2185883a 	add	r2,r4,r6
  812164:	10c00023 	ldbuio	r3,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  812168:	18c03fcc 	andi	r3,r3,255
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  81216c:	21000804 	addi	r4,r4,32
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
  812170:	1a00e826 	beq	r3,r8,812514 <create_file+0x4b0>
  812174:	1800e726 	beq	r3,zero,812514 <create_file+0x4b0>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  812178:	29400044 	addi	r5,r5,1
  81217c:	29fff81e 	bne	r5,r7,812160 <create_file+0xfc>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  812180:	84000044 	addi	r16,r16,1
  812184:	8c3fea1e 	bne	r17,r16,812130 <create_file+0xcc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812188:	0005883a 	mov	r2,zero
            }
        }

    }
    return result;           
}
  81218c:	dfc00817 	ldw	ra,32(sp)
  812190:	ddc00717 	ldw	r23,28(sp)
  812194:	dd800617 	ldw	r22,24(sp)
  812198:	dd400517 	ldw	r21,20(sp)
  81219c:	dd000417 	ldw	r20,16(sp)
  8121a0:	dcc00317 	ldw	r19,12(sp)
  8121a4:	dc800217 	ldw	r18,8(sp)
  8121a8:	dc400117 	ldw	r17,4(sp)
  8121ac:	dc000017 	ldw	r16,0(sp)
  8121b0:	dec00904 	addi	sp,sp,36
  8121b4:	f800283a 	ret
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  8121b8:	80bfffcc 	andi	r2,r16,65535
  8121bc:	10a0001c 	xori	r2,r2,32768
  8121c0:	10a00004 	addi	r2,r2,-32768
  8121c4:	103fd226 	beq	r2,zero,812110 <create_file+0xac>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8121c8:	a8801217 	ldw	r2,72(r21)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  8121cc:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8121d0:	147fb81e 	bne	r2,r17,8120b4 <create_file+0x50>
  8121d4:	003fca06 	br	812100 <create_file+0x9c>
            record_index = find_first_empty_record_in_root_directory();
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  8121d8:	b900058b 	ldhu	r4,22(r23)
  8121dc:	0811d380 	call	811d38 <find_first_empty_record_in_a_subdirectory>
  8121e0:	102d883a 	mov	r22,r2
        }
        if (record_index >= 0)
  8121e4:	b03fe816 	blt	r22,zero,812188 <create_file+0x124>

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8121e8:	9809883a 	mov	r4,r19
  8121ec:	0803e880 	call	803e88 <strlen>
    
    for(index = 0; index < length; index++)
  8121f0:	00815d0e 	bge	zero,r2,812768 <create_file+0x704>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8121f4:	99c00003 	ldbu	r7,0(r19)
  8121f8:	01401704 	movi	r5,92
  8121fc:	38c03fcc 	andi	r3,r7,255
  812200:	18c0201c 	xori	r3,r3,128
  812204:	18ffe004 	addi	r3,r3,-128
  812208:	19400c26 	beq	r3,r5,81223c <create_file+0x1d8>
  81220c:	01000bc4 	movi	r4,47
  812210:	19000a26 	beq	r3,r4,81223c <create_file+0x1d8>
  812214:	280d883a 	mov	r6,r5
  812218:	200b883a 	mov	r5,r4
  81221c:	0009883a 	mov	r4,zero
  812220:	00000306 	br	812230 <create_file+0x1cc>
  812224:	18c00007 	ldb	r3,0(r3)
  812228:	1980bd26 	beq	r3,r6,812520 <create_file+0x4bc>
  81222c:	1940bc26 	beq	r3,r5,812520 <create_file+0x4bc>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812230:	21000044 	addi	r4,r4,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812234:	9907883a 	add	r3,r19,r4
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812238:	113ffa1e 	bne	r2,r4,812224 <create_file+0x1c0>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81223c:	38c03fcc 	andi	r3,r7,255
  812240:	18c0201c 	xori	r3,r3,128
  812244:	18ffe004 	addi	r3,r3,-128
  812248:	00800b84 	movi	r2,46
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  81224c:	92000204 	addi	r8,r18,8
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812250:	18810326 	beq	r3,r2,812660 <create_file+0x5fc>
        {
            name[counter] = filename[local];
  812254:	91c00005 	stb	r7,0(r18)
            if (filename[local] != 0) local++;
  812258:	98800007 	ldb	r2,0(r19)
  81225c:	1000e326 	beq	r2,zero,8125ec <create_file+0x588>
  812260:	01c00044 	movi	r7,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812264:	99c9883a 	add	r4,r19,r7
  812268:	21400003 	ldbu	r5,0(r4)
  81226c:	00800b84 	movi	r2,46
  812270:	200d883a 	mov	r6,r4
  812274:	28c03fcc 	andi	r3,r5,255
  812278:	18c0201c 	xori	r3,r3,128
  81227c:	18ffe004 	addi	r3,r3,-128
  812280:	18810226 	beq	r3,r2,81268c <create_file+0x628>
        {
            name[counter] = filename[local];
  812284:	91400045 	stb	r5,1(r18)
            if (filename[local] != 0) local++;
  812288:	30800007 	ldb	r2,0(r6)
  81228c:	1000dd26 	beq	r2,zero,812604 <create_file+0x5a0>
  812290:	39c00044 	addi	r7,r7,1
  812294:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812298:	21400003 	ldbu	r5,0(r4)
  81229c:	00800b84 	movi	r2,46
  8122a0:	28c03fcc 	andi	r3,r5,255
  8122a4:	18c0201c 	xori	r3,r3,128
  8122a8:	18ffe004 	addi	r3,r3,-128
  8122ac:	1880ff26 	beq	r3,r2,8126ac <create_file+0x648>
        {
            name[counter] = filename[local];
  8122b0:	91400085 	stb	r5,2(r18)
            if (filename[local] != 0) local++;
  8122b4:	20800007 	ldb	r2,0(r4)
  8122b8:	1000d726 	beq	r2,zero,812618 <create_file+0x5b4>
  8122bc:	39c00044 	addi	r7,r7,1
  8122c0:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8122c4:	21400003 	ldbu	r5,0(r4)
  8122c8:	00800b84 	movi	r2,46
  8122cc:	28c03fcc 	andi	r3,r5,255
  8122d0:	18c0201c 	xori	r3,r3,128
  8122d4:	18ffe004 	addi	r3,r3,-128
  8122d8:	1880fc26 	beq	r3,r2,8126cc <create_file+0x668>
        {
            name[counter] = filename[local];
  8122dc:	914000c5 	stb	r5,3(r18)
            if (filename[local] != 0) local++;
  8122e0:	20800007 	ldb	r2,0(r4)
  8122e4:	1000d026 	beq	r2,zero,812628 <create_file+0x5c4>
  8122e8:	39c00044 	addi	r7,r7,1
  8122ec:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8122f0:	21400003 	ldbu	r5,0(r4)
  8122f4:	00800b84 	movi	r2,46
  8122f8:	28c03fcc 	andi	r3,r5,255
  8122fc:	18c0201c 	xori	r3,r3,128
  812300:	18ffe004 	addi	r3,r3,-128
  812304:	1880f926 	beq	r3,r2,8126ec <create_file+0x688>
        {
            name[counter] = filename[local];
  812308:	91400105 	stb	r5,4(r18)
            if (filename[local] != 0) local++;
  81230c:	20800007 	ldb	r2,0(r4)
  812310:	1000c926 	beq	r2,zero,812638 <create_file+0x5d4>
  812314:	39c00044 	addi	r7,r7,1
  812318:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81231c:	21400003 	ldbu	r5,0(r4)
  812320:	00800b84 	movi	r2,46
  812324:	28c03fcc 	andi	r3,r5,255
  812328:	18c0201c 	xori	r3,r3,128
  81232c:	18ffe004 	addi	r3,r3,-128
  812330:	1880f626 	beq	r3,r2,81270c <create_file+0x6a8>
        {
            name[counter] = filename[local];
  812334:	91400145 	stb	r5,5(r18)
            if (filename[local] != 0) local++;
  812338:	20800007 	ldb	r2,0(r4)
  81233c:	1000c226 	beq	r2,zero,812648 <create_file+0x5e4>
  812340:	39c00044 	addi	r7,r7,1
  812344:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812348:	21400003 	ldbu	r5,0(r4)
  81234c:	00800b84 	movi	r2,46
  812350:	28c03fcc 	andi	r3,r5,255
  812354:	18c0201c 	xori	r3,r3,128
  812358:	18ffe004 	addi	r3,r3,-128
  81235c:	1880f326 	beq	r3,r2,81272c <create_file+0x6c8>
        {
            name[counter] = filename[local];
  812360:	91400185 	stb	r5,6(r18)
            if (filename[local] != 0) local++;
  812364:	20800007 	ldb	r2,0(r4)
  812368:	1000bb26 	beq	r2,zero,812658 <create_file+0x5f4>
  81236c:	39c00044 	addi	r7,r7,1
  812370:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812374:	21400003 	ldbu	r5,0(r4)
  812378:	00800b84 	movi	r2,46
  81237c:	28c03fcc 	andi	r3,r5,255
  812380:	18c0201c 	xori	r3,r3,128
  812384:	18ffe004 	addi	r3,r3,-128
  812388:	1880f026 	beq	r3,r2,81274c <create_file+0x6e8>
        {
            name[counter] = filename[local];
  81238c:	914001c5 	stb	r5,7(r18)
            if (filename[local] != 0) local++;
  812390:	20800007 	ldb	r2,0(r4)
  812394:	10000726 	beq	r2,zero,8123b4 <create_file+0x350>
  812398:	39c00044 	addi	r7,r7,1
  81239c:	99c9883a 	add	r4,r19,r7
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  8123a0:	20c00007 	ldb	r3,0(r4)
  8123a4:	00800b84 	movi	r2,46
  8123a8:	1880021e 	bne	r3,r2,8123b4 <create_file+0x350>
  8123ac:	39c00044 	addi	r7,r7,1
  8123b0:	99c9883a 	add	r4,r19,r7
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  8123b4:	20800003 	ldbu	r2,0(r4)
  8123b8:	1000881e 	bne	r2,zero,8125dc <create_file+0x578>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  8123bc:	00800804 	movi	r2,32
  8123c0:	40800005 	stb	r2,0(r8)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  8123c4:	20800003 	ldbu	r2,0(r4)
  8123c8:	1000801e 	bne	r2,zero,8125cc <create_file+0x568>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  8123cc:	00800804 	movi	r2,32
  8123d0:	40800045 	stb	r2,1(r8)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  8123d4:	20800003 	ldbu	r2,0(r4)
  8123d8:	1000011e 	bne	r2,zero,8123e0 <create_file+0x37c>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  8123dc:	00800804 	movi	r2,32
  8123e0:	40800085 	stb	r2,2(r8)
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  8123e4:	b005d43a 	srai	r2,r22,16
            file_record->create_time = 0;
            file_record->create_date = 0;
            file_record->last_access_date = 0;
            file_record->last_modified_time = 0;
            file_record->last_modified_date = 0;
            file_record->start_cluster_index = cluster_number;
  8123e8:	9500058d 	sth	r20,22(r18)
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  8123ec:	b900058b 	ldhu	r4,22(r23)
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  8123f0:	10c003cc 	andi	r3,r2,15
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  8123f4:	10bfffcc 	andi	r2,r2,65535
  8123f8:	100dd13a 	srai	r6,r2,4
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  8123fc:	1806917a 	slli	r3,r3,5
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
  812400:	00800044 	movi	r2,1
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
  812404:	b17fffcc 	andi	r5,r22,65535
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  812408:	90c00c0d 	sth	r3,48(r18)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  81240c:	91000d15 	stw	r4,52(r18)
            file_record->in_use = true;
            file_record->modified = true;
  812410:	90800e15 	stw	r2,56(r18)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
                         
            file_record->attributes = 0;
  812414:	900002c5 	stb	zero,11(r18)
            file_record->create_time = 0;
  812418:	9000030d 	sth	zero,12(r18)
            file_record->create_date = 0;
  81241c:	9000038d 	sth	zero,14(r18)
            file_record->last_access_date = 0;
  812420:	9000040d 	sth	zero,16(r18)
            file_record->last_modified_time = 0;
  812424:	9000048d 	sth	zero,18(r18)
            file_record->last_modified_date = 0;
  812428:	9000050d 	sth	zero,20(r18)
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
  81242c:	90000615 	stw	zero,24(r18)
            file_record->current_cluster_index = cluster_number;
  812430:	95000715 	stw	r20,28(r18)
            file_record->current_sector_in_cluster = 0;
  812434:	90000815 	stw	zero,32(r18)
            file_record->current_byte_position = 0;
  812438:	90000915 	stw	zero,36(r18)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  81243c:	91400a15 	stw	r5,40(r18)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  812440:	91800b15 	stw	r6,44(r18)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
  812444:	90800f15 	stw	r2,60(r18)
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  812448:	2800591e 	bne	r5,zero,8125b0 <create_file+0x54c>
  81244c:	a8801317 	ldw	r2,76(r21)
  812450:	1189883a 	add	r4,r2,r6
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  812454:	d1675b17 	ldw	r5,-25236(gp)
  812458:	080eb300 	call	80eb30 <Read_Sector_Data>
  81245c:	103f4a26 	beq	r2,zero,812188 <create_file+0x124>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  812460:	91000c0f 	ldh	r4,48(r18)
  812464:	900b883a 	mov	r5,r18
  812468:	080e6800 	call	80e680 <Write_File_Record_At_Offset>
  81246c:	103f4626 	beq	r2,zero,812188 <create_file+0x124>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  812470:	d0a75e17 	ldw	r2,-25224(gp)
  812474:	1000b81e 	bne	r2,zero,812758 <create_file+0x6f4>


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812478:	a8801117 	ldw	r2,68(r21)
  81247c:	d0e75b17 	ldw	r3,-25236(gp)
  812480:	a020d23a 	srli	r16,r20,8
  812484:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812488:	d0a75f17 	ldw	r2,-25220(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  81248c:	80c9883a 	add	r4,r16,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812490:	11000326 	beq	r2,r4,8124a0 <create_file+0x43c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812494:	000b883a 	mov	r5,zero
  812498:	080eb300 	call	80eb30 <Read_Sector_Data>
  81249c:	10000926 	beq	r2,zero,8124c4 <create_file+0x460>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8124a0:	d0e75d17 	ldw	r3,-25228(gp)
  8124a4:	a0803fcc 	andi	r2,r20,255
  8124a8:	1085883a 	add	r2,r2,r2
  8124ac:	19000a17 	ldw	r4,40(r3)
  8124b0:	00ffffc4 	movi	r3,-1
  8124b4:	1105883a 	add	r2,r2,r4
  8124b8:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  8124bc:	01000044 	movi	r4,1
  8124c0:	d1275e15 	stw	r4,-25224(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8124c4:	a8801217 	ldw	r2,72(r21)
  8124c8:	d0e75b17 	ldw	r3,-25236(gp)
  8124cc:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8124d0:	d0a75f17 	ldw	r2,-25220(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8124d4:	80c9883a 	add	r4,r16,r3
    }
     
    if (sector_index != current_sector_index)
  8124d8:	11000326 	beq	r2,r4,8124e8 <create_file+0x484>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8124dc:	000b883a 	mov	r5,zero
  8124e0:	080eb300 	call	80eb30 <Read_Sector_Data>
  8124e4:	103f2826 	beq	r2,zero,812188 <create_file+0x124>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8124e8:	d0e75d17 	ldw	r3,-25228(gp)
  8124ec:	a0803fcc 	andi	r2,r20,255
  8124f0:	1085883a 	add	r2,r2,r2
  8124f4:	19000a17 	ldw	r4,40(r3)
  8124f8:	00ffffc4 	movi	r3,-1
  8124fc:	1105883a 	add	r2,r2,r4
  812500:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  812504:	01000044 	movi	r4,1
  812508:	2005883a 	mov	r2,r4
  81250c:	d1275e15 	stw	r4,-25224(gp)
  812510:	003f1e06 	br	81218c <create_file+0x128>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
  812514:	2a45883a 	add	r2,r5,r9
  812518:	102c943a 	slli	r22,r2,16
  81251c:	003f3106 	br	8121e4 <create_file+0x180>
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  812520:	0100910e 	bge	zero,r4,812768 <create_file+0x704>
  812524:	0023883a 	mov	r17,zero
            {
                last_dir_separator = last_dir_separator+location+1;
  812528:	88800044 	addi	r2,r17,1
  81252c:	1123883a 	add	r17,r2,r4
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  812530:	9c61883a 	add	r16,r19,r17

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  812534:	8009883a 	mov	r4,r16
  812538:	0803e880 	call	803e88 <strlen>
    
    for(index = 0; index < length; index++)
  81253c:	0080180e 	bge	zero,r2,8125a0 <create_file+0x53c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812540:	80c00007 	ldb	r3,0(r16)
  812544:	01401704 	movi	r5,92
  812548:	19400c26 	beq	r3,r5,81257c <create_file+0x518>
  81254c:	01000bc4 	movi	r4,47
  812550:	19000a26 	beq	r3,r4,81257c <create_file+0x518>
  812554:	280d883a 	mov	r6,r5
  812558:	200b883a 	mov	r5,r4
  81255c:	0009883a 	mov	r4,zero
  812560:	00000306 	br	812570 <create_file+0x50c>
  812564:	18c00007 	ldb	r3,0(r3)
  812568:	19800f26 	beq	r3,r6,8125a8 <create_file+0x544>
  81256c:	19400e26 	beq	r3,r5,8125a8 <create_file+0x544>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812570:	21000044 	addi	r4,r4,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812574:	8107883a 	add	r3,r16,r4
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812578:	113ffa1e 	bne	r2,r4,812564 <create_file+0x500>
  81257c:	81c00003 	ldbu	r7,0(r16)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812580:	00800b84 	movi	r2,46
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  812584:	8027883a 	mov	r19,r16
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812588:	38c03fcc 	andi	r3,r7,255
  81258c:	18c0201c 	xori	r3,r3,128
  812590:	18ffe004 	addi	r3,r3,-128
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  812594:	92000204 	addi	r8,r18,8
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812598:	18bf2e1e 	bne	r3,r2,812254 <create_file+0x1f0>
  81259c:	00003006 	br	812660 <create_file+0x5fc>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8125a0:	0009883a 	mov	r4,zero
        {
            break;
        }
    }
    
    if (index == length)
  8125a4:	103ff526 	beq	r2,zero,81257c <create_file+0x518>
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  8125a8:	013fdf16 	blt	zero,r4,812528 <create_file+0x4c4>
  8125ac:	003ff306 	br	81257c <create_file+0x518>
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  8125b0:	a9000383 	ldbu	r4,14(r21)
  8125b4:	28ffff84 	addi	r3,r5,-2
  8125b8:	a8801417 	ldw	r2,80(r21)
  8125bc:	1907383a 	mul	r3,r3,r4
  8125c0:	1185883a 	add	r2,r2,r6
  8125c4:	1889883a 	add	r4,r3,r2
  8125c8:	003fa206 	br	812454 <create_file+0x3f0>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
  8125cc:	39c00044 	addi	r7,r7,1
  8125d0:	99c9883a 	add	r4,r19,r7
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  8125d4:	40800045 	stb	r2,1(r8)
  8125d8:	003f7e06 	br	8123d4 <create_file+0x370>
            local++;
  8125dc:	39c00044 	addi	r7,r7,1
  8125e0:	99c9883a 	add	r4,r19,r7
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  8125e4:	40800005 	stb	r2,0(r8)
  8125e8:	003f7606 	br	8123c4 <create_file+0x360>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8125ec:	99400003 	ldbu	r5,0(r19)
  8125f0:	980d883a 	mov	r6,r19
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  8125f4:	000f883a 	mov	r7,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
  8125f8:	91400045 	stb	r5,1(r18)
            if (filename[local] != 0) local++;
  8125fc:	30800007 	ldb	r2,0(r6)
  812600:	103f231e 	bne	r2,zero,812290 <create_file+0x22c>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812604:	99c9883a 	add	r4,r19,r7
  812608:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  81260c:	91400085 	stb	r5,2(r18)
            if (filename[local] != 0) local++;
  812610:	20800007 	ldb	r2,0(r4)
  812614:	103f291e 	bne	r2,zero,8122bc <create_file+0x258>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812618:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  81261c:	914000c5 	stb	r5,3(r18)
            if (filename[local] != 0) local++;
  812620:	20800007 	ldb	r2,0(r4)
  812624:	103f301e 	bne	r2,zero,8122e8 <create_file+0x284>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812628:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  81262c:	91400105 	stb	r5,4(r18)
            if (filename[local] != 0) local++;
  812630:	20800007 	ldb	r2,0(r4)
  812634:	103f371e 	bne	r2,zero,812314 <create_file+0x2b0>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812638:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  81263c:	91400145 	stb	r5,5(r18)
            if (filename[local] != 0) local++;
  812640:	20800007 	ldb	r2,0(r4)
  812644:	103f3e1e 	bne	r2,zero,812340 <create_file+0x2dc>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812648:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  81264c:	91400185 	stb	r5,6(r18)
            if (filename[local] != 0) local++;
  812650:	20800007 	ldb	r2,0(r4)
  812654:	103f451e 	bne	r2,zero,81236c <create_file+0x308>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812658:	21400003 	ldbu	r5,0(r4)
  81265c:	003f4b06 	br	81238c <create_file+0x328>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812660:	00800804 	movi	r2,32
  812664:	000f883a 	mov	r7,zero
  812668:	90800005 	stb	r2,0(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81266c:	99c9883a 	add	r4,r19,r7
  812670:	21400003 	ldbu	r5,0(r4)
  812674:	00800b84 	movi	r2,46
  812678:	200d883a 	mov	r6,r4
  81267c:	28c03fcc 	andi	r3,r5,255
  812680:	18c0201c 	xori	r3,r3,128
  812684:	18ffe004 	addi	r3,r3,-128
  812688:	18befe1e 	bne	r3,r2,812284 <create_file+0x220>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  81268c:	00800804 	movi	r2,32
  812690:	90800045 	stb	r2,1(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812694:	21400003 	ldbu	r5,0(r4)
  812698:	00800b84 	movi	r2,46
  81269c:	28c03fcc 	andi	r3,r5,255
  8126a0:	18c0201c 	xori	r3,r3,128
  8126a4:	18ffe004 	addi	r3,r3,-128
  8126a8:	18bf011e 	bne	r3,r2,8122b0 <create_file+0x24c>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  8126ac:	00800804 	movi	r2,32
  8126b0:	90800085 	stb	r2,2(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8126b4:	21400003 	ldbu	r5,0(r4)
  8126b8:	00800b84 	movi	r2,46
  8126bc:	28c03fcc 	andi	r3,r5,255
  8126c0:	18c0201c 	xori	r3,r3,128
  8126c4:	18ffe004 	addi	r3,r3,-128
  8126c8:	18bf041e 	bne	r3,r2,8122dc <create_file+0x278>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  8126cc:	00800804 	movi	r2,32
  8126d0:	908000c5 	stb	r2,3(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8126d4:	21400003 	ldbu	r5,0(r4)
  8126d8:	00800b84 	movi	r2,46
  8126dc:	28c03fcc 	andi	r3,r5,255
  8126e0:	18c0201c 	xori	r3,r3,128
  8126e4:	18ffe004 	addi	r3,r3,-128
  8126e8:	18bf071e 	bne	r3,r2,812308 <create_file+0x2a4>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  8126ec:	00800804 	movi	r2,32
  8126f0:	90800105 	stb	r2,4(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8126f4:	21400003 	ldbu	r5,0(r4)
  8126f8:	00800b84 	movi	r2,46
  8126fc:	28c03fcc 	andi	r3,r5,255
  812700:	18c0201c 	xori	r3,r3,128
  812704:	18ffe004 	addi	r3,r3,-128
  812708:	18bf0a1e 	bne	r3,r2,812334 <create_file+0x2d0>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  81270c:	00800804 	movi	r2,32
  812710:	90800145 	stb	r2,5(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812714:	21400003 	ldbu	r5,0(r4)
  812718:	00800b84 	movi	r2,46
  81271c:	28c03fcc 	andi	r3,r5,255
  812720:	18c0201c 	xori	r3,r3,128
  812724:	18ffe004 	addi	r3,r3,-128
  812728:	18bf0d1e 	bne	r3,r2,812360 <create_file+0x2fc>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  81272c:	00800804 	movi	r2,32
  812730:	90800185 	stb	r2,6(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812734:	21400003 	ldbu	r5,0(r4)
  812738:	00800b84 	movi	r2,46
  81273c:	28c03fcc 	andi	r3,r5,255
  812740:	18c0201c 	xori	r3,r3,128
  812744:	18ffe004 	addi	r3,r3,-128
  812748:	18bf101e 	bne	r3,r2,81238c <create_file+0x328>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  81274c:	00800804 	movi	r2,32
  812750:	908001c5 	stb	r2,7(r18)
  812754:	003f1206 	br	8123a0 <create_file+0x33c>
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812758:	d1275f17 	ldw	r4,-25220(gp)
  81275c:	000b883a 	mov	r5,zero
  812760:	080ea840 	call	80ea84 <Write_Sector_Data>
  812764:	003f4406 	br	812478 <create_file+0x414>
  812768:	99c00003 	ldbu	r7,0(r19)
  81276c:	003eb306 	br	81223c <create_file+0x1d8>

00812770 <alt_up_sd_card_fopen>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  812770:	d0a75d17 	ldw	r2,-25228(gp)
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  812774:	deffe804 	addi	sp,sp,-96
  812778:	dc401215 	stw	r17,72(sp)
  81277c:	dc001115 	stw	r16,68(sp)
  812780:	dfc01715 	stw	ra,92(sp)
  812784:	dd401615 	stw	r21,88(sp)
  812788:	dd001515 	stw	r20,84(sp)
  81278c:	dcc01415 	stw	r19,80(sp)
  812790:	dc801315 	stw	r18,76(sp)
  812794:	2823883a 	mov	r17,r5
  812798:	2021883a 	mov	r16,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  81279c:	10001126 	beq	r2,zero,8127e4 <alt_up_sd_card_fopen+0x74>
  8127a0:	d0e75517 	ldw	r3,-25260(gp)
  8127a4:	1880002b 	ldhuio	r2,0(r3)
  8127a8:	1080008c 	andi	r2,r2,2
  8127ac:	10000d26 	beq	r2,zero,8127e4 <alt_up_sd_card_fopen+0x74>
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8127b0:	d0a75417 	ldw	r2,-25264(gp)
  8127b4:	10001b1e 	bne	r2,zero,812824 <alt_up_sd_card_fopen+0xb4>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
                    {
                        active_files[file_record_index].in_use = true;
    					active_files[file_record_index].modified = true;
  8127b8:	013fffc4 	movi	r4,-1
    		}
        }
	}

	return file_record_index;
}
  8127bc:	2005883a 	mov	r2,r4
  8127c0:	dfc01717 	ldw	ra,92(sp)
  8127c4:	dd401617 	ldw	r21,88(sp)
  8127c8:	dd001517 	ldw	r20,84(sp)
  8127cc:	dcc01417 	ldw	r19,80(sp)
  8127d0:	dc801317 	ldw	r18,76(sp)
  8127d4:	dc401217 	ldw	r17,72(sp)
  8127d8:	dc001117 	ldw	r16,68(sp)
  8127dc:	dec01804 	addi	sp,sp,96
  8127e0:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  8127e4:	d0e75317 	ldw	r3,-25268(gp)
  8127e8:	00800044 	movi	r2,1
  8127ec:	18bff21e 	bne	r3,r2,8127b8 <alt_up_sd_card_fopen+0x48>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  8127f0:	00802074 	movhi	r2,129
  8127f4:	109d7d04 	addi	r2,r2,30196
		is_sd_card_formated_as_FAT16 = false;
  8127f8:	00c02074 	movhi	r3,129
  8127fc:	18dda604 	addi	r3,r3,30360
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  812800:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  812804:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  812808:	d0275415 	stw	zero,-25264(gp)
  81280c:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  812810:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  812814:	183fff15 	stw	zero,-4(r3)
  812818:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  81281c:	18bffc1e 	bne	r3,r2,812810 <alt_up_sd_card_fopen+0xa0>
  812820:	003fe506 	br	8127b8 <alt_up_sd_card_fopen+0x48>
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
        unsigned int home_directory_cluster = 0;
  812824:	d8000015 	stw	zero,0(sp)

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
  812828:	0803e880 	call	803e88 <strlen>
  81282c:	100f883a 	mov	r7,r2
    
    for (index = 0; index < length; index++)
  812830:	0080650e 	bge	zero,r2,8129c8 <alt_up_sd_card_fopen+0x258>
  812834:	8009883a 	mov	r4,r16
  812838:	000b883a 	mov	r5,zero
  81283c:	01800644 	movi	r6,25
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812840:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  812844:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812848:	18bfe7c4 	addi	r2,r3,-97
  81284c:	10803fcc 	andi	r2,r2,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  812850:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812854:	30800136 	bltu	r6,r2,81285c <alt_up_sd_card_fopen+0xec>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  812858:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  81285c:	21000044 	addi	r4,r4,1
  812860:	397ff71e 	bne	r7,r5,812840 <alt_up_sd_card_fopen+0xd0>


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
    int length = strlen(file_name);
  812864:	8009883a 	mov	r4,r16
  812868:	0803e880 	call	803e88 <strlen>
  81286c:	100f883a 	mov	r7,r2
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812870:	0080550e 	bge	zero,r2,8129c8 <alt_up_sd_card_fopen+0x258>
    {
        if ((file_name[index] == ' ') ||
  812874:	80c00007 	ldb	r3,0(r16)
  812878:	00800804 	movi	r2,32
  81287c:	18801826 	beq	r3,r2,8128e0 <alt_up_sd_card_fopen+0x170>
  812880:	017fffc4 	movi	r5,-1
  812884:	1017883a 	mov	r11,r2
  812888:	0009883a 	mov	r4,zero
  81288c:	280d883a 	mov	r6,r5
  812890:	02001704 	movi	r8,92
  812894:	02400bc4 	movi	r9,47
  812898:	02800244 	movi	r10,9
  81289c:	03400b84 	movi	r13,46
  8128a0:	030000c4 	movi	r12,3
  8128a4:	20bfffc4 	addi	r2,r4,-1
  8128a8:	11804426 	beq	r2,r6,8129bc <alt_up_sd_card_fopen+0x24c>
  8128ac:	2145c83a 	sub	r2,r4,r5
  8128b0:	12803c26 	beq	r2,r10,8129a4 <alt_up_sd_card_fopen+0x234>
  8128b4:	29803d26 	beq	r5,r6,8129ac <alt_up_sd_card_fopen+0x23c>
  8128b8:	60803c0e 	bge	r12,r2,8129ac <alt_up_sd_card_fopen+0x23c>
  8128bc:	1a000126 	beq	r3,r8,8128c4 <alt_up_sd_card_fopen+0x154>
  8128c0:	1a40071e 	bne	r3,r9,8128e0 <alt_up_sd_card_fopen+0x170>
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  8128c4:	200d883a 	mov	r6,r4
  8128c8:	200b883a 	mov	r5,r4
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  8128cc:	21000044 	addi	r4,r4,1
  8128d0:	39003d26 	beq	r7,r4,8129c8 <alt_up_sd_card_fopen+0x258>
    {
        if ((file_name[index] == ' ') ||
  8128d4:	2405883a 	add	r2,r4,r16
  8128d8:	10c00007 	ldb	r3,0(r2)
  8128dc:	1afff11e 	bne	r3,r11,8128a4 <alt_up_sd_card_fopen+0x134>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  8128e0:	000b883a 	mov	r5,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  8128e4:	81c5883a 	add	r2,r16,r7
  8128e8:	113fffc7 	ldb	r4,-1(r2)
  8128ec:	00c01704 	movi	r3,92
  8128f0:	20ffb126 	beq	r4,r3,8127b8 <alt_up_sd_card_fopen+0x48>
  8128f4:	00800bc4 	movi	r2,47
  8128f8:	20bfaf26 	beq	r4,r2,8127b8 <alt_up_sd_card_fopen+0x48>
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
        if (check_file_name_for_FAT16_compliance(name))
  8128fc:	2805003a 	cmpeq	r2,r5,zero
  812900:	103fad1e 	bne	r2,zero,8127b8 <alt_up_sd_card_fopen+0x48>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  812904:	dd400104 	addi	r21,sp,4
  812908:	8009883a 	mov	r4,r16
  81290c:	d80b883a 	mov	r5,sp
  812910:	a80d883a 	mov	r6,r21
  812914:	08109b00 	call	8109b0 <get_home_directory_cluster_for_file>
  812918:	103fa726 	beq	r2,zero,8127b8 <alt_up_sd_card_fopen+0x48>
  81291c:	0007883a 	mov	r3,zero
  812920:	01002074 	movhi	r4,129
  812924:	211da604 	addi	r4,r4,30360
  812928:	01400504 	movi	r5,20
  81292c:	00000206 	br	812938 <alt_up_sd_card_fopen+0x1c8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  812930:	18c00044 	addi	r3,r3,1
  812934:	197fa026 	beq	r3,r5,8127b8 <alt_up_sd_card_fopen+0x48>
    		{
    			if (active_files[index].in_use == false)
  812938:	20800017 	ldw	r2,0(r4)
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  81293c:	21001004 	addi	r4,r4,64
    		{
    			if (active_files[index].in_use == false)
  812940:	103ffb1e 	bne	r2,zero,812930 <alt_up_sd_card_fopen+0x1c0>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  812944:	1cffffcc 	andi	r19,r3,65535
  812948:	9ce0001c 	xori	r19,r19,32768
  81294c:	9ce00004 	addi	r19,r19,-32768
  812950:	98003416 	blt	r19,zero,812a24 <alt_up_sd_card_fopen+0x2b4>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  812954:	980491ba 	slli	r2,r19,6
  812958:	05002074 	movhi	r20,129
  81295c:	a51d9704 	addi	r20,r20,30300
  812960:	d9000017 	ldw	r4,0(sp)
  812964:	1525883a 	add	r18,r2,r20
  812968:	800b883a 	mov	r5,r16
  81296c:	900d883a 	mov	r6,r18
  812970:	080fcec0 	call	80fcec <find_file_in_directory>
  812974:	1000161e 	bne	r2,zero,8129d0 <alt_up_sd_card_fopen+0x260>
							}
						}
					}

                }
                else if (create)
  812978:	883f8f26 	beq	r17,zero,8127b8 <alt_up_sd_card_fopen+0x48>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  81297c:	8009883a 	mov	r4,r16
  812980:	a80d883a 	mov	r6,r21
  812984:	900b883a 	mov	r5,r18
  812988:	08120640 	call	812064 <create_file>
  81298c:	103f8a26 	beq	r2,zero,8127b8 <alt_up_sd_card_fopen+0x48>
                    {
                        active_files[file_record_index].in_use = true;
  812990:	00800044 	movi	r2,1
  812994:	9809883a 	mov	r4,r19
    					active_files[file_record_index].modified = true;
  812998:	90800e15 	stw	r2,56(r18)
                else if (create)
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
                    {
                        active_files[file_record_index].in_use = true;
  81299c:	90800f15 	stw	r2,60(r18)
  8129a0:	003f8606 	br	8127bc <alt_up_sd_card_fopen+0x4c>
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  8129a4:	1b7fce1e 	bne	r3,r13,8128e0 <alt_up_sd_card_fopen+0x170>
  8129a8:	29bfc31e 	bne	r5,r6,8128b8 <alt_up_sd_card_fopen+0x148>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  8129ac:	1a3fc526 	beq	r3,r8,8128c4 <alt_up_sd_card_fopen+0x154>
  8129b0:	1a7fc426 	beq	r3,r9,8128c4 <alt_up_sd_card_fopen+0x154>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  8129b4:	1b7fc426 	beq	r3,r13,8128c8 <alt_up_sd_card_fopen+0x158>
  8129b8:	003fc406 	br	8128cc <alt_up_sd_card_fopen+0x15c>
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  8129bc:	1a3fc826 	beq	r3,r8,8128e0 <alt_up_sd_card_fopen+0x170>
  8129c0:	1a7fba1e 	bne	r3,r9,8128ac <alt_up_sd_card_fopen+0x13c>
  8129c4:	003fc606 	br	8128e0 <alt_up_sd_card_fopen+0x170>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  8129c8:	01400044 	movi	r5,1
  8129cc:	003fc506 	br	8128e4 <alt_up_sd_card_fopen+0x174>
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
                {
                    if (create)
  8129d0:	883f791e 	bne	r17,zero,8127b8 <alt_up_sd_card_fopen+0x48>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  8129d4:	9080058b 	ldhu	r2,22(r18)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
  8129d8:	00c00044 	movi	r3,1
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
                    active_files[file_record_index].current_sector_in_cluster = 0;
  8129dc:	90000815 	stw	zero,32(r18)
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  8129e0:	90800715 	stw	r2,28(r18)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
  8129e4:	90000915 	stw	zero,36(r18)
                    active_files[file_record_index].in_use = true;
  8129e8:	90c00f15 	stw	r3,60(r18)
    				active_files[file_record_index].modified = false;
  8129ec:	90000e15 	stw	zero,56(r18)
  8129f0:	a1800f04 	addi	r6,r20,60
  8129f4:	1811883a 	mov	r8,r3
  8129f8:	900b883a 	mov	r5,r18
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  8129fc:	9809883a 	mov	r4,r19
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;
  812a00:	000f883a 	mov	r7,zero
  812a04:	02400504 	movi	r9,20

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  812a08:	3cc00226 	beq	r7,r19,812a14 <alt_up_sd_card_fopen+0x2a4>
  812a0c:	30800017 	ldw	r2,0(r6)
  812a10:	12000626 	beq	r2,r8,812a2c <alt_up_sd_card_fopen+0x2bc>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  812a14:	39c00044 	addi	r7,r7,1
  812a18:	31801004 	addi	r6,r6,64
  812a1c:	3a7ffa1e 	bne	r7,r9,812a08 <alt_up_sd_card_fopen+0x298>
  812a20:	003f6606 	br	8127bc <alt_up_sd_card_fopen+0x4c>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  812a24:	9809883a 	mov	r4,r19
  812a28:	003f6406 	br	8127bc <alt_up_sd_card_fopen+0x4c>
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  812a2c:	30fffb17 	ldw	r3,-20(r6)
  812a30:	28800a17 	ldw	r2,40(r5)
  812a34:	10fff71e 	bne	r2,r3,812a14 <alt_up_sd_card_fopen+0x2a4>
  812a38:	30fffc17 	ldw	r3,-16(r6)
  812a3c:	28800b17 	ldw	r2,44(r5)
  812a40:	10fff41e 	bne	r2,r3,812a14 <alt_up_sd_card_fopen+0x2a4>
  812a44:	30fffd0f 	ldh	r3,-12(r6)
  812a48:	28800c0f 	ldh	r2,48(r5)
  812a4c:	10fff11e 	bne	r2,r3,812a14 <alt_up_sd_card_fopen+0x2a4>
  812a50:	013fff84 	movi	r4,-2
  812a54:	003f5906 	br	8127bc <alt_up_sd_card_fopen+0x4c>

00812a58 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  812a58:	00802074 	movhi	r2,129
  812a5c:	109d7104 	addi	r2,r2,30148
  812a60:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812a64:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  812a68:	00bfde84 	movi	r2,-134
  812a6c:	1800011e 	bne	r3,zero,812a74 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  812a70:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  812a74:	00bffa84 	movi	r2,-22
  812a78:	203ffd26 	beq	r4,zero,812a70 <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  812a7c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  812a80:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a84:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a88:	00bfff84 	movi	r2,-2
  812a8c:	3084703a 	and	r2,r6,r2
  812a90:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812a94:	00c02074 	movhi	r3,129
  812a98:	18dd7204 	addi	r3,r3,30152
  812a9c:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  812aa0:	20800044 	addi	r2,r4,1
  812aa4:	2885883a 	add	r2,r5,r2
  812aa8:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812aac:	11000d2e 	bgeu	r2,r4,812ae4 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  812ab0:	00800044 	movi	r2,1
  812ab4:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812ab8:	00802074 	movhi	r2,129
  812abc:	10961e04 	addi	r2,r2,22648
  entry->next     = list->next;
  812ac0:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812ac4:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  812ac8:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  812acc:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  812ad0:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  812ad4:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ad8:	3001703a 	wrctl	status,r6
  812adc:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  812ae0:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  812ae4:	40000405 	stb	zero,16(r8)
  812ae8:	003ff306 	br	812ab8 <alt_alarm_start+0x60>

00812aec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812aec:	0005883a 	mov	r2,zero
  812af0:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812af4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812af8:	10800804 	addi	r2,r2,32
  812afc:	10fffd1e 	bne	r2,r3,812af4 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812b00:	f800283a 	ret

00812b04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812b04:	defff904 	addi	sp,sp,-28
  812b08:	dfc00615 	stw	ra,24(sp)
  812b0c:	df000515 	stw	fp,20(sp)
  812b10:	df000504 	addi	fp,sp,20
  812b14:	e13ffd15 	stw	r4,-12(fp)
  812b18:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812b1c:	e0bffd17 	ldw	r2,-12(fp)
  812b20:	1005003a 	cmpeq	r2,r2,zero
  812b24:	1000041e 	bne	r2,zero,812b38 <alt_dev_llist_insert+0x34>
  812b28:	e0bffd17 	ldw	r2,-12(fp)
  812b2c:	10800217 	ldw	r2,8(r2)
  812b30:	1004c03a 	cmpne	r2,r2,zero
  812b34:	1000071e 	bne	r2,zero,812b54 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  812b38:	0812bb80 	call	812bb8 <alt_get_errno>
  812b3c:	1007883a 	mov	r3,r2
  812b40:	00800584 	movi	r2,22
  812b44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812b48:	00bffa84 	movi	r2,-22
  812b4c:	e0bfff15 	stw	r2,-4(fp)
  812b50:	00001306 	br	812ba0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812b54:	e0fffd17 	ldw	r3,-12(fp)
  812b58:	e0bffe17 	ldw	r2,-8(fp)
  812b5c:	e0bffb15 	stw	r2,-20(fp)
  812b60:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812b64:	e0fffc17 	ldw	r3,-16(fp)
  812b68:	e0bffb17 	ldw	r2,-20(fp)
  812b6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812b70:	e0bffb17 	ldw	r2,-20(fp)
  812b74:	10c00017 	ldw	r3,0(r2)
  812b78:	e0bffc17 	ldw	r2,-16(fp)
  812b7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812b80:	e0bffb17 	ldw	r2,-20(fp)
  812b84:	10c00017 	ldw	r3,0(r2)
  812b88:	e0bffc17 	ldw	r2,-16(fp)
  812b8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  812b90:	e0fffb17 	ldw	r3,-20(fp)
  812b94:	e0bffc17 	ldw	r2,-16(fp)
  812b98:	18800015 	stw	r2,0(r3)

  return 0;  
  812b9c:	e03fff15 	stw	zero,-4(fp)
  812ba0:	e0bfff17 	ldw	r2,-4(fp)
}
  812ba4:	e037883a 	mov	sp,fp
  812ba8:	dfc00117 	ldw	ra,4(sp)
  812bac:	df000017 	ldw	fp,0(sp)
  812bb0:	dec00204 	addi	sp,sp,8
  812bb4:	f800283a 	ret

00812bb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812bb8:	defffd04 	addi	sp,sp,-12
  812bbc:	dfc00215 	stw	ra,8(sp)
  812bc0:	df000115 	stw	fp,4(sp)
  812bc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812bc8:	00802074 	movhi	r2,129
  812bcc:	10961b04 	addi	r2,r2,22636
  812bd0:	10800017 	ldw	r2,0(r2)
  812bd4:	1005003a 	cmpeq	r2,r2,zero
  812bd8:	1000061e 	bne	r2,zero,812bf4 <alt_get_errno+0x3c>
  812bdc:	00802074 	movhi	r2,129
  812be0:	10961b04 	addi	r2,r2,22636
  812be4:	10800017 	ldw	r2,0(r2)
  812be8:	103ee83a 	callr	r2
  812bec:	e0bfff15 	stw	r2,-4(fp)
  812bf0:	00000306 	br	812c00 <alt_get_errno+0x48>
  812bf4:	00802074 	movhi	r2,129
  812bf8:	109d5c04 	addi	r2,r2,30064
  812bfc:	e0bfff15 	stw	r2,-4(fp)
  812c00:	e0bfff17 	ldw	r2,-4(fp)
}
  812c04:	e037883a 	mov	sp,fp
  812c08:	dfc00117 	ldw	ra,4(sp)
  812c0c:	df000017 	ldw	fp,0(sp)
  812c10:	dec00204 	addi	sp,sp,8
  812c14:	f800283a 	ret

00812c18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812c18:	defffd04 	addi	sp,sp,-12
  812c1c:	dfc00215 	stw	ra,8(sp)
  812c20:	df000115 	stw	fp,4(sp)
  812c24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812c28:	00bfff04 	movi	r2,-4
  812c2c:	00c02074 	movhi	r3,129
  812c30:	18cd7004 	addi	r3,r3,13760
  812c34:	1885883a 	add	r2,r3,r2
  812c38:	e0bfff15 	stw	r2,-4(fp)
  812c3c:	00000606 	br	812c58 <_do_ctors+0x40>
        (*ctor) (); 
  812c40:	e0bfff17 	ldw	r2,-4(fp)
  812c44:	10800017 	ldw	r2,0(r2)
  812c48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812c4c:	e0bfff17 	ldw	r2,-4(fp)
  812c50:	10bfff04 	addi	r2,r2,-4
  812c54:	e0bfff15 	stw	r2,-4(fp)
  812c58:	e0ffff17 	ldw	r3,-4(fp)
  812c5c:	00802074 	movhi	r2,129
  812c60:	108d6f04 	addi	r2,r2,13756
  812c64:	18bff62e 	bgeu	r3,r2,812c40 <_do_ctors+0x28>
        (*ctor) (); 
}
  812c68:	e037883a 	mov	sp,fp
  812c6c:	dfc00117 	ldw	ra,4(sp)
  812c70:	df000017 	ldw	fp,0(sp)
  812c74:	dec00204 	addi	sp,sp,8
  812c78:	f800283a 	ret

00812c7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812c7c:	defffd04 	addi	sp,sp,-12
  812c80:	dfc00215 	stw	ra,8(sp)
  812c84:	df000115 	stw	fp,4(sp)
  812c88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812c8c:	00bfff04 	movi	r2,-4
  812c90:	00c02074 	movhi	r3,129
  812c94:	18cd7004 	addi	r3,r3,13760
  812c98:	1885883a 	add	r2,r3,r2
  812c9c:	e0bfff15 	stw	r2,-4(fp)
  812ca0:	00000606 	br	812cbc <_do_dtors+0x40>
        (*dtor) (); 
  812ca4:	e0bfff17 	ldw	r2,-4(fp)
  812ca8:	10800017 	ldw	r2,0(r2)
  812cac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812cb0:	e0bfff17 	ldw	r2,-4(fp)
  812cb4:	10bfff04 	addi	r2,r2,-4
  812cb8:	e0bfff15 	stw	r2,-4(fp)
  812cbc:	e0ffff17 	ldw	r3,-4(fp)
  812cc0:	00802074 	movhi	r2,129
  812cc4:	108d7004 	addi	r2,r2,13760
  812cc8:	18bff62e 	bgeu	r3,r2,812ca4 <_do_dtors+0x28>
        (*dtor) (); 
}
  812ccc:	e037883a 	mov	sp,fp
  812cd0:	dfc00117 	ldw	ra,4(sp)
  812cd4:	df000017 	ldw	fp,0(sp)
  812cd8:	dec00204 	addi	sp,sp,8
  812cdc:	f800283a 	ret

00812ce0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812ce0:	defffb04 	addi	sp,sp,-20
  812ce4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  812ce8:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812cec:	dcc00315 	stw	r19,12(sp)
  812cf0:	dc400115 	stw	r17,4(sp)
  812cf4:	dfc00415 	stw	ra,16(sp)
  812cf8:	2823883a 	mov	r17,r5
  812cfc:	dc800215 	stw	r18,8(sp)
  812d00:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  812d04:	0803e880 	call	803e88 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d08:	84401126 	beq	r16,r17,812d50 <alt_find_dev+0x70>
  812d0c:	14800044 	addi	r18,r2,1
  812d10:	00000206 	br	812d1c <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  812d14:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d18:	84400d26 	beq	r16,r17,812d50 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812d1c:	81000217 	ldw	r4,8(r16)
  812d20:	980b883a 	mov	r5,r19
  812d24:	900d883a 	mov	r6,r18
  812d28:	08133a80 	call	8133a8 <memcmp>
  812d2c:	103ff91e 	bne	r2,zero,812d14 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  812d30:	8005883a 	mov	r2,r16
  812d34:	dfc00417 	ldw	ra,16(sp)
  812d38:	dcc00317 	ldw	r19,12(sp)
  812d3c:	dc800217 	ldw	r18,8(sp)
  812d40:	dc400117 	ldw	r17,4(sp)
  812d44:	dc000017 	ldw	r16,0(sp)
  812d48:	dec00504 	addi	sp,sp,20
  812d4c:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d50:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  812d54:	8005883a 	mov	r2,r16
  812d58:	dfc00417 	ldw	ra,16(sp)
  812d5c:	dcc00317 	ldw	r19,12(sp)
  812d60:	dc800217 	ldw	r18,8(sp)
  812d64:	dc400117 	ldw	r17,4(sp)
  812d68:	dc000017 	ldw	r16,0(sp)
  812d6c:	dec00504 	addi	sp,sp,20
  812d70:	f800283a 	ret

00812d74 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812d74:	0009883a 	mov	r4,zero
  812d78:	01440004 	movi	r5,4096
  812d7c:	081335c1 	jmpi	81335c <alt_icache_flush>

00812d80 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  812d80:	000530fa 	rdctl	r2,ienable
  812d84:	00c00044 	movi	r3,1
  812d88:	1946983a 	sll	r3,r3,r5
  812d8c:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  812d90:	1004c03a 	cmpne	r2,r2,zero
  812d94:	f800283a 	ret

00812d98 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d98:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d9c:	00bfff84 	movi	r2,-2
  812da0:	3084703a 	and	r2,r6,r2
  812da4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  812da8:	01002074 	movhi	r4,129
  812dac:	211d7004 	addi	r4,r4,30144
  812db0:	00800044 	movi	r2,1
  812db4:	20c00017 	ldw	r3,0(r4)
  812db8:	1144983a 	sll	r2,r2,r5
  812dbc:	10c4b03a 	or	r2,r2,r3
  812dc0:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812dc4:	20c00017 	ldw	r3,0(r4)
  812dc8:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812dcc:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  812dd0:	0005883a 	mov	r2,zero
  812dd4:	f800283a 	ret

00812dd8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812dd8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ddc:	00bfff84 	movi	r2,-2
  812de0:	3084703a 	and	r2,r6,r2
  812de4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  812de8:	01002074 	movhi	r4,129
  812dec:	211d7004 	addi	r4,r4,30144
  812df0:	00bfff84 	movi	r2,-2
  812df4:	20c00017 	ldw	r3,0(r4)
  812df8:	1144183a 	rol	r2,r2,r5
  812dfc:	10c4703a 	and	r2,r2,r3
  812e00:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812e04:	20c00017 	ldw	r3,0(r4)
  812e08:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e0c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  812e10:	0005883a 	mov	r2,zero
  812e14:	f800283a 	ret

00812e18 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812e18:	0812e1c1 	jmpi	812e1c <alt_iic_isr_register>

00812e1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812e1c:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812e20:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812e24:	dfc00115 	stw	ra,4(sp)
  812e28:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812e2c:	023ffa84 	movi	r8,-22
  812e30:	1140050e 	bge	r2,r5,812e48 <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  812e34:	4005883a 	mov	r2,r8
  812e38:	dfc00117 	ldw	ra,4(sp)
  812e3c:	dc000017 	ldw	r16,0(sp)
  812e40:	dec00204 	addi	sp,sp,8
  812e44:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812e48:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e4c:	00bfff84 	movi	r2,-2
  812e50:	8084703a 	and	r2,r16,r2
  812e54:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  812e58:	280690fa 	slli	r3,r5,3
  812e5c:	00802074 	movhi	r2,129
  812e60:	109ed704 	addi	r2,r2,31580
  812e64:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  812e68:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  812e6c:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812e70:	30000826 	beq	r6,zero,812e94 <alt_iic_isr_register+0x78>
  812e74:	0812d980 	call	812d98 <alt_ic_irq_enable>
  812e78:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e7c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  812e80:	4005883a 	mov	r2,r8
  812e84:	dfc00117 	ldw	ra,4(sp)
  812e88:	dc000017 	ldw	r16,0(sp)
  812e8c:	dec00204 	addi	sp,sp,8
  812e90:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812e94:	0812dd80 	call	812dd8 <alt_ic_irq_disable>
  812e98:	1011883a 	mov	r8,r2
  812e9c:	8001703a 	wrctl	status,r16
  812ea0:	003ff706 	br	812e80 <alt_iic_isr_register+0x64>

00812ea4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812ea4:	defffd04 	addi	sp,sp,-12
  812ea8:	dc400115 	stw	r17,4(sp)
  812eac:	dc000015 	stw	r16,0(sp)
  812eb0:	3023883a 	mov	r17,r6
  812eb4:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  812eb8:	01807fc4 	movi	r6,511
  812ebc:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812ec0:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  812ec4:	0812fa80 	call	812fa8 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812ec8:	10c00324 	muli	r3,r2,12
  812ecc:	01802074 	movhi	r6,129
  812ed0:	31917804 	addi	r6,r6,17888
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  812ed4:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812ed8:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  812edc:	10000716 	blt	r2,zero,812efc <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812ee0:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812ee4:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  812ee8:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812eec:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812ef0:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  812ef4:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  812ef8:	080c6980 	call	80c698 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  812efc:	8009883a 	mov	r4,r16
  812f00:	000b883a 	mov	r5,zero
  812f04:	01807fc4 	movi	r6,511
  812f08:	0812fa80 	call	812fa8 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f0c:	10c00324 	muli	r3,r2,12
  812f10:	01802074 	movhi	r6,129
  812f14:	31917804 	addi	r6,r6,17888
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  812f18:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f1c:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  812f20:	10000716 	blt	r2,zero,812f40 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812f24:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f28:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  812f2c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812f30:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f34:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  812f38:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  812f3c:	080c6980 	call	80c698 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  812f40:	8809883a 	mov	r4,r17
  812f44:	01400044 	movi	r5,1
  812f48:	01807fc4 	movi	r6,511
  812f4c:	0812fa80 	call	812fa8 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f50:	10c00324 	muli	r3,r2,12
  812f54:	01802074 	movhi	r6,129
  812f58:	31917804 	addi	r6,r6,17888
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  812f5c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f60:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  812f64:	10000b16 	blt	r2,zero,812f94 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812f68:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f6c:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  812f70:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812f74:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  812f78:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  812f7c:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  812f80:	dfc00217 	ldw	ra,8(sp)
  812f84:	dc400117 	ldw	r17,4(sp)
  812f88:	dc000017 	ldw	r16,0(sp)
  812f8c:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  812f90:	080c6981 	jmpi	80c698 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  812f94:	dfc00217 	ldw	ra,8(sp)
  812f98:	dc400117 	ldw	r17,4(sp)
  812f9c:	dc000017 	ldw	r16,0(sp)
  812fa0:	dec00304 	addi	sp,sp,12
  812fa4:	f800283a 	ret

00812fa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  812fa8:	defff904 	addi	sp,sp,-28
  812fac:	dcc00315 	stw	r19,12(sp)
  812fb0:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812fb4:	01402074 	movhi	r5,129
  812fb8:	29561804 	addi	r5,r5,22624
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  812fbc:	dd400515 	stw	r21,20(sp)
  812fc0:	dd000415 	stw	r20,16(sp)
  812fc4:	dc400115 	stw	r17,4(sp)
  812fc8:	dfc00615 	stw	ra,24(sp)
  812fcc:	dc800215 	stw	r18,8(sp)
  812fd0:	dc000015 	stw	r16,0(sp)
  812fd4:	302b883a 	mov	r21,r6
  812fd8:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812fdc:	0812ce00 	call	812ce0 <alt_find_dev>
  812fe0:	1023883a 	mov	r17,r2
  812fe4:	10004726 	beq	r2,zero,813104 <open+0x15c>
  812fe8:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  812fec:	8809883a 	mov	r4,r17
  812ff0:	08132fc0 	call	8132fc <alt_get_fd>
  812ff4:	1021883a 	mov	r16,r2
  812ff8:	10002d16 	blt	r2,zero,8130b0 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  812ffc:	10800324 	muli	r2,r2,12
  813000:	01402074 	movhi	r5,129
  813004:	29517804 	addi	r5,r5,17888
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813008:	00d00034 	movhi	r3,16384
  81300c:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  813010:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813014:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813018:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81301c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813020:	1000121e 	bne	r2,zero,81306c <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813024:	00802074 	movhi	r2,129
  813028:	10961a04 	addi	r2,r2,22632
  81302c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813030:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813034:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813038:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81303c:	20800215 	stw	r2,8(r4)
  813040:	00000206 	br	81304c <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813044:	29400304 	addi	r5,r5,12
  813048:	38c00836 	bltu	r7,r3,81306c <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81304c:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813050:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813054:	11bffb1e 	bne	r2,r6,813044 <open+0x9c>
  813058:	28800217 	ldw	r2,8(r5)
  81305c:	103ff90e 	bge	r2,zero,813044 <open+0x9c>
  813060:	293ff826 	beq	r5,r4,813044 <open+0x9c>
  813064:	04400344 	movi	r17,13
  813068:	00001206 	br	8130b4 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81306c:	88800317 	ldw	r2,12(r17)
  813070:	10000526 	beq	r2,zero,813088 <open+0xe0>
  813074:	a00b883a 	mov	r5,r20
  813078:	980d883a 	mov	r6,r19
  81307c:	a80f883a 	mov	r7,r21
  813080:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813084:	10001516 	blt	r2,zero,8130dc <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  813088:	8005883a 	mov	r2,r16
  81308c:	dfc00617 	ldw	ra,24(sp)
  813090:	dd400517 	ldw	r21,20(sp)
  813094:	dd000417 	ldw	r20,16(sp)
  813098:	dcc00317 	ldw	r19,12(sp)
  81309c:	dc800217 	ldw	r18,8(sp)
  8130a0:	dc400117 	ldw	r17,4(sp)
  8130a4:	dc000017 	ldw	r16,0(sp)
  8130a8:	dec00704 	addi	sp,sp,28
  8130ac:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  8130b0:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  8130b4:	8009883a 	mov	r4,r16
  8130b8:	080c6980 	call	80c698 <alt_release_fd>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8130bc:	00802074 	movhi	r2,129
  8130c0:	10961b04 	addi	r2,r2,22636
  8130c4:	10800017 	ldw	r2,0(r2)
  8130c8:	10000b26 	beq	r2,zero,8130f8 <open+0x150>
  8130cc:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  8130d0:	043fffc4 	movi	r16,-1
  8130d4:	14400015 	stw	r17,0(r2)
  8130d8:	003feb06 	br	813088 <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  8130dc:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8130e0:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  8130e4:	080c6980 	call	80c698 <alt_release_fd>
  8130e8:	00802074 	movhi	r2,129
  8130ec:	10961b04 	addi	r2,r2,22636
  8130f0:	10800017 	ldw	r2,0(r2)
  8130f4:	103ff51e 	bne	r2,zero,8130cc <open+0x124>
  8130f8:	00802074 	movhi	r2,129
  8130fc:	109d5c04 	addi	r2,r2,30064
  813100:	003ff306 	br	8130d0 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  813104:	a009883a 	mov	r4,r20
  813108:	081324c0 	call	81324c <alt_find_file>
  81310c:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  813110:	10000226 	beq	r2,zero,81311c <open+0x174>
  813114:	04800044 	movi	r18,1
  813118:	003fb406 	br	812fec <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  81311c:	043fffc4 	movi	r16,-1
  813120:	044004c4 	movi	r17,19
  813124:	003fe306 	br	8130b4 <open+0x10c>

00813128 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813128:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81312c:	00bfff84 	movi	r2,-2
  813130:	3084703a 	and	r2,r6,r2
  813134:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813138:	21400017 	ldw	r5,0(r4)
  81313c:	20800117 	ldw	r2,4(r4)
  813140:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  813144:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813148:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  81314c:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  813150:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813154:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  813158:	f800283a 	ret

0081315c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81315c:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813160:	d0a76217 	ldw	r2,-25208(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813164:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813168:	d4200e17 	ldw	r16,-32712(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81316c:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813170:	10800044 	addi	r2,r2,1
  813174:	d4a00e04 	addi	r18,gp,-32712
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813178:	dfc00315 	stw	ra,12(sp)
  81317c:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813180:	d0a76215 	stw	r2,-25208(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813184:	84800d26 	beq	r16,r18,8131bc <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813188:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  81318c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813190:	10000326 	beq	r2,zero,8131a0 <alt_tick+0x44>
  813194:	d0a76217 	ldw	r2,-25208(gp)
  813198:	1000011e 	bne	r2,zero,8131a0 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  81319c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8131a0:	d0e76217 	ldw	r3,-25208(gp)
  8131a4:	80800217 	ldw	r2,8(r16)
  8131a8:	18800236 	bltu	r3,r2,8131b4 <alt_tick+0x58>
  8131ac:	80800403 	ldbu	r2,16(r16)
  8131b0:	10000826 	beq	r2,zero,8131d4 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  8131b4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8131b8:	84bff31e 	bne	r16,r18,813188 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8131bc:	dfc00317 	ldw	ra,12(sp)
  8131c0:	dc800217 	ldw	r18,8(sp)
  8131c4:	dc400117 	ldw	r17,4(sp)
  8131c8:	dc000017 	ldw	r16,0(sp)
  8131cc:	dec00404 	addi	sp,sp,16
  8131d0:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  8131d4:	81000517 	ldw	r4,20(r16)
  8131d8:	80c00317 	ldw	r3,12(r16)
  8131dc:	183ee83a 	callr	r3
  8131e0:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8131e4:	10000926 	beq	r2,zero,81320c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  8131e8:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8131ec:	d0e76217 	ldw	r3,-25208(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  8131f0:	2085883a 	add	r2,r4,r2
  8131f4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8131f8:	10ffee2e 	bgeu	r2,r3,8131b4 <alt_tick+0x58>
        {
          alarm->rollover = 1;
  8131fc:	00800044 	movi	r2,1
  813200:	80800405 	stb	r2,16(r16)
  813204:	8821883a 	mov	r16,r17
  813208:	003feb06 	br	8131b8 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81320c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813210:	00bfff84 	movi	r2,-2
  813214:	2884703a 	and	r2,r5,r2
  813218:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81321c:	81000017 	ldw	r4,0(r16)
  813220:	80800117 	ldw	r2,4(r16)
  813224:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  813228:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81322c:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  813230:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  813234:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813238:	2801703a 	wrctl	status,r5
  81323c:	8821883a 	mov	r16,r17
  813240:	003fdd06 	br	8131b8 <alt_tick+0x5c>

00813244 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  813244:	000170fa 	wrctl	ienable,zero
}
  813248:	f800283a 	ret

0081324c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81324c:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813250:	00802074 	movhi	r2,129
  813254:	10961604 	addi	r2,r2,22616
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813258:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81325c:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813260:	dd000415 	stw	r20,16(sp)
  813264:	dc800215 	stw	r18,8(sp)
  813268:	dfc00515 	stw	ra,20(sp)
  81326c:	dcc00315 	stw	r19,12(sp)
  813270:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813274:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813278:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81327c:	80801526 	beq	r16,r2,8132d4 <alt_find_file+0x88>
  813280:	04c00bc4 	movi	r19,47
  813284:	00000806 	br	8132a8 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813288:	3485883a 	add	r2,r6,r18
  81328c:	10800007 	ldb	r2,0(r2)
  813290:	14c00126 	beq	r2,r19,813298 <alt_find_file+0x4c>
  813294:	1000021e 	bne	r2,zero,8132a0 <alt_find_file+0x54>
  813298:	08133a80 	call	8133a8 <memcmp>
  81329c:	10000e26 	beq	r2,zero,8132d8 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8132a0:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8132a4:	85000b26 	beq	r16,r20,8132d4 <alt_find_file+0x88>
  {
    len = strlen(next->name);
  8132a8:	84400217 	ldw	r17,8(r16)
  8132ac:	8809883a 	mov	r4,r17
  8132b0:	0803e880 	call	803e88 <strlen>
  8132b4:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  8132b8:	8885883a 	add	r2,r17,r2
  8132bc:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8132c0:	8809883a 	mov	r4,r17
  8132c4:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  8132c8:	1cffef1e 	bne	r3,r19,813288 <alt_find_file+0x3c>
    {
      len -= 1;
  8132cc:	31bfffc4 	addi	r6,r6,-1
  8132d0:	003fed06 	br	813288 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8132d4:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  8132d8:	8005883a 	mov	r2,r16
  8132dc:	dfc00517 	ldw	ra,20(sp)
  8132e0:	dd000417 	ldw	r20,16(sp)
  8132e4:	dcc00317 	ldw	r19,12(sp)
  8132e8:	dc800217 	ldw	r18,8(sp)
  8132ec:	dc400117 	ldw	r17,4(sp)
  8132f0:	dc000017 	ldw	r16,0(sp)
  8132f4:	dec00604 	addi	sp,sp,24
  8132f8:	f800283a 	ret

008132fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8132fc:	01402074 	movhi	r5,129
  813300:	29517804 	addi	r5,r5,17888
  813304:	0007883a 	mov	r3,zero
  813308:	01c00804 	movi	r7,32
  81330c:	280d883a 	mov	r6,r5
  813310:	00000306 	br	813320 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813314:	18c00044 	addi	r3,r3,1
  813318:	31800304 	addi	r6,r6,12
  81331c:	19c00d26 	beq	r3,r7,813354 <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  813320:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813324:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  813328:	103ffa1e 	bne	r2,zero,813314 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  81332c:	01402074 	movhi	r5,129
  813330:	29561a04 	addi	r5,r5,22632
  813334:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  813338:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  81333c:	10c0030e 	bge	r2,r3,81334c <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  813340:	1805883a 	mov	r2,r3
  813344:	28c00015 	stw	r3,0(r5)
  813348:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  81334c:	1805883a 	mov	r2,r3
  813350:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813354:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  813358:	f800283a 	ret

0081335c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  81335c:	00840004 	movi	r2,4096
  813360:	2007883a 	mov	r3,r4
  813364:	1140012e 	bgeu	r2,r5,81336c <alt_icache_flush+0x10>
  813368:	100b883a 	mov	r5,r2
  81336c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813370:	1940032e 	bgeu	r3,r5,813380 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813374:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813378:	18c00804 	addi	r3,r3,32
  81337c:	197ffd36 	bltu	r3,r5,813374 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813380:	208007cc 	andi	r2,r4,31
  813384:	10000126 	beq	r2,zero,81338c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813388:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81338c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813390:	f800283a 	ret

00813394 <atexit>:
  813394:	200b883a 	mov	r5,r4
  813398:	000d883a 	mov	r6,zero
  81339c:	0009883a 	mov	r4,zero
  8133a0:	000f883a 	mov	r7,zero
  8133a4:	081341c1 	jmpi	81341c <__register_exitproc>

008133a8 <memcmp>:
  8133a8:	00c000c4 	movi	r3,3
  8133ac:	1980032e 	bgeu	r3,r6,8133bc <memcmp+0x14>
  8133b0:	2144b03a 	or	r2,r4,r5
  8133b4:	10c4703a 	and	r2,r2,r3
  8133b8:	10000f26 	beq	r2,zero,8133f8 <memcmp+0x50>
  8133bc:	31ffffc4 	addi	r7,r6,-1
  8133c0:	3000061e 	bne	r6,zero,8133dc <memcmp+0x34>
  8133c4:	00000a06 	br	8133f0 <memcmp+0x48>
  8133c8:	39ffffc4 	addi	r7,r7,-1
  8133cc:	00bfffc4 	movi	r2,-1
  8133d0:	21000044 	addi	r4,r4,1
  8133d4:	29400044 	addi	r5,r5,1
  8133d8:	38800526 	beq	r7,r2,8133f0 <memcmp+0x48>
  8133dc:	20c00003 	ldbu	r3,0(r4)
  8133e0:	28800003 	ldbu	r2,0(r5)
  8133e4:	18bff826 	beq	r3,r2,8133c8 <memcmp+0x20>
  8133e8:	1885c83a 	sub	r2,r3,r2
  8133ec:	f800283a 	ret
  8133f0:	0005883a 	mov	r2,zero
  8133f4:	f800283a 	ret
  8133f8:	180f883a 	mov	r7,r3
  8133fc:	20c00017 	ldw	r3,0(r4)
  813400:	28800017 	ldw	r2,0(r5)
  813404:	18bfed1e 	bne	r3,r2,8133bc <memcmp+0x14>
  813408:	31bfff04 	addi	r6,r6,-4
  81340c:	21000104 	addi	r4,r4,4
  813410:	29400104 	addi	r5,r5,4
  813414:	39bff936 	bltu	r7,r6,8133fc <memcmp+0x54>
  813418:	003fe806 	br	8133bc <memcmp+0x14>

0081341c <__register_exitproc>:
  81341c:	defffa04 	addi	sp,sp,-24
  813420:	00802074 	movhi	r2,129
  813424:	10961104 	addi	r2,r2,22596
  813428:	dc000015 	stw	r16,0(sp)
  81342c:	14000017 	ldw	r16,0(r2)
  813430:	dd000415 	stw	r20,16(sp)
  813434:	2829883a 	mov	r20,r5
  813438:	81405217 	ldw	r5,328(r16)
  81343c:	dcc00315 	stw	r19,12(sp)
  813440:	dc800215 	stw	r18,8(sp)
  813444:	dc400115 	stw	r17,4(sp)
  813448:	dfc00515 	stw	ra,20(sp)
  81344c:	2023883a 	mov	r17,r4
  813450:	3027883a 	mov	r19,r6
  813454:	3825883a 	mov	r18,r7
  813458:	28002526 	beq	r5,zero,8134f0 <__register_exitproc+0xd4>
  81345c:	29000117 	ldw	r4,4(r5)
  813460:	008007c4 	movi	r2,31
  813464:	11002716 	blt	r2,r4,813504 <__register_exitproc+0xe8>
  813468:	8800101e 	bne	r17,zero,8134ac <__register_exitproc+0x90>
  81346c:	2105883a 	add	r2,r4,r4
  813470:	1085883a 	add	r2,r2,r2
  813474:	20c00044 	addi	r3,r4,1
  813478:	1145883a 	add	r2,r2,r5
  81347c:	0009883a 	mov	r4,zero
  813480:	15000215 	stw	r20,8(r2)
  813484:	28c00115 	stw	r3,4(r5)
  813488:	2005883a 	mov	r2,r4
  81348c:	dfc00517 	ldw	ra,20(sp)
  813490:	dd000417 	ldw	r20,16(sp)
  813494:	dcc00317 	ldw	r19,12(sp)
  813498:	dc800217 	ldw	r18,8(sp)
  81349c:	dc400117 	ldw	r17,4(sp)
  8134a0:	dc000017 	ldw	r16,0(sp)
  8134a4:	dec00604 	addi	sp,sp,24
  8134a8:	f800283a 	ret
  8134ac:	29802204 	addi	r6,r5,136
  8134b0:	00800044 	movi	r2,1
  8134b4:	110e983a 	sll	r7,r2,r4
  8134b8:	30c04017 	ldw	r3,256(r6)
  8134bc:	2105883a 	add	r2,r4,r4
  8134c0:	1085883a 	add	r2,r2,r2
  8134c4:	1185883a 	add	r2,r2,r6
  8134c8:	19c6b03a 	or	r3,r3,r7
  8134cc:	14802015 	stw	r18,128(r2)
  8134d0:	14c00015 	stw	r19,0(r2)
  8134d4:	00800084 	movi	r2,2
  8134d8:	30c04015 	stw	r3,256(r6)
  8134dc:	88bfe31e 	bne	r17,r2,81346c <__register_exitproc+0x50>
  8134e0:	30804117 	ldw	r2,260(r6)
  8134e4:	11c4b03a 	or	r2,r2,r7
  8134e8:	30804115 	stw	r2,260(r6)
  8134ec:	003fdf06 	br	81346c <__register_exitproc+0x50>
  8134f0:	00802074 	movhi	r2,129
  8134f4:	109f1704 	addi	r2,r2,31836
  8134f8:	100b883a 	mov	r5,r2
  8134fc:	80805215 	stw	r2,328(r16)
  813500:	003fd606 	br	81345c <__register_exitproc+0x40>
  813504:	00802034 	movhi	r2,128
  813508:	108d1d04 	addi	r2,r2,13428
  81350c:	1000021e 	bne	r2,zero,813518 <__register_exitproc+0xfc>
  813510:	013fffc4 	movi	r4,-1
  813514:	003fdc06 	br	813488 <__register_exitproc+0x6c>
  813518:	01006404 	movi	r4,400
  81351c:	103ee83a 	callr	r2
  813520:	1007883a 	mov	r3,r2
  813524:	103ffa26 	beq	r2,zero,813510 <__register_exitproc+0xf4>
  813528:	80805217 	ldw	r2,328(r16)
  81352c:	180b883a 	mov	r5,r3
  813530:	18000115 	stw	zero,4(r3)
  813534:	18800015 	stw	r2,0(r3)
  813538:	80c05215 	stw	r3,328(r16)
  81353c:	18006215 	stw	zero,392(r3)
  813540:	18006315 	stw	zero,396(r3)
  813544:	0009883a 	mov	r4,zero
  813548:	883fc826 	beq	r17,zero,81346c <__register_exitproc+0x50>
  81354c:	003fd706 	br	8134ac <__register_exitproc+0x90>
  813550:	00000010 	cmplti	zero,zero,0
  813554:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  813558:	00527a01 	jmpi	527a0 <__alt_mem_sdram_0-0x7ad860>
  81355c:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram_0-0x6e0840>
  813560:	001b0c0b 	ldhu	zero,27696(zero)
  813564:	00000028 	cmpgeui	zero,zero,0
  813568:	00000018 	cmpnei	zero,zero,0
  81356c:	0080aeec 	andhi	r2,zero,699
  813570:	000005dc 	xori	zero,zero,23
  813574:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  813578:	92099170 	cmpltui	r8,r18,9797
  81357c:	95079308 	cmpgei	r20,r18,7756
  813580:	97049605 	stb	fp,4696(r18)
  813584:	90019f03 	ldbu	zero,1660(r18)
  813588:	9c06940a 	0x9c06940a
  81358c:	00000002 	0x2
  813590:	00000028 	cmpgeui	zero,zero,0
  813594:	00000044 	movi	zero,1
  813598:	0080b4c8 	cmpgei	r2,zero,723
  81359c:	000005b0 	cmpltui	zero,zero,22
  8135a0:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  8135a4:	92099168 	cmpgeui	r8,r18,9797
  8135a8:	95079308 	cmpgei	r20,r18,7756
  8135ac:	9c039705 	stb	r16,3676(r19)
  8135b0:	90019f02 	0x90019f02
  8135b4:	9606940a 	0x9606940a
  8135b8:	00000004 	movi	zero,0
  8135bc:	00805f60 	cmpeqi	r2,zero,381
