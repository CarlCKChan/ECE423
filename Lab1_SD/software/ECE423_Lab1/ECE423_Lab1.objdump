
ECE423_Lab1.elf:     file format elf32-littlenios2
ECE423_Lab1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013cd0 memsz 0x00013cd0 flags r-x
    LOAD off    0x00014cf0 vaddr 0x00813cf0 paddr 0x008159cc align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x000176a8 vaddr 0x008176a8 paddr 0x008176a8 align 2**12
         filesz 0x00000000 memsz 0x0000089c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000135c0  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005ac  00813744  00813744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  00813cf0  008159cc  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000089c  008176a8  008176a8  000176a8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000169cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  000169f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001e18  00000000  00000000  00017868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a533  00000000  00000000  00019680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009865  00000000  00000000  00043bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b8be  00000000  00000000  0004d418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e3c  00000000  00000000  00068cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004675  00000000  00000000  0006ab14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011d00  00000000  00000000  0006f189  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00080e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001ff0  00000000  00000000  00080ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00086cf6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00086cf9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00086cfe  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00086cff  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00086d03  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00086d07  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00086d0b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00086d16  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00086d21  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  00086d2c  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  00086d33  2**0
                  CONTENTS, READONLY
 28 .jdi          000041ac  00000000  00000000  00086d4f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
00813744 l    d  .rodata	00000000 .rodata
00813cf0 l    d  .rwdata	00000000 .rwdata
008176a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 main_code.c
00801bd8 l     F .text	0000001c handle_button_interrupts
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080229c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00813ef0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804080 l     F .text	00000058 __sprint_r
00813b4a l     O .rodata	00000010 blanks.3452
00813b3a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008060e4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00806298 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00807c94 l     F .text	00000058 std
00807da0 l     F .text	00000008 __fp_lock
00807da8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
008159a0 l     O .rwdata	00000004 charset
00813b7c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00813cc4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0080a7fc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c16c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080c3a8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
0080c67c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008159c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008148ac l     O .rwdata	00001060 jtag_uart_0
0081590c l     O .rwdata	00000054 video_pixel_buffer_dma_0
00815960 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080cca8 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0080cd80 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d250 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812e60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
008176f0 g     O .bss	00000004 aux_status_register
00803e64 g     F .text	0000001c putchar
008176ac g     O .bss	00000004 sectors
00809270 g     F .text	00000094 _mprec_log10
0080935c g     F .text	00000088 __any_on
0080af10 g     F .text	00000070 _isatty_r
00813c9c g     O .rodata	00000028 __mprec_tinytens
0080c784 g     F .text	00000060 alt_main
0080d2e4 g     F .text	00000178 alt_up_pixel_buffer_dma_draw_vline
00803e88 g     F .text	000000a0 _puts_r
0081774c g     O .bss	00000100 alt_irq
0080af80 g     F .text	00000078 _lseek_r
00801cb0 g     F .text	0000002c sd_card_wait_read_sector
00801524 g     F .text	000005d4 ycbcr_to_rgb
008159cc g       *ABS*	00000000 __flash_rwdata_start
0080be54 g     F .text	00000088 __eqdf2
0080f594 g     F .text	000001c8 Check_for_Master_Boot_Record
008176b8 g     O .bss	00000004 sd_card_sectors_num
00817f44 g       *ABS*	00000000 __alt_heap_start
0080ef1c g     F .text	00000160 alt_up_sd_card_fclose
00803dec g     F .text	00000044 printf
00813cf0 g     O .rwdata	00000080 Yquant
0080a890 g     F .text	00000068 __sseek
00807cfc g     F .text	000000a4 __sinit
0080aa90 g     F .text	00000130 __swbuf_r
008089d4 g     F .text	00000084 _setlocale_r
00807dfc g     F .text	00000068 __sfmoreglue
0080c804 g     F .text	00000020 __malloc_unlock
00817714 g     O .bss	00000004 current_sector_modified
00801f0c g     F .text	0000017c sd_read
00801bf4 g     F .text	00000080 GetInputString
00808cec g     F .text	000000e0 memmove
00807dec g     F .text	00000010 _cleanup
008093e4 g     F .text	000000bc _Balloc
0080e668 g     F .text	0000006c alt_up_sd_card_is_Present
0080fac4 g     F .text	000000bc Save_Modified_Sector
0080d968 g     F .text	000000c0 alt_up_pixel_buffer_dma_draw
00802b64 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080da60 g     F .text	0000000c alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
0081770c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
008176a8 g     O .bss	00000004 edge_capture
00802088 g     F .text	00000214 ceil
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080ae9c g     F .text	00000074 _fstat_r
008176c8 g     O .bss	00000004 errno
00803f88 g     F .text	00000014 __srget
008176e0 g     O .bss	00000004 alt_argv
0081d98c g       *ABS*	00000000 _gp
00812a18 g     F .text	000002e8 alt_up_sd_card_fopen
00811924 g     F .text	000000dc alt_up_sd_card_find_first
0080da38 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00817700 g     O .bss	00000004 command_argument_register
0081472c g     O .rwdata	00000180 alt_fd_list
00803554 g     F .text	00000090 _getc_r
008034bc g     F .text	00000098 getc
00803e80 g     F .text	00000008 _putchar_r
0080f07c g     F .text	000000b4 find_first_empty_record_in_root_directory
00812f88 g     F .text	00000094 alt_find_dev
00803d4c g     F .text	000000a0 memcpy
00807de0 g     F .text	0000000c _cleanup_r
0080c074 g     F .text	000000f8 __floatsidf
00813028 g     F .text	00000104 alt_io_redirect
0080bfec g     F .text	00000088 __ltdf2
00813744 g       *ABS*	00000000 __DTOR_END__
00803f28 g     F .text	00000014 puts
0080f130 g     F .text	000000f4 find_first_empty_cluster
008133c8 g     F .text	00000008 altera_nios2_irq_init
008091c0 g     F .text	000000b0 __ratio
0080e6d4 g     F .text	0000006c alt_up_sd_card_open_dev
0080da28 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080cf10 g     F .text	0000016c altera_avalon_jtag_uart_read
008035f8 g     F .text	00000014 malloc
00803e30 g     F .text	00000034 _printf_r
00800a28 g     F .text	00000448 lossless_decode
0080c2a8 g     F .text	00000008 __udivsi3
0080c578 g     F .text	00000084 isatty
00813bac g     O .rodata	000000c8 __mprec_tens
0080d45c g     F .text	00000168 alt_up_pixel_buffer_dma_draw_hline
008089b0 g     F .text	00000008 __locale_charset
008134e0 g     F .text	00000038 alt_icache_flush
008176bc g     O .bss	00000004 __malloc_top_pad
0081599c g     O .rwdata	00000004 __mb_cur_max
008089b8 g     F .text	0000000c _localeconv_r
00809adc g     F .text	0000003c __i2b
00808394 g     F .text	0000049c __sfvwrite_r
0080e740 g     F .text	00000080 get_dir_divider_location
00803f9c g     F .text	00000070 _sbrk_r
0080d28c g     F .text	00000058 helper_plot_pixel
0080e8cc g     F .text	0000005c filename_to_upper_case
0080e5f0 g     F .text	00000038 alt_up_sd_card_set_attributes
0080eb4c g     F .text	000001e0 Read_File_Record_At_Offset
0080aff8 g     F .text	00000078 _read_r
008146f8 g     O .rwdata	0000000c __lc_ctype
008159b4 g     O .rwdata	00000004 alt_max_fd
00803284 g     F .text	00000138 __unpack_d
0080ff94 g     F .text	00000cc4 find_file_in_directory
0080ad78 g     F .text	00000110 _fclose_r
00807c60 g     F .text	00000034 fflush
008176c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0080f854 g     F .text	00000138 alt_up_sd_card_is_FAT16
0080272c g     F .text	00000074 __adddf3
008090a0 g     F .text	00000120 __b2d
0080d89c g     F .text	000000a8 alt_up_pixel_buffer_dma_clear_screen
0080b64c g     F .text	000005b0 __umoddi3
0080c6e8 g     F .text	0000009c lseek
008001d0 g     F .text	000000bc print_dct
00815990 g     O .rwdata	00000004 _global_impure_ptr
00810c58 g     F .text	00000ccc get_home_directory_cluster_for_file
0080a044 g     F .text	000005f4 _realloc_r
00817f44 g       *ABS*	00000000 __bss_end
0080c4f0 g     F .text	00000088 alt_iic_isr_register
0080d690 g     F .text	0000020c alt_up_pixel_buffer_dma_draw_box
008132e0 g     F .text	000000e8 alt_tick
0080b070 g     F .text	000005dc __udivdi3
00813c74 g     O .rodata	00000028 __mprec_bigtens
00809d38 g     F .text	00000120 __s2b
00802cc4 g     F .text	00000194 __floatunsidf
00808fc0 g     F .text	00000060 __mcmp
00817718 g     O .bss	00000004 current_sector_index
00807dc8 g     F .text	00000018 __fp_lock_all
0080c454 g     F .text	00000018 alt_ic_irq_enabled
008132ac g     F .text	00000034 alt_alarm_stop
00801d4c g     F .text	000001c0 sd_card_create_sectors_list
0080f98c g     F .text	000000b0 mark_cluster
008009ac g     F .text	0000007c input_AC
008176d8 g     O .bss	00000004 alt_irq_active
00800e70 g     F .text	000006b4 mjpeg423_decode
008000ec g     F .exceptions	00000098 alt_irq_handler
00814704 g     O .rwdata	00000028 alt_dev_null
0080e1d8 g     F .text	000002e0 convert_filename_to_name_extension
00812d94 g     F .text	00000018 alt_dcache_flush_all
00808e8c g     F .text	00000070 __hi0bits
008176ec g     O .bss	00000004 is_sd_card_formated_as_FAT16
0080d5c4 g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
00802bec g     F .text	000000d8 __fixdfsi
00811fe0 g     F .text	0000032c find_first_empty_record_in_a_subdirectory
008159cc g       *ABS*	00000000 __ram_rwdata_end
008159ac g     O .rwdata	00000008 alt_dev_list
0080c9b8 g     F .text	00000118 write
00809f5c g     F .text	000000e8 _putc_r
00817710 g     O .bss	00000004 device_pointer
0080da6c g     F .text	0000029c alt_up_pixel_buffer_dma_draw_line
00813cf0 g       *ABS*	00000000 __ram_rodata_end
0080c3c4 g     F .text	00000090 fstat
00809c18 g     F .text	00000120 __pow5mult
008176cc g     O .bss	00000004 __nlocale_changed
0080c2b0 g     F .text	00000008 __umodsi3
00817f44 g       *ABS*	00000000 end
0080cd00 g     F .text	00000080 altera_avalon_jtag_uart_init
00813740 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080d200 g     F .text	00000050 alt_avalon_timer_sc_init
00802ef0 g     F .text	00000080 __clzsi2
0080d07c g     F .text	00000184 altera_avalon_jtag_uart_write
00807cec g     F .text	00000004 __sfp_lock_acquire
00808c08 g     F .text	000000e4 memchr
008040d8 g     F .text	00001eac ___vfprintf_internal_r
00808080 g     F .text	00000314 _free_r
00803f3c g     F .text	0000004c __srget_r
008060e8 g     F .text	000001b0 __call_exitprocs
008176d0 g     O .bss	00000004 __mlocale_changed
00815998 g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000004c _start
0081771c g     O .bss	00000004 _alt_tick_rate
0080028c g     F .text	000000c4 print_block
00800350 g     F .text	00000108 print_bitstream
008097a8 g     F .text	0000014c __lshift
00801cdc g     F .text	00000070 sd_card_start_read_sector
00817720 g     O .bss	00000004 _alt_nticks
0080c824 g     F .text	0000011c read
0080caf0 g     F .text	00000134 alt_sys_init
00801c74 g     F .text	00000018 sd_seek
008135a0 g     F .text	00000134 __register_exitproc
008098f4 g     F .text	000001e8 __multiply
0080cc60 g     F .text	00000048 altera_avalon_jtag_uart_close
00813cf0 g       *ABS*	00000000 __ram_rwdata_start
00813744 g       *ABS*	00000000 __ram_rodata_start
00817724 g     O .bss	00000028 __malloc_current_mallinfo
008094a0 g     F .text	0000017c __d2b
008176e8 g     O .bss	00000004 initialized
0080cc50 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00813480 g     F .text	00000060 alt_get_fd
0081784c g     O .bss	00000014 search_data
008033bc g     F .text	000000c8 __fpcmp_parts_d
0080ad08 g     F .text	00000070 _close_r
0081352c g     F .text	00000074 memcmp
0080cc30 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00817f44 g       *ABS*	00000000 __alt_stack_base
0080cc24 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00800478 g     F .text	00000404 idct
00805fa8 g     F .text	0000013c __swsetup_r
0080bbfc g     F .text	00000258 __divdf3
00807e64 g     F .text	000000f0 __sfp
00817860 g     O .bss	00000054 boot_sector_data
00809304 g     F .text	00000058 __copybits
008142f0 g     O .rwdata	00000408 __malloc_av_
00807cf8 g     F .text	00000004 __sinit_lock_release
008027a0 g     F .text	000003c4 __muldf3
0080a974 g     F .text	00000060 __sread
008133d0 g     F .text	000000b0 alt_find_file
00812dac g     F .text	000000b4 alt_dev_llist_insert
0080c7e4 g     F .text	00000020 __malloc_lock
0080c964 g     F .text	00000054 sbrk
00807a64 g     F .text	000001fc _fflush_r
0080ac54 g     F .text	000000b4 _calloc_r
00800938 g     F .text	00000074 input_DC
008176a8 g       *ABS*	00000000 __bss_start
00808dcc g     F .text	00000098 memset
008176b0 g     O .bss	00000004 sd_card_curr_read_sector
00801af8 g     F .text	000000e0 main
008176e4 g     O .bss	00000004 alt_envp
008176c4 g     O .bss	00000004 __malloc_max_total_mem
0080d944 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0080cc40 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0080abc0 g     F .text	0000001c __swbuf
0080e628 g     F .text	00000040 alt_up_sd_card_get_attributes
0080ed2c g     F .text	000000ac Write_Sector_Data
00811ba4 g     F .text	0000043c alt_up_sd_card_write
0080a888 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ae88 g     F .text	00000014 fclose
00817db4 g     O .bss	00000190 _atexit0
008064b0 g     F .text	000015b4 _dtoa_r
0080360c g     F .text	00000740 _malloc_r
008159b8 g     O .rwdata	00000004 alt_errno
00801c8c g     F .text	00000024 sd_card_file_size
008088f8 g     F .text	000000b8 _fwalk
00809e58 g     F .text	00000104 putc
0080c1e8 g     F .text	00000060 __divsi3
008139cc g     O .rodata	00000014 __thenan_df
00807f54 g     F .text	0000012c _malloc_trim_r
00813744 g       *ABS*	00000000 __CTOR_END__
008176f4 g     O .bss	00000004 status_register
0080a9d4 g     F .text	000000bc strcmp
008176fc g     O .bss	00000004 command_register
00813744 g       *ABS*	00000000 __flash_rodata_start
00813744 g       *ABS*	00000000 __DTOR_LIST__
0080bedc g     F .text	00000088 __nedf2
0080cad0 g     F .text	00000020 alt_irq_init
0080c940 g     F .text	00000024 alt_release_fd
0080fa3c g     F .text	00000088 get_cluster_flag
008139e0 g     O .rodata	00000100 __clz_tab
0080e928 g     F .text	00000224 Write_File_Record_At_Offset
008176d4 g     O .bss	00000004 _PathLocale
00813518 g     F .text	00000014 atexit
0080abdc g     F .text	00000078 _write_r
00808a58 g     F .text	0000001c setlocale
0080f224 g     F .text	00000370 Check_for_DOS_FAT
0081230c g     F .text	0000070c create_file
0081598c g     O .rwdata	00000004 _impure_ptr
008176f8 g     O .bss	00000004 CSD_register_w0
008176dc g     O .bss	00000004 alt_argc
00812f24 g     F .text	00000064 _do_dtors
0080a638 g     F .text	000001c4 __srefill_r
00813df0 g     O .rwdata	00000100 zigzag_table
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800458 g     F .text	00000020 error_and_exit
00809020 g     F .text	00000080 __ulp
0080a818 g     F .text	00000040 __isinfd
00807db0 g     F .text	00000018 __fp_unlock_all
008159a4 g     O .rwdata	00000008 alt_fs_list
0080e7c0 g     F .text	0000010c check_file_name_for_FAT16_compliance
00817704 g     O .bss	00000004 buffer_memory
00800020 g       *ABS*	00000000 __ram_exceptions_start
008089c4 g     F .text	00000010 localeconv
0080c4ec g     F .text	00000004 alt_ic_isr_register
00817708 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
008159cc g       *ABS*	00000000 _edata
0080087c g     F .text	000000bc update_buffer
00817f44 g       *ABS*	00000000 _end
008178b4 g     O .bss	00000500 active_files
00800184 g       *ABS*	00000000 __ram_exceptions_end
008176b4 g     O .bss	00000004 sd_card_start_byte_in_sector
0080e4b8 g     F .text	00000138 copy_file_record_name_to_string
0080ce88 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
0080f75c g     F .text	000000f8 Look_for_FAT16
0080c4ac g     F .text	00000040 alt_ic_irq_disable
0080a8f8 g     F .text	0000007c __swrite
00815994 g     O .rwdata	00000004 __malloc_trim_threshold
00803484 g     F .text	00000038 exit
0080fb80 g     F .text	00000414 alt_up_sd_card_find_next
00808830 g     F .text	000000c8 _fwalk_reent
0080961c g     F .text	0000018c __mdiff
0080c248 g     F .text	00000060 __modsi3
0080edd8 g     F .text	00000144 Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807cf0 g     F .text	00000004 __sfp_lock_release
0080a858 g     F .text	00000030 __isnand
0080c3b0 g     F .text	00000014 _exit
00812d00 g     F .text	00000094 alt_alarm_start
00802e58 g     F .text	00000098 __muldi3
00811a00 g     F .text	000001a4 alt_up_sd_card_read
00808a74 g     F .text	00000194 __smakebuf_r
0080400c g     F .text	00000074 strlen
0081312c g     F .text	00000180 open
0080bf64 g     F .text	00000088 __gedf2
0081301c g     F .text	0000000c alt_icache_flush_all
008159bc g     O .rwdata	00000004 alt_priority_mask
00813d70 g     O .rwdata	00000080 Cquant
0080c46c g     F .text	00000040 alt_ic_irq_enable
00805f84 g     F .text	00000024 __vfprintf_internal
008026ac g     F .text	00000080 __subdf3
00808efc g     F .text	000000c4 __lo0bits
008159c4 g     O .rwdata	00000008 alt_alarm_list
00812ec0 g     F .text	00000064 _do_ctors
0080c2b8 g     F .text	000000f0 close
0080c5fc g     F .text	00000080 alt_load
00802f70 g     F .text	00000314 __pack_d
0080dd08 g     F .text	000004d0 match_file_record_to_name_ext
008035e4 g     F .text	00000014 free
00807cf4 g     F .text	00000004 __sinit_lock_acquire
00809b18 g     F .text	00000100 __multadd
00808e64 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002074 	movhi	r16,129
  800108:	841dd304 	addi	r16,r16,30540
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800184:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800188:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80018c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  800190:	00bffd16 	blt	zero,r2,800188 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001a0:	d6b66314 	ori	gp,gp,55692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001a8:	109daa14 	ori	r2,r2,30376

    movhi r3, %hi(__bss_end)
  8001ac:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001b0:	18dfd114 	ori	r3,r3,32580

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x40>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	080c5fc0 	call	80c5fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	080c7840 	call	80c784 <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <print_dct>:
            else printf("%u\n", b[row][column]);
        } 
}

void print_dct(pdct_block_t b)
{
  8001d0:	defffd04 	addi	sp,sp,-12
  8001d4:	dc400115 	stw	r17,4(sp)
  8001d8:	dc000015 	stw	r16,0(sp)
  8001dc:	dfc00215 	stw	ra,8(sp)
  8001e0:	2021883a 	mov	r16,r4
  8001e4:	0023883a 	mov	r17,zero
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8001e8:	8140000f 	ldh	r5,0(r16)
  8001ec:	01002074 	movhi	r4,129
  8001f0:	210dd104 	addi	r4,r4,14148
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  8001f4:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8001f8:	0803dec0 	call	803dec <printf>
  8001fc:	8140008f 	ldh	r5,2(r16)
  800200:	01002074 	movhi	r4,129
  800204:	210dd104 	addi	r4,r4,14148
  800208:	0803dec0 	call	803dec <printf>
  80020c:	8140010f 	ldh	r5,4(r16)
  800210:	01002074 	movhi	r4,129
  800214:	210dd104 	addi	r4,r4,14148
  800218:	0803dec0 	call	803dec <printf>
  80021c:	8140018f 	ldh	r5,6(r16)
  800220:	01002074 	movhi	r4,129
  800224:	210dd104 	addi	r4,r4,14148
  800228:	0803dec0 	call	803dec <printf>
  80022c:	8140020f 	ldh	r5,8(r16)
  800230:	01002074 	movhi	r4,129
  800234:	210dd104 	addi	r4,r4,14148
  800238:	0803dec0 	call	803dec <printf>
  80023c:	8140028f 	ldh	r5,10(r16)
  800240:	01002074 	movhi	r4,129
  800244:	210dd104 	addi	r4,r4,14148
  800248:	0803dec0 	call	803dec <printf>
  80024c:	8140030f 	ldh	r5,12(r16)
  800250:	01002074 	movhi	r4,129
  800254:	210dd104 	addi	r4,r4,14148
  800258:	0803dec0 	call	803dec <printf>
            else printf("%d\n", b[row][column]);
  80025c:	8140038f 	ldh	r5,14(r16)
  800260:	01002074 	movhi	r4,129
  800264:	210dd204 	addi	r4,r4,14152
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800268:	84000404 	addi	r16,r16,16
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
  80026c:	0803dec0 	call	803dec <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800270:	00c00204 	movi	r3,8
  800274:	88ffdc1e 	bne	r17,r3,8001e8 <print_dct+0x18>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
  800278:	dfc00217 	ldw	ra,8(sp)
  80027c:	dc400117 	ldw	r17,4(sp)
  800280:	dc000017 	ldw	r16,0(sp)
  800284:	dec00304 	addi	sp,sp,12
  800288:	f800283a 	ret

0080028c <print_block>:
    printf("Error: %s\n", str);
    exit(-1);
}

void print_block(pcolor_block_t b)
{
  80028c:	defffc04 	addi	sp,sp,-16
  800290:	dc800215 	stw	r18,8(sp)
  800294:	dc400115 	stw	r17,4(sp)
  800298:	dc000015 	stw	r16,0(sp)
  80029c:	dfc00315 	stw	ra,12(sp)
  8002a0:	2021883a 	mov	r16,r4
  8002a4:	0023883a 	mov	r17,zero
  8002a8:	04800204 	movi	r18,8
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8002ac:	81400003 	ldbu	r5,0(r16)
  8002b0:	01002074 	movhi	r4,129
  8002b4:	210dd104 	addi	r4,r4,14148
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  8002b8:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8002bc:	0803dec0 	call	803dec <printf>
  8002c0:	81400043 	ldbu	r5,1(r16)
  8002c4:	01002074 	movhi	r4,129
  8002c8:	210dd104 	addi	r4,r4,14148
  8002cc:	0803dec0 	call	803dec <printf>
  8002d0:	81400083 	ldbu	r5,2(r16)
  8002d4:	01002074 	movhi	r4,129
  8002d8:	210dd104 	addi	r4,r4,14148
  8002dc:	0803dec0 	call	803dec <printf>
  8002e0:	814000c3 	ldbu	r5,3(r16)
  8002e4:	01002074 	movhi	r4,129
  8002e8:	210dd104 	addi	r4,r4,14148
  8002ec:	0803dec0 	call	803dec <printf>
  8002f0:	81400103 	ldbu	r5,4(r16)
  8002f4:	01002074 	movhi	r4,129
  8002f8:	210dd104 	addi	r4,r4,14148
  8002fc:	0803dec0 	call	803dec <printf>
  800300:	81400143 	ldbu	r5,5(r16)
  800304:	01002074 	movhi	r4,129
  800308:	210dd104 	addi	r4,r4,14148
  80030c:	0803dec0 	call	803dec <printf>
  800310:	81400183 	ldbu	r5,6(r16)
  800314:	01002074 	movhi	r4,129
  800318:	210dd104 	addi	r4,r4,14148
  80031c:	0803dec0 	call	803dec <printf>
            else printf("%u\n", b[row][column]);
  800320:	814001c3 	ldbu	r5,7(r16)
  800324:	01002074 	movhi	r4,129
  800328:	210dd304 	addi	r4,r4,14156
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  80032c:	84000204 	addi	r16,r16,8
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
  800330:	0803dec0 	call	803dec <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  800334:	8cbfdd1e 	bne	r17,r18,8002ac <print_block+0x20>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
  800338:	dfc00317 	ldw	ra,12(sp)
  80033c:	dc800217 	ldw	r18,8(sp)
  800340:	dc400117 	ldw	r17,4(sp)
  800344:	dc000017 	ldw	r16,0(sp)
  800348:	dec00404 	addi	sp,sp,16
  80034c:	f800283a 	ret

00800350 <print_bitstream>:
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
  800350:	defffd04 	addi	sp,sp,-12
  800354:	dfc00215 	stw	ra,8(sp)
  800358:	dc400115 	stw	r17,4(sp)
  80035c:	dc000015 	stw	r16,0(sp)
    for (int index = 0; index < num_bytes; index++)
  800360:	0100370e 	bge	zero,r4,800440 <print_bitstream+0xf0>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800364:	2821883a 	mov	r16,r5
  800368:	2923883a 	add	r17,r5,r4

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
  80036c:	81400003 	ldbu	r5,0(r16)
  800370:	01002074 	movhi	r4,129
  800374:	210dd404 	addi	r4,r4,14160
  800378:	280ad1fa 	srli	r5,r5,7
  80037c:	0803dec0 	call	803dec <printf>
  800380:	81400003 	ldbu	r5,0(r16)
  800384:	01002074 	movhi	r4,129
  800388:	210dd404 	addi	r4,r4,14160
  80038c:	294b883a 	add	r5,r5,r5
  800390:	29403fcc 	andi	r5,r5,255
  800394:	280ad1fa 	srli	r5,r5,7
  800398:	0803dec0 	call	803dec <printf>
  80039c:	81400003 	ldbu	r5,0(r16)
  8003a0:	01002074 	movhi	r4,129
  8003a4:	210dd404 	addi	r4,r4,14160
  8003a8:	294b883a 	add	r5,r5,r5
  8003ac:	294b883a 	add	r5,r5,r5
  8003b0:	29403fcc 	andi	r5,r5,255
  8003b4:	280ad1fa 	srli	r5,r5,7
  8003b8:	0803dec0 	call	803dec <printf>
  8003bc:	81400003 	ldbu	r5,0(r16)
  8003c0:	01002074 	movhi	r4,129
  8003c4:	210dd404 	addi	r4,r4,14160
  8003c8:	280ad13a 	srli	r5,r5,4
  8003cc:	2940004c 	andi	r5,r5,1
  8003d0:	0803dec0 	call	803dec <printf>
  8003d4:	81400003 	ldbu	r5,0(r16)
  8003d8:	01002074 	movhi	r4,129
  8003dc:	210dd404 	addi	r4,r4,14160
  8003e0:	280ad0fa 	srli	r5,r5,3
  8003e4:	2940004c 	andi	r5,r5,1
  8003e8:	0803dec0 	call	803dec <printf>
  8003ec:	81400003 	ldbu	r5,0(r16)
  8003f0:	01002074 	movhi	r4,129
  8003f4:	210dd404 	addi	r4,r4,14160
  8003f8:	280ad0ba 	srli	r5,r5,2
  8003fc:	2940004c 	andi	r5,r5,1
  800400:	0803dec0 	call	803dec <printf>
  800404:	81400003 	ldbu	r5,0(r16)
  800408:	01002074 	movhi	r4,129
  80040c:	210dd404 	addi	r4,r4,14160
  800410:	280ad07a 	srli	r5,r5,1
  800414:	2940004c 	andi	r5,r5,1
  800418:	0803dec0 	call	803dec <printf>
  80041c:	81400003 	ldbu	r5,0(r16)
  800420:	01002074 	movhi	r4,129
  800424:	210dd404 	addi	r4,r4,14160
  800428:	84000044 	addi	r16,r16,1
  80042c:	280a91fa 	slli	r5,r5,7
  800430:	29403fcc 	andi	r5,r5,255
  800434:	280ac03a 	cmpne	r5,r5,zero
  800438:	0803dec0 	call	803dec <printf>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
  80043c:	8c3fcb1e 	bne	r17,r16,80036c <print_bitstream+0x1c>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800440:	01000284 	movi	r4,10
}
  800444:	dfc00217 	ldw	ra,8(sp)
  800448:	dc400117 	ldw	r17,4(sp)
  80044c:	dc000017 	ldw	r16,0(sp)
  800450:	dec00304 	addi	sp,sp,12
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800454:	0803e641 	jmpi	803e64 <putchar>

00800458 <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800458:	deffff04 	addi	sp,sp,-4
  80045c:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
  800460:	01002074 	movhi	r4,129
  800464:	210dd504 	addi	r4,r4,14164

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800468:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
  80046c:	0803dec0 	call	803dec <printf>
    exit(-1);
  800470:	013fffc4 	movi	r4,-1
  800474:	08034840 	call	803484 <exit>

00800478 <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
  800478:	deffb904 	addi	sp,sp,-284
  80047c:	dd004415 	stw	r20,272(sp)
  800480:	dcc04315 	stw	r19,268(sp)
  800484:	dc804215 	stw	r18,264(sp)
  800488:	dc404115 	stw	r17,260(sp)
  80048c:	dd804615 	stw	r22,280(sp)
  800490:	dd404515 	stw	r21,276(sp)
  800494:	dc004015 	stw	r16,256(sp)
  800498:	2829883a 	mov	r20,r5
    
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
  80049c:	2023883a 	mov	r17,r4
  8004a0:	d825883a 	mov	r18,sp
  8004a4:	dcc00804 	addi	r19,sp,32
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
  8004a8:	8a401c0f 	ldh	r9,112(r17)
        tmp1 =inptr[DCTSIZE*5];
  8004ac:	8a80140f 	ldh	r10,80(r17)
        tmp2 = inptr[DCTSIZE*3];
  8004b0:	89c00c0f 	ldh	r7,48(r17)
        tmp3 = inptr[DCTSIZE*1];
  8004b4:	8980040f 	ldh	r6,16(r17)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
  8004b8:	88c0080f 	ldh	r3,32(r17)
        z3 = inptr[DCTSIZE*6];
  8004bc:	8b80180f 	ldh	r14,96(r17)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
  8004c0:	8a00000f 	ldh	r8,0(r17)
        z3 = inptr[DCTSIZE*4];
  8004c4:	8c00100f 	ldh	r16,64(r17)
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
  8004c8:	49d9883a 	add	r12,r9,r7
        z4 = tmp1 + tmp3;
  8004cc:	518b883a 	add	r5,r10,r6
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  8004d0:	1b85883a 	add	r2,r3,r14
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
  8004d4:	4997883a 	add	r11,r9,r6
        z2 = tmp1 + tmp2;
  8004d8:	51db883a 	add	r13,r10,r7
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  8004dc:	6149883a 	add	r4,r12,r5
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
  8004e0:	5af8cce4 	muli	r11,r11,-7373
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
  8004e4:	6b6b7f64 	muli	r13,r13,-20995
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
  8004e8:	441fc83a 	sub	r15,r8,r16
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  8004ec:	10845464 	muli	r2,r2,4433
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  8004f0:	21096864 	muli	r4,r4,9633
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
  8004f4:	63304ee4 	muli	r12,r12,-16069
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  8004f8:	73b137e4 	muli	r14,r14,-15137
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  8004fc:	18c61fa4 	muli	r3,r3,6270
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
  800500:	297ce124 	muli	r5,r5,-3196
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  800504:	4a4263a4 	muli	r9,r9,2446
        tmp1 += z2 + z4;
  800508:	52906ce4 	muli	r10,r10,16819
        tmp2 += z2 + z3;
  80050c:	39d89524 	muli	r7,r7,25172
        tmp3 += z1 + z4;
  800510:	318c02e4 	muli	r6,r6,12299
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
  800514:	4411883a 	add	r8,r8,r16
  800518:	4010937a 	slli	r8,r8,13
        tmp1 = (z2 - z3) << CONST_BITS;
  80051c:	781e937a 	slli	r15,r15,13
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  800520:	10c7883a 	add	r3,r2,r3
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
  800524:	214b883a 	add	r5,r4,r5
        
        tmp0 += z1 + z3;
  800528:	4ad3883a 	add	r9,r9,r11
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
  80052c:	2309883a 	add	r4,r4,r12
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
  800530:	5355883a 	add	r10,r10,r13
        tmp2 += z2 + z3;
  800534:	3b4f883a 	add	r7,r7,r13
        tmp3 += z1 + z4;
  800538:	32cd883a 	add	r6,r6,r11
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  80053c:	1385883a 	add	r2,r2,r14
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
  800540:	40d9c83a 	sub	r12,r8,r3
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
  800544:	7897c83a 	sub	r11,r15,r2
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
  800548:	21cf883a 	add	r7,r4,r7
        tmp3 += z1 + z4;
  80054c:	298d883a 	add	r6,r5,r6
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  800550:	2249883a 	add	r4,r4,r9
        tmp1 += z2 + z4;
  800554:	2a8b883a 	add	r5,r5,r10
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
  800558:	1a07883a 	add	r3,r3,r8
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
  80055c:	13c5883a 	add	r2,r2,r15
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  800560:	1991c83a 	sub	r8,r3,r6
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  800564:	11d3c83a 	sub	r9,r2,r7
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  800568:	5955c83a 	sub	r10,r11,r5
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  80056c:	611bc83a 	sub	r13,r12,r4
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  800570:	18c10004 	addi	r3,r3,1024
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  800574:	10810004 	addi	r2,r2,1024
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  800578:	5ac10004 	addi	r11,r11,1024
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  80057c:	63010004 	addi	r12,r12,1024
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  800580:	30cd883a 	add	r6,r6,r3
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  800584:	42010004 	addi	r8,r8,1024
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  800588:	388f883a 	add	r7,r7,r2
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  80058c:	4a410004 	addi	r9,r9,1024
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  800590:	2acb883a 	add	r5,r5,r11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  800594:	52810004 	addi	r10,r10,1024
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  800598:	2309883a 	add	r4,r4,r12
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  80059c:	6b410004 	addi	r13,r13,1024
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  8005a0:	300dd2fa 	srai	r6,r6,11
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  8005a4:	4011d2fa 	srai	r8,r8,11
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  8005a8:	380fd2fa 	srai	r7,r7,11
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  8005ac:	4813d2fa 	srai	r9,r9,11
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  8005b0:	280bd2fa 	srai	r5,r5,11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  8005b4:	5015d2fa 	srai	r10,r10,11
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  8005b8:	2009d2fa 	srai	r4,r4,11
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  8005bc:	681bd2fa 	srai	r13,r13,11
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  8005c0:	91800015 	stw	r6,0(r18)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  8005c4:	92003815 	stw	r8,224(r18)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  8005c8:	91c00815 	stw	r7,32(r18)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  8005cc:	92403015 	stw	r9,192(r18)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  8005d0:	91401015 	stw	r5,64(r18)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  8005d4:	92802815 	stw	r10,160(r18)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  8005d8:	91001815 	stw	r4,96(r18)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
  8005dc:	93402015 	stw	r13,128(r18)
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
  8005e0:	94800104 	addi	r18,r18,4
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
  8005e4:	8c400084 	addi	r17,r17,2
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
  8005e8:	9cbfaf1e 	bne	r19,r18,8004a8 <idct+0x30>
  8005ec:	a023883a 	mov	r17,r20
  8005f0:	d825883a 	mov	r18,sp
  8005f4:	dd803804 	addi	r22,sp,224
  8005f8:	054000b4 	movhi	r21,2
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
  8005fc:	92800717 	ldw	r10,28(r18)
        tmp1 = (int32_t) wsptr[5];
  800600:	92c00517 	ldw	r11,20(r18)
        tmp2 = (int32_t) wsptr[3];
  800604:	92400317 	ldw	r9,12(r18)
        tmp3 = (int32_t) wsptr[1];
  800608:	90800117 	ldw	r2,4(r18)
        outptr = block[ctr];
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
  80060c:	91c00217 	ldw	r7,8(r18)
        z3 = (int32_t) wsptr[6];
  800610:	93c00617 	ldw	r15,24(r18)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
  800614:	92000017 	ldw	r8,0(r18)
  800618:	94000417 	ldw	r16,16(r18)
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
  80061c:	525d883a 	add	r14,r10,r9
        z4 = tmp1 + tmp3;
  800620:	5889883a 	add	r4,r11,r2
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  800624:	3bcb883a 	add	r5,r7,r15
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
  800628:	5099883a 	add	r12,r10,r2
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  80062c:	7107883a 	add	r3,r14,r4
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  800630:	29445464 	muli	r5,r5,4433
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
  800634:	441b883a 	add	r13,r8,r16
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  800638:	39c61fa4 	muli	r7,r7,6270
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
  80063c:	681a937a 	slli	r13,r13,13
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
  800640:	6338cce4 	muli	r12,r12,-7373
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  800644:	18c96864 	muli	r3,r3,9633
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
  800648:	213ce124 	muli	r4,r4,-3196
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
  80064c:	108c02e4 	muli	r2,r2,12299
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
  800650:	29cf883a 	add	r7,r5,r7
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
  800654:	1909883a 	add	r4,r3,r4
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
  800658:	1305883a 	add	r2,r2,r12
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
  80065c:	3b69883a 	add	r20,r7,r13
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
  800660:	5a4d883a 	add	r6,r11,r9
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
  800664:	20a7883a 	add	r19,r4,r2
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800668:	a545883a 	add	r2,r20,r21
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
  80066c:	31ab7f64 	muli	r6,r6,-20995
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
  800670:	73b04ee4 	muli	r14,r14,-16069
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
  800674:	4411c83a 	sub	r8,r8,r16
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  800678:	7bf137e4 	muli	r15,r15,-15137
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  80067c:	528263a4 	muli	r10,r10,2446
        tmp1 += z2 + z4;
  800680:	5ad06ce4 	muli	r11,r11,16819
        tmp2 += z2 + z3;
  800684:	4a589524 	muli	r9,r9,25172
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800688:	9885883a 	add	r2,r19,r2
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
  80068c:	4010937a 	slli	r8,r8,13
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800690:	1005d4ba 	srai	r2,r2,18
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
  800694:	1b87883a 	add	r3,r3,r14
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
  800698:	4993883a 	add	r9,r9,r6
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  80069c:	2bcb883a 	add	r5,r5,r15
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  8006a0:	5315883a 	add	r10,r10,r12
        tmp1 += z2 + z4;
  8006a4:	5997883a 	add	r11,r11,r6
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
  8006a8:	69ddc83a 	sub	r14,r13,r7
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
  8006ac:	4159c83a 	sub	r12,r8,r5
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
  8006b0:	1a4f883a 	add	r7,r3,r9
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
  8006b4:	1a9b883a 	add	r13,r3,r10
        tmp1 += z2 + z4;
  8006b8:	22d3883a 	add	r9,r4,r11
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
  8006bc:	2a0b883a 	add	r5,r5,r8
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  8006c0:	10006c16 	blt	r2,zero,800874 <idct+0x3fc>
  8006c4:	01803fc4 	movi	r6,255
  8006c8:	3080010e 	bge	r6,r2,8006d0 <idct+0x258>
  8006cc:	3005883a 	mov	r2,r6
  8006d0:	100d883a 	mov	r6,r2
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  8006d4:	a4c5c83a 	sub	r2,r20,r19
  8006d8:	1545883a 	add	r2,r2,r21
  8006dc:	1005d4ba 	srai	r2,r2,18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  8006e0:	89800005 	stb	r6,0(r17)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  8006e4:	10006116 	blt	r2,zero,80086c <idct+0x3f4>
  8006e8:	01803fc4 	movi	r6,255
  8006ec:	3080010e 	bge	r6,r2,8006f4 <idct+0x27c>
  8006f0:	3005883a 	mov	r2,r6
  8006f4:	1009883a 	mov	r4,r2
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  8006f8:	2d45883a 	add	r2,r5,r21
  8006fc:	3885883a 	add	r2,r7,r2
  800700:	1005d4ba 	srai	r2,r2,18
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  800704:	890001c5 	stb	r4,7(r17)
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  800708:	10005616 	blt	r2,zero,800864 <idct+0x3ec>
  80070c:	01803fc4 	movi	r6,255
  800710:	3080010e 	bge	r6,r2,800718 <idct+0x2a0>
  800714:	3005883a 	mov	r2,r6
  800718:	100d883a 	mov	r6,r2
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  80071c:	29c5c83a 	sub	r2,r5,r7
  800720:	1545883a 	add	r2,r2,r21
  800724:	1005d4ba 	srai	r2,r2,18
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  800728:	89800045 	stb	r6,1(r17)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  80072c:	10003916 	blt	r2,zero,800814 <idct+0x39c>
  800730:	01403fc4 	movi	r5,255
  800734:	2880010e 	bge	r5,r2,80073c <idct+0x2c4>
  800738:	2805883a 	mov	r2,r5
  80073c:	1007883a 	mov	r3,r2
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800740:	6545883a 	add	r2,r12,r21
  800744:	4885883a 	add	r2,r9,r2
  800748:	1005d4ba 	srai	r2,r2,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  80074c:	88c00185 	stb	r3,6(r17)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800750:	10003616 	blt	r2,zero,80082c <idct+0x3b4>
  800754:	01403fc4 	movi	r5,255
  800758:	2880010e 	bge	r5,r2,800760 <idct+0x2e8>
  80075c:	2805883a 	mov	r2,r5
  800760:	100b883a 	mov	r5,r2
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800764:	6245c83a 	sub	r2,r12,r9
  800768:	1545883a 	add	r2,r2,r21
  80076c:	1005d4ba 	srai	r2,r2,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800770:	89400085 	stb	r5,2(r17)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800774:	10003316 	blt	r2,zero,800844 <idct+0x3cc>
  800778:	01003fc4 	movi	r4,255
  80077c:	2080010e 	bge	r4,r2,800784 <idct+0x30c>
  800780:	2005883a 	mov	r2,r4
  800784:	1009883a 	mov	r4,r2
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800788:	7545883a 	add	r2,r14,r21
  80078c:	6885883a 	add	r2,r13,r2
  800790:	1005d4ba 	srai	r2,r2,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800794:	89000145 	stb	r4,5(r17)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800798:	10003016 	blt	r2,zero,80085c <idct+0x3e4>
  80079c:	01003fc4 	movi	r4,255
  8007a0:	2080010e 	bge	r4,r2,8007a8 <idct+0x330>
  8007a4:	2005883a 	mov	r2,r4
  8007a8:	1009883a 	mov	r4,r2
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
  8007ac:	7345c83a 	sub	r2,r14,r13
  8007b0:	1545883a 	add	r2,r2,r21
  8007b4:	1005d4ba 	srai	r2,r2,18
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  8007b8:	890000c5 	stb	r4,3(r17)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
  8007bc:	10000816 	blt	r2,zero,8007e0 <idct+0x368>
  8007c0:	00c03fc4 	movi	r3,255
  8007c4:	1880010e 	bge	r3,r2,8007cc <idct+0x354>
  8007c8:	1805883a 	mov	r2,r3
  8007cc:	88800105 	stb	r2,4(r17)
  8007d0:	8c400204 	addi	r17,r17,8
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
  8007d4:	b4800626 	beq	r22,r18,8007f0 <idct+0x378>
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
  8007d8:	94800804 	addi	r18,r18,32
  8007dc:	003f8706 	br	8005fc <idct+0x184>
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
  8007e0:	0005883a 	mov	r2,zero
  8007e4:	88800105 	stb	r2,4(r17)
  8007e8:	8c400204 	addi	r17,r17,8
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
  8007ec:	b4bffa1e 	bne	r22,r18,8007d8 <idct+0x360>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
  8007f0:	dd804617 	ldw	r22,280(sp)
  8007f4:	dd404517 	ldw	r21,276(sp)
  8007f8:	dd004417 	ldw	r20,272(sp)
  8007fc:	dcc04317 	ldw	r19,268(sp)
  800800:	dc804217 	ldw	r18,264(sp)
  800804:	dc404117 	ldw	r17,260(sp)
  800808:	dc004017 	ldw	r16,256(sp)
  80080c:	dec04704 	addi	sp,sp,284
  800810:	f800283a 	ret
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800814:	6545883a 	add	r2,r12,r21
  800818:	4885883a 	add	r2,r9,r2
  80081c:	1005d4ba 	srai	r2,r2,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
  800820:	0007883a 	mov	r3,zero
  800824:	88c00185 	stb	r3,6(r17)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800828:	103fca0e 	bge	r2,zero,800754 <idct+0x2dc>
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  80082c:	6245c83a 	sub	r2,r12,r9
  800830:	1545883a 	add	r2,r2,r21
  800834:	1005d4ba 	srai	r2,r2,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
  800838:	000b883a 	mov	r5,zero
  80083c:	89400085 	stb	r5,2(r17)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800840:	103fcd0e 	bge	r2,zero,800778 <idct+0x300>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800844:	7545883a 	add	r2,r14,r21
  800848:	6885883a 	add	r2,r13,r2
  80084c:	1005d4ba 	srai	r2,r2,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
  800850:	0009883a 	mov	r4,zero
  800854:	89000145 	stb	r4,5(r17)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
  800858:	103fd00e 	bge	r2,zero,80079c <idct+0x324>
  80085c:	0009883a 	mov	r4,zero
  800860:	003fd206 	br	8007ac <idct+0x334>
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
  800864:	000d883a 	mov	r6,zero
  800868:	003fac06 	br	80071c <idct+0x2a4>
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
  80086c:	0009883a 	mov	r4,zero
  800870:	003fa106 	br	8006f8 <idct+0x280>
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
  800874:	000d883a 	mov	r6,zero
  800878:	003f9606 	br	8006d4 <idct+0x25c>

0080087c <update_buffer>:
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  80087c:	20c00017 	ldw	r3,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  800880:	30800017 	ldw	r2,0(r6)
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800884:	39c03fcc 	andi	r7,r7,255
  800888:	19d2983a 	sll	r9,r3,r7
    //total number of bits to be shifted in
    *pbitcount += size;
  80088c:	388f883a 	add	r7,r7,r2
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800890:	008001c4 	movi	r2,7
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800894:	3abffe04 	addi	r10,r7,-8
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800898:	3b4001cc 	andi	r13,r7,7
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  80089c:	22400015 	stw	r9,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  8008a0:	31c00015 	stw	r7,0(r6)
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8008a4:	11c01c0e 	bge	r2,r7,800918 <update_buffer+0x9c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008a8:	2a000017 	ldw	r8,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008ac:	3b3ffc04 	addi	r12,r7,-16
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008b0:	40800003 	ldbu	r2,0(r8)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008b4:	40c00044 	addi	r3,r8,1
  8008b8:	28c00015 	stw	r3,0(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008bc:	1284983a 	sll	r2,r2,r10
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008c0:	42c00084 	addi	r11,r8,2
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008c4:	4886b03a 	or	r3,r9,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8008c8:	008003c4 	movi	r2,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8008cc:	20c00015 	stw	r3,0(r4)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8008d0:	11c0110e 	bge	r2,r7,800918 <update_buffer+0x9c>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008d4:	40800043 	ldbu	r2,1(r8)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8008d8:	3abffa04 	addi	r10,r7,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008dc:	424000c4 	addi	r9,r8,3
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008e0:	1304983a 	sll	r2,r2,r12
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008e4:	2ac00015 	stw	r11,0(r5)
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008e8:	1886b03a 	or	r3,r3,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8008ec:	008005c4 	movi	r2,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8008f0:	20c00015 	stw	r3,0(r4)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8008f4:	11c0080e 	bge	r2,r7,800918 <update_buffer+0x9c>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8008f8:	40800083 	ldbu	r2,2(r8)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8008fc:	42c00104 	addi	r11,r8,4
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800900:	2a400015 	stw	r9,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800904:	1284983a 	sll	r2,r2,r10
  800908:	1886b03a 	or	r3,r3,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  80090c:	00800804 	movi	r2,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800910:	20c00015 	stw	r3,0(r4)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800914:	38800226 	beq	r7,r2,800920 <update_buffer+0xa4>
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800918:	33400015 	stw	r13,0(r6)
}
  80091c:	f800283a 	ret
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800920:	408000c3 	ldbu	r2,3(r8)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800924:	2ac00015 	stw	r11,0(r5)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800928:	33400015 	stw	r13,0(r6)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  80092c:	1884b03a 	or	r2,r3,r2
  800930:	20800015 	stw	r2,0(r4)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
}
  800934:	f800283a 	ret

00800938 <input_DC>:
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800938:	2006913a 	slli	r3,r4,4

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  80093c:	2008d73a 	srli	r4,r4,28
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800940:	00800804 	movi	r2,32
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
  800944:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800948:	21403fcc 	andi	r5,r4,255
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  80094c:	1145c83a 	sub	r2,r2,r5
  800950:	188cd83a 	srl	r6,r3,r2
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800954:	02000104 	movi	r8,4
  800958:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  80095c:	28bfffc4 	addi	r2,r5,-1
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800960:	28000626 	beq	r5,zero,80097c <input_DC+0x44>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800964:	3086d83a 	srl	r3,r6,r2
  800968:	00bfffc4 	movi	r2,-1
  80096c:	300f883a 	mov	r7,r6
  800970:	1144983a 	sll	r2,r2,r5
  800974:	18000a26 	beq	r3,zero,8009a0 <input_DC+0x68>
        ib.bits = size + 4;
  800978:	22000104 	addi	r8,r4,4
    }
    return ib;
  80097c:	d8800045 	stb	r2,1(sp)
  800980:	da000005 	stb	r8,0(sp)
  800984:	38bfffcc 	andi	r2,r7,65535
  800988:	d8c0000b 	ldhu	r3,0(sp)
  80098c:	1004943a 	slli	r2,r2,16
  800990:	d9c0008d 	sth	r7,2(sp)
}
  800994:	1884b03a 	or	r2,r3,r2
  800998:	dec00104 	addi	sp,sp,4
  80099c:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009a0:	10800044 	addi	r2,r2,1
  8009a4:	308f883a 	add	r7,r6,r2
  8009a8:	003ff306 	br	800978 <input_DC+0x40>

008009ac <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  8009ac:	2004913a 	slli	r2,r4,4
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009b0:	2006923a 	slli	r3,r4,8
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
  8009b4:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  8009b8:	1010d73a 	srli	r8,r2,28
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009bc:	00800804 	movi	r2,32
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8009c0:	02400204 	movi	r9,8
  8009c4:	41403fcc 	andi	r5,r8,255
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009c8:	1145c83a 	sub	r2,r2,r5
  8009cc:	188cd83a 	srl	r6,r3,r2
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8009d0:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009d4:	28ffffc4 	addi	r3,r5,-1
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8009d8:	28000726 	beq	r5,zero,8009f8 <input_AC+0x4c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8009dc:	00bfffc4 	movi	r2,-1
  8009e0:	1144983a 	sll	r2,r2,r5
  8009e4:	30c6d83a 	srl	r3,r6,r3
  8009e8:	300f883a 	mov	r7,r6
  8009ec:	10800044 	addi	r2,r2,1
  8009f0:	18000b26 	beq	r3,zero,800a20 <input_AC+0x74>
        ib.bits = size + 8;
  8009f4:	42400204 	addi	r9,r8,8
    }
    return ib;
  8009f8:	2004d73a 	srli	r2,r4,28
  8009fc:	38ffffcc 	andi	r3,r7,65535
  800a00:	da400005 	stb	r9,0(sp)
  800a04:	d8800045 	stb	r2,1(sp)
  800a08:	1806943a 	slli	r3,r3,16
  800a0c:	d880000b 	ldhu	r2,0(sp)
  800a10:	d9c0008d 	sth	r7,2(sp)
}
  800a14:	10c4b03a 	or	r2,r2,r3
  800a18:	dec00104 	addi	sp,sp,4
  800a1c:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a20:	308f883a 	add	r7,r6,r2
  800a24:	003ff306 	br	8009f4 <input_AC+0x48>

00800a28 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800a28:	defffa04 	addi	sp,sp,-24
  800a2c:	dd400515 	stw	r21,20(sp)
  800a30:	dd000415 	stw	r20,16(sp)
  800a34:	dcc00315 	stw	r19,12(sp)
  800a38:	dc800215 	stw	r18,8(sp)
  800a3c:	dc400115 	stw	r17,4(sp)
  800a40:	dc000015 	stw	r16,0(sp)
  800a44:	2029883a 	mov	r20,r4
  800a48:	2811883a 	mov	r8,r5
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a4c:	29000003 	ldbu	r4,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a50:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a54:	28800083 	ldbu	r2,2(r5)
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800a58:	dd400617 	ldw	r21,24(sp)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a5c:	294000c3 	ldbu	r5,3(r5)
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800a60:	0500b70e 	bge	zero,r20,800d40 <lossless_decode+0x318>
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a64:	18c03fcc 	andi	r3,r3,255
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a68:	2008963a 	slli	r4,r4,24
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a6c:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a70:	10803fcc 	andi	r2,r2,255
  800a74:	1004923a 	slli	r2,r2,8
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a78:	20c8b03a 	or	r4,r4,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a7c:	29403fcc 	andi	r5,r5,255
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a80:	2088b03a 	or	r4,r4,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a84:	214ab03a 	or	r5,r4,r5
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a88:	43000104 	addi	r12,r8,4
  800a8c:	0027883a 	mov	r19,zero
  800a90:	0025883a 	mov	r18,zero
  800a94:	001d883a 	mov	r14,zero
  800a98:	a81f003a 	cmpeq	r15,r21,zero

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  800a9c:	2812d73a 	srli	r9,r5,28
    if(size == 0){
  800aa0:	4a003fcc 	andi	r8,r9,255
  800aa4:	4000d41e 	bne	r8,zero,800df8 <lossless_decode+0x3d0>
  800aa8:	0009883a 	mov	r4,zero
  800aac:	00800104 	movi	r2,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800ab0:	1391883a 	add	r8,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800ab4:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800ab8:	008001c4 	movi	r2,7
  800abc:	1200160e 	bge	r2,r8,800b18 <lossless_decode+0xf0>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800ac0:	60800003 	ldbu	r2,0(r12)
  800ac4:	40fffe04 	addi	r3,r8,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ac8:	62400044 	addi	r9,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800acc:	10c4983a 	sll	r2,r2,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800ad0:	00c003c4 	movi	r3,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800ad4:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800ad8:	1a000e0e 	bge	r3,r8,800b14 <lossless_decode+0xec>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800adc:	60800043 	ldbu	r2,1(r12)
  800ae0:	40fffc04 	addi	r3,r8,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ae4:	62400084 	addi	r9,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800ae8:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800aec:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800af0:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800af4:	1a00070e 	bge	r3,r8,800b14 <lossless_decode+0xec>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800af8:	60800083 	ldbu	r2,2(r12)
  800afc:	40fffa04 	addi	r3,r8,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b00:	624000c4 	addi	r9,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b04:	10c4983a 	sll	r2,r2,r3
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800b08:	00c00804 	movi	r3,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b0c:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800b10:	40c0d326 	beq	r8,r3,800e60 <lossless_decode+0x438>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b14:	4819883a 	mov	r12,r9
        
        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
  800b18:	7800c91e 	bne	r15,zero,800e40 <lossless_decode+0x418>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
  800b1c:	3880000b 	ldhu	r2,0(r7)
  800b20:	30c0000b 	ldhu	r3,0(r6)
  800b24:	2085383a 	mul	r2,r4,r2
  800b28:	10c5883a 	add	r2,r2,r3
  800b2c:	3080000d 	sth	r2,0(r6)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800b30:	438001cc 	andi	r14,r8,7
  800b34:	02400044 	movi	r9,1
  800b38:	04400804 	movi	r17,32
  800b3c:	040003c4 	movi	r16,15
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800b40:	2804913a 	slli	r2,r5,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800b44:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800b48:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  800b4c:	52003fcc 	andi	r8,r10,255
  800b50:	4000281e 	bne	r8,zero,800bf4 <lossless_decode+0x1cc>
  800b54:	001b883a 	mov	r13,zero
  800b58:	00800204 	movi	r2,8
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800b5c:	1389883a 	add	r4,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800b60:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800b64:	008001c4 	movi	r2,7
  800b68:	1100140e 	bge	r2,r4,800bbc <lossless_decode+0x194>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800b6c:	60800003 	ldbu	r2,0(r12)
  800b70:	20fffe04 	addi	r3,r4,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b74:	62000044 	addi	r8,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800b78:	10c4983a 	sll	r2,r2,r3
  800b7c:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800b80:	81000d0e 	bge	r16,r4,800bb8 <lossless_decode+0x190>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b84:	60800043 	ldbu	r2,1(r12)
  800b88:	20fffc04 	addi	r3,r4,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b8c:	62000084 	addi	r8,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b90:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800b94:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b98:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800b9c:	1900060e 	bge	r3,r4,800bb8 <lossless_decode+0x190>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800ba0:	60800083 	ldbu	r2,2(r12)
  800ba4:	20fffa04 	addi	r3,r4,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ba8:	620000c4 	addi	r8,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800bac:	10c4983a 	sll	r2,r2,r3
  800bb0:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800bb4:	24401c26 	beq	r4,r17,800c28 <lossless_decode+0x200>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800bb8:	4019883a 	mov	r12,r8
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800bbc:	68bfffcc 	andi	r2,r13,65535
  800bc0:	10a0001c 	xori	r2,r2,32768
  800bc4:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800bc8:	238001cc 	andi	r14,r4,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800bcc:	10001e1e 	bne	r2,zero,800c48 <lossless_decode+0x220>
                if(ib.runlength == 15){
  800bd0:	58803fcc 	andi	r2,r11,255
  800bd4:	1400731e 	bne	r2,r16,800da4 <lossless_decode+0x37c>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
  800bd8:	7800611e 	bne	r15,zero,800d60 <lossless_decode+0x338>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800bdc:	2804913a 	slli	r2,r5,4
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
  800be0:	4a400404 	addi	r9,r9,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800be4:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800be8:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  800bec:	52003fcc 	andi	r8,r10,255
  800bf0:	403fd826 	beq	r8,zero,800b54 <lossless_decode+0x12c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800bf4:	2808923a 	slli	r4,r5,8
  800bf8:	8a07c83a 	sub	r3,r17,r8
  800bfc:	40bfffc4 	addi	r2,r8,-1
  800c00:	20c8d83a 	srl	r4,r4,r3
  800c04:	2084d83a 	srl	r2,r4,r2
  800c08:	1000241e 	bne	r2,zero,800c9c <lossless_decode+0x274>
  800c0c:	00bfffc4 	movi	r2,-1
  800c10:	1204983a 	sll	r2,r2,r8
  800c14:	10800044 	addi	r2,r2,1
  800c18:	209b883a 	add	r13,r4,r2
  800c1c:	50800204 	addi	r2,r10,8
  800c20:	10803fcc 	andi	r2,r2,255
  800c24:	003fcd06 	br	800b5c <lossless_decode+0x134>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800c28:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800c2c:	238001cc 	andi	r14,r4,7
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800c30:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800c34:	288ab03a 	or	r5,r5,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800c38:	68bfffcc 	andi	r2,r13,65535
  800c3c:	10a0001c 	xori	r2,r2,32768
  800c40:	10a00004 	addi	r2,r2,-32768
  800c44:	103fe226 	beq	r2,zero,800bd0 <lossless_decode+0x1a8>
                    //if P == 1, then don't change the values
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
  800c48:	7800161e 	bne	r15,zero,800ca4 <lossless_decode+0x27c>
                    index += ib.runlength;
  800c4c:	4ad3883a 	add	r9,r9,r11
                        pe[zigzag_table[index]] = 0;
                }
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800c50:	4a003fcc 	andi	r8,r9,255
  800c54:	4205883a 	add	r2,r8,r8
  800c58:	1085883a 	add	r2,r2,r2
  800c5c:	02c02074 	movhi	r11,129
  800c60:	5acf7c04 	addi	r11,r11,15856
  800c64:	12c5883a 	add	r2,r2,r11
  800c68:	10c00017 	ldw	r3,0(r2)
  800c6c:	18c7883a 	add	r3,r3,r3
  800c70:	19c9883a 	add	r4,r3,r7
  800c74:	2080000b 	ldhu	r2,0(r4)
  800c78:	30c7883a 	add	r3,r6,r3
  800c7c:	1900000b 	ldhu	r4,0(r3)
  800c80:	6885383a 	mul	r2,r13,r2
  800c84:	1105883a 	add	r2,r2,r4
  800c88:	1880000d 	sth	r2,0(r3)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800c8c:	00800f84 	movi	r2,62
  800c90:	12002836 	bltu	r2,r8,800d34 <lossless_decode+0x30c>
                index++;
  800c94:	4a400044 	addi	r9,r9,1
  800c98:	003fa906 	br	800b40 <lossless_decode+0x118>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800c9c:	201b883a 	mov	r13,r4
  800ca0:	003fde06 	br	800c1c <lossless_decode+0x1f4>
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
  800ca4:	4ac7883a 	add	r3,r9,r11
                    for(; index < terminal; index++)
  800ca8:	4a003fcc 	andi	r8,r9,255
  800cac:	18803fcc 	andi	r2,r3,255
  800cb0:	40805f2e 	bgeu	r8,r2,800e30 <lossless_decode+0x408>
  800cb4:	4005883a 	mov	r2,r8
  800cb8:	1815883a 	mov	r10,r3
  800cbc:	4809883a 	mov	r4,r9
  800cc0:	02c02074 	movhi	r11,129
  800cc4:	5acf7c04 	addi	r11,r11,15856
  800cc8:	1a003fcc 	andi	r8,r3,255
                        pe[zigzag_table[index]] = 0;
  800ccc:	1085883a 	add	r2,r2,r2
  800cd0:	1085883a 	add	r2,r2,r2
  800cd4:	12c5883a 	add	r2,r2,r11
  800cd8:	10c00017 	ldw	r3,0(r2)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800cdc:	21000044 	addi	r4,r4,1
  800ce0:	20803fcc 	andi	r2,r4,255
                        pe[zigzag_table[index]] = 0;
  800ce4:	18c7883a 	add	r3,r3,r3
  800ce8:	1987883a 	add	r3,r3,r6
  800cec:	1800000d 	sth	zero,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800cf0:	123ff61e 	bne	r2,r8,800ccc <lossless_decode+0x2a4>
  800cf4:	5005883a 	mov	r2,r10
  800cf8:	5013883a 	mov	r9,r10
  800cfc:	52003fcc 	andi	r8,r10,255
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1085883a 	add	r2,r2,r2
  800d08:	1085883a 	add	r2,r2,r2
  800d0c:	12c5883a 	add	r2,r2,r11
  800d10:	10c00017 	ldw	r3,0(r2)
  800d14:	18c7883a 	add	r3,r3,r3
  800d18:	19c9883a 	add	r4,r3,r7
  800d1c:	2080000b 	ldhu	r2,0(r4)
  800d20:	30c7883a 	add	r3,r6,r3
  800d24:	6885383a 	mul	r2,r13,r2
  800d28:	1880000d 	sth	r2,0(r3)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800d2c:	00800f84 	movi	r2,62
  800d30:	123fd82e 	bgeu	r2,r8,800c94 <lossless_decode+0x26c>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800d34:	94800044 	addi	r18,r18,1
  800d38:	31802004 	addi	r6,r6,128
  800d3c:	a4bf571e 	bne	r20,r18,800a9c <lossless_decode+0x74>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800d40:	dd400517 	ldw	r21,20(sp)
  800d44:	dd000417 	ldw	r20,16(sp)
  800d48:	dcc00317 	ldw	r19,12(sp)
  800d4c:	dc800217 	ldw	r18,8(sp)
  800d50:	dc400117 	ldw	r17,4(sp)
  800d54:	dc000017 	ldw	r16,0(sp)
  800d58:	dec00604 	addi	sp,sp,24
  800d5c:	f800283a 	ret
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
  800d60:	48800404 	addi	r2,r9,16
                        for(; index < terminal; index++)
  800d64:	11003fcc 	andi	r4,r2,255
  800d68:	4a003fcc 	andi	r8,r9,255
  800d6c:	413f742e 	bgeu	r8,r4,800b40 <lossless_decode+0x118>
  800d70:	02c02074 	movhi	r11,129
  800d74:	5acf7c04 	addi	r11,r11,15856
                            pe[zigzag_table[index]] = 0;
  800d78:	4205883a 	add	r2,r8,r8
  800d7c:	1085883a 	add	r2,r2,r2
  800d80:	12c5883a 	add	r2,r2,r11
  800d84:	10c00017 	ldw	r3,0(r2)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800d88:	4a400044 	addi	r9,r9,1
  800d8c:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  800d90:	18c7883a 	add	r3,r3,r3
  800d94:	1987883a 	add	r3,r3,r6
  800d98:	1800000d 	sth	zero,0(r3)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800d9c:	413ff636 	bltu	r8,r4,800d78 <lossless_decode+0x350>
  800da0:	003f6706 	br	800b40 <lossless_decode+0x118>
                            pe[zigzag_table[index]] = 0;
                    }
                }
                else {
                    //END
                    if(P == 0){
  800da4:	a83fe31e 	bne	r21,zero,800d34 <lossless_decode+0x30c>
                        //output all zeros
                        for(; index < 64; index++)
  800da8:	4a003fcc 	andi	r8,r9,255
  800dac:	00800fc4 	movi	r2,63
  800db0:	123fe036 	bltu	r2,r8,800d34 <lossless_decode+0x30c>
  800db4:	02c02074 	movhi	r11,129
  800db8:	5acf7c04 	addi	r11,r11,15856
  800dbc:	01001004 	movi	r4,64
                            pe[zigzag_table[index]] = 0;
  800dc0:	4205883a 	add	r2,r8,r8
  800dc4:	1085883a 	add	r2,r2,r2
  800dc8:	12c5883a 	add	r2,r2,r11
  800dcc:	10c00017 	ldw	r3,0(r2)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800dd0:	4a400044 	addi	r9,r9,1
  800dd4:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  800dd8:	18c7883a 	add	r3,r3,r3
  800ddc:	1987883a 	add	r3,r3,r6
  800de0:	1800000d 	sth	zero,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800de4:	413ff61e 	bne	r8,r4,800dc0 <lossless_decode+0x398>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800de8:	94800044 	addi	r18,r18,1
  800dec:	31802004 	addi	r6,r6,128
  800df0:	a4bf2a1e 	bne	r20,r18,800a9c <lossless_decode+0x74>
  800df4:	003fd206 	br	800d40 <lossless_decode+0x318>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800df8:	2804913a 	slli	r2,r5,4
  800dfc:	00c00804 	movi	r3,32
  800e00:	1a07c83a 	sub	r3,r3,r8
  800e04:	10c6d83a 	srl	r3,r2,r3
  800e08:	413fffc4 	addi	r4,r8,-1
  800e0c:	1908d83a 	srl	r4,r3,r4
  800e10:	2000111e 	bne	r4,zero,800e58 <lossless_decode+0x430>
  800e14:	00bfffc4 	movi	r2,-1
  800e18:	1204983a 	sll	r2,r2,r8
  800e1c:	10800044 	addi	r2,r2,1
  800e20:	1889883a 	add	r4,r3,r2
  800e24:	48800104 	addi	r2,r9,4
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	003f2006 	br	800ab0 <lossless_decode+0x88>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800e30:	4805883a 	mov	r2,r9
  800e34:	02c02074 	movhi	r11,129
  800e38:	5acf7c04 	addi	r11,r11,15856
  800e3c:	003fb006 	br	800d00 <lossless_decode+0x2d8>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800e40:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  800e44:	9905883a 	add	r2,r19,r4
  800e48:	1027883a 	mov	r19,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800e4c:	10c5383a 	mul	r2,r2,r3
  800e50:	3080000d 	sth	r2,0(r6)
  800e54:	003f3606 	br	800b30 <lossless_decode+0x108>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800e58:	1809883a 	mov	r4,r3
  800e5c:	003ff106 	br	800e24 <lossless_decode+0x3fc>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800e60:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800e64:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800e68:	288ab03a 	or	r5,r5,r2
  800e6c:	003f2a06 	br	800b18 <lossless_decode+0xf0>

00800e70 <mjpeg423_decode>:
uint32_t* Ybitstream;
} frame;


void mjpeg423_decode(const char* filename_in)
{
  800e70:	deffe104 	addi	sp,sp,-124
  800e74:	dc001515 	stw	r16,84(sp)
  800e78:	2021883a 	mov	r16,r4
    FILE* file_in;
    //if((file_in = alt_up_sd_card_fopen("v3fps.mpg", 0)) == NULL) error_and_exit("cannot open input file");
    //char* filename_out = malloc(strlen(filenamebase_out)+1);
    //strcpy(filename_out, filenamebase_out);
    
    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  800e7c:	01002074 	movhi	r4,129
  800e80:	210dd804 	addi	r4,r4,14176
uint32_t* Ybitstream;
} frame;


void mjpeg423_decode(const char* filename_in)
{
  800e84:	ddc01c15 	stw	r23,112(sp)
  800e88:	dfc01e15 	stw	ra,120(sp)
  800e8c:	df001d15 	stw	fp,116(sp)
  800e90:	dd801b15 	stw	r22,108(sp)
  800e94:	dd401a15 	stw	r21,104(sp)
  800e98:	dd001915 	stw	r20,100(sp)
  800e9c:	dcc01815 	stw	r19,96(sp)
  800ea0:	dc801715 	stw	r18,92(sp)
  800ea4:	dc401615 	stw	r17,88(sp)
    FILE* file_in;
    //if((file_in = alt_up_sd_card_fopen("v3fps.mpg", 0)) == NULL) error_and_exit("cannot open input file");
    //char* filename_out = malloc(strlen(filenamebase_out)+1);
    //strcpy(filename_out, filenamebase_out);
    
    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  800ea8:	080da600 	call	80da60 <alt_up_pixel_buffer_dma_open_dev>
  800eac:	102f883a 	mov	r23,r2
    if ( pixel_buf_dev == NULL){
  800eb0:	10019826 	beq	r2,zero,801514 <mjpeg423_decode+0x6a4>
    	error_and_exit ("Error: could not open pixel buffer device \n");
    }

    short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
  800eb4:	8009883a 	mov	r4,r16
  800eb8:	000b883a 	mov	r5,zero
  800ebc:	0812a180 	call	812a18 <alt_up_sd_card_fopen>
	if(file_handle == -1){
  800ec0:	10bfffcc 	andi	r2,r2,65535
  800ec4:	10a0001c 	xori	r2,r2,32768
  800ec8:	10a00004 	addi	r2,r2,-32768
  800ecc:	d8801215 	stw	r2,72(sp)
  800ed0:	d8c01217 	ldw	r3,72(sp)
  800ed4:	00bfffc4 	movi	r2,-1
  800ed8:	18816a26 	beq	r3,r2,801484 <mjpeg423_decode+0x614>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if(!sd_card_create_sectors_list(file_handle)){
  800edc:	d9001217 	ldw	r4,72(sp)
  800ee0:	0801d4c0 	call	801d4c <sd_card_create_sectors_list>
  800ee4:	10016326 	beq	r2,zero,801474 <mjpeg423_decode+0x604>
		error_and_exit("Cannot create sectors list\n");
	}

	//create filebuffer to hold entire file
	printf("File size %d\n",sd_card_file_size(file_handle));
  800ee8:	d9001217 	ldw	r4,72(sp)
  800eec:	0801c8c0 	call	801c8c <sd_card_file_size>
  800ef0:	100b883a 	mov	r5,r2
  800ef4:	01002074 	movhi	r4,129
  800ef8:	210df704 	addi	r4,r4,14300
  800efc:	0803dec0 	call	803dec <printf>

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
  800f00:	d9001217 	ldw	r4,72(sp)
  800f04:	0801c8c0 	call	801c8c <sd_card_file_size>
  800f08:	1009883a 	mov	r4,r2
  800f0c:	0802cc40 	call	802cc4 <__floatunsidf>
  800f10:	0011883a 	mov	r8,zero
  800f14:	024fd834 	movhi	r9,16224
  800f18:	480f883a 	mov	r7,r9
  800f1c:	400d883a 	mov	r6,r8
  800f20:	180b883a 	mov	r5,r3
  800f24:	1009883a 	mov	r4,r2
  800f28:	08027a00 	call	8027a0 <__muldf3>
  800f2c:	180b883a 	mov	r5,r3
  800f30:	1009883a 	mov	r4,r2
  800f34:	08020880 	call	802088 <ceil>
  800f38:	180b883a 	mov	r5,r3
  800f3c:	1009883a 	mov	r4,r2
  800f40:	0802bec0 	call	802bec <__fixdfsi>
  800f44:	1008927a 	slli	r4,r2,9
  800f48:	08035f80 	call	8035f8 <malloc>
  800f4c:	1039883a 	mov	fp,r2
	if((filebuffer = malloc(sectors_num*512)) == NULL){
  800f50:	10015026 	beq	r2,zero,801494 <mjpeg423_decode+0x624>
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	int sd_bytes_read = 0;
	sd_seek(0);
  800f54:	0009883a 	mov	r4,zero
  800f58:	0801c740 	call	801c74 <sd_seek>
  800f5c:	e021883a 	mov	r16,fp
	while((sd_bytes_read = sd_read(pos, 100000)) > 0) {
  800f60:	8009883a 	mov	r4,r16
  800f64:	014000b4 	movhi	r5,2
  800f68:	2961a804 	addi	r5,r5,-31072
  800f6c:	0801f0c0 	call	801f0c <sd_read>
		pos += sd_bytes_read;
  800f70:	80a1883a 	add	r16,r16,r2

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	int sd_bytes_read = 0;
	sd_seek(0);
	while((sd_bytes_read = sd_read(pos, 100000)) > 0) {
  800f74:	00bffa16 	blt	zero,r2,800f60 <mjpeg423_decode+0xf0>
//	  printf("Failed to close the file\n");
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800f78:	e0800104 	addi	r2,fp,4
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800f7c:	e0c00204 	addi	r3,fp,8
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800f80:	e1000304 	addi	r4,fp,12
//	  printf("Failed to close the file\n");
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800f84:	130000c3 	ldbu	r12,3(r2)
  800f88:	12400043 	ldbu	r9,1(r2)
  800f8c:	12800083 	ldbu	r10,2(r2)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800f90:	1b400043 	ldbu	r13,1(r3)
  800f94:	1b800083 	ldbu	r14,2(r3)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800f98:	23c00043 	ldbu	r15,1(r4)
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800f9c:	1c4000c3 	ldbu	r17,3(r3)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800fa0:	24000083 	ldbu	r16,2(r4)
  800fa4:	248000c3 	ldbu	r18,3(r4)
  800fa8:	e2000303 	ldbu	r8,12(fp)
//	if(!alt_up_sd_card_fclose(file_handle)){
//	  printf("Failed to close the file\n");
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800fac:	e0800003 	ldbu	r2,0(fp)
  800fb0:	e0c00043 	ldbu	r3,1(fp)
  800fb4:	e1000083 	ldbu	r4,2(fp)
  800fb8:	e14000c3 	ldbu	r5,3(fp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800fbc:	e1800103 	ldbu	r6,4(fp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800fc0:	e1c00203 	ldbu	r7,8(fp)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800fc4:	e2c00403 	ldbu	r11,16(fp)
//	  printf("Failed to close the file\n");
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800fc8:	da400445 	stb	r9,17(sp)
  800fcc:	da800485 	stb	r10,18(sp)
  800fd0:	db0004c5 	stb	r12,19(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800fd4:	db400545 	stb	r13,21(sp)
  800fd8:	db800585 	stb	r14,22(sp)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800fdc:	da000605 	stb	r8,24(sp)
  800fe0:	dbc00645 	stb	r15,25(sp)
//	if(!alt_up_sd_card_fclose(file_handle)){
//	  printf("Failed to close the file\n");
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800fe4:	d8800305 	stb	r2,12(sp)
  800fe8:	d8c00345 	stb	r3,13(sp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800fec:	e0800404 	addi	r2,fp,16
//	if(!alt_up_sd_card_fclose(file_handle)){
//	  printf("Failed to close the file\n");
//	}

    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800ff0:	d9000385 	stb	r4,14(sp)
  800ff4:	d94003c5 	stb	r5,15(sp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800ff8:	d9800405 	stb	r6,16(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800ffc:	d9c00505 	stb	r7,20(sp)
  801000:	dc4005c5 	stb	r17,23(sp)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  801004:	dc000685 	stb	r16,26(sp)
  801008:	dc8006c5 	stb	r18,27(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  80100c:	dac00705 	stb	r11,28(sp)
  801010:	11c000c3 	ldbu	r7,3(r2)
  801014:	11800083 	ldbu	r6,2(r2)
  801018:	10c00043 	ldbu	r3,1(r2)
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
  80101c:	d9400617 	ldw	r5,24(sp)
  801020:	01002074 	movhi	r4,129
  801024:	210e0204 	addi	r4,r4,14344
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  801028:	d9800785 	stb	r6,30(sp)
  80102c:	d9c007c5 	stb	r7,31(sp)
  801030:	d8c00745 	stb	r3,29(sp)
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
  801034:	0803dec0 	call	803dec <printf>
    DEBUG_PRINT_ARG("payload_size %u\n", payload_size)
  801038:	d9400717 	ldw	r5,28(sp)
  80103c:	01002074 	movhi	r4,129
  801040:	210e0604 	addi	r4,r4,14360
  801044:	0803dec0 	call	803dec <printf>

    int hCb_size = h_size/8;           //number of chrominance blocks
  801048:	d8c00517 	ldw	r3,20(sp)
    int wCb_size = w_size/8;
  80104c:	d8800417 	ldw	r2,16(sp)
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  801050:	d9000317 	ldw	r4,12(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
    
    DEBUG_PRINT_ARG("num_frames %u\n", num_iframes)
    DEBUG_PRINT_ARG("payload_size %u\n", payload_size)

    int hCb_size = h_size/8;           //number of chrominance blocks
  801054:	1806d0fa 	srli	r3,r3,3
    int wCb_size = w_size/8;
  801058:	102cd0fa 	srli	r22,r2,3
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  80105c:	200890fa 	slli	r4,r4,3
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  801060:	1dab383a 	mul	r21,r3,r22
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_frames);
  801064:	08035f80 	call	8035f8 <malloc>
  801068:	1021883a 	mov	r16,r2
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  80106c:	a82291ba 	slli	r17,r21,6
  801070:	8809883a 	mov	r4,r17
  801074:	08035f80 	call	8035f8 <malloc>
  801078:	d8800d15 	stw	r2,52(sp)
  80107c:	10010926 	beq	r2,zero,8014a4 <mjpeg423_decode+0x634>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
  801080:	8809883a 	mov	r4,r17
  801084:	08035f80 	call	8035f8 <malloc>
  801088:	d8800e15 	stw	r2,56(sp)
  80108c:	10010926 	beq	r2,zero,8014b4 <mjpeg423_decode+0x644>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
  801090:	8809883a 	mov	r4,r17
  801094:	08035f80 	call	8035f8 <malloc>
  801098:	d8801015 	stw	r2,64(sp)
  80109c:	10010926 	beq	r2,zero,8014c4 <mjpeg423_decode+0x654>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
  8010a0:	a82291fa 	slli	r17,r21,7
  8010a4:	8809883a 	mov	r4,r17
  8010a8:	08035f80 	call	8035f8 <malloc>
  8010ac:	d8800c15 	stw	r2,48(sp)
  8010b0:	10010826 	beq	r2,zero,8014d4 <mjpeg423_decode+0x664>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
  8010b4:	8809883a 	mov	r4,r17
  8010b8:	08035f80 	call	8035f8 <malloc>
  8010bc:	d8800f15 	stw	r2,60(sp)
  8010c0:	10010826 	beq	r2,zero,8014e4 <mjpeg423_decode+0x674>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
  8010c4:	8809883a 	mov	r4,r17
  8010c8:	08035f80 	call	8035f8 <malloc>
  8010cc:	d8801115 	stw	r2,68(sp)
  8010d0:	10010826 	beq	r2,zero,8014f4 <mjpeg423_decode+0x684>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
  8010d4:	ad49883a 	add	r4,r21,r21
  8010d8:	2549883a 	add	r4,r4,r21
  8010dc:	200891fa 	slli	r4,r4,7
  8010e0:	08035f80 	call	8035f8 <malloc>
  8010e4:	d8801315 	stw	r2,76(sp)
  8010e8:	10010626 	beq	r2,zero,801504 <mjpeg423_decode+0x694>
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
  8010ec:	d8800617 	ldw	r2,24(sp)
  8010f0:	10002a26 	beq	r2,zero,80119c <mjpeg423_decode+0x32c>
  8010f4:	0025883a 	mov	r18,zero
  8010f8:	0007883a 	mov	r3,zero
  8010fc:	0023883a 	mov	r17,zero
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
  801100:	18c5883a 	add	r2,r3,r3
  801104:	d8c00717 	ldw	r3,28(sp)
  801108:	1085883a 	add	r2,r2,r2
  80110c:	e0c7883a 	add	r3,fp,r3
  801110:	1885883a 	add	r2,r3,r2
  801114:	11000504 	addi	r4,r2,20
  801118:	21c000c3 	ldbu	r7,3(r4)
  80111c:	21400083 	ldbu	r5,2(r4)
  801120:	11800503 	ldbu	r6,20(r2)
  801124:	20800043 	ldbu	r2,1(r4)
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  801128:	1c47883a 	add	r3,r3,r17
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
  80112c:	81800005 	stb	r6,0(r16)
  801130:	80800045 	stb	r2,1(r16)
  801134:	81400085 	stb	r5,2(r16)
  801138:	81c000c5 	stb	r7,3(r16)
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  80113c:	19000603 	ldbu	r4,24(r3)
  801140:	18c00604 	addi	r3,r3,24
  801144:	1a0000c3 	ldbu	r8,3(r3)
  801148:	19800043 	ldbu	r6,1(r3)
  80114c:	19c00083 	ldbu	r7,2(r3)

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  801150:	81400017 	ldw	r5,0(r16)
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  801154:	81000105 	stb	r4,4(r16)
  801158:	80800104 	addi	r2,r16,4

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  80115c:	01002074 	movhi	r4,129
  801160:	210e3604 	addi	r4,r4,14552
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
        memcpy(&(trailer[count].frame_index), filebuffer+HEADER_OFFSET+payload_size+(count*sizeof(uint32_t)), sizeof(uint32_t));
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));
  801164:	120000c5 	stb	r8,3(r2)
  801168:	11800045 	stb	r6,1(r2)
  80116c:	11c00085 	stb	r7,2(r2)

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  801170:	0803dec0 	call	803dec <printf>
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  801174:	81400117 	ldw	r5,4(r16)
  801178:	01002074 	movhi	r4,129
  80117c:	210e3b04 	addi	r4,r4,14572
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
  801180:	84000404 	addi	r16,r16,16
        memcpy(&(trailer[count].frame_position), filebuffer+HEADER_OFFSET+payload_size+((count+1)*sizeof(uint32_t)), sizeof(uint32_t));

        //if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        //if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  801184:	0803dec0 	call	803dec <printf>
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    for(int count = 0; count < num_iframes; count+=2){
  801188:	d8800617 	ldw	r2,24(sp)
  80118c:	90c00084 	addi	r3,r18,2
  801190:	8c400204 	addi	r17,r17,8
  801194:	1825883a 	mov	r18,r3
  801198:	18bfd936 	bltu	r3,r2,801100 <mjpeg423_decode+0x290>
    //set it back to beginning of payload
    //if(fseek(file_in,5 * sizeof(uint32_t),SEEK_SET) != 0) error_and_exit("cannot seek into file");
    
    
    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  80119c:	d8800717 	ldw	r2,28(sp)
  8011a0:	05000504 	movi	r20,20
  8011a4:	a080942e 	bgeu	r20,r2,8013f8 <mjpeg423_decode+0x588>
  8011a8:	a9800050 	cmplti	r6,r21,1
  8011ac:	a021883a 	mov	r16,r20
  8011b0:	d9801415 	stw	r6,80(sp)
        //DEBUG_PRINT_ARG("\nFrame #%u\n",)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8011b4:	e405883a 	add	r2,fp,r16
  8011b8:	118000c3 	ldbu	r6,3(r2)
  8011bc:	10c00003 	ldbu	r3,0(r2)
  8011c0:	11000043 	ldbu	r4,1(r2)
  8011c4:	11400083 	ldbu	r5,2(r2)
  8011c8:	d8c00a05 	stb	r3,40(sp)
  8011cc:	d9000a45 	stb	r4,41(sp)
  8011d0:	d9800ac5 	stb	r6,43(sp)
  8011d4:	d9400a85 	stb	r5,42(sp)
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
  8011d8:	d9400a17 	ldw	r5,40(sp)
  8011dc:	01002074 	movhi	r4,129
  8011e0:	210e3f04 	addi	r4,r4,14588
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
        //DEBUG_PRINT_ARG("\nFrame #%u\n",)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
  8011e4:	a4000104 	addi	r16,r20,4
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
  8011e8:	0803dec0 	call	803dec <printf>
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
  8011ec:	a0c00204 	addi	r3,r20,8
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
  8011f0:	a0800304 	addi	r2,r20,12
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8011f4:	e0c7883a 	add	r3,fp,r3
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8011f8:	e085883a 	add	r2,fp,r2
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  8011fc:	e421883a 	add	r16,fp,r16
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  801200:	d9800a17 	ldw	r6,40(sp)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801204:	83c000c3 	ldbu	r15,3(r16)
  801208:	82000043 	ldbu	r8,1(r16)
  80120c:	82400083 	ldbu	r9,2(r16)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801210:	1a800003 	ldbu	r10,0(r3)
  801214:	1ac00043 	ldbu	r11,1(r3)
  801218:	1b000083 	ldbu	r12,2(r3)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  80121c:	13400003 	ldbu	r13,0(r2)
  801220:	13800083 	ldbu	r14,2(r2)
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801224:	1c4000c3 	ldbu	r17,3(r3)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801228:	81c00003 	ldbu	r7,0(r16)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  80122c:	10c00043 	ldbu	r3,1(r2)
  801230:	148000c3 	ldbu	r18,3(r2)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  801234:	d9001317 	ldw	r4,76(sp)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
  801238:	a5000404 	addi	r20,r20,16
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  80123c:	e50b883a 	add	r5,fp,r20
  801240:	31bffc04 	addi	r6,r6,-16
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801244:	da000b45 	stb	r8,45(sp)
  801248:	da400b85 	stb	r9,46(sp)
  80124c:	dbc00bc5 	stb	r15,47(sp)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801250:	da800805 	stb	r10,32(sp)
  801254:	dac00845 	stb	r11,33(sp)
  801258:	db000885 	stb	r12,34(sp)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  80125c:	db400905 	stb	r13,36(sp)
  801260:	db800985 	stb	r14,38(sp)
        
        //read frame payload
		memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size %u\n",frame_size)
		memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801264:	d9c00b05 	stb	r7,44(sp)
        frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  801268:	dc4008c5 	stb	r17,35(sp)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
  80126c:	d8c00945 	stb	r3,37(sp)
  801270:	dc8009c5 	stb	r18,39(sp)
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
  801274:	0803d4c0 	call	803d4c <memcpy>
        if(fread(&Cbsize, sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
  801278:	d8801317 	ldw	r2,76(sp)
  80127c:	dc400817 	ldw	r17,32(sp)
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  801280:	d8c00a17 	ldw	r3,40(sp)
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  801284:	100b883a 	mov	r5,r2
        if(fread(&Cbsize, sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
  801288:	1463883a 	add	r17,r2,r17
        Crbitstream = Cbbitstream + Cbsize;
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  80128c:	d9800c17 	ldw	r6,48(sp)
  801290:	d8800b17 	ldw	r2,44(sp)
  801294:	a809883a 	mov	r4,r21
  801298:	01c02074 	movhi	r7,129
  80129c:	39cf3c04 	addi	r7,r7,15600
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8012a0:	a0e9883a 	add	r20,r20,r3
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  8012a4:	d8800015 	stw	r2,0(sp)
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
  8012a8:	dcc00917 	ldw	r19,36(sp)
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  8012ac:	0800a280 	call	800a28 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
  8012b0:	d8800b17 	ldw	r2,44(sp)
  8012b4:	d9800f17 	ldw	r6,60(sp)
  8012b8:	880b883a 	mov	r5,r17
  8012bc:	a809883a 	mov	r4,r21
  8012c0:	01c02074 	movhi	r7,129
  8012c4:	39cf5c04 	addi	r7,r7,15728
  8012c8:	d8800015 	stw	r2,0(sp)
  8012cc:	0800a280 	call	800a28 <lossless_decode>
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
  8012d0:	d8800b17 	ldw	r2,44(sp)
  8012d4:	d9801117 	ldw	r6,68(sp)
        if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t))) 
            error_and_exit("cannot read input file");
            */
        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
  8012d8:	8ce7883a 	add	r19,r17,r19
        
        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
  8012dc:	980b883a 	mov	r5,r19
  8012e0:	a809883a 	mov	r4,r21
  8012e4:	01c02074 	movhi	r7,129
  8012e8:	39cf5c04 	addi	r7,r7,15728
  8012ec:	d8800015 	stw	r2,0(sp)
  8012f0:	0800a280 	call	800a28 <lossless_decode>
        
        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
  8012f4:	d8c01417 	ldw	r3,80(sp)
		memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		memcpy(Ybitstream, filebuffer+frame_byte_counter, frame_size - 4 * sizeof(uint32_t));
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8012f8:	a43ffc04 	addi	r16,r20,-16
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
        
        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
  8012fc:	18001e1e 	bne	r3,zero,801378 <mjpeg423_decode+0x508>
  801300:	dc800c17 	ldw	r18,48(sp)
  801304:	dc400d17 	ldw	r17,52(sp)
  801308:	0027883a 	mov	r19,zero
  80130c:	9009883a 	mov	r4,r18
  801310:	880b883a 	mov	r5,r17
  801314:	9cc00044 	addi	r19,r19,1
  801318:	08004780 	call	800478 <idct>
  80131c:	94802004 	addi	r18,r18,128
  801320:	8c401004 	addi	r17,r17,64
  801324:	acfff91e 	bne	r21,r19,80130c <mjpeg423_decode+0x49c>
  801328:	dc800f17 	ldw	r18,60(sp)
  80132c:	dc400e17 	ldw	r17,56(sp)
  801330:	0027883a 	mov	r19,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
  801334:	9009883a 	mov	r4,r18
  801338:	880b883a 	mov	r5,r17
  80133c:	9cc00044 	addi	r19,r19,1
  801340:	08004780 	call	800478 <idct>
  801344:	94802004 	addi	r18,r18,128
  801348:	8c401004 	addi	r17,r17,64
  80134c:	acfff91e 	bne	r21,r19,801334 <mjpeg423_decode+0x4c4>
  801350:	dc801117 	ldw	r18,68(sp)
  801354:	dc401017 	ldw	r17,64(sp)
  801358:	0027883a 	mov	r19,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
  80135c:	9009883a 	mov	r4,r18
  801360:	880b883a 	mov	r5,r17
  801364:	9cc00044 	addi	r19,r19,1
  801368:	08004780 	call	800478 <idct>
  80136c:	94802004 	addi	r18,r18,128
  801370:	8c401004 	addi	r17,r17,64
  801374:	9d7ff916 	blt	r19,r21,80135c <mjpeg423_decode+0x4ec>
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
  801378:	b809883a 	mov	r4,r23
  80137c:	080da280 	call	80da28 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  801380:	103ffd1e 	bne	r2,zero,801378 <mjpeg423_decode+0x508>
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  801384:	d9801417 	ldw	r6,80(sp)
  801388:	3000161e 	bne	r6,zero,8013e4 <mjpeg423_decode+0x574>
  80138c:	0025883a 	mov	r18,zero
  801390:	0023883a 	mov	r17,zero
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  801394:	9589283a 	div	r4,r18,r22
  801398:	d8c00e17 	ldw	r3,56(sp)
  80139c:	d9801017 	ldw	r6,64(sp)
  8013a0:	258b383a 	mul	r5,r4,r22
  8013a4:	1c45883a 	add	r2,r3,r17
  8013a8:	3447883a 	add	r3,r6,r17
  8013ac:	d8c00115 	stw	r3,4(sp)
  8013b0:	d8800015 	stw	r2,0(sp)
  8013b4:	914bc83a 	sub	r5,r18,r5
  8013b8:	d8c00d17 	ldw	r3,52(sp)
  8013bc:	b8800c17 	ldw	r2,48(r23)
  8013c0:	d9800417 	ldw	r6,16(sp)
  8013c4:	200890fa 	slli	r4,r4,3
  8013c8:	280a90fa 	slli	r5,r5,3
  8013cc:	88cf883a 	add	r7,r17,r3
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  8013d0:	94800044 	addi	r18,r18,1
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  8013d4:	d8800215 	stw	r2,8(sp)
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  8013d8:	8c401004 	addi	r17,r17,64
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  8013dc:	08015240 	call	801524 <ycbcr_to_rgb>
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  8013e0:	acbfec1e 	bne	r21,r18,801394 <mjpeg423_decode+0x524>
//        		 alt_up_pixel_buffer_dma_draw(pixel_buf_dev, rgbblock[x+y], x, y);
//        	}
//        }
        //alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dev);
        //alt_up_pixel_buffer_draw_box(pixel_buf_dev, 0, 0, 319, 239, 0x001F, 0);
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  8013e4:	b809883a 	mov	r4,r23
  8013e8:	080d9440 	call	80d944 <alt_up_pixel_buffer_dma_swap_buffers>
    //set it back to beginning of payload
    //if(fseek(file_in,5 * sizeof(uint32_t),SEEK_SET) != 0) error_and_exit("cannot seek into file");
    
    
    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  8013ec:	d8800717 	ldw	r2,28(sp)
  8013f0:	8029883a 	mov	r20,r16
  8013f4:	80bf6f36 	bltu	r16,r2,8011b4 <mjpeg423_decode+0x344>
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);


    } //end frame iteration
    
    DEBUG_PRINT("\nDecoder done.\n\n\n")
  8013f8:	01002074 	movhi	r4,129
  8013fc:	210e4304 	addi	r4,r4,14604
  801400:	0803f280 	call	803f28 <puts>
    
    //close down
    //fclose(file_in);
    alt_up_sd_card_fclose(file_handle);
  801404:	d9001217 	ldw	r4,72(sp)
  801408:	080ef1c0 	call	80ef1c <alt_up_sd_card_fclose>
    //free(rgbblock);
    free(Yblock);
  80140c:	d9000d17 	ldw	r4,52(sp)
  801410:	08035e40 	call	8035e4 <free>
    free(Cbblock);
  801414:	d9000e17 	ldw	r4,56(sp)
  801418:	08035e40 	call	8035e4 <free>
    free(Crblock);
  80141c:	d9001017 	ldw	r4,64(sp)
  801420:	08035e40 	call	8035e4 <free>
    free(YDCAC);
  801424:	d9000c17 	ldw	r4,48(sp)
  801428:	08035e40 	call	8035e4 <free>
    free(CbDCAC);
  80142c:	d9000f17 	ldw	r4,60(sp)
  801430:	08035e40 	call	8035e4 <free>
    free(CrDCAC);
  801434:	d9001117 	ldw	r4,68(sp)
  801438:	08035e40 	call	8035e4 <free>
    free(Ybitstream);
  80143c:	d9001317 	ldw	r4,76(sp)
  801440:	08035e40 	call	8035e4 <free>

}
  801444:	dfc01e17 	ldw	ra,120(sp)
  801448:	df001d17 	ldw	fp,116(sp)
  80144c:	ddc01c17 	ldw	r23,112(sp)
  801450:	dd801b17 	ldw	r22,108(sp)
  801454:	dd401a17 	ldw	r21,104(sp)
  801458:	dd001917 	ldw	r20,100(sp)
  80145c:	dcc01817 	ldw	r19,96(sp)
  801460:	dc801717 	ldw	r18,92(sp)
  801464:	dc401617 	ldw	r17,88(sp)
  801468:	dc001517 	ldw	r16,84(sp)
  80146c:	dec01f04 	addi	sp,sp,124
  801470:	f800283a 	ret
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if(!sd_card_create_sectors_list(file_handle)){
		error_and_exit("Cannot create sectors list\n");
  801474:	01002074 	movhi	r4,129
  801478:	210df004 	addi	r4,r4,14272
  80147c:	08004580 	call	800458 <error_and_exit>
  801480:	003e9906 	br	800ee8 <mjpeg423_decode+0x78>
    	error_and_exit ("Error: could not open pixel buffer device \n");
    }

    short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
	if(file_handle == -1){
		error_and_exit("Cannot find file\n");
  801484:	01002074 	movhi	r4,129
  801488:	210deb04 	addi	r4,r4,14252
  80148c:	08004580 	call	800458 <error_and_exit>
  801490:	003e9206 	br	800edc <mjpeg423_decode+0x6c>
	//create filebuffer to hold entire file
	printf("File size %d\n",sd_card_file_size(file_handle));

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
	if((filebuffer = malloc(sectors_num*512)) == NULL){
		error_and_exit("Cannot allocate filebuffer\n");
  801494:	01002074 	movhi	r4,129
  801498:	210dfb04 	addi	r4,r4,14316
  80149c:	08004580 	call	800458 <error_and_exit>
  8014a0:	003eac06 	br	800f54 <mjpeg423_decode+0xe4>
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  8014a4:	01002074 	movhi	r4,129
  8014a8:	210e0b04 	addi	r4,r4,14380
  8014ac:	08004580 	call	800458 <error_and_exit>
  8014b0:	003ef306 	br	801080 <mjpeg423_decode+0x210>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
  8014b4:	01002074 	movhi	r4,129
  8014b8:	210e1104 	addi	r4,r4,14404
  8014bc:	08004580 	call	800458 <error_and_exit>
  8014c0:	003ef306 	br	801090 <mjpeg423_decode+0x220>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
  8014c4:	01002074 	movhi	r4,129
  8014c8:	210e1704 	addi	r4,r4,14428
  8014cc:	08004580 	call	800458 <error_and_exit>
  8014d0:	003ef306 	br	8010a0 <mjpeg423_decode+0x230>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
  8014d4:	01002074 	movhi	r4,129
  8014d8:	210e1d04 	addi	r4,r4,14452
  8014dc:	08004580 	call	800458 <error_and_exit>
  8014e0:	003ef406 	br	8010b4 <mjpeg423_decode+0x244>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
  8014e4:	01002074 	movhi	r4,129
  8014e8:	210e2304 	addi	r4,r4,14476
  8014ec:	08004580 	call	800458 <error_and_exit>
  8014f0:	003ef406 	br	8010c4 <mjpeg423_decode+0x254>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
  8014f4:	01002074 	movhi	r4,129
  8014f8:	210e2904 	addi	r4,r4,14500
  8014fc:	08004580 	call	800458 <error_and_exit>
  801500:	003ef406 	br	8010d4 <mjpeg423_decode+0x264>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
  801504:	01002074 	movhi	r4,129
  801508:	210e2f04 	addi	r4,r4,14524
  80150c:	08004580 	call	800458 <error_and_exit>
  801510:	003ef606 	br	8010ec <mjpeg423_decode+0x27c>
    //char* filename_out = malloc(strlen(filenamebase_out)+1);
    //strcpy(filename_out, filenamebase_out);
    
    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
    if ( pixel_buf_dev == NULL){
    	error_and_exit ("Error: could not open pixel buffer device \n");
  801514:	01002074 	movhi	r4,129
  801518:	210de004 	addi	r4,r4,14208
  80151c:	08004580 	call	800458 <error_and_exit>
  801520:	003e6406 	br	800eb4 <mjpeg423_decode+0x44>

00801524 <ycbcr_to_rgb>:
//values are first scaled by 14 bits, then summed, then rescaled back by 14 bits
//the result fits in 24 bits when using two's complement
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
  801524:	3109383a 	mul	r4,r6,r4
  801528:	deffff04 	addi	sp,sp,-4
  80152c:	dc000015 	stw	r16,0(sp)
  801530:	dbc00217 	ldw	r15,8(sp)
  801534:	dc000117 	ldw	r16,4(sp)
  801538:	290b883a 	add	r5,r5,r4
  80153c:	d8800317 	ldw	r2,12(sp)
  801540:	294b883a 	add	r5,r5,r5
  801544:	294b883a 	add	r5,r5,r5
  801548:	318d883a 	add	r6,r6,r6
  80154c:	1151883a 	add	r8,r2,r5
  801550:	319d883a 	add	r14,r6,r6
  801554:	8017883a 	mov	r11,r16
  801558:	7815883a 	mov	r10,r15
  80155c:	3813883a 	mov	r9,r7
  801560:	001b883a 	mov	r13,zero
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801564:	7b45883a 	add	r2,r15,r13
  801568:	11000003 	ldbu	r4,0(r2)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80156c:	3b47883a 	add	r3,r7,r13
  801570:	19400003 	ldbu	r5,0(r3)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801574:	213fe004 	addi	r4,r4,-128
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801578:	6c0d883a 	add	r6,r13,r16
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80157c:	280a93ba 	slli	r5,r5,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801580:	20966ea4 	muli	r2,r4,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801584:	30c00003 	ldbu	r3,0(r6)
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801588:	1145883a 	add	r2,r2,r5
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  80158c:	19bfe004 	addi	r6,r3,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801590:	10015716 	blt	r2,zero,801af0 <ycbcr_to_rgb+0x5cc>
  801594:	1005d3ba 	srai	r2,r2,14
  801598:	00c03fc4 	movi	r3,255
  80159c:	1880010e 	bge	r3,r2,8015a4 <ycbcr_to_rgb+0x80>
  8015a0:	1805883a 	mov	r2,r3
  8015a4:	10803fcc 	andi	r2,r2,255
  8015a8:	1018943a 	slli	r12,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  8015ac:	308581a4 	muli	r2,r6,5638
  8015b0:	20cb6d24 	muli	r3,r4,11700
  8015b4:	2885c83a 	sub	r2,r5,r2
  8015b8:	10c5c83a 	sub	r2,r2,r3
  8015bc:	10014a16 	blt	r2,zero,801ae8 <ycbcr_to_rgb+0x5c4>
  8015c0:	1005d3ba 	srai	r2,r2,14
  8015c4:	00c03fc4 	movi	r3,255
  8015c8:	1880010e 	bge	r3,r2,8015d0 <ycbcr_to_rgb+0xac>
  8015cc:	1805883a 	mov	r2,r3
  8015d0:	10803fcc 	andi	r2,r2,255
  8015d4:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8015d8:	309c5a24 	muli	r2,r6,29032
  8015dc:	1145883a 	add	r2,r2,r5
  8015e0:	10013f16 	blt	r2,zero,801ae0 <ycbcr_to_rgb+0x5bc>
  8015e4:	1005d3ba 	srai	r2,r2,14
  8015e8:	01403fc4 	movi	r5,255
  8015ec:	2880010e 	bge	r5,r2,8015f4 <ycbcr_to_rgb+0xd0>
  8015f0:	2805883a 	mov	r2,r5
  8015f4:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  8015f8:	1884b03a 	or	r2,r3,r2
  8015fc:	6084b03a 	or	r2,r12,r2
  801600:	40800035 	stwio	r2,0(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801604:	50c00043 	ldbu	r3,1(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801608:	49000043 	ldbu	r4,1(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  80160c:	59400043 	ldbu	r5,1(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801610:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801614:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801618:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  80161c:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801620:	1105883a 	add	r2,r2,r4
  801624:	10012c16 	blt	r2,zero,801ad8 <ycbcr_to_rgb+0x5b4>
  801628:	1005d3ba 	srai	r2,r2,14
  80162c:	01803fc4 	movi	r6,255
  801630:	3080010e 	bge	r6,r2,801638 <ycbcr_to_rgb+0x114>
  801634:	3005883a 	mov	r2,r6
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801640:	288581a4 	muli	r2,r5,5638
  801644:	18cb6d24 	muli	r3,r3,11700
  801648:	2085c83a 	sub	r2,r4,r2
  80164c:	10c5c83a 	sub	r2,r2,r3
  801650:	10011f16 	blt	r2,zero,801ad0 <ycbcr_to_rgb+0x5ac>
  801654:	1005d3ba 	srai	r2,r2,14
  801658:	00c03fc4 	movi	r3,255
  80165c:	1880010e 	bge	r3,r2,801664 <ycbcr_to_rgb+0x140>
  801660:	1805883a 	mov	r2,r3
  801664:	10803fcc 	andi	r2,r2,255
  801668:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  80166c:	289c5a24 	muli	r2,r5,29032
  801670:	1105883a 	add	r2,r2,r4
  801674:	10011416 	blt	r2,zero,801ac8 <ycbcr_to_rgb+0x5a4>
  801678:	1005d3ba 	srai	r2,r2,14
  80167c:	01003fc4 	movi	r4,255
  801680:	2080010e 	bge	r4,r2,801688 <ycbcr_to_rgb+0x164>
  801684:	2005883a 	mov	r2,r4
  801688:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  80168c:	1884b03a 	or	r2,r3,r2
  801690:	3084b03a 	or	r2,r6,r2
  801694:	40800135 	stwio	r2,4(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801698:	50c00083 	ldbu	r3,2(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80169c:	49000083 	ldbu	r4,2(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8016a0:	59400083 	ldbu	r5,2(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8016a4:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8016a8:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8016ac:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8016b0:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8016b4:	1105883a 	add	r2,r2,r4
  8016b8:	10010116 	blt	r2,zero,801ac0 <ycbcr_to_rgb+0x59c>
  8016bc:	1005d3ba 	srai	r2,r2,14
  8016c0:	01803fc4 	movi	r6,255
  8016c4:	3080010e 	bge	r6,r2,8016cc <ycbcr_to_rgb+0x1a8>
  8016c8:	3005883a 	mov	r2,r6
  8016cc:	10803fcc 	andi	r2,r2,255
  8016d0:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  8016d4:	288581a4 	muli	r2,r5,5638
  8016d8:	18cb6d24 	muli	r3,r3,11700
  8016dc:	2085c83a 	sub	r2,r4,r2
  8016e0:	10c5c83a 	sub	r2,r2,r3
  8016e4:	1000f416 	blt	r2,zero,801ab8 <ycbcr_to_rgb+0x594>
  8016e8:	1005d3ba 	srai	r2,r2,14
  8016ec:	00c03fc4 	movi	r3,255
  8016f0:	1880010e 	bge	r3,r2,8016f8 <ycbcr_to_rgb+0x1d4>
  8016f4:	1805883a 	mov	r2,r3
  8016f8:	10803fcc 	andi	r2,r2,255
  8016fc:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801700:	289c5a24 	muli	r2,r5,29032
  801704:	1105883a 	add	r2,r2,r4
  801708:	1000e916 	blt	r2,zero,801ab0 <ycbcr_to_rgb+0x58c>
  80170c:	1005d3ba 	srai	r2,r2,14
  801710:	01003fc4 	movi	r4,255
  801714:	2080010e 	bge	r4,r2,80171c <ycbcr_to_rgb+0x1f8>
  801718:	2005883a 	mov	r2,r4
  80171c:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  801720:	1884b03a 	or	r2,r3,r2
  801724:	3084b03a 	or	r2,r6,r2
  801728:	40800235 	stwio	r2,8(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  80172c:	50c000c3 	ldbu	r3,3(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801730:	490000c3 	ldbu	r4,3(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801734:	594000c3 	ldbu	r5,3(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801738:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80173c:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801740:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801744:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801748:	1105883a 	add	r2,r2,r4
  80174c:	1000d616 	blt	r2,zero,801aa8 <ycbcr_to_rgb+0x584>
  801750:	1005d3ba 	srai	r2,r2,14
  801754:	01803fc4 	movi	r6,255
  801758:	3080010e 	bge	r6,r2,801760 <ycbcr_to_rgb+0x23c>
  80175c:	3005883a 	mov	r2,r6
  801760:	10803fcc 	andi	r2,r2,255
  801764:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801768:	288581a4 	muli	r2,r5,5638
  80176c:	18cb6d24 	muli	r3,r3,11700
  801770:	2085c83a 	sub	r2,r4,r2
  801774:	10c5c83a 	sub	r2,r2,r3
  801778:	1000c916 	blt	r2,zero,801aa0 <ycbcr_to_rgb+0x57c>
  80177c:	1005d3ba 	srai	r2,r2,14
  801780:	00c03fc4 	movi	r3,255
  801784:	1880010e 	bge	r3,r2,80178c <ycbcr_to_rgb+0x268>
  801788:	1805883a 	mov	r2,r3
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801794:	289c5a24 	muli	r2,r5,29032
  801798:	1105883a 	add	r2,r2,r4
  80179c:	1000be16 	blt	r2,zero,801a98 <ycbcr_to_rgb+0x574>
  8017a0:	1005d3ba 	srai	r2,r2,14
  8017a4:	01003fc4 	movi	r4,255
  8017a8:	2080010e 	bge	r4,r2,8017b0 <ycbcr_to_rgb+0x28c>
  8017ac:	2005883a 	mov	r2,r4
  8017b0:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  8017b4:	1884b03a 	or	r2,r3,r2
  8017b8:	3084b03a 	or	r2,r6,r2
  8017bc:	40800335 	stwio	r2,12(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8017c0:	50c00103 	ldbu	r3,4(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8017c4:	49000103 	ldbu	r4,4(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8017c8:	59400103 	ldbu	r5,4(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8017cc:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8017d0:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8017d4:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8017d8:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8017dc:	1105883a 	add	r2,r2,r4
  8017e0:	1000ab16 	blt	r2,zero,801a90 <ycbcr_to_rgb+0x56c>
  8017e4:	1005d3ba 	srai	r2,r2,14
  8017e8:	01803fc4 	movi	r6,255
  8017ec:	3080010e 	bge	r6,r2,8017f4 <ycbcr_to_rgb+0x2d0>
  8017f0:	3005883a 	mov	r2,r6
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  8017fc:	288581a4 	muli	r2,r5,5638
  801800:	18cb6d24 	muli	r3,r3,11700
  801804:	2085c83a 	sub	r2,r4,r2
  801808:	10c5c83a 	sub	r2,r2,r3
  80180c:	10009e16 	blt	r2,zero,801a88 <ycbcr_to_rgb+0x564>
  801810:	1005d3ba 	srai	r2,r2,14
  801814:	00c03fc4 	movi	r3,255
  801818:	1880010e 	bge	r3,r2,801820 <ycbcr_to_rgb+0x2fc>
  80181c:	1805883a 	mov	r2,r3
  801820:	10803fcc 	andi	r2,r2,255
  801824:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801828:	289c5a24 	muli	r2,r5,29032
  80182c:	1105883a 	add	r2,r2,r4
  801830:	10009316 	blt	r2,zero,801a80 <ycbcr_to_rgb+0x55c>
  801834:	1005d3ba 	srai	r2,r2,14
  801838:	01003fc4 	movi	r4,255
  80183c:	2080010e 	bge	r4,r2,801844 <ycbcr_to_rgb+0x320>
  801840:	2005883a 	mov	r2,r4
  801844:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  801848:	1884b03a 	or	r2,r3,r2
  80184c:	3084b03a 	or	r2,r6,r2
  801850:	40800435 	stwio	r2,16(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801854:	50c00143 	ldbu	r3,5(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801858:	49000143 	ldbu	r4,5(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  80185c:	59400143 	ldbu	r5,5(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801860:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801864:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801868:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  80186c:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801870:	1105883a 	add	r2,r2,r4
  801874:	10008016 	blt	r2,zero,801a78 <ycbcr_to_rgb+0x554>
  801878:	1005d3ba 	srai	r2,r2,14
  80187c:	01803fc4 	movi	r6,255
  801880:	3080010e 	bge	r6,r2,801888 <ycbcr_to_rgb+0x364>
  801884:	3005883a 	mov	r2,r6
  801888:	10803fcc 	andi	r2,r2,255
  80188c:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801890:	288581a4 	muli	r2,r5,5638
  801894:	18cb6d24 	muli	r3,r3,11700
  801898:	2085c83a 	sub	r2,r4,r2
  80189c:	10c5c83a 	sub	r2,r2,r3
  8018a0:	10007316 	blt	r2,zero,801a70 <ycbcr_to_rgb+0x54c>
  8018a4:	1005d3ba 	srai	r2,r2,14
  8018a8:	00c03fc4 	movi	r3,255
  8018ac:	1880010e 	bge	r3,r2,8018b4 <ycbcr_to_rgb+0x390>
  8018b0:	1805883a 	mov	r2,r3
  8018b4:	10803fcc 	andi	r2,r2,255
  8018b8:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8018bc:	289c5a24 	muli	r2,r5,29032
  8018c0:	1105883a 	add	r2,r2,r4
  8018c4:	10006816 	blt	r2,zero,801a68 <ycbcr_to_rgb+0x544>
  8018c8:	1005d3ba 	srai	r2,r2,14
  8018cc:	01003fc4 	movi	r4,255
  8018d0:	2080010e 	bge	r4,r2,8018d8 <ycbcr_to_rgb+0x3b4>
  8018d4:	2005883a 	mov	r2,r4
  8018d8:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  8018dc:	1884b03a 	or	r2,r3,r2
  8018e0:	3084b03a 	or	r2,r6,r2
  8018e4:	40800535 	stwio	r2,20(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8018e8:	50c00183 	ldbu	r3,6(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8018ec:	49000183 	ldbu	r4,6(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  8018f0:	59400183 	ldbu	r5,6(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  8018f4:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  8018f8:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  8018fc:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801900:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801904:	1105883a 	add	r2,r2,r4
  801908:	10005516 	blt	r2,zero,801a60 <ycbcr_to_rgb+0x53c>
  80190c:	1005d3ba 	srai	r2,r2,14
  801910:	01803fc4 	movi	r6,255
  801914:	3080010e 	bge	r6,r2,80191c <ycbcr_to_rgb+0x3f8>
  801918:	3005883a 	mov	r2,r6
  80191c:	10803fcc 	andi	r2,r2,255
  801920:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801924:	288581a4 	muli	r2,r5,5638
  801928:	18cb6d24 	muli	r3,r3,11700
  80192c:	2085c83a 	sub	r2,r4,r2
  801930:	10c5c83a 	sub	r2,r2,r3
  801934:	10004816 	blt	r2,zero,801a58 <ycbcr_to_rgb+0x534>
  801938:	1005d3ba 	srai	r2,r2,14
  80193c:	00c03fc4 	movi	r3,255
  801940:	1880010e 	bge	r3,r2,801948 <ycbcr_to_rgb+0x424>
  801944:	1805883a 	mov	r2,r3
  801948:	10803fcc 	andi	r2,r2,255
  80194c:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801950:	289c5a24 	muli	r2,r5,29032
  801954:	1105883a 	add	r2,r2,r4
  801958:	10003d16 	blt	r2,zero,801a50 <ycbcr_to_rgb+0x52c>
  80195c:	1005d3ba 	srai	r2,r2,14
  801960:	01003fc4 	movi	r4,255
  801964:	2080010e 	bge	r4,r2,80196c <ycbcr_to_rgb+0x448>
  801968:	2005883a 	mov	r2,r4
  80196c:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  801970:	1884b03a 	or	r2,r3,r2
  801974:	3084b03a 	or	r2,r6,r2
  801978:	40800635 	stwio	r2,24(r8)
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  80197c:	50c001c3 	ldbu	r3,7(r10)
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  801980:	490001c3 	ldbu	r4,7(r9)
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801984:	594001c3 	ldbu	r5,7(r11)
            int32_t Crr = (int32_t)(Cr[y][x]) - 128;
  801988:	18ffe004 	addi	r3,r3,-128
            int32_t Cr1402 = 22970 * Crr;
            int32_t Cr071414 = 11700 * Crr;
            int32_t Cb034414 = 5638 * Cbb;
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
  80198c:	200893ba 	slli	r4,r4,14
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801990:	18966ea4 	muli	r2,r3,22970
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            int32_t Cbb = (int32_t)(Cb[y][x]) - 128;
  801994:	297fe004 	addi	r5,r5,-128
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801998:	1105883a 	add	r2,r2,r4
  80199c:	10002a16 	blt	r2,zero,801a48 <ycbcr_to_rgb+0x524>
  8019a0:	1005d3ba 	srai	r2,r2,14
  8019a4:	01803fc4 	movi	r6,255
  8019a8:	3080010e 	bge	r6,r2,8019b0 <ycbcr_to_rgb+0x48c>
  8019ac:	3005883a 	mov	r2,r6
  8019b0:	10803fcc 	andi	r2,r2,255
  8019b4:	100c943a 	slli	r6,r2,16
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  8019b8:	288581a4 	muli	r2,r5,5638
  8019bc:	18cb6d24 	muli	r3,r3,11700
  8019c0:	2085c83a 	sub	r2,r4,r2
  8019c4:	10c5c83a 	sub	r2,r2,r3
  8019c8:	10001d16 	blt	r2,zero,801a40 <ycbcr_to_rgb+0x51c>
  8019cc:	1005d3ba 	srai	r2,r2,14
  8019d0:	00c03fc4 	movi	r3,255
  8019d4:	1880010e 	bge	r3,r2,8019dc <ycbcr_to_rgb+0x4b8>
  8019d8:	1805883a 	mov	r2,r3
  8019dc:	10803fcc 	andi	r2,r2,255
  8019e0:	1006923a 	slli	r3,r2,8
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  8019e4:	289c5a24 	muli	r2,r5,29032
  8019e8:	1105883a 	add	r2,r2,r4
  8019ec:	10001216 	blt	r2,zero,801a38 <ycbcr_to_rgb+0x514>
  8019f0:	1005d3ba 	srai	r2,r2,14
  8019f4:	01003fc4 	movi	r4,255
  8019f8:	2080010e 	bge	r4,r2,801a00 <ycbcr_to_rgb+0x4dc>
  8019fc:	2005883a 	mov	r2,r4
  801a00:	10803fcc 	andi	r2,r2,255
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  801a04:	1884b03a 	or	r2,r3,r2
  801a08:	3084b03a 	or	r2,r6,r2
  801a0c:	40800735 	stwio	r2,28(r8)
  801a10:	6b400204 	addi	r13,r13,8
//result can overflow due to imprecisions added in the quantizaton)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
  801a14:	00801004 	movi	r2,64
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
  801a18:	4391883a 	add	r8,r8,r14
  801a1c:	5ac00204 	addi	r11,r11,8
  801a20:	52800204 	addi	r10,r10,8
  801a24:	4a400204 	addi	r9,r9,8
//result can overflow due to imprecisions added in the quantizaton)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    uint32_t index;
    uint32_t pixelValue;
    for (int y = 0; y < 8; y++){
  801a28:	68bece1e 	bne	r13,r2,801564 <ycbcr_to_rgb+0x40>
            pixelValue = ( (((uint32_t)pixel.alpha << 24)| ((uint32_t)pixel.red << 16) | ((uint32_t)pixel.green << 8) | (uint32_t)pixel.blue) );
            IOWR_32DIRECT(rgbblock,index*4,pixelValue);
            index++;
        }
    }
}
  801a2c:	dc000017 	ldw	r16,0(sp)
  801a30:	dec00104 	addi	sp,sp,4
  801a34:	f800283a 	ret
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801a38:	0005883a 	mov	r2,zero
  801a3c:	003ff106 	br	801a04 <ycbcr_to_rgb+0x4e0>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801a40:	0007883a 	mov	r3,zero
  801a44:	003fe706 	br	8019e4 <ycbcr_to_rgb+0x4c0>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801a48:	000d883a 	mov	r6,zero
  801a4c:	003fda06 	br	8019b8 <ycbcr_to_rgb+0x494>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801a50:	0005883a 	mov	r2,zero
  801a54:	003fc606 	br	801970 <ycbcr_to_rgb+0x44c>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801a58:	0007883a 	mov	r3,zero
  801a5c:	003fbc06 	br	801950 <ycbcr_to_rgb+0x42c>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801a60:	000d883a 	mov	r6,zero
  801a64:	003faf06 	br	801924 <ycbcr_to_rgb+0x400>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801a68:	0005883a 	mov	r2,zero
  801a6c:	003f9b06 	br	8018dc <ycbcr_to_rgb+0x3b8>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801a70:	0007883a 	mov	r3,zero
  801a74:	003f9106 	br	8018bc <ycbcr_to_rgb+0x398>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801a78:	000d883a 	mov	r6,zero
  801a7c:	003f8406 	br	801890 <ycbcr_to_rgb+0x36c>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801a80:	0005883a 	mov	r2,zero
  801a84:	003f7006 	br	801848 <ycbcr_to_rgb+0x324>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801a88:	0007883a 	mov	r3,zero
  801a8c:	003f6606 	br	801828 <ycbcr_to_rgb+0x304>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801a90:	000d883a 	mov	r6,zero
  801a94:	003f5906 	br	8017fc <ycbcr_to_rgb+0x2d8>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801a98:	0005883a 	mov	r2,zero
  801a9c:	003f4506 	br	8017b4 <ycbcr_to_rgb+0x290>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801aa0:	0007883a 	mov	r3,zero
  801aa4:	003f3b06 	br	801794 <ycbcr_to_rgb+0x270>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801aa8:	000d883a 	mov	r6,zero
  801aac:	003f2e06 	br	801768 <ycbcr_to_rgb+0x244>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801ab0:	0005883a 	mov	r2,zero
  801ab4:	003f1a06 	br	801720 <ycbcr_to_rgb+0x1fc>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801ab8:	0007883a 	mov	r3,zero
  801abc:	003f1006 	br	801700 <ycbcr_to_rgb+0x1dc>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801ac0:	000d883a 	mov	r6,zero
  801ac4:	003f0306 	br	8016d4 <ycbcr_to_rgb+0x1b0>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801ac8:	0005883a 	mov	r2,zero
  801acc:	003eef06 	br	80168c <ycbcr_to_rgb+0x168>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801ad0:	0007883a 	mov	r3,zero
  801ad4:	003ee506 	br	80166c <ycbcr_to_rgb+0x148>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801ad8:	000d883a 	mov	r6,zero
  801adc:	003ed806 	br	801640 <ycbcr_to_rgb+0x11c>
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
            pixel.blue = NORMALIZE_RGB(YY + Cb1722);
  801ae0:	0005883a 	mov	r2,zero
  801ae4:	003ec406 	br	8015f8 <ycbcr_to_rgb+0xd4>
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
            pixel.green = NORMALIZE_RGB(YY - Cb034414 - Cr071414);
  801ae8:	0007883a 	mov	r3,zero
  801aec:	003eba06 	br	8015d8 <ycbcr_to_rgb+0xb4>
            int32_t Cb1722 = 29032 * Cbb;
            int32_t YY = (int32_t)(Y[y][x]) << 14;
            int32_t temp;
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            pixel.red = NORMALIZE_RGB(YY + Cr1402); 
  801af0:	0019883a 	mov	r12,zero
  801af4:	003ead06 	br	8015ac <ycbcr_to_rgb+0x88>

00801af8 <main>:
}

#endif

int main()
{
  801af8:	defffe04 	addi	sp,sp,-8
	int last_tested;
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  801afc:	01002074 	movhi	r4,129
  801b00:	210e4804 	addi	r4,r4,14624
}

#endif

int main()
{
  801b04:	dfc00115 	stw	ra,4(sp)
	int last_tested;
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  801b08:	080e6d40 	call	80e6d4 <alt_up_sd_card_open_dev>
	if(device_reference == NULL){
  801b0c:	10002d26 	beq	r2,zero,801bc4 <main+0xcc>
	  printf("Cannot open SD Device\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_Present()){
  801b10:	080e6680 	call	80e668 <alt_up_sd_card_is_Present>
  801b14:	10002126 	beq	r2,zero,801b9c <main+0xa4>
	  printf("There is no SD card in the slot\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
  801b18:	080f8540 	call	80f854 <alt_up_sd_card_is_FAT16>
  801b1c:	10002426 	beq	r2,zero,801bb0 <main+0xb8>
{
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  void* edge_capture_ptr = (void*) &edge_capture;
  /* Enable all 4 button interrupts. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
  801b20:	008003c4 	movi	r2,15
  801b24:	00c04434 	movhi	r3,272
  801b28:	18c50a04 	addi	r3,r3,5160
  801b2c:	18800035 	stwio	r2,0(r3)
  /* Reset the edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);
  801b30:	01004434 	movhi	r4,272
  801b34:	21050b04 	addi	r4,r4,5164
  801b38:	20000035 	stwio	zero,0(r4)
   * which does not support enhanced interrupts. For systems created using
   * the Nios II softawre build tools, the enhanced API is recommended
   * for new designs.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ,
  801b3c:	0009883a 	mov	r4,zero
  801b40:	01400084 	movi	r5,2
  801b44:	01802034 	movhi	r6,128
  801b48:	3186f604 	addi	r6,r6,7128
  801b4c:	d1e74704 	addi	r7,gp,-25316
  801b50:	d8000015 	stw	zero,0(sp)
  801b54:	080c4ec0 	call	80c4ec <alt_ic_isr_register>
  801b58:	00c00044 	movi	r3,1
	if(!alt_up_sd_card_is_FAT16()){
	  printf("SD card is not of FAT16 type\n");
	  return -1;
	}
	init_button_pio();
	edge_capture = 0;
  801b5c:	d0274715 	stw	zero,-25316(gp)
	while(edge_capture != 1){
  801b60:	d0a74717 	ldw	r2,-25316(gp)
  801b64:	10c00526 	beq	r2,r3,801b7c <main+0x84>
		if (last_tested == edge_capture)
  801b68:	d0a74717 	ldw	r2,-25316(gp)
  801b6c:	f8bffc26 	beq	ra,r2,801b60 <main+0x68>
		    {
		      continue;
		    }else{
		    	last_tested = edge_capture;
  801b70:	d7e74717 	ldw	ra,-25316(gp)
		    	if(edge_capture==1){
  801b74:	d0a74717 	ldw	r2,-25316(gp)
  801b78:	10fff91e 	bne	r2,r3,801b60 <main+0x68>
		    	}
		    }
	}
	edge_capture=0;

	mjpeg423_decode("v3fps.mpg");
  801b7c:	01002074 	movhi	r4,129
  801b80:	210e6904 	addi	r4,r4,14756
		    	if(edge_capture==1){
		    		break;
		    	}
		    }
	}
	edge_capture=0;
  801b84:	d0274715 	stw	zero,-25316(gp)

	mjpeg423_decode("v3fps.mpg");
  801b88:	0800e700 	call	800e70 <mjpeg423_decode>
  801b8c:	0005883a 	mov	r2,zero

  return( 0 );
}
  801b90:	dfc00117 	ldw	ra,4(sp)
  801b94:	dec00204 	addi	sp,sp,8
  801b98:	f800283a 	ret
	if(device_reference == NULL){
	  printf("Cannot open SD Device\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_Present()){
	  printf("There is no SD card in the slot\n");
  801b9c:	01002074 	movhi	r4,129
  801ba0:	210e5904 	addi	r4,r4,14692
  801ba4:	0803f280 	call	803f28 <puts>
  801ba8:	00bfffc4 	movi	r2,-1
  801bac:	003ff806 	br	801b90 <main+0x98>
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
	  printf("SD card is not of FAT16 type\n");
  801bb0:	01002074 	movhi	r4,129
  801bb4:	210e6104 	addi	r4,r4,14724
  801bb8:	0803f280 	call	803f28 <puts>
  801bbc:	00bfffc4 	movi	r2,-1
  801bc0:	003ff306 	br	801b90 <main+0x98>
int main()
{
	int last_tested;
	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
	if(device_reference == NULL){
	  printf("Cannot open SD Device\n");
  801bc4:	01002074 	movhi	r4,129
  801bc8:	210e5304 	addi	r4,r4,14668
  801bcc:	0803f280 	call	803f28 <puts>
  801bd0:	00bfffc4 	movi	r2,-1
  801bd4:	003fee06 	br	801b90 <main+0x98>

00801bd8 <handle_button_interrupts>:
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  volatile int* edge_capture_ptr = (volatile int*) context;
  /* Store the value in the Button's edge capture register in *context. */
  *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
  801bd8:	00804434 	movhi	r2,272
  801bdc:	10850b04 	addi	r2,r2,5164
  801be0:	10c00037 	ldwio	r3,0(r2)
  801be4:	20c00015 	stw	r3,0(r4)
  /* Reset the Button's edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);
  801be8:	10000035 	stwio	zero,0(r2)
  /*
   * Read the PIO to delay ISR exit. This is done to prevent a spurious
   * interrupt in systems with high processor -> pio latency and fast
   * interrupts.
   */
  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
  801bec:	10c00037 	ldwio	r3,0(r2)
}
  801bf0:	f800283a 	ret

00801bf4 <GetInputString>:
*           returns the string, minus any '\r' characters it
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
  801bf4:	defff904 	addi	sp,sp,-28
  801bf8:	dcc00315 	stw	r19,12(sp)
  801bfc:	dc800215 	stw	r18,8(sp)
  801c00:	dc400115 	stw	r17,4(sp)
  801c04:	dfc00615 	stw	ra,24(sp)
  801c08:	dd400515 	stw	r21,20(sp)
  801c0c:	dd000415 	stw	r20,16(sp)
  801c10:	dc000015 	stw	r16,0(sp)
  801c14:	2827883a 	mov	r19,r5
  801c18:	2025883a 	mov	r18,r4
  801c1c:	3023883a 	mov	r17,r6
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801c20:	01400b0e 	bge	zero,r5,801c50 <GetInputString+0x5c>
  801c24:	0021883a 	mov	r16,zero
  801c28:	05000344 	movi	r20,13
  801c2c:	05400284 	movi	r21,10
  {
    if( (ch = getc(stream)) != '\r')
  801c30:	8809883a 	mov	r4,r17
  801c34:	08034bc0 	call	8034bc <getc>
    {
      entry[i] = ch;
  801c38:	8487883a 	add	r3,r16,r18
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  {
    if( (ch = getc(stream)) != '\r')
  801c3c:	15000326 	beq	r2,r20,801c4c <GetInputString+0x58>
    {
      entry[i] = ch;
  801c40:	18800005 	stb	r2,0(r3)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801c44:	15400226 	beq	r2,r21,801c50 <GetInputString+0x5c>
  {
    if( (ch = getc(stream)) != '\r')
    {
      entry[i] = ch;
      i++;
  801c48:	84000044 	addi	r16,r16,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801c4c:	84fff816 	blt	r16,r19,801c30 <GetInputString+0x3c>
    {
      entry[i] = ch;
      i++;
    }
  }
}
  801c50:	dfc00617 	ldw	ra,24(sp)
  801c54:	dd400517 	ldw	r21,20(sp)
  801c58:	dd000417 	ldw	r20,16(sp)
  801c5c:	dcc00317 	ldw	r19,12(sp)
  801c60:	dc800217 	ldw	r18,8(sp)
  801c64:	dc400117 	ldw	r17,4(sp)
  801c68:	dc000017 	ldw	r16,0(sp)
  801c6c:	dec00704 	addi	sp,sp,28
  801c70:	f800283a 	ret

00801c74 <sd_seek>:
 * Set indices into the SD card for a certain point in the file with the sector list.
 * @param start_byte_in_file : Byte in the current file (has sector list loaded) from which to start reading
 * @return:	Returns 0
 */
int sd_seek(uint32_t start_byte_in_file) {
	sd_card_curr_read_sector = start_byte_in_file / 512;
  801c74:	2004d27a 	srli	r2,r4,9
	sd_card_start_byte_in_sector = start_byte_in_file % 512;
  801c78:	21007fcc 	andi	r4,r4,511
  801c7c:	d1274a15 	stw	r4,-25304(gp)
 * Set indices into the SD card for a certain point in the file with the sector list.
 * @param start_byte_in_file : Byte in the current file (has sector list loaded) from which to start reading
 * @return:	Returns 0
 */
int sd_seek(uint32_t start_byte_in_file) {
	sd_card_curr_read_sector = start_byte_in_file / 512;
  801c80:	d0a74915 	stw	r2,-25308(gp)
	sd_card_start_byte_in_sector = start_byte_in_file % 512;
	return 0;
}
  801c84:	0005883a 	mov	r2,zero
  801c88:	f800283a 	ret

00801c8c <sd_card_file_size>:
	}
	return true;
}

unsigned int sd_card_file_size(short int file_handle)
{
  801c8c:	213fffcc 	andi	r4,r4,65535
  801c90:	2120001c 	xori	r4,r4,32768
  801c94:	21200004 	addi	r4,r4,-32768
  801c98:	200891ba 	slli	r4,r4,6
  801c9c:	00802074 	movhi	r2,129
  801ca0:	109e3304 	addi	r2,r2,30924
  801ca4:	2089883a 	add	r4,r4,r2
	return active_files[file_handle].file_size_in_bytes;
}
  801ca8:	20800017 	ldw	r2,0(r4)
  801cac:	f800283a 	ret

00801cb0 <sd_card_wait_read_sector>:
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
}

bool sd_card_wait_read_sector()
{
  801cb0:	00802074 	movhi	r2,129
  801cb4:	109dbc04 	addi	r2,r2,30448
  801cb8:	11000017 	ldw	r4,0(r2)
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  801cbc:	2080002b 	ldhuio	r2,0(r4)
	} while ((reg_state & 0x04)!=0);
  801cc0:	10bfffcc 	andi	r2,r2,65535
  801cc4:	10c0010c 	andi	r3,r2,4
  801cc8:	183ffc1e 	bne	r3,zero,801cbc <sd_card_wait_read_sector+0xc>
  801ccc:	1004d13a 	srli	r2,r2,4
  801cd0:	1080005c 	xori	r2,r2,1
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
		return true;
	else
		return false;
}
  801cd4:	1080004c 	andi	r2,r2,1
  801cd8:	f800283a 	ret

00801cdc <sd_card_start_read_sector>:
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  801cdc:	d0a74817 	ldw	r2,-25312(gp)
  801ce0:	2109883a 	add	r4,r4,r4
  801ce4:	2109883a 	add	r4,r4,r4
  801ce8:	2085883a 	add	r2,r4,r2
  801cec:	01c02074 	movhi	r7,129
  801cf0:	39ddc204 	addi	r7,r7,30472
  801cf4:	10c00017 	ldw	r3,0(r2)
  801cf8:	39400017 	ldw	r5,0(r7)
  801cfc:	00802074 	movhi	r2,129
  801d00:	109dc004 	addi	r2,r2,30464
  801d04:	11800017 	ldw	r6,0(r2)
  801d08:	1947883a 	add	r3,r3,r5
  801d0c:	1806927a 	slli	r3,r3,9
  801d10:	30c00035 	stwio	r3,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  801d14:	00802074 	movhi	r2,129
  801d18:	109dbf04 	addi	r2,r2,30460
  801d1c:	11400017 	ldw	r5,0(r2)
  801d20:	00c00444 	movi	r3,17
  801d24:	28c0002d 	sthio	r3,0(r5)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  801d28:	d0e74817 	ldw	r3,-25312(gp)
  801d2c:	39800017 	ldw	r6,0(r7)
  801d30:	20c9883a 	add	r4,r4,r3
  801d34:	20800017 	ldw	r2,0(r4)
  801d38:	00c02074 	movhi	r3,129
  801d3c:	18ddc604 	addi	r3,r3,30488
  801d40:	1185883a 	add	r2,r2,r6
  801d44:	18800015 	stw	r2,0(r3)
}
  801d48:	f800283a 	ret

00801d4c <sd_card_create_sectors_list>:
}


bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);
  801d4c:	d0a74817 	ldw	r2,-25312(gp)
	return bytes_read;
}


bool sd_card_create_sectors_list(short int file_handle)
{
  801d50:	defff604 	addi	sp,sp,-40
  801d54:	dc000115 	stw	r16,4(sp)
  801d58:	dfc00915 	stw	ra,36(sp)
  801d5c:	ddc00815 	stw	r23,32(sp)
  801d60:	dd800715 	stw	r22,28(sp)
  801d64:	dd400615 	stw	r21,24(sp)
  801d68:	dd000515 	stw	r20,20(sp)
  801d6c:	dcc00415 	stw	r19,16(sp)
  801d70:	dc800315 	stw	r18,12(sp)
  801d74:	dc400215 	stw	r17,8(sp)
  801d78:	2021883a 	mov	r16,r4
	if(sectors != NULL) free(sectors);
  801d7c:	10000226 	beq	r2,zero,801d88 <sd_card_create_sectors_list+0x3c>
  801d80:	1009883a 	mov	r4,r2
  801d84:	08035e40 	call	8035e4 <free>

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801d88:	80bfffcc 	andi	r2,r16,65535
  801d8c:	10a0001c 	xori	r2,r2,32768
  801d90:	10a00004 	addi	r2,r2,-32768
  801d94:	100491ba 	slli	r2,r2,6
  801d98:	00c02074 	movhi	r3,129
  801d9c:	18de2d04 	addi	r3,r3,30900
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801da0:	05402074 	movhi	r21,129
  801da4:	ad5e1804 	addi	r21,r21,30816
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801da8:	10e1883a 	add	r16,r2,r3
  801dac:	81000617 	ldw	r4,24(r16)
  801db0:	0802cc40 	call	802cc4 <__floatunsidf>
  801db4:	0011883a 	mov	r8,zero
  801db8:	024fd834 	movhi	r9,16224
  801dbc:	480f883a 	mov	r7,r9
  801dc0:	400d883a 	mov	r6,r8
  801dc4:	180b883a 	mov	r5,r3
  801dc8:	1009883a 	mov	r4,r2
  801dcc:	08027a00 	call	8027a0 <__muldf3>
  801dd0:	180b883a 	mov	r5,r3
  801dd4:	1009883a 	mov	r4,r2
  801dd8:	08020880 	call	802088 <ceil>
  801ddc:	180b883a 	mov	r5,r3
  801de0:	1009883a 	mov	r4,r2
  801de4:	0802bec0 	call	802bec <__fixdfsi>
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801de8:	1089883a 	add	r4,r2,r2
  801dec:	2109883a 	add	r4,r4,r4
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801df0:	1027883a 	mov	r19,r2
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading
  801df4:	d0a74b15 	stw	r2,-25300(gp)

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801df8:	08035f80 	call	8035f8 <malloc>
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801dfc:	80c00717 	ldw	r3,28(r16)
  801e00:	a9800383 	ldbu	r6,14(r21)
  801e04:	81400817 	ldw	r5,32(r16)
  801e08:	a9001417 	ldw	r4,80(r21)
  801e0c:	18ffff84 	addi	r3,r3,-2
  801e10:	1987383a 	mul	r3,r3,r6
  801e14:	2149883a 	add	r4,r4,r5
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e18:	01c00044 	movi	r7,1
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801e1c:	190d883a 	add	r6,r3,r4
	sectors[0] = data_sector;
  801e20:	11800015 	stw	r6,0(r2)
	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801e24:	d0a74815 	stw	r2,-25312(gp)

	// Reset the offsets into the sectors and bytes in the sector
	sd_card_curr_read_sector = 0;
  801e28:	d0274915 	stw	zero,-25308(gp)
	sd_card_start_byte_in_sector = 0;
  801e2c:	d0274a15 	stw	zero,-25304(gp)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e30:	3cc0280e 	bge	r7,r19,801ed4 <sd_card_create_sectors_list+0x188>
  801e34:	8023883a 	mov	r17,r16
  801e38:	3825883a 	mov	r18,r7
  801e3c:	04000104 	movi	r16,4
  801e40:	8d000804 	addi	r20,r17,32
  801e44:	a82d883a 	mov	r22,r21
  801e48:	05fffe14 	movui	r23,65528
  801e4c:	00000806 	br	801e70 <sd_card_create_sectors_list+0x124>
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801e50:	d0a74817 	ldw	r2,-25312(gp)
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  801e54:	a1000015 	stw	r4,0(r20)
			data_sector = data_sector + 1;
  801e58:	31800044 	addi	r6,r6,1
		}

		sectors[i] = data_sector;
  801e5c:	8085883a 	add	r2,r16,r2
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e60:	94800044 	addi	r18,r18,1
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801e64:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801e68:	84000104 	addi	r16,r16,4
  801e6c:	9c801926 	beq	r19,r18,801ed4 <sd_card_create_sectors_list+0x188>

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801e70:	a8800383 	ldbu	r2,14(r21)
  801e74:	88c00817 	ldw	r3,32(r17)
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  801e78:	d80b883a 	mov	r5,sp

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801e7c:	10bfffc4 	addi	r2,r2,-1
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  801e80:	19000044 	addi	r4,r3,1

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801e84:	18bff21e 	bne	r3,r2,801e50 <sd_card_create_sectors_list+0x104>
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  801e88:	89000717 	ldw	r4,28(r17)
  801e8c:	080fa3c0 	call	80fa3c <get_cluster_flag>
  801e90:	10001c26 	beq	r2,zero,801f04 <sd_card_create_sectors_list+0x1b8>
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  801e94:	d900000b 	ldhu	r4,0(sp)
  801e98:	20bffe0c 	andi	r2,r4,65528
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801e9c:	217fff84 	addi	r5,r4,-2
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  801ea0:	15c01826 	beq	r2,r23,801f04 <sd_card_create_sectors_list+0x1b8>
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801ea4:	b0800383 	ldbu	r2,14(r22)
  801ea8:	b0c01417 	ldw	r3,80(r22)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801eac:	94800044 	addi	r18,r18,1
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801eb0:	2885383a 	mul	r2,r5,r2
					/* End of file */
					return false;
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
  801eb4:	89000715 	stw	r4,28(r17)
					active_files[file_handle].current_sector_in_cluster = 0;
  801eb8:	88000815 	stw	zero,32(r17)
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801ebc:	10cd883a 	add	r6,r2,r3
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801ec0:	d0a74817 	ldw	r2,-25312(gp)
  801ec4:	8085883a 	add	r2,r16,r2
  801ec8:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801ecc:	84000104 	addi	r16,r16,4
  801ed0:	9cbfe71e 	bne	r19,r18,801e70 <sd_card_create_sectors_list+0x124>
  801ed4:	00800044 	movi	r2,1
		}

		sectors[i] = data_sector;
	}
	return true;
}
  801ed8:	dfc00917 	ldw	ra,36(sp)
  801edc:	ddc00817 	ldw	r23,32(sp)
  801ee0:	dd800717 	ldw	r22,28(sp)
  801ee4:	dd400617 	ldw	r21,24(sp)
  801ee8:	dd000517 	ldw	r20,20(sp)
  801eec:	dcc00417 	ldw	r19,16(sp)
  801ef0:	dc800317 	ldw	r18,12(sp)
  801ef4:	dc400217 	ldw	r17,8(sp)
  801ef8:	dc000117 	ldw	r16,4(sp)
  801efc:	dec00a04 	addi	sp,sp,40
  801f00:	f800283a 	ret
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801f04:	0005883a 	mov	r2,zero
  801f08:	003ff306 	br	801ed8 <sd_card_create_sectors_list+0x18c>

00801f0c <sd_read>:
 * @param count	: Number of bytes to read from SD card.
 * @return: On success, returns number of bytes read.
 * 			If at end of file, returns -1.
 * 			On error, returns -2.
 */
int sd_read(void* buf, int count) {
  801f0c:	defffc04 	addi	sp,sp,-16
  801f10:	dfc00315 	stw	ra,12(sp)
  801f14:	dc800215 	stw	r18,8(sp)
  801f18:	dc400115 	stw	r17,4(sp)
  801f1c:	dc000015 	stw	r16,0(sp)
  801f20:	2817883a 	mov	r11,r5
  801f24:	2019883a 	mov	r12,r4
	int bytes_read = 0;

	if (count <= 0) { return 0; }
  801f28:	01400816 	blt	zero,r5,801f4c <sd_read+0x40>
			if (bytes_read >= count) {
				sd_card_start_byte_in_sector = j + 4;
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);
  801f2c:	0011883a 	mov	r8,zero

		sd_card_curr_read_sector++;
		sd_card_start_byte_in_sector = 0;
	}
	return bytes_read;
}
  801f30:	4005883a 	mov	r2,r8
  801f34:	dfc00317 	ldw	ra,12(sp)
  801f38:	dc800217 	ldw	r18,8(sp)
  801f3c:	dc400117 	ldw	r17,4(sp)
  801f40:	dc000017 	ldw	r16,0(sp)
  801f44:	dec00404 	addi	sp,sp,16
  801f48:	f800283a 	ret
 */
int sd_read(void* buf, int count) {
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }
  801f4c:	d1274917 	ldw	r4,-25308(gp)
  801f50:	d0a74b17 	ldw	r2,-25300(gp)
  801f54:	2080440e 	bge	r4,r2,802068 <sd_read+0x15c>
  801f58:	d3674817 	ldw	r13,-25312(gp)
  801f5c:	0011883a 	mov	r8,zero
  801f60:	04802074 	movhi	r18,129
  801f64:	949dc004 	addi	r18,r18,30464
  801f68:	03802074 	movhi	r14,129
  801f6c:	739dc204 	addi	r14,r14,30472
  801f70:	03c02074 	movhi	r15,129
  801f74:	7bddbf04 	addi	r15,r15,30460
  801f78:	04002074 	movhi	r16,129
  801f7c:	841dc604 	addi	r16,r16,30488
  801f80:	04402074 	movhi	r17,129
  801f84:	8c5dbc04 	addi	r17,r17,30448
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  801f88:	2109883a 	add	r4,r4,r4
  801f8c:	2109883a 	add	r4,r4,r4
  801f90:	2347883a 	add	r3,r4,r13
  801f94:	18800017 	ldw	r2,0(r3)
  801f98:	71400017 	ldw	r5,0(r14)
  801f9c:	91800017 	ldw	r6,0(r18)
  801fa0:	1145883a 	add	r2,r2,r5
  801fa4:	1004927a 	slli	r2,r2,9
  801fa8:	30800035 	stwio	r2,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  801fac:	78c00017 	ldw	r3,0(r15)
  801fb0:	00800444 	movi	r2,17
  801fb4:	1880002d 	sthio	r2,0(r3)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  801fb8:	d3674817 	ldw	r13,-25312(gp)
  801fbc:	70c00017 	ldw	r3,0(r14)
  801fc0:	89400017 	ldw	r5,0(r17)
  801fc4:	2349883a 	add	r4,r4,r13
  801fc8:	20800017 	ldw	r2,0(r4)
  801fcc:	10c5883a 	add	r2,r2,r3
  801fd0:	80800015 	stw	r2,0(r16)

bool sd_card_wait_read_sector()
{
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  801fd4:	2880002b 	ldhuio	r2,0(r5)
	} while ((reg_state & 0x04)!=0);
  801fd8:	10bfffcc 	andi	r2,r2,65535
  801fdc:	10c0010c 	andi	r3,r2,4
  801fe0:	183ffc1e 	bne	r3,zero,801fd4 <sd_read+0xc8>
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
  801fe4:	1080040c 	andi	r2,r2,16
  801fe8:	1000211e 	bne	r2,zero,802070 <sd_read+0x164>
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
			return -2;
		}

		//move sector to file buffer 32bits at a time
		for(int j = sd_card_start_byte_in_sector; j < 512; j+=4){
  801fec:	d1e74a17 	ldw	r7,-25304(gp)
  801ff0:	00c07fc4 	movi	r3,511
  801ff4:	380d883a 	mov	r6,r7
  801ff8:	19c01216 	blt	r3,r7,802044 <sd_read+0x138>
  801ffc:	00802074 	movhi	r2,129
  802000:	109dc104 	addi	r2,r2,30468
  802004:	12400017 	ldw	r9,0(r2)
  802008:	1815883a 	mov	r10,r3
  80200c:	3b0b883a 	add	r5,r7,r12
  802010:	00000206 	br	80201c <sd_read+0x110>
  802014:	31800104 	addi	r6,r6,4
  802018:	51800a16 	blt	r10,r6,802044 <sd_read+0x138>
			*((uint32_t*)(buf+j-sd_card_start_byte_in_sector)) = IORD_32DIRECT(buffer_memory, j);
  80201c:	29c5c83a 	sub	r2,r5,r7
  802020:	3247883a 	add	r3,r6,r9
  802024:	19000037 	ldwio	r4,0(r3)
			bytes_read += 4;
  802028:	42000104 	addi	r8,r8,4
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
			return -2;
		}

		//move sector to file buffer 32bits at a time
		for(int j = sd_card_start_byte_in_sector; j < 512; j+=4){
  80202c:	29400104 	addi	r5,r5,4
			*((uint32_t*)(buf+j-sd_card_start_byte_in_sector)) = IORD_32DIRECT(buffer_memory, j);
  802030:	11000015 	stw	r4,0(r2)
			bytes_read += 4;
			if (bytes_read >= count) {
  802034:	42fff716 	blt	r8,r11,802014 <sd_read+0x108>
				sd_card_start_byte_in_sector = j + 4;
  802038:	31c00104 	addi	r7,r6,4
  80203c:	d1e74a15 	stw	r7,-25304(gp)
  802040:	003fbb06 	br	801f30 <sd_read+0x24>
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  802044:	d0a74917 	ldw	r2,-25308(gp)
		sd_card_start_byte_in_sector = 0;
  802048:	d0274a15 	stw	zero,-25304(gp)
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  80204c:	11000044 	addi	r4,r2,1
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }

	while (sd_card_curr_read_sector < sd_card_sectors_num){
  802050:	d0a74b17 	ldw	r2,-25300(gp)
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  802054:	d1274915 	stw	r4,-25308(gp)
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }

	while (sd_card_curr_read_sector < sd_card_sectors_num){
  802058:	20bfb50e 	bge	r4,r2,801f30 <sd_read+0x24>
			if (bytes_read >= count) {
				sd_card_start_byte_in_sector = j + 4;
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);
  80205c:	61c5c83a 	sub	r2,r12,r7
  802060:	13008004 	addi	r12,r2,512
  802064:	003fc806 	br	801f88 <sd_read+0x7c>
 */
int sd_read(void* buf, int count) {
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }
  802068:	023fffc4 	movi	r8,-1
  80206c:	003fb006 	br	801f30 <sd_read+0x24>

	while (sd_card_curr_read_sector < sd_card_sectors_num){
		sd_card_start_read_sector(sd_card_curr_read_sector);
		if(!sd_card_wait_read_sector()){
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
  802070:	d1674917 	ldw	r5,-25308(gp)
  802074:	01002074 	movhi	r4,129
  802078:	210e6c04 	addi	r4,r4,14768
  80207c:	0803dec0 	call	803dec <printf>
  802080:	023fff84 	movi	r8,-2
  802084:	003faa06 	br	801f30 <sd_read+0x24>

00802088 <ceil>:
  802088:	2805d53a 	srai	r2,r5,20
  80208c:	defff604 	addi	sp,sp,-40
  802090:	dd800615 	stw	r22,24(sp)
  802094:	10c1ffcc 	andi	r3,r2,2047
  802098:	1dbf0044 	addi	r22,r3,-1023
  80209c:	008004c4 	movi	r2,19
  8020a0:	ddc00715 	stw	r23,28(sp)
  8020a4:	dc800215 	stw	r18,8(sp)
  8020a8:	dc400115 	stw	r17,4(sp)
  8020ac:	dc000015 	stw	r16,0(sp)
  8020b0:	dfc00915 	stw	ra,36(sp)
  8020b4:	df000815 	stw	fp,32(sp)
  8020b8:	dd400515 	stw	r21,20(sp)
  8020bc:	dd000415 	stw	r20,16(sp)
  8020c0:	dcc00315 	stw	r19,12(sp)
  8020c4:	2021883a 	mov	r16,r4
  8020c8:	2823883a 	mov	r17,r5
  8020cc:	282f883a 	mov	r23,r5
  8020d0:	2025883a 	mov	r18,r4
  8020d4:	15802c16 	blt	r2,r22,802188 <ceil+0x100>
  8020d8:	b0005416 	blt	r22,zero,80222c <ceil+0x1a4>
  8020dc:	00800434 	movhi	r2,16
  8020e0:	10bfffc4 	addi	r2,r2,-1
  8020e4:	15b9d83a 	sra	fp,r2,r22
  8020e8:	282f883a 	mov	r23,r5
  8020ec:	e144703a 	and	r2,fp,r5
  8020f0:	1104b03a 	or	r2,r2,r4
  8020f4:	10001626 	beq	r2,zero,802150 <ceil+0xc8>
  8020f8:	00a20034 	movhi	r2,34816
  8020fc:	109d6704 	addi	r2,r2,30108
  802100:	00df8e34 	movhi	r3,32312
  802104:	18f90f04 	addi	r3,r3,-7108
  802108:	180f883a 	mov	r7,r3
  80210c:	100d883a 	mov	r6,r2
  802110:	080272c0 	call	80272c <__adddf3>
  802114:	180b883a 	mov	r5,r3
  802118:	000d883a 	mov	r6,zero
  80211c:	000f883a 	mov	r7,zero
  802120:	1009883a 	mov	r4,r2
  802124:	0802b640 	call	802b64 <__gtdf2>
  802128:	0080070e 	bge	zero,r2,802148 <ceil+0xc0>
  80212c:	0440030e 	bge	zero,r17,80213c <ceil+0xb4>
  802130:	00800434 	movhi	r2,16
  802134:	1585d83a 	sra	r2,r2,r22
  802138:	88af883a 	add	r23,r17,r2
  80213c:	0704303a 	nor	r2,zero,fp
  802140:	b8ae703a 	and	r23,r23,r2
  802144:	0025883a 	mov	r18,zero
  802148:	9021883a 	mov	r16,r18
  80214c:	b823883a 	mov	r17,r23
  802150:	8005883a 	mov	r2,r16
  802154:	8807883a 	mov	r3,r17
  802158:	dfc00917 	ldw	ra,36(sp)
  80215c:	df000817 	ldw	fp,32(sp)
  802160:	ddc00717 	ldw	r23,28(sp)
  802164:	dd800617 	ldw	r22,24(sp)
  802168:	dd400517 	ldw	r21,20(sp)
  80216c:	dd000417 	ldw	r20,16(sp)
  802170:	dcc00317 	ldw	r19,12(sp)
  802174:	dc800217 	ldw	r18,8(sp)
  802178:	dc400117 	ldw	r17,4(sp)
  80217c:	dc000017 	ldw	r16,0(sp)
  802180:	dec00a04 	addi	sp,sp,40
  802184:	f800283a 	ret
  802188:	00800cc4 	movi	r2,51
  80218c:	15801f16 	blt	r2,r22,80220c <ceil+0x184>
  802190:	18befb44 	addi	r2,r3,-1043
  802194:	00ffffc4 	movi	r3,-1
  802198:	18b8d83a 	srl	fp,r3,r2
  80219c:	e104703a 	and	r2,fp,r4
  8021a0:	103feb26 	beq	r2,zero,802150 <ceil+0xc8>
  8021a4:	00a20034 	movhi	r2,34816
  8021a8:	109d6704 	addi	r2,r2,30108
  8021ac:	00df8e34 	movhi	r3,32312
  8021b0:	18f90f04 	addi	r3,r3,-7108
  8021b4:	180f883a 	mov	r7,r3
  8021b8:	100d883a 	mov	r6,r2
  8021bc:	080272c0 	call	80272c <__adddf3>
  8021c0:	180b883a 	mov	r5,r3
  8021c4:	000d883a 	mov	r6,zero
  8021c8:	000f883a 	mov	r7,zero
  8021cc:	1009883a 	mov	r4,r2
  8021d0:	0802b640 	call	802b64 <__gtdf2>
  8021d4:	0080250e 	bge	zero,r2,80226c <ceil+0x1e4>
  8021d8:	0440090e 	bge	zero,r17,802200 <ceil+0x178>
  8021dc:	00800504 	movi	r2,20
  8021e0:	b0802926 	beq	r22,r2,802288 <ceil+0x200>
  8021e4:	00c00d04 	movi	r3,52
  8021e8:	1d87c83a 	sub	r3,r3,r22
  8021ec:	00800044 	movi	r2,1
  8021f0:	10c4983a 	sll	r2,r2,r3
  8021f4:	8085883a 	add	r2,r16,r2
  8021f8:	14001e36 	bltu	r2,r16,802274 <ceil+0x1ec>
  8021fc:	1025883a 	mov	r18,r2
  802200:	0704303a 	nor	r2,zero,fp
  802204:	90a4703a 	and	r18,r18,r2
  802208:	003fcf06 	br	802148 <ceil+0xc0>
  80220c:	00810004 	movi	r2,1024
  802210:	b0bfcf1e 	bne	r22,r2,802150 <ceil+0xc8>
  802214:	800d883a 	mov	r6,r16
  802218:	280f883a 	mov	r7,r5
  80221c:	080272c0 	call	80272c <__adddf3>
  802220:	1021883a 	mov	r16,r2
  802224:	1823883a 	mov	r17,r3
  802228:	003fc906 	br	802150 <ceil+0xc8>
  80222c:	00a20034 	movhi	r2,34816
  802230:	109d6704 	addi	r2,r2,30108
  802234:	00df8e34 	movhi	r3,32312
  802238:	18f90f04 	addi	r3,r3,-7108
  80223c:	180f883a 	mov	r7,r3
  802240:	100d883a 	mov	r6,r2
  802244:	080272c0 	call	80272c <__adddf3>
  802248:	180b883a 	mov	r5,r3
  80224c:	000d883a 	mov	r6,zero
  802250:	000f883a 	mov	r7,zero
  802254:	1009883a 	mov	r4,r2
  802258:	0802b640 	call	802b64 <__gtdf2>
  80225c:	00bfba0e 	bge	zero,r2,802148 <ceil+0xc0>
  802260:	88000b16 	blt	r17,zero,802290 <ceil+0x208>
  802264:	8c04b03a 	or	r2,r17,r16
  802268:	1000041e 	bne	r2,zero,80227c <ceil+0x1f4>
  80226c:	882f883a 	mov	r23,r17
  802270:	003fb506 	br	802148 <ceil+0xc0>
  802274:	8dc00044 	addi	r23,r17,1
  802278:	003fe006 	br	8021fc <ceil+0x174>
  80227c:	05cffc34 	movhi	r23,16368
  802280:	0025883a 	mov	r18,zero
  802284:	003fb006 	br	802148 <ceil+0xc0>
  802288:	8dc00044 	addi	r23,r17,1
  80228c:	003fdc06 	br	802200 <ceil+0x178>
  802290:	05e00034 	movhi	r23,32768
  802294:	0025883a 	mov	r18,zero
  802298:	003fab06 	br	802148 <ceil+0xc0>

0080229c <_fpadd_parts>:
  80229c:	defff804 	addi	sp,sp,-32
  8022a0:	dcc00315 	stw	r19,12(sp)
  8022a4:	2027883a 	mov	r19,r4
  8022a8:	21000017 	ldw	r4,0(r4)
  8022ac:	00c00044 	movi	r3,1
  8022b0:	dd400515 	stw	r21,20(sp)
  8022b4:	dd000415 	stw	r20,16(sp)
  8022b8:	ddc00715 	stw	r23,28(sp)
  8022bc:	dd800615 	stw	r22,24(sp)
  8022c0:	dc800215 	stw	r18,8(sp)
  8022c4:	dc400115 	stw	r17,4(sp)
  8022c8:	dc000015 	stw	r16,0(sp)
  8022cc:	282b883a 	mov	r21,r5
  8022d0:	3029883a 	mov	r20,r6
  8022d4:	1900632e 	bgeu	r3,r4,802464 <_fpadd_parts+0x1c8>
  8022d8:	28800017 	ldw	r2,0(r5)
  8022dc:	1880812e 	bgeu	r3,r2,8024e4 <_fpadd_parts+0x248>
  8022e0:	00c00104 	movi	r3,4
  8022e4:	20c0dc26 	beq	r4,r3,802658 <_fpadd_parts+0x3bc>
  8022e8:	10c07e26 	beq	r2,r3,8024e4 <_fpadd_parts+0x248>
  8022ec:	00c00084 	movi	r3,2
  8022f0:	10c06726 	beq	r2,r3,802490 <_fpadd_parts+0x1f4>
  8022f4:	20c07b26 	beq	r4,r3,8024e4 <_fpadd_parts+0x248>
  8022f8:	9dc00217 	ldw	r23,8(r19)
  8022fc:	28c00217 	ldw	r3,8(r5)
  802300:	9c400317 	ldw	r17,12(r19)
  802304:	2bc00317 	ldw	r15,12(r5)
  802308:	b8cdc83a 	sub	r6,r23,r3
  80230c:	9c800417 	ldw	r18,16(r19)
  802310:	2c000417 	ldw	r16,16(r5)
  802314:	3009883a 	mov	r4,r6
  802318:	30009716 	blt	r6,zero,802578 <_fpadd_parts+0x2dc>
  80231c:	00800fc4 	movi	r2,63
  802320:	11806b16 	blt	r2,r6,8024d0 <_fpadd_parts+0x234>
  802324:	0100a40e 	bge	zero,r4,8025b8 <_fpadd_parts+0x31c>
  802328:	35bff804 	addi	r22,r6,-32
  80232c:	b000bc16 	blt	r22,zero,802620 <_fpadd_parts+0x384>
  802330:	8596d83a 	srl	r11,r16,r22
  802334:	0019883a 	mov	r12,zero
  802338:	0013883a 	mov	r9,zero
  80233c:	01000044 	movi	r4,1
  802340:	0015883a 	mov	r10,zero
  802344:	b000be16 	blt	r22,zero,802640 <_fpadd_parts+0x3a4>
  802348:	2590983a 	sll	r8,r4,r22
  80234c:	000f883a 	mov	r7,zero
  802350:	00bfffc4 	movi	r2,-1
  802354:	3889883a 	add	r4,r7,r2
  802358:	408b883a 	add	r5,r8,r2
  80235c:	21cd803a 	cmpltu	r6,r4,r7
  802360:	314b883a 	add	r5,r6,r5
  802364:	7904703a 	and	r2,r15,r4
  802368:	8146703a 	and	r3,r16,r5
  80236c:	10c4b03a 	or	r2,r2,r3
  802370:	10000226 	beq	r2,zero,80237c <_fpadd_parts+0xe0>
  802374:	02400044 	movi	r9,1
  802378:	0015883a 	mov	r10,zero
  80237c:	5a5eb03a 	or	r15,r11,r9
  802380:	62a0b03a 	or	r16,r12,r10
  802384:	99400117 	ldw	r5,4(r19)
  802388:	a8800117 	ldw	r2,4(r21)
  80238c:	28806e26 	beq	r5,r2,802548 <_fpadd_parts+0x2ac>
  802390:	28006626 	beq	r5,zero,80252c <_fpadd_parts+0x290>
  802394:	7c45c83a 	sub	r2,r15,r17
  802398:	7889803a 	cmpltu	r4,r15,r2
  80239c:	8487c83a 	sub	r3,r16,r18
  8023a0:	1909c83a 	sub	r4,r3,r4
  8023a4:	100d883a 	mov	r6,r2
  8023a8:	200f883a 	mov	r7,r4
  8023ac:	38007716 	blt	r7,zero,80258c <_fpadd_parts+0x2f0>
  8023b0:	a5c00215 	stw	r23,8(r20)
  8023b4:	a1c00415 	stw	r7,16(r20)
  8023b8:	a0000115 	stw	zero,4(r20)
  8023bc:	a1800315 	stw	r6,12(r20)
  8023c0:	a2000317 	ldw	r8,12(r20)
  8023c4:	a2400417 	ldw	r9,16(r20)
  8023c8:	00bfffc4 	movi	r2,-1
  8023cc:	408b883a 	add	r5,r8,r2
  8023d0:	2a09803a 	cmpltu	r4,r5,r8
  8023d4:	488d883a 	add	r6,r9,r2
  8023d8:	01c40034 	movhi	r7,4096
  8023dc:	39ffffc4 	addi	r7,r7,-1
  8023e0:	218d883a 	add	r6,r4,r6
  8023e4:	39801736 	bltu	r7,r6,802444 <_fpadd_parts+0x1a8>
  8023e8:	31c06526 	beq	r6,r7,802580 <_fpadd_parts+0x2e4>
  8023ec:	a3000217 	ldw	r12,8(r20)
  8023f0:	4209883a 	add	r4,r8,r8
  8023f4:	00bfffc4 	movi	r2,-1
  8023f8:	220f803a 	cmpltu	r7,r4,r8
  8023fc:	4a4b883a 	add	r5,r9,r9
  802400:	394f883a 	add	r7,r7,r5
  802404:	2095883a 	add	r10,r4,r2
  802408:	3897883a 	add	r11,r7,r2
  80240c:	510d803a 	cmpltu	r6,r10,r4
  802410:	6099883a 	add	r12,r12,r2
  802414:	32d7883a 	add	r11,r6,r11
  802418:	00840034 	movhi	r2,4096
  80241c:	10bfffc4 	addi	r2,r2,-1
  802420:	2011883a 	mov	r8,r4
  802424:	3813883a 	mov	r9,r7
  802428:	a1000315 	stw	r4,12(r20)
  80242c:	a1c00415 	stw	r7,16(r20)
  802430:	a3000215 	stw	r12,8(r20)
  802434:	12c00336 	bltu	r2,r11,802444 <_fpadd_parts+0x1a8>
  802438:	58bfed1e 	bne	r11,r2,8023f0 <_fpadd_parts+0x154>
  80243c:	00bfff84 	movi	r2,-2
  802440:	12bfeb2e 	bgeu	r2,r10,8023f0 <_fpadd_parts+0x154>
  802444:	a2800417 	ldw	r10,16(r20)
  802448:	008000c4 	movi	r2,3
  80244c:	00c80034 	movhi	r3,8192
  802450:	18ffffc4 	addi	r3,r3,-1
  802454:	a2400317 	ldw	r9,12(r20)
  802458:	a0800015 	stw	r2,0(r20)
  80245c:	1a802336 	bltu	r3,r10,8024ec <_fpadd_parts+0x250>
  802460:	a027883a 	mov	r19,r20
  802464:	9805883a 	mov	r2,r19
  802468:	ddc00717 	ldw	r23,28(sp)
  80246c:	dd800617 	ldw	r22,24(sp)
  802470:	dd400517 	ldw	r21,20(sp)
  802474:	dd000417 	ldw	r20,16(sp)
  802478:	dcc00317 	ldw	r19,12(sp)
  80247c:	dc800217 	ldw	r18,8(sp)
  802480:	dc400117 	ldw	r17,4(sp)
  802484:	dc000017 	ldw	r16,0(sp)
  802488:	dec00804 	addi	sp,sp,32
  80248c:	f800283a 	ret
  802490:	20fff41e 	bne	r4,r3,802464 <_fpadd_parts+0x1c8>
  802494:	31000015 	stw	r4,0(r6)
  802498:	98800117 	ldw	r2,4(r19)
  80249c:	30800115 	stw	r2,4(r6)
  8024a0:	98c00217 	ldw	r3,8(r19)
  8024a4:	30c00215 	stw	r3,8(r6)
  8024a8:	98800317 	ldw	r2,12(r19)
  8024ac:	30800315 	stw	r2,12(r6)
  8024b0:	98c00417 	ldw	r3,16(r19)
  8024b4:	30c00415 	stw	r3,16(r6)
  8024b8:	98800117 	ldw	r2,4(r19)
  8024bc:	28c00117 	ldw	r3,4(r5)
  8024c0:	3027883a 	mov	r19,r6
  8024c4:	10c4703a 	and	r2,r2,r3
  8024c8:	30800115 	stw	r2,4(r6)
  8024cc:	003fe506 	br	802464 <_fpadd_parts+0x1c8>
  8024d0:	1dc02616 	blt	r3,r23,80256c <_fpadd_parts+0x2d0>
  8024d4:	0023883a 	mov	r17,zero
  8024d8:	182f883a 	mov	r23,r3
  8024dc:	0025883a 	mov	r18,zero
  8024e0:	003fa806 	br	802384 <_fpadd_parts+0xe8>
  8024e4:	a827883a 	mov	r19,r21
  8024e8:	003fde06 	br	802464 <_fpadd_parts+0x1c8>
  8024ec:	01800044 	movi	r6,1
  8024f0:	500497fa 	slli	r2,r10,31
  8024f4:	4808d07a 	srli	r4,r9,1
  8024f8:	518ad83a 	srl	r5,r10,r6
  8024fc:	a2000217 	ldw	r8,8(r20)
  802500:	1108b03a 	or	r4,r2,r4
  802504:	0007883a 	mov	r3,zero
  802508:	4984703a 	and	r2,r9,r6
  80250c:	208cb03a 	or	r6,r4,r2
  802510:	28ceb03a 	or	r7,r5,r3
  802514:	42000044 	addi	r8,r8,1
  802518:	a027883a 	mov	r19,r20
  80251c:	a1c00415 	stw	r7,16(r20)
  802520:	a2000215 	stw	r8,8(r20)
  802524:	a1800315 	stw	r6,12(r20)
  802528:	003fce06 	br	802464 <_fpadd_parts+0x1c8>
  80252c:	8bc5c83a 	sub	r2,r17,r15
  802530:	8889803a 	cmpltu	r4,r17,r2
  802534:	9407c83a 	sub	r3,r18,r16
  802538:	1909c83a 	sub	r4,r3,r4
  80253c:	100d883a 	mov	r6,r2
  802540:	200f883a 	mov	r7,r4
  802544:	003f9906 	br	8023ac <_fpadd_parts+0x110>
  802548:	8bc5883a 	add	r2,r17,r15
  80254c:	1449803a 	cmpltu	r4,r2,r17
  802550:	9407883a 	add	r3,r18,r16
  802554:	20c9883a 	add	r4,r4,r3
  802558:	a1400115 	stw	r5,4(r20)
  80255c:	a5c00215 	stw	r23,8(r20)
  802560:	a0800315 	stw	r2,12(r20)
  802564:	a1000415 	stw	r4,16(r20)
  802568:	003fb606 	br	802444 <_fpadd_parts+0x1a8>
  80256c:	001f883a 	mov	r15,zero
  802570:	0021883a 	mov	r16,zero
  802574:	003f8306 	br	802384 <_fpadd_parts+0xe8>
  802578:	018dc83a 	sub	r6,zero,r6
  80257c:	003f6706 	br	80231c <_fpadd_parts+0x80>
  802580:	00bfff84 	movi	r2,-2
  802584:	117faf36 	bltu	r2,r5,802444 <_fpadd_parts+0x1a8>
  802588:	003f9806 	br	8023ec <_fpadd_parts+0x150>
  80258c:	0005883a 	mov	r2,zero
  802590:	1189c83a 	sub	r4,r2,r6
  802594:	1105803a 	cmpltu	r2,r2,r4
  802598:	01cbc83a 	sub	r5,zero,r7
  80259c:	2885c83a 	sub	r2,r5,r2
  8025a0:	01800044 	movi	r6,1
  8025a4:	a1800115 	stw	r6,4(r20)
  8025a8:	a5c00215 	stw	r23,8(r20)
  8025ac:	a1000315 	stw	r4,12(r20)
  8025b0:	a0800415 	stw	r2,16(r20)
  8025b4:	003f8206 	br	8023c0 <_fpadd_parts+0x124>
  8025b8:	203f7226 	beq	r4,zero,802384 <_fpadd_parts+0xe8>
  8025bc:	35bff804 	addi	r22,r6,-32
  8025c0:	b9af883a 	add	r23,r23,r6
  8025c4:	b0003116 	blt	r22,zero,80268c <_fpadd_parts+0x3f0>
  8025c8:	959ad83a 	srl	r13,r18,r22
  8025cc:	001d883a 	mov	r14,zero
  8025d0:	000f883a 	mov	r7,zero
  8025d4:	01000044 	movi	r4,1
  8025d8:	0011883a 	mov	r8,zero
  8025dc:	b0002516 	blt	r22,zero,802674 <_fpadd_parts+0x3d8>
  8025e0:	2594983a 	sll	r10,r4,r22
  8025e4:	0013883a 	mov	r9,zero
  8025e8:	00bfffc4 	movi	r2,-1
  8025ec:	4889883a 	add	r4,r9,r2
  8025f0:	508b883a 	add	r5,r10,r2
  8025f4:	224d803a 	cmpltu	r6,r4,r9
  8025f8:	314b883a 	add	r5,r6,r5
  8025fc:	8904703a 	and	r2,r17,r4
  802600:	9146703a 	and	r3,r18,r5
  802604:	10c4b03a 	or	r2,r2,r3
  802608:	10000226 	beq	r2,zero,802614 <_fpadd_parts+0x378>
  80260c:	01c00044 	movi	r7,1
  802610:	0011883a 	mov	r8,zero
  802614:	69e2b03a 	or	r17,r13,r7
  802618:	7224b03a 	or	r18,r14,r8
  80261c:	003f5906 	br	802384 <_fpadd_parts+0xe8>
  802620:	8407883a 	add	r3,r16,r16
  802624:	008007c4 	movi	r2,31
  802628:	1185c83a 	sub	r2,r2,r6
  80262c:	1886983a 	sll	r3,r3,r2
  802630:	7996d83a 	srl	r11,r15,r6
  802634:	8198d83a 	srl	r12,r16,r6
  802638:	1ad6b03a 	or	r11,r3,r11
  80263c:	003f3e06 	br	802338 <_fpadd_parts+0x9c>
  802640:	2006d07a 	srli	r3,r4,1
  802644:	008007c4 	movi	r2,31
  802648:	1185c83a 	sub	r2,r2,r6
  80264c:	1890d83a 	srl	r8,r3,r2
  802650:	218e983a 	sll	r7,r4,r6
  802654:	003f3e06 	br	802350 <_fpadd_parts+0xb4>
  802658:	113f821e 	bne	r2,r4,802464 <_fpadd_parts+0x1c8>
  80265c:	28c00117 	ldw	r3,4(r5)
  802660:	98800117 	ldw	r2,4(r19)
  802664:	10ff7f26 	beq	r2,r3,802464 <_fpadd_parts+0x1c8>
  802668:	04c02074 	movhi	r19,129
  80266c:	9cce7304 	addi	r19,r19,14796
  802670:	003f7c06 	br	802464 <_fpadd_parts+0x1c8>
  802674:	2006d07a 	srli	r3,r4,1
  802678:	008007c4 	movi	r2,31
  80267c:	1185c83a 	sub	r2,r2,r6
  802680:	1894d83a 	srl	r10,r3,r2
  802684:	2192983a 	sll	r9,r4,r6
  802688:	003fd706 	br	8025e8 <_fpadd_parts+0x34c>
  80268c:	9487883a 	add	r3,r18,r18
  802690:	008007c4 	movi	r2,31
  802694:	1185c83a 	sub	r2,r2,r6
  802698:	1886983a 	sll	r3,r3,r2
  80269c:	899ad83a 	srl	r13,r17,r6
  8026a0:	919cd83a 	srl	r14,r18,r6
  8026a4:	1b5ab03a 	or	r13,r3,r13
  8026a8:	003fc906 	br	8025d0 <_fpadd_parts+0x334>

008026ac <__subdf3>:
  8026ac:	deffea04 	addi	sp,sp,-88
  8026b0:	dcc01415 	stw	r19,80(sp)
  8026b4:	dcc00404 	addi	r19,sp,16
  8026b8:	2011883a 	mov	r8,r4
  8026bc:	2813883a 	mov	r9,r5
  8026c0:	dc401315 	stw	r17,76(sp)
  8026c4:	d809883a 	mov	r4,sp
  8026c8:	980b883a 	mov	r5,r19
  8026cc:	dc400904 	addi	r17,sp,36
  8026d0:	dfc01515 	stw	ra,84(sp)
  8026d4:	da400115 	stw	r9,4(sp)
  8026d8:	d9c00315 	stw	r7,12(sp)
  8026dc:	da000015 	stw	r8,0(sp)
  8026e0:	d9800215 	stw	r6,8(sp)
  8026e4:	08032840 	call	803284 <__unpack_d>
  8026e8:	d9000204 	addi	r4,sp,8
  8026ec:	880b883a 	mov	r5,r17
  8026f0:	08032840 	call	803284 <__unpack_d>
  8026f4:	d8800a17 	ldw	r2,40(sp)
  8026f8:	880b883a 	mov	r5,r17
  8026fc:	9809883a 	mov	r4,r19
  802700:	d9800e04 	addi	r6,sp,56
  802704:	1080005c 	xori	r2,r2,1
  802708:	d8800a15 	stw	r2,40(sp)
  80270c:	080229c0 	call	80229c <_fpadd_parts>
  802710:	1009883a 	mov	r4,r2
  802714:	0802f700 	call	802f70 <__pack_d>
  802718:	dfc01517 	ldw	ra,84(sp)
  80271c:	dcc01417 	ldw	r19,80(sp)
  802720:	dc401317 	ldw	r17,76(sp)
  802724:	dec01604 	addi	sp,sp,88
  802728:	f800283a 	ret

0080272c <__adddf3>:
  80272c:	deffea04 	addi	sp,sp,-88
  802730:	dcc01415 	stw	r19,80(sp)
  802734:	dcc00404 	addi	r19,sp,16
  802738:	2011883a 	mov	r8,r4
  80273c:	2813883a 	mov	r9,r5
  802740:	dc401315 	stw	r17,76(sp)
  802744:	d809883a 	mov	r4,sp
  802748:	980b883a 	mov	r5,r19
  80274c:	dc400904 	addi	r17,sp,36
  802750:	dfc01515 	stw	ra,84(sp)
  802754:	da400115 	stw	r9,4(sp)
  802758:	d9c00315 	stw	r7,12(sp)
  80275c:	da000015 	stw	r8,0(sp)
  802760:	d9800215 	stw	r6,8(sp)
  802764:	08032840 	call	803284 <__unpack_d>
  802768:	d9000204 	addi	r4,sp,8
  80276c:	880b883a 	mov	r5,r17
  802770:	08032840 	call	803284 <__unpack_d>
  802774:	d9800e04 	addi	r6,sp,56
  802778:	9809883a 	mov	r4,r19
  80277c:	880b883a 	mov	r5,r17
  802780:	080229c0 	call	80229c <_fpadd_parts>
  802784:	1009883a 	mov	r4,r2
  802788:	0802f700 	call	802f70 <__pack_d>
  80278c:	dfc01517 	ldw	ra,84(sp)
  802790:	dcc01417 	ldw	r19,80(sp)
  802794:	dc401317 	ldw	r17,76(sp)
  802798:	dec01604 	addi	sp,sp,88
  80279c:	f800283a 	ret

008027a0 <__muldf3>:
  8027a0:	deffe004 	addi	sp,sp,-128
  8027a4:	dc401815 	stw	r17,96(sp)
  8027a8:	dc400404 	addi	r17,sp,16
  8027ac:	2011883a 	mov	r8,r4
  8027b0:	2813883a 	mov	r9,r5
  8027b4:	dc001715 	stw	r16,92(sp)
  8027b8:	d809883a 	mov	r4,sp
  8027bc:	880b883a 	mov	r5,r17
  8027c0:	dc000904 	addi	r16,sp,36
  8027c4:	dfc01f15 	stw	ra,124(sp)
  8027c8:	da400115 	stw	r9,4(sp)
  8027cc:	d9c00315 	stw	r7,12(sp)
  8027d0:	da000015 	stw	r8,0(sp)
  8027d4:	d9800215 	stw	r6,8(sp)
  8027d8:	ddc01e15 	stw	r23,120(sp)
  8027dc:	dd801d15 	stw	r22,116(sp)
  8027e0:	dd401c15 	stw	r21,112(sp)
  8027e4:	dd001b15 	stw	r20,108(sp)
  8027e8:	dcc01a15 	stw	r19,104(sp)
  8027ec:	dc801915 	stw	r18,100(sp)
  8027f0:	08032840 	call	803284 <__unpack_d>
  8027f4:	d9000204 	addi	r4,sp,8
  8027f8:	800b883a 	mov	r5,r16
  8027fc:	08032840 	call	803284 <__unpack_d>
  802800:	d9000417 	ldw	r4,16(sp)
  802804:	00800044 	movi	r2,1
  802808:	1100102e 	bgeu	r2,r4,80284c <__muldf3+0xac>
  80280c:	d8c00917 	ldw	r3,36(sp)
  802810:	10c0062e 	bgeu	r2,r3,80282c <__muldf3+0x8c>
  802814:	00800104 	movi	r2,4
  802818:	20800a26 	beq	r4,r2,802844 <__muldf3+0xa4>
  80281c:	1880cc26 	beq	r3,r2,802b50 <__muldf3+0x3b0>
  802820:	00800084 	movi	r2,2
  802824:	20800926 	beq	r4,r2,80284c <__muldf3+0xac>
  802828:	1880191e 	bne	r3,r2,802890 <__muldf3+0xf0>
  80282c:	d8c00a17 	ldw	r3,40(sp)
  802830:	d8800517 	ldw	r2,20(sp)
  802834:	8009883a 	mov	r4,r16
  802838:	10c4c03a 	cmpne	r2,r2,r3
  80283c:	d8800a15 	stw	r2,40(sp)
  802840:	00000706 	br	802860 <__muldf3+0xc0>
  802844:	00800084 	movi	r2,2
  802848:	1880c326 	beq	r3,r2,802b58 <__muldf3+0x3b8>
  80284c:	d8800517 	ldw	r2,20(sp)
  802850:	d8c00a17 	ldw	r3,40(sp)
  802854:	8809883a 	mov	r4,r17
  802858:	10c4c03a 	cmpne	r2,r2,r3
  80285c:	d8800515 	stw	r2,20(sp)
  802860:	0802f700 	call	802f70 <__pack_d>
  802864:	dfc01f17 	ldw	ra,124(sp)
  802868:	ddc01e17 	ldw	r23,120(sp)
  80286c:	dd801d17 	ldw	r22,116(sp)
  802870:	dd401c17 	ldw	r21,112(sp)
  802874:	dd001b17 	ldw	r20,108(sp)
  802878:	dcc01a17 	ldw	r19,104(sp)
  80287c:	dc801917 	ldw	r18,100(sp)
  802880:	dc401817 	ldw	r17,96(sp)
  802884:	dc001717 	ldw	r16,92(sp)
  802888:	dec02004 	addi	sp,sp,128
  80288c:	f800283a 	ret
  802890:	dd800717 	ldw	r22,28(sp)
  802894:	dc800c17 	ldw	r18,48(sp)
  802898:	002b883a 	mov	r21,zero
  80289c:	0023883a 	mov	r17,zero
  8028a0:	a80b883a 	mov	r5,r21
  8028a4:	b00d883a 	mov	r6,r22
  8028a8:	880f883a 	mov	r7,r17
  8028ac:	ddc00817 	ldw	r23,32(sp)
  8028b0:	dcc00d17 	ldw	r19,52(sp)
  8028b4:	9009883a 	mov	r4,r18
  8028b8:	0802e580 	call	802e58 <__muldi3>
  8028bc:	001b883a 	mov	r13,zero
  8028c0:	680f883a 	mov	r7,r13
  8028c4:	b009883a 	mov	r4,r22
  8028c8:	000b883a 	mov	r5,zero
  8028cc:	980d883a 	mov	r6,r19
  8028d0:	b82d883a 	mov	r22,r23
  8028d4:	002f883a 	mov	r23,zero
  8028d8:	db401615 	stw	r13,88(sp)
  8028dc:	d8801315 	stw	r2,76(sp)
  8028e0:	d8c01415 	stw	r3,80(sp)
  8028e4:	dcc01515 	stw	r19,84(sp)
  8028e8:	0802e580 	call	802e58 <__muldi3>
  8028ec:	b00d883a 	mov	r6,r22
  8028f0:	000b883a 	mov	r5,zero
  8028f4:	9009883a 	mov	r4,r18
  8028f8:	b80f883a 	mov	r7,r23
  8028fc:	1021883a 	mov	r16,r2
  802900:	1823883a 	mov	r17,r3
  802904:	0802e580 	call	802e58 <__muldi3>
  802908:	8085883a 	add	r2,r16,r2
  80290c:	140d803a 	cmpltu	r6,r2,r16
  802910:	88c7883a 	add	r3,r17,r3
  802914:	30cd883a 	add	r6,r6,r3
  802918:	1029883a 	mov	r20,r2
  80291c:	302b883a 	mov	r21,r6
  802920:	da801317 	ldw	r10,76(sp)
  802924:	dac01417 	ldw	r11,80(sp)
  802928:	db001517 	ldw	r12,84(sp)
  80292c:	db401617 	ldw	r13,88(sp)
  802930:	3440612e 	bgeu	r6,r17,802ab8 <__muldf3+0x318>
  802934:	0009883a 	mov	r4,zero
  802938:	5105883a 	add	r2,r10,r4
  80293c:	128d803a 	cmpltu	r6,r2,r10
  802940:	5d07883a 	add	r3,r11,r20
  802944:	30cd883a 	add	r6,r6,r3
  802948:	0021883a 	mov	r16,zero
  80294c:	04400044 	movi	r17,1
  802950:	1025883a 	mov	r18,r2
  802954:	3027883a 	mov	r19,r6
  802958:	32c06236 	bltu	r6,r11,802ae4 <__muldf3+0x344>
  80295c:	59807a26 	beq	r11,r6,802b48 <__muldf3+0x3a8>
  802960:	680b883a 	mov	r5,r13
  802964:	b80f883a 	mov	r7,r23
  802968:	6009883a 	mov	r4,r12
  80296c:	b00d883a 	mov	r6,r22
  802970:	0802e580 	call	802e58 <__muldi3>
  802974:	1009883a 	mov	r4,r2
  802978:	000f883a 	mov	r7,zero
  80297c:	1545883a 	add	r2,r2,r21
  802980:	1111803a 	cmpltu	r8,r2,r4
  802984:	19c7883a 	add	r3,r3,r7
  802988:	40c7883a 	add	r3,r8,r3
  80298c:	88cb883a 	add	r5,r17,r3
  802990:	d8c00617 	ldw	r3,24(sp)
  802994:	8089883a 	add	r4,r16,r2
  802998:	d8800b17 	ldw	r2,44(sp)
  80299c:	18c00104 	addi	r3,r3,4
  8029a0:	240d803a 	cmpltu	r6,r4,r16
  8029a4:	10c7883a 	add	r3,r2,r3
  8029a8:	2013883a 	mov	r9,r4
  8029ac:	d8800a17 	ldw	r2,40(sp)
  8029b0:	d9000517 	ldw	r4,20(sp)
  8029b4:	314d883a 	add	r6,r6,r5
  8029b8:	3015883a 	mov	r10,r6
  8029bc:	2088c03a 	cmpne	r4,r4,r2
  8029c0:	00880034 	movhi	r2,8192
  8029c4:	10bfffc4 	addi	r2,r2,-1
  8029c8:	d9000f15 	stw	r4,60(sp)
  8029cc:	d8c01015 	stw	r3,64(sp)
  8029d0:	1180162e 	bgeu	r2,r6,802a2c <__muldf3+0x28c>
  8029d4:	1811883a 	mov	r8,r3
  8029d8:	101f883a 	mov	r15,r2
  8029dc:	980497fa 	slli	r2,r19,31
  8029e0:	9016d07a 	srli	r11,r18,1
  8029e4:	500697fa 	slli	r3,r10,31
  8029e8:	480cd07a 	srli	r6,r9,1
  8029ec:	500ed07a 	srli	r7,r10,1
  8029f0:	12d6b03a 	or	r11,r2,r11
  8029f4:	00800044 	movi	r2,1
  8029f8:	198cb03a 	or	r6,r3,r6
  8029fc:	4888703a 	and	r4,r9,r2
  802a00:	9818d07a 	srli	r12,r19,1
  802a04:	001b883a 	mov	r13,zero
  802a08:	03a00034 	movhi	r14,32768
  802a0c:	3013883a 	mov	r9,r6
  802a10:	3815883a 	mov	r10,r7
  802a14:	4091883a 	add	r8,r8,r2
  802a18:	20000226 	beq	r4,zero,802a24 <__muldf3+0x284>
  802a1c:	5b64b03a 	or	r18,r11,r13
  802a20:	63a6b03a 	or	r19,r12,r14
  802a24:	7abfed36 	bltu	r15,r10,8029dc <__muldf3+0x23c>
  802a28:	da001015 	stw	r8,64(sp)
  802a2c:	00840034 	movhi	r2,4096
  802a30:	10bfffc4 	addi	r2,r2,-1
  802a34:	12801436 	bltu	r2,r10,802a88 <__muldf3+0x2e8>
  802a38:	da001017 	ldw	r8,64(sp)
  802a3c:	101f883a 	mov	r15,r2
  802a40:	4a45883a 	add	r2,r9,r9
  802a44:	124d803a 	cmpltu	r6,r2,r9
  802a48:	5287883a 	add	r3,r10,r10
  802a4c:	9497883a 	add	r11,r18,r18
  802a50:	5c8f803a 	cmpltu	r7,r11,r18
  802a54:	9cd9883a 	add	r12,r19,r19
  802a58:	01000044 	movi	r4,1
  802a5c:	30cd883a 	add	r6,r6,r3
  802a60:	3b0f883a 	add	r7,r7,r12
  802a64:	423fffc4 	addi	r8,r8,-1
  802a68:	1013883a 	mov	r9,r2
  802a6c:	3015883a 	mov	r10,r6
  802a70:	111ab03a 	or	r13,r2,r4
  802a74:	98003016 	blt	r19,zero,802b38 <__muldf3+0x398>
  802a78:	5825883a 	mov	r18,r11
  802a7c:	3827883a 	mov	r19,r7
  802a80:	7abfef2e 	bgeu	r15,r10,802a40 <__muldf3+0x2a0>
  802a84:	da001015 	stw	r8,64(sp)
  802a88:	00803fc4 	movi	r2,255
  802a8c:	488e703a 	and	r7,r9,r2
  802a90:	00802004 	movi	r2,128
  802a94:	0007883a 	mov	r3,zero
  802a98:	0011883a 	mov	r8,zero
  802a9c:	38801826 	beq	r7,r2,802b00 <__muldf3+0x360>
  802aa0:	008000c4 	movi	r2,3
  802aa4:	d9000e04 	addi	r4,sp,56
  802aa8:	da801215 	stw	r10,72(sp)
  802aac:	d8800e15 	stw	r2,56(sp)
  802ab0:	da401115 	stw	r9,68(sp)
  802ab4:	003f6a06 	br	802860 <__muldf3+0xc0>
  802ab8:	89802126 	beq	r17,r6,802b40 <__muldf3+0x3a0>
  802abc:	0009883a 	mov	r4,zero
  802ac0:	5105883a 	add	r2,r10,r4
  802ac4:	128d803a 	cmpltu	r6,r2,r10
  802ac8:	5d07883a 	add	r3,r11,r20
  802acc:	30cd883a 	add	r6,r6,r3
  802ad0:	0021883a 	mov	r16,zero
  802ad4:	0023883a 	mov	r17,zero
  802ad8:	1025883a 	mov	r18,r2
  802adc:	3027883a 	mov	r19,r6
  802ae0:	32ff9e2e 	bgeu	r6,r11,80295c <__muldf3+0x1bc>
  802ae4:	00800044 	movi	r2,1
  802ae8:	8089883a 	add	r4,r16,r2
  802aec:	240d803a 	cmpltu	r6,r4,r16
  802af0:	344d883a 	add	r6,r6,r17
  802af4:	2021883a 	mov	r16,r4
  802af8:	3023883a 	mov	r17,r6
  802afc:	003f9806 	br	802960 <__muldf3+0x1c0>
  802b00:	403fe71e 	bne	r8,zero,802aa0 <__muldf3+0x300>
  802b04:	01004004 	movi	r4,256
  802b08:	4904703a 	and	r2,r9,r4
  802b0c:	10c4b03a 	or	r2,r2,r3
  802b10:	103fe31e 	bne	r2,zero,802aa0 <__muldf3+0x300>
  802b14:	94c4b03a 	or	r2,r18,r19
  802b18:	103fe126 	beq	r2,zero,802aa0 <__muldf3+0x300>
  802b1c:	49c5883a 	add	r2,r9,r7
  802b20:	1251803a 	cmpltu	r8,r2,r9
  802b24:	4291883a 	add	r8,r8,r10
  802b28:	013fc004 	movi	r4,-256
  802b2c:	1112703a 	and	r9,r2,r4
  802b30:	4015883a 	mov	r10,r8
  802b34:	003fda06 	br	802aa0 <__muldf3+0x300>
  802b38:	6813883a 	mov	r9,r13
  802b3c:	003fce06 	br	802a78 <__muldf3+0x2d8>
  802b40:	143f7c36 	bltu	r2,r16,802934 <__muldf3+0x194>
  802b44:	003fdd06 	br	802abc <__muldf3+0x31c>
  802b48:	12bf852e 	bgeu	r2,r10,802960 <__muldf3+0x1c0>
  802b4c:	003fe506 	br	802ae4 <__muldf3+0x344>
  802b50:	00800084 	movi	r2,2
  802b54:	20bf351e 	bne	r4,r2,80282c <__muldf3+0x8c>
  802b58:	01002074 	movhi	r4,129
  802b5c:	210e7304 	addi	r4,r4,14796
  802b60:	003f3f06 	br	802860 <__muldf3+0xc0>

00802b64 <__gtdf2>:
  802b64:	deffef04 	addi	sp,sp,-68
  802b68:	dc400f15 	stw	r17,60(sp)
  802b6c:	dc400404 	addi	r17,sp,16
  802b70:	2005883a 	mov	r2,r4
  802b74:	2807883a 	mov	r3,r5
  802b78:	dc000e15 	stw	r16,56(sp)
  802b7c:	d809883a 	mov	r4,sp
  802b80:	880b883a 	mov	r5,r17
  802b84:	dc000904 	addi	r16,sp,36
  802b88:	d8c00115 	stw	r3,4(sp)
  802b8c:	d8800015 	stw	r2,0(sp)
  802b90:	d9800215 	stw	r6,8(sp)
  802b94:	dfc01015 	stw	ra,64(sp)
  802b98:	d9c00315 	stw	r7,12(sp)
  802b9c:	08032840 	call	803284 <__unpack_d>
  802ba0:	d9000204 	addi	r4,sp,8
  802ba4:	800b883a 	mov	r5,r16
  802ba8:	08032840 	call	803284 <__unpack_d>
  802bac:	d8800417 	ldw	r2,16(sp)
  802bb0:	00c00044 	movi	r3,1
  802bb4:	01bfffc4 	movi	r6,-1
  802bb8:	1880062e 	bgeu	r3,r2,802bd4 <__gtdf2+0x70>
  802bbc:	d8800917 	ldw	r2,36(sp)
  802bc0:	8809883a 	mov	r4,r17
  802bc4:	800b883a 	mov	r5,r16
  802bc8:	1880022e 	bgeu	r3,r2,802bd4 <__gtdf2+0x70>
  802bcc:	08033bc0 	call	8033bc <__fpcmp_parts_d>
  802bd0:	100d883a 	mov	r6,r2
  802bd4:	3005883a 	mov	r2,r6
  802bd8:	dfc01017 	ldw	ra,64(sp)
  802bdc:	dc400f17 	ldw	r17,60(sp)
  802be0:	dc000e17 	ldw	r16,56(sp)
  802be4:	dec01104 	addi	sp,sp,68
  802be8:	f800283a 	ret

00802bec <__fixdfsi>:
  802bec:	defff804 	addi	sp,sp,-32
  802bf0:	2005883a 	mov	r2,r4
  802bf4:	2807883a 	mov	r3,r5
  802bf8:	d809883a 	mov	r4,sp
  802bfc:	d9400204 	addi	r5,sp,8
  802c00:	d8c00115 	stw	r3,4(sp)
  802c04:	d8800015 	stw	r2,0(sp)
  802c08:	dfc00715 	stw	ra,28(sp)
  802c0c:	08032840 	call	803284 <__unpack_d>
  802c10:	d8c00217 	ldw	r3,8(sp)
  802c14:	00800084 	movi	r2,2
  802c18:	1880051e 	bne	r3,r2,802c30 <__fixdfsi+0x44>
  802c1c:	0007883a 	mov	r3,zero
  802c20:	1805883a 	mov	r2,r3
  802c24:	dfc00717 	ldw	ra,28(sp)
  802c28:	dec00804 	addi	sp,sp,32
  802c2c:	f800283a 	ret
  802c30:	00800044 	movi	r2,1
  802c34:	10fff92e 	bgeu	r2,r3,802c1c <__fixdfsi+0x30>
  802c38:	00800104 	movi	r2,4
  802c3c:	18800426 	beq	r3,r2,802c50 <__fixdfsi+0x64>
  802c40:	d8c00417 	ldw	r3,16(sp)
  802c44:	183ff516 	blt	r3,zero,802c1c <__fixdfsi+0x30>
  802c48:	00800784 	movi	r2,30
  802c4c:	10c0080e 	bge	r2,r3,802c70 <__fixdfsi+0x84>
  802c50:	d8800317 	ldw	r2,12(sp)
  802c54:	1000121e 	bne	r2,zero,802ca0 <__fixdfsi+0xb4>
  802c58:	00e00034 	movhi	r3,32768
  802c5c:	18ffffc4 	addi	r3,r3,-1
  802c60:	1805883a 	mov	r2,r3
  802c64:	dfc00717 	ldw	ra,28(sp)
  802c68:	dec00804 	addi	sp,sp,32
  802c6c:	f800283a 	ret
  802c70:	00800f04 	movi	r2,60
  802c74:	10d1c83a 	sub	r8,r2,r3
  802c78:	40bff804 	addi	r2,r8,-32
  802c7c:	d9800517 	ldw	r6,20(sp)
  802c80:	d9c00617 	ldw	r7,24(sp)
  802c84:	10000816 	blt	r2,zero,802ca8 <__fixdfsi+0xbc>
  802c88:	3888d83a 	srl	r4,r7,r2
  802c8c:	d8800317 	ldw	r2,12(sp)
  802c90:	2007883a 	mov	r3,r4
  802c94:	103fe226 	beq	r2,zero,802c20 <__fixdfsi+0x34>
  802c98:	0107c83a 	sub	r3,zero,r4
  802c9c:	003fe006 	br	802c20 <__fixdfsi+0x34>
  802ca0:	00e00034 	movhi	r3,32768
  802ca4:	003fde06 	br	802c20 <__fixdfsi+0x34>
  802ca8:	39c7883a 	add	r3,r7,r7
  802cac:	008007c4 	movi	r2,31
  802cb0:	1205c83a 	sub	r2,r2,r8
  802cb4:	1886983a 	sll	r3,r3,r2
  802cb8:	3208d83a 	srl	r4,r6,r8
  802cbc:	1908b03a 	or	r4,r3,r4
  802cc0:	003ff206 	br	802c8c <__fixdfsi+0xa0>

00802cc4 <__floatunsidf>:
  802cc4:	defff204 	addi	sp,sp,-56
  802cc8:	dfc00d15 	stw	ra,52(sp)
  802ccc:	ddc00c15 	stw	r23,48(sp)
  802cd0:	dd800b15 	stw	r22,44(sp)
  802cd4:	dd400a15 	stw	r21,40(sp)
  802cd8:	dd000915 	stw	r20,36(sp)
  802cdc:	dcc00815 	stw	r19,32(sp)
  802ce0:	dc800715 	stw	r18,28(sp)
  802ce4:	dc400615 	stw	r17,24(sp)
  802ce8:	dc000515 	stw	r16,20(sp)
  802cec:	d8000115 	stw	zero,4(sp)
  802cf0:	20000f1e 	bne	r4,zero,802d30 <__floatunsidf+0x6c>
  802cf4:	00800084 	movi	r2,2
  802cf8:	d8800015 	stw	r2,0(sp)
  802cfc:	d809883a 	mov	r4,sp
  802d00:	0802f700 	call	802f70 <__pack_d>
  802d04:	dfc00d17 	ldw	ra,52(sp)
  802d08:	ddc00c17 	ldw	r23,48(sp)
  802d0c:	dd800b17 	ldw	r22,44(sp)
  802d10:	dd400a17 	ldw	r21,40(sp)
  802d14:	dd000917 	ldw	r20,36(sp)
  802d18:	dcc00817 	ldw	r19,32(sp)
  802d1c:	dc800717 	ldw	r18,28(sp)
  802d20:	dc400617 	ldw	r17,24(sp)
  802d24:	dc000517 	ldw	r16,20(sp)
  802d28:	dec00e04 	addi	sp,sp,56
  802d2c:	f800283a 	ret
  802d30:	008000c4 	movi	r2,3
  802d34:	00c00f04 	movi	r3,60
  802d38:	002f883a 	mov	r23,zero
  802d3c:	202d883a 	mov	r22,r4
  802d40:	d8800015 	stw	r2,0(sp)
  802d44:	d8c00215 	stw	r3,8(sp)
  802d48:	d9000315 	stw	r4,12(sp)
  802d4c:	ddc00415 	stw	r23,16(sp)
  802d50:	0802ef00 	call	802ef0 <__clzsi2>
  802d54:	12400744 	addi	r9,r2,29
  802d58:	48000b16 	blt	r9,zero,802d88 <__floatunsidf+0xc4>
  802d5c:	483fe726 	beq	r9,zero,802cfc <__floatunsidf+0x38>
  802d60:	10bfff44 	addi	r2,r2,-3
  802d64:	10002e16 	blt	r2,zero,802e20 <__floatunsidf+0x15c>
  802d68:	b0a2983a 	sll	r17,r22,r2
  802d6c:	0021883a 	mov	r16,zero
  802d70:	d8800217 	ldw	r2,8(sp)
  802d74:	dc400415 	stw	r17,16(sp)
  802d78:	dc000315 	stw	r16,12(sp)
  802d7c:	1245c83a 	sub	r2,r2,r9
  802d80:	d8800215 	stw	r2,8(sp)
  802d84:	003fdd06 	br	802cfc <__floatunsidf+0x38>
  802d88:	0255c83a 	sub	r10,zero,r9
  802d8c:	51bff804 	addi	r6,r10,-32
  802d90:	30001b16 	blt	r6,zero,802e00 <__floatunsidf+0x13c>
  802d94:	b9a8d83a 	srl	r20,r23,r6
  802d98:	002b883a 	mov	r21,zero
  802d9c:	000f883a 	mov	r7,zero
  802da0:	01000044 	movi	r4,1
  802da4:	0011883a 	mov	r8,zero
  802da8:	30002516 	blt	r6,zero,802e40 <__floatunsidf+0x17c>
  802dac:	21a6983a 	sll	r19,r4,r6
  802db0:	0025883a 	mov	r18,zero
  802db4:	00bfffc4 	movi	r2,-1
  802db8:	9089883a 	add	r4,r18,r2
  802dbc:	988b883a 	add	r5,r19,r2
  802dc0:	248d803a 	cmpltu	r6,r4,r18
  802dc4:	314b883a 	add	r5,r6,r5
  802dc8:	b104703a 	and	r2,r22,r4
  802dcc:	b946703a 	and	r3,r23,r5
  802dd0:	10c4b03a 	or	r2,r2,r3
  802dd4:	10000226 	beq	r2,zero,802de0 <__floatunsidf+0x11c>
  802dd8:	01c00044 	movi	r7,1
  802ddc:	0011883a 	mov	r8,zero
  802de0:	d9000217 	ldw	r4,8(sp)
  802de4:	a1c4b03a 	or	r2,r20,r7
  802de8:	aa06b03a 	or	r3,r21,r8
  802dec:	2249c83a 	sub	r4,r4,r9
  802df0:	d8c00415 	stw	r3,16(sp)
  802df4:	d9000215 	stw	r4,8(sp)
  802df8:	d8800315 	stw	r2,12(sp)
  802dfc:	003fbf06 	br	802cfc <__floatunsidf+0x38>
  802e00:	bdc7883a 	add	r3,r23,r23
  802e04:	008007c4 	movi	r2,31
  802e08:	1285c83a 	sub	r2,r2,r10
  802e0c:	1886983a 	sll	r3,r3,r2
  802e10:	b2a8d83a 	srl	r20,r22,r10
  802e14:	baaad83a 	srl	r21,r23,r10
  802e18:	1d28b03a 	or	r20,r3,r20
  802e1c:	003fdf06 	br	802d9c <__floatunsidf+0xd8>
  802e20:	b006d07a 	srli	r3,r22,1
  802e24:	008007c4 	movi	r2,31
  802e28:	1245c83a 	sub	r2,r2,r9
  802e2c:	1886d83a 	srl	r3,r3,r2
  802e30:	ba62983a 	sll	r17,r23,r9
  802e34:	b260983a 	sll	r16,r22,r9
  802e38:	1c62b03a 	or	r17,r3,r17
  802e3c:	003fcc06 	br	802d70 <__floatunsidf+0xac>
  802e40:	2006d07a 	srli	r3,r4,1
  802e44:	008007c4 	movi	r2,31
  802e48:	1285c83a 	sub	r2,r2,r10
  802e4c:	18a6d83a 	srl	r19,r3,r2
  802e50:	22a4983a 	sll	r18,r4,r10
  802e54:	003fd706 	br	802db4 <__floatunsidf+0xf0>

00802e58 <__muldi3>:
  802e58:	2011883a 	mov	r8,r4
  802e5c:	427fffcc 	andi	r9,r8,65535
  802e60:	4018d43a 	srli	r12,r8,16
  802e64:	32bfffcc 	andi	r10,r6,65535
  802e68:	3016d43a 	srli	r11,r6,16
  802e6c:	4a85383a 	mul	r2,r9,r10
  802e70:	6295383a 	mul	r10,r12,r10
  802e74:	4ad3383a 	mul	r9,r9,r11
  802e78:	113fffcc 	andi	r4,r2,65535
  802e7c:	1004d43a 	srli	r2,r2,16
  802e80:	4a93883a 	add	r9,r9,r10
  802e84:	3807883a 	mov	r3,r7
  802e88:	1245883a 	add	r2,r2,r9
  802e8c:	280f883a 	mov	r7,r5
  802e90:	180b883a 	mov	r5,r3
  802e94:	1006943a 	slli	r3,r2,16
  802e98:	defffd04 	addi	sp,sp,-12
  802e9c:	dc800215 	stw	r18,8(sp)
  802ea0:	1907883a 	add	r3,r3,r4
  802ea4:	dc400115 	stw	r17,4(sp)
  802ea8:	dc000015 	stw	r16,0(sp)
  802eac:	4165383a 	mul	r18,r8,r5
  802eb0:	31e3383a 	mul	r17,r6,r7
  802eb4:	1012d43a 	srli	r9,r2,16
  802eb8:	62d9383a 	mul	r12,r12,r11
  802ebc:	181f883a 	mov	r15,r3
  802ec0:	1280022e 	bgeu	r2,r10,802ecc <__muldi3+0x74>
  802ec4:	00800074 	movhi	r2,1
  802ec8:	6099883a 	add	r12,r12,r2
  802ecc:	624d883a 	add	r6,r12,r9
  802ed0:	9187883a 	add	r3,r18,r6
  802ed4:	88c7883a 	add	r3,r17,r3
  802ed8:	7805883a 	mov	r2,r15
  802edc:	dc800217 	ldw	r18,8(sp)
  802ee0:	dc400117 	ldw	r17,4(sp)
  802ee4:	dc000017 	ldw	r16,0(sp)
  802ee8:	dec00304 	addi	sp,sp,12
  802eec:	f800283a 	ret

00802ef0 <__clzsi2>:
  802ef0:	00bfffd4 	movui	r2,65535
  802ef4:	11000e36 	bltu	r2,r4,802f30 <__clzsi2+0x40>
  802ef8:	00803fc4 	movi	r2,255
  802efc:	01400204 	movi	r5,8
  802f00:	0007883a 	mov	r3,zero
  802f04:	11001036 	bltu	r2,r4,802f48 <__clzsi2+0x58>
  802f08:	000b883a 	mov	r5,zero
  802f0c:	20c6d83a 	srl	r3,r4,r3
  802f10:	00802074 	movhi	r2,129
  802f14:	108e7804 	addi	r2,r2,14816
  802f18:	1887883a 	add	r3,r3,r2
  802f1c:	18800003 	ldbu	r2,0(r3)
  802f20:	00c00804 	movi	r3,32
  802f24:	2885883a 	add	r2,r5,r2
  802f28:	1885c83a 	sub	r2,r3,r2
  802f2c:	f800283a 	ret
  802f30:	01400404 	movi	r5,16
  802f34:	00804034 	movhi	r2,256
  802f38:	10bfffc4 	addi	r2,r2,-1
  802f3c:	2807883a 	mov	r3,r5
  802f40:	113ff22e 	bgeu	r2,r4,802f0c <__clzsi2+0x1c>
  802f44:	01400604 	movi	r5,24
  802f48:	2807883a 	mov	r3,r5
  802f4c:	20c6d83a 	srl	r3,r4,r3
  802f50:	00802074 	movhi	r2,129
  802f54:	108e7804 	addi	r2,r2,14816
  802f58:	1887883a 	add	r3,r3,r2
  802f5c:	18800003 	ldbu	r2,0(r3)
  802f60:	00c00804 	movi	r3,32
  802f64:	2885883a 	add	r2,r5,r2
  802f68:	1885c83a 	sub	r2,r3,r2
  802f6c:	f800283a 	ret

00802f70 <__pack_d>:
  802f70:	20c00017 	ldw	r3,0(r4)
  802f74:	defffd04 	addi	sp,sp,-12
  802f78:	dc000015 	stw	r16,0(sp)
  802f7c:	dc800215 	stw	r18,8(sp)
  802f80:	dc400115 	stw	r17,4(sp)
  802f84:	00800044 	movi	r2,1
  802f88:	22000317 	ldw	r8,12(r4)
  802f8c:	001f883a 	mov	r15,zero
  802f90:	22400417 	ldw	r9,16(r4)
  802f94:	24000117 	ldw	r16,4(r4)
  802f98:	10c0552e 	bgeu	r2,r3,8030f0 <__pack_d+0x180>
  802f9c:	00800104 	movi	r2,4
  802fa0:	18804f26 	beq	r3,r2,8030e0 <__pack_d+0x170>
  802fa4:	00800084 	movi	r2,2
  802fa8:	18800226 	beq	r3,r2,802fb4 <__pack_d+0x44>
  802fac:	4244b03a 	or	r2,r8,r9
  802fb0:	10001a1e 	bne	r2,zero,80301c <__pack_d+0xac>
  802fb4:	000d883a 	mov	r6,zero
  802fb8:	000f883a 	mov	r7,zero
  802fbc:	0011883a 	mov	r8,zero
  802fc0:	00800434 	movhi	r2,16
  802fc4:	10bfffc4 	addi	r2,r2,-1
  802fc8:	301d883a 	mov	r14,r6
  802fcc:	3884703a 	and	r2,r7,r2
  802fd0:	400a953a 	slli	r5,r8,20
  802fd4:	79bffc2c 	andhi	r6,r15,65520
  802fd8:	308cb03a 	or	r6,r6,r2
  802fdc:	00e00434 	movhi	r3,32784
  802fe0:	18ffffc4 	addi	r3,r3,-1
  802fe4:	800497fa 	slli	r2,r16,31
  802fe8:	30c6703a 	and	r3,r6,r3
  802fec:	1946b03a 	or	r3,r3,r5
  802ff0:	01600034 	movhi	r5,32768
  802ff4:	297fffc4 	addi	r5,r5,-1
  802ff8:	194a703a 	and	r5,r3,r5
  802ffc:	288ab03a 	or	r5,r5,r2
  803000:	2807883a 	mov	r3,r5
  803004:	7005883a 	mov	r2,r14
  803008:	dc800217 	ldw	r18,8(sp)
  80300c:	dc400117 	ldw	r17,4(sp)
  803010:	dc000017 	ldw	r16,0(sp)
  803014:	dec00304 	addi	sp,sp,12
  803018:	f800283a 	ret
  80301c:	21000217 	ldw	r4,8(r4)
  803020:	00bf0084 	movi	r2,-1022
  803024:	20803f16 	blt	r4,r2,803124 <__pack_d+0x1b4>
  803028:	0080ffc4 	movi	r2,1023
  80302c:	11002c16 	blt	r2,r4,8030e0 <__pack_d+0x170>
  803030:	00803fc4 	movi	r2,255
  803034:	408c703a 	and	r6,r8,r2
  803038:	00802004 	movi	r2,128
  80303c:	0007883a 	mov	r3,zero
  803040:	000f883a 	mov	r7,zero
  803044:	2280ffc4 	addi	r10,r4,1023
  803048:	30801e26 	beq	r6,r2,8030c4 <__pack_d+0x154>
  80304c:	00801fc4 	movi	r2,127
  803050:	4089883a 	add	r4,r8,r2
  803054:	220d803a 	cmpltu	r6,r4,r8
  803058:	324d883a 	add	r6,r6,r9
  80305c:	2011883a 	mov	r8,r4
  803060:	3013883a 	mov	r9,r6
  803064:	00880034 	movhi	r2,8192
  803068:	10bfffc4 	addi	r2,r2,-1
  80306c:	12400d36 	bltu	r2,r9,8030a4 <__pack_d+0x134>
  803070:	4804963a 	slli	r2,r9,24
  803074:	400cd23a 	srli	r6,r8,8
  803078:	480ed23a 	srli	r7,r9,8
  80307c:	013fffc4 	movi	r4,-1
  803080:	118cb03a 	or	r6,r2,r6
  803084:	01400434 	movhi	r5,16
  803088:	297fffc4 	addi	r5,r5,-1
  80308c:	3104703a 	and	r2,r6,r4
  803090:	3946703a 	and	r3,r7,r5
  803094:	5201ffcc 	andi	r8,r10,2047
  803098:	100d883a 	mov	r6,r2
  80309c:	180f883a 	mov	r7,r3
  8030a0:	003fc706 	br	802fc0 <__pack_d+0x50>
  8030a4:	480897fa 	slli	r4,r9,31
  8030a8:	4004d07a 	srli	r2,r8,1
  8030ac:	4806d07a 	srli	r3,r9,1
  8030b0:	52800044 	addi	r10,r10,1
  8030b4:	2084b03a 	or	r2,r4,r2
  8030b8:	1011883a 	mov	r8,r2
  8030bc:	1813883a 	mov	r9,r3
  8030c0:	003feb06 	br	803070 <__pack_d+0x100>
  8030c4:	383fe11e 	bne	r7,zero,80304c <__pack_d+0xdc>
  8030c8:	01004004 	movi	r4,256
  8030cc:	4104703a 	and	r2,r8,r4
  8030d0:	10c4b03a 	or	r2,r2,r3
  8030d4:	103fe326 	beq	r2,zero,803064 <__pack_d+0xf4>
  8030d8:	3005883a 	mov	r2,r6
  8030dc:	003fdc06 	br	803050 <__pack_d+0xe0>
  8030e0:	000d883a 	mov	r6,zero
  8030e4:	000f883a 	mov	r7,zero
  8030e8:	0201ffc4 	movi	r8,2047
  8030ec:	003fb406 	br	802fc0 <__pack_d+0x50>
  8030f0:	0005883a 	mov	r2,zero
  8030f4:	00c00234 	movhi	r3,8
  8030f8:	408cb03a 	or	r6,r8,r2
  8030fc:	48ceb03a 	or	r7,r9,r3
  803100:	013fffc4 	movi	r4,-1
  803104:	01400434 	movhi	r5,16
  803108:	297fffc4 	addi	r5,r5,-1
  80310c:	3104703a 	and	r2,r6,r4
  803110:	3946703a 	and	r3,r7,r5
  803114:	100d883a 	mov	r6,r2
  803118:	180f883a 	mov	r7,r3
  80311c:	0201ffc4 	movi	r8,2047
  803120:	003fa706 	br	802fc0 <__pack_d+0x50>
  803124:	1109c83a 	sub	r4,r2,r4
  803128:	00800e04 	movi	r2,56
  80312c:	11004316 	blt	r2,r4,80323c <__pack_d+0x2cc>
  803130:	21fff804 	addi	r7,r4,-32
  803134:	38004516 	blt	r7,zero,80324c <__pack_d+0x2dc>
  803138:	49d8d83a 	srl	r12,r9,r7
  80313c:	001b883a 	mov	r13,zero
  803140:	0023883a 	mov	r17,zero
  803144:	01400044 	movi	r5,1
  803148:	0025883a 	mov	r18,zero
  80314c:	38004716 	blt	r7,zero,80326c <__pack_d+0x2fc>
  803150:	29d6983a 	sll	r11,r5,r7
  803154:	0015883a 	mov	r10,zero
  803158:	00bfffc4 	movi	r2,-1
  80315c:	5089883a 	add	r4,r10,r2
  803160:	588b883a 	add	r5,r11,r2
  803164:	228d803a 	cmpltu	r6,r4,r10
  803168:	314b883a 	add	r5,r6,r5
  80316c:	4104703a 	and	r2,r8,r4
  803170:	4946703a 	and	r3,r9,r5
  803174:	10c4b03a 	or	r2,r2,r3
  803178:	10000226 	beq	r2,zero,803184 <__pack_d+0x214>
  80317c:	04400044 	movi	r17,1
  803180:	0025883a 	mov	r18,zero
  803184:	00803fc4 	movi	r2,255
  803188:	644eb03a 	or	r7,r12,r17
  80318c:	3892703a 	and	r9,r7,r2
  803190:	00802004 	movi	r2,128
  803194:	6c90b03a 	or	r8,r13,r18
  803198:	0015883a 	mov	r10,zero
  80319c:	48801626 	beq	r9,r2,8031f8 <__pack_d+0x288>
  8031a0:	01001fc4 	movi	r4,127
  8031a4:	3905883a 	add	r2,r7,r4
  8031a8:	11cd803a 	cmpltu	r6,r2,r7
  8031ac:	320d883a 	add	r6,r6,r8
  8031b0:	100f883a 	mov	r7,r2
  8031b4:	00840034 	movhi	r2,4096
  8031b8:	10bfffc4 	addi	r2,r2,-1
  8031bc:	3011883a 	mov	r8,r6
  8031c0:	0007883a 	mov	r3,zero
  8031c4:	11801b36 	bltu	r2,r6,803234 <__pack_d+0x2c4>
  8031c8:	4004963a 	slli	r2,r8,24
  8031cc:	3808d23a 	srli	r4,r7,8
  8031d0:	400ad23a 	srli	r5,r8,8
  8031d4:	1813883a 	mov	r9,r3
  8031d8:	1108b03a 	or	r4,r2,r4
  8031dc:	00bfffc4 	movi	r2,-1
  8031e0:	00c00434 	movhi	r3,16
  8031e4:	18ffffc4 	addi	r3,r3,-1
  8031e8:	208c703a 	and	r6,r4,r2
  8031ec:	28ce703a 	and	r7,r5,r3
  8031f0:	4a01ffcc 	andi	r8,r9,2047
  8031f4:	003f7206 	br	802fc0 <__pack_d+0x50>
  8031f8:	503fe91e 	bne	r10,zero,8031a0 <__pack_d+0x230>
  8031fc:	01004004 	movi	r4,256
  803200:	3904703a 	and	r2,r7,r4
  803204:	0007883a 	mov	r3,zero
  803208:	10c4b03a 	or	r2,r2,r3
  80320c:	10000626 	beq	r2,zero,803228 <__pack_d+0x2b8>
  803210:	3a45883a 	add	r2,r7,r9
  803214:	11cd803a 	cmpltu	r6,r2,r7
  803218:	320d883a 	add	r6,r6,r8
  80321c:	100f883a 	mov	r7,r2
  803220:	3011883a 	mov	r8,r6
  803224:	0007883a 	mov	r3,zero
  803228:	00840034 	movhi	r2,4096
  80322c:	10bfffc4 	addi	r2,r2,-1
  803230:	123fe52e 	bgeu	r2,r8,8031c8 <__pack_d+0x258>
  803234:	00c00044 	movi	r3,1
  803238:	003fe306 	br	8031c8 <__pack_d+0x258>
  80323c:	0009883a 	mov	r4,zero
  803240:	0013883a 	mov	r9,zero
  803244:	000b883a 	mov	r5,zero
  803248:	003fe406 	br	8031dc <__pack_d+0x26c>
  80324c:	4a47883a 	add	r3,r9,r9
  803250:	008007c4 	movi	r2,31
  803254:	1105c83a 	sub	r2,r2,r4
  803258:	1886983a 	sll	r3,r3,r2
  80325c:	4118d83a 	srl	r12,r8,r4
  803260:	491ad83a 	srl	r13,r9,r4
  803264:	1b18b03a 	or	r12,r3,r12
  803268:	003fb506 	br	803140 <__pack_d+0x1d0>
  80326c:	2806d07a 	srli	r3,r5,1
  803270:	008007c4 	movi	r2,31
  803274:	1105c83a 	sub	r2,r2,r4
  803278:	1896d83a 	srl	r11,r3,r2
  80327c:	2914983a 	sll	r10,r5,r4
  803280:	003fb506 	br	803158 <__pack_d+0x1e8>

00803284 <__unpack_d>:
  803284:	20c00117 	ldw	r3,4(r4)
  803288:	22400017 	ldw	r9,0(r4)
  80328c:	00800434 	movhi	r2,16
  803290:	10bfffc4 	addi	r2,r2,-1
  803294:	1808d53a 	srli	r4,r3,20
  803298:	180cd7fa 	srli	r6,r3,31
  80329c:	1894703a 	and	r10,r3,r2
  8032a0:	2201ffcc 	andi	r8,r4,2047
  8032a4:	281b883a 	mov	r13,r5
  8032a8:	4817883a 	mov	r11,r9
  8032ac:	29800115 	stw	r6,4(r5)
  8032b0:	5019883a 	mov	r12,r10
  8032b4:	40001e1e 	bne	r8,zero,803330 <__unpack_d+0xac>
  8032b8:	4a84b03a 	or	r2,r9,r10
  8032bc:	10001926 	beq	r2,zero,803324 <__unpack_d+0xa0>
  8032c0:	4804d63a 	srli	r2,r9,24
  8032c4:	500c923a 	slli	r6,r10,8
  8032c8:	013f0084 	movi	r4,-1022
  8032cc:	00c40034 	movhi	r3,4096
  8032d0:	18ffffc4 	addi	r3,r3,-1
  8032d4:	118cb03a 	or	r6,r2,r6
  8032d8:	008000c4 	movi	r2,3
  8032dc:	480a923a 	slli	r5,r9,8
  8032e0:	68800015 	stw	r2,0(r13)
  8032e4:	69000215 	stw	r4,8(r13)
  8032e8:	19800b36 	bltu	r3,r6,803318 <__unpack_d+0x94>
  8032ec:	200f883a 	mov	r7,r4
  8032f0:	1811883a 	mov	r8,r3
  8032f4:	2945883a 	add	r2,r5,r5
  8032f8:	1149803a 	cmpltu	r4,r2,r5
  8032fc:	3187883a 	add	r3,r6,r6
  803300:	20c9883a 	add	r4,r4,r3
  803304:	100b883a 	mov	r5,r2
  803308:	200d883a 	mov	r6,r4
  80330c:	39ffffc4 	addi	r7,r7,-1
  803310:	413ff82e 	bgeu	r8,r4,8032f4 <__unpack_d+0x70>
  803314:	69c00215 	stw	r7,8(r13)
  803318:	69800415 	stw	r6,16(r13)
  80331c:	69400315 	stw	r5,12(r13)
  803320:	f800283a 	ret
  803324:	00800084 	movi	r2,2
  803328:	28800015 	stw	r2,0(r5)
  80332c:	f800283a 	ret
  803330:	0081ffc4 	movi	r2,2047
  803334:	40800f26 	beq	r8,r2,803374 <__unpack_d+0xf0>
  803338:	480cd63a 	srli	r6,r9,24
  80333c:	5006923a 	slli	r3,r10,8
  803340:	4804923a 	slli	r2,r9,8
  803344:	0009883a 	mov	r4,zero
  803348:	30c6b03a 	or	r3,r6,r3
  80334c:	01440034 	movhi	r5,4096
  803350:	110cb03a 	or	r6,r2,r4
  803354:	423f0044 	addi	r8,r8,-1023
  803358:	194eb03a 	or	r7,r3,r5
  80335c:	008000c4 	movi	r2,3
  803360:	69c00415 	stw	r7,16(r13)
  803364:	6a000215 	stw	r8,8(r13)
  803368:	68800015 	stw	r2,0(r13)
  80336c:	69800315 	stw	r6,12(r13)
  803370:	f800283a 	ret
  803374:	4a84b03a 	or	r2,r9,r10
  803378:	1000031e 	bne	r2,zero,803388 <__unpack_d+0x104>
  80337c:	00800104 	movi	r2,4
  803380:	28800015 	stw	r2,0(r5)
  803384:	f800283a 	ret
  803388:	0009883a 	mov	r4,zero
  80338c:	01400234 	movhi	r5,8
  803390:	4904703a 	and	r2,r9,r4
  803394:	5146703a 	and	r3,r10,r5
  803398:	10c4b03a 	or	r2,r2,r3
  80339c:	10000526 	beq	r2,zero,8033b4 <__unpack_d+0x130>
  8033a0:	00800044 	movi	r2,1
  8033a4:	68800015 	stw	r2,0(r13)
  8033a8:	6b000415 	stw	r12,16(r13)
  8033ac:	6ac00315 	stw	r11,12(r13)
  8033b0:	f800283a 	ret
  8033b4:	68000015 	stw	zero,0(r13)
  8033b8:	003ffb06 	br	8033a8 <__unpack_d+0x124>

008033bc <__fpcmp_parts_d>:
  8033bc:	21800017 	ldw	r6,0(r4)
  8033c0:	00c00044 	movi	r3,1
  8033c4:	19800a2e 	bgeu	r3,r6,8033f0 <__fpcmp_parts_d+0x34>
  8033c8:	28800017 	ldw	r2,0(r5)
  8033cc:	1880082e 	bgeu	r3,r2,8033f0 <__fpcmp_parts_d+0x34>
  8033d0:	00c00104 	movi	r3,4
  8033d4:	30c02626 	beq	r6,r3,803470 <__fpcmp_parts_d+0xb4>
  8033d8:	10c02226 	beq	r2,r3,803464 <__fpcmp_parts_d+0xa8>
  8033dc:	00c00084 	movi	r3,2
  8033e0:	30c00526 	beq	r6,r3,8033f8 <__fpcmp_parts_d+0x3c>
  8033e4:	10c0071e 	bne	r2,r3,803404 <__fpcmp_parts_d+0x48>
  8033e8:	20800117 	ldw	r2,4(r4)
  8033ec:	1000091e 	bne	r2,zero,803414 <__fpcmp_parts_d+0x58>
  8033f0:	00800044 	movi	r2,1
  8033f4:	f800283a 	ret
  8033f8:	10c01a1e 	bne	r2,r3,803464 <__fpcmp_parts_d+0xa8>
  8033fc:	0005883a 	mov	r2,zero
  803400:	f800283a 	ret
  803404:	22000117 	ldw	r8,4(r4)
  803408:	28800117 	ldw	r2,4(r5)
  80340c:	40800326 	beq	r8,r2,80341c <__fpcmp_parts_d+0x60>
  803410:	403ff726 	beq	r8,zero,8033f0 <__fpcmp_parts_d+0x34>
  803414:	00bfffc4 	movi	r2,-1
  803418:	f800283a 	ret
  80341c:	20c00217 	ldw	r3,8(r4)
  803420:	28800217 	ldw	r2,8(r5)
  803424:	10fffa16 	blt	r2,r3,803410 <__fpcmp_parts_d+0x54>
  803428:	18800916 	blt	r3,r2,803450 <__fpcmp_parts_d+0x94>
  80342c:	21c00417 	ldw	r7,16(r4)
  803430:	28c00417 	ldw	r3,16(r5)
  803434:	21800317 	ldw	r6,12(r4)
  803438:	28800317 	ldw	r2,12(r5)
  80343c:	19fff436 	bltu	r3,r7,803410 <__fpcmp_parts_d+0x54>
  803440:	38c00526 	beq	r7,r3,803458 <__fpcmp_parts_d+0x9c>
  803444:	38c00236 	bltu	r7,r3,803450 <__fpcmp_parts_d+0x94>
  803448:	19ffec1e 	bne	r3,r7,8033fc <__fpcmp_parts_d+0x40>
  80344c:	30bfeb2e 	bgeu	r6,r2,8033fc <__fpcmp_parts_d+0x40>
  803450:	403fe71e 	bne	r8,zero,8033f0 <__fpcmp_parts_d+0x34>
  803454:	003fef06 	br	803414 <__fpcmp_parts_d+0x58>
  803458:	11bffa2e 	bgeu	r2,r6,803444 <__fpcmp_parts_d+0x88>
  80345c:	403fe426 	beq	r8,zero,8033f0 <__fpcmp_parts_d+0x34>
  803460:	003fec06 	br	803414 <__fpcmp_parts_d+0x58>
  803464:	28800117 	ldw	r2,4(r5)
  803468:	103fe11e 	bne	r2,zero,8033f0 <__fpcmp_parts_d+0x34>
  80346c:	003fe906 	br	803414 <__fpcmp_parts_d+0x58>
  803470:	11bfdd1e 	bne	r2,r6,8033e8 <__fpcmp_parts_d+0x2c>
  803474:	28c00117 	ldw	r3,4(r5)
  803478:	20800117 	ldw	r2,4(r4)
  80347c:	1885c83a 	sub	r2,r3,r2
  803480:	f800283a 	ret

00803484 <exit>:
  803484:	defffe04 	addi	sp,sp,-8
  803488:	000b883a 	mov	r5,zero
  80348c:	dc000015 	stw	r16,0(sp)
  803490:	dfc00115 	stw	ra,4(sp)
  803494:	2021883a 	mov	r16,r4
  803498:	08060e80 	call	8060e8 <__call_exitprocs>
  80349c:	00802074 	movhi	r2,129
  8034a0:	10966404 	addi	r2,r2,22928
  8034a4:	11000017 	ldw	r4,0(r2)
  8034a8:	20800f17 	ldw	r2,60(r4)
  8034ac:	10000126 	beq	r2,zero,8034b4 <exit+0x30>
  8034b0:	103ee83a 	callr	r2
  8034b4:	8009883a 	mov	r4,r16
  8034b8:	080c3b00 	call	80c3b0 <_exit>

008034bc <getc>:
  8034bc:	defffd04 	addi	sp,sp,-12
  8034c0:	dc400115 	stw	r17,4(sp)
  8034c4:	04402074 	movhi	r17,129
  8034c8:	8c566304 	addi	r17,r17,22924
  8034cc:	88c00017 	ldw	r3,0(r17)
  8034d0:	dc000015 	stw	r16,0(sp)
  8034d4:	dfc00215 	stw	ra,8(sp)
  8034d8:	2021883a 	mov	r16,r4
  8034dc:	18000326 	beq	r3,zero,8034ec <getc+0x30>
  8034e0:	18800e17 	ldw	r2,56(r3)
  8034e4:	1809883a 	mov	r4,r3
  8034e8:	10000e26 	beq	r2,zero,803524 <getc+0x68>
  8034ec:	80800117 	ldw	r2,4(r16)
  8034f0:	800b883a 	mov	r5,r16
  8034f4:	10bfffc4 	addi	r2,r2,-1
  8034f8:	80800115 	stw	r2,4(r16)
  8034fc:	10000f16 	blt	r2,zero,80353c <getc+0x80>
  803500:	80c00017 	ldw	r3,0(r16)
  803504:	18800003 	ldbu	r2,0(r3)
  803508:	18c00044 	addi	r3,r3,1
  80350c:	80c00015 	stw	r3,0(r16)
  803510:	dfc00217 	ldw	ra,8(sp)
  803514:	dc400117 	ldw	r17,4(sp)
  803518:	dc000017 	ldw	r16,0(sp)
  80351c:	dec00304 	addi	sp,sp,12
  803520:	f800283a 	ret
  803524:	0807cfc0 	call	807cfc <__sinit>
  803528:	80800117 	ldw	r2,4(r16)
  80352c:	800b883a 	mov	r5,r16
  803530:	10bfffc4 	addi	r2,r2,-1
  803534:	80800115 	stw	r2,4(r16)
  803538:	103ff10e 	bge	r2,zero,803500 <getc+0x44>
  80353c:	89000017 	ldw	r4,0(r17)
  803540:	dfc00217 	ldw	ra,8(sp)
  803544:	dc400117 	ldw	r17,4(sp)
  803548:	dc000017 	ldw	r16,0(sp)
  80354c:	dec00304 	addi	sp,sp,12
  803550:	0803f3c1 	jmpi	803f3c <__srget_r>

00803554 <_getc_r>:
  803554:	defffd04 	addi	sp,sp,-12
  803558:	dc400115 	stw	r17,4(sp)
  80355c:	dc000015 	stw	r16,0(sp)
  803560:	dfc00215 	stw	ra,8(sp)
  803564:	2021883a 	mov	r16,r4
  803568:	2823883a 	mov	r17,r5
  80356c:	20000226 	beq	r4,zero,803578 <_getc_r+0x24>
  803570:	20800e17 	ldw	r2,56(r4)
  803574:	10000f26 	beq	r2,zero,8035b4 <_getc_r+0x60>
  803578:	88800117 	ldw	r2,4(r17)
  80357c:	8009883a 	mov	r4,r16
  803580:	880b883a 	mov	r5,r17
  803584:	10bfffc4 	addi	r2,r2,-1
  803588:	88800115 	stw	r2,4(r17)
  80358c:	10001016 	blt	r2,zero,8035d0 <_getc_r+0x7c>
  803590:	88c00017 	ldw	r3,0(r17)
  803594:	18800003 	ldbu	r2,0(r3)
  803598:	18c00044 	addi	r3,r3,1
  80359c:	88c00015 	stw	r3,0(r17)
  8035a0:	dfc00217 	ldw	ra,8(sp)
  8035a4:	dc400117 	ldw	r17,4(sp)
  8035a8:	dc000017 	ldw	r16,0(sp)
  8035ac:	dec00304 	addi	sp,sp,12
  8035b0:	f800283a 	ret
  8035b4:	0807cfc0 	call	807cfc <__sinit>
  8035b8:	88800117 	ldw	r2,4(r17)
  8035bc:	8009883a 	mov	r4,r16
  8035c0:	880b883a 	mov	r5,r17
  8035c4:	10bfffc4 	addi	r2,r2,-1
  8035c8:	88800115 	stw	r2,4(r17)
  8035cc:	103ff00e 	bge	r2,zero,803590 <_getc_r+0x3c>
  8035d0:	dfc00217 	ldw	ra,8(sp)
  8035d4:	dc400117 	ldw	r17,4(sp)
  8035d8:	dc000017 	ldw	r16,0(sp)
  8035dc:	dec00304 	addi	sp,sp,12
  8035e0:	0803f3c1 	jmpi	803f3c <__srget_r>

008035e4 <free>:
  8035e4:	00802074 	movhi	r2,129
  8035e8:	10966304 	addi	r2,r2,22924
  8035ec:	200b883a 	mov	r5,r4
  8035f0:	11000017 	ldw	r4,0(r2)
  8035f4:	08080801 	jmpi	808080 <_free_r>

008035f8 <malloc>:
  8035f8:	00802074 	movhi	r2,129
  8035fc:	10966304 	addi	r2,r2,22924
  803600:	200b883a 	mov	r5,r4
  803604:	11000017 	ldw	r4,0(r2)
  803608:	080360c1 	jmpi	80360c <_malloc_r>

0080360c <_malloc_r>:
  80360c:	defff604 	addi	sp,sp,-40
  803610:	28c002c4 	addi	r3,r5,11
  803614:	00800584 	movi	r2,22
  803618:	dc800215 	stw	r18,8(sp)
  80361c:	dfc00915 	stw	ra,36(sp)
  803620:	df000815 	stw	fp,32(sp)
  803624:	ddc00715 	stw	r23,28(sp)
  803628:	dd800615 	stw	r22,24(sp)
  80362c:	dd400515 	stw	r21,20(sp)
  803630:	dd000415 	stw	r20,16(sp)
  803634:	dcc00315 	stw	r19,12(sp)
  803638:	dc400115 	stw	r17,4(sp)
  80363c:	dc000015 	stw	r16,0(sp)
  803640:	2025883a 	mov	r18,r4
  803644:	10c01236 	bltu	r2,r3,803690 <_malloc_r+0x84>
  803648:	04400404 	movi	r17,16
  80364c:	8940142e 	bgeu	r17,r5,8036a0 <_malloc_r+0x94>
  803650:	00800304 	movi	r2,12
  803654:	0007883a 	mov	r3,zero
  803658:	90800015 	stw	r2,0(r18)
  80365c:	1805883a 	mov	r2,r3
  803660:	dfc00917 	ldw	ra,36(sp)
  803664:	df000817 	ldw	fp,32(sp)
  803668:	ddc00717 	ldw	r23,28(sp)
  80366c:	dd800617 	ldw	r22,24(sp)
  803670:	dd400517 	ldw	r21,20(sp)
  803674:	dd000417 	ldw	r20,16(sp)
  803678:	dcc00317 	ldw	r19,12(sp)
  80367c:	dc800217 	ldw	r18,8(sp)
  803680:	dc400117 	ldw	r17,4(sp)
  803684:	dc000017 	ldw	r16,0(sp)
  803688:	dec00a04 	addi	sp,sp,40
  80368c:	f800283a 	ret
  803690:	00bffe04 	movi	r2,-8
  803694:	18a2703a 	and	r17,r3,r2
  803698:	883fed16 	blt	r17,zero,803650 <_malloc_r+0x44>
  80369c:	897fec36 	bltu	r17,r5,803650 <_malloc_r+0x44>
  8036a0:	9009883a 	mov	r4,r18
  8036a4:	080c7e40 	call	80c7e4 <__malloc_lock>
  8036a8:	00807dc4 	movi	r2,503
  8036ac:	14402b2e 	bgeu	r2,r17,80375c <_malloc_r+0x150>
  8036b0:	8806d27a 	srli	r3,r17,9
  8036b4:	18003f1e 	bne	r3,zero,8037b4 <_malloc_r+0x1a8>
  8036b8:	880cd0fa 	srli	r6,r17,3
  8036bc:	300490fa 	slli	r2,r6,3
  8036c0:	02c02074 	movhi	r11,129
  8036c4:	5ad0bc04 	addi	r11,r11,17136
  8036c8:	12cb883a 	add	r5,r2,r11
  8036cc:	2c000317 	ldw	r16,12(r5)
  8036d0:	580f883a 	mov	r7,r11
  8036d4:	2c00041e 	bne	r5,r16,8036e8 <_malloc_r+0xdc>
  8036d8:	00000a06 	br	803704 <_malloc_r+0xf8>
  8036dc:	1800860e 	bge	r3,zero,8038f8 <_malloc_r+0x2ec>
  8036e0:	84000317 	ldw	r16,12(r16)
  8036e4:	2c000726 	beq	r5,r16,803704 <_malloc_r+0xf8>
  8036e8:	80800117 	ldw	r2,4(r16)
  8036ec:	00ffff04 	movi	r3,-4
  8036f0:	10c8703a 	and	r4,r2,r3
  8036f4:	2447c83a 	sub	r3,r4,r17
  8036f8:	008003c4 	movi	r2,15
  8036fc:	10fff70e 	bge	r2,r3,8036dc <_malloc_r+0xd0>
  803700:	31bfffc4 	addi	r6,r6,-1
  803704:	32400044 	addi	r9,r6,1
  803708:	02802074 	movhi	r10,129
  80370c:	5290be04 	addi	r10,r10,17144
  803710:	54000217 	ldw	r16,8(r10)
  803714:	8280a026 	beq	r16,r10,803998 <_malloc_r+0x38c>
  803718:	80800117 	ldw	r2,4(r16)
  80371c:	00ffff04 	movi	r3,-4
  803720:	10ca703a 	and	r5,r2,r3
  803724:	2c4dc83a 	sub	r6,r5,r17
  803728:	008003c4 	movi	r2,15
  80372c:	11808316 	blt	r2,r6,80393c <_malloc_r+0x330>
  803730:	52800315 	stw	r10,12(r10)
  803734:	52800215 	stw	r10,8(r10)
  803738:	30002916 	blt	r6,zero,8037e0 <_malloc_r+0x1d4>
  80373c:	8147883a 	add	r3,r16,r5
  803740:	18800117 	ldw	r2,4(r3)
  803744:	9009883a 	mov	r4,r18
  803748:	10800054 	ori	r2,r2,1
  80374c:	18800115 	stw	r2,4(r3)
  803750:	080c8040 	call	80c804 <__malloc_unlock>
  803754:	80c00204 	addi	r3,r16,8
  803758:	003fc006 	br	80365c <_malloc_r+0x50>
  80375c:	02c02074 	movhi	r11,129
  803760:	5ad0bc04 	addi	r11,r11,17136
  803764:	8ac5883a 	add	r2,r17,r11
  803768:	14000317 	ldw	r16,12(r2)
  80376c:	580f883a 	mov	r7,r11
  803770:	8806d0fa 	srli	r3,r17,3
  803774:	14006c26 	beq	r2,r16,803928 <_malloc_r+0x31c>
  803778:	80c00117 	ldw	r3,4(r16)
  80377c:	00bfff04 	movi	r2,-4
  803780:	81800317 	ldw	r6,12(r16)
  803784:	1886703a 	and	r3,r3,r2
  803788:	80c7883a 	add	r3,r16,r3
  80378c:	18800117 	ldw	r2,4(r3)
  803790:	81400217 	ldw	r5,8(r16)
  803794:	9009883a 	mov	r4,r18
  803798:	10800054 	ori	r2,r2,1
  80379c:	18800115 	stw	r2,4(r3)
  8037a0:	31400215 	stw	r5,8(r6)
  8037a4:	29800315 	stw	r6,12(r5)
  8037a8:	080c8040 	call	80c804 <__malloc_unlock>
  8037ac:	80c00204 	addi	r3,r16,8
  8037b0:	003faa06 	br	80365c <_malloc_r+0x50>
  8037b4:	00800104 	movi	r2,4
  8037b8:	10c0052e 	bgeu	r2,r3,8037d0 <_malloc_r+0x1c4>
  8037bc:	00800504 	movi	r2,20
  8037c0:	10c07836 	bltu	r2,r3,8039a4 <_malloc_r+0x398>
  8037c4:	198016c4 	addi	r6,r3,91
  8037c8:	300490fa 	slli	r2,r6,3
  8037cc:	003fbc06 	br	8036c0 <_malloc_r+0xb4>
  8037d0:	8804d1ba 	srli	r2,r17,6
  8037d4:	11800e04 	addi	r6,r2,56
  8037d8:	300490fa 	slli	r2,r6,3
  8037dc:	003fb806 	br	8036c0 <_malloc_r+0xb4>
  8037e0:	00807fc4 	movi	r2,511
  8037e4:	1140bb36 	bltu	r2,r5,803ad4 <_malloc_r+0x4c8>
  8037e8:	2806d0fa 	srli	r3,r5,3
  8037ec:	573ffe04 	addi	fp,r10,-8
  8037f0:	00800044 	movi	r2,1
  8037f4:	180890fa 	slli	r4,r3,3
  8037f8:	1807d0ba 	srai	r3,r3,2
  8037fc:	e1c00117 	ldw	r7,4(fp)
  803800:	5909883a 	add	r4,r11,r4
  803804:	21400217 	ldw	r5,8(r4)
  803808:	10c4983a 	sll	r2,r2,r3
  80380c:	81000315 	stw	r4,12(r16)
  803810:	81400215 	stw	r5,8(r16)
  803814:	388eb03a 	or	r7,r7,r2
  803818:	2c000315 	stw	r16,12(r5)
  80381c:	24000215 	stw	r16,8(r4)
  803820:	e1c00115 	stw	r7,4(fp)
  803824:	4807883a 	mov	r3,r9
  803828:	4800cd16 	blt	r9,zero,803b60 <_malloc_r+0x554>
  80382c:	1807d0ba 	srai	r3,r3,2
  803830:	00800044 	movi	r2,1
  803834:	10c8983a 	sll	r4,r2,r3
  803838:	39004436 	bltu	r7,r4,80394c <_malloc_r+0x340>
  80383c:	21c4703a 	and	r2,r4,r7
  803840:	10000a1e 	bne	r2,zero,80386c <_malloc_r+0x260>
  803844:	2109883a 	add	r4,r4,r4
  803848:	00bfff04 	movi	r2,-4
  80384c:	4884703a 	and	r2,r9,r2
  803850:	3906703a 	and	r3,r7,r4
  803854:	12400104 	addi	r9,r2,4
  803858:	1800041e 	bne	r3,zero,80386c <_malloc_r+0x260>
  80385c:	2109883a 	add	r4,r4,r4
  803860:	3904703a 	and	r2,r7,r4
  803864:	4a400104 	addi	r9,r9,4
  803868:	103ffc26 	beq	r2,zero,80385c <_malloc_r+0x250>
  80386c:	480490fa 	slli	r2,r9,3
  803870:	4819883a 	mov	r12,r9
  803874:	023fff04 	movi	r8,-4
  803878:	589b883a 	add	r13,r11,r2
  80387c:	6807883a 	mov	r3,r13
  803880:	014003c4 	movi	r5,15
  803884:	1c000317 	ldw	r16,12(r3)
  803888:	1c00041e 	bne	r3,r16,80389c <_malloc_r+0x290>
  80388c:	0000a706 	br	803b2c <_malloc_r+0x520>
  803890:	3000ab0e 	bge	r6,zero,803b40 <_malloc_r+0x534>
  803894:	84000317 	ldw	r16,12(r16)
  803898:	1c00a426 	beq	r3,r16,803b2c <_malloc_r+0x520>
  80389c:	80800117 	ldw	r2,4(r16)
  8038a0:	1204703a 	and	r2,r2,r8
  8038a4:	144dc83a 	sub	r6,r2,r17
  8038a8:	29bff90e 	bge	r5,r6,803890 <_malloc_r+0x284>
  8038ac:	81000317 	ldw	r4,12(r16)
  8038b0:	80c00217 	ldw	r3,8(r16)
  8038b4:	89400054 	ori	r5,r17,1
  8038b8:	8445883a 	add	r2,r16,r17
  8038bc:	20c00215 	stw	r3,8(r4)
  8038c0:	19000315 	stw	r4,12(r3)
  8038c4:	81400115 	stw	r5,4(r16)
  8038c8:	1187883a 	add	r3,r2,r6
  8038cc:	31000054 	ori	r4,r6,1
  8038d0:	50800315 	stw	r2,12(r10)
  8038d4:	50800215 	stw	r2,8(r10)
  8038d8:	19800015 	stw	r6,0(r3)
  8038dc:	11000115 	stw	r4,4(r2)
  8038e0:	12800215 	stw	r10,8(r2)
  8038e4:	12800315 	stw	r10,12(r2)
  8038e8:	9009883a 	mov	r4,r18
  8038ec:	080c8040 	call	80c804 <__malloc_unlock>
  8038f0:	80c00204 	addi	r3,r16,8
  8038f4:	003f5906 	br	80365c <_malloc_r+0x50>
  8038f8:	8109883a 	add	r4,r16,r4
  8038fc:	20800117 	ldw	r2,4(r4)
  803900:	80c00217 	ldw	r3,8(r16)
  803904:	81400317 	ldw	r5,12(r16)
  803908:	10800054 	ori	r2,r2,1
  80390c:	20800115 	stw	r2,4(r4)
  803910:	28c00215 	stw	r3,8(r5)
  803914:	19400315 	stw	r5,12(r3)
  803918:	9009883a 	mov	r4,r18
  80391c:	080c8040 	call	80c804 <__malloc_unlock>
  803920:	80c00204 	addi	r3,r16,8
  803924:	003f4d06 	br	80365c <_malloc_r+0x50>
  803928:	80800204 	addi	r2,r16,8
  80392c:	14000317 	ldw	r16,12(r2)
  803930:	143f911e 	bne	r2,r16,803778 <_malloc_r+0x16c>
  803934:	1a400084 	addi	r9,r3,2
  803938:	003f7306 	br	803708 <_malloc_r+0xfc>
  80393c:	88c00054 	ori	r3,r17,1
  803940:	8445883a 	add	r2,r16,r17
  803944:	80c00115 	stw	r3,4(r16)
  803948:	003fdf06 	br	8038c8 <_malloc_r+0x2bc>
  80394c:	e4000217 	ldw	r16,8(fp)
  803950:	00bfff04 	movi	r2,-4
  803954:	80c00117 	ldw	r3,4(r16)
  803958:	802d883a 	mov	r22,r16
  80395c:	18aa703a 	and	r21,r3,r2
  803960:	ac401636 	bltu	r21,r17,8039bc <_malloc_r+0x3b0>
  803964:	ac49c83a 	sub	r4,r21,r17
  803968:	008003c4 	movi	r2,15
  80396c:	1100130e 	bge	r2,r4,8039bc <_malloc_r+0x3b0>
  803970:	88800054 	ori	r2,r17,1
  803974:	8447883a 	add	r3,r16,r17
  803978:	80800115 	stw	r2,4(r16)
  80397c:	20800054 	ori	r2,r4,1
  803980:	18800115 	stw	r2,4(r3)
  803984:	e0c00215 	stw	r3,8(fp)
  803988:	9009883a 	mov	r4,r18
  80398c:	080c8040 	call	80c804 <__malloc_unlock>
  803990:	80c00204 	addi	r3,r16,8
  803994:	003f3106 	br	80365c <_malloc_r+0x50>
  803998:	39c00117 	ldw	r7,4(r7)
  80399c:	573ffe04 	addi	fp,r10,-8
  8039a0:	003fa006 	br	803824 <_malloc_r+0x218>
  8039a4:	00801504 	movi	r2,84
  8039a8:	10c06736 	bltu	r2,r3,803b48 <_malloc_r+0x53c>
  8039ac:	8804d33a 	srli	r2,r17,12
  8039b0:	11801b84 	addi	r6,r2,110
  8039b4:	300490fa 	slli	r2,r6,3
  8039b8:	003f4106 	br	8036c0 <_malloc_r+0xb4>
  8039bc:	d0a74c17 	ldw	r2,-25296(gp)
  8039c0:	d0e00317 	ldw	r3,-32756(gp)
  8039c4:	053fffc4 	movi	r20,-1
  8039c8:	10800404 	addi	r2,r2,16
  8039cc:	88a7883a 	add	r19,r17,r2
  8039d0:	1d000326 	beq	r3,r20,8039e0 <_malloc_r+0x3d4>
  8039d4:	98c3ffc4 	addi	r3,r19,4095
  8039d8:	00bc0004 	movi	r2,-4096
  8039dc:	18a6703a 	and	r19,r3,r2
  8039e0:	9009883a 	mov	r4,r18
  8039e4:	980b883a 	mov	r5,r19
  8039e8:	0803f9c0 	call	803f9c <_sbrk_r>
  8039ec:	1009883a 	mov	r4,r2
  8039f0:	15000426 	beq	r2,r20,803a04 <_malloc_r+0x3f8>
  8039f4:	854b883a 	add	r5,r16,r21
  8039f8:	1029883a 	mov	r20,r2
  8039fc:	11405a2e 	bgeu	r2,r5,803b68 <_malloc_r+0x55c>
  803a00:	87000c26 	beq	r16,fp,803a34 <_malloc_r+0x428>
  803a04:	e4000217 	ldw	r16,8(fp)
  803a08:	80c00117 	ldw	r3,4(r16)
  803a0c:	00bfff04 	movi	r2,-4
  803a10:	1884703a 	and	r2,r3,r2
  803a14:	14400336 	bltu	r2,r17,803a24 <_malloc_r+0x418>
  803a18:	1449c83a 	sub	r4,r2,r17
  803a1c:	008003c4 	movi	r2,15
  803a20:	113fd316 	blt	r2,r4,803970 <_malloc_r+0x364>
  803a24:	9009883a 	mov	r4,r18
  803a28:	080c8040 	call	80c804 <__malloc_unlock>
  803a2c:	0007883a 	mov	r3,zero
  803a30:	003f0a06 	br	80365c <_malloc_r+0x50>
  803a34:	05c02074 	movhi	r23,129
  803a38:	bdddc904 	addi	r23,r23,30500
  803a3c:	b8800017 	ldw	r2,0(r23)
  803a40:	988d883a 	add	r6,r19,r2
  803a44:	b9800015 	stw	r6,0(r23)
  803a48:	d0e00317 	ldw	r3,-32756(gp)
  803a4c:	00bfffc4 	movi	r2,-1
  803a50:	18808e26 	beq	r3,r2,803c8c <_malloc_r+0x680>
  803a54:	2145c83a 	sub	r2,r4,r5
  803a58:	3085883a 	add	r2,r6,r2
  803a5c:	b8800015 	stw	r2,0(r23)
  803a60:	20c001cc 	andi	r3,r4,7
  803a64:	18005f1e 	bne	r3,zero,803be4 <_malloc_r+0x5d8>
  803a68:	000b883a 	mov	r5,zero
  803a6c:	a4c5883a 	add	r2,r20,r19
  803a70:	1083ffcc 	andi	r2,r2,4095
  803a74:	00c40004 	movi	r3,4096
  803a78:	1887c83a 	sub	r3,r3,r2
  803a7c:	28e7883a 	add	r19,r5,r3
  803a80:	9009883a 	mov	r4,r18
  803a84:	980b883a 	mov	r5,r19
  803a88:	0803f9c0 	call	803f9c <_sbrk_r>
  803a8c:	1007883a 	mov	r3,r2
  803a90:	00bfffc4 	movi	r2,-1
  803a94:	18807a26 	beq	r3,r2,803c80 <_malloc_r+0x674>
  803a98:	1d05c83a 	sub	r2,r3,r20
  803a9c:	9885883a 	add	r2,r19,r2
  803aa0:	10c00054 	ori	r3,r2,1
  803aa4:	b8800017 	ldw	r2,0(r23)
  803aa8:	a021883a 	mov	r16,r20
  803aac:	a0c00115 	stw	r3,4(r20)
  803ab0:	9885883a 	add	r2,r19,r2
  803ab4:	b8800015 	stw	r2,0(r23)
  803ab8:	e5000215 	stw	r20,8(fp)
  803abc:	b7003626 	beq	r22,fp,803b98 <_malloc_r+0x58c>
  803ac0:	018003c4 	movi	r6,15
  803ac4:	35404b36 	bltu	r6,r21,803bf4 <_malloc_r+0x5e8>
  803ac8:	00800044 	movi	r2,1
  803acc:	a0800115 	stw	r2,4(r20)
  803ad0:	003fcd06 	br	803a08 <_malloc_r+0x3fc>
  803ad4:	2808d27a 	srli	r4,r5,9
  803ad8:	2000371e 	bne	r4,zero,803bb8 <_malloc_r+0x5ac>
  803adc:	2808d0fa 	srli	r4,r5,3
  803ae0:	200690fa 	slli	r3,r4,3
  803ae4:	1ad1883a 	add	r8,r3,r11
  803ae8:	41800217 	ldw	r6,8(r8)
  803aec:	41805b26 	beq	r8,r6,803c5c <_malloc_r+0x650>
  803af0:	30800117 	ldw	r2,4(r6)
  803af4:	00ffff04 	movi	r3,-4
  803af8:	10c4703a 	and	r2,r2,r3
  803afc:	2880022e 	bgeu	r5,r2,803b08 <_malloc_r+0x4fc>
  803b00:	31800217 	ldw	r6,8(r6)
  803b04:	41bffa1e 	bne	r8,r6,803af0 <_malloc_r+0x4e4>
  803b08:	32000317 	ldw	r8,12(r6)
  803b0c:	39c00117 	ldw	r7,4(r7)
  803b10:	82000315 	stw	r8,12(r16)
  803b14:	81800215 	stw	r6,8(r16)
  803b18:	07002074 	movhi	fp,129
  803b1c:	e710bc04 	addi	fp,fp,17136
  803b20:	34000315 	stw	r16,12(r6)
  803b24:	44000215 	stw	r16,8(r8)
  803b28:	003f3e06 	br	803824 <_malloc_r+0x218>
  803b2c:	63000044 	addi	r12,r12,1
  803b30:	608000cc 	andi	r2,r12,3
  803b34:	10005d26 	beq	r2,zero,803cac <_malloc_r+0x6a0>
  803b38:	18c00204 	addi	r3,r3,8
  803b3c:	003f5106 	br	803884 <_malloc_r+0x278>
  803b40:	8089883a 	add	r4,r16,r2
  803b44:	003f6d06 	br	8038fc <_malloc_r+0x2f0>
  803b48:	00805504 	movi	r2,340
  803b4c:	10c02036 	bltu	r2,r3,803bd0 <_malloc_r+0x5c4>
  803b50:	8804d3fa 	srli	r2,r17,15
  803b54:	11801dc4 	addi	r6,r2,119
  803b58:	300490fa 	slli	r2,r6,3
  803b5c:	003ed806 	br	8036c0 <_malloc_r+0xb4>
  803b60:	48c000c4 	addi	r3,r9,3
  803b64:	003f3106 	br	80382c <_malloc_r+0x220>
  803b68:	05c02074 	movhi	r23,129
  803b6c:	bdddc904 	addi	r23,r23,30500
  803b70:	b8800017 	ldw	r2,0(r23)
  803b74:	988d883a 	add	r6,r19,r2
  803b78:	b9800015 	stw	r6,0(r23)
  803b7c:	293fb21e 	bne	r5,r4,803a48 <_malloc_r+0x43c>
  803b80:	2083ffcc 	andi	r2,r4,4095
  803b84:	103fb01e 	bne	r2,zero,803a48 <_malloc_r+0x43c>
  803b88:	e4000217 	ldw	r16,8(fp)
  803b8c:	9d45883a 	add	r2,r19,r21
  803b90:	10800054 	ori	r2,r2,1
  803b94:	80800115 	stw	r2,4(r16)
  803b98:	b8c00017 	ldw	r3,0(r23)
  803b9c:	d0a74d17 	ldw	r2,-25292(gp)
  803ba0:	10c0012e 	bgeu	r2,r3,803ba8 <_malloc_r+0x59c>
  803ba4:	d0e74d15 	stw	r3,-25292(gp)
  803ba8:	d0a74e17 	ldw	r2,-25288(gp)
  803bac:	10ff962e 	bgeu	r2,r3,803a08 <_malloc_r+0x3fc>
  803bb0:	d0e74e15 	stw	r3,-25288(gp)
  803bb4:	003f9406 	br	803a08 <_malloc_r+0x3fc>
  803bb8:	00800104 	movi	r2,4
  803bbc:	11001e36 	bltu	r2,r4,803c38 <_malloc_r+0x62c>
  803bc0:	2804d1ba 	srli	r2,r5,6
  803bc4:	11000e04 	addi	r4,r2,56
  803bc8:	200690fa 	slli	r3,r4,3
  803bcc:	003fc506 	br	803ae4 <_malloc_r+0x4d8>
  803bd0:	00815504 	movi	r2,1364
  803bd4:	10c01d2e 	bgeu	r2,r3,803c4c <_malloc_r+0x640>
  803bd8:	01801f84 	movi	r6,126
  803bdc:	0080fc04 	movi	r2,1008
  803be0:	003eb706 	br	8036c0 <_malloc_r+0xb4>
  803be4:	00800204 	movi	r2,8
  803be8:	10cbc83a 	sub	r5,r2,r3
  803bec:	2169883a 	add	r20,r4,r5
  803bf0:	003f9e06 	br	803a6c <_malloc_r+0x460>
  803bf4:	00bffe04 	movi	r2,-8
  803bf8:	a93ffd04 	addi	r4,r21,-12
  803bfc:	2088703a 	and	r4,r4,r2
  803c00:	b10b883a 	add	r5,r22,r4
  803c04:	00c00144 	movi	r3,5
  803c08:	28c00215 	stw	r3,8(r5)
  803c0c:	28c00115 	stw	r3,4(r5)
  803c10:	b0800117 	ldw	r2,4(r22)
  803c14:	1080004c 	andi	r2,r2,1
  803c18:	2084b03a 	or	r2,r4,r2
  803c1c:	b0800115 	stw	r2,4(r22)
  803c20:	313fdd2e 	bgeu	r6,r4,803b98 <_malloc_r+0x58c>
  803c24:	b1400204 	addi	r5,r22,8
  803c28:	9009883a 	mov	r4,r18
  803c2c:	08080800 	call	808080 <_free_r>
  803c30:	e4000217 	ldw	r16,8(fp)
  803c34:	003fd806 	br	803b98 <_malloc_r+0x58c>
  803c38:	00800504 	movi	r2,20
  803c3c:	11001536 	bltu	r2,r4,803c94 <_malloc_r+0x688>
  803c40:	210016c4 	addi	r4,r4,91
  803c44:	200690fa 	slli	r3,r4,3
  803c48:	003fa606 	br	803ae4 <_malloc_r+0x4d8>
  803c4c:	8804d4ba 	srli	r2,r17,18
  803c50:	11801f04 	addi	r6,r2,124
  803c54:	300490fa 	slli	r2,r6,3
  803c58:	003e9906 	br	8036c0 <_malloc_r+0xb4>
  803c5c:	2009d0ba 	srai	r4,r4,2
  803c60:	01402074 	movhi	r5,129
  803c64:	2950bc04 	addi	r5,r5,17136
  803c68:	00c00044 	movi	r3,1
  803c6c:	28800117 	ldw	r2,4(r5)
  803c70:	1906983a 	sll	r3,r3,r4
  803c74:	10c4b03a 	or	r2,r2,r3
  803c78:	28800115 	stw	r2,4(r5)
  803c7c:	003fa306 	br	803b0c <_malloc_r+0x500>
  803c80:	0027883a 	mov	r19,zero
  803c84:	00c00044 	movi	r3,1
  803c88:	003f8606 	br	803aa4 <_malloc_r+0x498>
  803c8c:	d1200315 	stw	r4,-32756(gp)
  803c90:	003f7306 	br	803a60 <_malloc_r+0x454>
  803c94:	00801504 	movi	r2,84
  803c98:	11001936 	bltu	r2,r4,803d00 <_malloc_r+0x6f4>
  803c9c:	2804d33a 	srli	r2,r5,12
  803ca0:	11001b84 	addi	r4,r2,110
  803ca4:	200690fa 	slli	r3,r4,3
  803ca8:	003f8e06 	br	803ae4 <_malloc_r+0x4d8>
  803cac:	480b883a 	mov	r5,r9
  803cb0:	6807883a 	mov	r3,r13
  803cb4:	288000cc 	andi	r2,r5,3
  803cb8:	18fffe04 	addi	r3,r3,-8
  803cbc:	297fffc4 	addi	r5,r5,-1
  803cc0:	10001526 	beq	r2,zero,803d18 <_malloc_r+0x70c>
  803cc4:	18800217 	ldw	r2,8(r3)
  803cc8:	10fffa26 	beq	r2,r3,803cb4 <_malloc_r+0x6a8>
  803ccc:	2109883a 	add	r4,r4,r4
  803cd0:	393f1e36 	bltu	r7,r4,80394c <_malloc_r+0x340>
  803cd4:	203f1d26 	beq	r4,zero,80394c <_malloc_r+0x340>
  803cd8:	21c4703a 	and	r2,r4,r7
  803cdc:	10000226 	beq	r2,zero,803ce8 <_malloc_r+0x6dc>
  803ce0:	6013883a 	mov	r9,r12
  803ce4:	003ee106 	br	80386c <_malloc_r+0x260>
  803ce8:	2109883a 	add	r4,r4,r4
  803cec:	3904703a 	and	r2,r7,r4
  803cf0:	63000104 	addi	r12,r12,4
  803cf4:	103ffc26 	beq	r2,zero,803ce8 <_malloc_r+0x6dc>
  803cf8:	6013883a 	mov	r9,r12
  803cfc:	003edb06 	br	80386c <_malloc_r+0x260>
  803d00:	00805504 	movi	r2,340
  803d04:	11000836 	bltu	r2,r4,803d28 <_malloc_r+0x71c>
  803d08:	2804d3fa 	srli	r2,r5,15
  803d0c:	11001dc4 	addi	r4,r2,119
  803d10:	200690fa 	slli	r3,r4,3
  803d14:	003f7306 	br	803ae4 <_malloc_r+0x4d8>
  803d18:	0104303a 	nor	r2,zero,r4
  803d1c:	388e703a 	and	r7,r7,r2
  803d20:	e1c00115 	stw	r7,4(fp)
  803d24:	003fe906 	br	803ccc <_malloc_r+0x6c0>
  803d28:	00815504 	movi	r2,1364
  803d2c:	1100032e 	bgeu	r2,r4,803d3c <_malloc_r+0x730>
  803d30:	01001f84 	movi	r4,126
  803d34:	00c0fc04 	movi	r3,1008
  803d38:	003f6a06 	br	803ae4 <_malloc_r+0x4d8>
  803d3c:	2804d4ba 	srli	r2,r5,18
  803d40:	11001f04 	addi	r4,r2,124
  803d44:	200690fa 	slli	r3,r4,3
  803d48:	003f6606 	br	803ae4 <_malloc_r+0x4d8>

00803d4c <memcpy>:
  803d4c:	01c003c4 	movi	r7,15
  803d50:	2007883a 	mov	r3,r4
  803d54:	3980032e 	bgeu	r7,r6,803d64 <memcpy+0x18>
  803d58:	2904b03a 	or	r2,r5,r4
  803d5c:	108000cc 	andi	r2,r2,3
  803d60:	10000926 	beq	r2,zero,803d88 <memcpy+0x3c>
  803d64:	30000626 	beq	r6,zero,803d80 <memcpy+0x34>
  803d68:	30cd883a 	add	r6,r6,r3
  803d6c:	28800003 	ldbu	r2,0(r5)
  803d70:	29400044 	addi	r5,r5,1
  803d74:	18800005 	stb	r2,0(r3)
  803d78:	18c00044 	addi	r3,r3,1
  803d7c:	30fffb1e 	bne	r6,r3,803d6c <memcpy+0x20>
  803d80:	2005883a 	mov	r2,r4
  803d84:	f800283a 	ret
  803d88:	3811883a 	mov	r8,r7
  803d8c:	200f883a 	mov	r7,r4
  803d90:	28c00017 	ldw	r3,0(r5)
  803d94:	31bffc04 	addi	r6,r6,-16
  803d98:	38c00015 	stw	r3,0(r7)
  803d9c:	28800117 	ldw	r2,4(r5)
  803da0:	38800115 	stw	r2,4(r7)
  803da4:	28c00217 	ldw	r3,8(r5)
  803da8:	38c00215 	stw	r3,8(r7)
  803dac:	28800317 	ldw	r2,12(r5)
  803db0:	29400404 	addi	r5,r5,16
  803db4:	38800315 	stw	r2,12(r7)
  803db8:	39c00404 	addi	r7,r7,16
  803dbc:	41bff436 	bltu	r8,r6,803d90 <memcpy+0x44>
  803dc0:	008000c4 	movi	r2,3
  803dc4:	1180072e 	bgeu	r2,r6,803de4 <memcpy+0x98>
  803dc8:	1007883a 	mov	r3,r2
  803dcc:	28800017 	ldw	r2,0(r5)
  803dd0:	31bfff04 	addi	r6,r6,-4
  803dd4:	29400104 	addi	r5,r5,4
  803dd8:	38800015 	stw	r2,0(r7)
  803ddc:	39c00104 	addi	r7,r7,4
  803de0:	19bffa36 	bltu	r3,r6,803dcc <memcpy+0x80>
  803de4:	3807883a 	mov	r3,r7
  803de8:	003fde06 	br	803d64 <memcpy+0x18>

00803dec <printf>:
  803dec:	defffb04 	addi	sp,sp,-20
  803df0:	dfc00115 	stw	ra,4(sp)
  803df4:	d9400215 	stw	r5,8(sp)
  803df8:	d9800315 	stw	r6,12(sp)
  803dfc:	d9c00415 	stw	r7,16(sp)
  803e00:	00802074 	movhi	r2,129
  803e04:	10966304 	addi	r2,r2,22924
  803e08:	10c00017 	ldw	r3,0(r2)
  803e0c:	200b883a 	mov	r5,r4
  803e10:	d8800204 	addi	r2,sp,8
  803e14:	19000217 	ldw	r4,8(r3)
  803e18:	100d883a 	mov	r6,r2
  803e1c:	d8800015 	stw	r2,0(sp)
  803e20:	0805f840 	call	805f84 <__vfprintf_internal>
  803e24:	dfc00117 	ldw	ra,4(sp)
  803e28:	dec00504 	addi	sp,sp,20
  803e2c:	f800283a 	ret

00803e30 <_printf_r>:
  803e30:	defffc04 	addi	sp,sp,-16
  803e34:	dfc00115 	stw	ra,4(sp)
  803e38:	d9800215 	stw	r6,8(sp)
  803e3c:	d9c00315 	stw	r7,12(sp)
  803e40:	280d883a 	mov	r6,r5
  803e44:	21400217 	ldw	r5,8(r4)
  803e48:	d8c00204 	addi	r3,sp,8
  803e4c:	180f883a 	mov	r7,r3
  803e50:	d8c00015 	stw	r3,0(sp)
  803e54:	08040d80 	call	8040d8 <___vfprintf_internal_r>
  803e58:	dfc00117 	ldw	ra,4(sp)
  803e5c:	dec00404 	addi	sp,sp,16
  803e60:	f800283a 	ret

00803e64 <putchar>:
  803e64:	00802074 	movhi	r2,129
  803e68:	10966304 	addi	r2,r2,22924
  803e6c:	11800017 	ldw	r6,0(r2)
  803e70:	200b883a 	mov	r5,r4
  803e74:	3009883a 	mov	r4,r6
  803e78:	31800217 	ldw	r6,8(r6)
  803e7c:	0809f5c1 	jmpi	809f5c <_putc_r>

00803e80 <_putchar_r>:
  803e80:	21800217 	ldw	r6,8(r4)
  803e84:	0809f5c1 	jmpi	809f5c <_putc_r>

00803e88 <_puts_r>:
  803e88:	defff604 	addi	sp,sp,-40
  803e8c:	dc400715 	stw	r17,28(sp)
  803e90:	2023883a 	mov	r17,r4
  803e94:	2809883a 	mov	r4,r5
  803e98:	dfc00915 	stw	ra,36(sp)
  803e9c:	dcc00815 	stw	r19,32(sp)
  803ea0:	2827883a 	mov	r19,r5
  803ea4:	080400c0 	call	80400c <strlen>
  803ea8:	89400217 	ldw	r5,8(r17)
  803eac:	00c02074 	movhi	r3,129
  803eb0:	18cdfa04 	addi	r3,r3,14312
  803eb4:	01c00044 	movi	r7,1
  803eb8:	12000044 	addi	r8,r2,1
  803ebc:	d8c00515 	stw	r3,20(sp)
  803ec0:	d9c00615 	stw	r7,24(sp)
  803ec4:	d8c00304 	addi	r3,sp,12
  803ec8:	01c00084 	movi	r7,2
  803ecc:	8809883a 	mov	r4,r17
  803ed0:	d80d883a 	mov	r6,sp
  803ed4:	d8c00015 	stw	r3,0(sp)
  803ed8:	dcc00315 	stw	r19,12(sp)
  803edc:	da000215 	stw	r8,8(sp)
  803ee0:	d9c00115 	stw	r7,4(sp)
  803ee4:	d8800415 	stw	r2,16(sp)
  803ee8:	08083940 	call	808394 <__sfvwrite_r>
  803eec:	00ffffc4 	movi	r3,-1
  803ef0:	10000626 	beq	r2,zero,803f0c <_puts_r+0x84>
  803ef4:	1805883a 	mov	r2,r3
  803ef8:	dfc00917 	ldw	ra,36(sp)
  803efc:	dcc00817 	ldw	r19,32(sp)
  803f00:	dc400717 	ldw	r17,28(sp)
  803f04:	dec00a04 	addi	sp,sp,40
  803f08:	f800283a 	ret
  803f0c:	00c00284 	movi	r3,10
  803f10:	1805883a 	mov	r2,r3
  803f14:	dfc00917 	ldw	ra,36(sp)
  803f18:	dcc00817 	ldw	r19,32(sp)
  803f1c:	dc400717 	ldw	r17,28(sp)
  803f20:	dec00a04 	addi	sp,sp,40
  803f24:	f800283a 	ret

00803f28 <puts>:
  803f28:	00802074 	movhi	r2,129
  803f2c:	10966304 	addi	r2,r2,22924
  803f30:	200b883a 	mov	r5,r4
  803f34:	11000017 	ldw	r4,0(r2)
  803f38:	0803e881 	jmpi	803e88 <_puts_r>

00803f3c <__srget_r>:
  803f3c:	defffe04 	addi	sp,sp,-8
  803f40:	dc000015 	stw	r16,0(sp)
  803f44:	dfc00115 	stw	ra,4(sp)
  803f48:	2821883a 	mov	r16,r5
  803f4c:	080a6380 	call	80a638 <__srefill_r>
  803f50:	013fffc4 	movi	r4,-1
  803f54:	1000071e 	bne	r2,zero,803f74 <__srget_r+0x38>
  803f58:	80800117 	ldw	r2,4(r16)
  803f5c:	81000017 	ldw	r4,0(r16)
  803f60:	10bfffc4 	addi	r2,r2,-1
  803f64:	20c00044 	addi	r3,r4,1
  803f68:	80800115 	stw	r2,4(r16)
  803f6c:	21000003 	ldbu	r4,0(r4)
  803f70:	80c00015 	stw	r3,0(r16)
  803f74:	2005883a 	mov	r2,r4
  803f78:	dfc00117 	ldw	ra,4(sp)
  803f7c:	dc000017 	ldw	r16,0(sp)
  803f80:	dec00204 	addi	sp,sp,8
  803f84:	f800283a 	ret

00803f88 <__srget>:
  803f88:	00802074 	movhi	r2,129
  803f8c:	10966304 	addi	r2,r2,22924
  803f90:	200b883a 	mov	r5,r4
  803f94:	11000017 	ldw	r4,0(r2)
  803f98:	0803f3c1 	jmpi	803f3c <__srget_r>

00803f9c <_sbrk_r>:
  803f9c:	defffd04 	addi	sp,sp,-12
  803fa0:	dc000015 	stw	r16,0(sp)
  803fa4:	04002074 	movhi	r16,129
  803fa8:	841db204 	addi	r16,r16,30408
  803fac:	dc400115 	stw	r17,4(sp)
  803fb0:	80000015 	stw	zero,0(r16)
  803fb4:	2023883a 	mov	r17,r4
  803fb8:	2809883a 	mov	r4,r5
  803fbc:	dfc00215 	stw	ra,8(sp)
  803fc0:	080c9640 	call	80c964 <sbrk>
  803fc4:	1007883a 	mov	r3,r2
  803fc8:	00bfffc4 	movi	r2,-1
  803fcc:	18800626 	beq	r3,r2,803fe8 <_sbrk_r+0x4c>
  803fd0:	1805883a 	mov	r2,r3
  803fd4:	dfc00217 	ldw	ra,8(sp)
  803fd8:	dc400117 	ldw	r17,4(sp)
  803fdc:	dc000017 	ldw	r16,0(sp)
  803fe0:	dec00304 	addi	sp,sp,12
  803fe4:	f800283a 	ret
  803fe8:	80800017 	ldw	r2,0(r16)
  803fec:	103ff826 	beq	r2,zero,803fd0 <_sbrk_r+0x34>
  803ff0:	88800015 	stw	r2,0(r17)
  803ff4:	1805883a 	mov	r2,r3
  803ff8:	dfc00217 	ldw	ra,8(sp)
  803ffc:	dc400117 	ldw	r17,4(sp)
  804000:	dc000017 	ldw	r16,0(sp)
  804004:	dec00304 	addi	sp,sp,12
  804008:	f800283a 	ret

0080400c <strlen>:
  80400c:	208000cc 	andi	r2,r4,3
  804010:	2011883a 	mov	r8,r4
  804014:	1000161e 	bne	r2,zero,804070 <strlen+0x64>
  804018:	20c00017 	ldw	r3,0(r4)
  80401c:	017fbff4 	movhi	r5,65279
  804020:	297fbfc4 	addi	r5,r5,-257
  804024:	01e02074 	movhi	r7,32897
  804028:	39e02004 	addi	r7,r7,-32640
  80402c:	1945883a 	add	r2,r3,r5
  804030:	11c4703a 	and	r2,r2,r7
  804034:	00c6303a 	nor	r3,zero,r3
  804038:	1886703a 	and	r3,r3,r2
  80403c:	18000c1e 	bne	r3,zero,804070 <strlen+0x64>
  804040:	280d883a 	mov	r6,r5
  804044:	380b883a 	mov	r5,r7
  804048:	21000104 	addi	r4,r4,4
  80404c:	20800017 	ldw	r2,0(r4)
  804050:	1187883a 	add	r3,r2,r6
  804054:	1946703a 	and	r3,r3,r5
  804058:	0084303a 	nor	r2,zero,r2
  80405c:	10c4703a 	and	r2,r2,r3
  804060:	103ff926 	beq	r2,zero,804048 <strlen+0x3c>
  804064:	20800007 	ldb	r2,0(r4)
  804068:	10000326 	beq	r2,zero,804078 <strlen+0x6c>
  80406c:	21000044 	addi	r4,r4,1
  804070:	20800007 	ldb	r2,0(r4)
  804074:	103ffd1e 	bne	r2,zero,80406c <strlen+0x60>
  804078:	2205c83a 	sub	r2,r4,r8
  80407c:	f800283a 	ret

00804080 <__sprint_r>:
  804080:	30800217 	ldw	r2,8(r6)
  804084:	defffe04 	addi	sp,sp,-8
  804088:	dc000015 	stw	r16,0(sp)
  80408c:	dfc00115 	stw	ra,4(sp)
  804090:	3021883a 	mov	r16,r6
  804094:	0007883a 	mov	r3,zero
  804098:	1000061e 	bne	r2,zero,8040b4 <__sprint_r+0x34>
  80409c:	1805883a 	mov	r2,r3
  8040a0:	30000115 	stw	zero,4(r6)
  8040a4:	dfc00117 	ldw	ra,4(sp)
  8040a8:	dc000017 	ldw	r16,0(sp)
  8040ac:	dec00204 	addi	sp,sp,8
  8040b0:	f800283a 	ret
  8040b4:	08083940 	call	808394 <__sfvwrite_r>
  8040b8:	1007883a 	mov	r3,r2
  8040bc:	1805883a 	mov	r2,r3
  8040c0:	80000115 	stw	zero,4(r16)
  8040c4:	80000215 	stw	zero,8(r16)
  8040c8:	dfc00117 	ldw	ra,4(sp)
  8040cc:	dc000017 	ldw	r16,0(sp)
  8040d0:	dec00204 	addi	sp,sp,8
  8040d4:	f800283a 	ret

008040d8 <___vfprintf_internal_r>:
  8040d8:	defea404 	addi	sp,sp,-1392
  8040dc:	dd815815 	stw	r22,1376(sp)
  8040e0:	dc015215 	stw	r16,1352(sp)
  8040e4:	d9c15115 	stw	r7,1348(sp)
  8040e8:	dfc15b15 	stw	ra,1388(sp)
  8040ec:	df015a15 	stw	fp,1384(sp)
  8040f0:	ddc15915 	stw	r23,1380(sp)
  8040f4:	dd415715 	stw	r21,1372(sp)
  8040f8:	dd015615 	stw	r20,1368(sp)
  8040fc:	dcc15515 	stw	r19,1364(sp)
  804100:	dc815415 	stw	r18,1360(sp)
  804104:	dc415315 	stw	r17,1356(sp)
  804108:	282d883a 	mov	r22,r5
  80410c:	3021883a 	mov	r16,r6
  804110:	d9014f15 	stw	r4,1340(sp)
  804114:	08089b80 	call	8089b8 <_localeconv_r>
  804118:	10800017 	ldw	r2,0(r2)
  80411c:	d9c15117 	ldw	r7,1348(sp)
  804120:	d8814915 	stw	r2,1316(sp)
  804124:	d8814f17 	ldw	r2,1340(sp)
  804128:	10000226 	beq	r2,zero,804134 <___vfprintf_internal_r+0x5c>
  80412c:	10800e17 	ldw	r2,56(r2)
  804130:	10020d26 	beq	r2,zero,804968 <___vfprintf_internal_r+0x890>
  804134:	b080030b 	ldhu	r2,12(r22)
  804138:	1080020c 	andi	r2,r2,8
  80413c:	10020e26 	beq	r2,zero,804978 <___vfprintf_internal_r+0x8a0>
  804140:	b0800417 	ldw	r2,16(r22)
  804144:	10020c26 	beq	r2,zero,804978 <___vfprintf_internal_r+0x8a0>
  804148:	b200030b 	ldhu	r8,12(r22)
  80414c:	00800284 	movi	r2,10
  804150:	40c0068c 	andi	r3,r8,26
  804154:	18802f1e 	bne	r3,r2,804214 <___vfprintf_internal_r+0x13c>
  804158:	b080038f 	ldh	r2,14(r22)
  80415c:	10002d16 	blt	r2,zero,804214 <___vfprintf_internal_r+0x13c>
  804160:	b240038b 	ldhu	r9,14(r22)
  804164:	b2800717 	ldw	r10,28(r22)
  804168:	b2c00917 	ldw	r11,36(r22)
  80416c:	d9014f17 	ldw	r4,1340(sp)
  804170:	dc402904 	addi	r17,sp,164
  804174:	d8804004 	addi	r2,sp,256
  804178:	00c10004 	movi	r3,1024
  80417c:	423fff4c 	andi	r8,r8,65533
  804180:	800d883a 	mov	r6,r16
  804184:	880b883a 	mov	r5,r17
  804188:	da002c0d 	sth	r8,176(sp)
  80418c:	da402c8d 	sth	r9,178(sp)
  804190:	da803015 	stw	r10,192(sp)
  804194:	dac03215 	stw	r11,200(sp)
  804198:	d8802d15 	stw	r2,180(sp)
  80419c:	d8c02e15 	stw	r3,184(sp)
  8041a0:	d8802915 	stw	r2,164(sp)
  8041a4:	d8c02b15 	stw	r3,172(sp)
  8041a8:	d8002f15 	stw	zero,188(sp)
  8041ac:	08040d80 	call	8040d8 <___vfprintf_internal_r>
  8041b0:	d8814b15 	stw	r2,1324(sp)
  8041b4:	10000416 	blt	r2,zero,8041c8 <___vfprintf_internal_r+0xf0>
  8041b8:	d9014f17 	ldw	r4,1340(sp)
  8041bc:	880b883a 	mov	r5,r17
  8041c0:	0807a640 	call	807a64 <_fflush_r>
  8041c4:	1002321e 	bne	r2,zero,804a90 <___vfprintf_internal_r+0x9b8>
  8041c8:	d8802c0b 	ldhu	r2,176(sp)
  8041cc:	1080100c 	andi	r2,r2,64
  8041d0:	10000326 	beq	r2,zero,8041e0 <___vfprintf_internal_r+0x108>
  8041d4:	b080030b 	ldhu	r2,12(r22)
  8041d8:	10801014 	ori	r2,r2,64
  8041dc:	b080030d 	sth	r2,12(r22)
  8041e0:	d8814b17 	ldw	r2,1324(sp)
  8041e4:	dfc15b17 	ldw	ra,1388(sp)
  8041e8:	df015a17 	ldw	fp,1384(sp)
  8041ec:	ddc15917 	ldw	r23,1380(sp)
  8041f0:	dd815817 	ldw	r22,1376(sp)
  8041f4:	dd415717 	ldw	r21,1372(sp)
  8041f8:	dd015617 	ldw	r20,1368(sp)
  8041fc:	dcc15517 	ldw	r19,1364(sp)
  804200:	dc815417 	ldw	r18,1360(sp)
  804204:	dc415317 	ldw	r17,1356(sp)
  804208:	dc015217 	ldw	r16,1352(sp)
  80420c:	dec15c04 	addi	sp,sp,1392
  804210:	f800283a 	ret
  804214:	0005883a 	mov	r2,zero
  804218:	0007883a 	mov	r3,zero
  80421c:	dd401904 	addi	r21,sp,100
  804220:	d8814215 	stw	r2,1288(sp)
  804224:	802f883a 	mov	r23,r16
  804228:	d8c14315 	stw	r3,1292(sp)
  80422c:	d8014b15 	stw	zero,1324(sp)
  804230:	d8014815 	stw	zero,1312(sp)
  804234:	d8014415 	stw	zero,1296(sp)
  804238:	d8014715 	stw	zero,1308(sp)
  80423c:	dd400c15 	stw	r21,48(sp)
  804240:	d8000e15 	stw	zero,56(sp)
  804244:	d8000d15 	stw	zero,52(sp)
  804248:	b8800007 	ldb	r2,0(r23)
  80424c:	10001926 	beq	r2,zero,8042b4 <___vfprintf_internal_r+0x1dc>
  804250:	00c00944 	movi	r3,37
  804254:	10c01726 	beq	r2,r3,8042b4 <___vfprintf_internal_r+0x1dc>
  804258:	b821883a 	mov	r16,r23
  80425c:	00000106 	br	804264 <___vfprintf_internal_r+0x18c>
  804260:	10c00326 	beq	r2,r3,804270 <___vfprintf_internal_r+0x198>
  804264:	84000044 	addi	r16,r16,1
  804268:	80800007 	ldb	r2,0(r16)
  80426c:	103ffc1e 	bne	r2,zero,804260 <___vfprintf_internal_r+0x188>
  804270:	85e7c83a 	sub	r19,r16,r23
  804274:	98000e26 	beq	r19,zero,8042b0 <___vfprintf_internal_r+0x1d8>
  804278:	dc800e17 	ldw	r18,56(sp)
  80427c:	dc400d17 	ldw	r17,52(sp)
  804280:	008001c4 	movi	r2,7
  804284:	94e5883a 	add	r18,r18,r19
  804288:	8c400044 	addi	r17,r17,1
  80428c:	adc00015 	stw	r23,0(r21)
  804290:	dc800e15 	stw	r18,56(sp)
  804294:	acc00115 	stw	r19,4(r21)
  804298:	dc400d15 	stw	r17,52(sp)
  80429c:	14428b16 	blt	r2,r17,804ccc <___vfprintf_internal_r+0xbf4>
  8042a0:	ad400204 	addi	r21,r21,8
  8042a4:	d9014b17 	ldw	r4,1324(sp)
  8042a8:	24c9883a 	add	r4,r4,r19
  8042ac:	d9014b15 	stw	r4,1324(sp)
  8042b0:	802f883a 	mov	r23,r16
  8042b4:	b8800007 	ldb	r2,0(r23)
  8042b8:	10013c26 	beq	r2,zero,8047ac <___vfprintf_internal_r+0x6d4>
  8042bc:	bdc00044 	addi	r23,r23,1
  8042c0:	d8000405 	stb	zero,16(sp)
  8042c4:	b8c00007 	ldb	r3,0(r23)
  8042c8:	04ffffc4 	movi	r19,-1
  8042cc:	d8014c15 	stw	zero,1328(sp)
  8042d0:	d8014a15 	stw	zero,1320(sp)
  8042d4:	d8c14d15 	stw	r3,1332(sp)
  8042d8:	bdc00044 	addi	r23,r23,1
  8042dc:	d9414d17 	ldw	r5,1332(sp)
  8042e0:	00801604 	movi	r2,88
  8042e4:	28fff804 	addi	r3,r5,-32
  8042e8:	10c06036 	bltu	r2,r3,80446c <___vfprintf_internal_r+0x394>
  8042ec:	18c5883a 	add	r2,r3,r3
  8042f0:	1085883a 	add	r2,r2,r2
  8042f4:	00c02034 	movhi	r3,128
  8042f8:	18d0c204 	addi	r3,r3,17160
  8042fc:	10c5883a 	add	r2,r2,r3
  804300:	11000017 	ldw	r4,0(r2)
  804304:	2000683a 	jmp	r4
  804308:	0080527c 	xorhi	r2,zero,329
  80430c:	0080446c 	andhi	r2,zero,273
  804310:	0080446c 	andhi	r2,zero,273
  804314:	00805268 	cmpgeui	r2,zero,329
  804318:	0080446c 	andhi	r2,zero,273
  80431c:	0080446c 	andhi	r2,zero,273
  804320:	0080446c 	andhi	r2,zero,273
  804324:	0080446c 	andhi	r2,zero,273
  804328:	0080446c 	andhi	r2,zero,273
  80432c:	0080446c 	andhi	r2,zero,273
  804330:	00805048 	cmpgei	r2,zero,321
  804334:	00805258 	cmpnei	r2,zero,329
  804338:	0080446c 	andhi	r2,zero,273
  80433c:	00805060 	cmpeqi	r2,zero,321
  804340:	008052f4 	movhi	r2,331
  804344:	0080446c 	andhi	r2,zero,273
  804348:	008052e0 	cmpeqi	r2,zero,331
  80434c:	008052a8 	cmpgeui	r2,zero,330
  804350:	008052a8 	cmpgeui	r2,zero,330
  804354:	008052a8 	cmpgeui	r2,zero,330
  804358:	008052a8 	cmpgeui	r2,zero,330
  80435c:	008052a8 	cmpgeui	r2,zero,330
  804360:	008052a8 	cmpgeui	r2,zero,330
  804364:	008052a8 	cmpgeui	r2,zero,330
  804368:	008052a8 	cmpgeui	r2,zero,330
  80436c:	008052a8 	cmpgeui	r2,zero,330
  804370:	0080446c 	andhi	r2,zero,273
  804374:	0080446c 	andhi	r2,zero,273
  804378:	0080446c 	andhi	r2,zero,273
  80437c:	0080446c 	andhi	r2,zero,273
  804380:	0080446c 	andhi	r2,zero,273
  804384:	0080446c 	andhi	r2,zero,273
  804388:	0080446c 	andhi	r2,zero,273
  80438c:	0080446c 	andhi	r2,zero,273
  804390:	0080446c 	andhi	r2,zero,273
  804394:	0080446c 	andhi	r2,zero,273
  804398:	00804ac4 	movi	r2,299
  80439c:	00805130 	cmpltui	r2,zero,324
  8043a0:	0080446c 	andhi	r2,zero,273
  8043a4:	00805130 	cmpltui	r2,zero,324
  8043a8:	0080446c 	andhi	r2,zero,273
  8043ac:	0080446c 	andhi	r2,zero,273
  8043b0:	0080446c 	andhi	r2,zero,273
  8043b4:	0080446c 	andhi	r2,zero,273
  8043b8:	00805294 	movui	r2,330
  8043bc:	0080446c 	andhi	r2,zero,273
  8043c0:	0080446c 	andhi	r2,zero,273
  8043c4:	00804b78 	rdprs	r2,zero,301
  8043c8:	0080446c 	andhi	r2,zero,273
  8043cc:	0080446c 	andhi	r2,zero,273
  8043d0:	0080446c 	andhi	r2,zero,273
  8043d4:	0080446c 	andhi	r2,zero,273
  8043d8:	0080446c 	andhi	r2,zero,273
  8043dc:	00804bc4 	movi	r2,303
  8043e0:	0080446c 	andhi	r2,zero,273
  8043e4:	0080446c 	andhi	r2,zero,273
  8043e8:	008051e4 	muli	r2,zero,327
  8043ec:	0080446c 	andhi	r2,zero,273
  8043f0:	0080446c 	andhi	r2,zero,273
  8043f4:	0080446c 	andhi	r2,zero,273
  8043f8:	0080446c 	andhi	r2,zero,273
  8043fc:	0080446c 	andhi	r2,zero,273
  804400:	0080446c 	andhi	r2,zero,273
  804404:	0080446c 	andhi	r2,zero,273
  804408:	0080446c 	andhi	r2,zero,273
  80440c:	0080446c 	andhi	r2,zero,273
  804410:	0080446c 	andhi	r2,zero,273
  804414:	008051b8 	rdprs	r2,zero,326
  804418:	00804ad0 	cmplti	r2,zero,299
  80441c:	00805130 	cmpltui	r2,zero,324
  804420:	00805130 	cmpltui	r2,zero,324
  804424:	00805130 	cmpltui	r2,zero,324
  804428:	0080511c 	xori	r2,zero,324
  80442c:	00804ad0 	cmplti	r2,zero,299
  804430:	0080446c 	andhi	r2,zero,273
  804434:	0080446c 	andhi	r2,zero,273
  804438:	008050a4 	muli	r2,zero,322
  80443c:	0080446c 	andhi	r2,zero,273
  804440:	00805074 	movhi	r2,321
  804444:	00804b84 	movi	r2,302
  804448:	008050d4 	movui	r2,323
  80444c:	008050c0 	call	8050c <__reset-0x77faf4>
  804450:	0080446c 	andhi	r2,zero,273
  804454:	00805350 	cmplti	r2,zero,333
  804458:	0080446c 	andhi	r2,zero,273
  80445c:	00804bd0 	cmplti	r2,zero,303
  804460:	0080446c 	andhi	r2,zero,273
  804464:	0080446c 	andhi	r2,zero,273
  804468:	00805248 	cmpgei	r2,zero,329
  80446c:	d9014d17 	ldw	r4,1332(sp)
  804470:	2000ce26 	beq	r4,zero,8047ac <___vfprintf_internal_r+0x6d4>
  804474:	01400044 	movi	r5,1
  804478:	d9800f04 	addi	r6,sp,60
  80447c:	d9c14015 	stw	r7,1280(sp)
  804480:	d9414515 	stw	r5,1300(sp)
  804484:	d9814115 	stw	r6,1284(sp)
  804488:	280f883a 	mov	r7,r5
  80448c:	d9000f05 	stb	r4,60(sp)
  804490:	d8000405 	stb	zero,16(sp)
  804494:	d8014615 	stw	zero,1304(sp)
  804498:	d8c14c17 	ldw	r3,1328(sp)
  80449c:	1880008c 	andi	r2,r3,2
  8044a0:	1005003a 	cmpeq	r2,r2,zero
  8044a4:	d8815015 	stw	r2,1344(sp)
  8044a8:	1000031e 	bne	r2,zero,8044b8 <___vfprintf_internal_r+0x3e0>
  8044ac:	d9014517 	ldw	r4,1300(sp)
  8044b0:	21000084 	addi	r4,r4,2
  8044b4:	d9014515 	stw	r4,1300(sp)
  8044b8:	d9414c17 	ldw	r5,1328(sp)
  8044bc:	2940210c 	andi	r5,r5,132
  8044c0:	d9414e15 	stw	r5,1336(sp)
  8044c4:	28002d1e 	bne	r5,zero,80457c <___vfprintf_internal_r+0x4a4>
  8044c8:	d9814a17 	ldw	r6,1320(sp)
  8044cc:	d8814517 	ldw	r2,1300(sp)
  8044d0:	30a1c83a 	sub	r16,r6,r2
  8044d4:	0400290e 	bge	zero,r16,80457c <___vfprintf_internal_r+0x4a4>
  8044d8:	00800404 	movi	r2,16
  8044dc:	1404580e 	bge	r2,r16,805640 <___vfprintf_internal_r+0x1568>
  8044e0:	dc800e17 	ldw	r18,56(sp)
  8044e4:	dc400d17 	ldw	r17,52(sp)
  8044e8:	1027883a 	mov	r19,r2
  8044ec:	07002074 	movhi	fp,129
  8044f0:	e70ed284 	addi	fp,fp,15178
  8044f4:	050001c4 	movi	r20,7
  8044f8:	00000306 	br	804508 <___vfprintf_internal_r+0x430>
  8044fc:	843ffc04 	addi	r16,r16,-16
  804500:	ad400204 	addi	r21,r21,8
  804504:	9c00130e 	bge	r19,r16,804554 <___vfprintf_internal_r+0x47c>
  804508:	94800404 	addi	r18,r18,16
  80450c:	8c400044 	addi	r17,r17,1
  804510:	af000015 	stw	fp,0(r21)
  804514:	acc00115 	stw	r19,4(r21)
  804518:	dc800e15 	stw	r18,56(sp)
  80451c:	dc400d15 	stw	r17,52(sp)
  804520:	a47ff60e 	bge	r20,r17,8044fc <___vfprintf_internal_r+0x424>
  804524:	d9014f17 	ldw	r4,1340(sp)
  804528:	b00b883a 	mov	r5,r22
  80452c:	d9800c04 	addi	r6,sp,48
  804530:	d9c15115 	stw	r7,1348(sp)
  804534:	08040800 	call	804080 <__sprint_r>
  804538:	d9c15117 	ldw	r7,1348(sp)
  80453c:	10009e1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804540:	843ffc04 	addi	r16,r16,-16
  804544:	dc800e17 	ldw	r18,56(sp)
  804548:	dc400d17 	ldw	r17,52(sp)
  80454c:	dd401904 	addi	r21,sp,100
  804550:	9c3fed16 	blt	r19,r16,804508 <___vfprintf_internal_r+0x430>
  804554:	9425883a 	add	r18,r18,r16
  804558:	8c400044 	addi	r17,r17,1
  80455c:	008001c4 	movi	r2,7
  804560:	af000015 	stw	fp,0(r21)
  804564:	ac000115 	stw	r16,4(r21)
  804568:	dc800e15 	stw	r18,56(sp)
  80456c:	dc400d15 	stw	r17,52(sp)
  804570:	1441f516 	blt	r2,r17,804d48 <___vfprintf_internal_r+0xc70>
  804574:	ad400204 	addi	r21,r21,8
  804578:	00000206 	br	804584 <___vfprintf_internal_r+0x4ac>
  80457c:	dc800e17 	ldw	r18,56(sp)
  804580:	dc400d17 	ldw	r17,52(sp)
  804584:	d8800407 	ldb	r2,16(sp)
  804588:	10000b26 	beq	r2,zero,8045b8 <___vfprintf_internal_r+0x4e0>
  80458c:	00800044 	movi	r2,1
  804590:	94800044 	addi	r18,r18,1
  804594:	8c400044 	addi	r17,r17,1
  804598:	a8800115 	stw	r2,4(r21)
  80459c:	d8c00404 	addi	r3,sp,16
  8045a0:	008001c4 	movi	r2,7
  8045a4:	a8c00015 	stw	r3,0(r21)
  8045a8:	dc800e15 	stw	r18,56(sp)
  8045ac:	dc400d15 	stw	r17,52(sp)
  8045b0:	1441da16 	blt	r2,r17,804d1c <___vfprintf_internal_r+0xc44>
  8045b4:	ad400204 	addi	r21,r21,8
  8045b8:	d9015017 	ldw	r4,1344(sp)
  8045bc:	20000b1e 	bne	r4,zero,8045ec <___vfprintf_internal_r+0x514>
  8045c0:	d8800444 	addi	r2,sp,17
  8045c4:	94800084 	addi	r18,r18,2
  8045c8:	8c400044 	addi	r17,r17,1
  8045cc:	a8800015 	stw	r2,0(r21)
  8045d0:	00c00084 	movi	r3,2
  8045d4:	008001c4 	movi	r2,7
  8045d8:	a8c00115 	stw	r3,4(r21)
  8045dc:	dc800e15 	stw	r18,56(sp)
  8045e0:	dc400d15 	stw	r17,52(sp)
  8045e4:	1441c216 	blt	r2,r17,804cf0 <___vfprintf_internal_r+0xc18>
  8045e8:	ad400204 	addi	r21,r21,8
  8045ec:	d9414e17 	ldw	r5,1336(sp)
  8045f0:	00802004 	movi	r2,128
  8045f4:	2880b126 	beq	r5,r2,8048bc <___vfprintf_internal_r+0x7e4>
  8045f8:	d8c14617 	ldw	r3,1304(sp)
  8045fc:	19e1c83a 	sub	r16,r3,r7
  804600:	0400260e 	bge	zero,r16,80469c <___vfprintf_internal_r+0x5c4>
  804604:	00800404 	movi	r2,16
  804608:	1403c90e 	bge	r2,r16,805530 <___vfprintf_internal_r+0x1458>
  80460c:	1027883a 	mov	r19,r2
  804610:	07002074 	movhi	fp,129
  804614:	e70ece84 	addi	fp,fp,15162
  804618:	050001c4 	movi	r20,7
  80461c:	00000306 	br	80462c <___vfprintf_internal_r+0x554>
  804620:	843ffc04 	addi	r16,r16,-16
  804624:	ad400204 	addi	r21,r21,8
  804628:	9c00130e 	bge	r19,r16,804678 <___vfprintf_internal_r+0x5a0>
  80462c:	94800404 	addi	r18,r18,16
  804630:	8c400044 	addi	r17,r17,1
  804634:	af000015 	stw	fp,0(r21)
  804638:	acc00115 	stw	r19,4(r21)
  80463c:	dc800e15 	stw	r18,56(sp)
  804640:	dc400d15 	stw	r17,52(sp)
  804644:	a47ff60e 	bge	r20,r17,804620 <___vfprintf_internal_r+0x548>
  804648:	d9014f17 	ldw	r4,1340(sp)
  80464c:	b00b883a 	mov	r5,r22
  804650:	d9800c04 	addi	r6,sp,48
  804654:	d9c15115 	stw	r7,1348(sp)
  804658:	08040800 	call	804080 <__sprint_r>
  80465c:	d9c15117 	ldw	r7,1348(sp)
  804660:	1000551e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804664:	843ffc04 	addi	r16,r16,-16
  804668:	dc800e17 	ldw	r18,56(sp)
  80466c:	dc400d17 	ldw	r17,52(sp)
  804670:	dd401904 	addi	r21,sp,100
  804674:	9c3fed16 	blt	r19,r16,80462c <___vfprintf_internal_r+0x554>
  804678:	9425883a 	add	r18,r18,r16
  80467c:	8c400044 	addi	r17,r17,1
  804680:	008001c4 	movi	r2,7
  804684:	af000015 	stw	fp,0(r21)
  804688:	ac000115 	stw	r16,4(r21)
  80468c:	dc800e15 	stw	r18,56(sp)
  804690:	dc400d15 	stw	r17,52(sp)
  804694:	14418216 	blt	r2,r17,804ca0 <___vfprintf_internal_r+0xbc8>
  804698:	ad400204 	addi	r21,r21,8
  80469c:	d9014c17 	ldw	r4,1328(sp)
  8046a0:	2080400c 	andi	r2,r4,256
  8046a4:	10004a1e 	bne	r2,zero,8047d0 <___vfprintf_internal_r+0x6f8>
  8046a8:	d9414117 	ldw	r5,1284(sp)
  8046ac:	91e5883a 	add	r18,r18,r7
  8046b0:	8c400044 	addi	r17,r17,1
  8046b4:	008001c4 	movi	r2,7
  8046b8:	a9400015 	stw	r5,0(r21)
  8046bc:	a9c00115 	stw	r7,4(r21)
  8046c0:	dc800e15 	stw	r18,56(sp)
  8046c4:	dc400d15 	stw	r17,52(sp)
  8046c8:	14416716 	blt	r2,r17,804c68 <___vfprintf_internal_r+0xb90>
  8046cc:	a8c00204 	addi	r3,r21,8
  8046d0:	d9814c17 	ldw	r6,1328(sp)
  8046d4:	3080010c 	andi	r2,r6,4
  8046d8:	10002826 	beq	r2,zero,80477c <___vfprintf_internal_r+0x6a4>
  8046dc:	d8814a17 	ldw	r2,1320(sp)
  8046e0:	d9014517 	ldw	r4,1300(sp)
  8046e4:	1121c83a 	sub	r16,r2,r4
  8046e8:	0400240e 	bge	zero,r16,80477c <___vfprintf_internal_r+0x6a4>
  8046ec:	00800404 	movi	r2,16
  8046f0:	14044f0e 	bge	r2,r16,805830 <___vfprintf_internal_r+0x1758>
  8046f4:	dc400d17 	ldw	r17,52(sp)
  8046f8:	1027883a 	mov	r19,r2
  8046fc:	07002074 	movhi	fp,129
  804700:	e70ed284 	addi	fp,fp,15178
  804704:	050001c4 	movi	r20,7
  804708:	00000306 	br	804718 <___vfprintf_internal_r+0x640>
  80470c:	843ffc04 	addi	r16,r16,-16
  804710:	18c00204 	addi	r3,r3,8
  804714:	9c00110e 	bge	r19,r16,80475c <___vfprintf_internal_r+0x684>
  804718:	94800404 	addi	r18,r18,16
  80471c:	8c400044 	addi	r17,r17,1
  804720:	1f000015 	stw	fp,0(r3)
  804724:	1cc00115 	stw	r19,4(r3)
  804728:	dc800e15 	stw	r18,56(sp)
  80472c:	dc400d15 	stw	r17,52(sp)
  804730:	a47ff60e 	bge	r20,r17,80470c <___vfprintf_internal_r+0x634>
  804734:	d9014f17 	ldw	r4,1340(sp)
  804738:	b00b883a 	mov	r5,r22
  80473c:	d9800c04 	addi	r6,sp,48
  804740:	08040800 	call	804080 <__sprint_r>
  804744:	10001c1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804748:	843ffc04 	addi	r16,r16,-16
  80474c:	dc800e17 	ldw	r18,56(sp)
  804750:	dc400d17 	ldw	r17,52(sp)
  804754:	d8c01904 	addi	r3,sp,100
  804758:	9c3fef16 	blt	r19,r16,804718 <___vfprintf_internal_r+0x640>
  80475c:	9425883a 	add	r18,r18,r16
  804760:	8c400044 	addi	r17,r17,1
  804764:	008001c4 	movi	r2,7
  804768:	1f000015 	stw	fp,0(r3)
  80476c:	1c000115 	stw	r16,4(r3)
  804770:	dc800e15 	stw	r18,56(sp)
  804774:	dc400d15 	stw	r17,52(sp)
  804778:	1440cb16 	blt	r2,r17,804aa8 <___vfprintf_internal_r+0x9d0>
  80477c:	d8814a17 	ldw	r2,1320(sp)
  804780:	d9414517 	ldw	r5,1300(sp)
  804784:	1140010e 	bge	r2,r5,80478c <___vfprintf_internal_r+0x6b4>
  804788:	2805883a 	mov	r2,r5
  80478c:	d9814b17 	ldw	r6,1324(sp)
  804790:	308d883a 	add	r6,r6,r2
  804794:	d9814b15 	stw	r6,1324(sp)
  804798:	90013b1e 	bne	r18,zero,804c88 <___vfprintf_internal_r+0xbb0>
  80479c:	d9c14017 	ldw	r7,1280(sp)
  8047a0:	dd401904 	addi	r21,sp,100
  8047a4:	d8000d15 	stw	zero,52(sp)
  8047a8:	003ea706 	br	804248 <___vfprintf_internal_r+0x170>
  8047ac:	d8800e17 	ldw	r2,56(sp)
  8047b0:	10053f1e 	bne	r2,zero,805cb0 <___vfprintf_internal_r+0x1bd8>
  8047b4:	d8000d15 	stw	zero,52(sp)
  8047b8:	b080030b 	ldhu	r2,12(r22)
  8047bc:	1080100c 	andi	r2,r2,64
  8047c0:	103e8726 	beq	r2,zero,8041e0 <___vfprintf_internal_r+0x108>
  8047c4:	00bfffc4 	movi	r2,-1
  8047c8:	d8814b15 	stw	r2,1324(sp)
  8047cc:	003e8406 	br	8041e0 <___vfprintf_internal_r+0x108>
  8047d0:	d9814d17 	ldw	r6,1332(sp)
  8047d4:	00801944 	movi	r2,101
  8047d8:	11806e16 	blt	r2,r6,804994 <___vfprintf_internal_r+0x8bc>
  8047dc:	d9414717 	ldw	r5,1308(sp)
  8047e0:	00c00044 	movi	r3,1
  8047e4:	1943430e 	bge	r3,r5,8054f4 <___vfprintf_internal_r+0x141c>
  8047e8:	d8814117 	ldw	r2,1284(sp)
  8047ec:	94800044 	addi	r18,r18,1
  8047f0:	8c400044 	addi	r17,r17,1
  8047f4:	a8800015 	stw	r2,0(r21)
  8047f8:	008001c4 	movi	r2,7
  8047fc:	a8c00115 	stw	r3,4(r21)
  804800:	dc800e15 	stw	r18,56(sp)
  804804:	dc400d15 	stw	r17,52(sp)
  804808:	1441ca16 	blt	r2,r17,804f34 <___vfprintf_internal_r+0xe5c>
  80480c:	a8c00204 	addi	r3,r21,8
  804810:	d9014917 	ldw	r4,1316(sp)
  804814:	00800044 	movi	r2,1
  804818:	94800044 	addi	r18,r18,1
  80481c:	8c400044 	addi	r17,r17,1
  804820:	18800115 	stw	r2,4(r3)
  804824:	008001c4 	movi	r2,7
  804828:	19000015 	stw	r4,0(r3)
  80482c:	dc800e15 	stw	r18,56(sp)
  804830:	dc400d15 	stw	r17,52(sp)
  804834:	1441b616 	blt	r2,r17,804f10 <___vfprintf_internal_r+0xe38>
  804838:	1cc00204 	addi	r19,r3,8
  80483c:	d9014217 	ldw	r4,1288(sp)
  804840:	d9414317 	ldw	r5,1292(sp)
  804844:	000d883a 	mov	r6,zero
  804848:	000f883a 	mov	r7,zero
  80484c:	080bedc0 	call	80bedc <__nedf2>
  804850:	10017426 	beq	r2,zero,804e24 <___vfprintf_internal_r+0xd4c>
  804854:	d9414717 	ldw	r5,1308(sp)
  804858:	d9814117 	ldw	r6,1284(sp)
  80485c:	8c400044 	addi	r17,r17,1
  804860:	2c85883a 	add	r2,r5,r18
  804864:	14bfffc4 	addi	r18,r2,-1
  804868:	28bfffc4 	addi	r2,r5,-1
  80486c:	30c00044 	addi	r3,r6,1
  804870:	98800115 	stw	r2,4(r19)
  804874:	008001c4 	movi	r2,7
  804878:	98c00015 	stw	r3,0(r19)
  80487c:	dc800e15 	stw	r18,56(sp)
  804880:	dc400d15 	stw	r17,52(sp)
  804884:	14418e16 	blt	r2,r17,804ec0 <___vfprintf_internal_r+0xde8>
  804888:	9cc00204 	addi	r19,r19,8
  80488c:	d9414817 	ldw	r5,1312(sp)
  804890:	d8800804 	addi	r2,sp,32
  804894:	8c400044 	addi	r17,r17,1
  804898:	9165883a 	add	r18,r18,r5
  80489c:	98800015 	stw	r2,0(r19)
  8048a0:	008001c4 	movi	r2,7
  8048a4:	99400115 	stw	r5,4(r19)
  8048a8:	dc800e15 	stw	r18,56(sp)
  8048ac:	dc400d15 	stw	r17,52(sp)
  8048b0:	1440ed16 	blt	r2,r17,804c68 <___vfprintf_internal_r+0xb90>
  8048b4:	98c00204 	addi	r3,r19,8
  8048b8:	003f8506 	br	8046d0 <___vfprintf_internal_r+0x5f8>
  8048bc:	d9814a17 	ldw	r6,1320(sp)
  8048c0:	d8814517 	ldw	r2,1300(sp)
  8048c4:	30a1c83a 	sub	r16,r6,r2
  8048c8:	043f4b0e 	bge	zero,r16,8045f8 <___vfprintf_internal_r+0x520>
  8048cc:	00800404 	movi	r2,16
  8048d0:	1404340e 	bge	r2,r16,8059a4 <___vfprintf_internal_r+0x18cc>
  8048d4:	1027883a 	mov	r19,r2
  8048d8:	07002074 	movhi	fp,129
  8048dc:	e70ece84 	addi	fp,fp,15162
  8048e0:	050001c4 	movi	r20,7
  8048e4:	00000306 	br	8048f4 <___vfprintf_internal_r+0x81c>
  8048e8:	843ffc04 	addi	r16,r16,-16
  8048ec:	ad400204 	addi	r21,r21,8
  8048f0:	9c00130e 	bge	r19,r16,804940 <___vfprintf_internal_r+0x868>
  8048f4:	94800404 	addi	r18,r18,16
  8048f8:	8c400044 	addi	r17,r17,1
  8048fc:	af000015 	stw	fp,0(r21)
  804900:	acc00115 	stw	r19,4(r21)
  804904:	dc800e15 	stw	r18,56(sp)
  804908:	dc400d15 	stw	r17,52(sp)
  80490c:	a47ff60e 	bge	r20,r17,8048e8 <___vfprintf_internal_r+0x810>
  804910:	d9014f17 	ldw	r4,1340(sp)
  804914:	b00b883a 	mov	r5,r22
  804918:	d9800c04 	addi	r6,sp,48
  80491c:	d9c15115 	stw	r7,1348(sp)
  804920:	08040800 	call	804080 <__sprint_r>
  804924:	d9c15117 	ldw	r7,1348(sp)
  804928:	103fa31e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  80492c:	843ffc04 	addi	r16,r16,-16
  804930:	dc800e17 	ldw	r18,56(sp)
  804934:	dc400d17 	ldw	r17,52(sp)
  804938:	dd401904 	addi	r21,sp,100
  80493c:	9c3fed16 	blt	r19,r16,8048f4 <___vfprintf_internal_r+0x81c>
  804940:	9425883a 	add	r18,r18,r16
  804944:	8c400044 	addi	r17,r17,1
  804948:	008001c4 	movi	r2,7
  80494c:	af000015 	stw	fp,0(r21)
  804950:	ac000115 	stw	r16,4(r21)
  804954:	dc800e15 	stw	r18,56(sp)
  804958:	dc400d15 	stw	r17,52(sp)
  80495c:	14416116 	blt	r2,r17,804ee4 <___vfprintf_internal_r+0xe0c>
  804960:	ad400204 	addi	r21,r21,8
  804964:	003f2406 	br	8045f8 <___vfprintf_internal_r+0x520>
  804968:	d9014f17 	ldw	r4,1340(sp)
  80496c:	0807cfc0 	call	807cfc <__sinit>
  804970:	d9c15117 	ldw	r7,1348(sp)
  804974:	003def06 	br	804134 <___vfprintf_internal_r+0x5c>
  804978:	d9014f17 	ldw	r4,1340(sp)
  80497c:	b00b883a 	mov	r5,r22
  804980:	d9c15115 	stw	r7,1348(sp)
  804984:	0805fa80 	call	805fa8 <__swsetup_r>
  804988:	d9c15117 	ldw	r7,1348(sp)
  80498c:	103dee26 	beq	r2,zero,804148 <___vfprintf_internal_r+0x70>
  804990:	003f8c06 	br	8047c4 <___vfprintf_internal_r+0x6ec>
  804994:	d9014217 	ldw	r4,1288(sp)
  804998:	d9414317 	ldw	r5,1292(sp)
  80499c:	000d883a 	mov	r6,zero
  8049a0:	000f883a 	mov	r7,zero
  8049a4:	080be540 	call	80be54 <__eqdf2>
  8049a8:	1000f21e 	bne	r2,zero,804d74 <___vfprintf_internal_r+0xc9c>
  8049ac:	00802074 	movhi	r2,129
  8049b0:	108ddf04 	addi	r2,r2,14204
  8049b4:	94800044 	addi	r18,r18,1
  8049b8:	8c400044 	addi	r17,r17,1
  8049bc:	a8800015 	stw	r2,0(r21)
  8049c0:	00c00044 	movi	r3,1
  8049c4:	008001c4 	movi	r2,7
  8049c8:	a8c00115 	stw	r3,4(r21)
  8049cc:	dc800e15 	stw	r18,56(sp)
  8049d0:	dc400d15 	stw	r17,52(sp)
  8049d4:	1442fa16 	blt	r2,r17,8055c0 <___vfprintf_internal_r+0x14e8>
  8049d8:	a8c00204 	addi	r3,r21,8
  8049dc:	d8800517 	ldw	r2,20(sp)
  8049e0:	d9014717 	ldw	r4,1308(sp)
  8049e4:	11015c0e 	bge	r2,r4,804f58 <___vfprintf_internal_r+0xe80>
  8049e8:	dc400d17 	ldw	r17,52(sp)
  8049ec:	d9814917 	ldw	r6,1316(sp)
  8049f0:	00800044 	movi	r2,1
  8049f4:	94800044 	addi	r18,r18,1
  8049f8:	8c400044 	addi	r17,r17,1
  8049fc:	18800115 	stw	r2,4(r3)
  804a00:	008001c4 	movi	r2,7
  804a04:	19800015 	stw	r6,0(r3)
  804a08:	dc800e15 	stw	r18,56(sp)
  804a0c:	dc400d15 	stw	r17,52(sp)
  804a10:	14431016 	blt	r2,r17,805654 <___vfprintf_internal_r+0x157c>
  804a14:	18c00204 	addi	r3,r3,8
  804a18:	d8814717 	ldw	r2,1308(sp)
  804a1c:	143fffc4 	addi	r16,r2,-1
  804a20:	043f2b0e 	bge	zero,r16,8046d0 <___vfprintf_internal_r+0x5f8>
  804a24:	00800404 	movi	r2,16
  804a28:	1402a20e 	bge	r2,r16,8054b4 <___vfprintf_internal_r+0x13dc>
  804a2c:	dc400d17 	ldw	r17,52(sp)
  804a30:	1027883a 	mov	r19,r2
  804a34:	07002074 	movhi	fp,129
  804a38:	e70ece84 	addi	fp,fp,15162
  804a3c:	050001c4 	movi	r20,7
  804a40:	00000306 	br	804a50 <___vfprintf_internal_r+0x978>
  804a44:	18c00204 	addi	r3,r3,8
  804a48:	843ffc04 	addi	r16,r16,-16
  804a4c:	9c029c0e 	bge	r19,r16,8054c0 <___vfprintf_internal_r+0x13e8>
  804a50:	94800404 	addi	r18,r18,16
  804a54:	8c400044 	addi	r17,r17,1
  804a58:	1f000015 	stw	fp,0(r3)
  804a5c:	1cc00115 	stw	r19,4(r3)
  804a60:	dc800e15 	stw	r18,56(sp)
  804a64:	dc400d15 	stw	r17,52(sp)
  804a68:	a47ff60e 	bge	r20,r17,804a44 <___vfprintf_internal_r+0x96c>
  804a6c:	d9014f17 	ldw	r4,1340(sp)
  804a70:	b00b883a 	mov	r5,r22
  804a74:	d9800c04 	addi	r6,sp,48
  804a78:	08040800 	call	804080 <__sprint_r>
  804a7c:	103f4e1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804a80:	dc800e17 	ldw	r18,56(sp)
  804a84:	dc400d17 	ldw	r17,52(sp)
  804a88:	d8c01904 	addi	r3,sp,100
  804a8c:	003fee06 	br	804a48 <___vfprintf_internal_r+0x970>
  804a90:	d8802c0b 	ldhu	r2,176(sp)
  804a94:	00ffffc4 	movi	r3,-1
  804a98:	d8c14b15 	stw	r3,1324(sp)
  804a9c:	1080100c 	andi	r2,r2,64
  804aa0:	103dcc1e 	bne	r2,zero,8041d4 <___vfprintf_internal_r+0xfc>
  804aa4:	003dce06 	br	8041e0 <___vfprintf_internal_r+0x108>
  804aa8:	d9014f17 	ldw	r4,1340(sp)
  804aac:	b00b883a 	mov	r5,r22
  804ab0:	d9800c04 	addi	r6,sp,48
  804ab4:	08040800 	call	804080 <__sprint_r>
  804ab8:	103f3f1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804abc:	dc800e17 	ldw	r18,56(sp)
  804ac0:	003f2e06 	br	80477c <___vfprintf_internal_r+0x6a4>
  804ac4:	d9414c17 	ldw	r5,1328(sp)
  804ac8:	29400414 	ori	r5,r5,16
  804acc:	d9414c15 	stw	r5,1328(sp)
  804ad0:	d9814c17 	ldw	r6,1328(sp)
  804ad4:	3080080c 	andi	r2,r6,32
  804ad8:	10014f1e 	bne	r2,zero,805018 <___vfprintf_internal_r+0xf40>
  804adc:	d8c14c17 	ldw	r3,1328(sp)
  804ae0:	1880040c 	andi	r2,r3,16
  804ae4:	1002ea1e 	bne	r2,zero,805690 <___vfprintf_internal_r+0x15b8>
  804ae8:	d9014c17 	ldw	r4,1328(sp)
  804aec:	2080100c 	andi	r2,r4,64
  804af0:	1002e726 	beq	r2,zero,805690 <___vfprintf_internal_r+0x15b8>
  804af4:	3880000f 	ldh	r2,0(r7)
  804af8:	39c00104 	addi	r7,r7,4
  804afc:	d9c14015 	stw	r7,1280(sp)
  804b00:	1023d7fa 	srai	r17,r2,31
  804b04:	1021883a 	mov	r16,r2
  804b08:	88037216 	blt	r17,zero,8058d4 <___vfprintf_internal_r+0x17fc>
  804b0c:	01000044 	movi	r4,1
  804b10:	98000416 	blt	r19,zero,804b24 <___vfprintf_internal_r+0xa4c>
  804b14:	d8c14c17 	ldw	r3,1328(sp)
  804b18:	00bfdfc4 	movi	r2,-129
  804b1c:	1886703a 	and	r3,r3,r2
  804b20:	d8c14c15 	stw	r3,1328(sp)
  804b24:	8444b03a 	or	r2,r16,r17
  804b28:	1002261e 	bne	r2,zero,8053c4 <___vfprintf_internal_r+0x12ec>
  804b2c:	9802251e 	bne	r19,zero,8053c4 <___vfprintf_internal_r+0x12ec>
  804b30:	20803fcc 	andi	r2,r4,255
  804b34:	10029b26 	beq	r2,zero,8055a4 <___vfprintf_internal_r+0x14cc>
  804b38:	d8c01904 	addi	r3,sp,100
  804b3c:	dd000f04 	addi	r20,sp,60
  804b40:	d8c14115 	stw	r3,1284(sp)
  804b44:	d8c14117 	ldw	r3,1284(sp)
  804b48:	dcc14515 	stw	r19,1300(sp)
  804b4c:	a0c5c83a 	sub	r2,r20,r3
  804b50:	11c00a04 	addi	r7,r2,40
  804b54:	99c0010e 	bge	r19,r7,804b5c <___vfprintf_internal_r+0xa84>
  804b58:	d9c14515 	stw	r7,1300(sp)
  804b5c:	dcc14615 	stw	r19,1304(sp)
  804b60:	d8800407 	ldb	r2,16(sp)
  804b64:	103e4c26 	beq	r2,zero,804498 <___vfprintf_internal_r+0x3c0>
  804b68:	d8814517 	ldw	r2,1300(sp)
  804b6c:	10800044 	addi	r2,r2,1
  804b70:	d8814515 	stw	r2,1300(sp)
  804b74:	003e4806 	br	804498 <___vfprintf_internal_r+0x3c0>
  804b78:	d9814c17 	ldw	r6,1328(sp)
  804b7c:	31800414 	ori	r6,r6,16
  804b80:	d9814c15 	stw	r6,1328(sp)
  804b84:	d8c14c17 	ldw	r3,1328(sp)
  804b88:	1880080c 	andi	r2,r3,32
  804b8c:	1001271e 	bne	r2,zero,80502c <___vfprintf_internal_r+0xf54>
  804b90:	d9414c17 	ldw	r5,1328(sp)
  804b94:	2880040c 	andi	r2,r5,16
  804b98:	1002b61e 	bne	r2,zero,805674 <___vfprintf_internal_r+0x159c>
  804b9c:	d9814c17 	ldw	r6,1328(sp)
  804ba0:	3080100c 	andi	r2,r6,64
  804ba4:	1002b326 	beq	r2,zero,805674 <___vfprintf_internal_r+0x159c>
  804ba8:	3c00000b 	ldhu	r16,0(r7)
  804bac:	0009883a 	mov	r4,zero
  804bb0:	39c00104 	addi	r7,r7,4
  804bb4:	0023883a 	mov	r17,zero
  804bb8:	d9c14015 	stw	r7,1280(sp)
  804bbc:	d8000405 	stb	zero,16(sp)
  804bc0:	003fd306 	br	804b10 <___vfprintf_internal_r+0xa38>
  804bc4:	d9014c17 	ldw	r4,1328(sp)
  804bc8:	21000414 	ori	r4,r4,16
  804bcc:	d9014c15 	stw	r4,1328(sp)
  804bd0:	d9414c17 	ldw	r5,1328(sp)
  804bd4:	2880080c 	andi	r2,r5,32
  804bd8:	1001081e 	bne	r2,zero,804ffc <___vfprintf_internal_r+0xf24>
  804bdc:	d8c14c17 	ldw	r3,1328(sp)
  804be0:	1880040c 	andi	r2,r3,16
  804be4:	1002b01e 	bne	r2,zero,8056a8 <___vfprintf_internal_r+0x15d0>
  804be8:	d9014c17 	ldw	r4,1328(sp)
  804bec:	2080100c 	andi	r2,r4,64
  804bf0:	1002ad26 	beq	r2,zero,8056a8 <___vfprintf_internal_r+0x15d0>
  804bf4:	3c00000b 	ldhu	r16,0(r7)
  804bf8:	01000044 	movi	r4,1
  804bfc:	39c00104 	addi	r7,r7,4
  804c00:	0023883a 	mov	r17,zero
  804c04:	d9c14015 	stw	r7,1280(sp)
  804c08:	d8000405 	stb	zero,16(sp)
  804c0c:	003fc006 	br	804b10 <___vfprintf_internal_r+0xa38>
  804c10:	d9014f17 	ldw	r4,1340(sp)
  804c14:	b00b883a 	mov	r5,r22
  804c18:	d9800c04 	addi	r6,sp,48
  804c1c:	08040800 	call	804080 <__sprint_r>
  804c20:	103ee51e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804c24:	dc800e17 	ldw	r18,56(sp)
  804c28:	d8c01904 	addi	r3,sp,100
  804c2c:	d9814c17 	ldw	r6,1328(sp)
  804c30:	3080004c 	andi	r2,r6,1
  804c34:	1005003a 	cmpeq	r2,r2,zero
  804c38:	103ea51e 	bne	r2,zero,8046d0 <___vfprintf_internal_r+0x5f8>
  804c3c:	00800044 	movi	r2,1
  804c40:	dc400d17 	ldw	r17,52(sp)
  804c44:	18800115 	stw	r2,4(r3)
  804c48:	d8814917 	ldw	r2,1316(sp)
  804c4c:	94800044 	addi	r18,r18,1
  804c50:	8c400044 	addi	r17,r17,1
  804c54:	18800015 	stw	r2,0(r3)
  804c58:	008001c4 	movi	r2,7
  804c5c:	dc800e15 	stw	r18,56(sp)
  804c60:	dc400d15 	stw	r17,52(sp)
  804c64:	14421e0e 	bge	r2,r17,8054e0 <___vfprintf_internal_r+0x1408>
  804c68:	d9014f17 	ldw	r4,1340(sp)
  804c6c:	b00b883a 	mov	r5,r22
  804c70:	d9800c04 	addi	r6,sp,48
  804c74:	08040800 	call	804080 <__sprint_r>
  804c78:	103ecf1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804c7c:	dc800e17 	ldw	r18,56(sp)
  804c80:	d8c01904 	addi	r3,sp,100
  804c84:	003e9206 	br	8046d0 <___vfprintf_internal_r+0x5f8>
  804c88:	d9014f17 	ldw	r4,1340(sp)
  804c8c:	b00b883a 	mov	r5,r22
  804c90:	d9800c04 	addi	r6,sp,48
  804c94:	08040800 	call	804080 <__sprint_r>
  804c98:	103ec026 	beq	r2,zero,80479c <___vfprintf_internal_r+0x6c4>
  804c9c:	003ec606 	br	8047b8 <___vfprintf_internal_r+0x6e0>
  804ca0:	d9014f17 	ldw	r4,1340(sp)
  804ca4:	b00b883a 	mov	r5,r22
  804ca8:	d9800c04 	addi	r6,sp,48
  804cac:	d9c15115 	stw	r7,1348(sp)
  804cb0:	08040800 	call	804080 <__sprint_r>
  804cb4:	d9c15117 	ldw	r7,1348(sp)
  804cb8:	103ebf1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804cbc:	dc800e17 	ldw	r18,56(sp)
  804cc0:	dc400d17 	ldw	r17,52(sp)
  804cc4:	dd401904 	addi	r21,sp,100
  804cc8:	003e7406 	br	80469c <___vfprintf_internal_r+0x5c4>
  804ccc:	d9014f17 	ldw	r4,1340(sp)
  804cd0:	b00b883a 	mov	r5,r22
  804cd4:	d9800c04 	addi	r6,sp,48
  804cd8:	d9c15115 	stw	r7,1348(sp)
  804cdc:	08040800 	call	804080 <__sprint_r>
  804ce0:	d9c15117 	ldw	r7,1348(sp)
  804ce4:	103eb41e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804ce8:	dd401904 	addi	r21,sp,100
  804cec:	003d6d06 	br	8042a4 <___vfprintf_internal_r+0x1cc>
  804cf0:	d9014f17 	ldw	r4,1340(sp)
  804cf4:	b00b883a 	mov	r5,r22
  804cf8:	d9800c04 	addi	r6,sp,48
  804cfc:	d9c15115 	stw	r7,1348(sp)
  804d00:	08040800 	call	804080 <__sprint_r>
  804d04:	d9c15117 	ldw	r7,1348(sp)
  804d08:	103eab1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804d0c:	dc800e17 	ldw	r18,56(sp)
  804d10:	dc400d17 	ldw	r17,52(sp)
  804d14:	dd401904 	addi	r21,sp,100
  804d18:	003e3406 	br	8045ec <___vfprintf_internal_r+0x514>
  804d1c:	d9014f17 	ldw	r4,1340(sp)
  804d20:	b00b883a 	mov	r5,r22
  804d24:	d9800c04 	addi	r6,sp,48
  804d28:	d9c15115 	stw	r7,1348(sp)
  804d2c:	08040800 	call	804080 <__sprint_r>
  804d30:	d9c15117 	ldw	r7,1348(sp)
  804d34:	103ea01e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804d38:	dc800e17 	ldw	r18,56(sp)
  804d3c:	dc400d17 	ldw	r17,52(sp)
  804d40:	dd401904 	addi	r21,sp,100
  804d44:	003e1c06 	br	8045b8 <___vfprintf_internal_r+0x4e0>
  804d48:	d9014f17 	ldw	r4,1340(sp)
  804d4c:	b00b883a 	mov	r5,r22
  804d50:	d9800c04 	addi	r6,sp,48
  804d54:	d9c15115 	stw	r7,1348(sp)
  804d58:	08040800 	call	804080 <__sprint_r>
  804d5c:	d9c15117 	ldw	r7,1348(sp)
  804d60:	103e951e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804d64:	dc800e17 	ldw	r18,56(sp)
  804d68:	dc400d17 	ldw	r17,52(sp)
  804d6c:	dd401904 	addi	r21,sp,100
  804d70:	003e0406 	br	804584 <___vfprintf_internal_r+0x4ac>
  804d74:	d9000517 	ldw	r4,20(sp)
  804d78:	0102520e 	bge	zero,r4,8056c4 <___vfprintf_internal_r+0x15ec>
  804d7c:	d9814717 	ldw	r6,1308(sp)
  804d80:	21807a16 	blt	r4,r6,804f6c <___vfprintf_internal_r+0xe94>
  804d84:	d8814117 	ldw	r2,1284(sp)
  804d88:	91a5883a 	add	r18,r18,r6
  804d8c:	8c400044 	addi	r17,r17,1
  804d90:	a8800015 	stw	r2,0(r21)
  804d94:	008001c4 	movi	r2,7
  804d98:	a9800115 	stw	r6,4(r21)
  804d9c:	dc800e15 	stw	r18,56(sp)
  804da0:	dc400d15 	stw	r17,52(sp)
  804da4:	1442f616 	blt	r2,r17,805980 <___vfprintf_internal_r+0x18a8>
  804da8:	a8c00204 	addi	r3,r21,8
  804dac:	d9414717 	ldw	r5,1308(sp)
  804db0:	2161c83a 	sub	r16,r4,r5
  804db4:	043f9d0e 	bge	zero,r16,804c2c <___vfprintf_internal_r+0xb54>
  804db8:	00800404 	movi	r2,16
  804dbc:	1402130e 	bge	r2,r16,80560c <___vfprintf_internal_r+0x1534>
  804dc0:	dc400d17 	ldw	r17,52(sp)
  804dc4:	1027883a 	mov	r19,r2
  804dc8:	07002074 	movhi	fp,129
  804dcc:	e70ece84 	addi	fp,fp,15162
  804dd0:	050001c4 	movi	r20,7
  804dd4:	00000306 	br	804de4 <___vfprintf_internal_r+0xd0c>
  804dd8:	18c00204 	addi	r3,r3,8
  804ddc:	843ffc04 	addi	r16,r16,-16
  804de0:	9c020d0e 	bge	r19,r16,805618 <___vfprintf_internal_r+0x1540>
  804de4:	94800404 	addi	r18,r18,16
  804de8:	8c400044 	addi	r17,r17,1
  804dec:	1f000015 	stw	fp,0(r3)
  804df0:	1cc00115 	stw	r19,4(r3)
  804df4:	dc800e15 	stw	r18,56(sp)
  804df8:	dc400d15 	stw	r17,52(sp)
  804dfc:	a47ff60e 	bge	r20,r17,804dd8 <___vfprintf_internal_r+0xd00>
  804e00:	d9014f17 	ldw	r4,1340(sp)
  804e04:	b00b883a 	mov	r5,r22
  804e08:	d9800c04 	addi	r6,sp,48
  804e0c:	08040800 	call	804080 <__sprint_r>
  804e10:	103e691e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804e14:	dc800e17 	ldw	r18,56(sp)
  804e18:	dc400d17 	ldw	r17,52(sp)
  804e1c:	d8c01904 	addi	r3,sp,100
  804e20:	003fee06 	br	804ddc <___vfprintf_internal_r+0xd04>
  804e24:	d8814717 	ldw	r2,1308(sp)
  804e28:	143fffc4 	addi	r16,r2,-1
  804e2c:	043e970e 	bge	zero,r16,80488c <___vfprintf_internal_r+0x7b4>
  804e30:	00800404 	movi	r2,16
  804e34:	1400180e 	bge	r2,r16,804e98 <___vfprintf_internal_r+0xdc0>
  804e38:	1029883a 	mov	r20,r2
  804e3c:	07002074 	movhi	fp,129
  804e40:	e70ece84 	addi	fp,fp,15162
  804e44:	054001c4 	movi	r21,7
  804e48:	00000306 	br	804e58 <___vfprintf_internal_r+0xd80>
  804e4c:	9cc00204 	addi	r19,r19,8
  804e50:	843ffc04 	addi	r16,r16,-16
  804e54:	a400120e 	bge	r20,r16,804ea0 <___vfprintf_internal_r+0xdc8>
  804e58:	94800404 	addi	r18,r18,16
  804e5c:	8c400044 	addi	r17,r17,1
  804e60:	9f000015 	stw	fp,0(r19)
  804e64:	9d000115 	stw	r20,4(r19)
  804e68:	dc800e15 	stw	r18,56(sp)
  804e6c:	dc400d15 	stw	r17,52(sp)
  804e70:	ac7ff60e 	bge	r21,r17,804e4c <___vfprintf_internal_r+0xd74>
  804e74:	d9014f17 	ldw	r4,1340(sp)
  804e78:	b00b883a 	mov	r5,r22
  804e7c:	d9800c04 	addi	r6,sp,48
  804e80:	08040800 	call	804080 <__sprint_r>
  804e84:	103e4c1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804e88:	dc800e17 	ldw	r18,56(sp)
  804e8c:	dc400d17 	ldw	r17,52(sp)
  804e90:	dcc01904 	addi	r19,sp,100
  804e94:	003fee06 	br	804e50 <___vfprintf_internal_r+0xd78>
  804e98:	07002074 	movhi	fp,129
  804e9c:	e70ece84 	addi	fp,fp,15162
  804ea0:	9425883a 	add	r18,r18,r16
  804ea4:	8c400044 	addi	r17,r17,1
  804ea8:	008001c4 	movi	r2,7
  804eac:	9f000015 	stw	fp,0(r19)
  804eb0:	9c000115 	stw	r16,4(r19)
  804eb4:	dc800e15 	stw	r18,56(sp)
  804eb8:	dc400d15 	stw	r17,52(sp)
  804ebc:	147e720e 	bge	r2,r17,804888 <___vfprintf_internal_r+0x7b0>
  804ec0:	d9014f17 	ldw	r4,1340(sp)
  804ec4:	b00b883a 	mov	r5,r22
  804ec8:	d9800c04 	addi	r6,sp,48
  804ecc:	08040800 	call	804080 <__sprint_r>
  804ed0:	103e391e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804ed4:	dc800e17 	ldw	r18,56(sp)
  804ed8:	dc400d17 	ldw	r17,52(sp)
  804edc:	dcc01904 	addi	r19,sp,100
  804ee0:	003e6a06 	br	80488c <___vfprintf_internal_r+0x7b4>
  804ee4:	d9014f17 	ldw	r4,1340(sp)
  804ee8:	b00b883a 	mov	r5,r22
  804eec:	d9800c04 	addi	r6,sp,48
  804ef0:	d9c15115 	stw	r7,1348(sp)
  804ef4:	08040800 	call	804080 <__sprint_r>
  804ef8:	d9c15117 	ldw	r7,1348(sp)
  804efc:	103e2e1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804f00:	dc800e17 	ldw	r18,56(sp)
  804f04:	dc400d17 	ldw	r17,52(sp)
  804f08:	dd401904 	addi	r21,sp,100
  804f0c:	003dba06 	br	8045f8 <___vfprintf_internal_r+0x520>
  804f10:	d9014f17 	ldw	r4,1340(sp)
  804f14:	b00b883a 	mov	r5,r22
  804f18:	d9800c04 	addi	r6,sp,48
  804f1c:	08040800 	call	804080 <__sprint_r>
  804f20:	103e251e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804f24:	dc800e17 	ldw	r18,56(sp)
  804f28:	dc400d17 	ldw	r17,52(sp)
  804f2c:	dcc01904 	addi	r19,sp,100
  804f30:	003e4206 	br	80483c <___vfprintf_internal_r+0x764>
  804f34:	d9014f17 	ldw	r4,1340(sp)
  804f38:	b00b883a 	mov	r5,r22
  804f3c:	d9800c04 	addi	r6,sp,48
  804f40:	08040800 	call	804080 <__sprint_r>
  804f44:	103e1c1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  804f48:	dc800e17 	ldw	r18,56(sp)
  804f4c:	dc400d17 	ldw	r17,52(sp)
  804f50:	d8c01904 	addi	r3,sp,100
  804f54:	003e2e06 	br	804810 <___vfprintf_internal_r+0x738>
  804f58:	d9414c17 	ldw	r5,1328(sp)
  804f5c:	2880004c 	andi	r2,r5,1
  804f60:	1005003a 	cmpeq	r2,r2,zero
  804f64:	103dda1e 	bne	r2,zero,8046d0 <___vfprintf_internal_r+0x5f8>
  804f68:	003e9f06 	br	8049e8 <___vfprintf_internal_r+0x910>
  804f6c:	d8c14117 	ldw	r3,1284(sp)
  804f70:	9125883a 	add	r18,r18,r4
  804f74:	8c400044 	addi	r17,r17,1
  804f78:	008001c4 	movi	r2,7
  804f7c:	a8c00015 	stw	r3,0(r21)
  804f80:	a9000115 	stw	r4,4(r21)
  804f84:	dc800e15 	stw	r18,56(sp)
  804f88:	dc400d15 	stw	r17,52(sp)
  804f8c:	14426616 	blt	r2,r17,805928 <___vfprintf_internal_r+0x1850>
  804f90:	a8c00204 	addi	r3,r21,8
  804f94:	d9414917 	ldw	r5,1316(sp)
  804f98:	00800044 	movi	r2,1
  804f9c:	94800044 	addi	r18,r18,1
  804fa0:	8c400044 	addi	r17,r17,1
  804fa4:	18800115 	stw	r2,4(r3)
  804fa8:	008001c4 	movi	r2,7
  804fac:	19400015 	stw	r5,0(r3)
  804fb0:	dc800e15 	stw	r18,56(sp)
  804fb4:	dc400d15 	stw	r17,52(sp)
  804fb8:	2021883a 	mov	r16,r4
  804fbc:	14425016 	blt	r2,r17,805900 <___vfprintf_internal_r+0x1828>
  804fc0:	19400204 	addi	r5,r3,8
  804fc4:	d9814717 	ldw	r6,1308(sp)
  804fc8:	8c400044 	addi	r17,r17,1
  804fcc:	dc400d15 	stw	r17,52(sp)
  804fd0:	3107c83a 	sub	r3,r6,r4
  804fd4:	d9014117 	ldw	r4,1284(sp)
  804fd8:	90e5883a 	add	r18,r18,r3
  804fdc:	28c00115 	stw	r3,4(r5)
  804fe0:	8105883a 	add	r2,r16,r4
  804fe4:	28800015 	stw	r2,0(r5)
  804fe8:	008001c4 	movi	r2,7
  804fec:	dc800e15 	stw	r18,56(sp)
  804ff0:	147f1d16 	blt	r2,r17,804c68 <___vfprintf_internal_r+0xb90>
  804ff4:	28c00204 	addi	r3,r5,8
  804ff8:	003db506 	br	8046d0 <___vfprintf_internal_r+0x5f8>
  804ffc:	3c000017 	ldw	r16,0(r7)
  805000:	3c400117 	ldw	r17,4(r7)
  805004:	39800204 	addi	r6,r7,8
  805008:	01000044 	movi	r4,1
  80500c:	d9814015 	stw	r6,1280(sp)
  805010:	d8000405 	stb	zero,16(sp)
  805014:	003ebe06 	br	804b10 <___vfprintf_internal_r+0xa38>
  805018:	3c000017 	ldw	r16,0(r7)
  80501c:	3c400117 	ldw	r17,4(r7)
  805020:	38800204 	addi	r2,r7,8
  805024:	d8814015 	stw	r2,1280(sp)
  805028:	003eb706 	br	804b08 <___vfprintf_internal_r+0xa30>
  80502c:	3c000017 	ldw	r16,0(r7)
  805030:	3c400117 	ldw	r17,4(r7)
  805034:	39000204 	addi	r4,r7,8
  805038:	d9014015 	stw	r4,1280(sp)
  80503c:	0009883a 	mov	r4,zero
  805040:	d8000405 	stb	zero,16(sp)
  805044:	003eb206 	br	804b10 <___vfprintf_internal_r+0xa38>
  805048:	38c00017 	ldw	r3,0(r7)
  80504c:	39c00104 	addi	r7,r7,4
  805050:	d8c14a15 	stw	r3,1320(sp)
  805054:	1800d10e 	bge	r3,zero,80539c <___vfprintf_internal_r+0x12c4>
  805058:	00c7c83a 	sub	r3,zero,r3
  80505c:	d8c14a15 	stw	r3,1320(sp)
  805060:	d9014c17 	ldw	r4,1328(sp)
  805064:	b8c00007 	ldb	r3,0(r23)
  805068:	21000114 	ori	r4,r4,4
  80506c:	d9014c15 	stw	r4,1328(sp)
  805070:	003c9806 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  805074:	d9814c17 	ldw	r6,1328(sp)
  805078:	3080080c 	andi	r2,r6,32
  80507c:	1001f026 	beq	r2,zero,805840 <___vfprintf_internal_r+0x1768>
  805080:	d9014b17 	ldw	r4,1324(sp)
  805084:	38800017 	ldw	r2,0(r7)
  805088:	39c00104 	addi	r7,r7,4
  80508c:	d9c14015 	stw	r7,1280(sp)
  805090:	2007d7fa 	srai	r3,r4,31
  805094:	d9c14017 	ldw	r7,1280(sp)
  805098:	11000015 	stw	r4,0(r2)
  80509c:	10c00115 	stw	r3,4(r2)
  8050a0:	003c6906 	br	804248 <___vfprintf_internal_r+0x170>
  8050a4:	b8c00007 	ldb	r3,0(r23)
  8050a8:	00801b04 	movi	r2,108
  8050ac:	18824f26 	beq	r3,r2,8059ec <___vfprintf_internal_r+0x1914>
  8050b0:	d9414c17 	ldw	r5,1328(sp)
  8050b4:	29400414 	ori	r5,r5,16
  8050b8:	d9414c15 	stw	r5,1328(sp)
  8050bc:	003c8506 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  8050c0:	d9814c17 	ldw	r6,1328(sp)
  8050c4:	b8c00007 	ldb	r3,0(r23)
  8050c8:	31800814 	ori	r6,r6,32
  8050cc:	d9814c15 	stw	r6,1328(sp)
  8050d0:	003c8006 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  8050d4:	d8814c17 	ldw	r2,1328(sp)
  8050d8:	3c000017 	ldw	r16,0(r7)
  8050dc:	00c01e04 	movi	r3,120
  8050e0:	10800094 	ori	r2,r2,2
  8050e4:	d8814c15 	stw	r2,1328(sp)
  8050e8:	39c00104 	addi	r7,r7,4
  8050ec:	01402074 	movhi	r5,129
  8050f0:	294eb804 	addi	r5,r5,15072
  8050f4:	00800c04 	movi	r2,48
  8050f8:	0023883a 	mov	r17,zero
  8050fc:	01000084 	movi	r4,2
  805100:	d9c14015 	stw	r7,1280(sp)
  805104:	d8c14d15 	stw	r3,1332(sp)
  805108:	d9414415 	stw	r5,1296(sp)
  80510c:	d8800445 	stb	r2,17(sp)
  805110:	d8c00485 	stb	r3,18(sp)
  805114:	d8000405 	stb	zero,16(sp)
  805118:	003e7d06 	br	804b10 <___vfprintf_internal_r+0xa38>
  80511c:	d8814c17 	ldw	r2,1328(sp)
  805120:	b8c00007 	ldb	r3,0(r23)
  805124:	10801014 	ori	r2,r2,64
  805128:	d8814c15 	stw	r2,1328(sp)
  80512c:	003c6906 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  805130:	d9414c17 	ldw	r5,1328(sp)
  805134:	2880020c 	andi	r2,r5,8
  805138:	1001df26 	beq	r2,zero,8058b8 <___vfprintf_internal_r+0x17e0>
  80513c:	39800017 	ldw	r6,0(r7)
  805140:	38800204 	addi	r2,r7,8
  805144:	d8814015 	stw	r2,1280(sp)
  805148:	d9814215 	stw	r6,1288(sp)
  80514c:	39c00117 	ldw	r7,4(r7)
  805150:	d9c14315 	stw	r7,1292(sp)
  805154:	d9014217 	ldw	r4,1288(sp)
  805158:	d9414317 	ldw	r5,1292(sp)
  80515c:	080a8180 	call	80a818 <__isinfd>
  805160:	10021726 	beq	r2,zero,8059c0 <___vfprintf_internal_r+0x18e8>
  805164:	d9014217 	ldw	r4,1288(sp)
  805168:	d9414317 	ldw	r5,1292(sp)
  80516c:	000d883a 	mov	r6,zero
  805170:	000f883a 	mov	r7,zero
  805174:	080bfec0 	call	80bfec <__ltdf2>
  805178:	1002ca16 	blt	r2,zero,805ca4 <___vfprintf_internal_r+0x1bcc>
  80517c:	d9414d17 	ldw	r5,1332(sp)
  805180:	008011c4 	movi	r2,71
  805184:	11420a16 	blt	r2,r5,8059b0 <___vfprintf_internal_r+0x18d8>
  805188:	01802074 	movhi	r6,129
  80518c:	318ebd04 	addi	r6,r6,15092
  805190:	d9814115 	stw	r6,1284(sp)
  805194:	d9014c17 	ldw	r4,1328(sp)
  805198:	00c000c4 	movi	r3,3
  80519c:	00bfdfc4 	movi	r2,-129
  8051a0:	2088703a 	and	r4,r4,r2
  8051a4:	180f883a 	mov	r7,r3
  8051a8:	d8c14515 	stw	r3,1300(sp)
  8051ac:	d9014c15 	stw	r4,1328(sp)
  8051b0:	d8014615 	stw	zero,1304(sp)
  8051b4:	003e6a06 	br	804b60 <___vfprintf_internal_r+0xa88>
  8051b8:	38800017 	ldw	r2,0(r7)
  8051bc:	00c00044 	movi	r3,1
  8051c0:	39c00104 	addi	r7,r7,4
  8051c4:	d9c14015 	stw	r7,1280(sp)
  8051c8:	d9000f04 	addi	r4,sp,60
  8051cc:	180f883a 	mov	r7,r3
  8051d0:	d8c14515 	stw	r3,1300(sp)
  8051d4:	d9014115 	stw	r4,1284(sp)
  8051d8:	d8800f05 	stb	r2,60(sp)
  8051dc:	d8000405 	stb	zero,16(sp)
  8051e0:	003cac06 	br	804494 <___vfprintf_internal_r+0x3bc>
  8051e4:	01402074 	movhi	r5,129
  8051e8:	294ec304 	addi	r5,r5,15116
  8051ec:	d9414415 	stw	r5,1296(sp)
  8051f0:	d9814c17 	ldw	r6,1328(sp)
  8051f4:	3080080c 	andi	r2,r6,32
  8051f8:	1000f926 	beq	r2,zero,8055e0 <___vfprintf_internal_r+0x1508>
  8051fc:	3c000017 	ldw	r16,0(r7)
  805200:	3c400117 	ldw	r17,4(r7)
  805204:	38800204 	addi	r2,r7,8
  805208:	d8814015 	stw	r2,1280(sp)
  80520c:	d9414c17 	ldw	r5,1328(sp)
  805210:	2880004c 	andi	r2,r5,1
  805214:	1005003a 	cmpeq	r2,r2,zero
  805218:	1000b31e 	bne	r2,zero,8054e8 <___vfprintf_internal_r+0x1410>
  80521c:	8444b03a 	or	r2,r16,r17
  805220:	1000b126 	beq	r2,zero,8054e8 <___vfprintf_internal_r+0x1410>
  805224:	d9814d17 	ldw	r6,1332(sp)
  805228:	29400094 	ori	r5,r5,2
  80522c:	00800c04 	movi	r2,48
  805230:	01000084 	movi	r4,2
  805234:	d9414c15 	stw	r5,1328(sp)
  805238:	d8800445 	stb	r2,17(sp)
  80523c:	d9800485 	stb	r6,18(sp)
  805240:	d8000405 	stb	zero,16(sp)
  805244:	003e3206 	br	804b10 <___vfprintf_internal_r+0xa38>
  805248:	01802074 	movhi	r6,129
  80524c:	318eb804 	addi	r6,r6,15072
  805250:	d9814415 	stw	r6,1296(sp)
  805254:	003fe606 	br	8051f0 <___vfprintf_internal_r+0x1118>
  805258:	00800ac4 	movi	r2,43
  80525c:	d8800405 	stb	r2,16(sp)
  805260:	b8c00007 	ldb	r3,0(r23)
  805264:	003c1b06 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  805268:	d8814c17 	ldw	r2,1328(sp)
  80526c:	b8c00007 	ldb	r3,0(r23)
  805270:	10800054 	ori	r2,r2,1
  805274:	d8814c15 	stw	r2,1328(sp)
  805278:	003c1606 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  80527c:	d8800407 	ldb	r2,16(sp)
  805280:	1000461e 	bne	r2,zero,80539c <___vfprintf_internal_r+0x12c4>
  805284:	00800804 	movi	r2,32
  805288:	d8800405 	stb	r2,16(sp)
  80528c:	b8c00007 	ldb	r3,0(r23)
  805290:	003c1006 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  805294:	d9814c17 	ldw	r6,1328(sp)
  805298:	b8c00007 	ldb	r3,0(r23)
  80529c:	31800214 	ori	r6,r6,8
  8052a0:	d9814c15 	stw	r6,1328(sp)
  8052a4:	003c0b06 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  8052a8:	0007883a 	mov	r3,zero
  8052ac:	01000244 	movi	r4,9
  8052b0:	188002a4 	muli	r2,r3,10
  8052b4:	b8c00007 	ldb	r3,0(r23)
  8052b8:	d9814d17 	ldw	r6,1332(sp)
  8052bc:	bdc00044 	addi	r23,r23,1
  8052c0:	d8c14d15 	stw	r3,1332(sp)
  8052c4:	d9414d17 	ldw	r5,1332(sp)
  8052c8:	3085883a 	add	r2,r6,r2
  8052cc:	10fff404 	addi	r3,r2,-48
  8052d0:	28bff404 	addi	r2,r5,-48
  8052d4:	20bff62e 	bgeu	r4,r2,8052b0 <___vfprintf_internal_r+0x11d8>
  8052d8:	d8c14a15 	stw	r3,1320(sp)
  8052dc:	003bff06 	br	8042dc <___vfprintf_internal_r+0x204>
  8052e0:	d9414c17 	ldw	r5,1328(sp)
  8052e4:	b8c00007 	ldb	r3,0(r23)
  8052e8:	29402014 	ori	r5,r5,128
  8052ec:	d9414c15 	stw	r5,1328(sp)
  8052f0:	003bf806 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  8052f4:	b8c00007 	ldb	r3,0(r23)
  8052f8:	00800a84 	movi	r2,42
  8052fc:	bdc00044 	addi	r23,r23,1
  805300:	18831526 	beq	r3,r2,805f58 <___vfprintf_internal_r+0x1e80>
  805304:	d8c14d15 	stw	r3,1332(sp)
  805308:	18bff404 	addi	r2,r3,-48
  80530c:	00c00244 	movi	r3,9
  805310:	18827836 	bltu	r3,r2,805cf4 <___vfprintf_internal_r+0x1c1c>
  805314:	000d883a 	mov	r6,zero
  805318:	308002a4 	muli	r2,r6,10
  80531c:	b9800007 	ldb	r6,0(r23)
  805320:	d9414d17 	ldw	r5,1332(sp)
  805324:	bdc00044 	addi	r23,r23,1
  805328:	d9814d15 	stw	r6,1332(sp)
  80532c:	d9014d17 	ldw	r4,1332(sp)
  805330:	1145883a 	add	r2,r2,r5
  805334:	11bff404 	addi	r6,r2,-48
  805338:	20bff404 	addi	r2,r4,-48
  80533c:	18bff62e 	bgeu	r3,r2,805318 <___vfprintf_internal_r+0x1240>
  805340:	3027883a 	mov	r19,r6
  805344:	303be50e 	bge	r6,zero,8042dc <___vfprintf_internal_r+0x204>
  805348:	04ffffc4 	movi	r19,-1
  80534c:	003be306 	br	8042dc <___vfprintf_internal_r+0x204>
  805350:	d8000405 	stb	zero,16(sp)
  805354:	39800017 	ldw	r6,0(r7)
  805358:	39c00104 	addi	r7,r7,4
  80535c:	d9c14015 	stw	r7,1280(sp)
  805360:	d9814115 	stw	r6,1284(sp)
  805364:	3001c926 	beq	r6,zero,805a8c <___vfprintf_internal_r+0x19b4>
  805368:	98000e16 	blt	r19,zero,8053a4 <___vfprintf_internal_r+0x12cc>
  80536c:	d9014117 	ldw	r4,1284(sp)
  805370:	000b883a 	mov	r5,zero
  805374:	980d883a 	mov	r6,r19
  805378:	0808c080 	call	808c08 <memchr>
  80537c:	10025926 	beq	r2,zero,805ce4 <___vfprintf_internal_r+0x1c0c>
  805380:	d8c14117 	ldw	r3,1284(sp)
  805384:	10cfc83a 	sub	r7,r2,r3
  805388:	99c19e16 	blt	r19,r7,805a04 <___vfprintf_internal_r+0x192c>
  80538c:	d9c14515 	stw	r7,1300(sp)
  805390:	38000916 	blt	r7,zero,8053b8 <___vfprintf_internal_r+0x12e0>
  805394:	d8014615 	stw	zero,1304(sp)
  805398:	003df106 	br	804b60 <___vfprintf_internal_r+0xa88>
  80539c:	b8c00007 	ldb	r3,0(r23)
  8053a0:	003bcc06 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  8053a4:	d9014117 	ldw	r4,1284(sp)
  8053a8:	080400c0 	call	80400c <strlen>
  8053ac:	d8814515 	stw	r2,1300(sp)
  8053b0:	100f883a 	mov	r7,r2
  8053b4:	103ff70e 	bge	r2,zero,805394 <___vfprintf_internal_r+0x12bc>
  8053b8:	d8014515 	stw	zero,1300(sp)
  8053bc:	d8014615 	stw	zero,1304(sp)
  8053c0:	003de706 	br	804b60 <___vfprintf_internal_r+0xa88>
  8053c4:	20c03fcc 	andi	r3,r4,255
  8053c8:	00800044 	movi	r2,1
  8053cc:	18802d26 	beq	r3,r2,805484 <___vfprintf_internal_r+0x13ac>
  8053d0:	18800e36 	bltu	r3,r2,80540c <___vfprintf_internal_r+0x1334>
  8053d4:	00800084 	movi	r2,2
  8053d8:	1880fa26 	beq	r3,r2,8057c4 <___vfprintf_internal_r+0x16ec>
  8053dc:	01002074 	movhi	r4,129
  8053e0:	210ec804 	addi	r4,r4,15136
  8053e4:	080400c0 	call	80400c <strlen>
  8053e8:	100f883a 	mov	r7,r2
  8053ec:	dcc14515 	stw	r19,1300(sp)
  8053f0:	9880010e 	bge	r19,r2,8053f8 <___vfprintf_internal_r+0x1320>
  8053f4:	d8814515 	stw	r2,1300(sp)
  8053f8:	00802074 	movhi	r2,129
  8053fc:	108ec804 	addi	r2,r2,15136
  805400:	dcc14615 	stw	r19,1304(sp)
  805404:	d8814115 	stw	r2,1284(sp)
  805408:	003dd506 	br	804b60 <___vfprintf_internal_r+0xa88>
  80540c:	d9401904 	addi	r5,sp,100
  805410:	dd000f04 	addi	r20,sp,60
  805414:	d9414115 	stw	r5,1284(sp)
  805418:	880a977a 	slli	r5,r17,29
  80541c:	d9814117 	ldw	r6,1284(sp)
  805420:	8004d0fa 	srli	r2,r16,3
  805424:	8806d0fa 	srli	r3,r17,3
  805428:	810001cc 	andi	r4,r16,7
  80542c:	2884b03a 	or	r2,r5,r2
  805430:	31bfffc4 	addi	r6,r6,-1
  805434:	21000c04 	addi	r4,r4,48
  805438:	d9814115 	stw	r6,1284(sp)
  80543c:	10cab03a 	or	r5,r2,r3
  805440:	31000005 	stb	r4,0(r6)
  805444:	1021883a 	mov	r16,r2
  805448:	1823883a 	mov	r17,r3
  80544c:	283ff21e 	bne	r5,zero,805418 <___vfprintf_internal_r+0x1340>
  805450:	d8c14c17 	ldw	r3,1328(sp)
  805454:	1880004c 	andi	r2,r3,1
  805458:	1005003a 	cmpeq	r2,r2,zero
  80545c:	103db91e 	bne	r2,zero,804b44 <___vfprintf_internal_r+0xa6c>
  805460:	20803fcc 	andi	r2,r4,255
  805464:	1080201c 	xori	r2,r2,128
  805468:	10bfe004 	addi	r2,r2,-128
  80546c:	00c00c04 	movi	r3,48
  805470:	10fdb426 	beq	r2,r3,804b44 <___vfprintf_internal_r+0xa6c>
  805474:	31bfffc4 	addi	r6,r6,-1
  805478:	d9814115 	stw	r6,1284(sp)
  80547c:	30c00005 	stb	r3,0(r6)
  805480:	003db006 	br	804b44 <___vfprintf_internal_r+0xa6c>
  805484:	88800068 	cmpgeui	r2,r17,1
  805488:	10002c1e 	bne	r2,zero,80553c <___vfprintf_internal_r+0x1464>
  80548c:	8800021e 	bne	r17,zero,805498 <___vfprintf_internal_r+0x13c0>
  805490:	00800244 	movi	r2,9
  805494:	14002936 	bltu	r2,r16,80553c <___vfprintf_internal_r+0x1464>
  805498:	d90018c4 	addi	r4,sp,99
  80549c:	dd000f04 	addi	r20,sp,60
  8054a0:	d9014115 	stw	r4,1284(sp)
  8054a4:	d9014117 	ldw	r4,1284(sp)
  8054a8:	80800c04 	addi	r2,r16,48
  8054ac:	20800005 	stb	r2,0(r4)
  8054b0:	003da406 	br	804b44 <___vfprintf_internal_r+0xa6c>
  8054b4:	dc400d17 	ldw	r17,52(sp)
  8054b8:	07002074 	movhi	fp,129
  8054bc:	e70ece84 	addi	fp,fp,15162
  8054c0:	9425883a 	add	r18,r18,r16
  8054c4:	8c400044 	addi	r17,r17,1
  8054c8:	008001c4 	movi	r2,7
  8054cc:	1f000015 	stw	fp,0(r3)
  8054d0:	1c000115 	stw	r16,4(r3)
  8054d4:	dc800e15 	stw	r18,56(sp)
  8054d8:	dc400d15 	stw	r17,52(sp)
  8054dc:	147de216 	blt	r2,r17,804c68 <___vfprintf_internal_r+0xb90>
  8054e0:	18c00204 	addi	r3,r3,8
  8054e4:	003c7a06 	br	8046d0 <___vfprintf_internal_r+0x5f8>
  8054e8:	01000084 	movi	r4,2
  8054ec:	d8000405 	stb	zero,16(sp)
  8054f0:	003d8706 	br	804b10 <___vfprintf_internal_r+0xa38>
  8054f4:	d9814c17 	ldw	r6,1328(sp)
  8054f8:	30c4703a 	and	r2,r6,r3
  8054fc:	1005003a 	cmpeq	r2,r2,zero
  805500:	103cb926 	beq	r2,zero,8047e8 <___vfprintf_internal_r+0x710>
  805504:	d9014117 	ldw	r4,1284(sp)
  805508:	94800044 	addi	r18,r18,1
  80550c:	8c400044 	addi	r17,r17,1
  805510:	008001c4 	movi	r2,7
  805514:	a9000015 	stw	r4,0(r21)
  805518:	a8c00115 	stw	r3,4(r21)
  80551c:	dc800e15 	stw	r18,56(sp)
  805520:	dc400d15 	stw	r17,52(sp)
  805524:	147e6616 	blt	r2,r17,804ec0 <___vfprintf_internal_r+0xde8>
  805528:	acc00204 	addi	r19,r21,8
  80552c:	003cd706 	br	80488c <___vfprintf_internal_r+0x7b4>
  805530:	07002074 	movhi	fp,129
  805534:	e70ece84 	addi	fp,fp,15162
  805538:	003c4f06 	br	804678 <___vfprintf_internal_r+0x5a0>
  80553c:	dd000f04 	addi	r20,sp,60
  805540:	dc801904 	addi	r18,sp,100
  805544:	8009883a 	mov	r4,r16
  805548:	880b883a 	mov	r5,r17
  80554c:	01800284 	movi	r6,10
  805550:	000f883a 	mov	r7,zero
  805554:	080b64c0 	call	80b64c <__umoddi3>
  805558:	12000c04 	addi	r8,r2,48
  80555c:	94bfffc4 	addi	r18,r18,-1
  805560:	8009883a 	mov	r4,r16
  805564:	880b883a 	mov	r5,r17
  805568:	01800284 	movi	r6,10
  80556c:	000f883a 	mov	r7,zero
  805570:	92000005 	stb	r8,0(r18)
  805574:	080b0700 	call	80b070 <__udivdi3>
  805578:	1009883a 	mov	r4,r2
  80557c:	1021883a 	mov	r16,r2
  805580:	18800068 	cmpgeui	r2,r3,1
  805584:	1823883a 	mov	r17,r3
  805588:	103fee1e 	bne	r2,zero,805544 <___vfprintf_internal_r+0x146c>
  80558c:	1800021e 	bne	r3,zero,805598 <___vfprintf_internal_r+0x14c0>
  805590:	00800244 	movi	r2,9
  805594:	113feb36 	bltu	r2,r4,805544 <___vfprintf_internal_r+0x146c>
  805598:	94bfffc4 	addi	r18,r18,-1
  80559c:	dc814115 	stw	r18,1284(sp)
  8055a0:	003fc006 	br	8054a4 <___vfprintf_internal_r+0x13cc>
  8055a4:	d9014c17 	ldw	r4,1328(sp)
  8055a8:	2080004c 	andi	r2,r4,1
  8055ac:	10009a1e 	bne	r2,zero,805818 <___vfprintf_internal_r+0x1740>
  8055b0:	d9401904 	addi	r5,sp,100
  8055b4:	dd000f04 	addi	r20,sp,60
  8055b8:	d9414115 	stw	r5,1284(sp)
  8055bc:	003d6106 	br	804b44 <___vfprintf_internal_r+0xa6c>
  8055c0:	d9014f17 	ldw	r4,1340(sp)
  8055c4:	b00b883a 	mov	r5,r22
  8055c8:	d9800c04 	addi	r6,sp,48
  8055cc:	08040800 	call	804080 <__sprint_r>
  8055d0:	103c791e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  8055d4:	dc800e17 	ldw	r18,56(sp)
  8055d8:	d8c01904 	addi	r3,sp,100
  8055dc:	003cff06 	br	8049dc <___vfprintf_internal_r+0x904>
  8055e0:	d8c14c17 	ldw	r3,1328(sp)
  8055e4:	1880040c 	andi	r2,r3,16
  8055e8:	1000711e 	bne	r2,zero,8057b0 <___vfprintf_internal_r+0x16d8>
  8055ec:	d9014c17 	ldw	r4,1328(sp)
  8055f0:	2080100c 	andi	r2,r4,64
  8055f4:	10006e26 	beq	r2,zero,8057b0 <___vfprintf_internal_r+0x16d8>
  8055f8:	3c00000b 	ldhu	r16,0(r7)
  8055fc:	0023883a 	mov	r17,zero
  805600:	39c00104 	addi	r7,r7,4
  805604:	d9c14015 	stw	r7,1280(sp)
  805608:	003f0006 	br	80520c <___vfprintf_internal_r+0x1134>
  80560c:	dc400d17 	ldw	r17,52(sp)
  805610:	07002074 	movhi	fp,129
  805614:	e70ece84 	addi	fp,fp,15162
  805618:	9425883a 	add	r18,r18,r16
  80561c:	8c400044 	addi	r17,r17,1
  805620:	008001c4 	movi	r2,7
  805624:	1f000015 	stw	fp,0(r3)
  805628:	1c000115 	stw	r16,4(r3)
  80562c:	dc800e15 	stw	r18,56(sp)
  805630:	dc400d15 	stw	r17,52(sp)
  805634:	147d7616 	blt	r2,r17,804c10 <___vfprintf_internal_r+0xb38>
  805638:	18c00204 	addi	r3,r3,8
  80563c:	003d7b06 	br	804c2c <___vfprintf_internal_r+0xb54>
  805640:	dc800e17 	ldw	r18,56(sp)
  805644:	dc400d17 	ldw	r17,52(sp)
  805648:	07002074 	movhi	fp,129
  80564c:	e70ed284 	addi	fp,fp,15178
  805650:	003bc006 	br	804554 <___vfprintf_internal_r+0x47c>
  805654:	d9014f17 	ldw	r4,1340(sp)
  805658:	b00b883a 	mov	r5,r22
  80565c:	d9800c04 	addi	r6,sp,48
  805660:	08040800 	call	804080 <__sprint_r>
  805664:	103c541e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  805668:	dc800e17 	ldw	r18,56(sp)
  80566c:	d8c01904 	addi	r3,sp,100
  805670:	003ce906 	br	804a18 <___vfprintf_internal_r+0x940>
  805674:	3c000017 	ldw	r16,0(r7)
  805678:	0009883a 	mov	r4,zero
  80567c:	39c00104 	addi	r7,r7,4
  805680:	0023883a 	mov	r17,zero
  805684:	d9c14015 	stw	r7,1280(sp)
  805688:	d8000405 	stb	zero,16(sp)
  80568c:	003d2006 	br	804b10 <___vfprintf_internal_r+0xa38>
  805690:	38800017 	ldw	r2,0(r7)
  805694:	39c00104 	addi	r7,r7,4
  805698:	d9c14015 	stw	r7,1280(sp)
  80569c:	1023d7fa 	srai	r17,r2,31
  8056a0:	1021883a 	mov	r16,r2
  8056a4:	003d1806 	br	804b08 <___vfprintf_internal_r+0xa30>
  8056a8:	3c000017 	ldw	r16,0(r7)
  8056ac:	01000044 	movi	r4,1
  8056b0:	39c00104 	addi	r7,r7,4
  8056b4:	0023883a 	mov	r17,zero
  8056b8:	d9c14015 	stw	r7,1280(sp)
  8056bc:	d8000405 	stb	zero,16(sp)
  8056c0:	003d1306 	br	804b10 <___vfprintf_internal_r+0xa38>
  8056c4:	00802074 	movhi	r2,129
  8056c8:	108ddf04 	addi	r2,r2,14204
  8056cc:	94800044 	addi	r18,r18,1
  8056d0:	8c400044 	addi	r17,r17,1
  8056d4:	a8800015 	stw	r2,0(r21)
  8056d8:	00c00044 	movi	r3,1
  8056dc:	008001c4 	movi	r2,7
  8056e0:	a8c00115 	stw	r3,4(r21)
  8056e4:	dc800e15 	stw	r18,56(sp)
  8056e8:	dc400d15 	stw	r17,52(sp)
  8056ec:	1440ca16 	blt	r2,r17,805a18 <___vfprintf_internal_r+0x1940>
  8056f0:	a8c00204 	addi	r3,r21,8
  8056f4:	2000061e 	bne	r4,zero,805710 <___vfprintf_internal_r+0x1638>
  8056f8:	d9414717 	ldw	r5,1308(sp)
  8056fc:	2800041e 	bne	r5,zero,805710 <___vfprintf_internal_r+0x1638>
  805700:	d9814c17 	ldw	r6,1328(sp)
  805704:	3080004c 	andi	r2,r6,1
  805708:	1005003a 	cmpeq	r2,r2,zero
  80570c:	103bf01e 	bne	r2,zero,8046d0 <___vfprintf_internal_r+0x5f8>
  805710:	00800044 	movi	r2,1
  805714:	dc400d17 	ldw	r17,52(sp)
  805718:	18800115 	stw	r2,4(r3)
  80571c:	d8814917 	ldw	r2,1316(sp)
  805720:	94800044 	addi	r18,r18,1
  805724:	8c400044 	addi	r17,r17,1
  805728:	18800015 	stw	r2,0(r3)
  80572c:	008001c4 	movi	r2,7
  805730:	dc800e15 	stw	r18,56(sp)
  805734:	dc400d15 	stw	r17,52(sp)
  805738:	1440ca16 	blt	r2,r17,805a64 <___vfprintf_internal_r+0x198c>
  80573c:	18c00204 	addi	r3,r3,8
  805740:	0121c83a 	sub	r16,zero,r4
  805744:	0400500e 	bge	zero,r16,805888 <___vfprintf_internal_r+0x17b0>
  805748:	00800404 	movi	r2,16
  80574c:	1400800e 	bge	r2,r16,805950 <___vfprintf_internal_r+0x1878>
  805750:	1027883a 	mov	r19,r2
  805754:	07002074 	movhi	fp,129
  805758:	e70ece84 	addi	fp,fp,15162
  80575c:	050001c4 	movi	r20,7
  805760:	00000306 	br	805770 <___vfprintf_internal_r+0x1698>
  805764:	18c00204 	addi	r3,r3,8
  805768:	843ffc04 	addi	r16,r16,-16
  80576c:	9c007a0e 	bge	r19,r16,805958 <___vfprintf_internal_r+0x1880>
  805770:	94800404 	addi	r18,r18,16
  805774:	8c400044 	addi	r17,r17,1
  805778:	1f000015 	stw	fp,0(r3)
  80577c:	1cc00115 	stw	r19,4(r3)
  805780:	dc800e15 	stw	r18,56(sp)
  805784:	dc400d15 	stw	r17,52(sp)
  805788:	a47ff60e 	bge	r20,r17,805764 <___vfprintf_internal_r+0x168c>
  80578c:	d9014f17 	ldw	r4,1340(sp)
  805790:	b00b883a 	mov	r5,r22
  805794:	d9800c04 	addi	r6,sp,48
  805798:	08040800 	call	804080 <__sprint_r>
  80579c:	103c061e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  8057a0:	dc800e17 	ldw	r18,56(sp)
  8057a4:	dc400d17 	ldw	r17,52(sp)
  8057a8:	d8c01904 	addi	r3,sp,100
  8057ac:	003fee06 	br	805768 <___vfprintf_internal_r+0x1690>
  8057b0:	3c000017 	ldw	r16,0(r7)
  8057b4:	0023883a 	mov	r17,zero
  8057b8:	39c00104 	addi	r7,r7,4
  8057bc:	d9c14015 	stw	r7,1280(sp)
  8057c0:	003e9206 	br	80520c <___vfprintf_internal_r+0x1134>
  8057c4:	d9401904 	addi	r5,sp,100
  8057c8:	dd000f04 	addi	r20,sp,60
  8057cc:	d9414115 	stw	r5,1284(sp)
  8057d0:	d9814417 	ldw	r6,1296(sp)
  8057d4:	880a973a 	slli	r5,r17,28
  8057d8:	8004d13a 	srli	r2,r16,4
  8057dc:	810003cc 	andi	r4,r16,15
  8057e0:	3109883a 	add	r4,r6,r4
  8057e4:	2884b03a 	or	r2,r5,r2
  8057e8:	21400003 	ldbu	r5,0(r4)
  8057ec:	d9014117 	ldw	r4,1284(sp)
  8057f0:	8806d13a 	srli	r3,r17,4
  8057f4:	1021883a 	mov	r16,r2
  8057f8:	213fffc4 	addi	r4,r4,-1
  8057fc:	d9014115 	stw	r4,1284(sp)
  805800:	d9814117 	ldw	r6,1284(sp)
  805804:	10c8b03a 	or	r4,r2,r3
  805808:	1823883a 	mov	r17,r3
  80580c:	31400005 	stb	r5,0(r6)
  805810:	203fef1e 	bne	r4,zero,8057d0 <___vfprintf_internal_r+0x16f8>
  805814:	003ccb06 	br	804b44 <___vfprintf_internal_r+0xa6c>
  805818:	00800c04 	movi	r2,48
  80581c:	d98018c4 	addi	r6,sp,99
  805820:	dd000f04 	addi	r20,sp,60
  805824:	d88018c5 	stb	r2,99(sp)
  805828:	d9814115 	stw	r6,1284(sp)
  80582c:	003cc506 	br	804b44 <___vfprintf_internal_r+0xa6c>
  805830:	dc400d17 	ldw	r17,52(sp)
  805834:	07002074 	movhi	fp,129
  805838:	e70ed284 	addi	fp,fp,15178
  80583c:	003bc706 	br	80475c <___vfprintf_internal_r+0x684>
  805840:	d9414c17 	ldw	r5,1328(sp)
  805844:	2880040c 	andi	r2,r5,16
  805848:	10007c26 	beq	r2,zero,805a3c <___vfprintf_internal_r+0x1964>
  80584c:	38800017 	ldw	r2,0(r7)
  805850:	39c00104 	addi	r7,r7,4
  805854:	d9c14015 	stw	r7,1280(sp)
  805858:	d9814b17 	ldw	r6,1324(sp)
  80585c:	d9c14017 	ldw	r7,1280(sp)
  805860:	11800015 	stw	r6,0(r2)
  805864:	003a7806 	br	804248 <___vfprintf_internal_r+0x170>
  805868:	d9014f17 	ldw	r4,1340(sp)
  80586c:	b00b883a 	mov	r5,r22
  805870:	d9800c04 	addi	r6,sp,48
  805874:	08040800 	call	804080 <__sprint_r>
  805878:	103bcf1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  80587c:	dc800e17 	ldw	r18,56(sp)
  805880:	dc400d17 	ldw	r17,52(sp)
  805884:	d8c01904 	addi	r3,sp,100
  805888:	d9014717 	ldw	r4,1308(sp)
  80588c:	d9414117 	ldw	r5,1284(sp)
  805890:	8c400044 	addi	r17,r17,1
  805894:	9125883a 	add	r18,r18,r4
  805898:	008001c4 	movi	r2,7
  80589c:	19400015 	stw	r5,0(r3)
  8058a0:	19000115 	stw	r4,4(r3)
  8058a4:	dc800e15 	stw	r18,56(sp)
  8058a8:	dc400d15 	stw	r17,52(sp)
  8058ac:	147cee16 	blt	r2,r17,804c68 <___vfprintf_internal_r+0xb90>
  8058b0:	18c00204 	addi	r3,r3,8
  8058b4:	003b8606 	br	8046d0 <___vfprintf_internal_r+0x5f8>
  8058b8:	38c00017 	ldw	r3,0(r7)
  8058bc:	39000204 	addi	r4,r7,8
  8058c0:	d9014015 	stw	r4,1280(sp)
  8058c4:	d8c14215 	stw	r3,1288(sp)
  8058c8:	39c00117 	ldw	r7,4(r7)
  8058cc:	d9c14315 	stw	r7,1292(sp)
  8058d0:	003e2006 	br	805154 <___vfprintf_internal_r+0x107c>
  8058d4:	0005883a 	mov	r2,zero
  8058d8:	1409c83a 	sub	r4,r2,r16
  8058dc:	1105803a 	cmpltu	r2,r2,r4
  8058e0:	044bc83a 	sub	r5,zero,r17
  8058e4:	2885c83a 	sub	r2,r5,r2
  8058e8:	2021883a 	mov	r16,r4
  8058ec:	1023883a 	mov	r17,r2
  8058f0:	01000044 	movi	r4,1
  8058f4:	00800b44 	movi	r2,45
  8058f8:	d8800405 	stb	r2,16(sp)
  8058fc:	003c8406 	br	804b10 <___vfprintf_internal_r+0xa38>
  805900:	d9014f17 	ldw	r4,1340(sp)
  805904:	b00b883a 	mov	r5,r22
  805908:	d9800c04 	addi	r6,sp,48
  80590c:	08040800 	call	804080 <__sprint_r>
  805910:	103ba91e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  805914:	dc800e17 	ldw	r18,56(sp)
  805918:	dc400d17 	ldw	r17,52(sp)
  80591c:	d9000517 	ldw	r4,20(sp)
  805920:	d9401904 	addi	r5,sp,100
  805924:	003da706 	br	804fc4 <___vfprintf_internal_r+0xeec>
  805928:	d9014f17 	ldw	r4,1340(sp)
  80592c:	b00b883a 	mov	r5,r22
  805930:	d9800c04 	addi	r6,sp,48
  805934:	08040800 	call	804080 <__sprint_r>
  805938:	103b9f1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  80593c:	dc800e17 	ldw	r18,56(sp)
  805940:	dc400d17 	ldw	r17,52(sp)
  805944:	d9000517 	ldw	r4,20(sp)
  805948:	d8c01904 	addi	r3,sp,100
  80594c:	003d9106 	br	804f94 <___vfprintf_internal_r+0xebc>
  805950:	07002074 	movhi	fp,129
  805954:	e70ece84 	addi	fp,fp,15162
  805958:	9425883a 	add	r18,r18,r16
  80595c:	8c400044 	addi	r17,r17,1
  805960:	008001c4 	movi	r2,7
  805964:	1f000015 	stw	fp,0(r3)
  805968:	1c000115 	stw	r16,4(r3)
  80596c:	dc800e15 	stw	r18,56(sp)
  805970:	dc400d15 	stw	r17,52(sp)
  805974:	147fbc16 	blt	r2,r17,805868 <___vfprintf_internal_r+0x1790>
  805978:	18c00204 	addi	r3,r3,8
  80597c:	003fc206 	br	805888 <___vfprintf_internal_r+0x17b0>
  805980:	d9014f17 	ldw	r4,1340(sp)
  805984:	b00b883a 	mov	r5,r22
  805988:	d9800c04 	addi	r6,sp,48
  80598c:	08040800 	call	804080 <__sprint_r>
  805990:	103b891e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  805994:	dc800e17 	ldw	r18,56(sp)
  805998:	d9000517 	ldw	r4,20(sp)
  80599c:	d8c01904 	addi	r3,sp,100
  8059a0:	003d0206 	br	804dac <___vfprintf_internal_r+0xcd4>
  8059a4:	07002074 	movhi	fp,129
  8059a8:	e70ece84 	addi	fp,fp,15162
  8059ac:	003be406 	br	804940 <___vfprintf_internal_r+0x868>
  8059b0:	00802074 	movhi	r2,129
  8059b4:	108ebe04 	addi	r2,r2,15096
  8059b8:	d8814115 	stw	r2,1284(sp)
  8059bc:	003df506 	br	805194 <___vfprintf_internal_r+0x10bc>
  8059c0:	d9014217 	ldw	r4,1288(sp)
  8059c4:	d9414317 	ldw	r5,1292(sp)
  8059c8:	080a8580 	call	80a858 <__isnand>
  8059cc:	10003926 	beq	r2,zero,805ab4 <___vfprintf_internal_r+0x19dc>
  8059d0:	d9414d17 	ldw	r5,1332(sp)
  8059d4:	008011c4 	movi	r2,71
  8059d8:	1140ce16 	blt	r2,r5,805d14 <___vfprintf_internal_r+0x1c3c>
  8059dc:	01802074 	movhi	r6,129
  8059e0:	318ebf04 	addi	r6,r6,15100
  8059e4:	d9814115 	stw	r6,1284(sp)
  8059e8:	003dea06 	br	805194 <___vfprintf_internal_r+0x10bc>
  8059ec:	d9014c17 	ldw	r4,1328(sp)
  8059f0:	bdc00044 	addi	r23,r23,1
  8059f4:	b8c00007 	ldb	r3,0(r23)
  8059f8:	21000814 	ori	r4,r4,32
  8059fc:	d9014c15 	stw	r4,1328(sp)
  805a00:	003a3406 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  805a04:	dcc14515 	stw	r19,1300(sp)
  805a08:	98011016 	blt	r19,zero,805e4c <___vfprintf_internal_r+0x1d74>
  805a0c:	980f883a 	mov	r7,r19
  805a10:	d8014615 	stw	zero,1304(sp)
  805a14:	003c5206 	br	804b60 <___vfprintf_internal_r+0xa88>
  805a18:	d9014f17 	ldw	r4,1340(sp)
  805a1c:	b00b883a 	mov	r5,r22
  805a20:	d9800c04 	addi	r6,sp,48
  805a24:	08040800 	call	804080 <__sprint_r>
  805a28:	103b631e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  805a2c:	dc800e17 	ldw	r18,56(sp)
  805a30:	d9000517 	ldw	r4,20(sp)
  805a34:	d8c01904 	addi	r3,sp,100
  805a38:	003f2e06 	br	8056f4 <___vfprintf_internal_r+0x161c>
  805a3c:	d8c14c17 	ldw	r3,1328(sp)
  805a40:	1880100c 	andi	r2,r3,64
  805a44:	1000a026 	beq	r2,zero,805cc8 <___vfprintf_internal_r+0x1bf0>
  805a48:	38800017 	ldw	r2,0(r7)
  805a4c:	39c00104 	addi	r7,r7,4
  805a50:	d9c14015 	stw	r7,1280(sp)
  805a54:	d9014b17 	ldw	r4,1324(sp)
  805a58:	d9c14017 	ldw	r7,1280(sp)
  805a5c:	1100000d 	sth	r4,0(r2)
  805a60:	0039f906 	br	804248 <___vfprintf_internal_r+0x170>
  805a64:	d9014f17 	ldw	r4,1340(sp)
  805a68:	b00b883a 	mov	r5,r22
  805a6c:	d9800c04 	addi	r6,sp,48
  805a70:	08040800 	call	804080 <__sprint_r>
  805a74:	103b501e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  805a78:	dc800e17 	ldw	r18,56(sp)
  805a7c:	dc400d17 	ldw	r17,52(sp)
  805a80:	d9000517 	ldw	r4,20(sp)
  805a84:	d8c01904 	addi	r3,sp,100
  805a88:	003f2d06 	br	805740 <___vfprintf_internal_r+0x1668>
  805a8c:	00800184 	movi	r2,6
  805a90:	14c09a36 	bltu	r2,r19,805cfc <___vfprintf_internal_r+0x1c24>
  805a94:	dcc14515 	stw	r19,1300(sp)
  805a98:	9800010e 	bge	r19,zero,805aa0 <___vfprintf_internal_r+0x19c8>
  805a9c:	d8014515 	stw	zero,1300(sp)
  805aa0:	00802074 	movhi	r2,129
  805aa4:	108ec104 	addi	r2,r2,15108
  805aa8:	980f883a 	mov	r7,r19
  805aac:	d8814115 	stw	r2,1284(sp)
  805ab0:	003a7806 	br	804494 <___vfprintf_internal_r+0x3bc>
  805ab4:	00bfffc4 	movi	r2,-1
  805ab8:	9880e226 	beq	r19,r2,805e44 <___vfprintf_internal_r+0x1d6c>
  805abc:	d9414d17 	ldw	r5,1332(sp)
  805ac0:	008019c4 	movi	r2,103
  805ac4:	2880dc26 	beq	r5,r2,805e38 <___vfprintf_internal_r+0x1d60>
  805ac8:	008011c4 	movi	r2,71
  805acc:	2880da26 	beq	r5,r2,805e38 <___vfprintf_internal_r+0x1d60>
  805ad0:	d9414c17 	ldw	r5,1328(sp)
  805ad4:	d9014317 	ldw	r4,1292(sp)
  805ad8:	d9814217 	ldw	r6,1288(sp)
  805adc:	29404014 	ori	r5,r5,256
  805ae0:	d9414c15 	stw	r5,1328(sp)
  805ae4:	2000cc16 	blt	r4,zero,805e18 <___vfprintf_internal_r+0x1d40>
  805ae8:	3021883a 	mov	r16,r6
  805aec:	2023883a 	mov	r17,r4
  805af0:	0039883a 	mov	fp,zero
  805af4:	d9414d17 	ldw	r5,1332(sp)
  805af8:	00801984 	movi	r2,102
  805afc:	2880b726 	beq	r5,r2,805ddc <___vfprintf_internal_r+0x1d04>
  805b00:	00801184 	movi	r2,70
  805b04:	2880b526 	beq	r5,r2,805ddc <___vfprintf_internal_r+0x1d04>
  805b08:	00801944 	movi	r2,101
  805b0c:	2880c826 	beq	r5,r2,805e30 <___vfprintf_internal_r+0x1d58>
  805b10:	00801144 	movi	r2,69
  805b14:	2880c626 	beq	r5,r2,805e30 <___vfprintf_internal_r+0x1d58>
  805b18:	9829883a 	mov	r20,r19
  805b1c:	d9014f17 	ldw	r4,1340(sp)
  805b20:	d8800504 	addi	r2,sp,20
  805b24:	880d883a 	mov	r6,r17
  805b28:	d8800115 	stw	r2,4(sp)
  805b2c:	d8c00604 	addi	r3,sp,24
  805b30:	d8800704 	addi	r2,sp,28
  805b34:	800b883a 	mov	r5,r16
  805b38:	01c00084 	movi	r7,2
  805b3c:	d8c00215 	stw	r3,8(sp)
  805b40:	d8800315 	stw	r2,12(sp)
  805b44:	dd000015 	stw	r20,0(sp)
  805b48:	08064b00 	call	8064b0 <_dtoa_r>
  805b4c:	d9814d17 	ldw	r6,1332(sp)
  805b50:	d8814115 	stw	r2,1284(sp)
  805b54:	008019c4 	movi	r2,103
  805b58:	30809526 	beq	r6,r2,805db0 <___vfprintf_internal_r+0x1cd8>
  805b5c:	d8c14d17 	ldw	r3,1332(sp)
  805b60:	008011c4 	movi	r2,71
  805b64:	18809226 	beq	r3,r2,805db0 <___vfprintf_internal_r+0x1cd8>
  805b68:	d9414117 	ldw	r5,1284(sp)
  805b6c:	d9814d17 	ldw	r6,1332(sp)
  805b70:	00801984 	movi	r2,102
  805b74:	2d25883a 	add	r18,r5,r20
  805b78:	30808626 	beq	r6,r2,805d94 <___vfprintf_internal_r+0x1cbc>
  805b7c:	00801184 	movi	r2,70
  805b80:	30808426 	beq	r6,r2,805d94 <___vfprintf_internal_r+0x1cbc>
  805b84:	000d883a 	mov	r6,zero
  805b88:	000f883a 	mov	r7,zero
  805b8c:	880b883a 	mov	r5,r17
  805b90:	8009883a 	mov	r4,r16
  805b94:	080be540 	call	80be54 <__eqdf2>
  805b98:	1000751e 	bne	r2,zero,805d70 <___vfprintf_internal_r+0x1c98>
  805b9c:	9005883a 	mov	r2,r18
  805ba0:	dc800715 	stw	r18,28(sp)
  805ba4:	d9014117 	ldw	r4,1284(sp)
  805ba8:	d9414d17 	ldw	r5,1332(sp)
  805bac:	00c019c4 	movi	r3,103
  805bb0:	1125c83a 	sub	r18,r2,r4
  805bb4:	28c06826 	beq	r5,r3,805d58 <___vfprintf_internal_r+0x1c80>
  805bb8:	008011c4 	movi	r2,71
  805bbc:	28806626 	beq	r5,r2,805d58 <___vfprintf_internal_r+0x1c80>
  805bc0:	d9000517 	ldw	r4,20(sp)
  805bc4:	d8c14d17 	ldw	r3,1332(sp)
  805bc8:	00801944 	movi	r2,101
  805bcc:	10c05516 	blt	r2,r3,805d24 <___vfprintf_internal_r+0x1c4c>
  805bd0:	213fffc4 	addi	r4,r4,-1
  805bd4:	d9000515 	stw	r4,20(sp)
  805bd8:	d8c00805 	stb	r3,32(sp)
  805bdc:	2021883a 	mov	r16,r4
  805be0:	2000c116 	blt	r4,zero,805ee8 <___vfprintf_internal_r+0x1e10>
  805be4:	00800ac4 	movi	r2,43
  805be8:	d8800845 	stb	r2,33(sp)
  805bec:	00800244 	movi	r2,9
  805bf0:	1400af0e 	bge	r2,r16,805eb0 <___vfprintf_internal_r+0x1dd8>
  805bf4:	1027883a 	mov	r19,r2
  805bf8:	dc400b84 	addi	r17,sp,46
  805bfc:	8009883a 	mov	r4,r16
  805c00:	01400284 	movi	r5,10
  805c04:	080c2480 	call	80c248 <__modsi3>
  805c08:	10800c04 	addi	r2,r2,48
  805c0c:	8c7fffc4 	addi	r17,r17,-1
  805c10:	8009883a 	mov	r4,r16
  805c14:	01400284 	movi	r5,10
  805c18:	88800005 	stb	r2,0(r17)
  805c1c:	080c1e80 	call	80c1e8 <__divsi3>
  805c20:	1021883a 	mov	r16,r2
  805c24:	98bff516 	blt	r19,r2,805bfc <___vfprintf_internal_r+0x1b24>
  805c28:	10c00c04 	addi	r3,r2,48
  805c2c:	d88009c4 	addi	r2,sp,39
  805c30:	108001c4 	addi	r2,r2,7
  805c34:	897fffc4 	addi	r5,r17,-1
  805c38:	88ffffc5 	stb	r3,-1(r17)
  805c3c:	2880a72e 	bgeu	r5,r2,805edc <___vfprintf_internal_r+0x1e04>
  805c40:	1009883a 	mov	r4,r2
  805c44:	d9800804 	addi	r6,sp,32
  805c48:	d8c00884 	addi	r3,sp,34
  805c4c:	28800003 	ldbu	r2,0(r5)
  805c50:	29400044 	addi	r5,r5,1
  805c54:	18800005 	stb	r2,0(r3)
  805c58:	18c00044 	addi	r3,r3,1
  805c5c:	293ffb36 	bltu	r5,r4,805c4c <___vfprintf_internal_r+0x1b74>
  805c60:	1987c83a 	sub	r3,r3,r6
  805c64:	00800044 	movi	r2,1
  805c68:	d8c14815 	stw	r3,1312(sp)
  805c6c:	90cf883a 	add	r7,r18,r3
  805c70:	1480960e 	bge	r2,r18,805ecc <___vfprintf_internal_r+0x1df4>
  805c74:	39c00044 	addi	r7,r7,1
  805c78:	d9c14515 	stw	r7,1300(sp)
  805c7c:	38003416 	blt	r7,zero,805d50 <___vfprintf_internal_r+0x1c78>
  805c80:	e0803fcc 	andi	r2,fp,255
  805c84:	1080201c 	xori	r2,r2,128
  805c88:	10bfe004 	addi	r2,r2,-128
  805c8c:	10004e26 	beq	r2,zero,805dc8 <___vfprintf_internal_r+0x1cf0>
  805c90:	00800b44 	movi	r2,45
  805c94:	dc814715 	stw	r18,1308(sp)
  805c98:	d8014615 	stw	zero,1304(sp)
  805c9c:	d8800405 	stb	r2,16(sp)
  805ca0:	003bb106 	br	804b68 <___vfprintf_internal_r+0xa90>
  805ca4:	00800b44 	movi	r2,45
  805ca8:	d8800405 	stb	r2,16(sp)
  805cac:	003d3306 	br	80517c <___vfprintf_internal_r+0x10a4>
  805cb0:	d9014f17 	ldw	r4,1340(sp)
  805cb4:	b00b883a 	mov	r5,r22
  805cb8:	d9800c04 	addi	r6,sp,48
  805cbc:	08040800 	call	804080 <__sprint_r>
  805cc0:	103abd1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x6e0>
  805cc4:	003abb06 	br	8047b4 <___vfprintf_internal_r+0x6dc>
  805cc8:	38800017 	ldw	r2,0(r7)
  805ccc:	39c00104 	addi	r7,r7,4
  805cd0:	d9c14015 	stw	r7,1280(sp)
  805cd4:	d9414b17 	ldw	r5,1324(sp)
  805cd8:	d9c14017 	ldw	r7,1280(sp)
  805cdc:	11400015 	stw	r5,0(r2)
  805ce0:	00395906 	br	804248 <___vfprintf_internal_r+0x170>
  805ce4:	980f883a 	mov	r7,r19
  805ce8:	dcc14515 	stw	r19,1300(sp)
  805cec:	d8014615 	stw	zero,1304(sp)
  805cf0:	003b9b06 	br	804b60 <___vfprintf_internal_r+0xa88>
  805cf4:	0027883a 	mov	r19,zero
  805cf8:	00397806 	br	8042dc <___vfprintf_internal_r+0x204>
  805cfc:	00c02074 	movhi	r3,129
  805d00:	18cec104 	addi	r3,r3,15108
  805d04:	100f883a 	mov	r7,r2
  805d08:	d8814515 	stw	r2,1300(sp)
  805d0c:	d8c14115 	stw	r3,1284(sp)
  805d10:	0039e006 	br	804494 <___vfprintf_internal_r+0x3bc>
  805d14:	00802074 	movhi	r2,129
  805d18:	108ec004 	addi	r2,r2,15104
  805d1c:	d8814115 	stw	r2,1284(sp)
  805d20:	003d1c06 	br	805194 <___vfprintf_internal_r+0x10bc>
  805d24:	d9414d17 	ldw	r5,1332(sp)
  805d28:	00801984 	movi	r2,102
  805d2c:	28804926 	beq	r5,r2,805e54 <___vfprintf_internal_r+0x1d7c>
  805d30:	200f883a 	mov	r7,r4
  805d34:	24805716 	blt	r4,r18,805e94 <___vfprintf_internal_r+0x1dbc>
  805d38:	d9414c17 	ldw	r5,1328(sp)
  805d3c:	2880004c 	andi	r2,r5,1
  805d40:	10000126 	beq	r2,zero,805d48 <___vfprintf_internal_r+0x1c70>
  805d44:	21c00044 	addi	r7,r4,1
  805d48:	d9c14515 	stw	r7,1300(sp)
  805d4c:	383fcc0e 	bge	r7,zero,805c80 <___vfprintf_internal_r+0x1ba8>
  805d50:	d8014515 	stw	zero,1300(sp)
  805d54:	003fca06 	br	805c80 <___vfprintf_internal_r+0x1ba8>
  805d58:	d9000517 	ldw	r4,20(sp)
  805d5c:	00bfff04 	movi	r2,-4
  805d60:	1100480e 	bge	r2,r4,805e84 <___vfprintf_internal_r+0x1dac>
  805d64:	99004716 	blt	r19,r4,805e84 <___vfprintf_internal_r+0x1dac>
  805d68:	d8c14d15 	stw	r3,1332(sp)
  805d6c:	003ff006 	br	805d30 <___vfprintf_internal_r+0x1c58>
  805d70:	d8800717 	ldw	r2,28(sp)
  805d74:	14bf8b2e 	bgeu	r2,r18,805ba4 <___vfprintf_internal_r+0x1acc>
  805d78:	9007883a 	mov	r3,r18
  805d7c:	01000c04 	movi	r4,48
  805d80:	11000005 	stb	r4,0(r2)
  805d84:	10800044 	addi	r2,r2,1
  805d88:	d8800715 	stw	r2,28(sp)
  805d8c:	18bffc1e 	bne	r3,r2,805d80 <___vfprintf_internal_r+0x1ca8>
  805d90:	003f8406 	br	805ba4 <___vfprintf_internal_r+0x1acc>
  805d94:	d8814117 	ldw	r2,1284(sp)
  805d98:	10c00007 	ldb	r3,0(r2)
  805d9c:	00800c04 	movi	r2,48
  805da0:	18805b26 	beq	r3,r2,805f10 <___vfprintf_internal_r+0x1e38>
  805da4:	d9000517 	ldw	r4,20(sp)
  805da8:	9125883a 	add	r18,r18,r4
  805dac:	003f7506 	br	805b84 <___vfprintf_internal_r+0x1aac>
  805db0:	d9014c17 	ldw	r4,1328(sp)
  805db4:	2080004c 	andi	r2,r4,1
  805db8:	1005003a 	cmpeq	r2,r2,zero
  805dbc:	103f6a26 	beq	r2,zero,805b68 <___vfprintf_internal_r+0x1a90>
  805dc0:	d8800717 	ldw	r2,28(sp)
  805dc4:	003f7706 	br	805ba4 <___vfprintf_internal_r+0x1acc>
  805dc8:	d9c14515 	stw	r7,1300(sp)
  805dcc:	38004d16 	blt	r7,zero,805f04 <___vfprintf_internal_r+0x1e2c>
  805dd0:	dc814715 	stw	r18,1308(sp)
  805dd4:	d8014615 	stw	zero,1304(sp)
  805dd8:	003b6106 	br	804b60 <___vfprintf_internal_r+0xa88>
  805ddc:	d9014f17 	ldw	r4,1340(sp)
  805de0:	d8800504 	addi	r2,sp,20
  805de4:	d8800115 	stw	r2,4(sp)
  805de8:	d8c00604 	addi	r3,sp,24
  805dec:	d8800704 	addi	r2,sp,28
  805df0:	800b883a 	mov	r5,r16
  805df4:	880d883a 	mov	r6,r17
  805df8:	01c000c4 	movi	r7,3
  805dfc:	d8c00215 	stw	r3,8(sp)
  805e00:	d8800315 	stw	r2,12(sp)
  805e04:	dcc00015 	stw	r19,0(sp)
  805e08:	9829883a 	mov	r20,r19
  805e0c:	08064b00 	call	8064b0 <_dtoa_r>
  805e10:	d8814115 	stw	r2,1284(sp)
  805e14:	003f5106 	br	805b5c <___vfprintf_internal_r+0x1a84>
  805e18:	d8c14217 	ldw	r3,1288(sp)
  805e1c:	d9014317 	ldw	r4,1292(sp)
  805e20:	07000b44 	movi	fp,45
  805e24:	1821883a 	mov	r16,r3
  805e28:	2460003c 	xorhi	r17,r4,32768
  805e2c:	003f3106 	br	805af4 <___vfprintf_internal_r+0x1a1c>
  805e30:	9d000044 	addi	r20,r19,1
  805e34:	003f3906 	br	805b1c <___vfprintf_internal_r+0x1a44>
  805e38:	983f251e 	bne	r19,zero,805ad0 <___vfprintf_internal_r+0x19f8>
  805e3c:	04c00044 	movi	r19,1
  805e40:	003f2306 	br	805ad0 <___vfprintf_internal_r+0x19f8>
  805e44:	04c00184 	movi	r19,6
  805e48:	003f2106 	br	805ad0 <___vfprintf_internal_r+0x19f8>
  805e4c:	d8014515 	stw	zero,1300(sp)
  805e50:	003eee06 	br	805a0c <___vfprintf_internal_r+0x1934>
  805e54:	200f883a 	mov	r7,r4
  805e58:	0100370e 	bge	zero,r4,805f38 <___vfprintf_internal_r+0x1e60>
  805e5c:	9800031e 	bne	r19,zero,805e6c <___vfprintf_internal_r+0x1d94>
  805e60:	d9814c17 	ldw	r6,1328(sp)
  805e64:	3080004c 	andi	r2,r6,1
  805e68:	103fb726 	beq	r2,zero,805d48 <___vfprintf_internal_r+0x1c70>
  805e6c:	20800044 	addi	r2,r4,1
  805e70:	98a7883a 	add	r19,r19,r2
  805e74:	dcc14515 	stw	r19,1300(sp)
  805e78:	980f883a 	mov	r7,r19
  805e7c:	983f800e 	bge	r19,zero,805c80 <___vfprintf_internal_r+0x1ba8>
  805e80:	003fb306 	br	805d50 <___vfprintf_internal_r+0x1c78>
  805e84:	d9814d17 	ldw	r6,1332(sp)
  805e88:	31bfff84 	addi	r6,r6,-2
  805e8c:	d9814d15 	stw	r6,1332(sp)
  805e90:	003f4c06 	br	805bc4 <___vfprintf_internal_r+0x1aec>
  805e94:	0100180e 	bge	zero,r4,805ef8 <___vfprintf_internal_r+0x1e20>
  805e98:	00800044 	movi	r2,1
  805e9c:	1485883a 	add	r2,r2,r18
  805ea0:	d8814515 	stw	r2,1300(sp)
  805ea4:	100f883a 	mov	r7,r2
  805ea8:	103f750e 	bge	r2,zero,805c80 <___vfprintf_internal_r+0x1ba8>
  805eac:	003fa806 	br	805d50 <___vfprintf_internal_r+0x1c78>
  805eb0:	80c00c04 	addi	r3,r16,48
  805eb4:	00800c04 	movi	r2,48
  805eb8:	d8c008c5 	stb	r3,35(sp)
  805ebc:	d9800804 	addi	r6,sp,32
  805ec0:	d8c00904 	addi	r3,sp,36
  805ec4:	d8800885 	stb	r2,34(sp)
  805ec8:	003f6506 	br	805c60 <___vfprintf_internal_r+0x1b88>
  805ecc:	d9014c17 	ldw	r4,1328(sp)
  805ed0:	2084703a 	and	r2,r4,r2
  805ed4:	103f9c26 	beq	r2,zero,805d48 <___vfprintf_internal_r+0x1c70>
  805ed8:	003f6606 	br	805c74 <___vfprintf_internal_r+0x1b9c>
  805edc:	d9800804 	addi	r6,sp,32
  805ee0:	d8c00884 	addi	r3,sp,34
  805ee4:	003f5e06 	br	805c60 <___vfprintf_internal_r+0x1b88>
  805ee8:	00800b44 	movi	r2,45
  805eec:	0121c83a 	sub	r16,zero,r4
  805ef0:	d8800845 	stb	r2,33(sp)
  805ef4:	003f3d06 	br	805bec <___vfprintf_internal_r+0x1b14>
  805ef8:	00800084 	movi	r2,2
  805efc:	1105c83a 	sub	r2,r2,r4
  805f00:	003fe606 	br	805e9c <___vfprintf_internal_r+0x1dc4>
  805f04:	d8014515 	stw	zero,1300(sp)
  805f08:	dc814715 	stw	r18,1308(sp)
  805f0c:	003fb106 	br	805dd4 <___vfprintf_internal_r+0x1cfc>
  805f10:	000d883a 	mov	r6,zero
  805f14:	000f883a 	mov	r7,zero
  805f18:	8009883a 	mov	r4,r16
  805f1c:	880b883a 	mov	r5,r17
  805f20:	080bedc0 	call	80bedc <__nedf2>
  805f24:	103f9f26 	beq	r2,zero,805da4 <___vfprintf_internal_r+0x1ccc>
  805f28:	00800044 	movi	r2,1
  805f2c:	1509c83a 	sub	r4,r2,r20
  805f30:	d9000515 	stw	r4,20(sp)
  805f34:	003f9b06 	br	805da4 <___vfprintf_internal_r+0x1ccc>
  805f38:	98000d1e 	bne	r19,zero,805f70 <___vfprintf_internal_r+0x1e98>
  805f3c:	d8c14c17 	ldw	r3,1328(sp)
  805f40:	1880004c 	andi	r2,r3,1
  805f44:	10000a1e 	bne	r2,zero,805f70 <___vfprintf_internal_r+0x1e98>
  805f48:	01000044 	movi	r4,1
  805f4c:	200f883a 	mov	r7,r4
  805f50:	d9014515 	stw	r4,1300(sp)
  805f54:	003f4a06 	br	805c80 <___vfprintf_internal_r+0x1ba8>
  805f58:	3cc00017 	ldw	r19,0(r7)
  805f5c:	39c00104 	addi	r7,r7,4
  805f60:	983d0e0e 	bge	r19,zero,80539c <___vfprintf_internal_r+0x12c4>
  805f64:	b8c00007 	ldb	r3,0(r23)
  805f68:	04ffffc4 	movi	r19,-1
  805f6c:	0038d906 	br	8042d4 <___vfprintf_internal_r+0x1fc>
  805f70:	9cc00084 	addi	r19,r19,2
  805f74:	dcc14515 	stw	r19,1300(sp)
  805f78:	980f883a 	mov	r7,r19
  805f7c:	983f400e 	bge	r19,zero,805c80 <___vfprintf_internal_r+0x1ba8>
  805f80:	003f7306 	br	805d50 <___vfprintf_internal_r+0x1c78>

00805f84 <__vfprintf_internal>:
  805f84:	00802074 	movhi	r2,129
  805f88:	10966304 	addi	r2,r2,22924
  805f8c:	2013883a 	mov	r9,r4
  805f90:	11000017 	ldw	r4,0(r2)
  805f94:	2805883a 	mov	r2,r5
  805f98:	300f883a 	mov	r7,r6
  805f9c:	480b883a 	mov	r5,r9
  805fa0:	100d883a 	mov	r6,r2
  805fa4:	08040d81 	jmpi	8040d8 <___vfprintf_internal_r>

00805fa8 <__swsetup_r>:
  805fa8:	00802074 	movhi	r2,129
  805fac:	10966304 	addi	r2,r2,22924
  805fb0:	10c00017 	ldw	r3,0(r2)
  805fb4:	defffd04 	addi	sp,sp,-12
  805fb8:	dc400115 	stw	r17,4(sp)
  805fbc:	dc000015 	stw	r16,0(sp)
  805fc0:	dfc00215 	stw	ra,8(sp)
  805fc4:	2023883a 	mov	r17,r4
  805fc8:	2821883a 	mov	r16,r5
  805fcc:	18000226 	beq	r3,zero,805fd8 <__swsetup_r+0x30>
  805fd0:	18800e17 	ldw	r2,56(r3)
  805fd4:	10001f26 	beq	r2,zero,806054 <__swsetup_r+0xac>
  805fd8:	8100030b 	ldhu	r4,12(r16)
  805fdc:	2080020c 	andi	r2,r4,8
  805fe0:	10002826 	beq	r2,zero,806084 <__swsetup_r+0xdc>
  805fe4:	81400417 	ldw	r5,16(r16)
  805fe8:	28001d26 	beq	r5,zero,806060 <__swsetup_r+0xb8>
  805fec:	2080004c 	andi	r2,r4,1
  805ff0:	1005003a 	cmpeq	r2,r2,zero
  805ff4:	10000b26 	beq	r2,zero,806024 <__swsetup_r+0x7c>
  805ff8:	2080008c 	andi	r2,r4,2
  805ffc:	10001226 	beq	r2,zero,806048 <__swsetup_r+0xa0>
  806000:	0005883a 	mov	r2,zero
  806004:	80800215 	stw	r2,8(r16)
  806008:	28000b26 	beq	r5,zero,806038 <__swsetup_r+0x90>
  80600c:	0005883a 	mov	r2,zero
  806010:	dfc00217 	ldw	ra,8(sp)
  806014:	dc400117 	ldw	r17,4(sp)
  806018:	dc000017 	ldw	r16,0(sp)
  80601c:	dec00304 	addi	sp,sp,12
  806020:	f800283a 	ret
  806024:	80800517 	ldw	r2,20(r16)
  806028:	80000215 	stw	zero,8(r16)
  80602c:	0085c83a 	sub	r2,zero,r2
  806030:	80800615 	stw	r2,24(r16)
  806034:	283ff51e 	bne	r5,zero,80600c <__swsetup_r+0x64>
  806038:	2080200c 	andi	r2,r4,128
  80603c:	103ff326 	beq	r2,zero,80600c <__swsetup_r+0x64>
  806040:	00bfffc4 	movi	r2,-1
  806044:	003ff206 	br	806010 <__swsetup_r+0x68>
  806048:	80800517 	ldw	r2,20(r16)
  80604c:	80800215 	stw	r2,8(r16)
  806050:	003fed06 	br	806008 <__swsetup_r+0x60>
  806054:	1809883a 	mov	r4,r3
  806058:	0807cfc0 	call	807cfc <__sinit>
  80605c:	003fde06 	br	805fd8 <__swsetup_r+0x30>
  806060:	20c0a00c 	andi	r3,r4,640
  806064:	00808004 	movi	r2,512
  806068:	18bfe026 	beq	r3,r2,805fec <__swsetup_r+0x44>
  80606c:	8809883a 	mov	r4,r17
  806070:	800b883a 	mov	r5,r16
  806074:	0808a740 	call	808a74 <__smakebuf_r>
  806078:	8100030b 	ldhu	r4,12(r16)
  80607c:	81400417 	ldw	r5,16(r16)
  806080:	003fda06 	br	805fec <__swsetup_r+0x44>
  806084:	2080040c 	andi	r2,r4,16
  806088:	103fed26 	beq	r2,zero,806040 <__swsetup_r+0x98>
  80608c:	2080010c 	andi	r2,r4,4
  806090:	10001226 	beq	r2,zero,8060dc <__swsetup_r+0x134>
  806094:	81400c17 	ldw	r5,48(r16)
  806098:	28000526 	beq	r5,zero,8060b0 <__swsetup_r+0x108>
  80609c:	80801004 	addi	r2,r16,64
  8060a0:	28800226 	beq	r5,r2,8060ac <__swsetup_r+0x104>
  8060a4:	8809883a 	mov	r4,r17
  8060a8:	08080800 	call	808080 <_free_r>
  8060ac:	80000c15 	stw	zero,48(r16)
  8060b0:	8080030b 	ldhu	r2,12(r16)
  8060b4:	81400417 	ldw	r5,16(r16)
  8060b8:	80000115 	stw	zero,4(r16)
  8060bc:	10bff6cc 	andi	r2,r2,65499
  8060c0:	8080030d 	sth	r2,12(r16)
  8060c4:	81400015 	stw	r5,0(r16)
  8060c8:	8080030b 	ldhu	r2,12(r16)
  8060cc:	10800214 	ori	r2,r2,8
  8060d0:	113fffcc 	andi	r4,r2,65535
  8060d4:	8080030d 	sth	r2,12(r16)
  8060d8:	003fc306 	br	805fe8 <__swsetup_r+0x40>
  8060dc:	81400417 	ldw	r5,16(r16)
  8060e0:	003ff906 	br	8060c8 <__swsetup_r+0x120>

008060e4 <register_fini>:
  8060e4:	f800283a 	ret

008060e8 <__call_exitprocs>:
  8060e8:	00802074 	movhi	r2,129
  8060ec:	10966404 	addi	r2,r2,22928
  8060f0:	10800017 	ldw	r2,0(r2)
  8060f4:	defff304 	addi	sp,sp,-52
  8060f8:	df000b15 	stw	fp,44(sp)
  8060fc:	d8800115 	stw	r2,4(sp)
  806100:	00802034 	movhi	r2,128
  806104:	108d7904 	addi	r2,r2,13796
  806108:	1005003a 	cmpeq	r2,r2,zero
  80610c:	d8800215 	stw	r2,8(sp)
  806110:	d8800117 	ldw	r2,4(sp)
  806114:	dd400815 	stw	r21,32(sp)
  806118:	dd000715 	stw	r20,28(sp)
  80611c:	10805204 	addi	r2,r2,328
  806120:	dfc00c15 	stw	ra,48(sp)
  806124:	ddc00a15 	stw	r23,40(sp)
  806128:	dd800915 	stw	r22,36(sp)
  80612c:	dcc00615 	stw	r19,24(sp)
  806130:	dc800515 	stw	r18,20(sp)
  806134:	dc400415 	stw	r17,16(sp)
  806138:	dc000315 	stw	r16,12(sp)
  80613c:	282b883a 	mov	r21,r5
  806140:	2039883a 	mov	fp,r4
  806144:	d8800015 	stw	r2,0(sp)
  806148:	2829003a 	cmpeq	r20,r5,zero
  80614c:	d8800117 	ldw	r2,4(sp)
  806150:	14405217 	ldw	r17,328(r2)
  806154:	88001026 	beq	r17,zero,806198 <__call_exitprocs+0xb0>
  806158:	ddc00017 	ldw	r23,0(sp)
  80615c:	88800117 	ldw	r2,4(r17)
  806160:	8c802204 	addi	r18,r17,136
  806164:	143fffc4 	addi	r16,r2,-1
  806168:	80000916 	blt	r16,zero,806190 <__call_exitprocs+0xa8>
  80616c:	05bfffc4 	movi	r22,-1
  806170:	a000151e 	bne	r20,zero,8061c8 <__call_exitprocs+0xe0>
  806174:	8409883a 	add	r4,r16,r16
  806178:	2105883a 	add	r2,r4,r4
  80617c:	1485883a 	add	r2,r2,r18
  806180:	10c02017 	ldw	r3,128(r2)
  806184:	a8c01126 	beq	r21,r3,8061cc <__call_exitprocs+0xe4>
  806188:	843fffc4 	addi	r16,r16,-1
  80618c:	85bff81e 	bne	r16,r22,806170 <__call_exitprocs+0x88>
  806190:	d8800217 	ldw	r2,8(sp)
  806194:	10003126 	beq	r2,zero,80625c <__call_exitprocs+0x174>
  806198:	dfc00c17 	ldw	ra,48(sp)
  80619c:	df000b17 	ldw	fp,44(sp)
  8061a0:	ddc00a17 	ldw	r23,40(sp)
  8061a4:	dd800917 	ldw	r22,36(sp)
  8061a8:	dd400817 	ldw	r21,32(sp)
  8061ac:	dd000717 	ldw	r20,28(sp)
  8061b0:	dcc00617 	ldw	r19,24(sp)
  8061b4:	dc800517 	ldw	r18,20(sp)
  8061b8:	dc400417 	ldw	r17,16(sp)
  8061bc:	dc000317 	ldw	r16,12(sp)
  8061c0:	dec00d04 	addi	sp,sp,52
  8061c4:	f800283a 	ret
  8061c8:	8409883a 	add	r4,r16,r16
  8061cc:	88c00117 	ldw	r3,4(r17)
  8061d0:	2105883a 	add	r2,r4,r4
  8061d4:	1445883a 	add	r2,r2,r17
  8061d8:	18ffffc4 	addi	r3,r3,-1
  8061dc:	11800217 	ldw	r6,8(r2)
  8061e0:	1c001526 	beq	r3,r16,806238 <__call_exitprocs+0x150>
  8061e4:	10000215 	stw	zero,8(r2)
  8061e8:	303fe726 	beq	r6,zero,806188 <__call_exitprocs+0xa0>
  8061ec:	00c00044 	movi	r3,1
  8061f0:	1c06983a 	sll	r3,r3,r16
  8061f4:	90804017 	ldw	r2,256(r18)
  8061f8:	8cc00117 	ldw	r19,4(r17)
  8061fc:	1884703a 	and	r2,r3,r2
  806200:	10001426 	beq	r2,zero,806254 <__call_exitprocs+0x16c>
  806204:	90804117 	ldw	r2,260(r18)
  806208:	1884703a 	and	r2,r3,r2
  80620c:	10000c1e 	bne	r2,zero,806240 <__call_exitprocs+0x158>
  806210:	2105883a 	add	r2,r4,r4
  806214:	1485883a 	add	r2,r2,r18
  806218:	11400017 	ldw	r5,0(r2)
  80621c:	e009883a 	mov	r4,fp
  806220:	303ee83a 	callr	r6
  806224:	88800117 	ldw	r2,4(r17)
  806228:	98bfc81e 	bne	r19,r2,80614c <__call_exitprocs+0x64>
  80622c:	b8800017 	ldw	r2,0(r23)
  806230:	147fd526 	beq	r2,r17,806188 <__call_exitprocs+0xa0>
  806234:	003fc506 	br	80614c <__call_exitprocs+0x64>
  806238:	8c000115 	stw	r16,4(r17)
  80623c:	003fea06 	br	8061e8 <__call_exitprocs+0x100>
  806240:	2105883a 	add	r2,r4,r4
  806244:	1485883a 	add	r2,r2,r18
  806248:	11000017 	ldw	r4,0(r2)
  80624c:	303ee83a 	callr	r6
  806250:	003ff406 	br	806224 <__call_exitprocs+0x13c>
  806254:	303ee83a 	callr	r6
  806258:	003ff206 	br	806224 <__call_exitprocs+0x13c>
  80625c:	88800117 	ldw	r2,4(r17)
  806260:	1000081e 	bne	r2,zero,806284 <__call_exitprocs+0x19c>
  806264:	89000017 	ldw	r4,0(r17)
  806268:	20000726 	beq	r4,zero,806288 <__call_exitprocs+0x1a0>
  80626c:	b9000015 	stw	r4,0(r23)
  806270:	8809883a 	mov	r4,r17
  806274:	08035e40 	call	8035e4 <free>
  806278:	bc400017 	ldw	r17,0(r23)
  80627c:	883fb71e 	bne	r17,zero,80615c <__call_exitprocs+0x74>
  806280:	003fc506 	br	806198 <__call_exitprocs+0xb0>
  806284:	89000017 	ldw	r4,0(r17)
  806288:	882f883a 	mov	r23,r17
  80628c:	2023883a 	mov	r17,r4
  806290:	883fb21e 	bne	r17,zero,80615c <__call_exitprocs+0x74>
  806294:	003fc006 	br	806198 <__call_exitprocs+0xb0>

00806298 <quorem>:
  806298:	28c00417 	ldw	r3,16(r5)
  80629c:	20800417 	ldw	r2,16(r4)
  8062a0:	defff604 	addi	sp,sp,-40
  8062a4:	ddc00715 	stw	r23,28(sp)
  8062a8:	dd400515 	stw	r21,20(sp)
  8062ac:	dfc00915 	stw	ra,36(sp)
  8062b0:	df000815 	stw	fp,32(sp)
  8062b4:	dd800615 	stw	r22,24(sp)
  8062b8:	dd000415 	stw	r20,16(sp)
  8062bc:	dcc00315 	stw	r19,12(sp)
  8062c0:	dc800215 	stw	r18,8(sp)
  8062c4:	dc400115 	stw	r17,4(sp)
  8062c8:	dc000015 	stw	r16,0(sp)
  8062cc:	202f883a 	mov	r23,r4
  8062d0:	282b883a 	mov	r21,r5
  8062d4:	10c07416 	blt	r2,r3,8064a8 <quorem+0x210>
  8062d8:	1c7fffc4 	addi	r17,r3,-1
  8062dc:	8c45883a 	add	r2,r17,r17
  8062e0:	1085883a 	add	r2,r2,r2
  8062e4:	2c000504 	addi	r16,r5,20
  8062e8:	24c00504 	addi	r19,r4,20
  8062ec:	14ed883a 	add	r22,r2,r19
  8062f0:	80a5883a 	add	r18,r16,r2
  8062f4:	b7000017 	ldw	fp,0(r22)
  8062f8:	91400017 	ldw	r5,0(r18)
  8062fc:	e009883a 	mov	r4,fp
  806300:	29400044 	addi	r5,r5,1
  806304:	080c2a80 	call	80c2a8 <__udivsi3>
  806308:	1029883a 	mov	r20,r2
  80630c:	10003c1e 	bne	r2,zero,806400 <quorem+0x168>
  806310:	a80b883a 	mov	r5,r21
  806314:	b809883a 	mov	r4,r23
  806318:	0808fc00 	call	808fc0 <__mcmp>
  80631c:	10002b16 	blt	r2,zero,8063cc <quorem+0x134>
  806320:	a5000044 	addi	r20,r20,1
  806324:	980f883a 	mov	r7,r19
  806328:	0011883a 	mov	r8,zero
  80632c:	0009883a 	mov	r4,zero
  806330:	81400017 	ldw	r5,0(r16)
  806334:	38c00017 	ldw	r3,0(r7)
  806338:	84000104 	addi	r16,r16,4
  80633c:	28bfffcc 	andi	r2,r5,65535
  806340:	2085883a 	add	r2,r4,r2
  806344:	11bfffcc 	andi	r6,r2,65535
  806348:	193fffcc 	andi	r4,r3,65535
  80634c:	1004d43a 	srli	r2,r2,16
  806350:	280ad43a 	srli	r5,r5,16
  806354:	2189c83a 	sub	r4,r4,r6
  806358:	2209883a 	add	r4,r4,r8
  80635c:	1806d43a 	srli	r3,r3,16
  806360:	288b883a 	add	r5,r5,r2
  806364:	200dd43a 	srai	r6,r4,16
  806368:	28bfffcc 	andi	r2,r5,65535
  80636c:	1887c83a 	sub	r3,r3,r2
  806370:	1987883a 	add	r3,r3,r6
  806374:	3900000d 	sth	r4,0(r7)
  806378:	38c0008d 	sth	r3,2(r7)
  80637c:	2808d43a 	srli	r4,r5,16
  806380:	39c00104 	addi	r7,r7,4
  806384:	1811d43a 	srai	r8,r3,16
  806388:	943fe92e 	bgeu	r18,r16,806330 <quorem+0x98>
  80638c:	8c45883a 	add	r2,r17,r17
  806390:	1085883a 	add	r2,r2,r2
  806394:	9885883a 	add	r2,r19,r2
  806398:	10c00017 	ldw	r3,0(r2)
  80639c:	18000b1e 	bne	r3,zero,8063cc <quorem+0x134>
  8063a0:	113fff04 	addi	r4,r2,-4
  8063a4:	9900082e 	bgeu	r19,r4,8063c8 <quorem+0x130>
  8063a8:	10bfff17 	ldw	r2,-4(r2)
  8063ac:	10000326 	beq	r2,zero,8063bc <quorem+0x124>
  8063b0:	00000506 	br	8063c8 <quorem+0x130>
  8063b4:	20800017 	ldw	r2,0(r4)
  8063b8:	1000031e 	bne	r2,zero,8063c8 <quorem+0x130>
  8063bc:	213fff04 	addi	r4,r4,-4
  8063c0:	8c7fffc4 	addi	r17,r17,-1
  8063c4:	993ffb36 	bltu	r19,r4,8063b4 <quorem+0x11c>
  8063c8:	bc400415 	stw	r17,16(r23)
  8063cc:	a005883a 	mov	r2,r20
  8063d0:	dfc00917 	ldw	ra,36(sp)
  8063d4:	df000817 	ldw	fp,32(sp)
  8063d8:	ddc00717 	ldw	r23,28(sp)
  8063dc:	dd800617 	ldw	r22,24(sp)
  8063e0:	dd400517 	ldw	r21,20(sp)
  8063e4:	dd000417 	ldw	r20,16(sp)
  8063e8:	dcc00317 	ldw	r19,12(sp)
  8063ec:	dc800217 	ldw	r18,8(sp)
  8063f0:	dc400117 	ldw	r17,4(sp)
  8063f4:	dc000017 	ldw	r16,0(sp)
  8063f8:	dec00a04 	addi	sp,sp,40
  8063fc:	f800283a 	ret
  806400:	980f883a 	mov	r7,r19
  806404:	8011883a 	mov	r8,r16
  806408:	0013883a 	mov	r9,zero
  80640c:	000d883a 	mov	r6,zero
  806410:	40c00017 	ldw	r3,0(r8)
  806414:	39000017 	ldw	r4,0(r7)
  806418:	42000104 	addi	r8,r8,4
  80641c:	18bfffcc 	andi	r2,r3,65535
  806420:	a085383a 	mul	r2,r20,r2
  806424:	1806d43a 	srli	r3,r3,16
  806428:	217fffcc 	andi	r5,r4,65535
  80642c:	3085883a 	add	r2,r6,r2
  806430:	11bfffcc 	andi	r6,r2,65535
  806434:	a0c7383a 	mul	r3,r20,r3
  806438:	1004d43a 	srli	r2,r2,16
  80643c:	298bc83a 	sub	r5,r5,r6
  806440:	2a4b883a 	add	r5,r5,r9
  806444:	2008d43a 	srli	r4,r4,16
  806448:	1887883a 	add	r3,r3,r2
  80644c:	280dd43a 	srai	r6,r5,16
  806450:	18bfffcc 	andi	r2,r3,65535
  806454:	2089c83a 	sub	r4,r4,r2
  806458:	2189883a 	add	r4,r4,r6
  80645c:	3900008d 	sth	r4,2(r7)
  806460:	3940000d 	sth	r5,0(r7)
  806464:	180cd43a 	srli	r6,r3,16
  806468:	39c00104 	addi	r7,r7,4
  80646c:	2013d43a 	srai	r9,r4,16
  806470:	923fe72e 	bgeu	r18,r8,806410 <quorem+0x178>
  806474:	e03fa61e 	bne	fp,zero,806310 <quorem+0x78>
  806478:	b0ffff04 	addi	r3,r22,-4
  80647c:	98c0082e 	bgeu	r19,r3,8064a0 <quorem+0x208>
  806480:	b0bfff17 	ldw	r2,-4(r22)
  806484:	10000326 	beq	r2,zero,806494 <quorem+0x1fc>
  806488:	00000506 	br	8064a0 <quorem+0x208>
  80648c:	18800017 	ldw	r2,0(r3)
  806490:	1000031e 	bne	r2,zero,8064a0 <quorem+0x208>
  806494:	18ffff04 	addi	r3,r3,-4
  806498:	8c7fffc4 	addi	r17,r17,-1
  80649c:	98fffb36 	bltu	r19,r3,80648c <quorem+0x1f4>
  8064a0:	bc400415 	stw	r17,16(r23)
  8064a4:	003f9a06 	br	806310 <quorem+0x78>
  8064a8:	0005883a 	mov	r2,zero
  8064ac:	003fc806 	br	8063d0 <quorem+0x138>

008064b0 <_dtoa_r>:
  8064b0:	22001017 	ldw	r8,64(r4)
  8064b4:	deffda04 	addi	sp,sp,-152
  8064b8:	dd402115 	stw	r21,132(sp)
  8064bc:	dd002015 	stw	r20,128(sp)
  8064c0:	dc801e15 	stw	r18,120(sp)
  8064c4:	dc401d15 	stw	r17,116(sp)
  8064c8:	dfc02515 	stw	ra,148(sp)
  8064cc:	df002415 	stw	fp,144(sp)
  8064d0:	ddc02315 	stw	r23,140(sp)
  8064d4:	dd802215 	stw	r22,136(sp)
  8064d8:	dcc01f15 	stw	r19,124(sp)
  8064dc:	dc001c15 	stw	r16,112(sp)
  8064e0:	d9001615 	stw	r4,88(sp)
  8064e4:	3023883a 	mov	r17,r6
  8064e8:	2829883a 	mov	r20,r5
  8064ec:	d9c01715 	stw	r7,92(sp)
  8064f0:	dc802817 	ldw	r18,160(sp)
  8064f4:	302b883a 	mov	r21,r6
  8064f8:	40000a26 	beq	r8,zero,806524 <_dtoa_r+0x74>
  8064fc:	20801117 	ldw	r2,68(r4)
  806500:	400b883a 	mov	r5,r8
  806504:	40800115 	stw	r2,4(r8)
  806508:	20c01117 	ldw	r3,68(r4)
  80650c:	00800044 	movi	r2,1
  806510:	10c4983a 	sll	r2,r2,r3
  806514:	40800215 	stw	r2,8(r8)
  806518:	0808e640 	call	808e64 <_Bfree>
  80651c:	d8c01617 	ldw	r3,88(sp)
  806520:	18001015 	stw	zero,64(r3)
  806524:	8800a316 	blt	r17,zero,8067b4 <_dtoa_r+0x304>
  806528:	90000015 	stw	zero,0(r18)
  80652c:	a8dffc2c 	andhi	r3,r21,32752
  806530:	009ffc34 	movhi	r2,32752
  806534:	18809126 	beq	r3,r2,80677c <_dtoa_r+0x2cc>
  806538:	000d883a 	mov	r6,zero
  80653c:	000f883a 	mov	r7,zero
  806540:	a009883a 	mov	r4,r20
  806544:	a80b883a 	mov	r5,r21
  806548:	dd001215 	stw	r20,72(sp)
  80654c:	dd401315 	stw	r21,76(sp)
  806550:	080bedc0 	call	80bedc <__nedf2>
  806554:	1000171e 	bne	r2,zero,8065b4 <_dtoa_r+0x104>
  806558:	d9802717 	ldw	r6,156(sp)
  80655c:	00800044 	movi	r2,1
  806560:	30800015 	stw	r2,0(r6)
  806564:	d8802917 	ldw	r2,164(sp)
  806568:	10029b26 	beq	r2,zero,806fd8 <_dtoa_r+0xb28>
  80656c:	d9002917 	ldw	r4,164(sp)
  806570:	00802074 	movhi	r2,129
  806574:	108ddf44 	addi	r2,r2,14205
  806578:	10ffffc4 	addi	r3,r2,-1
  80657c:	20800015 	stw	r2,0(r4)
  806580:	1805883a 	mov	r2,r3
  806584:	dfc02517 	ldw	ra,148(sp)
  806588:	df002417 	ldw	fp,144(sp)
  80658c:	ddc02317 	ldw	r23,140(sp)
  806590:	dd802217 	ldw	r22,136(sp)
  806594:	dd402117 	ldw	r21,132(sp)
  806598:	dd002017 	ldw	r20,128(sp)
  80659c:	dcc01f17 	ldw	r19,124(sp)
  8065a0:	dc801e17 	ldw	r18,120(sp)
  8065a4:	dc401d17 	ldw	r17,116(sp)
  8065a8:	dc001c17 	ldw	r16,112(sp)
  8065ac:	dec02604 	addi	sp,sp,152
  8065b0:	f800283a 	ret
  8065b4:	d9001617 	ldw	r4,88(sp)
  8065b8:	d9401217 	ldw	r5,72(sp)
  8065bc:	d8800104 	addi	r2,sp,4
  8065c0:	a80d883a 	mov	r6,r21
  8065c4:	d9c00204 	addi	r7,sp,8
  8065c8:	d8800015 	stw	r2,0(sp)
  8065cc:	08094a00 	call	8094a0 <__d2b>
  8065d0:	d8800715 	stw	r2,28(sp)
  8065d4:	a804d53a 	srli	r2,r21,20
  8065d8:	1101ffcc 	andi	r4,r2,2047
  8065dc:	20008626 	beq	r4,zero,8067f8 <_dtoa_r+0x348>
  8065e0:	d8c01217 	ldw	r3,72(sp)
  8065e4:	00800434 	movhi	r2,16
  8065e8:	10bfffc4 	addi	r2,r2,-1
  8065ec:	ddc00117 	ldw	r23,4(sp)
  8065f0:	a884703a 	and	r2,r21,r2
  8065f4:	1811883a 	mov	r8,r3
  8065f8:	124ffc34 	orhi	r9,r2,16368
  8065fc:	25bf0044 	addi	r22,r4,-1023
  806600:	d8000815 	stw	zero,32(sp)
  806604:	0005883a 	mov	r2,zero
  806608:	00cffe34 	movhi	r3,16376
  80660c:	480b883a 	mov	r5,r9
  806610:	4009883a 	mov	r4,r8
  806614:	180f883a 	mov	r7,r3
  806618:	100d883a 	mov	r6,r2
  80661c:	08026ac0 	call	8026ac <__subdf3>
  806620:	0218dbf4 	movhi	r8,25455
  806624:	4210d844 	addi	r8,r8,17249
  806628:	024ff4f4 	movhi	r9,16339
  80662c:	4a61e9c4 	addi	r9,r9,-30809
  806630:	480f883a 	mov	r7,r9
  806634:	400d883a 	mov	r6,r8
  806638:	180b883a 	mov	r5,r3
  80663c:	1009883a 	mov	r4,r2
  806640:	08027a00 	call	8027a0 <__muldf3>
  806644:	0222d874 	movhi	r8,35681
  806648:	42322cc4 	addi	r8,r8,-14157
  80664c:	024ff1f4 	movhi	r9,16327
  806650:	4a628a04 	addi	r9,r9,-30168
  806654:	480f883a 	mov	r7,r9
  806658:	400d883a 	mov	r6,r8
  80665c:	180b883a 	mov	r5,r3
  806660:	1009883a 	mov	r4,r2
  806664:	080272c0 	call	80272c <__adddf3>
  806668:	b009883a 	mov	r4,r22
  80666c:	1021883a 	mov	r16,r2
  806670:	1823883a 	mov	r17,r3
  806674:	080c0740 	call	80c074 <__floatsidf>
  806678:	021427f4 	movhi	r8,20639
  80667c:	421e7ec4 	addi	r8,r8,31227
  806680:	024ff4f4 	movhi	r9,16339
  806684:	4a5104c4 	addi	r9,r9,17427
  806688:	480f883a 	mov	r7,r9
  80668c:	400d883a 	mov	r6,r8
  806690:	180b883a 	mov	r5,r3
  806694:	1009883a 	mov	r4,r2
  806698:	08027a00 	call	8027a0 <__muldf3>
  80669c:	180f883a 	mov	r7,r3
  8066a0:	880b883a 	mov	r5,r17
  8066a4:	100d883a 	mov	r6,r2
  8066a8:	8009883a 	mov	r4,r16
  8066ac:	080272c0 	call	80272c <__adddf3>
  8066b0:	1009883a 	mov	r4,r2
  8066b4:	180b883a 	mov	r5,r3
  8066b8:	1021883a 	mov	r16,r2
  8066bc:	1823883a 	mov	r17,r3
  8066c0:	0802bec0 	call	802bec <__fixdfsi>
  8066c4:	000d883a 	mov	r6,zero
  8066c8:	000f883a 	mov	r7,zero
  8066cc:	8009883a 	mov	r4,r16
  8066d0:	880b883a 	mov	r5,r17
  8066d4:	d8800d15 	stw	r2,52(sp)
  8066d8:	080bfec0 	call	80bfec <__ltdf2>
  8066dc:	10031716 	blt	r2,zero,80733c <_dtoa_r+0xe8c>
  8066e0:	d8c00d17 	ldw	r3,52(sp)
  8066e4:	00800584 	movi	r2,22
  8066e8:	10c1482e 	bgeu	r2,r3,806c0c <_dtoa_r+0x75c>
  8066ec:	01000044 	movi	r4,1
  8066f0:	d9000c15 	stw	r4,48(sp)
  8066f4:	bd85c83a 	sub	r2,r23,r22
  8066f8:	11bfffc4 	addi	r6,r2,-1
  8066fc:	30030b16 	blt	r6,zero,80732c <_dtoa_r+0xe7c>
  806700:	d9800a15 	stw	r6,40(sp)
  806704:	d8001115 	stw	zero,68(sp)
  806708:	d8c00d17 	ldw	r3,52(sp)
  80670c:	1802ff16 	blt	r3,zero,80730c <_dtoa_r+0xe5c>
  806710:	d9000a17 	ldw	r4,40(sp)
  806714:	d8c00915 	stw	r3,36(sp)
  806718:	d8001015 	stw	zero,64(sp)
  80671c:	20c9883a 	add	r4,r4,r3
  806720:	d9000a15 	stw	r4,40(sp)
  806724:	d9001717 	ldw	r4,92(sp)
  806728:	00800244 	movi	r2,9
  80672c:	11004636 	bltu	r2,r4,806848 <_dtoa_r+0x398>
  806730:	00800144 	movi	r2,5
  806734:	11020416 	blt	r2,r4,806f48 <_dtoa_r+0xa98>
  806738:	04400044 	movi	r17,1
  80673c:	d8c01717 	ldw	r3,92(sp)
  806740:	00800144 	movi	r2,5
  806744:	10c1ed36 	bltu	r2,r3,806efc <_dtoa_r+0xa4c>
  806748:	18c5883a 	add	r2,r3,r3
  80674c:	1085883a 	add	r2,r2,r2
  806750:	00c02034 	movhi	r3,128
  806754:	18d9d904 	addi	r3,r3,26468
  806758:	10c5883a 	add	r2,r2,r3
  80675c:	11000017 	ldw	r4,0(r2)
  806760:	2000683a 	jmp	r4
  806764:	00806850 	cmplti	r2,zero,417
  806768:	00806850 	cmplti	r2,zero,417
  80676c:	00807250 	cmplti	r2,zero,457
  806770:	00807228 	cmpgeui	r2,zero,456
  806774:	0080726c 	andhi	r2,zero,457
  806778:	00807278 	rdprs	r2,zero,457
  80677c:	d9002717 	ldw	r4,156(sp)
  806780:	0089c3c4 	movi	r2,9999
  806784:	20800015 	stw	r2,0(r4)
  806788:	a0001026 	beq	r20,zero,8067cc <_dtoa_r+0x31c>
  80678c:	00c02074 	movhi	r3,129
  806790:	18ceda04 	addi	r3,r3,15208
  806794:	d9802917 	ldw	r6,164(sp)
  806798:	303f7926 	beq	r6,zero,806580 <_dtoa_r+0xd0>
  80679c:	188000c7 	ldb	r2,3(r3)
  8067a0:	190000c4 	addi	r4,r3,3
  8067a4:	1000101e 	bne	r2,zero,8067e8 <_dtoa_r+0x338>
  8067a8:	d8802917 	ldw	r2,164(sp)
  8067ac:	11000015 	stw	r4,0(r2)
  8067b0:	003f7306 	br	806580 <_dtoa_r+0xd0>
  8067b4:	00a00034 	movhi	r2,32768
  8067b8:	10bfffc4 	addi	r2,r2,-1
  8067bc:	00c00044 	movi	r3,1
  8067c0:	88aa703a 	and	r21,r17,r2
  8067c4:	90c00015 	stw	r3,0(r18)
  8067c8:	003f5806 	br	80652c <_dtoa_r+0x7c>
  8067cc:	00800434 	movhi	r2,16
  8067d0:	10bfffc4 	addi	r2,r2,-1
  8067d4:	a884703a 	and	r2,r21,r2
  8067d8:	103fec1e 	bne	r2,zero,80678c <_dtoa_r+0x2dc>
  8067dc:	00c02074 	movhi	r3,129
  8067e0:	18ced704 	addi	r3,r3,15196
  8067e4:	003feb06 	br	806794 <_dtoa_r+0x2e4>
  8067e8:	d8802917 	ldw	r2,164(sp)
  8067ec:	19000204 	addi	r4,r3,8
  8067f0:	11000015 	stw	r4,0(r2)
  8067f4:	003f6206 	br	806580 <_dtoa_r+0xd0>
  8067f8:	ddc00117 	ldw	r23,4(sp)
  8067fc:	d8800217 	ldw	r2,8(sp)
  806800:	01000804 	movi	r4,32
  806804:	b8c10c84 	addi	r3,r23,1074
  806808:	18a3883a 	add	r17,r3,r2
  80680c:	2441b80e 	bge	r4,r17,806ef0 <_dtoa_r+0xa40>
  806810:	00c01004 	movi	r3,64
  806814:	1c47c83a 	sub	r3,r3,r17
  806818:	88bff804 	addi	r2,r17,-32
  80681c:	a8c6983a 	sll	r3,r21,r3
  806820:	a084d83a 	srl	r2,r20,r2
  806824:	1888b03a 	or	r4,r3,r2
  806828:	0802cc40 	call	802cc4 <__floatunsidf>
  80682c:	1011883a 	mov	r8,r2
  806830:	00bf8434 	movhi	r2,65040
  806834:	01000044 	movi	r4,1
  806838:	10d3883a 	add	r9,r2,r3
  80683c:	8dbef344 	addi	r22,r17,-1075
  806840:	d9000815 	stw	r4,32(sp)
  806844:	003f6f06 	br	806604 <_dtoa_r+0x154>
  806848:	d8001715 	stw	zero,92(sp)
  80684c:	04400044 	movi	r17,1
  806850:	00bfffc4 	movi	r2,-1
  806854:	00c00044 	movi	r3,1
  806858:	d8800e15 	stw	r2,56(sp)
  80685c:	d8002615 	stw	zero,152(sp)
  806860:	d8800f15 	stw	r2,60(sp)
  806864:	d8c00b15 	stw	r3,44(sp)
  806868:	1021883a 	mov	r16,r2
  80686c:	d8801617 	ldw	r2,88(sp)
  806870:	10001115 	stw	zero,68(r2)
  806874:	d8801617 	ldw	r2,88(sp)
  806878:	11401117 	ldw	r5,68(r2)
  80687c:	1009883a 	mov	r4,r2
  806880:	08093e40 	call	8093e4 <_Balloc>
  806884:	d8c01617 	ldw	r3,88(sp)
  806888:	d8800515 	stw	r2,20(sp)
  80688c:	18801015 	stw	r2,64(r3)
  806890:	00800384 	movi	r2,14
  806894:	14006836 	bltu	r2,r16,806a38 <_dtoa_r+0x588>
  806898:	8805003a 	cmpeq	r2,r17,zero
  80689c:	1000661e 	bne	r2,zero,806a38 <_dtoa_r+0x588>
  8068a0:	d9000d17 	ldw	r4,52(sp)
  8068a4:	0102300e 	bge	zero,r4,807168 <_dtoa_r+0xcb8>
  8068a8:	208003cc 	andi	r2,r4,15
  8068ac:	100490fa 	slli	r2,r2,3
  8068b0:	2025d13a 	srai	r18,r4,4
  8068b4:	00c02074 	movhi	r3,129
  8068b8:	18ceeb04 	addi	r3,r3,15276
  8068bc:	10c5883a 	add	r2,r2,r3
  8068c0:	90c0040c 	andi	r3,r18,16
  8068c4:	14000017 	ldw	r16,0(r2)
  8068c8:	14400117 	ldw	r17,4(r2)
  8068cc:	18036a1e 	bne	r3,zero,807678 <_dtoa_r+0x11c8>
  8068d0:	05800084 	movi	r22,2
  8068d4:	90001026 	beq	r18,zero,806918 <_dtoa_r+0x468>
  8068d8:	04c02074 	movhi	r19,129
  8068dc:	9ccf1d04 	addi	r19,r19,15476
  8068e0:	9080004c 	andi	r2,r18,1
  8068e4:	1005003a 	cmpeq	r2,r2,zero
  8068e8:	1000081e 	bne	r2,zero,80690c <_dtoa_r+0x45c>
  8068ec:	99800017 	ldw	r6,0(r19)
  8068f0:	99c00117 	ldw	r7,4(r19)
  8068f4:	880b883a 	mov	r5,r17
  8068f8:	8009883a 	mov	r4,r16
  8068fc:	08027a00 	call	8027a0 <__muldf3>
  806900:	1021883a 	mov	r16,r2
  806904:	b5800044 	addi	r22,r22,1
  806908:	1823883a 	mov	r17,r3
  80690c:	9025d07a 	srai	r18,r18,1
  806910:	9cc00204 	addi	r19,r19,8
  806914:	903ff21e 	bne	r18,zero,8068e0 <_dtoa_r+0x430>
  806918:	a80b883a 	mov	r5,r21
  80691c:	a009883a 	mov	r4,r20
  806920:	880f883a 	mov	r7,r17
  806924:	800d883a 	mov	r6,r16
  806928:	080bbfc0 	call	80bbfc <__divdf3>
  80692c:	1029883a 	mov	r20,r2
  806930:	182b883a 	mov	r21,r3
  806934:	d8c00c17 	ldw	r3,48(sp)
  806938:	1805003a 	cmpeq	r2,r3,zero
  80693c:	1000081e 	bne	r2,zero,806960 <_dtoa_r+0x4b0>
  806940:	0005883a 	mov	r2,zero
  806944:	00cffc34 	movhi	r3,16368
  806948:	180f883a 	mov	r7,r3
  80694c:	a009883a 	mov	r4,r20
  806950:	a80b883a 	mov	r5,r21
  806954:	100d883a 	mov	r6,r2
  806958:	080bfec0 	call	80bfec <__ltdf2>
  80695c:	1003fe16 	blt	r2,zero,807958 <_dtoa_r+0x14a8>
  806960:	b009883a 	mov	r4,r22
  806964:	080c0740 	call	80c074 <__floatsidf>
  806968:	180b883a 	mov	r5,r3
  80696c:	1009883a 	mov	r4,r2
  806970:	a00d883a 	mov	r6,r20
  806974:	a80f883a 	mov	r7,r21
  806978:	08027a00 	call	8027a0 <__muldf3>
  80697c:	0011883a 	mov	r8,zero
  806980:	02500734 	movhi	r9,16412
  806984:	1009883a 	mov	r4,r2
  806988:	180b883a 	mov	r5,r3
  80698c:	480f883a 	mov	r7,r9
  806990:	400d883a 	mov	r6,r8
  806994:	080272c0 	call	80272c <__adddf3>
  806998:	d9000f17 	ldw	r4,60(sp)
  80699c:	102d883a 	mov	r22,r2
  8069a0:	00bf3034 	movhi	r2,64704
  8069a4:	18b9883a 	add	fp,r3,r2
  8069a8:	e02f883a 	mov	r23,fp
  8069ac:	20028f1e 	bne	r4,zero,8073ec <_dtoa_r+0xf3c>
  8069b0:	0005883a 	mov	r2,zero
  8069b4:	00d00534 	movhi	r3,16404
  8069b8:	a009883a 	mov	r4,r20
  8069bc:	a80b883a 	mov	r5,r21
  8069c0:	180f883a 	mov	r7,r3
  8069c4:	100d883a 	mov	r6,r2
  8069c8:	08026ac0 	call	8026ac <__subdf3>
  8069cc:	1009883a 	mov	r4,r2
  8069d0:	e00f883a 	mov	r7,fp
  8069d4:	180b883a 	mov	r5,r3
  8069d8:	b00d883a 	mov	r6,r22
  8069dc:	1025883a 	mov	r18,r2
  8069e0:	1827883a 	mov	r19,r3
  8069e4:	0802b640 	call	802b64 <__gtdf2>
  8069e8:	00834f16 	blt	zero,r2,807728 <_dtoa_r+0x1278>
  8069ec:	e0e0003c 	xorhi	r3,fp,32768
  8069f0:	9009883a 	mov	r4,r18
  8069f4:	980b883a 	mov	r5,r19
  8069f8:	180f883a 	mov	r7,r3
  8069fc:	b00d883a 	mov	r6,r22
  806a00:	080bfec0 	call	80bfec <__ltdf2>
  806a04:	1000080e 	bge	r2,zero,806a28 <_dtoa_r+0x578>
  806a08:	0027883a 	mov	r19,zero
  806a0c:	0025883a 	mov	r18,zero
  806a10:	d8802617 	ldw	r2,152(sp)
  806a14:	df000517 	ldw	fp,20(sp)
  806a18:	d8000615 	stw	zero,24(sp)
  806a1c:	0084303a 	nor	r2,zero,r2
  806a20:	d8800d15 	stw	r2,52(sp)
  806a24:	00019b06 	br	807094 <_dtoa_r+0xbe4>
  806a28:	d9801217 	ldw	r6,72(sp)
  806a2c:	d8801317 	ldw	r2,76(sp)
  806a30:	3029883a 	mov	r20,r6
  806a34:	102b883a 	mov	r21,r2
  806a38:	d8c00217 	ldw	r3,8(sp)
  806a3c:	18008516 	blt	r3,zero,806c54 <_dtoa_r+0x7a4>
  806a40:	d9000d17 	ldw	r4,52(sp)
  806a44:	00800384 	movi	r2,14
  806a48:	11008216 	blt	r2,r4,806c54 <_dtoa_r+0x7a4>
  806a4c:	200490fa 	slli	r2,r4,3
  806a50:	d9802617 	ldw	r6,152(sp)
  806a54:	00c02074 	movhi	r3,129
  806a58:	18ceeb04 	addi	r3,r3,15276
  806a5c:	10c5883a 	add	r2,r2,r3
  806a60:	14800017 	ldw	r18,0(r2)
  806a64:	14c00117 	ldw	r19,4(r2)
  806a68:	30031e16 	blt	r6,zero,8076e4 <_dtoa_r+0x1234>
  806a6c:	d9000517 	ldw	r4,20(sp)
  806a70:	d8c00f17 	ldw	r3,60(sp)
  806a74:	a823883a 	mov	r17,r21
  806a78:	a021883a 	mov	r16,r20
  806a7c:	192b883a 	add	r21,r3,r4
  806a80:	2039883a 	mov	fp,r4
  806a84:	00000f06 	br	806ac4 <_dtoa_r+0x614>
  806a88:	0005883a 	mov	r2,zero
  806a8c:	00d00934 	movhi	r3,16420
  806a90:	5009883a 	mov	r4,r10
  806a94:	580b883a 	mov	r5,r11
  806a98:	180f883a 	mov	r7,r3
  806a9c:	100d883a 	mov	r6,r2
  806aa0:	08027a00 	call	8027a0 <__muldf3>
  806aa4:	180b883a 	mov	r5,r3
  806aa8:	000d883a 	mov	r6,zero
  806aac:	000f883a 	mov	r7,zero
  806ab0:	1009883a 	mov	r4,r2
  806ab4:	1021883a 	mov	r16,r2
  806ab8:	1823883a 	mov	r17,r3
  806abc:	080bedc0 	call	80bedc <__nedf2>
  806ac0:	10004526 	beq	r2,zero,806bd8 <_dtoa_r+0x728>
  806ac4:	900d883a 	mov	r6,r18
  806ac8:	980f883a 	mov	r7,r19
  806acc:	8009883a 	mov	r4,r16
  806ad0:	880b883a 	mov	r5,r17
  806ad4:	080bbfc0 	call	80bbfc <__divdf3>
  806ad8:	180b883a 	mov	r5,r3
  806adc:	1009883a 	mov	r4,r2
  806ae0:	0802bec0 	call	802bec <__fixdfsi>
  806ae4:	1009883a 	mov	r4,r2
  806ae8:	1029883a 	mov	r20,r2
  806aec:	080c0740 	call	80c074 <__floatsidf>
  806af0:	180f883a 	mov	r7,r3
  806af4:	9009883a 	mov	r4,r18
  806af8:	980b883a 	mov	r5,r19
  806afc:	100d883a 	mov	r6,r2
  806b00:	08027a00 	call	8027a0 <__muldf3>
  806b04:	180f883a 	mov	r7,r3
  806b08:	880b883a 	mov	r5,r17
  806b0c:	8009883a 	mov	r4,r16
  806b10:	100d883a 	mov	r6,r2
  806b14:	08026ac0 	call	8026ac <__subdf3>
  806b18:	1015883a 	mov	r10,r2
  806b1c:	a0800c04 	addi	r2,r20,48
  806b20:	e0800005 	stb	r2,0(fp)
  806b24:	e7000044 	addi	fp,fp,1
  806b28:	1817883a 	mov	r11,r3
  806b2c:	e57fd61e 	bne	fp,r21,806a88 <_dtoa_r+0x5d8>
  806b30:	500d883a 	mov	r6,r10
  806b34:	180f883a 	mov	r7,r3
  806b38:	5009883a 	mov	r4,r10
  806b3c:	180b883a 	mov	r5,r3
  806b40:	080272c0 	call	80272c <__adddf3>
  806b44:	100d883a 	mov	r6,r2
  806b48:	9009883a 	mov	r4,r18
  806b4c:	980b883a 	mov	r5,r19
  806b50:	180f883a 	mov	r7,r3
  806b54:	1021883a 	mov	r16,r2
  806b58:	1823883a 	mov	r17,r3
  806b5c:	080bfec0 	call	80bfec <__ltdf2>
  806b60:	10000816 	blt	r2,zero,806b84 <_dtoa_r+0x6d4>
  806b64:	980b883a 	mov	r5,r19
  806b68:	800d883a 	mov	r6,r16
  806b6c:	880f883a 	mov	r7,r17
  806b70:	9009883a 	mov	r4,r18
  806b74:	080be540 	call	80be54 <__eqdf2>
  806b78:	1000171e 	bne	r2,zero,806bd8 <_dtoa_r+0x728>
  806b7c:	a080004c 	andi	r2,r20,1
  806b80:	10001526 	beq	r2,zero,806bd8 <_dtoa_r+0x728>
  806b84:	d8800d17 	ldw	r2,52(sp)
  806b88:	d8800415 	stw	r2,16(sp)
  806b8c:	e009883a 	mov	r4,fp
  806b90:	213fffc4 	addi	r4,r4,-1
  806b94:	20c00007 	ldb	r3,0(r4)
  806b98:	00800e44 	movi	r2,57
  806b9c:	1880081e 	bne	r3,r2,806bc0 <_dtoa_r+0x710>
  806ba0:	d8800517 	ldw	r2,20(sp)
  806ba4:	113ffa1e 	bne	r2,r4,806b90 <_dtoa_r+0x6e0>
  806ba8:	d8c00417 	ldw	r3,16(sp)
  806bac:	d9800517 	ldw	r6,20(sp)
  806bb0:	00800c04 	movi	r2,48
  806bb4:	18c00044 	addi	r3,r3,1
  806bb8:	d8c00415 	stw	r3,16(sp)
  806bbc:	30800005 	stb	r2,0(r6)
  806bc0:	20800003 	ldbu	r2,0(r4)
  806bc4:	d8c00417 	ldw	r3,16(sp)
  806bc8:	27000044 	addi	fp,r4,1
  806bcc:	10800044 	addi	r2,r2,1
  806bd0:	d8c00d15 	stw	r3,52(sp)
  806bd4:	20800005 	stb	r2,0(r4)
  806bd8:	d9001617 	ldw	r4,88(sp)
  806bdc:	d9400717 	ldw	r5,28(sp)
  806be0:	0808e640 	call	808e64 <_Bfree>
  806be4:	e0000005 	stb	zero,0(fp)
  806be8:	d9800d17 	ldw	r6,52(sp)
  806bec:	d8c02717 	ldw	r3,156(sp)
  806bf0:	d9002917 	ldw	r4,164(sp)
  806bf4:	30800044 	addi	r2,r6,1
  806bf8:	18800015 	stw	r2,0(r3)
  806bfc:	20029c26 	beq	r4,zero,807670 <_dtoa_r+0x11c0>
  806c00:	d8c00517 	ldw	r3,20(sp)
  806c04:	27000015 	stw	fp,0(r4)
  806c08:	003e5d06 	br	806580 <_dtoa_r+0xd0>
  806c0c:	d9800d17 	ldw	r6,52(sp)
  806c10:	00c02074 	movhi	r3,129
  806c14:	18ceeb04 	addi	r3,r3,15276
  806c18:	d9001217 	ldw	r4,72(sp)
  806c1c:	300490fa 	slli	r2,r6,3
  806c20:	d9401317 	ldw	r5,76(sp)
  806c24:	10c5883a 	add	r2,r2,r3
  806c28:	12000017 	ldw	r8,0(r2)
  806c2c:	12400117 	ldw	r9,4(r2)
  806c30:	400d883a 	mov	r6,r8
  806c34:	480f883a 	mov	r7,r9
  806c38:	080bfec0 	call	80bfec <__ltdf2>
  806c3c:	1000030e 	bge	r2,zero,806c4c <_dtoa_r+0x79c>
  806c40:	d8800d17 	ldw	r2,52(sp)
  806c44:	10bfffc4 	addi	r2,r2,-1
  806c48:	d8800d15 	stw	r2,52(sp)
  806c4c:	d8000c15 	stw	zero,48(sp)
  806c50:	003ea806 	br	8066f4 <_dtoa_r+0x244>
  806c54:	d9000b17 	ldw	r4,44(sp)
  806c58:	202cc03a 	cmpne	r22,r4,zero
  806c5c:	b000c71e 	bne	r22,zero,806f7c <_dtoa_r+0xacc>
  806c60:	dc001117 	ldw	r16,68(sp)
  806c64:	dc801017 	ldw	r18,64(sp)
  806c68:	0027883a 	mov	r19,zero
  806c6c:	04000b0e 	bge	zero,r16,806c9c <_dtoa_r+0x7ec>
  806c70:	d8c00a17 	ldw	r3,40(sp)
  806c74:	00c0090e 	bge	zero,r3,806c9c <_dtoa_r+0x7ec>
  806c78:	8005883a 	mov	r2,r16
  806c7c:	1c011316 	blt	r3,r16,8070cc <_dtoa_r+0xc1c>
  806c80:	d9000a17 	ldw	r4,40(sp)
  806c84:	d9801117 	ldw	r6,68(sp)
  806c88:	80a1c83a 	sub	r16,r16,r2
  806c8c:	2089c83a 	sub	r4,r4,r2
  806c90:	308dc83a 	sub	r6,r6,r2
  806c94:	d9000a15 	stw	r4,40(sp)
  806c98:	d9801115 	stw	r6,68(sp)
  806c9c:	d8801017 	ldw	r2,64(sp)
  806ca0:	0080150e 	bge	zero,r2,806cf8 <_dtoa_r+0x848>
  806ca4:	d8c00b17 	ldw	r3,44(sp)
  806ca8:	1805003a 	cmpeq	r2,r3,zero
  806cac:	1001c91e 	bne	r2,zero,8073d4 <_dtoa_r+0xf24>
  806cb0:	04800e0e 	bge	zero,r18,806cec <_dtoa_r+0x83c>
  806cb4:	d9001617 	ldw	r4,88(sp)
  806cb8:	980b883a 	mov	r5,r19
  806cbc:	900d883a 	mov	r6,r18
  806cc0:	0809c180 	call	809c18 <__pow5mult>
  806cc4:	d9001617 	ldw	r4,88(sp)
  806cc8:	d9800717 	ldw	r6,28(sp)
  806ccc:	100b883a 	mov	r5,r2
  806cd0:	1027883a 	mov	r19,r2
  806cd4:	08098f40 	call	8098f4 <__multiply>
  806cd8:	d9001617 	ldw	r4,88(sp)
  806cdc:	d9400717 	ldw	r5,28(sp)
  806ce0:	1023883a 	mov	r17,r2
  806ce4:	0808e640 	call	808e64 <_Bfree>
  806ce8:	dc400715 	stw	r17,28(sp)
  806cec:	d9001017 	ldw	r4,64(sp)
  806cf0:	248dc83a 	sub	r6,r4,r18
  806cf4:	30010e1e 	bne	r6,zero,807130 <_dtoa_r+0xc80>
  806cf8:	d9001617 	ldw	r4,88(sp)
  806cfc:	04400044 	movi	r17,1
  806d00:	880b883a 	mov	r5,r17
  806d04:	0809adc0 	call	809adc <__i2b>
  806d08:	d9800917 	ldw	r6,36(sp)
  806d0c:	1025883a 	mov	r18,r2
  806d10:	0180040e 	bge	zero,r6,806d24 <_dtoa_r+0x874>
  806d14:	d9001617 	ldw	r4,88(sp)
  806d18:	100b883a 	mov	r5,r2
  806d1c:	0809c180 	call	809c18 <__pow5mult>
  806d20:	1025883a 	mov	r18,r2
  806d24:	d8801717 	ldw	r2,92(sp)
  806d28:	8880f30e 	bge	r17,r2,8070f8 <_dtoa_r+0xc48>
  806d2c:	0023883a 	mov	r17,zero
  806d30:	d9800917 	ldw	r6,36(sp)
  806d34:	30019e1e 	bne	r6,zero,8073b0 <_dtoa_r+0xf00>
  806d38:	00c00044 	movi	r3,1
  806d3c:	d9000a17 	ldw	r4,40(sp)
  806d40:	20c5883a 	add	r2,r4,r3
  806d44:	10c007cc 	andi	r3,r2,31
  806d48:	1800841e 	bne	r3,zero,806f5c <_dtoa_r+0xaac>
  806d4c:	00800704 	movi	r2,28
  806d50:	d9000a17 	ldw	r4,40(sp)
  806d54:	d9801117 	ldw	r6,68(sp)
  806d58:	80a1883a 	add	r16,r16,r2
  806d5c:	2089883a 	add	r4,r4,r2
  806d60:	308d883a 	add	r6,r6,r2
  806d64:	d9000a15 	stw	r4,40(sp)
  806d68:	d9801115 	stw	r6,68(sp)
  806d6c:	d8801117 	ldw	r2,68(sp)
  806d70:	0080050e 	bge	zero,r2,806d88 <_dtoa_r+0x8d8>
  806d74:	d9400717 	ldw	r5,28(sp)
  806d78:	d9001617 	ldw	r4,88(sp)
  806d7c:	100d883a 	mov	r6,r2
  806d80:	08097a80 	call	8097a8 <__lshift>
  806d84:	d8800715 	stw	r2,28(sp)
  806d88:	d8c00a17 	ldw	r3,40(sp)
  806d8c:	00c0050e 	bge	zero,r3,806da4 <_dtoa_r+0x8f4>
  806d90:	d9001617 	ldw	r4,88(sp)
  806d94:	900b883a 	mov	r5,r18
  806d98:	180d883a 	mov	r6,r3
  806d9c:	08097a80 	call	8097a8 <__lshift>
  806da0:	1025883a 	mov	r18,r2
  806da4:	d9000c17 	ldw	r4,48(sp)
  806da8:	2005003a 	cmpeq	r2,r4,zero
  806dac:	10016f26 	beq	r2,zero,80736c <_dtoa_r+0xebc>
  806db0:	d9000f17 	ldw	r4,60(sp)
  806db4:	0102170e 	bge	zero,r4,807614 <_dtoa_r+0x1164>
  806db8:	d9800b17 	ldw	r6,44(sp)
  806dbc:	3005003a 	cmpeq	r2,r6,zero
  806dc0:	1000881e 	bne	r2,zero,806fe4 <_dtoa_r+0xb34>
  806dc4:	0400050e 	bge	zero,r16,806ddc <_dtoa_r+0x92c>
  806dc8:	d9001617 	ldw	r4,88(sp)
  806dcc:	980b883a 	mov	r5,r19
  806dd0:	800d883a 	mov	r6,r16
  806dd4:	08097a80 	call	8097a8 <__lshift>
  806dd8:	1027883a 	mov	r19,r2
  806ddc:	8804c03a 	cmpne	r2,r17,zero
  806de0:	1002541e 	bne	r2,zero,807734 <_dtoa_r+0x1284>
  806de4:	980b883a 	mov	r5,r19
  806de8:	dd800517 	ldw	r22,20(sp)
  806dec:	dcc00615 	stw	r19,24(sp)
  806df0:	a700004c 	andi	fp,r20,1
  806df4:	2827883a 	mov	r19,r5
  806df8:	d9000717 	ldw	r4,28(sp)
  806dfc:	900b883a 	mov	r5,r18
  806e00:	08062980 	call	806298 <quorem>
  806e04:	d9000717 	ldw	r4,28(sp)
  806e08:	d9400617 	ldw	r5,24(sp)
  806e0c:	1023883a 	mov	r17,r2
  806e10:	8dc00c04 	addi	r23,r17,48
  806e14:	0808fc00 	call	808fc0 <__mcmp>
  806e18:	d9001617 	ldw	r4,88(sp)
  806e1c:	900b883a 	mov	r5,r18
  806e20:	980d883a 	mov	r6,r19
  806e24:	1029883a 	mov	r20,r2
  806e28:	080961c0 	call	80961c <__mdiff>
  806e2c:	102b883a 	mov	r21,r2
  806e30:	10800317 	ldw	r2,12(r2)
  806e34:	1001281e 	bne	r2,zero,8072d8 <_dtoa_r+0xe28>
  806e38:	d9000717 	ldw	r4,28(sp)
  806e3c:	a80b883a 	mov	r5,r21
  806e40:	0808fc00 	call	808fc0 <__mcmp>
  806e44:	d9001617 	ldw	r4,88(sp)
  806e48:	1021883a 	mov	r16,r2
  806e4c:	a80b883a 	mov	r5,r21
  806e50:	0808e640 	call	808e64 <_Bfree>
  806e54:	8000041e 	bne	r16,zero,806e68 <_dtoa_r+0x9b8>
  806e58:	d8801717 	ldw	r2,92(sp)
  806e5c:	1000021e 	bne	r2,zero,806e68 <_dtoa_r+0x9b8>
  806e60:	e004c03a 	cmpne	r2,fp,zero
  806e64:	10011726 	beq	r2,zero,8072c4 <_dtoa_r+0xe14>
  806e68:	a0010616 	blt	r20,zero,807284 <_dtoa_r+0xdd4>
  806e6c:	a000041e 	bne	r20,zero,806e80 <_dtoa_r+0x9d0>
  806e70:	d8c01717 	ldw	r3,92(sp)
  806e74:	1800021e 	bne	r3,zero,806e80 <_dtoa_r+0x9d0>
  806e78:	e004c03a 	cmpne	r2,fp,zero
  806e7c:	10010126 	beq	r2,zero,807284 <_dtoa_r+0xdd4>
  806e80:	04023d16 	blt	zero,r16,807778 <_dtoa_r+0x12c8>
  806e84:	b5c00005 	stb	r23,0(r22)
  806e88:	d9800517 	ldw	r6,20(sp)
  806e8c:	d9000f17 	ldw	r4,60(sp)
  806e90:	b5800044 	addi	r22,r22,1
  806e94:	3105883a 	add	r2,r6,r4
  806e98:	b0806526 	beq	r22,r2,807030 <_dtoa_r+0xb80>
  806e9c:	d9400717 	ldw	r5,28(sp)
  806ea0:	d9001617 	ldw	r4,88(sp)
  806ea4:	01800284 	movi	r6,10
  806ea8:	000f883a 	mov	r7,zero
  806eac:	0809b180 	call	809b18 <__multadd>
  806eb0:	d8800715 	stw	r2,28(sp)
  806eb4:	d8800617 	ldw	r2,24(sp)
  806eb8:	14c10c26 	beq	r2,r19,8072ec <_dtoa_r+0xe3c>
  806ebc:	d9400617 	ldw	r5,24(sp)
  806ec0:	d9001617 	ldw	r4,88(sp)
  806ec4:	01800284 	movi	r6,10
  806ec8:	000f883a 	mov	r7,zero
  806ecc:	0809b180 	call	809b18 <__multadd>
  806ed0:	d9001617 	ldw	r4,88(sp)
  806ed4:	980b883a 	mov	r5,r19
  806ed8:	01800284 	movi	r6,10
  806edc:	000f883a 	mov	r7,zero
  806ee0:	d8800615 	stw	r2,24(sp)
  806ee4:	0809b180 	call	809b18 <__multadd>
  806ee8:	1027883a 	mov	r19,r2
  806eec:	003fc206 	br	806df8 <_dtoa_r+0x948>
  806ef0:	2445c83a 	sub	r2,r4,r17
  806ef4:	a088983a 	sll	r4,r20,r2
  806ef8:	003e4b06 	br	806828 <_dtoa_r+0x378>
  806efc:	01bfffc4 	movi	r6,-1
  806f00:	00800044 	movi	r2,1
  806f04:	d9800e15 	stw	r6,56(sp)
  806f08:	d9800f15 	stw	r6,60(sp)
  806f0c:	d8800b15 	stw	r2,44(sp)
  806f10:	d8c01617 	ldw	r3,88(sp)
  806f14:	008005c4 	movi	r2,23
  806f18:	18001115 	stw	zero,68(r3)
  806f1c:	1580082e 	bgeu	r2,r22,806f40 <_dtoa_r+0xa90>
  806f20:	00c00104 	movi	r3,4
  806f24:	0009883a 	mov	r4,zero
  806f28:	18c7883a 	add	r3,r3,r3
  806f2c:	18800504 	addi	r2,r3,20
  806f30:	21000044 	addi	r4,r4,1
  806f34:	b0bffc2e 	bgeu	r22,r2,806f28 <_dtoa_r+0xa78>
  806f38:	d9801617 	ldw	r6,88(sp)
  806f3c:	31001115 	stw	r4,68(r6)
  806f40:	dc000f17 	ldw	r16,60(sp)
  806f44:	003e4b06 	br	806874 <_dtoa_r+0x3c4>
  806f48:	d9801717 	ldw	r6,92(sp)
  806f4c:	0023883a 	mov	r17,zero
  806f50:	31bfff04 	addi	r6,r6,-4
  806f54:	d9801715 	stw	r6,92(sp)
  806f58:	003df806 	br	80673c <_dtoa_r+0x28c>
  806f5c:	00800804 	movi	r2,32
  806f60:	10c9c83a 	sub	r4,r2,r3
  806f64:	00c00104 	movi	r3,4
  806f68:	19005a16 	blt	r3,r4,8070d4 <_dtoa_r+0xc24>
  806f6c:	008000c4 	movi	r2,3
  806f70:	113f7e16 	blt	r2,r4,806d6c <_dtoa_r+0x8bc>
  806f74:	20800704 	addi	r2,r4,28
  806f78:	003f7506 	br	806d50 <_dtoa_r+0x8a0>
  806f7c:	d9801717 	ldw	r6,92(sp)
  806f80:	00800044 	movi	r2,1
  806f84:	1180a10e 	bge	r2,r6,80720c <_dtoa_r+0xd5c>
  806f88:	d9800f17 	ldw	r6,60(sp)
  806f8c:	d8c01017 	ldw	r3,64(sp)
  806f90:	30bfffc4 	addi	r2,r6,-1
  806f94:	1881c616 	blt	r3,r2,8076b0 <_dtoa_r+0x1200>
  806f98:	18a5c83a 	sub	r18,r3,r2
  806f9c:	d8800f17 	ldw	r2,60(sp)
  806fa0:	10026216 	blt	r2,zero,80792c <_dtoa_r+0x147c>
  806fa4:	dc001117 	ldw	r16,68(sp)
  806fa8:	1007883a 	mov	r3,r2
  806fac:	d9800a17 	ldw	r6,40(sp)
  806fb0:	d8801117 	ldw	r2,68(sp)
  806fb4:	d9001617 	ldw	r4,88(sp)
  806fb8:	30cd883a 	add	r6,r6,r3
  806fbc:	10c5883a 	add	r2,r2,r3
  806fc0:	01400044 	movi	r5,1
  806fc4:	d9800a15 	stw	r6,40(sp)
  806fc8:	d8801115 	stw	r2,68(sp)
  806fcc:	0809adc0 	call	809adc <__i2b>
  806fd0:	1027883a 	mov	r19,r2
  806fd4:	003f2506 	br	806c6c <_dtoa_r+0x7bc>
  806fd8:	00c02074 	movhi	r3,129
  806fdc:	18cddf04 	addi	r3,r3,14204
  806fe0:	003d6706 	br	806580 <_dtoa_r+0xd0>
  806fe4:	dd800517 	ldw	r22,20(sp)
  806fe8:	04000044 	movi	r16,1
  806fec:	00000706 	br	80700c <_dtoa_r+0xb5c>
  806ff0:	d9400717 	ldw	r5,28(sp)
  806ff4:	d9001617 	ldw	r4,88(sp)
  806ff8:	01800284 	movi	r6,10
  806ffc:	000f883a 	mov	r7,zero
  807000:	0809b180 	call	809b18 <__multadd>
  807004:	d8800715 	stw	r2,28(sp)
  807008:	84000044 	addi	r16,r16,1
  80700c:	d9000717 	ldw	r4,28(sp)
  807010:	900b883a 	mov	r5,r18
  807014:	08062980 	call	806298 <quorem>
  807018:	15c00c04 	addi	r23,r2,48
  80701c:	b5c00005 	stb	r23,0(r22)
  807020:	d8c00f17 	ldw	r3,60(sp)
  807024:	b5800044 	addi	r22,r22,1
  807028:	80fff116 	blt	r16,r3,806ff0 <_dtoa_r+0xb40>
  80702c:	d8000615 	stw	zero,24(sp)
  807030:	d9400717 	ldw	r5,28(sp)
  807034:	d9001617 	ldw	r4,88(sp)
  807038:	01800044 	movi	r6,1
  80703c:	08097a80 	call	8097a8 <__lshift>
  807040:	1009883a 	mov	r4,r2
  807044:	900b883a 	mov	r5,r18
  807048:	d8800715 	stw	r2,28(sp)
  80704c:	0808fc00 	call	808fc0 <__mcmp>
  807050:	00803c0e 	bge	zero,r2,807144 <_dtoa_r+0xc94>
  807054:	b009883a 	mov	r4,r22
  807058:	213fffc4 	addi	r4,r4,-1
  80705c:	21400003 	ldbu	r5,0(r4)
  807060:	00800e44 	movi	r2,57
  807064:	28c03fcc 	andi	r3,r5,255
  807068:	18c0201c 	xori	r3,r3,128
  80706c:	18ffe004 	addi	r3,r3,-128
  807070:	1881981e 	bne	r3,r2,8076d4 <_dtoa_r+0x1224>
  807074:	d9800517 	ldw	r6,20(sp)
  807078:	21bff71e 	bne	r4,r6,807058 <_dtoa_r+0xba8>
  80707c:	d8800d17 	ldw	r2,52(sp)
  807080:	37000044 	addi	fp,r6,1
  807084:	10800044 	addi	r2,r2,1
  807088:	d8800d15 	stw	r2,52(sp)
  80708c:	00800c44 	movi	r2,49
  807090:	30800005 	stb	r2,0(r6)
  807094:	d9001617 	ldw	r4,88(sp)
  807098:	900b883a 	mov	r5,r18
  80709c:	0808e640 	call	808e64 <_Bfree>
  8070a0:	983ecd26 	beq	r19,zero,806bd8 <_dtoa_r+0x728>
  8070a4:	d8c00617 	ldw	r3,24(sp)
  8070a8:	18000426 	beq	r3,zero,8070bc <_dtoa_r+0xc0c>
  8070ac:	1cc00326 	beq	r3,r19,8070bc <_dtoa_r+0xc0c>
  8070b0:	d9001617 	ldw	r4,88(sp)
  8070b4:	180b883a 	mov	r5,r3
  8070b8:	0808e640 	call	808e64 <_Bfree>
  8070bc:	d9001617 	ldw	r4,88(sp)
  8070c0:	980b883a 	mov	r5,r19
  8070c4:	0808e640 	call	808e64 <_Bfree>
  8070c8:	003ec306 	br	806bd8 <_dtoa_r+0x728>
  8070cc:	1805883a 	mov	r2,r3
  8070d0:	003eeb06 	br	806c80 <_dtoa_r+0x7d0>
  8070d4:	d9800a17 	ldw	r6,40(sp)
  8070d8:	d8c01117 	ldw	r3,68(sp)
  8070dc:	20bfff04 	addi	r2,r4,-4
  8070e0:	308d883a 	add	r6,r6,r2
  8070e4:	1887883a 	add	r3,r3,r2
  8070e8:	80a1883a 	add	r16,r16,r2
  8070ec:	d9800a15 	stw	r6,40(sp)
  8070f0:	d8c01115 	stw	r3,68(sp)
  8070f4:	003f1d06 	br	806d6c <_dtoa_r+0x8bc>
  8070f8:	a03f0c1e 	bne	r20,zero,806d2c <_dtoa_r+0x87c>
  8070fc:	00800434 	movhi	r2,16
  807100:	10bfffc4 	addi	r2,r2,-1
  807104:	a884703a 	and	r2,r21,r2
  807108:	103f081e 	bne	r2,zero,806d2c <_dtoa_r+0x87c>
  80710c:	a89ffc2c 	andhi	r2,r21,32752
  807110:	103f0626 	beq	r2,zero,806d2c <_dtoa_r+0x87c>
  807114:	d8c01117 	ldw	r3,68(sp)
  807118:	d9000a17 	ldw	r4,40(sp)
  80711c:	18c00044 	addi	r3,r3,1
  807120:	21000044 	addi	r4,r4,1
  807124:	d8c01115 	stw	r3,68(sp)
  807128:	d9000a15 	stw	r4,40(sp)
  80712c:	003f0006 	br	806d30 <_dtoa_r+0x880>
  807130:	d9400717 	ldw	r5,28(sp)
  807134:	d9001617 	ldw	r4,88(sp)
  807138:	0809c180 	call	809c18 <__pow5mult>
  80713c:	d8800715 	stw	r2,28(sp)
  807140:	003eed06 	br	806cf8 <_dtoa_r+0x848>
  807144:	1000021e 	bne	r2,zero,807150 <_dtoa_r+0xca0>
  807148:	b880004c 	andi	r2,r23,1
  80714c:	103fc11e 	bne	r2,zero,807054 <_dtoa_r+0xba4>
  807150:	b5bfffc4 	addi	r22,r22,-1
  807154:	b0c00007 	ldb	r3,0(r22)
  807158:	00800c04 	movi	r2,48
  80715c:	18bffc26 	beq	r3,r2,807150 <_dtoa_r+0xca0>
  807160:	b7000044 	addi	fp,r22,1
  807164:	003fcb06 	br	807094 <_dtoa_r+0xbe4>
  807168:	d9800d17 	ldw	r6,52(sp)
  80716c:	018fc83a 	sub	r7,zero,r6
  807170:	3801f726 	beq	r7,zero,807950 <_dtoa_r+0x14a0>
  807174:	398003cc 	andi	r6,r7,15
  807178:	300c90fa 	slli	r6,r6,3
  80717c:	01402074 	movhi	r5,129
  807180:	294eeb04 	addi	r5,r5,15276
  807184:	d9001217 	ldw	r4,72(sp)
  807188:	314d883a 	add	r6,r6,r5
  80718c:	30c00117 	ldw	r3,4(r6)
  807190:	30800017 	ldw	r2,0(r6)
  807194:	d9401317 	ldw	r5,76(sp)
  807198:	3821d13a 	srai	r16,r7,4
  80719c:	100d883a 	mov	r6,r2
  8071a0:	180f883a 	mov	r7,r3
  8071a4:	08027a00 	call	8027a0 <__muldf3>
  8071a8:	1011883a 	mov	r8,r2
  8071ac:	1813883a 	mov	r9,r3
  8071b0:	1029883a 	mov	r20,r2
  8071b4:	182b883a 	mov	r21,r3
  8071b8:	8001e526 	beq	r16,zero,807950 <_dtoa_r+0x14a0>
  8071bc:	05800084 	movi	r22,2
  8071c0:	04402074 	movhi	r17,129
  8071c4:	8c4f1d04 	addi	r17,r17,15476
  8071c8:	8080004c 	andi	r2,r16,1
  8071cc:	1005003a 	cmpeq	r2,r2,zero
  8071d0:	1000081e 	bne	r2,zero,8071f4 <_dtoa_r+0xd44>
  8071d4:	89800017 	ldw	r6,0(r17)
  8071d8:	89c00117 	ldw	r7,4(r17)
  8071dc:	480b883a 	mov	r5,r9
  8071e0:	4009883a 	mov	r4,r8
  8071e4:	08027a00 	call	8027a0 <__muldf3>
  8071e8:	1011883a 	mov	r8,r2
  8071ec:	b5800044 	addi	r22,r22,1
  8071f0:	1813883a 	mov	r9,r3
  8071f4:	8021d07a 	srai	r16,r16,1
  8071f8:	8c400204 	addi	r17,r17,8
  8071fc:	803ff21e 	bne	r16,zero,8071c8 <_dtoa_r+0xd18>
  807200:	4029883a 	mov	r20,r8
  807204:	482b883a 	mov	r21,r9
  807208:	003dca06 	br	806934 <_dtoa_r+0x484>
  80720c:	d9000817 	ldw	r4,32(sp)
  807210:	2005003a 	cmpeq	r2,r4,zero
  807214:	1001f61e 	bne	r2,zero,8079f0 <_dtoa_r+0x1540>
  807218:	dc001117 	ldw	r16,68(sp)
  80721c:	dc801017 	ldw	r18,64(sp)
  807220:	18c10cc4 	addi	r3,r3,1075
  807224:	003f6106 	br	806fac <_dtoa_r+0xafc>
  807228:	d8000b15 	stw	zero,44(sp)
  80722c:	d9802617 	ldw	r6,152(sp)
  807230:	d8c00d17 	ldw	r3,52(sp)
  807234:	30800044 	addi	r2,r6,1
  807238:	18ad883a 	add	r22,r3,r2
  80723c:	b13fffc4 	addi	r4,r22,-1
  807240:	d9000e15 	stw	r4,56(sp)
  807244:	0581f60e 	bge	zero,r22,807a20 <_dtoa_r+0x1570>
  807248:	dd800f15 	stw	r22,60(sp)
  80724c:	003f3006 	br	806f10 <_dtoa_r+0xa60>
  807250:	d8000b15 	stw	zero,44(sp)
  807254:	d9002617 	ldw	r4,152(sp)
  807258:	0101eb0e 	bge	zero,r4,807a08 <_dtoa_r+0x1558>
  80725c:	202d883a 	mov	r22,r4
  807260:	d9000e15 	stw	r4,56(sp)
  807264:	d9000f15 	stw	r4,60(sp)
  807268:	003f2906 	br	806f10 <_dtoa_r+0xa60>
  80726c:	01800044 	movi	r6,1
  807270:	d9800b15 	stw	r6,44(sp)
  807274:	003ff706 	br	807254 <_dtoa_r+0xda4>
  807278:	01000044 	movi	r4,1
  80727c:	d9000b15 	stw	r4,44(sp)
  807280:	003fea06 	br	80722c <_dtoa_r+0xd7c>
  807284:	04000c0e 	bge	zero,r16,8072b8 <_dtoa_r+0xe08>
  807288:	d9400717 	ldw	r5,28(sp)
  80728c:	d9001617 	ldw	r4,88(sp)
  807290:	01800044 	movi	r6,1
  807294:	08097a80 	call	8097a8 <__lshift>
  807298:	1009883a 	mov	r4,r2
  80729c:	900b883a 	mov	r5,r18
  8072a0:	d8800715 	stw	r2,28(sp)
  8072a4:	0808fc00 	call	808fc0 <__mcmp>
  8072a8:	0081e00e 	bge	zero,r2,807a2c <_dtoa_r+0x157c>
  8072ac:	bdc00044 	addi	r23,r23,1
  8072b0:	00800e84 	movi	r2,58
  8072b4:	b881a226 	beq	r23,r2,807940 <_dtoa_r+0x1490>
  8072b8:	b7000044 	addi	fp,r22,1
  8072bc:	b5c00005 	stb	r23,0(r22)
  8072c0:	003f7406 	br	807094 <_dtoa_r+0xbe4>
  8072c4:	00800e44 	movi	r2,57
  8072c8:	b8819d26 	beq	r23,r2,807940 <_dtoa_r+0x1490>
  8072cc:	053ffa0e 	bge	zero,r20,8072b8 <_dtoa_r+0xe08>
  8072d0:	8dc00c44 	addi	r23,r17,49
  8072d4:	003ff806 	br	8072b8 <_dtoa_r+0xe08>
  8072d8:	d9001617 	ldw	r4,88(sp)
  8072dc:	a80b883a 	mov	r5,r21
  8072e0:	04000044 	movi	r16,1
  8072e4:	0808e640 	call	808e64 <_Bfree>
  8072e8:	003edf06 	br	806e68 <_dtoa_r+0x9b8>
  8072ec:	d9001617 	ldw	r4,88(sp)
  8072f0:	980b883a 	mov	r5,r19
  8072f4:	01800284 	movi	r6,10
  8072f8:	000f883a 	mov	r7,zero
  8072fc:	0809b180 	call	809b18 <__multadd>
  807300:	1027883a 	mov	r19,r2
  807304:	d8800615 	stw	r2,24(sp)
  807308:	003ebb06 	br	806df8 <_dtoa_r+0x948>
  80730c:	d9801117 	ldw	r6,68(sp)
  807310:	d8800d17 	ldw	r2,52(sp)
  807314:	d8000915 	stw	zero,36(sp)
  807318:	308dc83a 	sub	r6,r6,r2
  80731c:	0087c83a 	sub	r3,zero,r2
  807320:	d9801115 	stw	r6,68(sp)
  807324:	d8c01015 	stw	r3,64(sp)
  807328:	003cfe06 	br	806724 <_dtoa_r+0x274>
  80732c:	018dc83a 	sub	r6,zero,r6
  807330:	d9801115 	stw	r6,68(sp)
  807334:	d8000a15 	stw	zero,40(sp)
  807338:	003cf306 	br	806708 <_dtoa_r+0x258>
  80733c:	d9000d17 	ldw	r4,52(sp)
  807340:	080c0740 	call	80c074 <__floatsidf>
  807344:	880b883a 	mov	r5,r17
  807348:	8009883a 	mov	r4,r16
  80734c:	180f883a 	mov	r7,r3
  807350:	100d883a 	mov	r6,r2
  807354:	080bedc0 	call	80bedc <__nedf2>
  807358:	103ce126 	beq	r2,zero,8066e0 <_dtoa_r+0x230>
  80735c:	d9800d17 	ldw	r6,52(sp)
  807360:	31bfffc4 	addi	r6,r6,-1
  807364:	d9800d15 	stw	r6,52(sp)
  807368:	003cdd06 	br	8066e0 <_dtoa_r+0x230>
  80736c:	d9000717 	ldw	r4,28(sp)
  807370:	900b883a 	mov	r5,r18
  807374:	0808fc00 	call	808fc0 <__mcmp>
  807378:	103e8d0e 	bge	r2,zero,806db0 <_dtoa_r+0x900>
  80737c:	d9400717 	ldw	r5,28(sp)
  807380:	d9001617 	ldw	r4,88(sp)
  807384:	01800284 	movi	r6,10
  807388:	000f883a 	mov	r7,zero
  80738c:	0809b180 	call	809b18 <__multadd>
  807390:	d9800d17 	ldw	r6,52(sp)
  807394:	d8800715 	stw	r2,28(sp)
  807398:	31bfffc4 	addi	r6,r6,-1
  80739c:	d9800d15 	stw	r6,52(sp)
  8073a0:	b001a71e 	bne	r22,zero,807a40 <_dtoa_r+0x1590>
  8073a4:	d8800e17 	ldw	r2,56(sp)
  8073a8:	d8800f15 	stw	r2,60(sp)
  8073ac:	003e8006 	br	806db0 <_dtoa_r+0x900>
  8073b0:	90800417 	ldw	r2,16(r18)
  8073b4:	1085883a 	add	r2,r2,r2
  8073b8:	1085883a 	add	r2,r2,r2
  8073bc:	1485883a 	add	r2,r2,r18
  8073c0:	11000417 	ldw	r4,16(r2)
  8073c4:	0808e8c0 	call	808e8c <__hi0bits>
  8073c8:	00c00804 	movi	r3,32
  8073cc:	1887c83a 	sub	r3,r3,r2
  8073d0:	003e5a06 	br	806d3c <_dtoa_r+0x88c>
  8073d4:	d9400717 	ldw	r5,28(sp)
  8073d8:	d9801017 	ldw	r6,64(sp)
  8073dc:	d9001617 	ldw	r4,88(sp)
  8073e0:	0809c180 	call	809c18 <__pow5mult>
  8073e4:	d8800715 	stw	r2,28(sp)
  8073e8:	003e4306 	br	806cf8 <_dtoa_r+0x848>
  8073ec:	d9800f17 	ldw	r6,60(sp)
  8073f0:	d8800d17 	ldw	r2,52(sp)
  8073f4:	d9800315 	stw	r6,12(sp)
  8073f8:	d8800415 	stw	r2,16(sp)
  8073fc:	d8c00b17 	ldw	r3,44(sp)
  807400:	1805003a 	cmpeq	r2,r3,zero
  807404:	1000e21e 	bne	r2,zero,807790 <_dtoa_r+0x12e0>
  807408:	d9000317 	ldw	r4,12(sp)
  80740c:	0005883a 	mov	r2,zero
  807410:	00cff834 	movhi	r3,16352
  807414:	200c90fa 	slli	r6,r4,3
  807418:	01002074 	movhi	r4,129
  80741c:	210eeb04 	addi	r4,r4,15276
  807420:	180b883a 	mov	r5,r3
  807424:	310d883a 	add	r6,r6,r4
  807428:	327fff17 	ldw	r9,-4(r6)
  80742c:	323ffe17 	ldw	r8,-8(r6)
  807430:	1009883a 	mov	r4,r2
  807434:	480f883a 	mov	r7,r9
  807438:	400d883a 	mov	r6,r8
  80743c:	080bbfc0 	call	80bbfc <__divdf3>
  807440:	180b883a 	mov	r5,r3
  807444:	b00d883a 	mov	r6,r22
  807448:	b80f883a 	mov	r7,r23
  80744c:	1009883a 	mov	r4,r2
  807450:	08026ac0 	call	8026ac <__subdf3>
  807454:	a80b883a 	mov	r5,r21
  807458:	a009883a 	mov	r4,r20
  80745c:	d8c01915 	stw	r3,100(sp)
  807460:	d8801815 	stw	r2,96(sp)
  807464:	0802bec0 	call	802bec <__fixdfsi>
  807468:	1009883a 	mov	r4,r2
  80746c:	1027883a 	mov	r19,r2
  807470:	080c0740 	call	80c074 <__floatsidf>
  807474:	a80b883a 	mov	r5,r21
  807478:	a009883a 	mov	r4,r20
  80747c:	180f883a 	mov	r7,r3
  807480:	100d883a 	mov	r6,r2
  807484:	08026ac0 	call	8026ac <__subdf3>
  807488:	d9801817 	ldw	r6,96(sp)
  80748c:	1823883a 	mov	r17,r3
  807490:	d8801415 	stw	r2,80(sp)
  807494:	302d883a 	mov	r22,r6
  807498:	d9800517 	ldw	r6,20(sp)
  80749c:	9cc00c04 	addi	r19,r19,48
  8074a0:	dc401515 	stw	r17,84(sp)
  8074a4:	d8c01917 	ldw	r3,100(sp)
  8074a8:	34c00005 	stb	r19,0(r6)
  8074ac:	d8800517 	ldw	r2,20(sp)
  8074b0:	d9401917 	ldw	r5,100(sp)
  8074b4:	d9801417 	ldw	r6,80(sp)
  8074b8:	b009883a 	mov	r4,r22
  8074bc:	880f883a 	mov	r7,r17
  8074c0:	182f883a 	mov	r23,r3
  8074c4:	17000044 	addi	fp,r2,1
  8074c8:	0802b640 	call	802b64 <__gtdf2>
  8074cc:	00804e16 	blt	zero,r2,807608 <_dtoa_r+0x1158>
  8074d0:	d9801417 	ldw	r6,80(sp)
  8074d4:	0005883a 	mov	r2,zero
  8074d8:	00cffc34 	movhi	r3,16368
  8074dc:	180b883a 	mov	r5,r3
  8074e0:	880f883a 	mov	r7,r17
  8074e4:	1009883a 	mov	r4,r2
  8074e8:	08026ac0 	call	8026ac <__subdf3>
  8074ec:	d9401917 	ldw	r5,100(sp)
  8074f0:	180f883a 	mov	r7,r3
  8074f4:	b009883a 	mov	r4,r22
  8074f8:	100d883a 	mov	r6,r2
  8074fc:	0802b640 	call	802b64 <__gtdf2>
  807500:	00bda216 	blt	zero,r2,806b8c <_dtoa_r+0x6dc>
  807504:	d8c00317 	ldw	r3,12(sp)
  807508:	00800044 	movi	r2,1
  80750c:	10c01216 	blt	r2,r3,807558 <_dtoa_r+0x10a8>
  807510:	003d4506 	br	806a28 <_dtoa_r+0x578>
  807514:	d9801417 	ldw	r6,80(sp)
  807518:	0005883a 	mov	r2,zero
  80751c:	00cffc34 	movhi	r3,16368
  807520:	180b883a 	mov	r5,r3
  807524:	880f883a 	mov	r7,r17
  807528:	1009883a 	mov	r4,r2
  80752c:	08026ac0 	call	8026ac <__subdf3>
  807530:	d9c01b17 	ldw	r7,108(sp)
  807534:	180b883a 	mov	r5,r3
  807538:	1009883a 	mov	r4,r2
  80753c:	b00d883a 	mov	r6,r22
  807540:	080bfec0 	call	80bfec <__ltdf2>
  807544:	103d9116 	blt	r2,zero,806b8c <_dtoa_r+0x6dc>
  807548:	d9800517 	ldw	r6,20(sp)
  80754c:	d9000317 	ldw	r4,12(sp)
  807550:	3105883a 	add	r2,r6,r4
  807554:	e0bd3426 	beq	fp,r2,806a28 <_dtoa_r+0x578>
  807558:	04500934 	movhi	r17,16420
  80755c:	0021883a 	mov	r16,zero
  807560:	b80b883a 	mov	r5,r23
  807564:	b009883a 	mov	r4,r22
  807568:	800d883a 	mov	r6,r16
  80756c:	880f883a 	mov	r7,r17
  807570:	08027a00 	call	8027a0 <__muldf3>
  807574:	d9401517 	ldw	r5,84(sp)
  807578:	d9001417 	ldw	r4,80(sp)
  80757c:	880f883a 	mov	r7,r17
  807580:	000d883a 	mov	r6,zero
  807584:	d8801a15 	stw	r2,104(sp)
  807588:	d8c01b15 	stw	r3,108(sp)
  80758c:	08027a00 	call	8027a0 <__muldf3>
  807590:	180b883a 	mov	r5,r3
  807594:	1009883a 	mov	r4,r2
  807598:	1823883a 	mov	r17,r3
  80759c:	1021883a 	mov	r16,r2
  8075a0:	0802bec0 	call	802bec <__fixdfsi>
  8075a4:	1009883a 	mov	r4,r2
  8075a8:	102b883a 	mov	r21,r2
  8075ac:	080c0740 	call	80c074 <__floatsidf>
  8075b0:	880b883a 	mov	r5,r17
  8075b4:	8009883a 	mov	r4,r16
  8075b8:	180f883a 	mov	r7,r3
  8075bc:	100d883a 	mov	r6,r2
  8075c0:	08026ac0 	call	8026ac <__subdf3>
  8075c4:	1021883a 	mov	r16,r2
  8075c8:	d9001b17 	ldw	r4,108(sp)
  8075cc:	1823883a 	mov	r17,r3
  8075d0:	dc001415 	stw	r16,80(sp)
  8075d4:	ad400c04 	addi	r21,r21,48
  8075d8:	dc401515 	stw	r17,84(sp)
  8075dc:	d8801a17 	ldw	r2,104(sp)
  8075e0:	e5400005 	stb	r21,0(fp)
  8075e4:	202f883a 	mov	r23,r4
  8075e8:	d9c01b17 	ldw	r7,108(sp)
  8075ec:	d9001417 	ldw	r4,80(sp)
  8075f0:	880b883a 	mov	r5,r17
  8075f4:	100d883a 	mov	r6,r2
  8075f8:	102d883a 	mov	r22,r2
  8075fc:	e7000044 	addi	fp,fp,1
  807600:	080bfec0 	call	80bfec <__ltdf2>
  807604:	103fc30e 	bge	r2,zero,807514 <_dtoa_r+0x1064>
  807608:	d9000417 	ldw	r4,16(sp)
  80760c:	d9000d15 	stw	r4,52(sp)
  807610:	003d7106 	br	806bd8 <_dtoa_r+0x728>
  807614:	d9801717 	ldw	r6,92(sp)
  807618:	00800084 	movi	r2,2
  80761c:	11bde60e 	bge	r2,r6,806db8 <_dtoa_r+0x908>
  807620:	203cfb1e 	bne	r4,zero,806a10 <_dtoa_r+0x560>
  807624:	d9001617 	ldw	r4,88(sp)
  807628:	900b883a 	mov	r5,r18
  80762c:	01800144 	movi	r6,5
  807630:	000f883a 	mov	r7,zero
  807634:	0809b180 	call	809b18 <__multadd>
  807638:	d9000717 	ldw	r4,28(sp)
  80763c:	100b883a 	mov	r5,r2
  807640:	1025883a 	mov	r18,r2
  807644:	0808fc00 	call	808fc0 <__mcmp>
  807648:	00bcf10e 	bge	zero,r2,806a10 <_dtoa_r+0x560>
  80764c:	d8c00d17 	ldw	r3,52(sp)
  807650:	d9000517 	ldw	r4,20(sp)
  807654:	d8000615 	stw	zero,24(sp)
  807658:	18c00044 	addi	r3,r3,1
  80765c:	d8c00d15 	stw	r3,52(sp)
  807660:	00800c44 	movi	r2,49
  807664:	27000044 	addi	fp,r4,1
  807668:	20800005 	stb	r2,0(r4)
  80766c:	003e8906 	br	807094 <_dtoa_r+0xbe4>
  807670:	d8c00517 	ldw	r3,20(sp)
  807674:	003bc206 	br	806580 <_dtoa_r+0xd0>
  807678:	01802074 	movhi	r6,129
  80767c:	318f1d04 	addi	r6,r6,15476
  807680:	30c00917 	ldw	r3,36(r6)
  807684:	30800817 	ldw	r2,32(r6)
  807688:	d9001217 	ldw	r4,72(sp)
  80768c:	d9401317 	ldw	r5,76(sp)
  807690:	180f883a 	mov	r7,r3
  807694:	100d883a 	mov	r6,r2
  807698:	080bbfc0 	call	80bbfc <__divdf3>
  80769c:	948003cc 	andi	r18,r18,15
  8076a0:	058000c4 	movi	r22,3
  8076a4:	1029883a 	mov	r20,r2
  8076a8:	182b883a 	mov	r21,r3
  8076ac:	003c8906 	br	8068d4 <_dtoa_r+0x424>
  8076b0:	d9001017 	ldw	r4,64(sp)
  8076b4:	d9800917 	ldw	r6,36(sp)
  8076b8:	0025883a 	mov	r18,zero
  8076bc:	1105c83a 	sub	r2,r2,r4
  8076c0:	2089883a 	add	r4,r4,r2
  8076c4:	308d883a 	add	r6,r6,r2
  8076c8:	d9001015 	stw	r4,64(sp)
  8076cc:	d9800915 	stw	r6,36(sp)
  8076d0:	003e3206 	br	806f9c <_dtoa_r+0xaec>
  8076d4:	28800044 	addi	r2,r5,1
  8076d8:	27000044 	addi	fp,r4,1
  8076dc:	20800005 	stb	r2,0(r4)
  8076e0:	003e6c06 	br	807094 <_dtoa_r+0xbe4>
  8076e4:	d8800f17 	ldw	r2,60(sp)
  8076e8:	00bce016 	blt	zero,r2,806a6c <_dtoa_r+0x5bc>
  8076ec:	d9800f17 	ldw	r6,60(sp)
  8076f0:	303cc51e 	bne	r6,zero,806a08 <_dtoa_r+0x558>
  8076f4:	0005883a 	mov	r2,zero
  8076f8:	00d00534 	movhi	r3,16404
  8076fc:	980b883a 	mov	r5,r19
  807700:	180f883a 	mov	r7,r3
  807704:	9009883a 	mov	r4,r18
  807708:	100d883a 	mov	r6,r2
  80770c:	08027a00 	call	8027a0 <__muldf3>
  807710:	180b883a 	mov	r5,r3
  807714:	a80f883a 	mov	r7,r21
  807718:	1009883a 	mov	r4,r2
  80771c:	a00d883a 	mov	r6,r20
  807720:	080bf640 	call	80bf64 <__gedf2>
  807724:	103cb80e 	bge	r2,zero,806a08 <_dtoa_r+0x558>
  807728:	0027883a 	mov	r19,zero
  80772c:	0025883a 	mov	r18,zero
  807730:	003fc606 	br	80764c <_dtoa_r+0x119c>
  807734:	99400117 	ldw	r5,4(r19)
  807738:	d9001617 	ldw	r4,88(sp)
  80773c:	08093e40 	call	8093e4 <_Balloc>
  807740:	99800417 	ldw	r6,16(r19)
  807744:	11000304 	addi	r4,r2,12
  807748:	99400304 	addi	r5,r19,12
  80774c:	318d883a 	add	r6,r6,r6
  807750:	318d883a 	add	r6,r6,r6
  807754:	31800204 	addi	r6,r6,8
  807758:	1023883a 	mov	r17,r2
  80775c:	0803d4c0 	call	803d4c <memcpy>
  807760:	d9001617 	ldw	r4,88(sp)
  807764:	880b883a 	mov	r5,r17
  807768:	01800044 	movi	r6,1
  80776c:	08097a80 	call	8097a8 <__lshift>
  807770:	100b883a 	mov	r5,r2
  807774:	003d9c06 	br	806de8 <_dtoa_r+0x938>
  807778:	00800e44 	movi	r2,57
  80777c:	b8807026 	beq	r23,r2,807940 <_dtoa_r+0x1490>
  807780:	b8800044 	addi	r2,r23,1
  807784:	b7000044 	addi	fp,r22,1
  807788:	b0800005 	stb	r2,0(r22)
  80778c:	003e4106 	br	807094 <_dtoa_r+0xbe4>
  807790:	d8800317 	ldw	r2,12(sp)
  807794:	01802074 	movhi	r6,129
  807798:	318eeb04 	addi	r6,r6,15276
  80779c:	b009883a 	mov	r4,r22
  8077a0:	100e90fa 	slli	r7,r2,3
  8077a4:	b80b883a 	mov	r5,r23
  8077a8:	398f883a 	add	r7,r7,r6
  8077ac:	38bffe17 	ldw	r2,-8(r7)
  8077b0:	d9800517 	ldw	r6,20(sp)
  8077b4:	38ffff17 	ldw	r3,-4(r7)
  8077b8:	37000044 	addi	fp,r6,1
  8077bc:	180f883a 	mov	r7,r3
  8077c0:	100d883a 	mov	r6,r2
  8077c4:	08027a00 	call	8027a0 <__muldf3>
  8077c8:	a80b883a 	mov	r5,r21
  8077cc:	a009883a 	mov	r4,r20
  8077d0:	182f883a 	mov	r23,r3
  8077d4:	102d883a 	mov	r22,r2
  8077d8:	0802bec0 	call	802bec <__fixdfsi>
  8077dc:	1009883a 	mov	r4,r2
  8077e0:	1027883a 	mov	r19,r2
  8077e4:	080c0740 	call	80c074 <__floatsidf>
  8077e8:	a80b883a 	mov	r5,r21
  8077ec:	a009883a 	mov	r4,r20
  8077f0:	180f883a 	mov	r7,r3
  8077f4:	100d883a 	mov	r6,r2
  8077f8:	08026ac0 	call	8026ac <__subdf3>
  8077fc:	180b883a 	mov	r5,r3
  807800:	d8c00517 	ldw	r3,20(sp)
  807804:	9cc00c04 	addi	r19,r19,48
  807808:	1009883a 	mov	r4,r2
  80780c:	1cc00005 	stb	r19,0(r3)
  807810:	2021883a 	mov	r16,r4
  807814:	d9000317 	ldw	r4,12(sp)
  807818:	00800044 	movi	r2,1
  80781c:	2823883a 	mov	r17,r5
  807820:	20802226 	beq	r4,r2,8078ac <_dtoa_r+0x13fc>
  807824:	1029883a 	mov	r20,r2
  807828:	0005883a 	mov	r2,zero
  80782c:	00d00934 	movhi	r3,16420
  807830:	180f883a 	mov	r7,r3
  807834:	100d883a 	mov	r6,r2
  807838:	880b883a 	mov	r5,r17
  80783c:	8009883a 	mov	r4,r16
  807840:	08027a00 	call	8027a0 <__muldf3>
  807844:	180b883a 	mov	r5,r3
  807848:	1009883a 	mov	r4,r2
  80784c:	1823883a 	mov	r17,r3
  807850:	1021883a 	mov	r16,r2
  807854:	0802bec0 	call	802bec <__fixdfsi>
  807858:	1009883a 	mov	r4,r2
  80785c:	102b883a 	mov	r21,r2
  807860:	080c0740 	call	80c074 <__floatsidf>
  807864:	880b883a 	mov	r5,r17
  807868:	8009883a 	mov	r4,r16
  80786c:	180f883a 	mov	r7,r3
  807870:	100d883a 	mov	r6,r2
  807874:	08026ac0 	call	8026ac <__subdf3>
  807878:	180b883a 	mov	r5,r3
  80787c:	d8c00517 	ldw	r3,20(sp)
  807880:	1009883a 	mov	r4,r2
  807884:	ad400c04 	addi	r21,r21,48
  807888:	1d05883a 	add	r2,r3,r20
  80788c:	15400005 	stb	r21,0(r2)
  807890:	2021883a 	mov	r16,r4
  807894:	d9000317 	ldw	r4,12(sp)
  807898:	a5000044 	addi	r20,r20,1
  80789c:	2823883a 	mov	r17,r5
  8078a0:	a13fe11e 	bne	r20,r4,807828 <_dtoa_r+0x1378>
  8078a4:	e505883a 	add	r2,fp,r20
  8078a8:	173fffc4 	addi	fp,r2,-1
  8078ac:	0025883a 	mov	r18,zero
  8078b0:	04cff834 	movhi	r19,16352
  8078b4:	b009883a 	mov	r4,r22
  8078b8:	b80b883a 	mov	r5,r23
  8078bc:	900d883a 	mov	r6,r18
  8078c0:	980f883a 	mov	r7,r19
  8078c4:	080272c0 	call	80272c <__adddf3>
  8078c8:	180b883a 	mov	r5,r3
  8078cc:	1009883a 	mov	r4,r2
  8078d0:	800d883a 	mov	r6,r16
  8078d4:	880f883a 	mov	r7,r17
  8078d8:	080bfec0 	call	80bfec <__ltdf2>
  8078dc:	103cab16 	blt	r2,zero,806b8c <_dtoa_r+0x6dc>
  8078e0:	0009883a 	mov	r4,zero
  8078e4:	980b883a 	mov	r5,r19
  8078e8:	b80f883a 	mov	r7,r23
  8078ec:	b00d883a 	mov	r6,r22
  8078f0:	08026ac0 	call	8026ac <__subdf3>
  8078f4:	180b883a 	mov	r5,r3
  8078f8:	880f883a 	mov	r7,r17
  8078fc:	1009883a 	mov	r4,r2
  807900:	800d883a 	mov	r6,r16
  807904:	0802b640 	call	802b64 <__gtdf2>
  807908:	00bc470e 	bge	zero,r2,806a28 <_dtoa_r+0x578>
  80790c:	00c00c04 	movi	r3,48
  807910:	e73fffc4 	addi	fp,fp,-1
  807914:	e0800007 	ldb	r2,0(fp)
  807918:	10fffd26 	beq	r2,r3,807910 <_dtoa_r+0x1460>
  80791c:	d9800417 	ldw	r6,16(sp)
  807920:	e7000044 	addi	fp,fp,1
  807924:	d9800d15 	stw	r6,52(sp)
  807928:	003cab06 	br	806bd8 <_dtoa_r+0x728>
  80792c:	d8c00f17 	ldw	r3,60(sp)
  807930:	d9001117 	ldw	r4,68(sp)
  807934:	20e1c83a 	sub	r16,r4,r3
  807938:	0007883a 	mov	r3,zero
  80793c:	003d9b06 	br	806fac <_dtoa_r+0xafc>
  807940:	00800e44 	movi	r2,57
  807944:	b0800005 	stb	r2,0(r22)
  807948:	b5800044 	addi	r22,r22,1
  80794c:	003dc106 	br	807054 <_dtoa_r+0xba4>
  807950:	05800084 	movi	r22,2
  807954:	003bf706 	br	806934 <_dtoa_r+0x484>
  807958:	d9000f17 	ldw	r4,60(sp)
  80795c:	013c000e 	bge	zero,r4,806960 <_dtoa_r+0x4b0>
  807960:	d9800e17 	ldw	r6,56(sp)
  807964:	01bc300e 	bge	zero,r6,806a28 <_dtoa_r+0x578>
  807968:	0005883a 	mov	r2,zero
  80796c:	00d00934 	movhi	r3,16420
  807970:	a80b883a 	mov	r5,r21
  807974:	180f883a 	mov	r7,r3
  807978:	a009883a 	mov	r4,r20
  80797c:	100d883a 	mov	r6,r2
  807980:	08027a00 	call	8027a0 <__muldf3>
  807984:	b1000044 	addi	r4,r22,1
  807988:	1021883a 	mov	r16,r2
  80798c:	1823883a 	mov	r17,r3
  807990:	080c0740 	call	80c074 <__floatsidf>
  807994:	880b883a 	mov	r5,r17
  807998:	8009883a 	mov	r4,r16
  80799c:	180f883a 	mov	r7,r3
  8079a0:	100d883a 	mov	r6,r2
  8079a4:	08027a00 	call	8027a0 <__muldf3>
  8079a8:	0011883a 	mov	r8,zero
  8079ac:	02500734 	movhi	r9,16412
  8079b0:	180b883a 	mov	r5,r3
  8079b4:	480f883a 	mov	r7,r9
  8079b8:	1009883a 	mov	r4,r2
  8079bc:	400d883a 	mov	r6,r8
  8079c0:	080272c0 	call	80272c <__adddf3>
  8079c4:	102d883a 	mov	r22,r2
  8079c8:	00bf3034 	movhi	r2,64704
  8079cc:	10ef883a 	add	r23,r2,r3
  8079d0:	d8800d17 	ldw	r2,52(sp)
  8079d4:	d8c00e17 	ldw	r3,56(sp)
  8079d8:	8029883a 	mov	r20,r16
  8079dc:	10bfffc4 	addi	r2,r2,-1
  8079e0:	882b883a 	mov	r21,r17
  8079e4:	d8800415 	stw	r2,16(sp)
  8079e8:	d8c00315 	stw	r3,12(sp)
  8079ec:	003e8306 	br	8073fc <_dtoa_r+0xf4c>
  8079f0:	d8800117 	ldw	r2,4(sp)
  8079f4:	dc001117 	ldw	r16,68(sp)
  8079f8:	dc801017 	ldw	r18,64(sp)
  8079fc:	00c00d84 	movi	r3,54
  807a00:	1887c83a 	sub	r3,r3,r2
  807a04:	003d6906 	br	806fac <_dtoa_r+0xafc>
  807a08:	01800044 	movi	r6,1
  807a0c:	3021883a 	mov	r16,r6
  807a10:	d9800f15 	stw	r6,60(sp)
  807a14:	d9802615 	stw	r6,152(sp)
  807a18:	d9800e15 	stw	r6,56(sp)
  807a1c:	003b9306 	br	80686c <_dtoa_r+0x3bc>
  807a20:	b021883a 	mov	r16,r22
  807a24:	dd800f15 	stw	r22,60(sp)
  807a28:	003b9006 	br	80686c <_dtoa_r+0x3bc>
  807a2c:	103e221e 	bne	r2,zero,8072b8 <_dtoa_r+0xe08>
  807a30:	b880004c 	andi	r2,r23,1
  807a34:	1005003a 	cmpeq	r2,r2,zero
  807a38:	103e1f1e 	bne	r2,zero,8072b8 <_dtoa_r+0xe08>
  807a3c:	003e1b06 	br	8072ac <_dtoa_r+0xdfc>
  807a40:	d9001617 	ldw	r4,88(sp)
  807a44:	980b883a 	mov	r5,r19
  807a48:	01800284 	movi	r6,10
  807a4c:	000f883a 	mov	r7,zero
  807a50:	0809b180 	call	809b18 <__multadd>
  807a54:	d8c00e17 	ldw	r3,56(sp)
  807a58:	1027883a 	mov	r19,r2
  807a5c:	d8c00f15 	stw	r3,60(sp)
  807a60:	003cd306 	br	806db0 <_dtoa_r+0x900>

00807a64 <_fflush_r>:
  807a64:	defffb04 	addi	sp,sp,-20
  807a68:	dcc00315 	stw	r19,12(sp)
  807a6c:	dc800215 	stw	r18,8(sp)
  807a70:	dfc00415 	stw	ra,16(sp)
  807a74:	dc400115 	stw	r17,4(sp)
  807a78:	dc000015 	stw	r16,0(sp)
  807a7c:	2027883a 	mov	r19,r4
  807a80:	2825883a 	mov	r18,r5
  807a84:	20000226 	beq	r4,zero,807a90 <_fflush_r+0x2c>
  807a88:	20800e17 	ldw	r2,56(r4)
  807a8c:	10005626 	beq	r2,zero,807be8 <_fflush_r+0x184>
  807a90:	9100030b 	ldhu	r4,12(r18)
  807a94:	20ffffcc 	andi	r3,r4,65535
  807a98:	18e0001c 	xori	r3,r3,32768
  807a9c:	18e00004 	addi	r3,r3,-32768
  807aa0:	1880020c 	andi	r2,r3,8
  807aa4:	1000261e 	bne	r2,zero,807b40 <_fflush_r+0xdc>
  807aa8:	90c00117 	ldw	r3,4(r18)
  807aac:	20820014 	ori	r2,r4,2048
  807ab0:	9080030d 	sth	r2,12(r18)
  807ab4:	1009883a 	mov	r4,r2
  807ab8:	00c0400e 	bge	zero,r3,807bbc <_fflush_r+0x158>
  807abc:	92000a17 	ldw	r8,40(r18)
  807ac0:	40004026 	beq	r8,zero,807bc4 <_fflush_r+0x160>
  807ac4:	2084000c 	andi	r2,r4,4096
  807ac8:	10005326 	beq	r2,zero,807c18 <_fflush_r+0x1b4>
  807acc:	94001417 	ldw	r16,80(r18)
  807ad0:	9080030b 	ldhu	r2,12(r18)
  807ad4:	1080010c 	andi	r2,r2,4
  807ad8:	1000481e 	bne	r2,zero,807bfc <_fflush_r+0x198>
  807adc:	91400717 	ldw	r5,28(r18)
  807ae0:	9809883a 	mov	r4,r19
  807ae4:	800d883a 	mov	r6,r16
  807ae8:	000f883a 	mov	r7,zero
  807aec:	403ee83a 	callr	r8
  807af0:	8080261e 	bne	r16,r2,807b8c <_fflush_r+0x128>
  807af4:	9080030b 	ldhu	r2,12(r18)
  807af8:	91000417 	ldw	r4,16(r18)
  807afc:	90000115 	stw	zero,4(r18)
  807b00:	10bdffcc 	andi	r2,r2,63487
  807b04:	10ffffcc 	andi	r3,r2,65535
  807b08:	18c4000c 	andi	r3,r3,4096
  807b0c:	9080030d 	sth	r2,12(r18)
  807b10:	91000015 	stw	r4,0(r18)
  807b14:	18002b26 	beq	r3,zero,807bc4 <_fflush_r+0x160>
  807b18:	0007883a 	mov	r3,zero
  807b1c:	1805883a 	mov	r2,r3
  807b20:	94001415 	stw	r16,80(r18)
  807b24:	dfc00417 	ldw	ra,16(sp)
  807b28:	dcc00317 	ldw	r19,12(sp)
  807b2c:	dc800217 	ldw	r18,8(sp)
  807b30:	dc400117 	ldw	r17,4(sp)
  807b34:	dc000017 	ldw	r16,0(sp)
  807b38:	dec00504 	addi	sp,sp,20
  807b3c:	f800283a 	ret
  807b40:	94400417 	ldw	r17,16(r18)
  807b44:	88001f26 	beq	r17,zero,807bc4 <_fflush_r+0x160>
  807b48:	90800017 	ldw	r2,0(r18)
  807b4c:	18c000cc 	andi	r3,r3,3
  807b50:	94400015 	stw	r17,0(r18)
  807b54:	1461c83a 	sub	r16,r2,r17
  807b58:	18002526 	beq	r3,zero,807bf0 <_fflush_r+0x18c>
  807b5c:	0005883a 	mov	r2,zero
  807b60:	90800215 	stw	r2,8(r18)
  807b64:	0400170e 	bge	zero,r16,807bc4 <_fflush_r+0x160>
  807b68:	90c00917 	ldw	r3,36(r18)
  807b6c:	91400717 	ldw	r5,28(r18)
  807b70:	880d883a 	mov	r6,r17
  807b74:	800f883a 	mov	r7,r16
  807b78:	9809883a 	mov	r4,r19
  807b7c:	183ee83a 	callr	r3
  807b80:	88a3883a 	add	r17,r17,r2
  807b84:	80a1c83a 	sub	r16,r16,r2
  807b88:	00bff616 	blt	zero,r2,807b64 <_fflush_r+0x100>
  807b8c:	9080030b 	ldhu	r2,12(r18)
  807b90:	00ffffc4 	movi	r3,-1
  807b94:	10801014 	ori	r2,r2,64
  807b98:	9080030d 	sth	r2,12(r18)
  807b9c:	1805883a 	mov	r2,r3
  807ba0:	dfc00417 	ldw	ra,16(sp)
  807ba4:	dcc00317 	ldw	r19,12(sp)
  807ba8:	dc800217 	ldw	r18,8(sp)
  807bac:	dc400117 	ldw	r17,4(sp)
  807bb0:	dc000017 	ldw	r16,0(sp)
  807bb4:	dec00504 	addi	sp,sp,20
  807bb8:	f800283a 	ret
  807bbc:	90800f17 	ldw	r2,60(r18)
  807bc0:	00bfbe16 	blt	zero,r2,807abc <_fflush_r+0x58>
  807bc4:	0007883a 	mov	r3,zero
  807bc8:	1805883a 	mov	r2,r3
  807bcc:	dfc00417 	ldw	ra,16(sp)
  807bd0:	dcc00317 	ldw	r19,12(sp)
  807bd4:	dc800217 	ldw	r18,8(sp)
  807bd8:	dc400117 	ldw	r17,4(sp)
  807bdc:	dc000017 	ldw	r16,0(sp)
  807be0:	dec00504 	addi	sp,sp,20
  807be4:	f800283a 	ret
  807be8:	0807cfc0 	call	807cfc <__sinit>
  807bec:	003fa806 	br	807a90 <_fflush_r+0x2c>
  807bf0:	90800517 	ldw	r2,20(r18)
  807bf4:	90800215 	stw	r2,8(r18)
  807bf8:	003fda06 	br	807b64 <_fflush_r+0x100>
  807bfc:	90800117 	ldw	r2,4(r18)
  807c00:	90c00c17 	ldw	r3,48(r18)
  807c04:	80a1c83a 	sub	r16,r16,r2
  807c08:	183fb426 	beq	r3,zero,807adc <_fflush_r+0x78>
  807c0c:	90800f17 	ldw	r2,60(r18)
  807c10:	80a1c83a 	sub	r16,r16,r2
  807c14:	003fb106 	br	807adc <_fflush_r+0x78>
  807c18:	91400717 	ldw	r5,28(r18)
  807c1c:	9809883a 	mov	r4,r19
  807c20:	000d883a 	mov	r6,zero
  807c24:	01c00044 	movi	r7,1
  807c28:	403ee83a 	callr	r8
  807c2c:	1021883a 	mov	r16,r2
  807c30:	00bfffc4 	movi	r2,-1
  807c34:	80800226 	beq	r16,r2,807c40 <_fflush_r+0x1dc>
  807c38:	92000a17 	ldw	r8,40(r18)
  807c3c:	003fa406 	br	807ad0 <_fflush_r+0x6c>
  807c40:	98c00017 	ldw	r3,0(r19)
  807c44:	00800744 	movi	r2,29
  807c48:	18bfde26 	beq	r3,r2,807bc4 <_fflush_r+0x160>
  807c4c:	9080030b 	ldhu	r2,12(r18)
  807c50:	8007883a 	mov	r3,r16
  807c54:	10801014 	ori	r2,r2,64
  807c58:	9080030d 	sth	r2,12(r18)
  807c5c:	003fcf06 	br	807b9c <_fflush_r+0x138>

00807c60 <fflush>:
  807c60:	01402034 	movhi	r5,128
  807c64:	295e9904 	addi	r5,r5,31332
  807c68:	2007883a 	mov	r3,r4
  807c6c:	20000526 	beq	r4,zero,807c84 <fflush+0x24>
  807c70:	00802074 	movhi	r2,129
  807c74:	10966304 	addi	r2,r2,22924
  807c78:	11000017 	ldw	r4,0(r2)
  807c7c:	180b883a 	mov	r5,r3
  807c80:	0807a641 	jmpi	807a64 <_fflush_r>
  807c84:	00802074 	movhi	r2,129
  807c88:	10966404 	addi	r2,r2,22928
  807c8c:	11000017 	ldw	r4,0(r2)
  807c90:	08088301 	jmpi	808830 <_fwalk_reent>

00807c94 <std>:
  807c94:	00802074 	movhi	r2,129
  807c98:	10aa2204 	addi	r2,r2,-22392
  807c9c:	20800b15 	stw	r2,44(r4)
  807ca0:	00802074 	movhi	r2,129
  807ca4:	10aa5d04 	addi	r2,r2,-22156
  807ca8:	20800815 	stw	r2,32(r4)
  807cac:	00c02074 	movhi	r3,129
  807cb0:	18ea3e04 	addi	r3,r3,-22280
  807cb4:	00802074 	movhi	r2,129
  807cb8:	10aa2404 	addi	r2,r2,-22384
  807cbc:	2140030d 	sth	r5,12(r4)
  807cc0:	2180038d 	sth	r6,14(r4)
  807cc4:	20c00915 	stw	r3,36(r4)
  807cc8:	20800a15 	stw	r2,40(r4)
  807ccc:	20000015 	stw	zero,0(r4)
  807cd0:	20000115 	stw	zero,4(r4)
  807cd4:	20000215 	stw	zero,8(r4)
  807cd8:	20000415 	stw	zero,16(r4)
  807cdc:	20000515 	stw	zero,20(r4)
  807ce0:	20000615 	stw	zero,24(r4)
  807ce4:	21000715 	stw	r4,28(r4)
  807ce8:	f800283a 	ret

00807cec <__sfp_lock_acquire>:
  807cec:	f800283a 	ret

00807cf0 <__sfp_lock_release>:
  807cf0:	f800283a 	ret

00807cf4 <__sinit_lock_acquire>:
  807cf4:	f800283a 	ret

00807cf8 <__sinit_lock_release>:
  807cf8:	f800283a 	ret

00807cfc <__sinit>:
  807cfc:	20800e17 	ldw	r2,56(r4)
  807d00:	defffd04 	addi	sp,sp,-12
  807d04:	dc400115 	stw	r17,4(sp)
  807d08:	dc000015 	stw	r16,0(sp)
  807d0c:	dfc00215 	stw	ra,8(sp)
  807d10:	04400044 	movi	r17,1
  807d14:	01400104 	movi	r5,4
  807d18:	000d883a 	mov	r6,zero
  807d1c:	2021883a 	mov	r16,r4
  807d20:	2200bb04 	addi	r8,r4,748
  807d24:	200f883a 	mov	r7,r4
  807d28:	10000526 	beq	r2,zero,807d40 <__sinit+0x44>
  807d2c:	dfc00217 	ldw	ra,8(sp)
  807d30:	dc400117 	ldw	r17,4(sp)
  807d34:	dc000017 	ldw	r16,0(sp)
  807d38:	dec00304 	addi	sp,sp,12
  807d3c:	f800283a 	ret
  807d40:	21000117 	ldw	r4,4(r4)
  807d44:	00802034 	movhi	r2,128
  807d48:	109f7804 	addi	r2,r2,32224
  807d4c:	00c000c4 	movi	r3,3
  807d50:	80800f15 	stw	r2,60(r16)
  807d54:	80c0b915 	stw	r3,740(r16)
  807d58:	8200ba15 	stw	r8,744(r16)
  807d5c:	84400e15 	stw	r17,56(r16)
  807d60:	8000b815 	stw	zero,736(r16)
  807d64:	0807c940 	call	807c94 <std>
  807d68:	81000217 	ldw	r4,8(r16)
  807d6c:	880d883a 	mov	r6,r17
  807d70:	800f883a 	mov	r7,r16
  807d74:	01400284 	movi	r5,10
  807d78:	0807c940 	call	807c94 <std>
  807d7c:	81000317 	ldw	r4,12(r16)
  807d80:	800f883a 	mov	r7,r16
  807d84:	01400484 	movi	r5,18
  807d88:	01800084 	movi	r6,2
  807d8c:	dfc00217 	ldw	ra,8(sp)
  807d90:	dc400117 	ldw	r17,4(sp)
  807d94:	dc000017 	ldw	r16,0(sp)
  807d98:	dec00304 	addi	sp,sp,12
  807d9c:	0807c941 	jmpi	807c94 <std>

00807da0 <__fp_lock>:
  807da0:	0005883a 	mov	r2,zero
  807da4:	f800283a 	ret

00807da8 <__fp_unlock>:
  807da8:	0005883a 	mov	r2,zero
  807dac:	f800283a 	ret

00807db0 <__fp_unlock_all>:
  807db0:	00802074 	movhi	r2,129
  807db4:	10966304 	addi	r2,r2,22924
  807db8:	11000017 	ldw	r4,0(r2)
  807dbc:	01402034 	movhi	r5,128
  807dc0:	295f6a04 	addi	r5,r5,32168
  807dc4:	08088f81 	jmpi	8088f8 <_fwalk>

00807dc8 <__fp_lock_all>:
  807dc8:	00802074 	movhi	r2,129
  807dcc:	10966304 	addi	r2,r2,22924
  807dd0:	11000017 	ldw	r4,0(r2)
  807dd4:	01402034 	movhi	r5,128
  807dd8:	295f6804 	addi	r5,r5,32160
  807ddc:	08088f81 	jmpi	8088f8 <_fwalk>

00807de0 <_cleanup_r>:
  807de0:	01402074 	movhi	r5,129
  807de4:	296ba204 	addi	r5,r5,-20856
  807de8:	08088f81 	jmpi	8088f8 <_fwalk>

00807dec <_cleanup>:
  807dec:	00802074 	movhi	r2,129
  807df0:	10966404 	addi	r2,r2,22928
  807df4:	11000017 	ldw	r4,0(r2)
  807df8:	0807de01 	jmpi	807de0 <_cleanup_r>

00807dfc <__sfmoreglue>:
  807dfc:	defffc04 	addi	sp,sp,-16
  807e00:	dc400115 	stw	r17,4(sp)
  807e04:	2c401724 	muli	r17,r5,92
  807e08:	dc800215 	stw	r18,8(sp)
  807e0c:	2825883a 	mov	r18,r5
  807e10:	89400304 	addi	r5,r17,12
  807e14:	dc000015 	stw	r16,0(sp)
  807e18:	dfc00315 	stw	ra,12(sp)
  807e1c:	080360c0 	call	80360c <_malloc_r>
  807e20:	0021883a 	mov	r16,zero
  807e24:	880d883a 	mov	r6,r17
  807e28:	000b883a 	mov	r5,zero
  807e2c:	10000626 	beq	r2,zero,807e48 <__sfmoreglue+0x4c>
  807e30:	11000304 	addi	r4,r2,12
  807e34:	14800115 	stw	r18,4(r2)
  807e38:	10000015 	stw	zero,0(r2)
  807e3c:	11000215 	stw	r4,8(r2)
  807e40:	1021883a 	mov	r16,r2
  807e44:	0808dcc0 	call	808dcc <memset>
  807e48:	8005883a 	mov	r2,r16
  807e4c:	dfc00317 	ldw	ra,12(sp)
  807e50:	dc800217 	ldw	r18,8(sp)
  807e54:	dc400117 	ldw	r17,4(sp)
  807e58:	dc000017 	ldw	r16,0(sp)
  807e5c:	dec00404 	addi	sp,sp,16
  807e60:	f800283a 	ret

00807e64 <__sfp>:
  807e64:	defffd04 	addi	sp,sp,-12
  807e68:	00802074 	movhi	r2,129
  807e6c:	10966404 	addi	r2,r2,22928
  807e70:	dc000015 	stw	r16,0(sp)
  807e74:	14000017 	ldw	r16,0(r2)
  807e78:	dc400115 	stw	r17,4(sp)
  807e7c:	dfc00215 	stw	ra,8(sp)
  807e80:	80800e17 	ldw	r2,56(r16)
  807e84:	2023883a 	mov	r17,r4
  807e88:	10002626 	beq	r2,zero,807f24 <__sfp+0xc0>
  807e8c:	8400b804 	addi	r16,r16,736
  807e90:	80800117 	ldw	r2,4(r16)
  807e94:	81000217 	ldw	r4,8(r16)
  807e98:	10ffffc4 	addi	r3,r2,-1
  807e9c:	18000916 	blt	r3,zero,807ec4 <__sfp+0x60>
  807ea0:	2080030f 	ldh	r2,12(r4)
  807ea4:	10000b26 	beq	r2,zero,807ed4 <__sfp+0x70>
  807ea8:	017fffc4 	movi	r5,-1
  807eac:	00000206 	br	807eb8 <__sfp+0x54>
  807eb0:	2080030f 	ldh	r2,12(r4)
  807eb4:	10000726 	beq	r2,zero,807ed4 <__sfp+0x70>
  807eb8:	18ffffc4 	addi	r3,r3,-1
  807ebc:	21001704 	addi	r4,r4,92
  807ec0:	197ffb1e 	bne	r3,r5,807eb0 <__sfp+0x4c>
  807ec4:	80800017 	ldw	r2,0(r16)
  807ec8:	10001926 	beq	r2,zero,807f30 <__sfp+0xcc>
  807ecc:	1021883a 	mov	r16,r2
  807ed0:	003fef06 	br	807e90 <__sfp+0x2c>
  807ed4:	00bfffc4 	movi	r2,-1
  807ed8:	00c00044 	movi	r3,1
  807edc:	2080038d 	sth	r2,14(r4)
  807ee0:	20c0030d 	sth	r3,12(r4)
  807ee4:	20000015 	stw	zero,0(r4)
  807ee8:	20000215 	stw	zero,8(r4)
  807eec:	20000115 	stw	zero,4(r4)
  807ef0:	20000415 	stw	zero,16(r4)
  807ef4:	20000515 	stw	zero,20(r4)
  807ef8:	20000615 	stw	zero,24(r4)
  807efc:	20000c15 	stw	zero,48(r4)
  807f00:	20000d15 	stw	zero,52(r4)
  807f04:	20001115 	stw	zero,68(r4)
  807f08:	20001215 	stw	zero,72(r4)
  807f0c:	2005883a 	mov	r2,r4
  807f10:	dfc00217 	ldw	ra,8(sp)
  807f14:	dc400117 	ldw	r17,4(sp)
  807f18:	dc000017 	ldw	r16,0(sp)
  807f1c:	dec00304 	addi	sp,sp,12
  807f20:	f800283a 	ret
  807f24:	8009883a 	mov	r4,r16
  807f28:	0807cfc0 	call	807cfc <__sinit>
  807f2c:	003fd706 	br	807e8c <__sfp+0x28>
  807f30:	8809883a 	mov	r4,r17
  807f34:	01400104 	movi	r5,4
  807f38:	0807dfc0 	call	807dfc <__sfmoreglue>
  807f3c:	80800015 	stw	r2,0(r16)
  807f40:	103fe21e 	bne	r2,zero,807ecc <__sfp+0x68>
  807f44:	00800304 	movi	r2,12
  807f48:	0009883a 	mov	r4,zero
  807f4c:	88800015 	stw	r2,0(r17)
  807f50:	003fee06 	br	807f0c <__sfp+0xa8>

00807f54 <_malloc_trim_r>:
  807f54:	defffb04 	addi	sp,sp,-20
  807f58:	dcc00315 	stw	r19,12(sp)
  807f5c:	04c02074 	movhi	r19,129
  807f60:	9cd0bc04 	addi	r19,r19,17136
  807f64:	dc800215 	stw	r18,8(sp)
  807f68:	dc400115 	stw	r17,4(sp)
  807f6c:	dc000015 	stw	r16,0(sp)
  807f70:	2823883a 	mov	r17,r5
  807f74:	2025883a 	mov	r18,r4
  807f78:	dfc00415 	stw	ra,16(sp)
  807f7c:	080c7e40 	call	80c7e4 <__malloc_lock>
  807f80:	98800217 	ldw	r2,8(r19)
  807f84:	9009883a 	mov	r4,r18
  807f88:	000b883a 	mov	r5,zero
  807f8c:	10c00117 	ldw	r3,4(r2)
  807f90:	00bfff04 	movi	r2,-4
  807f94:	18a0703a 	and	r16,r3,r2
  807f98:	8463c83a 	sub	r17,r16,r17
  807f9c:	8c43fbc4 	addi	r17,r17,4079
  807fa0:	8822d33a 	srli	r17,r17,12
  807fa4:	0083ffc4 	movi	r2,4095
  807fa8:	8c7fffc4 	addi	r17,r17,-1
  807fac:	8822933a 	slli	r17,r17,12
  807fb0:	1440060e 	bge	r2,r17,807fcc <_malloc_trim_r+0x78>
  807fb4:	0803f9c0 	call	803f9c <_sbrk_r>
  807fb8:	98c00217 	ldw	r3,8(r19)
  807fbc:	9009883a 	mov	r4,r18
  807fc0:	044bc83a 	sub	r5,zero,r17
  807fc4:	80c7883a 	add	r3,r16,r3
  807fc8:	10c00926 	beq	r2,r3,807ff0 <_malloc_trim_r+0x9c>
  807fcc:	080c8040 	call	80c804 <__malloc_unlock>
  807fd0:	0005883a 	mov	r2,zero
  807fd4:	dfc00417 	ldw	ra,16(sp)
  807fd8:	dcc00317 	ldw	r19,12(sp)
  807fdc:	dc800217 	ldw	r18,8(sp)
  807fe0:	dc400117 	ldw	r17,4(sp)
  807fe4:	dc000017 	ldw	r16,0(sp)
  807fe8:	dec00504 	addi	sp,sp,20
  807fec:	f800283a 	ret
  807ff0:	9009883a 	mov	r4,r18
  807ff4:	0803f9c0 	call	803f9c <_sbrk_r>
  807ff8:	844dc83a 	sub	r6,r16,r17
  807ffc:	00ffffc4 	movi	r3,-1
  808000:	9009883a 	mov	r4,r18
  808004:	000b883a 	mov	r5,zero
  808008:	01c02074 	movhi	r7,129
  80800c:	39ddc904 	addi	r7,r7,30500
  808010:	31800054 	ori	r6,r6,1
  808014:	10c00926 	beq	r2,r3,80803c <_malloc_trim_r+0xe8>
  808018:	38800017 	ldw	r2,0(r7)
  80801c:	98c00217 	ldw	r3,8(r19)
  808020:	9009883a 	mov	r4,r18
  808024:	1445c83a 	sub	r2,r2,r17
  808028:	38800015 	stw	r2,0(r7)
  80802c:	19800115 	stw	r6,4(r3)
  808030:	080c8040 	call	80c804 <__malloc_unlock>
  808034:	00800044 	movi	r2,1
  808038:	003fe606 	br	807fd4 <_malloc_trim_r+0x80>
  80803c:	0803f9c0 	call	803f9c <_sbrk_r>
  808040:	99800217 	ldw	r6,8(r19)
  808044:	100f883a 	mov	r7,r2
  808048:	9009883a 	mov	r4,r18
  80804c:	1187c83a 	sub	r3,r2,r6
  808050:	008003c4 	movi	r2,15
  808054:	19400054 	ori	r5,r3,1
  808058:	10ffdc0e 	bge	r2,r3,807fcc <_malloc_trim_r+0x78>
  80805c:	00802074 	movhi	r2,129
  808060:	10966604 	addi	r2,r2,22936
  808064:	10c00017 	ldw	r3,0(r2)
  808068:	00802074 	movhi	r2,129
  80806c:	109dc904 	addi	r2,r2,30500
  808070:	31400115 	stw	r5,4(r6)
  808074:	38c7c83a 	sub	r3,r7,r3
  808078:	10c00015 	stw	r3,0(r2)
  80807c:	003fd306 	br	807fcc <_malloc_trim_r+0x78>

00808080 <_free_r>:
  808080:	defffd04 	addi	sp,sp,-12
  808084:	dc400115 	stw	r17,4(sp)
  808088:	dc000015 	stw	r16,0(sp)
  80808c:	dfc00215 	stw	ra,8(sp)
  808090:	2821883a 	mov	r16,r5
  808094:	2023883a 	mov	r17,r4
  808098:	28005a26 	beq	r5,zero,808204 <_free_r+0x184>
  80809c:	080c7e40 	call	80c7e4 <__malloc_lock>
  8080a0:	823ffe04 	addi	r8,r16,-8
  8080a4:	41400117 	ldw	r5,4(r8)
  8080a8:	00bfff84 	movi	r2,-2
  8080ac:	02802074 	movhi	r10,129
  8080b0:	5290bc04 	addi	r10,r10,17136
  8080b4:	288e703a 	and	r7,r5,r2
  8080b8:	41cd883a 	add	r6,r8,r7
  8080bc:	30c00117 	ldw	r3,4(r6)
  8080c0:	51000217 	ldw	r4,8(r10)
  8080c4:	00bfff04 	movi	r2,-4
  8080c8:	1892703a 	and	r9,r3,r2
  8080cc:	5017883a 	mov	r11,r10
  8080d0:	31006726 	beq	r6,r4,808270 <_free_r+0x1f0>
  8080d4:	2880004c 	andi	r2,r5,1
  8080d8:	1005003a 	cmpeq	r2,r2,zero
  8080dc:	32400115 	stw	r9,4(r6)
  8080e0:	10001a1e 	bne	r2,zero,80814c <_free_r+0xcc>
  8080e4:	000b883a 	mov	r5,zero
  8080e8:	3247883a 	add	r3,r6,r9
  8080ec:	18800117 	ldw	r2,4(r3)
  8080f0:	1080004c 	andi	r2,r2,1
  8080f4:	1000231e 	bne	r2,zero,808184 <_free_r+0x104>
  8080f8:	280ac03a 	cmpne	r5,r5,zero
  8080fc:	3a4f883a 	add	r7,r7,r9
  808100:	2800451e 	bne	r5,zero,808218 <_free_r+0x198>
  808104:	31000217 	ldw	r4,8(r6)
  808108:	00802074 	movhi	r2,129
  80810c:	1090be04 	addi	r2,r2,17144
  808110:	20807b26 	beq	r4,r2,808300 <_free_r+0x280>
  808114:	30800317 	ldw	r2,12(r6)
  808118:	3a07883a 	add	r3,r7,r8
  80811c:	19c00015 	stw	r7,0(r3)
  808120:	11000215 	stw	r4,8(r2)
  808124:	20800315 	stw	r2,12(r4)
  808128:	38800054 	ori	r2,r7,1
  80812c:	40800115 	stw	r2,4(r8)
  808130:	28001a26 	beq	r5,zero,80819c <_free_r+0x11c>
  808134:	8809883a 	mov	r4,r17
  808138:	dfc00217 	ldw	ra,8(sp)
  80813c:	dc400117 	ldw	r17,4(sp)
  808140:	dc000017 	ldw	r16,0(sp)
  808144:	dec00304 	addi	sp,sp,12
  808148:	080c8041 	jmpi	80c804 <__malloc_unlock>
  80814c:	80bffe17 	ldw	r2,-8(r16)
  808150:	50c00204 	addi	r3,r10,8
  808154:	4091c83a 	sub	r8,r8,r2
  808158:	41000217 	ldw	r4,8(r8)
  80815c:	388f883a 	add	r7,r7,r2
  808160:	20c06126 	beq	r4,r3,8082e8 <_free_r+0x268>
  808164:	40800317 	ldw	r2,12(r8)
  808168:	3247883a 	add	r3,r6,r9
  80816c:	000b883a 	mov	r5,zero
  808170:	11000215 	stw	r4,8(r2)
  808174:	20800315 	stw	r2,12(r4)
  808178:	18800117 	ldw	r2,4(r3)
  80817c:	1080004c 	andi	r2,r2,1
  808180:	103fdd26 	beq	r2,zero,8080f8 <_free_r+0x78>
  808184:	38800054 	ori	r2,r7,1
  808188:	3a07883a 	add	r3,r7,r8
  80818c:	280ac03a 	cmpne	r5,r5,zero
  808190:	40800115 	stw	r2,4(r8)
  808194:	19c00015 	stw	r7,0(r3)
  808198:	283fe61e 	bne	r5,zero,808134 <_free_r+0xb4>
  80819c:	00807fc4 	movi	r2,511
  8081a0:	11c01f2e 	bgeu	r2,r7,808220 <_free_r+0x1a0>
  8081a4:	3806d27a 	srli	r3,r7,9
  8081a8:	1800481e 	bne	r3,zero,8082cc <_free_r+0x24c>
  8081ac:	3804d0fa 	srli	r2,r7,3
  8081b0:	100690fa 	slli	r3,r2,3
  8081b4:	1acd883a 	add	r6,r3,r11
  8081b8:	31400217 	ldw	r5,8(r6)
  8081bc:	31405926 	beq	r6,r5,808324 <_free_r+0x2a4>
  8081c0:	28800117 	ldw	r2,4(r5)
  8081c4:	00ffff04 	movi	r3,-4
  8081c8:	10c4703a 	and	r2,r2,r3
  8081cc:	3880022e 	bgeu	r7,r2,8081d8 <_free_r+0x158>
  8081d0:	29400217 	ldw	r5,8(r5)
  8081d4:	317ffa1e 	bne	r6,r5,8081c0 <_free_r+0x140>
  8081d8:	29800317 	ldw	r6,12(r5)
  8081dc:	41800315 	stw	r6,12(r8)
  8081e0:	41400215 	stw	r5,8(r8)
  8081e4:	8809883a 	mov	r4,r17
  8081e8:	2a000315 	stw	r8,12(r5)
  8081ec:	32000215 	stw	r8,8(r6)
  8081f0:	dfc00217 	ldw	ra,8(sp)
  8081f4:	dc400117 	ldw	r17,4(sp)
  8081f8:	dc000017 	ldw	r16,0(sp)
  8081fc:	dec00304 	addi	sp,sp,12
  808200:	080c8041 	jmpi	80c804 <__malloc_unlock>
  808204:	dfc00217 	ldw	ra,8(sp)
  808208:	dc400117 	ldw	r17,4(sp)
  80820c:	dc000017 	ldw	r16,0(sp)
  808210:	dec00304 	addi	sp,sp,12
  808214:	f800283a 	ret
  808218:	31000217 	ldw	r4,8(r6)
  80821c:	003fbd06 	br	808114 <_free_r+0x94>
  808220:	3806d0fa 	srli	r3,r7,3
  808224:	00800044 	movi	r2,1
  808228:	51400117 	ldw	r5,4(r10)
  80822c:	180890fa 	slli	r4,r3,3
  808230:	1807d0ba 	srai	r3,r3,2
  808234:	22c9883a 	add	r4,r4,r11
  808238:	21800217 	ldw	r6,8(r4)
  80823c:	10c4983a 	sll	r2,r2,r3
  808240:	41000315 	stw	r4,12(r8)
  808244:	41800215 	stw	r6,8(r8)
  808248:	288ab03a 	or	r5,r5,r2
  80824c:	22000215 	stw	r8,8(r4)
  808250:	8809883a 	mov	r4,r17
  808254:	51400115 	stw	r5,4(r10)
  808258:	32000315 	stw	r8,12(r6)
  80825c:	dfc00217 	ldw	ra,8(sp)
  808260:	dc400117 	ldw	r17,4(sp)
  808264:	dc000017 	ldw	r16,0(sp)
  808268:	dec00304 	addi	sp,sp,12
  80826c:	080c8041 	jmpi	80c804 <__malloc_unlock>
  808270:	2880004c 	andi	r2,r5,1
  808274:	3a4d883a 	add	r6,r7,r9
  808278:	1000071e 	bne	r2,zero,808298 <_free_r+0x218>
  80827c:	80bffe17 	ldw	r2,-8(r16)
  808280:	4091c83a 	sub	r8,r8,r2
  808284:	41000317 	ldw	r4,12(r8)
  808288:	40c00217 	ldw	r3,8(r8)
  80828c:	308d883a 	add	r6,r6,r2
  808290:	20c00215 	stw	r3,8(r4)
  808294:	19000315 	stw	r4,12(r3)
  808298:	00802074 	movhi	r2,129
  80829c:	10966504 	addi	r2,r2,22932
  8082a0:	11000017 	ldw	r4,0(r2)
  8082a4:	30c00054 	ori	r3,r6,1
  8082a8:	52000215 	stw	r8,8(r10)
  8082ac:	40c00115 	stw	r3,4(r8)
  8082b0:	313fa036 	bltu	r6,r4,808134 <_free_r+0xb4>
  8082b4:	00802074 	movhi	r2,129
  8082b8:	109daf04 	addi	r2,r2,30396
  8082bc:	11400017 	ldw	r5,0(r2)
  8082c0:	8809883a 	mov	r4,r17
  8082c4:	0807f540 	call	807f54 <_malloc_trim_r>
  8082c8:	003f9a06 	br	808134 <_free_r+0xb4>
  8082cc:	00800104 	movi	r2,4
  8082d0:	10c0072e 	bgeu	r2,r3,8082f0 <_free_r+0x270>
  8082d4:	00800504 	movi	r2,20
  8082d8:	10c01936 	bltu	r2,r3,808340 <_free_r+0x2c0>
  8082dc:	188016c4 	addi	r2,r3,91
  8082e0:	100690fa 	slli	r3,r2,3
  8082e4:	003fb306 	br	8081b4 <_free_r+0x134>
  8082e8:	01400044 	movi	r5,1
  8082ec:	003f7e06 	br	8080e8 <_free_r+0x68>
  8082f0:	3804d1ba 	srli	r2,r7,6
  8082f4:	10800e04 	addi	r2,r2,56
  8082f8:	100690fa 	slli	r3,r2,3
  8082fc:	003fad06 	br	8081b4 <_free_r+0x134>
  808300:	22000315 	stw	r8,12(r4)
  808304:	22000215 	stw	r8,8(r4)
  808308:	3a05883a 	add	r2,r7,r8
  80830c:	38c00054 	ori	r3,r7,1
  808310:	11c00015 	stw	r7,0(r2)
  808314:	41000215 	stw	r4,8(r8)
  808318:	40c00115 	stw	r3,4(r8)
  80831c:	41000315 	stw	r4,12(r8)
  808320:	003f8406 	br	808134 <_free_r+0xb4>
  808324:	1005d0ba 	srai	r2,r2,2
  808328:	00c00044 	movi	r3,1
  80832c:	51000117 	ldw	r4,4(r10)
  808330:	1886983a 	sll	r3,r3,r2
  808334:	20c8b03a 	or	r4,r4,r3
  808338:	51000115 	stw	r4,4(r10)
  80833c:	003fa706 	br	8081dc <_free_r+0x15c>
  808340:	00801504 	movi	r2,84
  808344:	10c00436 	bltu	r2,r3,808358 <_free_r+0x2d8>
  808348:	3804d33a 	srli	r2,r7,12
  80834c:	10801b84 	addi	r2,r2,110
  808350:	100690fa 	slli	r3,r2,3
  808354:	003f9706 	br	8081b4 <_free_r+0x134>
  808358:	00805504 	movi	r2,340
  80835c:	10c00436 	bltu	r2,r3,808370 <_free_r+0x2f0>
  808360:	3804d3fa 	srli	r2,r7,15
  808364:	10801dc4 	addi	r2,r2,119
  808368:	100690fa 	slli	r3,r2,3
  80836c:	003f9106 	br	8081b4 <_free_r+0x134>
  808370:	00815504 	movi	r2,1364
  808374:	10c0032e 	bgeu	r2,r3,808384 <_free_r+0x304>
  808378:	00801f84 	movi	r2,126
  80837c:	00c0fc04 	movi	r3,1008
  808380:	003f8c06 	br	8081b4 <_free_r+0x134>
  808384:	3804d4ba 	srli	r2,r7,18
  808388:	10801f04 	addi	r2,r2,124
  80838c:	100690fa 	slli	r3,r2,3
  808390:	003f8806 	br	8081b4 <_free_r+0x134>

00808394 <__sfvwrite_r>:
  808394:	30800217 	ldw	r2,8(r6)
  808398:	defff504 	addi	sp,sp,-44
  80839c:	df000915 	stw	fp,36(sp)
  8083a0:	dd800715 	stw	r22,28(sp)
  8083a4:	dc800315 	stw	r18,12(sp)
  8083a8:	dfc00a15 	stw	ra,40(sp)
  8083ac:	ddc00815 	stw	r23,32(sp)
  8083b0:	dd400615 	stw	r21,24(sp)
  8083b4:	dd000515 	stw	r20,20(sp)
  8083b8:	dcc00415 	stw	r19,16(sp)
  8083bc:	dc400215 	stw	r17,8(sp)
  8083c0:	dc000115 	stw	r16,4(sp)
  8083c4:	302d883a 	mov	r22,r6
  8083c8:	2039883a 	mov	fp,r4
  8083cc:	2825883a 	mov	r18,r5
  8083d0:	10001c26 	beq	r2,zero,808444 <__sfvwrite_r+0xb0>
  8083d4:	29c0030b 	ldhu	r7,12(r5)
  8083d8:	3880020c 	andi	r2,r7,8
  8083dc:	10002726 	beq	r2,zero,80847c <__sfvwrite_r+0xe8>
  8083e0:	28800417 	ldw	r2,16(r5)
  8083e4:	10002526 	beq	r2,zero,80847c <__sfvwrite_r+0xe8>
  8083e8:	3880008c 	andi	r2,r7,2
  8083ec:	b5400017 	ldw	r21,0(r22)
  8083f0:	10002826 	beq	r2,zero,808494 <__sfvwrite_r+0x100>
  8083f4:	0021883a 	mov	r16,zero
  8083f8:	0023883a 	mov	r17,zero
  8083fc:	880d883a 	mov	r6,r17
  808400:	e009883a 	mov	r4,fp
  808404:	00810004 	movi	r2,1024
  808408:	80006e26 	beq	r16,zero,8085c4 <__sfvwrite_r+0x230>
  80840c:	800f883a 	mov	r7,r16
  808410:	91400717 	ldw	r5,28(r18)
  808414:	1400012e 	bgeu	r2,r16,80841c <__sfvwrite_r+0x88>
  808418:	100f883a 	mov	r7,r2
  80841c:	90c00917 	ldw	r3,36(r18)
  808420:	183ee83a 	callr	r3
  808424:	1007883a 	mov	r3,r2
  808428:	80a1c83a 	sub	r16,r16,r2
  80842c:	88a3883a 	add	r17,r17,r2
  808430:	00806d0e 	bge	zero,r2,8085e8 <__sfvwrite_r+0x254>
  808434:	b0800217 	ldw	r2,8(r22)
  808438:	10c5c83a 	sub	r2,r2,r3
  80843c:	b0800215 	stw	r2,8(r22)
  808440:	103fee1e 	bne	r2,zero,8083fc <__sfvwrite_r+0x68>
  808444:	0009883a 	mov	r4,zero
  808448:	2005883a 	mov	r2,r4
  80844c:	dfc00a17 	ldw	ra,40(sp)
  808450:	df000917 	ldw	fp,36(sp)
  808454:	ddc00817 	ldw	r23,32(sp)
  808458:	dd800717 	ldw	r22,28(sp)
  80845c:	dd400617 	ldw	r21,24(sp)
  808460:	dd000517 	ldw	r20,20(sp)
  808464:	dcc00417 	ldw	r19,16(sp)
  808468:	dc800317 	ldw	r18,12(sp)
  80846c:	dc400217 	ldw	r17,8(sp)
  808470:	dc000117 	ldw	r16,4(sp)
  808474:	dec00b04 	addi	sp,sp,44
  808478:	f800283a 	ret
  80847c:	0805fa80 	call	805fa8 <__swsetup_r>
  808480:	1000e41e 	bne	r2,zero,808814 <__sfvwrite_r+0x480>
  808484:	91c0030b 	ldhu	r7,12(r18)
  808488:	b5400017 	ldw	r21,0(r22)
  80848c:	3880008c 	andi	r2,r7,2
  808490:	103fd81e 	bne	r2,zero,8083f4 <__sfvwrite_r+0x60>
  808494:	3880004c 	andi	r2,r7,1
  808498:	1005003a 	cmpeq	r2,r2,zero
  80849c:	10005726 	beq	r2,zero,8085fc <__sfvwrite_r+0x268>
  8084a0:	0029883a 	mov	r20,zero
  8084a4:	002f883a 	mov	r23,zero
  8084a8:	a0004226 	beq	r20,zero,8085b4 <__sfvwrite_r+0x220>
  8084ac:	3880800c 	andi	r2,r7,512
  8084b0:	94000217 	ldw	r16,8(r18)
  8084b4:	10008b26 	beq	r2,zero,8086e4 <__sfvwrite_r+0x350>
  8084b8:	800d883a 	mov	r6,r16
  8084bc:	a400a536 	bltu	r20,r16,808754 <__sfvwrite_r+0x3c0>
  8084c0:	3881200c 	andi	r2,r7,1152
  8084c4:	10002726 	beq	r2,zero,808564 <__sfvwrite_r+0x1d0>
  8084c8:	90800517 	ldw	r2,20(r18)
  8084cc:	92000417 	ldw	r8,16(r18)
  8084d0:	91400017 	ldw	r5,0(r18)
  8084d4:	1087883a 	add	r3,r2,r2
  8084d8:	1887883a 	add	r3,r3,r2
  8084dc:	1808d7fa 	srli	r4,r3,31
  8084e0:	2a21c83a 	sub	r16,r5,r8
  8084e4:	80800044 	addi	r2,r16,1
  8084e8:	20c9883a 	add	r4,r4,r3
  8084ec:	2027d07a 	srai	r19,r4,1
  8084f0:	a085883a 	add	r2,r20,r2
  8084f4:	980d883a 	mov	r6,r19
  8084f8:	9880022e 	bgeu	r19,r2,808504 <__sfvwrite_r+0x170>
  8084fc:	1027883a 	mov	r19,r2
  808500:	100d883a 	mov	r6,r2
  808504:	3881000c 	andi	r2,r7,1024
  808508:	1000b826 	beq	r2,zero,8087ec <__sfvwrite_r+0x458>
  80850c:	300b883a 	mov	r5,r6
  808510:	e009883a 	mov	r4,fp
  808514:	080360c0 	call	80360c <_malloc_r>
  808518:	10003126 	beq	r2,zero,8085e0 <__sfvwrite_r+0x24c>
  80851c:	91400417 	ldw	r5,16(r18)
  808520:	1009883a 	mov	r4,r2
  808524:	800d883a 	mov	r6,r16
  808528:	1023883a 	mov	r17,r2
  80852c:	0803d4c0 	call	803d4c <memcpy>
  808530:	90c0030b 	ldhu	r3,12(r18)
  808534:	00beffc4 	movi	r2,-1025
  808538:	1886703a 	and	r3,r3,r2
  80853c:	18c02014 	ori	r3,r3,128
  808540:	90c0030d 	sth	r3,12(r18)
  808544:	9c07c83a 	sub	r3,r19,r16
  808548:	8c05883a 	add	r2,r17,r16
  80854c:	a00d883a 	mov	r6,r20
  808550:	a021883a 	mov	r16,r20
  808554:	90800015 	stw	r2,0(r18)
  808558:	90c00215 	stw	r3,8(r18)
  80855c:	94400415 	stw	r17,16(r18)
  808560:	94c00515 	stw	r19,20(r18)
  808564:	91000017 	ldw	r4,0(r18)
  808568:	b80b883a 	mov	r5,r23
  80856c:	a023883a 	mov	r17,r20
  808570:	0808cec0 	call	808cec <memmove>
  808574:	90c00217 	ldw	r3,8(r18)
  808578:	90800017 	ldw	r2,0(r18)
  80857c:	a027883a 	mov	r19,r20
  808580:	1c07c83a 	sub	r3,r3,r16
  808584:	1405883a 	add	r2,r2,r16
  808588:	90c00215 	stw	r3,8(r18)
  80858c:	a021883a 	mov	r16,r20
  808590:	90800015 	stw	r2,0(r18)
  808594:	b0800217 	ldw	r2,8(r22)
  808598:	1405c83a 	sub	r2,r2,r16
  80859c:	b0800215 	stw	r2,8(r22)
  8085a0:	103fa826 	beq	r2,zero,808444 <__sfvwrite_r+0xb0>
  8085a4:	a469c83a 	sub	r20,r20,r17
  8085a8:	91c0030b 	ldhu	r7,12(r18)
  8085ac:	bcef883a 	add	r23,r23,r19
  8085b0:	a03fbe1e 	bne	r20,zero,8084ac <__sfvwrite_r+0x118>
  8085b4:	adc00017 	ldw	r23,0(r21)
  8085b8:	ad000117 	ldw	r20,4(r21)
  8085bc:	ad400204 	addi	r21,r21,8
  8085c0:	003fb906 	br	8084a8 <__sfvwrite_r+0x114>
  8085c4:	ac400017 	ldw	r17,0(r21)
  8085c8:	ac000117 	ldw	r16,4(r21)
  8085cc:	ad400204 	addi	r21,r21,8
  8085d0:	003f8a06 	br	8083fc <__sfvwrite_r+0x68>
  8085d4:	91400417 	ldw	r5,16(r18)
  8085d8:	e009883a 	mov	r4,fp
  8085dc:	08080800 	call	808080 <_free_r>
  8085e0:	00800304 	movi	r2,12
  8085e4:	e0800015 	stw	r2,0(fp)
  8085e8:	9080030b 	ldhu	r2,12(r18)
  8085ec:	013fffc4 	movi	r4,-1
  8085f0:	10801014 	ori	r2,r2,64
  8085f4:	9080030d 	sth	r2,12(r18)
  8085f8:	003f9306 	br	808448 <__sfvwrite_r+0xb4>
  8085fc:	0027883a 	mov	r19,zero
  808600:	002f883a 	mov	r23,zero
  808604:	d8000015 	stw	zero,0(sp)
  808608:	0029883a 	mov	r20,zero
  80860c:	98001e26 	beq	r19,zero,808688 <__sfvwrite_r+0x2f4>
  808610:	d8c00017 	ldw	r3,0(sp)
  808614:	1804c03a 	cmpne	r2,r3,zero
  808618:	10005e26 	beq	r2,zero,808794 <__sfvwrite_r+0x400>
  80861c:	9821883a 	mov	r16,r19
  808620:	a4c0012e 	bgeu	r20,r19,808628 <__sfvwrite_r+0x294>
  808624:	a021883a 	mov	r16,r20
  808628:	91000017 	ldw	r4,0(r18)
  80862c:	90800417 	ldw	r2,16(r18)
  808630:	91800217 	ldw	r6,8(r18)
  808634:	91c00517 	ldw	r7,20(r18)
  808638:	1100022e 	bgeu	r2,r4,808644 <__sfvwrite_r+0x2b0>
  80863c:	31e3883a 	add	r17,r6,r7
  808640:	8c001616 	blt	r17,r16,80869c <__sfvwrite_r+0x308>
  808644:	81c03816 	blt	r16,r7,808728 <__sfvwrite_r+0x394>
  808648:	90c00917 	ldw	r3,36(r18)
  80864c:	91400717 	ldw	r5,28(r18)
  808650:	e009883a 	mov	r4,fp
  808654:	b80d883a 	mov	r6,r23
  808658:	183ee83a 	callr	r3
  80865c:	1023883a 	mov	r17,r2
  808660:	00bfe10e 	bge	zero,r2,8085e8 <__sfvwrite_r+0x254>
  808664:	a469c83a 	sub	r20,r20,r17
  808668:	a0001826 	beq	r20,zero,8086cc <__sfvwrite_r+0x338>
  80866c:	b0800217 	ldw	r2,8(r22)
  808670:	1445c83a 	sub	r2,r2,r17
  808674:	b0800215 	stw	r2,8(r22)
  808678:	103f7226 	beq	r2,zero,808444 <__sfvwrite_r+0xb0>
  80867c:	9c67c83a 	sub	r19,r19,r17
  808680:	bc6f883a 	add	r23,r23,r17
  808684:	983fe21e 	bne	r19,zero,808610 <__sfvwrite_r+0x27c>
  808688:	adc00017 	ldw	r23,0(r21)
  80868c:	acc00117 	ldw	r19,4(r21)
  808690:	ad400204 	addi	r21,r21,8
  808694:	d8000015 	stw	zero,0(sp)
  808698:	003fdc06 	br	80860c <__sfvwrite_r+0x278>
  80869c:	b80b883a 	mov	r5,r23
  8086a0:	880d883a 	mov	r6,r17
  8086a4:	0808cec0 	call	808cec <memmove>
  8086a8:	90c00017 	ldw	r3,0(r18)
  8086ac:	e009883a 	mov	r4,fp
  8086b0:	900b883a 	mov	r5,r18
  8086b4:	1c47883a 	add	r3,r3,r17
  8086b8:	90c00015 	stw	r3,0(r18)
  8086bc:	0807a640 	call	807a64 <_fflush_r>
  8086c0:	103fc91e 	bne	r2,zero,8085e8 <__sfvwrite_r+0x254>
  8086c4:	a469c83a 	sub	r20,r20,r17
  8086c8:	a03fe81e 	bne	r20,zero,80866c <__sfvwrite_r+0x2d8>
  8086cc:	e009883a 	mov	r4,fp
  8086d0:	900b883a 	mov	r5,r18
  8086d4:	0807a640 	call	807a64 <_fflush_r>
  8086d8:	103fc31e 	bne	r2,zero,8085e8 <__sfvwrite_r+0x254>
  8086dc:	d8000015 	stw	zero,0(sp)
  8086e0:	003fe206 	br	80866c <__sfvwrite_r+0x2d8>
  8086e4:	91000017 	ldw	r4,0(r18)
  8086e8:	90800417 	ldw	r2,16(r18)
  8086ec:	1100022e 	bgeu	r2,r4,8086f8 <__sfvwrite_r+0x364>
  8086f0:	8023883a 	mov	r17,r16
  8086f4:	85003136 	bltu	r16,r20,8087bc <__sfvwrite_r+0x428>
  8086f8:	91c00517 	ldw	r7,20(r18)
  8086fc:	a1c01836 	bltu	r20,r7,808760 <__sfvwrite_r+0x3cc>
  808700:	90c00917 	ldw	r3,36(r18)
  808704:	91400717 	ldw	r5,28(r18)
  808708:	e009883a 	mov	r4,fp
  80870c:	b80d883a 	mov	r6,r23
  808710:	183ee83a 	callr	r3
  808714:	1021883a 	mov	r16,r2
  808718:	00bfb30e 	bge	zero,r2,8085e8 <__sfvwrite_r+0x254>
  80871c:	1023883a 	mov	r17,r2
  808720:	1027883a 	mov	r19,r2
  808724:	003f9b06 	br	808594 <__sfvwrite_r+0x200>
  808728:	b80b883a 	mov	r5,r23
  80872c:	800d883a 	mov	r6,r16
  808730:	0808cec0 	call	808cec <memmove>
  808734:	90c00217 	ldw	r3,8(r18)
  808738:	90800017 	ldw	r2,0(r18)
  80873c:	8023883a 	mov	r17,r16
  808740:	1c07c83a 	sub	r3,r3,r16
  808744:	1405883a 	add	r2,r2,r16
  808748:	90c00215 	stw	r3,8(r18)
  80874c:	90800015 	stw	r2,0(r18)
  808750:	003fc406 	br	808664 <__sfvwrite_r+0x2d0>
  808754:	a00d883a 	mov	r6,r20
  808758:	a021883a 	mov	r16,r20
  80875c:	003f8106 	br	808564 <__sfvwrite_r+0x1d0>
  808760:	b80b883a 	mov	r5,r23
  808764:	a00d883a 	mov	r6,r20
  808768:	0808cec0 	call	808cec <memmove>
  80876c:	90c00217 	ldw	r3,8(r18)
  808770:	90800017 	ldw	r2,0(r18)
  808774:	a021883a 	mov	r16,r20
  808778:	1d07c83a 	sub	r3,r3,r20
  80877c:	1505883a 	add	r2,r2,r20
  808780:	a023883a 	mov	r17,r20
  808784:	a027883a 	mov	r19,r20
  808788:	90c00215 	stw	r3,8(r18)
  80878c:	90800015 	stw	r2,0(r18)
  808790:	003f8006 	br	808594 <__sfvwrite_r+0x200>
  808794:	b809883a 	mov	r4,r23
  808798:	01400284 	movi	r5,10
  80879c:	980d883a 	mov	r6,r19
  8087a0:	0808c080 	call	808c08 <memchr>
  8087a4:	10001726 	beq	r2,zero,808804 <__sfvwrite_r+0x470>
  8087a8:	15c5c83a 	sub	r2,r2,r23
  8087ac:	15000044 	addi	r20,r2,1
  8087b0:	00800044 	movi	r2,1
  8087b4:	d8800015 	stw	r2,0(sp)
  8087b8:	003f9806 	br	80861c <__sfvwrite_r+0x288>
  8087bc:	b80b883a 	mov	r5,r23
  8087c0:	800d883a 	mov	r6,r16
  8087c4:	0808cec0 	call	808cec <memmove>
  8087c8:	90c00017 	ldw	r3,0(r18)
  8087cc:	e009883a 	mov	r4,fp
  8087d0:	900b883a 	mov	r5,r18
  8087d4:	1c07883a 	add	r3,r3,r16
  8087d8:	90c00015 	stw	r3,0(r18)
  8087dc:	8027883a 	mov	r19,r16
  8087e0:	0807a640 	call	807a64 <_fflush_r>
  8087e4:	103f6b26 	beq	r2,zero,808594 <__sfvwrite_r+0x200>
  8087e8:	003f7f06 	br	8085e8 <__sfvwrite_r+0x254>
  8087ec:	400b883a 	mov	r5,r8
  8087f0:	e009883a 	mov	r4,fp
  8087f4:	080a0440 	call	80a044 <_realloc_r>
  8087f8:	103f7626 	beq	r2,zero,8085d4 <__sfvwrite_r+0x240>
  8087fc:	1023883a 	mov	r17,r2
  808800:	003f5006 	br	808544 <__sfvwrite_r+0x1b0>
  808804:	00c00044 	movi	r3,1
  808808:	9d000044 	addi	r20,r19,1
  80880c:	d8c00015 	stw	r3,0(sp)
  808810:	003f8206 	br	80861c <__sfvwrite_r+0x288>
  808814:	9080030b 	ldhu	r2,12(r18)
  808818:	00c00244 	movi	r3,9
  80881c:	013fffc4 	movi	r4,-1
  808820:	10801014 	ori	r2,r2,64
  808824:	9080030d 	sth	r2,12(r18)
  808828:	e0c00015 	stw	r3,0(fp)
  80882c:	003f0606 	br	808448 <__sfvwrite_r+0xb4>

00808830 <_fwalk_reent>:
  808830:	defff704 	addi	sp,sp,-36
  808834:	dcc00315 	stw	r19,12(sp)
  808838:	24c0b804 	addi	r19,r4,736
  80883c:	dd800615 	stw	r22,24(sp)
  808840:	dd400515 	stw	r21,20(sp)
  808844:	dfc00815 	stw	ra,32(sp)
  808848:	ddc00715 	stw	r23,28(sp)
  80884c:	dd000415 	stw	r20,16(sp)
  808850:	dc800215 	stw	r18,8(sp)
  808854:	dc400115 	stw	r17,4(sp)
  808858:	dc000015 	stw	r16,0(sp)
  80885c:	202b883a 	mov	r21,r4
  808860:	282d883a 	mov	r22,r5
  808864:	0807cec0 	call	807cec <__sfp_lock_acquire>
  808868:	98002126 	beq	r19,zero,8088f0 <_fwalk_reent+0xc0>
  80886c:	002f883a 	mov	r23,zero
  808870:	9c800117 	ldw	r18,4(r19)
  808874:	9c000217 	ldw	r16,8(r19)
  808878:	90bfffc4 	addi	r2,r18,-1
  80887c:	10000d16 	blt	r2,zero,8088b4 <_fwalk_reent+0x84>
  808880:	0023883a 	mov	r17,zero
  808884:	053fffc4 	movi	r20,-1
  808888:	8080030f 	ldh	r2,12(r16)
  80888c:	8c400044 	addi	r17,r17,1
  808890:	10000626 	beq	r2,zero,8088ac <_fwalk_reent+0x7c>
  808894:	8080038f 	ldh	r2,14(r16)
  808898:	800b883a 	mov	r5,r16
  80889c:	a809883a 	mov	r4,r21
  8088a0:	15000226 	beq	r2,r20,8088ac <_fwalk_reent+0x7c>
  8088a4:	b03ee83a 	callr	r22
  8088a8:	b8aeb03a 	or	r23,r23,r2
  8088ac:	84001704 	addi	r16,r16,92
  8088b0:	947ff51e 	bne	r18,r17,808888 <_fwalk_reent+0x58>
  8088b4:	9cc00017 	ldw	r19,0(r19)
  8088b8:	983fed1e 	bne	r19,zero,808870 <_fwalk_reent+0x40>
  8088bc:	0807cf00 	call	807cf0 <__sfp_lock_release>
  8088c0:	b805883a 	mov	r2,r23
  8088c4:	dfc00817 	ldw	ra,32(sp)
  8088c8:	ddc00717 	ldw	r23,28(sp)
  8088cc:	dd800617 	ldw	r22,24(sp)
  8088d0:	dd400517 	ldw	r21,20(sp)
  8088d4:	dd000417 	ldw	r20,16(sp)
  8088d8:	dcc00317 	ldw	r19,12(sp)
  8088dc:	dc800217 	ldw	r18,8(sp)
  8088e0:	dc400117 	ldw	r17,4(sp)
  8088e4:	dc000017 	ldw	r16,0(sp)
  8088e8:	dec00904 	addi	sp,sp,36
  8088ec:	f800283a 	ret
  8088f0:	002f883a 	mov	r23,zero
  8088f4:	003ff106 	br	8088bc <_fwalk_reent+0x8c>

008088f8 <_fwalk>:
  8088f8:	defff804 	addi	sp,sp,-32
  8088fc:	dcc00315 	stw	r19,12(sp)
  808900:	24c0b804 	addi	r19,r4,736
  808904:	dd400515 	stw	r21,20(sp)
  808908:	dfc00715 	stw	ra,28(sp)
  80890c:	dd800615 	stw	r22,24(sp)
  808910:	dd000415 	stw	r20,16(sp)
  808914:	dc800215 	stw	r18,8(sp)
  808918:	dc400115 	stw	r17,4(sp)
  80891c:	dc000015 	stw	r16,0(sp)
  808920:	282b883a 	mov	r21,r5
  808924:	0807cec0 	call	807cec <__sfp_lock_acquire>
  808928:	98001f26 	beq	r19,zero,8089a8 <_fwalk+0xb0>
  80892c:	002d883a 	mov	r22,zero
  808930:	9c800117 	ldw	r18,4(r19)
  808934:	9c000217 	ldw	r16,8(r19)
  808938:	90bfffc4 	addi	r2,r18,-1
  80893c:	10000c16 	blt	r2,zero,808970 <_fwalk+0x78>
  808940:	0023883a 	mov	r17,zero
  808944:	053fffc4 	movi	r20,-1
  808948:	8080030f 	ldh	r2,12(r16)
  80894c:	8c400044 	addi	r17,r17,1
  808950:	10000526 	beq	r2,zero,808968 <_fwalk+0x70>
  808954:	8080038f 	ldh	r2,14(r16)
  808958:	8009883a 	mov	r4,r16
  80895c:	15000226 	beq	r2,r20,808968 <_fwalk+0x70>
  808960:	a83ee83a 	callr	r21
  808964:	b0acb03a 	or	r22,r22,r2
  808968:	84001704 	addi	r16,r16,92
  80896c:	947ff61e 	bne	r18,r17,808948 <_fwalk+0x50>
  808970:	9cc00017 	ldw	r19,0(r19)
  808974:	983fee1e 	bne	r19,zero,808930 <_fwalk+0x38>
  808978:	0807cf00 	call	807cf0 <__sfp_lock_release>
  80897c:	b005883a 	mov	r2,r22
  808980:	dfc00717 	ldw	ra,28(sp)
  808984:	dd800617 	ldw	r22,24(sp)
  808988:	dd400517 	ldw	r21,20(sp)
  80898c:	dd000417 	ldw	r20,16(sp)
  808990:	dcc00317 	ldw	r19,12(sp)
  808994:	dc800217 	ldw	r18,8(sp)
  808998:	dc400117 	ldw	r17,4(sp)
  80899c:	dc000017 	ldw	r16,0(sp)
  8089a0:	dec00804 	addi	sp,sp,32
  8089a4:	f800283a 	ret
  8089a8:	002d883a 	mov	r22,zero
  8089ac:	003ff206 	br	808978 <_fwalk+0x80>

008089b0 <__locale_charset>:
  8089b0:	d0a00517 	ldw	r2,-32748(gp)
  8089b4:	f800283a 	ret

008089b8 <_localeconv_r>:
  8089b8:	00802074 	movhi	r2,129
  8089bc:	108edf04 	addi	r2,r2,15228
  8089c0:	f800283a 	ret

008089c4 <localeconv>:
  8089c4:	00802074 	movhi	r2,129
  8089c8:	10966304 	addi	r2,r2,22924
  8089cc:	11000017 	ldw	r4,0(r2)
  8089d0:	08089b81 	jmpi	8089b8 <_localeconv_r>

008089d4 <_setlocale_r>:
  8089d4:	defffc04 	addi	sp,sp,-16
  8089d8:	00c02074 	movhi	r3,129
  8089dc:	18ce2204 	addi	r3,r3,14472
  8089e0:	dc800215 	stw	r18,8(sp)
  8089e4:	dc400115 	stw	r17,4(sp)
  8089e8:	dc000015 	stw	r16,0(sp)
  8089ec:	2023883a 	mov	r17,r4
  8089f0:	2825883a 	mov	r18,r5
  8089f4:	dfc00315 	stw	ra,12(sp)
  8089f8:	3021883a 	mov	r16,r6
  8089fc:	3009883a 	mov	r4,r6
  808a00:	180b883a 	mov	r5,r3
  808a04:	30000926 	beq	r6,zero,808a2c <_setlocale_r+0x58>
  808a08:	080a9d40 	call	80a9d4 <strcmp>
  808a0c:	8009883a 	mov	r4,r16
  808a10:	01402074 	movhi	r5,129
  808a14:	294e4704 	addi	r5,r5,14620
  808a18:	10000b1e 	bne	r2,zero,808a48 <_setlocale_r+0x74>
  808a1c:	8c000d15 	stw	r16,52(r17)
  808a20:	8c800c15 	stw	r18,48(r17)
  808a24:	00c02074 	movhi	r3,129
  808a28:	18ce2204 	addi	r3,r3,14472
  808a2c:	1805883a 	mov	r2,r3
  808a30:	dfc00317 	ldw	ra,12(sp)
  808a34:	dc800217 	ldw	r18,8(sp)
  808a38:	dc400117 	ldw	r17,4(sp)
  808a3c:	dc000017 	ldw	r16,0(sp)
  808a40:	dec00404 	addi	sp,sp,16
  808a44:	f800283a 	ret
  808a48:	080a9d40 	call	80a9d4 <strcmp>
  808a4c:	0007883a 	mov	r3,zero
  808a50:	103ff226 	beq	r2,zero,808a1c <_setlocale_r+0x48>
  808a54:	003ff506 	br	808a2c <_setlocale_r+0x58>

00808a58 <setlocale>:
  808a58:	01802074 	movhi	r6,129
  808a5c:	31966304 	addi	r6,r6,22924
  808a60:	2007883a 	mov	r3,r4
  808a64:	31000017 	ldw	r4,0(r6)
  808a68:	280d883a 	mov	r6,r5
  808a6c:	180b883a 	mov	r5,r3
  808a70:	08089d41 	jmpi	8089d4 <_setlocale_r>

00808a74 <__smakebuf_r>:
  808a74:	2880030b 	ldhu	r2,12(r5)
  808a78:	deffed04 	addi	sp,sp,-76
  808a7c:	dc401015 	stw	r17,64(sp)
  808a80:	1080008c 	andi	r2,r2,2
  808a84:	dc000f15 	stw	r16,60(sp)
  808a88:	dfc01215 	stw	ra,72(sp)
  808a8c:	dc801115 	stw	r18,68(sp)
  808a90:	2821883a 	mov	r16,r5
  808a94:	2023883a 	mov	r17,r4
  808a98:	10000b26 	beq	r2,zero,808ac8 <__smakebuf_r+0x54>
  808a9c:	28c010c4 	addi	r3,r5,67
  808aa0:	00800044 	movi	r2,1
  808aa4:	28800515 	stw	r2,20(r5)
  808aa8:	28c00415 	stw	r3,16(r5)
  808aac:	28c00015 	stw	r3,0(r5)
  808ab0:	dfc01217 	ldw	ra,72(sp)
  808ab4:	dc801117 	ldw	r18,68(sp)
  808ab8:	dc401017 	ldw	r17,64(sp)
  808abc:	dc000f17 	ldw	r16,60(sp)
  808ac0:	dec01304 	addi	sp,sp,76
  808ac4:	f800283a 	ret
  808ac8:	2940038f 	ldh	r5,14(r5)
  808acc:	28002116 	blt	r5,zero,808b54 <__smakebuf_r+0xe0>
  808ad0:	d80d883a 	mov	r6,sp
  808ad4:	080ae9c0 	call	80ae9c <_fstat_r>
  808ad8:	10001e16 	blt	r2,zero,808b54 <__smakebuf_r+0xe0>
  808adc:	d8800117 	ldw	r2,4(sp)
  808ae0:	00e00014 	movui	r3,32768
  808ae4:	113c000c 	andi	r4,r2,61440
  808ae8:	20c03126 	beq	r4,r3,808bb0 <__smakebuf_r+0x13c>
  808aec:	8080030b 	ldhu	r2,12(r16)
  808af0:	00c80004 	movi	r3,8192
  808af4:	10820014 	ori	r2,r2,2048
  808af8:	8080030d 	sth	r2,12(r16)
  808afc:	20c01e26 	beq	r4,r3,808b78 <__smakebuf_r+0x104>
  808b00:	04810004 	movi	r18,1024
  808b04:	8809883a 	mov	r4,r17
  808b08:	900b883a 	mov	r5,r18
  808b0c:	080360c0 	call	80360c <_malloc_r>
  808b10:	1009883a 	mov	r4,r2
  808b14:	10003126 	beq	r2,zero,808bdc <__smakebuf_r+0x168>
  808b18:	80c0030b 	ldhu	r3,12(r16)
  808b1c:	00802034 	movhi	r2,128
  808b20:	109f7804 	addi	r2,r2,32224
  808b24:	88800f15 	stw	r2,60(r17)
  808b28:	18c02014 	ori	r3,r3,128
  808b2c:	84800515 	stw	r18,20(r16)
  808b30:	80c0030d 	sth	r3,12(r16)
  808b34:	81000415 	stw	r4,16(r16)
  808b38:	81000015 	stw	r4,0(r16)
  808b3c:	dfc01217 	ldw	ra,72(sp)
  808b40:	dc801117 	ldw	r18,68(sp)
  808b44:	dc401017 	ldw	r17,64(sp)
  808b48:	dc000f17 	ldw	r16,60(sp)
  808b4c:	dec01304 	addi	sp,sp,76
  808b50:	f800283a 	ret
  808b54:	80c0030b 	ldhu	r3,12(r16)
  808b58:	1880200c 	andi	r2,r3,128
  808b5c:	10000426 	beq	r2,zero,808b70 <__smakebuf_r+0xfc>
  808b60:	04801004 	movi	r18,64
  808b64:	18820014 	ori	r2,r3,2048
  808b68:	8080030d 	sth	r2,12(r16)
  808b6c:	003fe506 	br	808b04 <__smakebuf_r+0x90>
  808b70:	04810004 	movi	r18,1024
  808b74:	003ffb06 	br	808b64 <__smakebuf_r+0xf0>
  808b78:	8140038f 	ldh	r5,14(r16)
  808b7c:	8809883a 	mov	r4,r17
  808b80:	080af100 	call	80af10 <_isatty_r>
  808b84:	103fde26 	beq	r2,zero,808b00 <__smakebuf_r+0x8c>
  808b88:	8080030b 	ldhu	r2,12(r16)
  808b8c:	80c010c4 	addi	r3,r16,67
  808b90:	04810004 	movi	r18,1024
  808b94:	10800054 	ori	r2,r2,1
  808b98:	8080030d 	sth	r2,12(r16)
  808b9c:	00800044 	movi	r2,1
  808ba0:	80c00415 	stw	r3,16(r16)
  808ba4:	80800515 	stw	r2,20(r16)
  808ba8:	80c00015 	stw	r3,0(r16)
  808bac:	003fd506 	br	808b04 <__smakebuf_r+0x90>
  808bb0:	80c00a17 	ldw	r3,40(r16)
  808bb4:	00802074 	movhi	r2,129
  808bb8:	10aa2404 	addi	r2,r2,-22384
  808bbc:	18bfcb1e 	bne	r3,r2,808aec <__smakebuf_r+0x78>
  808bc0:	8080030b 	ldhu	r2,12(r16)
  808bc4:	00c10004 	movi	r3,1024
  808bc8:	1825883a 	mov	r18,r3
  808bcc:	10c4b03a 	or	r2,r2,r3
  808bd0:	8080030d 	sth	r2,12(r16)
  808bd4:	80c01315 	stw	r3,76(r16)
  808bd8:	003fca06 	br	808b04 <__smakebuf_r+0x90>
  808bdc:	8100030b 	ldhu	r4,12(r16)
  808be0:	2080800c 	andi	r2,r4,512
  808be4:	103fb21e 	bne	r2,zero,808ab0 <__smakebuf_r+0x3c>
  808be8:	80c010c4 	addi	r3,r16,67
  808bec:	21000094 	ori	r4,r4,2
  808bf0:	00800044 	movi	r2,1
  808bf4:	80800515 	stw	r2,20(r16)
  808bf8:	8100030d 	sth	r4,12(r16)
  808bfc:	80c00415 	stw	r3,16(r16)
  808c00:	80c00015 	stw	r3,0(r16)
  808c04:	003faa06 	br	808ab0 <__smakebuf_r+0x3c>

00808c08 <memchr>:
  808c08:	008000c4 	movi	r2,3
  808c0c:	29403fcc 	andi	r5,r5,255
  808c10:	2007883a 	mov	r3,r4
  808c14:	1180022e 	bgeu	r2,r6,808c20 <memchr+0x18>
  808c18:	2084703a 	and	r2,r4,r2
  808c1c:	10000b26 	beq	r2,zero,808c4c <memchr+0x44>
  808c20:	313fffc4 	addi	r4,r6,-1
  808c24:	3000051e 	bne	r6,zero,808c3c <memchr+0x34>
  808c28:	00002c06 	br	808cdc <memchr+0xd4>
  808c2c:	213fffc4 	addi	r4,r4,-1
  808c30:	00bfffc4 	movi	r2,-1
  808c34:	18c00044 	addi	r3,r3,1
  808c38:	20802826 	beq	r4,r2,808cdc <memchr+0xd4>
  808c3c:	18800003 	ldbu	r2,0(r3)
  808c40:	28bffa1e 	bne	r5,r2,808c2c <memchr+0x24>
  808c44:	1805883a 	mov	r2,r3
  808c48:	f800283a 	ret
  808c4c:	0011883a 	mov	r8,zero
  808c50:	0007883a 	mov	r3,zero
  808c54:	01c00104 	movi	r7,4
  808c58:	4004923a 	slli	r2,r8,8
  808c5c:	18c00044 	addi	r3,r3,1
  808c60:	1151883a 	add	r8,r2,r5
  808c64:	19fffc1e 	bne	r3,r7,808c58 <memchr+0x50>
  808c68:	02bfbff4 	movhi	r10,65279
  808c6c:	52bfbfc4 	addi	r10,r10,-257
  808c70:	02602074 	movhi	r9,32897
  808c74:	4a602004 	addi	r9,r9,-32640
  808c78:	02c000c4 	movi	r11,3
  808c7c:	20800017 	ldw	r2,0(r4)
  808c80:	31bfff04 	addi	r6,r6,-4
  808c84:	200f883a 	mov	r7,r4
  808c88:	1204f03a 	xor	r2,r2,r8
  808c8c:	1287883a 	add	r3,r2,r10
  808c90:	1a46703a 	and	r3,r3,r9
  808c94:	0084303a 	nor	r2,zero,r2
  808c98:	10c4703a 	and	r2,r2,r3
  808c9c:	10000b26 	beq	r2,zero,808ccc <memchr+0xc4>
  808ca0:	20800003 	ldbu	r2,0(r4)
  808ca4:	28800f26 	beq	r5,r2,808ce4 <memchr+0xdc>
  808ca8:	20800043 	ldbu	r2,1(r4)
  808cac:	21c00044 	addi	r7,r4,1
  808cb0:	28800c26 	beq	r5,r2,808ce4 <memchr+0xdc>
  808cb4:	20800083 	ldbu	r2,2(r4)
  808cb8:	21c00084 	addi	r7,r4,2
  808cbc:	28800926 	beq	r5,r2,808ce4 <memchr+0xdc>
  808cc0:	208000c3 	ldbu	r2,3(r4)
  808cc4:	21c000c4 	addi	r7,r4,3
  808cc8:	28800626 	beq	r5,r2,808ce4 <memchr+0xdc>
  808ccc:	21000104 	addi	r4,r4,4
  808cd0:	59bfea36 	bltu	r11,r6,808c7c <memchr+0x74>
  808cd4:	2007883a 	mov	r3,r4
  808cd8:	003fd106 	br	808c20 <memchr+0x18>
  808cdc:	0005883a 	mov	r2,zero
  808ce0:	f800283a 	ret
  808ce4:	3805883a 	mov	r2,r7
  808ce8:	f800283a 	ret

00808cec <memmove>:
  808cec:	2807883a 	mov	r3,r5
  808cf0:	2011883a 	mov	r8,r4
  808cf4:	29000c2e 	bgeu	r5,r4,808d28 <memmove+0x3c>
  808cf8:	298f883a 	add	r7,r5,r6
  808cfc:	21c00a2e 	bgeu	r4,r7,808d28 <memmove+0x3c>
  808d00:	30000726 	beq	r6,zero,808d20 <memmove+0x34>
  808d04:	2187883a 	add	r3,r4,r6
  808d08:	198dc83a 	sub	r6,r3,r6
  808d0c:	39ffffc4 	addi	r7,r7,-1
  808d10:	38800003 	ldbu	r2,0(r7)
  808d14:	18ffffc4 	addi	r3,r3,-1
  808d18:	18800005 	stb	r2,0(r3)
  808d1c:	19bffb1e 	bne	r3,r6,808d0c <memmove+0x20>
  808d20:	2005883a 	mov	r2,r4
  808d24:	f800283a 	ret
  808d28:	01c003c4 	movi	r7,15
  808d2c:	39800a36 	bltu	r7,r6,808d58 <memmove+0x6c>
  808d30:	303ffb26 	beq	r6,zero,808d20 <memmove+0x34>
  808d34:	400f883a 	mov	r7,r8
  808d38:	320d883a 	add	r6,r6,r8
  808d3c:	28800003 	ldbu	r2,0(r5)
  808d40:	29400044 	addi	r5,r5,1
  808d44:	38800005 	stb	r2,0(r7)
  808d48:	39c00044 	addi	r7,r7,1
  808d4c:	39bffb1e 	bne	r7,r6,808d3c <memmove+0x50>
  808d50:	2005883a 	mov	r2,r4
  808d54:	f800283a 	ret
  808d58:	1904b03a 	or	r2,r3,r4
  808d5c:	108000cc 	andi	r2,r2,3
  808d60:	103ff31e 	bne	r2,zero,808d30 <memmove+0x44>
  808d64:	3811883a 	mov	r8,r7
  808d68:	180b883a 	mov	r5,r3
  808d6c:	200f883a 	mov	r7,r4
  808d70:	28c00017 	ldw	r3,0(r5)
  808d74:	31bffc04 	addi	r6,r6,-16
  808d78:	38c00015 	stw	r3,0(r7)
  808d7c:	28800117 	ldw	r2,4(r5)
  808d80:	38800115 	stw	r2,4(r7)
  808d84:	28c00217 	ldw	r3,8(r5)
  808d88:	38c00215 	stw	r3,8(r7)
  808d8c:	28800317 	ldw	r2,12(r5)
  808d90:	29400404 	addi	r5,r5,16
  808d94:	38800315 	stw	r2,12(r7)
  808d98:	39c00404 	addi	r7,r7,16
  808d9c:	41bff436 	bltu	r8,r6,808d70 <memmove+0x84>
  808da0:	008000c4 	movi	r2,3
  808da4:	1180072e 	bgeu	r2,r6,808dc4 <memmove+0xd8>
  808da8:	1007883a 	mov	r3,r2
  808dac:	28800017 	ldw	r2,0(r5)
  808db0:	31bfff04 	addi	r6,r6,-4
  808db4:	29400104 	addi	r5,r5,4
  808db8:	38800015 	stw	r2,0(r7)
  808dbc:	39c00104 	addi	r7,r7,4
  808dc0:	19bffa36 	bltu	r3,r6,808dac <memmove+0xc0>
  808dc4:	3811883a 	mov	r8,r7
  808dc8:	003fd906 	br	808d30 <memmove+0x44>

00808dcc <memset>:
  808dcc:	008000c4 	movi	r2,3
  808dd0:	29403fcc 	andi	r5,r5,255
  808dd4:	2007883a 	mov	r3,r4
  808dd8:	1180022e 	bgeu	r2,r6,808de4 <memset+0x18>
  808ddc:	2084703a 	and	r2,r4,r2
  808de0:	10000826 	beq	r2,zero,808e04 <memset+0x38>
  808de4:	30000526 	beq	r6,zero,808dfc <memset+0x30>
  808de8:	2805883a 	mov	r2,r5
  808dec:	30cd883a 	add	r6,r6,r3
  808df0:	18800005 	stb	r2,0(r3)
  808df4:	18c00044 	addi	r3,r3,1
  808df8:	19bffd1e 	bne	r3,r6,808df0 <memset+0x24>
  808dfc:	2005883a 	mov	r2,r4
  808e00:	f800283a 	ret
  808e04:	2804923a 	slli	r2,r5,8
  808e08:	020003c4 	movi	r8,15
  808e0c:	200f883a 	mov	r7,r4
  808e10:	2884b03a 	or	r2,r5,r2
  808e14:	1006943a 	slli	r3,r2,16
  808e18:	10c6b03a 	or	r3,r2,r3
  808e1c:	41800a2e 	bgeu	r8,r6,808e48 <memset+0x7c>
  808e20:	4005883a 	mov	r2,r8
  808e24:	31bffc04 	addi	r6,r6,-16
  808e28:	38c00015 	stw	r3,0(r7)
  808e2c:	38c00115 	stw	r3,4(r7)
  808e30:	38c00215 	stw	r3,8(r7)
  808e34:	38c00315 	stw	r3,12(r7)
  808e38:	39c00404 	addi	r7,r7,16
  808e3c:	11bff936 	bltu	r2,r6,808e24 <memset+0x58>
  808e40:	008000c4 	movi	r2,3
  808e44:	1180052e 	bgeu	r2,r6,808e5c <memset+0x90>
  808e48:	31bfff04 	addi	r6,r6,-4
  808e4c:	008000c4 	movi	r2,3
  808e50:	38c00015 	stw	r3,0(r7)
  808e54:	39c00104 	addi	r7,r7,4
  808e58:	11bffb36 	bltu	r2,r6,808e48 <memset+0x7c>
  808e5c:	3807883a 	mov	r3,r7
  808e60:	003fe006 	br	808de4 <memset+0x18>

00808e64 <_Bfree>:
  808e64:	28000826 	beq	r5,zero,808e88 <_Bfree+0x24>
  808e68:	28800117 	ldw	r2,4(r5)
  808e6c:	21001317 	ldw	r4,76(r4)
  808e70:	1085883a 	add	r2,r2,r2
  808e74:	1085883a 	add	r2,r2,r2
  808e78:	1105883a 	add	r2,r2,r4
  808e7c:	10c00017 	ldw	r3,0(r2)
  808e80:	28c00015 	stw	r3,0(r5)
  808e84:	11400015 	stw	r5,0(r2)
  808e88:	f800283a 	ret

00808e8c <__hi0bits>:
  808e8c:	20bfffec 	andhi	r2,r4,65535
  808e90:	10001426 	beq	r2,zero,808ee4 <__hi0bits+0x58>
  808e94:	0007883a 	mov	r3,zero
  808e98:	20bfc02c 	andhi	r2,r4,65280
  808e9c:	1000021e 	bne	r2,zero,808ea8 <__hi0bits+0x1c>
  808ea0:	2008923a 	slli	r4,r4,8
  808ea4:	18c00204 	addi	r3,r3,8
  808ea8:	20bc002c 	andhi	r2,r4,61440
  808eac:	1000021e 	bne	r2,zero,808eb8 <__hi0bits+0x2c>
  808eb0:	2008913a 	slli	r4,r4,4
  808eb4:	18c00104 	addi	r3,r3,4
  808eb8:	20b0002c 	andhi	r2,r4,49152
  808ebc:	1000031e 	bne	r2,zero,808ecc <__hi0bits+0x40>
  808ec0:	2105883a 	add	r2,r4,r4
  808ec4:	18c00084 	addi	r3,r3,2
  808ec8:	1089883a 	add	r4,r2,r2
  808ecc:	20000316 	blt	r4,zero,808edc <__hi0bits+0x50>
  808ed0:	2090002c 	andhi	r2,r4,16384
  808ed4:	10000626 	beq	r2,zero,808ef0 <__hi0bits+0x64>
  808ed8:	18c00044 	addi	r3,r3,1
  808edc:	1805883a 	mov	r2,r3
  808ee0:	f800283a 	ret
  808ee4:	2008943a 	slli	r4,r4,16
  808ee8:	00c00404 	movi	r3,16
  808eec:	003fea06 	br	808e98 <__hi0bits+0xc>
  808ef0:	00c00804 	movi	r3,32
  808ef4:	1805883a 	mov	r2,r3
  808ef8:	f800283a 	ret

00808efc <__lo0bits>:
  808efc:	20c00017 	ldw	r3,0(r4)
  808f00:	188001cc 	andi	r2,r3,7
  808f04:	10000a26 	beq	r2,zero,808f30 <__lo0bits+0x34>
  808f08:	1880004c 	andi	r2,r3,1
  808f0c:	1005003a 	cmpeq	r2,r2,zero
  808f10:	10002126 	beq	r2,zero,808f98 <__lo0bits+0x9c>
  808f14:	1880008c 	andi	r2,r3,2
  808f18:	1000251e 	bne	r2,zero,808fb0 <__lo0bits+0xb4>
  808f1c:	1804d0ba 	srli	r2,r3,2
  808f20:	01400084 	movi	r5,2
  808f24:	20800015 	stw	r2,0(r4)
  808f28:	2805883a 	mov	r2,r5
  808f2c:	f800283a 	ret
  808f30:	18bfffcc 	andi	r2,r3,65535
  808f34:	10001526 	beq	r2,zero,808f8c <__lo0bits+0x90>
  808f38:	000b883a 	mov	r5,zero
  808f3c:	18803fcc 	andi	r2,r3,255
  808f40:	1000021e 	bne	r2,zero,808f4c <__lo0bits+0x50>
  808f44:	1806d23a 	srli	r3,r3,8
  808f48:	29400204 	addi	r5,r5,8
  808f4c:	188003cc 	andi	r2,r3,15
  808f50:	1000021e 	bne	r2,zero,808f5c <__lo0bits+0x60>
  808f54:	1806d13a 	srli	r3,r3,4
  808f58:	29400104 	addi	r5,r5,4
  808f5c:	188000cc 	andi	r2,r3,3
  808f60:	1000021e 	bne	r2,zero,808f6c <__lo0bits+0x70>
  808f64:	1806d0ba 	srli	r3,r3,2
  808f68:	29400084 	addi	r5,r5,2
  808f6c:	1880004c 	andi	r2,r3,1
  808f70:	1000031e 	bne	r2,zero,808f80 <__lo0bits+0x84>
  808f74:	1806d07a 	srli	r3,r3,1
  808f78:	18000a26 	beq	r3,zero,808fa4 <__lo0bits+0xa8>
  808f7c:	29400044 	addi	r5,r5,1
  808f80:	2805883a 	mov	r2,r5
  808f84:	20c00015 	stw	r3,0(r4)
  808f88:	f800283a 	ret
  808f8c:	1806d43a 	srli	r3,r3,16
  808f90:	01400404 	movi	r5,16
  808f94:	003fe906 	br	808f3c <__lo0bits+0x40>
  808f98:	000b883a 	mov	r5,zero
  808f9c:	2805883a 	mov	r2,r5
  808fa0:	f800283a 	ret
  808fa4:	01400804 	movi	r5,32
  808fa8:	2805883a 	mov	r2,r5
  808fac:	f800283a 	ret
  808fb0:	1804d07a 	srli	r2,r3,1
  808fb4:	01400044 	movi	r5,1
  808fb8:	20800015 	stw	r2,0(r4)
  808fbc:	003fda06 	br	808f28 <__lo0bits+0x2c>

00808fc0 <__mcmp>:
  808fc0:	20800417 	ldw	r2,16(r4)
  808fc4:	28c00417 	ldw	r3,16(r5)
  808fc8:	10cfc83a 	sub	r7,r2,r3
  808fcc:	38000c1e 	bne	r7,zero,809000 <__mcmp+0x40>
  808fd0:	18c5883a 	add	r2,r3,r3
  808fd4:	1085883a 	add	r2,r2,r2
  808fd8:	10c00504 	addi	r3,r2,20
  808fdc:	21000504 	addi	r4,r4,20
  808fe0:	28cb883a 	add	r5,r5,r3
  808fe4:	2085883a 	add	r2,r4,r2
  808fe8:	10bfff04 	addi	r2,r2,-4
  808fec:	297fff04 	addi	r5,r5,-4
  808ff0:	11800017 	ldw	r6,0(r2)
  808ff4:	28c00017 	ldw	r3,0(r5)
  808ff8:	30c0031e 	bne	r6,r3,809008 <__mcmp+0x48>
  808ffc:	20bffa36 	bltu	r4,r2,808fe8 <__mcmp+0x28>
  809000:	3805883a 	mov	r2,r7
  809004:	f800283a 	ret
  809008:	30c00336 	bltu	r6,r3,809018 <__mcmp+0x58>
  80900c:	01c00044 	movi	r7,1
  809010:	3805883a 	mov	r2,r7
  809014:	f800283a 	ret
  809018:	01ffffc4 	movi	r7,-1
  80901c:	003ff806 	br	809000 <__mcmp+0x40>

00809020 <__ulp>:
  809020:	295ffc2c 	andhi	r5,r5,32752
  809024:	013f3034 	movhi	r4,64704
  809028:	290b883a 	add	r5,r5,r4
  80902c:	0145c83a 	sub	r2,zero,r5
  809030:	1007d53a 	srai	r3,r2,20
  809034:	000d883a 	mov	r6,zero
  809038:	0140040e 	bge	zero,r5,80904c <__ulp+0x2c>
  80903c:	280f883a 	mov	r7,r5
  809040:	3807883a 	mov	r3,r7
  809044:	3005883a 	mov	r2,r6
  809048:	f800283a 	ret
  80904c:	008004c4 	movi	r2,19
  809050:	193ffb04 	addi	r4,r3,-20
  809054:	10c00c0e 	bge	r2,r3,809088 <__ulp+0x68>
  809058:	008007c4 	movi	r2,31
  80905c:	1107c83a 	sub	r3,r2,r4
  809060:	00800784 	movi	r2,30
  809064:	01400044 	movi	r5,1
  809068:	11000216 	blt	r2,r4,809074 <__ulp+0x54>
  80906c:	00800044 	movi	r2,1
  809070:	10ca983a 	sll	r5,r2,r3
  809074:	000f883a 	mov	r7,zero
  809078:	280d883a 	mov	r6,r5
  80907c:	3807883a 	mov	r3,r7
  809080:	3005883a 	mov	r2,r6
  809084:	f800283a 	ret
  809088:	00800234 	movhi	r2,8
  80908c:	10cfd83a 	sra	r7,r2,r3
  809090:	000d883a 	mov	r6,zero
  809094:	3005883a 	mov	r2,r6
  809098:	3807883a 	mov	r3,r7
  80909c:	f800283a 	ret

008090a0 <__b2d>:
  8090a0:	20800417 	ldw	r2,16(r4)
  8090a4:	defff904 	addi	sp,sp,-28
  8090a8:	dd000415 	stw	r20,16(sp)
  8090ac:	1085883a 	add	r2,r2,r2
  8090b0:	25000504 	addi	r20,r4,20
  8090b4:	1085883a 	add	r2,r2,r2
  8090b8:	dc000015 	stw	r16,0(sp)
  8090bc:	a0a1883a 	add	r16,r20,r2
  8090c0:	dd400515 	stw	r21,20(sp)
  8090c4:	857fff17 	ldw	r21,-4(r16)
  8090c8:	dc400115 	stw	r17,4(sp)
  8090cc:	dfc00615 	stw	ra,24(sp)
  8090d0:	a809883a 	mov	r4,r21
  8090d4:	2823883a 	mov	r17,r5
  8090d8:	dcc00315 	stw	r19,12(sp)
  8090dc:	dc800215 	stw	r18,8(sp)
  8090e0:	0808e8c0 	call	808e8c <__hi0bits>
  8090e4:	100b883a 	mov	r5,r2
  8090e8:	00800804 	movi	r2,32
  8090ec:	1145c83a 	sub	r2,r2,r5
  8090f0:	88800015 	stw	r2,0(r17)
  8090f4:	00800284 	movi	r2,10
  8090f8:	80ffff04 	addi	r3,r16,-4
  8090fc:	11401416 	blt	r2,r5,809150 <__b2d+0xb0>
  809100:	008002c4 	movi	r2,11
  809104:	1149c83a 	sub	r4,r2,r5
  809108:	a0c02736 	bltu	r20,r3,8091a8 <__b2d+0x108>
  80910c:	000d883a 	mov	r6,zero
  809110:	28800544 	addi	r2,r5,21
  809114:	a906d83a 	srl	r3,r21,r4
  809118:	a884983a 	sll	r2,r21,r2
  80911c:	1ccffc34 	orhi	r19,r3,16368
  809120:	11a4b03a 	or	r18,r2,r6
  809124:	9005883a 	mov	r2,r18
  809128:	9807883a 	mov	r3,r19
  80912c:	dfc00617 	ldw	ra,24(sp)
  809130:	dd400517 	ldw	r21,20(sp)
  809134:	dd000417 	ldw	r20,16(sp)
  809138:	dcc00317 	ldw	r19,12(sp)
  80913c:	dc800217 	ldw	r18,8(sp)
  809140:	dc400117 	ldw	r17,4(sp)
  809144:	dc000017 	ldw	r16,0(sp)
  809148:	dec00704 	addi	sp,sp,28
  80914c:	f800283a 	ret
  809150:	a0c00e36 	bltu	r20,r3,80918c <__b2d+0xec>
  809154:	293ffd44 	addi	r4,r5,-11
  809158:	000d883a 	mov	r6,zero
  80915c:	20000f26 	beq	r4,zero,80919c <__b2d+0xfc>
  809160:	00800804 	movi	r2,32
  809164:	110bc83a 	sub	r5,r2,r4
  809168:	a0c01236 	bltu	r20,r3,8091b4 <__b2d+0x114>
  80916c:	000f883a 	mov	r7,zero
  809170:	a904983a 	sll	r2,r21,r4
  809174:	3146d83a 	srl	r3,r6,r5
  809178:	3108983a 	sll	r4,r6,r4
  80917c:	108ffc34 	orhi	r2,r2,16368
  809180:	18a6b03a 	or	r19,r3,r2
  809184:	3924b03a 	or	r18,r7,r4
  809188:	003fe606 	br	809124 <__b2d+0x84>
  80918c:	293ffd44 	addi	r4,r5,-11
  809190:	81bffe17 	ldw	r6,-8(r16)
  809194:	80fffe04 	addi	r3,r16,-8
  809198:	203ff11e 	bne	r4,zero,809160 <__b2d+0xc0>
  80919c:	accffc34 	orhi	r19,r21,16368
  8091a0:	3025883a 	mov	r18,r6
  8091a4:	003fdf06 	br	809124 <__b2d+0x84>
  8091a8:	18bfff17 	ldw	r2,-4(r3)
  8091ac:	110cd83a 	srl	r6,r2,r4
  8091b0:	003fd706 	br	809110 <__b2d+0x70>
  8091b4:	18bfff17 	ldw	r2,-4(r3)
  8091b8:	114ed83a 	srl	r7,r2,r5
  8091bc:	003fec06 	br	809170 <__b2d+0xd0>

008091c0 <__ratio>:
  8091c0:	defff904 	addi	sp,sp,-28
  8091c4:	dc400215 	stw	r17,8(sp)
  8091c8:	2823883a 	mov	r17,r5
  8091cc:	d80b883a 	mov	r5,sp
  8091d0:	dfc00615 	stw	ra,24(sp)
  8091d4:	dd000515 	stw	r20,20(sp)
  8091d8:	dcc00415 	stw	r19,16(sp)
  8091dc:	dc800315 	stw	r18,12(sp)
  8091e0:	2025883a 	mov	r18,r4
  8091e4:	08090a00 	call	8090a0 <__b2d>
  8091e8:	8809883a 	mov	r4,r17
  8091ec:	d9400104 	addi	r5,sp,4
  8091f0:	1027883a 	mov	r19,r2
  8091f4:	1829883a 	mov	r20,r3
  8091f8:	08090a00 	call	8090a0 <__b2d>
  8091fc:	89000417 	ldw	r4,16(r17)
  809200:	91c00417 	ldw	r7,16(r18)
  809204:	d9800117 	ldw	r6,4(sp)
  809208:	180b883a 	mov	r5,r3
  80920c:	390fc83a 	sub	r7,r7,r4
  809210:	1009883a 	mov	r4,r2
  809214:	d8800017 	ldw	r2,0(sp)
  809218:	380e917a 	slli	r7,r7,5
  80921c:	2011883a 	mov	r8,r4
  809220:	1185c83a 	sub	r2,r2,r6
  809224:	11c5883a 	add	r2,r2,r7
  809228:	1006953a 	slli	r3,r2,20
  80922c:	2813883a 	mov	r9,r5
  809230:	00800d0e 	bge	zero,r2,809268 <__ratio+0xa8>
  809234:	1d29883a 	add	r20,r3,r20
  809238:	a00b883a 	mov	r5,r20
  80923c:	480f883a 	mov	r7,r9
  809240:	9809883a 	mov	r4,r19
  809244:	400d883a 	mov	r6,r8
  809248:	080bbfc0 	call	80bbfc <__divdf3>
  80924c:	dfc00617 	ldw	ra,24(sp)
  809250:	dd000517 	ldw	r20,20(sp)
  809254:	dcc00417 	ldw	r19,16(sp)
  809258:	dc800317 	ldw	r18,12(sp)
  80925c:	dc400217 	ldw	r17,8(sp)
  809260:	dec00704 	addi	sp,sp,28
  809264:	f800283a 	ret
  809268:	28d3c83a 	sub	r9,r5,r3
  80926c:	003ff206 	br	809238 <__ratio+0x78>

00809270 <_mprec_log10>:
  809270:	defffe04 	addi	sp,sp,-8
  809274:	008005c4 	movi	r2,23
  809278:	dc000015 	stw	r16,0(sp)
  80927c:	dfc00115 	stw	ra,4(sp)
  809280:	2021883a 	mov	r16,r4
  809284:	11000c16 	blt	r2,r4,8092b8 <_mprec_log10+0x48>
  809288:	200490fa 	slli	r2,r4,3
  80928c:	00c02074 	movhi	r3,129
  809290:	18ceeb04 	addi	r3,r3,15276
  809294:	10c5883a 	add	r2,r2,r3
  809298:	12400117 	ldw	r9,4(r2)
  80929c:	12000017 	ldw	r8,0(r2)
  8092a0:	4807883a 	mov	r3,r9
  8092a4:	4005883a 	mov	r2,r8
  8092a8:	dfc00117 	ldw	ra,4(sp)
  8092ac:	dc000017 	ldw	r16,0(sp)
  8092b0:	dec00204 	addi	sp,sp,8
  8092b4:	f800283a 	ret
  8092b8:	0011883a 	mov	r8,zero
  8092bc:	024ffc34 	movhi	r9,16368
  8092c0:	0005883a 	mov	r2,zero
  8092c4:	00d00934 	movhi	r3,16420
  8092c8:	480b883a 	mov	r5,r9
  8092cc:	4009883a 	mov	r4,r8
  8092d0:	180f883a 	mov	r7,r3
  8092d4:	100d883a 	mov	r6,r2
  8092d8:	08027a00 	call	8027a0 <__muldf3>
  8092dc:	843fffc4 	addi	r16,r16,-1
  8092e0:	1011883a 	mov	r8,r2
  8092e4:	1813883a 	mov	r9,r3
  8092e8:	803ff51e 	bne	r16,zero,8092c0 <_mprec_log10+0x50>
  8092ec:	4005883a 	mov	r2,r8
  8092f0:	4807883a 	mov	r3,r9
  8092f4:	dfc00117 	ldw	ra,4(sp)
  8092f8:	dc000017 	ldw	r16,0(sp)
  8092fc:	dec00204 	addi	sp,sp,8
  809300:	f800283a 	ret

00809304 <__copybits>:
  809304:	297fffc4 	addi	r5,r5,-1
  809308:	30800417 	ldw	r2,16(r6)
  80930c:	280bd17a 	srai	r5,r5,5
  809310:	31800504 	addi	r6,r6,20
  809314:	1085883a 	add	r2,r2,r2
  809318:	294b883a 	add	r5,r5,r5
  80931c:	294b883a 	add	r5,r5,r5
  809320:	1085883a 	add	r2,r2,r2
  809324:	290b883a 	add	r5,r5,r4
  809328:	3087883a 	add	r3,r6,r2
  80932c:	29400104 	addi	r5,r5,4
  809330:	30c0052e 	bgeu	r6,r3,809348 <__copybits+0x44>
  809334:	30800017 	ldw	r2,0(r6)
  809338:	31800104 	addi	r6,r6,4
  80933c:	20800015 	stw	r2,0(r4)
  809340:	21000104 	addi	r4,r4,4
  809344:	30fffb36 	bltu	r6,r3,809334 <__copybits+0x30>
  809348:	2140032e 	bgeu	r4,r5,809358 <__copybits+0x54>
  80934c:	20000015 	stw	zero,0(r4)
  809350:	21000104 	addi	r4,r4,4
  809354:	217ffd36 	bltu	r4,r5,80934c <__copybits+0x48>
  809358:	f800283a 	ret

0080935c <__any_on>:
  80935c:	20800417 	ldw	r2,16(r4)
  809360:	2807d17a 	srai	r3,r5,5
  809364:	21000504 	addi	r4,r4,20
  809368:	10c00d0e 	bge	r2,r3,8093a0 <__any_on+0x44>
  80936c:	1085883a 	add	r2,r2,r2
  809370:	1085883a 	add	r2,r2,r2
  809374:	208d883a 	add	r6,r4,r2
  809378:	2180182e 	bgeu	r4,r6,8093dc <__any_on+0x80>
  80937c:	30bfff17 	ldw	r2,-4(r6)
  809380:	30ffff04 	addi	r3,r6,-4
  809384:	1000041e 	bne	r2,zero,809398 <__any_on+0x3c>
  809388:	20c0142e 	bgeu	r4,r3,8093dc <__any_on+0x80>
  80938c:	18ffff04 	addi	r3,r3,-4
  809390:	18800017 	ldw	r2,0(r3)
  809394:	103ffc26 	beq	r2,zero,809388 <__any_on+0x2c>
  809398:	00800044 	movi	r2,1
  80939c:	f800283a 	ret
  8093a0:	18800a0e 	bge	r3,r2,8093cc <__any_on+0x70>
  8093a4:	294007cc 	andi	r5,r5,31
  8093a8:	28000826 	beq	r5,zero,8093cc <__any_on+0x70>
  8093ac:	18c5883a 	add	r2,r3,r3
  8093b0:	1085883a 	add	r2,r2,r2
  8093b4:	208d883a 	add	r6,r4,r2
  8093b8:	30c00017 	ldw	r3,0(r6)
  8093bc:	1944d83a 	srl	r2,r3,r5
  8093c0:	1144983a 	sll	r2,r2,r5
  8093c4:	18bff41e 	bne	r3,r2,809398 <__any_on+0x3c>
  8093c8:	003feb06 	br	809378 <__any_on+0x1c>
  8093cc:	18c5883a 	add	r2,r3,r3
  8093d0:	1085883a 	add	r2,r2,r2
  8093d4:	208d883a 	add	r6,r4,r2
  8093d8:	003fe706 	br	809378 <__any_on+0x1c>
  8093dc:	0005883a 	mov	r2,zero
  8093e0:	f800283a 	ret

008093e4 <_Balloc>:
  8093e4:	20c01317 	ldw	r3,76(r4)
  8093e8:	defffb04 	addi	sp,sp,-20
  8093ec:	dcc00315 	stw	r19,12(sp)
  8093f0:	dc800215 	stw	r18,8(sp)
  8093f4:	dfc00415 	stw	ra,16(sp)
  8093f8:	2825883a 	mov	r18,r5
  8093fc:	dc400115 	stw	r17,4(sp)
  809400:	dc000015 	stw	r16,0(sp)
  809404:	2027883a 	mov	r19,r4
  809408:	01800404 	movi	r6,16
  80940c:	01400104 	movi	r5,4
  809410:	18001726 	beq	r3,zero,809470 <_Balloc+0x8c>
  809414:	01400044 	movi	r5,1
  809418:	9485883a 	add	r2,r18,r18
  80941c:	2ca2983a 	sll	r17,r5,r18
  809420:	1085883a 	add	r2,r2,r2
  809424:	10c7883a 	add	r3,r2,r3
  809428:	1c000017 	ldw	r16,0(r3)
  80942c:	8c4d883a 	add	r6,r17,r17
  809430:	318d883a 	add	r6,r6,r6
  809434:	9809883a 	mov	r4,r19
  809438:	31800504 	addi	r6,r6,20
  80943c:	80001226 	beq	r16,zero,809488 <_Balloc+0xa4>
  809440:	80800017 	ldw	r2,0(r16)
  809444:	18800015 	stw	r2,0(r3)
  809448:	80000415 	stw	zero,16(r16)
  80944c:	80000315 	stw	zero,12(r16)
  809450:	8005883a 	mov	r2,r16
  809454:	dfc00417 	ldw	ra,16(sp)
  809458:	dcc00317 	ldw	r19,12(sp)
  80945c:	dc800217 	ldw	r18,8(sp)
  809460:	dc400117 	ldw	r17,4(sp)
  809464:	dc000017 	ldw	r16,0(sp)
  809468:	dec00504 	addi	sp,sp,20
  80946c:	f800283a 	ret
  809470:	080ac540 	call	80ac54 <_calloc_r>
  809474:	1007883a 	mov	r3,r2
  809478:	0021883a 	mov	r16,zero
  80947c:	98801315 	stw	r2,76(r19)
  809480:	103fe41e 	bne	r2,zero,809414 <_Balloc+0x30>
  809484:	003ff206 	br	809450 <_Balloc+0x6c>
  809488:	080ac540 	call	80ac54 <_calloc_r>
  80948c:	103ff026 	beq	r2,zero,809450 <_Balloc+0x6c>
  809490:	1021883a 	mov	r16,r2
  809494:	14800115 	stw	r18,4(r2)
  809498:	14400215 	stw	r17,8(r2)
  80949c:	003fea06 	br	809448 <_Balloc+0x64>

008094a0 <__d2b>:
  8094a0:	defff504 	addi	sp,sp,-44
  8094a4:	dcc00515 	stw	r19,20(sp)
  8094a8:	04c00044 	movi	r19,1
  8094ac:	dc000215 	stw	r16,8(sp)
  8094b0:	2821883a 	mov	r16,r5
  8094b4:	980b883a 	mov	r5,r19
  8094b8:	ddc00915 	stw	r23,36(sp)
  8094bc:	dd800815 	stw	r22,32(sp)
  8094c0:	dd400715 	stw	r21,28(sp)
  8094c4:	dd000615 	stw	r20,24(sp)
  8094c8:	dc800415 	stw	r18,16(sp)
  8094cc:	dc400315 	stw	r17,12(sp)
  8094d0:	dfc00a15 	stw	ra,40(sp)
  8094d4:	3023883a 	mov	r17,r6
  8094d8:	382d883a 	mov	r22,r7
  8094dc:	ddc00b17 	ldw	r23,44(sp)
  8094e0:	08093e40 	call	8093e4 <_Balloc>
  8094e4:	1025883a 	mov	r18,r2
  8094e8:	00a00034 	movhi	r2,32768
  8094ec:	10bfffc4 	addi	r2,r2,-1
  8094f0:	8888703a 	and	r4,r17,r2
  8094f4:	202ad53a 	srli	r21,r4,20
  8094f8:	00800434 	movhi	r2,16
  8094fc:	10bfffc4 	addi	r2,r2,-1
  809500:	8886703a 	and	r3,r17,r2
  809504:	a829003a 	cmpeq	r20,r21,zero
  809508:	800b883a 	mov	r5,r16
  80950c:	d8c00115 	stw	r3,4(sp)
  809510:	94000504 	addi	r16,r18,20
  809514:	a000021e 	bne	r20,zero,809520 <__d2b+0x80>
  809518:	18c00434 	orhi	r3,r3,16
  80951c:	d8c00115 	stw	r3,4(sp)
  809520:	28002726 	beq	r5,zero,8095c0 <__d2b+0x120>
  809524:	d809883a 	mov	r4,sp
  809528:	d9400015 	stw	r5,0(sp)
  80952c:	0808efc0 	call	808efc <__lo0bits>
  809530:	100d883a 	mov	r6,r2
  809534:	10003526 	beq	r2,zero,80960c <__d2b+0x16c>
  809538:	d8c00117 	ldw	r3,4(sp)
  80953c:	00800804 	movi	r2,32
  809540:	1185c83a 	sub	r2,r2,r6
  809544:	d9000017 	ldw	r4,0(sp)
  809548:	1886983a 	sll	r3,r3,r2
  80954c:	1906b03a 	or	r3,r3,r4
  809550:	90c00515 	stw	r3,20(r18)
  809554:	d8c00117 	ldw	r3,4(sp)
  809558:	1986d83a 	srl	r3,r3,r6
  80955c:	d8c00115 	stw	r3,4(sp)
  809560:	180b003a 	cmpeq	r5,r3,zero
  809564:	00800084 	movi	r2,2
  809568:	114bc83a 	sub	r5,r2,r5
  80956c:	80c00115 	stw	r3,4(r16)
  809570:	91400415 	stw	r5,16(r18)
  809574:	a0001a1e 	bne	r20,zero,8095e0 <__d2b+0x140>
  809578:	3545883a 	add	r2,r6,r21
  80957c:	10bef344 	addi	r2,r2,-1075
  809580:	00c00d44 	movi	r3,53
  809584:	b0800015 	stw	r2,0(r22)
  809588:	1987c83a 	sub	r3,r3,r6
  80958c:	b8c00015 	stw	r3,0(r23)
  809590:	9005883a 	mov	r2,r18
  809594:	dfc00a17 	ldw	ra,40(sp)
  809598:	ddc00917 	ldw	r23,36(sp)
  80959c:	dd800817 	ldw	r22,32(sp)
  8095a0:	dd400717 	ldw	r21,28(sp)
  8095a4:	dd000617 	ldw	r20,24(sp)
  8095a8:	dcc00517 	ldw	r19,20(sp)
  8095ac:	dc800417 	ldw	r18,16(sp)
  8095b0:	dc400317 	ldw	r17,12(sp)
  8095b4:	dc000217 	ldw	r16,8(sp)
  8095b8:	dec00b04 	addi	sp,sp,44
  8095bc:	f800283a 	ret
  8095c0:	d9000104 	addi	r4,sp,4
  8095c4:	0808efc0 	call	808efc <__lo0bits>
  8095c8:	11800804 	addi	r6,r2,32
  8095cc:	d8800117 	ldw	r2,4(sp)
  8095d0:	94c00415 	stw	r19,16(r18)
  8095d4:	980b883a 	mov	r5,r19
  8095d8:	90800515 	stw	r2,20(r18)
  8095dc:	a03fe626 	beq	r20,zero,809578 <__d2b+0xd8>
  8095e0:	2945883a 	add	r2,r5,r5
  8095e4:	1085883a 	add	r2,r2,r2
  8095e8:	1405883a 	add	r2,r2,r16
  8095ec:	113fff17 	ldw	r4,-4(r2)
  8095f0:	30fef384 	addi	r3,r6,-1074
  8095f4:	2820917a 	slli	r16,r5,5
  8095f8:	b0c00015 	stw	r3,0(r22)
  8095fc:	0808e8c0 	call	808e8c <__hi0bits>
  809600:	80a1c83a 	sub	r16,r16,r2
  809604:	bc000015 	stw	r16,0(r23)
  809608:	003fe106 	br	809590 <__d2b+0xf0>
  80960c:	d8800017 	ldw	r2,0(sp)
  809610:	90800515 	stw	r2,20(r18)
  809614:	d8c00117 	ldw	r3,4(sp)
  809618:	003fd106 	br	809560 <__d2b+0xc0>

0080961c <__mdiff>:
  80961c:	defffb04 	addi	sp,sp,-20
  809620:	dc000015 	stw	r16,0(sp)
  809624:	2821883a 	mov	r16,r5
  809628:	dc800215 	stw	r18,8(sp)
  80962c:	300b883a 	mov	r5,r6
  809630:	2025883a 	mov	r18,r4
  809634:	8009883a 	mov	r4,r16
  809638:	dc400115 	stw	r17,4(sp)
  80963c:	dfc00415 	stw	ra,16(sp)
  809640:	dcc00315 	stw	r19,12(sp)
  809644:	3023883a 	mov	r17,r6
  809648:	0808fc00 	call	808fc0 <__mcmp>
  80964c:	10004226 	beq	r2,zero,809758 <__mdiff+0x13c>
  809650:	10005016 	blt	r2,zero,809794 <__mdiff+0x178>
  809654:	0027883a 	mov	r19,zero
  809658:	81400117 	ldw	r5,4(r16)
  80965c:	9009883a 	mov	r4,r18
  809660:	08093e40 	call	8093e4 <_Balloc>
  809664:	1019883a 	mov	r12,r2
  809668:	82800417 	ldw	r10,16(r16)
  80966c:	88800417 	ldw	r2,16(r17)
  809670:	81800504 	addi	r6,r16,20
  809674:	5287883a 	add	r3,r10,r10
  809678:	1085883a 	add	r2,r2,r2
  80967c:	18c7883a 	add	r3,r3,r3
  809680:	1085883a 	add	r2,r2,r2
  809684:	8a000504 	addi	r8,r17,20
  809688:	64c00315 	stw	r19,12(r12)
  80968c:	30db883a 	add	r13,r6,r3
  809690:	4097883a 	add	r11,r8,r2
  809694:	61c00504 	addi	r7,r12,20
  809698:	0013883a 	mov	r9,zero
  80969c:	31000017 	ldw	r4,0(r6)
  8096a0:	41400017 	ldw	r5,0(r8)
  8096a4:	42000104 	addi	r8,r8,4
  8096a8:	20bfffcc 	andi	r2,r4,65535
  8096ac:	28ffffcc 	andi	r3,r5,65535
  8096b0:	10c5c83a 	sub	r2,r2,r3
  8096b4:	1245883a 	add	r2,r2,r9
  8096b8:	2008d43a 	srli	r4,r4,16
  8096bc:	280ad43a 	srli	r5,r5,16
  8096c0:	1007d43a 	srai	r3,r2,16
  8096c4:	3880000d 	sth	r2,0(r7)
  8096c8:	2149c83a 	sub	r4,r4,r5
  8096cc:	20c9883a 	add	r4,r4,r3
  8096d0:	3900008d 	sth	r4,2(r7)
  8096d4:	31800104 	addi	r6,r6,4
  8096d8:	39c00104 	addi	r7,r7,4
  8096dc:	2013d43a 	srai	r9,r4,16
  8096e0:	42ffee36 	bltu	r8,r11,80969c <__mdiff+0x80>
  8096e4:	33400c2e 	bgeu	r6,r13,809718 <__mdiff+0xfc>
  8096e8:	30800017 	ldw	r2,0(r6)
  8096ec:	31800104 	addi	r6,r6,4
  8096f0:	10ffffcc 	andi	r3,r2,65535
  8096f4:	1a47883a 	add	r3,r3,r9
  8096f8:	1004d43a 	srli	r2,r2,16
  8096fc:	1809d43a 	srai	r4,r3,16
  809700:	38c0000d 	sth	r3,0(r7)
  809704:	1105883a 	add	r2,r2,r4
  809708:	3880008d 	sth	r2,2(r7)
  80970c:	1013d43a 	srai	r9,r2,16
  809710:	39c00104 	addi	r7,r7,4
  809714:	337ff436 	bltu	r6,r13,8096e8 <__mdiff+0xcc>
  809718:	38bfff17 	ldw	r2,-4(r7)
  80971c:	38ffff04 	addi	r3,r7,-4
  809720:	1000041e 	bne	r2,zero,809734 <__mdiff+0x118>
  809724:	18ffff04 	addi	r3,r3,-4
  809728:	18800017 	ldw	r2,0(r3)
  80972c:	52bfffc4 	addi	r10,r10,-1
  809730:	103ffc26 	beq	r2,zero,809724 <__mdiff+0x108>
  809734:	6005883a 	mov	r2,r12
  809738:	62800415 	stw	r10,16(r12)
  80973c:	dfc00417 	ldw	ra,16(sp)
  809740:	dcc00317 	ldw	r19,12(sp)
  809744:	dc800217 	ldw	r18,8(sp)
  809748:	dc400117 	ldw	r17,4(sp)
  80974c:	dc000017 	ldw	r16,0(sp)
  809750:	dec00504 	addi	sp,sp,20
  809754:	f800283a 	ret
  809758:	9009883a 	mov	r4,r18
  80975c:	000b883a 	mov	r5,zero
  809760:	08093e40 	call	8093e4 <_Balloc>
  809764:	1019883a 	mov	r12,r2
  809768:	00800044 	movi	r2,1
  80976c:	60800415 	stw	r2,16(r12)
  809770:	6005883a 	mov	r2,r12
  809774:	60000515 	stw	zero,20(r12)
  809778:	dfc00417 	ldw	ra,16(sp)
  80977c:	dcc00317 	ldw	r19,12(sp)
  809780:	dc800217 	ldw	r18,8(sp)
  809784:	dc400117 	ldw	r17,4(sp)
  809788:	dc000017 	ldw	r16,0(sp)
  80978c:	dec00504 	addi	sp,sp,20
  809790:	f800283a 	ret
  809794:	880d883a 	mov	r6,r17
  809798:	04c00044 	movi	r19,1
  80979c:	8023883a 	mov	r17,r16
  8097a0:	3021883a 	mov	r16,r6
  8097a4:	003fac06 	br	809658 <__mdiff+0x3c>

008097a8 <__lshift>:
  8097a8:	defff904 	addi	sp,sp,-28
  8097ac:	28800417 	ldw	r2,16(r5)
  8097b0:	dc000015 	stw	r16,0(sp)
  8097b4:	3021d17a 	srai	r16,r6,5
  8097b8:	28c00217 	ldw	r3,8(r5)
  8097bc:	10800044 	addi	r2,r2,1
  8097c0:	dc400115 	stw	r17,4(sp)
  8097c4:	80a3883a 	add	r17,r16,r2
  8097c8:	dd400515 	stw	r21,20(sp)
  8097cc:	dd000415 	stw	r20,16(sp)
  8097d0:	dc800215 	stw	r18,8(sp)
  8097d4:	dfc00615 	stw	ra,24(sp)
  8097d8:	2825883a 	mov	r18,r5
  8097dc:	dcc00315 	stw	r19,12(sp)
  8097e0:	3029883a 	mov	r20,r6
  8097e4:	202b883a 	mov	r21,r4
  8097e8:	29400117 	ldw	r5,4(r5)
  8097ec:	1c40030e 	bge	r3,r17,8097fc <__lshift+0x54>
  8097f0:	18c7883a 	add	r3,r3,r3
  8097f4:	29400044 	addi	r5,r5,1
  8097f8:	1c7ffd16 	blt	r3,r17,8097f0 <__lshift+0x48>
  8097fc:	a809883a 	mov	r4,r21
  809800:	08093e40 	call	8093e4 <_Balloc>
  809804:	1027883a 	mov	r19,r2
  809808:	11400504 	addi	r5,r2,20
  80980c:	0400090e 	bge	zero,r16,809834 <__lshift+0x8c>
  809810:	2805883a 	mov	r2,r5
  809814:	0007883a 	mov	r3,zero
  809818:	18c00044 	addi	r3,r3,1
  80981c:	10000015 	stw	zero,0(r2)
  809820:	10800104 	addi	r2,r2,4
  809824:	80fffc1e 	bne	r16,r3,809818 <__lshift+0x70>
  809828:	8405883a 	add	r2,r16,r16
  80982c:	1085883a 	add	r2,r2,r2
  809830:	288b883a 	add	r5,r5,r2
  809834:	90800417 	ldw	r2,16(r18)
  809838:	91000504 	addi	r4,r18,20
  80983c:	a18007cc 	andi	r6,r20,31
  809840:	1085883a 	add	r2,r2,r2
  809844:	1085883a 	add	r2,r2,r2
  809848:	208f883a 	add	r7,r4,r2
  80984c:	30001e26 	beq	r6,zero,8098c8 <__lshift+0x120>
  809850:	00800804 	movi	r2,32
  809854:	1191c83a 	sub	r8,r2,r6
  809858:	0007883a 	mov	r3,zero
  80985c:	20800017 	ldw	r2,0(r4)
  809860:	1184983a 	sll	r2,r2,r6
  809864:	1884b03a 	or	r2,r3,r2
  809868:	28800015 	stw	r2,0(r5)
  80986c:	20c00017 	ldw	r3,0(r4)
  809870:	21000104 	addi	r4,r4,4
  809874:	29400104 	addi	r5,r5,4
  809878:	1a06d83a 	srl	r3,r3,r8
  80987c:	21fff736 	bltu	r4,r7,80985c <__lshift+0xb4>
  809880:	28c00015 	stw	r3,0(r5)
  809884:	18000126 	beq	r3,zero,80988c <__lshift+0xe4>
  809888:	8c400044 	addi	r17,r17,1
  80988c:	88bfffc4 	addi	r2,r17,-1
  809890:	98800415 	stw	r2,16(r19)
  809894:	a809883a 	mov	r4,r21
  809898:	900b883a 	mov	r5,r18
  80989c:	0808e640 	call	808e64 <_Bfree>
  8098a0:	9805883a 	mov	r2,r19
  8098a4:	dfc00617 	ldw	ra,24(sp)
  8098a8:	dd400517 	ldw	r21,20(sp)
  8098ac:	dd000417 	ldw	r20,16(sp)
  8098b0:	dcc00317 	ldw	r19,12(sp)
  8098b4:	dc800217 	ldw	r18,8(sp)
  8098b8:	dc400117 	ldw	r17,4(sp)
  8098bc:	dc000017 	ldw	r16,0(sp)
  8098c0:	dec00704 	addi	sp,sp,28
  8098c4:	f800283a 	ret
  8098c8:	20800017 	ldw	r2,0(r4)
  8098cc:	21000104 	addi	r4,r4,4
  8098d0:	28800015 	stw	r2,0(r5)
  8098d4:	29400104 	addi	r5,r5,4
  8098d8:	21ffec2e 	bgeu	r4,r7,80988c <__lshift+0xe4>
  8098dc:	20800017 	ldw	r2,0(r4)
  8098e0:	21000104 	addi	r4,r4,4
  8098e4:	28800015 	stw	r2,0(r5)
  8098e8:	29400104 	addi	r5,r5,4
  8098ec:	21fff636 	bltu	r4,r7,8098c8 <__lshift+0x120>
  8098f0:	003fe606 	br	80988c <__lshift+0xe4>

008098f4 <__multiply>:
  8098f4:	defff904 	addi	sp,sp,-28
  8098f8:	dcc00315 	stw	r19,12(sp)
  8098fc:	dc800215 	stw	r18,8(sp)
  809900:	2cc00417 	ldw	r19,16(r5)
  809904:	34800417 	ldw	r18,16(r6)
  809908:	dd000415 	stw	r20,16(sp)
  80990c:	dc400115 	stw	r17,4(sp)
  809910:	dfc00615 	stw	ra,24(sp)
  809914:	dd400515 	stw	r21,20(sp)
  809918:	dc000015 	stw	r16,0(sp)
  80991c:	2823883a 	mov	r17,r5
  809920:	3029883a 	mov	r20,r6
  809924:	9c80040e 	bge	r19,r18,809938 <__multiply+0x44>
  809928:	9027883a 	mov	r19,r18
  80992c:	2c800417 	ldw	r18,16(r5)
  809930:	2829883a 	mov	r20,r5
  809934:	3023883a 	mov	r17,r6
  809938:	88800217 	ldw	r2,8(r17)
  80993c:	9ca1883a 	add	r16,r19,r18
  809940:	89400117 	ldw	r5,4(r17)
  809944:	1400010e 	bge	r2,r16,80994c <__multiply+0x58>
  809948:	29400044 	addi	r5,r5,1
  80994c:	08093e40 	call	8093e4 <_Balloc>
  809950:	102b883a 	mov	r21,r2
  809954:	8405883a 	add	r2,r16,r16
  809958:	1085883a 	add	r2,r2,r2
  80995c:	a9000504 	addi	r4,r21,20
  809960:	209d883a 	add	r14,r4,r2
  809964:	2380042e 	bgeu	r4,r14,809978 <__multiply+0x84>
  809968:	2005883a 	mov	r2,r4
  80996c:	10000015 	stw	zero,0(r2)
  809970:	10800104 	addi	r2,r2,4
  809974:	13bffd36 	bltu	r2,r14,80996c <__multiply+0x78>
  809978:	9485883a 	add	r2,r18,r18
  80997c:	9cc7883a 	add	r3,r19,r19
  809980:	a1800504 	addi	r6,r20,20
  809984:	1085883a 	add	r2,r2,r2
  809988:	8b400504 	addi	r13,r17,20
  80998c:	18c7883a 	add	r3,r3,r3
  809990:	309f883a 	add	r15,r6,r2
  809994:	68d7883a 	add	r11,r13,r3
  809998:	33c03b2e 	bgeu	r6,r15,809a88 <__multiply+0x194>
  80999c:	2019883a 	mov	r12,r4
  8099a0:	30800017 	ldw	r2,0(r6)
  8099a4:	127fffcc 	andi	r9,r2,65535
  8099a8:	48001826 	beq	r9,zero,809a0c <__multiply+0x118>
  8099ac:	6811883a 	mov	r8,r13
  8099b0:	600f883a 	mov	r7,r12
  8099b4:	0015883a 	mov	r10,zero
  8099b8:	40c00017 	ldw	r3,0(r8)
  8099bc:	39400017 	ldw	r5,0(r7)
  8099c0:	42000104 	addi	r8,r8,4
  8099c4:	193fffcc 	andi	r4,r3,65535
  8099c8:	4909383a 	mul	r4,r9,r4
  8099cc:	1806d43a 	srli	r3,r3,16
  8099d0:	28bfffcc 	andi	r2,r5,65535
  8099d4:	5085883a 	add	r2,r10,r2
  8099d8:	2089883a 	add	r4,r4,r2
  8099dc:	48c7383a 	mul	r3,r9,r3
  8099e0:	280ad43a 	srli	r5,r5,16
  8099e4:	2004d43a 	srli	r2,r4,16
  8099e8:	3900000d 	sth	r4,0(r7)
  8099ec:	1947883a 	add	r3,r3,r5
  8099f0:	10c5883a 	add	r2,r2,r3
  8099f4:	3880008d 	sth	r2,2(r7)
  8099f8:	1014d43a 	srli	r10,r2,16
  8099fc:	39c00104 	addi	r7,r7,4
  809a00:	42ffed36 	bltu	r8,r11,8099b8 <__multiply+0xc4>
  809a04:	3a800015 	stw	r10,0(r7)
  809a08:	30800017 	ldw	r2,0(r6)
  809a0c:	1012d43a 	srli	r9,r2,16
  809a10:	48001926 	beq	r9,zero,809a78 <__multiply+0x184>
  809a14:	60800017 	ldw	r2,0(r12)
  809a18:	6811883a 	mov	r8,r13
  809a1c:	600f883a 	mov	r7,r12
  809a20:	0015883a 	mov	r10,zero
  809a24:	100b883a 	mov	r5,r2
  809a28:	41000017 	ldw	r4,0(r8)
  809a2c:	2806d43a 	srli	r3,r5,16
  809a30:	3880000d 	sth	r2,0(r7)
  809a34:	20bfffcc 	andi	r2,r4,65535
  809a38:	4885383a 	mul	r2,r9,r2
  809a3c:	50c7883a 	add	r3,r10,r3
  809a40:	2008d43a 	srli	r4,r4,16
  809a44:	10c5883a 	add	r2,r2,r3
  809a48:	3880008d 	sth	r2,2(r7)
  809a4c:	39c00104 	addi	r7,r7,4
  809a50:	39400017 	ldw	r5,0(r7)
  809a54:	4909383a 	mul	r4,r9,r4
  809a58:	1004d43a 	srli	r2,r2,16
  809a5c:	28ffffcc 	andi	r3,r5,65535
  809a60:	20c9883a 	add	r4,r4,r3
  809a64:	1105883a 	add	r2,r2,r4
  809a68:	42000104 	addi	r8,r8,4
  809a6c:	1014d43a 	srli	r10,r2,16
  809a70:	42ffed36 	bltu	r8,r11,809a28 <__multiply+0x134>
  809a74:	38800015 	stw	r2,0(r7)
  809a78:	31800104 	addi	r6,r6,4
  809a7c:	33c0022e 	bgeu	r6,r15,809a88 <__multiply+0x194>
  809a80:	63000104 	addi	r12,r12,4
  809a84:	003fc606 	br	8099a0 <__multiply+0xac>
  809a88:	0400090e 	bge	zero,r16,809ab0 <__multiply+0x1bc>
  809a8c:	70bfff17 	ldw	r2,-4(r14)
  809a90:	70ffff04 	addi	r3,r14,-4
  809a94:	10000326 	beq	r2,zero,809aa4 <__multiply+0x1b0>
  809a98:	00000506 	br	809ab0 <__multiply+0x1bc>
  809a9c:	18800017 	ldw	r2,0(r3)
  809aa0:	1000031e 	bne	r2,zero,809ab0 <__multiply+0x1bc>
  809aa4:	843fffc4 	addi	r16,r16,-1
  809aa8:	18ffff04 	addi	r3,r3,-4
  809aac:	803ffb1e 	bne	r16,zero,809a9c <__multiply+0x1a8>
  809ab0:	a805883a 	mov	r2,r21
  809ab4:	ac000415 	stw	r16,16(r21)
  809ab8:	dfc00617 	ldw	ra,24(sp)
  809abc:	dd400517 	ldw	r21,20(sp)
  809ac0:	dd000417 	ldw	r20,16(sp)
  809ac4:	dcc00317 	ldw	r19,12(sp)
  809ac8:	dc800217 	ldw	r18,8(sp)
  809acc:	dc400117 	ldw	r17,4(sp)
  809ad0:	dc000017 	ldw	r16,0(sp)
  809ad4:	dec00704 	addi	sp,sp,28
  809ad8:	f800283a 	ret

00809adc <__i2b>:
  809adc:	defffd04 	addi	sp,sp,-12
  809ae0:	dc000015 	stw	r16,0(sp)
  809ae4:	04000044 	movi	r16,1
  809ae8:	dc800115 	stw	r18,4(sp)
  809aec:	2825883a 	mov	r18,r5
  809af0:	800b883a 	mov	r5,r16
  809af4:	dfc00215 	stw	ra,8(sp)
  809af8:	08093e40 	call	8093e4 <_Balloc>
  809afc:	14000415 	stw	r16,16(r2)
  809b00:	14800515 	stw	r18,20(r2)
  809b04:	dfc00217 	ldw	ra,8(sp)
  809b08:	dc800117 	ldw	r18,4(sp)
  809b0c:	dc000017 	ldw	r16,0(sp)
  809b10:	dec00304 	addi	sp,sp,12
  809b14:	f800283a 	ret

00809b18 <__multadd>:
  809b18:	defffa04 	addi	sp,sp,-24
  809b1c:	dc800215 	stw	r18,8(sp)
  809b20:	2c800417 	ldw	r18,16(r5)
  809b24:	dd000415 	stw	r20,16(sp)
  809b28:	dcc00315 	stw	r19,12(sp)
  809b2c:	dc000015 	stw	r16,0(sp)
  809b30:	dfc00515 	stw	ra,20(sp)
  809b34:	3821883a 	mov	r16,r7
  809b38:	dc400115 	stw	r17,4(sp)
  809b3c:	2827883a 	mov	r19,r5
  809b40:	2029883a 	mov	r20,r4
  809b44:	2a000504 	addi	r8,r5,20
  809b48:	000f883a 	mov	r7,zero
  809b4c:	40800017 	ldw	r2,0(r8)
  809b50:	39c00044 	addi	r7,r7,1
  809b54:	10ffffcc 	andi	r3,r2,65535
  809b58:	1987383a 	mul	r3,r3,r6
  809b5c:	1004d43a 	srli	r2,r2,16
  809b60:	1c07883a 	add	r3,r3,r16
  809b64:	180ad43a 	srli	r5,r3,16
  809b68:	1185383a 	mul	r2,r2,r6
  809b6c:	18ffffcc 	andi	r3,r3,65535
  809b70:	1145883a 	add	r2,r2,r5
  809b74:	1008943a 	slli	r4,r2,16
  809b78:	1020d43a 	srli	r16,r2,16
  809b7c:	20c9883a 	add	r4,r4,r3
  809b80:	41000015 	stw	r4,0(r8)
  809b84:	42000104 	addi	r8,r8,4
  809b88:	3cbff016 	blt	r7,r18,809b4c <__multadd+0x34>
  809b8c:	80000826 	beq	r16,zero,809bb0 <__multadd+0x98>
  809b90:	98800217 	ldw	r2,8(r19)
  809b94:	90800f0e 	bge	r18,r2,809bd4 <__multadd+0xbc>
  809b98:	9485883a 	add	r2,r18,r18
  809b9c:	1085883a 	add	r2,r2,r2
  809ba0:	14c5883a 	add	r2,r2,r19
  809ba4:	90c00044 	addi	r3,r18,1
  809ba8:	14000515 	stw	r16,20(r2)
  809bac:	98c00415 	stw	r3,16(r19)
  809bb0:	9805883a 	mov	r2,r19
  809bb4:	dfc00517 	ldw	ra,20(sp)
  809bb8:	dd000417 	ldw	r20,16(sp)
  809bbc:	dcc00317 	ldw	r19,12(sp)
  809bc0:	dc800217 	ldw	r18,8(sp)
  809bc4:	dc400117 	ldw	r17,4(sp)
  809bc8:	dc000017 	ldw	r16,0(sp)
  809bcc:	dec00604 	addi	sp,sp,24
  809bd0:	f800283a 	ret
  809bd4:	99400117 	ldw	r5,4(r19)
  809bd8:	a009883a 	mov	r4,r20
  809bdc:	29400044 	addi	r5,r5,1
  809be0:	08093e40 	call	8093e4 <_Balloc>
  809be4:	99800417 	ldw	r6,16(r19)
  809be8:	99400304 	addi	r5,r19,12
  809bec:	11000304 	addi	r4,r2,12
  809bf0:	318d883a 	add	r6,r6,r6
  809bf4:	318d883a 	add	r6,r6,r6
  809bf8:	31800204 	addi	r6,r6,8
  809bfc:	1023883a 	mov	r17,r2
  809c00:	0803d4c0 	call	803d4c <memcpy>
  809c04:	980b883a 	mov	r5,r19
  809c08:	a009883a 	mov	r4,r20
  809c0c:	0808e640 	call	808e64 <_Bfree>
  809c10:	8827883a 	mov	r19,r17
  809c14:	003fe006 	br	809b98 <__multadd+0x80>

00809c18 <__pow5mult>:
  809c18:	defffa04 	addi	sp,sp,-24
  809c1c:	308000cc 	andi	r2,r6,3
  809c20:	dd000415 	stw	r20,16(sp)
  809c24:	dcc00315 	stw	r19,12(sp)
  809c28:	dc000015 	stw	r16,0(sp)
  809c2c:	dfc00515 	stw	ra,20(sp)
  809c30:	dc800215 	stw	r18,8(sp)
  809c34:	dc400115 	stw	r17,4(sp)
  809c38:	3021883a 	mov	r16,r6
  809c3c:	2027883a 	mov	r19,r4
  809c40:	2829883a 	mov	r20,r5
  809c44:	10002b1e 	bne	r2,zero,809cf4 <__pow5mult+0xdc>
  809c48:	8025d0ba 	srai	r18,r16,2
  809c4c:	90001b26 	beq	r18,zero,809cbc <__pow5mult+0xa4>
  809c50:	9c001217 	ldw	r16,72(r19)
  809c54:	8000081e 	bne	r16,zero,809c78 <__pow5mult+0x60>
  809c58:	00003006 	br	809d1c <__pow5mult+0x104>
  809c5c:	800b883a 	mov	r5,r16
  809c60:	800d883a 	mov	r6,r16
  809c64:	9809883a 	mov	r4,r19
  809c68:	90001426 	beq	r18,zero,809cbc <__pow5mult+0xa4>
  809c6c:	80800017 	ldw	r2,0(r16)
  809c70:	10001b26 	beq	r2,zero,809ce0 <__pow5mult+0xc8>
  809c74:	1021883a 	mov	r16,r2
  809c78:	9080004c 	andi	r2,r18,1
  809c7c:	1005003a 	cmpeq	r2,r2,zero
  809c80:	9025d07a 	srai	r18,r18,1
  809c84:	800d883a 	mov	r6,r16
  809c88:	9809883a 	mov	r4,r19
  809c8c:	a00b883a 	mov	r5,r20
  809c90:	103ff21e 	bne	r2,zero,809c5c <__pow5mult+0x44>
  809c94:	08098f40 	call	8098f4 <__multiply>
  809c98:	a00b883a 	mov	r5,r20
  809c9c:	9809883a 	mov	r4,r19
  809ca0:	1023883a 	mov	r17,r2
  809ca4:	0808e640 	call	808e64 <_Bfree>
  809ca8:	8829883a 	mov	r20,r17
  809cac:	800b883a 	mov	r5,r16
  809cb0:	800d883a 	mov	r6,r16
  809cb4:	9809883a 	mov	r4,r19
  809cb8:	903fec1e 	bne	r18,zero,809c6c <__pow5mult+0x54>
  809cbc:	a005883a 	mov	r2,r20
  809cc0:	dfc00517 	ldw	ra,20(sp)
  809cc4:	dd000417 	ldw	r20,16(sp)
  809cc8:	dcc00317 	ldw	r19,12(sp)
  809ccc:	dc800217 	ldw	r18,8(sp)
  809cd0:	dc400117 	ldw	r17,4(sp)
  809cd4:	dc000017 	ldw	r16,0(sp)
  809cd8:	dec00604 	addi	sp,sp,24
  809cdc:	f800283a 	ret
  809ce0:	08098f40 	call	8098f4 <__multiply>
  809ce4:	80800015 	stw	r2,0(r16)
  809ce8:	1021883a 	mov	r16,r2
  809cec:	10000015 	stw	zero,0(r2)
  809cf0:	003fe106 	br	809c78 <__pow5mult+0x60>
  809cf4:	1085883a 	add	r2,r2,r2
  809cf8:	00c02074 	movhi	r3,129
  809cfc:	18cf3104 	addi	r3,r3,15556
  809d00:	1085883a 	add	r2,r2,r2
  809d04:	10c5883a 	add	r2,r2,r3
  809d08:	11bfff17 	ldw	r6,-4(r2)
  809d0c:	000f883a 	mov	r7,zero
  809d10:	0809b180 	call	809b18 <__multadd>
  809d14:	1029883a 	mov	r20,r2
  809d18:	003fcb06 	br	809c48 <__pow5mult+0x30>
  809d1c:	9809883a 	mov	r4,r19
  809d20:	01409c44 	movi	r5,625
  809d24:	0809adc0 	call	809adc <__i2b>
  809d28:	98801215 	stw	r2,72(r19)
  809d2c:	1021883a 	mov	r16,r2
  809d30:	10000015 	stw	zero,0(r2)
  809d34:	003fd006 	br	809c78 <__pow5mult+0x60>

00809d38 <__s2b>:
  809d38:	defff904 	addi	sp,sp,-28
  809d3c:	dcc00315 	stw	r19,12(sp)
  809d40:	dc800215 	stw	r18,8(sp)
  809d44:	2827883a 	mov	r19,r5
  809d48:	2025883a 	mov	r18,r4
  809d4c:	01400244 	movi	r5,9
  809d50:	39000204 	addi	r4,r7,8
  809d54:	dd000415 	stw	r20,16(sp)
  809d58:	dc400115 	stw	r17,4(sp)
  809d5c:	dfc00615 	stw	ra,24(sp)
  809d60:	dd400515 	stw	r21,20(sp)
  809d64:	dc000015 	stw	r16,0(sp)
  809d68:	3829883a 	mov	r20,r7
  809d6c:	3023883a 	mov	r17,r6
  809d70:	080c1e80 	call	80c1e8 <__divsi3>
  809d74:	00c00044 	movi	r3,1
  809d78:	1880350e 	bge	r3,r2,809e50 <__s2b+0x118>
  809d7c:	000b883a 	mov	r5,zero
  809d80:	18c7883a 	add	r3,r3,r3
  809d84:	29400044 	addi	r5,r5,1
  809d88:	18bffd16 	blt	r3,r2,809d80 <__s2b+0x48>
  809d8c:	9009883a 	mov	r4,r18
  809d90:	08093e40 	call	8093e4 <_Balloc>
  809d94:	1011883a 	mov	r8,r2
  809d98:	d8800717 	ldw	r2,28(sp)
  809d9c:	00c00044 	movi	r3,1
  809da0:	01800244 	movi	r6,9
  809da4:	40800515 	stw	r2,20(r8)
  809da8:	40c00415 	stw	r3,16(r8)
  809dac:	3440260e 	bge	r6,r17,809e48 <__s2b+0x110>
  809db0:	3021883a 	mov	r16,r6
  809db4:	99ab883a 	add	r21,r19,r6
  809db8:	9c05883a 	add	r2,r19,r16
  809dbc:	11c00007 	ldb	r7,0(r2)
  809dc0:	400b883a 	mov	r5,r8
  809dc4:	9009883a 	mov	r4,r18
  809dc8:	39fff404 	addi	r7,r7,-48
  809dcc:	01800284 	movi	r6,10
  809dd0:	0809b180 	call	809b18 <__multadd>
  809dd4:	84000044 	addi	r16,r16,1
  809dd8:	1011883a 	mov	r8,r2
  809ddc:	8c3ff61e 	bne	r17,r16,809db8 <__s2b+0x80>
  809de0:	ac45883a 	add	r2,r21,r17
  809de4:	117ffe04 	addi	r5,r2,-8
  809de8:	880d883a 	mov	r6,r17
  809dec:	35000c0e 	bge	r6,r20,809e20 <__s2b+0xe8>
  809df0:	a185c83a 	sub	r2,r20,r6
  809df4:	2821883a 	mov	r16,r5
  809df8:	28a3883a 	add	r17,r5,r2
  809dfc:	81c00007 	ldb	r7,0(r16)
  809e00:	400b883a 	mov	r5,r8
  809e04:	9009883a 	mov	r4,r18
  809e08:	39fff404 	addi	r7,r7,-48
  809e0c:	01800284 	movi	r6,10
  809e10:	0809b180 	call	809b18 <__multadd>
  809e14:	84000044 	addi	r16,r16,1
  809e18:	1011883a 	mov	r8,r2
  809e1c:	847ff71e 	bne	r16,r17,809dfc <__s2b+0xc4>
  809e20:	4005883a 	mov	r2,r8
  809e24:	dfc00617 	ldw	ra,24(sp)
  809e28:	dd400517 	ldw	r21,20(sp)
  809e2c:	dd000417 	ldw	r20,16(sp)
  809e30:	dcc00317 	ldw	r19,12(sp)
  809e34:	dc800217 	ldw	r18,8(sp)
  809e38:	dc400117 	ldw	r17,4(sp)
  809e3c:	dc000017 	ldw	r16,0(sp)
  809e40:	dec00704 	addi	sp,sp,28
  809e44:	f800283a 	ret
  809e48:	99400284 	addi	r5,r19,10
  809e4c:	003fe706 	br	809dec <__s2b+0xb4>
  809e50:	000b883a 	mov	r5,zero
  809e54:	003fcd06 	br	809d8c <__s2b+0x54>

00809e58 <putc>:
  809e58:	defffc04 	addi	sp,sp,-16
  809e5c:	dc800215 	stw	r18,8(sp)
  809e60:	04802074 	movhi	r18,129
  809e64:	94966304 	addi	r18,r18,22924
  809e68:	90c00017 	ldw	r3,0(r18)
  809e6c:	dc400115 	stw	r17,4(sp)
  809e70:	dc000015 	stw	r16,0(sp)
  809e74:	dfc00315 	stw	ra,12(sp)
  809e78:	2023883a 	mov	r17,r4
  809e7c:	2821883a 	mov	r16,r5
  809e80:	18000226 	beq	r3,zero,809e8c <putc+0x34>
  809e84:	18800e17 	ldw	r2,56(r3)
  809e88:	10001126 	beq	r2,zero,809ed0 <putc+0x78>
  809e8c:	80800217 	ldw	r2,8(r16)
  809e90:	10ffffc4 	addi	r3,r2,-1
  809e94:	80c00215 	stw	r3,8(r16)
  809e98:	18001316 	blt	r3,zero,809ee8 <putc+0x90>
  809e9c:	80800017 	ldw	r2,0(r16)
  809ea0:	14400005 	stb	r17,0(r2)
  809ea4:	80c00017 	ldw	r3,0(r16)
  809ea8:	18800044 	addi	r2,r3,1
  809eac:	18c00003 	ldbu	r3,0(r3)
  809eb0:	80800015 	stw	r2,0(r16)
  809eb4:	1805883a 	mov	r2,r3
  809eb8:	dfc00317 	ldw	ra,12(sp)
  809ebc:	dc800217 	ldw	r18,8(sp)
  809ec0:	dc400117 	ldw	r17,4(sp)
  809ec4:	dc000017 	ldw	r16,0(sp)
  809ec8:	dec00404 	addi	sp,sp,16
  809ecc:	f800283a 	ret
  809ed0:	1809883a 	mov	r4,r3
  809ed4:	0807cfc0 	call	807cfc <__sinit>
  809ed8:	80800217 	ldw	r2,8(r16)
  809edc:	10ffffc4 	addi	r3,r2,-1
  809ee0:	80c00215 	stw	r3,8(r16)
  809ee4:	183fed0e 	bge	r3,zero,809e9c <putc+0x44>
  809ee8:	80800617 	ldw	r2,24(r16)
  809eec:	18800f16 	blt	r3,r2,809f2c <putc+0xd4>
  809ef0:	80800017 	ldw	r2,0(r16)
  809ef4:	14400005 	stb	r17,0(r2)
  809ef8:	81000017 	ldw	r4,0(r16)
  809efc:	00800284 	movi	r2,10
  809f00:	20c00003 	ldbu	r3,0(r4)
  809f04:	18801226 	beq	r3,r2,809f50 <putc+0xf8>
  809f08:	20800044 	addi	r2,r4,1
  809f0c:	80800015 	stw	r2,0(r16)
  809f10:	1805883a 	mov	r2,r3
  809f14:	dfc00317 	ldw	ra,12(sp)
  809f18:	dc800217 	ldw	r18,8(sp)
  809f1c:	dc400117 	ldw	r17,4(sp)
  809f20:	dc000017 	ldw	r16,0(sp)
  809f24:	dec00404 	addi	sp,sp,16
  809f28:	f800283a 	ret
  809f2c:	91000017 	ldw	r4,0(r18)
  809f30:	880b883a 	mov	r5,r17
  809f34:	800d883a 	mov	r6,r16
  809f38:	dfc00317 	ldw	ra,12(sp)
  809f3c:	dc800217 	ldw	r18,8(sp)
  809f40:	dc400117 	ldw	r17,4(sp)
  809f44:	dc000017 	ldw	r16,0(sp)
  809f48:	dec00404 	addi	sp,sp,16
  809f4c:	080aa901 	jmpi	80aa90 <__swbuf_r>
  809f50:	91000017 	ldw	r4,0(r18)
  809f54:	180b883a 	mov	r5,r3
  809f58:	003ff606 	br	809f34 <putc+0xdc>

00809f5c <_putc_r>:
  809f5c:	defffc04 	addi	sp,sp,-16
  809f60:	dc400215 	stw	r17,8(sp)
  809f64:	dc000115 	stw	r16,4(sp)
  809f68:	dfc00315 	stw	ra,12(sp)
  809f6c:	2021883a 	mov	r16,r4
  809f70:	2823883a 	mov	r17,r5
  809f74:	20000226 	beq	r4,zero,809f80 <_putc_r+0x24>
  809f78:	20800e17 	ldw	r2,56(r4)
  809f7c:	10001026 	beq	r2,zero,809fc0 <_putc_r+0x64>
  809f80:	30800217 	ldw	r2,8(r6)
  809f84:	10ffffc4 	addi	r3,r2,-1
  809f88:	30c00215 	stw	r3,8(r6)
  809f8c:	18001316 	blt	r3,zero,809fdc <_putc_r+0x80>
  809f90:	30800017 	ldw	r2,0(r6)
  809f94:	14400005 	stb	r17,0(r2)
  809f98:	30c00017 	ldw	r3,0(r6)
  809f9c:	18800044 	addi	r2,r3,1
  809fa0:	18c00003 	ldbu	r3,0(r3)
  809fa4:	30800015 	stw	r2,0(r6)
  809fa8:	1805883a 	mov	r2,r3
  809fac:	dfc00317 	ldw	ra,12(sp)
  809fb0:	dc400217 	ldw	r17,8(sp)
  809fb4:	dc000117 	ldw	r16,4(sp)
  809fb8:	dec00404 	addi	sp,sp,16
  809fbc:	f800283a 	ret
  809fc0:	d9800015 	stw	r6,0(sp)
  809fc4:	0807cfc0 	call	807cfc <__sinit>
  809fc8:	d9800017 	ldw	r6,0(sp)
  809fcc:	30800217 	ldw	r2,8(r6)
  809fd0:	10ffffc4 	addi	r3,r2,-1
  809fd4:	30c00215 	stw	r3,8(r6)
  809fd8:	183fed0e 	bge	r3,zero,809f90 <_putc_r+0x34>
  809fdc:	30800617 	ldw	r2,24(r6)
  809fe0:	18800e16 	blt	r3,r2,80a01c <_putc_r+0xc0>
  809fe4:	30800017 	ldw	r2,0(r6)
  809fe8:	14400005 	stb	r17,0(r2)
  809fec:	31000017 	ldw	r4,0(r6)
  809ff0:	00800284 	movi	r2,10
  809ff4:	20c00003 	ldbu	r3,0(r4)
  809ff8:	18800f26 	beq	r3,r2,80a038 <_putc_r+0xdc>
  809ffc:	20800044 	addi	r2,r4,1
  80a000:	30800015 	stw	r2,0(r6)
  80a004:	1805883a 	mov	r2,r3
  80a008:	dfc00317 	ldw	ra,12(sp)
  80a00c:	dc400217 	ldw	r17,8(sp)
  80a010:	dc000117 	ldw	r16,4(sp)
  80a014:	dec00404 	addi	sp,sp,16
  80a018:	f800283a 	ret
  80a01c:	8009883a 	mov	r4,r16
  80a020:	880b883a 	mov	r5,r17
  80a024:	dfc00317 	ldw	ra,12(sp)
  80a028:	dc400217 	ldw	r17,8(sp)
  80a02c:	dc000117 	ldw	r16,4(sp)
  80a030:	dec00404 	addi	sp,sp,16
  80a034:	080aa901 	jmpi	80aa90 <__swbuf_r>
  80a038:	8009883a 	mov	r4,r16
  80a03c:	180b883a 	mov	r5,r3
  80a040:	003ff806 	br	80a024 <_putc_r+0xc8>

0080a044 <_realloc_r>:
  80a044:	defff404 	addi	sp,sp,-48
  80a048:	dd800815 	stw	r22,32(sp)
  80a04c:	dc800415 	stw	r18,16(sp)
  80a050:	dc400315 	stw	r17,12(sp)
  80a054:	dfc00b15 	stw	ra,44(sp)
  80a058:	df000a15 	stw	fp,40(sp)
  80a05c:	ddc00915 	stw	r23,36(sp)
  80a060:	dd400715 	stw	r21,28(sp)
  80a064:	dd000615 	stw	r20,24(sp)
  80a068:	dcc00515 	stw	r19,20(sp)
  80a06c:	dc000215 	stw	r16,8(sp)
  80a070:	2825883a 	mov	r18,r5
  80a074:	3023883a 	mov	r17,r6
  80a078:	202d883a 	mov	r22,r4
  80a07c:	2800c926 	beq	r5,zero,80a3a4 <_realloc_r+0x360>
  80a080:	080c7e40 	call	80c7e4 <__malloc_lock>
  80a084:	943ffe04 	addi	r16,r18,-8
  80a088:	88c002c4 	addi	r3,r17,11
  80a08c:	00800584 	movi	r2,22
  80a090:	82000117 	ldw	r8,4(r16)
  80a094:	10c01b2e 	bgeu	r2,r3,80a104 <_realloc_r+0xc0>
  80a098:	00bffe04 	movi	r2,-8
  80a09c:	188e703a 	and	r7,r3,r2
  80a0a0:	3839883a 	mov	fp,r7
  80a0a4:	38001a16 	blt	r7,zero,80a110 <_realloc_r+0xcc>
  80a0a8:	e4401936 	bltu	fp,r17,80a110 <_realloc_r+0xcc>
  80a0ac:	013fff04 	movi	r4,-4
  80a0b0:	4126703a 	and	r19,r8,r4
  80a0b4:	99c02616 	blt	r19,r7,80a150 <_realloc_r+0x10c>
  80a0b8:	802b883a 	mov	r21,r16
  80a0bc:	9829883a 	mov	r20,r19
  80a0c0:	84000204 	addi	r16,r16,8
  80a0c4:	a80f883a 	mov	r7,r21
  80a0c8:	a70dc83a 	sub	r6,r20,fp
  80a0cc:	008003c4 	movi	r2,15
  80a0d0:	1180c136 	bltu	r2,r6,80a3d8 <_realloc_r+0x394>
  80a0d4:	38800117 	ldw	r2,4(r7)
  80a0d8:	a549883a 	add	r4,r20,r21
  80a0dc:	1080004c 	andi	r2,r2,1
  80a0e0:	a084b03a 	or	r2,r20,r2
  80a0e4:	38800115 	stw	r2,4(r7)
  80a0e8:	20c00117 	ldw	r3,4(r4)
  80a0ec:	18c00054 	ori	r3,r3,1
  80a0f0:	20c00115 	stw	r3,4(r4)
  80a0f4:	b009883a 	mov	r4,r22
  80a0f8:	080c8040 	call	80c804 <__malloc_unlock>
  80a0fc:	8023883a 	mov	r17,r16
  80a100:	00000606 	br	80a11c <_realloc_r+0xd8>
  80a104:	01c00404 	movi	r7,16
  80a108:	3839883a 	mov	fp,r7
  80a10c:	e47fe72e 	bgeu	fp,r17,80a0ac <_realloc_r+0x68>
  80a110:	00800304 	movi	r2,12
  80a114:	0023883a 	mov	r17,zero
  80a118:	b0800015 	stw	r2,0(r22)
  80a11c:	8805883a 	mov	r2,r17
  80a120:	dfc00b17 	ldw	ra,44(sp)
  80a124:	df000a17 	ldw	fp,40(sp)
  80a128:	ddc00917 	ldw	r23,36(sp)
  80a12c:	dd800817 	ldw	r22,32(sp)
  80a130:	dd400717 	ldw	r21,28(sp)
  80a134:	dd000617 	ldw	r20,24(sp)
  80a138:	dcc00517 	ldw	r19,20(sp)
  80a13c:	dc800417 	ldw	r18,16(sp)
  80a140:	dc400317 	ldw	r17,12(sp)
  80a144:	dc000217 	ldw	r16,8(sp)
  80a148:	dec00c04 	addi	sp,sp,48
  80a14c:	f800283a 	ret
  80a150:	00802074 	movhi	r2,129
  80a154:	1090bc04 	addi	r2,r2,17136
  80a158:	12400217 	ldw	r9,8(r2)
  80a15c:	84cd883a 	add	r6,r16,r19
  80a160:	802b883a 	mov	r21,r16
  80a164:	3240b926 	beq	r6,r9,80a44c <_realloc_r+0x408>
  80a168:	31400117 	ldw	r5,4(r6)
  80a16c:	00bfff84 	movi	r2,-2
  80a170:	2884703a 	and	r2,r5,r2
  80a174:	1185883a 	add	r2,r2,r6
  80a178:	10c00117 	ldw	r3,4(r2)
  80a17c:	18c0004c 	andi	r3,r3,1
  80a180:	1807003a 	cmpeq	r3,r3,zero
  80a184:	1800a326 	beq	r3,zero,80a414 <_realloc_r+0x3d0>
  80a188:	2908703a 	and	r4,r5,r4
  80a18c:	9929883a 	add	r20,r19,r4
  80a190:	a1c0a30e 	bge	r20,r7,80a420 <_realloc_r+0x3dc>
  80a194:	4080004c 	andi	r2,r8,1
  80a198:	1000551e 	bne	r2,zero,80a2f0 <_realloc_r+0x2ac>
  80a19c:	80800017 	ldw	r2,0(r16)
  80a1a0:	80afc83a 	sub	r23,r16,r2
  80a1a4:	b8c00117 	ldw	r3,4(r23)
  80a1a8:	00bfff04 	movi	r2,-4
  80a1ac:	1884703a 	and	r2,r3,r2
  80a1b0:	30002e26 	beq	r6,zero,80a26c <_realloc_r+0x228>
  80a1b4:	3240b926 	beq	r6,r9,80a49c <_realloc_r+0x458>
  80a1b8:	98a9883a 	add	r20,r19,r2
  80a1bc:	2509883a 	add	r4,r4,r20
  80a1c0:	d9000015 	stw	r4,0(sp)
  80a1c4:	21c02a16 	blt	r4,r7,80a270 <_realloc_r+0x22c>
  80a1c8:	30800317 	ldw	r2,12(r6)
  80a1cc:	30c00217 	ldw	r3,8(r6)
  80a1d0:	01400904 	movi	r5,36
  80a1d4:	99bfff04 	addi	r6,r19,-4
  80a1d8:	18800315 	stw	r2,12(r3)
  80a1dc:	10c00215 	stw	r3,8(r2)
  80a1e0:	b9000317 	ldw	r4,12(r23)
  80a1e4:	b8800217 	ldw	r2,8(r23)
  80a1e8:	b82b883a 	mov	r21,r23
  80a1ec:	bc000204 	addi	r16,r23,8
  80a1f0:	20800215 	stw	r2,8(r4)
  80a1f4:	11000315 	stw	r4,12(r2)
  80a1f8:	2980e436 	bltu	r5,r6,80a58c <_realloc_r+0x548>
  80a1fc:	008004c4 	movi	r2,19
  80a200:	9009883a 	mov	r4,r18
  80a204:	8011883a 	mov	r8,r16
  80a208:	11800f2e 	bgeu	r2,r6,80a248 <_realloc_r+0x204>
  80a20c:	90800017 	ldw	r2,0(r18)
  80a210:	ba000404 	addi	r8,r23,16
  80a214:	91000204 	addi	r4,r18,8
  80a218:	b8800215 	stw	r2,8(r23)
  80a21c:	90c00117 	ldw	r3,4(r18)
  80a220:	008006c4 	movi	r2,27
  80a224:	b8c00315 	stw	r3,12(r23)
  80a228:	1180072e 	bgeu	r2,r6,80a248 <_realloc_r+0x204>
  80a22c:	90c00217 	ldw	r3,8(r18)
  80a230:	ba000604 	addi	r8,r23,24
  80a234:	91000404 	addi	r4,r18,16
  80a238:	b8c00415 	stw	r3,16(r23)
  80a23c:	90800317 	ldw	r2,12(r18)
  80a240:	b8800515 	stw	r2,20(r23)
  80a244:	3140e726 	beq	r6,r5,80a5e4 <_realloc_r+0x5a0>
  80a248:	20800017 	ldw	r2,0(r4)
  80a24c:	dd000017 	ldw	r20,0(sp)
  80a250:	b80f883a 	mov	r7,r23
  80a254:	40800015 	stw	r2,0(r8)
  80a258:	20c00117 	ldw	r3,4(r4)
  80a25c:	40c00115 	stw	r3,4(r8)
  80a260:	20800217 	ldw	r2,8(r4)
  80a264:	40800215 	stw	r2,8(r8)
  80a268:	003f9706 	br	80a0c8 <_realloc_r+0x84>
  80a26c:	98a9883a 	add	r20,r19,r2
  80a270:	a1c01f16 	blt	r20,r7,80a2f0 <_realloc_r+0x2ac>
  80a274:	b8c00317 	ldw	r3,12(r23)
  80a278:	b8800217 	ldw	r2,8(r23)
  80a27c:	99bfff04 	addi	r6,r19,-4
  80a280:	01400904 	movi	r5,36
  80a284:	b82b883a 	mov	r21,r23
  80a288:	18800215 	stw	r2,8(r3)
  80a28c:	10c00315 	stw	r3,12(r2)
  80a290:	bc000204 	addi	r16,r23,8
  80a294:	2980c336 	bltu	r5,r6,80a5a4 <_realloc_r+0x560>
  80a298:	008004c4 	movi	r2,19
  80a29c:	9009883a 	mov	r4,r18
  80a2a0:	8011883a 	mov	r8,r16
  80a2a4:	11800f2e 	bgeu	r2,r6,80a2e4 <_realloc_r+0x2a0>
  80a2a8:	90800017 	ldw	r2,0(r18)
  80a2ac:	ba000404 	addi	r8,r23,16
  80a2b0:	91000204 	addi	r4,r18,8
  80a2b4:	b8800215 	stw	r2,8(r23)
  80a2b8:	90c00117 	ldw	r3,4(r18)
  80a2bc:	008006c4 	movi	r2,27
  80a2c0:	b8c00315 	stw	r3,12(r23)
  80a2c4:	1180072e 	bgeu	r2,r6,80a2e4 <_realloc_r+0x2a0>
  80a2c8:	90c00217 	ldw	r3,8(r18)
  80a2cc:	ba000604 	addi	r8,r23,24
  80a2d0:	91000404 	addi	r4,r18,16
  80a2d4:	b8c00415 	stw	r3,16(r23)
  80a2d8:	90800317 	ldw	r2,12(r18)
  80a2dc:	b8800515 	stw	r2,20(r23)
  80a2e0:	3140c726 	beq	r6,r5,80a600 <_realloc_r+0x5bc>
  80a2e4:	20800017 	ldw	r2,0(r4)
  80a2e8:	b80f883a 	mov	r7,r23
  80a2ec:	003fd906 	br	80a254 <_realloc_r+0x210>
  80a2f0:	880b883a 	mov	r5,r17
  80a2f4:	b009883a 	mov	r4,r22
  80a2f8:	080360c0 	call	80360c <_malloc_r>
  80a2fc:	1023883a 	mov	r17,r2
  80a300:	10002526 	beq	r2,zero,80a398 <_realloc_r+0x354>
  80a304:	80800117 	ldw	r2,4(r16)
  80a308:	00ffff84 	movi	r3,-2
  80a30c:	893ffe04 	addi	r4,r17,-8
  80a310:	10c4703a 	and	r2,r2,r3
  80a314:	8085883a 	add	r2,r16,r2
  80a318:	20809526 	beq	r4,r2,80a570 <_realloc_r+0x52c>
  80a31c:	99bfff04 	addi	r6,r19,-4
  80a320:	01c00904 	movi	r7,36
  80a324:	39804536 	bltu	r7,r6,80a43c <_realloc_r+0x3f8>
  80a328:	008004c4 	movi	r2,19
  80a32c:	9009883a 	mov	r4,r18
  80a330:	880b883a 	mov	r5,r17
  80a334:	11800f2e 	bgeu	r2,r6,80a374 <_realloc_r+0x330>
  80a338:	90800017 	ldw	r2,0(r18)
  80a33c:	89400204 	addi	r5,r17,8
  80a340:	91000204 	addi	r4,r18,8
  80a344:	88800015 	stw	r2,0(r17)
  80a348:	90c00117 	ldw	r3,4(r18)
  80a34c:	008006c4 	movi	r2,27
  80a350:	88c00115 	stw	r3,4(r17)
  80a354:	1180072e 	bgeu	r2,r6,80a374 <_realloc_r+0x330>
  80a358:	90c00217 	ldw	r3,8(r18)
  80a35c:	89400404 	addi	r5,r17,16
  80a360:	91000404 	addi	r4,r18,16
  80a364:	88c00215 	stw	r3,8(r17)
  80a368:	90800317 	ldw	r2,12(r18)
  80a36c:	88800315 	stw	r2,12(r17)
  80a370:	31c09126 	beq	r6,r7,80a5b8 <_realloc_r+0x574>
  80a374:	20800017 	ldw	r2,0(r4)
  80a378:	28800015 	stw	r2,0(r5)
  80a37c:	20c00117 	ldw	r3,4(r4)
  80a380:	28c00115 	stw	r3,4(r5)
  80a384:	20800217 	ldw	r2,8(r4)
  80a388:	28800215 	stw	r2,8(r5)
  80a38c:	900b883a 	mov	r5,r18
  80a390:	b009883a 	mov	r4,r22
  80a394:	08080800 	call	808080 <_free_r>
  80a398:	b009883a 	mov	r4,r22
  80a39c:	080c8040 	call	80c804 <__malloc_unlock>
  80a3a0:	003f5e06 	br	80a11c <_realloc_r+0xd8>
  80a3a4:	300b883a 	mov	r5,r6
  80a3a8:	dfc00b17 	ldw	ra,44(sp)
  80a3ac:	df000a17 	ldw	fp,40(sp)
  80a3b0:	ddc00917 	ldw	r23,36(sp)
  80a3b4:	dd800817 	ldw	r22,32(sp)
  80a3b8:	dd400717 	ldw	r21,28(sp)
  80a3bc:	dd000617 	ldw	r20,24(sp)
  80a3c0:	dcc00517 	ldw	r19,20(sp)
  80a3c4:	dc800417 	ldw	r18,16(sp)
  80a3c8:	dc400317 	ldw	r17,12(sp)
  80a3cc:	dc000217 	ldw	r16,8(sp)
  80a3d0:	dec00c04 	addi	sp,sp,48
  80a3d4:	080360c1 	jmpi	80360c <_malloc_r>
  80a3d8:	38800117 	ldw	r2,4(r7)
  80a3dc:	e54b883a 	add	r5,fp,r21
  80a3e0:	31000054 	ori	r4,r6,1
  80a3e4:	1080004c 	andi	r2,r2,1
  80a3e8:	1704b03a 	or	r2,r2,fp
  80a3ec:	38800115 	stw	r2,4(r7)
  80a3f0:	29000115 	stw	r4,4(r5)
  80a3f4:	2987883a 	add	r3,r5,r6
  80a3f8:	18800117 	ldw	r2,4(r3)
  80a3fc:	29400204 	addi	r5,r5,8
  80a400:	b009883a 	mov	r4,r22
  80a404:	10800054 	ori	r2,r2,1
  80a408:	18800115 	stw	r2,4(r3)
  80a40c:	08080800 	call	808080 <_free_r>
  80a410:	003f3806 	br	80a0f4 <_realloc_r+0xb0>
  80a414:	000d883a 	mov	r6,zero
  80a418:	0009883a 	mov	r4,zero
  80a41c:	003f5d06 	br	80a194 <_realloc_r+0x150>
  80a420:	30c00217 	ldw	r3,8(r6)
  80a424:	30800317 	ldw	r2,12(r6)
  80a428:	800f883a 	mov	r7,r16
  80a42c:	84000204 	addi	r16,r16,8
  80a430:	10c00215 	stw	r3,8(r2)
  80a434:	18800315 	stw	r2,12(r3)
  80a438:	003f2306 	br	80a0c8 <_realloc_r+0x84>
  80a43c:	8809883a 	mov	r4,r17
  80a440:	900b883a 	mov	r5,r18
  80a444:	0808cec0 	call	808cec <memmove>
  80a448:	003fd006 	br	80a38c <_realloc_r+0x348>
  80a44c:	30800117 	ldw	r2,4(r6)
  80a450:	e0c00404 	addi	r3,fp,16
  80a454:	1108703a 	and	r4,r2,r4
  80a458:	9905883a 	add	r2,r19,r4
  80a45c:	10ff4d16 	blt	r2,r3,80a194 <_realloc_r+0x150>
  80a460:	1705c83a 	sub	r2,r2,fp
  80a464:	870b883a 	add	r5,r16,fp
  80a468:	10800054 	ori	r2,r2,1
  80a46c:	28800115 	stw	r2,4(r5)
  80a470:	80c00117 	ldw	r3,4(r16)
  80a474:	00802074 	movhi	r2,129
  80a478:	1090bc04 	addi	r2,r2,17136
  80a47c:	b009883a 	mov	r4,r22
  80a480:	18c0004c 	andi	r3,r3,1
  80a484:	e0c6b03a 	or	r3,fp,r3
  80a488:	11400215 	stw	r5,8(r2)
  80a48c:	80c00115 	stw	r3,4(r16)
  80a490:	080c8040 	call	80c804 <__malloc_unlock>
  80a494:	84400204 	addi	r17,r16,8
  80a498:	003f2006 	br	80a11c <_realloc_r+0xd8>
  80a49c:	98a9883a 	add	r20,r19,r2
  80a4a0:	2509883a 	add	r4,r4,r20
  80a4a4:	e0800404 	addi	r2,fp,16
  80a4a8:	d9000115 	stw	r4,4(sp)
  80a4ac:	20bf7016 	blt	r4,r2,80a270 <_realloc_r+0x22c>
  80a4b0:	b8c00317 	ldw	r3,12(r23)
  80a4b4:	b8800217 	ldw	r2,8(r23)
  80a4b8:	99bfff04 	addi	r6,r19,-4
  80a4bc:	01400904 	movi	r5,36
  80a4c0:	18800215 	stw	r2,8(r3)
  80a4c4:	10c00315 	stw	r3,12(r2)
  80a4c8:	bc400204 	addi	r17,r23,8
  80a4cc:	29804136 	bltu	r5,r6,80a5d4 <_realloc_r+0x590>
  80a4d0:	008004c4 	movi	r2,19
  80a4d4:	9009883a 	mov	r4,r18
  80a4d8:	880f883a 	mov	r7,r17
  80a4dc:	11800f2e 	bgeu	r2,r6,80a51c <_realloc_r+0x4d8>
  80a4e0:	90800017 	ldw	r2,0(r18)
  80a4e4:	b9c00404 	addi	r7,r23,16
  80a4e8:	91000204 	addi	r4,r18,8
  80a4ec:	b8800215 	stw	r2,8(r23)
  80a4f0:	90c00117 	ldw	r3,4(r18)
  80a4f4:	008006c4 	movi	r2,27
  80a4f8:	b8c00315 	stw	r3,12(r23)
  80a4fc:	1180072e 	bgeu	r2,r6,80a51c <_realloc_r+0x4d8>
  80a500:	90c00217 	ldw	r3,8(r18)
  80a504:	b9c00604 	addi	r7,r23,24
  80a508:	91000404 	addi	r4,r18,16
  80a50c:	b8c00415 	stw	r3,16(r23)
  80a510:	90800317 	ldw	r2,12(r18)
  80a514:	b8800515 	stw	r2,20(r23)
  80a518:	31404026 	beq	r6,r5,80a61c <_realloc_r+0x5d8>
  80a51c:	20800017 	ldw	r2,0(r4)
  80a520:	38800015 	stw	r2,0(r7)
  80a524:	20c00117 	ldw	r3,4(r4)
  80a528:	38c00115 	stw	r3,4(r7)
  80a52c:	20800217 	ldw	r2,8(r4)
  80a530:	38800215 	stw	r2,8(r7)
  80a534:	d8c00117 	ldw	r3,4(sp)
  80a538:	bf0b883a 	add	r5,r23,fp
  80a53c:	b009883a 	mov	r4,r22
  80a540:	1f05c83a 	sub	r2,r3,fp
  80a544:	10800054 	ori	r2,r2,1
  80a548:	28800115 	stw	r2,4(r5)
  80a54c:	b8c00117 	ldw	r3,4(r23)
  80a550:	00802074 	movhi	r2,129
  80a554:	1090bc04 	addi	r2,r2,17136
  80a558:	11400215 	stw	r5,8(r2)
  80a55c:	18c0004c 	andi	r3,r3,1
  80a560:	e0c6b03a 	or	r3,fp,r3
  80a564:	b8c00115 	stw	r3,4(r23)
  80a568:	080c8040 	call	80c804 <__malloc_unlock>
  80a56c:	003eeb06 	br	80a11c <_realloc_r+0xd8>
  80a570:	20800117 	ldw	r2,4(r4)
  80a574:	00ffff04 	movi	r3,-4
  80a578:	800f883a 	mov	r7,r16
  80a57c:	10c4703a 	and	r2,r2,r3
  80a580:	98a9883a 	add	r20,r19,r2
  80a584:	84000204 	addi	r16,r16,8
  80a588:	003ecf06 	br	80a0c8 <_realloc_r+0x84>
  80a58c:	900b883a 	mov	r5,r18
  80a590:	8009883a 	mov	r4,r16
  80a594:	0808cec0 	call	808cec <memmove>
  80a598:	dd000017 	ldw	r20,0(sp)
  80a59c:	b80f883a 	mov	r7,r23
  80a5a0:	003ec906 	br	80a0c8 <_realloc_r+0x84>
  80a5a4:	900b883a 	mov	r5,r18
  80a5a8:	8009883a 	mov	r4,r16
  80a5ac:	0808cec0 	call	808cec <memmove>
  80a5b0:	b80f883a 	mov	r7,r23
  80a5b4:	003ec406 	br	80a0c8 <_realloc_r+0x84>
  80a5b8:	90c00417 	ldw	r3,16(r18)
  80a5bc:	89400604 	addi	r5,r17,24
  80a5c0:	91000604 	addi	r4,r18,24
  80a5c4:	88c00415 	stw	r3,16(r17)
  80a5c8:	90800517 	ldw	r2,20(r18)
  80a5cc:	88800515 	stw	r2,20(r17)
  80a5d0:	003f6806 	br	80a374 <_realloc_r+0x330>
  80a5d4:	900b883a 	mov	r5,r18
  80a5d8:	8809883a 	mov	r4,r17
  80a5dc:	0808cec0 	call	808cec <memmove>
  80a5e0:	003fd406 	br	80a534 <_realloc_r+0x4f0>
  80a5e4:	90c00417 	ldw	r3,16(r18)
  80a5e8:	91000604 	addi	r4,r18,24
  80a5ec:	ba000804 	addi	r8,r23,32
  80a5f0:	b8c00615 	stw	r3,24(r23)
  80a5f4:	90800517 	ldw	r2,20(r18)
  80a5f8:	b8800715 	stw	r2,28(r23)
  80a5fc:	003f1206 	br	80a248 <_realloc_r+0x204>
  80a600:	90c00417 	ldw	r3,16(r18)
  80a604:	91000604 	addi	r4,r18,24
  80a608:	ba000804 	addi	r8,r23,32
  80a60c:	b8c00615 	stw	r3,24(r23)
  80a610:	90800517 	ldw	r2,20(r18)
  80a614:	b8800715 	stw	r2,28(r23)
  80a618:	003f3206 	br	80a2e4 <_realloc_r+0x2a0>
  80a61c:	90c00417 	ldw	r3,16(r18)
  80a620:	91000604 	addi	r4,r18,24
  80a624:	b9c00804 	addi	r7,r23,32
  80a628:	b8c00615 	stw	r3,24(r23)
  80a62c:	90800517 	ldw	r2,20(r18)
  80a630:	b8800715 	stw	r2,28(r23)
  80a634:	003fb906 	br	80a51c <_realloc_r+0x4d8>

0080a638 <__srefill_r>:
  80a638:	defffd04 	addi	sp,sp,-12
  80a63c:	dc400115 	stw	r17,4(sp)
  80a640:	dc000015 	stw	r16,0(sp)
  80a644:	dfc00215 	stw	ra,8(sp)
  80a648:	2023883a 	mov	r17,r4
  80a64c:	2821883a 	mov	r16,r5
  80a650:	20000226 	beq	r4,zero,80a65c <__srefill_r+0x24>
  80a654:	20800e17 	ldw	r2,56(r4)
  80a658:	10004126 	beq	r2,zero,80a760 <__srefill_r+0x128>
  80a65c:	80c0030b 	ldhu	r3,12(r16)
  80a660:	80000115 	stw	zero,4(r16)
  80a664:	1880080c 	andi	r2,r3,32
  80a668:	1000361e 	bne	r2,zero,80a744 <__srefill_r+0x10c>
  80a66c:	1880010c 	andi	r2,r3,4
  80a670:	1000211e 	bne	r2,zero,80a6f8 <__srefill_r+0xc0>
  80a674:	1880040c 	andi	r2,r3,16
  80a678:	10005026 	beq	r2,zero,80a7bc <__srefill_r+0x184>
  80a67c:	1880020c 	andi	r2,r3,8
  80a680:	1000541e 	bne	r2,zero,80a7d4 <__srefill_r+0x19c>
  80a684:	8080030b 	ldhu	r2,12(r16)
  80a688:	10800114 	ori	r2,r2,4
  80a68c:	8080030d 	sth	r2,12(r16)
  80a690:	80800417 	ldw	r2,16(r16)
  80a694:	10004526 	beq	r2,zero,80a7ac <__srefill_r+0x174>
  80a698:	8080030b 	ldhu	r2,12(r16)
  80a69c:	108000cc 	andi	r2,r2,3
  80a6a0:	1000361e 	bne	r2,zero,80a77c <__srefill_r+0x144>
  80a6a4:	81800417 	ldw	r6,16(r16)
  80a6a8:	80c00817 	ldw	r3,32(r16)
  80a6ac:	81400717 	ldw	r5,28(r16)
  80a6b0:	81c00517 	ldw	r7,20(r16)
  80a6b4:	8809883a 	mov	r4,r17
  80a6b8:	81800015 	stw	r6,0(r16)
  80a6bc:	183ee83a 	callr	r3
  80a6c0:	80c0030b 	ldhu	r3,12(r16)
  80a6c4:	1009883a 	mov	r4,r2
  80a6c8:	80800115 	stw	r2,4(r16)
  80a6cc:	00b7ffc4 	movi	r2,-8193
  80a6d0:	1884703a 	and	r2,r3,r2
  80a6d4:	8080030d 	sth	r2,12(r16)
  80a6d8:	0100230e 	bge	zero,r4,80a768 <__srefill_r+0x130>
  80a6dc:	0009883a 	mov	r4,zero
  80a6e0:	2005883a 	mov	r2,r4
  80a6e4:	dfc00217 	ldw	ra,8(sp)
  80a6e8:	dc400117 	ldw	r17,4(sp)
  80a6ec:	dc000017 	ldw	r16,0(sp)
  80a6f0:	dec00304 	addi	sp,sp,12
  80a6f4:	f800283a 	ret
  80a6f8:	81400c17 	ldw	r5,48(r16)
  80a6fc:	283fe426 	beq	r5,zero,80a690 <__srefill_r+0x58>
  80a700:	80801004 	addi	r2,r16,64
  80a704:	28800226 	beq	r5,r2,80a710 <__srefill_r+0xd8>
  80a708:	8809883a 	mov	r4,r17
  80a70c:	08080800 	call	808080 <_free_r>
  80a710:	80800f17 	ldw	r2,60(r16)
  80a714:	80000c15 	stw	zero,48(r16)
  80a718:	80800115 	stw	r2,4(r16)
  80a71c:	103fdc26 	beq	r2,zero,80a690 <__srefill_r+0x58>
  80a720:	80800e17 	ldw	r2,56(r16)
  80a724:	0009883a 	mov	r4,zero
  80a728:	80800015 	stw	r2,0(r16)
  80a72c:	2005883a 	mov	r2,r4
  80a730:	dfc00217 	ldw	ra,8(sp)
  80a734:	dc400117 	ldw	r17,4(sp)
  80a738:	dc000017 	ldw	r16,0(sp)
  80a73c:	dec00304 	addi	sp,sp,12
  80a740:	f800283a 	ret
  80a744:	013fffc4 	movi	r4,-1
  80a748:	2005883a 	mov	r2,r4
  80a74c:	dfc00217 	ldw	ra,8(sp)
  80a750:	dc400117 	ldw	r17,4(sp)
  80a754:	dc000017 	ldw	r16,0(sp)
  80a758:	dec00304 	addi	sp,sp,12
  80a75c:	f800283a 	ret
  80a760:	0807cfc0 	call	807cfc <__sinit>
  80a764:	003fbd06 	br	80a65c <__srefill_r+0x24>
  80a768:	20000b1e 	bne	r4,zero,80a798 <__srefill_r+0x160>
  80a76c:	10800814 	ori	r2,r2,32
  80a770:	013fffc4 	movi	r4,-1
  80a774:	8080030d 	sth	r2,12(r16)
  80a778:	003fd906 	br	80a6e0 <__srefill_r+0xa8>
  80a77c:	00802074 	movhi	r2,129
  80a780:	10966404 	addi	r2,r2,22928
  80a784:	11000017 	ldw	r4,0(r2)
  80a788:	01402074 	movhi	r5,129
  80a78c:	2969ff04 	addi	r5,r5,-22532
  80a790:	08088f80 	call	8088f8 <_fwalk>
  80a794:	003fc306 	br	80a6a4 <__srefill_r+0x6c>
  80a798:	10801014 	ori	r2,r2,64
  80a79c:	013fffc4 	movi	r4,-1
  80a7a0:	8080030d 	sth	r2,12(r16)
  80a7a4:	80000115 	stw	zero,4(r16)
  80a7a8:	003fcd06 	br	80a6e0 <__srefill_r+0xa8>
  80a7ac:	8809883a 	mov	r4,r17
  80a7b0:	800b883a 	mov	r5,r16
  80a7b4:	0808a740 	call	808a74 <__smakebuf_r>
  80a7b8:	003fb706 	br	80a698 <__srefill_r+0x60>
  80a7bc:	18c01014 	ori	r3,r3,64
  80a7c0:	00800244 	movi	r2,9
  80a7c4:	013fffc4 	movi	r4,-1
  80a7c8:	88800015 	stw	r2,0(r17)
  80a7cc:	80c0030d 	sth	r3,12(r16)
  80a7d0:	003fc306 	br	80a6e0 <__srefill_r+0xa8>
  80a7d4:	8809883a 	mov	r4,r17
  80a7d8:	800b883a 	mov	r5,r16
  80a7dc:	0807a640 	call	807a64 <_fflush_r>
  80a7e0:	103fd81e 	bne	r2,zero,80a744 <__srefill_r+0x10c>
  80a7e4:	8080030b 	ldhu	r2,12(r16)
  80a7e8:	80000215 	stw	zero,8(r16)
  80a7ec:	80000615 	stw	zero,24(r16)
  80a7f0:	10bffdcc 	andi	r2,r2,65527
  80a7f4:	8080030d 	sth	r2,12(r16)
  80a7f8:	003fa206 	br	80a684 <__srefill_r+0x4c>

0080a7fc <lflush>:
  80a7fc:	20c0030b 	ldhu	r3,12(r4)
  80a800:	01400244 	movi	r5,9
  80a804:	0005883a 	mov	r2,zero
  80a808:	18c0024c 	andi	r3,r3,9
  80a80c:	19400126 	beq	r3,r5,80a814 <lflush+0x18>
  80a810:	f800283a 	ret
  80a814:	0807c601 	jmpi	807c60 <fflush>

0080a818 <__isinfd>:
  80a818:	200d883a 	mov	r6,r4
  80a81c:	0109c83a 	sub	r4,zero,r4
  80a820:	2188b03a 	or	r4,r4,r6
  80a824:	2008d7fa 	srli	r4,r4,31
  80a828:	00a00034 	movhi	r2,32768
  80a82c:	10bfffc4 	addi	r2,r2,-1
  80a830:	1144703a 	and	r2,r2,r5
  80a834:	2088b03a 	or	r4,r4,r2
  80a838:	009ffc34 	movhi	r2,32752
  80a83c:	1105c83a 	sub	r2,r2,r4
  80a840:	0087c83a 	sub	r3,zero,r2
  80a844:	10c4b03a 	or	r2,r2,r3
  80a848:	1004d7fa 	srli	r2,r2,31
  80a84c:	00c00044 	movi	r3,1
  80a850:	1885c83a 	sub	r2,r3,r2
  80a854:	f800283a 	ret

0080a858 <__isnand>:
  80a858:	200d883a 	mov	r6,r4
  80a85c:	0109c83a 	sub	r4,zero,r4
  80a860:	2188b03a 	or	r4,r4,r6
  80a864:	2008d7fa 	srli	r4,r4,31
  80a868:	00a00034 	movhi	r2,32768
  80a86c:	10bfffc4 	addi	r2,r2,-1
  80a870:	1144703a 	and	r2,r2,r5
  80a874:	2088b03a 	or	r4,r4,r2
  80a878:	009ffc34 	movhi	r2,32752
  80a87c:	1105c83a 	sub	r2,r2,r4
  80a880:	1004d7fa 	srli	r2,r2,31
  80a884:	f800283a 	ret

0080a888 <__sclose>:
  80a888:	2940038f 	ldh	r5,14(r5)
  80a88c:	080ad081 	jmpi	80ad08 <_close_r>

0080a890 <__sseek>:
  80a890:	defffe04 	addi	sp,sp,-8
  80a894:	dc000015 	stw	r16,0(sp)
  80a898:	2821883a 	mov	r16,r5
  80a89c:	2940038f 	ldh	r5,14(r5)
  80a8a0:	dfc00115 	stw	ra,4(sp)
  80a8a4:	080af800 	call	80af80 <_lseek_r>
  80a8a8:	1007883a 	mov	r3,r2
  80a8ac:	00bfffc4 	movi	r2,-1
  80a8b0:	18800926 	beq	r3,r2,80a8d8 <__sseek+0x48>
  80a8b4:	8080030b 	ldhu	r2,12(r16)
  80a8b8:	80c01415 	stw	r3,80(r16)
  80a8bc:	10840014 	ori	r2,r2,4096
  80a8c0:	8080030d 	sth	r2,12(r16)
  80a8c4:	1805883a 	mov	r2,r3
  80a8c8:	dfc00117 	ldw	ra,4(sp)
  80a8cc:	dc000017 	ldw	r16,0(sp)
  80a8d0:	dec00204 	addi	sp,sp,8
  80a8d4:	f800283a 	ret
  80a8d8:	8080030b 	ldhu	r2,12(r16)
  80a8dc:	10bbffcc 	andi	r2,r2,61439
  80a8e0:	8080030d 	sth	r2,12(r16)
  80a8e4:	1805883a 	mov	r2,r3
  80a8e8:	dfc00117 	ldw	ra,4(sp)
  80a8ec:	dc000017 	ldw	r16,0(sp)
  80a8f0:	dec00204 	addi	sp,sp,8
  80a8f4:	f800283a 	ret

0080a8f8 <__swrite>:
  80a8f8:	2880030b 	ldhu	r2,12(r5)
  80a8fc:	defffb04 	addi	sp,sp,-20
  80a900:	dcc00315 	stw	r19,12(sp)
  80a904:	1080400c 	andi	r2,r2,256
  80a908:	dc800215 	stw	r18,8(sp)
  80a90c:	dc400115 	stw	r17,4(sp)
  80a910:	dc000015 	stw	r16,0(sp)
  80a914:	3027883a 	mov	r19,r6
  80a918:	3825883a 	mov	r18,r7
  80a91c:	dfc00415 	stw	ra,16(sp)
  80a920:	2821883a 	mov	r16,r5
  80a924:	000d883a 	mov	r6,zero
  80a928:	01c00084 	movi	r7,2
  80a92c:	2023883a 	mov	r17,r4
  80a930:	10000226 	beq	r2,zero,80a93c <__swrite+0x44>
  80a934:	2940038f 	ldh	r5,14(r5)
  80a938:	080af800 	call	80af80 <_lseek_r>
  80a93c:	8080030b 	ldhu	r2,12(r16)
  80a940:	8140038f 	ldh	r5,14(r16)
  80a944:	8809883a 	mov	r4,r17
  80a948:	10bbffcc 	andi	r2,r2,61439
  80a94c:	980d883a 	mov	r6,r19
  80a950:	900f883a 	mov	r7,r18
  80a954:	8080030d 	sth	r2,12(r16)
  80a958:	dfc00417 	ldw	ra,16(sp)
  80a95c:	dcc00317 	ldw	r19,12(sp)
  80a960:	dc800217 	ldw	r18,8(sp)
  80a964:	dc400117 	ldw	r17,4(sp)
  80a968:	dc000017 	ldw	r16,0(sp)
  80a96c:	dec00504 	addi	sp,sp,20
  80a970:	080abdc1 	jmpi	80abdc <_write_r>

0080a974 <__sread>:
  80a974:	defffe04 	addi	sp,sp,-8
  80a978:	dc000015 	stw	r16,0(sp)
  80a97c:	2821883a 	mov	r16,r5
  80a980:	2940038f 	ldh	r5,14(r5)
  80a984:	dfc00115 	stw	ra,4(sp)
  80a988:	080aff80 	call	80aff8 <_read_r>
  80a98c:	1007883a 	mov	r3,r2
  80a990:	10000816 	blt	r2,zero,80a9b4 <__sread+0x40>
  80a994:	80801417 	ldw	r2,80(r16)
  80a998:	10c5883a 	add	r2,r2,r3
  80a99c:	80801415 	stw	r2,80(r16)
  80a9a0:	1805883a 	mov	r2,r3
  80a9a4:	dfc00117 	ldw	ra,4(sp)
  80a9a8:	dc000017 	ldw	r16,0(sp)
  80a9ac:	dec00204 	addi	sp,sp,8
  80a9b0:	f800283a 	ret
  80a9b4:	8080030b 	ldhu	r2,12(r16)
  80a9b8:	10bbffcc 	andi	r2,r2,61439
  80a9bc:	8080030d 	sth	r2,12(r16)
  80a9c0:	1805883a 	mov	r2,r3
  80a9c4:	dfc00117 	ldw	ra,4(sp)
  80a9c8:	dc000017 	ldw	r16,0(sp)
  80a9cc:	dec00204 	addi	sp,sp,8
  80a9d0:	f800283a 	ret

0080a9d4 <strcmp>:
  80a9d4:	2144b03a 	or	r2,r4,r5
  80a9d8:	108000cc 	andi	r2,r2,3
  80a9dc:	10001d1e 	bne	r2,zero,80aa54 <strcmp+0x80>
  80a9e0:	200f883a 	mov	r7,r4
  80a9e4:	28800017 	ldw	r2,0(r5)
  80a9e8:	21000017 	ldw	r4,0(r4)
  80a9ec:	280d883a 	mov	r6,r5
  80a9f0:	2080161e 	bne	r4,r2,80aa4c <strcmp+0x78>
  80a9f4:	023fbff4 	movhi	r8,65279
  80a9f8:	423fbfc4 	addi	r8,r8,-257
  80a9fc:	2207883a 	add	r3,r4,r8
  80aa00:	01602074 	movhi	r5,32897
  80aa04:	29602004 	addi	r5,r5,-32640
  80aa08:	1946703a 	and	r3,r3,r5
  80aa0c:	0104303a 	nor	r2,zero,r4
  80aa10:	10c4703a 	and	r2,r2,r3
  80aa14:	10001c1e 	bne	r2,zero,80aa88 <strcmp+0xb4>
  80aa18:	4013883a 	mov	r9,r8
  80aa1c:	2811883a 	mov	r8,r5
  80aa20:	00000106 	br	80aa28 <strcmp+0x54>
  80aa24:	1800181e 	bne	r3,zero,80aa88 <strcmp+0xb4>
  80aa28:	39c00104 	addi	r7,r7,4
  80aa2c:	39000017 	ldw	r4,0(r7)
  80aa30:	31800104 	addi	r6,r6,4
  80aa34:	31400017 	ldw	r5,0(r6)
  80aa38:	2245883a 	add	r2,r4,r9
  80aa3c:	1204703a 	and	r2,r2,r8
  80aa40:	0106303a 	nor	r3,zero,r4
  80aa44:	1886703a 	and	r3,r3,r2
  80aa48:	217ff626 	beq	r4,r5,80aa24 <strcmp+0x50>
  80aa4c:	3809883a 	mov	r4,r7
  80aa50:	300b883a 	mov	r5,r6
  80aa54:	20c00007 	ldb	r3,0(r4)
  80aa58:	1800051e 	bne	r3,zero,80aa70 <strcmp+0x9c>
  80aa5c:	00000606 	br	80aa78 <strcmp+0xa4>
  80aa60:	21000044 	addi	r4,r4,1
  80aa64:	20c00007 	ldb	r3,0(r4)
  80aa68:	29400044 	addi	r5,r5,1
  80aa6c:	18000226 	beq	r3,zero,80aa78 <strcmp+0xa4>
  80aa70:	28800007 	ldb	r2,0(r5)
  80aa74:	18bffa26 	beq	r3,r2,80aa60 <strcmp+0x8c>
  80aa78:	20c00003 	ldbu	r3,0(r4)
  80aa7c:	28800003 	ldbu	r2,0(r5)
  80aa80:	1885c83a 	sub	r2,r3,r2
  80aa84:	f800283a 	ret
  80aa88:	0005883a 	mov	r2,zero
  80aa8c:	f800283a 	ret

0080aa90 <__swbuf_r>:
  80aa90:	defffc04 	addi	sp,sp,-16
  80aa94:	dc400215 	stw	r17,8(sp)
  80aa98:	dc000115 	stw	r16,4(sp)
  80aa9c:	dfc00315 	stw	ra,12(sp)
  80aaa0:	2023883a 	mov	r17,r4
  80aaa4:	2821883a 	mov	r16,r5
  80aaa8:	20000226 	beq	r4,zero,80aab4 <__swbuf_r+0x24>
  80aaac:	20800e17 	ldw	r2,56(r4)
  80aab0:	10002f26 	beq	r2,zero,80ab70 <__swbuf_r+0xe0>
  80aab4:	3080030b 	ldhu	r2,12(r6)
  80aab8:	30c00617 	ldw	r3,24(r6)
  80aabc:	1080020c 	andi	r2,r2,8
  80aac0:	30c00215 	stw	r3,8(r6)
  80aac4:	10002226 	beq	r2,zero,80ab50 <__swbuf_r+0xc0>
  80aac8:	30c00417 	ldw	r3,16(r6)
  80aacc:	18002026 	beq	r3,zero,80ab50 <__swbuf_r+0xc0>
  80aad0:	31000017 	ldw	r4,0(r6)
  80aad4:	30800517 	ldw	r2,20(r6)
  80aad8:	20c7c83a 	sub	r3,r4,r3
  80aadc:	18802f0e 	bge	r3,r2,80ab9c <__swbuf_r+0x10c>
  80aae0:	19400044 	addi	r5,r3,1
  80aae4:	30800217 	ldw	r2,8(r6)
  80aae8:	84003fcc 	andi	r16,r16,255
  80aaec:	20c00044 	addi	r3,r4,1
  80aaf0:	10bfffc4 	addi	r2,r2,-1
  80aaf4:	30800215 	stw	r2,8(r6)
  80aaf8:	24000005 	stb	r16,0(r4)
  80aafc:	30800517 	ldw	r2,20(r6)
  80ab00:	30c00015 	stw	r3,0(r6)
  80ab04:	11400c26 	beq	r2,r5,80ab38 <__swbuf_r+0xa8>
  80ab08:	3080030b 	ldhu	r2,12(r6)
  80ab0c:	1080004c 	andi	r2,r2,1
  80ab10:	1005003a 	cmpeq	r2,r2,zero
  80ab14:	10000626 	beq	r2,zero,80ab30 <__swbuf_r+0xa0>
  80ab18:	8005883a 	mov	r2,r16
  80ab1c:	dfc00317 	ldw	ra,12(sp)
  80ab20:	dc400217 	ldw	r17,8(sp)
  80ab24:	dc000117 	ldw	r16,4(sp)
  80ab28:	dec00404 	addi	sp,sp,16
  80ab2c:	f800283a 	ret
  80ab30:	00800284 	movi	r2,10
  80ab34:	80bff81e 	bne	r16,r2,80ab18 <__swbuf_r+0x88>
  80ab38:	8809883a 	mov	r4,r17
  80ab3c:	300b883a 	mov	r5,r6
  80ab40:	0807a640 	call	807a64 <_fflush_r>
  80ab44:	103ff426 	beq	r2,zero,80ab18 <__swbuf_r+0x88>
  80ab48:	043fffc4 	movi	r16,-1
  80ab4c:	003ff206 	br	80ab18 <__swbuf_r+0x88>
  80ab50:	300b883a 	mov	r5,r6
  80ab54:	8809883a 	mov	r4,r17
  80ab58:	d9800015 	stw	r6,0(sp)
  80ab5c:	0805fa80 	call	805fa8 <__swsetup_r>
  80ab60:	d9800017 	ldw	r6,0(sp)
  80ab64:	1000061e 	bne	r2,zero,80ab80 <__swbuf_r+0xf0>
  80ab68:	30c00417 	ldw	r3,16(r6)
  80ab6c:	003fd806 	br	80aad0 <__swbuf_r+0x40>
  80ab70:	d9800015 	stw	r6,0(sp)
  80ab74:	0807cfc0 	call	807cfc <__sinit>
  80ab78:	d9800017 	ldw	r6,0(sp)
  80ab7c:	003fcd06 	br	80aab4 <__swbuf_r+0x24>
  80ab80:	3080030b 	ldhu	r2,12(r6)
  80ab84:	00c00244 	movi	r3,9
  80ab88:	043fffc4 	movi	r16,-1
  80ab8c:	10801014 	ori	r2,r2,64
  80ab90:	3080030d 	sth	r2,12(r6)
  80ab94:	88c00015 	stw	r3,0(r17)
  80ab98:	003fdf06 	br	80ab18 <__swbuf_r+0x88>
  80ab9c:	300b883a 	mov	r5,r6
  80aba0:	8809883a 	mov	r4,r17
  80aba4:	d9800015 	stw	r6,0(sp)
  80aba8:	0807a640 	call	807a64 <_fflush_r>
  80abac:	d9800017 	ldw	r6,0(sp)
  80abb0:	103fe51e 	bne	r2,zero,80ab48 <__swbuf_r+0xb8>
  80abb4:	31000017 	ldw	r4,0(r6)
  80abb8:	01400044 	movi	r5,1
  80abbc:	003fc906 	br	80aae4 <__swbuf_r+0x54>

0080abc0 <__swbuf>:
  80abc0:	01802074 	movhi	r6,129
  80abc4:	31966304 	addi	r6,r6,22924
  80abc8:	2007883a 	mov	r3,r4
  80abcc:	31000017 	ldw	r4,0(r6)
  80abd0:	280d883a 	mov	r6,r5
  80abd4:	180b883a 	mov	r5,r3
  80abd8:	080aa901 	jmpi	80aa90 <__swbuf_r>

0080abdc <_write_r>:
  80abdc:	defffd04 	addi	sp,sp,-12
  80abe0:	dc000015 	stw	r16,0(sp)
  80abe4:	04002074 	movhi	r16,129
  80abe8:	841db204 	addi	r16,r16,30408
  80abec:	dc400115 	stw	r17,4(sp)
  80abf0:	80000015 	stw	zero,0(r16)
  80abf4:	2023883a 	mov	r17,r4
  80abf8:	2809883a 	mov	r4,r5
  80abfc:	300b883a 	mov	r5,r6
  80ac00:	380d883a 	mov	r6,r7
  80ac04:	dfc00215 	stw	ra,8(sp)
  80ac08:	080c9b80 	call	80c9b8 <write>
  80ac0c:	1007883a 	mov	r3,r2
  80ac10:	00bfffc4 	movi	r2,-1
  80ac14:	18800626 	beq	r3,r2,80ac30 <_write_r+0x54>
  80ac18:	1805883a 	mov	r2,r3
  80ac1c:	dfc00217 	ldw	ra,8(sp)
  80ac20:	dc400117 	ldw	r17,4(sp)
  80ac24:	dc000017 	ldw	r16,0(sp)
  80ac28:	dec00304 	addi	sp,sp,12
  80ac2c:	f800283a 	ret
  80ac30:	80800017 	ldw	r2,0(r16)
  80ac34:	103ff826 	beq	r2,zero,80ac18 <_write_r+0x3c>
  80ac38:	88800015 	stw	r2,0(r17)
  80ac3c:	1805883a 	mov	r2,r3
  80ac40:	dfc00217 	ldw	ra,8(sp)
  80ac44:	dc400117 	ldw	r17,4(sp)
  80ac48:	dc000017 	ldw	r16,0(sp)
  80ac4c:	dec00304 	addi	sp,sp,12
  80ac50:	f800283a 	ret

0080ac54 <_calloc_r>:
  80ac54:	298b383a 	mul	r5,r5,r6
  80ac58:	defffe04 	addi	sp,sp,-8
  80ac5c:	dc000015 	stw	r16,0(sp)
  80ac60:	dfc00115 	stw	ra,4(sp)
  80ac64:	080360c0 	call	80360c <_malloc_r>
  80ac68:	1021883a 	mov	r16,r2
  80ac6c:	01c00904 	movi	r7,36
  80ac70:	10000d26 	beq	r2,zero,80aca8 <_calloc_r+0x54>
  80ac74:	10ffff17 	ldw	r3,-4(r2)
  80ac78:	1009883a 	mov	r4,r2
  80ac7c:	00bfff04 	movi	r2,-4
  80ac80:	1886703a 	and	r3,r3,r2
  80ac84:	1887883a 	add	r3,r3,r2
  80ac88:	180d883a 	mov	r6,r3
  80ac8c:	000b883a 	mov	r5,zero
  80ac90:	38c01736 	bltu	r7,r3,80acf0 <_calloc_r+0x9c>
  80ac94:	008004c4 	movi	r2,19
  80ac98:	10c00836 	bltu	r2,r3,80acbc <_calloc_r+0x68>
  80ac9c:	20000215 	stw	zero,8(r4)
  80aca0:	20000015 	stw	zero,0(r4)
  80aca4:	20000115 	stw	zero,4(r4)
  80aca8:	8005883a 	mov	r2,r16
  80acac:	dfc00117 	ldw	ra,4(sp)
  80acb0:	dc000017 	ldw	r16,0(sp)
  80acb4:	dec00204 	addi	sp,sp,8
  80acb8:	f800283a 	ret
  80acbc:	008006c4 	movi	r2,27
  80acc0:	80000015 	stw	zero,0(r16)
  80acc4:	80000115 	stw	zero,4(r16)
  80acc8:	81000204 	addi	r4,r16,8
  80accc:	10fff32e 	bgeu	r2,r3,80ac9c <_calloc_r+0x48>
  80acd0:	80000215 	stw	zero,8(r16)
  80acd4:	80000315 	stw	zero,12(r16)
  80acd8:	81000404 	addi	r4,r16,16
  80acdc:	19ffef1e 	bne	r3,r7,80ac9c <_calloc_r+0x48>
  80ace0:	81000604 	addi	r4,r16,24
  80ace4:	80000415 	stw	zero,16(r16)
  80ace8:	80000515 	stw	zero,20(r16)
  80acec:	003feb06 	br	80ac9c <_calloc_r+0x48>
  80acf0:	0808dcc0 	call	808dcc <memset>
  80acf4:	8005883a 	mov	r2,r16
  80acf8:	dfc00117 	ldw	ra,4(sp)
  80acfc:	dc000017 	ldw	r16,0(sp)
  80ad00:	dec00204 	addi	sp,sp,8
  80ad04:	f800283a 	ret

0080ad08 <_close_r>:
  80ad08:	defffd04 	addi	sp,sp,-12
  80ad0c:	dc000015 	stw	r16,0(sp)
  80ad10:	04002074 	movhi	r16,129
  80ad14:	841db204 	addi	r16,r16,30408
  80ad18:	dc400115 	stw	r17,4(sp)
  80ad1c:	80000015 	stw	zero,0(r16)
  80ad20:	2023883a 	mov	r17,r4
  80ad24:	2809883a 	mov	r4,r5
  80ad28:	dfc00215 	stw	ra,8(sp)
  80ad2c:	080c2b80 	call	80c2b8 <close>
  80ad30:	1007883a 	mov	r3,r2
  80ad34:	00bfffc4 	movi	r2,-1
  80ad38:	18800626 	beq	r3,r2,80ad54 <_close_r+0x4c>
  80ad3c:	1805883a 	mov	r2,r3
  80ad40:	dfc00217 	ldw	ra,8(sp)
  80ad44:	dc400117 	ldw	r17,4(sp)
  80ad48:	dc000017 	ldw	r16,0(sp)
  80ad4c:	dec00304 	addi	sp,sp,12
  80ad50:	f800283a 	ret
  80ad54:	80800017 	ldw	r2,0(r16)
  80ad58:	103ff826 	beq	r2,zero,80ad3c <_close_r+0x34>
  80ad5c:	88800015 	stw	r2,0(r17)
  80ad60:	1805883a 	mov	r2,r3
  80ad64:	dfc00217 	ldw	ra,8(sp)
  80ad68:	dc400117 	ldw	r17,4(sp)
  80ad6c:	dc000017 	ldw	r16,0(sp)
  80ad70:	dec00304 	addi	sp,sp,12
  80ad74:	f800283a 	ret

0080ad78 <_fclose_r>:
  80ad78:	defffc04 	addi	sp,sp,-16
  80ad7c:	dc400115 	stw	r17,4(sp)
  80ad80:	dc000015 	stw	r16,0(sp)
  80ad84:	dfc00315 	stw	ra,12(sp)
  80ad88:	dc800215 	stw	r18,8(sp)
  80ad8c:	2821883a 	mov	r16,r5
  80ad90:	2023883a 	mov	r17,r4
  80ad94:	28002926 	beq	r5,zero,80ae3c <_fclose_r+0xc4>
  80ad98:	0807cec0 	call	807cec <__sfp_lock_acquire>
  80ad9c:	88000226 	beq	r17,zero,80ada8 <_fclose_r+0x30>
  80ada0:	88800e17 	ldw	r2,56(r17)
  80ada4:	10002d26 	beq	r2,zero,80ae5c <_fclose_r+0xe4>
  80ada8:	8080030f 	ldh	r2,12(r16)
  80adac:	10002226 	beq	r2,zero,80ae38 <_fclose_r+0xc0>
  80adb0:	8809883a 	mov	r4,r17
  80adb4:	800b883a 	mov	r5,r16
  80adb8:	0807a640 	call	807a64 <_fflush_r>
  80adbc:	1025883a 	mov	r18,r2
  80adc0:	80800b17 	ldw	r2,44(r16)
  80adc4:	10000426 	beq	r2,zero,80add8 <_fclose_r+0x60>
  80adc8:	81400717 	ldw	r5,28(r16)
  80adcc:	8809883a 	mov	r4,r17
  80add0:	103ee83a 	callr	r2
  80add4:	10002a16 	blt	r2,zero,80ae80 <_fclose_r+0x108>
  80add8:	8080030b 	ldhu	r2,12(r16)
  80addc:	1080200c 	andi	r2,r2,128
  80ade0:	1000231e 	bne	r2,zero,80ae70 <_fclose_r+0xf8>
  80ade4:	81400c17 	ldw	r5,48(r16)
  80ade8:	28000526 	beq	r5,zero,80ae00 <_fclose_r+0x88>
  80adec:	80801004 	addi	r2,r16,64
  80adf0:	28800226 	beq	r5,r2,80adfc <_fclose_r+0x84>
  80adf4:	8809883a 	mov	r4,r17
  80adf8:	08080800 	call	808080 <_free_r>
  80adfc:	80000c15 	stw	zero,48(r16)
  80ae00:	81401117 	ldw	r5,68(r16)
  80ae04:	28000326 	beq	r5,zero,80ae14 <_fclose_r+0x9c>
  80ae08:	8809883a 	mov	r4,r17
  80ae0c:	08080800 	call	808080 <_free_r>
  80ae10:	80001115 	stw	zero,68(r16)
  80ae14:	8000030d 	sth	zero,12(r16)
  80ae18:	0807cf00 	call	807cf0 <__sfp_lock_release>
  80ae1c:	9005883a 	mov	r2,r18
  80ae20:	dfc00317 	ldw	ra,12(sp)
  80ae24:	dc800217 	ldw	r18,8(sp)
  80ae28:	dc400117 	ldw	r17,4(sp)
  80ae2c:	dc000017 	ldw	r16,0(sp)
  80ae30:	dec00404 	addi	sp,sp,16
  80ae34:	f800283a 	ret
  80ae38:	0807cf00 	call	807cf0 <__sfp_lock_release>
  80ae3c:	0025883a 	mov	r18,zero
  80ae40:	9005883a 	mov	r2,r18
  80ae44:	dfc00317 	ldw	ra,12(sp)
  80ae48:	dc800217 	ldw	r18,8(sp)
  80ae4c:	dc400117 	ldw	r17,4(sp)
  80ae50:	dc000017 	ldw	r16,0(sp)
  80ae54:	dec00404 	addi	sp,sp,16
  80ae58:	f800283a 	ret
  80ae5c:	8809883a 	mov	r4,r17
  80ae60:	0807cfc0 	call	807cfc <__sinit>
  80ae64:	8080030f 	ldh	r2,12(r16)
  80ae68:	103fd11e 	bne	r2,zero,80adb0 <_fclose_r+0x38>
  80ae6c:	003ff206 	br	80ae38 <_fclose_r+0xc0>
  80ae70:	81400417 	ldw	r5,16(r16)
  80ae74:	8809883a 	mov	r4,r17
  80ae78:	08080800 	call	808080 <_free_r>
  80ae7c:	003fd906 	br	80ade4 <_fclose_r+0x6c>
  80ae80:	04bfffc4 	movi	r18,-1
  80ae84:	003fd406 	br	80add8 <_fclose_r+0x60>

0080ae88 <fclose>:
  80ae88:	00802074 	movhi	r2,129
  80ae8c:	10966304 	addi	r2,r2,22924
  80ae90:	200b883a 	mov	r5,r4
  80ae94:	11000017 	ldw	r4,0(r2)
  80ae98:	080ad781 	jmpi	80ad78 <_fclose_r>

0080ae9c <_fstat_r>:
  80ae9c:	defffd04 	addi	sp,sp,-12
  80aea0:	dc000015 	stw	r16,0(sp)
  80aea4:	04002074 	movhi	r16,129
  80aea8:	841db204 	addi	r16,r16,30408
  80aeac:	dc400115 	stw	r17,4(sp)
  80aeb0:	80000015 	stw	zero,0(r16)
  80aeb4:	2023883a 	mov	r17,r4
  80aeb8:	2809883a 	mov	r4,r5
  80aebc:	300b883a 	mov	r5,r6
  80aec0:	dfc00215 	stw	ra,8(sp)
  80aec4:	080c3c40 	call	80c3c4 <fstat>
  80aec8:	1007883a 	mov	r3,r2
  80aecc:	00bfffc4 	movi	r2,-1
  80aed0:	18800626 	beq	r3,r2,80aeec <_fstat_r+0x50>
  80aed4:	1805883a 	mov	r2,r3
  80aed8:	dfc00217 	ldw	ra,8(sp)
  80aedc:	dc400117 	ldw	r17,4(sp)
  80aee0:	dc000017 	ldw	r16,0(sp)
  80aee4:	dec00304 	addi	sp,sp,12
  80aee8:	f800283a 	ret
  80aeec:	80800017 	ldw	r2,0(r16)
  80aef0:	103ff826 	beq	r2,zero,80aed4 <_fstat_r+0x38>
  80aef4:	88800015 	stw	r2,0(r17)
  80aef8:	1805883a 	mov	r2,r3
  80aefc:	dfc00217 	ldw	ra,8(sp)
  80af00:	dc400117 	ldw	r17,4(sp)
  80af04:	dc000017 	ldw	r16,0(sp)
  80af08:	dec00304 	addi	sp,sp,12
  80af0c:	f800283a 	ret

0080af10 <_isatty_r>:
  80af10:	defffd04 	addi	sp,sp,-12
  80af14:	dc000015 	stw	r16,0(sp)
  80af18:	04002074 	movhi	r16,129
  80af1c:	841db204 	addi	r16,r16,30408
  80af20:	dc400115 	stw	r17,4(sp)
  80af24:	80000015 	stw	zero,0(r16)
  80af28:	2023883a 	mov	r17,r4
  80af2c:	2809883a 	mov	r4,r5
  80af30:	dfc00215 	stw	ra,8(sp)
  80af34:	080c5780 	call	80c578 <isatty>
  80af38:	1007883a 	mov	r3,r2
  80af3c:	00bfffc4 	movi	r2,-1
  80af40:	18800626 	beq	r3,r2,80af5c <_isatty_r+0x4c>
  80af44:	1805883a 	mov	r2,r3
  80af48:	dfc00217 	ldw	ra,8(sp)
  80af4c:	dc400117 	ldw	r17,4(sp)
  80af50:	dc000017 	ldw	r16,0(sp)
  80af54:	dec00304 	addi	sp,sp,12
  80af58:	f800283a 	ret
  80af5c:	80800017 	ldw	r2,0(r16)
  80af60:	103ff826 	beq	r2,zero,80af44 <_isatty_r+0x34>
  80af64:	88800015 	stw	r2,0(r17)
  80af68:	1805883a 	mov	r2,r3
  80af6c:	dfc00217 	ldw	ra,8(sp)
  80af70:	dc400117 	ldw	r17,4(sp)
  80af74:	dc000017 	ldw	r16,0(sp)
  80af78:	dec00304 	addi	sp,sp,12
  80af7c:	f800283a 	ret

0080af80 <_lseek_r>:
  80af80:	defffd04 	addi	sp,sp,-12
  80af84:	dc000015 	stw	r16,0(sp)
  80af88:	04002074 	movhi	r16,129
  80af8c:	841db204 	addi	r16,r16,30408
  80af90:	dc400115 	stw	r17,4(sp)
  80af94:	80000015 	stw	zero,0(r16)
  80af98:	2023883a 	mov	r17,r4
  80af9c:	2809883a 	mov	r4,r5
  80afa0:	300b883a 	mov	r5,r6
  80afa4:	380d883a 	mov	r6,r7
  80afa8:	dfc00215 	stw	ra,8(sp)
  80afac:	080c6e80 	call	80c6e8 <lseek>
  80afb0:	1007883a 	mov	r3,r2
  80afb4:	00bfffc4 	movi	r2,-1
  80afb8:	18800626 	beq	r3,r2,80afd4 <_lseek_r+0x54>
  80afbc:	1805883a 	mov	r2,r3
  80afc0:	dfc00217 	ldw	ra,8(sp)
  80afc4:	dc400117 	ldw	r17,4(sp)
  80afc8:	dc000017 	ldw	r16,0(sp)
  80afcc:	dec00304 	addi	sp,sp,12
  80afd0:	f800283a 	ret
  80afd4:	80800017 	ldw	r2,0(r16)
  80afd8:	103ff826 	beq	r2,zero,80afbc <_lseek_r+0x3c>
  80afdc:	88800015 	stw	r2,0(r17)
  80afe0:	1805883a 	mov	r2,r3
  80afe4:	dfc00217 	ldw	ra,8(sp)
  80afe8:	dc400117 	ldw	r17,4(sp)
  80afec:	dc000017 	ldw	r16,0(sp)
  80aff0:	dec00304 	addi	sp,sp,12
  80aff4:	f800283a 	ret

0080aff8 <_read_r>:
  80aff8:	defffd04 	addi	sp,sp,-12
  80affc:	dc000015 	stw	r16,0(sp)
  80b000:	04002074 	movhi	r16,129
  80b004:	841db204 	addi	r16,r16,30408
  80b008:	dc400115 	stw	r17,4(sp)
  80b00c:	80000015 	stw	zero,0(r16)
  80b010:	2023883a 	mov	r17,r4
  80b014:	2809883a 	mov	r4,r5
  80b018:	300b883a 	mov	r5,r6
  80b01c:	380d883a 	mov	r6,r7
  80b020:	dfc00215 	stw	ra,8(sp)
  80b024:	080c8240 	call	80c824 <read>
  80b028:	1007883a 	mov	r3,r2
  80b02c:	00bfffc4 	movi	r2,-1
  80b030:	18800626 	beq	r3,r2,80b04c <_read_r+0x54>
  80b034:	1805883a 	mov	r2,r3
  80b038:	dfc00217 	ldw	ra,8(sp)
  80b03c:	dc400117 	ldw	r17,4(sp)
  80b040:	dc000017 	ldw	r16,0(sp)
  80b044:	dec00304 	addi	sp,sp,12
  80b048:	f800283a 	ret
  80b04c:	80800017 	ldw	r2,0(r16)
  80b050:	103ff826 	beq	r2,zero,80b034 <_read_r+0x3c>
  80b054:	88800015 	stw	r2,0(r17)
  80b058:	1805883a 	mov	r2,r3
  80b05c:	dfc00217 	ldw	ra,8(sp)
  80b060:	dc400117 	ldw	r17,4(sp)
  80b064:	dc000017 	ldw	r16,0(sp)
  80b068:	dec00304 	addi	sp,sp,12
  80b06c:	f800283a 	ret

0080b070 <__udivdi3>:
  80b070:	defff004 	addi	sp,sp,-64
  80b074:	2005883a 	mov	r2,r4
  80b078:	3011883a 	mov	r8,r6
  80b07c:	df000e15 	stw	fp,56(sp)
  80b080:	dd000a15 	stw	r20,40(sp)
  80b084:	dc000615 	stw	r16,24(sp)
  80b088:	dfc00f15 	stw	ra,60(sp)
  80b08c:	ddc00d15 	stw	r23,52(sp)
  80b090:	dd800c15 	stw	r22,48(sp)
  80b094:	dd400b15 	stw	r21,44(sp)
  80b098:	dcc00915 	stw	r19,36(sp)
  80b09c:	dc800815 	stw	r18,32(sp)
  80b0a0:	dc400715 	stw	r17,28(sp)
  80b0a4:	4021883a 	mov	r16,r8
  80b0a8:	1039883a 	mov	fp,r2
  80b0ac:	2829883a 	mov	r20,r5
  80b0b0:	38003b1e 	bne	r7,zero,80b1a0 <__udivdi3+0x130>
  80b0b4:	2a005c36 	bltu	r5,r8,80b228 <__udivdi3+0x1b8>
  80b0b8:	4000a626 	beq	r8,zero,80b354 <__udivdi3+0x2e4>
  80b0bc:	00bfffd4 	movui	r2,65535
  80b0c0:	14009e36 	bltu	r2,r16,80b33c <__udivdi3+0x2cc>
  80b0c4:	00803fc4 	movi	r2,255
  80b0c8:	14013d36 	bltu	r2,r16,80b5c0 <__udivdi3+0x550>
  80b0cc:	000b883a 	mov	r5,zero
  80b0d0:	0005883a 	mov	r2,zero
  80b0d4:	8084d83a 	srl	r2,r16,r2
  80b0d8:	01002074 	movhi	r4,129
  80b0dc:	210e7804 	addi	r4,r4,14816
  80b0e0:	01800804 	movi	r6,32
  80b0e4:	1105883a 	add	r2,r2,r4
  80b0e8:	10c00003 	ldbu	r3,0(r2)
  80b0ec:	28c7883a 	add	r3,r5,r3
  80b0f0:	30edc83a 	sub	r22,r6,r3
  80b0f4:	b000ee1e 	bne	r22,zero,80b4b0 <__udivdi3+0x440>
  80b0f8:	802ad43a 	srli	r21,r16,16
  80b0fc:	00800044 	movi	r2,1
  80b100:	a423c83a 	sub	r17,r20,r16
  80b104:	85ffffcc 	andi	r23,r16,65535
  80b108:	d8800315 	stw	r2,12(sp)
  80b10c:	8809883a 	mov	r4,r17
  80b110:	a80b883a 	mov	r5,r21
  80b114:	080c2a80 	call	80c2a8 <__udivsi3>
  80b118:	8809883a 	mov	r4,r17
  80b11c:	a80b883a 	mov	r5,r21
  80b120:	102d883a 	mov	r22,r2
  80b124:	080c2b00 	call	80c2b0 <__umodsi3>
  80b128:	1004943a 	slli	r2,r2,16
  80b12c:	e006d43a 	srli	r3,fp,16
  80b130:	bda3383a 	mul	r17,r23,r22
  80b134:	10c4b03a 	or	r2,r2,r3
  80b138:	1440042e 	bgeu	r2,r17,80b14c <__udivdi3+0xdc>
  80b13c:	1405883a 	add	r2,r2,r16
  80b140:	b5bfffc4 	addi	r22,r22,-1
  80b144:	14000136 	bltu	r2,r16,80b14c <__udivdi3+0xdc>
  80b148:	14413d36 	bltu	r2,r17,80b640 <__udivdi3+0x5d0>
  80b14c:	1463c83a 	sub	r17,r2,r17
  80b150:	8809883a 	mov	r4,r17
  80b154:	a80b883a 	mov	r5,r21
  80b158:	080c2a80 	call	80c2a8 <__udivsi3>
  80b15c:	8809883a 	mov	r4,r17
  80b160:	a80b883a 	mov	r5,r21
  80b164:	1029883a 	mov	r20,r2
  80b168:	080c2b00 	call	80c2b0 <__umodsi3>
  80b16c:	1004943a 	slli	r2,r2,16
  80b170:	bd09383a 	mul	r4,r23,r20
  80b174:	e0ffffcc 	andi	r3,fp,65535
  80b178:	10c4b03a 	or	r2,r2,r3
  80b17c:	1100042e 	bgeu	r2,r4,80b190 <__udivdi3+0x120>
  80b180:	8085883a 	add	r2,r16,r2
  80b184:	a53fffc4 	addi	r20,r20,-1
  80b188:	14000136 	bltu	r2,r16,80b190 <__udivdi3+0x120>
  80b18c:	11012036 	bltu	r2,r4,80b610 <__udivdi3+0x5a0>
  80b190:	b004943a 	slli	r2,r22,16
  80b194:	d9000317 	ldw	r4,12(sp)
  80b198:	a084b03a 	or	r2,r20,r2
  80b19c:	00001506 	br	80b1f4 <__udivdi3+0x184>
  80b1a0:	380d883a 	mov	r6,r7
  80b1a4:	29c06236 	bltu	r5,r7,80b330 <__udivdi3+0x2c0>
  80b1a8:	00bfffd4 	movui	r2,65535
  80b1ac:	11c05a36 	bltu	r2,r7,80b318 <__udivdi3+0x2a8>
  80b1b0:	00803fc4 	movi	r2,255
  80b1b4:	11c0fc36 	bltu	r2,r7,80b5a8 <__udivdi3+0x538>
  80b1b8:	000b883a 	mov	r5,zero
  80b1bc:	0005883a 	mov	r2,zero
  80b1c0:	3084d83a 	srl	r2,r6,r2
  80b1c4:	01002074 	movhi	r4,129
  80b1c8:	210e7804 	addi	r4,r4,14816
  80b1cc:	01c00804 	movi	r7,32
  80b1d0:	1105883a 	add	r2,r2,r4
  80b1d4:	10c00003 	ldbu	r3,0(r2)
  80b1d8:	28c7883a 	add	r3,r5,r3
  80b1dc:	38efc83a 	sub	r23,r7,r3
  80b1e0:	b800691e 	bne	r23,zero,80b388 <__udivdi3+0x318>
  80b1e4:	35000136 	bltu	r6,r20,80b1ec <__udivdi3+0x17c>
  80b1e8:	e4005136 	bltu	fp,r16,80b330 <__udivdi3+0x2c0>
  80b1ec:	00800044 	movi	r2,1
  80b1f0:	0009883a 	mov	r4,zero
  80b1f4:	2007883a 	mov	r3,r4
  80b1f8:	dfc00f17 	ldw	ra,60(sp)
  80b1fc:	df000e17 	ldw	fp,56(sp)
  80b200:	ddc00d17 	ldw	r23,52(sp)
  80b204:	dd800c17 	ldw	r22,48(sp)
  80b208:	dd400b17 	ldw	r21,44(sp)
  80b20c:	dd000a17 	ldw	r20,40(sp)
  80b210:	dcc00917 	ldw	r19,36(sp)
  80b214:	dc800817 	ldw	r18,32(sp)
  80b218:	dc400717 	ldw	r17,28(sp)
  80b21c:	dc000617 	ldw	r16,24(sp)
  80b220:	dec01004 	addi	sp,sp,64
  80b224:	f800283a 	ret
  80b228:	00bfffd4 	movui	r2,65535
  80b22c:	12005036 	bltu	r2,r8,80b370 <__udivdi3+0x300>
  80b230:	00803fc4 	movi	r2,255
  80b234:	1200e836 	bltu	r2,r8,80b5d8 <__udivdi3+0x568>
  80b238:	000b883a 	mov	r5,zero
  80b23c:	0005883a 	mov	r2,zero
  80b240:	8084d83a 	srl	r2,r16,r2
  80b244:	01002074 	movhi	r4,129
  80b248:	210e7804 	addi	r4,r4,14816
  80b24c:	01800804 	movi	r6,32
  80b250:	1105883a 	add	r2,r2,r4
  80b254:	10c00003 	ldbu	r3,0(r2)
  80b258:	28c7883a 	add	r3,r5,r3
  80b25c:	30cbc83a 	sub	r5,r6,r3
  80b260:	28000626 	beq	r5,zero,80b27c <__udivdi3+0x20c>
  80b264:	3145c83a 	sub	r2,r6,r5
  80b268:	e084d83a 	srl	r2,fp,r2
  80b26c:	a146983a 	sll	r3,r20,r5
  80b270:	e178983a 	sll	fp,fp,r5
  80b274:	8160983a 	sll	r16,r16,r5
  80b278:	18a8b03a 	or	r20,r3,r2
  80b27c:	802ad43a 	srli	r21,r16,16
  80b280:	a009883a 	mov	r4,r20
  80b284:	85ffffcc 	andi	r23,r16,65535
  80b288:	a80b883a 	mov	r5,r21
  80b28c:	080c2a80 	call	80c2a8 <__udivsi3>
  80b290:	a009883a 	mov	r4,r20
  80b294:	a80b883a 	mov	r5,r21
  80b298:	102d883a 	mov	r22,r2
  80b29c:	080c2b00 	call	80c2b0 <__umodsi3>
  80b2a0:	1004943a 	slli	r2,r2,16
  80b2a4:	e006d43a 	srli	r3,fp,16
  80b2a8:	bda3383a 	mul	r17,r23,r22
  80b2ac:	10c4b03a 	or	r2,r2,r3
  80b2b0:	1440042e 	bgeu	r2,r17,80b2c4 <__udivdi3+0x254>
  80b2b4:	1405883a 	add	r2,r2,r16
  80b2b8:	b5bfffc4 	addi	r22,r22,-1
  80b2bc:	14000136 	bltu	r2,r16,80b2c4 <__udivdi3+0x254>
  80b2c0:	1440d536 	bltu	r2,r17,80b618 <__udivdi3+0x5a8>
  80b2c4:	1463c83a 	sub	r17,r2,r17
  80b2c8:	8809883a 	mov	r4,r17
  80b2cc:	a80b883a 	mov	r5,r21
  80b2d0:	080c2a80 	call	80c2a8 <__udivsi3>
  80b2d4:	8809883a 	mov	r4,r17
  80b2d8:	a80b883a 	mov	r5,r21
  80b2dc:	1029883a 	mov	r20,r2
  80b2e0:	080c2b00 	call	80c2b0 <__umodsi3>
  80b2e4:	1004943a 	slli	r2,r2,16
  80b2e8:	bd09383a 	mul	r4,r23,r20
  80b2ec:	e0ffffcc 	andi	r3,fp,65535
  80b2f0:	10c4b03a 	or	r2,r2,r3
  80b2f4:	1100042e 	bgeu	r2,r4,80b308 <__udivdi3+0x298>
  80b2f8:	8085883a 	add	r2,r16,r2
  80b2fc:	a53fffc4 	addi	r20,r20,-1
  80b300:	14000136 	bltu	r2,r16,80b308 <__udivdi3+0x298>
  80b304:	1100c736 	bltu	r2,r4,80b624 <__udivdi3+0x5b4>
  80b308:	b004943a 	slli	r2,r22,16
  80b30c:	0009883a 	mov	r4,zero
  80b310:	a084b03a 	or	r2,r20,r2
  80b314:	003fb706 	br	80b1f4 <__udivdi3+0x184>
  80b318:	00804034 	movhi	r2,256
  80b31c:	10bfffc4 	addi	r2,r2,-1
  80b320:	11c0a436 	bltu	r2,r7,80b5b4 <__udivdi3+0x544>
  80b324:	01400404 	movi	r5,16
  80b328:	2805883a 	mov	r2,r5
  80b32c:	003fa406 	br	80b1c0 <__udivdi3+0x150>
  80b330:	0005883a 	mov	r2,zero
  80b334:	0009883a 	mov	r4,zero
  80b338:	003fae06 	br	80b1f4 <__udivdi3+0x184>
  80b33c:	00804034 	movhi	r2,256
  80b340:	10bfffc4 	addi	r2,r2,-1
  80b344:	1400a136 	bltu	r2,r16,80b5cc <__udivdi3+0x55c>
  80b348:	01400404 	movi	r5,16
  80b34c:	2805883a 	mov	r2,r5
  80b350:	003f6006 	br	80b0d4 <__udivdi3+0x64>
  80b354:	01000044 	movi	r4,1
  80b358:	000b883a 	mov	r5,zero
  80b35c:	080c2a80 	call	80c2a8 <__udivsi3>
  80b360:	1021883a 	mov	r16,r2
  80b364:	00bfffd4 	movui	r2,65535
  80b368:	143ff436 	bltu	r2,r16,80b33c <__udivdi3+0x2cc>
  80b36c:	003f5506 	br	80b0c4 <__udivdi3+0x54>
  80b370:	00804034 	movhi	r2,256
  80b374:	10bfffc4 	addi	r2,r2,-1
  80b378:	12009a36 	bltu	r2,r8,80b5e4 <__udivdi3+0x574>
  80b37c:	01400404 	movi	r5,16
  80b380:	2805883a 	mov	r2,r5
  80b384:	003fae06 	br	80b240 <__udivdi3+0x1d0>
  80b388:	3dc5c83a 	sub	r2,r7,r23
  80b38c:	35c8983a 	sll	r4,r6,r23
  80b390:	8086d83a 	srl	r3,r16,r2
  80b394:	a0a2d83a 	srl	r17,r20,r2
  80b398:	e084d83a 	srl	r2,fp,r2
  80b39c:	20eab03a 	or	r21,r4,r3
  80b3a0:	a82cd43a 	srli	r22,r21,16
  80b3a4:	a5c6983a 	sll	r3,r20,r23
  80b3a8:	8809883a 	mov	r4,r17
  80b3ac:	b00b883a 	mov	r5,r22
  80b3b0:	1886b03a 	or	r3,r3,r2
  80b3b4:	d8c00215 	stw	r3,8(sp)
  80b3b8:	080c2a80 	call	80c2a8 <__udivsi3>
  80b3bc:	8809883a 	mov	r4,r17
  80b3c0:	b00b883a 	mov	r5,r22
  80b3c4:	1029883a 	mov	r20,r2
  80b3c8:	080c2b00 	call	80c2b0 <__umodsi3>
  80b3cc:	a8ffffcc 	andi	r3,r21,65535
  80b3d0:	d8c00515 	stw	r3,20(sp)
  80b3d4:	d9000217 	ldw	r4,8(sp)
  80b3d8:	d9400517 	ldw	r5,20(sp)
  80b3dc:	1004943a 	slli	r2,r2,16
  80b3e0:	2006d43a 	srli	r3,r4,16
  80b3e4:	85e0983a 	sll	r16,r16,r23
  80b3e8:	2d23383a 	mul	r17,r5,r20
  80b3ec:	10c4b03a 	or	r2,r2,r3
  80b3f0:	dc000015 	stw	r16,0(sp)
  80b3f4:	1440032e 	bgeu	r2,r17,80b404 <__udivdi3+0x394>
  80b3f8:	1545883a 	add	r2,r2,r21
  80b3fc:	a53fffc4 	addi	r20,r20,-1
  80b400:	15407f2e 	bgeu	r2,r21,80b600 <__udivdi3+0x590>
  80b404:	1463c83a 	sub	r17,r2,r17
  80b408:	8809883a 	mov	r4,r17
  80b40c:	b00b883a 	mov	r5,r22
  80b410:	080c2a80 	call	80c2a8 <__udivsi3>
  80b414:	8809883a 	mov	r4,r17
  80b418:	b00b883a 	mov	r5,r22
  80b41c:	1021883a 	mov	r16,r2
  80b420:	080c2b00 	call	80c2b0 <__umodsi3>
  80b424:	d8c00517 	ldw	r3,20(sp)
  80b428:	d9000217 	ldw	r4,8(sp)
  80b42c:	1004943a 	slli	r2,r2,16
  80b430:	1c0f383a 	mul	r7,r3,r16
  80b434:	20ffffcc 	andi	r3,r4,65535
  80b438:	10e2b03a 	or	r17,r2,r3
  80b43c:	89c0032e 	bgeu	r17,r7,80b44c <__udivdi3+0x3dc>
  80b440:	8d63883a 	add	r17,r17,r21
  80b444:	843fffc4 	addi	r16,r16,-1
  80b448:	8d40692e 	bgeu	r17,r21,80b5f0 <__udivdi3+0x580>
  80b44c:	a008943a 	slli	r4,r20,16
  80b450:	d9400017 	ldw	r5,0(sp)
  80b454:	89e3c83a 	sub	r17,r17,r7
  80b458:	8110b03a 	or	r8,r16,r4
  80b45c:	280cd43a 	srli	r6,r5,16
  80b460:	28ffffcc 	andi	r3,r5,65535
  80b464:	40bfffcc 	andi	r2,r8,65535
  80b468:	400ad43a 	srli	r5,r8,16
  80b46c:	10d3383a 	mul	r9,r2,r3
  80b470:	1185383a 	mul	r2,r2,r6
  80b474:	28c7383a 	mul	r3,r5,r3
  80b478:	4808d43a 	srli	r4,r9,16
  80b47c:	298b383a 	mul	r5,r5,r6
  80b480:	10c5883a 	add	r2,r2,r3
  80b484:	2089883a 	add	r4,r4,r2
  80b488:	20c0022e 	bgeu	r4,r3,80b494 <__udivdi3+0x424>
  80b48c:	00800074 	movhi	r2,1
  80b490:	288b883a 	add	r5,r5,r2
  80b494:	2004d43a 	srli	r2,r4,16
  80b498:	288b883a 	add	r5,r5,r2
  80b49c:	89403f36 	bltu	r17,r5,80b59c <__udivdi3+0x52c>
  80b4a0:	89403926 	beq	r17,r5,80b588 <__udivdi3+0x518>
  80b4a4:	4005883a 	mov	r2,r8
  80b4a8:	0009883a 	mov	r4,zero
  80b4ac:	003f5106 	br	80b1f4 <__udivdi3+0x184>
  80b4b0:	85a0983a 	sll	r16,r16,r22
  80b4b4:	3585c83a 	sub	r2,r6,r22
  80b4b8:	a0a2d83a 	srl	r17,r20,r2
  80b4bc:	802ad43a 	srli	r21,r16,16
  80b4c0:	e084d83a 	srl	r2,fp,r2
  80b4c4:	a586983a 	sll	r3,r20,r22
  80b4c8:	8809883a 	mov	r4,r17
  80b4cc:	a80b883a 	mov	r5,r21
  80b4d0:	1886b03a 	or	r3,r3,r2
  80b4d4:	d8c00115 	stw	r3,4(sp)
  80b4d8:	080c2a80 	call	80c2a8 <__udivsi3>
  80b4dc:	8809883a 	mov	r4,r17
  80b4e0:	a80b883a 	mov	r5,r21
  80b4e4:	d8800415 	stw	r2,16(sp)
  80b4e8:	080c2b00 	call	80c2b0 <__umodsi3>
  80b4ec:	d9000117 	ldw	r4,4(sp)
  80b4f0:	d9400417 	ldw	r5,16(sp)
  80b4f4:	1004943a 	slli	r2,r2,16
  80b4f8:	85ffffcc 	andi	r23,r16,65535
  80b4fc:	2006d43a 	srli	r3,r4,16
  80b500:	b963383a 	mul	r17,r23,r5
  80b504:	10c4b03a 	or	r2,r2,r3
  80b508:	1440042e 	bgeu	r2,r17,80b51c <__udivdi3+0x4ac>
  80b50c:	297fffc4 	addi	r5,r5,-1
  80b510:	1405883a 	add	r2,r2,r16
  80b514:	d9400415 	stw	r5,16(sp)
  80b518:	1400442e 	bgeu	r2,r16,80b62c <__udivdi3+0x5bc>
  80b51c:	1463c83a 	sub	r17,r2,r17
  80b520:	8809883a 	mov	r4,r17
  80b524:	a80b883a 	mov	r5,r21
  80b528:	080c2a80 	call	80c2a8 <__udivsi3>
  80b52c:	8809883a 	mov	r4,r17
  80b530:	a80b883a 	mov	r5,r21
  80b534:	1029883a 	mov	r20,r2
  80b538:	080c2b00 	call	80c2b0 <__umodsi3>
  80b53c:	d9400117 	ldw	r5,4(sp)
  80b540:	1004943a 	slli	r2,r2,16
  80b544:	bd09383a 	mul	r4,r23,r20
  80b548:	28ffffcc 	andi	r3,r5,65535
  80b54c:	10c6b03a 	or	r3,r2,r3
  80b550:	1900062e 	bgeu	r3,r4,80b56c <__udivdi3+0x4fc>
  80b554:	1c07883a 	add	r3,r3,r16
  80b558:	a53fffc4 	addi	r20,r20,-1
  80b55c:	1c000336 	bltu	r3,r16,80b56c <__udivdi3+0x4fc>
  80b560:	1900022e 	bgeu	r3,r4,80b56c <__udivdi3+0x4fc>
  80b564:	a53fffc4 	addi	r20,r20,-1
  80b568:	1c07883a 	add	r3,r3,r16
  80b56c:	d9400417 	ldw	r5,16(sp)
  80b570:	e5b8983a 	sll	fp,fp,r22
  80b574:	1923c83a 	sub	r17,r3,r4
  80b578:	2804943a 	slli	r2,r5,16
  80b57c:	a0a8b03a 	or	r20,r20,r2
  80b580:	dd000315 	stw	r20,12(sp)
  80b584:	003ee106 	br	80b10c <__udivdi3+0x9c>
  80b588:	2004943a 	slli	r2,r4,16
  80b58c:	e5c8983a 	sll	r4,fp,r23
  80b590:	48ffffcc 	andi	r3,r9,65535
  80b594:	10c5883a 	add	r2,r2,r3
  80b598:	20bfc22e 	bgeu	r4,r2,80b4a4 <__udivdi3+0x434>
  80b59c:	40bfffc4 	addi	r2,r8,-1
  80b5a0:	0009883a 	mov	r4,zero
  80b5a4:	003f1306 	br	80b1f4 <__udivdi3+0x184>
  80b5a8:	01400204 	movi	r5,8
  80b5ac:	2805883a 	mov	r2,r5
  80b5b0:	003f0306 	br	80b1c0 <__udivdi3+0x150>
  80b5b4:	01400604 	movi	r5,24
  80b5b8:	2805883a 	mov	r2,r5
  80b5bc:	003f0006 	br	80b1c0 <__udivdi3+0x150>
  80b5c0:	01400204 	movi	r5,8
  80b5c4:	2805883a 	mov	r2,r5
  80b5c8:	003ec206 	br	80b0d4 <__udivdi3+0x64>
  80b5cc:	01400604 	movi	r5,24
  80b5d0:	2805883a 	mov	r2,r5
  80b5d4:	003ebf06 	br	80b0d4 <__udivdi3+0x64>
  80b5d8:	01400204 	movi	r5,8
  80b5dc:	2805883a 	mov	r2,r5
  80b5e0:	003f1706 	br	80b240 <__udivdi3+0x1d0>
  80b5e4:	01400604 	movi	r5,24
  80b5e8:	2805883a 	mov	r2,r5
  80b5ec:	003f1406 	br	80b240 <__udivdi3+0x1d0>
  80b5f0:	89ff962e 	bgeu	r17,r7,80b44c <__udivdi3+0x3dc>
  80b5f4:	8d63883a 	add	r17,r17,r21
  80b5f8:	843fffc4 	addi	r16,r16,-1
  80b5fc:	003f9306 	br	80b44c <__udivdi3+0x3dc>
  80b600:	147f802e 	bgeu	r2,r17,80b404 <__udivdi3+0x394>
  80b604:	a53fffc4 	addi	r20,r20,-1
  80b608:	1545883a 	add	r2,r2,r21
  80b60c:	003f7d06 	br	80b404 <__udivdi3+0x394>
  80b610:	a53fffc4 	addi	r20,r20,-1
  80b614:	003ede06 	br	80b190 <__udivdi3+0x120>
  80b618:	b5bfffc4 	addi	r22,r22,-1
  80b61c:	1405883a 	add	r2,r2,r16
  80b620:	003f2806 	br	80b2c4 <__udivdi3+0x254>
  80b624:	a53fffc4 	addi	r20,r20,-1
  80b628:	003f3706 	br	80b308 <__udivdi3+0x298>
  80b62c:	147fbb2e 	bgeu	r2,r17,80b51c <__udivdi3+0x4ac>
  80b630:	297fffc4 	addi	r5,r5,-1
  80b634:	1405883a 	add	r2,r2,r16
  80b638:	d9400415 	stw	r5,16(sp)
  80b63c:	003fb706 	br	80b51c <__udivdi3+0x4ac>
  80b640:	b5bfffc4 	addi	r22,r22,-1
  80b644:	1405883a 	add	r2,r2,r16
  80b648:	003ec006 	br	80b14c <__udivdi3+0xdc>

0080b64c <__umoddi3>:
  80b64c:	defff104 	addi	sp,sp,-60
  80b650:	dd800b15 	stw	r22,44(sp)
  80b654:	dd000915 	stw	r20,36(sp)
  80b658:	dc000515 	stw	r16,20(sp)
  80b65c:	dfc00e15 	stw	ra,56(sp)
  80b660:	df000d15 	stw	fp,52(sp)
  80b664:	ddc00c15 	stw	r23,48(sp)
  80b668:	dd400a15 	stw	r21,40(sp)
  80b66c:	dcc00815 	stw	r19,32(sp)
  80b670:	dc800715 	stw	r18,28(sp)
  80b674:	dc400615 	stw	r17,24(sp)
  80b678:	3021883a 	mov	r16,r6
  80b67c:	202d883a 	mov	r22,r4
  80b680:	2829883a 	mov	r20,r5
  80b684:	38002b1e 	bne	r7,zero,80b734 <__umoddi3+0xe8>
  80b688:	29805036 	bltu	r5,r6,80b7cc <__umoddi3+0x180>
  80b68c:	30008a26 	beq	r6,zero,80b8b8 <__umoddi3+0x26c>
  80b690:	00bfffd4 	movui	r2,65535
  80b694:	14008236 	bltu	r2,r16,80b8a0 <__umoddi3+0x254>
  80b698:	00803fc4 	movi	r2,255
  80b69c:	14013636 	bltu	r2,r16,80bb78 <__umoddi3+0x52c>
  80b6a0:	000b883a 	mov	r5,zero
  80b6a4:	0005883a 	mov	r2,zero
  80b6a8:	8084d83a 	srl	r2,r16,r2
  80b6ac:	01002074 	movhi	r4,129
  80b6b0:	210e7804 	addi	r4,r4,14816
  80b6b4:	01800804 	movi	r6,32
  80b6b8:	1105883a 	add	r2,r2,r4
  80b6bc:	10c00003 	ldbu	r3,0(r2)
  80b6c0:	28c7883a 	add	r3,r5,r3
  80b6c4:	30efc83a 	sub	r23,r6,r3
  80b6c8:	b800941e 	bne	r23,zero,80b91c <__umoddi3+0x2d0>
  80b6cc:	802ad43a 	srli	r21,r16,16
  80b6d0:	a423c83a 	sub	r17,r20,r16
  80b6d4:	0039883a 	mov	fp,zero
  80b6d8:	853fffcc 	andi	r20,r16,65535
  80b6dc:	8809883a 	mov	r4,r17
  80b6e0:	a80b883a 	mov	r5,r21
  80b6e4:	080c2a80 	call	80c2a8 <__udivsi3>
  80b6e8:	8809883a 	mov	r4,r17
  80b6ec:	a80b883a 	mov	r5,r21
  80b6f0:	a0a3383a 	mul	r17,r20,r2
  80b6f4:	080c2b00 	call	80c2b0 <__umodsi3>
  80b6f8:	1004943a 	slli	r2,r2,16
  80b6fc:	b006d43a 	srli	r3,r22,16
  80b700:	10c4b03a 	or	r2,r2,r3
  80b704:	1440032e 	bgeu	r2,r17,80b714 <__umoddi3+0xc8>
  80b708:	1405883a 	add	r2,r2,r16
  80b70c:	14000136 	bltu	r2,r16,80b714 <__umoddi3+0xc8>
  80b710:	14413536 	bltu	r2,r17,80bbe8 <__umoddi3+0x59c>
  80b714:	1463c83a 	sub	r17,r2,r17
  80b718:	8809883a 	mov	r4,r17
  80b71c:	a80b883a 	mov	r5,r21
  80b720:	080c2a80 	call	80c2a8 <__udivsi3>
  80b724:	8809883a 	mov	r4,r17
  80b728:	a0a3383a 	mul	r17,r20,r2
  80b72c:	a80b883a 	mov	r5,r21
  80b730:	00004d06 	br	80b868 <__umoddi3+0x21c>
  80b734:	380d883a 	mov	r6,r7
  80b738:	29c0102e 	bgeu	r5,r7,80b77c <__umoddi3+0x130>
  80b73c:	2011883a 	mov	r8,r4
  80b740:	2813883a 	mov	r9,r5
  80b744:	4005883a 	mov	r2,r8
  80b748:	4807883a 	mov	r3,r9
  80b74c:	dfc00e17 	ldw	ra,56(sp)
  80b750:	df000d17 	ldw	fp,52(sp)
  80b754:	ddc00c17 	ldw	r23,48(sp)
  80b758:	dd800b17 	ldw	r22,44(sp)
  80b75c:	dd400a17 	ldw	r21,40(sp)
  80b760:	dd000917 	ldw	r20,36(sp)
  80b764:	dcc00817 	ldw	r19,32(sp)
  80b768:	dc800717 	ldw	r18,28(sp)
  80b76c:	dc400617 	ldw	r17,24(sp)
  80b770:	dc000517 	ldw	r16,20(sp)
  80b774:	dec00f04 	addi	sp,sp,60
  80b778:	f800283a 	ret
  80b77c:	00bfffd4 	movui	r2,65535
  80b780:	11c05a36 	bltu	r2,r7,80b8ec <__umoddi3+0x2a0>
  80b784:	00803fc4 	movi	r2,255
  80b788:	11c0fe36 	bltu	r2,r7,80bb84 <__umoddi3+0x538>
  80b78c:	000b883a 	mov	r5,zero
  80b790:	0005883a 	mov	r2,zero
  80b794:	3084d83a 	srl	r2,r6,r2
  80b798:	01002074 	movhi	r4,129
  80b79c:	210e7804 	addi	r4,r4,14816
  80b7a0:	01c00804 	movi	r7,32
  80b7a4:	1105883a 	add	r2,r2,r4
  80b7a8:	10c00003 	ldbu	r3,0(r2)
  80b7ac:	28c7883a 	add	r3,r5,r3
  80b7b0:	38ebc83a 	sub	r21,r7,r3
  80b7b4:	a800851e 	bne	r21,zero,80b9cc <__umoddi3+0x380>
  80b7b8:	35005236 	bltu	r6,r20,80b904 <__umoddi3+0x2b8>
  80b7bc:	b400512e 	bgeu	r22,r16,80b904 <__umoddi3+0x2b8>
  80b7c0:	b011883a 	mov	r8,r22
  80b7c4:	a013883a 	mov	r9,r20
  80b7c8:	003fde06 	br	80b744 <__umoddi3+0xf8>
  80b7cc:	00bfffd4 	movui	r2,65535
  80b7d0:	11804036 	bltu	r2,r6,80b8d4 <__umoddi3+0x288>
  80b7d4:	00803fc4 	movi	r2,255
  80b7d8:	1180ed36 	bltu	r2,r6,80bb90 <__umoddi3+0x544>
  80b7dc:	000b883a 	mov	r5,zero
  80b7e0:	0005883a 	mov	r2,zero
  80b7e4:	8084d83a 	srl	r2,r16,r2
  80b7e8:	01002074 	movhi	r4,129
  80b7ec:	210e7804 	addi	r4,r4,14816
  80b7f0:	01800804 	movi	r6,32
  80b7f4:	1105883a 	add	r2,r2,r4
  80b7f8:	10c00003 	ldbu	r3,0(r2)
  80b7fc:	28c7883a 	add	r3,r5,r3
  80b800:	30c7c83a 	sub	r3,r6,r3
  80b804:	1800bf1e 	bne	r3,zero,80bb04 <__umoddi3+0x4b8>
  80b808:	0039883a 	mov	fp,zero
  80b80c:	802ad43a 	srli	r21,r16,16
  80b810:	a009883a 	mov	r4,r20
  80b814:	85ffffcc 	andi	r23,r16,65535
  80b818:	a80b883a 	mov	r5,r21
  80b81c:	080c2a80 	call	80c2a8 <__udivsi3>
  80b820:	a009883a 	mov	r4,r20
  80b824:	a80b883a 	mov	r5,r21
  80b828:	b8a3383a 	mul	r17,r23,r2
  80b82c:	080c2b00 	call	80c2b0 <__umodsi3>
  80b830:	1004943a 	slli	r2,r2,16
  80b834:	b006d43a 	srli	r3,r22,16
  80b838:	10c4b03a 	or	r2,r2,r3
  80b83c:	1440032e 	bgeu	r2,r17,80b84c <__umoddi3+0x200>
  80b840:	1405883a 	add	r2,r2,r16
  80b844:	14000136 	bltu	r2,r16,80b84c <__umoddi3+0x200>
  80b848:	1440e536 	bltu	r2,r17,80bbe0 <__umoddi3+0x594>
  80b84c:	1463c83a 	sub	r17,r2,r17
  80b850:	8809883a 	mov	r4,r17
  80b854:	a80b883a 	mov	r5,r21
  80b858:	080c2a80 	call	80c2a8 <__udivsi3>
  80b85c:	8809883a 	mov	r4,r17
  80b860:	b8a3383a 	mul	r17,r23,r2
  80b864:	a80b883a 	mov	r5,r21
  80b868:	080c2b00 	call	80c2b0 <__umodsi3>
  80b86c:	1004943a 	slli	r2,r2,16
  80b870:	b0ffffcc 	andi	r3,r22,65535
  80b874:	10c4b03a 	or	r2,r2,r3
  80b878:	1440042e 	bgeu	r2,r17,80b88c <__umoddi3+0x240>
  80b87c:	1405883a 	add	r2,r2,r16
  80b880:	14000236 	bltu	r2,r16,80b88c <__umoddi3+0x240>
  80b884:	1440012e 	bgeu	r2,r17,80b88c <__umoddi3+0x240>
  80b888:	1405883a 	add	r2,r2,r16
  80b88c:	1445c83a 	sub	r2,r2,r17
  80b890:	1724d83a 	srl	r18,r2,fp
  80b894:	0013883a 	mov	r9,zero
  80b898:	9011883a 	mov	r8,r18
  80b89c:	003fa906 	br	80b744 <__umoddi3+0xf8>
  80b8a0:	00804034 	movhi	r2,256
  80b8a4:	10bfffc4 	addi	r2,r2,-1
  80b8a8:	1400b036 	bltu	r2,r16,80bb6c <__umoddi3+0x520>
  80b8ac:	01400404 	movi	r5,16
  80b8b0:	2805883a 	mov	r2,r5
  80b8b4:	003f7c06 	br	80b6a8 <__umoddi3+0x5c>
  80b8b8:	01000044 	movi	r4,1
  80b8bc:	000b883a 	mov	r5,zero
  80b8c0:	080c2a80 	call	80c2a8 <__udivsi3>
  80b8c4:	1021883a 	mov	r16,r2
  80b8c8:	00bfffd4 	movui	r2,65535
  80b8cc:	143ff436 	bltu	r2,r16,80b8a0 <__umoddi3+0x254>
  80b8d0:	003f7106 	br	80b698 <__umoddi3+0x4c>
  80b8d4:	00804034 	movhi	r2,256
  80b8d8:	10bfffc4 	addi	r2,r2,-1
  80b8dc:	1180af36 	bltu	r2,r6,80bb9c <__umoddi3+0x550>
  80b8e0:	01400404 	movi	r5,16
  80b8e4:	2805883a 	mov	r2,r5
  80b8e8:	003fbe06 	br	80b7e4 <__umoddi3+0x198>
  80b8ec:	00804034 	movhi	r2,256
  80b8f0:	10bfffc4 	addi	r2,r2,-1
  80b8f4:	11c0ac36 	bltu	r2,r7,80bba8 <__umoddi3+0x55c>
  80b8f8:	01400404 	movi	r5,16
  80b8fc:	2805883a 	mov	r2,r5
  80b900:	003fa406 	br	80b794 <__umoddi3+0x148>
  80b904:	b409c83a 	sub	r4,r22,r16
  80b908:	b105803a 	cmpltu	r2,r22,r4
  80b90c:	a187c83a 	sub	r3,r20,r6
  80b910:	18a9c83a 	sub	r20,r3,r2
  80b914:	202d883a 	mov	r22,r4
  80b918:	003fa906 	br	80b7c0 <__umoddi3+0x174>
  80b91c:	85e0983a 	sll	r16,r16,r23
  80b920:	35c5c83a 	sub	r2,r6,r23
  80b924:	a0a2d83a 	srl	r17,r20,r2
  80b928:	802ad43a 	srli	r21,r16,16
  80b92c:	b084d83a 	srl	r2,r22,r2
  80b930:	a5c6983a 	sll	r3,r20,r23
  80b934:	8809883a 	mov	r4,r17
  80b938:	a80b883a 	mov	r5,r21
  80b93c:	1886b03a 	or	r3,r3,r2
  80b940:	d8c00115 	stw	r3,4(sp)
  80b944:	853fffcc 	andi	r20,r16,65535
  80b948:	080c2a80 	call	80c2a8 <__udivsi3>
  80b94c:	8809883a 	mov	r4,r17
  80b950:	a80b883a 	mov	r5,r21
  80b954:	a0a3383a 	mul	r17,r20,r2
  80b958:	080c2b00 	call	80c2b0 <__umodsi3>
  80b95c:	d9000117 	ldw	r4,4(sp)
  80b960:	1004943a 	slli	r2,r2,16
  80b964:	b839883a 	mov	fp,r23
  80b968:	2006d43a 	srli	r3,r4,16
  80b96c:	10c4b03a 	or	r2,r2,r3
  80b970:	1440022e 	bgeu	r2,r17,80b97c <__umoddi3+0x330>
  80b974:	1405883a 	add	r2,r2,r16
  80b978:	1400962e 	bgeu	r2,r16,80bbd4 <__umoddi3+0x588>
  80b97c:	1463c83a 	sub	r17,r2,r17
  80b980:	8809883a 	mov	r4,r17
  80b984:	a80b883a 	mov	r5,r21
  80b988:	080c2a80 	call	80c2a8 <__udivsi3>
  80b98c:	8809883a 	mov	r4,r17
  80b990:	a80b883a 	mov	r5,r21
  80b994:	a0a3383a 	mul	r17,r20,r2
  80b998:	080c2b00 	call	80c2b0 <__umodsi3>
  80b99c:	d9400117 	ldw	r5,4(sp)
  80b9a0:	1004943a 	slli	r2,r2,16
  80b9a4:	28ffffcc 	andi	r3,r5,65535
  80b9a8:	10c4b03a 	or	r2,r2,r3
  80b9ac:	1440042e 	bgeu	r2,r17,80b9c0 <__umoddi3+0x374>
  80b9b0:	1405883a 	add	r2,r2,r16
  80b9b4:	14000236 	bltu	r2,r16,80b9c0 <__umoddi3+0x374>
  80b9b8:	1440012e 	bgeu	r2,r17,80b9c0 <__umoddi3+0x374>
  80b9bc:	1405883a 	add	r2,r2,r16
  80b9c0:	b5ec983a 	sll	r22,r22,r23
  80b9c4:	1463c83a 	sub	r17,r2,r17
  80b9c8:	003f4406 	br	80b6dc <__umoddi3+0x90>
  80b9cc:	3d4fc83a 	sub	r7,r7,r21
  80b9d0:	3546983a 	sll	r3,r6,r21
  80b9d4:	81c4d83a 	srl	r2,r16,r7
  80b9d8:	a1e2d83a 	srl	r17,r20,r7
  80b9dc:	a54c983a 	sll	r6,r20,r21
  80b9e0:	18aeb03a 	or	r23,r3,r2
  80b9e4:	b828d43a 	srli	r20,r23,16
  80b9e8:	b1c4d83a 	srl	r2,r22,r7
  80b9ec:	8809883a 	mov	r4,r17
  80b9f0:	a00b883a 	mov	r5,r20
  80b9f4:	308cb03a 	or	r6,r6,r2
  80b9f8:	d9c00315 	stw	r7,12(sp)
  80b9fc:	d9800215 	stw	r6,8(sp)
  80ba00:	080c2a80 	call	80c2a8 <__udivsi3>
  80ba04:	8809883a 	mov	r4,r17
  80ba08:	a00b883a 	mov	r5,r20
  80ba0c:	1039883a 	mov	fp,r2
  80ba10:	080c2b00 	call	80c2b0 <__umodsi3>
  80ba14:	b8ffffcc 	andi	r3,r23,65535
  80ba18:	d8c00415 	stw	r3,16(sp)
  80ba1c:	d9000217 	ldw	r4,8(sp)
  80ba20:	d9400417 	ldw	r5,16(sp)
  80ba24:	1004943a 	slli	r2,r2,16
  80ba28:	2006d43a 	srli	r3,r4,16
  80ba2c:	8560983a 	sll	r16,r16,r21
  80ba30:	2f23383a 	mul	r17,r5,fp
  80ba34:	10c4b03a 	or	r2,r2,r3
  80ba38:	dc000015 	stw	r16,0(sp)
  80ba3c:	b56c983a 	sll	r22,r22,r21
  80ba40:	1440032e 	bgeu	r2,r17,80ba50 <__umoddi3+0x404>
  80ba44:	15c5883a 	add	r2,r2,r23
  80ba48:	e73fffc4 	addi	fp,fp,-1
  80ba4c:	15c05d2e 	bgeu	r2,r23,80bbc4 <__umoddi3+0x578>
  80ba50:	1463c83a 	sub	r17,r2,r17
  80ba54:	8809883a 	mov	r4,r17
  80ba58:	a00b883a 	mov	r5,r20
  80ba5c:	080c2a80 	call	80c2a8 <__udivsi3>
  80ba60:	8809883a 	mov	r4,r17
  80ba64:	a00b883a 	mov	r5,r20
  80ba68:	1021883a 	mov	r16,r2
  80ba6c:	080c2b00 	call	80c2b0 <__umodsi3>
  80ba70:	d8c00417 	ldw	r3,16(sp)
  80ba74:	d9000217 	ldw	r4,8(sp)
  80ba78:	1004943a 	slli	r2,r2,16
  80ba7c:	1c23383a 	mul	r17,r3,r16
  80ba80:	20ffffcc 	andi	r3,r4,65535
  80ba84:	10ceb03a 	or	r7,r2,r3
  80ba88:	3c40032e 	bgeu	r7,r17,80ba98 <__umoddi3+0x44c>
  80ba8c:	3dcf883a 	add	r7,r7,r23
  80ba90:	843fffc4 	addi	r16,r16,-1
  80ba94:	3dc0472e 	bgeu	r7,r23,80bbb4 <__umoddi3+0x568>
  80ba98:	e004943a 	slli	r2,fp,16
  80ba9c:	d9400017 	ldw	r5,0(sp)
  80baa0:	3c4fc83a 	sub	r7,r7,r17
  80baa4:	8084b03a 	or	r2,r16,r2
  80baa8:	28ffffcc 	andi	r3,r5,65535
  80baac:	280cd43a 	srli	r6,r5,16
  80bab0:	100ad43a 	srli	r5,r2,16
  80bab4:	10bfffcc 	andi	r2,r2,65535
  80bab8:	10d1383a 	mul	r8,r2,r3
  80babc:	28c7383a 	mul	r3,r5,r3
  80bac0:	1185383a 	mul	r2,r2,r6
  80bac4:	4008d43a 	srli	r4,r8,16
  80bac8:	298b383a 	mul	r5,r5,r6
  80bacc:	10c5883a 	add	r2,r2,r3
  80bad0:	2089883a 	add	r4,r4,r2
  80bad4:	20c0022e 	bgeu	r4,r3,80bae0 <__umoddi3+0x494>
  80bad8:	00800074 	movhi	r2,1
  80badc:	288b883a 	add	r5,r5,r2
  80bae0:	2004d43a 	srli	r2,r4,16
  80bae4:	2008943a 	slli	r4,r4,16
  80bae8:	40ffffcc 	andi	r3,r8,65535
  80baec:	288b883a 	add	r5,r5,r2
  80baf0:	20c9883a 	add	r4,r4,r3
  80baf4:	39400b36 	bltu	r7,r5,80bb24 <__umoddi3+0x4d8>
  80baf8:	39403d26 	beq	r7,r5,80bbf0 <__umoddi3+0x5a4>
  80bafc:	394bc83a 	sub	r5,r7,r5
  80bb00:	00000f06 	br	80bb40 <__umoddi3+0x4f4>
  80bb04:	30c5c83a 	sub	r2,r6,r3
  80bb08:	1839883a 	mov	fp,r3
  80bb0c:	b084d83a 	srl	r2,r22,r2
  80bb10:	a0c6983a 	sll	r3,r20,r3
  80bb14:	8720983a 	sll	r16,r16,fp
  80bb18:	b72c983a 	sll	r22,r22,fp
  80bb1c:	18a8b03a 	or	r20,r3,r2
  80bb20:	003f3a06 	br	80b80c <__umoddi3+0x1c0>
  80bb24:	d8c00017 	ldw	r3,0(sp)
  80bb28:	20c5c83a 	sub	r2,r4,r3
  80bb2c:	2089803a 	cmpltu	r4,r4,r2
  80bb30:	2dc7c83a 	sub	r3,r5,r23
  80bb34:	1907c83a 	sub	r3,r3,r4
  80bb38:	38cbc83a 	sub	r5,r7,r3
  80bb3c:	1009883a 	mov	r4,r2
  80bb40:	b105c83a 	sub	r2,r22,r4
  80bb44:	b087803a 	cmpltu	r3,r22,r2
  80bb48:	28c7c83a 	sub	r3,r5,r3
  80bb4c:	d9400317 	ldw	r5,12(sp)
  80bb50:	1544d83a 	srl	r2,r2,r21
  80bb54:	1948983a 	sll	r4,r3,r5
  80bb58:	1d46d83a 	srl	r3,r3,r21
  80bb5c:	20a4b03a 	or	r18,r4,r2
  80bb60:	9011883a 	mov	r8,r18
  80bb64:	1813883a 	mov	r9,r3
  80bb68:	003ef606 	br	80b744 <__umoddi3+0xf8>
  80bb6c:	01400604 	movi	r5,24
  80bb70:	2805883a 	mov	r2,r5
  80bb74:	003ecc06 	br	80b6a8 <__umoddi3+0x5c>
  80bb78:	01400204 	movi	r5,8
  80bb7c:	2805883a 	mov	r2,r5
  80bb80:	003ec906 	br	80b6a8 <__umoddi3+0x5c>
  80bb84:	01400204 	movi	r5,8
  80bb88:	2805883a 	mov	r2,r5
  80bb8c:	003f0106 	br	80b794 <__umoddi3+0x148>
  80bb90:	01400204 	movi	r5,8
  80bb94:	2805883a 	mov	r2,r5
  80bb98:	003f1206 	br	80b7e4 <__umoddi3+0x198>
  80bb9c:	01400604 	movi	r5,24
  80bba0:	2805883a 	mov	r2,r5
  80bba4:	003f0f06 	br	80b7e4 <__umoddi3+0x198>
  80bba8:	01400604 	movi	r5,24
  80bbac:	2805883a 	mov	r2,r5
  80bbb0:	003ef806 	br	80b794 <__umoddi3+0x148>
  80bbb4:	3c7fb82e 	bgeu	r7,r17,80ba98 <__umoddi3+0x44c>
  80bbb8:	843fffc4 	addi	r16,r16,-1
  80bbbc:	3dcf883a 	add	r7,r7,r23
  80bbc0:	003fb506 	br	80ba98 <__umoddi3+0x44c>
  80bbc4:	147fa22e 	bgeu	r2,r17,80ba50 <__umoddi3+0x404>
  80bbc8:	e73fffc4 	addi	fp,fp,-1
  80bbcc:	15c5883a 	add	r2,r2,r23
  80bbd0:	003f9f06 	br	80ba50 <__umoddi3+0x404>
  80bbd4:	147f692e 	bgeu	r2,r17,80b97c <__umoddi3+0x330>
  80bbd8:	1405883a 	add	r2,r2,r16
  80bbdc:	003f6706 	br	80b97c <__umoddi3+0x330>
  80bbe0:	1405883a 	add	r2,r2,r16
  80bbe4:	003f1906 	br	80b84c <__umoddi3+0x200>
  80bbe8:	1405883a 	add	r2,r2,r16
  80bbec:	003ec906 	br	80b714 <__umoddi3+0xc8>
  80bbf0:	b13fcc36 	bltu	r22,r4,80bb24 <__umoddi3+0x4d8>
  80bbf4:	000b883a 	mov	r5,zero
  80bbf8:	003fd106 	br	80bb40 <__umoddi3+0x4f4>

0080bbfc <__divdf3>:
  80bbfc:	deffed04 	addi	sp,sp,-76
  80bc00:	dcc01115 	stw	r19,68(sp)
  80bc04:	dcc00404 	addi	r19,sp,16
  80bc08:	2011883a 	mov	r8,r4
  80bc0c:	2813883a 	mov	r9,r5
  80bc10:	dc000e15 	stw	r16,56(sp)
  80bc14:	d809883a 	mov	r4,sp
  80bc18:	980b883a 	mov	r5,r19
  80bc1c:	dc000904 	addi	r16,sp,36
  80bc20:	dfc01215 	stw	ra,72(sp)
  80bc24:	da400115 	stw	r9,4(sp)
  80bc28:	d9c00315 	stw	r7,12(sp)
  80bc2c:	da000015 	stw	r8,0(sp)
  80bc30:	d9800215 	stw	r6,8(sp)
  80bc34:	dc801015 	stw	r18,64(sp)
  80bc38:	dc400f15 	stw	r17,60(sp)
  80bc3c:	08032840 	call	803284 <__unpack_d>
  80bc40:	d9000204 	addi	r4,sp,8
  80bc44:	800b883a 	mov	r5,r16
  80bc48:	08032840 	call	803284 <__unpack_d>
  80bc4c:	d9000417 	ldw	r4,16(sp)
  80bc50:	00800044 	movi	r2,1
  80bc54:	11000b2e 	bgeu	r2,r4,80bc84 <__divdf3+0x88>
  80bc58:	d9400917 	ldw	r5,36(sp)
  80bc5c:	1140762e 	bgeu	r2,r5,80be38 <__divdf3+0x23c>
  80bc60:	d8800517 	ldw	r2,20(sp)
  80bc64:	d8c00a17 	ldw	r3,40(sp)
  80bc68:	01800104 	movi	r6,4
  80bc6c:	10c4f03a 	xor	r2,r2,r3
  80bc70:	d8800515 	stw	r2,20(sp)
  80bc74:	21800226 	beq	r4,r6,80bc80 <__divdf3+0x84>
  80bc78:	00800084 	movi	r2,2
  80bc7c:	2080141e 	bne	r4,r2,80bcd0 <__divdf3+0xd4>
  80bc80:	29000926 	beq	r5,r4,80bca8 <__divdf3+0xac>
  80bc84:	9809883a 	mov	r4,r19
  80bc88:	0802f700 	call	802f70 <__pack_d>
  80bc8c:	dfc01217 	ldw	ra,72(sp)
  80bc90:	dcc01117 	ldw	r19,68(sp)
  80bc94:	dc801017 	ldw	r18,64(sp)
  80bc98:	dc400f17 	ldw	r17,60(sp)
  80bc9c:	dc000e17 	ldw	r16,56(sp)
  80bca0:	dec01304 	addi	sp,sp,76
  80bca4:	f800283a 	ret
  80bca8:	01002074 	movhi	r4,129
  80bcac:	210e7304 	addi	r4,r4,14796
  80bcb0:	0802f700 	call	802f70 <__pack_d>
  80bcb4:	dfc01217 	ldw	ra,72(sp)
  80bcb8:	dcc01117 	ldw	r19,68(sp)
  80bcbc:	dc801017 	ldw	r18,64(sp)
  80bcc0:	dc400f17 	ldw	r17,60(sp)
  80bcc4:	dc000e17 	ldw	r16,56(sp)
  80bcc8:	dec01304 	addi	sp,sp,76
  80bccc:	f800283a 	ret
  80bcd0:	29805b26 	beq	r5,r6,80be40 <__divdf3+0x244>
  80bcd4:	28802d26 	beq	r5,r2,80bd8c <__divdf3+0x190>
  80bcd8:	d8c00617 	ldw	r3,24(sp)
  80bcdc:	d8800b17 	ldw	r2,44(sp)
  80bce0:	d9c00817 	ldw	r7,32(sp)
  80bce4:	dc400d17 	ldw	r17,52(sp)
  80bce8:	188bc83a 	sub	r5,r3,r2
  80bcec:	d9800717 	ldw	r6,28(sp)
  80bcf0:	dc000c17 	ldw	r16,48(sp)
  80bcf4:	d9400615 	stw	r5,24(sp)
  80bcf8:	3c403836 	bltu	r7,r17,80bddc <__divdf3+0x1e0>
  80bcfc:	89c03626 	beq	r17,r7,80bdd8 <__divdf3+0x1dc>
  80bd00:	0015883a 	mov	r10,zero
  80bd04:	001d883a 	mov	r14,zero
  80bd08:	02c40034 	movhi	r11,4096
  80bd0c:	001f883a 	mov	r15,zero
  80bd10:	003f883a 	mov	ra,zero
  80bd14:	04800f44 	movi	r18,61
  80bd18:	00000f06 	br	80bd58 <__divdf3+0x15c>
  80bd1c:	601d883a 	mov	r14,r12
  80bd20:	681f883a 	mov	r15,r13
  80bd24:	400d883a 	mov	r6,r8
  80bd28:	100f883a 	mov	r7,r2
  80bd2c:	3191883a 	add	r8,r6,r6
  80bd30:	5808d07a 	srli	r4,r11,1
  80bd34:	4185803a 	cmpltu	r2,r8,r6
  80bd38:	39d3883a 	add	r9,r7,r7
  80bd3c:	28c6b03a 	or	r3,r5,r3
  80bd40:	1245883a 	add	r2,r2,r9
  80bd44:	1815883a 	mov	r10,r3
  80bd48:	2017883a 	mov	r11,r4
  80bd4c:	400d883a 	mov	r6,r8
  80bd50:	100f883a 	mov	r7,r2
  80bd54:	fc801726 	beq	ra,r18,80bdb4 <__divdf3+0x1b8>
  80bd58:	580a97fa 	slli	r5,r11,31
  80bd5c:	5006d07a 	srli	r3,r10,1
  80bd60:	ffc00044 	addi	ra,ra,1
  80bd64:	3c7ff136 	bltu	r7,r17,80bd2c <__divdf3+0x130>
  80bd68:	3411c83a 	sub	r8,r6,r16
  80bd6c:	3205803a 	cmpltu	r2,r6,r8
  80bd70:	3c53c83a 	sub	r9,r7,r17
  80bd74:	7298b03a 	or	r12,r14,r10
  80bd78:	7adab03a 	or	r13,r15,r11
  80bd7c:	4885c83a 	sub	r2,r9,r2
  80bd80:	89ffe61e 	bne	r17,r7,80bd1c <__divdf3+0x120>
  80bd84:	343fe936 	bltu	r6,r16,80bd2c <__divdf3+0x130>
  80bd88:	003fe406 	br	80bd1c <__divdf3+0x120>
  80bd8c:	9809883a 	mov	r4,r19
  80bd90:	d9800415 	stw	r6,16(sp)
  80bd94:	0802f700 	call	802f70 <__pack_d>
  80bd98:	dfc01217 	ldw	ra,72(sp)
  80bd9c:	dcc01117 	ldw	r19,68(sp)
  80bda0:	dc801017 	ldw	r18,64(sp)
  80bda4:	dc400f17 	ldw	r17,60(sp)
  80bda8:	dc000e17 	ldw	r16,56(sp)
  80bdac:	dec01304 	addi	sp,sp,76
  80bdb0:	f800283a 	ret
  80bdb4:	00803fc4 	movi	r2,255
  80bdb8:	7090703a 	and	r8,r14,r2
  80bdbc:	00802004 	movi	r2,128
  80bdc0:	0007883a 	mov	r3,zero
  80bdc4:	0013883a 	mov	r9,zero
  80bdc8:	40800d26 	beq	r8,r2,80be00 <__divdf3+0x204>
  80bdcc:	dbc00815 	stw	r15,32(sp)
  80bdd0:	db800715 	stw	r14,28(sp)
  80bdd4:	003fab06 	br	80bc84 <__divdf3+0x88>
  80bdd8:	343fc92e 	bgeu	r6,r16,80bd00 <__divdf3+0x104>
  80bddc:	3185883a 	add	r2,r6,r6
  80bde0:	1189803a 	cmpltu	r4,r2,r6
  80bde4:	39c7883a 	add	r3,r7,r7
  80bde8:	20c9883a 	add	r4,r4,r3
  80bdec:	297fffc4 	addi	r5,r5,-1
  80bdf0:	100d883a 	mov	r6,r2
  80bdf4:	200f883a 	mov	r7,r4
  80bdf8:	d9400615 	stw	r5,24(sp)
  80bdfc:	003fc006 	br	80bd00 <__divdf3+0x104>
  80be00:	483ff21e 	bne	r9,zero,80bdcc <__divdf3+0x1d0>
  80be04:	01004004 	movi	r4,256
  80be08:	7104703a 	and	r2,r14,r4
  80be0c:	10c4b03a 	or	r2,r2,r3
  80be10:	103fee1e 	bne	r2,zero,80bdcc <__divdf3+0x1d0>
  80be14:	31c4b03a 	or	r2,r6,r7
  80be18:	103fec26 	beq	r2,zero,80bdcc <__divdf3+0x1d0>
  80be1c:	7205883a 	add	r2,r14,r8
  80be20:	1391803a 	cmpltu	r8,r2,r14
  80be24:	43d1883a 	add	r8,r8,r15
  80be28:	013fc004 	movi	r4,-256
  80be2c:	111c703a 	and	r14,r2,r4
  80be30:	401f883a 	mov	r15,r8
  80be34:	003fe506 	br	80bdcc <__divdf3+0x1d0>
  80be38:	8009883a 	mov	r4,r16
  80be3c:	003f9206 	br	80bc88 <__divdf3+0x8c>
  80be40:	9809883a 	mov	r4,r19
  80be44:	d8000715 	stw	zero,28(sp)
  80be48:	d8000815 	stw	zero,32(sp)
  80be4c:	d8000615 	stw	zero,24(sp)
  80be50:	003f8d06 	br	80bc88 <__divdf3+0x8c>

0080be54 <__eqdf2>:
  80be54:	deffef04 	addi	sp,sp,-68
  80be58:	dc400f15 	stw	r17,60(sp)
  80be5c:	dc400404 	addi	r17,sp,16
  80be60:	2005883a 	mov	r2,r4
  80be64:	2807883a 	mov	r3,r5
  80be68:	dc000e15 	stw	r16,56(sp)
  80be6c:	d809883a 	mov	r4,sp
  80be70:	880b883a 	mov	r5,r17
  80be74:	dc000904 	addi	r16,sp,36
  80be78:	d8c00115 	stw	r3,4(sp)
  80be7c:	d8800015 	stw	r2,0(sp)
  80be80:	d9800215 	stw	r6,8(sp)
  80be84:	dfc01015 	stw	ra,64(sp)
  80be88:	d9c00315 	stw	r7,12(sp)
  80be8c:	08032840 	call	803284 <__unpack_d>
  80be90:	d9000204 	addi	r4,sp,8
  80be94:	800b883a 	mov	r5,r16
  80be98:	08032840 	call	803284 <__unpack_d>
  80be9c:	d8800417 	ldw	r2,16(sp)
  80bea0:	00c00044 	movi	r3,1
  80bea4:	180d883a 	mov	r6,r3
  80bea8:	1880062e 	bgeu	r3,r2,80bec4 <__eqdf2+0x70>
  80beac:	d8800917 	ldw	r2,36(sp)
  80beb0:	8809883a 	mov	r4,r17
  80beb4:	800b883a 	mov	r5,r16
  80beb8:	1880022e 	bgeu	r3,r2,80bec4 <__eqdf2+0x70>
  80bebc:	08033bc0 	call	8033bc <__fpcmp_parts_d>
  80bec0:	100d883a 	mov	r6,r2
  80bec4:	3005883a 	mov	r2,r6
  80bec8:	dfc01017 	ldw	ra,64(sp)
  80becc:	dc400f17 	ldw	r17,60(sp)
  80bed0:	dc000e17 	ldw	r16,56(sp)
  80bed4:	dec01104 	addi	sp,sp,68
  80bed8:	f800283a 	ret

0080bedc <__nedf2>:
  80bedc:	deffef04 	addi	sp,sp,-68
  80bee0:	dc400f15 	stw	r17,60(sp)
  80bee4:	dc400404 	addi	r17,sp,16
  80bee8:	2005883a 	mov	r2,r4
  80beec:	2807883a 	mov	r3,r5
  80bef0:	dc000e15 	stw	r16,56(sp)
  80bef4:	d809883a 	mov	r4,sp
  80bef8:	880b883a 	mov	r5,r17
  80befc:	dc000904 	addi	r16,sp,36
  80bf00:	d8c00115 	stw	r3,4(sp)
  80bf04:	d8800015 	stw	r2,0(sp)
  80bf08:	d9800215 	stw	r6,8(sp)
  80bf0c:	dfc01015 	stw	ra,64(sp)
  80bf10:	d9c00315 	stw	r7,12(sp)
  80bf14:	08032840 	call	803284 <__unpack_d>
  80bf18:	d9000204 	addi	r4,sp,8
  80bf1c:	800b883a 	mov	r5,r16
  80bf20:	08032840 	call	803284 <__unpack_d>
  80bf24:	d8800417 	ldw	r2,16(sp)
  80bf28:	00c00044 	movi	r3,1
  80bf2c:	180d883a 	mov	r6,r3
  80bf30:	1880062e 	bgeu	r3,r2,80bf4c <__nedf2+0x70>
  80bf34:	d8800917 	ldw	r2,36(sp)
  80bf38:	8809883a 	mov	r4,r17
  80bf3c:	800b883a 	mov	r5,r16
  80bf40:	1880022e 	bgeu	r3,r2,80bf4c <__nedf2+0x70>
  80bf44:	08033bc0 	call	8033bc <__fpcmp_parts_d>
  80bf48:	100d883a 	mov	r6,r2
  80bf4c:	3005883a 	mov	r2,r6
  80bf50:	dfc01017 	ldw	ra,64(sp)
  80bf54:	dc400f17 	ldw	r17,60(sp)
  80bf58:	dc000e17 	ldw	r16,56(sp)
  80bf5c:	dec01104 	addi	sp,sp,68
  80bf60:	f800283a 	ret

0080bf64 <__gedf2>:
  80bf64:	deffef04 	addi	sp,sp,-68
  80bf68:	dc400f15 	stw	r17,60(sp)
  80bf6c:	dc400404 	addi	r17,sp,16
  80bf70:	2005883a 	mov	r2,r4
  80bf74:	2807883a 	mov	r3,r5
  80bf78:	dc000e15 	stw	r16,56(sp)
  80bf7c:	d809883a 	mov	r4,sp
  80bf80:	880b883a 	mov	r5,r17
  80bf84:	dc000904 	addi	r16,sp,36
  80bf88:	d8c00115 	stw	r3,4(sp)
  80bf8c:	d8800015 	stw	r2,0(sp)
  80bf90:	d9800215 	stw	r6,8(sp)
  80bf94:	dfc01015 	stw	ra,64(sp)
  80bf98:	d9c00315 	stw	r7,12(sp)
  80bf9c:	08032840 	call	803284 <__unpack_d>
  80bfa0:	d9000204 	addi	r4,sp,8
  80bfa4:	800b883a 	mov	r5,r16
  80bfa8:	08032840 	call	803284 <__unpack_d>
  80bfac:	d8800417 	ldw	r2,16(sp)
  80bfb0:	00c00044 	movi	r3,1
  80bfb4:	01bfffc4 	movi	r6,-1
  80bfb8:	1880062e 	bgeu	r3,r2,80bfd4 <__gedf2+0x70>
  80bfbc:	d8800917 	ldw	r2,36(sp)
  80bfc0:	8809883a 	mov	r4,r17
  80bfc4:	800b883a 	mov	r5,r16
  80bfc8:	1880022e 	bgeu	r3,r2,80bfd4 <__gedf2+0x70>
  80bfcc:	08033bc0 	call	8033bc <__fpcmp_parts_d>
  80bfd0:	100d883a 	mov	r6,r2
  80bfd4:	3005883a 	mov	r2,r6
  80bfd8:	dfc01017 	ldw	ra,64(sp)
  80bfdc:	dc400f17 	ldw	r17,60(sp)
  80bfe0:	dc000e17 	ldw	r16,56(sp)
  80bfe4:	dec01104 	addi	sp,sp,68
  80bfe8:	f800283a 	ret

0080bfec <__ltdf2>:
  80bfec:	deffef04 	addi	sp,sp,-68
  80bff0:	dc400f15 	stw	r17,60(sp)
  80bff4:	dc400404 	addi	r17,sp,16
  80bff8:	2005883a 	mov	r2,r4
  80bffc:	2807883a 	mov	r3,r5
  80c000:	dc000e15 	stw	r16,56(sp)
  80c004:	d809883a 	mov	r4,sp
  80c008:	880b883a 	mov	r5,r17
  80c00c:	dc000904 	addi	r16,sp,36
  80c010:	d8c00115 	stw	r3,4(sp)
  80c014:	d8800015 	stw	r2,0(sp)
  80c018:	d9800215 	stw	r6,8(sp)
  80c01c:	dfc01015 	stw	ra,64(sp)
  80c020:	d9c00315 	stw	r7,12(sp)
  80c024:	08032840 	call	803284 <__unpack_d>
  80c028:	d9000204 	addi	r4,sp,8
  80c02c:	800b883a 	mov	r5,r16
  80c030:	08032840 	call	803284 <__unpack_d>
  80c034:	d8800417 	ldw	r2,16(sp)
  80c038:	00c00044 	movi	r3,1
  80c03c:	180d883a 	mov	r6,r3
  80c040:	1880062e 	bgeu	r3,r2,80c05c <__ltdf2+0x70>
  80c044:	d8800917 	ldw	r2,36(sp)
  80c048:	8809883a 	mov	r4,r17
  80c04c:	800b883a 	mov	r5,r16
  80c050:	1880022e 	bgeu	r3,r2,80c05c <__ltdf2+0x70>
  80c054:	08033bc0 	call	8033bc <__fpcmp_parts_d>
  80c058:	100d883a 	mov	r6,r2
  80c05c:	3005883a 	mov	r2,r6
  80c060:	dfc01017 	ldw	ra,64(sp)
  80c064:	dc400f17 	ldw	r17,60(sp)
  80c068:	dc000e17 	ldw	r16,56(sp)
  80c06c:	dec01104 	addi	sp,sp,68
  80c070:	f800283a 	ret

0080c074 <__floatsidf>:
  80c074:	2006d7fa 	srli	r3,r4,31
  80c078:	defff604 	addi	sp,sp,-40
  80c07c:	008000c4 	movi	r2,3
  80c080:	dfc00915 	stw	ra,36(sp)
  80c084:	dcc00815 	stw	r19,32(sp)
  80c088:	dc800715 	stw	r18,28(sp)
  80c08c:	dc400615 	stw	r17,24(sp)
  80c090:	dc000515 	stw	r16,20(sp)
  80c094:	d8800015 	stw	r2,0(sp)
  80c098:	d8c00115 	stw	r3,4(sp)
  80c09c:	20000f1e 	bne	r4,zero,80c0dc <__floatsidf+0x68>
  80c0a0:	00800084 	movi	r2,2
  80c0a4:	d8800015 	stw	r2,0(sp)
  80c0a8:	d809883a 	mov	r4,sp
  80c0ac:	0802f700 	call	802f70 <__pack_d>
  80c0b0:	1009883a 	mov	r4,r2
  80c0b4:	180b883a 	mov	r5,r3
  80c0b8:	2005883a 	mov	r2,r4
  80c0bc:	2807883a 	mov	r3,r5
  80c0c0:	dfc00917 	ldw	ra,36(sp)
  80c0c4:	dcc00817 	ldw	r19,32(sp)
  80c0c8:	dc800717 	ldw	r18,28(sp)
  80c0cc:	dc400617 	ldw	r17,24(sp)
  80c0d0:	dc000517 	ldw	r16,20(sp)
  80c0d4:	dec00a04 	addi	sp,sp,40
  80c0d8:	f800283a 	ret
  80c0dc:	00800f04 	movi	r2,60
  80c0e0:	1807003a 	cmpeq	r3,r3,zero
  80c0e4:	d8800215 	stw	r2,8(sp)
  80c0e8:	18001126 	beq	r3,zero,80c130 <__floatsidf+0xbc>
  80c0ec:	0027883a 	mov	r19,zero
  80c0f0:	2025883a 	mov	r18,r4
  80c0f4:	d9000315 	stw	r4,12(sp)
  80c0f8:	dcc00415 	stw	r19,16(sp)
  80c0fc:	0802ef00 	call	802ef0 <__clzsi2>
  80c100:	11000744 	addi	r4,r2,29
  80c104:	013fe80e 	bge	zero,r4,80c0a8 <__floatsidf+0x34>
  80c108:	10bfff44 	addi	r2,r2,-3
  80c10c:	10000c16 	blt	r2,zero,80c140 <__floatsidf+0xcc>
  80c110:	90a2983a 	sll	r17,r18,r2
  80c114:	0021883a 	mov	r16,zero
  80c118:	d8800217 	ldw	r2,8(sp)
  80c11c:	dc400415 	stw	r17,16(sp)
  80c120:	dc000315 	stw	r16,12(sp)
  80c124:	1105c83a 	sub	r2,r2,r4
  80c128:	d8800215 	stw	r2,8(sp)
  80c12c:	003fde06 	br	80c0a8 <__floatsidf+0x34>
  80c130:	00a00034 	movhi	r2,32768
  80c134:	20800a26 	beq	r4,r2,80c160 <__floatsidf+0xec>
  80c138:	0109c83a 	sub	r4,zero,r4
  80c13c:	003feb06 	br	80c0ec <__floatsidf+0x78>
  80c140:	9006d07a 	srli	r3,r18,1
  80c144:	008007c4 	movi	r2,31
  80c148:	1105c83a 	sub	r2,r2,r4
  80c14c:	1886d83a 	srl	r3,r3,r2
  80c150:	9922983a 	sll	r17,r19,r4
  80c154:	9120983a 	sll	r16,r18,r4
  80c158:	1c62b03a 	or	r17,r3,r17
  80c15c:	003fee06 	br	80c118 <__floatsidf+0xa4>
  80c160:	0009883a 	mov	r4,zero
  80c164:	01707834 	movhi	r5,49632
  80c168:	003fd306 	br	80c0b8 <__floatsidf+0x44>

0080c16c <udivmodsi4>:
  80c16c:	29001b2e 	bgeu	r5,r4,80c1dc <udivmodsi4+0x70>
  80c170:	28001a16 	blt	r5,zero,80c1dc <udivmodsi4+0x70>
  80c174:	00800044 	movi	r2,1
  80c178:	0007883a 	mov	r3,zero
  80c17c:	01c007c4 	movi	r7,31
  80c180:	00000306 	br	80c190 <udivmodsi4+0x24>
  80c184:	19c01326 	beq	r3,r7,80c1d4 <udivmodsi4+0x68>
  80c188:	18c00044 	addi	r3,r3,1
  80c18c:	28000416 	blt	r5,zero,80c1a0 <udivmodsi4+0x34>
  80c190:	294b883a 	add	r5,r5,r5
  80c194:	1085883a 	add	r2,r2,r2
  80c198:	293ffa36 	bltu	r5,r4,80c184 <udivmodsi4+0x18>
  80c19c:	10000d26 	beq	r2,zero,80c1d4 <udivmodsi4+0x68>
  80c1a0:	0007883a 	mov	r3,zero
  80c1a4:	21400236 	bltu	r4,r5,80c1b0 <udivmodsi4+0x44>
  80c1a8:	2149c83a 	sub	r4,r4,r5
  80c1ac:	1886b03a 	or	r3,r3,r2
  80c1b0:	1004d07a 	srli	r2,r2,1
  80c1b4:	280ad07a 	srli	r5,r5,1
  80c1b8:	103ffa1e 	bne	r2,zero,80c1a4 <udivmodsi4+0x38>
  80c1bc:	30000226 	beq	r6,zero,80c1c8 <udivmodsi4+0x5c>
  80c1c0:	2005883a 	mov	r2,r4
  80c1c4:	f800283a 	ret
  80c1c8:	1809883a 	mov	r4,r3
  80c1cc:	2005883a 	mov	r2,r4
  80c1d0:	f800283a 	ret
  80c1d4:	0007883a 	mov	r3,zero
  80c1d8:	003ff806 	br	80c1bc <udivmodsi4+0x50>
  80c1dc:	00800044 	movi	r2,1
  80c1e0:	0007883a 	mov	r3,zero
  80c1e4:	003fef06 	br	80c1a4 <udivmodsi4+0x38>

0080c1e8 <__divsi3>:
  80c1e8:	defffe04 	addi	sp,sp,-8
  80c1ec:	dc000015 	stw	r16,0(sp)
  80c1f0:	dfc00115 	stw	ra,4(sp)
  80c1f4:	0021883a 	mov	r16,zero
  80c1f8:	20000c16 	blt	r4,zero,80c22c <__divsi3+0x44>
  80c1fc:	000d883a 	mov	r6,zero
  80c200:	28000e16 	blt	r5,zero,80c23c <__divsi3+0x54>
  80c204:	080c16c0 	call	80c16c <udivmodsi4>
  80c208:	1007883a 	mov	r3,r2
  80c20c:	8005003a 	cmpeq	r2,r16,zero
  80c210:	1000011e 	bne	r2,zero,80c218 <__divsi3+0x30>
  80c214:	00c7c83a 	sub	r3,zero,r3
  80c218:	1805883a 	mov	r2,r3
  80c21c:	dfc00117 	ldw	ra,4(sp)
  80c220:	dc000017 	ldw	r16,0(sp)
  80c224:	dec00204 	addi	sp,sp,8
  80c228:	f800283a 	ret
  80c22c:	0109c83a 	sub	r4,zero,r4
  80c230:	04000044 	movi	r16,1
  80c234:	000d883a 	mov	r6,zero
  80c238:	283ff20e 	bge	r5,zero,80c204 <__divsi3+0x1c>
  80c23c:	014bc83a 	sub	r5,zero,r5
  80c240:	8021003a 	cmpeq	r16,r16,zero
  80c244:	003fef06 	br	80c204 <__divsi3+0x1c>

0080c248 <__modsi3>:
  80c248:	deffff04 	addi	sp,sp,-4
  80c24c:	dfc00015 	stw	ra,0(sp)
  80c250:	01800044 	movi	r6,1
  80c254:	2807883a 	mov	r3,r5
  80c258:	20000416 	blt	r4,zero,80c26c <__modsi3+0x24>
  80c25c:	28000c16 	blt	r5,zero,80c290 <__modsi3+0x48>
  80c260:	dfc00017 	ldw	ra,0(sp)
  80c264:	dec00104 	addi	sp,sp,4
  80c268:	080c16c1 	jmpi	80c16c <udivmodsi4>
  80c26c:	0109c83a 	sub	r4,zero,r4
  80c270:	28000b16 	blt	r5,zero,80c2a0 <__modsi3+0x58>
  80c274:	180b883a 	mov	r5,r3
  80c278:	01800044 	movi	r6,1
  80c27c:	080c16c0 	call	80c16c <udivmodsi4>
  80c280:	0085c83a 	sub	r2,zero,r2
  80c284:	dfc00017 	ldw	ra,0(sp)
  80c288:	dec00104 	addi	sp,sp,4
  80c28c:	f800283a 	ret
  80c290:	014bc83a 	sub	r5,zero,r5
  80c294:	dfc00017 	ldw	ra,0(sp)
  80c298:	dec00104 	addi	sp,sp,4
  80c29c:	080c16c1 	jmpi	80c16c <udivmodsi4>
  80c2a0:	0147c83a 	sub	r3,zero,r5
  80c2a4:	003ff306 	br	80c274 <__modsi3+0x2c>

0080c2a8 <__udivsi3>:
  80c2a8:	000d883a 	mov	r6,zero
  80c2ac:	080c16c1 	jmpi	80c16c <udivmodsi4>

0080c2b0 <__umodsi3>:
  80c2b0:	01800044 	movi	r6,1
  80c2b4:	080c16c1 	jmpi	80c16c <udivmodsi4>

0080c2b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c2b8:	defffd04 	addi	sp,sp,-12
  80c2bc:	dc000015 	stw	r16,0(sp)
  80c2c0:	dfc00215 	stw	ra,8(sp)
  80c2c4:	dc400115 	stw	r17,4(sp)
  80c2c8:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c2cc:	20001516 	blt	r4,zero,80c324 <close+0x6c>
  80c2d0:	20c00324 	muli	r3,r4,12
  80c2d4:	00802074 	movhi	r2,129
  80c2d8:	1091cb04 	addi	r2,r2,18220
  80c2dc:	1887883a 	add	r3,r3,r2

  if (fd)
  80c2e0:	18001026 	beq	r3,zero,80c324 <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c2e4:	18800017 	ldw	r2,0(r3)
  80c2e8:	10800417 	ldw	r2,16(r2)
  80c2ec:	10001c26 	beq	r2,zero,80c360 <close+0xa8>
  80c2f0:	1809883a 	mov	r4,r3
  80c2f4:	103ee83a 	callr	r2
  80c2f8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c2fc:	8009883a 	mov	r4,r16
  80c300:	080c9400 	call	80c940 <alt_release_fd>
    if (rval < 0)
  80c304:	88001b16 	blt	r17,zero,80c374 <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c308:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c30c:	1805883a 	mov	r2,r3
  80c310:	dfc00217 	ldw	ra,8(sp)
  80c314:	dc400117 	ldw	r17,4(sp)
  80c318:	dc000017 	ldw	r16,0(sp)
  80c31c:	dec00304 	addi	sp,sp,12
  80c320:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  80c324:	00802074 	movhi	r2,129
  80c328:	10966e04 	addi	r2,r2,22968
  80c32c:	10800017 	ldw	r2,0(r2)
  80c330:	10000d26 	beq	r2,zero,80c368 <close+0xb0>
  80c334:	103ee83a 	callr	r2
  80c338:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c33c:	00ffffc4 	movi	r3,-1
  80c340:	00801444 	movi	r2,81
  80c344:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  80c348:	1805883a 	mov	r2,r3
  80c34c:	dfc00217 	ldw	ra,8(sp)
  80c350:	dc400117 	ldw	r17,4(sp)
  80c354:	dc000017 	ldw	r16,0(sp)
  80c358:	dec00304 	addi	sp,sp,12
  80c35c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c360:	080c9400 	call	80c940 <alt_release_fd>
  80c364:	003fe806 	br	80c308 <close+0x50>
  80c368:	01002074 	movhi	r4,129
  80c36c:	211db204 	addi	r4,r4,30408
  80c370:	003ff206 	br	80c33c <close+0x84>
  80c374:	00802074 	movhi	r2,129
  80c378:	10966e04 	addi	r2,r2,22968
  80c37c:	10800017 	ldw	r2,0(r2)
  80c380:	10000626 	beq	r2,zero,80c39c <close+0xe4>
  80c384:	103ee83a 	callr	r2
  80c388:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  80c38c:	0445c83a 	sub	r2,zero,r17
  80c390:	00ffffc4 	movi	r3,-1
  80c394:	20800015 	stw	r2,0(r4)
  80c398:	003fdc06 	br	80c30c <close+0x54>
  80c39c:	01002074 	movhi	r4,129
  80c3a0:	211db204 	addi	r4,r4,30408
  80c3a4:	003ff906 	br	80c38c <close+0xd4>

0080c3a8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  80c3a8:	3005883a 	mov	r2,r6
  80c3ac:	f800283a 	ret

0080c3b0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c3b0:	20000226 	beq	r4,zero,80c3bc <_exit+0xc>
    ALT_SIM_FAIL();
  80c3b4:	002af070 	cmpltui	zero,zero,43969
  80c3b8:	003fff06 	br	80c3b8 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  80c3bc:	002af0b0 	cmpltui	zero,zero,43970
  80c3c0:	003ffd06 	br	80c3b8 <_exit+0x8>

0080c3c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c3c4:	deffff04 	addi	sp,sp,-4
  80c3c8:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c3cc:	20c00324 	muli	r3,r4,12
  80c3d0:	20001116 	blt	r4,zero,80c418 <fstat+0x54>
  80c3d4:	00802074 	movhi	r2,129
  80c3d8:	1091cb04 	addi	r2,r2,18220
  80c3dc:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80c3e0:	20000d26 	beq	r4,zero,80c418 <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c3e4:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c3e8:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c3ec:	10800817 	ldw	r2,32(r2)
  80c3f0:	10000326 	beq	r2,zero,80c400 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c3f4:	dfc00017 	ldw	ra,0(sp)
  80c3f8:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  80c3fc:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c400:	00880004 	movi	r2,8192
  80c404:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c408:	1805883a 	mov	r2,r3
  80c40c:	dfc00017 	ldw	ra,0(sp)
  80c410:	dec00104 	addi	sp,sp,4
  80c414:	f800283a 	ret
  80c418:	00802074 	movhi	r2,129
  80c41c:	10966e04 	addi	r2,r2,22968
  80c420:	10800017 	ldw	r2,0(r2)
  80c424:	00c02074 	movhi	r3,129
  80c428:	18ddb204 	addi	r3,r3,30408
  80c42c:	10000226 	beq	r2,zero,80c438 <fstat+0x74>
  80c430:	103ee83a 	callr	r2
  80c434:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c438:	00801444 	movi	r2,81
  80c43c:	18800015 	stw	r2,0(r3)
  80c440:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  80c444:	1805883a 	mov	r2,r3
  80c448:	dfc00017 	ldw	ra,0(sp)
  80c44c:	dec00104 	addi	sp,sp,4
  80c450:	f800283a 	ret

0080c454 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80c454:	000530fa 	rdctl	r2,ienable
  80c458:	00c00044 	movi	r3,1
  80c45c:	1946983a 	sll	r3,r3,r5
  80c460:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  80c464:	1004c03a 	cmpne	r2,r2,zero
  80c468:	f800283a 	ret

0080c46c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c46c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c470:	00bfff84 	movi	r2,-2
  80c474:	3084703a 	and	r2,r6,r2
  80c478:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  80c47c:	01002074 	movhi	r4,129
  80c480:	211db604 	addi	r4,r4,30424
  80c484:	00800044 	movi	r2,1
  80c488:	20c00017 	ldw	r3,0(r4)
  80c48c:	1144983a 	sll	r2,r2,r5
  80c490:	10c4b03a 	or	r2,r2,r3
  80c494:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c498:	20c00017 	ldw	r3,0(r4)
  80c49c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c4a0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  80c4a4:	0005883a 	mov	r2,zero
  80c4a8:	f800283a 	ret

0080c4ac <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4ac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4b0:	00bfff84 	movi	r2,-2
  80c4b4:	3084703a 	and	r2,r6,r2
  80c4b8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  80c4bc:	01002074 	movhi	r4,129
  80c4c0:	211db604 	addi	r4,r4,30424
  80c4c4:	00bfff84 	movi	r2,-2
  80c4c8:	20c00017 	ldw	r3,0(r4)
  80c4cc:	1144183a 	rol	r2,r2,r5
  80c4d0:	10c4703a 	and	r2,r2,r3
  80c4d4:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c4d8:	20c00017 	ldw	r3,0(r4)
  80c4dc:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c4e0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  80c4e4:	0005883a 	mov	r2,zero
  80c4e8:	f800283a 	ret

0080c4ec <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80c4ec:	080c4f01 	jmpi	80c4f0 <alt_iic_isr_register>

0080c4f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c4f0:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c4f4:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c4f8:	dfc00115 	stw	ra,4(sp)
  80c4fc:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c500:	023ffa84 	movi	r8,-22
  80c504:	1140050e 	bge	r2,r5,80c51c <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  80c508:	4005883a 	mov	r2,r8
  80c50c:	dfc00117 	ldw	ra,4(sp)
  80c510:	dc000017 	ldw	r16,0(sp)
  80c514:	dec00204 	addi	sp,sp,8
  80c518:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c51c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c520:	00bfff84 	movi	r2,-2
  80c524:	8084703a 	and	r2,r16,r2
  80c528:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  80c52c:	280690fa 	slli	r3,r5,3
  80c530:	00802074 	movhi	r2,129
  80c534:	109dd304 	addi	r2,r2,30540
  80c538:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  80c53c:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  80c540:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80c544:	30000826 	beq	r6,zero,80c568 <alt_iic_isr_register+0x78>
  80c548:	080c46c0 	call	80c46c <alt_ic_irq_enable>
  80c54c:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c550:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  80c554:	4005883a 	mov	r2,r8
  80c558:	dfc00117 	ldw	ra,4(sp)
  80c55c:	dc000017 	ldw	r16,0(sp)
  80c560:	dec00204 	addi	sp,sp,8
  80c564:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80c568:	080c4ac0 	call	80c4ac <alt_ic_irq_disable>
  80c56c:	1011883a 	mov	r8,r2
  80c570:	8001703a 	wrctl	status,r16
  80c574:	003ff706 	br	80c554 <alt_iic_isr_register+0x64>

0080c578 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c578:	defff004 	addi	sp,sp,-64
  80c57c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c580:	20c00324 	muli	r3,r4,12
  80c584:	20000f16 	blt	r4,zero,80c5c4 <isatty+0x4c>
  80c588:	00802074 	movhi	r2,129
  80c58c:	1091cb04 	addi	r2,r2,18220
  80c590:	1885883a 	add	r2,r3,r2
  
  if (fd)
  80c594:	10000b26 	beq	r2,zero,80c5c4 <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c598:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c59c:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c5a0:	10c00817 	ldw	r3,32(r2)
  80c5a4:	00800044 	movi	r2,1
  80c5a8:	18000326 	beq	r3,zero,80c5b8 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c5ac:	080c3c40 	call	80c3c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c5b0:	d8c00117 	ldw	r3,4(sp)
  80c5b4:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  80c5b8:	dfc00f17 	ldw	ra,60(sp)
  80c5bc:	dec01004 	addi	sp,sp,64
  80c5c0:	f800283a 	ret
  80c5c4:	00802074 	movhi	r2,129
  80c5c8:	10966e04 	addi	r2,r2,22968
  80c5cc:	10800017 	ldw	r2,0(r2)
  80c5d0:	00c02074 	movhi	r3,129
  80c5d4:	18ddb204 	addi	r3,r3,30408
  80c5d8:	10000226 	beq	r2,zero,80c5e4 <isatty+0x6c>
  80c5dc:	103ee83a 	callr	r2
  80c5e0:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c5e4:	00801444 	movi	r2,81
  80c5e8:	18800015 	stw	r2,0(r3)
  80c5ec:	0005883a 	mov	r2,zero
    return 0;
  }
}
  80c5f0:	dfc00f17 	ldw	ra,60(sp)
  80c5f4:	dec01004 	addi	sp,sp,64
  80c5f8:	f800283a 	ret

0080c5fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c5fc:	defffe04 	addi	sp,sp,-8
  80c600:	dfc00115 	stw	ra,4(sp)
  80c604:	df000015 	stw	fp,0(sp)
  80c608:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c60c:	01002074 	movhi	r4,129
  80c610:	21167304 	addi	r4,r4,22988
  80c614:	01402074 	movhi	r5,129
  80c618:	294f3c04 	addi	r5,r5,15600
  80c61c:	01802074 	movhi	r6,129
  80c620:	31967304 	addi	r6,r6,22988
  80c624:	080c67c0 	call	80c67c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80c628:	01002034 	movhi	r4,128
  80c62c:	21000804 	addi	r4,r4,32
  80c630:	01402034 	movhi	r5,128
  80c634:	29400804 	addi	r5,r5,32
  80c638:	01802034 	movhi	r6,128
  80c63c:	31806104 	addi	r6,r6,388
  80c640:	080c67c0 	call	80c67c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80c644:	01002074 	movhi	r4,129
  80c648:	210dd104 	addi	r4,r4,14148
  80c64c:	01402074 	movhi	r5,129
  80c650:	294dd104 	addi	r5,r5,14148
  80c654:	01802074 	movhi	r6,129
  80c658:	318f3c04 	addi	r6,r6,15600
  80c65c:	080c67c0 	call	80c67c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80c660:	0812d940 	call	812d94 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80c664:	081301c0 	call	81301c <alt_icache_flush_all>
}
  80c668:	e037883a 	mov	sp,fp
  80c66c:	dfc00117 	ldw	ra,4(sp)
  80c670:	df000017 	ldw	fp,0(sp)
  80c674:	dec00204 	addi	sp,sp,8
  80c678:	f800283a 	ret

0080c67c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80c67c:	defffc04 	addi	sp,sp,-16
  80c680:	df000315 	stw	fp,12(sp)
  80c684:	df000304 	addi	fp,sp,12
  80c688:	e13ffd15 	stw	r4,-12(fp)
  80c68c:	e17ffe15 	stw	r5,-8(fp)
  80c690:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80c694:	e0fffe17 	ldw	r3,-8(fp)
  80c698:	e0bffd17 	ldw	r2,-12(fp)
  80c69c:	18800e26 	beq	r3,r2,80c6d8 <alt_load_section+0x5c>
  {
    while( to != end )
  80c6a0:	00000a06 	br	80c6cc <alt_load_section+0x50>
    {
      *to++ = *from++;
  80c6a4:	e0bffd17 	ldw	r2,-12(fp)
  80c6a8:	10c00017 	ldw	r3,0(r2)
  80c6ac:	e0bffe17 	ldw	r2,-8(fp)
  80c6b0:	10c00015 	stw	r3,0(r2)
  80c6b4:	e0bffe17 	ldw	r2,-8(fp)
  80c6b8:	10800104 	addi	r2,r2,4
  80c6bc:	e0bffe15 	stw	r2,-8(fp)
  80c6c0:	e0bffd17 	ldw	r2,-12(fp)
  80c6c4:	10800104 	addi	r2,r2,4
  80c6c8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c6cc:	e0fffe17 	ldw	r3,-8(fp)
  80c6d0:	e0bfff17 	ldw	r2,-4(fp)
  80c6d4:	18bff31e 	bne	r3,r2,80c6a4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80c6d8:	e037883a 	mov	sp,fp
  80c6dc:	df000017 	ldw	fp,0(sp)
  80c6e0:	dec00104 	addi	sp,sp,4
  80c6e4:	f800283a 	ret

0080c6e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c6e8:	defffe04 	addi	sp,sp,-8
  80c6ec:	dfc00115 	stw	ra,4(sp)
  80c6f0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c6f4:	20001f16 	blt	r4,zero,80c774 <lseek+0x8c>
  80c6f8:	20c00324 	muli	r3,r4,12
  80c6fc:	00802074 	movhi	r2,129
  80c700:	1091cb04 	addi	r2,r2,18220
  80c704:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  80c708:	20001c26 	beq	r4,zero,80c77c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c70c:	20800017 	ldw	r2,0(r4)
  80c710:	10800717 	ldw	r2,28(r2)
  80c714:	10000626 	beq	r2,zero,80c730 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c718:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80c71c:	10000516 	blt	r2,zero,80c734 <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  80c720:	dfc00117 	ldw	ra,4(sp)
  80c724:	dc000017 	ldw	r16,0(sp)
  80c728:	dec00204 	addi	sp,sp,8
  80c72c:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c730:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80c734:	00a1c83a 	sub	r16,zero,r2
  80c738:	00802074 	movhi	r2,129
  80c73c:	10966e04 	addi	r2,r2,22968
  80c740:	10800017 	ldw	r2,0(r2)
  80c744:	10000826 	beq	r2,zero,80c768 <lseek+0x80>
  80c748:	103ee83a 	callr	r2
  80c74c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  80c750:	00bfffc4 	movi	r2,-1
  80c754:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  80c758:	dfc00117 	ldw	ra,4(sp)
  80c75c:	dc000017 	ldw	r16,0(sp)
  80c760:	dec00204 	addi	sp,sp,8
  80c764:	f800283a 	ret
  80c768:	00c02074 	movhi	r3,129
  80c76c:	18ddb204 	addi	r3,r3,30408
  80c770:	003ff706 	br	80c750 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c774:	04001444 	movi	r16,81
  80c778:	003fef06 	br	80c738 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  80c77c:	00bfebc4 	movi	r2,-81
  80c780:	003fec06 	br	80c734 <lseek+0x4c>

0080c784 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c784:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c788:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c78c:	dfc00115 	stw	ra,4(sp)
  80c790:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c794:	080cad00 	call	80cad0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c798:	080caf00 	call	80caf0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c79c:	01002074 	movhi	r4,129
  80c7a0:	210f3704 	addi	r4,r4,15580
  80c7a4:	200b883a 	mov	r5,r4
  80c7a8:	200d883a 	mov	r6,r4
  80c7ac:	08130280 	call	813028 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c7b0:	0812ec00 	call	812ec0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c7b4:	01002074 	movhi	r4,129
  80c7b8:	210bc904 	addi	r4,r4,12068
  80c7bc:	08135180 	call	813518 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c7c0:	d1275417 	ldw	r4,-25264(gp)
  80c7c4:	d1675517 	ldw	r5,-25260(gp)
  80c7c8:	d1a75617 	ldw	r6,-25256(gp)
  80c7cc:	0801af80 	call	801af8 <main>
  80c7d0:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  80c7d4:	01000044 	movi	r4,1
  80c7d8:	080c2b80 	call	80c2b8 <close>
  exit (result);
  80c7dc:	8809883a 	mov	r4,r17
  80c7e0:	08034840 	call	803484 <exit>

0080c7e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80c7e4:	defffe04 	addi	sp,sp,-8
  80c7e8:	df000115 	stw	fp,4(sp)
  80c7ec:	df000104 	addi	fp,sp,4
  80c7f0:	e13fff15 	stw	r4,-4(fp)
}
  80c7f4:	e037883a 	mov	sp,fp
  80c7f8:	df000017 	ldw	fp,0(sp)
  80c7fc:	dec00104 	addi	sp,sp,4
  80c800:	f800283a 	ret

0080c804 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c804:	defffe04 	addi	sp,sp,-8
  80c808:	df000115 	stw	fp,4(sp)
  80c80c:	df000104 	addi	fp,sp,4
  80c810:	e13fff15 	stw	r4,-4(fp)
}
  80c814:	e037883a 	mov	sp,fp
  80c818:	df000017 	ldw	fp,0(sp)
  80c81c:	dec00104 	addi	sp,sp,4
  80c820:	f800283a 	ret

0080c824 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c824:	defffe04 	addi	sp,sp,-8
  80c828:	dfc00115 	stw	ra,4(sp)
  80c82c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c830:	20002516 	blt	r4,zero,80c8c8 <read+0xa4>
  80c834:	20c00324 	muli	r3,r4,12
  80c838:	00802074 	movhi	r2,129
  80c83c:	1091cb04 	addi	r2,r2,18220
  80c840:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80c844:	20002026 	beq	r4,zero,80c8c8 <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c848:	20800217 	ldw	r2,8(r4)
  80c84c:	00c00044 	movi	r3,1
  80c850:	108000cc 	andi	r2,r2,3
  80c854:	10c00b26 	beq	r2,r3,80c884 <read+0x60>
  80c858:	20800017 	ldw	r2,0(r4)
  80c85c:	10800517 	ldw	r2,20(r2)
  80c860:	10000826 	beq	r2,zero,80c884 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c864:	103ee83a 	callr	r2
  80c868:	1021883a 	mov	r16,r2
  80c86c:	10002716 	blt	r2,zero,80c90c <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c870:	8005883a 	mov	r2,r16
  80c874:	dfc00117 	ldw	ra,4(sp)
  80c878:	dc000017 	ldw	r16,0(sp)
  80c87c:	dec00204 	addi	sp,sp,8
  80c880:	f800283a 	ret
  80c884:	00802074 	movhi	r2,129
  80c888:	10966e04 	addi	r2,r2,22968
  80c88c:	10800017 	ldw	r2,0(r2)
  80c890:	10000a26 	beq	r2,zero,80c8bc <read+0x98>
  80c894:	103ee83a 	callr	r2
  80c898:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c89c:	043fffc4 	movi	r16,-1
  80c8a0:	00800344 	movi	r2,13
  80c8a4:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c8a8:	8005883a 	mov	r2,r16
  80c8ac:	dfc00117 	ldw	ra,4(sp)
  80c8b0:	dc000017 	ldw	r16,0(sp)
  80c8b4:	dec00204 	addi	sp,sp,8
  80c8b8:	f800283a 	ret
  80c8bc:	00c02074 	movhi	r3,129
  80c8c0:	18ddb204 	addi	r3,r3,30408
  80c8c4:	003ff506 	br	80c89c <read+0x78>
  80c8c8:	00802074 	movhi	r2,129
  80c8cc:	10966e04 	addi	r2,r2,22968
  80c8d0:	10800017 	ldw	r2,0(r2)
  80c8d4:	10000a26 	beq	r2,zero,80c900 <read+0xdc>
  80c8d8:	103ee83a 	callr	r2
  80c8dc:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c8e0:	00801444 	movi	r2,81
  80c8e4:	043fffc4 	movi	r16,-1
  80c8e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80c8ec:	8005883a 	mov	r2,r16
  80c8f0:	dfc00117 	ldw	ra,4(sp)
  80c8f4:	dc000017 	ldw	r16,0(sp)
  80c8f8:	dec00204 	addi	sp,sp,8
  80c8fc:	f800283a 	ret
  80c900:	00c02074 	movhi	r3,129
  80c904:	18ddb204 	addi	r3,r3,30408
  80c908:	003ff506 	br	80c8e0 <read+0xbc>
  80c90c:	00802074 	movhi	r2,129
  80c910:	10966e04 	addi	r2,r2,22968
  80c914:	10800017 	ldw	r2,0(r2)
  80c918:	10000626 	beq	r2,zero,80c934 <read+0x110>
  80c91c:	103ee83a 	callr	r2
  80c920:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  80c924:	0405c83a 	sub	r2,zero,r16
  80c928:	043fffc4 	movi	r16,-1
  80c92c:	18800015 	stw	r2,0(r3)
  80c930:	003fcf06 	br	80c870 <read+0x4c>
  80c934:	00c02074 	movhi	r3,129
  80c938:	18ddb204 	addi	r3,r3,30408
  80c93c:	003ff906 	br	80c924 <read+0x100>

0080c940 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  80c940:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  80c944:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  80c948:	1100050e 	bge	r2,r4,80c960 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c94c:	00802074 	movhi	r2,129
  80c950:	1091cb04 	addi	r2,r2,18220
  80c954:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  80c958:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  80c95c:	10000215 	stw	zero,8(r2)
  80c960:	f800283a 	ret

0080c964 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c964:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c968:	00bfff84 	movi	r2,-2
  80c96c:	2884703a 	and	r2,r5,r2
  80c970:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c974:	d0e00d17 	ldw	r3,-32716(gp)
  80c978:	00bfff04 	movi	r2,-4
  80c97c:	18c000c4 	addi	r3,r3,3
  80c980:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c984:	1909883a 	add	r4,r3,r4
  80c988:	00804034 	movhi	r2,256
  80c98c:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c990:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c994:	1100042e 	bgeu	r2,r4,80c9a8 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c998:	2801703a 	wrctl	status,r5
  80c99c:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80c9a0:	1805883a 	mov	r2,r3
  80c9a4:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  80c9a8:	d1200d15 	stw	r4,-32716(gp)
  80c9ac:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80c9b0:	1805883a 	mov	r2,r3
  80c9b4:	f800283a 	ret

0080c9b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c9b8:	defffe04 	addi	sp,sp,-8
  80c9bc:	dfc00115 	stw	ra,4(sp)
  80c9c0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c9c4:	20002416 	blt	r4,zero,80ca58 <write+0xa0>
  80c9c8:	20c00324 	muli	r3,r4,12
  80c9cc:	00802074 	movhi	r2,129
  80c9d0:	1091cb04 	addi	r2,r2,18220
  80c9d4:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80c9d8:	20001f26 	beq	r4,zero,80ca58 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80c9dc:	20800217 	ldw	r2,8(r4)
  80c9e0:	108000cc 	andi	r2,r2,3
  80c9e4:	10000b26 	beq	r2,zero,80ca14 <write+0x5c>
  80c9e8:	20800017 	ldw	r2,0(r4)
  80c9ec:	10800617 	ldw	r2,24(r2)
  80c9f0:	10000826 	beq	r2,zero,80ca14 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80c9f4:	103ee83a 	callr	r2
  80c9f8:	1021883a 	mov	r16,r2
  80c9fc:	10002716 	blt	r2,zero,80ca9c <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80ca00:	8005883a 	mov	r2,r16
  80ca04:	dfc00117 	ldw	ra,4(sp)
  80ca08:	dc000017 	ldw	r16,0(sp)
  80ca0c:	dec00204 	addi	sp,sp,8
  80ca10:	f800283a 	ret
  80ca14:	00802074 	movhi	r2,129
  80ca18:	10966e04 	addi	r2,r2,22968
  80ca1c:	10800017 	ldw	r2,0(r2)
  80ca20:	10000a26 	beq	r2,zero,80ca4c <write+0x94>
  80ca24:	103ee83a 	callr	r2
  80ca28:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ca2c:	043fffc4 	movi	r16,-1
  80ca30:	00800344 	movi	r2,13
  80ca34:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80ca38:	8005883a 	mov	r2,r16
  80ca3c:	dfc00117 	ldw	ra,4(sp)
  80ca40:	dc000017 	ldw	r16,0(sp)
  80ca44:	dec00204 	addi	sp,sp,8
  80ca48:	f800283a 	ret
  80ca4c:	00c02074 	movhi	r3,129
  80ca50:	18ddb204 	addi	r3,r3,30408
  80ca54:	003ff506 	br	80ca2c <write+0x74>
  80ca58:	00802074 	movhi	r2,129
  80ca5c:	10966e04 	addi	r2,r2,22968
  80ca60:	10800017 	ldw	r2,0(r2)
  80ca64:	10000a26 	beq	r2,zero,80ca90 <write+0xd8>
  80ca68:	103ee83a 	callr	r2
  80ca6c:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ca70:	00801444 	movi	r2,81
  80ca74:	043fffc4 	movi	r16,-1
  80ca78:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80ca7c:	8005883a 	mov	r2,r16
  80ca80:	dfc00117 	ldw	ra,4(sp)
  80ca84:	dc000017 	ldw	r16,0(sp)
  80ca88:	dec00204 	addi	sp,sp,8
  80ca8c:	f800283a 	ret
  80ca90:	00c02074 	movhi	r3,129
  80ca94:	18ddb204 	addi	r3,r3,30408
  80ca98:	003ff506 	br	80ca70 <write+0xb8>
  80ca9c:	00802074 	movhi	r2,129
  80caa0:	10966e04 	addi	r2,r2,22968
  80caa4:	10800017 	ldw	r2,0(r2)
  80caa8:	10000626 	beq	r2,zero,80cac4 <write+0x10c>
  80caac:	103ee83a 	callr	r2
  80cab0:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  80cab4:	0405c83a 	sub	r2,zero,r16
  80cab8:	043fffc4 	movi	r16,-1
  80cabc:	18800015 	stw	r2,0(r3)
  80cac0:	003fcf06 	br	80ca00 <write+0x48>
  80cac4:	00c02074 	movhi	r3,129
  80cac8:	18ddb204 	addi	r3,r3,30408
  80cacc:	003ff906 	br	80cab4 <write+0xfc>

0080cad0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80cad0:	deffff04 	addi	sp,sp,-4
  80cad4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80cad8:	08133c80 	call	8133c8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80cadc:	00800044 	movi	r2,1
  80cae0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80cae4:	dfc00017 	ldw	ra,0(sp)
  80cae8:	dec00104 	addi	sp,sp,4
  80caec:	f800283a 	ret

0080caf0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80caf0:	defffe04 	addi	sp,sp,-8
  80caf4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80caf8:	04000044 	movi	r16,1
  80cafc:	01c0fa04 	movi	r7,1000
  80cb00:	800d883a 	mov	r6,r16
  80cb04:	01004434 	movhi	r4,272
  80cb08:	21050004 	addi	r4,r4,5120
  80cb0c:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80cb10:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80cb14:	080d2000 	call	80d200 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80cb18:	000d883a 	mov	r6,zero
  80cb1c:	01002074 	movhi	r4,129
  80cb20:	21123504 	addi	r4,r4,18644
  80cb24:	000b883a 	mov	r5,zero
  80cb28:	080cd000 	call	80cd00 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80cb2c:	01002074 	movhi	r4,129
  80cb30:	21122b04 	addi	r4,r4,18604
  80cb34:	01402074 	movhi	r5,129
  80cb38:	29566b04 	addi	r5,r5,22956
  80cb3c:	0812dac0 	call	812dac <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80cb40:	02002074 	movhi	r8,129
  80cb44:	42164304 	addi	r8,r8,22796
  80cb48:	41000a17 	ldw	r4,40(r8)
  80cb4c:	01c00084 	movi	r7,2
  80cb50:	20800017 	ldw	r2,0(r4)
  80cb54:	40800b15 	stw	r2,44(r8)
  80cb58:	20c00117 	ldw	r3,4(r4)
  80cb5c:	40c00c15 	stw	r3,48(r8)
  80cb60:	2080020b 	ldhu	r2,8(r4)
  80cb64:	40800f15 	stw	r2,60(r8)
  80cb68:	20c0028b 	ldhu	r3,10(r4)
  80cb6c:	40c01015 	stw	r3,64(r8)
  80cb70:	20800317 	ldw	r2,12(r4)
  80cb74:	1405d83a 	sra	r2,r2,r16
  80cb78:	1404703a 	and	r2,r2,r16
  80cb7c:	40800d15 	stw	r2,52(r8)
  80cb80:	20c00317 	ldw	r3,12(r4)
  80cb84:	1807d13a 	srai	r3,r3,4
  80cb88:	18c003cc 	andi	r3,r3,15
  80cb8c:	40c00e15 	stw	r3,56(r8)
  80cb90:	21400317 	ldw	r5,12(r4)
  80cb94:	280cd43a 	srli	r6,r5,16
  80cb98:	1c001c26 	beq	r3,r16,80cc0c <alt_sys_init+0x11c>
  80cb9c:	19c01e26 	beq	r3,r7,80cc18 <alt_sys_init+0x128>
  80cba0:	41c01115 	stw	r7,68(r8)
  80cba4:	3809883a 	mov	r4,r7
  80cba8:	280ad63a 	srli	r5,r5,24
  80cbac:	31803fcc 	andi	r6,r6,255
  80cbb0:	00800804 	movi	r2,32
  80cbb4:	118fc83a 	sub	r7,r2,r6
  80cbb8:	00ffffc4 	movi	r3,-1
  80cbbc:	1145c83a 	sub	r2,r2,r5
  80cbc0:	1884d83a 	srl	r2,r3,r2
  80cbc4:	19c6d83a 	srl	r3,r3,r7
  80cbc8:	310d883a 	add	r6,r6,r4
  80cbcc:	01402074 	movhi	r5,129
  80cbd0:	29566b04 	addi	r5,r5,22956
  80cbd4:	01002074 	movhi	r4,129
  80cbd8:	21164304 	addi	r4,r4,22796
  80cbdc:	40801415 	stw	r2,80(r8)
  80cbe0:	40c01215 	stw	r3,72(r8)
  80cbe4:	41801315 	stw	r6,76(r8)
  80cbe8:	0812dac0 	call	812dac <alt_dev_llist_insert>
  80cbec:	01002074 	movhi	r4,129
  80cbf0:	21165804 	addi	r4,r4,22880
  80cbf4:	01402074 	movhi	r5,129
  80cbf8:	29566b04 	addi	r5,r5,22956
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
}
  80cbfc:	dfc00117 	ldw	ra,4(sp)
  80cc00:	dc000017 	ldw	r16,0(sp)
  80cc04:	dec00204 	addi	sp,sp,8
  80cc08:	0812dac1 	jmpi	812dac <alt_dev_llist_insert>
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80cc0c:	40001115 	stw	zero,68(r8)
  80cc10:	41001117 	ldw	r4,68(r8)
  80cc14:	003fe406 	br	80cba8 <alt_sys_init+0xb8>
  80cc18:	8009883a 	mov	r4,r16
  80cc1c:	44001115 	stw	r16,68(r8)
  80cc20:	003fe106 	br	80cba8 <alt_sys_init+0xb8>

0080cc24 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80cc24:	21000017 	ldw	r4,0(r4)
  80cc28:	21000a04 	addi	r4,r4,40
  80cc2c:	080ce881 	jmpi	80ce88 <altera_avalon_jtag_uart_ioctl>

0080cc30 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80cc30:	20800017 	ldw	r2,0(r4)
  80cc34:	21400217 	ldw	r5,8(r4)
  80cc38:	11000a04 	addi	r4,r2,40
  80cc3c:	080cc601 	jmpi	80cc60 <altera_avalon_jtag_uart_close>

0080cc40 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80cc40:	20800017 	ldw	r2,0(r4)
  80cc44:	21c00217 	ldw	r7,8(r4)
  80cc48:	11000a04 	addi	r4,r2,40
  80cc4c:	080d07c1 	jmpi	80d07c <altera_avalon_jtag_uart_write>

0080cc50 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80cc50:	20800017 	ldw	r2,0(r4)
  80cc54:	21c00217 	ldw	r7,8(r4)
  80cc58:	11000a04 	addi	r4,r2,40
  80cc5c:	080cf101 	jmpi	80cf10 <altera_avalon_jtag_uart_read>

0080cc60 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80cc60:	2950000c 	andi	r5,r5,16384
  80cc64:	21800c17 	ldw	r6,48(r4)
  80cc68:	28000426 	beq	r5,zero,80cc7c <altera_avalon_jtag_uart_close+0x1c>
  80cc6c:	00000706 	br	80cc8c <altera_avalon_jtag_uart_close+0x2c>
  80cc70:	20c00917 	ldw	r3,36(r4)
  80cc74:	20800117 	ldw	r2,4(r4)
  80cc78:	1880022e 	bgeu	r3,r2,80cc84 <altera_avalon_jtag_uart_close+0x24>
  80cc7c:	20800d17 	ldw	r2,52(r4)
  80cc80:	11bffb1e 	bne	r2,r6,80cc70 <altera_avalon_jtag_uart_close+0x10>
  80cc84:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  80cc88:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80cc8c:	20800d17 	ldw	r2,52(r4)
  80cc90:	11bffc26 	beq	r2,r6,80cc84 <altera_avalon_jtag_uart_close+0x24>
  80cc94:	20c00117 	ldw	r3,4(r4)
  80cc98:	20800917 	ldw	r2,36(r4)
  80cc9c:	10fff92e 	bgeu	r2,r3,80cc84 <altera_avalon_jtag_uart_close+0x24>
  80cca0:	00bffd44 	movi	r2,-11
  80cca4:	f800283a 	ret

0080cca8 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80cca8:	20c00017 	ldw	r3,0(r4)
  80ccac:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ccb0:	1081000c 	andi	r2,r2,1024
  80ccb4:	10000a1e 	bne	r2,zero,80cce0 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ccb8:	20c00917 	ldw	r3,36(r4)
  80ccbc:	00a00034 	movhi	r2,32768
  80ccc0:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  80ccc4:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ccc8:	10c00136 	bltu	r2,r3,80ccd0 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  80cccc:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ccd0:	00c02074 	movhi	r3,129
  80ccd4:	18ddc704 	addi	r3,r3,30492
  80ccd8:	18800017 	ldw	r2,0(r3)
  80ccdc:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80cce0:	20800817 	ldw	r2,32(r4)
  80cce4:	10810014 	ori	r2,r2,1024
  80cce8:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ccec:	00c02074 	movhi	r3,129
  80ccf0:	18ddc704 	addi	r3,r3,30492
  80ccf4:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  80ccf8:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ccfc:	f800283a 	ret

0080cd00 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cd00:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cd04:	defffd04 	addi	sp,sp,-12
  80cd08:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cd0c:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cd10:	2021883a 	mov	r16,r4
  80cd14:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cd18:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cd1c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80cd20:	2809883a 	mov	r4,r5
  80cd24:	800f883a 	mov	r7,r16
  80cd28:	300b883a 	mov	r5,r6
  80cd2c:	01802074 	movhi	r6,129
  80cd30:	31b36004 	addi	r6,r6,-12928
  80cd34:	d8000015 	stw	zero,0(sp)
  80cd38:	080c4ec0 	call	80c4ec <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cd3c:	00c02074 	movhi	r3,129
  80cd40:	18ddc704 	addi	r3,r3,30492
  80cd44:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80cd48:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cd4c:	81000204 	addi	r4,r16,8
  80cd50:	01802074 	movhi	r6,129
  80cd54:	31b32a04 	addi	r6,r6,-13144
  80cd58:	800f883a 	mov	r7,r16
  80cd5c:	0812d000 	call	812d00 <alt_alarm_start>
  80cd60:	1000030e 	bge	r2,zero,80cd70 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80cd64:	00a00034 	movhi	r2,32768
  80cd68:	10bfffc4 	addi	r2,r2,-1
  80cd6c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80cd70:	dfc00217 	ldw	ra,8(sp)
  80cd74:	dc000117 	ldw	r16,4(sp)
  80cd78:	dec00304 	addi	sp,sp,12
  80cd7c:	f800283a 	ret

0080cd80 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80cd80:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80cd84:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80cd88:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cd8c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80cd90:	4880c00c 	andi	r2,r9,768
  80cd94:	10003426 	beq	r2,zero,80ce68 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80cd98:	4880400c 	andi	r2,r9,256
  80cd9c:	10001626 	beq	r2,zero,80cdf8 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cda0:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  80cda4:	2a000b17 	ldw	r8,44(r5)
  80cda8:	10800044 	addi	r2,r2,1
  80cdac:	1081ffcc 	andi	r2,r2,2047
  80cdb0:	12000c1e 	bne	r2,r8,80cde4 <altera_avalon_jtag_uart_irq+0x64>
  80cdb4:	00002d06 	br	80ce6c <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cdb8:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cdbc:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cdc0:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cdc4:	18c00044 	addi	r3,r3,1
  80cdc8:	18c1ffcc 	andi	r3,r3,2047
  80cdcc:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cdd0:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cdd4:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  80cdd8:	21000044 	addi	r4,r4,1
  80cddc:	2101ffcc 	andi	r4,r4,2047
  80cde0:	22000326 	beq	r4,r8,80cdf0 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80cde4:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80cde8:	30a0000c 	andi	r2,r6,32768
  80cdec:	103ff21e 	bne	r2,zero,80cdb8 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80cdf0:	30bfffec 	andhi	r2,r6,65535
  80cdf4:	10001d1e 	bne	r2,zero,80ce6c <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80cdf8:	4880800c 	andi	r2,r9,512
  80cdfc:	103fe326 	beq	r2,zero,80cd8c <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ce00:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ce04:	20000b1e 	bne	r4,zero,80ce34 <altera_avalon_jtag_uart_irq+0xb4>
  80ce08:	003fe006 	br	80cd8c <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ce0c:	28800d17 	ldw	r2,52(r5)
  80ce10:	1145883a 	add	r2,r2,r5
  80ce14:	10c20e07 	ldb	r3,2104(r2)
  80ce18:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce1c:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ce20:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce24:	10800044 	addi	r2,r2,1
  80ce28:	1081ffcc 	andi	r2,r2,2047
  80ce2c:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ce30:	203fd626 	beq	r4,zero,80cd8c <altera_avalon_jtag_uart_irq+0xc>
  80ce34:	28c00d17 	ldw	r3,52(r5)
  80ce38:	28800c17 	ldw	r2,48(r5)
  80ce3c:	18bff31e 	bne	r3,r2,80ce0c <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ce40:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ce44:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ce48:	00ffff44 	movi	r3,-3
  80ce4c:	10c4703a 	and	r2,r2,r3
  80ce50:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ce54:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ce58:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ce5c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ce60:	4880c00c 	andi	r2,r9,768
  80ce64:	103fcc1e 	bne	r2,zero,80cd98 <altera_avalon_jtag_uart_irq+0x18>
  80ce68:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ce6c:	28800817 	ldw	r2,32(r5)
  80ce70:	00ffff84 	movi	r3,-2
  80ce74:	10c4703a 	and	r2,r2,r3
  80ce78:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ce7c:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ce80:	50c00037 	ldwio	r3,0(r10)
  80ce84:	003fdc06 	br	80cdf8 <altera_avalon_jtag_uart_irq+0x78>

0080ce88 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  80ce88:	009a8044 	movi	r2,27137
  80ce8c:	28800f26 	beq	r5,r2,80cecc <altera_avalon_jtag_uart_ioctl+0x44>
  80ce90:	009a8084 	movi	r2,27138
  80ce94:	28800326 	beq	r5,r2,80cea4 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80ce98:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  80ce9c:	1805883a 	mov	r2,r3
  80cea0:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80cea4:	21400117 	ldw	r5,4(r4)
  80cea8:	00a00034 	movhi	r2,32768
  80ceac:	10bfffc4 	addi	r2,r2,-1
  80ceb0:	28bff926 	beq	r5,r2,80ce98 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80ceb4:	20800917 	ldw	r2,36(r4)
  80ceb8:	0007883a 	mov	r3,zero
  80cebc:	1145803a 	cmpltu	r2,r2,r5
  80cec0:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  80cec4:	1805883a 	mov	r2,r3
  80cec8:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80cecc:	20c00117 	ldw	r3,4(r4)
  80ced0:	00a00034 	movhi	r2,32768
  80ced4:	10bfffc4 	addi	r2,r2,-1
  80ced8:	18bfef26 	beq	r3,r2,80ce98 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cedc:	31800017 	ldw	r6,0(r6)
  80cee0:	10bfff44 	addi	r2,r2,-3
  80cee4:	30ffff84 	addi	r3,r6,-2
  80cee8:	10c00436 	bltu	r2,r3,80cefc <altera_avalon_jtag_uart_ioctl+0x74>
  80ceec:	0007883a 	mov	r3,zero
  80cef0:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  80cef4:	1805883a 	mov	r2,r3
  80cef8:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cefc:	01a00034 	movhi	r6,32768
  80cf00:	31bfff84 	addi	r6,r6,-2
  80cf04:	0007883a 	mov	r3,zero
  80cf08:	21800115 	stw	r6,4(r4)
  80cf0c:	003ff906 	br	80cef4 <altera_avalon_jtag_uart_ioctl+0x6c>

0080cf10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80cf10:	defff404 	addi	sp,sp,-48
  80cf14:	dd400715 	stw	r21,28(sp)
  80cf18:	dcc00515 	stw	r19,20(sp)
  80cf1c:	dfc00b15 	stw	ra,44(sp)
  80cf20:	df000a15 	stw	fp,40(sp)
  80cf24:	ddc00915 	stw	r23,36(sp)
  80cf28:	dd800815 	stw	r22,32(sp)
  80cf2c:	dd000615 	stw	r20,24(sp)
  80cf30:	dc800415 	stw	r18,16(sp)
  80cf34:	dc400315 	stw	r17,12(sp)
  80cf38:	dc000215 	stw	r16,8(sp)
  80cf3c:	302b883a 	mov	r21,r6
  80cf40:	2027883a 	mov	r19,r4
  80cf44:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cf48:	0180480e 	bge	zero,r6,80d06c <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80cf4c:	39d0000c 	andi	r7,r7,16384
  80cf50:	d9c00015 	stw	r7,0(sp)
  80cf54:	dd000117 	ldw	r20,4(sp)
  80cf58:	07020004 	movi	fp,2048
  80cf5c:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  80cf60:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80cf64:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80cf68:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  80cf6c:	b4400136 	bltu	r22,r17,80cf74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80cf70:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80cf74:	a009883a 	mov	r4,r20
  80cf78:	bc4b883a 	add	r5,r23,r17
  80cf7c:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  80cf80:	80000826 	beq	r16,zero,80cfa4 <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  80cf84:	ac002036 	bltu	r21,r16,80d008 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80cf88:	0803d4c0 	call	803d4c <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cf8c:	8445883a 	add	r2,r16,r17
  80cf90:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80cf94:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cf98:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80cf9c:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  80cfa0:	057fef16 	blt	zero,r21,80cf60 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  80cfa4:	d8800117 	ldw	r2,4(sp)
  80cfa8:	a080231e 	bne	r20,r2,80d038 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80cfac:	d8c00017 	ldw	r3,0(sp)
  80cfb0:	1800301e 	bne	r3,zero,80d074 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80cfb4:	98800a17 	ldw	r2,40(r19)
  80cfb8:	b080031e 	bne	r22,r2,80cfc8 <altera_avalon_jtag_uart_read+0xb8>
  80cfbc:	98c00917 	ldw	r3,36(r19)
  80cfc0:	98800117 	ldw	r2,4(r19)
  80cfc4:	18bffb36 	bltu	r3,r2,80cfb4 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80cfc8:	98800a17 	ldw	r2,40(r19)
  80cfcc:	b0800126 	beq	r22,r2,80cfd4 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cfd0:	057fe016 	blt	zero,r21,80cf54 <altera_avalon_jtag_uart_read+0x44>
  80cfd4:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  80cfd8:	dfc00b17 	ldw	ra,44(sp)
  80cfdc:	df000a17 	ldw	fp,40(sp)
  80cfe0:	ddc00917 	ldw	r23,36(sp)
  80cfe4:	dd800817 	ldw	r22,32(sp)
  80cfe8:	dd400717 	ldw	r21,28(sp)
  80cfec:	dd000617 	ldw	r20,24(sp)
  80cff0:	dcc00517 	ldw	r19,20(sp)
  80cff4:	dc800417 	ldw	r18,16(sp)
  80cff8:	dc400317 	ldw	r17,12(sp)
  80cffc:	dc000217 	ldw	r16,8(sp)
  80d000:	dec00c04 	addi	sp,sp,48
  80d004:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80d008:	99400e04 	addi	r5,r19,56
  80d00c:	a009883a 	mov	r4,r20
  80d010:	a80d883a 	mov	r6,r21
  80d014:	894b883a 	add	r5,r17,r5
  80d018:	0803d4c0 	call	803d4c <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80d01c:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d020:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80d024:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d028:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80d02c:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d030:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80d034:	a0bfdd26 	beq	r20,r2,80cfac <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d038:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d03c:	00bfff84 	movi	r2,-2
  80d040:	2084703a 	and	r2,r4,r2
  80d044:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d048:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d04c:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d050:	18c00054 	ori	r3,r3,1
  80d054:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d058:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d05c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  80d060:	d8c00117 	ldw	r3,4(sp)
  80d064:	a0c5c83a 	sub	r2,r20,r3
  80d068:	003fdb06 	br	80cfd8 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  80d06c:	3890000c 	andi	r2,r7,16384
  80d070:	103fd826 	beq	r2,zero,80cfd4 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d074:	00bffd44 	movi	r2,-11
  80d078:	003fd706 	br	80cfd8 <altera_avalon_jtag_uart_read+0xc8>

0080d07c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d07c:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d080:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d084:	ddc00715 	stw	r23,28(sp)
  80d088:	dd800615 	stw	r22,24(sp)
  80d08c:	dcc00315 	stw	r19,12(sp)
  80d090:	dc000015 	stw	r16,0(sp)
  80d094:	dfc00815 	stw	ra,32(sp)
  80d098:	dd400515 	stw	r21,20(sp)
  80d09c:	dd000415 	stw	r20,16(sp)
  80d0a0:	dc800215 	stw	r18,8(sp)
  80d0a4:	dc400115 	stw	r17,4(sp)
  80d0a8:	3027883a 	mov	r19,r6
  80d0ac:	2021883a 	mov	r16,r4
  80d0b0:	282d883a 	mov	r22,r5
  80d0b4:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d0b8:	40004926 	beq	r8,zero,80d1e0 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80d0bc:	3d50000c 	andi	r21,r7,16384
  80d0c0:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d0c4:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  80d0c8:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  80d0cc:	91403d2e 	bgeu	r18,r5,80d1c4 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  80d0d0:	2c85c83a 	sub	r2,r5,r18
  80d0d4:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  80d0d8:	30002626 	beq	r6,zero,80d174 <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  80d0dc:	3023883a 	mov	r17,r6
  80d0e0:	9980012e 	bgeu	r19,r6,80d0e8 <altera_avalon_jtag_uart_write+0x6c>
  80d0e4:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  80d0e8:	81020e04 	addi	r4,r16,2104
  80d0ec:	a00b883a 	mov	r5,r20
  80d0f0:	2489883a 	add	r4,r4,r18
  80d0f4:	880d883a 	mov	r6,r17
  80d0f8:	0803d4c0 	call	803d4c <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d0fc:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  80d100:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d104:	18c1ffcc 	andi	r3,r3,2047
  80d108:	9a000048 	cmpgei	r8,r19,1
  80d10c:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  80d110:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d114:	403feb1e 	bne	r8,zero,80d0c4 <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d118:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d11c:	00bfff84 	movi	r2,-2
  80d120:	2084703a 	and	r2,r4,r2
  80d124:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d128:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d12c:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d130:	18c00094 	ori	r3,r3,2
  80d134:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d138:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d13c:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80d140:	b5002926 	beq	r22,r20,80d1e8 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  80d144:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  80d148:	dfc00817 	ldw	ra,32(sp)
  80d14c:	ddc00717 	ldw	r23,28(sp)
  80d150:	dd800617 	ldw	r22,24(sp)
  80d154:	dd400517 	ldw	r21,20(sp)
  80d158:	dd000417 	ldw	r20,16(sp)
  80d15c:	dcc00317 	ldw	r19,12(sp)
  80d160:	dc800217 	ldw	r18,8(sp)
  80d164:	dc400117 	ldw	r17,4(sp)
  80d168:	dc000017 	ldw	r16,0(sp)
  80d16c:	dec00904 	addi	sp,sp,36
  80d170:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d174:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d178:	00bfff84 	movi	r2,-2
  80d17c:	2084703a 	and	r2,r4,r2
  80d180:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d184:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d188:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d18c:	18c00094 	ori	r3,r3,2
  80d190:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d194:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d198:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80d19c:	a83fe81e 	bne	r21,zero,80d140 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d1a0:	80800d17 	ldw	r2,52(r16)
  80d1a4:	1140031e 	bne	r2,r5,80d1b4 <altera_avalon_jtag_uart_write+0x138>
  80d1a8:	80c00917 	ldw	r3,36(r16)
  80d1ac:	80800117 	ldw	r2,4(r16)
  80d1b0:	18bffb36 	bltu	r3,r2,80d1a0 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80d1b4:	80800d17 	ldw	r2,52(r16)
  80d1b8:	117fe126 	beq	r2,r5,80d140 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d1bc:	403fc11e 	bne	r8,zero,80d0c4 <altera_avalon_jtag_uart_write+0x48>
  80d1c0:	003fd506 	br	80d118 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  80d1c4:	28000326 	beq	r5,zero,80d1d4 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d1c8:	00820004 	movi	r2,2048
  80d1cc:	148dc83a 	sub	r6,r2,r18
  80d1d0:	003fc106 	br	80d0d8 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d1d4:	0081ffc4 	movi	r2,2047
  80d1d8:	148dc83a 	sub	r6,r2,r18
  80d1dc:	003fbe06 	br	80d0d8 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d1e0:	2829883a 	mov	r20,r5
  80d1e4:	003fcc06 	br	80d118 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  80d1e8:	b890000c 	andi	r2,r23,16384
  80d1ec:	1000021e 	bne	r2,zero,80d1f8 <altera_avalon_jtag_uart_write+0x17c>
  80d1f0:	00bffec4 	movi	r2,-5
  80d1f4:	003fd406 	br	80d148 <altera_avalon_jtag_uart_write+0xcc>
  80d1f8:	00bffd44 	movi	r2,-11
  80d1fc:	003fd206 	br	80d148 <altera_avalon_jtag_uart_write+0xcc>

0080d200 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80d200:	02002074 	movhi	r8,129
  80d204:	421dc704 	addi	r8,r8,30492
  80d208:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80d20c:	defffe04 	addi	sp,sp,-8
  80d210:	3807883a 	mov	r3,r7
  80d214:	dfc00115 	stw	ra,4(sp)
  80d218:	200f883a 	mov	r7,r4
  80d21c:	1000011e 	bne	r2,zero,80d224 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  80d220:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80d224:	008001c4 	movi	r2,7
  80d228:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80d22c:	2809883a 	mov	r4,r5
  80d230:	300b883a 	mov	r5,r6
  80d234:	01802074 	movhi	r6,129
  80d238:	31b49404 	addi	r6,r6,-11696
  80d23c:	d8000015 	stw	zero,0(sp)
  80d240:	080c4ec0 	call	80c4ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80d244:	dfc00117 	ldw	ra,4(sp)
  80d248:	dec00204 	addi	sp,sp,8
  80d24c:	f800283a 	ret

0080d250 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d250:	defffe04 	addi	sp,sp,-8
  80d254:	dfc00115 	stw	ra,4(sp)
  80d258:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80d25c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80d260:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d264:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d268:	00bfff84 	movi	r2,-2
  80d26c:	8084703a 	and	r2,r16,r2
  80d270:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  80d274:	08132e00 	call	8132e0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d278:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  80d27c:	dfc00117 	ldw	ra,4(sp)
  80d280:	dc000017 	ldw	r16,0(sp)
  80d284:	dec00204 	addi	sp,sp,8
  80d288:	f800283a 	ret

0080d28c <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80d28c:	da400117 	ldw	r9,4(sp)
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d290:	29c5383a 	mul	r2,r5,r7
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80d294:	da000017 	ldw	r8,0(sp)
	if (mode == 0)
  80d298:	48000e26 	beq	r9,zero,80d2d4 <helper_plot_pixel+0x48>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  80d29c:	00800044 	movi	r2,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80d2a0:	29c7383a 	mul	r3,r5,r7
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  80d2a4:	48800626 	beq	r9,r2,80d2c0 <helper_plot_pixel+0x34>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80d2a8:	1985883a 	add	r2,r3,r6
  80d2ac:	1085883a 	add	r2,r2,r2
  80d2b0:	1085883a 	add	r2,r2,r2
  80d2b4:	1105883a 	add	r2,r2,r4
  80d2b8:	12000035 	stwio	r8,0(r2)
  80d2bc:	f800283a 	ret
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80d2c0:	30c5883a 	add	r2,r6,r3
  80d2c4:	1085883a 	add	r2,r2,r2
  80d2c8:	1105883a 	add	r2,r2,r4
  80d2cc:	1200002d 	sthio	r8,0(r2)
  80d2d0:	f800283a 	ret
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d2d4:	3085883a 	add	r2,r6,r2
  80d2d8:	1105883a 	add	r2,r2,r4
  80d2dc:	12000025 	stbio	r8,0(r2)
  80d2e0:	f800283a 	ret

0080d2e4 <alt_up_pixel_buffer_dma_draw_vline>:
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  80d2e4:	3811883a 	mov	r8,r7


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80d2e8:	dac00017 	ldw	r11,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d2ec:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d2f0:	20801017 	ldw	r2,64(r4)
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
  80d2f4:	3980022e 	bgeu	r7,r6,80d300 <alt_up_pixel_buffer_dma_draw_vline+0x1c>
  80d2f8:	3011883a 	mov	r8,r6
  80d2fc:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80d300:	2a401a2e 	bgeu	r5,r9,80d36c <alt_up_pixel_buffer_dma_draw_vline+0x88>
  80d304:	3080192e 	bgeu	r6,r2,80d36c <alt_up_pixel_buffer_dma_draw_vline+0x88>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d308:	40800136 	bltu	r8,r2,80d310 <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
  80d30c:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d310:	d8c00117 	ldw	r3,4(sp)
  80d314:	00800044 	movi	r2,1
  80d318:	18803826 	beq	r3,r2,80d3fc <alt_up_pixel_buffer_dma_draw_vline+0x118>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d31c:	22800b17 	ldw	r10,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d320:	20800d17 	ldw	r2,52(r4)
  80d324:	1000121e 	bne	r2,zero,80d370 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d328:	21c01317 	ldw	r7,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d32c:	21000e17 	ldw	r4,56(r4)
  80d330:	02400044 	movi	r9,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d334:	31c4983a 	sll	r2,r6,r7
  80d338:	5087883a 	add	r3,r10,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d33c:	22401e26 	beq	r4,r9,80d3b8 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d340:	00800084 	movi	r2,2
  80d344:	20803a26 	beq	r4,r2,80d430 <alt_up_pixel_buffer_dma_draw_vline+0x14c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d348:	41804236 	bltu	r8,r6,80d454 <alt_up_pixel_buffer_dma_draw_vline+0x170>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d34c:	2945883a 	add	r2,r5,r5
  80d350:	49c8983a 	sll	r4,r9,r7
  80d354:	1085883a 	add	r2,r2,r2
  80d358:	10c5883a 	add	r2,r2,r3
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80d35c:	12c00035 	stwio	r11,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d360:	31800044 	addi	r6,r6,1
  80d364:	1105883a 	add	r2,r2,r4
  80d368:	41bffc2e 	bgeu	r8,r6,80d35c <alt_up_pixel_buffer_dma_draw_vline+0x78>
  80d36c:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d370:	21000e17 	ldw	r4,56(r4)
  80d374:	00800044 	movi	r2,1
  80d378:	20801726 	beq	r4,r2,80d3d8 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d37c:	00800084 	movi	r2,2
  80d380:	20802026 	beq	r4,r2,80d404 <alt_up_pixel_buffer_dma_draw_vline+0x120>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d384:	41bff936 	bltu	r8,r6,80d36c <alt_up_pixel_buffer_dma_draw_vline+0x88>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d388:	4a45883a 	add	r2,r9,r9
  80d38c:	1089883a 	add	r4,r2,r2
  80d390:	3107383a 	mul	r3,r6,r4
  80d394:	2945883a 	add	r2,r5,r5
  80d398:	1085883a 	add	r2,r2,r2
  80d39c:	50c7883a 	add	r3,r10,r3
  80d3a0:	10c5883a 	add	r2,r2,r3
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80d3a4:	12c00035 	stwio	r11,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d3a8:	31800044 	addi	r6,r6,1
  80d3ac:	1105883a 	add	r2,r2,r4
  80d3b0:	41bffc2e 	bgeu	r8,r6,80d3a4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
  80d3b4:	f800283a 	ret
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d3b8:	41bfec36 	bltu	r8,r6,80d36c <alt_up_pixel_buffer_dma_draw_vline+0x88>
  80d3bc:	49c8983a 	sll	r4,r9,r7
  80d3c0:	1945883a 	add	r2,r3,r5
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80d3c4:	12c00025 	stbio	r11,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d3c8:	31800044 	addi	r6,r6,1
  80d3cc:	1105883a 	add	r2,r2,r4
  80d3d0:	41bffc2e 	bgeu	r8,r6,80d3c4 <alt_up_pixel_buffer_dma_draw_vline+0xe0>
  80d3d4:	f800283a 	ret
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d3d8:	41bfe436 	bltu	r8,r6,80d36c <alt_up_pixel_buffer_dma_draw_vline+0x88>
  80d3dc:	3245383a 	mul	r2,r6,r9
  80d3e0:	5085883a 	add	r2,r10,r2
  80d3e4:	2885883a 	add	r2,r5,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80d3e8:	12c00025 	stbio	r11,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d3ec:	31800044 	addi	r6,r6,1
  80d3f0:	1245883a 	add	r2,r2,r9
  80d3f4:	41bffc2e 	bgeu	r8,r6,80d3e8 <alt_up_pixel_buffer_dma_draw_vline+0x104>
  80d3f8:	f800283a 	ret
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d3fc:	22800c17 	ldw	r10,48(r4)
  80d400:	003fc706 	br	80d320 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d404:	41bfd936 	bltu	r8,r6,80d36c <alt_up_pixel_buffer_dma_draw_vline+0x88>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  80d408:	4a49883a 	add	r4,r9,r9
  80d40c:	3105383a 	mul	r2,r6,r4
  80d410:	2947883a 	add	r3,r5,r5
  80d414:	5085883a 	add	r2,r10,r2
  80d418:	1885883a 	add	r2,r3,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80d41c:	12c0002d 	sthio	r11,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d420:	31800044 	addi	r6,r6,1
  80d424:	1105883a 	add	r2,r2,r4
  80d428:	41bffc2e 	bgeu	r8,r6,80d41c <alt_up_pixel_buffer_dma_draw_vline+0x138>
  80d42c:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d430:	41800936 	bltu	r8,r6,80d458 <alt_up_pixel_buffer_dma_draw_vline+0x174>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d434:	49c8983a 	sll	r4,r9,r7
  80d438:	2945883a 	add	r2,r5,r5
  80d43c:	10c5883a 	add	r2,r2,r3
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80d440:	12c0002d 	sthio	r11,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d444:	31800044 	addi	r6,r6,1
  80d448:	1105883a 	add	r2,r2,r4
  80d44c:	41bffc2e 	bgeu	r8,r6,80d440 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
  80d450:	f800283a 	ret
  80d454:	f800283a 	ret
  80d458:	f800283a 	ret

0080d45c <alt_up_pixel_buffer_dma_draw_hline>:
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  80d45c:	3013883a 	mov	r9,r6
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80d460:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d464:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d468:	20801017 	ldw	r2,64(r4)
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  80d46c:	3140022e 	bgeu	r6,r5,80d478 <alt_up_pixel_buffer_dma_draw_hline+0x1c>
  80d470:	2813883a 	mov	r9,r5
  80d474:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80d478:	2a00192e 	bgeu	r5,r8,80d4e0 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d47c:	3880182e 	bgeu	r7,r2,80d4e0 <alt_up_pixel_buffer_dma_draw_hline+0x84>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d480:	4a000136 	bltu	r9,r8,80d488 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
  80d484:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d488:	d8c00117 	ldw	r3,4(sp)
  80d48c:	00800044 	movi	r2,1
  80d490:	18803726 	beq	r3,r2,80d570 <alt_up_pixel_buffer_dma_draw_hline+0x114>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d494:	21800b17 	ldw	r6,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d498:	20800d17 	ldw	r2,52(r4)
  80d49c:	1000111e 	bne	r2,zero,80d4e4 <alt_up_pixel_buffer_dma_draw_hline+0x88>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  80d4a0:	20801317 	ldw	r2,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d4a4:	21000e17 	ldw	r4,56(r4)
  80d4a8:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  80d4ac:	3884983a 	sll	r2,r7,r2
  80d4b0:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d4b4:	20c01d26 	beq	r4,r3,80d52c <alt_up_pixel_buffer_dma_draw_hline+0xd0>
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d4b8:	00800084 	movi	r2,2
  80d4bc:	20803826 	beq	r4,r2,80d5a0 <alt_up_pixel_buffer_dma_draw_hline+0x144>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d4c0:	49403e36 	bltu	r9,r5,80d5bc <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80d4c4:	2945883a 	add	r2,r5,r5
  80d4c8:	1085883a 	add	r2,r2,r2
  80d4cc:	11c5883a 	add	r2,r2,r7
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80d4d0:	12800035 	stwio	r10,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d4d4:	29400044 	addi	r5,r5,1
  80d4d8:	10800104 	addi	r2,r2,4
  80d4dc:	497ffc2e 	bgeu	r9,r5,80d4d0 <alt_up_pixel_buffer_dma_draw_hline+0x74>
  80d4e0:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d4e4:	21000e17 	ldw	r4,56(r4)
  80d4e8:	00800044 	movi	r2,1
  80d4ec:	20801626 	beq	r4,r2,80d548 <alt_up_pixel_buffer_dma_draw_hline+0xec>
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d4f0:	00800084 	movi	r2,2
  80d4f4:	20802026 	beq	r4,r2,80d578 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d4f8:	497ff936 	bltu	r9,r5,80d4e0 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d4fc:	4205883a 	add	r2,r8,r8
  80d500:	1085883a 	add	r2,r2,r2
  80d504:	3885383a 	mul	r2,r7,r2
  80d508:	2947883a 	add	r3,r5,r5
  80d50c:	18c7883a 	add	r3,r3,r3
  80d510:	3085883a 	add	r2,r6,r2
  80d514:	1885883a 	add	r2,r3,r2
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80d518:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d51c:	29400044 	addi	r5,r5,1
  80d520:	10800104 	addi	r2,r2,4
  80d524:	497ffc2e 	bgeu	r9,r5,80d518 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
  80d528:	f800283a 	ret
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d52c:	497fec36 	bltu	r9,r5,80d4e0 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d530:	29c5883a 	add	r2,r5,r7
			{
				IOWR_8DIRECT(addr, x, local_color);
  80d534:	12800025 	stbio	r10,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d538:	29400044 	addi	r5,r5,1
  80d53c:	10800044 	addi	r2,r2,1
  80d540:	497ffc2e 	bgeu	r9,r5,80d534 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
  80d544:	f800283a 	ret
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d548:	497fe536 	bltu	r9,r5,80d4e0 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d54c:	41c5383a 	mul	r2,r8,r7
  80d550:	2807883a 	mov	r3,r5
  80d554:	3085883a 	add	r2,r6,r2
  80d558:	2885883a 	add	r2,r5,r2
			{
				IOWR_8DIRECT(addr, x, local_color);
  80d55c:	12800025 	stbio	r10,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d560:	18c00044 	addi	r3,r3,1
  80d564:	10800044 	addi	r2,r2,1
  80d568:	48fffc2e 	bgeu	r9,r3,80d55c <alt_up_pixel_buffer_dma_draw_hline+0x100>
  80d56c:	f800283a 	ret
		r_x = limit_x - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d570:	21800c17 	ldw	r6,48(r4)
  80d574:	003fc806 	br	80d498 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d578:	497fd936 	bltu	r9,r5,80d4e0 <alt_up_pixel_buffer_dma_draw_hline+0x84>
  80d57c:	4205883a 	add	r2,r8,r8
  80d580:	3885383a 	mul	r2,r7,r2
  80d584:	308f883a 	add	r7,r6,r2
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80d588:	2945883a 	add	r2,r5,r5
  80d58c:	11c5883a 	add	r2,r2,r7
  80d590:	1280002d 	sthio	r10,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d594:	29400044 	addi	r5,r5,1
  80d598:	497ffb2e 	bgeu	r9,r5,80d588 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
  80d59c:	f800283a 	ret
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d5a0:	49400736 	bltu	r9,r5,80d5c0 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80d5a4:	2945883a 	add	r2,r5,r5
  80d5a8:	11c5883a 	add	r2,r2,r7
  80d5ac:	1280002d 	sthio	r10,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d5b0:	29400044 	addi	r5,r5,1
  80d5b4:	497ffb2e 	bgeu	r9,r5,80d5a4 <alt_up_pixel_buffer_dma_draw_hline+0x148>
  80d5b8:	f800283a 	ret
  80d5bc:	f800283a 	ret
  80d5c0:	f800283a 	ret

0080d5c4 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d5c4:	defff604 	addi	sp,sp,-40
  80d5c8:	dd400715 	stw	r21,28(sp)
  80d5cc:	dd000615 	stw	r20,24(sp)
  80d5d0:	dd400c17 	ldw	r21,48(sp)
  80d5d4:	dd000b17 	ldw	r20,44(sp)
  80d5d8:	dc000215 	stw	r16,8(sp)
  80d5dc:	dc000a17 	ldw	r16,40(sp)
  80d5e0:	ddc00815 	stw	r23,32(sp)
  80d5e4:	302f883a 	mov	r23,r6
  80d5e8:	dcc00515 	stw	r19,20(sp)
  80d5ec:	dc800415 	stw	r18,16(sp)
  80d5f0:	3827883a 	mov	r19,r7
  80d5f4:	2825883a 	mov	r18,r5
  80d5f8:	dc400315 	stw	r17,12(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d5fc:	380d883a 	mov	r6,r7
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d600:	2023883a 	mov	r17,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d604:	b80f883a 	mov	r7,r23
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d608:	dfc00915 	stw	ra,36(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d60c:	dd000015 	stw	r20,0(sp)
  80d610:	dd400115 	stw	r21,4(sp)
  80d614:	080d45c0 	call	80d45c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80d618:	8809883a 	mov	r4,r17
  80d61c:	900b883a 	mov	r5,r18
  80d620:	980d883a 	mov	r6,r19
  80d624:	800f883a 	mov	r7,r16
  80d628:	dd000015 	stw	r20,0(sp)
  80d62c:	dd400115 	stw	r21,4(sp)
  80d630:	080d45c0 	call	80d45c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80d634:	900b883a 	mov	r5,r18
  80d638:	8809883a 	mov	r4,r17
  80d63c:	b80d883a 	mov	r6,r23
  80d640:	800f883a 	mov	r7,r16
  80d644:	dd000015 	stw	r20,0(sp)
  80d648:	dd400115 	stw	r21,4(sp)
  80d64c:	080d2e40 	call	80d2e4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80d650:	8809883a 	mov	r4,r17
  80d654:	980b883a 	mov	r5,r19
  80d658:	b80d883a 	mov	r6,r23
  80d65c:	800f883a 	mov	r7,r16
  80d660:	dd000a15 	stw	r20,40(sp)
  80d664:	dd400b15 	stw	r21,44(sp)
}
  80d668:	dfc00917 	ldw	ra,36(sp)
  80d66c:	ddc00817 	ldw	r23,32(sp)
  80d670:	dd400717 	ldw	r21,28(sp)
  80d674:	dd000617 	ldw	r20,24(sp)
  80d678:	dcc00517 	ldw	r19,20(sp)
  80d67c:	dc800417 	ldw	r18,16(sp)
  80d680:	dc400317 	ldw	r17,12(sp)
  80d684:	dc000217 	ldw	r16,8(sp)
  80d688:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80d68c:	080d2e41 	jmpi	80d2e4 <alt_up_pixel_buffer_dma_draw_vline>

0080d690 <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d690:	d8c00017 	ldw	r3,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d694:	2811883a 	mov	r8,r5
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d698:	da400117 	ldw	r9,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  80d69c:	380b883a 	mov	r5,r7

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d6a0:	22c00f17 	ldw	r11,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d6a4:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  80d6a8:	1815883a 	mov	r10,r3
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  80d6ac:	3a00022e 	bgeu	r7,r8,80d6b8 <alt_up_pixel_buffer_dma_draw_box+0x28>
  80d6b0:	400b883a 	mov	r5,r8
  80d6b4:	3811883a 	mov	r8,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
  80d6b8:	5180022e 	bgeu	r10,r6,80d6c4 <alt_up_pixel_buffer_dma_draw_box+0x34>
  80d6bc:	3015883a 	mov	r10,r6
  80d6c0:	180d883a 	mov	r6,r3
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80d6c4:	42c0232e 	bgeu	r8,r11,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
  80d6c8:	3080222e 	bgeu	r6,r2,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d6cc:	2ac00136 	bltu	r5,r11,80d6d4 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
  80d6d0:	597fffc4 	addi	r5,r11,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d6d4:	50800136 	bltu	r10,r2,80d6dc <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
  80d6d8:	12bfffc4 	addi	r10,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d6dc:	d8c00217 	ldw	r3,8(sp)
  80d6e0:	00800044 	movi	r2,1
  80d6e4:	18804e26 	beq	r3,r2,80d820 <alt_up_pixel_buffer_dma_draw_box+0x190>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d6e8:	23000b17 	ldw	r12,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d6ec:	20800d17 	ldw	r2,52(r4)
  80d6f0:	1000191e 	bne	r2,zero,80d758 <alt_up_pixel_buffer_dma_draw_box+0xc8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d6f4:	22c01317 	ldw	r11,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d6f8:	21000e17 	ldw	r4,56(r4)
  80d6fc:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d700:	32c4983a 	sll	r2,r6,r11
  80d704:	608f883a 	add	r7,r12,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d708:	20c01126 	beq	r4,r3,80d750 <alt_up_pixel_buffer_dma_draw_box+0xc0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d70c:	00800084 	movi	r2,2
  80d710:	20805426 	beq	r4,r2,80d864 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d714:	51800f36 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
  80d718:	2a000736 	bltu	r5,r8,80d738 <alt_up_pixel_buffer_dma_draw_box+0xa8>
  80d71c:	4007883a 	mov	r3,r8
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d720:	18c5883a 	add	r2,r3,r3
  80d724:	1085883a 	add	r2,r2,r2
  80d728:	11c5883a 	add	r2,r2,r7
  80d72c:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d730:	18c00044 	addi	r3,r3,1
  80d734:	28fffa2e 	bgeu	r5,r3,80d720 <alt_up_pixel_buffer_dma_draw_box+0x90>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d738:	31800044 	addi	r6,r6,1
  80d73c:	51800536 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80d740:	00800044 	movi	r2,1
  80d744:	12c4983a 	sll	r2,r2,r11
  80d748:	388f883a 	add	r7,r7,r2
  80d74c:	003ff206 	br	80d718 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d750:	51801c2e 	bgeu	r10,r6,80d7c4 <alt_up_pixel_buffer_dma_draw_box+0x134>
  80d754:	f800283a 	ret
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d758:	21000e17 	ldw	r4,56(r4)
  80d75c:	00800044 	movi	r2,1
  80d760:	20802026 	beq	r4,r2,80d7e4 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d764:	00800084 	movi	r2,2
  80d768:	20802f26 	beq	r4,r2,80d828 <alt_up_pixel_buffer_dma_draw_box+0x198>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d76c:	51bff936 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d770:	5ac5883a 	add	r2,r11,r11
  80d774:	108f883a 	add	r7,r2,r2
			addr = addr + t_y * limit_x;
  80d778:	31c7383a 	mul	r3,r6,r7
  80d77c:	60c9883a 	add	r4,r12,r3
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d780:	2a000736 	bltu	r5,r8,80d7a0 <alt_up_pixel_buffer_dma_draw_box+0x110>
  80d784:	4007883a 	mov	r3,r8
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d788:	18c5883a 	add	r2,r3,r3
  80d78c:	1085883a 	add	r2,r2,r2
  80d790:	1105883a 	add	r2,r2,r4
  80d794:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d798:	18c00044 	addi	r3,r3,1
  80d79c:	28fffa2e 	bgeu	r5,r3,80d788 <alt_up_pixel_buffer_dma_draw_box+0xf8>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d7a0:	31800044 	addi	r6,r6,1
  80d7a4:	51bfeb36 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80d7a8:	21c9883a 	add	r4,r4,r7
  80d7ac:	003ff406 	br	80d780 <alt_up_pixel_buffer_dma_draw_box+0xf0>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d7b0:	31800044 	addi	r6,r6,1
  80d7b4:	51bfe736 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80d7b8:	00800044 	movi	r2,1
  80d7bc:	12c4983a 	sll	r2,r2,r11
  80d7c0:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d7c4:	2a3ffa36 	bltu	r5,r8,80d7b0 <alt_up_pixel_buffer_dma_draw_box+0x120>
  80d7c8:	3a07883a 	add	r3,r7,r8
  80d7cc:	4005883a 	mov	r2,r8
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d7d0:	1a400025 	stbio	r9,0(r3)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d7d4:	10800044 	addi	r2,r2,1
  80d7d8:	18c00044 	addi	r3,r3,1
  80d7dc:	28bffc2e 	bgeu	r5,r2,80d7d0 <alt_up_pixel_buffer_dma_draw_box+0x140>
  80d7e0:	003ff306 	br	80d7b0 <alt_up_pixel_buffer_dma_draw_box+0x120>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d7e4:	51bfdb36 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
  80d7e8:	32c5383a 	mul	r2,r6,r11
  80d7ec:	6085883a 	add	r2,r12,r2
  80d7f0:	4085883a 	add	r2,r8,r2
			{
				for (x = l_x; x <= r_x; x++)
  80d7f4:	2a000636 	bltu	r5,r8,80d810 <alt_up_pixel_buffer_dma_draw_box+0x180>
  80d7f8:	1009883a 	mov	r4,r2
  80d7fc:	4007883a 	mov	r3,r8
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d800:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d804:	18c00044 	addi	r3,r3,1
  80d808:	21000044 	addi	r4,r4,1
  80d80c:	28fffc2e 	bgeu	r5,r3,80d800 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d810:	31800044 	addi	r6,r6,1
  80d814:	12c5883a 	add	r2,r2,r11
  80d818:	51bff62e 	bgeu	r10,r6,80d7f4 <alt_up_pixel_buffer_dma_draw_box+0x164>
  80d81c:	f800283a 	ret
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d820:	23000c17 	ldw	r12,48(r4)
  80d824:	003fb106 	br	80d6ec <alt_up_pixel_buffer_dma_draw_box+0x5c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d828:	51bfca36 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  80d82c:	5acf883a 	add	r7,r11,r11
			addr = addr + t_y * limit_x;
  80d830:	31c5383a 	mul	r2,r6,r7
  80d834:	6089883a 	add	r4,r12,r2
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d838:	2a000636 	bltu	r5,r8,80d854 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
  80d83c:	4007883a 	mov	r3,r8
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80d840:	18c5883a 	add	r2,r3,r3
  80d844:	1105883a 	add	r2,r2,r4
  80d848:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d84c:	18c00044 	addi	r3,r3,1
  80d850:	28fffb2e 	bgeu	r5,r3,80d840 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d854:	31800044 	addi	r6,r6,1
  80d858:	51bfbe36 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80d85c:	21c9883a 	add	r4,r4,r7
  80d860:	003ff506 	br	80d838 <alt_up_pixel_buffer_dma_draw_box+0x1a8>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d864:	51bfbb36 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
  80d868:	2a000636 	bltu	r5,r8,80d884 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
  80d86c:	4007883a 	mov	r3,r8
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80d870:	18c5883a 	add	r2,r3,r3
  80d874:	3885883a 	add	r2,r7,r2
  80d878:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d87c:	18c00044 	addi	r3,r3,1
  80d880:	28fffb2e 	bgeu	r5,r3,80d870 <alt_up_pixel_buffer_dma_draw_box+0x1e0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d884:	31800044 	addi	r6,r6,1
  80d888:	51bfb236 	bltu	r10,r6,80d754 <alt_up_pixel_buffer_dma_draw_box+0xc4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80d88c:	00800044 	movi	r2,1
  80d890:	12c4983a 	sll	r2,r2,r11
  80d894:	388f883a 	add	r7,r7,r2
  80d898:	003ff306 	br	80d868 <alt_up_pixel_buffer_dma_draw_box+0x1d8>

0080d89c <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d89c:	00800044 	movi	r2,1
  80d8a0:	28802626 	beq	r5,r2,80d93c <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d8a4:	21800b17 	ldw	r6,44(r4)
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d8a8:	20c00e17 	ldw	r3,56(r4)
  80d8ac:	00800084 	movi	r2,2
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
  80d8b0:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d8b4:	18801f26 	beq	r3,r2,80d934 <alt_up_pixel_buffer_dma_clear_screen+0x98>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
  80d8b8:	2945883a 	add	r2,r5,r5
  80d8bc:	108b883a 	add	r5,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d8c0:	20800d17 	ldw	r2,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
  80d8c4:	22001017 	ldw	r8,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d8c8:	1000101e 	bne	r2,zero,80d90c <alt_up_pixel_buffer_dma_clear_screen+0x70>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80d8cc:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
  80d8d0:	40001726 	beq	r8,zero,80d930 <alt_up_pixel_buffer_dma_clear_screen+0x94>
  80d8d4:	000f883a 	mov	r7,zero
  80d8d8:	2812c03a 	cmpne	r9,r5,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d8dc:	48000526 	beq	r9,zero,80d8f4 <alt_up_pixel_buffer_dma_clear_screen+0x58>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80d8e0:	0007883a 	mov	r3,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
  80d8e4:	1985883a 	add	r2,r3,r6
  80d8e8:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d8ec:	18c00104 	addi	r3,r3,4
  80d8f0:	197ffc36 	bltu	r3,r5,80d8e4 <alt_up_pixel_buffer_dma_clear_screen+0x48>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80d8f4:	39c00044 	addi	r7,r7,1
  80d8f8:	41c00d26 	beq	r8,r7,80d930 <alt_up_pixel_buffer_dma_clear_screen+0x94>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80d8fc:	00800044 	movi	r2,1
  80d900:	1104983a 	sll	r2,r2,r4
  80d904:	308d883a 	add	r6,r6,r2
  80d908:	003ff406 	br	80d8dc <alt_up_pixel_buffer_dma_clear_screen+0x40>
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80d90c:	2a09383a 	mul	r4,r5,r8

		for (x = 0; x < limit_y; x = x + 4)
  80d910:	20000726 	beq	r4,zero,80d930 <alt_up_pixel_buffer_dma_clear_screen+0x94>
  80d914:	0007883a 	mov	r3,zero
  80d918:	0005883a 	mov	r2,zero
		{
			IOWR_32DIRECT(addr, x, 0);
  80d91c:	1185883a 	add	r2,r2,r6
  80d920:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80d924:	18800104 	addi	r2,r3,4
  80d928:	1007883a 	mov	r3,r2
  80d92c:	113ffb36 	bltu	r2,r4,80d91c <alt_up_pixel_buffer_dma_clear_screen+0x80>
  80d930:	f800283a 	ret
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
  80d934:	294b883a 	add	r5,r5,r5
  80d938:	003fe106 	br	80d8c0 <alt_up_pixel_buffer_dma_clear_screen+0x24>
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d93c:	21800c17 	ldw	r6,48(r4)
  80d940:	003fd906 	br	80d8a8 <alt_up_pixel_buffer_dma_clear_screen+0xc>

0080d944 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80d944:	21800c17 	ldw	r6,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80d948:	20c00a17 	ldw	r3,40(r4)
  80d94c:	00800044 	movi	r2,1
  80d950:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d954:	21400b17 	ldw	r5,44(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  80d958:	0005883a 	mov	r2,zero
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
	pixel_buffer->buffer_start_address = temp;
  80d95c:	21800b15 	stw	r6,44(r4)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d960:	21400c15 	stw	r5,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  80d964:	f800283a 	ret

0080d968 <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d968:	22400f17 	ldw	r9,60(r4)
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80d96c:	2011883a 	mov	r8,r4
  80d970:	2815883a 	mov	r10,r5
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d974:	32400236 	bltu	r6,r9,80d980 <alt_up_pixel_buffer_dma_draw+0x18>
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d978:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
  80d97c:	f800283a 	ret
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d980:	20801017 	ldw	r2,64(r4)
  80d984:	38bffc2e 	bgeu	r7,r2,80d978 <alt_up_pixel_buffer_dma_draw+0x10>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d988:	20800d17 	ldw	r2,52(r4)
  80d98c:	1000131e 	bne	r2,zero,80d9dc <alt_up_pixel_buffer_dma_draw+0x74>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80d990:	20c01217 	ldw	r3,72(r4)
  80d994:	20801417 	ldw	r2,80(r4)
  80d998:	41401317 	ldw	r5,76(r8)
  80d99c:	21001117 	ldw	r4,68(r4)
  80d9a0:	30c6703a 	and	r3,r6,r3
  80d9a4:	3884703a 	and	r2,r7,r2
  80d9a8:	1906983a 	sll	r3,r3,r4
  80d9ac:	1144983a 	sll	r2,r2,r5
  80d9b0:	1886b03a 	or	r3,r3,r2
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d9b4:	41000e17 	ldw	r4,56(r8)
  80d9b8:	00800044 	movi	r2,1
  80d9bc:	20801526 	beq	r4,r2,80da14 <alt_up_pixel_buffer_dma_draw+0xac>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d9c0:	00800084 	movi	r2,2
  80d9c4:	20800e26 	beq	r4,r2,80da00 <alt_up_pixel_buffer_dma_draw+0x98>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d9c8:	40800c17 	ldw	r2,48(r8)
  80d9cc:	1885883a 	add	r2,r3,r2
  80d9d0:	12800035 	stwio	r10,0(r2)
  80d9d4:	0005883a 	mov	r2,zero
  80d9d8:	f800283a 	ret
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d9dc:	20801417 	ldw	r2,80(r4)
  80d9e0:	20c01217 	ldw	r3,72(r4)
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d9e4:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d9e8:	3884703a 	and	r2,r7,r2
  80d9ec:	4885383a 	mul	r2,r9,r2
  80d9f0:	30c6703a 	and	r3,r6,r3
  80d9f4:	10c5883a 	add	r2,r2,r3
  80d9f8:	1106983a 	sll	r3,r2,r4
  80d9fc:	003fed06 	br	80d9b4 <alt_up_pixel_buffer_dma_draw+0x4c>
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80da00:	40800c17 	ldw	r2,48(r8)
  80da04:	1885883a 	add	r2,r3,r2
  80da08:	1280002d 	sthio	r10,0(r2)
  80da0c:	0005883a 	mov	r2,zero
  80da10:	f800283a 	ret
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80da14:	40800c17 	ldw	r2,48(r8)
  80da18:	1885883a 	add	r2,r3,r2
  80da1c:	12800025 	stbio	r10,0(r2)
  80da20:	0005883a 	mov	r2,zero
  80da24:	f800283a 	ret

0080da28 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80da28:	20c00a17 	ldw	r3,40(r4)
  80da2c:	18800337 	ldwio	r2,12(r3)
}
  80da30:	1080004c 	andi	r2,r2,1
  80da34:	f800283a 	ret

0080da38 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80da38:	20c00a17 	ldw	r3,40(r4)
  80da3c:	01800104 	movi	r6,4
  80da40:	1987883a 	add	r3,r3,r6
  80da44:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80da48:	20800a17 	ldw	r2,40(r4)
  80da4c:	1185883a 	add	r2,r2,r6
  80da50:	10c00037 	ldwio	r3,0(r2)
	return 0;
}
  80da54:	0005883a 	mov	r2,zero

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80da58:	20c00c15 	stw	r3,48(r4)
	return 0;
}
  80da5c:	f800283a 	ret

0080da60 <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80da60:	01402074 	movhi	r5,129
  80da64:	29566b04 	addi	r5,r5,22956
  80da68:	0812f881 	jmpi	812f88 <alt_find_dev>

0080da6c <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80da6c:	defffe04 	addi	sp,sp,-8
  80da70:	dac00217 	ldw	r11,8(sp)
  80da74:	dc000015 	stw	r16,0(sp)
  80da78:	dc400115 	stw	r17,4(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80da7c:	5987c83a 	sub	r3,r11,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80da80:	3013883a 	mov	r9,r6
  80da84:	dc000317 	ldw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80da88:	18009116 	blt	r3,zero,80dcd0 <alt_up_pixel_buffer_dma_draw_line+0x264>
  80da8c:	3945c83a 	sub	r2,r7,r5
  80da90:	10008d16 	blt	r2,zero,80dcc8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80da94:	22000e17 	ldw	r8,56(r4)
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80da98:	10c4803a 	cmplt	r2,r2,r3
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80da9c:	00c00044 	movi	r3,1
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80daa0:	100d883a 	mov	r6,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80daa4:	40c08426 	beq	r8,r3,80dcb8 <alt_up_pixel_buffer_dma_draw_line+0x24c>
  80daa8:	43c00098 	cmpnei	r15,r8,2
  80daac:	78df883a 	add	r15,r15,r3
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80dab0:	20800d17 	ldw	r2,52(r4)
  80dab4:	1000571e 	bne	r2,zero,80dc14 <alt_up_pixel_buffer_dma_draw_line+0x1a8>
  80dab8:	20801317 	ldw	r2,76(r4)
  80dabc:	00c00044 	movi	r3,1
  80dac0:	13c5c83a 	sub	r2,r2,r15
  80dac4:	189a983a 	sll	r13,r3,r2

	if (backbuffer == 1)
  80dac8:	d8c00417 	ldw	r3,16(sp)
  80dacc:	00800044 	movi	r2,1
  80dad0:	18805426 	beq	r3,r2,80dc24 <alt_up_pixel_buffer_dma_draw_line+0x1b8>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80dad4:	34403fcc 	andi	r17,r6,255
  80dad8:	8c40201c 	xori	r17,r17,128
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;
  80dadc:	21000b17 	ldw	r4,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
  80dae0:	8c7fe004 	addi	r17,r17,-128
  80dae4:	30005426 	beq	r6,zero,80dc38 <alt_up_pixel_buffer_dma_draw_line+0x1cc>
  80dae8:	480d883a 	mov	r6,r9
  80daec:	5815883a 	mov	r10,r11
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
  80daf0:	5180060e 	bge	r10,r6,80db0c <alt_up_pixel_buffer_dma_draw_line+0xa0>
  80daf4:	5005883a 	mov	r2,r10
  80daf8:	3807883a 	mov	r3,r7
  80dafc:	3015883a 	mov	r10,r6
  80db00:	280f883a 	mov	r7,r5
  80db04:	100d883a 	mov	r6,r2
  80db08:	180b883a 	mov	r5,r3
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  80db0c:	3957c83a 	sub	r11,r7,r5
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  80db10:	5199c83a 	sub	r12,r10,r6
	deltay = ABS(y_1 - y_0);
  80db14:	58006a16 	blt	r11,zero,80dcc0 <alt_up_pixel_buffer_dma_draw_line+0x254>
	error = -(deltax / 2); 
  80db18:	6004d7fa 	srli	r2,r12,31
  80db1c:	1305883a 	add	r2,r2,r12
  80db20:	1005d07a 	srai	r2,r2,1
  80db24:	0091c83a 	sub	r8,zero,r2
	y = y_0;
	if (y_0 < y_1)
  80db28:	29c02416 	blt	r5,r7,80dbbc <alt_up_pixel_buffer_dma_draw_line+0x150>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80db2c:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  80db30:	03bfffc4 	movi	r14,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80db34:	88802426 	beq	r17,r2,80dbc8 <alt_up_pixel_buffer_dma_draw_line+0x15c>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80db38:	51801016 	blt	r10,r6,80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80db3c:	300f883a 	mov	r7,r6
  80db40:	2807883a 	mov	r3,r5
  80db44:	78001226 	beq	r15,zero,80db90 <alt_up_pixel_buffer_dma_draw_line+0x124>
  80db48:	78804126 	beq	r15,r2,80dc50 <alt_up_pixel_buffer_dma_draw_line+0x1e4>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80db4c:	68c5383a 	mul	r2,r13,r3
  80db50:	11c5883a 	add	r2,r2,r7
  80db54:	1085883a 	add	r2,r2,r2
  80db58:	1085883a 	add	r2,r2,r2
  80db5c:	1105883a 	add	r2,r2,r4
  80db60:	14000035 	stwio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80db64:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80db68:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80db6c:	0200020e 	bge	zero,r8,80db78 <alt_up_pixel_buffer_dma_draw_line+0x10c>
				y = y + ystep;
  80db70:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80db74:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80db78:	51fff40e 	bge	r10,r7,80db4c <alt_up_pixel_buffer_dma_draw_line+0xe0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80db7c:	dc400117 	ldw	r17,4(sp)
  80db80:	dc000017 	ldw	r16,0(sp)
  80db84:	dec00204 	addi	sp,sp,8
  80db88:	f800283a 	ret
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80db8c:	51fffb16 	blt	r10,r7,80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80db90:	68c5383a 	mul	r2,r13,r3
  80db94:	11c5883a 	add	r2,r2,r7
  80db98:	1105883a 	add	r2,r2,r4
  80db9c:	14000025 	stbio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80dba0:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dba4:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dba8:	023ff80e 	bge	zero,r8,80db8c <alt_up_pixel_buffer_dma_draw_line+0x120>
				y = y + ystep;
  80dbac:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80dbb0:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dbb4:	51fff60e 	bge	r10,r7,80db90 <alt_up_pixel_buffer_dma_draw_line+0x124>
  80dbb8:	003ff006 	br	80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80dbbc:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  80dbc0:	03800044 	movi	r14,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80dbc4:	88bfdc1e 	bne	r17,r2,80db38 <alt_up_pixel_buffer_dma_draw_line+0xcc>
	{
		for (x=x_0; x <= x_1; x++) {
  80dbc8:	51bfec16 	blt	r10,r6,80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dbcc:	3013883a 	mov	r9,r6
  80dbd0:	2807883a 	mov	r3,r5
  80dbd4:	334f383a 	mul	r7,r6,r13
  80dbd8:	78002926 	beq	r15,zero,80dc80 <alt_up_pixel_buffer_dma_draw_line+0x214>
  80dbdc:	7c403e26 	beq	r15,r17,80dcd8 <alt_up_pixel_buffer_dma_draw_line+0x26c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80dbe0:	38c5883a 	add	r2,r7,r3
  80dbe4:	1085883a 	add	r2,r2,r2
  80dbe8:	1085883a 	add	r2,r2,r2
  80dbec:	1105883a 	add	r2,r2,r4
  80dbf0:	14000035 	stwio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80dbf4:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dbf8:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dbfc:	0200020e 	bge	zero,r8,80dc08 <alt_up_pixel_buffer_dma_draw_line+0x19c>
				y = y + ystep;
  80dc00:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80dc04:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dc08:	3b4f883a 	add	r7,r7,r13
  80dc0c:	527ff40e 	bge	r10,r9,80dbe0 <alt_up_pixel_buffer_dma_draw_line+0x174>
  80dc10:	003fda06 	br	80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
  80dc14:	d8c00417 	ldw	r3,16(sp)
  80dc18:	00800044 	movi	r2,1
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80dc1c:	23400f17 	ldw	r13,60(r4)

	if (backbuffer == 1)
  80dc20:	18bfac1e 	bne	r3,r2,80dad4 <alt_up_pixel_buffer_dma_draw_line+0x68>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80dc24:	34403fcc 	andi	r17,r6,255
  80dc28:	8c40201c 	xori	r17,r17,128
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
  80dc2c:	21000c17 	ldw	r4,48(r4)
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80dc30:	8c7fe004 	addi	r17,r17,-128
  80dc34:	303fac1e 	bne	r6,zero,80dae8 <alt_up_pixel_buffer_dma_draw_line+0x7c>
  80dc38:	280d883a 	mov	r6,r5
  80dc3c:	3815883a 	mov	r10,r7
  80dc40:	480b883a 	mov	r5,r9
  80dc44:	580f883a 	mov	r7,r11
  80dc48:	003fa906 	br	80daf0 <alt_up_pixel_buffer_dma_draw_line+0x84>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dc4c:	51ffcb16 	blt	r10,r7,80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80dc50:	68c5383a 	mul	r2,r13,r3
  80dc54:	11c5883a 	add	r2,r2,r7
  80dc58:	1085883a 	add	r2,r2,r2
  80dc5c:	1105883a 	add	r2,r2,r4
  80dc60:	1400002d 	sthio	r16,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80dc64:	42d1883a 	add	r8,r8,r11
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dc68:	39c00044 	addi	r7,r7,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dc6c:	023ff70e 	bge	zero,r8,80dc4c <alt_up_pixel_buffer_dma_draw_line+0x1e0>
				y = y + ystep;
  80dc70:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80dc74:	4311c83a 	sub	r8,r8,r12
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dc78:	51fff50e 	bge	r10,r7,80dc50 <alt_up_pixel_buffer_dma_draw_line+0x1e4>
  80dc7c:	003fbf06 	br	80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80dc80:	38c5883a 	add	r2,r7,r3
  80dc84:	1105883a 	add	r2,r2,r4
  80dc88:	14000025 	stbio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80dc8c:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dc90:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dc94:	0200020e 	bge	zero,r8,80dca0 <alt_up_pixel_buffer_dma_draw_line+0x234>
				y = y + ystep;
  80dc98:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80dc9c:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dca0:	3b4f883a 	add	r7,r7,r13
  80dca4:	527ff60e 	bge	r10,r9,80dc80 <alt_up_pixel_buffer_dma_draw_line+0x214>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80dca8:	dc400117 	ldw	r17,4(sp)
  80dcac:	dc000017 	ldw	r16,0(sp)
  80dcb0:	dec00204 	addi	sp,sp,8
  80dcb4:	f800283a 	ret
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80dcb8:	001f883a 	mov	r15,zero
  80dcbc:	003f7c06 	br	80dab0 <alt_up_pixel_buffer_dma_draw_line+0x44>
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  80dcc0:	02d7c83a 	sub	r11,zero,r11
  80dcc4:	003f9406 	br	80db18 <alt_up_pixel_buffer_dma_draw_line+0xac>
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80dcc8:	0085c83a 	sub	r2,zero,r2
  80dccc:	003f7106 	br	80da94 <alt_up_pixel_buffer_dma_draw_line+0x28>
  80dcd0:	00c7c83a 	sub	r3,zero,r3
  80dcd4:	003f6d06 	br	80da8c <alt_up_pixel_buffer_dma_draw_line+0x20>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80dcd8:	38c5883a 	add	r2,r7,r3
  80dcdc:	1085883a 	add	r2,r2,r2
  80dce0:	1105883a 	add	r2,r2,r4
  80dce4:	1400002d 	sthio	r16,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80dce8:	42d1883a 	add	r8,r8,r11

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dcec:	4a400044 	addi	r9,r9,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dcf0:	0200020e 	bge	zero,r8,80dcfc <alt_up_pixel_buffer_dma_draw_line+0x290>
				y = y + ystep;
  80dcf4:	1b87883a 	add	r3,r3,r14
				error = error - deltax;
  80dcf8:	4311c83a 	sub	r8,r8,r12

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dcfc:	3b4f883a 	add	r7,r7,r13
  80dd00:	527ff50e 	bge	r10,r9,80dcd8 <alt_up_pixel_buffer_dma_draw_line+0x26c>
  80dd04:	003f9d06 	br	80db7c <alt_up_pixel_buffer_dma_draw_line+0x110>

0080dd08 <match_file_record_to_name_ext>:
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80dd08:	21c00003 	ldbu	r7,0(r4)
  80dd0c:	00c00644 	movi	r3,25
  80dd10:	38bfe7c4 	addi	r2,r7,-97
  80dd14:	10803fcc 	andi	r2,r2,255
  80dd18:	1880c12e 	bgeu	r3,r2,80e020 <match_file_record_to_name_ext+0x318>
  80dd1c:	3a003fcc 	andi	r8,r7,255
  80dd20:	4200201c 	xori	r8,r8,128
  80dd24:	423fe004 	addi	r8,r8,-128
  80dd28:	29c00003 	ldbu	r7,0(r5)
  80dd2c:	00c00644 	movi	r3,25
  80dd30:	38bfe7c4 	addi	r2,r7,-97
  80dd34:	10803fcc 	andi	r2,r2,255
  80dd38:	1880b42e 	bgeu	r3,r2,80e00c <match_file_record_to_name_ext+0x304>
  80dd3c:	38803fcc 	andi	r2,r7,255
  80dd40:	1080201c 	xori	r2,r2,128
  80dd44:	10bfe004 	addi	r2,r2,-128
  80dd48:	40811e1e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80dd4c:	21c00043 	ldbu	r7,1(r4)
  80dd50:	00c00644 	movi	r3,25
  80dd54:	38bfe7c4 	addi	r2,r7,-97
  80dd58:	10803fcc 	andi	r2,r2,255
  80dd5c:	1880b52e 	bgeu	r3,r2,80e034 <match_file_record_to_name_ext+0x32c>
  80dd60:	3a003fcc 	andi	r8,r7,255
  80dd64:	29c00043 	ldbu	r7,1(r5)
  80dd68:	4200201c 	xori	r8,r8,128
  80dd6c:	00c00644 	movi	r3,25
  80dd70:	38bfe7c4 	addi	r2,r7,-97
  80dd74:	10803fcc 	andi	r2,r2,255
  80dd78:	423fe004 	addi	r8,r8,-128
  80dd7c:	1880b62e 	bgeu	r3,r2,80e058 <match_file_record_to_name_ext+0x350>
  80dd80:	38803fcc 	andi	r2,r7,255
  80dd84:	1080201c 	xori	r2,r2,128
  80dd88:	10bfe004 	addi	r2,r2,-128
  80dd8c:	40810d1e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80dd90:	21c00083 	ldbu	r7,2(r4)
  80dd94:	00c00644 	movi	r3,25
  80dd98:	38bfe7c4 	addi	r2,r7,-97
  80dd9c:	10803fcc 	andi	r2,r2,255
  80dda0:	1880cb2e 	bgeu	r3,r2,80e0d0 <match_file_record_to_name_ext+0x3c8>
  80dda4:	3a003fcc 	andi	r8,r7,255
  80dda8:	4200201c 	xori	r8,r8,128
  80ddac:	423fe004 	addi	r8,r8,-128
  80ddb0:	29c00083 	ldbu	r7,2(r5)
  80ddb4:	00c00644 	movi	r3,25
  80ddb8:	38bfe7c4 	addi	r2,r7,-97
  80ddbc:	10803fcc 	andi	r2,r2,255
  80ddc0:	1880be2e 	bgeu	r3,r2,80e0bc <match_file_record_to_name_ext+0x3b4>
  80ddc4:	38803fcc 	andi	r2,r7,255
  80ddc8:	1080201c 	xori	r2,r2,128
  80ddcc:	10bfe004 	addi	r2,r2,-128
  80ddd0:	4080fc1e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80ddd4:	21c000c3 	ldbu	r7,3(r4)
  80ddd8:	00c00644 	movi	r3,25
  80dddc:	38bfe7c4 	addi	r2,r7,-97
  80dde0:	10803fcc 	andi	r2,r2,255
  80dde4:	1880cc2e 	bgeu	r3,r2,80e118 <match_file_record_to_name_ext+0x410>
  80dde8:	3a003fcc 	andi	r8,r7,255
  80ddec:	4200201c 	xori	r8,r8,128
  80ddf0:	423fe004 	addi	r8,r8,-128
  80ddf4:	29c000c3 	ldbu	r7,3(r5)
  80ddf8:	00c00644 	movi	r3,25
  80ddfc:	38bfe7c4 	addi	r2,r7,-97
  80de00:	10803fcc 	andi	r2,r2,255
  80de04:	1880bf2e 	bgeu	r3,r2,80e104 <match_file_record_to_name_ext+0x3fc>
  80de08:	38803fcc 	andi	r2,r7,255
  80de0c:	1080201c 	xori	r2,r2,128
  80de10:	10bfe004 	addi	r2,r2,-128
  80de14:	4080eb1e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80de18:	21c00103 	ldbu	r7,4(r4)
  80de1c:	00c00644 	movi	r3,25
  80de20:	38bfe7c4 	addi	r2,r7,-97
  80de24:	10803fcc 	andi	r2,r2,255
  80de28:	1880c52e 	bgeu	r3,r2,80e140 <match_file_record_to_name_ext+0x438>
  80de2c:	3a003fcc 	andi	r8,r7,255
  80de30:	4200201c 	xori	r8,r8,128
  80de34:	423fe004 	addi	r8,r8,-128
  80de38:	29c00103 	ldbu	r7,4(r5)
  80de3c:	00c00644 	movi	r3,25
  80de40:	38bfe7c4 	addi	r2,r7,-97
  80de44:	10803fcc 	andi	r2,r2,255
  80de48:	1880b82e 	bgeu	r3,r2,80e12c <match_file_record_to_name_ext+0x424>
  80de4c:	38803fcc 	andi	r2,r7,255
  80de50:	1080201c 	xori	r2,r2,128
  80de54:	10bfe004 	addi	r2,r2,-128
  80de58:	4080da1e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80de5c:	21c00143 	ldbu	r7,5(r4)
  80de60:	00c00644 	movi	r3,25
  80de64:	38bfe7c4 	addi	r2,r7,-97
  80de68:	10803fcc 	andi	r2,r2,255
  80de6c:	1880be2e 	bgeu	r3,r2,80e168 <match_file_record_to_name_ext+0x460>
  80de70:	3a003fcc 	andi	r8,r7,255
  80de74:	4200201c 	xori	r8,r8,128
  80de78:	423fe004 	addi	r8,r8,-128
  80de7c:	29c00143 	ldbu	r7,5(r5)
  80de80:	00c00644 	movi	r3,25
  80de84:	38bfe7c4 	addi	r2,r7,-97
  80de88:	10803fcc 	andi	r2,r2,255
  80de8c:	1880b12e 	bgeu	r3,r2,80e154 <match_file_record_to_name_ext+0x44c>
  80de90:	38803fcc 	andi	r2,r7,255
  80de94:	1080201c 	xori	r2,r2,128
  80de98:	10bfe004 	addi	r2,r2,-128
  80de9c:	4080c91e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80dea0:	21c00183 	ldbu	r7,6(r4)
  80dea4:	00c00644 	movi	r3,25
  80dea8:	38bfe7c4 	addi	r2,r7,-97
  80deac:	10803fcc 	andi	r2,r2,255
  80deb0:	1880b72e 	bgeu	r3,r2,80e190 <match_file_record_to_name_ext+0x488>
  80deb4:	3a003fcc 	andi	r8,r7,255
  80deb8:	4200201c 	xori	r8,r8,128
  80debc:	423fe004 	addi	r8,r8,-128
  80dec0:	29c00183 	ldbu	r7,6(r5)
  80dec4:	00c00644 	movi	r3,25
  80dec8:	38bfe7c4 	addi	r2,r7,-97
  80decc:	10803fcc 	andi	r2,r2,255
  80ded0:	1880aa2e 	bgeu	r3,r2,80e17c <match_file_record_to_name_ext+0x474>
  80ded4:	38803fcc 	andi	r2,r7,255
  80ded8:	1080201c 	xori	r2,r2,128
  80dedc:	10bfe004 	addi	r2,r2,-128
  80dee0:	4080b81e 	bne	r8,r2,80e1c4 <match_file_record_to_name_ext+0x4bc>
  80dee4:	21c001c3 	ldbu	r7,7(r4)
  80dee8:	00c00644 	movi	r3,25
  80deec:	38bfe7c4 	addi	r2,r7,-97
  80def0:	10803fcc 	andi	r2,r2,255
  80def4:	1880af36 	bltu	r3,r2,80e1b4 <match_file_record_to_name_ext+0x4ac>
  80def8:	38bff804 	addi	r2,r7,-32
  80defc:	11c03fcc 	andi	r7,r2,255
  80df00:	39c0201c 	xori	r7,r7,128
  80df04:	39ffe004 	addi	r7,r7,-128
  80df08:	294001c3 	ldbu	r5,7(r5)
  80df0c:	00c00644 	movi	r3,25
  80df10:	28bfe7c4 	addi	r2,r5,-97
  80df14:	10803fcc 	andi	r2,r2,255
  80df18:	1880a236 	bltu	r3,r2,80e1a4 <match_file_record_to_name_ext+0x49c>
  80df1c:	28bff804 	addi	r2,r5,-32
  80df20:	10803fcc 	andi	r2,r2,255
  80df24:	1080201c 	xori	r2,r2,128
  80df28:	10bfe004 	addi	r2,r2,-128
  80df2c:	3891003a 	cmpeq	r8,r7,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80df30:	21400203 	ldbu	r5,8(r4)
  80df34:	00c00644 	movi	r3,25
  80df38:	28bfe7c4 	addi	r2,r5,-97
  80df3c:	10803fcc 	andi	r2,r2,255
  80df40:	18804f2e 	bgeu	r3,r2,80e080 <match_file_record_to_name_ext+0x378>
  80df44:	29c03fcc 	andi	r7,r5,255
  80df48:	39c0201c 	xori	r7,r7,128
  80df4c:	39ffe004 	addi	r7,r7,-128
  80df50:	31400003 	ldbu	r5,0(r6)
  80df54:	00c00644 	movi	r3,25
  80df58:	28bfe7c4 	addi	r2,r5,-97
  80df5c:	10803fcc 	andi	r2,r2,255
  80df60:	1880422e 	bgeu	r3,r2,80e06c <match_file_record_to_name_ext+0x364>
  80df64:	28803fcc 	andi	r2,r5,255
  80df68:	1080201c 	xori	r2,r2,128
  80df6c:	10bfe004 	addi	r2,r2,-128
  80df70:	3880961e 	bne	r7,r2,80e1cc <match_file_record_to_name_ext+0x4c4>
  80df74:	21400243 	ldbu	r5,9(r4)
  80df78:	00c00644 	movi	r3,25
  80df7c:	28bfe7c4 	addi	r2,r5,-97
  80df80:	10803fcc 	andi	r2,r2,255
  80df84:	1880482e 	bgeu	r3,r2,80e0a8 <match_file_record_to_name_ext+0x3a0>
  80df88:	29c03fcc 	andi	r7,r5,255
  80df8c:	39c0201c 	xori	r7,r7,128
  80df90:	39ffe004 	addi	r7,r7,-128
  80df94:	31400043 	ldbu	r5,1(r6)
  80df98:	00c00644 	movi	r3,25
  80df9c:	28bfe7c4 	addi	r2,r5,-97
  80dfa0:	10803fcc 	andi	r2,r2,255
  80dfa4:	18803b2e 	bgeu	r3,r2,80e094 <match_file_record_to_name_ext+0x38c>
  80dfa8:	28803fcc 	andi	r2,r5,255
  80dfac:	1080201c 	xori	r2,r2,128
  80dfb0:	10bfe004 	addi	r2,r2,-128
  80dfb4:	3880851e 	bne	r7,r2,80e1cc <match_file_record_to_name_ext+0x4c4>
  80dfb8:	21000283 	ldbu	r4,10(r4)
  80dfbc:	00c00644 	movi	r3,25
  80dfc0:	20bfe7c4 	addi	r2,r4,-97
  80dfc4:	10803fcc 	andi	r2,r2,255
  80dfc8:	18804a36 	bltu	r3,r2,80e0f4 <match_file_record_to_name_ext+0x3ec>
  80dfcc:	20bff804 	addi	r2,r4,-32
  80dfd0:	11003fcc 	andi	r4,r2,255
  80dfd4:	2100201c 	xori	r4,r4,128
  80dfd8:	213fe004 	addi	r4,r4,-128
  80dfdc:	31800083 	ldbu	r6,2(r6)
  80dfe0:	00c00644 	movi	r3,25
  80dfe4:	30bfe7c4 	addi	r2,r6,-97
  80dfe8:	10803fcc 	andi	r2,r2,255
  80dfec:	18803d36 	bltu	r3,r2,80e0e4 <match_file_record_to_name_ext+0x3dc>
  80dff0:	30bff804 	addi	r2,r6,-32
  80dff4:	10803fcc 	andi	r2,r2,255
  80dff8:	1080201c 	xori	r2,r2,128
  80dffc:	10bfe004 	addi	r2,r2,-128
  80e000:	2080721e 	bne	r4,r2,80e1cc <match_file_record_to_name_ext+0x4c4>
            match = false;
			break;
        }
    }
	return match;
}
  80e004:	4005883a 	mov	r2,r8
  80e008:	f800283a 	ret
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e00c:	38bff804 	addi	r2,r7,-32
  80e010:	10803fcc 	andi	r2,r2,255
  80e014:	1080201c 	xori	r2,r2,128
  80e018:	10bfe004 	addi	r2,r2,-128
  80e01c:	003f4a06 	br	80dd48 <match_file_record_to_name_ext+0x40>
  80e020:	38bff804 	addi	r2,r7,-32
  80e024:	12003fcc 	andi	r8,r2,255
  80e028:	4200201c 	xori	r8,r8,128
  80e02c:	423fe004 	addi	r8,r8,-128
  80e030:	003f3d06 	br	80dd28 <match_file_record_to_name_ext+0x20>
  80e034:	38bff804 	addi	r2,r7,-32
  80e038:	29c00043 	ldbu	r7,1(r5)
  80e03c:	12003fcc 	andi	r8,r2,255
  80e040:	4200201c 	xori	r8,r8,128
  80e044:	38bfe7c4 	addi	r2,r7,-97
  80e048:	10803fcc 	andi	r2,r2,255
  80e04c:	00c00644 	movi	r3,25
  80e050:	423fe004 	addi	r8,r8,-128
  80e054:	18bf4a36 	bltu	r3,r2,80dd80 <match_file_record_to_name_ext+0x78>
  80e058:	38bff804 	addi	r2,r7,-32
  80e05c:	10803fcc 	andi	r2,r2,255
  80e060:	1080201c 	xori	r2,r2,128
  80e064:	10bfe004 	addi	r2,r2,-128
  80e068:	003f4806 	br	80dd8c <match_file_record_to_name_ext+0x84>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e06c:	28bff804 	addi	r2,r5,-32
  80e070:	10803fcc 	andi	r2,r2,255
  80e074:	1080201c 	xori	r2,r2,128
  80e078:	10bfe004 	addi	r2,r2,-128
  80e07c:	003fbc06 	br	80df70 <match_file_record_to_name_ext+0x268>
  80e080:	28bff804 	addi	r2,r5,-32
  80e084:	11c03fcc 	andi	r7,r2,255
  80e088:	39c0201c 	xori	r7,r7,128
  80e08c:	39ffe004 	addi	r7,r7,-128
  80e090:	003faf06 	br	80df50 <match_file_record_to_name_ext+0x248>
  80e094:	28bff804 	addi	r2,r5,-32
  80e098:	10803fcc 	andi	r2,r2,255
  80e09c:	1080201c 	xori	r2,r2,128
  80e0a0:	10bfe004 	addi	r2,r2,-128
  80e0a4:	003fc306 	br	80dfb4 <match_file_record_to_name_ext+0x2ac>
  80e0a8:	28bff804 	addi	r2,r5,-32
  80e0ac:	11c03fcc 	andi	r7,r2,255
  80e0b0:	39c0201c 	xori	r7,r7,128
  80e0b4:	39ffe004 	addi	r7,r7,-128
  80e0b8:	003fb606 	br	80df94 <match_file_record_to_name_ext+0x28c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e0bc:	38bff804 	addi	r2,r7,-32
  80e0c0:	10803fcc 	andi	r2,r2,255
  80e0c4:	1080201c 	xori	r2,r2,128
  80e0c8:	10bfe004 	addi	r2,r2,-128
  80e0cc:	003f4006 	br	80ddd0 <match_file_record_to_name_ext+0xc8>
  80e0d0:	38bff804 	addi	r2,r7,-32
  80e0d4:	12003fcc 	andi	r8,r2,255
  80e0d8:	4200201c 	xori	r8,r8,128
  80e0dc:	423fe004 	addi	r8,r8,-128
  80e0e0:	003f3306 	br	80ddb0 <match_file_record_to_name_ext+0xa8>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e0e4:	30803fcc 	andi	r2,r6,255
  80e0e8:	1080201c 	xori	r2,r2,128
  80e0ec:	10bfe004 	addi	r2,r2,-128
  80e0f0:	003fc306 	br	80e000 <match_file_record_to_name_ext+0x2f8>
  80e0f4:	21003fcc 	andi	r4,r4,255
  80e0f8:	2100201c 	xori	r4,r4,128
  80e0fc:	213fe004 	addi	r4,r4,-128
  80e100:	003fb606 	br	80dfdc <match_file_record_to_name_ext+0x2d4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e104:	38bff804 	addi	r2,r7,-32
  80e108:	10803fcc 	andi	r2,r2,255
  80e10c:	1080201c 	xori	r2,r2,128
  80e110:	10bfe004 	addi	r2,r2,-128
  80e114:	003f3f06 	br	80de14 <match_file_record_to_name_ext+0x10c>
  80e118:	38bff804 	addi	r2,r7,-32
  80e11c:	12003fcc 	andi	r8,r2,255
  80e120:	4200201c 	xori	r8,r8,128
  80e124:	423fe004 	addi	r8,r8,-128
  80e128:	003f3206 	br	80ddf4 <match_file_record_to_name_ext+0xec>
  80e12c:	38bff804 	addi	r2,r7,-32
  80e130:	10803fcc 	andi	r2,r2,255
  80e134:	1080201c 	xori	r2,r2,128
  80e138:	10bfe004 	addi	r2,r2,-128
  80e13c:	003f4606 	br	80de58 <match_file_record_to_name_ext+0x150>
  80e140:	38bff804 	addi	r2,r7,-32
  80e144:	12003fcc 	andi	r8,r2,255
  80e148:	4200201c 	xori	r8,r8,128
  80e14c:	423fe004 	addi	r8,r8,-128
  80e150:	003f3906 	br	80de38 <match_file_record_to_name_ext+0x130>
  80e154:	38bff804 	addi	r2,r7,-32
  80e158:	10803fcc 	andi	r2,r2,255
  80e15c:	1080201c 	xori	r2,r2,128
  80e160:	10bfe004 	addi	r2,r2,-128
  80e164:	003f4d06 	br	80de9c <match_file_record_to_name_ext+0x194>
  80e168:	38bff804 	addi	r2,r7,-32
  80e16c:	12003fcc 	andi	r8,r2,255
  80e170:	4200201c 	xori	r8,r8,128
  80e174:	423fe004 	addi	r8,r8,-128
  80e178:	003f4006 	br	80de7c <match_file_record_to_name_ext+0x174>
  80e17c:	38bff804 	addi	r2,r7,-32
  80e180:	10803fcc 	andi	r2,r2,255
  80e184:	1080201c 	xori	r2,r2,128
  80e188:	10bfe004 	addi	r2,r2,-128
  80e18c:	003f5406 	br	80dee0 <match_file_record_to_name_ext+0x1d8>
  80e190:	38bff804 	addi	r2,r7,-32
  80e194:	12003fcc 	andi	r8,r2,255
  80e198:	4200201c 	xori	r8,r8,128
  80e19c:	423fe004 	addi	r8,r8,-128
  80e1a0:	003f4706 	br	80dec0 <match_file_record_to_name_ext+0x1b8>
  80e1a4:	28803fcc 	andi	r2,r5,255
  80e1a8:	1080201c 	xori	r2,r2,128
  80e1ac:	10bfe004 	addi	r2,r2,-128
  80e1b0:	003f5e06 	br	80df2c <match_file_record_to_name_ext+0x224>
  80e1b4:	39c03fcc 	andi	r7,r7,255
  80e1b8:	39c0201c 	xori	r7,r7,128
  80e1bc:	39ffe004 	addi	r7,r7,-128
  80e1c0:	003f5106 	br	80df08 <match_file_record_to_name_ext+0x200>
  80e1c4:	0011883a 	mov	r8,zero
  80e1c8:	003f5906 	br	80df30 <match_file_record_to_name_ext+0x228>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e1cc:	0011883a 	mov	r8,zero
            match = false;
			break;
        }
    }
	return match;
}
  80e1d0:	4005883a 	mov	r2,r8
  80e1d4:	f800283a 	ret

0080e1d8 <convert_filename_to_name_extension>:
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e1d8:	21c00003 	ldbu	r7,0(r4)
  80e1dc:	00800b84 	movi	r2,46
  80e1e0:	38c03fcc 	andi	r3,r7,255
  80e1e4:	18c0201c 	xori	r3,r3,128
  80e1e8:	18ffe004 	addi	r3,r3,-128
  80e1ec:	1880ae26 	beq	r3,r2,80e4a8 <convert_filename_to_name_extension+0x2d0>
        {
            name[counter] = filename[local];
  80e1f0:	29c00005 	stb	r7,0(r5)
            if (filename[local] != 0) local++;
  80e1f4:	20800007 	ldb	r2,0(r4)
  80e1f8:	10006226 	beq	r2,zero,80e384 <convert_filename_to_name_extension+0x1ac>
  80e1fc:	02400044 	movi	r9,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e200:	224f883a 	add	r7,r4,r9
  80e204:	3a000003 	ldbu	r8,0(r7)
  80e208:	00800b84 	movi	r2,46
  80e20c:	3815883a 	mov	r10,r7
  80e210:	40c03fcc 	andi	r3,r8,255
  80e214:	18c0201c 	xori	r3,r3,128
  80e218:	18ffe004 	addi	r3,r3,-128
  80e21c:	18809726 	beq	r3,r2,80e47c <convert_filename_to_name_extension+0x2a4>
        {
            name[counter] = filename[local];
  80e220:	2a000045 	stb	r8,1(r5)
            if (filename[local] != 0) local++;
  80e224:	50800007 	ldb	r2,0(r10)
  80e228:	10005c26 	beq	r2,zero,80e39c <convert_filename_to_name_extension+0x1c4>
  80e22c:	4a400044 	addi	r9,r9,1
  80e230:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e234:	3a000003 	ldbu	r8,0(r7)
  80e238:	00800b84 	movi	r2,46
  80e23c:	40c03fcc 	andi	r3,r8,255
  80e240:	18c0201c 	xori	r3,r3,128
  80e244:	18ffe004 	addi	r3,r3,-128
  80e248:	18809426 	beq	r3,r2,80e49c <convert_filename_to_name_extension+0x2c4>
        {
            name[counter] = filename[local];
  80e24c:	2a000085 	stb	r8,2(r5)
            if (filename[local] != 0) local++;
  80e250:	38800007 	ldb	r2,0(r7)
  80e254:	10005626 	beq	r2,zero,80e3b0 <convert_filename_to_name_extension+0x1d8>
  80e258:	4a400044 	addi	r9,r9,1
  80e25c:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e260:	3a000003 	ldbu	r8,0(r7)
  80e264:	00800b84 	movi	r2,46
  80e268:	40c03fcc 	andi	r3,r8,255
  80e26c:	18c0201c 	xori	r3,r3,128
  80e270:	18ffe004 	addi	r3,r3,-128
  80e274:	18807e26 	beq	r3,r2,80e470 <convert_filename_to_name_extension+0x298>
        {
            name[counter] = filename[local];
  80e278:	2a0000c5 	stb	r8,3(r5)
            if (filename[local] != 0) local++;
  80e27c:	38800007 	ldb	r2,0(r7)
  80e280:	10004f26 	beq	r2,zero,80e3c0 <convert_filename_to_name_extension+0x1e8>
  80e284:	4a400044 	addi	r9,r9,1
  80e288:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e28c:	3a000003 	ldbu	r8,0(r7)
  80e290:	00800b84 	movi	r2,46
  80e294:	40c03fcc 	andi	r3,r8,255
  80e298:	18c0201c 	xori	r3,r3,128
  80e29c:	18ffe004 	addi	r3,r3,-128
  80e2a0:	18807026 	beq	r3,r2,80e464 <convert_filename_to_name_extension+0x28c>
        {
            name[counter] = filename[local];
  80e2a4:	2a000105 	stb	r8,4(r5)
            if (filename[local] != 0) local++;
  80e2a8:	38800007 	ldb	r2,0(r7)
  80e2ac:	10004826 	beq	r2,zero,80e3d0 <convert_filename_to_name_extension+0x1f8>
  80e2b0:	4a400044 	addi	r9,r9,1
  80e2b4:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e2b8:	3a000003 	ldbu	r8,0(r7)
  80e2bc:	00800b84 	movi	r2,46
  80e2c0:	40c03fcc 	andi	r3,r8,255
  80e2c4:	18c0201c 	xori	r3,r3,128
  80e2c8:	18ffe004 	addi	r3,r3,-128
  80e2cc:	18805226 	beq	r3,r2,80e418 <convert_filename_to_name_extension+0x240>
        {
            name[counter] = filename[local];
  80e2d0:	2a000145 	stb	r8,5(r5)
            if (filename[local] != 0) local++;
  80e2d4:	38800007 	ldb	r2,0(r7)
  80e2d8:	10004126 	beq	r2,zero,80e3e0 <convert_filename_to_name_extension+0x208>
  80e2dc:	4a400044 	addi	r9,r9,1
  80e2e0:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e2e4:	3a000003 	ldbu	r8,0(r7)
  80e2e8:	00800b84 	movi	r2,46
  80e2ec:	40c03fcc 	andi	r3,r8,255
  80e2f0:	18c0201c 	xori	r3,r3,128
  80e2f4:	18ffe004 	addi	r3,r3,-128
  80e2f8:	18804f26 	beq	r3,r2,80e438 <convert_filename_to_name_extension+0x260>
        {
            name[counter] = filename[local];
  80e2fc:	2a000185 	stb	r8,6(r5)
            if (filename[local] != 0) local++;
  80e300:	38800007 	ldb	r2,0(r7)
  80e304:	10003a26 	beq	r2,zero,80e3f0 <convert_filename_to_name_extension+0x218>
  80e308:	4a400044 	addi	r9,r9,1
  80e30c:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e310:	3a000003 	ldbu	r8,0(r7)
  80e314:	00800b84 	movi	r2,46
  80e318:	40c03fcc 	andi	r3,r8,255
  80e31c:	18c0201c 	xori	r3,r3,128
  80e320:	18ffe004 	addi	r3,r3,-128
  80e324:	18804c26 	beq	r3,r2,80e458 <convert_filename_to_name_extension+0x280>
        {
            name[counter] = filename[local];
  80e328:	2a0001c5 	stb	r8,7(r5)
            if (filename[local] != 0) local++;
  80e32c:	38800007 	ldb	r2,0(r7)
  80e330:	10000726 	beq	r2,zero,80e350 <convert_filename_to_name_extension+0x178>
  80e334:	4a400044 	addi	r9,r9,1
  80e338:	490f883a 	add	r7,r9,r4
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  80e33c:	38c00007 	ldb	r3,0(r7)
  80e340:	00800b84 	movi	r2,46
  80e344:	1880021e 	bne	r3,r2,80e350 <convert_filename_to_name_extension+0x178>
  80e348:	4a400044 	addi	r9,r9,1
  80e34c:	224f883a 	add	r7,r4,r9
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e350:	38800003 	ldbu	r2,0(r7)
  80e354:	10002c1e 	bne	r2,zero,80e408 <convert_filename_to_name_extension+0x230>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e358:	00800804 	movi	r2,32
  80e35c:	30800005 	stb	r2,0(r6)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e360:	38800003 	ldbu	r2,0(r7)
  80e364:	1000241e 	bne	r2,zero,80e3f8 <convert_filename_to_name_extension+0x220>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e368:	00800804 	movi	r2,32
  80e36c:	30800045 	stb	r2,1(r6)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e370:	38800003 	ldbu	r2,0(r7)
  80e374:	1000011e 	bne	r2,zero,80e37c <convert_filename_to_name_extension+0x1a4>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e378:	00800804 	movi	r2,32
  80e37c:	30800085 	stb	r2,2(r6)
  80e380:	f800283a 	ret
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e384:	22000003 	ldbu	r8,0(r4)
  80e388:	2015883a 	mov	r10,r4
        {
            extension[counter] = ' ';
        }
    }

}
  80e38c:	0013883a 	mov	r9,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
  80e390:	2a000045 	stb	r8,1(r5)
            if (filename[local] != 0) local++;
  80e394:	50800007 	ldb	r2,0(r10)
  80e398:	103fa41e 	bne	r2,zero,80e22c <convert_filename_to_name_extension+0x54>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e39c:	224f883a 	add	r7,r4,r9
  80e3a0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e3a4:	2a000085 	stb	r8,2(r5)
            if (filename[local] != 0) local++;
  80e3a8:	38800007 	ldb	r2,0(r7)
  80e3ac:	103faa1e 	bne	r2,zero,80e258 <convert_filename_to_name_extension+0x80>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e3b0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e3b4:	2a0000c5 	stb	r8,3(r5)
            if (filename[local] != 0) local++;
  80e3b8:	38800007 	ldb	r2,0(r7)
  80e3bc:	103fb11e 	bne	r2,zero,80e284 <convert_filename_to_name_extension+0xac>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e3c0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e3c4:	2a000105 	stb	r8,4(r5)
            if (filename[local] != 0) local++;
  80e3c8:	38800007 	ldb	r2,0(r7)
  80e3cc:	103fb81e 	bne	r2,zero,80e2b0 <convert_filename_to_name_extension+0xd8>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e3d0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e3d4:	2a000145 	stb	r8,5(r5)
            if (filename[local] != 0) local++;
  80e3d8:	38800007 	ldb	r2,0(r7)
  80e3dc:	103fbf1e 	bne	r2,zero,80e2dc <convert_filename_to_name_extension+0x104>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e3e0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e3e4:	2a000185 	stb	r8,6(r5)
            if (filename[local] != 0) local++;
  80e3e8:	38800007 	ldb	r2,0(r7)
  80e3ec:	103fc61e 	bne	r2,zero,80e308 <convert_filename_to_name_extension+0x130>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e3f0:	3a000003 	ldbu	r8,0(r7)
  80e3f4:	003fcc06 	br	80e328 <convert_filename_to_name_extension+0x150>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
  80e3f8:	4a400044 	addi	r9,r9,1
  80e3fc:	224f883a 	add	r7,r4,r9
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  80e400:	30800045 	stb	r2,1(r6)
  80e404:	003fda06 	br	80e370 <convert_filename_to_name_extension+0x198>
            local++;
  80e408:	4a400044 	addi	r9,r9,1
  80e40c:	224f883a 	add	r7,r4,r9
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  80e410:	30800005 	stb	r2,0(r6)
  80e414:	003fd206 	br	80e360 <convert_filename_to_name_extension+0x188>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e418:	00800804 	movi	r2,32
  80e41c:	28800145 	stb	r2,5(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e420:	3a000003 	ldbu	r8,0(r7)
  80e424:	00800b84 	movi	r2,46
  80e428:	40c03fcc 	andi	r3,r8,255
  80e42c:	18c0201c 	xori	r3,r3,128
  80e430:	18ffe004 	addi	r3,r3,-128
  80e434:	18bfb11e 	bne	r3,r2,80e2fc <convert_filename_to_name_extension+0x124>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e438:	00800804 	movi	r2,32
  80e43c:	28800185 	stb	r2,6(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e440:	3a000003 	ldbu	r8,0(r7)
  80e444:	00800b84 	movi	r2,46
  80e448:	40c03fcc 	andi	r3,r8,255
  80e44c:	18c0201c 	xori	r3,r3,128
  80e450:	18ffe004 	addi	r3,r3,-128
  80e454:	18bfb41e 	bne	r3,r2,80e328 <convert_filename_to_name_extension+0x150>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e458:	00800804 	movi	r2,32
  80e45c:	288001c5 	stb	r2,7(r5)
  80e460:	003fb606 	br	80e33c <convert_filename_to_name_extension+0x164>
  80e464:	00800804 	movi	r2,32
  80e468:	28800105 	stb	r2,4(r5)
  80e46c:	003f9206 	br	80e2b8 <convert_filename_to_name_extension+0xe0>
  80e470:	00800804 	movi	r2,32
  80e474:	288000c5 	stb	r2,3(r5)
  80e478:	003f8406 	br	80e28c <convert_filename_to_name_extension+0xb4>
  80e47c:	00800804 	movi	r2,32
  80e480:	28800045 	stb	r2,1(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e484:	3a000003 	ldbu	r8,0(r7)
  80e488:	00800b84 	movi	r2,46
  80e48c:	40c03fcc 	andi	r3,r8,255
  80e490:	18c0201c 	xori	r3,r3,128
  80e494:	18ffe004 	addi	r3,r3,-128
  80e498:	18bf6c1e 	bne	r3,r2,80e24c <convert_filename_to_name_extension+0x74>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e49c:	00800804 	movi	r2,32
  80e4a0:	28800085 	stb	r2,2(r5)
  80e4a4:	003f6e06 	br	80e260 <convert_filename_to_name_extension+0x88>
  80e4a8:	00800804 	movi	r2,32
  80e4ac:	0013883a 	mov	r9,zero
  80e4b0:	28800005 	stb	r2,0(r5)
  80e4b4:	003f5206 	br	80e200 <convert_filename_to_name_extension+0x28>

0080e4b8 <copy_file_record_name_to_string>:
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e4b8:	21800003 	ldbu	r6,0(r4)
  80e4bc:	00800804 	movi	r2,32
  80e4c0:	30c03fcc 	andi	r3,r6,255
  80e4c4:	18804826 	beq	r3,r2,80e5e8 <copy_file_record_name_to_string+0x130>
		{
			file_name[flength] = file_record->name[index];
  80e4c8:	29800005 	stb	r6,0(r5)
  80e4cc:	01800044 	movi	r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e4d0:	20c00043 	ldbu	r3,1(r4)
  80e4d4:	01c00804 	movi	r7,32
  80e4d8:	18803fcc 	andi	r2,r3,255
  80e4dc:	11c00326 	beq	r2,r7,80e4ec <copy_file_record_name_to_string+0x34>
		{
			file_name[flength] = file_record->name[index];
  80e4e0:	2985883a 	add	r2,r5,r6
  80e4e4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e4e8:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e4ec:	20c00083 	ldbu	r3,2(r4)
  80e4f0:	18803fcc 	andi	r2,r3,255
  80e4f4:	11c00326 	beq	r2,r7,80e504 <copy_file_record_name_to_string+0x4c>
		{
			file_name[flength] = file_record->name[index];
  80e4f8:	2985883a 	add	r2,r5,r6
  80e4fc:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e500:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e504:	20c000c3 	ldbu	r3,3(r4)
  80e508:	18803fcc 	andi	r2,r3,255
  80e50c:	11c00326 	beq	r2,r7,80e51c <copy_file_record_name_to_string+0x64>
		{
			file_name[flength] = file_record->name[index];
  80e510:	2985883a 	add	r2,r5,r6
  80e514:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e518:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e51c:	20c00103 	ldbu	r3,4(r4)
  80e520:	18803fcc 	andi	r2,r3,255
  80e524:	11c00326 	beq	r2,r7,80e534 <copy_file_record_name_to_string+0x7c>
		{
			file_name[flength] = file_record->name[index];
  80e528:	2985883a 	add	r2,r5,r6
  80e52c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e530:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e534:	20c00143 	ldbu	r3,5(r4)
  80e538:	18803fcc 	andi	r2,r3,255
  80e53c:	11c00326 	beq	r2,r7,80e54c <copy_file_record_name_to_string+0x94>
		{
			file_name[flength] = file_record->name[index];
  80e540:	2985883a 	add	r2,r5,r6
  80e544:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e548:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e54c:	20c00183 	ldbu	r3,6(r4)
  80e550:	18803fcc 	andi	r2,r3,255
  80e554:	11c00326 	beq	r2,r7,80e564 <copy_file_record_name_to_string+0xac>
		{
			file_name[flength] = file_record->name[index];
  80e558:	2985883a 	add	r2,r5,r6
  80e55c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e560:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e564:	20c001c3 	ldbu	r3,7(r4)
  80e568:	18803fcc 	andi	r2,r3,255
  80e56c:	11c00326 	beq	r2,r7,80e57c <copy_file_record_name_to_string+0xc4>
		{
			file_name[flength] = file_record->name[index];
  80e570:	2985883a 	add	r2,r5,r6
  80e574:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e578:	31800044 	addi	r6,r6,1
		}
	}
	if (file_record->extension[0] != ' ')
  80e57c:	20800203 	ldbu	r2,8(r4)
  80e580:	11c01626 	beq	r2,r7,80e5dc <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
  80e584:	2985883a 	add	r2,r5,r6
  80e588:	00c00b84 	movi	r3,46
  80e58c:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e590:	20c00203 	ldbu	r3,8(r4)
		}
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
  80e594:	31800044 	addi	r6,r6,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e598:	18803fcc 	andi	r2,r3,255
  80e59c:	11c00326 	beq	r2,r7,80e5ac <copy_file_record_name_to_string+0xf4>
			{
				file_name[flength] = file_record->extension[index];
  80e5a0:	2985883a 	add	r2,r5,r6
  80e5a4:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80e5a8:	31800044 	addi	r6,r6,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e5ac:	20c00243 	ldbu	r3,9(r4)
  80e5b0:	18803fcc 	andi	r2,r3,255
  80e5b4:	11c00326 	beq	r2,r7,80e5c4 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
  80e5b8:	2985883a 	add	r2,r5,r6
  80e5bc:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80e5c0:	31800044 	addi	r6,r6,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e5c4:	21000283 	ldbu	r4,10(r4)
  80e5c8:	20803fcc 	andi	r2,r4,255
  80e5cc:	11c00326 	beq	r2,r7,80e5dc <copy_file_record_name_to_string+0x124>
			{
				file_name[flength] = file_record->extension[index];
  80e5d0:	2985883a 	add	r2,r5,r6
  80e5d4:	11000005 	stb	r4,0(r2)
				flength = flength + 1;
  80e5d8:	31800044 	addi	r6,r6,1
			}
		}
	}
	file_name[flength] = 0;
  80e5dc:	3145883a 	add	r2,r6,r5
  80e5e0:	10000005 	stb	zero,0(r2)
}
  80e5e4:	f800283a 	ret
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e5e8:	000d883a 	mov	r6,zero
  80e5ec:	003fb806 	br	80e4d0 <copy_file_record_name_to_string+0x18>

0080e5f0 <alt_up_sd_card_set_attributes>:
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
  80e5f0:	20bfffcc 	andi	r2,r4,65535
  80e5f4:	10a0001c 	xori	r2,r2,32768
  80e5f8:	10a00004 	addi	r2,r2,-32768
  80e5fc:	100491ba 	slli	r2,r2,6
  80e600:	00c02074 	movhi	r3,129
  80e604:	18de2d04 	addi	r3,r3,30900

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e608:	213fffcc 	andi	r4,r4,65535
    {
        if (active_files[file_handle].in_use)
  80e60c:	10c7883a 	add	r3,r2,r3

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e610:	008004c4 	movi	r2,19
  80e614:	11000336 	bltu	r2,r4,80e624 <alt_up_sd_card_set_attributes+0x34>
    {
        if (active_files[file_handle].in_use)
  80e618:	18800f17 	ldw	r2,60(r3)
  80e61c:	10000126 	beq	r2,zero,80e624 <alt_up_sd_card_set_attributes+0x34>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  80e620:	194002c5 	stb	r5,11(r3)
  80e624:	f800283a 	ret

0080e628 <alt_up_sd_card_get_attributes>:
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
  80e628:	20bfffcc 	andi	r2,r4,65535
  80e62c:	10a0001c 	xori	r2,r2,32768
  80e630:	10a00004 	addi	r2,r2,-32768
  80e634:	100491ba 	slli	r2,r2,6
  80e638:	00c02074 	movhi	r3,129
  80e63c:	18de2d04 	addi	r3,r3,30900
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e640:	213fffcc 	andi	r4,r4,65535
  80e644:	014004c4 	movi	r5,19
    {
        if (active_files[file_handle].in_use)
  80e648:	10c7883a 	add	r3,r2,r3
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e64c:	29000436 	bltu	r5,r4,80e660 <alt_up_sd_card_get_attributes+0x38>
    {
        if (active_files[file_handle].in_use)
  80e650:	18800f17 	ldw	r2,60(r3)
  80e654:	10000226 	beq	r2,zero,80e660 <alt_up_sd_card_get_attributes+0x38>
  80e658:	188002c3 	ldbu	r2,11(r3)
  80e65c:	f800283a 	ret
  80e660:	00bfffc4 	movi	r2,-1
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
		}
	}
	return result;
}
  80e664:	f800283a 	ret

0080e668 <alt_up_sd_card_is_Present>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e668:	d0a76117 	ldw	r2,-25212(gp)
  80e66c:	10000426 	beq	r2,zero,80e680 <alt_up_sd_card_is_Present+0x18>
  80e670:	d0e75917 	ldw	r3,-25244(gp)
  80e674:	1880002b 	ldhuio	r2,0(r3)
  80e678:	1080008c 	andi	r2,r2,2
  80e67c:	1000131e 	bne	r2,zero,80e6cc <alt_up_sd_card_is_Present+0x64>
    {
        result = true;
    }
	else if (initialized == true)
  80e680:	d0e75717 	ldw	r3,-25252(gp)
  80e684:	00800044 	movi	r2,1
  80e688:	18800226 	beq	r3,r2,80e694 <alt_up_sd_card_is_Present+0x2c>

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e68c:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
  80e690:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e694:	00802074 	movhi	r2,129
  80e698:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80e69c:	00c02074 	movhi	r3,129
  80e6a0:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e6a4:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80e6a8:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80e6ac:	d0275815 	stw	zero,-25248(gp)
  80e6b0:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80e6b4:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80e6b8:	183fff15 	stw	zero,-4(r3)
  80e6bc:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e6c0:	18bffc1e 	bne	r3,r2,80e6b4 <alt_up_sd_card_is_Present+0x4c>
  80e6c4:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
  80e6c8:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e6cc:	00800044 	movi	r2,1
  80e6d0:	f800283a 	ret

0080e6d4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80e6d4:	deffff04 	addi	sp,sp,-4
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80e6d8:	01402074 	movhi	r5,129
  80e6dc:	29566b04 	addi	r5,r5,22956
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80e6e0:	dfc00015 	stw	ra,0(sp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80e6e4:	0812f880 	call	812f88 <alt_find_dev>

	if (dev != NULL)
  80e6e8:	10001226 	beq	r2,zero,80e734 <alt_up_sd_card_open_dev+0x60>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80e6ec:	11000a17 	ldw	r4,40(r2)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
		search_data.valid = false;
  80e6f0:	00c02074 	movhi	r3,129
  80e6f4:	18de1304 	addi	r3,r3,30796
  80e6f8:	18000415 	stw	zero,16(r3)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80e6fc:	21408d04 	addi	r5,r4,564
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80e700:	20c08904 	addi	r3,r4,548
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80e704:	21808404 	addi	r6,r4,528
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80e708:	21c08c04 	addi	r7,r4,560
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80e70c:	22008b04 	addi	r8,r4,556
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
  80e710:	d0a76115 	stw	r2,-25212(gp)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80e714:	d1675915 	stw	r5,-25244(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80e718:	d0e75a15 	stw	r3,-25240(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80e71c:	d1a75b15 	stw	r6,-25236(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80e720:	d1e75c15 	stw	r7,-25232(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80e724:	d2275d15 	stw	r8,-25228(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  80e728:	d1275e15 	stw	r4,-25224(gp)
		device_pointer = dev;
		initialized = false;
  80e72c:	d0275715 	stw	zero,-25252(gp)
		is_sd_card_formated_as_FAT16 = false;
  80e730:	d0275815 	stw	zero,-25248(gp)
		search_data.valid = false;
	}
	return dev;
}
  80e734:	dfc00017 	ldw	ra,0(sp)
  80e738:	dec00104 	addi	sp,sp,4
  80e73c:	f800283a 	ret

0080e740 <get_dir_divider_location>:
}


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  80e740:	defffe04 	addi	sp,sp,-8
  80e744:	dc000015 	stw	r16,0(sp)
  80e748:	dfc00115 	stw	ra,4(sp)
  80e74c:	2021883a 	mov	r16,r4
    int index = 0;
    int length = strlen(name);
  80e750:	080400c0 	call	80400c <strlen>
  80e754:	1009883a 	mov	r4,r2
    
    for(index = 0; index < length; index++)
  80e758:	0080160e 	bge	zero,r2,80e7b4 <get_dir_divider_location+0x74>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80e75c:	80800007 	ldb	r2,0(r16)
  80e760:	01401704 	movi	r5,92
  80e764:	11401126 	beq	r2,r5,80e7ac <get_dir_divider_location+0x6c>
  80e768:	00c00bc4 	movi	r3,47
  80e76c:	10c00f26 	beq	r2,r3,80e7ac <get_dir_divider_location+0x6c>
  80e770:	280d883a 	mov	r6,r5
  80e774:	0005883a 	mov	r2,zero
  80e778:	180b883a 	mov	r5,r3
  80e77c:	00000306 	br	80e78c <get_dir_divider_location+0x4c>
  80e780:	18c00007 	ldb	r3,0(r3)
  80e784:	19800526 	beq	r3,r6,80e79c <get_dir_divider_location+0x5c>
  80e788:	19400426 	beq	r3,r5,80e79c <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80e78c:	10800044 	addi	r2,r2,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80e790:	8087883a 	add	r3,r16,r2
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80e794:	20bffa1e 	bne	r4,r2,80e780 <get_dir_divider_location+0x40>
        {
            break;
        }
    }
    
    if (index == length)
  80e798:	00bfffc4 	movi	r2,-1
    {
        index = -1;
    }
    
    return index;
}
  80e79c:	dfc00117 	ldw	ra,4(sp)
  80e7a0:	dc000017 	ldw	r16,0(sp)
  80e7a4:	dec00204 	addi	sp,sp,8
  80e7a8:	f800283a 	ret
        {
            break;
        }
    }
    
    if (index == length)
  80e7ac:	0005883a 	mov	r2,zero
  80e7b0:	003ffa06 	br	80e79c <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80e7b4:	0005883a 	mov	r2,zero
        {
            break;
        }
    }
    
    if (index == length)
  80e7b8:	203ff81e 	bne	r4,zero,80e79c <get_dir_divider_location+0x5c>
  80e7bc:	003ff606 	br	80e798 <get_dir_divider_location+0x58>

0080e7c0 <check_file_name_for_FAT16_compliance>:
}


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  80e7c0:	defffe04 	addi	sp,sp,-8
  80e7c4:	dc000015 	stw	r16,0(sp)
  80e7c8:	dfc00115 	stw	ra,4(sp)
  80e7cc:	2021883a 	mov	r16,r4
    int length = strlen(file_name);
  80e7d0:	080400c0 	call	80400c <strlen>
  80e7d4:	100f883a 	mov	r7,r2
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e7d8:	00802e0e 	bge	zero,r2,80e894 <check_file_name_for_FAT16_compliance+0xd4>
    {
        if ((file_name[index] == ' ') ||
  80e7dc:	80c00007 	ldb	r3,0(r16)
  80e7e0:	00800804 	movi	r2,32
  80e7e4:	18801826 	beq	r3,r2,80e848 <check_file_name_for_FAT16_compliance+0x88>
  80e7e8:	017fffc4 	movi	r5,-1
  80e7ec:	1017883a 	mov	r11,r2
  80e7f0:	0009883a 	mov	r4,zero
  80e7f4:	280d883a 	mov	r6,r5
  80e7f8:	02001704 	movi	r8,92
  80e7fc:	02400bc4 	movi	r9,47
  80e800:	02800244 	movi	r10,9
  80e804:	03400b84 	movi	r13,46
  80e808:	030000c4 	movi	r12,3
  80e80c:	20bfffc4 	addi	r2,r4,-1
  80e810:	11802b26 	beq	r2,r6,80e8c0 <check_file_name_for_FAT16_compliance+0x100>
  80e814:	2145c83a 	sub	r2,r4,r5
  80e818:	12801726 	beq	r2,r10,80e878 <check_file_name_for_FAT16_compliance+0xb8>
  80e81c:	29801826 	beq	r5,r6,80e880 <check_file_name_for_FAT16_compliance+0xc0>
  80e820:	6080170e 	bge	r12,r2,80e880 <check_file_name_for_FAT16_compliance+0xc0>
  80e824:	1a000126 	beq	r3,r8,80e82c <check_file_name_for_FAT16_compliance+0x6c>
  80e828:	1a40071e 	bne	r3,r9,80e848 <check_file_name_for_FAT16_compliance+0x88>
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  80e82c:	200d883a 	mov	r6,r4
  80e830:	200b883a 	mov	r5,r4
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e834:	21000044 	addi	r4,r4,1
  80e838:	39001626 	beq	r7,r4,80e894 <check_file_name_for_FAT16_compliance+0xd4>
    {
        if ((file_name[index] == ' ') ||
  80e83c:	2405883a 	add	r2,r4,r16
  80e840:	10c00007 	ldb	r3,0(r2)
  80e844:	1afff11e 	bne	r3,r11,80e80c <check_file_name_for_FAT16_compliance+0x4c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e848:	81c5883a 	add	r2,r16,r7
  80e84c:	113fffc7 	ldb	r4,-1(r2)
  80e850:	00c01704 	movi	r3,92
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e854:	000b883a 	mov	r5,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e858:	20c01326 	beq	r4,r3,80e8a8 <check_file_name_for_FAT16_compliance+0xe8>
  80e85c:	00800bc4 	movi	r2,47
  80e860:	20801126 	beq	r4,r2,80e8a8 <check_file_name_for_FAT16_compliance+0xe8>
    {
        result = false;
    }
    return result;
}
  80e864:	2805883a 	mov	r2,r5
  80e868:	dfc00117 	ldw	ra,4(sp)
  80e86c:	dc000017 	ldw	r16,0(sp)
  80e870:	dec00204 	addi	sp,sp,8
  80e874:	f800283a 	ret
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  80e878:	1b7ff31e 	bne	r3,r13,80e848 <check_file_name_for_FAT16_compliance+0x88>
  80e87c:	29bfe81e 	bne	r5,r6,80e820 <check_file_name_for_FAT16_compliance+0x60>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  80e880:	1a3fea26 	beq	r3,r8,80e82c <check_file_name_for_FAT16_compliance+0x6c>
  80e884:	1a7fe926 	beq	r3,r9,80e82c <check_file_name_for_FAT16_compliance+0x6c>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  80e888:	1b7fe926 	beq	r3,r13,80e830 <check_file_name_for_FAT16_compliance+0x70>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e88c:	21000044 	addi	r4,r4,1
  80e890:	393fea1e 	bne	r7,r4,80e83c <check_file_name_for_FAT16_compliance+0x7c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e894:	81c5883a 	add	r2,r16,r7
  80e898:	113fffc7 	ldb	r4,-1(r2)
  80e89c:	00c01704 	movi	r3,92
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80e8a0:	01400044 	movi	r5,1
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80e8a4:	20ffed1e 	bne	r4,r3,80e85c <check_file_name_for_FAT16_compliance+0x9c>
  80e8a8:	000b883a 	mov	r5,zero
    {
        result = false;
    }
    return result;
}
  80e8ac:	2805883a 	mov	r2,r5
  80e8b0:	dfc00117 	ldw	ra,4(sp)
  80e8b4:	dc000017 	ldw	r16,0(sp)
  80e8b8:	dec00204 	addi	sp,sp,8
  80e8bc:	f800283a 	ret
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  80e8c0:	1a3fe126 	beq	r3,r8,80e848 <check_file_name_for_FAT16_compliance+0x88>
  80e8c4:	1a7fd31e 	bne	r3,r9,80e814 <check_file_name_for_FAT16_compliance+0x54>
  80e8c8:	003fdf06 	br	80e848 <check_file_name_for_FAT16_compliance+0x88>

0080e8cc <filename_to_upper_case>:
}
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  80e8cc:	defffe04 	addi	sp,sp,-8
  80e8d0:	dc000015 	stw	r16,0(sp)
  80e8d4:	dfc00115 	stw	ra,4(sp)
  80e8d8:	2021883a 	mov	r16,r4
    int index;
    int length = strlen(file_name);
  80e8dc:	080400c0 	call	80400c <strlen>
  80e8e0:	100d883a 	mov	r6,r2
    
    for (index = 0; index < length; index++)
  80e8e4:	00800c0e 	bge	zero,r2,80e918 <filename_to_upper_case+0x4c>
  80e8e8:	8009883a 	mov	r4,r16
  80e8ec:	000b883a 	mov	r5,zero
  80e8f0:	01c00644 	movi	r7,25
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80e8f4:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  80e8f8:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80e8fc:	18bfe7c4 	addi	r2,r3,-97
  80e900:	10803fcc 	andi	r2,r2,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80e904:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80e908:	38800136 	bltu	r7,r2,80e910 <filename_to_upper_case+0x44>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80e90c:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  80e910:	21000044 	addi	r4,r4,1
  80e914:	317ff71e 	bne	r6,r5,80e8f4 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  80e918:	dfc00117 	ldw	ra,4(sp)
  80e91c:	dc000017 	ldw	r16,0(sp)
  80e920:	dec00204 	addi	sp,sp,8
  80e924:	f800283a 	ret

0080e928 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e928:	208007cc 	andi	r2,r4,31
}


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  80e92c:	2013883a 	mov	r9,r4
  80e930:	2815883a 	mov	r10,r5
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e934:	1000751e 	bne	r2,zero,80eb0c <Write_File_Record_At_Offset+0x1e4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e938:	d1276117 	ldw	r4,-25212(gp)
  80e93c:	20007026 	beq	r4,zero,80eb00 <Write_File_Record_At_Offset+0x1d8>
  80e940:	d0e75917 	ldw	r3,-25244(gp)
  80e944:	1880002b 	ldhuio	r2,0(r3)
  80e948:	1080008c 	andi	r2,r2,2
  80e94c:	10006c26 	beq	r2,zero,80eb00 <Write_File_Record_At_Offset+0x1d8>

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e950:	d0a75817 	ldw	r2,-25248(gp)
  80e954:	10006d26 	beq	r2,zero,80eb0c <Write_File_Record_At_Offset+0x1e4>
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e958:	28800043 	ldbu	r2,1(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e95c:	28c00003 	ldbu	r3,0(r5)
  80e960:	21000a17 	ldw	r4,40(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e964:	1004923a 	slli	r2,r2,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e968:	4909883a 	add	r4,r9,r4
  80e96c:	10c4b03a 	or	r2,r2,r3
  80e970:	10bfffcc 	andi	r2,r2,65535
  80e974:	10a0001c 	xori	r2,r2,32768
  80e978:	10a00004 	addi	r2,r2,-32768
  80e97c:	2080002d 	sthio	r2,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e980:	28c000c3 	ldbu	r3,3(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e984:	d0a76117 	ldw	r2,-25212(gp)
  80e988:	29400083 	ldbu	r5,2(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e98c:	1806923a 	slli	r3,r3,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e990:	11000a17 	ldw	r4,40(r2)
  80e994:	49c00084 	addi	r7,r9,2
  80e998:	1946b03a 	or	r3,r3,r5
  80e99c:	18ffffcc 	andi	r3,r3,65535
  80e9a0:	18e0001c 	xori	r3,r3,32768
  80e9a4:	3909883a 	add	r4,r7,r4
  80e9a8:	18e00004 	addi	r3,r3,-32768
  80e9ac:	20c0002d 	sthio	r3,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e9b0:	50800143 	ldbu	r2,5(r10)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e9b4:	51800103 	ldbu	r6,4(r10)
  80e9b8:	d0e76117 	ldw	r3,-25212(gp)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e9bc:	1004923a 	slli	r2,r2,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e9c0:	49000104 	addi	r4,r9,4
  80e9c4:	19400a17 	ldw	r5,40(r3)
  80e9c8:	1184b03a 	or	r2,r2,r6
  80e9cc:	10bfffcc 	andi	r2,r2,65535
  80e9d0:	10a0001c 	xori	r2,r2,32768
  80e9d4:	2149883a 	add	r4,r4,r5
  80e9d8:	10a00004 	addi	r2,r2,-32768
  80e9dc:	2080002d 	sthio	r2,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e9e0:	50c001c3 	ldbu	r3,7(r10)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e9e4:	51800183 	ldbu	r6,6(r10)
  80e9e8:	d0a76117 	ldw	r2,-25212(gp)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80e9ec:	1806923a 	slli	r3,r3,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80e9f0:	49000184 	addi	r4,r9,6
  80e9f4:	11400a17 	ldw	r5,40(r2)
  80e9f8:	1986b03a 	or	r3,r3,r6
  80e9fc:	18ffffcc 	andi	r3,r3,65535
  80ea00:	18e0001c 	xori	r3,r3,32768
  80ea04:	2149883a 	add	r4,r4,r5
  80ea08:	18e00004 	addi	r3,r3,-32768
  80ea0c:	20c0002d 	sthio	r3,0(r4)
        }        
        for (counter = 0; counter < 3; counter++)
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  80ea10:	d0e76117 	ldw	r3,-25212(gp)
  80ea14:	51400203 	ldbu	r5,8(r10)
  80ea18:	18800a17 	ldw	r2,40(r3)
  80ea1c:	4885883a 	add	r2,r9,r2
  80ea20:	11400225 	stbio	r5,8(r2)
  80ea24:	d0a76117 	ldw	r2,-25212(gp)
  80ea28:	51800243 	ldbu	r6,9(r10)
  80ea2c:	48c00044 	addi	r3,r9,1
  80ea30:	11000a17 	ldw	r4,40(r2)
  80ea34:	02000044 	movi	r8,1
  80ea38:	1907883a 	add	r3,r3,r4
  80ea3c:	19800225 	stbio	r6,8(r3)
  80ea40:	d0a76117 	ldw	r2,-25212(gp)
  80ea44:	51000283 	ldbu	r4,10(r10)
  80ea48:	10c00a17 	ldw	r3,40(r2)
  80ea4c:	38cf883a 	add	r7,r7,r3
  80ea50:	39000225 	stbio	r4,8(r7)
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  80ea54:	d0e76117 	ldw	r3,-25212(gp)
  80ea58:	514002c3 	ldbu	r5,11(r10)
  80ea5c:	18800a17 	ldw	r2,40(r3)
  80ea60:	4885883a 	add	r2,r9,r2
  80ea64:	114002e5 	stbio	r5,11(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  80ea68:	d0e76117 	ldw	r3,-25212(gp)
  80ea6c:	5100030b 	ldhu	r4,12(r10)
  80ea70:	18800a17 	ldw	r2,40(r3)
  80ea74:	4885883a 	add	r2,r9,r2
  80ea78:	110003ad 	sthio	r4,14(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  80ea7c:	d0e76117 	ldw	r3,-25212(gp)
  80ea80:	5140038b 	ldhu	r5,14(r10)
  80ea84:	18800a17 	ldw	r2,40(r3)
  80ea88:	4885883a 	add	r2,r9,r2
  80ea8c:	1140042d 	sthio	r5,16(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  80ea90:	d0e76117 	ldw	r3,-25212(gp)
  80ea94:	5100040b 	ldhu	r4,16(r10)
  80ea98:	18800a17 	ldw	r2,40(r3)
  80ea9c:	4885883a 	add	r2,r9,r2
  80eaa0:	110004ad 	sthio	r4,18(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  80eaa4:	d0e76117 	ldw	r3,-25212(gp)
  80eaa8:	5140048b 	ldhu	r5,18(r10)
  80eaac:	18800a17 	ldw	r2,40(r3)
  80eab0:	4885883a 	add	r2,r9,r2
  80eab4:	114005ad 	sthio	r5,22(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  80eab8:	d0e76117 	ldw	r3,-25212(gp)
  80eabc:	5100050b 	ldhu	r4,20(r10)
  80eac0:	18800a17 	ldw	r2,40(r3)
  80eac4:	4885883a 	add	r2,r9,r2
  80eac8:	1100062d 	sthio	r4,24(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  80eacc:	d0e76117 	ldw	r3,-25212(gp)
  80ead0:	5140058b 	ldhu	r5,22(r10)
  80ead4:	18800a17 	ldw	r2,40(r3)
  80ead8:	4885883a 	add	r2,r9,r2
  80eadc:	114006ad 	sthio	r5,26(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  80eae0:	d0e76117 	ldw	r3,-25212(gp)
  80eae4:	51000617 	ldw	r4,24(r10)
  80eae8:	18800a17 	ldw	r2,40(r3)
  80eaec:	4885883a 	add	r2,r9,r2
  80eaf0:	11000735 	stwio	r4,28(r2)
        current_sector_modified = true;                  
  80eaf4:	4005883a 	mov	r2,r8
  80eaf8:	d2276215 	stw	r8,-25208(gp)
  80eafc:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80eb00:	d0e75717 	ldw	r3,-25252(gp)
  80eb04:	00800044 	movi	r2,1
  80eb08:	18800226 	beq	r3,r2,80eb14 <Write_File_Record_At_Offset+0x1ec>
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
  80eb0c:	0005883a 	mov	r2,zero
        result = true;
    }
    return result;
}
  80eb10:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eb14:	00802074 	movhi	r2,129
  80eb18:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80eb1c:	00c02074 	movhi	r3,129
  80eb20:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eb24:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80eb28:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80eb2c:	d0275815 	stw	zero,-25248(gp)
  80eb30:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80eb34:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80eb38:	183fff15 	stw	zero,-4(r3)
  80eb3c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80eb40:	18bffc1e 	bne	r3,r2,80eb34 <Write_File_Record_At_Offset+0x20c>
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
  80eb44:	0005883a 	mov	r2,zero
        result = true;
    }
    return result;
}
  80eb48:	f800283a 	ret

0080eb4c <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80eb4c:	208007cc 	andi	r2,r4,31
}


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  80eb50:	2013883a 	mov	r9,r4
  80eb54:	2811883a 	mov	r8,r5
  80eb58:	3015883a 	mov	r10,r6
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80eb5c:	1000631e 	bne	r2,zero,80ecec <Read_File_Record_At_Offset+0x1a0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80eb60:	d1276117 	ldw	r4,-25212(gp)
  80eb64:	20005e26 	beq	r4,zero,80ece0 <Read_File_Record_At_Offset+0x194>
  80eb68:	d0e75917 	ldw	r3,-25244(gp)
  80eb6c:	1880002b 	ldhuio	r2,0(r3)
  80eb70:	1080008c 	andi	r2,r2,2
  80eb74:	10005a26 	beq	r2,zero,80ece0 <Read_File_Record_At_Offset+0x194>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80eb78:	d0a75817 	ldw	r2,-25248(gp)
  80eb7c:	10005b26 	beq	r2,zero,80ecec <Read_File_Record_At_Offset+0x1a0>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  80eb80:	20800a17 	ldw	r2,40(r4)
  80eb84:	4885883a 	add	r2,r9,r2
  80eb88:	10c00023 	ldbuio	r3,0(r2)
  80eb8c:	28c00005 	stb	r3,0(r5)
  80eb90:	d0e76117 	ldw	r3,-25212(gp)
  80eb94:	49800044 	addi	r6,r9,1
  80eb98:	18800a17 	ldw	r2,40(r3)
  80eb9c:	3085883a 	add	r2,r6,r2
  80eba0:	10c00023 	ldbuio	r3,0(r2)
  80eba4:	28c00045 	stb	r3,1(r5)
  80eba8:	d0e76117 	ldw	r3,-25212(gp)
  80ebac:	49400084 	addi	r5,r9,2
  80ebb0:	18800a17 	ldw	r2,40(r3)
  80ebb4:	2885883a 	add	r2,r5,r2
  80ebb8:	10c00023 	ldbuio	r3,0(r2)
  80ebbc:	40c00085 	stb	r3,2(r8)
  80ebc0:	d0e76117 	ldw	r3,-25212(gp)
  80ebc4:	488000c4 	addi	r2,r9,3
  80ebc8:	19000a17 	ldw	r4,40(r3)
  80ebcc:	1105883a 	add	r2,r2,r4
  80ebd0:	10c00023 	ldbuio	r3,0(r2)
  80ebd4:	40c000c5 	stb	r3,3(r8)
  80ebd8:	d0e76117 	ldw	r3,-25212(gp)
  80ebdc:	48800104 	addi	r2,r9,4
  80ebe0:	19000a17 	ldw	r4,40(r3)
  80ebe4:	1105883a 	add	r2,r2,r4
  80ebe8:	10c00023 	ldbuio	r3,0(r2)
  80ebec:	40c00105 	stb	r3,4(r8)
  80ebf0:	d0e76117 	ldw	r3,-25212(gp)
  80ebf4:	48800144 	addi	r2,r9,5
  80ebf8:	19000a17 	ldw	r4,40(r3)
  80ebfc:	1105883a 	add	r2,r2,r4
  80ec00:	10c00023 	ldbuio	r3,0(r2)
  80ec04:	40c00145 	stb	r3,5(r8)
  80ec08:	d0e76117 	ldw	r3,-25212(gp)
  80ec0c:	48800184 	addi	r2,r9,6
  80ec10:	19000a17 	ldw	r4,40(r3)
  80ec14:	1105883a 	add	r2,r2,r4
  80ec18:	10c00023 	ldbuio	r3,0(r2)
  80ec1c:	40c00185 	stb	r3,6(r8)
  80ec20:	d0e76117 	ldw	r3,-25212(gp)
  80ec24:	488001c4 	addi	r2,r9,7
  80ec28:	19000a17 	ldw	r4,40(r3)
  80ec2c:	1105883a 	add	r2,r2,r4
  80ec30:	10c00023 	ldbuio	r3,0(r2)
  80ec34:	40c001c5 	stb	r3,7(r8)
		}        
		for (counter = 0; counter < 3; counter++)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  80ec38:	d1276117 	ldw	r4,-25212(gp)
  80ec3c:	20800a17 	ldw	r2,40(r4)
  80ec40:	4885883a 	add	r2,r9,r2
  80ec44:	10c00223 	ldbuio	r3,8(r2)
  80ec48:	40c00205 	stb	r3,8(r8)
  80ec4c:	d0a76117 	ldw	r2,-25212(gp)
  80ec50:	10c00a17 	ldw	r3,40(r2)
  80ec54:	30cd883a 	add	r6,r6,r3
  80ec58:	30800223 	ldbuio	r2,8(r6)
  80ec5c:	40800245 	stb	r2,9(r8)
  80ec60:	d0e76117 	ldw	r3,-25212(gp)
  80ec64:	18800a17 	ldw	r2,40(r3)
  80ec68:	288b883a 	add	r5,r5,r2
  80ec6c:	28c00223 	ldbuio	r3,8(r5)
  80ec70:	40c00285 	stb	r3,10(r8)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  80ec74:	d1276117 	ldw	r4,-25212(gp)
  80ec78:	20800a17 	ldw	r2,40(r4)
  80ec7c:	4885883a 	add	r2,r9,r2
  80ec80:	10c002e3 	ldbuio	r3,11(r2)
  80ec84:	40c002c5 	stb	r3,11(r8)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  80ec88:	d1276117 	ldw	r4,-25212(gp)
  80ec8c:	20800a17 	ldw	r2,40(r4)
  80ec90:	4885883a 	add	r2,r9,r2
  80ec94:	10c003ab 	ldhuio	r3,14(r2)
  80ec98:	40c0030d 	sth	r3,12(r8)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  80ec9c:	1100042b 	ldhuio	r4,16(r2)
  80eca0:	4100038d 	sth	r4,14(r8)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  80eca4:	10c004ab 	ldhuio	r3,18(r2)
  80eca8:	40c0040d 	sth	r3,16(r8)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  80ecac:	110005ab 	ldhuio	r4,22(r2)
  80ecb0:	4100048d 	sth	r4,18(r8)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  80ecb4:	10c0062b 	ldhuio	r3,24(r2)
  80ecb8:	40c0050d 	sth	r3,20(r8)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  80ecbc:	110006ab 	ldhuio	r4,26(r2)
  80ecc0:	4100058d 	sth	r4,22(r8)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80ecc4:	10c00737 	ldwio	r3,28(r2)
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80ecc8:	00800044 	movi	r2,1
  80eccc:	42400c0d 	sth	r9,48(r8)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80ecd0:	40c00615 	stw	r3,24(r8)
		record->file_record_cluster = cluster_index;
  80ecd4:	42800a15 	stw	r10,40(r8)
		record->file_record_sector_in_cluster = sector_in_cluster;
  80ecd8:	41c00b15 	stw	r7,44(r8)
  80ecdc:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80ece0:	d0e75717 	ldw	r3,-25252(gp)
  80ece4:	00800044 	movi	r2,1
  80ece8:	18800226 	beq	r3,r2,80ecf4 <Read_File_Record_At_Offset+0x1a8>
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80ecec:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  80ecf0:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ecf4:	00802074 	movhi	r2,129
  80ecf8:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80ecfc:	00c02074 	movhi	r3,129
  80ed00:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ed04:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ed08:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ed0c:	d0275815 	stw	zero,-25248(gp)
  80ed10:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ed14:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ed18:	183fff15 	stw	zero,-4(r3)
  80ed1c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ed20:	18bffc1e 	bne	r3,r2,80ed14 <Read_File_Record_At_Offset+0x1c8>
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80ed24:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  80ed28:	f800283a 	ret

0080ed2c <Write_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ed2c:	d0a76117 	ldw	r2,-25212(gp)
  80ed30:	10000426 	beq	r2,zero,80ed44 <Write_Sector_Data+0x18>
  80ed34:	d0e75917 	ldw	r3,-25244(gp)
  80ed38:	1880002b 	ldhuio	r2,0(r3)
  80ed3c:	1080008c 	andi	r2,r2,2
  80ed40:	1000131e 	bne	r2,zero,80ed90 <Write_Sector_Data+0x64>
    {
        result = true;
    }
	else if (initialized == true)
  80ed44:	d0e75717 	ldw	r3,-25252(gp)
  80ed48:	00800044 	movi	r2,1
  80ed4c:	18800226 	beq	r3,r2,80ed58 <Write_Sector_Data+0x2c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ed50:	0005883a 	mov	r2,zero
        }
    }
    return result;
}
  80ed54:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ed58:	00802074 	movhi	r2,129
  80ed5c:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80ed60:	00c02074 	movhi	r3,129
  80ed64:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ed68:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ed6c:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ed70:	d0275815 	stw	zero,-25248(gp)
  80ed74:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ed78:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ed7c:	183fff15 	stw	zero,-4(r3)
  80ed80:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ed84:	18bffc1e 	bne	r3,r2,80ed78 <Write_Sector_Data+0x4c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ed88:	0005883a 	mov	r2,zero
        }
    }
    return result;
}
  80ed8c:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80ed90:	214b883a 	add	r5,r4,r5
  80ed94:	2806927a 	slli	r3,r5,9
  80ed98:	d0a75d17 	ldw	r2,-25228(gp)
  80ed9c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80eda0:	d0a75c17 	ldw	r2,-25232(gp)
  80eda4:	01000604 	movi	r4,24
  80eda8:	1100002d 	sthio	r4,0(r2)
  80edac:	d1275917 	ldw	r4,-25244(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80edb0:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80edb4:	10bfffcc 	andi	r2,r2,65535
  80edb8:	10c0010c 	andi	r3,r2,4
  80edbc:	183ffc1e 	bne	r3,zero,80edb0 <Write_Sector_Data+0x84>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80edc0:	1080040c 	andi	r2,r2,16
  80edc4:	103fe21e 	bne	r2,zero,80ed50 <Write_Sector_Data+0x24>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80edc8:	00800044 	movi	r2,1
  80edcc:	d1676315 	stw	r5,-25204(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80edd0:	d0276215 	stw	zero,-25208(gp)
  80edd4:	f800283a 	ret

0080edd8 <Read_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80edd8:	d0a76117 	ldw	r2,-25212(gp)
}


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  80eddc:	200d883a 	mov	r6,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ede0:	10000f26 	beq	r2,zero,80ee20 <Read_Sector_Data+0x48>
  80ede4:	d0e75917 	ldw	r3,-25244(gp)
  80ede8:	1880002b 	ldhuio	r2,0(r3)
  80edec:	1080008c 	andi	r2,r2,2
  80edf0:	10000b26 	beq	r2,zero,80ee20 <Read_Sector_Data+0x48>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  80edf4:	d0a76217 	ldw	r2,-25208(gp)
  80edf8:	10002926 	beq	r2,zero,80eea0 <Read_Sector_Data+0xc8>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  80edfc:	d1e76317 	ldw	r7,-25204(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ee00:	1880002b 	ldhuio	r2,0(r3)
  80ee04:	1080008c 	andi	r2,r2,2
  80ee08:	1000161e 	bne	r2,zero,80ee64 <Read_Sector_Data+0x8c>
    {
        result = true;
    }
	else if (initialized == true)
  80ee0c:	d0e75717 	ldw	r3,-25252(gp)
  80ee10:	00800044 	movi	r2,1
  80ee14:	18803426 	beq	r3,r2,80eee8 <Read_Sector_Data+0x110>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ee18:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  80ee1c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80ee20:	d0e75717 	ldw	r3,-25252(gp)
  80ee24:	00800044 	movi	r2,1
  80ee28:	18bffb1e 	bne	r3,r2,80ee18 <Read_Sector_Data+0x40>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ee2c:	00802074 	movhi	r2,129
  80ee30:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80ee34:	00c02074 	movhi	r3,129
  80ee38:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ee3c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ee40:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ee44:	d0275815 	stw	zero,-25248(gp)
  80ee48:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ee4c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ee50:	183fff15 	stw	zero,-4(r3)
  80ee54:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ee58:	18bffc1e 	bne	r3,r2,80ee4c <Read_Sector_Data+0x74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ee5c:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  80ee60:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80ee64:	3806927a 	slli	r3,r7,9
  80ee68:	d0a75d17 	ldw	r2,-25228(gp)
  80ee6c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80ee70:	d0a75c17 	ldw	r2,-25232(gp)
  80ee74:	01000604 	movi	r4,24
  80ee78:	1100002d 	sthio	r4,0(r2)
  80ee7c:	d1275917 	ldw	r4,-25244(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80ee80:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80ee84:	10bfffcc 	andi	r2,r2,65535
  80ee88:	10c0010c 	andi	r3,r2,4
  80ee8c:	183ffc1e 	bne	r3,zero,80ee80 <Read_Sector_Data+0xa8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80ee90:	1080040c 	andi	r2,r2,16
  80ee94:	103fe01e 	bne	r2,zero,80ee18 <Read_Sector_Data+0x40>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80ee98:	d1e76315 	stw	r7,-25204(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80ee9c:	d0276215 	stw	zero,-25208(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80eea0:	314b883a 	add	r5,r6,r5
  80eea4:	2806927a 	slli	r3,r5,9
  80eea8:	d0a75d17 	ldw	r2,-25228(gp)
  80eeac:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  80eeb0:	d0a75c17 	ldw	r2,-25232(gp)
  80eeb4:	01000444 	movi	r4,17
  80eeb8:	1100002d 	sthio	r4,0(r2)
  80eebc:	d1275917 	ldw	r4,-25244(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80eec0:	2080002b 	ldhuio	r2,0(r4)
		} while ((reg_state & 0x04)!=0);
  80eec4:	10bfffcc 	andi	r2,r2,65535
  80eec8:	10c0010c 	andi	r3,r2,4
  80eecc:	183ffc1e 	bne	r3,zero,80eec0 <Read_Sector_Data+0xe8>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  80eed0:	1080040c 	andi	r2,r2,16
  80eed4:	103fd01e 	bne	r2,zero,80ee18 <Read_Sector_Data+0x40>
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80eed8:	00800044 	movi	r2,1
  80eedc:	d1676315 	stw	r5,-25204(gp)
		} while ((reg_state & 0x04)!=0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
  80eee0:	d0276215 	stw	zero,-25208(gp)
  80eee4:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eee8:	00802074 	movhi	r2,129
  80eeec:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80eef0:	00c02074 	movhi	r3,129
  80eef4:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80eef8:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80eefc:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ef00:	d0275815 	stw	zero,-25248(gp)
  80ef04:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ef08:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ef0c:	183fff15 	stw	zero,-4(r3)
  80ef10:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ef14:	18bffc1e 	bne	r3,r2,80ef08 <Read_Sector_Data+0x130>
  80ef18:	003fbf06 	br	80ee18 <Read_Sector_Data+0x40>

0080ef1c <alt_up_sd_card_fclose>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ef1c:	d0a76117 	ldw	r2,-25212(gp)
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  80ef20:	defffc04 	addi	sp,sp,-16
  80ef24:	dfc00315 	stw	ra,12(sp)
  80ef28:	dc800215 	stw	r18,8(sp)
  80ef2c:	dc400115 	stw	r17,4(sp)
  80ef30:	dc000015 	stw	r16,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ef34:	10003026 	beq	r2,zero,80eff8 <alt_up_sd_card_fclose+0xdc>
  80ef38:	d0e75917 	ldw	r3,-25244(gp)
  80ef3c:	1880002b 	ldhuio	r2,0(r3)
  80ef40:	1080008c 	andi	r2,r2,2
  80ef44:	10002c26 	beq	r2,zero,80eff8 <alt_up_sd_card_fclose+0xdc>

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ef48:	d0a75817 	ldw	r2,-25248(gp)
  80ef4c:	10002d26 	beq	r2,zero,80f004 <alt_up_sd_card_fclose+0xe8>
    {
        if (active_files[file_handle].in_use) 
  80ef50:	24bfffcc 	andi	r18,r4,65535
  80ef54:	94a0001c 	xori	r18,r18,32768
  80ef58:	94a00004 	addi	r18,r18,-32768
  80ef5c:	902091ba 	slli	r16,r18,6
  80ef60:	04402074 	movhi	r17,129
  80ef64:	8c5e2d04 	addi	r17,r17,30900
  80ef68:	8449883a 	add	r4,r16,r17
  80ef6c:	20800f17 	ldw	r2,60(r4)
  80ef70:	10002426 	beq	r2,zero,80f004 <alt_up_sd_card_fclose+0xe8>
        {
			if (active_files[file_handle].modified)
  80ef74:	20800e17 	ldw	r2,56(r4)
  80ef78:	10001526 	beq	r2,zero,80efd0 <alt_up_sd_card_fclose+0xb4>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0)
  80ef7c:	20c00a17 	ldw	r3,40(r4)
    {
        if (active_files[file_handle].in_use) 
        {
			if (active_files[file_handle].modified)
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  80ef80:	21800b17 	ldw	r6,44(r4)
				if (active_files[file_handle].file_record_cluster == 0)
  80ef84:	1800341e 	bne	r3,zero,80f058 <alt_up_sd_card_fclose+0x13c>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  80ef88:	00802074 	movhi	r2,129
  80ef8c:	109e1804 	addi	r2,r2,30816
  80ef90:	10c01317 	ldw	r3,76(r2)
  80ef94:	30c9883a 	add	r4,r6,r3
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  80ef98:	d1675f17 	ldw	r5,-25220(gp)
  80ef9c:	080edd80 	call	80edd8 <Read_Sector_Data>
  80efa0:	10000b26 	beq	r2,zero,80efd0 <alt_up_sd_card_fclose+0xb4>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  80efa4:	900a91ba 	slli	r5,r18,6
  80efa8:	8445883a 	add	r2,r16,r17
  80efac:	11000c0f 	ldh	r4,48(r2)
  80efb0:	2c4b883a 	add	r5,r5,r17
  80efb4:	080e9280 	call	80e928 <Write_File_Record_At_Offset>
  80efb8:	10000526 	beq	r2,zero,80efd0 <alt_up_sd_card_fclose+0xb4>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80efbc:	d0a76217 	ldw	r2,-25208(gp)
  80efc0:	10000326 	beq	r2,zero,80efd0 <alt_up_sd_card_fclose+0xb4>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80efc4:	d1276317 	ldw	r4,-25204(gp)
  80efc8:	000b883a 	mov	r5,zero
  80efcc:	080ed2c0 	call	80ed2c <Write_Sector_Data>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  80efd0:	8445883a 	add	r2,r16,r17
  80efd4:	00c00044 	movi	r3,1
  80efd8:	10000f15 	stw	zero,60(r2)
			result = true;
        }
    }
    
    return result;
}
  80efdc:	1805883a 	mov	r2,r3
  80efe0:	dfc00317 	ldw	ra,12(sp)
  80efe4:	dc800217 	ldw	r18,8(sp)
  80efe8:	dc400117 	ldw	r17,4(sp)
  80efec:	dc000017 	ldw	r16,0(sp)
  80eff0:	dec00404 	addi	sp,sp,16
  80eff4:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80eff8:	d0e75717 	ldw	r3,-25252(gp)
  80effc:	00800044 	movi	r2,1
  80f000:	18800826 	beq	r3,r2,80f024 <alt_up_sd_card_fclose+0x108>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  80f004:	0007883a 	mov	r3,zero
			result = true;
        }
    }
    
    return result;
}
  80f008:	1805883a 	mov	r2,r3
  80f00c:	dfc00317 	ldw	ra,12(sp)
  80f010:	dc800217 	ldw	r18,8(sp)
  80f014:	dc400117 	ldw	r17,4(sp)
  80f018:	dc000017 	ldw	r16,0(sp)
  80f01c:	dec00404 	addi	sp,sp,16
  80f020:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f024:	00802074 	movhi	r2,129
  80f028:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80f02c:	00c02074 	movhi	r3,129
  80f030:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f034:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f038:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f03c:	d0275815 	stw	zero,-25248(gp)
  80f040:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f044:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f048:	183fff15 	stw	zero,-4(r3)
  80f04c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f050:	18bffc1e 	bne	r3,r2,80f044 <alt_up_sd_card_fclose+0x128>
  80f054:	003feb06 	br	80f004 <alt_up_sd_card_fclose+0xe8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  80f058:	01002074 	movhi	r4,129
  80f05c:	211e1804 	addi	r4,r4,30816
  80f060:	21400383 	ldbu	r5,14(r4)
  80f064:	20801417 	ldw	r2,80(r4)
  80f068:	18ffff84 	addi	r3,r3,-2
  80f06c:	1947383a 	mul	r3,r3,r5
  80f070:	3085883a 	add	r2,r6,r2
  80f074:	10c9883a 	add	r4,r2,r3
  80f078:	003fc706 	br	80ef98 <alt_up_sd_card_fclose+0x7c>

0080f07c <find_first_empty_record_in_root_directory>:
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80f07c:	defffc04 	addi	sp,sp,-16
  80f080:	dc400115 	stw	r17,4(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80f084:	04402074 	movhi	r17,129
  80f088:	8c5e1804 	addi	r17,r17,30816
  80f08c:	8880050b 	ldhu	r2,20(r17)
  80f090:	88c0030b 	ldhu	r3,12(r17)
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80f094:	dc800215 	stw	r18,8(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80f098:	1004917a 	slli	r2,r2,5
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80f09c:	dfc00315 	stw	ra,12(sp)
  80f0a0:	dc000015 	stw	r16,0(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80f0a4:	10e5283a 	div	r18,r2,r3
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80f0a8:	90001726 	beq	r18,zero,80f108 <find_first_empty_record_in_root_directory+0x8c>
  80f0ac:	0021883a 	mov	r16,zero
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80f0b0:	89001317 	ldw	r4,76(r17)
  80f0b4:	d1675f17 	ldw	r5,-25220(gp)
  80f0b8:	8109883a 	add	r4,r16,r4
  80f0bc:	080edd80 	call	80edd8 <Read_Sector_Data>
  80f0c0:	10001126 	beq	r2,zero,80f108 <find_first_empty_record_in_root_directory+0x8c>
  80f0c4:	d0a76117 	ldw	r2,-25212(gp)
  80f0c8:	8012913a 	slli	r9,r16,4
                }
            }
        }
        else
        {
            break;
  80f0cc:	000b883a 	mov	r5,zero
  80f0d0:	11800a17 	ldw	r6,40(r2)
  80f0d4:	0009883a 	mov	r4,zero
  80f0d8:	02003944 	movi	r8,229
  80f0dc:	01c00404 	movi	r7,16
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  80f0e0:	2185883a 	add	r2,r4,r6
  80f0e4:	10c00023 	ldbuio	r3,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80f0e8:	18c03fcc 	andi	r3,r3,255
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  80f0ec:	21000804 	addi	r4,r4,32
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80f0f0:	1a000726 	beq	r3,r8,80f110 <find_first_empty_record_in_root_directory+0x94>
  80f0f4:	18000626 	beq	r3,zero,80f110 <find_first_empty_record_in_root_directory+0x94>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  80f0f8:	29400044 	addi	r5,r5,1
  80f0fc:	29fff81e 	bne	r5,r7,80f0e0 <find_first_empty_record_in_root_directory+0x64>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80f100:	84000044 	addi	r16,r16,1
  80f104:	943fea1e 	bne	r18,r16,80f0b0 <find_first_empty_record_in_root_directory+0x34>
  80f108:	00bfffc4 	movi	r2,-1
  80f10c:	00000206 	br	80f118 <find_first_empty_record_in_root_directory+0x9c>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
  80f110:	4945883a 	add	r2,r9,r5
  80f114:	1004943a 	slli	r2,r2,16
        {
            break;
        }
    }
    return result;
}
  80f118:	dfc00317 	ldw	ra,12(sp)
  80f11c:	dc800217 	ldw	r18,8(sp)
  80f120:	dc400117 	ldw	r17,4(sp)
  80f124:	dc000017 	ldw	r16,0(sp)
  80f128:	dec00404 	addi	sp,sp,16
  80f12c:	f800283a 	ret

0080f130 <find_first_empty_cluster>:
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80f130:	defffa04 	addi	sp,sp,-24
  80f134:	dcc00315 	stw	r19,12(sp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80f138:	04c02074 	movhi	r19,129
  80f13c:	9cde1804 	addi	r19,r19,30816
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80f140:	dc800215 	stw	r18,8(sp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f144:	98801217 	ldw	r2,72(r19)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80f148:	9c801117 	ldw	r18,68(r19)
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80f14c:	dd000415 	stw	r20,16(sp)
  80f150:	dfc00515 	stw	ra,20(sp)
  80f154:	dc400115 	stw	r17,4(sp)
  80f158:	dc000015 	stw	r16,0(sp)
  80f15c:	2029883a 	mov	r20,r4
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f160:	90801926 	beq	r18,r2,80f1c8 <find_first_empty_cluster+0x98>
  80f164:	04400084 	movi	r17,2
  80f168:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  80f16c:	d1675f17 	ldw	r5,-25220(gp)
  80f170:	9009883a 	mov	r4,r18
  80f174:	080edd80 	call	80edd8 <Read_Sector_Data>
  80f178:	10001c26 	beq	r2,zero,80f1ec <find_first_empty_cluster+0xbc>
  80f17c:	d0a76117 	ldw	r2,-25212(gp)
  80f180:	88c03fcc 	andi	r3,r17,255
  80f184:	11000a17 	ldw	r4,40(r2)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80f188:	18c5883a 	add	r2,r3,r3
  80f18c:	1105883a 	add	r2,r2,r4
  80f190:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  80f194:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80f198:	1821883a 	mov	r16,r3
                if (cluster == 0)
  80f19c:	10001726 	beq	r2,zero,80f1fc <find_first_empty_cluster+0xcc>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  80f1a0:	8c400044 	addi	r17,r17,1
                } 
            } while ((cluster_index % 256) != 0);
  80f1a4:	88c03fcc 	andi	r3,r17,255
  80f1a8:	183ff71e 	bne	r3,zero,80f188 <find_first_empty_cluster+0x58>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f1ac:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  80f1b0:	94800044 	addi	r18,r18,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f1b4:	14bfed1e 	bne	r2,r18,80f16c <find_first_empty_cluster+0x3c>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  80f1b8:	80bfffcc 	andi	r2,r16,65535
  80f1bc:	10a0001c 	xori	r2,r2,32768
  80f1c0:	10a00004 	addi	r2,r2,-32768
  80f1c4:	10000d26 	beq	r2,zero,80f1fc <find_first_empty_cluster+0xcc>
    {
        *cluster_number = cluster_index;
  80f1c8:	0005883a 	mov	r2,zero
		result = true;
    }
    return result;
}
  80f1cc:	dfc00517 	ldw	ra,20(sp)
  80f1d0:	dd000417 	ldw	r20,16(sp)
  80f1d4:	dcc00317 	ldw	r19,12(sp)
  80f1d8:	dc800217 	ldw	r18,8(sp)
  80f1dc:	dc400117 	ldw	r17,4(sp)
  80f1e0:	dc000017 	ldw	r16,0(sp)
  80f1e4:	dec00604 	addi	sp,sp,24
  80f1e8:	f800283a 	ret
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  80f1ec:	80bfffcc 	andi	r2,r16,65535
  80f1f0:	10a0001c 	xori	r2,r2,32768
  80f1f4:	10a00004 	addi	r2,r2,-32768
  80f1f8:	103fec1e 	bne	r2,zero,80f1ac <find_first_empty_cluster+0x7c>
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
  80f1fc:	00800044 	movi	r2,1
  80f200:	a4400015 	stw	r17,0(r20)
		result = true;
    }
    return result;
}
  80f204:	dfc00517 	ldw	ra,20(sp)
  80f208:	dd000417 	ldw	r20,16(sp)
  80f20c:	dcc00317 	ldw	r19,12(sp)
  80f210:	dc800217 	ldw	r18,8(sp)
  80f214:	dc400117 	ldw	r17,4(sp)
  80f218:	dc000017 	ldw	r16,0(sp)
  80f21c:	dec00604 	addi	sp,sp,24
  80f220:	f800283a 	ret

0080f224 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80f224:	deffff04 	addi	sp,sp,-4
  80f228:	200b883a 	mov	r5,r4
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80f22c:	0009883a 	mov	r4,zero
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80f230:	dfc00015 	stw	ra,0(sp)
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80f234:	080edd80 	call	80edd8 <Read_Sector_Data>
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80f238:	d2676117 	ldw	r9,-25212(gp)
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80f23c:	1009883a 	mov	r4,r2
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80f240:	49400a17 	ldw	r5,40(r9)
  80f244:	28807fab 	ldhuio	r2,510(r5)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80f248:	00ea9554 	movui	r3,43605
  80f24c:	10bfffcc 	andi	r2,r2,65535
  80f250:	10c00526 	beq	r2,r3,80f268 <Check_for_DOS_FAT+0x44>
  80f254:	0009883a 	mov	r4,zero
    else
    {
        result = false;
    }
	return result;
}
  80f258:	2005883a 	mov	r2,r4
  80f25c:	dfc00017 	ldw	ra,0(sp)
  80f260:	dec00104 	addi	sp,sp,4
  80f264:	f800283a 	ret
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80f268:	203ffb26 	beq	r4,zero,80f258 <Check_for_DOS_FAT+0x34>
	{
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  80f26c:	28c00023 	ldbuio	r3,0(r5)
  80f270:	02802074 	movhi	r10,129
  80f274:	529e1804 	addi	r10,r10,30816
  80f278:	50c00005 	stb	r3,0(r10)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  80f27c:	48800a17 	ldw	r2,40(r9)
  80f280:	10c00063 	ldbuio	r3,1(r2)
  80f284:	50c00045 	stb	r3,1(r10)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  80f288:	48800a17 	ldw	r2,40(r9)
  80f28c:	10c000a3 	ldbuio	r3,2(r2)
  80f290:	50c00085 	stb	r3,2(r10)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  80f294:	48800a17 	ldw	r2,40(r9)
  80f298:	10c000e3 	ldbuio	r3,3(r2)
  80f29c:	50c000c5 	stb	r3,3(r10)
  80f2a0:	48800a17 	ldw	r2,40(r9)
  80f2a4:	10c00123 	ldbuio	r3,4(r2)
  80f2a8:	50c00105 	stb	r3,4(r10)
  80f2ac:	48800a17 	ldw	r2,40(r9)
  80f2b0:	10c00163 	ldbuio	r3,5(r2)
  80f2b4:	50c00145 	stb	r3,5(r10)
  80f2b8:	48800a17 	ldw	r2,40(r9)
  80f2bc:	10c001a3 	ldbuio	r3,6(r2)
  80f2c0:	50c00185 	stb	r3,6(r10)
  80f2c4:	48800a17 	ldw	r2,40(r9)
  80f2c8:	10c001e3 	ldbuio	r3,7(r2)
  80f2cc:	50c001c5 	stb	r3,7(r10)
  80f2d0:	48800a17 	ldw	r2,40(r9)
  80f2d4:	10c00223 	ldbuio	r3,8(r2)
  80f2d8:	50c00205 	stb	r3,8(r10)
  80f2dc:	48800a17 	ldw	r2,40(r9)
  80f2e0:	10c00263 	ldbuio	r3,9(r2)
  80f2e4:	50c00245 	stb	r3,9(r10)
  80f2e8:	48800a17 	ldw	r2,40(r9)
  80f2ec:	10c002a3 	ldbuio	r3,10(r2)
  80f2f0:	50c00285 	stb	r3,10(r10)
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  80f2f4:	49000a17 	ldw	r4,40(r9)
  80f2f8:	20800323 	ldbuio	r2,12(r4)
  80f2fc:	20c002e3 	ldbuio	r3,11(r4)
  80f300:	10803fcc 	andi	r2,r2,255
  80f304:	1004923a 	slli	r2,r2,8
  80f308:	18c03fcc 	andi	r3,r3,255
  80f30c:	18c0201c 	xori	r3,r3,128
  80f310:	18ffe004 	addi	r3,r3,-128
  80f314:	10c4b03a 	or	r2,r2,r3
  80f318:	5080030d 	sth	r2,12(r10)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  80f31c:	20c00363 	ldbuio	r3,13(r4)
  80f320:	50c00385 	stb	r3,14(r10)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  80f324:	49000a17 	ldw	r4,40(r9)
  80f328:	208003ab 	ldhuio	r2,14(r4)
  80f32c:	5080040d 	sth	r2,16(r10)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  80f330:	20c00423 	ldbuio	r3,16(r4)
  80f334:	50c00485 	stb	r3,18(r10)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  80f338:	49000a17 	ldw	r4,40(r9)
  80f33c:	208004a3 	ldbuio	r2,18(r4)
  80f340:	20c00463 	ldbuio	r3,17(r4)
  80f344:	10803fcc 	andi	r2,r2,255
  80f348:	1004923a 	slli	r2,r2,8
  80f34c:	18c03fcc 	andi	r3,r3,255
  80f350:	10c4b03a 	or	r2,r2,r3
  80f354:	5080050d 	sth	r2,20(r10)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  80f358:	21400523 	ldbuio	r5,20(r4)
  80f35c:	208004e3 	ldbuio	r2,19(r4)
  80f360:	29403fcc 	andi	r5,r5,255
  80f364:	280a923a 	slli	r5,r5,8
  80f368:	10803fcc 	andi	r2,r2,255
  80f36c:	288ab03a 	or	r5,r5,r2
  80f370:	5140058d 	sth	r5,22(r10)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  80f374:	20800563 	ldbuio	r2,21(r4)
  80f378:	50800605 	stb	r2,24(r10)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  80f37c:	49000a17 	ldw	r4,40(r9)
  80f380:	208005ab 	ldhuio	r2,22(r4)
  80f384:	5080068d 	sth	r2,26(r10)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  80f388:	20c0062b 	ldhuio	r3,24(r4)
  80f38c:	50c0070d 	sth	r3,28(r10)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  80f390:	208006ab 	ldhuio	r2,26(r4)
  80f394:	5080078d 	sth	r2,30(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  80f398:	20c00737 	ldwio	r3,28(r4)
  80f39c:	50c00815 	stw	r3,32(r10)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  80f3a0:	48800a17 	ldw	r2,40(r9)
  80f3a4:	12c00837 	ldwio	r11,32(r2)
  80f3a8:	52c00915 	stw	r11,36(r10)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  80f3ac:	48800a17 	ldw	r2,40(r9)
  80f3b0:	10c00923 	ldbuio	r3,36(r2)
  80f3b4:	50c00a05 	stb	r3,40(r10)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  80f3b8:	48800a17 	ldw	r2,40(r9)
  80f3bc:	10c00963 	ldbuio	r3,37(r2)
  80f3c0:	50c00a45 	stb	r3,41(r10)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80f3c4:	49000a17 	ldw	r4,40(r9)
  80f3c8:	220009a3 	ldbuio	r8,38(r4)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f3cc:	5080050b 	ldhu	r2,20(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80f3d0:	51c0040b 	ldhu	r7,16(r10)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f3d4:	50c0068b 	ldhu	r3,26(r10)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f3d8:	1004917a 	slli	r2,r2,5
  80f3dc:	5100030b 	ldhu	r4,12(r10)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f3e0:	38cd883a 	add	r6,r7,r3
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  80f3e4:	30c7883a 	add	r3,r6,r3
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f3e8:	1105283a 	div	r2,r2,r4
  80f3ec:	1885883a 	add	r2,r3,r2
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80f3f0:	297fffcc 	andi	r5,r5,65535
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80f3f4:	52000a85 	stb	r8,42(r10)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f3f8:	50801415 	stw	r2,80(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80f3fc:	51c01115 	stw	r7,68(r10)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f400:	51801215 	stw	r6,72(r10)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  80f404:	50c01315 	stw	r3,76(r10)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80f408:	28005626 	beq	r5,zero,80f564 <Check_for_DOS_FAT+0x340>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  80f40c:	50800383 	ldbu	r2,14(r10)
  80f410:	288b283a 	div	r5,r5,r2
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087)
  80f414:	0083fd84 	movi	r2,4086
  80f418:	11405616 	blt	r2,r5,80f574 <Check_for_DOS_FAT+0x350>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  80f41c:	00800304 	movi	r2,12
  80f420:	50801085 	stb	r2,66(r10)
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  80f424:	48800a17 	ldw	r2,40(r9)
  80f428:	10c009e3 	ldbuio	r3,39(r2)
  80f42c:	50c00ac5 	stb	r3,43(r10)
  80f430:	48800a17 	ldw	r2,40(r9)
  80f434:	10c00a23 	ldbuio	r3,40(r2)
  80f438:	50c00b05 	stb	r3,44(r10)
  80f43c:	48800a17 	ldw	r2,40(r9)
  80f440:	10c00a63 	ldbuio	r3,41(r2)
  80f444:	50c00b45 	stb	r3,45(r10)
  80f448:	48800a17 	ldw	r2,40(r9)
  80f44c:	10c00aa3 	ldbuio	r3,42(r2)
  80f450:	50c00b85 	stb	r3,46(r10)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  80f454:	48800a17 	ldw	r2,40(r9)
  80f458:	10c00ae3 	ldbuio	r3,43(r2)
  80f45c:	50c00bc5 	stb	r3,47(r10)
  80f460:	48800a17 	ldw	r2,40(r9)
  80f464:	10c00b23 	ldbuio	r3,44(r2)
  80f468:	50c00c05 	stb	r3,48(r10)
  80f46c:	48800a17 	ldw	r2,40(r9)
  80f470:	10c00b63 	ldbuio	r3,45(r2)
  80f474:	50c00c45 	stb	r3,49(r10)
  80f478:	48800a17 	ldw	r2,40(r9)
  80f47c:	10c00ba3 	ldbuio	r3,46(r2)
  80f480:	50c00c85 	stb	r3,50(r10)
  80f484:	48800a17 	ldw	r2,40(r9)
  80f488:	10c00be3 	ldbuio	r3,47(r2)
  80f48c:	50c00cc5 	stb	r3,51(r10)
  80f490:	48800a17 	ldw	r2,40(r9)
  80f494:	10c00c23 	ldbuio	r3,48(r2)
  80f498:	50c00d05 	stb	r3,52(r10)
  80f49c:	48800a17 	ldw	r2,40(r9)
  80f4a0:	10c00c63 	ldbuio	r3,49(r2)
  80f4a4:	50c00d45 	stb	r3,53(r10)
  80f4a8:	48800a17 	ldw	r2,40(r9)
  80f4ac:	10c00ca3 	ldbuio	r3,50(r2)
  80f4b0:	50c00d85 	stb	r3,54(r10)
  80f4b4:	48800a17 	ldw	r2,40(r9)
  80f4b8:	10c00ce3 	ldbuio	r3,51(r2)
  80f4bc:	50c00dc5 	stb	r3,55(r10)
  80f4c0:	48800a17 	ldw	r2,40(r9)
  80f4c4:	10c00d23 	ldbuio	r3,52(r2)
  80f4c8:	50c00e05 	stb	r3,56(r10)
  80f4cc:	48800a17 	ldw	r2,40(r9)
  80f4d0:	10c00d63 	ldbuio	r3,53(r2)
  80f4d4:	50c00e45 	stb	r3,57(r10)
		}    
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  80f4d8:	48800a17 	ldw	r2,40(r9)
  80f4dc:	10c00da3 	ldbuio	r3,54(r2)
  80f4e0:	50c00e85 	stb	r3,58(r10)
  80f4e4:	48800a17 	ldw	r2,40(r9)
  80f4e8:	10c00de3 	ldbuio	r3,55(r2)
  80f4ec:	50c00ec5 	stb	r3,59(r10)
  80f4f0:	48800a17 	ldw	r2,40(r9)
  80f4f4:	10c00e23 	ldbuio	r3,56(r2)
  80f4f8:	50c00f05 	stb	r3,60(r10)
  80f4fc:	48800a17 	ldw	r2,40(r9)
  80f500:	10c00e63 	ldbuio	r3,57(r2)
  80f504:	50c00f45 	stb	r3,61(r10)
  80f508:	48800a17 	ldw	r2,40(r9)
  80f50c:	10c00ea3 	ldbuio	r3,58(r2)
  80f510:	50c00f85 	stb	r3,62(r10)
  80f514:	48800a17 	ldw	r2,40(r9)
  80f518:	10c00ee3 	ldbuio	r3,59(r2)
  80f51c:	50c00fc5 	stb	r3,63(r10)
  80f520:	48800a17 	ldw	r2,40(r9)
  80f524:	10c00f23 	ldbuio	r3,60(r2)
  80f528:	50c01005 	stb	r3,64(r10)
  80f52c:	48800a17 	ldw	r2,40(r9)
  80f530:	10c00f63 	ldbuio	r3,61(r2)
  80f534:	00802074 	movhi	r2,129
  80f538:	109e3c04 	addi	r2,r2,30960
  80f53c:	50c01045 	stb	r3,65(r10)
  80f540:	10c14004 	addi	r3,r2,1280
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
		{
			active_files[counter].in_use = false;
  80f544:	10000015 	stw	zero,0(r2)
  80f548:	10801004 	addi	r2,r2,64
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  80f54c:	10fffd1e 	bne	r2,r3,80f544 <Check_for_DOS_FAT+0x320>
  80f550:	01000044 	movi	r4,1
    else
    {
        result = false;
    }
	return result;
}
  80f554:	2005883a 	mov	r2,r4
  80f558:	dfc00017 	ldw	ra,0(sp)
  80f55c:	dec00104 	addi	sp,sp,4
  80f560:	f800283a 	ret
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  80f564:	50800383 	ldbu	r2,14(r10)
  80f568:	588b203a 	divu	r5,r11,r2
		}
		if (num_clusters < 4087)
  80f56c:	0083fd84 	movi	r2,4086
  80f570:	117faa0e 	bge	r2,r5,80f41c <Check_for_DOS_FAT+0x1f8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
		}
		else if (num_clusters <= 65517)
  80f574:	00bffb54 	movui	r2,65517
  80f578:	11400316 	blt	r2,r5,80f588 <Check_for_DOS_FAT+0x364>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  80f57c:	00800404 	movi	r2,16
  80f580:	50801085 	stb	r2,66(r10)
  80f584:	003fa706 	br	80f424 <Check_for_DOS_FAT+0x200>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  80f588:	00800804 	movi	r2,32
  80f58c:	50801085 	stb	r2,66(r10)
  80f590:	003fa406 	br	80f424 <Check_for_DOS_FAT+0x200>

0080f594 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80f594:	deffff04 	addi	sp,sp,-4
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80f598:	0009883a 	mov	r4,zero
  80f59c:	000b883a 	mov	r5,zero

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80f5a0:	dfc00015 	stw	ra,0(sp)
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80f5a4:	080edd80 	call	80edd8 <Read_Sector_Data>
  80f5a8:	1000041e 	bne	r2,zero,80f5bc <Check_for_Master_Boot_Record+0x28>
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
						break;
  80f5ac:	0005883a 	mov	r2,zero
			}
		}
	}

	return result;
}
  80f5b0:	dfc00017 	ldw	ra,0(sp)
  80f5b4:	dec00104 	addi	sp,sp,4
  80f5b8:	f800283a 	ret
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  80f5bc:	d1a76117 	ldw	r6,-25212(gp)
  80f5c0:	31000a17 	ldw	r4,40(r6)
  80f5c4:	20807fab 	ldhuio	r2,510(r4)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  80f5c8:	00ea9554 	movui	r3,43605
  80f5cc:	10bfffcc 	andi	r2,r2,65535
  80f5d0:	10fff61e 	bne	r2,r3,80f5ac <Check_for_Master_Boot_Record+0x18>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f5d4:	208070a3 	ldbuio	r2,450(r4)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f5d8:	00c00044 	movi	r3,1
  80f5dc:	11003fcc 	andi	r4,r2,255
  80f5e0:	20c03726 	beq	r4,r3,80f6c0 <Check_for_Master_Boot_Record+0x12c>
  80f5e4:	00800104 	movi	r2,4
  80f5e8:	20803526 	beq	r4,r2,80f6c0 <Check_for_Master_Boot_Record+0x12c>
  80f5ec:	00800184 	movi	r2,6
  80f5f0:	20803326 	beq	r4,r2,80f6c0 <Check_for_Master_Boot_Record+0x12c>
  80f5f4:	00800384 	movi	r2,14
  80f5f8:	20803126 	beq	r4,r2,80f6c0 <Check_for_Master_Boot_Record+0x12c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f5fc:	30800a17 	ldw	r2,40(r6)
  80f600:	10c074a3 	ldbuio	r3,466(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f604:	00800044 	movi	r2,1
  80f608:	18c03fcc 	andi	r3,r3,255
  80f60c:	18803926 	beq	r3,r2,80f6f4 <Check_for_Master_Boot_Record+0x160>
  80f610:	00800104 	movi	r2,4
  80f614:	18803726 	beq	r3,r2,80f6f4 <Check_for_Master_Boot_Record+0x160>
  80f618:	00800184 	movi	r2,6
  80f61c:	18803526 	beq	r3,r2,80f6f4 <Check_for_Master_Boot_Record+0x160>
  80f620:	00800384 	movi	r2,14
  80f624:	18803326 	beq	r3,r2,80f6f4 <Check_for_Master_Boot_Record+0x160>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f628:	30800a17 	ldw	r2,40(r6)
  80f62c:	10c078a3 	ldbuio	r3,482(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f630:	00800044 	movi	r2,1
  80f634:	18c03fcc 	andi	r3,r3,255
  80f638:	18803b26 	beq	r3,r2,80f728 <Check_for_Master_Boot_Record+0x194>
  80f63c:	00800104 	movi	r2,4
  80f640:	18803926 	beq	r3,r2,80f728 <Check_for_Master_Boot_Record+0x194>
  80f644:	00800184 	movi	r2,6
  80f648:	18803726 	beq	r3,r2,80f728 <Check_for_Master_Boot_Record+0x194>
  80f64c:	00800384 	movi	r2,14
  80f650:	18803526 	beq	r3,r2,80f728 <Check_for_Master_Boot_Record+0x194>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f654:	30800a17 	ldw	r2,40(r6)
  80f658:	10c07ca3 	ldbuio	r3,498(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f65c:	00800044 	movi	r2,1
  80f660:	18c03fcc 	andi	r3,r3,255
  80f664:	18800626 	beq	r3,r2,80f680 <Check_for_Master_Boot_Record+0xec>
  80f668:	00800104 	movi	r2,4
  80f66c:	18800426 	beq	r3,r2,80f680 <Check_for_Master_Boot_Record+0xec>
  80f670:	00800184 	movi	r2,6
  80f674:	18800226 	beq	r3,r2,80f680 <Check_for_Master_Boot_Record+0xec>
  80f678:	00800384 	movi	r2,14
  80f67c:	18bfcb1e 	bne	r3,r2,80f5ac <Check_for_Master_Boot_Record+0x18>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f680:	31400a17 	ldw	r5,40(r6)
  80f684:	28c07e2b 	ldhuio	r3,504(r5)
  80f688:	28807dab 	ldhuio	r2,502(r5)
  80f68c:	1806943a 	slli	r3,r3,16
  80f690:	10bfffcc 	andi	r2,r2,65535
  80f694:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f698:	29007f2b 	ldhuio	r4,508(r5)
  80f69c:	28807eab 	ldhuio	r2,506(r5)
  80f6a0:	2008943a 	slli	r4,r4,16
  80f6a4:	10bfffcc 	andi	r2,r2,65535
  80f6a8:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f6ac:	013fbf0e 	bge	zero,r4,80f5ac <Check_for_Master_Boot_Record+0x18>
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
  80f6b0:	00800044 	movi	r2,1
		            
					// Check if the partition is valid
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
  80f6b4:	d1276015 	stw	r4,-25216(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  80f6b8:	d0e75f15 	stw	r3,-25220(gp)
  80f6bc:	003fbc06 	br	80f5b0 <Check_for_Master_Boot_Record+0x1c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f6c0:	31400a17 	ldw	r5,40(r6)
  80f6c4:	28c0722b 	ldhuio	r3,456(r5)
  80f6c8:	288071ab 	ldhuio	r2,454(r5)
  80f6cc:	1806943a 	slli	r3,r3,16
  80f6d0:	10bfffcc 	andi	r2,r2,65535
  80f6d4:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f6d8:	2900732b 	ldhuio	r4,460(r5)
  80f6dc:	288072ab 	ldhuio	r2,458(r5)
  80f6e0:	2008943a 	slli	r4,r4,16
  80f6e4:	10bfffcc 	andi	r2,r2,65535
  80f6e8:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f6ec:	013fc30e 	bge	zero,r4,80f5fc <Check_for_Master_Boot_Record+0x68>
  80f6f0:	003fef06 	br	80f6b0 <Check_for_Master_Boot_Record+0x11c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f6f4:	31400a17 	ldw	r5,40(r6)
  80f6f8:	28c0762b 	ldhuio	r3,472(r5)
  80f6fc:	288075ab 	ldhuio	r2,470(r5)
  80f700:	1806943a 	slli	r3,r3,16
  80f704:	10bfffcc 	andi	r2,r2,65535
  80f708:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f70c:	2900772b 	ldhuio	r4,476(r5)
  80f710:	288076ab 	ldhuio	r2,474(r5)
  80f714:	2008943a 	slli	r4,r4,16
  80f718:	10bfffcc 	andi	r2,r2,65535
  80f71c:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f720:	013fc10e 	bge	zero,r4,80f628 <Check_for_Master_Boot_Record+0x94>
  80f724:	003fe206 	br	80f6b0 <Check_for_Master_Boot_Record+0x11c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f728:	31400a17 	ldw	r5,40(r6)
  80f72c:	28c07a2b 	ldhuio	r3,488(r5)
  80f730:	288079ab 	ldhuio	r2,486(r5)
  80f734:	1806943a 	slli	r3,r3,16
  80f738:	10bfffcc 	andi	r2,r2,65535
  80f73c:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f740:	29007b2b 	ldhuio	r4,492(r5)
  80f744:	28807aab 	ldhuio	r2,490(r5)
  80f748:	2008943a 	slli	r4,r4,16
  80f74c:	10bfffcc 	andi	r2,r2,65535
  80f750:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f754:	013fbf0e 	bge	zero,r4,80f654 <Check_for_Master_Boot_Record+0xc0>
  80f758:	003fd506 	br	80f6b0 <Check_for_Master_Boot_Record+0x11c>

0080f75c <Look_for_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f75c:	d0a76117 	ldw	r2,-25212(gp)
}


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  80f760:	deffff04 	addi	sp,sp,-4
  80f764:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f768:	10001726 	beq	r2,zero,80f7c8 <Look_for_FAT16+0x6c>
  80f76c:	d0e75917 	ldw	r3,-25244(gp)
  80f770:	1880002b 	ldhuio	r2,0(r3)
  80f774:	1080008c 	andi	r2,r2,2
  80f778:	10001326 	beq	r2,zero,80f7c8 <Look_for_FAT16+0x6c>
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f77c:	d0a75b17 	ldw	r2,-25236(gp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  80f780:	d0275f15 	stw	zero,-25220(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  80f784:	d0276015 	stw	zero,-25216(gp)
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f788:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;              

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80f78c:	10ffffcc 	andi	r3,r2,65535
  80f790:	18e0001c 	xori	r3,r3,32768
  80f794:	18e00004 	addi	r3,r3,-32768
  80f798:	18000616 	blt	r3,zero,80f7b4 <Look_for_FAT16+0x58>
  80f79c:	10c3000c 	andi	r3,r2,3072
  80f7a0:	00830004 	movi	r2,3072
  80f7a4:	18800326 	beq	r3,r2,80f7b4 <Look_for_FAT16+0x58>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80f7a8:	00810004 	movi	r2,1024
  80f7ac:	18802526 	beq	r3,r2,80f844 <Look_for_FAT16+0xe8>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80f7b0:	18001526 	beq	r3,zero,80f808 <Look_for_FAT16+0xac>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f7b4:	0009883a 	mov	r4,zero
				}
			}
		}
	}
	return result;
}
  80f7b8:	2005883a 	mov	r2,r4
  80f7bc:	dfc00017 	ldw	ra,0(sp)
  80f7c0:	dec00104 	addi	sp,sp,4
  80f7c4:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f7c8:	d0e75717 	ldw	r3,-25252(gp)
  80f7cc:	00800044 	movi	r2,1
  80f7d0:	18bff81e 	bne	r3,r2,80f7b4 <Look_for_FAT16+0x58>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f7d4:	00802074 	movhi	r2,129
  80f7d8:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80f7dc:	00c02074 	movhi	r3,129
  80f7e0:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f7e4:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f7e8:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f7ec:	d0275815 	stw	zero,-25248(gp)
  80f7f0:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f7f4:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f7f8:	183fff15 	stw	zero,-4(r3)
  80f7fc:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f800:	18bffc1e 	bne	r3,r2,80f7f4 <Look_for_FAT16+0x98>
  80f804:	003feb06 	br	80f7b4 <Look_for_FAT16+0x58>
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80f808:	080f5940 	call	80f594 <Check_for_Master_Boot_Record>
  80f80c:	103fe926 	beq	r2,zero,80f7b4 <Look_for_FAT16+0x58>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80f810:	d1275f17 	ldw	r4,-25220(gp)
  80f814:	080f2240 	call	80f224 <Check_for_DOS_FAT>
  80f818:	1009883a 	mov	r4,r2
				}                        
			}
			if (result == true)
  80f81c:	00800044 	movi	r2,1
  80f820:	20bfe51e 	bne	r4,r2,80f7b8 <Look_for_FAT16+0x5c>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80f824:	01402074 	movhi	r5,129
  80f828:	295e1804 	addi	r5,r5,30816
  80f82c:	28c01083 	ldbu	r3,66(r5)
  80f830:	00800404 	movi	r2,16
  80f834:	18bfdf1e 	bne	r3,r2,80f7b4 <Look_for_FAT16+0x58>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f838:	2880058b 	ldhu	r2,22(r5)
  80f83c:	d0a76015 	stw	r2,-25216(gp)
  80f840:	003fdd06 	br	80f7b8 <Look_for_FAT16+0x5c>
		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80f844:	0009883a 	mov	r4,zero
  80f848:	080f2240 	call	80f224 <Check_for_DOS_FAT>
  80f84c:	1009883a 	mov	r4,r2
  80f850:	003ff206 	br	80f81c <Look_for_FAT16+0xc0>

0080f854 <alt_up_sd_card_is_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f854:	d0a76117 	ldw	r2,-25212(gp)
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  80f858:	deffff04 	addi	sp,sp,-4
  80f85c:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f860:	10002626 	beq	r2,zero,80f8fc <alt_up_sd_card_is_FAT16+0xa8>
  80f864:	d0e75917 	ldw	r3,-25244(gp)
  80f868:	1880002b 	ldhuio	r2,0(r3)
  80f86c:	1080008c 	andi	r2,r2,2
  80f870:	10002226 	beq	r2,zero,80f8fc <alt_up_sd_card_is_FAT16+0xa8>
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  80f874:	d0a75717 	ldw	r2,-25252(gp)
  80f878:	10002f1e 	bne	r2,zero,80f938 <alt_up_sd_card_is_FAT16+0xe4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f87c:	1880002b 	ldhuio	r2,0(r3)
  80f880:	1080008c 	andi	r2,r2,2
  80f884:	10002626 	beq	r2,zero,80f920 <alt_up_sd_card_is_FAT16+0xcc>
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f888:	d0a75b17 	ldw	r2,-25236(gp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  80f88c:	d0275f15 	stw	zero,-25220(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  80f890:	d0276015 	stw	zero,-25216(gp)
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80f894:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;              

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80f898:	10ffffcc 	andi	r3,r2,65535
  80f89c:	18e0001c 	xori	r3,r3,32768
  80f8a0:	18e00004 	addi	r3,r3,-32768
  80f8a4:	18001e16 	blt	r3,zero,80f920 <alt_up_sd_card_is_FAT16+0xcc>
  80f8a8:	10c3000c 	andi	r3,r2,3072
  80f8ac:	00830004 	movi	r2,3072
  80f8b0:	18801b26 	beq	r3,r2,80f920 <alt_up_sd_card_is_FAT16+0xcc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80f8b4:	00810004 	movi	r2,1024
  80f8b8:	18803026 	beq	r3,r2,80f97c <alt_up_sd_card_is_FAT16+0x128>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80f8bc:	1800181e 	bne	r3,zero,80f920 <alt_up_sd_card_is_FAT16+0xcc>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80f8c0:	080f5940 	call	80f594 <Check_for_Master_Boot_Record>
  80f8c4:	10001626 	beq	r2,zero,80f920 <alt_up_sd_card_is_FAT16+0xcc>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80f8c8:	d1275f17 	ldw	r4,-25220(gp)
  80f8cc:	080f2240 	call	80f224 <Check_for_DOS_FAT>
  80f8d0:	1009883a 	mov	r4,r2
				}                        
			}
			if (result == true)
  80f8d4:	00800044 	movi	r2,1
  80f8d8:	2080121e 	bne	r4,r2,80f924 <alt_up_sd_card_is_FAT16+0xd0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80f8dc:	01402074 	movhi	r5,129
  80f8e0:	295e1804 	addi	r5,r5,30816
  80f8e4:	28c01083 	ldbu	r3,66(r5)
  80f8e8:	00800404 	movi	r2,16
  80f8ec:	18800c1e 	bne	r3,r2,80f920 <alt_up_sd_card_is_FAT16+0xcc>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f8f0:	2880058b 	ldhu	r2,22(r5)
  80f8f4:	d0a76015 	stw	r2,-25216(gp)
  80f8f8:	00000a06 	br	80f924 <alt_up_sd_card_is_FAT16+0xd0>

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f8fc:	d0e75717 	ldw	r3,-25252(gp)
  80f900:	00800044 	movi	r2,1
  80f904:	18801026 	beq	r3,r2,80f948 <alt_up_sd_card_is_FAT16+0xf4>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
  80f908:	0005883a 	mov	r2,zero
		result = is_sd_card_formated_as_FAT16;
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  80f90c:	d0275715 	stw	zero,-25252(gp)
		is_sd_card_formated_as_FAT16 = false;
  80f910:	d0275815 	stw	zero,-25248(gp)
	}

	return result;
}
  80f914:	dfc00017 	ldw	ra,0(sp)
  80f918:	dec00104 	addi	sp,sp,4
  80f91c:	f800283a 	ret
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80f920:	0009883a 	mov	r4,zero
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
  80f924:	00802074 	movhi	r2,129
  80f928:	109e1304 	addi	r2,r2,30796
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
  80f92c:	d1275715 	stw	r4,-25252(gp)
			search_data.valid = false;
  80f930:	10000415 	stw	zero,16(r2)
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  80f934:	d1275815 	stw	r4,-25248(gp)
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
		}
		result = is_sd_card_formated_as_FAT16;
  80f938:	d0a75817 	ldw	r2,-25248(gp)
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
  80f93c:	dfc00017 	ldw	ra,0(sp)
  80f940:	dec00104 	addi	sp,sp,4
  80f944:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f948:	00802074 	movhi	r2,129
  80f94c:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80f950:	00c02074 	movhi	r3,129
  80f954:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f958:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f95c:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f960:	d0275815 	stw	zero,-25248(gp)
  80f964:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f968:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f96c:	183fff15 	stw	zero,-4(r3)
  80f970:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f974:	18bffc1e 	bne	r3,r2,80f968 <alt_up_sd_card_is_FAT16+0x114>
  80f978:	003fe306 	br	80f908 <alt_up_sd_card_is_FAT16+0xb4>
		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80f97c:	0009883a 	mov	r4,zero
  80f980:	080f2240 	call	80f224 <Check_for_DOS_FAT>
  80f984:	1009883a 	mov	r4,r2
  80f988:	003fd206 	br	80f8d4 <alt_up_sd_card_is_FAT16+0x80>

0080f98c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80f98c:	2006d23a 	srli	r3,r4,8
  80f990:	d0a75f17 	ldw	r2,-25220(gp)
}


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  80f994:	defffd04 	addi	sp,sp,-12
  80f998:	dc400115 	stw	r17,4(sp)
  80f99c:	dc000015 	stw	r16,0(sp)
  80f9a0:	dfc00215 	stw	ra,8(sp)
  80f9a4:	2021883a 	mov	r16,r4
  80f9a8:	2823883a 	mov	r17,r5
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80f9ac:	1889883a 	add	r4,r3,r2
    
    if (first_fat)
  80f9b0:	30001d26 	beq	r6,zero,80fa28 <mark_cluster+0x9c>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80f9b4:	00802074 	movhi	r2,129
  80f9b8:	109e1804 	addi	r2,r2,30816
  80f9bc:	10c01117 	ldw	r3,68(r2)
  80f9c0:	20c7883a 	add	r3,r4,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  80f9c4:	d0a76317 	ldw	r2,-25204(gp)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80f9c8:	1809883a 	mov	r4,r3
  80f9cc:	000b883a 	mov	r5,zero
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  80f9d0:	18800326 	beq	r3,r2,80f9e0 <mark_cluster+0x54>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80f9d4:	080edd80 	call	80edd8 <Read_Sector_Data>
  80f9d8:	0007883a 	mov	r3,zero
  80f9dc:	10000c26 	beq	r2,zero,80fa10 <mark_cluster+0x84>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  80f9e0:	d0e76117 	ldw	r3,-25212(gp)
  80f9e4:	80803fcc 	andi	r2,r16,255
  80f9e8:	897fffcc 	andi	r5,r17,65535
  80f9ec:	19000a17 	ldw	r4,40(r3)
  80f9f0:	2960001c 	xori	r5,r5,32768
  80f9f4:	1085883a 	add	r2,r2,r2
  80f9f8:	29600004 	addi	r5,r5,-32768
  80f9fc:	1105883a 	add	r2,r2,r4
  80fa00:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  80fa04:	00800044 	movi	r2,1
  80fa08:	d0a76215 	stw	r2,-25208(gp)
  80fa0c:	1007883a 	mov	r3,r2
    return true;
}
  80fa10:	1805883a 	mov	r2,r3
  80fa14:	dfc00217 	ldw	ra,8(sp)
  80fa18:	dc400117 	ldw	r17,4(sp)
  80fa1c:	dc000017 	ldw	r16,0(sp)
  80fa20:	dec00304 	addi	sp,sp,12
  80fa24:	f800283a 	ret
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  80fa28:	00802074 	movhi	r2,129
  80fa2c:	109e1804 	addi	r2,r2,30816
  80fa30:	10c01217 	ldw	r3,72(r2)
  80fa34:	20c7883a 	add	r3,r4,r3
  80fa38:	003fe206 	br	80f9c4 <mark_cluster+0x38>

0080fa3c <get_cluster_flag>:
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fa3c:	defffd04 	addi	sp,sp,-12
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fa40:	00802074 	movhi	r2,129
  80fa44:	109e1804 	addi	r2,r2,30816
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fa48:	dc000015 	stw	r16,0(sp)
  80fa4c:	2021883a 	mov	r16,r4
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fa50:	11001117 	ldw	r4,68(r2)
  80fa54:	d0a75f17 	ldw	r2,-25220(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fa58:	8006d23a 	srli	r3,r16,8
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fa5c:	dc400115 	stw	r17,4(sp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fa60:	1105883a 	add	r2,r2,r4
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fa64:	1887883a 	add	r3,r3,r2
     
    if (sector_index != current_sector_index)
  80fa68:	d0a76317 	ldw	r2,-25204(gp)
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fa6c:	2823883a 	mov	r17,r5
  80fa70:	dfc00215 	stw	ra,8(sp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fa74:	1809883a 	mov	r4,r3
  80fa78:	000b883a 	mov	r5,zero
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  80fa7c:	18800326 	beq	r3,r2,80fa8c <get_cluster_flag+0x50>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fa80:	080edd80 	call	80edd8 <Read_Sector_Data>
  80fa84:	0009883a 	mov	r4,zero
  80fa88:	10000826 	beq	r2,zero,80faac <get_cluster_flag+0x70>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  80fa8c:	d0e76117 	ldw	r3,-25212(gp)
  80fa90:	80803fcc 	andi	r2,r16,255
  80fa94:	1085883a 	add	r2,r2,r2
  80fa98:	19000a17 	ldw	r4,40(r3)
  80fa9c:	1105883a 	add	r2,r2,r4
  80faa0:	10c0002b 	ldhuio	r3,0(r2)
  80faa4:	01000044 	movi	r4,1
  80faa8:	88c0000d 	sth	r3,0(r17)
    return true;
}
  80faac:	2005883a 	mov	r2,r4
  80fab0:	dfc00217 	ldw	ra,8(sp)
  80fab4:	dc400117 	ldw	r17,4(sp)
  80fab8:	dc000017 	ldw	r16,0(sp)
  80fabc:	dec00304 	addi	sp,sp,12
  80fac0:	f800283a 	ret

0080fac4 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80fac4:	d0a76217 	ldw	r2,-25208(gp)
  80fac8:	10000c26 	beq	r2,zero,80fafc <Save_Modified_Sector+0x38>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80facc:	d0a76117 	ldw	r2,-25212(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80fad0:	d1676317 	ldw	r5,-25204(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fad4:	10000426 	beq	r2,zero,80fae8 <Save_Modified_Sector+0x24>
  80fad8:	d0e75917 	ldw	r3,-25244(gp)
  80fadc:	1880002b 	ldhuio	r2,0(r3)
  80fae0:	1080008c 	andi	r2,r2,2
  80fae4:	1000151e 	bne	r2,zero,80fb3c <Save_Modified_Sector+0x78>
    {
        result = true;
    }
	else if (initialized == true)
  80fae8:	d0e75717 	ldw	r3,-25252(gp)
  80faec:	00800044 	movi	r2,1
  80faf0:	18800426 	beq	r3,r2,80fb04 <Save_Modified_Sector+0x40>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80faf4:	0005883a 	mov	r2,zero
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
}
  80faf8:	f800283a 	ret

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80fafc:	00800044 	movi	r2,1
  80fb00:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fb04:	00802074 	movhi	r2,129
  80fb08:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80fb0c:	00c02074 	movhi	r3,129
  80fb10:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fb14:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80fb18:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80fb1c:	d0275815 	stw	zero,-25248(gp)
  80fb20:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80fb24:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80fb28:	183fff15 	stw	zero,-4(r3)
  80fb2c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80fb30:	18bffc1e 	bne	r3,r2,80fb24 <Save_Modified_Sector+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80fb34:	0005883a 	mov	r2,zero
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
}
  80fb38:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80fb3c:	2806927a 	slli	r3,r5,9
  80fb40:	d0a75d17 	ldw	r2,-25228(gp)
  80fb44:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80fb48:	d0a75c17 	ldw	r2,-25232(gp)
  80fb4c:	01000604 	movi	r4,24
  80fb50:	1100002d 	sthio	r4,0(r2)
  80fb54:	d1275917 	ldw	r4,-25244(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80fb58:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80fb5c:	10bfffcc 	andi	r2,r2,65535
  80fb60:	10c0010c 	andi	r3,r2,4
  80fb64:	183ffc1e 	bne	r3,zero,80fb58 <Save_Modified_Sector+0x94>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80fb68:	1080040c 	andi	r2,r2,16
  80fb6c:	103fe11e 	bne	r2,zero,80faf4 <Save_Modified_Sector+0x30>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80fb70:	00800044 	movi	r2,1
  80fb74:	d1676315 	stw	r5,-25204(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80fb78:	d0276215 	stw	zero,-25208(gp)
  80fb7c:	f800283a 	ret

0080fb80 <alt_up_sd_card_find_next>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fb80:	d0a76117 	ldw	r2,-25212(gp)
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  80fb84:	deffe404 	addi	sp,sp,-112
  80fb88:	dd801815 	stw	r22,96(sp)
  80fb8c:	dfc01b15 	stw	ra,108(sp)
  80fb90:	df001a15 	stw	fp,104(sp)
  80fb94:	ddc01915 	stw	r23,100(sp)
  80fb98:	dd401715 	stw	r21,92(sp)
  80fb9c:	dd001615 	stw	r20,88(sp)
  80fba0:	dcc01515 	stw	r19,84(sp)
  80fba4:	dc801415 	stw	r18,80(sp)
  80fba8:	dc401315 	stw	r17,76(sp)
  80fbac:	dc001215 	stw	r16,72(sp)
  80fbb0:	202d883a 	mov	r22,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fbb4:	10001426 	beq	r2,zero,80fc08 <alt_up_sd_card_find_next+0x88>
  80fbb8:	d0e75917 	ldw	r3,-25244(gp)
  80fbbc:	1880002b 	ldhuio	r2,0(r3)
  80fbc0:	1080008c 	andi	r2,r2,2
  80fbc4:	10001026 	beq	r2,zero,80fc08 <alt_up_sd_card_find_next+0x88>
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80fbc8:	d0a75817 	ldw	r2,-25248(gp)
  80fbcc:	10001e1e 	bne	r2,zero,80fc48 <alt_up_sd_card_find_next+0xc8>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80fbd0:	01400084 	movi	r5,2
			// Call Find_First first.
			result = 3;
		}
	}
	return result;
}
  80fbd4:	2805883a 	mov	r2,r5
  80fbd8:	dfc01b17 	ldw	ra,108(sp)
  80fbdc:	df001a17 	ldw	fp,104(sp)
  80fbe0:	ddc01917 	ldw	r23,100(sp)
  80fbe4:	dd801817 	ldw	r22,96(sp)
  80fbe8:	dd401717 	ldw	r21,92(sp)
  80fbec:	dd001617 	ldw	r20,88(sp)
  80fbf0:	dcc01517 	ldw	r19,84(sp)
  80fbf4:	dc801417 	ldw	r18,80(sp)
  80fbf8:	dc401317 	ldw	r17,76(sp)
  80fbfc:	dc001217 	ldw	r16,72(sp)
  80fc00:	dec01c04 	addi	sp,sp,112
  80fc04:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80fc08:	d0e75717 	ldw	r3,-25252(gp)
  80fc0c:	00800044 	movi	r2,1
  80fc10:	18bfef1e 	bne	r3,r2,80fbd0 <alt_up_sd_card_find_next+0x50>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fc14:	00802074 	movhi	r2,129
  80fc18:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  80fc1c:	00c02074 	movhi	r3,129
  80fc20:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fc24:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80fc28:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80fc2c:	d0275815 	stw	zero,-25248(gp)
  80fc30:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80fc34:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80fc38:	183fff15 	stw	zero,-4(r3)
  80fc3c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80fc40:	18bffc1e 	bne	r3,r2,80fc34 <alt_up_sd_card_find_next+0xb4>
  80fc44:	003fe206 	br	80fbd0 <alt_up_sd_card_find_next+0x50>
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
  80fc48:	05c02074 	movhi	r23,129
  80fc4c:	bdde1304 	addi	r23,r23,30796
  80fc50:	b8800417 	ldw	r2,16(r23)
  80fc54:	1000021e 	bne	r2,zero,80fc60 <alt_up_sd_card_find_next+0xe0>
  80fc58:	014000c4 	movi	r5,3
  80fc5c:	003fdd06 	br	80fbd4 <alt_up_sd_card_find_next+0x54>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80fc60:	b9800117 	ldw	r6,4(r23)

			if (cluster == 0)
  80fc64:	30003e26 	beq	r6,zero,80fd60 <alt_up_sd_card_find_next+0x1e0>
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80fc68:	b880030f 	ldh	r2,12(r23)
  80fc6c:	00c00084 	movi	r3,2
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80fc70:	3027883a 	mov	r19,r6
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80fc74:	d8c0110d 	sth	r3,68(sp)
  80fc78:	14400044 	addi	r17,r2,1
  80fc7c:	07002074 	movhi	fp,129
  80fc80:	e71e1804 	addi	fp,fp,30816
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80fc84:	e0800383 	ldbu	r2,14(fp)
  80fc88:	98ffff84 	addi	r3,r19,-2
  80fc8c:	e1001417 	ldw	r4,80(fp)
  80fc90:	1887383a 	mul	r3,r3,r2
					int sector_index = search_data.current_sector_in_cluster;
  80fc94:	bc800217 	ldw	r18,8(r23)
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80fc98:	1907883a 	add	r3,r3,r4
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80fc9c:	90801d0e 	bge	r18,r2,80fd14 <alt_up_sd_card_find_next+0x194>
  80fca0:	1cab883a 	add	r21,r3,r18
  80fca4:	dd000104 	addi	r20,sp,4
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80fca8:	d1675f17 	ldw	r5,-25220(gp)
  80fcac:	a809883a 	mov	r4,r21
  80fcb0:	080edd80 	call	80edd8 <Read_Sector_Data>
  80fcb4:	1000a626 	beq	r2,zero,80ff50 <alt_up_sd_card_find_next+0x3d0>
						{        
							for (; file_counter < 16; file_counter++)
  80fcb8:	008003c4 	movi	r2,15
  80fcbc:	14401016 	blt	r2,r17,80fd00 <alt_up_sd_card_find_next+0x180>
  80fcc0:	8820917a 	slli	r16,r17,5
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  80fcc4:	8009883a 	mov	r4,r16
  80fcc8:	a00b883a 	mov	r5,r20
  80fccc:	980d883a 	mov	r6,r19
  80fcd0:	900f883a 	mov	r7,r18
  80fcd4:	080eb4c0 	call	80eb4c <Read_File_Record_At_Offset>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  80fcd8:	84000804 	addi	r16,r16,32
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  80fcdc:	10000526 	beq	r2,zero,80fcf4 <alt_up_sd_card_find_next+0x174>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  80fce0:	d9000103 	ldbu	r4,4(sp)
  80fce4:	20c03fcc 	andi	r3,r4,255
  80fce8:	18000226 	beq	r3,zero,80fcf4 <alt_up_sd_card_find_next+0x174>
  80fcec:	00803944 	movi	r2,229
  80fcf0:	1880451e 	bne	r3,r2,80fe08 <alt_up_sd_card_find_next+0x288>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  80fcf4:	8c400044 	addi	r17,r17,1
  80fcf8:	00800404 	movi	r2,16
  80fcfc:	88bff11e 	bne	r17,r2,80fcc4 <alt_up_sd_card_find_next+0x144>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80fd00:	e0800383 	ldbu	r2,14(fp)
  80fd04:	94800044 	addi	r18,r18,1
  80fd08:	ad400044 	addi	r21,r21,1
  80fd0c:	0023883a 	mov	r17,zero
  80fd10:	90bfe516 	blt	r18,r2,80fca8 <alt_up_sd_card_find_next+0x128>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fd14:	e0c01117 	ldw	r3,68(fp)
  80fd18:	d0a75f17 	ldw	r2,-25220(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fd1c:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fd20:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  80fd24:	d0e76317 	ldw	r3,-25204(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fd28:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  80fd2c:	20c08b26 	beq	r4,r3,80ff5c <alt_up_sd_card_find_next+0x3dc>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fd30:	000b883a 	mov	r5,zero
  80fd34:	080edd80 	call	80edd8 <Read_Sector_Data>
  80fd38:	1000881e 	bne	r2,zero,80ff5c <alt_up_sd_card_find_next+0x3dc>
						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
							{
								result = -1;
								search_data.valid = false;
  80fd3c:	00bfffc4 	movi	r2,-1
  80fd40:	d880110d 	sth	r2,68(sp)
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80fd44:	00bffdd4 	movui	r2,65527
  80fd48:	14ffce0e 	bge	r2,r19,80fc84 <alt_up_sd_card_find_next+0x104>
  80fd4c:	d8c0110b 	ldhu	r3,68(sp)
  80fd50:	197fffcc 	andi	r5,r3,65535
  80fd54:	2960001c 	xori	r5,r5,32768
  80fd58:	29600004 	addi	r5,r5,-32768
  80fd5c:	003f9d06 	br	80fbd4 <alt_up_sd_card_find_next+0x54>
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80fd60:	07002074 	movhi	fp,129
  80fd64:	e71e1804 	addi	fp,fp,30816
  80fd68:	e080050b 	ldhu	r2,20(fp)
  80fd6c:	e0c0030b 	ldhu	r3,12(fp)
				int sector_index = search_data.current_sector_in_cluster;
  80fd70:	bc800217 	ldw	r18,8(r23)
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80fd74:	1004917a 	slli	r2,r2,5
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
  80fd78:	b900030b 	ldhu	r4,12(r23)
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80fd7c:	10e9283a 	div	r20,r2,r3
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  80fd80:	95001f0e 	bge	r18,r20,80fe00 <alt_up_sd_card_find_next+0x280>
			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
  80fd84:	20bfffcc 	andi	r2,r4,65535
  80fd88:	10a0001c 	xori	r2,r2,32768
  80fd8c:	10a00004 	addi	r2,r2,-32768
  80fd90:	14400044 	addi	r17,r2,1
  80fd94:	dcc00104 	addi	r19,sp,4
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80fd98:	e1001317 	ldw	r4,76(fp)
  80fd9c:	d1675f17 	ldw	r5,-25220(gp)
  80fda0:	9109883a 	add	r4,r18,r4
  80fda4:	080edd80 	call	80edd8 <Read_Sector_Data>
  80fda8:	10001526 	beq	r2,zero,80fe00 <alt_up_sd_card_find_next+0x280>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80fdac:	008003c4 	movi	r2,15
  80fdb0:	14401016 	blt	r2,r17,80fdf4 <alt_up_sd_card_find_next+0x274>
  80fdb4:	8820917a 	slli	r16,r17,5
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  80fdb8:	8009883a 	mov	r4,r16
  80fdbc:	980b883a 	mov	r5,r19
  80fdc0:	000d883a 	mov	r6,zero
  80fdc4:	900f883a 	mov	r7,r18
  80fdc8:	080eb4c0 	call	80eb4c <Read_File_Record_At_Offset>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80fdcc:	84000804 	addi	r16,r16,32
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  80fdd0:	10000526 	beq	r2,zero,80fde8 <alt_up_sd_card_find_next+0x268>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  80fdd4:	d9000103 	ldbu	r4,4(sp)
  80fdd8:	20c03fcc 	andi	r3,r4,255
  80fddc:	18000226 	beq	r3,zero,80fde8 <alt_up_sd_card_find_next+0x268>
  80fde0:	00803944 	movi	r2,229
  80fde4:	1880541e 	bne	r3,r2,80ff38 <alt_up_sd_card_find_next+0x3b8>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80fde8:	8c400044 	addi	r17,r17,1
  80fdec:	00800404 	movi	r2,16
  80fdf0:	88bff11e 	bne	r17,r2,80fdb8 <alt_up_sd_card_find_next+0x238>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  80fdf4:	94800044 	addi	r18,r18,1
  80fdf8:	0023883a 	mov	r17,zero
  80fdfc:	953fe61e 	bne	r18,r20,80fd98 <alt_up_sd_card_find_next+0x218>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80fe00:	017fffc4 	movi	r5,-1
  80fe04:	003f7306 	br	80fbd4 <alt_up_sd_card_find_next+0x54>
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe08:	00800804 	movi	r2,32
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
										search_data.file_index_in_sector = file_counter;
										search_data.current_sector_in_cluster = sector_index;
  80fe0c:	bc800215 	stw	r18,8(r23)
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  80fe10:	bcc00115 	stw	r19,4(r23)
										search_data.file_index_in_sector = file_counter;
  80fe14:	bc40030d 	sth	r17,12(r23)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe18:	18804b26 	beq	r3,r2,80ff48 <alt_up_sd_card_find_next+0x3c8>
		{
			file_name[flength] = file_record->name[index];
  80fe1c:	b1000005 	stb	r4,0(r22)
  80fe20:	01000044 	movi	r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe24:	d8c00143 	ldbu	r3,5(sp)
  80fe28:	01800804 	movi	r6,32
  80fe2c:	18803fcc 	andi	r2,r3,255
  80fe30:	11800326 	beq	r2,r6,80fe40 <alt_up_sd_card_find_next+0x2c0>
		{
			file_name[flength] = file_record->name[index];
  80fe34:	b105883a 	add	r2,r22,r4
  80fe38:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fe3c:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe40:	d8c00183 	ldbu	r3,6(sp)
  80fe44:	18803fcc 	andi	r2,r3,255
  80fe48:	11800326 	beq	r2,r6,80fe58 <alt_up_sd_card_find_next+0x2d8>
		{
			file_name[flength] = file_record->name[index];
  80fe4c:	b105883a 	add	r2,r22,r4
  80fe50:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fe54:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe58:	d8c001c3 	ldbu	r3,7(sp)
  80fe5c:	18803fcc 	andi	r2,r3,255
  80fe60:	11800326 	beq	r2,r6,80fe70 <alt_up_sd_card_find_next+0x2f0>
		{
			file_name[flength] = file_record->name[index];
  80fe64:	b105883a 	add	r2,r22,r4
  80fe68:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fe6c:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe70:	d8c00203 	ldbu	r3,8(sp)
  80fe74:	18803fcc 	andi	r2,r3,255
  80fe78:	11800326 	beq	r2,r6,80fe88 <alt_up_sd_card_find_next+0x308>
		{
			file_name[flength] = file_record->name[index];
  80fe7c:	b105883a 	add	r2,r22,r4
  80fe80:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fe84:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fe88:	d8c00243 	ldbu	r3,9(sp)
  80fe8c:	18803fcc 	andi	r2,r3,255
  80fe90:	11800326 	beq	r2,r6,80fea0 <alt_up_sd_card_find_next+0x320>
		{
			file_name[flength] = file_record->name[index];
  80fe94:	b105883a 	add	r2,r22,r4
  80fe98:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fe9c:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80fea0:	d8c00283 	ldbu	r3,10(sp)
  80fea4:	18803fcc 	andi	r2,r3,255
  80fea8:	11800326 	beq	r2,r6,80feb8 <alt_up_sd_card_find_next+0x338>
		{
			file_name[flength] = file_record->name[index];
  80feac:	b105883a 	add	r2,r22,r4
  80feb0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80feb4:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80feb8:	d8c002c3 	ldbu	r3,11(sp)
  80febc:	18803fcc 	andi	r2,r3,255
  80fec0:	11800326 	beq	r2,r6,80fed0 <alt_up_sd_card_find_next+0x350>
		{
			file_name[flength] = file_record->name[index];
  80fec4:	b105883a 	add	r2,r22,r4
  80fec8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80fecc:	21000044 	addi	r4,r4,1
		}
	}
	if (file_record->extension[0] != ' ')
  80fed0:	d9400303 	ldbu	r5,12(sp)
  80fed4:	29801426 	beq	r5,r6,80ff28 <alt_up_sd_card_find_next+0x3a8>
	{
		file_name[flength] = '.';
  80fed8:	b107883a 	add	r3,r22,r4
  80fedc:	00800b84 	movi	r2,46
  80fee0:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  80fee4:	21000044 	addi	r4,r4,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80fee8:	29800326 	beq	r5,r6,80fef8 <alt_up_sd_card_find_next+0x378>
			{
				file_name[flength] = file_record->extension[index];
  80feec:	b105883a 	add	r2,r22,r4
  80fef0:	11400005 	stb	r5,0(r2)
				flength = flength + 1;
  80fef4:	21000044 	addi	r4,r4,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80fef8:	d8c00343 	ldbu	r3,13(sp)
  80fefc:	18803fcc 	andi	r2,r3,255
  80ff00:	11800326 	beq	r2,r6,80ff10 <alt_up_sd_card_find_next+0x390>
			{
				file_name[flength] = file_record->extension[index];
  80ff04:	b105883a 	add	r2,r22,r4
  80ff08:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80ff0c:	21000044 	addi	r4,r4,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80ff10:	d8c00383 	ldbu	r3,14(sp)
  80ff14:	18803fcc 	andi	r2,r3,255
  80ff18:	11800326 	beq	r2,r6,80ff28 <alt_up_sd_card_find_next+0x3a8>
			{
				file_name[flength] = file_record->extension[index];
  80ff1c:	b105883a 	add	r2,r22,r4
  80ff20:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80ff24:	21000044 	addi	r4,r4,1
			}
		}
	}
	file_name[flength] = 0;
  80ff28:	b105883a 	add	r2,r22,r4
  80ff2c:	000b883a 	mov	r5,zero
  80ff30:	10000005 	stb	zero,0(r2)
  80ff34:	003f2706 	br	80fbd4 <alt_up_sd_card_find_next+0x54>
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80ff38:	00800804 	movi	r2,32
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
									search_data.current_sector_in_cluster = sector_index;
  80ff3c:	bc800215 	stw	r18,8(r23)
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  80ff40:	bc40030d 	sth	r17,12(r23)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80ff44:	18bfb51e 	bne	r3,r2,80fe1c <alt_up_sd_card_find_next+0x29c>
  80ff48:	0009883a 	mov	r4,zero
  80ff4c:	003fb506 	br	80fe24 <alt_up_sd_card_find_next+0x2a4>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  80ff50:	e0800383 	ldbu	r2,14(fp)
  80ff54:	90bf7b16 	blt	r18,r2,80fd44 <alt_up_sd_card_find_next+0x1c4>
  80ff58:	003f6e06 	br	80fd14 <alt_up_sd_card_find_next+0x194>
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  80ff5c:	d0e76117 	ldw	r3,-25212(gp)
  80ff60:	98803fcc 	andi	r2,r19,255
  80ff64:	1085883a 	add	r2,r2,r2
  80ff68:	19000a17 	ldw	r4,40(r3)
  80ff6c:	1105883a 	add	r2,r2,r4
  80ff70:	10c0002b 	ldhuio	r3,0(r2)
  80ff74:	d8c0000d 	sth	r3,0(sp)
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  80ff78:	d880000f 	ldh	r2,0(sp)
  80ff7c:	00fffe14 	movui	r3,65528
  80ff80:	14fffe0c 	andi	r19,r2,65528
  80ff84:	98ff6f1e 	bne	r19,r3,80fd44 <alt_up_sd_card_find_next+0x1c4>
							{
								result = -1;
								search_data.valid = false;
  80ff88:	017fffc4 	movi	r5,-1
  80ff8c:	b8000415 	stw	zero,16(r23)
  80ff90:	003f1006 	br	80fbd4 <alt_up_sd_card_find_next+0x54>

0080ff94 <find_file_in_directory>:
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  80ff94:	defff404 	addi	sp,sp,-48
  80ff98:	dd800915 	stw	r22,36(sp)
  80ff9c:	dcc00615 	stw	r19,24(sp)
  80ffa0:	dc400415 	stw	r17,16(sp)
  80ffa4:	202d883a 	mov	r22,r4
  80ffa8:	dfc00b15 	stw	ra,44(sp)
  80ffac:	ddc00a15 	stw	r23,40(sp)
  80ffb0:	dd400815 	stw	r21,32(sp)
  80ffb4:	dd000715 	stw	r20,28(sp)
  80ffb8:	dc800515 	stw	r18,20(sp)
  80ffbc:	dc000315 	stw	r16,12(sp)

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  80ffc0:	2809883a 	mov	r4,r5
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  80ffc4:	2827883a 	mov	r19,r5
  80ffc8:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  80ffcc:	080400c0 	call	80400c <strlen>
    
    for(index = 0; index < length; index++)
  80ffd0:	00810f0e 	bge	zero,r2,810410 <find_file_in_directory+0x47c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80ffd4:	98c00007 	ldb	r3,0(r19)
  80ffd8:	01401704 	movi	r5,92
  80ffdc:	19430e26 	beq	r3,r5,810c18 <find_file_in_directory+0xc84>
  80ffe0:	01000bc4 	movi	r4,47
  80ffe4:	19030c26 	beq	r3,r4,810c18 <find_file_in_directory+0xc84>
  80ffe8:	0021883a 	mov	r16,zero
  80ffec:	00000306 	br	80fffc <find_file_in_directory+0x68>
  80fff0:	18c00007 	ldb	r3,0(r3)
  80fff4:	19410826 	beq	r3,r5,810418 <find_file_in_directory+0x484>
  80fff8:	19010726 	beq	r3,r4,810418 <find_file_in_directory+0x484>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80fffc:	84000044 	addi	r16,r16,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810000:	9c07883a 	add	r3,r19,r16
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810004:	143ffa1e 	bne	r2,r16,80fff0 <find_file_in_directory+0x5c>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810008:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  81000c:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810010:	d88000c5 	stb	r2,3(sp)
  810014:	d8800105 	stb	r2,4(sp)
  810018:	d8800145 	stb	r2,5(sp)
  81001c:	d8800185 	stb	r2,6(sp)
  810020:	d88001c5 	stb	r2,7(sp)
  810024:	d8800205 	stb	r2,8(sp)
  810028:	d8800245 	stb	r2,9(sp)
  81002c:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810030:	d8800005 	stb	r2,0(sp)
  810034:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  810038:	9809883a 	mov	r4,r19
  81003c:	080400c0 	call	80400c <strlen>
  810040:	102b883a 	mov	r21,r2
  810044:	000d883a 	mov	r6,zero
  810048:	0029883a 	mov	r20,zero
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  81004c:	35401a0e 	bge	r6,r21,8100b8 <find_file_in_directory+0x124>
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  810050:	3507c83a 	sub	r3,r6,r20
  810054:	d88000c4 	addi	r2,sp,3
  810058:	10cb883a 	add	r5,r2,r3
  81005c:	9989883a 	add	r4,r19,r6
  810060:	a811883a 	mov	r8,r21
  810064:	01ffffc4 	movi	r7,-1
  810068:	02400b84 	movi	r9,46
  81006c:	00000806 	br	810090 <find_file_in_directory+0xfc>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  810070:	31c5c83a 	sub	r2,r6,r7
  810074:	16c5883a 	add	r2,r2,sp
    {
        if (file_name[index] == '.')
        {
            ext_index = index;
        }
        else if (ext_index < 0)
  810078:	38011216 	blt	r7,zero,8104c4 <find_file_in_directory+0x530>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  81007c:	10ffffc5 	stb	r3,-1(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  810080:	31800044 	addi	r6,r6,1
  810084:	21000044 	addi	r4,r4,1
  810088:	29400044 	addi	r5,r5,1
  81008c:	32000a26 	beq	r6,r8,8100b8 <find_file_in_directory+0x124>
    {
        if (file_name[index] == '.')
  810090:	20c00003 	ldbu	r3,0(r4)
  810094:	18803fcc 	andi	r2,r3,255
  810098:	1080201c 	xori	r2,r2,128
  81009c:	10bfe004 	addi	r2,r2,-128
  8100a0:	127ff31e 	bne	r2,r9,810070 <find_file_in_directory+0xdc>
  8100a4:	300f883a 	mov	r7,r6
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  8100a8:	31800044 	addi	r6,r6,1
  8100ac:	21000044 	addi	r4,r4,1
  8100b0:	29400044 	addi	r5,r5,1
  8100b4:	323ff61e 	bne	r6,r8,810090 <find_file_in_directory+0xfc>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  8100b8:	b001041e 	bne	r22,zero,8104cc <find_file_in_directory+0x538>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8100bc:	05c02074 	movhi	r23,129
  8100c0:	bdde1804 	addi	r23,r23,30816
  8100c4:	b880050b 	ldhu	r2,20(r23)
  8100c8:	b8c0030b 	ldhu	r3,12(r23)
  8100cc:	1004917a 	slli	r2,r2,5
  8100d0:	10e9283a 	div	r20,r2,r3
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8100d4:	a000c126 	beq	r20,zero,8103dc <find_file_in_directory+0x448>
  8100d8:	0027883a 	mov	r19,zero
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  8100dc:	b9001317 	ldw	r4,76(r23)
  8100e0:	d1675f17 	ldw	r5,-25220(gp)
  8100e4:	9909883a 	add	r4,r19,r4
  8100e8:	080edd80 	call	80edd8 <Read_Sector_Data>
  8100ec:	1000bb26 	beq	r2,zero,8103dc <find_file_in_directory+0x448>
                    }
                }
            }
            else
            {
                break;
  8100f0:	0025883a 	mov	r18,zero
  8100f4:	04000644 	movi	r16,25
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  8100f8:	9009883a 	mov	r4,r18
  8100fc:	880b883a 	mov	r5,r17
  810100:	000d883a 	mov	r6,zero
  810104:	980f883a 	mov	r7,r19
  810108:	080eb4c0 	call	80eb4c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81010c:	89000003 	ldbu	r4,0(r17)
  810110:	00803944 	movi	r2,229
  810114:	20c03fcc 	andi	r3,r4,255
  810118:	1880ab26 	beq	r3,r2,8103c8 <find_file_in_directory+0x434>
  81011c:	1800aa26 	beq	r3,zero,8103c8 <find_file_in_directory+0x434>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810120:	20bfe7c4 	addi	r2,r4,-97
  810124:	10803fcc 	andi	r2,r2,255
  810128:	8082442e 	bgeu	r16,r2,810a3c <find_file_in_directory+0xaa8>
  81012c:	d8c000c3 	ldbu	r3,3(sp)
  810130:	21003fcc 	andi	r4,r4,255
  810134:	2100201c 	xori	r4,r4,128
  810138:	18bfe7c4 	addi	r2,r3,-97
  81013c:	10803fcc 	andi	r2,r2,255
  810140:	213fe004 	addi	r4,r4,-128
  810144:	8082452e 	bgeu	r16,r2,810a5c <find_file_in_directory+0xac8>
  810148:	18803fcc 	andi	r2,r3,255
  81014c:	1080201c 	xori	r2,r2,128
  810150:	10bfe004 	addi	r2,r2,-128
  810154:	2082461e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  810158:	88c00043 	ldbu	r3,1(r17)
  81015c:	18bfe7c4 	addi	r2,r3,-97
  810160:	10803fcc 	andi	r2,r2,255
  810164:	8082592e 	bgeu	r16,r2,810acc <find_file_in_directory+0xb38>
  810168:	19003fcc 	andi	r4,r3,255
  81016c:	2100201c 	xori	r4,r4,128
  810170:	213fe004 	addi	r4,r4,-128
  810174:	d8c00103 	ldbu	r3,4(sp)
  810178:	18bfe7c4 	addi	r2,r3,-97
  81017c:	10803fcc 	andi	r2,r2,255
  810180:	80824d2e 	bgeu	r16,r2,810ab8 <find_file_in_directory+0xb24>
  810184:	18803fcc 	andi	r2,r3,255
  810188:	1080201c 	xori	r2,r2,128
  81018c:	10bfe004 	addi	r2,r2,-128
  810190:	2082371e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  810194:	88c00083 	ldbu	r3,2(r17)
  810198:	18bfe7c4 	addi	r2,r3,-97
  81019c:	10803fcc 	andi	r2,r2,255
  8101a0:	80825e2e 	bgeu	r16,r2,810b1c <find_file_in_directory+0xb88>
  8101a4:	19003fcc 	andi	r4,r3,255
  8101a8:	2100201c 	xori	r4,r4,128
  8101ac:	213fe004 	addi	r4,r4,-128
  8101b0:	d8c00143 	ldbu	r3,5(sp)
  8101b4:	18bfe7c4 	addi	r2,r3,-97
  8101b8:	10803fcc 	andi	r2,r2,255
  8101bc:	8082522e 	bgeu	r16,r2,810b08 <find_file_in_directory+0xb74>
  8101c0:	18803fcc 	andi	r2,r3,255
  8101c4:	1080201c 	xori	r2,r2,128
  8101c8:	10bfe004 	addi	r2,r2,-128
  8101cc:	2082281e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  8101d0:	88c000c3 	ldbu	r3,3(r17)
  8101d4:	18bfe7c4 	addi	r2,r3,-97
  8101d8:	10803fcc 	andi	r2,r2,255
  8101dc:	8082612e 	bgeu	r16,r2,810b64 <find_file_in_directory+0xbd0>
  8101e0:	19003fcc 	andi	r4,r3,255
  8101e4:	2100201c 	xori	r4,r4,128
  8101e8:	213fe004 	addi	r4,r4,-128
  8101ec:	d8c00183 	ldbu	r3,6(sp)
  8101f0:	18bfe7c4 	addi	r2,r3,-97
  8101f4:	10803fcc 	andi	r2,r2,255
  8101f8:	8082552e 	bgeu	r16,r2,810b50 <find_file_in_directory+0xbbc>
  8101fc:	18803fcc 	andi	r2,r3,255
  810200:	1080201c 	xori	r2,r2,128
  810204:	10bfe004 	addi	r2,r2,-128
  810208:	2082191e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  81020c:	88c00103 	ldbu	r3,4(r17)
  810210:	18bfe7c4 	addi	r2,r3,-97
  810214:	10803fcc 	andi	r2,r2,255
  810218:	80825c2e 	bgeu	r16,r2,810b8c <find_file_in_directory+0xbf8>
  81021c:	19003fcc 	andi	r4,r3,255
  810220:	2100201c 	xori	r4,r4,128
  810224:	213fe004 	addi	r4,r4,-128
  810228:	d8c001c3 	ldbu	r3,7(sp)
  81022c:	18bfe7c4 	addi	r2,r3,-97
  810230:	10803fcc 	andi	r2,r2,255
  810234:	8082502e 	bgeu	r16,r2,810b78 <find_file_in_directory+0xbe4>
  810238:	18803fcc 	andi	r2,r3,255
  81023c:	1080201c 	xori	r2,r2,128
  810240:	10bfe004 	addi	r2,r2,-128
  810244:	20820a1e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  810248:	88c00143 	ldbu	r3,5(r17)
  81024c:	18bfe7c4 	addi	r2,r3,-97
  810250:	10803fcc 	andi	r2,r2,255
  810254:	8082572e 	bgeu	r16,r2,810bb4 <find_file_in_directory+0xc20>
  810258:	19003fcc 	andi	r4,r3,255
  81025c:	2100201c 	xori	r4,r4,128
  810260:	213fe004 	addi	r4,r4,-128
  810264:	d8c00203 	ldbu	r3,8(sp)
  810268:	18bfe7c4 	addi	r2,r3,-97
  81026c:	10803fcc 	andi	r2,r2,255
  810270:	80824b2e 	bgeu	r16,r2,810ba0 <find_file_in_directory+0xc0c>
  810274:	18803fcc 	andi	r2,r3,255
  810278:	1080201c 	xori	r2,r2,128
  81027c:	10bfe004 	addi	r2,r2,-128
  810280:	2081fb1e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  810284:	88c00183 	ldbu	r3,6(r17)
  810288:	18bfe7c4 	addi	r2,r3,-97
  81028c:	10803fcc 	andi	r2,r2,255
  810290:	8082522e 	bgeu	r16,r2,810bdc <find_file_in_directory+0xc48>
  810294:	19003fcc 	andi	r4,r3,255
  810298:	2100201c 	xori	r4,r4,128
  81029c:	213fe004 	addi	r4,r4,-128
  8102a0:	d8c00243 	ldbu	r3,9(sp)
  8102a4:	18bfe7c4 	addi	r2,r3,-97
  8102a8:	10803fcc 	andi	r2,r2,255
  8102ac:	8082462e 	bgeu	r16,r2,810bc8 <find_file_in_directory+0xc34>
  8102b0:	18803fcc 	andi	r2,r3,255
  8102b4:	1080201c 	xori	r2,r2,128
  8102b8:	10bfe004 	addi	r2,r2,-128
  8102bc:	2081ec1e 	bne	r4,r2,810a70 <find_file_in_directory+0xadc>
  8102c0:	88c001c3 	ldbu	r3,7(r17)
  8102c4:	18bfe7c4 	addi	r2,r3,-97
  8102c8:	10803fcc 	andi	r2,r2,255
  8102cc:	80824c36 	bltu	r16,r2,810c00 <find_file_in_directory+0xc6c>
  8102d0:	18bff804 	addi	r2,r3,-32
  8102d4:	11003fcc 	andi	r4,r2,255
  8102d8:	2100201c 	xori	r4,r4,128
  8102dc:	213fe004 	addi	r4,r4,-128
  8102e0:	d8c00283 	ldbu	r3,10(sp)
  8102e4:	18bfe7c4 	addi	r2,r3,-97
  8102e8:	10803fcc 	andi	r2,r2,255
  8102ec:	80824036 	bltu	r16,r2,810bf0 <find_file_in_directory+0xc5c>
  8102f0:	18bff804 	addi	r2,r3,-32
  8102f4:	10803fcc 	andi	r2,r2,255
  8102f8:	1080201c 	xori	r2,r2,128
  8102fc:	10bfe004 	addi	r2,r2,-128
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810300:	88c00203 	ldbu	r3,8(r17)
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810304:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810308:	18bfe7c4 	addi	r2,r3,-97
  81030c:	10803fcc 	andi	r2,r2,255
  810310:	8081dc2e 	bgeu	r16,r2,810a84 <find_file_in_directory+0xaf0>
  810314:	19003fcc 	andi	r4,r3,255
  810318:	d8c00003 	ldbu	r3,0(sp)
  81031c:	2100201c 	xori	r4,r4,128
  810320:	213fe004 	addi	r4,r4,-128
  810324:	18bfe7c4 	addi	r2,r3,-97
  810328:	10803fcc 	andi	r2,r2,255
  81032c:	8081dd2e 	bgeu	r16,r2,810aa4 <find_file_in_directory+0xb10>
  810330:	18803fcc 	andi	r2,r3,255
  810334:	1080201c 	xori	r2,r2,128
  810338:	10bfe004 	addi	r2,r2,-128
  81033c:	2080221e 	bne	r4,r2,8103c8 <find_file_in_directory+0x434>
  810340:	88c00243 	ldbu	r3,9(r17)
  810344:	18bfe7c4 	addi	r2,r3,-97
  810348:	10803fcc 	andi	r2,r2,255
  81034c:	8081e92e 	bgeu	r16,r2,810af4 <find_file_in_directory+0xb60>
  810350:	19003fcc 	andi	r4,r3,255
  810354:	2100201c 	xori	r4,r4,128
  810358:	213fe004 	addi	r4,r4,-128
  81035c:	d8c00043 	ldbu	r3,1(sp)
  810360:	18bfe7c4 	addi	r2,r3,-97
  810364:	10803fcc 	andi	r2,r2,255
  810368:	8081dd2e 	bgeu	r16,r2,810ae0 <find_file_in_directory+0xb4c>
  81036c:	18803fcc 	andi	r2,r3,255
  810370:	1080201c 	xori	r2,r2,128
  810374:	10bfe004 	addi	r2,r2,-128
  810378:	2080131e 	bne	r4,r2,8103c8 <find_file_in_directory+0x434>
  81037c:	88c00283 	ldbu	r3,10(r17)
  810380:	18bfe7c4 	addi	r2,r3,-97
  810384:	10803fcc 	andi	r2,r2,255
  810388:	8081ed36 	bltu	r16,r2,810b40 <find_file_in_directory+0xbac>
  81038c:	18bff804 	addi	r2,r3,-32
  810390:	11003fcc 	andi	r4,r2,255
  810394:	2100201c 	xori	r4,r4,128
  810398:	213fe004 	addi	r4,r4,-128
  81039c:	d8c00083 	ldbu	r3,2(sp)
  8103a0:	18bfe7c4 	addi	r2,r3,-97
  8103a4:	10803fcc 	andi	r2,r2,255
  8103a8:	8081e136 	bltu	r16,r2,810b30 <find_file_in_directory+0xb9c>
  8103ac:	18bff804 	addi	r2,r3,-32
  8103b0:	10803fcc 	andi	r2,r2,255
  8103b4:	1080201c 	xori	r2,r2,128
  8103b8:	10bfe004 	addi	r2,r2,-128
  8103bc:	2080021e 	bne	r4,r2,8103c8 <find_file_in_directory+0x434>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
  8103c0:	2805003a 	cmpeq	r2,r5,zero
  8103c4:	10021226 	beq	r2,zero,810c10 <find_file_in_directory+0xc7c>
  8103c8:	94800804 	addi	r18,r18,32
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8103cc:	00808004 	movi	r2,512
  8103d0:	90bf491e 	bne	r18,r2,8100f8 <find_file_in_directory+0x164>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8103d4:	9cc00044 	addi	r19,r19,1
  8103d8:	a4ff401e 	bne	r20,r19,8100dc <find_file_in_directory+0x148>
                {
                    // Directory path is invalid.                 
                    return false;
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  8103dc:	002b883a 	mov	r21,zero
    }
    
    return result;   
}
  8103e0:	a805883a 	mov	r2,r21
  8103e4:	dfc00b17 	ldw	ra,44(sp)
  8103e8:	ddc00a17 	ldw	r23,40(sp)
  8103ec:	dd800917 	ldw	r22,36(sp)
  8103f0:	dd400817 	ldw	r21,32(sp)
  8103f4:	dd000717 	ldw	r20,28(sp)
  8103f8:	dcc00617 	ldw	r19,24(sp)
  8103fc:	dc800517 	ldw	r18,20(sp)
  810400:	dc400417 	ldw	r17,16(sp)
  810404:	dc000317 	ldw	r16,12(sp)
  810408:	dec00c04 	addi	sp,sp,48
  81040c:	f800283a 	ret
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810410:	0021883a 	mov	r16,zero
        {
            break;
        }
    }
    
    if (index == length)
  810414:	103efc26 	beq	r2,zero,810008 <find_file_in_directory+0x74>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810418:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  81041c:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810420:	d88000c5 	stb	r2,3(sp)
  810424:	d8800105 	stb	r2,4(sp)
  810428:	d8800145 	stb	r2,5(sp)
  81042c:	d8800185 	stb	r2,6(sp)
  810430:	d88001c5 	stb	r2,7(sp)
  810434:	d8800205 	stb	r2,8(sp)
  810438:	d8800245 	stb	r2,9(sp)
  81043c:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810440:	d8800005 	stb	r2,0(sp)
  810444:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  810448:	9809883a 	mov	r4,r19
  81044c:	080400c0 	call	80400c <strlen>
  810450:	102b883a 	mov	r21,r2
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  810454:	043efb0e 	bge	zero,r16,810044 <find_file_in_directory+0xb0>
  810458:	0029883a 	mov	r20,zero
    {
        last_dir_separator = last_dir_separator+location+1;
  81045c:	80800044 	addi	r2,r16,1
  810460:	a0a9883a 	add	r20,r20,r2
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  810464:	9d25883a 	add	r18,r19,r20

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  810468:	9009883a 	mov	r4,r18
  81046c:	080400c0 	call	80400c <strlen>
    
    for(index = 0; index < length; index++)
  810470:	00800f0e 	bge	zero,r2,8104b0 <find_file_in_directory+0x51c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810474:	90c00007 	ldb	r3,0(r18)
  810478:	01401704 	movi	r5,92
  81047c:	19400c26 	beq	r3,r5,8104b0 <find_file_in_directory+0x51c>
  810480:	01000bc4 	movi	r4,47
  810484:	19000a26 	beq	r3,r4,8104b0 <find_file_in_directory+0x51c>
  810488:	0021883a 	mov	r16,zero
  81048c:	00000306 	br	81049c <find_file_in_directory+0x508>
  810490:	18c00007 	ldb	r3,0(r3)
  810494:	19400826 	beq	r3,r5,8104b8 <find_file_in_directory+0x524>
  810498:	19000726 	beq	r3,r4,8104b8 <find_file_in_directory+0x524>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  81049c:	84000044 	addi	r16,r16,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8104a0:	9407883a 	add	r3,r18,r16
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8104a4:	143ffa1e 	bne	r2,r16,810490 <find_file_in_directory+0x4fc>
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  8104a8:	a00d883a 	mov	r6,r20
  8104ac:	003ee706 	br	81004c <find_file_in_directory+0xb8>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8104b0:	0021883a 	mov	r16,zero
        {
            break;
        }
    }
    
    if (index == length)
  8104b4:	103ffc26 	beq	r2,zero,8104a8 <find_file_in_directory+0x514>
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  8104b8:	043fe816 	blt	zero,r16,81045c <find_file_in_directory+0x4c8>
  8104bc:	a00d883a 	mov	r6,r20
  8104c0:	003ee206 	br	81004c <find_file_in_directory+0xb8>
        {
            ext_index = index;
        }
        else if (ext_index < 0)
        {
            name[index-last_dir_separator] = file_name[index];
  8104c4:	28c00005 	stb	r3,0(r5)
  8104c8:	003eed06 	br	810080 <find_file_in_directory+0xec>
  8104cc:	05c02074 	movhi	r23,129
  8104d0:	bdde1804 	addi	r23,r23,30816
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8104d4:	b8800383 	ldbu	r2,14(r23)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8104d8:	b027883a 	mov	r19,r22
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8104dc:	98ffff84 	addi	r3,r19,-2
  8104e0:	b9001417 	ldw	r4,80(r23)
  8104e4:	1887383a 	mul	r3,r3,r2
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8104e8:	002b883a 	mov	r21,zero
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8104ec:	192d883a 	add	r22,r3,r4
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8104f0:	1000e126 	beq	r2,zero,810878 <find_file_in_directory+0x8e4>
  8104f4:	0029883a 	mov	r20,zero
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  8104f8:	d1675f17 	ldw	r5,-25220(gp)
  8104fc:	b509883a 	add	r4,r22,r20
  810500:	080edd80 	call	80edd8 <Read_Sector_Data>
  810504:	1000dc26 	beq	r2,zero,810878 <find_file_in_directory+0x8e4>
                        }
                    }
                }
                else
                {
                    break;
  810508:	0025883a 	mov	r18,zero
  81050c:	04000644 	movi	r16,25
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  810510:	9009883a 	mov	r4,r18
  810514:	880b883a 	mov	r5,r17
  810518:	980d883a 	mov	r6,r19
  81051c:	a00f883a 	mov	r7,r20
  810520:	080eb4c0 	call	80eb4c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  810524:	89000003 	ldbu	r4,0(r17)
  810528:	00803944 	movi	r2,229
  81052c:	20c03fcc 	andi	r3,r4,255
  810530:	1880ab26 	beq	r3,r2,8107e0 <find_file_in_directory+0x84c>
  810534:	1800aa26 	beq	r3,zero,8107e0 <find_file_in_directory+0x84c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810538:	20bfe7c4 	addi	r2,r4,-97
  81053c:	10803fcc 	andi	r2,r2,255
  810540:	8080e12e 	bgeu	r16,r2,8108c8 <find_file_in_directory+0x934>
  810544:	21003fcc 	andi	r4,r4,255
  810548:	2100201c 	xori	r4,r4,128
  81054c:	213fe004 	addi	r4,r4,-128
  810550:	d8c000c3 	ldbu	r3,3(sp)
  810554:	18bfe7c4 	addi	r2,r3,-97
  810558:	10803fcc 	andi	r2,r2,255
  81055c:	8080d32e 	bgeu	r16,r2,8108ac <find_file_in_directory+0x918>
  810560:	18803fcc 	andi	r2,r3,255
  810564:	1080201c 	xori	r2,r2,128
  810568:	10bfe004 	addi	r2,r2,-128
  81056c:	2080d41e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  810570:	88c00043 	ldbu	r3,1(r17)
  810574:	18bfe7c4 	addi	r2,r3,-97
  810578:	10803fcc 	andi	r2,r2,255
  81057c:	8080e62e 	bgeu	r16,r2,810918 <find_file_in_directory+0x984>
  810580:	19003fcc 	andi	r4,r3,255
  810584:	2100201c 	xori	r4,r4,128
  810588:	213fe004 	addi	r4,r4,-128
  81058c:	d8c00103 	ldbu	r3,4(sp)
  810590:	18bfe7c4 	addi	r2,r3,-97
  810594:	10803fcc 	andi	r2,r2,255
  810598:	8080da2e 	bgeu	r16,r2,810904 <find_file_in_directory+0x970>
  81059c:	18803fcc 	andi	r2,r3,255
  8105a0:	1080201c 	xori	r2,r2,128
  8105a4:	10bfe004 	addi	r2,r2,-128
  8105a8:	2080c51e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  8105ac:	88c00083 	ldbu	r3,2(r17)
  8105b0:	18bfe7c4 	addi	r2,r3,-97
  8105b4:	10803fcc 	andi	r2,r2,255
  8105b8:	8080e92e 	bgeu	r16,r2,810960 <find_file_in_directory+0x9cc>
  8105bc:	19003fcc 	andi	r4,r3,255
  8105c0:	2100201c 	xori	r4,r4,128
  8105c4:	213fe004 	addi	r4,r4,-128
  8105c8:	d8c00143 	ldbu	r3,5(sp)
  8105cc:	18bfe7c4 	addi	r2,r3,-97
  8105d0:	10803fcc 	andi	r2,r2,255
  8105d4:	8080dd2e 	bgeu	r16,r2,81094c <find_file_in_directory+0x9b8>
  8105d8:	18803fcc 	andi	r2,r3,255
  8105dc:	1080201c 	xori	r2,r2,128
  8105e0:	10bfe004 	addi	r2,r2,-128
  8105e4:	2080b61e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  8105e8:	88c000c3 	ldbu	r3,3(r17)
  8105ec:	18bfe7c4 	addi	r2,r3,-97
  8105f0:	10803fcc 	andi	r2,r2,255
  8105f4:	8080e42e 	bgeu	r16,r2,810988 <find_file_in_directory+0x9f4>
  8105f8:	19003fcc 	andi	r4,r3,255
  8105fc:	2100201c 	xori	r4,r4,128
  810600:	213fe004 	addi	r4,r4,-128
  810604:	d8c00183 	ldbu	r3,6(sp)
  810608:	18bfe7c4 	addi	r2,r3,-97
  81060c:	10803fcc 	andi	r2,r2,255
  810610:	8080d82e 	bgeu	r16,r2,810974 <find_file_in_directory+0x9e0>
  810614:	18803fcc 	andi	r2,r3,255
  810618:	1080201c 	xori	r2,r2,128
  81061c:	10bfe004 	addi	r2,r2,-128
  810620:	2080a71e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  810624:	88c00103 	ldbu	r3,4(r17)
  810628:	18bfe7c4 	addi	r2,r3,-97
  81062c:	10803fcc 	andi	r2,r2,255
  810630:	8080df2e 	bgeu	r16,r2,8109b0 <find_file_in_directory+0xa1c>
  810634:	19003fcc 	andi	r4,r3,255
  810638:	2100201c 	xori	r4,r4,128
  81063c:	213fe004 	addi	r4,r4,-128
  810640:	d8c001c3 	ldbu	r3,7(sp)
  810644:	18bfe7c4 	addi	r2,r3,-97
  810648:	10803fcc 	andi	r2,r2,255
  81064c:	8080d32e 	bgeu	r16,r2,81099c <find_file_in_directory+0xa08>
  810650:	18803fcc 	andi	r2,r3,255
  810654:	1080201c 	xori	r2,r2,128
  810658:	10bfe004 	addi	r2,r2,-128
  81065c:	2080981e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  810660:	88c00143 	ldbu	r3,5(r17)
  810664:	18bfe7c4 	addi	r2,r3,-97
  810668:	10803fcc 	andi	r2,r2,255
  81066c:	8080da2e 	bgeu	r16,r2,8109d8 <find_file_in_directory+0xa44>
  810670:	19003fcc 	andi	r4,r3,255
  810674:	2100201c 	xori	r4,r4,128
  810678:	213fe004 	addi	r4,r4,-128
  81067c:	d8c00203 	ldbu	r3,8(sp)
  810680:	18bfe7c4 	addi	r2,r3,-97
  810684:	10803fcc 	andi	r2,r2,255
  810688:	8080ce2e 	bgeu	r16,r2,8109c4 <find_file_in_directory+0xa30>
  81068c:	18803fcc 	andi	r2,r3,255
  810690:	1080201c 	xori	r2,r2,128
  810694:	10bfe004 	addi	r2,r2,-128
  810698:	2080891e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  81069c:	88c00183 	ldbu	r3,6(r17)
  8106a0:	18bfe7c4 	addi	r2,r3,-97
  8106a4:	10803fcc 	andi	r2,r2,255
  8106a8:	8080d52e 	bgeu	r16,r2,810a00 <find_file_in_directory+0xa6c>
  8106ac:	19003fcc 	andi	r4,r3,255
  8106b0:	2100201c 	xori	r4,r4,128
  8106b4:	213fe004 	addi	r4,r4,-128
  8106b8:	d8c00243 	ldbu	r3,9(sp)
  8106bc:	18bfe7c4 	addi	r2,r3,-97
  8106c0:	10803fcc 	andi	r2,r2,255
  8106c4:	8080c92e 	bgeu	r16,r2,8109ec <find_file_in_directory+0xa58>
  8106c8:	18803fcc 	andi	r2,r3,255
  8106cc:	1080201c 	xori	r2,r2,128
  8106d0:	10bfe004 	addi	r2,r2,-128
  8106d4:	20807a1e 	bne	r4,r2,8108c0 <find_file_in_directory+0x92c>
  8106d8:	88c001c3 	ldbu	r3,7(r17)
  8106dc:	18bfe7c4 	addi	r2,r3,-97
  8106e0:	10803fcc 	andi	r2,r2,255
  8106e4:	8080cf36 	bltu	r16,r2,810a24 <find_file_in_directory+0xa90>
  8106e8:	18bff804 	addi	r2,r3,-32
  8106ec:	11003fcc 	andi	r4,r2,255
  8106f0:	2100201c 	xori	r4,r4,128
  8106f4:	213fe004 	addi	r4,r4,-128
  8106f8:	d8c00283 	ldbu	r3,10(sp)
  8106fc:	18bfe7c4 	addi	r2,r3,-97
  810700:	10803fcc 	andi	r2,r2,255
  810704:	8080c336 	bltu	r16,r2,810a14 <find_file_in_directory+0xa80>
  810708:	18bff804 	addi	r2,r3,-32
  81070c:	10803fcc 	andi	r2,r2,255
  810710:	1080201c 	xori	r2,r2,128
  810714:	10bfe004 	addi	r2,r2,-128
  810718:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  81071c:	88c00203 	ldbu	r3,8(r17)
  810720:	18bfe7c4 	addi	r2,r3,-97
  810724:	10803fcc 	andi	r2,r2,255
  810728:	80805b2e 	bgeu	r16,r2,810898 <find_file_in_directory+0x904>
  81072c:	19003fcc 	andi	r4,r3,255
  810730:	2100201c 	xori	r4,r4,128
  810734:	213fe004 	addi	r4,r4,-128
  810738:	d8c00003 	ldbu	r3,0(sp)
  81073c:	18bfe7c4 	addi	r2,r3,-97
  810740:	10803fcc 	andi	r2,r2,255
  810744:	80804f2e 	bgeu	r16,r2,810884 <find_file_in_directory+0x8f0>
  810748:	18803fcc 	andi	r2,r3,255
  81074c:	1080201c 	xori	r2,r2,128
  810750:	10bfe004 	addi	r2,r2,-128
  810754:	1100221e 	bne	r2,r4,8107e0 <find_file_in_directory+0x84c>
  810758:	88c00243 	ldbu	r3,9(r17)
  81075c:	18bfe7c4 	addi	r2,r3,-97
  810760:	10803fcc 	andi	r2,r2,255
  810764:	8080622e 	bgeu	r16,r2,8108f0 <find_file_in_directory+0x95c>
  810768:	19003fcc 	andi	r4,r3,255
  81076c:	2100201c 	xori	r4,r4,128
  810770:	213fe004 	addi	r4,r4,-128
  810774:	d8c00043 	ldbu	r3,1(sp)
  810778:	18bfe7c4 	addi	r2,r3,-97
  81077c:	10803fcc 	andi	r2,r2,255
  810780:	8080562e 	bgeu	r16,r2,8108dc <find_file_in_directory+0x948>
  810784:	18803fcc 	andi	r2,r3,255
  810788:	1080201c 	xori	r2,r2,128
  81078c:	10bfe004 	addi	r2,r2,-128
  810790:	1100131e 	bne	r2,r4,8107e0 <find_file_in_directory+0x84c>
  810794:	88c00283 	ldbu	r3,10(r17)
  810798:	18bfe7c4 	addi	r2,r3,-97
  81079c:	10803fcc 	andi	r2,r2,255
  8107a0:	80806636 	bltu	r16,r2,81093c <find_file_in_directory+0x9a8>
  8107a4:	18bff804 	addi	r2,r3,-32
  8107a8:	11003fcc 	andi	r4,r2,255
  8107ac:	2100201c 	xori	r4,r4,128
  8107b0:	213fe004 	addi	r4,r4,-128
  8107b4:	d8c00083 	ldbu	r3,2(sp)
  8107b8:	18bfe7c4 	addi	r2,r3,-97
  8107bc:	10803fcc 	andi	r2,r2,255
  8107c0:	80805a36 	bltu	r16,r2,81092c <find_file_in_directory+0x998>
  8107c4:	18bff804 	addi	r2,r3,-32
  8107c8:	10803fcc 	andi	r2,r2,255
  8107cc:	1080201c 	xori	r2,r2,128
  8107d0:	10bfe004 	addi	r2,r2,-128
  8107d4:	1100021e 	bne	r2,r4,8107e0 <find_file_in_directory+0x84c>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
  8107d8:	2805003a 	cmpeq	r2,r5,zero
  8107dc:	10009526 	beq	r2,zero,810a34 <find_file_in_directory+0xaa0>
  8107e0:	94800804 	addi	r18,r18,32
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  8107e4:	00808004 	movi	r2,512
  8107e8:	90bf491e 	bne	r18,r2,810510 <find_file_in_directory+0x57c>
                }
                else
                {
                    break;
                }
                if (result)
  8107ec:	a804c03a 	cmpne	r2,r21,zero
  8107f0:	1000171e 	bne	r2,zero,810850 <find_file_in_directory+0x8bc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8107f4:	b8800383 	ldbu	r2,14(r23)
  8107f8:	a5000044 	addi	r20,r20,1
  8107fc:	a0bf3e16 	blt	r20,r2,8104f8 <find_file_in_directory+0x564>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810800:	b8c01117 	ldw	r3,68(r23)
  810804:	d0a75f17 	ldw	r2,-25220(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  810808:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  81080c:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  810810:	d0e76317 	ldw	r3,-25204(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  810814:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  810818:	20c00326 	beq	r4,r3,810828 <find_file_in_directory+0x894>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  81081c:	000b883a 	mov	r5,zero
  810820:	080edd80 	call	80edd8 <Read_Sector_Data>
  810824:	103eed26 	beq	r2,zero,8103dc <find_file_in_directory+0x448>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  810828:	d0e76117 	ldw	r3,-25212(gp)
  81082c:	98803fcc 	andi	r2,r19,255
  810830:	1085883a 	add	r2,r2,r2
  810834:	19000a17 	ldw	r4,40(r3)
  810838:	1105883a 	add	r2,r2,r4
  81083c:	10c0002b 	ldhuio	r3,0(r2)
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  810840:	00bffe14 	movui	r2,65528
  810844:	1cfffe0c 	andi	r19,r3,65528
  810848:	98bee426 	beq	r19,r2,8103dc <find_file_in_directory+0x448>
  81084c:	002b883a 	mov	r21,zero
                {
                    // Directory path is invalid.                 
                    return false;
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  810850:	00bffdd4 	movui	r2,65527
  810854:	14fee216 	blt	r2,r19,8103e0 <find_file_in_directory+0x44c>
  810858:	a805003a 	cmpeq	r2,r21,zero
  81085c:	103ee026 	beq	r2,zero,8103e0 <find_file_in_directory+0x44c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  810860:	b8800383 	ldbu	r2,14(r23)
  810864:	98ffff84 	addi	r3,r19,-2
  810868:	b9001417 	ldw	r4,80(r23)
  81086c:	1887383a 	mul	r3,r3,r2
  810870:	192d883a 	add	r22,r3,r4
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  810874:	103f1f1e 	bne	r2,zero,8104f4 <find_file_in_directory+0x560>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  810878:	a805003a 	cmpeq	r2,r21,zero
  81087c:	103ff426 	beq	r2,zero,810850 <find_file_in_directory+0x8bc>
  810880:	003fdf06 	br	810800 <find_file_in_directory+0x86c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810884:	18bff804 	addi	r2,r3,-32
  810888:	10803fcc 	andi	r2,r2,255
  81088c:	1080201c 	xori	r2,r2,128
  810890:	10bfe004 	addi	r2,r2,-128
  810894:	003faf06 	br	810754 <find_file_in_directory+0x7c0>
  810898:	18bff804 	addi	r2,r3,-32
  81089c:	11003fcc 	andi	r4,r2,255
  8108a0:	2100201c 	xori	r4,r4,128
  8108a4:	213fe004 	addi	r4,r4,-128
  8108a8:	003fa306 	br	810738 <find_file_in_directory+0x7a4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8108ac:	18bff804 	addi	r2,r3,-32
  8108b0:	10803fcc 	andi	r2,r2,255
  8108b4:	1080201c 	xori	r2,r2,128
  8108b8:	10bfe004 	addi	r2,r2,-128
  8108bc:	20bf2c26 	beq	r4,r2,810570 <find_file_in_directory+0x5dc>
  8108c0:	000b883a 	mov	r5,zero
  8108c4:	003f9506 	br	81071c <find_file_in_directory+0x788>
  8108c8:	20bff804 	addi	r2,r4,-32
  8108cc:	11003fcc 	andi	r4,r2,255
  8108d0:	2100201c 	xori	r4,r4,128
  8108d4:	213fe004 	addi	r4,r4,-128
  8108d8:	003f1d06 	br	810550 <find_file_in_directory+0x5bc>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8108dc:	18bff804 	addi	r2,r3,-32
  8108e0:	10803fcc 	andi	r2,r2,255
  8108e4:	1080201c 	xori	r2,r2,128
  8108e8:	10bfe004 	addi	r2,r2,-128
  8108ec:	003fa806 	br	810790 <find_file_in_directory+0x7fc>
  8108f0:	18bff804 	addi	r2,r3,-32
  8108f4:	11003fcc 	andi	r4,r2,255
  8108f8:	2100201c 	xori	r4,r4,128
  8108fc:	213fe004 	addi	r4,r4,-128
  810900:	003f9c06 	br	810774 <find_file_in_directory+0x7e0>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810904:	18bff804 	addi	r2,r3,-32
  810908:	10803fcc 	andi	r2,r2,255
  81090c:	1080201c 	xori	r2,r2,128
  810910:	10bfe004 	addi	r2,r2,-128
  810914:	003f2406 	br	8105a8 <find_file_in_directory+0x614>
  810918:	18bff804 	addi	r2,r3,-32
  81091c:	11003fcc 	andi	r4,r2,255
  810920:	2100201c 	xori	r4,r4,128
  810924:	213fe004 	addi	r4,r4,-128
  810928:	003f1806 	br	81058c <find_file_in_directory+0x5f8>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  81092c:	18803fcc 	andi	r2,r3,255
  810930:	1080201c 	xori	r2,r2,128
  810934:	10bfe004 	addi	r2,r2,-128
  810938:	003fa606 	br	8107d4 <find_file_in_directory+0x840>
  81093c:	19003fcc 	andi	r4,r3,255
  810940:	2100201c 	xori	r4,r4,128
  810944:	213fe004 	addi	r4,r4,-128
  810948:	003f9a06 	br	8107b4 <find_file_in_directory+0x820>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  81094c:	18bff804 	addi	r2,r3,-32
  810950:	10803fcc 	andi	r2,r2,255
  810954:	1080201c 	xori	r2,r2,128
  810958:	10bfe004 	addi	r2,r2,-128
  81095c:	003f2106 	br	8105e4 <find_file_in_directory+0x650>
  810960:	18bff804 	addi	r2,r3,-32
  810964:	11003fcc 	andi	r4,r2,255
  810968:	2100201c 	xori	r4,r4,128
  81096c:	213fe004 	addi	r4,r4,-128
  810970:	003f1506 	br	8105c8 <find_file_in_directory+0x634>
  810974:	18bff804 	addi	r2,r3,-32
  810978:	10803fcc 	andi	r2,r2,255
  81097c:	1080201c 	xori	r2,r2,128
  810980:	10bfe004 	addi	r2,r2,-128
  810984:	003f2606 	br	810620 <find_file_in_directory+0x68c>
  810988:	18bff804 	addi	r2,r3,-32
  81098c:	11003fcc 	andi	r4,r2,255
  810990:	2100201c 	xori	r4,r4,128
  810994:	213fe004 	addi	r4,r4,-128
  810998:	003f1a06 	br	810604 <find_file_in_directory+0x670>
  81099c:	18bff804 	addi	r2,r3,-32
  8109a0:	10803fcc 	andi	r2,r2,255
  8109a4:	1080201c 	xori	r2,r2,128
  8109a8:	10bfe004 	addi	r2,r2,-128
  8109ac:	003f2b06 	br	81065c <find_file_in_directory+0x6c8>
  8109b0:	18bff804 	addi	r2,r3,-32
  8109b4:	11003fcc 	andi	r4,r2,255
  8109b8:	2100201c 	xori	r4,r4,128
  8109bc:	213fe004 	addi	r4,r4,-128
  8109c0:	003f1f06 	br	810640 <find_file_in_directory+0x6ac>
  8109c4:	18bff804 	addi	r2,r3,-32
  8109c8:	10803fcc 	andi	r2,r2,255
  8109cc:	1080201c 	xori	r2,r2,128
  8109d0:	10bfe004 	addi	r2,r2,-128
  8109d4:	003f3006 	br	810698 <find_file_in_directory+0x704>
  8109d8:	18bff804 	addi	r2,r3,-32
  8109dc:	11003fcc 	andi	r4,r2,255
  8109e0:	2100201c 	xori	r4,r4,128
  8109e4:	213fe004 	addi	r4,r4,-128
  8109e8:	003f2406 	br	81067c <find_file_in_directory+0x6e8>
  8109ec:	18bff804 	addi	r2,r3,-32
  8109f0:	10803fcc 	andi	r2,r2,255
  8109f4:	1080201c 	xori	r2,r2,128
  8109f8:	10bfe004 	addi	r2,r2,-128
  8109fc:	003f3506 	br	8106d4 <find_file_in_directory+0x740>
  810a00:	18bff804 	addi	r2,r3,-32
  810a04:	11003fcc 	andi	r4,r2,255
  810a08:	2100201c 	xori	r4,r4,128
  810a0c:	213fe004 	addi	r4,r4,-128
  810a10:	003f2906 	br	8106b8 <find_file_in_directory+0x724>
  810a14:	18803fcc 	andi	r2,r3,255
  810a18:	1080201c 	xori	r2,r2,128
  810a1c:	10bfe004 	addi	r2,r2,-128
  810a20:	003f3d06 	br	810718 <find_file_in_directory+0x784>
  810a24:	19003fcc 	andi	r4,r3,255
  810a28:	2100201c 	xori	r4,r4,128
  810a2c:	213fe004 	addi	r4,r4,-128
  810a30:	003f3106 	br	8106f8 <find_file_in_directory+0x764>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
  810a34:	05400044 	movi	r21,1
  810a38:	003f8506 	br	810850 <find_file_in_directory+0x8bc>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810a3c:	d8c000c3 	ldbu	r3,3(sp)
  810a40:	20bff804 	addi	r2,r4,-32
  810a44:	11003fcc 	andi	r4,r2,255
  810a48:	18bfe7c4 	addi	r2,r3,-97
  810a4c:	2100201c 	xori	r4,r4,128
  810a50:	10803fcc 	andi	r2,r2,255
  810a54:	213fe004 	addi	r4,r4,-128
  810a58:	80bdbb36 	bltu	r16,r2,810148 <find_file_in_directory+0x1b4>
  810a5c:	18bff804 	addi	r2,r3,-32
  810a60:	10803fcc 	andi	r2,r2,255
  810a64:	1080201c 	xori	r2,r2,128
  810a68:	10bfe004 	addi	r2,r2,-128
  810a6c:	20bdba26 	beq	r4,r2,810158 <find_file_in_directory+0x1c4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810a70:	88c00203 	ldbu	r3,8(r17)
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810a74:	000b883a 	mov	r5,zero
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810a78:	18bfe7c4 	addi	r2,r3,-97
  810a7c:	10803fcc 	andi	r2,r2,255
  810a80:	80be2436 	bltu	r16,r2,810314 <find_file_in_directory+0x380>
  810a84:	18bff804 	addi	r2,r3,-32
  810a88:	d8c00003 	ldbu	r3,0(sp)
  810a8c:	11003fcc 	andi	r4,r2,255
  810a90:	2100201c 	xori	r4,r4,128
  810a94:	18bfe7c4 	addi	r2,r3,-97
  810a98:	10803fcc 	andi	r2,r2,255
  810a9c:	213fe004 	addi	r4,r4,-128
  810aa0:	80be2336 	bltu	r16,r2,810330 <find_file_in_directory+0x39c>
  810aa4:	18bff804 	addi	r2,r3,-32
  810aa8:	10803fcc 	andi	r2,r2,255
  810aac:	1080201c 	xori	r2,r2,128
  810ab0:	10bfe004 	addi	r2,r2,-128
  810ab4:	003e2106 	br	81033c <find_file_in_directory+0x3a8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810ab8:	18bff804 	addi	r2,r3,-32
  810abc:	10803fcc 	andi	r2,r2,255
  810ac0:	1080201c 	xori	r2,r2,128
  810ac4:	10bfe004 	addi	r2,r2,-128
  810ac8:	003db106 	br	810190 <find_file_in_directory+0x1fc>
  810acc:	18bff804 	addi	r2,r3,-32
  810ad0:	11003fcc 	andi	r4,r2,255
  810ad4:	2100201c 	xori	r4,r4,128
  810ad8:	213fe004 	addi	r4,r4,-128
  810adc:	003da506 	br	810174 <find_file_in_directory+0x1e0>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810ae0:	18bff804 	addi	r2,r3,-32
  810ae4:	10803fcc 	andi	r2,r2,255
  810ae8:	1080201c 	xori	r2,r2,128
  810aec:	10bfe004 	addi	r2,r2,-128
  810af0:	003e2106 	br	810378 <find_file_in_directory+0x3e4>
  810af4:	18bff804 	addi	r2,r3,-32
  810af8:	11003fcc 	andi	r4,r2,255
  810afc:	2100201c 	xori	r4,r4,128
  810b00:	213fe004 	addi	r4,r4,-128
  810b04:	003e1506 	br	81035c <find_file_in_directory+0x3c8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810b08:	18bff804 	addi	r2,r3,-32
  810b0c:	10803fcc 	andi	r2,r2,255
  810b10:	1080201c 	xori	r2,r2,128
  810b14:	10bfe004 	addi	r2,r2,-128
  810b18:	003dac06 	br	8101cc <find_file_in_directory+0x238>
  810b1c:	18bff804 	addi	r2,r3,-32
  810b20:	11003fcc 	andi	r4,r2,255
  810b24:	2100201c 	xori	r4,r4,128
  810b28:	213fe004 	addi	r4,r4,-128
  810b2c:	003da006 	br	8101b0 <find_file_in_directory+0x21c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810b30:	18803fcc 	andi	r2,r3,255
  810b34:	1080201c 	xori	r2,r2,128
  810b38:	10bfe004 	addi	r2,r2,-128
  810b3c:	003e1f06 	br	8103bc <find_file_in_directory+0x428>
  810b40:	19003fcc 	andi	r4,r3,255
  810b44:	2100201c 	xori	r4,r4,128
  810b48:	213fe004 	addi	r4,r4,-128
  810b4c:	003e1306 	br	81039c <find_file_in_directory+0x408>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810b50:	18bff804 	addi	r2,r3,-32
  810b54:	10803fcc 	andi	r2,r2,255
  810b58:	1080201c 	xori	r2,r2,128
  810b5c:	10bfe004 	addi	r2,r2,-128
  810b60:	003da906 	br	810208 <find_file_in_directory+0x274>
  810b64:	18bff804 	addi	r2,r3,-32
  810b68:	11003fcc 	andi	r4,r2,255
  810b6c:	2100201c 	xori	r4,r4,128
  810b70:	213fe004 	addi	r4,r4,-128
  810b74:	003d9d06 	br	8101ec <find_file_in_directory+0x258>
  810b78:	18bff804 	addi	r2,r3,-32
  810b7c:	10803fcc 	andi	r2,r2,255
  810b80:	1080201c 	xori	r2,r2,128
  810b84:	10bfe004 	addi	r2,r2,-128
  810b88:	003dae06 	br	810244 <find_file_in_directory+0x2b0>
  810b8c:	18bff804 	addi	r2,r3,-32
  810b90:	11003fcc 	andi	r4,r2,255
  810b94:	2100201c 	xori	r4,r4,128
  810b98:	213fe004 	addi	r4,r4,-128
  810b9c:	003da206 	br	810228 <find_file_in_directory+0x294>
  810ba0:	18bff804 	addi	r2,r3,-32
  810ba4:	10803fcc 	andi	r2,r2,255
  810ba8:	1080201c 	xori	r2,r2,128
  810bac:	10bfe004 	addi	r2,r2,-128
  810bb0:	003db306 	br	810280 <find_file_in_directory+0x2ec>
  810bb4:	18bff804 	addi	r2,r3,-32
  810bb8:	11003fcc 	andi	r4,r2,255
  810bbc:	2100201c 	xori	r4,r4,128
  810bc0:	213fe004 	addi	r4,r4,-128
  810bc4:	003da706 	br	810264 <find_file_in_directory+0x2d0>
  810bc8:	18bff804 	addi	r2,r3,-32
  810bcc:	10803fcc 	andi	r2,r2,255
  810bd0:	1080201c 	xori	r2,r2,128
  810bd4:	10bfe004 	addi	r2,r2,-128
  810bd8:	003db806 	br	8102bc <find_file_in_directory+0x328>
  810bdc:	18bff804 	addi	r2,r3,-32
  810be0:	11003fcc 	andi	r4,r2,255
  810be4:	2100201c 	xori	r4,r4,128
  810be8:	213fe004 	addi	r4,r4,-128
  810bec:	003dac06 	br	8102a0 <find_file_in_directory+0x30c>
  810bf0:	18803fcc 	andi	r2,r3,255
  810bf4:	1080201c 	xori	r2,r2,128
  810bf8:	10bfe004 	addi	r2,r2,-128
  810bfc:	003dc006 	br	810300 <find_file_in_directory+0x36c>
  810c00:	19003fcc 	andi	r4,r3,255
  810c04:	2100201c 	xori	r4,r4,128
  810c08:	213fe004 	addi	r4,r4,-128
  810c0c:	003db406 	br	8102e0 <find_file_in_directory+0x34c>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
  810c10:	05400044 	movi	r21,1
  810c14:	003df206 	br	8103e0 <find_file_in_directory+0x44c>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810c18:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  810c1c:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810c20:	d88000c5 	stb	r2,3(sp)
  810c24:	d8800105 	stb	r2,4(sp)
  810c28:	d8800145 	stb	r2,5(sp)
  810c2c:	d8800185 	stb	r2,6(sp)
  810c30:	d88001c5 	stb	r2,7(sp)
  810c34:	d8800205 	stb	r2,8(sp)
  810c38:	d8800245 	stb	r2,9(sp)
  810c3c:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810c40:	d8800005 	stb	r2,0(sp)
  810c44:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  810c48:	9809883a 	mov	r4,r19
  810c4c:	080400c0 	call	80400c <strlen>
  810c50:	102b883a 	mov	r21,r2
  810c54:	003cfb06 	br	810044 <find_file_in_directory+0xb0>

00810c58 <get_home_directory_cluster_for_file>:
}


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  810c58:	deffee04 	addi	sp,sp,-72
  810c5c:	dc400915 	stw	r17,36(sp)
  810c60:	dfc01115 	stw	ra,68(sp)
  810c64:	df001015 	stw	fp,64(sp)
  810c68:	ddc00f15 	stw	r23,60(sp)
  810c6c:	dd800e15 	stw	r22,56(sp)
  810c70:	dd400d15 	stw	r21,52(sp)
  810c74:	dd000c15 	stw	r20,48(sp)
  810c78:	dcc00b15 	stw	r19,44(sp)
  810c7c:	dc800a15 	stw	r18,40(sp)
  810c80:	dc000815 	stw	r16,32(sp)
  810c84:	d9400715 	stw	r5,28(sp)
  810c88:	d9000615 	stw	r4,24(sp)
  810c8c:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  810c90:	080400c0 	call	80400c <strlen>
    
    for(index = 0; index < length; index++)
  810c94:	00831b0e 	bge	zero,r2,811904 <get_home_directory_cluster_for_file+0xcac>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810c98:	d9000617 	ldw	r4,24(sp)
  810c9c:	01401704 	movi	r5,92
  810ca0:	20c00007 	ldb	r3,0(r4)
  810ca4:	19431726 	beq	r3,r5,811904 <get_home_directory_cluster_for_file+0xcac>
  810ca8:	01000bc4 	movi	r4,47
  810cac:	19031526 	beq	r3,r4,811904 <get_home_directory_cluster_for_file+0xcac>
  810cb0:	002d883a 	mov	r22,zero
  810cb4:	00000306 	br	810cc4 <get_home_directory_cluster_for_file+0x6c>
  810cb8:	18c00007 	ldb	r3,0(r3)
  810cbc:	19400b26 	beq	r3,r5,810cec <get_home_directory_cluster_for_file+0x94>
  810cc0:	19000a26 	beq	r3,r4,810cec <get_home_directory_cluster_for_file+0x94>
  810cc4:	d9800617 	ldw	r6,24(sp)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810cc8:	b5800044 	addi	r22,r22,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810ccc:	3587883a 	add	r3,r6,r22
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810cd0:	15bff91e 	bne	r2,r22,810cb8 <get_home_directory_cluster_for_file+0x60>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  810cd4:	d9000717 	ldw	r4,28(sp)
  810cd8:	20000015 	stw	zero,0(r4)
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  810cdc:	01800044 	movi	r6,1
  810ce0:	d9800515 	stw	r6,20(sp)
  810ce4:	88000a15 	stw	zero,40(r17)
  810ce8:	0000f106 	br	8110b0 <get_home_directory_cluster_for_file+0x458>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  810cec:	0583060e 	bge	zero,r22,811908 <get_home_directory_cluster_for_file+0xcb0>
  810cf0:	dc000617 	ldw	r16,24(sp)
  810cf4:	d8000515 	stw	zero,20(sp)
  810cf8:	0027883a 	mov	r19,zero
  810cfc:	d8000415 	stw	zero,16(sp)
  810d00:	07002074 	movhi	fp,129
  810d04:	e71e1804 	addi	fp,fp,30816
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810d08:	00800804 	movi	r2,32
        char extension[3] = { ' ', ' ', ' ' };
  810d0c:	8009883a 	mov	r4,r16
  810d10:	000d883a 	mov	r6,zero
  810d14:	01ffffc4 	movi	r7,-1
  810d18:	02000b84 	movi	r8,46
  810d1c:	da4000c4 	addi	r9,sp,3
  810d20:	d8800085 	stb	r2,2(sp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810d24:	d88000c5 	stb	r2,3(sp)
  810d28:	d8800105 	stb	r2,4(sp)
  810d2c:	d8800145 	stb	r2,5(sp)
  810d30:	d8800185 	stb	r2,6(sp)
  810d34:	d88001c5 	stb	r2,7(sp)
  810d38:	d8800205 	stb	r2,8(sp)
  810d3c:	d8800245 	stb	r2,9(sp)
  810d40:	d8800285 	stb	r2,10(sp)
        char extension[3] = { ' ', ' ', ' ' };
  810d44:	d8800005 	stb	r2,0(sp)
  810d48:	d8800045 	stb	r2,1(sp)
  810d4c:	00000806 	br	810d70 <get_home_directory_cluster_for_file+0x118>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  810d50:	31c5c83a 	sub	r2,r6,r7
  810d54:	d885883a 	add	r2,sp,r2
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
  810d58:	498b883a 	add	r5,r9,r6
        {
            if (file_name[index+start_location] == '.')
            {
                ext_index = index;
            }
            else if (ext_index < 0)
  810d5c:	3800e116 	blt	r7,zero,8110e4 <get_home_directory_cluster_for_file+0x48c>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  810d60:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  810d64:	31800044 	addi	r6,r6,1
  810d68:	21000044 	addi	r4,r4,1
  810d6c:	3580090e 	bge	r6,r22,810d94 <get_home_directory_cluster_for_file+0x13c>
        {
            if (file_name[index+start_location] == '.')
  810d70:	20c00003 	ldbu	r3,0(r4)
  810d74:	18803fcc 	andi	r2,r3,255
  810d78:	1080201c 	xori	r2,r2,128
  810d7c:	10bfe004 	addi	r2,r2,-128
  810d80:	123ff31e 	bne	r2,r8,810d50 <get_home_directory_cluster_for_file+0xf8>
  810d84:	300f883a 	mov	r7,r6
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  810d88:	31800044 	addi	r6,r6,1
  810d8c:	21000044 	addi	r4,r4,1
  810d90:	35bff716 	blt	r6,r22,810d70 <get_home_directory_cluster_for_file+0x118>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  810d94:	98014c1e 	bne	r19,zero,8112c8 <get_home_directory_cluster_for_file+0x670>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  810d98:	e080050b 	ldhu	r2,20(fp)
  810d9c:	e0c0030b 	ldhu	r3,12(fp)
  810da0:	1004917a 	slli	r2,r2,5
  810da4:	10e9283a 	div	r20,r2,r3
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810da8:	a000c026 	beq	r20,zero,8110ac <get_home_directory_cluster_for_file+0x454>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  810dac:	e1001317 	ldw	r4,76(fp)
  810db0:	d1675f17 	ldw	r5,-25220(gp)
  810db4:	9909883a 	add	r4,r19,r4
  810db8:	080edd80 	call	80edd8 <Read_Sector_Data>
  810dbc:	1000bb26 	beq	r2,zero,8110ac <get_home_directory_cluster_for_file+0x454>
                        }
                    }
                }
                else
                {
                    break;
  810dc0:	0025883a 	mov	r18,zero
  810dc4:	04000644 	movi	r16,25
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  810dc8:	9009883a 	mov	r4,r18
  810dcc:	880b883a 	mov	r5,r17
  810dd0:	000d883a 	mov	r6,zero
  810dd4:	980f883a 	mov	r7,r19
  810dd8:	080eb4c0 	call	80eb4c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  810ddc:	89000003 	ldbu	r4,0(r17)
  810de0:	00803944 	movi	r2,229
  810de4:	20c03fcc 	andi	r3,r4,255
  810de8:	1880ab26 	beq	r3,r2,811098 <get_home_directory_cluster_for_file+0x440>
  810dec:	1800aa26 	beq	r3,zero,811098 <get_home_directory_cluster_for_file+0x440>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810df0:	20bfe7c4 	addi	r2,r4,-97
  810df4:	10803fcc 	andi	r2,r2,255
  810df8:	8080cd2e 	bgeu	r16,r2,811130 <get_home_directory_cluster_for_file+0x4d8>
  810dfc:	21003fcc 	andi	r4,r4,255
  810e00:	2100201c 	xori	r4,r4,128
  810e04:	213fe004 	addi	r4,r4,-128
  810e08:	d8c000c3 	ldbu	r3,3(sp)
  810e0c:	18bfe7c4 	addi	r2,r3,-97
  810e10:	10803fcc 	andi	r2,r2,255
  810e14:	8080bf2e 	bgeu	r16,r2,811114 <get_home_directory_cluster_for_file+0x4bc>
  810e18:	18803fcc 	andi	r2,r3,255
  810e1c:	1080201c 	xori	r2,r2,128
  810e20:	10bfe004 	addi	r2,r2,-128
  810e24:	2080c01e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810e28:	88c00043 	ldbu	r3,1(r17)
  810e2c:	18bfe7c4 	addi	r2,r3,-97
  810e30:	10803fcc 	andi	r2,r2,255
  810e34:	8080c82e 	bgeu	r16,r2,811158 <get_home_directory_cluster_for_file+0x500>
  810e38:	19003fcc 	andi	r4,r3,255
  810e3c:	2100201c 	xori	r4,r4,128
  810e40:	213fe004 	addi	r4,r4,-128
  810e44:	d8c00103 	ldbu	r3,4(sp)
  810e48:	18bfe7c4 	addi	r2,r3,-97
  810e4c:	10803fcc 	andi	r2,r2,255
  810e50:	8080bc2e 	bgeu	r16,r2,811144 <get_home_directory_cluster_for_file+0x4ec>
  810e54:	18803fcc 	andi	r2,r3,255
  810e58:	1080201c 	xori	r2,r2,128
  810e5c:	10bfe004 	addi	r2,r2,-128
  810e60:	2080b11e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810e64:	88c00083 	ldbu	r3,2(r17)
  810e68:	18bfe7c4 	addi	r2,r3,-97
  810e6c:	10803fcc 	andi	r2,r2,255
  810e70:	8080d52e 	bgeu	r16,r2,8111c8 <get_home_directory_cluster_for_file+0x570>
  810e74:	19003fcc 	andi	r4,r3,255
  810e78:	2100201c 	xori	r4,r4,128
  810e7c:	213fe004 	addi	r4,r4,-128
  810e80:	d8c00143 	ldbu	r3,5(sp)
  810e84:	18bfe7c4 	addi	r2,r3,-97
  810e88:	10803fcc 	andi	r2,r2,255
  810e8c:	8080c92e 	bgeu	r16,r2,8111b4 <get_home_directory_cluster_for_file+0x55c>
  810e90:	18803fcc 	andi	r2,r3,255
  810e94:	1080201c 	xori	r2,r2,128
  810e98:	10bfe004 	addi	r2,r2,-128
  810e9c:	2080a21e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810ea0:	88c000c3 	ldbu	r3,3(r17)
  810ea4:	18bfe7c4 	addi	r2,r3,-97
  810ea8:	10803fcc 	andi	r2,r2,255
  810eac:	8080d02e 	bgeu	r16,r2,8111f0 <get_home_directory_cluster_for_file+0x598>
  810eb0:	19003fcc 	andi	r4,r3,255
  810eb4:	2100201c 	xori	r4,r4,128
  810eb8:	213fe004 	addi	r4,r4,-128
  810ebc:	d8c00183 	ldbu	r3,6(sp)
  810ec0:	18bfe7c4 	addi	r2,r3,-97
  810ec4:	10803fcc 	andi	r2,r2,255
  810ec8:	8080c42e 	bgeu	r16,r2,8111dc <get_home_directory_cluster_for_file+0x584>
  810ecc:	18803fcc 	andi	r2,r3,255
  810ed0:	1080201c 	xori	r2,r2,128
  810ed4:	10bfe004 	addi	r2,r2,-128
  810ed8:	2080931e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810edc:	88c00103 	ldbu	r3,4(r17)
  810ee0:	18bfe7c4 	addi	r2,r3,-97
  810ee4:	10803fcc 	andi	r2,r2,255
  810ee8:	8080cb2e 	bgeu	r16,r2,811218 <get_home_directory_cluster_for_file+0x5c0>
  810eec:	19003fcc 	andi	r4,r3,255
  810ef0:	2100201c 	xori	r4,r4,128
  810ef4:	213fe004 	addi	r4,r4,-128
  810ef8:	d8c001c3 	ldbu	r3,7(sp)
  810efc:	18bfe7c4 	addi	r2,r3,-97
  810f00:	10803fcc 	andi	r2,r2,255
  810f04:	8080bf2e 	bgeu	r16,r2,811204 <get_home_directory_cluster_for_file+0x5ac>
  810f08:	18803fcc 	andi	r2,r3,255
  810f0c:	1080201c 	xori	r2,r2,128
  810f10:	10bfe004 	addi	r2,r2,-128
  810f14:	2080841e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810f18:	88c00143 	ldbu	r3,5(r17)
  810f1c:	18bfe7c4 	addi	r2,r3,-97
  810f20:	10803fcc 	andi	r2,r2,255
  810f24:	8080c62e 	bgeu	r16,r2,811240 <get_home_directory_cluster_for_file+0x5e8>
  810f28:	19003fcc 	andi	r4,r3,255
  810f2c:	2100201c 	xori	r4,r4,128
  810f30:	213fe004 	addi	r4,r4,-128
  810f34:	d8c00203 	ldbu	r3,8(sp)
  810f38:	18bfe7c4 	addi	r2,r3,-97
  810f3c:	10803fcc 	andi	r2,r2,255
  810f40:	8080ba2e 	bgeu	r16,r2,81122c <get_home_directory_cluster_for_file+0x5d4>
  810f44:	18803fcc 	andi	r2,r3,255
  810f48:	1080201c 	xori	r2,r2,128
  810f4c:	10bfe004 	addi	r2,r2,-128
  810f50:	2080751e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810f54:	88c00183 	ldbu	r3,6(r17)
  810f58:	18bfe7c4 	addi	r2,r3,-97
  810f5c:	10803fcc 	andi	r2,r2,255
  810f60:	8080c12e 	bgeu	r16,r2,811268 <get_home_directory_cluster_for_file+0x610>
  810f64:	19003fcc 	andi	r4,r3,255
  810f68:	2100201c 	xori	r4,r4,128
  810f6c:	213fe004 	addi	r4,r4,-128
  810f70:	d8c00243 	ldbu	r3,9(sp)
  810f74:	18bfe7c4 	addi	r2,r3,-97
  810f78:	10803fcc 	andi	r2,r2,255
  810f7c:	8080b52e 	bgeu	r16,r2,811254 <get_home_directory_cluster_for_file+0x5fc>
  810f80:	18803fcc 	andi	r2,r3,255
  810f84:	1080201c 	xori	r2,r2,128
  810f88:	10bfe004 	addi	r2,r2,-128
  810f8c:	2080661e 	bne	r4,r2,811128 <get_home_directory_cluster_for_file+0x4d0>
  810f90:	88c001c3 	ldbu	r3,7(r17)
  810f94:	18bfe7c4 	addi	r2,r3,-97
  810f98:	10803fcc 	andi	r2,r2,255
  810f9c:	8080bb36 	bltu	r16,r2,81128c <get_home_directory_cluster_for_file+0x634>
  810fa0:	18bff804 	addi	r2,r3,-32
  810fa4:	11003fcc 	andi	r4,r2,255
  810fa8:	2100201c 	xori	r4,r4,128
  810fac:	213fe004 	addi	r4,r4,-128
  810fb0:	d8c00283 	ldbu	r3,10(sp)
  810fb4:	18bfe7c4 	addi	r2,r3,-97
  810fb8:	10803fcc 	andi	r2,r2,255
  810fbc:	8080af36 	bltu	r16,r2,81127c <get_home_directory_cluster_for_file+0x624>
  810fc0:	18bff804 	addi	r2,r3,-32
  810fc4:	10803fcc 	andi	r2,r2,255
  810fc8:	1080201c 	xori	r2,r2,128
  810fcc:	10bfe004 	addi	r2,r2,-128
  810fd0:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810fd4:	88c00203 	ldbu	r3,8(r17)
  810fd8:	18bfe7c4 	addi	r2,r3,-97
  810fdc:	10803fcc 	andi	r2,r2,255
  810fe0:	8080472e 	bgeu	r16,r2,811100 <get_home_directory_cluster_for_file+0x4a8>
  810fe4:	19003fcc 	andi	r4,r3,255
  810fe8:	2100201c 	xori	r4,r4,128
  810fec:	213fe004 	addi	r4,r4,-128
  810ff0:	d8c00003 	ldbu	r3,0(sp)
  810ff4:	18bfe7c4 	addi	r2,r3,-97
  810ff8:	10803fcc 	andi	r2,r2,255
  810ffc:	80803b2e 	bgeu	r16,r2,8110ec <get_home_directory_cluster_for_file+0x494>
  811000:	18803fcc 	andi	r2,r3,255
  811004:	1080201c 	xori	r2,r2,128
  811008:	10bfe004 	addi	r2,r2,-128
  81100c:	2080221e 	bne	r4,r2,811098 <get_home_directory_cluster_for_file+0x440>
  811010:	88c00243 	ldbu	r3,9(r17)
  811014:	18bfe7c4 	addi	r2,r3,-97
  811018:	10803fcc 	andi	r2,r2,255
  81101c:	8080582e 	bgeu	r16,r2,811180 <get_home_directory_cluster_for_file+0x528>
  811020:	19003fcc 	andi	r4,r3,255
  811024:	2100201c 	xori	r4,r4,128
  811028:	213fe004 	addi	r4,r4,-128
  81102c:	d8c00043 	ldbu	r3,1(sp)
  811030:	18bfe7c4 	addi	r2,r3,-97
  811034:	10803fcc 	andi	r2,r2,255
  811038:	80804c2e 	bgeu	r16,r2,81116c <get_home_directory_cluster_for_file+0x514>
  81103c:	18803fcc 	andi	r2,r3,255
  811040:	1080201c 	xori	r2,r2,128
  811044:	10bfe004 	addi	r2,r2,-128
  811048:	2080131e 	bne	r4,r2,811098 <get_home_directory_cluster_for_file+0x440>
  81104c:	88c00283 	ldbu	r3,10(r17)
  811050:	18bfe7c4 	addi	r2,r3,-97
  811054:	10803fcc 	andi	r2,r2,255
  811058:	80805236 	bltu	r16,r2,8111a4 <get_home_directory_cluster_for_file+0x54c>
  81105c:	18bff804 	addi	r2,r3,-32
  811060:	11003fcc 	andi	r4,r2,255
  811064:	2100201c 	xori	r4,r4,128
  811068:	213fe004 	addi	r4,r4,-128
  81106c:	d8c00083 	ldbu	r3,2(sp)
  811070:	18bfe7c4 	addi	r2,r3,-97
  811074:	10803fcc 	andi	r2,r2,255
  811078:	80804636 	bltu	r16,r2,811194 <get_home_directory_cluster_for_file+0x53c>
  81107c:	18bff804 	addi	r2,r3,-32
  811080:	10803fcc 	andi	r2,r2,255
  811084:	1080201c 	xori	r2,r2,128
  811088:	10bfe004 	addi	r2,r2,-128
  81108c:	2080021e 	bne	r4,r2,811098 <get_home_directory_cluster_for_file+0x440>
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
  811090:	2805003a 	cmpeq	r2,r5,zero
  811094:	10008126 	beq	r2,zero,81129c <get_home_directory_cluster_for_file+0x644>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  811098:	94800804 	addi	r18,r18,32
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  81109c:	00808004 	movi	r2,512
  8110a0:	90bf491e 	bne	r18,r2,810dc8 <get_home_directory_cluster_for_file+0x170>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8110a4:	9cc00044 	addi	r19,r19,1
  8110a8:	a4ff401e 	bne	r20,r19,810dac <get_home_directory_cluster_for_file+0x154>
    }
    
    *home_directory_cluster = home_dir_cluster;
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  8110ac:	d8000515 	stw	zero,20(sp)
		result = true;
    }
    return result;
}
  8110b0:	d8800517 	ldw	r2,20(sp)
  8110b4:	dfc01117 	ldw	ra,68(sp)
  8110b8:	df001017 	ldw	fp,64(sp)
  8110bc:	ddc00f17 	ldw	r23,60(sp)
  8110c0:	dd800e17 	ldw	r22,56(sp)
  8110c4:	dd400d17 	ldw	r21,52(sp)
  8110c8:	dd000c17 	ldw	r20,48(sp)
  8110cc:	dcc00b17 	ldw	r19,44(sp)
  8110d0:	dc800a17 	ldw	r18,40(sp)
  8110d4:	dc400917 	ldw	r17,36(sp)
  8110d8:	dc000817 	ldw	r16,32(sp)
  8110dc:	dec01204 	addi	sp,sp,72
  8110e0:	f800283a 	ret
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
  8110e4:	28c00005 	stb	r3,0(r5)
  8110e8:	003f1e06 	br	810d64 <get_home_directory_cluster_for_file+0x10c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8110ec:	18bff804 	addi	r2,r3,-32
  8110f0:	10803fcc 	andi	r2,r2,255
  8110f4:	1080201c 	xori	r2,r2,128
  8110f8:	10bfe004 	addi	r2,r2,-128
  8110fc:	003fc306 	br	81100c <get_home_directory_cluster_for_file+0x3b4>
  811100:	18bff804 	addi	r2,r3,-32
  811104:	11003fcc 	andi	r4,r2,255
  811108:	2100201c 	xori	r4,r4,128
  81110c:	213fe004 	addi	r4,r4,-128
  811110:	003fb706 	br	810ff0 <get_home_directory_cluster_for_file+0x398>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811114:	18bff804 	addi	r2,r3,-32
  811118:	10803fcc 	andi	r2,r2,255
  81111c:	1080201c 	xori	r2,r2,128
  811120:	10bfe004 	addi	r2,r2,-128
  811124:	20bf4026 	beq	r4,r2,810e28 <get_home_directory_cluster_for_file+0x1d0>
  811128:	000b883a 	mov	r5,zero
  81112c:	003fa906 	br	810fd4 <get_home_directory_cluster_for_file+0x37c>
  811130:	20bff804 	addi	r2,r4,-32
  811134:	11003fcc 	andi	r4,r2,255
  811138:	2100201c 	xori	r4,r4,128
  81113c:	213fe004 	addi	r4,r4,-128
  811140:	003f3106 	br	810e08 <get_home_directory_cluster_for_file+0x1b0>
  811144:	18bff804 	addi	r2,r3,-32
  811148:	10803fcc 	andi	r2,r2,255
  81114c:	1080201c 	xori	r2,r2,128
  811150:	10bfe004 	addi	r2,r2,-128
  811154:	003f4206 	br	810e60 <get_home_directory_cluster_for_file+0x208>
  811158:	18bff804 	addi	r2,r3,-32
  81115c:	11003fcc 	andi	r4,r2,255
  811160:	2100201c 	xori	r4,r4,128
  811164:	213fe004 	addi	r4,r4,-128
  811168:	003f3606 	br	810e44 <get_home_directory_cluster_for_file+0x1ec>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  81116c:	18bff804 	addi	r2,r3,-32
  811170:	10803fcc 	andi	r2,r2,255
  811174:	1080201c 	xori	r2,r2,128
  811178:	10bfe004 	addi	r2,r2,-128
  81117c:	003fb206 	br	811048 <get_home_directory_cluster_for_file+0x3f0>
  811180:	18bff804 	addi	r2,r3,-32
  811184:	11003fcc 	andi	r4,r2,255
  811188:	2100201c 	xori	r4,r4,128
  81118c:	213fe004 	addi	r4,r4,-128
  811190:	003fa606 	br	81102c <get_home_directory_cluster_for_file+0x3d4>
  811194:	18803fcc 	andi	r2,r3,255
  811198:	1080201c 	xori	r2,r2,128
  81119c:	10bfe004 	addi	r2,r2,-128
  8111a0:	003fba06 	br	81108c <get_home_directory_cluster_for_file+0x434>
  8111a4:	19003fcc 	andi	r4,r3,255
  8111a8:	2100201c 	xori	r4,r4,128
  8111ac:	213fe004 	addi	r4,r4,-128
  8111b0:	003fae06 	br	81106c <get_home_directory_cluster_for_file+0x414>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8111b4:	18bff804 	addi	r2,r3,-32
  8111b8:	10803fcc 	andi	r2,r2,255
  8111bc:	1080201c 	xori	r2,r2,128
  8111c0:	10bfe004 	addi	r2,r2,-128
  8111c4:	003f3506 	br	810e9c <get_home_directory_cluster_for_file+0x244>
  8111c8:	18bff804 	addi	r2,r3,-32
  8111cc:	11003fcc 	andi	r4,r2,255
  8111d0:	2100201c 	xori	r4,r4,128
  8111d4:	213fe004 	addi	r4,r4,-128
  8111d8:	003f2906 	br	810e80 <get_home_directory_cluster_for_file+0x228>
  8111dc:	18bff804 	addi	r2,r3,-32
  8111e0:	10803fcc 	andi	r2,r2,255
  8111e4:	1080201c 	xori	r2,r2,128
  8111e8:	10bfe004 	addi	r2,r2,-128
  8111ec:	003f3a06 	br	810ed8 <get_home_directory_cluster_for_file+0x280>
  8111f0:	18bff804 	addi	r2,r3,-32
  8111f4:	11003fcc 	andi	r4,r2,255
  8111f8:	2100201c 	xori	r4,r4,128
  8111fc:	213fe004 	addi	r4,r4,-128
  811200:	003f2e06 	br	810ebc <get_home_directory_cluster_for_file+0x264>
  811204:	18bff804 	addi	r2,r3,-32
  811208:	10803fcc 	andi	r2,r2,255
  81120c:	1080201c 	xori	r2,r2,128
  811210:	10bfe004 	addi	r2,r2,-128
  811214:	003f3f06 	br	810f14 <get_home_directory_cluster_for_file+0x2bc>
  811218:	18bff804 	addi	r2,r3,-32
  81121c:	11003fcc 	andi	r4,r2,255
  811220:	2100201c 	xori	r4,r4,128
  811224:	213fe004 	addi	r4,r4,-128
  811228:	003f3306 	br	810ef8 <get_home_directory_cluster_for_file+0x2a0>
  81122c:	18bff804 	addi	r2,r3,-32
  811230:	10803fcc 	andi	r2,r2,255
  811234:	1080201c 	xori	r2,r2,128
  811238:	10bfe004 	addi	r2,r2,-128
  81123c:	003f4406 	br	810f50 <get_home_directory_cluster_for_file+0x2f8>
  811240:	18bff804 	addi	r2,r3,-32
  811244:	11003fcc 	andi	r4,r2,255
  811248:	2100201c 	xori	r4,r4,128
  81124c:	213fe004 	addi	r4,r4,-128
  811250:	003f3806 	br	810f34 <get_home_directory_cluster_for_file+0x2dc>
  811254:	18bff804 	addi	r2,r3,-32
  811258:	10803fcc 	andi	r2,r2,255
  81125c:	1080201c 	xori	r2,r2,128
  811260:	10bfe004 	addi	r2,r2,-128
  811264:	003f4906 	br	810f8c <get_home_directory_cluster_for_file+0x334>
  811268:	18bff804 	addi	r2,r3,-32
  81126c:	11003fcc 	andi	r4,r2,255
  811270:	2100201c 	xori	r4,r4,128
  811274:	213fe004 	addi	r4,r4,-128
  811278:	003f3d06 	br	810f70 <get_home_directory_cluster_for_file+0x318>
  81127c:	18803fcc 	andi	r2,r3,255
  811280:	1080201c 	xori	r2,r2,128
  811284:	10bfe004 	addi	r2,r2,-128
  811288:	003f5106 	br	810fd0 <get_home_directory_cluster_for_file+0x378>
  81128c:	19003fcc 	andi	r4,r3,255
  811290:	2100201c 	xori	r4,r4,128
  811294:	213fe004 	addi	r4,r4,-128
  811298:	003f4506 	br	810fb0 <get_home_directory_cluster_for_file+0x358>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
                            {
                                new_cluster = file_record->start_cluster_index;
  81129c:	8980058b 	ldhu	r6,22(r17)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  8112a0:	00800044 	movi	r2,1
  8112a4:	88800a15 	stw	r2,40(r17)
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  8112a8:	303f7e26 	beq	r6,zero,8110a4 <get_home_directory_cluster_for_file+0x44c>
            }
            if (new_cluster != home_dir_cluster)
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
  8112ac:	d8c00417 	ldw	r3,16(sp)
  8112b0:	3027883a 	mov	r19,r6
  8112b4:	18800044 	addi	r2,r3,1
  8112b8:	b0ad883a 	add	r22,r22,r2
  8112bc:	b007883a 	mov	r3,r22
  8112c0:	dd800415 	stw	r22,16(sp)
  8112c4:	0000f206 	br	811690 <get_home_directory_cluster_for_file+0xa38>
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8112c8:	e1000383 	ldbu	r4,14(fp)
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8112cc:	98bfff84 	addi	r2,r19,-2
  8112d0:	100b883a 	mov	r5,r2
  8112d4:	d8800315 	stw	r2,12(sp)
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8112d8:	e0c01417 	ldw	r3,80(fp)
  8112dc:	2145383a 	mul	r2,r4,r5
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8112e0:	982b883a 	mov	r21,r19
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8112e4:	10ef883a 	add	r23,r2,r3
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8112e8:	2000df26 	beq	r4,zero,811668 <get_home_directory_cluster_for_file+0xa10>
  8112ec:	0029883a 	mov	r20,zero
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  8112f0:	d1675f17 	ldw	r5,-25220(gp)
  8112f4:	bd09883a 	add	r4,r23,r20
  8112f8:	080edd80 	call	80edd8 <Read_Sector_Data>
  8112fc:	1000da26 	beq	r2,zero,811668 <get_home_directory_cluster_for_file+0xa10>
                            }
                        }
                    }
                    else
                    {
                        break;
  811300:	0025883a 	mov	r18,zero
  811304:	04000644 	movi	r16,25
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  811308:	9009883a 	mov	r4,r18
  81130c:	880b883a 	mov	r5,r17
  811310:	980d883a 	mov	r6,r19
  811314:	a00f883a 	mov	r7,r20
  811318:	080eb4c0 	call	80eb4c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81131c:	89000003 	ldbu	r4,0(r17)
  811320:	00803944 	movi	r2,229
  811324:	20c03fcc 	andi	r3,r4,255
  811328:	1880ab26 	beq	r3,r2,8115d8 <get_home_directory_cluster_for_file+0x980>
  81132c:	1800aa26 	beq	r3,zero,8115d8 <get_home_directory_cluster_for_file+0x980>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811330:	20bfe7c4 	addi	r2,r4,-97
  811334:	10803fcc 	andi	r2,r2,255
  811338:	8081002e 	bgeu	r16,r2,81173c <get_home_directory_cluster_for_file+0xae4>
  81133c:	21003fcc 	andi	r4,r4,255
  811340:	2100201c 	xori	r4,r4,128
  811344:	213fe004 	addi	r4,r4,-128
  811348:	d8c000c3 	ldbu	r3,3(sp)
  81134c:	18bfe7c4 	addi	r2,r3,-97
  811350:	10803fcc 	andi	r2,r2,255
  811354:	8080f22e 	bgeu	r16,r2,811720 <get_home_directory_cluster_for_file+0xac8>
  811358:	18803fcc 	andi	r2,r3,255
  81135c:	1080201c 	xori	r2,r2,128
  811360:	10bfe004 	addi	r2,r2,-128
  811364:	1100f31e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  811368:	88c00043 	ldbu	r3,1(r17)
  81136c:	18bfe7c4 	addi	r2,r3,-97
  811370:	10803fcc 	andi	r2,r2,255
  811374:	8080fb2e 	bgeu	r16,r2,811764 <get_home_directory_cluster_for_file+0xb0c>
  811378:	19003fcc 	andi	r4,r3,255
  81137c:	2100201c 	xori	r4,r4,128
  811380:	213fe004 	addi	r4,r4,-128
  811384:	d8c00103 	ldbu	r3,4(sp)
  811388:	18bfe7c4 	addi	r2,r3,-97
  81138c:	10803fcc 	andi	r2,r2,255
  811390:	8080ef2e 	bgeu	r16,r2,811750 <get_home_directory_cluster_for_file+0xaf8>
  811394:	18803fcc 	andi	r2,r3,255
  811398:	1080201c 	xori	r2,r2,128
  81139c:	10bfe004 	addi	r2,r2,-128
  8113a0:	1100e41e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  8113a4:	88c00083 	ldbu	r3,2(r17)
  8113a8:	18bfe7c4 	addi	r2,r3,-97
  8113ac:	10803fcc 	andi	r2,r2,255
  8113b0:	8081062e 	bgeu	r16,r2,8117cc <get_home_directory_cluster_for_file+0xb74>
  8113b4:	19003fcc 	andi	r4,r3,255
  8113b8:	d8c00143 	ldbu	r3,5(sp)
  8113bc:	2100201c 	xori	r4,r4,128
  8113c0:	213fe004 	addi	r4,r4,-128
  8113c4:	18bfe7c4 	addi	r2,r3,-97
  8113c8:	10803fcc 	andi	r2,r2,255
  8113cc:	8081072e 	bgeu	r16,r2,8117ec <get_home_directory_cluster_for_file+0xb94>
  8113d0:	18803fcc 	andi	r2,r3,255
  8113d4:	1080201c 	xori	r2,r2,128
  8113d8:	10bfe004 	addi	r2,r2,-128
  8113dc:	1100d51e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  8113e0:	88c000c3 	ldbu	r3,3(r17)
  8113e4:	18bfe7c4 	addi	r2,r3,-97
  8113e8:	10803fcc 	andi	r2,r2,255
  8113ec:	8081042e 	bgeu	r16,r2,811800 <get_home_directory_cluster_for_file+0xba8>
  8113f0:	19003fcc 	andi	r4,r3,255
  8113f4:	d8c00183 	ldbu	r3,6(sp)
  8113f8:	2100201c 	xori	r4,r4,128
  8113fc:	213fe004 	addi	r4,r4,-128
  811400:	18bfe7c4 	addi	r2,r3,-97
  811404:	10803fcc 	andi	r2,r2,255
  811408:	8081052e 	bgeu	r16,r2,811820 <get_home_directory_cluster_for_file+0xbc8>
  81140c:	18803fcc 	andi	r2,r3,255
  811410:	1080201c 	xori	r2,r2,128
  811414:	10bfe004 	addi	r2,r2,-128
  811418:	1100c61e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  81141c:	88c00103 	ldbu	r3,4(r17)
  811420:	18bfe7c4 	addi	r2,r3,-97
  811424:	10803fcc 	andi	r2,r2,255
  811428:	8081022e 	bgeu	r16,r2,811834 <get_home_directory_cluster_for_file+0xbdc>
  81142c:	19003fcc 	andi	r4,r3,255
  811430:	d8c001c3 	ldbu	r3,7(sp)
  811434:	2100201c 	xori	r4,r4,128
  811438:	213fe004 	addi	r4,r4,-128
  81143c:	18bfe7c4 	addi	r2,r3,-97
  811440:	10803fcc 	andi	r2,r2,255
  811444:	8081032e 	bgeu	r16,r2,811854 <get_home_directory_cluster_for_file+0xbfc>
  811448:	18803fcc 	andi	r2,r3,255
  81144c:	1080201c 	xori	r2,r2,128
  811450:	10bfe004 	addi	r2,r2,-128
  811454:	1100b71e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  811458:	88c00143 	ldbu	r3,5(r17)
  81145c:	18bfe7c4 	addi	r2,r3,-97
  811460:	10803fcc 	andi	r2,r2,255
  811464:	8081002e 	bgeu	r16,r2,811868 <get_home_directory_cluster_for_file+0xc10>
  811468:	19003fcc 	andi	r4,r3,255
  81146c:	d8c00203 	ldbu	r3,8(sp)
  811470:	2100201c 	xori	r4,r4,128
  811474:	213fe004 	addi	r4,r4,-128
  811478:	18bfe7c4 	addi	r2,r3,-97
  81147c:	10803fcc 	andi	r2,r2,255
  811480:	8081012e 	bgeu	r16,r2,811888 <get_home_directory_cluster_for_file+0xc30>
  811484:	18803fcc 	andi	r2,r3,255
  811488:	1080201c 	xori	r2,r2,128
  81148c:	10bfe004 	addi	r2,r2,-128
  811490:	1100a81e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  811494:	88c00183 	ldbu	r3,6(r17)
  811498:	18bfe7c4 	addi	r2,r3,-97
  81149c:	10803fcc 	andi	r2,r2,255
  8114a0:	8080fe2e 	bgeu	r16,r2,81189c <get_home_directory_cluster_for_file+0xc44>
  8114a4:	19003fcc 	andi	r4,r3,255
  8114a8:	d8c00243 	ldbu	r3,9(sp)
  8114ac:	2100201c 	xori	r4,r4,128
  8114b0:	213fe004 	addi	r4,r4,-128
  8114b4:	18bfe7c4 	addi	r2,r3,-97
  8114b8:	10803fcc 	andi	r2,r2,255
  8114bc:	8080ff2e 	bgeu	r16,r2,8118bc <get_home_directory_cluster_for_file+0xc64>
  8114c0:	18803fcc 	andi	r2,r3,255
  8114c4:	1080201c 	xori	r2,r2,128
  8114c8:	10bfe004 	addi	r2,r2,-128
  8114cc:	1100991e 	bne	r2,r4,811734 <get_home_directory_cluster_for_file+0xadc>
  8114d0:	88c001c3 	ldbu	r3,7(r17)
  8114d4:	18bfe7c4 	addi	r2,r3,-97
  8114d8:	10803fcc 	andi	r2,r2,255
  8114dc:	80810036 	bltu	r16,r2,8118e0 <get_home_directory_cluster_for_file+0xc88>
  8114e0:	18bff804 	addi	r2,r3,-32
  8114e4:	11003fcc 	andi	r4,r2,255
  8114e8:	2100201c 	xori	r4,r4,128
  8114ec:	213fe004 	addi	r4,r4,-128
  8114f0:	d8c00283 	ldbu	r3,10(sp)
  8114f4:	18bfe7c4 	addi	r2,r3,-97
  8114f8:	10803fcc 	andi	r2,r2,255
  8114fc:	8080f436 	bltu	r16,r2,8118d0 <get_home_directory_cluster_for_file+0xc78>
  811500:	18bff804 	addi	r2,r3,-32
  811504:	10803fcc 	andi	r2,r2,255
  811508:	1080201c 	xori	r2,r2,128
  81150c:	10bfe004 	addi	r2,r2,-128
  811510:	110b003a 	cmpeq	r5,r2,r4
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811514:	88c00203 	ldbu	r3,8(r17)
  811518:	18bfe7c4 	addi	r2,r3,-97
  81151c:	10803fcc 	andi	r2,r2,255
  811520:	80807a2e 	bgeu	r16,r2,81170c <get_home_directory_cluster_for_file+0xab4>
  811524:	19003fcc 	andi	r4,r3,255
  811528:	2100201c 	xori	r4,r4,128
  81152c:	213fe004 	addi	r4,r4,-128
  811530:	d8c00003 	ldbu	r3,0(sp)
  811534:	18bfe7c4 	addi	r2,r3,-97
  811538:	10803fcc 	andi	r2,r2,255
  81153c:	80806e2e 	bgeu	r16,r2,8116f8 <get_home_directory_cluster_for_file+0xaa0>
  811540:	18803fcc 	andi	r2,r3,255
  811544:	1080201c 	xori	r2,r2,128
  811548:	10bfe004 	addi	r2,r2,-128
  81154c:	2080221e 	bne	r4,r2,8115d8 <get_home_directory_cluster_for_file+0x980>
  811550:	88c00243 	ldbu	r3,9(r17)
  811554:	18bfe7c4 	addi	r2,r3,-97
  811558:	10803fcc 	andi	r2,r2,255
  81155c:	80808b2e 	bgeu	r16,r2,81178c <get_home_directory_cluster_for_file+0xb34>
  811560:	19003fcc 	andi	r4,r3,255
  811564:	2100201c 	xori	r4,r4,128
  811568:	213fe004 	addi	r4,r4,-128
  81156c:	d8c00043 	ldbu	r3,1(sp)
  811570:	18bfe7c4 	addi	r2,r3,-97
  811574:	10803fcc 	andi	r2,r2,255
  811578:	80807f2e 	bgeu	r16,r2,811778 <get_home_directory_cluster_for_file+0xb20>
  81157c:	18803fcc 	andi	r2,r3,255
  811580:	1080201c 	xori	r2,r2,128
  811584:	10bfe004 	addi	r2,r2,-128
  811588:	2080131e 	bne	r4,r2,8115d8 <get_home_directory_cluster_for_file+0x980>
  81158c:	88c00283 	ldbu	r3,10(r17)
  811590:	18bfe7c4 	addi	r2,r3,-97
  811594:	10803fcc 	andi	r2,r2,255
  811598:	80808136 	bltu	r16,r2,8117a0 <get_home_directory_cluster_for_file+0xb48>
  81159c:	18bff804 	addi	r2,r3,-32
  8115a0:	d8c00083 	ldbu	r3,2(sp)
  8115a4:	11003fcc 	andi	r4,r2,255
  8115a8:	2100201c 	xori	r4,r4,128
  8115ac:	18bfe7c4 	addi	r2,r3,-97
  8115b0:	10803fcc 	andi	r2,r2,255
  8115b4:	213fe004 	addi	r4,r4,-128
  8115b8:	80808036 	bltu	r16,r2,8117bc <get_home_directory_cluster_for_file+0xb64>
  8115bc:	18bff804 	addi	r2,r3,-32
  8115c0:	10803fcc 	andi	r2,r2,255
  8115c4:	1080201c 	xori	r2,r2,128
  8115c8:	10bfe004 	addi	r2,r2,-128
  8115cc:	2080021e 	bne	r4,r2,8115d8 <get_home_directory_cluster_for_file+0x980>
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
  8115d0:	2805003a 	cmpeq	r2,r5,zero
  8115d4:	1000c626 	beq	r2,zero,8118f0 <get_home_directory_cluster_for_file+0xc98>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
                                    break;
  8115d8:	94800804 	addi	r18,r18,32
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  8115dc:	00808004 	movi	r2,512
  8115e0:	90bf491e 	bne	r18,r2,811308 <get_home_directory_cluster_for_file+0x6b0>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  8115e4:	acc0171e 	bne	r21,r19,811644 <get_home_directory_cluster_for_file+0x9ec>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8115e8:	e0800383 	ldbu	r2,14(fp)
  8115ec:	a5000044 	addi	r20,r20,1
  8115f0:	982b883a 	mov	r21,r19
  8115f4:	a0bf3e16 	blt	r20,r2,8112f0 <get_home_directory_cluster_for_file+0x698>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  8115f8:	e0c01117 	ldw	r3,68(fp)
  8115fc:	d0a75f17 	ldw	r2,-25220(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811600:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811604:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  811608:	d0e76317 	ldw	r3,-25204(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  81160c:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  811610:	20c00326 	beq	r4,r3,811620 <get_home_directory_cluster_for_file+0x9c8>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811614:	000b883a 	mov	r5,zero
  811618:	080edd80 	call	80edd8 <Read_Sector_Data>
  81161c:	103ea326 	beq	r2,zero,8110ac <get_home_directory_cluster_for_file+0x454>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811620:	d0e76117 	ldw	r3,-25212(gp)
  811624:	98803fcc 	andi	r2,r19,255
  811628:	1085883a 	add	r2,r2,r2
  81162c:	19000a17 	ldw	r4,40(r3)
  811630:	1105883a 	add	r2,r2,r4
  811634:	10c0002b 	ldhuio	r3,0(r2)
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  811638:	00bffe14 	movui	r2,65528
  81163c:	1d7ffe0c 	andi	r21,r3,65528
  811640:	a8be9a26 	beq	r21,r2,8110ac <get_home_directory_cluster_for_file+0x454>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  811644:	00bffdd4 	movui	r2,65527
  811648:	14c00a16 	blt	r2,r19,811674 <get_home_directory_cluster_for_file+0xa1c>
  81164c:	acc00a1e 	bne	r21,r19,811678 <get_home_directory_cluster_for_file+0xa20>
  811650:	d9400317 	ldw	r5,12(sp)
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811654:	e1000383 	ldbu	r4,14(fp)
  811658:	e0c01417 	ldw	r3,80(fp)
  81165c:	2145383a 	mul	r2,r4,r5
  811660:	10ef883a 	add	r23,r2,r3
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  811664:	203f211e 	bne	r4,zero,8112ec <get_home_directory_cluster_for_file+0x694>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  811668:	acffe326 	beq	r21,r19,8115f8 <get_home_directory_cluster_for_file+0x9a0>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  81166c:	00bffdd4 	movui	r2,65527
  811670:	14fff60e 	bge	r2,r19,81164c <get_home_directory_cluster_for_file+0x9f4>
            if (new_cluster != home_dir_cluster)
  811674:	acfe8d26 	beq	r21,r19,8110ac <get_home_directory_cluster_for_file+0x454>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
  811678:	d9800417 	ldw	r6,16(sp)
  81167c:	a827883a 	mov	r19,r21
  811680:	30800044 	addi	r2,r6,1
  811684:	1585883a 	add	r2,r2,r22
  811688:	d8800415 	stw	r2,16(sp)
  81168c:	1007883a 	mov	r3,r2
            {
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  811690:	d8800617 	ldw	r2,24(sp)
  811694:	10e1883a 	add	r16,r2,r3

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  811698:	8009883a 	mov	r4,r16
  81169c:	080400c0 	call	80400c <strlen>
    
    for(index = 0; index < length; index++)
  8116a0:	00809c0e 	bge	zero,r2,811914 <get_home_directory_cluster_for_file+0xcbc>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8116a4:	80c00007 	ldb	r3,0(r16)
  8116a8:	01001704 	movi	r4,92
  8116ac:	19000e26 	beq	r3,r4,8116e8 <get_home_directory_cluster_for_file+0xa90>
  8116b0:	01400bc4 	movi	r5,47
  8116b4:	19400c26 	beq	r3,r5,8116e8 <get_home_directory_cluster_for_file+0xa90>
  8116b8:	002d883a 	mov	r22,zero
  8116bc:	00000306 	br	8116cc <get_home_directory_cluster_for_file+0xa74>
  8116c0:	18c00007 	ldb	r3,0(r3)
  8116c4:	19008c26 	beq	r3,r4,8118f8 <get_home_directory_cluster_for_file+0xca0>
  8116c8:	19408b26 	beq	r3,r5,8118f8 <get_home_directory_cluster_for_file+0xca0>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8116cc:	b5800044 	addi	r22,r22,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8116d0:	8587883a 	add	r3,r16,r22
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8116d4:	15bffa1e 	bne	r2,r22,8116c0 <get_home_directory_cluster_for_file+0xa68>
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
  8116d8:	05bfffc4 	movi	r22,-1
  8116dc:	01000044 	movi	r4,1
  8116e0:	d9000515 	stw	r4,20(sp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  8116e4:	05bd8816 	blt	zero,r22,810d08 <get_home_directory_cluster_for_file+0xb0>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  8116e8:	d9400717 	ldw	r5,28(sp)
  8116ec:	2cc00015 	stw	r19,0(r5)
    if (home_dir_cluster == 0)
  8116f0:	983d7a26 	beq	r19,zero,810cdc <get_home_directory_cluster_for_file+0x84>
  8116f4:	003e6e06 	br	8110b0 <get_home_directory_cluster_for_file+0x458>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8116f8:	18bff804 	addi	r2,r3,-32
  8116fc:	10803fcc 	andi	r2,r2,255
  811700:	1080201c 	xori	r2,r2,128
  811704:	10bfe004 	addi	r2,r2,-128
  811708:	003f9006 	br	81154c <get_home_directory_cluster_for_file+0x8f4>
  81170c:	18bff804 	addi	r2,r3,-32
  811710:	11003fcc 	andi	r4,r2,255
  811714:	2100201c 	xori	r4,r4,128
  811718:	213fe004 	addi	r4,r4,-128
  81171c:	003f8406 	br	811530 <get_home_directory_cluster_for_file+0x8d8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811720:	18bff804 	addi	r2,r3,-32
  811724:	10803fcc 	andi	r2,r2,255
  811728:	1080201c 	xori	r2,r2,128
  81172c:	10bfe004 	addi	r2,r2,-128
  811730:	113f0d26 	beq	r2,r4,811368 <get_home_directory_cluster_for_file+0x710>
  811734:	000b883a 	mov	r5,zero
  811738:	003f7606 	br	811514 <get_home_directory_cluster_for_file+0x8bc>
  81173c:	20bff804 	addi	r2,r4,-32
  811740:	11003fcc 	andi	r4,r2,255
  811744:	2100201c 	xori	r4,r4,128
  811748:	213fe004 	addi	r4,r4,-128
  81174c:	003efe06 	br	811348 <get_home_directory_cluster_for_file+0x6f0>
  811750:	18bff804 	addi	r2,r3,-32
  811754:	10803fcc 	andi	r2,r2,255
  811758:	1080201c 	xori	r2,r2,128
  81175c:	10bfe004 	addi	r2,r2,-128
  811760:	003f0f06 	br	8113a0 <get_home_directory_cluster_for_file+0x748>
  811764:	18bff804 	addi	r2,r3,-32
  811768:	11003fcc 	andi	r4,r2,255
  81176c:	2100201c 	xori	r4,r4,128
  811770:	213fe004 	addi	r4,r4,-128
  811774:	003f0306 	br	811384 <get_home_directory_cluster_for_file+0x72c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811778:	18bff804 	addi	r2,r3,-32
  81177c:	10803fcc 	andi	r2,r2,255
  811780:	1080201c 	xori	r2,r2,128
  811784:	10bfe004 	addi	r2,r2,-128
  811788:	003f7f06 	br	811588 <get_home_directory_cluster_for_file+0x930>
  81178c:	18bff804 	addi	r2,r3,-32
  811790:	11003fcc 	andi	r4,r2,255
  811794:	2100201c 	xori	r4,r4,128
  811798:	213fe004 	addi	r4,r4,-128
  81179c:	003f7306 	br	81156c <get_home_directory_cluster_for_file+0x914>
  8117a0:	19003fcc 	andi	r4,r3,255
  8117a4:	d8c00083 	ldbu	r3,2(sp)
  8117a8:	2100201c 	xori	r4,r4,128
  8117ac:	213fe004 	addi	r4,r4,-128
  8117b0:	18bfe7c4 	addi	r2,r3,-97
  8117b4:	10803fcc 	andi	r2,r2,255
  8117b8:	80bf802e 	bgeu	r16,r2,8115bc <get_home_directory_cluster_for_file+0x964>
  8117bc:	18803fcc 	andi	r2,r3,255
  8117c0:	1080201c 	xori	r2,r2,128
  8117c4:	10bfe004 	addi	r2,r2,-128
  8117c8:	003f8006 	br	8115cc <get_home_directory_cluster_for_file+0x974>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8117cc:	18bff804 	addi	r2,r3,-32
  8117d0:	d8c00143 	ldbu	r3,5(sp)
  8117d4:	11003fcc 	andi	r4,r2,255
  8117d8:	2100201c 	xori	r4,r4,128
  8117dc:	18bfe7c4 	addi	r2,r3,-97
  8117e0:	10803fcc 	andi	r2,r2,255
  8117e4:	213fe004 	addi	r4,r4,-128
  8117e8:	80bef936 	bltu	r16,r2,8113d0 <get_home_directory_cluster_for_file+0x778>
  8117ec:	18bff804 	addi	r2,r3,-32
  8117f0:	10803fcc 	andi	r2,r2,255
  8117f4:	1080201c 	xori	r2,r2,128
  8117f8:	10bfe004 	addi	r2,r2,-128
  8117fc:	003ef706 	br	8113dc <get_home_directory_cluster_for_file+0x784>
  811800:	18bff804 	addi	r2,r3,-32
  811804:	d8c00183 	ldbu	r3,6(sp)
  811808:	11003fcc 	andi	r4,r2,255
  81180c:	2100201c 	xori	r4,r4,128
  811810:	18bfe7c4 	addi	r2,r3,-97
  811814:	10803fcc 	andi	r2,r2,255
  811818:	213fe004 	addi	r4,r4,-128
  81181c:	80befb36 	bltu	r16,r2,81140c <get_home_directory_cluster_for_file+0x7b4>
  811820:	18bff804 	addi	r2,r3,-32
  811824:	10803fcc 	andi	r2,r2,255
  811828:	1080201c 	xori	r2,r2,128
  81182c:	10bfe004 	addi	r2,r2,-128
  811830:	003ef906 	br	811418 <get_home_directory_cluster_for_file+0x7c0>
  811834:	18bff804 	addi	r2,r3,-32
  811838:	d8c001c3 	ldbu	r3,7(sp)
  81183c:	11003fcc 	andi	r4,r2,255
  811840:	2100201c 	xori	r4,r4,128
  811844:	18bfe7c4 	addi	r2,r3,-97
  811848:	10803fcc 	andi	r2,r2,255
  81184c:	213fe004 	addi	r4,r4,-128
  811850:	80befd36 	bltu	r16,r2,811448 <get_home_directory_cluster_for_file+0x7f0>
  811854:	18bff804 	addi	r2,r3,-32
  811858:	10803fcc 	andi	r2,r2,255
  81185c:	1080201c 	xori	r2,r2,128
  811860:	10bfe004 	addi	r2,r2,-128
  811864:	003efb06 	br	811454 <get_home_directory_cluster_for_file+0x7fc>
  811868:	18bff804 	addi	r2,r3,-32
  81186c:	d8c00203 	ldbu	r3,8(sp)
  811870:	11003fcc 	andi	r4,r2,255
  811874:	2100201c 	xori	r4,r4,128
  811878:	18bfe7c4 	addi	r2,r3,-97
  81187c:	10803fcc 	andi	r2,r2,255
  811880:	213fe004 	addi	r4,r4,-128
  811884:	80beff36 	bltu	r16,r2,811484 <get_home_directory_cluster_for_file+0x82c>
  811888:	18bff804 	addi	r2,r3,-32
  81188c:	10803fcc 	andi	r2,r2,255
  811890:	1080201c 	xori	r2,r2,128
  811894:	10bfe004 	addi	r2,r2,-128
  811898:	003efd06 	br	811490 <get_home_directory_cluster_for_file+0x838>
  81189c:	18bff804 	addi	r2,r3,-32
  8118a0:	d8c00243 	ldbu	r3,9(sp)
  8118a4:	11003fcc 	andi	r4,r2,255
  8118a8:	2100201c 	xori	r4,r4,128
  8118ac:	18bfe7c4 	addi	r2,r3,-97
  8118b0:	10803fcc 	andi	r2,r2,255
  8118b4:	213fe004 	addi	r4,r4,-128
  8118b8:	80bf0136 	bltu	r16,r2,8114c0 <get_home_directory_cluster_for_file+0x868>
  8118bc:	18bff804 	addi	r2,r3,-32
  8118c0:	10803fcc 	andi	r2,r2,255
  8118c4:	1080201c 	xori	r2,r2,128
  8118c8:	10bfe004 	addi	r2,r2,-128
  8118cc:	003eff06 	br	8114cc <get_home_directory_cluster_for_file+0x874>
  8118d0:	18803fcc 	andi	r2,r3,255
  8118d4:	1080201c 	xori	r2,r2,128
  8118d8:	10bfe004 	addi	r2,r2,-128
  8118dc:	003f0c06 	br	811510 <get_home_directory_cluster_for_file+0x8b8>
  8118e0:	19003fcc 	andi	r4,r3,255
  8118e4:	2100201c 	xori	r4,r4,128
  8118e8:	213fe004 	addi	r4,r4,-128
  8118ec:	003f0006 	br	8114f0 <get_home_directory_cluster_for_file+0x898>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  8118f0:	8d40058b 	ldhu	r21,22(r17)
  8118f4:	003f3b06 	br	8115e4 <get_home_directory_cluster_for_file+0x98c>
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
  8118f8:	b03f7816 	blt	r22,zero,8116dc <get_home_directory_cluster_for_file+0xa84>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  8118fc:	05bd0216 	blt	zero,r22,810d08 <get_home_directory_cluster_for_file+0xb0>
  811900:	003f7906 	br	8116e8 <get_home_directory_cluster_for_file+0xa90>
        {
            break;
        }
    }
    
    if (index == length)
  811904:	103cf326 	beq	r2,zero,810cd4 <get_home_directory_cluster_for_file+0x7c>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  811908:	d9400717 	ldw	r5,28(sp)
  81190c:	28000015 	stw	zero,0(r5)
  811910:	003cf206 	br	810cdc <get_home_directory_cluster_for_file+0x84>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811914:	002d883a 	mov	r22,zero
        {
            break;
        }
    }
    
    if (index == length)
  811918:	103f6f26 	beq	r2,zero,8116d8 <get_home_directory_cluster_for_file+0xa80>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  81191c:	05bcfa16 	blt	zero,r22,810d08 <get_home_directory_cluster_for_file+0xb0>
  811920:	003f7106 	br	8116e8 <get_home_directory_cluster_for_file+0xa90>

00811924 <alt_up_sd_card_find_first>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  811924:	d0a76117 	ldw	r2,-25212(gp)
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  811928:	deffed04 	addi	sp,sp,-76
  81192c:	dc001115 	stw	r16,68(sp)
  811930:	dfc01215 	stw	ra,72(sp)
  811934:	2821883a 	mov	r16,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  811938:	10000b26 	beq	r2,zero,811968 <alt_up_sd_card_find_first+0x44>
  81193c:	d0e75917 	ldw	r3,-25244(gp)
  811940:	1880002b 	ldhuio	r2,0(r3)
  811944:	1080008c 	andi	r2,r2,2
  811948:	10000726 	beq	r2,zero,811968 <alt_up_sd_card_find_first+0x44>
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  81194c:	d0a75817 	ldw	r2,-25248(gp)
  811950:	1000151e 	bne	r2,zero,8119a8 <alt_up_sd_card_find_first+0x84>
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  811954:	00800084 	movi	r2,2
		{
			result = 1;
		}
	}
	return result;
}
  811958:	dfc01217 	ldw	ra,72(sp)
  81195c:	dc001117 	ldw	r16,68(sp)
  811960:	dec01304 	addi	sp,sp,76
  811964:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  811968:	d0e75717 	ldw	r3,-25252(gp)
  81196c:	00800044 	movi	r2,1
  811970:	18bff81e 	bne	r3,r2,811954 <alt_up_sd_card_find_first+0x30>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  811974:	00802074 	movhi	r2,129
  811978:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  81197c:	00c02074 	movhi	r3,129
  811980:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  811984:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  811988:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  81198c:	d0275815 	stw	zero,-25248(gp)
  811990:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  811994:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  811998:	183fff15 	stw	zero,-4(r3)
  81199c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  8119a0:	18bffc1e 	bne	r3,r2,811994 <alt_up_sd_card_find_first+0x70>
  8119a4:	003feb06 	br	811954 <alt_up_sd_card_find_first+0x30>
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  8119a8:	d80b883a 	mov	r5,sp
  8119ac:	d9800104 	addi	r6,sp,4
  8119b0:	0810c580 	call	810c58 <get_home_directory_cluster_for_file>
  8119b4:	1000021e 	bne	r2,zero,8119c0 <alt_up_sd_card_find_first+0x9c>
  8119b8:	00800044 	movi	r2,1
  8119bc:	003fe606 	br	811958 <alt_up_sd_card_find_first+0x34>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  8119c0:	d9400017 	ldw	r5,0(sp)
  8119c4:	00c02074 	movhi	r3,129
  8119c8:	18de1304 	addi	r3,r3,30796
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
  8119cc:	00800044 	movi	r2,1
  8119d0:	18800415 	stw	r2,16(r3)
		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  8119d4:	00bfffc4 	movi	r2,-1
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  8119d8:	8009883a 	mov	r4,r16
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
  8119dc:	19400115 	stw	r5,4(r3)
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  8119e0:	1880030d 	sth	r2,12(r3)
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
  8119e4:	19400015 	stw	r5,0(r3)
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
  8119e8:	18000215 	stw	zero,8(r3)
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  8119ec:	080fb800 	call	80fb80 <alt_up_sd_card_find_next>
  8119f0:	10bfffcc 	andi	r2,r2,65535
  8119f4:	10a0001c 	xori	r2,r2,32768
  8119f8:	10a00004 	addi	r2,r2,-32768
  8119fc:	003fd606 	br	811958 <alt_up_sd_card_find_first+0x34>

00811a00 <alt_up_sd_card_read>:
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  811a00:	defffa04 	addi	sp,sp,-24
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811a04:	20ffffcc 	andi	r3,r4,65535
  811a08:	008004c4 	movi	r2,19
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  811a0c:	dfc00515 	stw	ra,20(sp)
  811a10:	dd000415 	stw	r20,16(sp)
  811a14:	dcc00315 	stw	r19,12(sp)
  811a18:	dc800215 	stw	r18,8(sp)
  811a1c:	dc400115 	stw	r17,4(sp)
  811a20:	dc000015 	stw	r16,0(sp)
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811a24:	10c00936 	bltu	r2,r3,811a4c <alt_up_sd_card_read+0x4c>
    {
        if (active_files[file_handle].in_use)
  811a28:	20bfffcc 	andi	r2,r4,65535
  811a2c:	10a0001c 	xori	r2,r2,32768
  811a30:	10a00004 	addi	r2,r2,-32768
  811a34:	102491ba 	slli	r18,r2,6
  811a38:	05002074 	movhi	r20,129
  811a3c:	a51e2d04 	addi	r20,r20,30900
  811a40:	9521883a 	add	r16,r18,r20
  811a44:	80800f17 	ldw	r2,60(r16)
  811a48:	1000091e 	bne	r2,zero,811a70 <alt_up_sd_card_read+0x70>
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811a4c:	00bfffc4 	movi	r2,-1
            }
        }
    }
    
    return ch;
}
  811a50:	dfc00517 	ldw	ra,20(sp)
  811a54:	dd000417 	ldw	r20,16(sp)
  811a58:	dcc00317 	ldw	r19,12(sp)
  811a5c:	dc800217 	ldw	r18,8(sp)
  811a60:	dc400117 	ldw	r17,4(sp)
  811a64:	dc000017 	ldw	r16,0(sp)
  811a68:	dec00604 	addi	sp,sp,24
  811a6c:	f800283a 	ret
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  811a70:	81400917 	ldw	r5,36(r16)
  811a74:	80800617 	ldw	r2,24(r16)
  811a78:	28bff42e 	bgeu	r5,r2,811a4c <alt_up_sd_card_read+0x4c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  811a7c:	04c02074 	movhi	r19,129
  811a80:	9cde1804 	addi	r19,r19,30816
  811a84:	84400717 	ldw	r17,28(r16)
  811a88:	99c00383 	ldbu	r7,14(r19)
  811a8c:	81800817 	ldw	r6,32(r16)
  811a90:	88ffff84 	addi	r3,r17,-2
  811a94:	98801417 	ldw	r2,80(r19)
  811a98:	19c7383a 	mul	r3,r3,r7
  811a9c:	3085883a 	add	r2,r6,r2
  811aa0:	1889883a 	add	r4,r3,r2
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  811aa4:	28000226 	beq	r5,zero,811ab0 <alt_up_sd_card_read+0xb0>
  811aa8:	28807fcc 	andi	r2,r5,511
  811aac:	10001726 	beq	r2,zero,811b0c <alt_up_sd_card_read+0x10c>
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
                        data_sector = data_sector + 1;
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  811ab0:	d1675f17 	ldw	r5,-25220(gp)
  811ab4:	d0a76317 	ldw	r2,-25204(gp)
  811ab8:	2147883a 	add	r3,r4,r5
  811abc:	1880191e 	bne	r3,r2,811b24 <alt_up_sd_card_read+0x124>
                    {
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  811ac0:	950d883a 	add	r6,r18,r20
  811ac4:	31000917 	ldw	r4,36(r6)
  811ac8:	d0e75e17 	ldw	r3,-25224(gp)
  811acc:	20807fcc 	andi	r2,r4,511
  811ad0:	10c5883a 	add	r2,r2,r3
  811ad4:	11400023 	ldbuio	r5,0(r2)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811ad8:	28803fcc 	andi	r2,r5,255
  811adc:	1080201c 	xori	r2,r2,128
  811ae0:	21000044 	addi	r4,r4,1
  811ae4:	10bfe004 	addi	r2,r2,-128
  811ae8:	31000915 	stw	r4,36(r6)
            }
        }
    }
    
    return ch;
}
  811aec:	dfc00517 	ldw	ra,20(sp)
  811af0:	dd000417 	ldw	r20,16(sp)
  811af4:	dcc00317 	ldw	r19,12(sp)
  811af8:	dc800217 	ldw	r18,8(sp)
  811afc:	dc400117 	ldw	r17,4(sp)
  811b00:	dc000017 	ldw	r16,0(sp)
  811b04:	dec00604 	addi	sp,sp,24
  811b08:	f800283a 	ret
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811b0c:	38bfffc4 	addi	r2,r7,-1
  811b10:	30800826 	beq	r6,r2,811b34 <alt_up_sd_card_read+0x134>
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811b14:	30800044 	addi	r2,r6,1
                        data_sector = data_sector + 1;
  811b18:	21000044 	addi	r4,r4,1
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811b1c:	80800815 	stw	r2,32(r16)
  811b20:	003fe306 	br	811ab0 <alt_up_sd_card_read+0xb0>
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  811b24:	080edd80 	call	80edd8 <Read_Sector_Data>
  811b28:	103fe51e 	bne	r2,zero,811ac0 <alt_up_sd_card_read+0xc0>
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811b2c:	00bfff84 	movi	r2,-2
  811b30:	003fc706 	br	811a50 <alt_up_sd_card_read+0x50>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811b34:	98c01117 	ldw	r3,68(r19)
  811b38:	8804d23a 	srli	r2,r17,8
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811b3c:	d1275f17 	ldw	r4,-25220(gp)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811b40:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  811b44:	d0e76317 	ldw	r3,-25204(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811b48:	1109883a 	add	r4,r2,r4
     
    if (sector_index != current_sector_index)
  811b4c:	20c00326 	beq	r4,r3,811b5c <alt_up_sd_card_read+0x15c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811b50:	000b883a 	mov	r5,zero
  811b54:	080edd80 	call	80edd8 <Read_Sector_Data>
  811b58:	103ff426 	beq	r2,zero,811b2c <alt_up_sd_card_read+0x12c>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811b5c:	d0e76117 	ldw	r3,-25212(gp)
  811b60:	88803fcc 	andi	r2,r17,255
  811b64:	1085883a 	add	r2,r2,r2
  811b68:	19000a17 	ldw	r4,40(r3)
  811b6c:	1105883a 	add	r2,r2,r4
  811b70:	10c0002b 	ldhuio	r3,0(r2)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  811b74:	00bffe14 	movui	r2,65528
  811b78:	197fffcc 	andi	r5,r3,65535
  811b7c:	293ffe0c 	andi	r4,r5,65528
  811b80:	20bfb226 	beq	r4,r2,811a4c <alt_up_sd_card_read+0x4c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811b84:	98800383 	ldbu	r2,14(r19)
  811b88:	28ffff84 	addi	r3,r5,-2
  811b8c:	99001417 	ldw	r4,80(r19)
  811b90:	1887383a 	mul	r3,r3,r2
                                return -1;
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
  811b94:	80000815 	stw	zero,32(r16)
                                /* End of file */
                                return -1;
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  811b98:	81400715 	stw	r5,28(r16)
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811b9c:	1909883a 	add	r4,r3,r4
  811ba0:	003fc306 	br	811ab0 <alt_up_sd_card_read+0xb0>

00811ba4 <alt_up_sd_card_write>:
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  811ba4:	defff604 	addi	sp,sp,-40
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811ba8:	20ffffcc 	andi	r3,r4,65535
  811bac:	008004c4 	movi	r2,19
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  811bb0:	ddc00715 	stw	r23,28(sp)
  811bb4:	dfc00915 	stw	ra,36(sp)
  811bb8:	df000815 	stw	fp,32(sp)
  811bbc:	dd800615 	stw	r22,24(sp)
  811bc0:	dd400515 	stw	r21,20(sp)
  811bc4:	dd000415 	stw	r20,16(sp)
  811bc8:	dcc00315 	stw	r19,12(sp)
  811bcc:	dc800215 	stw	r18,8(sp)
  811bd0:	dc400115 	stw	r17,4(sp)
  811bd4:	dc000015 	stw	r16,0(sp)
  811bd8:	282f883a 	mov	r23,r5
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811bdc:	10c03536 	bltu	r2,r3,811cb4 <alt_up_sd_card_write+0x110>
    {
        if (active_files[file_handle].in_use)
  811be0:	20bfffcc 	andi	r2,r4,65535
  811be4:	10a0001c 	xori	r2,r2,32768
  811be8:	10a00004 	addi	r2,r2,-32768
  811bec:	102891ba 	slli	r20,r2,6
  811bf0:	05802074 	movhi	r22,129
  811bf4:	b59e2d04 	addi	r22,r22,30900
  811bf8:	a5a1883a 	add	r16,r20,r22
  811bfc:	80800f17 	ldw	r2,60(r16)
  811c00:	10002c26 	beq	r2,zero,811cb4 <alt_up_sd_card_write+0x110>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811c04:	04c02074 	movhi	r19,129
  811c08:	9cde1804 	addi	r19,r19,30816
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811c0c:	81800917 	ldw	r6,36(r16)
  811c10:	9900030b 	ldhu	r4,12(r19)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811c14:	84400717 	ldw	r17,28(r16)
  811c18:	99c00383 	ldbu	r7,14(r19)
  811c1c:	82000817 	ldw	r8,32(r16)
  811c20:	88ffff84 	addi	r3,r17,-2
  811c24:	98801417 	ldw	r2,80(r19)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811c28:	3113203a 	divu	r9,r6,r4
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811c2c:	19c7383a 	mul	r3,r3,r7
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811c30:	4909383a 	mul	r4,r9,r4

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  811c34:	81400617 	ldw	r5,24(r16)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811c38:	4085883a 	add	r2,r8,r2
  811c3c:	18a5883a 	add	r18,r3,r2
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811c40:	312bc83a 	sub	r21,r6,r4

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  811c44:	3140282e 	bgeu	r6,r5,811ce8 <alt_up_sd_card_write+0x144>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  811c48:	3000411e 	bne	r6,zero,811d50 <alt_up_sd_card_write+0x1ac>
  811c4c:	d1675f17 	ldw	r5,-25220(gp)
  811c50:	d1e76317 	ldw	r7,-25204(gp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  811c54:	9145883a 	add	r2,r18,r5
  811c58:	11c00326 	beq	r2,r7,811c68 <alt_up_sd_card_write+0xc4>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  811c5c:	9009883a 	mov	r4,r18
  811c60:	080edd80 	call	80edd8 <Read_Sector_Data>
  811c64:	10001326 	beq	r2,zero,811cb4 <alt_up_sd_card_write+0x110>
                {
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  811c68:	a8bfffcc 	andi	r2,r21,65535
  811c6c:	d0e75e17 	ldw	r3,-25224(gp)
  811c70:	b9003fcc 	andi	r4,r23,255
  811c74:	10a0001c 	xori	r2,r2,32768
  811c78:	10a00004 	addi	r2,r2,-32768
  811c7c:	2100201c 	xori	r4,r4,128
  811c80:	213fe004 	addi	r4,r4,-128
  811c84:	10c5883a 	add	r2,r2,r3
  811c88:	11000025 	stbio	r4,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811c8c:	a587883a 	add	r3,r20,r22
  811c90:	18800917 	ldw	r2,36(r3)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  811c94:	19000617 	ldw	r4,24(r3)
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811c98:	01400044 	movi	r5,1
  811c9c:	1145883a 	add	r2,r2,r5
  811ca0:	18800915 	stw	r2,36(r3)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  811ca4:	1100242e 	bgeu	r2,r4,811d38 <alt_up_sd_card_write+0x194>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  811ca8:	2805883a 	mov	r2,r5
  811cac:	d1676215 	stw	r5,-25208(gp)
  811cb0:	00000106 	br	811cb8 <alt_up_sd_card_write+0x114>
  811cb4:	0005883a 	mov	r2,zero
			result = true;
		}
    }
    
    return result;
}
  811cb8:	dfc00917 	ldw	ra,36(sp)
  811cbc:	df000817 	ldw	fp,32(sp)
  811cc0:	ddc00717 	ldw	r23,28(sp)
  811cc4:	dd800617 	ldw	r22,24(sp)
  811cc8:	dd400517 	ldw	r21,20(sp)
  811ccc:	dd000417 	ldw	r20,16(sp)
  811cd0:	dcc00317 	ldw	r19,12(sp)
  811cd4:	dc800217 	ldw	r18,8(sp)
  811cd8:	dc400117 	ldw	r17,4(sp)
  811cdc:	dc000017 	ldw	r16,0(sp)
  811ce0:	dec00a04 	addi	sp,sp,40
  811ce4:	f800283a 	ret
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  811ce8:	303fd826 	beq	r6,zero,811c4c <alt_up_sd_card_write+0xa8>
  811cec:	a8bfffcc 	andi	r2,r21,65535
  811cf0:	10a0001c 	xori	r2,r2,32768
  811cf4:	10a00004 	addi	r2,r2,-32768
  811cf8:	103fd41e 	bne	r2,zero,811c4c <alt_up_sd_card_write+0xa8>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811cfc:	38bfffc4 	addi	r2,r7,-1
  811d00:	40803c26 	beq	r8,r2,811df4 <alt_up_sd_card_write+0x250>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  811d04:	82400815 	stw	r9,32(r16)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811d08:	a589883a 	add	r4,r20,r22
  811d0c:	20800717 	ldw	r2,28(r4)
  811d10:	99400383 	ldbu	r5,14(r19)
  811d14:	98c01417 	ldw	r3,80(r19)
  811d18:	10bfff84 	addi	r2,r2,-2
  811d1c:	21800817 	ldw	r6,32(r4)
  811d20:	1145383a 	mul	r2,r2,r5
  811d24:	d1e76317 	ldw	r7,-25204(gp)
  811d28:	d1675f17 	ldw	r5,-25220(gp)
  811d2c:	1987883a 	add	r3,r3,r6
  811d30:	10e5883a 	add	r18,r2,r3
  811d34:	003fc706 	br	811c54 <alt_up_sd_card_write+0xb0>
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  811d38:	2145883a 	add	r2,r4,r5
  811d3c:	18800615 	stw	r2,24(r3)
				active_files[file_handle].modified = true;
  811d40:	19400e15 	stw	r5,56(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  811d44:	2805883a 	mov	r2,r5
  811d48:	d1676215 	stw	r5,-25208(gp)
  811d4c:	003fda06 	br	811cb8 <alt_up_sd_card_write+0x114>
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  811d50:	a8bfffcc 	andi	r2,r21,65535
  811d54:	10a0001c 	xori	r2,r2,32768
  811d58:	10a00004 	addi	r2,r2,-32768
  811d5c:	103fbb1e 	bne	r2,zero,811c4c <alt_up_sd_card_write+0xa8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811d60:	38bfffc4 	addi	r2,r7,-1
  811d64:	40800626 	beq	r8,r2,811d80 <alt_up_sd_card_write+0x1dc>
  811d68:	d1675f17 	ldw	r5,-25220(gp)
  811d6c:	d1e76317 	ldw	r7,-25204(gp)
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811d70:	40800044 	addi	r2,r8,1
                        data_sector = data_sector + 1;
  811d74:	94800044 	addi	r18,r18,1
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811d78:	80800815 	stw	r2,32(r16)
  811d7c:	003fb506 	br	811c54 <alt_up_sd_card_write+0xb0>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811d80:	8804d23a 	srli	r2,r17,8
  811d84:	98c01117 	ldw	r3,68(r19)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811d88:	d1675f17 	ldw	r5,-25220(gp)
     
    if (sector_index != current_sector_index)
  811d8c:	d1e76317 	ldw	r7,-25204(gp)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811d90:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811d94:	1149883a 	add	r4,r2,r5
     
    if (sector_index != current_sector_index)
  811d98:	21c00526 	beq	r4,r7,811db0 <alt_up_sd_card_write+0x20c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811d9c:	000b883a 	mov	r5,zero
  811da0:	080edd80 	call	80edd8 <Read_Sector_Data>
  811da4:	103fc326 	beq	r2,zero,811cb4 <alt_up_sd_card_write+0x110>
  811da8:	d1675f17 	ldw	r5,-25220(gp)
  811dac:	d1e76317 	ldw	r7,-25204(gp)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811db0:	d0e76117 	ldw	r3,-25212(gp)
  811db4:	88803fcc 	andi	r2,r17,255
  811db8:	1085883a 	add	r2,r2,r2
  811dbc:	19000a17 	ldw	r4,40(r3)
  811dc0:	1105883a 	add	r2,r2,r4
  811dc4:	10c0002b 	ldhuio	r3,0(r2)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
  811dc8:	00bffdd4 	movui	r2,65527
  811dcc:	19bfffcc 	andi	r6,r3,65535
  811dd0:	11bfa036 	bltu	r2,r6,811c54 <alt_up_sd_card_write+0xb0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811dd4:	98800383 	ldbu	r2,14(r19)
  811dd8:	30ffff84 	addi	r3,r6,-2
  811ddc:	99001417 	ldw	r4,80(r19)
  811de0:	1887383a 	mul	r3,r3,r2
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
  811de4:	80000815 	stw	zero,32(r16)
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  811de8:	81800715 	stw	r6,28(r16)
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811dec:	1925883a 	add	r18,r3,r4
  811df0:	003f9806 	br	811c54 <alt_up_sd_card_write+0xb0>


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  811df4:	9c401117 	ldw	r17,68(r19)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811df8:	98801217 	ldw	r2,72(r19)
  811dfc:	88bfad26 	beq	r17,r2,811cb4 <alt_up_sd_card_write+0x110>
  811e00:	04800084 	movi	r18,2
  811e04:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  811e08:	d1675f17 	ldw	r5,-25220(gp)
  811e0c:	8809883a 	mov	r4,r17
  811e10:	080edd80 	call	80edd8 <Read_Sector_Data>
  811e14:	10006d26 	beq	r2,zero,811fcc <alt_up_sd_card_write+0x428>
  811e18:	d0a76117 	ldw	r2,-25212(gp)
  811e1c:	90c03fcc 	andi	r3,r18,255
  811e20:	11000a17 	ldw	r4,40(r2)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  811e24:	18c5883a 	add	r2,r3,r3
  811e28:	1105883a 	add	r2,r2,r4
  811e2c:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  811e30:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  811e34:	1821883a 	mov	r16,r3
                if (cluster == 0)
  811e38:	10000a26 	beq	r2,zero,811e64 <alt_up_sd_card_write+0x2c0>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  811e3c:	94800044 	addi	r18,r18,1
                } 
            } while ((cluster_index % 256) != 0);
  811e40:	90c03fcc 	andi	r3,r18,255
  811e44:	183ff71e 	bne	r3,zero,811e24 <alt_up_sd_card_write+0x280>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811e48:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  811e4c:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  811e50:	147fed1e 	bne	r2,r17,811e08 <alt_up_sd_card_write+0x264>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  811e54:	80bfffcc 	andi	r2,r16,65535
  811e58:	10a0001c 	xori	r2,r2,32768
  811e5c:	10a00004 	addi	r2,r2,-32768
  811e60:	103f941e 	bne	r2,zero,811cb4 <alt_up_sd_card_write+0x110>
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  811e64:	a585883a 	add	r2,r20,r22
  811e68:	14000717 	ldw	r16,28(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811e6c:	99001117 	ldw	r4,68(r19)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811e70:	d0e75f17 	ldw	r3,-25220(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811e74:	8004d23a 	srli	r2,r16,8
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  811e78:	9039883a 	mov	fp,r18


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811e7c:	1105883a 	add	r2,r2,r4
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811e80:	d1276317 	ldw	r4,-25204(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811e84:	10c5883a 	add	r2,r2,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811e88:	20800426 	beq	r4,r2,811e9c <alt_up_sd_card_write+0x2f8>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811e8c:	1009883a 	mov	r4,r2
  811e90:	000b883a 	mov	r5,zero
  811e94:	080edd80 	call	80edd8 <Read_Sector_Data>
  811e98:	10000b26 	beq	r2,zero,811ec8 <alt_up_sd_card_write+0x324>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811e9c:	d0e76117 	ldw	r3,-25212(gp)
  811ea0:	80803fcc 	andi	r2,r16,255
  811ea4:	e17fffcc 	andi	r5,fp,65535
  811ea8:	19000a17 	ldw	r4,40(r3)
  811eac:	1085883a 	add	r2,r2,r2
  811eb0:	2960001c 	xori	r5,r5,32768
  811eb4:	29600004 	addi	r5,r5,-32768
  811eb8:	1105883a 	add	r2,r2,r4
  811ebc:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  811ec0:	00c00044 	movi	r3,1
  811ec4:	d0e76215 	stw	r3,-25208(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811ec8:	98801117 	ldw	r2,68(r19)
  811ecc:	d0e75f17 	ldw	r3,-25220(gp)
  811ed0:	9022d23a 	srli	r17,r18,8
  811ed4:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811ed8:	d0a76317 	ldw	r2,-25204(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811edc:	88c9883a 	add	r4,r17,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811ee0:	11000326 	beq	r2,r4,811ef0 <alt_up_sd_card_write+0x34c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811ee4:	000b883a 	mov	r5,zero
  811ee8:	080edd80 	call	80edd8 <Read_Sector_Data>
  811eec:	10000926 	beq	r2,zero,811f14 <alt_up_sd_card_write+0x370>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811ef0:	d0e76117 	ldw	r3,-25212(gp)
  811ef4:	90803fcc 	andi	r2,r18,255
  811ef8:	1085883a 	add	r2,r2,r2
  811efc:	19000a17 	ldw	r4,40(r3)
  811f00:	00ffffc4 	movi	r3,-1
  811f04:	1105883a 	add	r2,r2,r4
  811f08:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  811f0c:	01000044 	movi	r4,1
  811f10:	d1276215 	stw	r4,-25208(gp)
						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  811f14:	a585883a 	add	r2,r20,r22
  811f18:	14000717 	ldw	r16,28(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f1c:	99001217 	ldw	r4,72(r19)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811f20:	d0e75f17 	ldw	r3,-25220(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f24:	8004d23a 	srli	r2,r16,8
  811f28:	1105883a 	add	r2,r2,r4
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f2c:	d1276317 	ldw	r4,-25204(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811f30:	10c5883a 	add	r2,r2,r3
    }
     
    if (sector_index != current_sector_index)
  811f34:	20800426 	beq	r4,r2,811f48 <alt_up_sd_card_write+0x3a4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811f38:	1009883a 	mov	r4,r2
  811f3c:	000b883a 	mov	r5,zero
  811f40:	080edd80 	call	80edd8 <Read_Sector_Data>
  811f44:	10000b26 	beq	r2,zero,811f74 <alt_up_sd_card_write+0x3d0>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811f48:	d0e76117 	ldw	r3,-25212(gp)
  811f4c:	80803fcc 	andi	r2,r16,255
  811f50:	e17fffcc 	andi	r5,fp,65535
  811f54:	19000a17 	ldw	r4,40(r3)
  811f58:	1085883a 	add	r2,r2,r2
  811f5c:	2960001c 	xori	r5,r5,32768
  811f60:	29600004 	addi	r5,r5,-32768
  811f64:	1105883a 	add	r2,r2,r4
  811f68:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  811f6c:	00c00044 	movi	r3,1
  811f70:	d0e76215 	stw	r3,-25208(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  811f74:	98801217 	ldw	r2,72(r19)
  811f78:	d0e75f17 	ldw	r3,-25220(gp)
  811f7c:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  811f80:	d0a76317 	ldw	r2,-25204(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  811f84:	88c9883a 	add	r4,r17,r3
    }
     
    if (sector_index != current_sector_index)
  811f88:	11000326 	beq	r2,r4,811f98 <alt_up_sd_card_write+0x3f4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811f8c:	000b883a 	mov	r5,zero
  811f90:	080edd80 	call	80edd8 <Read_Sector_Data>
  811f94:	10000926 	beq	r2,zero,811fbc <alt_up_sd_card_write+0x418>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  811f98:	d0e76117 	ldw	r3,-25212(gp)
  811f9c:	90803fcc 	andi	r2,r18,255
  811fa0:	1085883a 	add	r2,r2,r2
  811fa4:	19000a17 	ldw	r4,40(r3)
  811fa8:	00ffffc4 	movi	r3,-1
  811fac:	1105883a 	add	r2,r2,r4
  811fb0:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  811fb4:	01000044 	movi	r4,1
  811fb8:	d1276215 	stw	r4,-25208(gp)
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  811fbc:	a585883a 	add	r2,r20,r22
  811fc0:	14800715 	stw	r18,28(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  811fc4:	10000815 	stw	zero,32(r2)
  811fc8:	003f4f06 	br	811d08 <alt_up_sd_card_write+0x164>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  811fcc:	80bfffcc 	andi	r2,r16,65535
  811fd0:	10a0001c 	xori	r2,r2,32768
  811fd4:	10a00004 	addi	r2,r2,-32768
  811fd8:	103f9b1e 	bne	r2,zero,811e48 <alt_up_sd_card_write+0x2a4>
  811fdc:	003fa106 	br	811e64 <alt_up_sd_card_write+0x2c0>

00811fe0 <find_first_empty_record_in_a_subdirectory>:
}


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  811fe0:	defff504 	addi	sp,sp,-44
  811fe4:	dd000515 	stw	r20,20(sp)
  811fe8:	dcc00415 	stw	r19,16(sp)
  811fec:	dc800315 	stw	r18,12(sp)
  811ff0:	dfc00a15 	stw	ra,40(sp)
  811ff4:	df000915 	stw	fp,36(sp)
  811ff8:	ddc00815 	stw	r23,32(sp)
  811ffc:	dd800715 	stw	r22,28(sp)
  812000:	dd400615 	stw	r21,24(sp)
  812004:	dc400215 	stw	r17,8(sp)
  812008:	dc000115 	stw	r16,4(sp)
  81200c:	2025883a 	mov	r18,r4
  812010:	053fffc4 	movi	r20,-1
  812014:	04c02074 	movhi	r19,129
  812018:	9cde1804 	addi	r19,r19,30816
    int result = -1;
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81201c:	98800383 	ldbu	r2,14(r19)
  812020:	90ffff84 	addi	r3,r18,-2
  812024:	99001417 	ldw	r4,80(r19)
  812028:	1887383a 	mul	r3,r3,r2
  81202c:	1923883a 	add	r17,r3,r4
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  812030:	10001926 	beq	r2,zero,812098 <find_first_empty_record_in_a_subdirectory+0xb8>
  812034:	0021883a 	mov	r16,zero
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  812038:	d1675f17 	ldw	r5,-25220(gp)
  81203c:	8c09883a 	add	r4,r17,r16
  812040:	080edd80 	call	80edd8 <Read_Sector_Data>
  812044:	10001426 	beq	r2,zero,812098 <find_first_empty_record_in_a_subdirectory+0xb8>
  812048:	d0e76117 	ldw	r3,-25212(gp)
  81204c:	8008953a 	slli	r4,r16,20
                    }
                }
            }
            else
            {
                break;
  812050:	000d883a 	mov	r6,zero
  812054:	19c00a17 	ldw	r7,40(r3)
  812058:	000b883a 	mov	r5,zero
  81205c:	02803944 	movi	r10,229
  812060:	02400404 	movi	r9,16
  812064:	02000074 	movhi	r8,1
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  812068:	29c5883a 	add	r2,r5,r7
  81206c:	10c00023 	ldbuio	r3,0(r2)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  812070:	18c03fcc 	andi	r3,r3,255
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  812074:	31800044 	addi	r6,r6,1
  812078:	29400804 	addi	r5,r5,32
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  81207c:	1a800c26 	beq	r3,r10,8120b0 <find_first_empty_record_in_a_subdirectory+0xd0>
  812080:	18000b26 	beq	r3,zero,8120b0 <find_first_empty_record_in_a_subdirectory+0xd0>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  812084:	2209883a 	add	r4,r4,r8
  812088:	327ff71e 	bne	r6,r9,812068 <find_first_empty_record_in_a_subdirectory+0x88>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81208c:	98800383 	ldbu	r2,14(r19)
  812090:	84000044 	addi	r16,r16,1
  812094:	80bfe816 	blt	r16,r2,812038 <find_first_empty_record_in_a_subdirectory+0x58>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  812098:	a0001316 	blt	r20,zero,8120e8 <find_first_empty_record_in_a_subdirectory+0x108>
			{
				// Error encountered.                 
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  81209c:	00bffdd4 	movui	r2,65527
  8120a0:	14800416 	blt	r2,r18,8120b4 <find_first_empty_record_in_a_subdirectory+0xd4>
  8120a4:	00bfffc4 	movi	r2,-1
  8120a8:	a0bfdc26 	beq	r20,r2,81201c <find_first_empty_record_in_a_subdirectory+0x3c>
  8120ac:	00000106 	br	8120b4 <find_first_empty_record_in_a_subdirectory+0xd4>
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  8120b0:	9128b03a 	or	r20,r18,r4
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
    return result; 
}
  8120b4:	a005883a 	mov	r2,r20
  8120b8:	dfc00a17 	ldw	ra,40(sp)
  8120bc:	df000917 	ldw	fp,36(sp)
  8120c0:	ddc00817 	ldw	r23,32(sp)
  8120c4:	dd800717 	ldw	r22,28(sp)
  8120c8:	dd400617 	ldw	r21,24(sp)
  8120cc:	dd000517 	ldw	r20,20(sp)
  8120d0:	dcc00417 	ldw	r19,16(sp)
  8120d4:	dc800317 	ldw	r18,12(sp)
  8120d8:	dc400217 	ldw	r17,8(sp)
  8120dc:	dc000117 	ldw	r16,4(sp)
  8120e0:	dec00b04 	addi	sp,sp,44
  8120e4:	f800283a 	ret


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  8120e8:	98801117 	ldw	r2,68(r19)
  8120ec:	d0e75f17 	ldw	r3,-25220(gp)
  8120f0:	902ed23a 	srli	r23,r18,8
  8120f4:	1887883a 	add	r3,r3,r2
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  8120f8:	d0a76317 	ldw	r2,-25204(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8120fc:	b8c9883a 	add	r4,r23,r3
     
    if (sector_index != current_sector_index)
  812100:	20800526 	beq	r4,r2,812118 <find_first_empty_record_in_a_subdirectory+0x138>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812104:	000b883a 	mov	r5,zero
  812108:	080edd80 	call	80edd8 <Read_Sector_Data>
  81210c:	1000021e 	bne	r2,zero,812118 <find_first_empty_record_in_a_subdirectory+0x138>
  812110:	053fffc4 	movi	r20,-1
  812114:	003fe106 	br	81209c <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  812118:	d0e76117 	ldw	r3,-25212(gp)
  81211c:	90803fcc 	andi	r2,r18,255
  812120:	10ad883a 	add	r22,r2,r2
  812124:	18800a17 	ldw	r2,40(r3)
  812128:	b085883a 	add	r2,r22,r2
  81212c:	10c0002b 	ldhuio	r3,0(r2)
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  812130:	00bffe14 	movui	r2,65528
  812134:	18fffe0c 	andi	r3,r3,65528
  812138:	18bfd81e 	bne	r3,r2,81209c <find_first_empty_record_in_a_subdirectory+0xbc>


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81213c:	9c401117 	ldw	r17,68(r19)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812140:	98801217 	ldw	r2,72(r19)
  812144:	88801926 	beq	r17,r2,8121ac <find_first_empty_record_in_a_subdirectory+0x1cc>
  812148:	05400084 	movi	r21,2
  81214c:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  812150:	d1675f17 	ldw	r5,-25220(gp)
  812154:	8809883a 	mov	r4,r17
  812158:	080edd80 	call	80edd8 <Read_Sector_Data>
  81215c:	10001526 	beq	r2,zero,8121b4 <find_first_empty_record_in_a_subdirectory+0x1d4>
  812160:	d0e76117 	ldw	r3,-25212(gp)
  812164:	a8803fcc 	andi	r2,r21,255
  812168:	19000a17 	ldw	r4,40(r3)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  81216c:	1085883a 	add	r2,r2,r2
  812170:	1105883a 	add	r2,r2,r4
  812174:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  812178:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  81217c:	1821883a 	mov	r16,r3
                if (cluster == 0)
  812180:	10001026 	beq	r2,zero,8121c4 <find_first_empty_record_in_a_subdirectory+0x1e4>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  812184:	ad400044 	addi	r21,r21,1
                } 
            } while ((cluster_index % 256) != 0);
  812188:	a8803fcc 	andi	r2,r21,255
  81218c:	103ff71e 	bne	r2,zero,81216c <find_first_empty_record_in_a_subdirectory+0x18c>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812190:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  812194:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812198:	147fed1e 	bne	r2,r17,812150 <find_first_empty_record_in_a_subdirectory+0x170>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  81219c:	80bfffcc 	andi	r2,r16,65535
  8121a0:	10a0001c 	xori	r2,r2,32768
  8121a4:	10a00004 	addi	r2,r2,-32768
  8121a8:	10000626 	beq	r2,zero,8121c4 <find_first_empty_record_in_a_subdirectory+0x1e4>
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8121ac:	04bffe14 	movui	r18,65528
  8121b0:	003fba06 	br	81209c <find_first_empty_record_in_a_subdirectory+0xbc>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  8121b4:	80bfffcc 	andi	r2,r16,65535
  8121b8:	10a0001c 	xori	r2,r2,32768
  8121bc:	10a00004 	addi	r2,r2,-32768
  8121c0:	103ff31e 	bne	r2,zero,812190 <find_first_empty_record_in_a_subdirectory+0x1b0>


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8121c4:	98801117 	ldw	r2,68(r19)
  8121c8:	d0e75f17 	ldw	r3,-25220(gp)
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
  8121cc:	dd400015 	stw	r21,0(sp)
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  8121d0:	04bffe14 	movui	r18,65528


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8121d4:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8121d8:	d0a76317 	ldw	r2,-25204(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8121dc:	b8c9883a 	add	r4,r23,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8121e0:	11000326 	beq	r2,r4,8121f0 <find_first_empty_record_in_a_subdirectory+0x210>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8121e4:	000b883a 	mov	r5,zero
  8121e8:	080edd80 	call	80edd8 <Read_Sector_Data>
  8121ec:	103fab26 	beq	r2,zero,81209c <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8121f0:	d0e76117 	ldw	r3,-25212(gp)
  8121f4:	a93fffcc 	andi	r4,r21,65535
  8121f8:	2120001c 	xori	r4,r4,32768
  8121fc:	18800a17 	ldw	r2,40(r3)
  812200:	21200004 	addi	r4,r4,-32768
  812204:	b085883a 	add	r2,r22,r2
  812208:	1100002d 	sthio	r4,0(r2)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  81220c:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812210:	98c01117 	ldw	r3,68(r19)
  812214:	d0a75f17 	ldw	r2,-25220(gp)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812218:	8008d23a 	srli	r4,r16,8
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  81221c:	04400044 	movi	r17,1


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812220:	10c5883a 	add	r2,r2,r3
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812224:	2089883a 	add	r4,r4,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812228:	d0a76317 	ldw	r2,-25204(gp)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  81222c:	d4676215 	stw	r17,-25208(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812230:	05402074 	movhi	r21,129
  812234:	ad5e1804 	addi	r21,r21,30816
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812238:	11000326 	beq	r2,r4,812248 <find_first_empty_record_in_a_subdirectory+0x268>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  81223c:	000b883a 	mov	r5,zero
  812240:	080edd80 	call	80edd8 <Read_Sector_Data>
  812244:	103f9526 	beq	r2,zero,81209c <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812248:	d0e76117 	ldw	r3,-25212(gp)
  81224c:	80803fcc 	andi	r2,r16,255
  812250:	1085883a 	add	r2,r2,r2
  812254:	19000a17 	ldw	r4,40(r3)
  812258:	073fffc4 	movi	fp,-1
  81225c:	1105883a 	add	r2,r2,r4
  812260:	1700002d 	sthio	fp,0(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812264:	a8c01217 	ldw	r3,72(r21)
  812268:	d0a75f17 	ldw	r2,-25220(gp)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  81226c:	d4676215 	stw	r17,-25208(gp)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  812270:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812274:	10c5883a 	add	r2,r2,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  812278:	b889883a 	add	r4,r23,r2
    }
     
    if (sector_index != current_sector_index)
  81227c:	d0a76317 	ldw	r2,-25204(gp)
  812280:	11000326 	beq	r2,r4,812290 <find_first_empty_record_in_a_subdirectory+0x2b0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812284:	000b883a 	mov	r5,zero
  812288:	080edd80 	call	80edd8 <Read_Sector_Data>
  81228c:	103f8326 	beq	r2,zero,81209c <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812290:	d0e76117 	ldw	r3,-25212(gp)
  812294:	813fffcc 	andi	r4,r16,65535
  812298:	2120001c 	xori	r4,r4,32768
  81229c:	18800a17 	ldw	r2,40(r3)
  8122a0:	21200004 	addi	r4,r4,-32768
  8122a4:	b085883a 	add	r2,r22,r2
  8122a8:	1100002d 	sthio	r4,0(r2)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  8122ac:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8122b0:	a8c01217 	ldw	r3,72(r21)
  8122b4:	d0a75f17 	ldw	r2,-25220(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8122b8:	8008d23a 	srli	r4,r16,8
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  8122bc:	d4676215 	stw	r17,-25208(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8122c0:	10c5883a 	add	r2,r2,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8122c4:	2089883a 	add	r4,r4,r2
    }
     
    if (sector_index != current_sector_index)
  8122c8:	d0a76317 	ldw	r2,-25204(gp)
  8122cc:	11000326 	beq	r2,r4,8122dc <find_first_empty_record_in_a_subdirectory+0x2fc>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8122d0:	000b883a 	mov	r5,zero
  8122d4:	080edd80 	call	80edd8 <Read_Sector_Data>
  8122d8:	103f7026 	beq	r2,zero,81209c <find_first_empty_record_in_a_subdirectory+0xbc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8122dc:	d0e76117 	ldw	r3,-25212(gp)
  8122e0:	80803fcc 	andi	r2,r16,255
  8122e4:	1085883a 	add	r2,r2,r2
  8122e8:	19000a17 	ldw	r4,40(r3)
  8122ec:	1105883a 	add	r2,r2,r4
  8122f0:	1700002d 	sthio	fp,0(r2)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  8122f4:	d1276317 	ldw	r4,-25204(gp)
  8122f8:	000b883a 	mov	r5,zero
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  8122fc:	d4676215 	stw	r17,-25208(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812300:	080ed2c0 	call	80ed2c <Write_Sector_Data>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  812304:	dd000017 	ldw	r20,0(sp)
  812308:	003f6406 	br	81209c <find_first_empty_record_in_a_subdirectory+0xbc>

0081230c <create_file>:

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  81230c:	defff704 	addi	sp,sp,-36
  812310:	dd400515 	stw	r21,20(sp)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  812314:	05402074 	movhi	r21,129
  812318:	ad5e1804 	addi	r21,r21,30816

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  81231c:	dc400115 	stw	r17,4(sp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812320:	a8801217 	ldw	r2,72(r21)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  812324:	ac401117 	ldw	r17,68(r21)

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  812328:	ddc00715 	stw	r23,28(sp)
  81232c:	dcc00315 	stw	r19,12(sp)
  812330:	dc800215 	stw	r18,8(sp)
  812334:	dfc00815 	stw	ra,32(sp)
  812338:	dd800615 	stw	r22,24(sp)
  81233c:	dd000415 	stw	r20,16(sp)
  812340:	dc000015 	stw	r16,0(sp)
  812344:	2027883a 	mov	r19,r4
  812348:	2825883a 	mov	r18,r5
  81234c:	302f883a 	mov	r23,r6
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812350:	14403726 	beq	r2,r17,812430 <create_file+0x124>
  812354:	05000084 	movi	r20,2
  812358:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  81235c:	d1675f17 	ldw	r5,-25220(gp)
  812360:	8809883a 	mov	r4,r17
  812364:	080edd80 	call	80edd8 <Read_Sector_Data>
  812368:	10003d26 	beq	r2,zero,812460 <create_file+0x154>
  81236c:	d0e76117 	ldw	r3,-25212(gp)
  812370:	a0803fcc 	andi	r2,r20,255
  812374:	19000a17 	ldw	r4,40(r3)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  812378:	1085883a 	add	r2,r2,r2
  81237c:	1105883a 	add	r2,r2,r4
  812380:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  812384:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  812388:	1821883a 	mov	r16,r3
                if (cluster == 0)
  81238c:	10000a26 	beq	r2,zero,8123b8 <create_file+0xac>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  812390:	a5000044 	addi	r20,r20,1
                } 
            } while ((cluster_index % 256) != 0);
  812394:	a0803fcc 	andi	r2,r20,255
  812398:	103ff71e 	bne	r2,zero,812378 <create_file+0x6c>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  81239c:	a8801217 	ldw	r2,72(r21)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  8123a0:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8123a4:	147fed1e 	bne	r2,r17,81235c <create_file+0x50>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  8123a8:	80bfffcc 	andi	r2,r16,65535
  8123ac:	10a0001c 	xori	r2,r2,32768
  8123b0:	10a00004 	addi	r2,r2,-32768
  8123b4:	10001e1e 	bne	r2,zero,812430 <create_file+0x124>
    
    if (find_first_empty_cluster(&cluster_number))
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  8123b8:	b8800a17 	ldw	r2,40(r23)
  8123bc:	1000301e 	bne	r2,zero,812480 <create_file+0x174>


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8123c0:	a880050b 	ldhu	r2,20(r21)
  8123c4:	a8c0030b 	ldhu	r3,12(r21)
  8123c8:	1004917a 	slli	r2,r2,5
  8123cc:	10e3283a 	div	r17,r2,r3
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8123d0:	88001726 	beq	r17,zero,812430 <create_file+0x124>
  8123d4:	0021883a 	mov	r16,zero
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  8123d8:	a9001317 	ldw	r4,76(r21)
  8123dc:	d1675f17 	ldw	r5,-25220(gp)
  8123e0:	8109883a 	add	r4,r16,r4
  8123e4:	080edd80 	call	80edd8 <Read_Sector_Data>
  8123e8:	10001126 	beq	r2,zero,812430 <create_file+0x124>
  8123ec:	d0e76117 	ldw	r3,-25212(gp)
  8123f0:	8012913a 	slli	r9,r16,4
                }
            }
        }
        else
        {
            break;
  8123f4:	000b883a 	mov	r5,zero
  8123f8:	19800a17 	ldw	r6,40(r3)
  8123fc:	0009883a 	mov	r4,zero
  812400:	02003944 	movi	r8,229
  812404:	01c00404 	movi	r7,16
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  812408:	2185883a 	add	r2,r4,r6
  81240c:	10c00023 	ldbuio	r3,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  812410:	18c03fcc 	andi	r3,r3,255
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  812414:	21000804 	addi	r4,r4,32
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
  812418:	1a00e826 	beq	r3,r8,8127bc <create_file+0x4b0>
  81241c:	1800e726 	beq	r3,zero,8127bc <create_file+0x4b0>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  812420:	29400044 	addi	r5,r5,1
  812424:	29fff81e 	bne	r5,r7,812408 <create_file+0xfc>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  812428:	84000044 	addi	r16,r16,1
  81242c:	8c3fea1e 	bne	r17,r16,8123d8 <create_file+0xcc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812430:	0005883a 	mov	r2,zero
            }
        }

    }
    return result;           
}
  812434:	dfc00817 	ldw	ra,32(sp)
  812438:	ddc00717 	ldw	r23,28(sp)
  81243c:	dd800617 	ldw	r22,24(sp)
  812440:	dd400517 	ldw	r21,20(sp)
  812444:	dd000417 	ldw	r20,16(sp)
  812448:	dcc00317 	ldw	r19,12(sp)
  81244c:	dc800217 	ldw	r18,8(sp)
  812450:	dc400117 	ldw	r17,4(sp)
  812454:	dc000017 	ldw	r16,0(sp)
  812458:	dec00904 	addi	sp,sp,36
  81245c:	f800283a 	ret
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  812460:	80bfffcc 	andi	r2,r16,65535
  812464:	10a0001c 	xori	r2,r2,32768
  812468:	10a00004 	addi	r2,r2,-32768
  81246c:	103fd226 	beq	r2,zero,8123b8 <create_file+0xac>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812470:	a8801217 	ldw	r2,72(r21)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  812474:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812478:	147fb81e 	bne	r2,r17,81235c <create_file+0x50>
  81247c:	003fca06 	br	8123a8 <create_file+0x9c>
            record_index = find_first_empty_record_in_root_directory();
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  812480:	b900058b 	ldhu	r4,22(r23)
  812484:	0811fe00 	call	811fe0 <find_first_empty_record_in_a_subdirectory>
  812488:	102d883a 	mov	r22,r2
        }
        if (record_index >= 0)
  81248c:	b03fe816 	blt	r22,zero,812430 <create_file+0x124>

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  812490:	9809883a 	mov	r4,r19
  812494:	080400c0 	call	80400c <strlen>
    
    for(index = 0; index < length; index++)
  812498:	00815d0e 	bge	zero,r2,812a10 <create_file+0x704>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  81249c:	99c00003 	ldbu	r7,0(r19)
  8124a0:	01401704 	movi	r5,92
  8124a4:	38c03fcc 	andi	r3,r7,255
  8124a8:	18c0201c 	xori	r3,r3,128
  8124ac:	18ffe004 	addi	r3,r3,-128
  8124b0:	19400c26 	beq	r3,r5,8124e4 <create_file+0x1d8>
  8124b4:	01000bc4 	movi	r4,47
  8124b8:	19000a26 	beq	r3,r4,8124e4 <create_file+0x1d8>
  8124bc:	280d883a 	mov	r6,r5
  8124c0:	200b883a 	mov	r5,r4
  8124c4:	0009883a 	mov	r4,zero
  8124c8:	00000306 	br	8124d8 <create_file+0x1cc>
  8124cc:	18c00007 	ldb	r3,0(r3)
  8124d0:	1980bd26 	beq	r3,r6,8127c8 <create_file+0x4bc>
  8124d4:	1940bc26 	beq	r3,r5,8127c8 <create_file+0x4bc>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8124d8:	21000044 	addi	r4,r4,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8124dc:	9907883a 	add	r3,r19,r4
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8124e0:	113ffa1e 	bne	r2,r4,8124cc <create_file+0x1c0>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8124e4:	38c03fcc 	andi	r3,r7,255
  8124e8:	18c0201c 	xori	r3,r3,128
  8124ec:	18ffe004 	addi	r3,r3,-128
  8124f0:	00800b84 	movi	r2,46
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  8124f4:	92000204 	addi	r8,r18,8
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8124f8:	18810326 	beq	r3,r2,812908 <create_file+0x5fc>
        {
            name[counter] = filename[local];
  8124fc:	91c00005 	stb	r7,0(r18)
            if (filename[local] != 0) local++;
  812500:	98800007 	ldb	r2,0(r19)
  812504:	1000e326 	beq	r2,zero,812894 <create_file+0x588>
  812508:	01c00044 	movi	r7,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81250c:	99c9883a 	add	r4,r19,r7
  812510:	21400003 	ldbu	r5,0(r4)
  812514:	00800b84 	movi	r2,46
  812518:	200d883a 	mov	r6,r4
  81251c:	28c03fcc 	andi	r3,r5,255
  812520:	18c0201c 	xori	r3,r3,128
  812524:	18ffe004 	addi	r3,r3,-128
  812528:	18810226 	beq	r3,r2,812934 <create_file+0x628>
        {
            name[counter] = filename[local];
  81252c:	91400045 	stb	r5,1(r18)
            if (filename[local] != 0) local++;
  812530:	30800007 	ldb	r2,0(r6)
  812534:	1000dd26 	beq	r2,zero,8128ac <create_file+0x5a0>
  812538:	39c00044 	addi	r7,r7,1
  81253c:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812540:	21400003 	ldbu	r5,0(r4)
  812544:	00800b84 	movi	r2,46
  812548:	28c03fcc 	andi	r3,r5,255
  81254c:	18c0201c 	xori	r3,r3,128
  812550:	18ffe004 	addi	r3,r3,-128
  812554:	1880ff26 	beq	r3,r2,812954 <create_file+0x648>
        {
            name[counter] = filename[local];
  812558:	91400085 	stb	r5,2(r18)
            if (filename[local] != 0) local++;
  81255c:	20800007 	ldb	r2,0(r4)
  812560:	1000d726 	beq	r2,zero,8128c0 <create_file+0x5b4>
  812564:	39c00044 	addi	r7,r7,1
  812568:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81256c:	21400003 	ldbu	r5,0(r4)
  812570:	00800b84 	movi	r2,46
  812574:	28c03fcc 	andi	r3,r5,255
  812578:	18c0201c 	xori	r3,r3,128
  81257c:	18ffe004 	addi	r3,r3,-128
  812580:	1880fc26 	beq	r3,r2,812974 <create_file+0x668>
        {
            name[counter] = filename[local];
  812584:	914000c5 	stb	r5,3(r18)
            if (filename[local] != 0) local++;
  812588:	20800007 	ldb	r2,0(r4)
  81258c:	1000d026 	beq	r2,zero,8128d0 <create_file+0x5c4>
  812590:	39c00044 	addi	r7,r7,1
  812594:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812598:	21400003 	ldbu	r5,0(r4)
  81259c:	00800b84 	movi	r2,46
  8125a0:	28c03fcc 	andi	r3,r5,255
  8125a4:	18c0201c 	xori	r3,r3,128
  8125a8:	18ffe004 	addi	r3,r3,-128
  8125ac:	1880f926 	beq	r3,r2,812994 <create_file+0x688>
        {
            name[counter] = filename[local];
  8125b0:	91400105 	stb	r5,4(r18)
            if (filename[local] != 0) local++;
  8125b4:	20800007 	ldb	r2,0(r4)
  8125b8:	1000c926 	beq	r2,zero,8128e0 <create_file+0x5d4>
  8125bc:	39c00044 	addi	r7,r7,1
  8125c0:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8125c4:	21400003 	ldbu	r5,0(r4)
  8125c8:	00800b84 	movi	r2,46
  8125cc:	28c03fcc 	andi	r3,r5,255
  8125d0:	18c0201c 	xori	r3,r3,128
  8125d4:	18ffe004 	addi	r3,r3,-128
  8125d8:	1880f626 	beq	r3,r2,8129b4 <create_file+0x6a8>
        {
            name[counter] = filename[local];
  8125dc:	91400145 	stb	r5,5(r18)
            if (filename[local] != 0) local++;
  8125e0:	20800007 	ldb	r2,0(r4)
  8125e4:	1000c226 	beq	r2,zero,8128f0 <create_file+0x5e4>
  8125e8:	39c00044 	addi	r7,r7,1
  8125ec:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8125f0:	21400003 	ldbu	r5,0(r4)
  8125f4:	00800b84 	movi	r2,46
  8125f8:	28c03fcc 	andi	r3,r5,255
  8125fc:	18c0201c 	xori	r3,r3,128
  812600:	18ffe004 	addi	r3,r3,-128
  812604:	1880f326 	beq	r3,r2,8129d4 <create_file+0x6c8>
        {
            name[counter] = filename[local];
  812608:	91400185 	stb	r5,6(r18)
            if (filename[local] != 0) local++;
  81260c:	20800007 	ldb	r2,0(r4)
  812610:	1000bb26 	beq	r2,zero,812900 <create_file+0x5f4>
  812614:	39c00044 	addi	r7,r7,1
  812618:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81261c:	21400003 	ldbu	r5,0(r4)
  812620:	00800b84 	movi	r2,46
  812624:	28c03fcc 	andi	r3,r5,255
  812628:	18c0201c 	xori	r3,r3,128
  81262c:	18ffe004 	addi	r3,r3,-128
  812630:	1880f026 	beq	r3,r2,8129f4 <create_file+0x6e8>
        {
            name[counter] = filename[local];
  812634:	914001c5 	stb	r5,7(r18)
            if (filename[local] != 0) local++;
  812638:	20800007 	ldb	r2,0(r4)
  81263c:	10000726 	beq	r2,zero,81265c <create_file+0x350>
  812640:	39c00044 	addi	r7,r7,1
  812644:	99c9883a 	add	r4,r19,r7
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  812648:	20c00007 	ldb	r3,0(r4)
  81264c:	00800b84 	movi	r2,46
  812650:	1880021e 	bne	r3,r2,81265c <create_file+0x350>
  812654:	39c00044 	addi	r7,r7,1
  812658:	99c9883a 	add	r4,r19,r7
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  81265c:	20800003 	ldbu	r2,0(r4)
  812660:	1000881e 	bne	r2,zero,812884 <create_file+0x578>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  812664:	00800804 	movi	r2,32
  812668:	40800005 	stb	r2,0(r8)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  81266c:	20800003 	ldbu	r2,0(r4)
  812670:	1000801e 	bne	r2,zero,812874 <create_file+0x568>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  812674:	00800804 	movi	r2,32
  812678:	40800045 	stb	r2,1(r8)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  81267c:	20800003 	ldbu	r2,0(r4)
  812680:	1000011e 	bne	r2,zero,812688 <create_file+0x37c>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  812684:	00800804 	movi	r2,32
  812688:	40800085 	stb	r2,2(r8)
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  81268c:	b005d43a 	srai	r2,r22,16
            file_record->create_time = 0;
            file_record->create_date = 0;
            file_record->last_access_date = 0;
            file_record->last_modified_time = 0;
            file_record->last_modified_date = 0;
            file_record->start_cluster_index = cluster_number;
  812690:	9500058d 	sth	r20,22(r18)
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  812694:	b900058b 	ldhu	r4,22(r23)
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  812698:	10c003cc 	andi	r3,r2,15
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  81269c:	10bfffcc 	andi	r2,r2,65535
  8126a0:	100dd13a 	srai	r6,r2,4
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  8126a4:	1806917a 	slli	r3,r3,5
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
  8126a8:	00800044 	movi	r2,1
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
  8126ac:	b17fffcc 	andi	r5,r22,65535
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  8126b0:	90c00c0d 	sth	r3,48(r18)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  8126b4:	91000d15 	stw	r4,52(r18)
            file_record->in_use = true;
            file_record->modified = true;
  8126b8:	90800e15 	stw	r2,56(r18)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
                         
            file_record->attributes = 0;
  8126bc:	900002c5 	stb	zero,11(r18)
            file_record->create_time = 0;
  8126c0:	9000030d 	sth	zero,12(r18)
            file_record->create_date = 0;
  8126c4:	9000038d 	sth	zero,14(r18)
            file_record->last_access_date = 0;
  8126c8:	9000040d 	sth	zero,16(r18)
            file_record->last_modified_time = 0;
  8126cc:	9000048d 	sth	zero,18(r18)
            file_record->last_modified_date = 0;
  8126d0:	9000050d 	sth	zero,20(r18)
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
  8126d4:	90000615 	stw	zero,24(r18)
            file_record->current_cluster_index = cluster_number;
  8126d8:	95000715 	stw	r20,28(r18)
            file_record->current_sector_in_cluster = 0;
  8126dc:	90000815 	stw	zero,32(r18)
            file_record->current_byte_position = 0;
  8126e0:	90000915 	stw	zero,36(r18)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  8126e4:	91400a15 	stw	r5,40(r18)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  8126e8:	91800b15 	stw	r6,44(r18)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
  8126ec:	90800f15 	stw	r2,60(r18)
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  8126f0:	2800591e 	bne	r5,zero,812858 <create_file+0x54c>
  8126f4:	a8801317 	ldw	r2,76(r21)
  8126f8:	1189883a 	add	r4,r2,r6
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  8126fc:	d1675f17 	ldw	r5,-25220(gp)
  812700:	080edd80 	call	80edd8 <Read_Sector_Data>
  812704:	103f4a26 	beq	r2,zero,812430 <create_file+0x124>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  812708:	91000c0f 	ldh	r4,48(r18)
  81270c:	900b883a 	mov	r5,r18
  812710:	080e9280 	call	80e928 <Write_File_Record_At_Offset>
  812714:	103f4626 	beq	r2,zero,812430 <create_file+0x124>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  812718:	d0a76217 	ldw	r2,-25208(gp)
  81271c:	1000b81e 	bne	r2,zero,812a00 <create_file+0x6f4>


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812720:	a8801117 	ldw	r2,68(r21)
  812724:	d0e75f17 	ldw	r3,-25220(gp)
  812728:	a020d23a 	srli	r16,r20,8
  81272c:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812730:	d0a76317 	ldw	r2,-25204(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812734:	80c9883a 	add	r4,r16,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812738:	11000326 	beq	r2,r4,812748 <create_file+0x43c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  81273c:	000b883a 	mov	r5,zero
  812740:	080edd80 	call	80edd8 <Read_Sector_Data>
  812744:	10000926 	beq	r2,zero,81276c <create_file+0x460>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812748:	d0e76117 	ldw	r3,-25212(gp)
  81274c:	a0803fcc 	andi	r2,r20,255
  812750:	1085883a 	add	r2,r2,r2
  812754:	19000a17 	ldw	r4,40(r3)
  812758:	00ffffc4 	movi	r3,-1
  81275c:	1105883a 	add	r2,r2,r4
  812760:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  812764:	01000044 	movi	r4,1
  812768:	d1276215 	stw	r4,-25208(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  81276c:	a8801217 	ldw	r2,72(r21)
  812770:	d0e75f17 	ldw	r3,-25220(gp)
  812774:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812778:	d0a76317 	ldw	r2,-25204(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  81277c:	80c9883a 	add	r4,r16,r3
    }
     
    if (sector_index != current_sector_index)
  812780:	11000326 	beq	r2,r4,812790 <create_file+0x484>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812784:	000b883a 	mov	r5,zero
  812788:	080edd80 	call	80edd8 <Read_Sector_Data>
  81278c:	103f2826 	beq	r2,zero,812430 <create_file+0x124>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812790:	d0e76117 	ldw	r3,-25212(gp)
  812794:	a0803fcc 	andi	r2,r20,255
  812798:	1085883a 	add	r2,r2,r2
  81279c:	19000a17 	ldw	r4,40(r3)
  8127a0:	00ffffc4 	movi	r3,-1
  8127a4:	1105883a 	add	r2,r2,r4
  8127a8:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  8127ac:	01000044 	movi	r4,1
  8127b0:	2005883a 	mov	r2,r4
  8127b4:	d1276215 	stw	r4,-25208(gp)
  8127b8:	003f1e06 	br	812434 <create_file+0x128>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
  8127bc:	2a45883a 	add	r2,r5,r9
  8127c0:	102c943a 	slli	r22,r2,16
  8127c4:	003f3106 	br	81248c <create_file+0x180>
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  8127c8:	0100910e 	bge	zero,r4,812a10 <create_file+0x704>
  8127cc:	0023883a 	mov	r17,zero
            {
                last_dir_separator = last_dir_separator+location+1;
  8127d0:	88800044 	addi	r2,r17,1
  8127d4:	1123883a 	add	r17,r2,r4
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  8127d8:	9c61883a 	add	r16,r19,r17

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8127dc:	8009883a 	mov	r4,r16
  8127e0:	080400c0 	call	80400c <strlen>
    
    for(index = 0; index < length; index++)
  8127e4:	0080180e 	bge	zero,r2,812848 <create_file+0x53c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8127e8:	80c00007 	ldb	r3,0(r16)
  8127ec:	01401704 	movi	r5,92
  8127f0:	19400c26 	beq	r3,r5,812824 <create_file+0x518>
  8127f4:	01000bc4 	movi	r4,47
  8127f8:	19000a26 	beq	r3,r4,812824 <create_file+0x518>
  8127fc:	280d883a 	mov	r6,r5
  812800:	200b883a 	mov	r5,r4
  812804:	0009883a 	mov	r4,zero
  812808:	00000306 	br	812818 <create_file+0x50c>
  81280c:	18c00007 	ldb	r3,0(r3)
  812810:	19800f26 	beq	r3,r6,812850 <create_file+0x544>
  812814:	19400e26 	beq	r3,r5,812850 <create_file+0x544>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812818:	21000044 	addi	r4,r4,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  81281c:	8107883a 	add	r3,r16,r4
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812820:	113ffa1e 	bne	r2,r4,81280c <create_file+0x500>
  812824:	81c00003 	ldbu	r7,0(r16)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812828:	00800b84 	movi	r2,46
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  81282c:	8027883a 	mov	r19,r16
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812830:	38c03fcc 	andi	r3,r7,255
  812834:	18c0201c 	xori	r3,r3,128
  812838:	18ffe004 	addi	r3,r3,-128
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  81283c:	92000204 	addi	r8,r18,8
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812840:	18bf2e1e 	bne	r3,r2,8124fc <create_file+0x1f0>
  812844:	00003006 	br	812908 <create_file+0x5fc>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812848:	0009883a 	mov	r4,zero
        {
            break;
        }
    }
    
    if (index == length)
  81284c:	103ff526 	beq	r2,zero,812824 <create_file+0x518>
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  812850:	013fdf16 	blt	zero,r4,8127d0 <create_file+0x4c4>
  812854:	003ff306 	br	812824 <create_file+0x518>
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  812858:	a9000383 	ldbu	r4,14(r21)
  81285c:	28ffff84 	addi	r3,r5,-2
  812860:	a8801417 	ldw	r2,80(r21)
  812864:	1907383a 	mul	r3,r3,r4
  812868:	1185883a 	add	r2,r2,r6
  81286c:	1889883a 	add	r4,r3,r2
  812870:	003fa206 	br	8126fc <create_file+0x3f0>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
  812874:	39c00044 	addi	r7,r7,1
  812878:	99c9883a 	add	r4,r19,r7
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  81287c:	40800045 	stb	r2,1(r8)
  812880:	003f7e06 	br	81267c <create_file+0x370>
            local++;
  812884:	39c00044 	addi	r7,r7,1
  812888:	99c9883a 	add	r4,r19,r7
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  81288c:	40800005 	stb	r2,0(r8)
  812890:	003f7606 	br	81266c <create_file+0x360>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812894:	99400003 	ldbu	r5,0(r19)
  812898:	980d883a 	mov	r6,r19
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  81289c:	000f883a 	mov	r7,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
  8128a0:	91400045 	stb	r5,1(r18)
            if (filename[local] != 0) local++;
  8128a4:	30800007 	ldb	r2,0(r6)
  8128a8:	103f231e 	bne	r2,zero,812538 <create_file+0x22c>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128ac:	99c9883a 	add	r4,r19,r7
  8128b0:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  8128b4:	91400085 	stb	r5,2(r18)
            if (filename[local] != 0) local++;
  8128b8:	20800007 	ldb	r2,0(r4)
  8128bc:	103f291e 	bne	r2,zero,812564 <create_file+0x258>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128c0:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  8128c4:	914000c5 	stb	r5,3(r18)
            if (filename[local] != 0) local++;
  8128c8:	20800007 	ldb	r2,0(r4)
  8128cc:	103f301e 	bne	r2,zero,812590 <create_file+0x284>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128d0:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  8128d4:	91400105 	stb	r5,4(r18)
            if (filename[local] != 0) local++;
  8128d8:	20800007 	ldb	r2,0(r4)
  8128dc:	103f371e 	bne	r2,zero,8125bc <create_file+0x2b0>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128e0:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  8128e4:	91400145 	stb	r5,5(r18)
            if (filename[local] != 0) local++;
  8128e8:	20800007 	ldb	r2,0(r4)
  8128ec:	103f3e1e 	bne	r2,zero,8125e8 <create_file+0x2dc>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128f0:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  8128f4:	91400185 	stb	r5,6(r18)
            if (filename[local] != 0) local++;
  8128f8:	20800007 	ldb	r2,0(r4)
  8128fc:	103f451e 	bne	r2,zero,812614 <create_file+0x308>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812900:	21400003 	ldbu	r5,0(r4)
  812904:	003f4b06 	br	812634 <create_file+0x328>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812908:	00800804 	movi	r2,32
  81290c:	000f883a 	mov	r7,zero
  812910:	90800005 	stb	r2,0(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812914:	99c9883a 	add	r4,r19,r7
  812918:	21400003 	ldbu	r5,0(r4)
  81291c:	00800b84 	movi	r2,46
  812920:	200d883a 	mov	r6,r4
  812924:	28c03fcc 	andi	r3,r5,255
  812928:	18c0201c 	xori	r3,r3,128
  81292c:	18ffe004 	addi	r3,r3,-128
  812930:	18befe1e 	bne	r3,r2,81252c <create_file+0x220>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812934:	00800804 	movi	r2,32
  812938:	90800045 	stb	r2,1(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81293c:	21400003 	ldbu	r5,0(r4)
  812940:	00800b84 	movi	r2,46
  812944:	28c03fcc 	andi	r3,r5,255
  812948:	18c0201c 	xori	r3,r3,128
  81294c:	18ffe004 	addi	r3,r3,-128
  812950:	18bf011e 	bne	r3,r2,812558 <create_file+0x24c>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812954:	00800804 	movi	r2,32
  812958:	90800085 	stb	r2,2(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81295c:	21400003 	ldbu	r5,0(r4)
  812960:	00800b84 	movi	r2,46
  812964:	28c03fcc 	andi	r3,r5,255
  812968:	18c0201c 	xori	r3,r3,128
  81296c:	18ffe004 	addi	r3,r3,-128
  812970:	18bf041e 	bne	r3,r2,812584 <create_file+0x278>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812974:	00800804 	movi	r2,32
  812978:	908000c5 	stb	r2,3(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81297c:	21400003 	ldbu	r5,0(r4)
  812980:	00800b84 	movi	r2,46
  812984:	28c03fcc 	andi	r3,r5,255
  812988:	18c0201c 	xori	r3,r3,128
  81298c:	18ffe004 	addi	r3,r3,-128
  812990:	18bf071e 	bne	r3,r2,8125b0 <create_file+0x2a4>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812994:	00800804 	movi	r2,32
  812998:	90800105 	stb	r2,4(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81299c:	21400003 	ldbu	r5,0(r4)
  8129a0:	00800b84 	movi	r2,46
  8129a4:	28c03fcc 	andi	r3,r5,255
  8129a8:	18c0201c 	xori	r3,r3,128
  8129ac:	18ffe004 	addi	r3,r3,-128
  8129b0:	18bf0a1e 	bne	r3,r2,8125dc <create_file+0x2d0>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  8129b4:	00800804 	movi	r2,32
  8129b8:	90800145 	stb	r2,5(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8129bc:	21400003 	ldbu	r5,0(r4)
  8129c0:	00800b84 	movi	r2,46
  8129c4:	28c03fcc 	andi	r3,r5,255
  8129c8:	18c0201c 	xori	r3,r3,128
  8129cc:	18ffe004 	addi	r3,r3,-128
  8129d0:	18bf0d1e 	bne	r3,r2,812608 <create_file+0x2fc>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  8129d4:	00800804 	movi	r2,32
  8129d8:	90800185 	stb	r2,6(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8129dc:	21400003 	ldbu	r5,0(r4)
  8129e0:	00800b84 	movi	r2,46
  8129e4:	28c03fcc 	andi	r3,r5,255
  8129e8:	18c0201c 	xori	r3,r3,128
  8129ec:	18ffe004 	addi	r3,r3,-128
  8129f0:	18bf101e 	bne	r3,r2,812634 <create_file+0x328>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  8129f4:	00800804 	movi	r2,32
  8129f8:	908001c5 	stb	r2,7(r18)
  8129fc:	003f1206 	br	812648 <create_file+0x33c>
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812a00:	d1276317 	ldw	r4,-25204(gp)
  812a04:	000b883a 	mov	r5,zero
  812a08:	080ed2c0 	call	80ed2c <Write_Sector_Data>
  812a0c:	003f4406 	br	812720 <create_file+0x414>
  812a10:	99c00003 	ldbu	r7,0(r19)
  812a14:	003eb306 	br	8124e4 <create_file+0x1d8>

00812a18 <alt_up_sd_card_fopen>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  812a18:	d0a76117 	ldw	r2,-25212(gp)
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  812a1c:	deffe804 	addi	sp,sp,-96
  812a20:	dc401215 	stw	r17,72(sp)
  812a24:	dc001115 	stw	r16,68(sp)
  812a28:	dfc01715 	stw	ra,92(sp)
  812a2c:	dd401615 	stw	r21,88(sp)
  812a30:	dd001515 	stw	r20,84(sp)
  812a34:	dcc01415 	stw	r19,80(sp)
  812a38:	dc801315 	stw	r18,76(sp)
  812a3c:	2823883a 	mov	r17,r5
  812a40:	2021883a 	mov	r16,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  812a44:	10001126 	beq	r2,zero,812a8c <alt_up_sd_card_fopen+0x74>
  812a48:	d0e75917 	ldw	r3,-25244(gp)
  812a4c:	1880002b 	ldhuio	r2,0(r3)
  812a50:	1080008c 	andi	r2,r2,2
  812a54:	10000d26 	beq	r2,zero,812a8c <alt_up_sd_card_fopen+0x74>
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  812a58:	d0a75817 	ldw	r2,-25248(gp)
  812a5c:	10001b1e 	bne	r2,zero,812acc <alt_up_sd_card_fopen+0xb4>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
                    {
                        active_files[file_record_index].in_use = true;
    					active_files[file_record_index].modified = true;
  812a60:	013fffc4 	movi	r4,-1
    		}
        }
	}

	return file_record_index;
}
  812a64:	2005883a 	mov	r2,r4
  812a68:	dfc01717 	ldw	ra,92(sp)
  812a6c:	dd401617 	ldw	r21,88(sp)
  812a70:	dd001517 	ldw	r20,84(sp)
  812a74:	dcc01417 	ldw	r19,80(sp)
  812a78:	dc801317 	ldw	r18,76(sp)
  812a7c:	dc401217 	ldw	r17,72(sp)
  812a80:	dc001117 	ldw	r16,68(sp)
  812a84:	dec01804 	addi	sp,sp,96
  812a88:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  812a8c:	d0e75717 	ldw	r3,-25252(gp)
  812a90:	00800044 	movi	r2,1
  812a94:	18bff21e 	bne	r3,r2,812a60 <alt_up_sd_card_fopen+0x48>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  812a98:	00802074 	movhi	r2,129
  812a9c:	109e1304 	addi	r2,r2,30796
		is_sd_card_formated_as_FAT16 = false;
  812aa0:	00c02074 	movhi	r3,129
  812aa4:	18de3c04 	addi	r3,r3,30960
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  812aa8:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  812aac:	d0275715 	stw	zero,-25252(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  812ab0:	d0275815 	stw	zero,-25248(gp)
  812ab4:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  812ab8:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  812abc:	183fff15 	stw	zero,-4(r3)
  812ac0:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  812ac4:	18bffc1e 	bne	r3,r2,812ab8 <alt_up_sd_card_fopen+0xa0>
  812ac8:	003fe506 	br	812a60 <alt_up_sd_card_fopen+0x48>
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
        unsigned int home_directory_cluster = 0;
  812acc:	d8000015 	stw	zero,0(sp)

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
  812ad0:	080400c0 	call	80400c <strlen>
  812ad4:	100f883a 	mov	r7,r2
    
    for (index = 0; index < length; index++)
  812ad8:	0080650e 	bge	zero,r2,812c70 <alt_up_sd_card_fopen+0x258>
  812adc:	8009883a 	mov	r4,r16
  812ae0:	000b883a 	mov	r5,zero
  812ae4:	01800644 	movi	r6,25
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812ae8:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  812aec:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812af0:	18bfe7c4 	addi	r2,r3,-97
  812af4:	10803fcc 	andi	r2,r2,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  812af8:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812afc:	30800136 	bltu	r6,r2,812b04 <alt_up_sd_card_fopen+0xec>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  812b00:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  812b04:	21000044 	addi	r4,r4,1
  812b08:	397ff71e 	bne	r7,r5,812ae8 <alt_up_sd_card_fopen+0xd0>


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
    int length = strlen(file_name);
  812b0c:	8009883a 	mov	r4,r16
  812b10:	080400c0 	call	80400c <strlen>
  812b14:	100f883a 	mov	r7,r2
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812b18:	0080550e 	bge	zero,r2,812c70 <alt_up_sd_card_fopen+0x258>
    {
        if ((file_name[index] == ' ') ||
  812b1c:	80c00007 	ldb	r3,0(r16)
  812b20:	00800804 	movi	r2,32
  812b24:	18801826 	beq	r3,r2,812b88 <alt_up_sd_card_fopen+0x170>
  812b28:	017fffc4 	movi	r5,-1
  812b2c:	1017883a 	mov	r11,r2
  812b30:	0009883a 	mov	r4,zero
  812b34:	280d883a 	mov	r6,r5
  812b38:	02001704 	movi	r8,92
  812b3c:	02400bc4 	movi	r9,47
  812b40:	02800244 	movi	r10,9
  812b44:	03400b84 	movi	r13,46
  812b48:	030000c4 	movi	r12,3
  812b4c:	20bfffc4 	addi	r2,r4,-1
  812b50:	11804426 	beq	r2,r6,812c64 <alt_up_sd_card_fopen+0x24c>
  812b54:	2145c83a 	sub	r2,r4,r5
  812b58:	12803c26 	beq	r2,r10,812c4c <alt_up_sd_card_fopen+0x234>
  812b5c:	29803d26 	beq	r5,r6,812c54 <alt_up_sd_card_fopen+0x23c>
  812b60:	60803c0e 	bge	r12,r2,812c54 <alt_up_sd_card_fopen+0x23c>
  812b64:	1a000126 	beq	r3,r8,812b6c <alt_up_sd_card_fopen+0x154>
  812b68:	1a40071e 	bne	r3,r9,812b88 <alt_up_sd_card_fopen+0x170>
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  812b6c:	200d883a 	mov	r6,r4
  812b70:	200b883a 	mov	r5,r4
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812b74:	21000044 	addi	r4,r4,1
  812b78:	39003d26 	beq	r7,r4,812c70 <alt_up_sd_card_fopen+0x258>
    {
        if ((file_name[index] == ' ') ||
  812b7c:	2405883a 	add	r2,r4,r16
  812b80:	10c00007 	ldb	r3,0(r2)
  812b84:	1afff11e 	bne	r3,r11,812b4c <alt_up_sd_card_fopen+0x134>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812b88:	000b883a 	mov	r5,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  812b8c:	81c5883a 	add	r2,r16,r7
  812b90:	113fffc7 	ldb	r4,-1(r2)
  812b94:	00c01704 	movi	r3,92
  812b98:	20ffb126 	beq	r4,r3,812a60 <alt_up_sd_card_fopen+0x48>
  812b9c:	00800bc4 	movi	r2,47
  812ba0:	20bfaf26 	beq	r4,r2,812a60 <alt_up_sd_card_fopen+0x48>
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
        if (check_file_name_for_FAT16_compliance(name))
  812ba4:	2805003a 	cmpeq	r2,r5,zero
  812ba8:	103fad1e 	bne	r2,zero,812a60 <alt_up_sd_card_fopen+0x48>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  812bac:	dd400104 	addi	r21,sp,4
  812bb0:	8009883a 	mov	r4,r16
  812bb4:	d80b883a 	mov	r5,sp
  812bb8:	a80d883a 	mov	r6,r21
  812bbc:	0810c580 	call	810c58 <get_home_directory_cluster_for_file>
  812bc0:	103fa726 	beq	r2,zero,812a60 <alt_up_sd_card_fopen+0x48>
  812bc4:	0007883a 	mov	r3,zero
  812bc8:	01002074 	movhi	r4,129
  812bcc:	211e3c04 	addi	r4,r4,30960
  812bd0:	01400504 	movi	r5,20
  812bd4:	00000206 	br	812be0 <alt_up_sd_card_fopen+0x1c8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  812bd8:	18c00044 	addi	r3,r3,1
  812bdc:	197fa026 	beq	r3,r5,812a60 <alt_up_sd_card_fopen+0x48>
    		{
    			if (active_files[index].in_use == false)
  812be0:	20800017 	ldw	r2,0(r4)
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  812be4:	21001004 	addi	r4,r4,64
    		{
    			if (active_files[index].in_use == false)
  812be8:	103ffb1e 	bne	r2,zero,812bd8 <alt_up_sd_card_fopen+0x1c0>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  812bec:	1cffffcc 	andi	r19,r3,65535
  812bf0:	9ce0001c 	xori	r19,r19,32768
  812bf4:	9ce00004 	addi	r19,r19,-32768
  812bf8:	98003416 	blt	r19,zero,812ccc <alt_up_sd_card_fopen+0x2b4>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  812bfc:	980491ba 	slli	r2,r19,6
  812c00:	05002074 	movhi	r20,129
  812c04:	a51e2d04 	addi	r20,r20,30900
  812c08:	d9000017 	ldw	r4,0(sp)
  812c0c:	1525883a 	add	r18,r2,r20
  812c10:	800b883a 	mov	r5,r16
  812c14:	900d883a 	mov	r6,r18
  812c18:	080ff940 	call	80ff94 <find_file_in_directory>
  812c1c:	1000161e 	bne	r2,zero,812c78 <alt_up_sd_card_fopen+0x260>
							}
						}
					}

                }
                else if (create)
  812c20:	883f8f26 	beq	r17,zero,812a60 <alt_up_sd_card_fopen+0x48>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  812c24:	8009883a 	mov	r4,r16
  812c28:	a80d883a 	mov	r6,r21
  812c2c:	900b883a 	mov	r5,r18
  812c30:	081230c0 	call	81230c <create_file>
  812c34:	103f8a26 	beq	r2,zero,812a60 <alt_up_sd_card_fopen+0x48>
                    {
                        active_files[file_record_index].in_use = true;
  812c38:	00800044 	movi	r2,1
  812c3c:	9809883a 	mov	r4,r19
    					active_files[file_record_index].modified = true;
  812c40:	90800e15 	stw	r2,56(r18)
                else if (create)
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
                    {
                        active_files[file_record_index].in_use = true;
  812c44:	90800f15 	stw	r2,60(r18)
  812c48:	003f8606 	br	812a64 <alt_up_sd_card_fopen+0x4c>
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  812c4c:	1b7fce1e 	bne	r3,r13,812b88 <alt_up_sd_card_fopen+0x170>
  812c50:	29bfc31e 	bne	r5,r6,812b60 <alt_up_sd_card_fopen+0x148>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  812c54:	1a3fc526 	beq	r3,r8,812b6c <alt_up_sd_card_fopen+0x154>
  812c58:	1a7fc426 	beq	r3,r9,812b6c <alt_up_sd_card_fopen+0x154>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  812c5c:	1b7fc426 	beq	r3,r13,812b70 <alt_up_sd_card_fopen+0x158>
  812c60:	003fc406 	br	812b74 <alt_up_sd_card_fopen+0x15c>
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  812c64:	1a3fc826 	beq	r3,r8,812b88 <alt_up_sd_card_fopen+0x170>
  812c68:	1a7fba1e 	bne	r3,r9,812b54 <alt_up_sd_card_fopen+0x13c>
  812c6c:	003fc606 	br	812b88 <alt_up_sd_card_fopen+0x170>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812c70:	01400044 	movi	r5,1
  812c74:	003fc506 	br	812b8c <alt_up_sd_card_fopen+0x174>
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
                {
                    if (create)
  812c78:	883f791e 	bne	r17,zero,812a60 <alt_up_sd_card_fopen+0x48>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  812c7c:	9080058b 	ldhu	r2,22(r18)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
  812c80:	00c00044 	movi	r3,1
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
                    active_files[file_record_index].current_sector_in_cluster = 0;
  812c84:	90000815 	stw	zero,32(r18)
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  812c88:	90800715 	stw	r2,28(r18)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
  812c8c:	90000915 	stw	zero,36(r18)
                    active_files[file_record_index].in_use = true;
  812c90:	90c00f15 	stw	r3,60(r18)
    				active_files[file_record_index].modified = false;
  812c94:	90000e15 	stw	zero,56(r18)
  812c98:	a1800f04 	addi	r6,r20,60
  812c9c:	1811883a 	mov	r8,r3
  812ca0:	900b883a 	mov	r5,r18
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  812ca4:	9809883a 	mov	r4,r19
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;
  812ca8:	000f883a 	mov	r7,zero
  812cac:	02400504 	movi	r9,20

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  812cb0:	3cc00226 	beq	r7,r19,812cbc <alt_up_sd_card_fopen+0x2a4>
  812cb4:	30800017 	ldw	r2,0(r6)
  812cb8:	12000626 	beq	r2,r8,812cd4 <alt_up_sd_card_fopen+0x2bc>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  812cbc:	39c00044 	addi	r7,r7,1
  812cc0:	31801004 	addi	r6,r6,64
  812cc4:	3a7ffa1e 	bne	r7,r9,812cb0 <alt_up_sd_card_fopen+0x298>
  812cc8:	003f6606 	br	812a64 <alt_up_sd_card_fopen+0x4c>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  812ccc:	9809883a 	mov	r4,r19
  812cd0:	003f6406 	br	812a64 <alt_up_sd_card_fopen+0x4c>
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  812cd4:	30fffb17 	ldw	r3,-20(r6)
  812cd8:	28800a17 	ldw	r2,40(r5)
  812cdc:	10fff71e 	bne	r2,r3,812cbc <alt_up_sd_card_fopen+0x2a4>
  812ce0:	30fffc17 	ldw	r3,-16(r6)
  812ce4:	28800b17 	ldw	r2,44(r5)
  812ce8:	10fff41e 	bne	r2,r3,812cbc <alt_up_sd_card_fopen+0x2a4>
  812cec:	30fffd0f 	ldh	r3,-12(r6)
  812cf0:	28800c0f 	ldh	r2,48(r5)
  812cf4:	10fff11e 	bne	r2,r3,812cbc <alt_up_sd_card_fopen+0x2a4>
  812cf8:	013fff84 	movi	r4,-2
  812cfc:	003f5906 	br	812a64 <alt_up_sd_card_fopen+0x4c>

00812d00 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  812d00:	00802074 	movhi	r2,129
  812d04:	109dc704 	addi	r2,r2,30492
  812d08:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812d0c:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  812d10:	00bfde84 	movi	r2,-134
  812d14:	1800011e 	bne	r3,zero,812d1c <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  812d18:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  812d1c:	00bffa84 	movi	r2,-22
  812d20:	203ffd26 	beq	r4,zero,812d18 <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  812d24:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  812d28:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d2c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d30:	00bfff84 	movi	r2,-2
  812d34:	3084703a 	and	r2,r6,r2
  812d38:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812d3c:	00c02074 	movhi	r3,129
  812d40:	18ddc804 	addi	r3,r3,30496
  812d44:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  812d48:	20800044 	addi	r2,r4,1
  812d4c:	2885883a 	add	r2,r5,r2
  812d50:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812d54:	11000d2e 	bgeu	r2,r4,812d8c <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  812d58:	00800044 	movi	r2,1
  812d5c:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812d60:	00802074 	movhi	r2,129
  812d64:	10967104 	addi	r2,r2,22980
  entry->next     = list->next;
  812d68:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812d6c:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  812d70:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  812d74:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  812d78:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  812d7c:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d80:	3001703a 	wrctl	status,r6
  812d84:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  812d88:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  812d8c:	40000405 	stb	zero,16(r8)
  812d90:	003ff306 	br	812d60 <alt_alarm_start+0x60>

00812d94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812d94:	0005883a 	mov	r2,zero
  812d98:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812d9c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812da0:	10800804 	addi	r2,r2,32
  812da4:	10fffd1e 	bne	r2,r3,812d9c <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812da8:	f800283a 	ret

00812dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812dac:	defff904 	addi	sp,sp,-28
  812db0:	dfc00615 	stw	ra,24(sp)
  812db4:	df000515 	stw	fp,20(sp)
  812db8:	df000504 	addi	fp,sp,20
  812dbc:	e13ffd15 	stw	r4,-12(fp)
  812dc0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812dc4:	e0bffd17 	ldw	r2,-12(fp)
  812dc8:	1005003a 	cmpeq	r2,r2,zero
  812dcc:	1000041e 	bne	r2,zero,812de0 <alt_dev_llist_insert+0x34>
  812dd0:	e0bffd17 	ldw	r2,-12(fp)
  812dd4:	10800217 	ldw	r2,8(r2)
  812dd8:	1004c03a 	cmpne	r2,r2,zero
  812ddc:	1000071e 	bne	r2,zero,812dfc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  812de0:	0812e600 	call	812e60 <alt_get_errno>
  812de4:	1007883a 	mov	r3,r2
  812de8:	00800584 	movi	r2,22
  812dec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812df0:	00bffa84 	movi	r2,-22
  812df4:	e0bfff15 	stw	r2,-4(fp)
  812df8:	00001306 	br	812e48 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812dfc:	e0fffd17 	ldw	r3,-12(fp)
  812e00:	e0bffe17 	ldw	r2,-8(fp)
  812e04:	e0bffb15 	stw	r2,-20(fp)
  812e08:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812e0c:	e0fffc17 	ldw	r3,-16(fp)
  812e10:	e0bffb17 	ldw	r2,-20(fp)
  812e14:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812e18:	e0bffb17 	ldw	r2,-20(fp)
  812e1c:	10c00017 	ldw	r3,0(r2)
  812e20:	e0bffc17 	ldw	r2,-16(fp)
  812e24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812e28:	e0bffb17 	ldw	r2,-20(fp)
  812e2c:	10c00017 	ldw	r3,0(r2)
  812e30:	e0bffc17 	ldw	r2,-16(fp)
  812e34:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  812e38:	e0fffb17 	ldw	r3,-20(fp)
  812e3c:	e0bffc17 	ldw	r2,-16(fp)
  812e40:	18800015 	stw	r2,0(r3)

  return 0;  
  812e44:	e03fff15 	stw	zero,-4(fp)
  812e48:	e0bfff17 	ldw	r2,-4(fp)
}
  812e4c:	e037883a 	mov	sp,fp
  812e50:	dfc00117 	ldw	ra,4(sp)
  812e54:	df000017 	ldw	fp,0(sp)
  812e58:	dec00204 	addi	sp,sp,8
  812e5c:	f800283a 	ret

00812e60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812e60:	defffd04 	addi	sp,sp,-12
  812e64:	dfc00215 	stw	ra,8(sp)
  812e68:	df000115 	stw	fp,4(sp)
  812e6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812e70:	00802074 	movhi	r2,129
  812e74:	10966e04 	addi	r2,r2,22968
  812e78:	10800017 	ldw	r2,0(r2)
  812e7c:	1005003a 	cmpeq	r2,r2,zero
  812e80:	1000061e 	bne	r2,zero,812e9c <alt_get_errno+0x3c>
  812e84:	00802074 	movhi	r2,129
  812e88:	10966e04 	addi	r2,r2,22968
  812e8c:	10800017 	ldw	r2,0(r2)
  812e90:	103ee83a 	callr	r2
  812e94:	e0bfff15 	stw	r2,-4(fp)
  812e98:	00000306 	br	812ea8 <alt_get_errno+0x48>
  812e9c:	00802074 	movhi	r2,129
  812ea0:	109db204 	addi	r2,r2,30408
  812ea4:	e0bfff15 	stw	r2,-4(fp)
  812ea8:	e0bfff17 	ldw	r2,-4(fp)
}
  812eac:	e037883a 	mov	sp,fp
  812eb0:	dfc00117 	ldw	ra,4(sp)
  812eb4:	df000017 	ldw	fp,0(sp)
  812eb8:	dec00204 	addi	sp,sp,8
  812ebc:	f800283a 	ret

00812ec0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812ec0:	defffd04 	addi	sp,sp,-12
  812ec4:	dfc00215 	stw	ra,8(sp)
  812ec8:	df000115 	stw	fp,4(sp)
  812ecc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812ed0:	00bfff04 	movi	r2,-4
  812ed4:	00c02074 	movhi	r3,129
  812ed8:	18cdd104 	addi	r3,r3,14148
  812edc:	1885883a 	add	r2,r3,r2
  812ee0:	e0bfff15 	stw	r2,-4(fp)
  812ee4:	00000606 	br	812f00 <_do_ctors+0x40>
        (*ctor) (); 
  812ee8:	e0bfff17 	ldw	r2,-4(fp)
  812eec:	10800017 	ldw	r2,0(r2)
  812ef0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812ef4:	e0bfff17 	ldw	r2,-4(fp)
  812ef8:	10bfff04 	addi	r2,r2,-4
  812efc:	e0bfff15 	stw	r2,-4(fp)
  812f00:	e0ffff17 	ldw	r3,-4(fp)
  812f04:	00802074 	movhi	r2,129
  812f08:	108dd004 	addi	r2,r2,14144
  812f0c:	18bff62e 	bgeu	r3,r2,812ee8 <_do_ctors+0x28>
        (*ctor) (); 
}
  812f10:	e037883a 	mov	sp,fp
  812f14:	dfc00117 	ldw	ra,4(sp)
  812f18:	df000017 	ldw	fp,0(sp)
  812f1c:	dec00204 	addi	sp,sp,8
  812f20:	f800283a 	ret

00812f24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812f24:	defffd04 	addi	sp,sp,-12
  812f28:	dfc00215 	stw	ra,8(sp)
  812f2c:	df000115 	stw	fp,4(sp)
  812f30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812f34:	00bfff04 	movi	r2,-4
  812f38:	00c02074 	movhi	r3,129
  812f3c:	18cdd104 	addi	r3,r3,14148
  812f40:	1885883a 	add	r2,r3,r2
  812f44:	e0bfff15 	stw	r2,-4(fp)
  812f48:	00000606 	br	812f64 <_do_dtors+0x40>
        (*dtor) (); 
  812f4c:	e0bfff17 	ldw	r2,-4(fp)
  812f50:	10800017 	ldw	r2,0(r2)
  812f54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812f58:	e0bfff17 	ldw	r2,-4(fp)
  812f5c:	10bfff04 	addi	r2,r2,-4
  812f60:	e0bfff15 	stw	r2,-4(fp)
  812f64:	e0ffff17 	ldw	r3,-4(fp)
  812f68:	00802074 	movhi	r2,129
  812f6c:	108dd104 	addi	r2,r2,14148
  812f70:	18bff62e 	bgeu	r3,r2,812f4c <_do_dtors+0x28>
        (*dtor) (); 
}
  812f74:	e037883a 	mov	sp,fp
  812f78:	dfc00117 	ldw	ra,4(sp)
  812f7c:	df000017 	ldw	fp,0(sp)
  812f80:	dec00204 	addi	sp,sp,8
  812f84:	f800283a 	ret

00812f88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812f88:	defffb04 	addi	sp,sp,-20
  812f8c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  812f90:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812f94:	dcc00315 	stw	r19,12(sp)
  812f98:	dc400115 	stw	r17,4(sp)
  812f9c:	dfc00415 	stw	ra,16(sp)
  812fa0:	2823883a 	mov	r17,r5
  812fa4:	dc800215 	stw	r18,8(sp)
  812fa8:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  812fac:	080400c0 	call	80400c <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812fb0:	84401126 	beq	r16,r17,812ff8 <alt_find_dev+0x70>
  812fb4:	14800044 	addi	r18,r2,1
  812fb8:	00000206 	br	812fc4 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  812fbc:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812fc0:	84400d26 	beq	r16,r17,812ff8 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812fc4:	81000217 	ldw	r4,8(r16)
  812fc8:	980b883a 	mov	r5,r19
  812fcc:	900d883a 	mov	r6,r18
  812fd0:	081352c0 	call	81352c <memcmp>
  812fd4:	103ff91e 	bne	r2,zero,812fbc <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  812fd8:	8005883a 	mov	r2,r16
  812fdc:	dfc00417 	ldw	ra,16(sp)
  812fe0:	dcc00317 	ldw	r19,12(sp)
  812fe4:	dc800217 	ldw	r18,8(sp)
  812fe8:	dc400117 	ldw	r17,4(sp)
  812fec:	dc000017 	ldw	r16,0(sp)
  812ff0:	dec00504 	addi	sp,sp,20
  812ff4:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812ff8:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  812ffc:	8005883a 	mov	r2,r16
  813000:	dfc00417 	ldw	ra,16(sp)
  813004:	dcc00317 	ldw	r19,12(sp)
  813008:	dc800217 	ldw	r18,8(sp)
  81300c:	dc400117 	ldw	r17,4(sp)
  813010:	dc000017 	ldw	r16,0(sp)
  813014:	dec00504 	addi	sp,sp,20
  813018:	f800283a 	ret

0081301c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81301c:	0009883a 	mov	r4,zero
  813020:	01440004 	movi	r5,4096
  813024:	08134e01 	jmpi	8134e0 <alt_icache_flush>

00813028 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813028:	defffd04 	addi	sp,sp,-12
  81302c:	dc400115 	stw	r17,4(sp)
  813030:	dc000015 	stw	r16,0(sp)
  813034:	3023883a 	mov	r17,r6
  813038:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  81303c:	01807fc4 	movi	r6,511
  813040:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813044:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  813048:	081312c0 	call	81312c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  81304c:	10c00324 	muli	r3,r2,12
  813050:	01802074 	movhi	r6,129
  813054:	3191cb04 	addi	r6,r6,18220
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  813058:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  81305c:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  813060:	10000716 	blt	r2,zero,813080 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813064:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813068:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  81306c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813070:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813074:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  813078:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  81307c:	080c9400 	call	80c940 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  813080:	8009883a 	mov	r4,r16
  813084:	000b883a 	mov	r5,zero
  813088:	01807fc4 	movi	r6,511
  81308c:	081312c0 	call	81312c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813090:	10c00324 	muli	r3,r2,12
  813094:	01802074 	movhi	r6,129
  813098:	3191cb04 	addi	r6,r6,18220
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  81309c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130a0:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8130a4:	10000716 	blt	r2,zero,8130c4 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8130a8:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130ac:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  8130b0:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8130b4:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130b8:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  8130bc:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8130c0:	080c9400 	call	80c940 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  8130c4:	8809883a 	mov	r4,r17
  8130c8:	01400044 	movi	r5,1
  8130cc:	01807fc4 	movi	r6,511
  8130d0:	081312c0 	call	81312c <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130d4:	10c00324 	muli	r3,r2,12
  8130d8:	01802074 	movhi	r6,129
  8130dc:	3191cb04 	addi	r6,r6,18220
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8130e0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130e4:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8130e8:	10000b16 	blt	r2,zero,813118 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8130ec:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130f0:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  8130f4:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8130f8:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8130fc:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  813100:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  813104:	dfc00217 	ldw	ra,8(sp)
  813108:	dc400117 	ldw	r17,4(sp)
  81310c:	dc000017 	ldw	r16,0(sp)
  813110:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  813114:	080c9401 	jmpi	80c940 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  813118:	dfc00217 	ldw	ra,8(sp)
  81311c:	dc400117 	ldw	r17,4(sp)
  813120:	dc000017 	ldw	r16,0(sp)
  813124:	dec00304 	addi	sp,sp,12
  813128:	f800283a 	ret

0081312c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81312c:	defff904 	addi	sp,sp,-28
  813130:	dcc00315 	stw	r19,12(sp)
  813134:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813138:	01402074 	movhi	r5,129
  81313c:	29566b04 	addi	r5,r5,22956
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813140:	dd400515 	stw	r21,20(sp)
  813144:	dd000415 	stw	r20,16(sp)
  813148:	dc400115 	stw	r17,4(sp)
  81314c:	dfc00615 	stw	ra,24(sp)
  813150:	dc800215 	stw	r18,8(sp)
  813154:	dc000015 	stw	r16,0(sp)
  813158:	302b883a 	mov	r21,r6
  81315c:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813160:	0812f880 	call	812f88 <alt_find_dev>
  813164:	1023883a 	mov	r17,r2
  813168:	10004726 	beq	r2,zero,813288 <open+0x15c>
  81316c:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  813170:	8809883a 	mov	r4,r17
  813174:	08134800 	call	813480 <alt_get_fd>
  813178:	1021883a 	mov	r16,r2
  81317c:	10002d16 	blt	r2,zero,813234 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  813180:	10800324 	muli	r2,r2,12
  813184:	01402074 	movhi	r5,129
  813188:	2951cb04 	addi	r5,r5,18220
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81318c:	00d00034 	movhi	r3,16384
  813190:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  813194:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813198:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81319c:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8131a0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8131a4:	1000121e 	bne	r2,zero,8131f0 <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8131a8:	00802074 	movhi	r2,129
  8131ac:	10966d04 	addi	r2,r2,22964
  8131b0:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8131b4:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8131b8:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8131bc:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8131c0:	20800215 	stw	r2,8(r4)
  8131c4:	00000206 	br	8131d0 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8131c8:	29400304 	addi	r5,r5,12
  8131cc:	38c00836 	bltu	r7,r3,8131f0 <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8131d0:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8131d4:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8131d8:	11bffb1e 	bne	r2,r6,8131c8 <open+0x9c>
  8131dc:	28800217 	ldw	r2,8(r5)
  8131e0:	103ff90e 	bge	r2,zero,8131c8 <open+0x9c>
  8131e4:	293ff826 	beq	r5,r4,8131c8 <open+0x9c>
  8131e8:	04400344 	movi	r17,13
  8131ec:	00001206 	br	813238 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8131f0:	88800317 	ldw	r2,12(r17)
  8131f4:	10000526 	beq	r2,zero,81320c <open+0xe0>
  8131f8:	a00b883a 	mov	r5,r20
  8131fc:	980d883a 	mov	r6,r19
  813200:	a80f883a 	mov	r7,r21
  813204:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813208:	10001516 	blt	r2,zero,813260 <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  81320c:	8005883a 	mov	r2,r16
  813210:	dfc00617 	ldw	ra,24(sp)
  813214:	dd400517 	ldw	r21,20(sp)
  813218:	dd000417 	ldw	r20,16(sp)
  81321c:	dcc00317 	ldw	r19,12(sp)
  813220:	dc800217 	ldw	r18,8(sp)
  813224:	dc400117 	ldw	r17,4(sp)
  813228:	dc000017 	ldw	r16,0(sp)
  81322c:	dec00704 	addi	sp,sp,28
  813230:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  813234:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  813238:	8009883a 	mov	r4,r16
  81323c:	080c9400 	call	80c940 <alt_release_fd>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  813240:	00802074 	movhi	r2,129
  813244:	10966e04 	addi	r2,r2,22968
  813248:	10800017 	ldw	r2,0(r2)
  81324c:	10000b26 	beq	r2,zero,81327c <open+0x150>
  813250:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  813254:	043fffc4 	movi	r16,-1
  813258:	14400015 	stw	r17,0(r2)
  81325c:	003feb06 	br	81320c <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  813260:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813264:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  813268:	080c9400 	call	80c940 <alt_release_fd>
  81326c:	00802074 	movhi	r2,129
  813270:	10966e04 	addi	r2,r2,22968
  813274:	10800017 	ldw	r2,0(r2)
  813278:	103ff51e 	bne	r2,zero,813250 <open+0x124>
  81327c:	00802074 	movhi	r2,129
  813280:	109db204 	addi	r2,r2,30408
  813284:	003ff306 	br	813254 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  813288:	a009883a 	mov	r4,r20
  81328c:	08133d00 	call	8133d0 <alt_find_file>
  813290:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  813294:	10000226 	beq	r2,zero,8132a0 <open+0x174>
  813298:	04800044 	movi	r18,1
  81329c:	003fb406 	br	813170 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  8132a0:	043fffc4 	movi	r16,-1
  8132a4:	044004c4 	movi	r17,19
  8132a8:	003fe306 	br	813238 <open+0x10c>

008132ac <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132ac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132b0:	00bfff84 	movi	r2,-2
  8132b4:	3084703a 	and	r2,r6,r2
  8132b8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8132bc:	21400017 	ldw	r5,0(r4)
  8132c0:	20800117 	ldw	r2,4(r4)
  8132c4:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  8132c8:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8132cc:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  8132d0:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  8132d4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8132d8:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  8132dc:	f800283a 	ret

008132e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8132e0:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8132e4:	d0a76517 	ldw	r2,-25196(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8132e8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8132ec:	d4200e17 	ldw	r16,-32712(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8132f0:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8132f4:	10800044 	addi	r2,r2,1
  8132f8:	d4a00e04 	addi	r18,gp,-32712
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8132fc:	dfc00315 	stw	ra,12(sp)
  813300:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813304:	d0a76515 	stw	r2,-25196(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813308:	84800d26 	beq	r16,r18,813340 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81330c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  813310:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813314:	10000326 	beq	r2,zero,813324 <alt_tick+0x44>
  813318:	d0a76517 	ldw	r2,-25196(gp)
  81331c:	1000011e 	bne	r2,zero,813324 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  813320:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813324:	d0e76517 	ldw	r3,-25196(gp)
  813328:	80800217 	ldw	r2,8(r16)
  81332c:	18800236 	bltu	r3,r2,813338 <alt_tick+0x58>
  813330:	80800403 	ldbu	r2,16(r16)
  813334:	10000826 	beq	r2,zero,813358 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  813338:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81333c:	84bff31e 	bne	r16,r18,81330c <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  813340:	dfc00317 	ldw	ra,12(sp)
  813344:	dc800217 	ldw	r18,8(sp)
  813348:	dc400117 	ldw	r17,4(sp)
  81334c:	dc000017 	ldw	r16,0(sp)
  813350:	dec00404 	addi	sp,sp,16
  813354:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  813358:	81000517 	ldw	r4,20(r16)
  81335c:	80c00317 	ldw	r3,12(r16)
  813360:	183ee83a 	callr	r3
  813364:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813368:	10000926 	beq	r2,zero,813390 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  81336c:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813370:	d0e76517 	ldw	r3,-25196(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  813374:	2085883a 	add	r2,r4,r2
  813378:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81337c:	10ffee2e 	bgeu	r2,r3,813338 <alt_tick+0x58>
        {
          alarm->rollover = 1;
  813380:	00800044 	movi	r2,1
  813384:	80800405 	stb	r2,16(r16)
  813388:	8821883a 	mov	r16,r17
  81338c:	003feb06 	br	81333c <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813390:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813394:	00bfff84 	movi	r2,-2
  813398:	2884703a 	and	r2,r5,r2
  81339c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8133a0:	81000017 	ldw	r4,0(r16)
  8133a4:	80800117 	ldw	r2,4(r16)
  8133a8:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  8133ac:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8133b0:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  8133b4:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  8133b8:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133bc:	2801703a 	wrctl	status,r5
  8133c0:	8821883a 	mov	r16,r17
  8133c4:	003fdd06 	br	81333c <alt_tick+0x5c>

008133c8 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8133c8:	000170fa 	wrctl	ienable,zero
}
  8133cc:	f800283a 	ret

008133d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8133d0:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8133d4:	00802074 	movhi	r2,129
  8133d8:	10966904 	addi	r2,r2,22948
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8133dc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8133e0:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8133e4:	dd000415 	stw	r20,16(sp)
  8133e8:	dc800215 	stw	r18,8(sp)
  8133ec:	dfc00515 	stw	ra,20(sp)
  8133f0:	dcc00315 	stw	r19,12(sp)
  8133f4:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8133f8:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8133fc:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813400:	80801526 	beq	r16,r2,813458 <alt_find_file+0x88>
  813404:	04c00bc4 	movi	r19,47
  813408:	00000806 	br	81342c <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81340c:	3485883a 	add	r2,r6,r18
  813410:	10800007 	ldb	r2,0(r2)
  813414:	14c00126 	beq	r2,r19,81341c <alt_find_file+0x4c>
  813418:	1000021e 	bne	r2,zero,813424 <alt_find_file+0x54>
  81341c:	081352c0 	call	81352c <memcmp>
  813420:	10000e26 	beq	r2,zero,81345c <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  813424:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813428:	85000b26 	beq	r16,r20,813458 <alt_find_file+0x88>
  {
    len = strlen(next->name);
  81342c:	84400217 	ldw	r17,8(r16)
  813430:	8809883a 	mov	r4,r17
  813434:	080400c0 	call	80400c <strlen>
  813438:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  81343c:	8885883a 	add	r2,r17,r2
  813440:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813444:	8809883a 	mov	r4,r17
  813448:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  81344c:	1cffef1e 	bne	r3,r19,81340c <alt_find_file+0x3c>
    {
      len -= 1;
  813450:	31bfffc4 	addi	r6,r6,-1
  813454:	003fed06 	br	81340c <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813458:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  81345c:	8005883a 	mov	r2,r16
  813460:	dfc00517 	ldw	ra,20(sp)
  813464:	dd000417 	ldw	r20,16(sp)
  813468:	dcc00317 	ldw	r19,12(sp)
  81346c:	dc800217 	ldw	r18,8(sp)
  813470:	dc400117 	ldw	r17,4(sp)
  813474:	dc000017 	ldw	r16,0(sp)
  813478:	dec00604 	addi	sp,sp,24
  81347c:	f800283a 	ret

00813480 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813480:	01402074 	movhi	r5,129
  813484:	2951cb04 	addi	r5,r5,18220
  813488:	0007883a 	mov	r3,zero
  81348c:	01c00804 	movi	r7,32
  813490:	280d883a 	mov	r6,r5
  813494:	00000306 	br	8134a4 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813498:	18c00044 	addi	r3,r3,1
  81349c:	31800304 	addi	r6,r6,12
  8134a0:	19c00d26 	beq	r3,r7,8134d8 <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  8134a4:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8134a8:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  8134ac:	103ffa1e 	bne	r2,zero,813498 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  8134b0:	01402074 	movhi	r5,129
  8134b4:	29566d04 	addi	r5,r5,22964
  8134b8:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  8134bc:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  8134c0:	10c0030e 	bge	r2,r3,8134d0 <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  8134c4:	1805883a 	mov	r2,r3
  8134c8:	28c00015 	stw	r3,0(r5)
  8134cc:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  8134d0:	1805883a 	mov	r2,r3
  8134d4:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8134d8:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  8134dc:	f800283a 	ret

008134e0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  8134e0:	00840004 	movi	r2,4096
  8134e4:	2007883a 	mov	r3,r4
  8134e8:	1140012e 	bgeu	r2,r5,8134f0 <alt_icache_flush+0x10>
  8134ec:	100b883a 	mov	r5,r2
  8134f0:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8134f4:	1940032e 	bgeu	r3,r5,813504 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8134f8:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8134fc:	18c00804 	addi	r3,r3,32
  813500:	197ffd36 	bltu	r3,r5,8134f8 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813504:	208007cc 	andi	r2,r4,31
  813508:	10000126 	beq	r2,zero,813510 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81350c:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813510:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813514:	f800283a 	ret

00813518 <atexit>:
  813518:	200b883a 	mov	r5,r4
  81351c:	000d883a 	mov	r6,zero
  813520:	0009883a 	mov	r4,zero
  813524:	000f883a 	mov	r7,zero
  813528:	08135a01 	jmpi	8135a0 <__register_exitproc>

0081352c <memcmp>:
  81352c:	00c000c4 	movi	r3,3
  813530:	1980032e 	bgeu	r3,r6,813540 <memcmp+0x14>
  813534:	2144b03a 	or	r2,r4,r5
  813538:	10c4703a 	and	r2,r2,r3
  81353c:	10000f26 	beq	r2,zero,81357c <memcmp+0x50>
  813540:	31ffffc4 	addi	r7,r6,-1
  813544:	3000061e 	bne	r6,zero,813560 <memcmp+0x34>
  813548:	00000a06 	br	813574 <memcmp+0x48>
  81354c:	39ffffc4 	addi	r7,r7,-1
  813550:	00bfffc4 	movi	r2,-1
  813554:	21000044 	addi	r4,r4,1
  813558:	29400044 	addi	r5,r5,1
  81355c:	38800526 	beq	r7,r2,813574 <memcmp+0x48>
  813560:	20c00003 	ldbu	r3,0(r4)
  813564:	28800003 	ldbu	r2,0(r5)
  813568:	18bff826 	beq	r3,r2,81354c <memcmp+0x20>
  81356c:	1885c83a 	sub	r2,r3,r2
  813570:	f800283a 	ret
  813574:	0005883a 	mov	r2,zero
  813578:	f800283a 	ret
  81357c:	180f883a 	mov	r7,r3
  813580:	20c00017 	ldw	r3,0(r4)
  813584:	28800017 	ldw	r2,0(r5)
  813588:	18bfed1e 	bne	r3,r2,813540 <memcmp+0x14>
  81358c:	31bfff04 	addi	r6,r6,-4
  813590:	21000104 	addi	r4,r4,4
  813594:	29400104 	addi	r5,r5,4
  813598:	39bff936 	bltu	r7,r6,813580 <memcmp+0x54>
  81359c:	003fe806 	br	813540 <memcmp+0x14>

008135a0 <__register_exitproc>:
  8135a0:	defffa04 	addi	sp,sp,-24
  8135a4:	00802074 	movhi	r2,129
  8135a8:	10966404 	addi	r2,r2,22928
  8135ac:	dc000015 	stw	r16,0(sp)
  8135b0:	14000017 	ldw	r16,0(r2)
  8135b4:	dd000415 	stw	r20,16(sp)
  8135b8:	2829883a 	mov	r20,r5
  8135bc:	81405217 	ldw	r5,328(r16)
  8135c0:	dcc00315 	stw	r19,12(sp)
  8135c4:	dc800215 	stw	r18,8(sp)
  8135c8:	dc400115 	stw	r17,4(sp)
  8135cc:	dfc00515 	stw	ra,20(sp)
  8135d0:	2023883a 	mov	r17,r4
  8135d4:	3027883a 	mov	r19,r6
  8135d8:	3825883a 	mov	r18,r7
  8135dc:	28002526 	beq	r5,zero,813674 <__register_exitproc+0xd4>
  8135e0:	29000117 	ldw	r4,4(r5)
  8135e4:	008007c4 	movi	r2,31
  8135e8:	11002716 	blt	r2,r4,813688 <__register_exitproc+0xe8>
  8135ec:	8800101e 	bne	r17,zero,813630 <__register_exitproc+0x90>
  8135f0:	2105883a 	add	r2,r4,r4
  8135f4:	1085883a 	add	r2,r2,r2
  8135f8:	20c00044 	addi	r3,r4,1
  8135fc:	1145883a 	add	r2,r2,r5
  813600:	0009883a 	mov	r4,zero
  813604:	15000215 	stw	r20,8(r2)
  813608:	28c00115 	stw	r3,4(r5)
  81360c:	2005883a 	mov	r2,r4
  813610:	dfc00517 	ldw	ra,20(sp)
  813614:	dd000417 	ldw	r20,16(sp)
  813618:	dcc00317 	ldw	r19,12(sp)
  81361c:	dc800217 	ldw	r18,8(sp)
  813620:	dc400117 	ldw	r17,4(sp)
  813624:	dc000017 	ldw	r16,0(sp)
  813628:	dec00604 	addi	sp,sp,24
  81362c:	f800283a 	ret
  813630:	29802204 	addi	r6,r5,136
  813634:	00800044 	movi	r2,1
  813638:	110e983a 	sll	r7,r2,r4
  81363c:	30c04017 	ldw	r3,256(r6)
  813640:	2105883a 	add	r2,r4,r4
  813644:	1085883a 	add	r2,r2,r2
  813648:	1185883a 	add	r2,r2,r6
  81364c:	19c6b03a 	or	r3,r3,r7
  813650:	14802015 	stw	r18,128(r2)
  813654:	14c00015 	stw	r19,0(r2)
  813658:	00800084 	movi	r2,2
  81365c:	30c04015 	stw	r3,256(r6)
  813660:	88bfe31e 	bne	r17,r2,8135f0 <__register_exitproc+0x50>
  813664:	30804117 	ldw	r2,260(r6)
  813668:	11c4b03a 	or	r2,r2,r7
  81366c:	30804115 	stw	r2,260(r6)
  813670:	003fdf06 	br	8135f0 <__register_exitproc+0x50>
  813674:	00802074 	movhi	r2,129
  813678:	109f6d04 	addi	r2,r2,32180
  81367c:	100b883a 	mov	r5,r2
  813680:	80805215 	stw	r2,328(r16)
  813684:	003fd606 	br	8135e0 <__register_exitproc+0x40>
  813688:	00802034 	movhi	r2,128
  81368c:	108d7e04 	addi	r2,r2,13816
  813690:	1000021e 	bne	r2,zero,81369c <__register_exitproc+0xfc>
  813694:	013fffc4 	movi	r4,-1
  813698:	003fdc06 	br	81360c <__register_exitproc+0x6c>
  81369c:	01006404 	movi	r4,400
  8136a0:	103ee83a 	callr	r2
  8136a4:	1007883a 	mov	r3,r2
  8136a8:	103ffa26 	beq	r2,zero,813694 <__register_exitproc+0xf4>
  8136ac:	80805217 	ldw	r2,328(r16)
  8136b0:	180b883a 	mov	r5,r3
  8136b4:	18000115 	stw	zero,4(r3)
  8136b8:	18800015 	stw	r2,0(r3)
  8136bc:	80c05215 	stw	r3,328(r16)
  8136c0:	18006215 	stw	zero,392(r3)
  8136c4:	18006315 	stw	zero,396(r3)
  8136c8:	0009883a 	mov	r4,zero
  8136cc:	883fc826 	beq	r17,zero,8135f0 <__register_exitproc+0x50>
  8136d0:	003fd706 	br	813630 <__register_exitproc+0x90>
  8136d4:	00000010 	cmplti	zero,zero,0
  8136d8:	00000000 	call	0 <__reset-0x800000>
  8136dc:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  8136e0:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  8136e4:	001b0c0b 	ldhu	zero,27696(zero)
  8136e8:	00000028 	cmpgeui	zero,zero,0
  8136ec:	00000018 	cmpnei	zero,zero,0
  8136f0:	0080b070 	cmpltui	r2,zero,705
  8136f4:	000005dc 	xori	zero,zero,23
  8136f8:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  8136fc:	92099170 	cmpltui	r8,r18,9797
  813700:	95079308 	cmpgei	r20,r18,7756
  813704:	97049605 	stb	fp,4696(r18)
  813708:	90019f03 	ldbu	zero,1660(r18)
  81370c:	9c06940a 	0x9c06940a
  813710:	00000002 	0x2
  813714:	00000028 	cmpgeui	zero,zero,0
  813718:	00000044 	movi	zero,1
  81371c:	0080b64c 	andi	r2,zero,729
  813720:	000005b0 	cmpltui	zero,zero,22
  813724:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  813728:	92099168 	cmpgeui	r8,r18,9797
  81372c:	95079308 	cmpgei	r20,r18,7756
  813730:	9c039705 	stb	r16,3676(r19)
  813734:	90019f02 	0x90019f02
  813738:	9606940a 	0x9606940a
  81373c:	00000004 	movi	zero,0
  813740:	008060e4 	muli	r2,zero,387
