
multi_test_1.elf:     file format elf32-littlenios2
multi_test_1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008203b4

Program Header:
    LOAD off    0x00000000 vaddr 0x00820000 paddr 0x00820000 align 2**12
         filesz 0x00000220 memsz 0x00000220 flags r-x
    LOAD off    0x00000220 vaddr 0x00820220 paddr 0x00820220 align 2**12
         filesz 0x000139cc memsz 0x000139cc flags r-x
    LOAD off    0x00013bec vaddr 0x00833bec paddr 0x00835a24 align 2**12
         filesz 0x00001e38 memsz 0x00001e38 flags rw-
    LOAD off    0x0001685c vaddr 0x0083785c paddr 0x0083785c align 2**12
         filesz 0x00000000 memsz 0x00000900 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00820200  00820200  00000200  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00820220  00820220  00000220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013230  008203b4  008203b4  000003b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000608  008335e4  008335e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e38  00833bec  00835a24  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000900  0083785c  0083785c  0001685c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015a24  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00015a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002036  00000000  00000000  000168a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b410  00000000  00000000  000188d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009016  00000000  00000000  00043ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019562  00000000  00000000  0004ccfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002154  00000000  00000000  00066260  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000307c  00000000  00000000  000683b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dd87  00000000  00000000  0006b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000791b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c60  00000000  00000000  000791e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007e079  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007e07c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007e081  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007e082  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007e086  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007e08a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007e08e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007e099  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007e0a4  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  0007e0af  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0007e0b6  2**0
                  CONTENTS, READONLY
 28 .jdi          000082e5  00000000  00000000  0007e0d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00820200 l    d  .entry	00000000 .entry
00820220 l    d  .exceptions	00000000 .exceptions
008203b4 l    d  .text	00000000 .text
008335e4 l    d  .rodata	00000000 .rodata
00833bec l    d  .rwdata	00000000 .rwdata
0083785c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008203fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 hello_world.c
00821858 l     F .text	00000014 timer1_ISR
0082186c l     F .text	0000009c handle_button_interrupts
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 dp-bit.c
008221e4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00822da0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00833f14 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00823eec l     F .text	00000058 __sprint_r
00833986 l     O .rodata	00000010 blanks.3452
00833976 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00825f50 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00826104 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00827b00 l     F .text	00000058 std
00827c0c l     F .text	00000008 __fp_lock
00827c14 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
008359e8 l     O .rwdata	00000004 charset
008339b8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00833b00 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0082bf94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0082c038 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0082c064 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0082c198 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0082c478 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0082c558 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0082c6b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0082c8e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00835a08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0082cb7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008348d0 l     O .rwdata	00001060 jtag_uart_1
00835930 l     O .rwdata	0000003c mailbox_0
0083596c l     O .rwdata	0000003c mailbox_1
008359a8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0082cc8c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0082cecc l     F .text	00000228 altera_avalon_jtag_uart_irq
0082d0f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0082d8c8 l     F .text	0000006c alt_avalon_mutex_reg
0082d934 l     F .text	00000060 alt_get_errno
0082dac8 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0082dc98 l     F .text	0000007c alt_mutex_trylock
0082dd6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0082df9c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008326d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00832b8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00832cc8 l     F .text	000000dc alt_file_locked
00832f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00837908 g     O .bss	00000004 aux_status_register
00823d30 g     F .text	0000001c putchar
008378c4 g     O .bss	00000004 sectors
0082917c g     F .text	00000094 _mprec_log10
00829268 g     F .text	00000088 __any_on
0082ac3c g     F .text	00000070 _isatty_r
00833ad8 g     O .rodata	00000028 __mprec_tinytens
0082c714 g     F .text	0000006c alt_main
0082db18 g     F .text	000000a8 altera_avalon_mailbox_pend
00823d54 g     F .text	000000a0 _puts_r
00837ecc g     O .bss	00000100 alt_irq
0082acac g     F .text	00000078 _lseek_r
00821bf8 g     F .text	0000002c sd_card_wait_read_sector
00821704 g     F .text	00000100 ycbcr_to_rgb
00835a24 g       *ABS*	00000000 __flash_rwdata_start
0082bb80 g     F .text	00000088 __eqdf2
0082e44c g     F .text	000001b0 Check_for_Master_Boot_Record
008378d0 g     O .bss	00000004 sd_card_sectors_num
0083815c g       *ABS*	00000000 __alt_heap_start
00832300 g     F .text	000001cc alt_up_sd_card_fclose
0082dbc0 g     F .text	000000d8 altera_avalon_mailbox_get
00837860 g     O .bss	00000004 recv_dev
00823cb8 g     F .text	00000044 printf
00833bec g     O .rwdata	00000080 Yquant
0082a5bc g     F .text	00000068 __sseek
00827b68 g     F .text	000000a4 __sinit
0082a7bc g     F .text	00000130 __swbuf_r
00828840 g     F .text	00000084 _setlocale_r
00827c68 g     F .text	00000068 __sfmoreglue
0082c7a0 g     F .text	00000020 __malloc_unlock
0083792c g     O .bss	00000004 current_sector_modified
00821e54 g     F .text	0000017c sd_read
00837864 g     O .bss	00000004 last_tested
00828bf8 g     F .text	000000e0 memmove
00827c58 g     F .text	00000010 _cleanup
00837868 g     O .bss	00000004 CrDCAC
0082de2c g     F .text	00000040 altera_avalon_mutex_trylock
008292f0 g     F .text	000000bc _Balloc
00830ebc g     F .text	000000c8 alt_up_sd_card_is_Present
0082e164 g     F .text	00000050 Save_Modified_Sector
00822aac g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00820200 g     F .entry	0000001c __reset
00837924 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0083786c g     O .bss	00000004 edge_capture
0082dec8 g     F .text	0000007c altera_avalon_mutex_is_mine
00821fd0 g     F .text	00000214 ceil
00820220 g       *ABS*	00000000 __flash_exceptions_start
0082abc8 g     F .text	00000074 _fstat_r
008378d4 g     O .bss	00000004 errno
008378f8 g     O .bss	00000004 alt_argv
0083d9d4 g       *ABS*	00000000 _gp
0083147c g     F .text	000003a8 alt_up_sd_card_fopen
00830ff8 g     F .text	000000d4 alt_up_sd_card_find_first
00837918 g     O .bss	00000004 command_argument_register
00834750 g     O .rwdata	00000180 alt_fd_list
00823d4c g     F .text	00000008 _putchar_r
008306ec g     F .text	0000012c find_first_empty_record_in_root_directory
008327fc g     F .text	00000094 alt_find_dev
00828b58 g     F .text	000000a0 memcpy
00827c4c g     F .text	0000000c _cleanup_r
0082bda0 g     F .text	000000f8 __floatsidf
00832c50 g     F .text	00000078 alt_io_redirect
0082bd18 g     F .text	00000088 __ltdf2
008335e4 g       *ABS*	00000000 __DTOR_END__
00823df4 g     F .text	00000014 puts
008302fc g     F .text	000001a4 find_first_empty_cluster
00833130 g     F .text	00000020 altera_nios2_irq_init
008290cc g     F .text	000000b0 __ratio
00830df8 g     F .text	000000c4 alt_up_sd_card_open_dev
0082da0c g     F .text	000000bc altera_avalon_mailbox_post
0082d30c g     F .text	00000224 altera_avalon_jtag_uart_read
00823564 g     F .text	00000014 malloc
00823cfc g     F .text	00000034 _printf_r
00820b3c g     F .text	00000448 lossless_decode
00822edc g     F .text	00000008 __udivsi3
0082c3b8 g     F .text	000000c0 isatty
008339e8 g     O .rodata	000000c8 __mprec_tens
0082d9ec g     F .text	00000020 altera_avalon_mailbox_close
0082881c g     F .text	00000008 __locale_charset
00833328 g     F .text	00000090 alt_icache_flush
008378d8 g     O .bss	00000004 __malloc_top_pad
008359e4 g     O .rwdata	00000004 __mb_cur_max
00828824 g     F .text	0000000c _localeconv_r
008299e8 g     F .text	0000003c __i2b
00828200 g     F .text	0000049c __sfvwrite_r
0082f5d8 g     F .text	000000c0 get_dir_divider_location
00837870 g     O .bss	00000004 send_dev
00823e08 g     F .text	00000070 _sbrk_r
0082f278 g     F .text	000000d0 filename_to_upper_case
00831824 g     F .text	00000090 alt_up_sd_card_set_attributes
0082e5fc g     F .text	00000284 Read_File_Record_At_Offset
0082ad24 g     F .text	00000078 _read_r
0083471c g     O .rwdata	0000000c __lc_ctype
008359fc g     O .rwdata	00000004 alt_max_fd
00823318 g     F .text	00000138 __unpack_d
0082fe98 g     F .text	00000464 find_file_in_directory
0082aaa4 g     F .text	00000110 _fclose_r
00827acc g     F .text	00000034 fflush
008378dc g     O .bss	00000004 __malloc_max_sbrked_mem
0082c1f8 g     F .text	000001c0 alt_irq_register
00830f84 g     F .text	00000074 alt_up_sd_card_is_FAT16
00822674 g     F .text	00000074 __adddf3
00828fac g     F .text	00000120 __b2d
0082b378 g     F .text	000005b0 __umoddi3
0082c5c4 g     F .text	000000f0 lseek
0082df44 g     F .text	00000058 altera_avalon_mutex_first_lock
00820400 g     F .text	000000bc print_dct
008359d8 g     O .rwdata	00000004 _global_impure_ptr
0082f984 g     F .text	00000514 get_home_directory_cluster_for_file
00829f50 g     F .text	000005f4 _realloc_r
0083815c g       *ABS*	00000000 __bss_end
00832a94 g     F .text	000000f8 alt_iic_isr_register
00833024 g     F .text	0000010c alt_tick
0082ad9c g     F .text	000005dc __udivdi3
00833ab0 g     O .rodata	00000028 __mprec_bigtens
00829c44 g     F .text	00000120 __s2b
00822c0c g     F .text	00000194 __floatunsidf
008378bc g     O .bss	00000004 button_latch
00828ecc g     F .text	00000060 __mcmp
00837930 g     O .bss	00000004 current_sector_index
00827c34 g     F .text	00000018 __fp_lock_all
00832a4c g     F .text	00000048 alt_ic_irq_enabled
00832f8c g     F .text	00000098 alt_alarm_stop
00821c94 g     F .text	000001c0 sd_card_create_sectors_list
0082e368 g     F .text	000000e4 mark_cluster
00820ac0 g     F .text	0000007c input_AC
008378f0 g     O .bss	00000004 alt_irq_active
00837874 g     O .bss	00000004 sendmessage
00820f84 g     F .text	00000780 mjpeg423_decode
008202ec g     F .exceptions	000000c8 alt_irq_handler
00834728 g     O .rwdata	00000028 alt_dev_null
0082dd14 g     F .text	00000058 altera_avalon_mutex_open
00830818 g     F .text	000001b8 convert_filename_to_name_extension
0082bff4 g     F .text	00000044 alt_dcache_flush_all
00828d98 g     F .text	00000070 __hi0bits
00837904 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00822b34 g     F .text	000000d8 __fixdfsi
008304a0 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00835a24 g       *ABS*	00000000 __ram_rwdata_end
008359f4 g     O .rwdata	00000008 alt_dev_list
0082ca5c g     F .text	00000120 write
00829e68 g     F .text	000000e8 _putc_r
00837928 g     O .bss	00000004 device_pointer
00835a14 g     O .rwdata	00000008 alt_mutex_list
00833bec g       *ABS*	00000000 __ram_rodata_end
0082c0c4 g     F .text	000000d4 fstat
00837878 g     O .bss	00000004 playing
00829b24 g     F .text	00000120 __pow5mult
008378e4 g     O .bss	00000004 __nlocale_changed
00822ee4 g     F .text	00000008 __umodsi3
0083787c g     O .bss	00000004 sendMsg
00837880 g     O .bss	00000004 YDCAC
0083815c g       *ABS*	00000000 end
0082ce0c g     F .text	000000c0 altera_avalon_jtag_uart_init
008335e0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0082e00c g     F .text	00000090 alt_avalon_timer_sc_init
00822f84 g     F .text	00000080 __clzsi2
0082d530 g     F .text	00000240 altera_avalon_jtag_uart_write
0082d770 g     F .text	00000158 alt_avalon_mailbox_init
00827b58 g     F .text	00000004 __sfp_lock_acquire
00828a74 g     F .text	000000e4 memchr
00823f44 g     F .text	00001eac ___vfprintf_internal_r
00827eec g     F .text	00000314 _free_r
00825f54 g     F .text	000001b0 __call_exitprocs
008378e8 g     O .bss	00000004 __mlocale_changed
008359e0 g     O .rwdata	00000004 __malloc_sbrk_base
008203b4 g     F .text	0000004c _start
00837934 g     O .bss	00000004 _alt_tick_rate
008204bc g     F .text	000000c4 print_block
00820580 g     F .text	00000108 print_bitstream
008296b4 g     F .text	0000014c __lshift
00821c24 g     F .text	00000070 sd_card_start_read_sector
00837938 g     O .bss	00000004 _alt_nticks
0082c7c0 g     F .text	00000120 read
0082cc10 g     F .text	0000007c alt_sys_init
00821bbc g     F .text	00000018 sd_seek
00833440 g     F .text	00000134 __register_exitproc
0082de6c g     F .text	0000005c altera_avalon_mutex_unlock
00837884 g     O .bss	00000004 Yblock
00829800 g     F .text	000001e8 __multiply
0082d1a4 g     F .text	00000074 altera_avalon_jtag_uart_close
00833bec g       *ABS*	00000000 __ram_rwdata_start
008335e4 g       *ABS*	00000000 __ram_rodata_start
0083793c g     O .bss	00000028 __malloc_current_mallinfo
008293ac g     F .text	0000017c __d2b
00837900 g     O .bss	00000004 initialized
00837888 g     O .bss	00000004 Cbblock
00833dec g     O .rwdata	00000028 files
0082ccc4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00833270 g     F .text	000000b8 alt_get_fd
00837964 g     O .bss	00000014 search_data
00823450 g     F .text	000000c8 __fpcmp_parts_d
0083788c g     O .bss	00000004 receiveMessage
0082aa34 g     F .text	00000070 _close_r
00837890 g     O .bss	00000004 playedOnceFlag
008333cc g     F .text	00000074 memcmp
0082cd74 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0083815c g       *ABS*	00000000 __alt_stack_base
0082cdbc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008206a8 g     F .text	000002e8 idct
00825e14 g     F .text	0000013c __swsetup_r
0082b928 g     F .text	00000258 __divdf3
00827cd0 g     F .text	000000f0 __sfp
00837978 g     O .bss	00000054 boot_sector_data
00829210 g     F .text	00000058 __copybits
00834314 g     O .rwdata	00000408 __malloc_av_
00827b64 g     F .text	00000004 __sinit_lock_release
008226e8 g     F .text	000003c4 __muldf3
0082a6a0 g     F .text	00000060 __sread
0083785c g     O .bss	00000004 counter
00837894 g     O .bss	00000004 backward
00833150 g     F .text	00000120 alt_find_file
00832620 g     F .text	000000b4 alt_dev_llist_insert
0082c780 g     F .text	00000020 __malloc_lock
0082c9a0 g     F .text	000000bc sbrk
008278d0 g     F .text	000001fc _fflush_r
0082a980 g     F .text	000000b4 _calloc_r
008378b8 g     O .bss	00000001 index
00820a4c g     F .text	00000074 input_DC
00833e14 g     O .rwdata	00000100 __divsi3_table
0083785c g       *ABS*	00000000 __bss_start
00837898 g     O .bss	00000004 flip
00828cd8 g     F .text	00000098 memset
008378c8 g     O .bss	00000004 sd_card_curr_read_sector
00821804 g     F .text	00000054 initTimer
00821908 g     F .text	000002b4 main
008378b4 g     O .bss	00000004 blah
008378fc g     O .bss	00000004 alt_envp
008378e0 g     O .bss	00000004 __malloc_max_total_mem
0082cd1c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0082a8ec g     F .text	0000001c __swbuf
008318b4 g     F .text	0000008c alt_up_sd_card_get_attributes
0082e09c g     F .text	000000c8 Write_Sector_Data
00831cdc g     F .text	00000624 alt_up_sd_card_write
0082a5b4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0082abb4 g     F .text	00000014 fclose
00837fcc g     O .bss	00000190 _atexit0
0082ddec g     F .text	00000040 altera_avalon_mutex_lock
0082631c g     F .text	000015b4 _dtoa_r
00823578 g     F .text	00000740 _malloc_r
00835a00 g     O .rwdata	00000004 alt_errno
00821bd4 g     F .text	00000024 sd_card_file_size
00828764 g     F .text	000000b8 _fwalk
0083789c g     O .bss	00000004 fastForward
00829d64 g     F .text	00000104 putc
00822e1c g     F .text	00000060 __divsi3
00833808 g     O .rodata	00000014 __thenan_df
00827dc0 g     F .text	0000012c _malloc_trim_r
008335e4 g       *ABS*	00000000 __CTOR_END__
008378a0 g     O .bss	00000004 Crblock
0083790c g     O .bss	00000004 status_register
0082a700 g     F .text	000000bc strcmp
00837914 g     O .bss	00000004 command_register
008335e4 g       *ABS*	00000000 __flash_rodata_start
008335e4 g       *ABS*	00000000 __DTOR_LIST__
0082bc08 g     F .text	00000088 __nedf2
0082cbdc g     F .text	00000034 alt_irq_init
0082c940 g     F .text	00000060 alt_release_fd
008378c0 g     O .bss	00000004 button_state
0082e2b0 g     F .text	000000b8 get_cluster_flag
0083381c g     O .rodata	00000100 __clz_tab
0082e880 g     F .text	000002b8 Write_File_Record_At_Offset
008378ec g     O .bss	00000004 _PathLocale
008333b8 g     F .text	00000014 atexit
0082a908 g     F .text	00000078 _write_r
008288c4 g     F .text	0000001c setlocale
0082eb38 g     F .text	00000648 Check_for_DOS_FAT
008309d0 g     F .text	000002d4 create_file
008359d4 g     O .rwdata	00000004 _impure_ptr
00837910 g     O .bss	00000004 CSD_register_w0
008378f4 g     O .bss	00000004 alt_argc
00832798 g     F .text	00000064 _do_dtors
00833cec g     O .rwdata	00000100 zigzag_table
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00820220 g       .exceptions	00000000 alt_irq_entry
00820688 g     F .text	00000020 error_and_exit
00828f2c g     F .text	00000080 __ulp
0082a544 g     F .text	00000040 __isinfd
00827c1c g     F .text	00000018 __fp_unlock_all
00835a0c g     O .rwdata	00000008 alt_mailbox_list
008378a4 g     O .bss	00000004 CbDCAC
008359ec g     O .rwdata	00000008 alt_fs_list
0082f348 g     F .text	00000290 check_file_name_for_FAT16_compliance
0083791c g     O .bss	00000004 buffer_memory
00820220 g       *ABS*	00000000 __ram_exceptions_start
00828830 g     F .text	00000010 localeconv
008378a8 g     O .bss	00000004 frame_index
008328c0 g     F .text	00000050 alt_ic_isr_register
00837920 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00835a24 g       *ABS*	00000000 _edata
00820990 g     F .text	000000bc update_buffer
0083815c g       *ABS*	00000000 _end
008379cc g     O .bss	00000500 active_files
008203b4 g       *ABS*	00000000 __ram_exceptions_end
008378cc g     O .bss	00000004 sd_card_start_byte_in_sector
00830ca4 g     F .text	00000154 copy_file_record_name_to_string
0082d218 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0082f180 g     F .text	000000f8 Look_for_FAT16
008378ac g     O .bss	00000004 getNextFile
008329ac g     F .text	000000a0 alt_ic_irq_disable
0082a624 g     F .text	0000007c __swrite
008359dc g     O .rwdata	00000004 __malloc_trim_threshold
00823518 g     F .text	00000038 exit
008310cc g     F .text	000003b0 alt_up_sd_card_find_next
0082869c g     F .text	000000c8 _fwalk_reent
00829528 g     F .text	0000018c __mdiff
00822e7c g     F .text	00000060 __modsi3
0082e1b4 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00820220 g     F .exceptions	00000000 alt_exception
00827b5c g     F .text	00000004 __sfp_lock_release
0082d994 g     F .text	00000058 altera_avalon_mailbox_open
0082a584 g     F .text	00000030 __isnand
0082c0a4 g     F .text	00000020 _exit
008324cc g     F .text	00000154 alt_alarm_start
00822eec g     F .text	00000098 __muldi3
00831940 g     F .text	0000039c alt_up_sd_card_read
008288e0 g     F .text	00000194 __smakebuf_r
00823e78 g     F .text	00000074 strlen
00832da4 g     F .text	00000188 open
0082bc90 g     F .text	00000088 __gedf2
00832890 g     F .text	00000030 alt_icache_flush_all
00835a04 g     O .rwdata	00000004 alt_priority_mask
00833c6c g     O .rwdata	00000080 Cquant
00832910 g     F .text	0000009c alt_ic_irq_enable
00825df0 g     F .text	00000024 __vfprintf_internal
0082ddcc g     F .text	00000020 altera_avalon_mutex_close
008225f4 g     F .text	00000080 __subdf3
00828e08 g     F .text	000000c4 __lo0bits
008378b0 g     O .bss	00000004 current_frame
00835a1c g     O .rwdata	00000008 alt_alarm_list
00832734 g     F .text	00000064 _do_ctors
0082be98 g     F .text	000000fc close
0082c4d8 g     F .text	00000080 alt_load
00823004 g     F .text	00000314 __pack_d
0082f698 g     F .text	000002ec match_file_record_to_name_ext
00823550 g     F .text	00000014 free
00827b60 g     F .text	00000004 __sinit_lock_acquire
00829a24 g     F .text	00000100 __multadd
00828d70 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00820200 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  820200:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  820204:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  820208:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  82020c:	00bffd16 	blt	zero,r2,820204 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  820210:	004020b4 	movhi	at,130
    ori r1, r1, %lo(_start)
  820214:	0840ed14 	ori	at,at,948
    jmp r1
  820218:	0800683a 	jmp	at
  82021c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00820220 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  820220:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  820224:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  820228:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  82022c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  820230:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  820234:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  820238:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  82023c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  820240:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  820244:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  820248:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  82024c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  820250:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  820254:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  820258:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  82025c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  820260:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  820264:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  820268:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  82026c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  820270:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  820274:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  820278:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  82027c:	10000326 	beq	r2,zero,82028c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  820280:	20000226 	beq	r4,zero,82028c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  820284:	08202ec0 	call	8202ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  820288:	00000306 	br	820298 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  82028c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  820290:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  820294:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  820298:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  82029c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8202a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8202a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8202a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8202ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8202b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8202b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8202b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8202bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8202c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8202c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8202c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8202cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8202d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8202d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8202d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8202dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8202e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8202e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8202e8:	ef80083a 	eret

008202ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8202ec:	defff904 	addi	sp,sp,-28
  8202f0:	dfc00615 	stw	ra,24(sp)
  8202f4:	df000515 	stw	fp,20(sp)
  8202f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8202fc:	0005313a 	rdctl	r2,ipending
  820300:	e0bffc15 	stw	r2,-16(fp)

  return active;
  820304:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  820308:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  82030c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  820310:	00800044 	movi	r2,1
  820314:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  820318:	e0ffff17 	ldw	r3,-4(fp)
  82031c:	e0bffe17 	ldw	r2,-8(fp)
  820320:	1884703a 	and	r2,r3,r2
  820324:	1005003a 	cmpeq	r2,r2,zero
  820328:	1000161e 	bne	r2,zero,820384 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  82032c:	e0bffd17 	ldw	r2,-12(fp)
  820330:	00c020f4 	movhi	r3,131
  820334:	18dfb304 	addi	r3,r3,32460
  820338:	100490fa 	slli	r2,r2,3
  82033c:	10c5883a 	add	r2,r2,r3
  820340:	11400017 	ldw	r5,0(r2)
  820344:	e0bffd17 	ldw	r2,-12(fp)
  820348:	00c020f4 	movhi	r3,131
  82034c:	18dfb304 	addi	r3,r3,32460
  820350:	100490fa 	slli	r2,r2,3
  820354:	10c5883a 	add	r2,r2,r3
  820358:	10800104 	addi	r2,r2,4
  82035c:	11000017 	ldw	r4,0(r2)
  820360:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  820364:	0005313a 	rdctl	r2,ipending
  820368:	e0bffb15 	stw	r2,-20(fp)

  return active;
  82036c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  820370:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  820374:	e0bfff17 	ldw	r2,-4(fp)
  820378:	1004c03a 	cmpne	r2,r2,zero
  82037c:	103fe31e 	bne	r2,zero,82030c <alt_irq_handler+0x20>
  820380:	00000706 	br	8203a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  820384:	e0bffe17 	ldw	r2,-8(fp)
  820388:	1085883a 	add	r2,r2,r2
  82038c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  820390:	e0bffd17 	ldw	r2,-12(fp)
  820394:	10800044 	addi	r2,r2,1
  820398:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  82039c:	003fde06 	br	820318 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8203a0:	e037883a 	mov	sp,fp
  8203a4:	dfc00117 	ldw	ra,4(sp)
  8203a8:	df000017 	ldw	fp,0(sp)
  8203ac:	dec00204 	addi	sp,sp,8
  8203b0:	f800283a 	ret

Disassembly of section .text:

008203b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8203b4:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
  8203b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8203bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8203c0:	00bffd16 	blt	zero,r2,8203b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8203c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8203c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8203cc:	068020f4 	movhi	gp,131
    ori gp, gp, %lo(_gp)
  8203d0:	d6b67514 	ori	gp,gp,55764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8203d4:	008020f4 	movhi	r2,131
    ori r2, r2, %lo(__bss_start)
  8203d8:	109e1714 	ori	r2,r2,30812

    movhi r3, %hi(__bss_end)
  8203dc:	00c020f4 	movhi	r3,131
    ori r3, r3, %lo(__bss_end)
  8203e0:	18e05714 	ori	r3,r3,33116

    beq r2, r3, 1f
  8203e4:	10c00326 	beq	r2,r3,8203f4 <_start+0x40>

0:
    stw zero, (r2)
  8203e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8203ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8203f0:	10fffd36 	bltu	r2,r3,8203e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8203f4:	082c4d80 	call	82c4d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8203f8:	082c7140 	call	82c714 <alt_main>

008203fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8203fc:	003fff06 	br	8203fc <alt_after_alt_main>

00820400 <print_dct>:
            else printf("%u\n", b[row][column]);
        } 
}

void print_dct(pdct_block_t b)
{
  820400:	defffd04 	addi	sp,sp,-12
  820404:	dc400115 	stw	r17,4(sp)
  820408:	dc000015 	stw	r16,0(sp)
  82040c:	dfc00215 	stw	ra,8(sp)
  820410:	2021883a 	mov	r16,r4
  820414:	0023883a 	mov	r17,zero
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  820418:	8140000f 	ldh	r5,0(r16)
  82041c:	010020f4 	movhi	r4,131
  820420:	210d7904 	addi	r4,r4,13796
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  820424:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  820428:	0823cb80 	call	823cb8 <printf>
  82042c:	8140008f 	ldh	r5,2(r16)
  820430:	010020f4 	movhi	r4,131
  820434:	210d7904 	addi	r4,r4,13796
  820438:	0823cb80 	call	823cb8 <printf>
  82043c:	8140010f 	ldh	r5,4(r16)
  820440:	010020f4 	movhi	r4,131
  820444:	210d7904 	addi	r4,r4,13796
  820448:	0823cb80 	call	823cb8 <printf>
  82044c:	8140018f 	ldh	r5,6(r16)
  820450:	010020f4 	movhi	r4,131
  820454:	210d7904 	addi	r4,r4,13796
  820458:	0823cb80 	call	823cb8 <printf>
  82045c:	8140020f 	ldh	r5,8(r16)
  820460:	010020f4 	movhi	r4,131
  820464:	210d7904 	addi	r4,r4,13796
  820468:	0823cb80 	call	823cb8 <printf>
  82046c:	8140028f 	ldh	r5,10(r16)
  820470:	010020f4 	movhi	r4,131
  820474:	210d7904 	addi	r4,r4,13796
  820478:	0823cb80 	call	823cb8 <printf>
  82047c:	8140030f 	ldh	r5,12(r16)
  820480:	010020f4 	movhi	r4,131
  820484:	210d7904 	addi	r4,r4,13796
  820488:	0823cb80 	call	823cb8 <printf>
            else printf("%d\n", b[row][column]);
  82048c:	8140038f 	ldh	r5,14(r16)
  820490:	010020f4 	movhi	r4,131
  820494:	210d7a04 	addi	r4,r4,13800
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  820498:	84000404 	addi	r16,r16,16
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
  82049c:	0823cb80 	call	823cb8 <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  8204a0:	00c00204 	movi	r3,8
  8204a4:	88ffdc1e 	bne	r17,r3,820418 <print_dct+0x18>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
  8204a8:	dfc00217 	ldw	ra,8(sp)
  8204ac:	dc400117 	ldw	r17,4(sp)
  8204b0:	dc000017 	ldw	r16,0(sp)
  8204b4:	dec00304 	addi	sp,sp,12
  8204b8:	f800283a 	ret

008204bc <print_block>:
    printf("Error: %s\n", str);
    exit(-1);
}

void print_block(pcolor_block_t b)
{
  8204bc:	defffc04 	addi	sp,sp,-16
  8204c0:	dc800215 	stw	r18,8(sp)
  8204c4:	dc400115 	stw	r17,4(sp)
  8204c8:	dc000015 	stw	r16,0(sp)
  8204cc:	dfc00315 	stw	ra,12(sp)
  8204d0:	2021883a 	mov	r16,r4
  8204d4:	0023883a 	mov	r17,zero
  8204d8:	04800204 	movi	r18,8
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8204dc:	81400003 	ldbu	r5,0(r16)
  8204e0:	010020f4 	movhi	r4,131
  8204e4:	210d7904 	addi	r4,r4,13796
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  8204e8:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8204ec:	0823cb80 	call	823cb8 <printf>
  8204f0:	81400043 	ldbu	r5,1(r16)
  8204f4:	010020f4 	movhi	r4,131
  8204f8:	210d7904 	addi	r4,r4,13796
  8204fc:	0823cb80 	call	823cb8 <printf>
  820500:	81400083 	ldbu	r5,2(r16)
  820504:	010020f4 	movhi	r4,131
  820508:	210d7904 	addi	r4,r4,13796
  82050c:	0823cb80 	call	823cb8 <printf>
  820510:	814000c3 	ldbu	r5,3(r16)
  820514:	010020f4 	movhi	r4,131
  820518:	210d7904 	addi	r4,r4,13796
  82051c:	0823cb80 	call	823cb8 <printf>
  820520:	81400103 	ldbu	r5,4(r16)
  820524:	010020f4 	movhi	r4,131
  820528:	210d7904 	addi	r4,r4,13796
  82052c:	0823cb80 	call	823cb8 <printf>
  820530:	81400143 	ldbu	r5,5(r16)
  820534:	010020f4 	movhi	r4,131
  820538:	210d7904 	addi	r4,r4,13796
  82053c:	0823cb80 	call	823cb8 <printf>
  820540:	81400183 	ldbu	r5,6(r16)
  820544:	010020f4 	movhi	r4,131
  820548:	210d7904 	addi	r4,r4,13796
  82054c:	0823cb80 	call	823cb8 <printf>
            else printf("%u\n", b[row][column]);
  820550:	814001c3 	ldbu	r5,7(r16)
  820554:	010020f4 	movhi	r4,131
  820558:	210d9b04 	addi	r4,r4,13932
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  82055c:	84000204 	addi	r16,r16,8
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
  820560:	0823cb80 	call	823cb8 <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  820564:	8cbfdd1e 	bne	r17,r18,8204dc <print_block+0x20>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
  820568:	dfc00317 	ldw	ra,12(sp)
  82056c:	dc800217 	ldw	r18,8(sp)
  820570:	dc400117 	ldw	r17,4(sp)
  820574:	dc000017 	ldw	r16,0(sp)
  820578:	dec00404 	addi	sp,sp,16
  82057c:	f800283a 	ret

00820580 <print_bitstream>:
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
  820580:	defffd04 	addi	sp,sp,-12
  820584:	dfc00215 	stw	ra,8(sp)
  820588:	dc400115 	stw	r17,4(sp)
  82058c:	dc000015 	stw	r16,0(sp)
    for (int index = 0; index < num_bytes; index++)
  820590:	0100370e 	bge	zero,r4,820670 <print_bitstream+0xf0>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  820594:	2821883a 	mov	r16,r5
  820598:	2923883a 	add	r17,r5,r4

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
  82059c:	81400003 	ldbu	r5,0(r16)
  8205a0:	010020f4 	movhi	r4,131
  8205a4:	210d7b04 	addi	r4,r4,13804
  8205a8:	280ad1fa 	srli	r5,r5,7
  8205ac:	0823cb80 	call	823cb8 <printf>
  8205b0:	81400003 	ldbu	r5,0(r16)
  8205b4:	010020f4 	movhi	r4,131
  8205b8:	210d7b04 	addi	r4,r4,13804
  8205bc:	294b883a 	add	r5,r5,r5
  8205c0:	29403fcc 	andi	r5,r5,255
  8205c4:	280ad1fa 	srli	r5,r5,7
  8205c8:	0823cb80 	call	823cb8 <printf>
  8205cc:	81400003 	ldbu	r5,0(r16)
  8205d0:	010020f4 	movhi	r4,131
  8205d4:	210d7b04 	addi	r4,r4,13804
  8205d8:	294b883a 	add	r5,r5,r5
  8205dc:	294b883a 	add	r5,r5,r5
  8205e0:	29403fcc 	andi	r5,r5,255
  8205e4:	280ad1fa 	srli	r5,r5,7
  8205e8:	0823cb80 	call	823cb8 <printf>
  8205ec:	81400003 	ldbu	r5,0(r16)
  8205f0:	010020f4 	movhi	r4,131
  8205f4:	210d7b04 	addi	r4,r4,13804
  8205f8:	280ad13a 	srli	r5,r5,4
  8205fc:	2940004c 	andi	r5,r5,1
  820600:	0823cb80 	call	823cb8 <printf>
  820604:	81400003 	ldbu	r5,0(r16)
  820608:	010020f4 	movhi	r4,131
  82060c:	210d7b04 	addi	r4,r4,13804
  820610:	280ad0fa 	srli	r5,r5,3
  820614:	2940004c 	andi	r5,r5,1
  820618:	0823cb80 	call	823cb8 <printf>
  82061c:	81400003 	ldbu	r5,0(r16)
  820620:	010020f4 	movhi	r4,131
  820624:	210d7b04 	addi	r4,r4,13804
  820628:	280ad0ba 	srli	r5,r5,2
  82062c:	2940004c 	andi	r5,r5,1
  820630:	0823cb80 	call	823cb8 <printf>
  820634:	81400003 	ldbu	r5,0(r16)
  820638:	010020f4 	movhi	r4,131
  82063c:	210d7b04 	addi	r4,r4,13804
  820640:	280ad07a 	srli	r5,r5,1
  820644:	2940004c 	andi	r5,r5,1
  820648:	0823cb80 	call	823cb8 <printf>
  82064c:	81400003 	ldbu	r5,0(r16)
  820650:	010020f4 	movhi	r4,131
  820654:	210d7b04 	addi	r4,r4,13804
  820658:	84000044 	addi	r16,r16,1
  82065c:	280a91fa 	slli	r5,r5,7
  820660:	29403fcc 	andi	r5,r5,255
  820664:	280ac03a 	cmpne	r5,r5,zero
  820668:	0823cb80 	call	823cb8 <printf>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
  82066c:	8c3fcb1e 	bne	r17,r16,82059c <print_bitstream+0x1c>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  820670:	01000284 	movi	r4,10
}
  820674:	dfc00217 	ldw	ra,8(sp)
  820678:	dc400117 	ldw	r17,4(sp)
  82067c:	dc000017 	ldw	r16,0(sp)
  820680:	dec00304 	addi	sp,sp,12
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  820684:	0823d301 	jmpi	823d30 <putchar>

00820688 <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  820688:	deffff04 	addi	sp,sp,-4
  82068c:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
  820690:	010020f4 	movhi	r4,131
  820694:	210d7c04 	addi	r4,r4,13808

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  820698:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
  82069c:	0823cb80 	call	823cb8 <printf>
    exit(-1);
  8206a0:	013fffc4 	movi	r4,-1
  8206a4:	08235180 	call	823518 <exit>

008206a8 <idct>:
	 int scratchpad_input1,scratchpad_input2;
	 int scratchpad_output;

	 scratchpad_input1 = input[0];
	 scratchpad_input2 = input[1];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0,scratchpad_input1,scratchpad_input2);
  8206a8:	21800017 	ldw	r6,0(r4)
  8206ac:	20800117 	ldw	r2,4(r4)
  8206b0:	308dc032 	custom	0,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[2];
	 scratchpad_input2 = input[3];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST( 0x10 ,scratchpad_input1,scratchpad_input2);
  8206b4:	20c00217 	ldw	r3,8(r4)
  8206b8:	20800317 	ldw	r2,12(r4)
  8206bc:	1887c432 	custom	16,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[4];
	 scratchpad_input2 = input[5];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST( 0x2 ,scratchpad_input1,scratchpad_input2);
  8206c0:	21800417 	ldw	r6,16(r4)
  8206c4:	20800517 	ldw	r2,20(r4)
  8206c8:	308dc0b2 	custom	2,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[6];
	 scratchpad_input2 = input[7];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x12,scratchpad_input1,scratchpad_input2);
  8206cc:	20c00617 	ldw	r3,24(r4)
  8206d0:	20800717 	ldw	r2,28(r4)
  8206d4:	1887c4b2 	custom	18,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[8];
	 scratchpad_input2 = input[9];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x4,scratchpad_input1,scratchpad_input2);
  8206d8:	21800817 	ldw	r6,32(r4)
  8206dc:	20800917 	ldw	r2,36(r4)
  8206e0:	308dc132 	custom	4,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[10];
	 scratchpad_input2 = input[11];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x14,scratchpad_input1,scratchpad_input2);
  8206e4:	20c00a17 	ldw	r3,40(r4)
  8206e8:	20800b17 	ldw	r2,44(r4)
  8206ec:	1887c532 	custom	20,r3,r3,r2
	 //printf("2 %d\n",scratchpad_input2);
	 ////printf("%d\n",scratchpad_output);

	 scratchpad_input1 = input[12];
	 scratchpad_input2 = input[13];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x6,scratchpad_input1,scratchpad_input2);
  8206f0:	21800c17 	ldw	r6,48(r4)
  8206f4:	20800d17 	ldw	r2,52(r4)
  8206f8:	308dc1b2 	custom	6,r6,r6,r2
	 //printf("2 %d\n",scratchpad_input2);
	 ////printf("%d\n",scratchpad_output);

	 scratchpad_input1 = input[14];
	 scratchpad_input2 = input[15];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x16,scratchpad_input1,scratchpad_input2);
  8206fc:	20c00e17 	ldw	r3,56(r4)
  820700:	20800f17 	ldw	r2,60(r4)
  820704:	1887c5b2 	custom	22,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[16];
	 scratchpad_input2 = input[17];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x08,scratchpad_input1,scratchpad_input2);
  820708:	21801017 	ldw	r6,64(r4)
  82070c:	20801117 	ldw	r2,68(r4)
  820710:	308dc232 	custom	8,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[18];
	 scratchpad_input2 = input[19];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x18,scratchpad_input1,scratchpad_input2);
  820714:	20c01217 	ldw	r3,72(r4)
  820718:	20801317 	ldw	r2,76(r4)
  82071c:	1887c632 	custom	24,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[20];
	 scratchpad_input2 = input[21];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0a,scratchpad_input1,scratchpad_input2);
  820720:	21801417 	ldw	r6,80(r4)
  820724:	20801517 	ldw	r2,84(r4)
  820728:	308dc2b2 	custom	10,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[22];
	 scratchpad_input2 = input[23];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1a,scratchpad_input1,scratchpad_input2);
  82072c:	20c01617 	ldw	r3,88(r4)
  820730:	20801717 	ldw	r2,92(r4)
  820734:	1887c6b2 	custom	26,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[24];
	 scratchpad_input2 = input[25];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0c,scratchpad_input1,scratchpad_input2);
  820738:	21801817 	ldw	r6,96(r4)
  82073c:	20801917 	ldw	r2,100(r4)
  820740:	308dc332 	custom	12,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[26];
	 scratchpad_input2 = input[27];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1c,scratchpad_input1,scratchpad_input2);
  820744:	20c01a17 	ldw	r3,104(r4)
  820748:	20801b17 	ldw	r2,108(r4)
  82074c:	1887c732 	custom	28,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[28];
	 scratchpad_input2 = input[29];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0e,scratchpad_input1,scratchpad_input2);
  820750:	21801c17 	ldw	r6,112(r4)
  820754:	20801d17 	ldw	r2,116(r4)
  820758:	308dc3b2 	custom	14,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[30];
	 scratchpad_input2 = input[31];
  82075c:	21c01f17 	ldw	r7,124(r4)
	 scratchpad_input2 = input[29];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0e,scratchpad_input1,scratchpad_input2);
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[30];
  820760:	20801e17 	ldw	r2,120(r4)
	 scratchpad_input2 = input[31];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
  820764:	11c7c7b2 	custom	30,r3,r2,r7
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
  820768:	11c5c7b2 	custom	30,r2,r2,r7
	 ////printf("1 %d\n",scratchpad_input1);
	 ////printf("2 %d\n",scratchpad_input2);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x01,0,0);
  82076c:	0007883a 	mov	r3,zero
  820770:	18c9c072 	custom	1,r4,r3,r3
	 block[0][0] = scratchpad_output >> 16;
  820774:	2005d43a 	srai	r2,r4,16
	 block[1][0] = scratchpad_output & 0xffff;
  820778:	2b400204 	addi	r13,r5,8
	 ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
	 ////printf("1 %d\n",scratchpad_input1);
	 ////printf("2 %d\n",scratchpad_input2);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x01,0,0);
	 block[0][0] = scratchpad_output >> 16;
  82077c:	28800005 	stb	r2,0(r5)
	 block[1][0] = scratchpad_output & 0xffff;
  820780:	69000005 	stb	r4,0(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x11,0,0);
  820784:	18cdc472 	custom	17,r6,r3,r3
	 block[2][0] = scratchpad_output >> 16;
  820788:	3005d43a 	srai	r2,r6,16
  82078c:	2ac00404 	addi	r11,r5,16
	 block[3][0] = scratchpad_output & 0xffff;
  820790:	2b000604 	addi	r12,r5,24
	 block[0][0] = scratchpad_output >> 16;
	 block[1][0] = scratchpad_output & 0xffff;
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x11,0,0);
	 block[2][0] = scratchpad_output >> 16;
  820794:	58800005 	stb	r2,0(r11)
	 block[3][0] = scratchpad_output & 0xffff;
  820798:	61800005 	stb	r6,0(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x21,0,0);
  82079c:	18c9c872 	custom	33,r4,r3,r3
	 block[4][0] = scratchpad_output >> 16;
  8207a0:	2005d43a 	srai	r2,r4,16
  8207a4:	2a400804 	addi	r9,r5,32
	 block[5][0] = scratchpad_output & 0xffff;
  8207a8:	2a800a04 	addi	r10,r5,40
	 block[2][0] = scratchpad_output >> 16;
	 block[3][0] = scratchpad_output & 0xffff;
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x21,0,0);
	 block[4][0] = scratchpad_output >> 16;
  8207ac:	48800005 	stb	r2,0(r9)
	 block[5][0] = scratchpad_output & 0xffff;
  8207b0:	51000005 	stb	r4,0(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x31,0,0);
  8207b4:	18cdcc72 	custom	49,r6,r3,r3
	 block[6][0] = scratchpad_output >> 16;
  8207b8:	3005d43a 	srai	r2,r6,16
  8207bc:	29c00c04 	addi	r7,r5,48
	 block[7][0] = scratchpad_output & 0xffff;
  8207c0:	2a000e04 	addi	r8,r5,56
	 block[4][0] = scratchpad_output >> 16;
	 block[5][0] = scratchpad_output & 0xffff;
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x31,0,0);
	 block[6][0] = scratchpad_output >> 16;
  8207c4:	38800005 	stb	r2,0(r7)
	 block[7][0] = scratchpad_output & 0xffff;
  8207c8:	41800005 	stb	r6,0(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x03,0,0);
  8207cc:	18c9c0f2 	custom	3,r4,r3,r3
	 block[0][1] = scratchpad_output >> 16;
  8207d0:	2005d43a 	srai	r2,r4,16
  8207d4:	28800045 	stb	r2,1(r5)
	 block[1][1] = scratchpad_output & 0xffff;
  8207d8:	69000045 	stb	r4,1(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x13,0,0);
  8207dc:	18cdc4f2 	custom	19,r6,r3,r3
	 block[2][1] = scratchpad_output >> 16;
  8207e0:	3005d43a 	srai	r2,r6,16
  8207e4:	58800045 	stb	r2,1(r11)
	 block[3][1] = scratchpad_output & 0xffff;
  8207e8:	61800045 	stb	r6,1(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x23,0,0);
  8207ec:	18c9c8f2 	custom	35,r4,r3,r3
	 block[4][1] = scratchpad_output >> 16;
  8207f0:	2005d43a 	srai	r2,r4,16
  8207f4:	48800045 	stb	r2,1(r9)
	 block[5][1] = scratchpad_output & 0xffff;
  8207f8:	51000045 	stb	r4,1(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x33,0,0);
  8207fc:	18cdccf2 	custom	51,r6,r3,r3
	 block[6][1] = scratchpad_output >> 16;
  820800:	3005d43a 	srai	r2,r6,16
  820804:	38800045 	stb	r2,1(r7)
	 block[7][1] = scratchpad_output & 0xffff;
  820808:	41800045 	stb	r6,1(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x05,0,0);
  82080c:	18c9c172 	custom	5,r4,r3,r3
	 block[0][2] = scratchpad_output >> 16;
  820810:	2005d43a 	srai	r2,r4,16
  820814:	28800085 	stb	r2,2(r5)
	 block[1][2] = scratchpad_output & 0xffff;
  820818:	69000085 	stb	r4,2(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x15,0,0);
  82081c:	18cdc572 	custom	21,r6,r3,r3
	 block[2][2] = scratchpad_output >> 16;
  820820:	3005d43a 	srai	r2,r6,16
  820824:	58800085 	stb	r2,2(r11)
	 block[3][2] = scratchpad_output & 0xffff;
  820828:	61800085 	stb	r6,2(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x25,0,0);
  82082c:	18c9c972 	custom	37,r4,r3,r3
	 block[4][2] = scratchpad_output >> 16;
  820830:	2005d43a 	srai	r2,r4,16
  820834:	48800085 	stb	r2,2(r9)
	 block[5][2] = scratchpad_output & 0xffff;
  820838:	51000085 	stb	r4,2(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x35,0,0);
  82083c:	18cdcd72 	custom	53,r6,r3,r3
	 block[6][2] = scratchpad_output >> 16;
  820840:	3005d43a 	srai	r2,r6,16
  820844:	38800085 	stb	r2,2(r7)
	 block[7][2] = scratchpad_output & 0xffff;
  820848:	41800085 	stb	r6,2(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x07,0,0);
  82084c:	18c9c1f2 	custom	7,r4,r3,r3
	 block[0][3] = scratchpad_output >> 16;
  820850:	2005d43a 	srai	r2,r4,16
  820854:	288000c5 	stb	r2,3(r5)
	 block[1][3] = scratchpad_output & 0xffff;
  820858:	690000c5 	stb	r4,3(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x17,0,0);
  82085c:	18cdc5f2 	custom	23,r6,r3,r3
	 block[2][3] = scratchpad_output >> 16;
  820860:	3005d43a 	srai	r2,r6,16
  820864:	588000c5 	stb	r2,3(r11)
	 block[3][3] = scratchpad_output & 0xffff;
  820868:	618000c5 	stb	r6,3(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x27,0,0);
  82086c:	18c9c9f2 	custom	39,r4,r3,r3
	 block[4][3] = scratchpad_output >> 16;
  820870:	2005d43a 	srai	r2,r4,16
  820874:	488000c5 	stb	r2,3(r9)
	 block[5][3] = scratchpad_output & 0xffff;
  820878:	510000c5 	stb	r4,3(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x37,0,0);
  82087c:	18cdcdf2 	custom	55,r6,r3,r3
	 block[6][3] = scratchpad_output >> 16;
  820880:	3005d43a 	srai	r2,r6,16
  820884:	388000c5 	stb	r2,3(r7)
	 block[7][3] = scratchpad_output & 0xffff;
  820888:	418000c5 	stb	r6,3(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x09,0,0);
  82088c:	18c9c272 	custom	9,r4,r3,r3
	 block[0][4] = scratchpad_output >> 16;
  820890:	2005d43a 	srai	r2,r4,16
  820894:	28800105 	stb	r2,4(r5)
	 block[1][4] = scratchpad_output & 0xffff;
  820898:	69000105 	stb	r4,4(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x19,0,0);
  82089c:	18cdc672 	custom	25,r6,r3,r3
	 block[2][4] = scratchpad_output >> 16;
  8208a0:	3005d43a 	srai	r2,r6,16
  8208a4:	58800105 	stb	r2,4(r11)
	 block[3][4] = scratchpad_output & 0xffff;
  8208a8:	61800105 	stb	r6,4(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x29,0,0);
  8208ac:	18c9ca72 	custom	41,r4,r3,r3
	 block[4][4] = scratchpad_output >> 16;
  8208b0:	2005d43a 	srai	r2,r4,16
  8208b4:	48800105 	stb	r2,4(r9)
	 block[5][4] = scratchpad_output & 0xffff;
  8208b8:	51000105 	stb	r4,4(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x39,0,0);
  8208bc:	18cdce72 	custom	57,r6,r3,r3
	 block[6][4] = scratchpad_output >> 16;
  8208c0:	3005d43a 	srai	r2,r6,16
  8208c4:	38800105 	stb	r2,4(r7)
	 block[7][4] = scratchpad_output & 0xffff;
  8208c8:	41800105 	stb	r6,4(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0b,0,0);
  8208cc:	18c9c2f2 	custom	11,r4,r3,r3
	 block[0][5] = scratchpad_output >> 16;
  8208d0:	2005d43a 	srai	r2,r4,16
  8208d4:	28800145 	stb	r2,5(r5)
	 block[1][5] = scratchpad_output & 0xffff;
  8208d8:	69000145 	stb	r4,5(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1b,0,0);
  8208dc:	18cdc6f2 	custom	27,r6,r3,r3
	 block[2][5] = scratchpad_output >> 16;
  8208e0:	3005d43a 	srai	r2,r6,16
  8208e4:	58800145 	stb	r2,5(r11)
	 block[3][5] = scratchpad_output & 0xffff;
  8208e8:	61800145 	stb	r6,5(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2b,0,0);
  8208ec:	18c9caf2 	custom	43,r4,r3,r3
	 block[4][5] = scratchpad_output >> 16;
  8208f0:	2005d43a 	srai	r2,r4,16
  8208f4:	48800145 	stb	r2,5(r9)
	 block[5][5] = scratchpad_output & 0xffff;
  8208f8:	51000145 	stb	r4,5(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3b,0,0);
  8208fc:	18cdcef2 	custom	59,r6,r3,r3
	 block[6][5] = scratchpad_output >> 16;
  820900:	3005d43a 	srai	r2,r6,16
  820904:	38800145 	stb	r2,5(r7)
	 block[7][5] = scratchpad_output & 0xffff;
  820908:	41800145 	stb	r6,5(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0d,0,0);
  82090c:	18c9c372 	custom	13,r4,r3,r3
	 block[0][6] = scratchpad_output >> 16;
  820910:	2005d43a 	srai	r2,r4,16
  820914:	28800185 	stb	r2,6(r5)
	 block[1][6] = scratchpad_output & 0xffff;
  820918:	69000185 	stb	r4,6(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1d,0,0);
  82091c:	18cdc772 	custom	29,r6,r3,r3
	 block[2][6] = scratchpad_output >> 16;
  820920:	3005d43a 	srai	r2,r6,16
  820924:	58800185 	stb	r2,6(r11)
	 block[3][6] = scratchpad_output & 0xffff;
  820928:	61800185 	stb	r6,6(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2d,0,0);
  82092c:	18c9cb72 	custom	45,r4,r3,r3
	 block[4][6] = scratchpad_output >> 16;
  820930:	2005d43a 	srai	r2,r4,16
  820934:	48800185 	stb	r2,6(r9)
	 block[5][6] = scratchpad_output & 0xffff;
  820938:	51000185 	stb	r4,6(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3d,0,0);
  82093c:	18cdcf72 	custom	61,r6,r3,r3
	 block[6][6] = scratchpad_output >> 16;
  820940:	3005d43a 	srai	r2,r6,16
  820944:	38800185 	stb	r2,6(r7)
	 block[7][6] = scratchpad_output & 0xffff;
  820948:	41800185 	stb	r6,6(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0f,0,0);
  82094c:	18c9c3f2 	custom	15,r4,r3,r3
	 block[0][7] = scratchpad_output >> 16;
  820950:	2005d43a 	srai	r2,r4,16
  820954:	288001c5 	stb	r2,7(r5)
	 block[1][7] = scratchpad_output & 0xffff;
  820958:	690001c5 	stb	r4,7(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1f,0,0);
  82095c:	18cbc7f2 	custom	31,r5,r3,r3
	 block[2][7] = scratchpad_output >> 16;
  820960:	2805d43a 	srai	r2,r5,16
  820964:	588001c5 	stb	r2,7(r11)
	 block[3][7] = scratchpad_output & 0xffff;
  820968:	614001c5 	stb	r5,7(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2f,0,0);
  82096c:	18c9cbf2 	custom	47,r4,r3,r3
	 block[4][7] = scratchpad_output >> 16;
  820970:	2005d43a 	srai	r2,r4,16
  820974:	488001c5 	stb	r2,7(r9)
	 block[5][7] = scratchpad_output & 0xffff;
  820978:	510001c5 	stb	r4,7(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3f,0,0);
  82097c:	18c7cff2 	custom	63,r3,r3,r3
	 block[6][7] = scratchpad_output >> 16;
  820980:	1805d43a 	srai	r2,r3,16
  820984:	388001c5 	stb	r2,7(r7)
	 block[7][7] = scratchpad_output & 0xffff;
  820988:	40c001c5 	stb	r3,7(r8)
	 //printf("**** %d\n",scratchpad_output);

}
  82098c:	f800283a 	ret

00820990 <update_buffer>:
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  820990:	20c00017 	ldw	r3,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  820994:	30800017 	ldw	r2,0(r6)
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  820998:	39c03fcc 	andi	r7,r7,255
  82099c:	19d2983a 	sll	r9,r3,r7
    //total number of bits to be shifted in
    *pbitcount += size;
  8209a0:	388f883a 	add	r7,r7,r2
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8209a4:	008001c4 	movi	r2,7
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8209a8:	3abffe04 	addi	r10,r7,-8
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  8209ac:	3b4001cc 	andi	r13,r7,7
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  8209b0:	22400015 	stw	r9,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  8209b4:	31c00015 	stw	r7,0(r6)
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8209b8:	11c01c0e 	bge	r2,r7,820a2c <update_buffer+0x9c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8209bc:	2a000017 	ldw	r8,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8209c0:	3b3ffc04 	addi	r12,r7,-16
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8209c4:	40800003 	ldbu	r2,0(r8)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8209c8:	40c00044 	addi	r3,r8,1
  8209cc:	28c00015 	stw	r3,0(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8209d0:	1284983a 	sll	r2,r2,r10
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8209d4:	42c00084 	addi	r11,r8,2
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8209d8:	4886b03a 	or	r3,r9,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8209dc:	008003c4 	movi	r2,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8209e0:	20c00015 	stw	r3,0(r4)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8209e4:	11c0110e 	bge	r2,r7,820a2c <update_buffer+0x9c>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8209e8:	40800043 	ldbu	r2,1(r8)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8209ec:	3abffa04 	addi	r10,r7,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8209f0:	424000c4 	addi	r9,r8,3
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8209f4:	1304983a 	sll	r2,r2,r12
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8209f8:	2ac00015 	stw	r11,0(r5)
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8209fc:	1886b03a 	or	r3,r3,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  820a00:	008005c4 	movi	r2,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820a04:	20c00015 	stw	r3,0(r4)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  820a08:	11c0080e 	bge	r2,r7,820a2c <update_buffer+0x9c>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820a0c:	40800083 	ldbu	r2,2(r8)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820a10:	42c00104 	addi	r11,r8,4
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820a14:	2a400015 	stw	r9,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820a18:	1284983a 	sll	r2,r2,r10
  820a1c:	1886b03a 	or	r3,r3,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  820a20:	00800804 	movi	r2,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820a24:	20c00015 	stw	r3,0(r4)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  820a28:	38800226 	beq	r7,r2,820a34 <update_buffer+0xa4>
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  820a2c:	33400015 	stw	r13,0(r6)
}
  820a30:	f800283a 	ret
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820a34:	408000c3 	ldbu	r2,3(r8)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820a38:	2ac00015 	stw	r11,0(r5)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  820a3c:	33400015 	stw	r13,0(r6)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820a40:	1884b03a 	or	r2,r3,r2
  820a44:	20800015 	stw	r2,0(r4)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
}
  820a48:	f800283a 	ret

00820a4c <input_DC>:
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820a4c:	2006913a 	slli	r3,r4,4

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  820a50:	2008d73a 	srli	r4,r4,28
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820a54:	00800804 	movi	r2,32
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
  820a58:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  820a5c:	21403fcc 	andi	r5,r4,255
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820a60:	1145c83a 	sub	r2,r2,r5
  820a64:	188cd83a 	srl	r6,r3,r2
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  820a68:	02000104 	movi	r8,4
  820a6c:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820a70:	28bfffc4 	addi	r2,r5,-1
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  820a74:	28000626 	beq	r5,zero,820a90 <input_DC+0x44>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820a78:	3086d83a 	srl	r3,r6,r2
  820a7c:	00bfffc4 	movi	r2,-1
  820a80:	300f883a 	mov	r7,r6
  820a84:	1144983a 	sll	r2,r2,r5
  820a88:	18000a26 	beq	r3,zero,820ab4 <input_DC+0x68>
        ib.bits = size + 4;
  820a8c:	22000104 	addi	r8,r4,4
    }
    return ib;
  820a90:	d8800045 	stb	r2,1(sp)
  820a94:	da000005 	stb	r8,0(sp)
  820a98:	38bfffcc 	andi	r2,r7,65535
  820a9c:	d8c0000b 	ldhu	r3,0(sp)
  820aa0:	1004943a 	slli	r2,r2,16
  820aa4:	d9c0008d 	sth	r7,2(sp)
}
  820aa8:	1884b03a 	or	r2,r3,r2
  820aac:	dec00104 	addi	sp,sp,4
  820ab0:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820ab4:	10800044 	addi	r2,r2,1
  820ab8:	308f883a 	add	r7,r6,r2
  820abc:	003ff306 	br	820a8c <input_DC+0x40>

00820ac0 <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  820ac0:	2004913a 	slli	r2,r4,4
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820ac4:	2006923a 	slli	r3,r4,8
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
  820ac8:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  820acc:	1010d73a 	srli	r8,r2,28
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820ad0:	00800804 	movi	r2,32
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  820ad4:	02400204 	movi	r9,8
  820ad8:	41403fcc 	andi	r5,r8,255
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820adc:	1145c83a 	sub	r2,r2,r5
  820ae0:	188cd83a 	srl	r6,r3,r2
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  820ae4:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820ae8:	28ffffc4 	addi	r3,r5,-1
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  820aec:	28000726 	beq	r5,zero,820b0c <input_AC+0x4c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820af0:	00bfffc4 	movi	r2,-1
  820af4:	1144983a 	sll	r2,r2,r5
  820af8:	30c6d83a 	srl	r3,r6,r3
  820afc:	300f883a 	mov	r7,r6
  820b00:	10800044 	addi	r2,r2,1
  820b04:	18000b26 	beq	r3,zero,820b34 <input_AC+0x74>
        ib.bits = size + 8;
  820b08:	42400204 	addi	r9,r8,8
    }
    return ib;
  820b0c:	2004d73a 	srli	r2,r4,28
  820b10:	38ffffcc 	andi	r3,r7,65535
  820b14:	da400005 	stb	r9,0(sp)
  820b18:	d8800045 	stb	r2,1(sp)
  820b1c:	1806943a 	slli	r3,r3,16
  820b20:	d880000b 	ldhu	r2,0(sp)
  820b24:	d9c0008d 	sth	r7,2(sp)
}
  820b28:	10c4b03a 	or	r2,r2,r3
  820b2c:	dec00104 	addi	sp,sp,4
  820b30:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820b34:	308f883a 	add	r7,r6,r2
  820b38:	003ff306 	br	820b08 <input_AC+0x48>

00820b3c <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  820b3c:	defffa04 	addi	sp,sp,-24
  820b40:	dd400515 	stw	r21,20(sp)
  820b44:	dd000415 	stw	r20,16(sp)
  820b48:	dcc00315 	stw	r19,12(sp)
  820b4c:	dc800215 	stw	r18,8(sp)
  820b50:	dc400115 	stw	r17,4(sp)
  820b54:	dc000015 	stw	r16,0(sp)
  820b58:	2029883a 	mov	r20,r4
  820b5c:	2811883a 	mov	r8,r5
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820b60:	29000003 	ldbu	r4,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820b64:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820b68:	28800083 	ldbu	r2,2(r5)
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  820b6c:	dd400617 	ldw	r21,24(sp)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820b70:	294000c3 	ldbu	r5,3(r5)
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  820b74:	0500b70e 	bge	zero,r20,820e54 <lossless_decode+0x318>
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820b78:	18c03fcc 	andi	r3,r3,255
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820b7c:	2008963a 	slli	r4,r4,24
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820b80:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820b84:	10803fcc 	andi	r2,r2,255
  820b88:	1004923a 	slli	r2,r2,8
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820b8c:	20c8b03a 	or	r4,r4,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820b90:	29403fcc 	andi	r5,r5,255
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820b94:	2088b03a 	or	r4,r4,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820b98:	214ab03a 	or	r5,r4,r5
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820b9c:	43000104 	addi	r12,r8,4
  820ba0:	0027883a 	mov	r19,zero
  820ba4:	0025883a 	mov	r18,zero
  820ba8:	001d883a 	mov	r14,zero
  820bac:	a81f003a 	cmpeq	r15,r21,zero

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  820bb0:	2812d73a 	srli	r9,r5,28
    if(size == 0){
  820bb4:	4a003fcc 	andi	r8,r9,255
  820bb8:	4000d41e 	bne	r8,zero,820f0c <lossless_decode+0x3d0>
  820bbc:	0009883a 	mov	r4,zero
  820bc0:	00800104 	movi	r2,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  820bc4:	1391883a 	add	r8,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  820bc8:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  820bcc:	008001c4 	movi	r2,7
  820bd0:	1200160e 	bge	r2,r8,820c2c <lossless_decode+0xf0>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820bd4:	60800003 	ldbu	r2,0(r12)
  820bd8:	40fffe04 	addi	r3,r8,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820bdc:	62400044 	addi	r9,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820be0:	10c4983a 	sll	r2,r2,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  820be4:	00c003c4 	movi	r3,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820be8:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  820bec:	1a000e0e 	bge	r3,r8,820c28 <lossless_decode+0xec>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820bf0:	60800043 	ldbu	r2,1(r12)
  820bf4:	40fffc04 	addi	r3,r8,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820bf8:	62400084 	addi	r9,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820bfc:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  820c00:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820c04:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  820c08:	1a00070e 	bge	r3,r8,820c28 <lossless_decode+0xec>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820c0c:	60800083 	ldbu	r2,2(r12)
  820c10:	40fffa04 	addi	r3,r8,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820c14:	624000c4 	addi	r9,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820c18:	10c4983a 	sll	r2,r2,r3
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  820c1c:	00c00804 	movi	r3,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820c20:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  820c24:	40c0d326 	beq	r8,r3,820f74 <lossless_decode+0x438>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820c28:	4819883a 	mov	r12,r9
        
        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
  820c2c:	7800c91e 	bne	r15,zero,820f54 <lossless_decode+0x418>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
  820c30:	3880000b 	ldhu	r2,0(r7)
  820c34:	30c0000b 	ldhu	r3,0(r6)
  820c38:	2085383a 	mul	r2,r4,r2
  820c3c:	10c5883a 	add	r2,r2,r3
  820c40:	3080000d 	sth	r2,0(r6)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  820c44:	438001cc 	andi	r14,r8,7
  820c48:	02400044 	movi	r9,1
  820c4c:	04400804 	movi	r17,32
  820c50:	040003c4 	movi	r16,15
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  820c54:	2804913a 	slli	r2,r5,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  820c58:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  820c5c:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  820c60:	52003fcc 	andi	r8,r10,255
  820c64:	4000281e 	bne	r8,zero,820d08 <lossless_decode+0x1cc>
  820c68:	001b883a 	mov	r13,zero
  820c6c:	00800204 	movi	r2,8
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  820c70:	1389883a 	add	r4,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  820c74:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  820c78:	008001c4 	movi	r2,7
  820c7c:	1100140e 	bge	r2,r4,820cd0 <lossless_decode+0x194>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820c80:	60800003 	ldbu	r2,0(r12)
  820c84:	20fffe04 	addi	r3,r4,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820c88:	62000044 	addi	r8,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  820c8c:	10c4983a 	sll	r2,r2,r3
  820c90:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  820c94:	81000d0e 	bge	r16,r4,820ccc <lossless_decode+0x190>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820c98:	60800043 	ldbu	r2,1(r12)
  820c9c:	20fffc04 	addi	r3,r4,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820ca0:	62000084 	addi	r8,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820ca4:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  820ca8:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  820cac:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  820cb0:	1900060e 	bge	r3,r4,820ccc <lossless_decode+0x190>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820cb4:	60800083 	ldbu	r2,2(r12)
  820cb8:	20fffa04 	addi	r3,r4,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820cbc:	620000c4 	addi	r8,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  820cc0:	10c4983a 	sll	r2,r2,r3
  820cc4:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  820cc8:	24401c26 	beq	r4,r17,820d3c <lossless_decode+0x200>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820ccc:	4019883a 	mov	r12,r8
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  820cd0:	68bfffcc 	andi	r2,r13,65535
  820cd4:	10a0001c 	xori	r2,r2,32768
  820cd8:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  820cdc:	238001cc 	andi	r14,r4,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  820ce0:	10001e1e 	bne	r2,zero,820d5c <lossless_decode+0x220>
                if(ib.runlength == 15){
  820ce4:	58803fcc 	andi	r2,r11,255
  820ce8:	1400731e 	bne	r2,r16,820eb8 <lossless_decode+0x37c>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
  820cec:	7800611e 	bne	r15,zero,820e74 <lossless_decode+0x338>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  820cf0:	2804913a 	slli	r2,r5,4
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
  820cf4:	4a400404 	addi	r9,r9,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  820cf8:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  820cfc:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  820d00:	52003fcc 	andi	r8,r10,255
  820d04:	403fd826 	beq	r8,zero,820c68 <lossless_decode+0x12c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820d08:	2808923a 	slli	r4,r5,8
  820d0c:	8a07c83a 	sub	r3,r17,r8
  820d10:	40bfffc4 	addi	r2,r8,-1
  820d14:	20c8d83a 	srl	r4,r4,r3
  820d18:	2084d83a 	srl	r2,r4,r2
  820d1c:	1000241e 	bne	r2,zero,820db0 <lossless_decode+0x274>
  820d20:	00bfffc4 	movi	r2,-1
  820d24:	1204983a 	sll	r2,r2,r8
  820d28:	10800044 	addi	r2,r2,1
  820d2c:	209b883a 	add	r13,r4,r2
  820d30:	50800204 	addi	r2,r10,8
  820d34:	10803fcc 	andi	r2,r2,255
  820d38:	003fcd06 	br	820c70 <lossless_decode+0x134>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820d3c:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  820d40:	238001cc 	andi	r14,r4,7
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820d44:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820d48:	288ab03a 	or	r5,r5,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  820d4c:	68bfffcc 	andi	r2,r13,65535
  820d50:	10a0001c 	xori	r2,r2,32768
  820d54:	10a00004 	addi	r2,r2,-32768
  820d58:	103fe226 	beq	r2,zero,820ce4 <lossless_decode+0x1a8>
                    //if P == 1, then don't change the values
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
  820d5c:	7800161e 	bne	r15,zero,820db8 <lossless_decode+0x27c>
                    index += ib.runlength;
  820d60:	4ad3883a 	add	r9,r9,r11
                        pe[zigzag_table[index]] = 0;
                }
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  820d64:	4a003fcc 	andi	r8,r9,255
  820d68:	4205883a 	add	r2,r8,r8
  820d6c:	1085883a 	add	r2,r2,r2
  820d70:	02c020f4 	movhi	r11,131
  820d74:	5acf3b04 	addi	r11,r11,15596
  820d78:	12c5883a 	add	r2,r2,r11
  820d7c:	10c00017 	ldw	r3,0(r2)
  820d80:	18c7883a 	add	r3,r3,r3
  820d84:	19c9883a 	add	r4,r3,r7
  820d88:	2080000b 	ldhu	r2,0(r4)
  820d8c:	30c7883a 	add	r3,r6,r3
  820d90:	1900000b 	ldhu	r4,0(r3)
  820d94:	6885383a 	mul	r2,r13,r2
  820d98:	1105883a 	add	r2,r2,r4
  820d9c:	1880000d 	sth	r2,0(r3)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  820da0:	00800f84 	movi	r2,62
  820da4:	12002836 	bltu	r2,r8,820e48 <lossless_decode+0x30c>
                index++;
  820da8:	4a400044 	addi	r9,r9,1
  820dac:	003fa906 	br	820c54 <lossless_decode+0x118>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820db0:	201b883a 	mov	r13,r4
  820db4:	003fde06 	br	820d30 <lossless_decode+0x1f4>
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
  820db8:	4ac7883a 	add	r3,r9,r11
                    for(; index < terminal; index++)
  820dbc:	4a003fcc 	andi	r8,r9,255
  820dc0:	18803fcc 	andi	r2,r3,255
  820dc4:	40805f2e 	bgeu	r8,r2,820f44 <lossless_decode+0x408>
  820dc8:	4005883a 	mov	r2,r8
  820dcc:	1815883a 	mov	r10,r3
  820dd0:	4809883a 	mov	r4,r9
  820dd4:	02c020f4 	movhi	r11,131
  820dd8:	5acf3b04 	addi	r11,r11,15596
  820ddc:	1a003fcc 	andi	r8,r3,255
                        pe[zigzag_table[index]] = 0;
  820de0:	1085883a 	add	r2,r2,r2
  820de4:	1085883a 	add	r2,r2,r2
  820de8:	12c5883a 	add	r2,r2,r11
  820dec:	10c00017 	ldw	r3,0(r2)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  820df0:	21000044 	addi	r4,r4,1
  820df4:	20803fcc 	andi	r2,r4,255
                        pe[zigzag_table[index]] = 0;
  820df8:	18c7883a 	add	r3,r3,r3
  820dfc:	1987883a 	add	r3,r3,r6
  820e00:	1800000d 	sth	zero,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  820e04:	123ff61e 	bne	r2,r8,820de0 <lossless_decode+0x2a4>
  820e08:	5005883a 	mov	r2,r10
  820e0c:	5013883a 	mov	r9,r10
  820e10:	52003fcc 	andi	r8,r10,255
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  820e14:	10803fcc 	andi	r2,r2,255
  820e18:	1085883a 	add	r2,r2,r2
  820e1c:	1085883a 	add	r2,r2,r2
  820e20:	12c5883a 	add	r2,r2,r11
  820e24:	10c00017 	ldw	r3,0(r2)
  820e28:	18c7883a 	add	r3,r3,r3
  820e2c:	19c9883a 	add	r4,r3,r7
  820e30:	2080000b 	ldhu	r2,0(r4)
  820e34:	30c7883a 	add	r3,r6,r3
  820e38:	6885383a 	mul	r2,r13,r2
  820e3c:	1880000d 	sth	r2,0(r3)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  820e40:	00800f84 	movi	r2,62
  820e44:	123fd82e 	bgeu	r2,r8,820da8 <lossless_decode+0x26c>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  820e48:	94800044 	addi	r18,r18,1
  820e4c:	31802004 	addi	r6,r6,128
  820e50:	a4bf571e 	bne	r20,r18,820bb0 <lossless_decode+0x74>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  820e54:	dd400517 	ldw	r21,20(sp)
  820e58:	dd000417 	ldw	r20,16(sp)
  820e5c:	dcc00317 	ldw	r19,12(sp)
  820e60:	dc800217 	ldw	r18,8(sp)
  820e64:	dc400117 	ldw	r17,4(sp)
  820e68:	dc000017 	ldw	r16,0(sp)
  820e6c:	dec00604 	addi	sp,sp,24
  820e70:	f800283a 	ret
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
  820e74:	48800404 	addi	r2,r9,16
                        for(; index < terminal; index++)
  820e78:	11003fcc 	andi	r4,r2,255
  820e7c:	4a003fcc 	andi	r8,r9,255
  820e80:	413f742e 	bgeu	r8,r4,820c54 <lossless_decode+0x118>
  820e84:	02c020f4 	movhi	r11,131
  820e88:	5acf3b04 	addi	r11,r11,15596
                            pe[zigzag_table[index]] = 0;
  820e8c:	4205883a 	add	r2,r8,r8
  820e90:	1085883a 	add	r2,r2,r2
  820e94:	12c5883a 	add	r2,r2,r11
  820e98:	10c00017 	ldw	r3,0(r2)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  820e9c:	4a400044 	addi	r9,r9,1
  820ea0:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  820ea4:	18c7883a 	add	r3,r3,r3
  820ea8:	1987883a 	add	r3,r3,r6
  820eac:	1800000d 	sth	zero,0(r3)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  820eb0:	413ff636 	bltu	r8,r4,820e8c <lossless_decode+0x350>
  820eb4:	003f6706 	br	820c54 <lossless_decode+0x118>
                            pe[zigzag_table[index]] = 0;
                    }
                }
                else {
                    //END
                    if(P == 0){
  820eb8:	a83fe31e 	bne	r21,zero,820e48 <lossless_decode+0x30c>
                        //output all zeros
                        for(; index < 64; index++)
  820ebc:	4a003fcc 	andi	r8,r9,255
  820ec0:	00800fc4 	movi	r2,63
  820ec4:	123fe036 	bltu	r2,r8,820e48 <lossless_decode+0x30c>
  820ec8:	02c020f4 	movhi	r11,131
  820ecc:	5acf3b04 	addi	r11,r11,15596
  820ed0:	01001004 	movi	r4,64
                            pe[zigzag_table[index]] = 0;
  820ed4:	4205883a 	add	r2,r8,r8
  820ed8:	1085883a 	add	r2,r2,r2
  820edc:	12c5883a 	add	r2,r2,r11
  820ee0:	10c00017 	ldw	r3,0(r2)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  820ee4:	4a400044 	addi	r9,r9,1
  820ee8:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  820eec:	18c7883a 	add	r3,r3,r3
  820ef0:	1987883a 	add	r3,r3,r6
  820ef4:	1800000d 	sth	zero,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  820ef8:	413ff61e 	bne	r8,r4,820ed4 <lossless_decode+0x398>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  820efc:	94800044 	addi	r18,r18,1
  820f00:	31802004 	addi	r6,r6,128
  820f04:	a4bf2a1e 	bne	r20,r18,820bb0 <lossless_decode+0x74>
  820f08:	003fd206 	br	820e54 <lossless_decode+0x318>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820f0c:	2804913a 	slli	r2,r5,4
  820f10:	00c00804 	movi	r3,32
  820f14:	1a07c83a 	sub	r3,r3,r8
  820f18:	10c6d83a 	srl	r3,r2,r3
  820f1c:	413fffc4 	addi	r4,r8,-1
  820f20:	1908d83a 	srl	r4,r3,r4
  820f24:	2000111e 	bne	r4,zero,820f6c <lossless_decode+0x430>
  820f28:	00bfffc4 	movi	r2,-1
  820f2c:	1204983a 	sll	r2,r2,r8
  820f30:	10800044 	addi	r2,r2,1
  820f34:	1889883a 	add	r4,r3,r2
  820f38:	48800104 	addi	r2,r9,4
  820f3c:	10803fcc 	andi	r2,r2,255
  820f40:	003f2006 	br	820bc4 <lossless_decode+0x88>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  820f44:	4805883a 	mov	r2,r9
  820f48:	02c020f4 	movhi	r11,131
  820f4c:	5acf3b04 	addi	r11,r11,15596
  820f50:	003fb006 	br	820e14 <lossless_decode+0x2d8>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  820f54:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  820f58:	9905883a 	add	r2,r19,r4
  820f5c:	1027883a 	mov	r19,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  820f60:	10c5383a 	mul	r2,r2,r3
  820f64:	3080000d 	sth	r2,0(r6)
  820f68:	003f3606 	br	820c44 <lossless_decode+0x108>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  820f6c:	1809883a 	mov	r4,r3
  820f70:	003ff106 	br	820f38 <lossless_decode+0x3fc>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820f74:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  820f78:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  820f7c:	288ab03a 	or	r5,r5,r2
  820f80:	003f2a06 	br	820c2c <lossless_decode+0xf0>

00820f84 <mjpeg423_decode>:
int last_tested;
int frame_index;
int current_frame;
int counter = 0;

int mjpeg423_decode(const char* filename_in) {
  820f84:	deffe904 	addi	sp,sp,-92
	//file streams
	FILE* file_in;

	flip = 0;
	//    alt_timestamp_start();
	short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
  820f88:	000b883a 	mov	r5,zero
int last_tested;
int frame_index;
int current_frame;
int counter = 0;

int mjpeg423_decode(const char* filename_in) {
  820f8c:	dfc01615 	stw	ra,88(sp)
  820f90:	df001515 	stw	fp,84(sp)
  820f94:	ddc01415 	stw	r23,80(sp)
  820f98:	dd801315 	stw	r22,76(sp)
  820f9c:	dd401215 	stw	r21,72(sp)
  820fa0:	dd001115 	stw	r20,68(sp)
  820fa4:	dcc01015 	stw	r19,64(sp)
  820fa8:	dc800f15 	stw	r18,60(sp)
  820fac:	dc400e15 	stw	r17,56(sp)
  820fb0:	dc000d15 	stw	r16,52(sp)
	uint32_t Ysize, Cbsize, frame_size, frame_type;

	//file streams
	FILE* file_in;

	flip = 0;
  820fb4:	d027b115 	stw	zero,-24892(gp)
	//    alt_timestamp_start();
	short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
  820fb8:	083147c0 	call	83147c <alt_up_sd_card_fopen>
	if (file_handle == -1) {
  820fbc:	10bfffcc 	andi	r2,r2,65535
  820fc0:	10a0001c 	xori	r2,r2,32768
  820fc4:	10a00004 	addi	r2,r2,-32768
  820fc8:	d8800b15 	stw	r2,44(sp)
  820fcc:	d8c00b17 	ldw	r3,44(sp)
  820fd0:	00bfffc4 	movi	r2,-1
  820fd4:	1881b226 	beq	r3,r2,8216a0 <mjpeg423_decode+0x71c>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if (!sd_card_create_sectors_list(file_handle)) {
  820fd8:	d9000b17 	ldw	r4,44(sp)
  820fdc:	0821c940 	call	821c94 <sd_card_create_sectors_list>
  820fe0:	10019726 	beq	r2,zero,821640 <mjpeg423_decode+0x6bc>
		error_and_exit("Cannot create sectors list\n");
	}

	//create filebuffer to hold entire file
	printf("File size: %d\n", sd_card_file_size(file_handle));
  820fe4:	d9000b17 	ldw	r4,44(sp)
  820fe8:	0821bd40 	call	821bd4 <sd_card_file_size>
  820fec:	100b883a 	mov	r5,r2
  820ff0:	010020f4 	movhi	r4,131
  820ff4:	210d8b04 	addi	r4,r4,13868
  820ff8:	0823cb80 	call	823cb8 <printf>

	int sectors_num = ceil(sd_card_file_size(file_handle) / 512.0);
  820ffc:	d9000b17 	ldw	r4,44(sp)
  821000:	0821bd40 	call	821bd4 <sd_card_file_size>
	if ((filebuffer = malloc(5 * 512)) == NULL) {
  821004:	01028004 	movi	r4,2560
  821008:	08235640 	call	823564 <malloc>
  82100c:	102d883a 	mov	r22,r2
  821010:	1001ab26 	beq	r2,zero,8216c0 <mjpeg423_decode+0x73c>
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	int sd_bytes_read = 0;
	sd_seek(0);
  821014:	0009883a 	mov	r4,zero
  821018:	0821bbc0 	call	821bbc <sd_seek>
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
  82101c:	800b883a 	mov	r5,r16
  821020:	010020f4 	movhi	r4,131
  821024:	210d9604 	addi	r4,r4,13912
  821028:	0823cb80 	call	823cb8 <printf>
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
  82102c:	b009883a 	mov	r4,r22
  821030:	01400504 	movi	r5,20
  821034:	0821e540 	call	821e54 <sd_read>
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
  821038:	b0c00104 	addi	r3,r22,4
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
  82103c:	b0800204 	addi	r2,r22,8
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
  821040:	b1000304 	addi	r4,r22,12
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
  821044:	1a400043 	ldbu	r9,1(r3)
  821048:	1a800083 	ldbu	r10,2(r3)
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
  82104c:	13000043 	ldbu	r12,1(r2)
  821050:	13400083 	ldbu	r13,2(r2)
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
  821054:	23800043 	ldbu	r14,1(r4)
  821058:	23c00083 	ldbu	r15,2(r4)
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
  82105c:	1c0000c3 	ldbu	r16,3(r3)
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
  821060:	144000c3 	ldbu	r17,3(r2)
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
  821064:	248000c3 	ldbu	r18,3(r4)
  821068:	b2000303 	ldbu	r8,12(r22)
	sd_seek(0);
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  82106c:	b0800003 	ldbu	r2,0(r22)
  821070:	b0c00043 	ldbu	r3,1(r22)
  821074:	b1000083 	ldbu	r4,2(r22)
  821078:	b14000c3 	ldbu	r5,3(r22)
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
  82107c:	b1800103 	ldbu	r6,4(r22)
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
  821080:	b1c00203 	ldbu	r7,8(r22)
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
	memcpy(&payload_size, filebuffer + 16, sizeof(uint32_t));
  821084:	b2c00403 	ldbu	r11,16(r22)
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
  821088:	da400245 	stb	r9,9(sp)
  82108c:	da800285 	stb	r10,10(sp)
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
  821090:	db000345 	stb	r12,13(sp)
  821094:	db400385 	stb	r13,14(sp)
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
  821098:	da000405 	stb	r8,16(sp)
  82109c:	db800445 	stb	r14,17(sp)
  8210a0:	dbc00485 	stb	r15,18(sp)
	sd_seek(0);
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  8210a4:	d8800105 	stb	r2,4(sp)
  8210a8:	d8c00145 	stb	r3,5(sp)
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
	memcpy(&payload_size, filebuffer + 16, sizeof(uint32_t));
  8210ac:	b0800404 	addi	r2,r22,16
	sd_seek(0);
	//    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  8210b0:	d9000185 	stb	r4,6(sp)
  8210b4:	d94001c5 	stb	r5,7(sp)
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
  8210b8:	d9800205 	stb	r6,8(sp)
  8210bc:	dc0002c5 	stb	r16,11(sp)
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
  8210c0:	d9c00305 	stb	r7,12(sp)
  8210c4:	dc4003c5 	stb	r17,15(sp)
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
  8210c8:	dc8004c5 	stb	r18,19(sp)
	memcpy(&payload_size, filebuffer + 16, sizeof(uint32_t));
  8210cc:	dac00505 	stb	r11,20(sp)
  8210d0:	11c000c3 	ldbu	r7,3(r2)
  8210d4:	10c00043 	ldbu	r3,1(r2)
  8210d8:	11800083 	ldbu	r6,2(r2)

	DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
  8210dc:	d9400117 	ldw	r5,4(sp)
  8210e0:	010020f4 	movhi	r4,131
  8210e4:	210d9c04 	addi	r4,r4,13936
	//read header
	memcpy(&num_frames, filebuffer, sizeof(uint32_t));
	memcpy(&w_size, filebuffer + 4, sizeof(uint32_t));
	memcpy(&h_size, filebuffer + 8, sizeof(uint32_t));
	memcpy(&num_iframes, filebuffer + 12, sizeof(uint32_t));
	memcpy(&payload_size, filebuffer + 16, sizeof(uint32_t));
  8210e8:	d8c00545 	stb	r3,21(sp)
  8210ec:	d9800585 	stb	r6,22(sp)
  8210f0:	d9c005c5 	stb	r7,23(sp)

	DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
  8210f4:	0823cb80 	call	823cb8 <printf>
	DEBUG_PRINT_ARG("payload_size: %u\n", payload_size)
  8210f8:	d9400517 	ldw	r5,20(sp)
  8210fc:	010020f4 	movhi	r4,131
  821100:	210da004 	addi	r4,r4,13952
  821104:	0823cb80 	call	823cb8 <printf>
	int hCb_size = h_size / 8; //number of chrominance blocks
	int wCb_size = w_size / 8;
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
	int wYb_size = w_size / 8;

	if(!playedOnceFlag){
  821108:	d0a7af17 	ldw	r2,-24900(gp)
	memcpy(&payload_size, filebuffer + 16, sizeof(uint32_t));

	DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
	DEBUG_PRINT_ARG("payload_size: %u\n", payload_size)

	int hCb_size = h_size / 8; //number of chrominance blocks
  82110c:	dc000317 	ldw	r16,12(sp)
	int wCb_size = w_size / 8;
  821110:	dc400217 	ldw	r17,8(sp)
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
	int wYb_size = w_size / 8;

	if(!playedOnceFlag){
  821114:	10014326 	beq	r2,zero,821624 <mjpeg423_decode+0x6a0>
			altera_avalon_mailbox_post(send_dev, h_size);
			altera_avalon_mailbox_post(send_dev, w_size);
	}

	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);
  821118:	d9000417 	ldw	r4,16(sp)
  82111c:	200890fa 	slli	r4,r4,3
  821120:	08235640 	call	823564 <malloc>
  821124:	1029883a 	mov	r20,r2

	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2
  821128:	8006d0fa 	srli	r3,r16,3
  82112c:	8804d0fa 	srli	r2,r17,3
			altera_avalon_mailbox_post(send_dev, h_size);
			altera_avalon_mailbox_post(send_dev, w_size);
	}

	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);
  821130:	a025883a 	mov	r18,r20

	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2
  821134:	18b9383a 	mul	fp,r3,r2
  821138:	e709883a 	add	r4,fp,fp
  82113c:	2709883a 	add	r4,r4,fp
  821140:	200891fa 	slli	r4,r4,7
  821144:	08235640 	call	823564 <malloc>
  821148:	d8800c15 	stw	r2,48(sp)
  82114c:	10016026 	beq	r2,zero,8216d0 <mjpeg423_decode+0x74c>
			* hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
		error_and_exit("cannot allocate bitstream");
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
  821150:	d0a7af17 	ldw	r2,-24900(gp)
  821154:	1000661e 	bne	r2,zero,8212f0 <mjpeg423_decode+0x36c>
  821158:	e4403024 	muli	r17,fp,192
  82115c:	e00491ba 	slli	r2,fp,6
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  821160:	d427ac17 	ldw	r16,-24912(gp)
  821164:	8809883a 	mov	r4,r17
			* hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
		error_and_exit("cannot allocate bitstream");
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
  821168:	d8800a15 	stw	r2,40(sp)
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  82116c:	08235640 	call	823564 <malloc>
  821170:	80800015 	stw	r2,0(r16)
			* hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
		error_and_exit("cannot allocate bitstream");
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
  821174:	e02e91fa 	slli	r23,fp,7
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  821178:	10013926 	beq	r2,zero,821660 <mjpeg423_decode+0x6dc>
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  82117c:	d427ac17 	ldw	r16,-24912(gp)
  821180:	d8800a17 	ldw	r2,40(sp)
  821184:	d167ad17 	ldw	r5,-24908(gp)
  821188:	80c00017 	ldw	r3,0(r16)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  82118c:	8809883a 	mov	r4,r17
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821190:	1887883a 	add	r3,r3,r2
  821194:	28c00015 	stw	r3,0(r5)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  821198:	80800017 	ldw	r2,0(r16)
  82119c:	d0e7b317 	ldw	r3,-24884(gp)
  8211a0:	15c5883a 	add	r2,r2,r23
  8211a4:	18800015 	stw	r2,0(r3)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  8211a8:	08235640 	call	823564 <malloc>
  8211ac:	80800115 	stw	r2,4(r16)
  8211b0:	10012f26 	beq	r2,zero,821670 <mjpeg423_decode+0x6ec>
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  8211b4:	d427ac17 	ldw	r16,-24912(gp)
  8211b8:	d8800a17 	ldw	r2,40(sp)
  8211bc:	d167ad17 	ldw	r5,-24908(gp)
  8211c0:	80c00117 	ldw	r3,4(r16)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  8211c4:	8809883a 	mov	r4,r17
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  8211c8:	1887883a 	add	r3,r3,r2
  8211cc:	28c00115 	stw	r3,4(r5)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  8211d0:	80800117 	ldw	r2,4(r16)
  8211d4:	d0e7b317 	ldw	r3,-24884(gp)
  8211d8:	15c5883a 	add	r2,r2,r23
  8211dc:	18800115 	stw	r2,4(r3)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  8211e0:	08235640 	call	823564 <malloc>
  8211e4:	80800215 	stw	r2,8(r16)
  8211e8:	10012526 	beq	r2,zero,821680 <mjpeg423_decode+0x6fc>
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  8211ec:	d427ac17 	ldw	r16,-24912(gp)
  8211f0:	d8800a17 	ldw	r2,40(sp)
  8211f4:	d167ad17 	ldw	r5,-24908(gp)
  8211f8:	80c00217 	ldw	r3,8(r16)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  8211fc:	8809883a 	mov	r4,r17
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821200:	1887883a 	add	r3,r3,r2
  821204:	28c00215 	stw	r3,8(r5)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  821208:	80800217 	ldw	r2,8(r16)
  82120c:	d0e7b317 	ldw	r3,-24884(gp)
  821210:	15c5883a 	add	r2,r2,r23
  821214:	18800215 	stw	r2,8(r3)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  821218:	08235640 	call	823564 <malloc>
  82121c:	80800315 	stw	r2,12(r16)
  821220:	10011b26 	beq	r2,zero,821690 <mjpeg423_decode+0x70c>
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821224:	d427ac17 	ldw	r16,-24912(gp)
  821228:	d8800a17 	ldw	r2,40(sp)
  82122c:	d167ad17 	ldw	r5,-24908(gp)
  821230:	80c00317 	ldw	r3,12(r16)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  821234:	8809883a 	mov	r4,r17
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821238:	1887883a 	add	r3,r3,r2
  82123c:	28c00315 	stw	r3,12(r5)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  821240:	80800317 	ldw	r2,12(r16)
  821244:	d0e7b317 	ldw	r3,-24884(gp)
  821248:	15c5883a 	add	r2,r2,r23
  82124c:	18800315 	stw	r2,12(r3)
	uint8_t* Cbbitstream;
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
  821250:	08235640 	call	823564 <malloc>
  821254:	80800415 	stw	r2,16(r16)
  821258:	1000fd26 	beq	r2,zero,821650 <mjpeg423_decode+0x6cc>
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  82125c:	d167ac17 	ldw	r5,-24912(gp)
  821260:	d8800a17 	ldw	r2,40(sp)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  821264:	e5406024 	muli	r21,fp,384

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821268:	28c00417 	ldw	r3,16(r5)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  82126c:	e026923a 	slli	r19,fp,8
  821270:	d1e7ab17 	ldw	r7,-24916(gp)

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821274:	1887883a 	add	r3,r3,r2
  821278:	d0a7ad17 	ldw	r2,-24908(gp)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  82127c:	0023883a 	mov	r17,zero

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
  821280:	10c00415 	stw	r3,16(r2)
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
  821284:	29000417 	ldw	r4,16(r5)
  821288:	d0a7b317 	ldw	r2,-24884(gp)
  82128c:	25c9883a 	add	r4,r4,r23
  821290:	11000415 	stw	r4,16(r2)
			}

			for (int i = 0; i < 10; i++) {
				if ((YDCAC[i] = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) * 3))
  821294:	a809883a 	mov	r4,r21
  821298:	89e1883a 	add	r16,r17,r7
  82129c:	08235640 	call	823564 <malloc>
  8212a0:	80800015 	stw	r2,0(r16)
						== NULL)
					error_and_exit("cannot allocate YDCAC");
  8212a4:	010020f4 	movhi	r4,131
  8212a8:	210db304 	addi	r4,r4,14028
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
			}

			for (int i = 0; i < 10; i++) {
				if ((YDCAC[i] = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) * 3))
  8212ac:	1000d226 	beq	r2,zero,8215f8 <mjpeg423_decode+0x674>
						== NULL)
					error_and_exit("cannot allocate YDCAC");
				CbDCAC[i] = YDCAC[i] + (hYb_size * wYb_size);
  8212b0:	d1e7ab17 	ldw	r7,-24916(gp)
  8212b4:	d0e7b417 	ldw	r3,-24880(gp)
				CrDCAC[i] = YDCAC[i] + (hYb_size * wYb_size) * 2;
  8212b8:	d167a517 	ldw	r5,-24940(gp)

			for (int i = 0; i < 10; i++) {
				if ((YDCAC[i] = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) * 3))
						== NULL)
					error_and_exit("cannot allocate YDCAC");
				CbDCAC[i] = YDCAC[i] + (hYb_size * wYb_size);
  8212bc:	89cd883a 	add	r6,r17,r7
  8212c0:	31000017 	ldw	r4,0(r6)
  8212c4:	1c47883a 	add	r3,r3,r17
				CrDCAC[i] = YDCAC[i] + (hYb_size * wYb_size) * 2;
  8212c8:	2c4b883a 	add	r5,r5,r17

			for (int i = 0; i < 10; i++) {
				if ((YDCAC[i] = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) * 3))
						== NULL)
					error_and_exit("cannot allocate YDCAC");
				CbDCAC[i] = YDCAC[i] + (hYb_size * wYb_size);
  8212cc:	25c9883a 	add	r4,r4,r23
  8212d0:	19000015 	stw	r4,0(r3)
				CrDCAC[i] = YDCAC[i] + (hYb_size * wYb_size) * 2;
  8212d4:	30800017 	ldw	r2,0(r6)
  8212d8:	8c400104 	addi	r17,r17,4
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
			}

			for (int i = 0; i < 10; i++) {
  8212dc:	00c00a04 	movi	r3,40
				if ((YDCAC[i] = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) * 3))
						== NULL)
					error_and_exit("cannot allocate YDCAC");
				CbDCAC[i] = YDCAC[i] + (hYb_size * wYb_size);
				CrDCAC[i] = YDCAC[i] + (hYb_size * wYb_size) * 2;
  8212e0:	14c5883a 	add	r2,r2,r19
  8212e4:	28800015 	stw	r2,0(r5)
					error_and_exit("cannot allocate color block");
				Cbblock[i] = Yblock[i] + (hYb_size * wYb_size);
				Crblock[i] = Yblock[i] + (hYb_size * wYb_size) * 2;
			}

			for (int i = 0; i < 10; i++) {
  8212e8:	88ffea1e 	bne	r17,r3,821294 <mjpeg423_decode+0x310>
					error_and_exit("cannot allocate YDCAC");
				CbDCAC[i] = YDCAC[i] + (hYb_size * wYb_size);
				CrDCAC[i] = YDCAC[i] + (hYb_size * wYb_size) * 2;

			}
			alt_dcache_flush_all();
  8212ec:	082bff40 	call	82bff4 <alt_dcache_flush_all>
	}



	printf("bbb");
  8212f0:	010020f4 	movhi	r4,131
  8212f4:	210db904 	addi	r4,r4,14052
  8212f8:	0823cb80 	call	823cb8 <printf>
	//the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream

	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
	sd_seek(HEADER_OFFSET + payload_size);
  8212fc:	d9000517 	ldw	r4,20(sp)
  821300:	21000504 	addi	r4,r4,20
  821304:	0821bbc0 	call	821bbc <sd_seek>
	int trailer_counter = 0;
	for (int count = 0; count < num_iframes; count++) {
  821308:	d8c00417 	ldw	r3,16(sp)
  82130c:	18001326 	beq	r3,zero,82135c <mjpeg423_decode+0x3d8>
  821310:	0021883a 	mov	r16,zero
		sd_bytes_read
  821314:	9009883a 	mov	r4,r18
  821318:	01400104 	movi	r5,4
  82131c:	0821e540 	call	821e54 <sd_read>
				= sd_read(&(trailer[count].frame_index), sizeof(uint32_t));
		sd_bytes_read = sd_read(&(trailer[count].frame_position),
  821320:	91000104 	addi	r4,r18,4
  821324:	01400104 	movi	r5,4
  821328:	0821e540 	call	821e54 <sd_read>
				sizeof(uint32_t));
		DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  82132c:	91400017 	ldw	r5,0(r18)
  821330:	010020f4 	movhi	r4,131
  821334:	210dba04 	addi	r4,r4,14056
	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
	sd_seek(HEADER_OFFSET + payload_size);
	int trailer_counter = 0;
	for (int count = 0; count < num_iframes; count++) {
  821338:	84000044 	addi	r16,r16,1
		sd_bytes_read
				= sd_read(&(trailer[count].frame_index), sizeof(uint32_t));
		sd_bytes_read = sd_read(&(trailer[count].frame_position),
				sizeof(uint32_t));
		DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  82133c:	0823cb80 	call	823cb8 <printf>
		DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  821340:	91400117 	ldw	r5,4(r18)
  821344:	010020f4 	movhi	r4,131
  821348:	210dbf04 	addi	r4,r4,14076
	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
	sd_seek(HEADER_OFFSET + payload_size);
	int trailer_counter = 0;
	for (int count = 0; count < num_iframes; count++) {
  82134c:	94800204 	addi	r18,r18,8
		sd_bytes_read
				= sd_read(&(trailer[count].frame_index), sizeof(uint32_t));
		sd_bytes_read = sd_read(&(trailer[count].frame_position),
				sizeof(uint32_t));
		DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
		DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  821350:	0823cb80 	call	823cb8 <printf>
	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
	sd_seek(HEADER_OFFSET + payload_size);
	int trailer_counter = 0;
	for (int count = 0; count < num_iframes; count++) {
  821354:	d8c00417 	ldw	r3,16(sp)
  821358:	80ffee36 	bltu	r16,r3,821314 <mjpeg423_decode+0x390>
  82135c:	da400517 	ldw	r9,20(sp)
  821360:	04800504 	movi	r18,20
		DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
		DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
	}

	//read and decode frames
	for (int frame_byte_counter = HEADER_OFFSET; frame_byte_counter
  821364:	92406f2e 	bgeu	r18,r9,821524 <mjpeg423_decode+0x5a0>
			< payload_size;) {
		if (getNextFile) {
  821368:	d0a7b617 	ldw	r2,-24872(gp)
  82136c:	10006d1e 	bne	r2,zero,821524 <mjpeg423_decode+0x5a0>
			break;
		}
		if (fastForward) {
  821370:	d0a7b217 	ldw	r2,-24888(gp)
  821374:	10001426 	beq	r2,zero,8213c8 <mjpeg423_decode+0x444>
			fastForward = 0;
			int index = 0;
			for (int i = 0; i < num_iframes; i++) {
  821378:	d9c00417 	ldw	r7,16(sp)
			< payload_size;) {
		if (getNextFile) {
			break;
		}
		if (fastForward) {
			fastForward = 0;
  82137c:	d027b215 	stw	zero,-24888(gp)
			int index = 0;
			for (int i = 0; i < num_iframes; i++) {
  821380:	38000d26 	beq	r7,zero,8213b8 <mjpeg423_decode+0x434>
				if (trailer[i].frame_index >= (current_frame + 226)) {
  821384:	d0a7b717 	ldw	r2,-24868(gp)
  821388:	a0c00017 	ldw	r3,0(r20)
  82138c:	11803884 	addi	r6,r2,226
  821390:	1980092e 	bgeu	r3,r6,8213b8 <mjpeg423_decode+0x434>
  821394:	a1400204 	addi	r5,r20,8
  821398:	0007883a 	mov	r3,zero
  82139c:	00000206 	br	8213a8 <mjpeg423_decode+0x424>
  8213a0:	20800017 	ldw	r2,0(r4)
  8213a4:	1180062e 	bgeu	r2,r6,8213c0 <mjpeg423_decode+0x43c>
			break;
		}
		if (fastForward) {
			fastForward = 0;
			int index = 0;
			for (int i = 0; i < num_iframes; i++) {
  8213a8:	18c00044 	addi	r3,r3,1
				if (trailer[i].frame_index >= (current_frame + 226)) {
  8213ac:	2809883a 	mov	r4,r5
  8213b0:	29400204 	addi	r5,r5,8
			break;
		}
		if (fastForward) {
			fastForward = 0;
			int index = 0;
			for (int i = 0; i < num_iframes; i++) {
  8213b4:	19fffa1e 	bne	r3,r7,8213a0 <mjpeg423_decode+0x41c>
  8213b8:	a0800017 	ldw	r2,0(r20)
  8213bc:	a009883a 	mov	r4,r20
				if (trailer[i].frame_index >= (current_frame + 226)) {
					index = i;
					break;
				}
			}
			frame_byte_counter = trailer[index].frame_position;
  8213c0:	24800117 	ldw	r18,4(r4)
			current_frame = trailer[index].frame_index;
  8213c4:	d0a7b715 	stw	r2,-24868(gp)
			//DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
		}
		if (backward) {
  8213c8:	d0a7b017 	ldw	r2,-24896(gp)
  8213cc:	10000926 	beq	r2,zero,8213f4 <mjpeg423_decode+0x470>
			unsigned int magic = 0;
			backward = 0;
			int index = num_iframes - 1;
			if (current_frame < 240) {
  8213d0:	d127b717 	ldw	r4,-24868(gp)
  8213d4:	00803bc4 	movi	r2,239
			current_frame = trailer[index].frame_index;
			//DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
		}
		if (backward) {
			unsigned int magic = 0;
			backward = 0;
  8213d8:	d027b015 	stw	zero,-24896(gp)
			int index = num_iframes - 1;
  8213dc:	d9400417 	ldw	r5,16(sp)
			if (current_frame < 240) {
  8213e0:	11006d16 	blt	r2,r4,821598 <mjpeg423_decode+0x614>
  8213e4:	a2000017 	ldw	r8,0(r20)
  8213e8:	a009883a 	mov	r4,r20
						index = i;
						break;
					}
				}
			}
			frame_byte_counter = trailer[index].frame_position;
  8213ec:	24800117 	ldw	r18,4(r4)
			current_frame = trailer[index].frame_index;
  8213f0:	d227b715 	stw	r8,-24868(gp)
			//DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
		}

		if (!playing) {
  8213f4:	d0a7a917 	ldw	r2,-24924(gp)
  8213f8:	103fda26 	beq	r2,zero,821364 <mjpeg423_decode+0x3e0>
		}

		//DEBUG_PRINT_ARG("\nFrame #%u\n",)
		//read frame payload
		//        alt_timestamp_start();
		sd_seek(frame_byte_counter);
  8213fc:	9009883a 	mov	r4,r18
  821400:	0821bbc0 	call	821bbc <sd_seek>
		sd_bytes_read = sd_read(&(frame_size), sizeof(uint32_t));
  821404:	01400104 	movi	r5,4
  821408:	d9000804 	addi	r4,sp,32
  82140c:	0821e540 	call	821e54 <sd_read>
		//memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter += sizeof(uint32_t);
		//DEBUG_PRINT_ARG("Frame_size: %u\n",frame_size)
		//sd_seek(frame_byte_counter);
		sd_bytes_read = sd_read(&(frame_type), sizeof(uint32_t));
  821410:	d9000904 	addi	r4,sp,36
  821414:	01400104 	movi	r5,4
  821418:	0821e540 	call	821e54 <sd_read>
		//DEBUG_PRINT_ARG("Frame_type: %u\n",frame_type)
		//memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));

		frame_byte_counter += sizeof(uint32_t);
		//sd_seek(frame_byte_counter);
		sd_bytes_read = sd_read(&(Ysize), sizeof(uint32_t));
  82141c:	d9000604 	addi	r4,sp,24
  821420:	01400104 	movi	r5,4
  821424:	0821e540 	call	821e54 <sd_read>
		//memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter += sizeof(uint32_t);
		//sd_seek(frame_byte_counter);
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
  821428:	d9000704 	addi	r4,sp,28
  82142c:	01400104 	movi	r5,4
  821430:	0821e540 	call	821e54 <sd_read>
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter += sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream, frame_size - 4 * sizeof(uint32_t));
  821434:	d9400817 	ldw	r5,32(sp)
  821438:	d9000c17 	ldw	r4,48(sp)
  82143c:	297ffc04 	addi	r5,r5,-16
  821440:	0821e540 	call	821e54 <sd_read>
		Cbbitstream = Ybitstream + Ysize;
		Crbitstream = Cbbitstream + Cbsize;

		//lossless decoding
		//     alt_timestamp_start();
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC[0] , Yquant,
  821444:	d8c00917 	ldw	r3,36(sp)
  821448:	d0a7ab17 	ldw	r2,-24916(gp)
		sd_bytes_read = sd_read(Ybitstream, frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));

		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
  82144c:	dc400617 	ldw	r17,24(sp)
		Crbitstream = Cbbitstream + Cbsize;

		//lossless decoding
		//     alt_timestamp_start();
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC[0] , Yquant,
  821450:	d8c00015 	stw	r3,0(sp)
  821454:	11800017 	ldw	r6,0(r2)
		sd_bytes_read = sd_read(Ybitstream, frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));

		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
  821458:	d8800c17 	ldw	r2,48(sp)
		Crbitstream = Cbbitstream + Cbsize;

		//lossless decoding
		//     alt_timestamp_start();
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC[0] , Yquant,
  82145c:	e009883a 	mov	r4,fp
  821460:	01c020f4 	movhi	r7,131
  821464:	39cefb04 	addi	r7,r7,15340
  821468:	100b883a 	mov	r5,r2
		sd_bytes_read = sd_read(Ybitstream, frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));

		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
  82146c:	1463883a 	add	r17,r2,r17
		Crbitstream = Cbbitstream + Cbsize;
  821470:	dcc00717 	ldw	r19,28(sp)
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter += sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream, frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  821474:	dd400817 	ldw	r21,32(sp)
		Cbbitstream = Ybitstream + Ysize;
		Crbitstream = Cbbitstream + Cbsize;

		//lossless decoding
		//     alt_timestamp_start();
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC[0] , Yquant,
  821478:	0820b3c0 	call	820b3c <lossless_decode>
				frame_type);
		//     frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER DECODE Y-stream: %u\n", frame_counter);
		//    alt_timestamp_start();
		lossless_decode(hCb_size * wCb_size, Cbbitstream,CbDCAC[0] , Cquant,
  82147c:	d8800917 	ldw	r2,36(sp)
  821480:	d0e7b417 	ldw	r3,-24880(gp)
  821484:	880b883a 	mov	r5,r17
  821488:	d8800015 	stw	r2,0(sp)
  82148c:	19800017 	ldw	r6,0(r3)
  821490:	e009883a 	mov	r4,fp
  821494:	01c020f4 	movhi	r7,131
  821498:	39cf1b04 	addi	r7,r7,15468
  82149c:	0820b3c0 	call	820b3c <lossless_decode>
				frame_type);
		//    frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER DECODE Cb-stream: %u\n", frame_counter);
		//    alt_timestamp_start();
		lossless_decode(hCb_size * wCb_size, Crbitstream,CrDCAC[0], Cquant,
  8214a0:	d8800917 	ldw	r2,36(sp)
  8214a4:	d0e7a517 	ldw	r3,-24940(gp)
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));

		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
		Crbitstream = Cbbitstream + Cbsize;
  8214a8:	8ce7883a 	add	r19,r17,r19
		lossless_decode(hCb_size * wCb_size, Cbbitstream,CbDCAC[0] , Cquant,
				frame_type);
		//    frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER DECODE Cb-stream: %u\n", frame_counter);
		//    alt_timestamp_start();
		lossless_decode(hCb_size * wCb_size, Crbitstream,CrDCAC[0], Cquant,
  8214ac:	d8800015 	stw	r2,0(sp)
  8214b0:	19800017 	ldw	r6,0(r3)
  8214b4:	980b883a 	mov	r5,r19
  8214b8:	e009883a 	mov	r4,fp
  8214bc:	01c020f4 	movhi	r7,131
  8214c0:	39cf1b04 	addi	r7,r7,15468
  8214c4:	0820b3c0 	call	820b3c <lossless_decode>
				frame_type);
		//   frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER DECODE Cr-stream: %u\n", frame_counter);
		alt_dcache_flush_all();
  8214c8:	082bff40 	call	82bff4 <alt_dcache_flush_all>
		//fdct


		//frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
		if(counter == 9){
  8214cc:	d0e7a217 	ldw	r3,-24952(gp)
  8214d0:	00800244 	movi	r2,9
  8214d4:	18804a26 	beq	r3,r2,821600 <mjpeg423_decode+0x67c>
			receiveMessage = altera_avalon_mailbox_pend(recv_dev);
			/*
			}*/
		}
		//printf("Magic!\n");
		counter = (counter+1)%10;
  8214d8:	1c000044 	addi	r16,r3,1
  8214dc:	80c00294 	ori	r3,r16,10
  8214e0:	008003c4 	movi	r2,15
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter += sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream, frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8214e4:	9565883a 	add	r18,r18,r21
			receiveMessage = altera_avalon_mailbox_pend(recv_dev);
			/*
			}*/
		}
		//printf("Magic!\n");
		counter = (counter+1)%10;
  8214e8:	10c03f36 	bltu	r2,r3,8215e8 <mjpeg423_decode+0x664>
  8214ec:	8004913a 	slli	r2,r16,4
  8214f0:	00c020f4 	movhi	r3,131
  8214f4:	18cf8504 	addi	r3,r3,15892
  8214f8:	10800294 	ori	r2,r2,10
  8214fc:	10c5883a 	add	r2,r2,r3
  821500:	10800003 	ldbu	r2,0(r2)
  821504:	10c002a4 	muli	r3,r2,10
		// frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);

		//alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);

		current_frame++;
  821508:	d0a7b717 	ldw	r2,-24868(gp)
  82150c:	da400517 	ldw	r9,20(sp)
			receiveMessage = altera_avalon_mailbox_pend(recv_dev);
			/*
			}*/
		}
		//printf("Magic!\n");
		counter = (counter+1)%10;
  821510:	80c7c83a 	sub	r3,r16,r3
		// frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);

		//alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);

		current_frame++;
  821514:	10800044 	addi	r2,r2,1
			receiveMessage = altera_avalon_mailbox_pend(recv_dev);
			/*
			}*/
		}
		//printf("Magic!\n");
		counter = (counter+1)%10;
  821518:	d0e7a215 	stw	r3,-24952(gp)
		// frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);

		//alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);

		current_frame++;
  82151c:	d0a7b715 	stw	r2,-24868(gp)
		DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
		DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
	}

	//read and decode frames
	for (int frame_byte_counter = HEADER_OFFSET; frame_byte_counter
  821520:	927f9136 	bltu	r18,r9,821368 <mjpeg423_decode+0x3e4>
		//DEBUG_PRINT_ARG("current frame: %u\n",current_frame)
	} //end frame iteration


	//close down
	alt_up_sd_card_fclose(file_handle);
  821524:	d9000b17 	ldw	r4,44(sp)
  821528:	08323000 	call	832300 <alt_up_sd_card_fclose>

	for (int i = 0; i < 20; i++) {
		free(YDCAC[i]);
	}*/

	free(trailer);
  82152c:	a009883a 	mov	r4,r20
  821530:	08235500 	call	823550 <free>
	free(Ybitstream);
  821534:	d9000c17 	ldw	r4,48(sp)
  821538:	08235500 	call	823550 <free>
	free(filebuffer);
  82153c:	b009883a 	mov	r4,r22
  821540:	08235500 	call	823550 <free>
	playedOnceFlag = 1;

	if(getNextFile){
  821544:	d0e7b617 	ldw	r3,-24872(gp)
	}*/

	free(trailer);
	free(Ybitstream);
	free(filebuffer);
	playedOnceFlag = 1;
  821548:	00800044 	movi	r2,1
  82154c:	d0a7af15 	stw	r2,-24900(gp)

	if(getNextFile){
  821550:	1800631e 	bne	r3,zero,8216e0 <mjpeg423_decode+0x75c>
	 altera_avalon_mailbox_post(send_dev, 100);
	 DEBUG_PRINT("\nSwitch to next file.\n\n\n")
	 getNextFile = 0;
	 return -1;
	 }else{
	 DEBUG_PRINT("\nDecoder done.\n\n\n")
  821554:	010020f4 	movhi	r4,131
  821558:	210dc904 	addi	r4,r4,14116
  82155c:	0823df40 	call	823df4 <puts>
	 playing = 0;
  821560:	0005883a 	mov	r2,zero
  821564:	d027a915 	stw	zero,-24924(gp)
	 return 0;
	 }
}
  821568:	dfc01617 	ldw	ra,88(sp)
  82156c:	df001517 	ldw	fp,84(sp)
  821570:	ddc01417 	ldw	r23,80(sp)
  821574:	dd801317 	ldw	r22,76(sp)
  821578:	dd401217 	ldw	r21,72(sp)
  82157c:	dd001117 	ldw	r20,68(sp)
  821580:	dcc01017 	ldw	r19,64(sp)
  821584:	dc800f17 	ldw	r18,60(sp)
  821588:	dc400e17 	ldw	r17,56(sp)
  82158c:	dc000d17 	ldw	r16,52(sp)
  821590:	dec01704 	addi	sp,sp,92
  821594:	f800283a 	ret
			//DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
		}
		if (backward) {
			unsigned int magic = 0;
			backward = 0;
			int index = num_iframes - 1;
  821598:	28ffffc4 	addi	r3,r5,-1
			if (current_frame < 240) {
				index = 0;
			} else {
				for (int i = num_iframes - 1; i >= 0; i--) {
  82159c:	18004416 	blt	r3,zero,8216b0 <mjpeg423_decode+0x72c>
					if (trailer[i].frame_index <= (current_frame - 226)) {
  8215a0:	180490fa 	slli	r2,r3,3
  8215a4:	21ffc784 	addi	r7,r4,-226
  8215a8:	a089883a 	add	r4,r20,r2
  8215ac:	22000017 	ldw	r8,0(r4)
  8215b0:	3a3f8e2e 	bgeu	r7,r8,8213ec <mjpeg423_decode+0x468>
  8215b4:	280490fa 	slli	r2,r5,3
  8215b8:	180b883a 	mov	r5,r3
  8215bc:	a085883a 	add	r2,r20,r2
  8215c0:	10bffc04 	addi	r2,r2,-16
			backward = 0;
			int index = num_iframes - 1;
			if (current_frame < 240) {
				index = 0;
			} else {
				for (int i = num_iframes - 1; i >= 0; i--) {
  8215c4:	297fffc4 	addi	r5,r5,-1
					if (trailer[i].frame_index <= (current_frame - 226)) {
  8215c8:	1007883a 	mov	r3,r2
  8215cc:	10bffe04 	addi	r2,r2,-8
			backward = 0;
			int index = num_iframes - 1;
			if (current_frame < 240) {
				index = 0;
			} else {
				for (int i = num_iframes - 1; i >= 0; i--) {
  8215d0:	283f8616 	blt	r5,zero,8213ec <mjpeg423_decode+0x468>
					if (trailer[i].frame_index <= (current_frame - 226)) {
  8215d4:	19800017 	ldw	r6,0(r3)
  8215d8:	39bffa36 	bltu	r7,r6,8215c4 <mjpeg423_decode+0x640>
  8215dc:	1809883a 	mov	r4,r3
  8215e0:	3011883a 	mov	r8,r6
  8215e4:	003f8106 	br	8213ec <mjpeg423_decode+0x468>
			receiveMessage = altera_avalon_mailbox_pend(recv_dev);
			/*
			}*/
		}
		//printf("Magic!\n");
		counter = (counter+1)%10;
  8215e8:	8009883a 	mov	r4,r16
  8215ec:	01400284 	movi	r5,10
  8215f0:	0822e1c0 	call	822e1c <__divsi3>
  8215f4:	003fc306 	br	821504 <mjpeg423_decode+0x580>
			}

			for (int i = 0; i < 10; i++) {
				if ((YDCAC[i] = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) * 3))
						== NULL)
					error_and_exit("cannot allocate YDCAC");
  8215f8:	08206880 	call	820688 <error_and_exit>
  8215fc:	003f2c06 	br	8212b0 <mjpeg423_decode+0x32c>

		//frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
		if(counter == 9){
			sendMsg = 0;
			altera_avalon_mailbox_post(send_dev, flip);
  821600:	d127a717 	ldw	r4,-24932(gp)
  821604:	d167b117 	ldw	r5,-24892(gp)


		//frame_counter = alt_timestamp();
		//DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
		if(counter == 9){
			sendMsg = 0;
  821608:	d027aa15 	stw	zero,-24920(gp)
			altera_avalon_mailbox_post(send_dev, flip);
  82160c:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>

			receiveMessage = altera_avalon_mailbox_pend(recv_dev);
  821610:	d127a317 	ldw	r4,-24948(gp)
  821614:	082db180 	call	82db18 <altera_avalon_mailbox_pend>
  821618:	d0e7a217 	ldw	r3,-24952(gp)
  82161c:	d0a7ae15 	stw	r2,-24904(gp)
  821620:	003fad06 	br	8214d8 <mjpeg423_decode+0x554>
	int wCb_size = w_size / 8;
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
	int wYb_size = w_size / 8;

	if(!playedOnceFlag){
			altera_avalon_mailbox_post(send_dev, h_size);
  821624:	d127a717 	ldw	r4,-24932(gp)
  821628:	800b883a 	mov	r5,r16
  82162c:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
			altera_avalon_mailbox_post(send_dev, w_size);
  821630:	d127a717 	ldw	r4,-24932(gp)
  821634:	d9400217 	ldw	r5,8(sp)
  821638:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
  82163c:	003eb606 	br	821118 <mjpeg423_decode+0x194>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if (!sd_card_create_sectors_list(file_handle)) {
		error_and_exit("Cannot create sectors list\n");
  821640:	010020f4 	movhi	r4,131
  821644:	210d8404 	addi	r4,r4,13840
  821648:	08206880 	call	820688 <error_and_exit>
  82164c:	003e6506 	br	820fe4 <mjpeg423_decode+0x60>
	uint8_t* Crbitstream;

	if(!playedOnceFlag){
		for (int i = 0; i < 5; i++) {
				if ((Yblock[i] = malloc(hYb_size * wYb_size * 64 * 3)) == NULL)
					error_and_exit("cannot allocate color block");
  821650:	010020f4 	movhi	r4,131
  821654:	210dac04 	addi	r4,r4,14000
  821658:	08206880 	call	820688 <error_and_exit>
  82165c:	003eff06 	br	82125c <mjpeg423_decode+0x2d8>
  821660:	010020f4 	movhi	r4,131
  821664:	210dac04 	addi	r4,r4,14000
  821668:	08206880 	call	820688 <error_and_exit>
  82166c:	003ec306 	br	82117c <mjpeg423_decode+0x1f8>
  821670:	010020f4 	movhi	r4,131
  821674:	210dac04 	addi	r4,r4,14000
  821678:	08206880 	call	820688 <error_and_exit>
  82167c:	003ecd06 	br	8211b4 <mjpeg423_decode+0x230>
  821680:	010020f4 	movhi	r4,131
  821684:	210dac04 	addi	r4,r4,14000
  821688:	08206880 	call	820688 <error_and_exit>
  82168c:	003ed706 	br	8211ec <mjpeg423_decode+0x268>
  821690:	010020f4 	movhi	r4,131
  821694:	210dac04 	addi	r4,r4,14000
  821698:	08206880 	call	820688 <error_and_exit>
  82169c:	003ee106 	br	821224 <mjpeg423_decode+0x2a0>

	flip = 0;
	//    alt_timestamp_start();
	short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
	if (file_handle == -1) {
		error_and_exit("Cannot find file\n");
  8216a0:	010020f4 	movhi	r4,131
  8216a4:	210d7f04 	addi	r4,r4,13820
  8216a8:	08206880 	call	820688 <error_and_exit>
  8216ac:	003e4a06 	br	820fd8 <mjpeg423_decode+0x54>
			backward = 0;
			int index = num_iframes - 1;
			if (current_frame < 240) {
				index = 0;
			} else {
				for (int i = num_iframes - 1; i >= 0; i--) {
  8216b0:	180490fa 	slli	r2,r3,3
  8216b4:	a089883a 	add	r4,r20,r2
  8216b8:	22000017 	ldw	r8,0(r4)
  8216bc:	003f4b06 	br	8213ec <mjpeg423_decode+0x468>
	//create filebuffer to hold entire file
	printf("File size: %d\n", sd_card_file_size(file_handle));

	int sectors_num = ceil(sd_card_file_size(file_handle) / 512.0);
	if ((filebuffer = malloc(5 * 512)) == NULL) {
		error_and_exit("Cannot allocate filebuffer\n");
  8216c0:	010020f4 	movhi	r4,131
  8216c4:	210d8f04 	addi	r4,r4,13884
  8216c8:	08206880 	call	820688 <error_and_exit>
  8216cc:	003e5106 	br	821014 <mjpeg423_decode+0x90>
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);

	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2
			* hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
		error_and_exit("cannot allocate bitstream");
  8216d0:	010020f4 	movhi	r4,131
  8216d4:	210da504 	addi	r4,r4,13972
  8216d8:	08206880 	call	820688 <error_and_exit>
  8216dc:	003e9c06 	br	821150 <mjpeg423_decode+0x1cc>
	free(filebuffer);
	playedOnceFlag = 1;

	if(getNextFile){

	 altera_avalon_mailbox_post(send_dev, 100);
  8216e0:	d127a717 	ldw	r4,-24932(gp)
  8216e4:	01401904 	movi	r5,100
  8216e8:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
	 DEBUG_PRINT("\nSwitch to next file.\n\n\n")
  8216ec:	010020f4 	movhi	r4,131
  8216f0:	210dc304 	addi	r4,r4,14092
  8216f4:	0823df40 	call	823df4 <puts>
	 getNextFile = 0;
  8216f8:	00bfffc4 	movi	r2,-1
  8216fc:	d027b615 	stw	zero,-24872(gp)
  821700:	003f9906 	br	821568 <mjpeg423_decode+0x5e4>

00821704 <ycbcr_to_rgb>:
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
  821704:	db000017 	ldw	r12,0(sp)
  821708:	dac00117 	ldw	r11,4(sp)
  82170c:	380d883a 	mov	r6,r7
  821710:	6013883a 	mov	r9,r12
  821714:	5811883a 	mov	r8,r11
  821718:	0015883a 	mov	r10,zero
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  82171c:	52c5883a 	add	r2,r10,r11
  821720:	11000003 	ldbu	r4,0(r2)
  821724:	6287883a 	add	r3,r12,r10
  821728:	19400003 	ldbu	r5,0(r3)
  82172c:	3a85883a 	add	r2,r7,r10
  821730:	2008923a 	slli	r4,r4,8
  821734:	10c00003 	ldbu	r3,0(r2)
  821738:	2148b03a 	or	r4,r4,r5
  82173c:	1907d032 	custom	64,r3,r3,r4
  821740:	40800043 	ldbu	r2,1(r8)
  821744:	48c00043 	ldbu	r3,1(r9)
  821748:	31000043 	ldbu	r4,1(r6)
  82174c:	1004923a 	slli	r2,r2,8
  821750:	10c4b03a 	or	r2,r2,r3
  821754:	2089d032 	custom	64,r4,r4,r2
  821758:	40c00083 	ldbu	r3,2(r8)
  82175c:	48800083 	ldbu	r2,2(r9)
  821760:	31000083 	ldbu	r4,2(r6)
  821764:	1806923a 	slli	r3,r3,8
  821768:	1886b03a 	or	r3,r3,r2
  82176c:	20c9d032 	custom	64,r4,r4,r3
  821770:	408000c3 	ldbu	r2,3(r8)
  821774:	48c000c3 	ldbu	r3,3(r9)
  821778:	310000c3 	ldbu	r4,3(r6)
  82177c:	1004923a 	slli	r2,r2,8
  821780:	10c4b03a 	or	r2,r2,r3
  821784:	2089d032 	custom	64,r4,r4,r2
  821788:	40c00103 	ldbu	r3,4(r8)
  82178c:	48800103 	ldbu	r2,4(r9)
  821790:	31000103 	ldbu	r4,4(r6)
  821794:	1806923a 	slli	r3,r3,8
  821798:	1886b03a 	or	r3,r3,r2
  82179c:	20c9d032 	custom	64,r4,r4,r3
  8217a0:	40800143 	ldbu	r2,5(r8)
  8217a4:	48c00143 	ldbu	r3,5(r9)
  8217a8:	31000143 	ldbu	r4,5(r6)
  8217ac:	1004923a 	slli	r2,r2,8
  8217b0:	10c4b03a 	or	r2,r2,r3
  8217b4:	2089d032 	custom	64,r4,r4,r2
  8217b8:	40c00183 	ldbu	r3,6(r8)
  8217bc:	48800183 	ldbu	r2,6(r9)
  8217c0:	31000183 	ldbu	r4,6(r6)
  8217c4:	1806923a 	slli	r3,r3,8
  8217c8:	1886b03a 	or	r3,r3,r2
  8217cc:	20c9d032 	custom	64,r4,r4,r3
  8217d0:	408001c3 	ldbu	r2,7(r8)
  8217d4:	490001c3 	ldbu	r4,7(r9)
  8217d8:	30c001c3 	ldbu	r3,7(r6)
  8217dc:	1004923a 	slli	r2,r2,8
  8217e0:	1104b03a 	or	r2,r2,r4
  8217e4:	1887d032 	custom	64,r3,r3,r2
  8217e8:	52800204 	addi	r10,r10,8


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  8217ec:	00801004 	movi	r2,64
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  8217f0:	42000204 	addi	r8,r8,8
  8217f4:	4a400204 	addi	r9,r9,8
  8217f8:	31800204 	addi	r6,r6,8


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  8217fc:	50bfc71e 	bne	r10,r2,82171c <ycbcr_to_rgb+0x18>
            //rgbblock[index] = pixel;
            //IOWR_32DIRECT(rgbblock, index*4, rawPixel);
            index++;
        }
    }
}
  821800:	f800283a 	ret

00821804 <initTimer>:
	sendMsg = 1;

}

//Timer initalization function
void initTimer() {
  821804:	deffff04 	addi	sp,sp,-4

	//set the timer period to 1400/50 million seconds
	int timerPeriod = 29000000;

	// initialize timer interrupt vector
	alt_irq_register(TIMER_1_IRQ, (void*) 0, timer1_ISR);
  821808:	01000044 	movi	r4,1
  82180c:	000b883a 	mov	r5,zero
  821810:	018020b4 	movhi	r6,130
  821814:	31861604 	addi	r6,r6,6232
	sendMsg = 1;

}

//Timer initalization function
void initTimer() {
  821818:	dfc00015 	stw	ra,0(sp)

	//set the timer period to 1400/50 million seconds
	int timerPeriod = 29000000;

	// initialize timer interrupt vector
	alt_irq_register(TIMER_1_IRQ, (void*) 0, timer1_ISR);
  82181c:	082c1f80 	call	82c1f8 <alt_irq_register>

	// initialize timer period
	IOWR(TIMER_1_BASE, 2, (alt_u16)timerPeriod);
  821820:	00e05014 	movui	r3,33088
  821824:	00840204 	movi	r2,4104
  821828:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_1_BASE, 3, (alt_u16)(timerPeriod >> 16));
  82182c:	01006e84 	movi	r4,442
  821830:	00840304 	movi	r2,4108
  821834:	11000035 	stwio	r4,0(r2)

	// clear timer interrupt bit in status register
	IOWR(TIMER_1_BASE, 0, 0x0);
  821838:	00c40004 	movi	r3,4096
  82183c:	18000035 	stwio	zero,0(r3)

	// initialize timer control - start timer, run continuously, enable interrupts
	IOWR(TIMER_1_BASE, 1, 0x7);
  821840:	010001c4 	movi	r4,7
  821844:	00840104 	movi	r2,4100
  821848:	11000035 	stwio	r4,0(r2)
}
  82184c:	dfc00017 	ldw	ra,0(sp)
  821850:	dec00104 	addi	sp,sp,4
  821854:	f800283a 	ret

00821858 <timer1_ISR>:
char files[2][20] = { "vlong.mpg","vshort.mpg" };
char index = 0;

static void timer1_ISR(void* context, alt_u32 id) {
	// acknowledge the interrupt by clearing the TO bit in the status register
	IOWR(TIMER_1_BASE, 0, 0x0);
  821858:	00840004 	movi	r2,4096
  82185c:	10000035 	stwio	zero,0(r2)
	sendMsg = 1;
  821860:	00c00044 	movi	r3,1
  821864:	d0e7aa15 	stw	r3,-24920(gp)

}
  821868:	f800283a 	ret

0082186c <handle_button_interrupts>:
{
	/* Cast context to edge_capture's type.
	   * It is important to keep this volatile,
	   * to avoid compiler optimization issues.
	   */
	  button_state = IORD(BUTTON_PIO_BASE,3);
  82186c:	00840b04 	movi	r2,4140
  821870:	10c00037 	ldwio	r3,0(r2)
	  button_latch = IORD(BUTTON_PIO_BASE,0);
  821874:	00840804 	movi	r2,4128
{
	/* Cast context to edge_capture's type.
	   * It is important to keep this volatile,
	   * to avoid compiler optimization issues.
	   */
	  button_state = IORD(BUTTON_PIO_BASE,3);
  821878:	d0e7bb15 	stw	r3,-24852(gp)
	  button_latch = IORD(BUTTON_PIO_BASE,0);
  82187c:	10c00037 	ldwio	r3,0(r2)
	  if(button_latch != 15){
  821880:	008003c4 	movi	r2,15
	/* Cast context to edge_capture's type.
	   * It is important to keep this volatile,
	   * to avoid compiler optimization issues.
	   */
	  button_state = IORD(BUTTON_PIO_BASE,3);
	  button_latch = IORD(BUTTON_PIO_BASE,0);
  821884:	d0e7ba15 	stw	r3,-24856(gp)
	  if(button_latch != 15){
  821888:	d127ba17 	ldw	r4,-24856(gp)
		  if(button_state & 1){
  82188c:	00c00044 	movi	r3,1
	   * It is important to keep this volatile,
	   * to avoid compiler optimization issues.
	   */
	  button_state = IORD(BUTTON_PIO_BASE,3);
	  button_latch = IORD(BUTTON_PIO_BASE,0);
	  if(button_latch != 15){
  821890:	20800826 	beq	r4,r2,8218b4 <handle_button_interrupts+0x48>
		  if(button_state & 1){
  821894:	d0a7bb17 	ldw	r2,-24852(gp)
  821898:	10c4703a 	and	r2,r2,r3
  82189c:	1005003a 	cmpeq	r2,r2,zero
  8218a0:	10000726 	beq	r2,zero,8218c0 <handle_button_interrupts+0x54>
			  playing = playing > 0 ? 0 : 1;
		  }else if(button_state & 2){
  8218a4:	d0a7bb17 	ldw	r2,-24852(gp)
  8218a8:	1080008c 	andi	r2,r2,2
  8218ac:	10000a26 	beq	r2,zero,8218d8 <handle_button_interrupts+0x6c>
			  getNextFile = 1;
  8218b0:	d0e7b615 	stw	r3,-24872(gp)
			  fastForward = 1;
		  }else if(button_state & 8){
			  backward = 1;
		  }
	  }
	  IOWR(BUTTON_PIO_BASE,3,0x0);
  8218b4:	00840b04 	movi	r2,4140
  8218b8:	10000035 	stwio	zero,0(r2)
}
  8218bc:	f800283a 	ret
	   */
	  button_state = IORD(BUTTON_PIO_BASE,3);
	  button_latch = IORD(BUTTON_PIO_BASE,0);
	  if(button_latch != 15){
		  if(button_state & 1){
			  playing = playing > 0 ? 0 : 1;
  8218c0:	d0a7a917 	ldw	r2,-24924(gp)
  8218c4:	10c4803a 	cmplt	r2,r2,r3
  8218c8:	d0a7a915 	stw	r2,-24924(gp)
			  fastForward = 1;
		  }else if(button_state & 8){
			  backward = 1;
		  }
	  }
	  IOWR(BUTTON_PIO_BASE,3,0x0);
  8218cc:	00840b04 	movi	r2,4140
  8218d0:	10000035 	stwio	zero,0(r2)
}
  8218d4:	f800283a 	ret
	  if(button_latch != 15){
		  if(button_state & 1){
			  playing = playing > 0 ? 0 : 1;
		  }else if(button_state & 2){
			  getNextFile = 1;
		  }else if(button_state & 4){
  8218d8:	d0a7bb17 	ldw	r2,-24852(gp)
  8218dc:	1080010c 	andi	r2,r2,4
  8218e0:	1000051e 	bne	r2,zero,8218f8 <handle_button_interrupts+0x8c>
			  fastForward = 1;
		  }else if(button_state & 8){
  8218e4:	d0a7bb17 	ldw	r2,-24852(gp)
  8218e8:	1080020c 	andi	r2,r2,8
  8218ec:	103ff126 	beq	r2,zero,8218b4 <handle_button_interrupts+0x48>
			  backward = 1;
  8218f0:	d0e7b015 	stw	r3,-24896(gp)
  8218f4:	003fef06 	br	8218b4 <handle_button_interrupts+0x48>
		  }
	  }
	  IOWR(BUTTON_PIO_BASE,3,0x0);
  8218f8:	00840b04 	movi	r2,4140
		  if(button_state & 1){
			  playing = playing > 0 ? 0 : 1;
		  }else if(button_state & 2){
			  getNextFile = 1;
		  }else if(button_state & 4){
			  fastForward = 1;
  8218fc:	d0e7b215 	stw	r3,-24888(gp)
		  }else if(button_state & 8){
			  backward = 1;
		  }
	  }
	  IOWR(BUTTON_PIO_BASE,3,0x0);
  821900:	10000035 	stwio	zero,0(r2)
}
  821904:	f800283a 	ret

00821908 <main>:
  IOWR(BUTTON_PIO_BASE, 3, 0x0);
  IOWR(BUTTON_PIO_BASE, 2 ,0xF);
}

int main()
{
  821908:	defffd04 	addi	sp,sp,-12

static void init_button_pio()
{
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  alt_irq_register(BUTTON_PIO_IRQ, (void*)0, handle_button_interrupts);
  82190c:	0009883a 	mov	r4,zero
  821910:	000b883a 	mov	r5,zero
  821914:	018020b4 	movhi	r6,130
  821918:	31861b04 	addi	r6,r6,6252
  IOWR(BUTTON_PIO_BASE, 3, 0x0);
  IOWR(BUTTON_PIO_BASE, 2 ,0xF);
}

int main()
{
  82191c:	dfc00215 	stw	ra,8(sp)
  821920:	dc400115 	stw	r17,4(sp)
  821924:	dc000015 	stw	r16,0(sp)

static void init_button_pio()
{
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  alt_irq_register(BUTTON_PIO_IRQ, (void*)0, handle_button_interrupts);
  821928:	082c1f80 	call	82c1f8 <alt_irq_register>
  IOWR(BUTTON_PIO_BASE, 3, 0x0);
  82192c:	00c40b04 	movi	r3,4140
  821930:	18000035 	stwio	zero,0(r3)
  IOWR(BUTTON_PIO_BASE, 2 ,0xF);
  821934:	010003c4 	movi	r4,15
  821938:	00840a04 	movi	r2,4136
  82193c:	11000035 	stwio	r4,0(r2)

	//set the timer period to 1400/50 million seconds
	int timerPeriod = 29000000;

	// initialize timer interrupt vector
	alt_irq_register(TIMER_1_IRQ, (void*) 0, timer1_ISR);
  821940:	01000044 	movi	r4,1
  821944:	000b883a 	mov	r5,zero
  821948:	018020b4 	movhi	r6,130
  82194c:	31861604 	addi	r6,r6,6232
  821950:	082c1f80 	call	82c1f8 <alt_irq_register>

	// initialize timer period
	IOWR(TIMER_1_BASE, 2, (alt_u16)timerPeriod);
  821954:	00e05014 	movui	r3,33088
  821958:	00840204 	movi	r2,4104
  82195c:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_1_BASE, 3, (alt_u16)(timerPeriod >> 16));
  821960:	01006e84 	movi	r4,442
  821964:	00840304 	movi	r2,4108
  821968:	11000035 	stwio	r4,0(r2)

	// clear timer interrupt bit in status register
	IOWR(TIMER_1_BASE, 0, 0x0);
  82196c:	00c40004 	movi	r3,4096
  821970:	18000035 	stwio	zero,0(r3)

	// initialize timer control - start timer, run continuously, enable interrupts
	IOWR(TIMER_1_BASE, 1, 0x7);
  821974:	010001c4 	movi	r4,7
  821978:	00840104 	movi	r2,4100
  82197c:	11000035 	stwio	r4,0(r2)
{
	  char * fileName;

	  init_button_pio();
	  initTimer();
	  send_dev = altera_avalon_mailbox_open("/dev/mailbox_0");
  821980:	010020f4 	movhi	r4,131
  821984:	210dce04 	addi	r4,r4,14136
  821988:	082d9940 	call	82d994 <altera_avalon_mailbox_open>
	  recv_dev = altera_avalon_mailbox_open("/dev/mailbox_1");
  82198c:	010020f4 	movhi	r4,131
  821990:	210dd204 	addi	r4,r4,14152
{
	  char * fileName;

	  init_button_pio();
	  initTimer();
	  send_dev = altera_avalon_mailbox_open("/dev/mailbox_0");
  821994:	d0a7a715 	stw	r2,-24932(gp)
	  recv_dev = altera_avalon_mailbox_open("/dev/mailbox_1");
  821998:	082d9940 	call	82d994 <altera_avalon_mailbox_open>
  82199c:	d0a7a315 	stw	r2,-24948(gp)
  8219a0:	040020f4 	movhi	r16,131
  8219a4:	841e3504 	addi	r16,r16,30932
	  while( altera_avalon_mailbox_get(recv_dev, errno) );
  8219a8:	d127a317 	ldw	r4,-24948(gp)
  8219ac:	81400017 	ldw	r5,0(r16)
  8219b0:	082dbc00 	call	82dbc0 <altera_avalon_mailbox_get>
  8219b4:	103ffc1e 	bne	r2,zero,8219a8 <main+0xa0>

	  alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  8219b8:	010020f4 	movhi	r4,131
  8219bc:	210dd604 	addi	r4,r4,14168
  8219c0:	0830df80 	call	830df8 <alt_up_sd_card_open_dev>
	  	if(device_reference == NULL){
  8219c4:	10006126 	beq	r2,zero,821b4c <main+0x244>
	  	  printf("Cannot open SD Device\n");
	  	  return -1;
	  	}
	  	if(!alt_up_sd_card_is_Present()){
  8219c8:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  8219cc:	1000091e 	bne	r2,zero,8219f4 <main+0xec>
	  	  printf("There is no SD card in the slot\n");
  8219d0:	010020f4 	movhi	r4,131
  8219d4:	210de704 	addi	r4,r4,14236
  8219d8:	0823df40 	call	823df4 <puts>


	  return 0;

  return 0;
}
  8219dc:	00bfffc4 	movi	r2,-1
  8219e0:	dfc00217 	ldw	ra,8(sp)
  8219e4:	dc400117 	ldw	r17,4(sp)
  8219e8:	dc000017 	ldw	r16,0(sp)
  8219ec:	dec00304 	addi	sp,sp,12
  8219f0:	f800283a 	ret
	  	}
	  	if(!alt_up_sd_card_is_Present()){
	  	  printf("There is no SD card in the slot\n");
	  	  return -1;
	  	}
	  	if(!alt_up_sd_card_is_FAT16()){
  8219f4:	0830f840 	call	830f84 <alt_up_sd_card_is_FAT16>
  8219f8:	10005026 	beq	r2,zero,821b3c <main+0x234>
	  	  printf("SD card is not of FAT16 type\n");
	  	  return -1;
	  	}


		if((Yblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
  8219fc:	01000504 	movi	r4,20
  821a00:	08235640 	call	823564 <malloc>
  821a04:	d0a7ac15 	stw	r2,-24912(gp)
  821a08:	10005426 	beq	r2,zero,821b5c <main+0x254>
		if((Crblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
  821a0c:	01000504 	movi	r4,20
  821a10:	08235640 	call	823564 <malloc>
  821a14:	d0a7b315 	stw	r2,-24884(gp)
  821a18:	10006426 	beq	r2,zero,821bac <main+0x2a4>
		if((Cbblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
  821a1c:	01000504 	movi	r4,20
  821a20:	08235640 	call	823564 <malloc>
  821a24:	d0a7ad15 	stw	r2,-24908(gp)
  821a28:	10005c26 	beq	r2,zero,821b9c <main+0x294>

		if((YDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
  821a2c:	01000a04 	movi	r4,40
  821a30:	08235640 	call	823564 <malloc>
  821a34:	d0a7ab15 	stw	r2,-24916(gp)
  821a38:	10005426 	beq	r2,zero,821b8c <main+0x284>
		if((CbDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
  821a3c:	01000a04 	movi	r4,40
  821a40:	08235640 	call	823564 <malloc>
  821a44:	d0a7b415 	stw	r2,-24880(gp)
  821a48:	10004c26 	beq	r2,zero,821b7c <main+0x274>
		if((CrDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
  821a4c:	01000a04 	movi	r4,40
  821a50:	08235640 	call	823564 <malloc>
  821a54:	d0a7a515 	stw	r2,-24940(gp)
  821a58:	10004426 	beq	r2,zero,821b6c <main+0x264>

		altera_avalon_mailbox_post(send_dev, YDCAC);
  821a5c:	d127a717 	ldw	r4,-24932(gp)
  821a60:	d167ab17 	ldw	r5,-24916(gp)
		altera_avalon_mailbox_post(send_dev, playing);
		altera_avalon_mailbox_post(send_dev, getNextFile);
		altera_avalon_mailbox_post(send_dev, fastForward);
		altera_avalon_mailbox_post(send_dev, backward);

		fileName = files[index];
  821a64:	044020f4 	movhi	r17,131
  821a68:	8c4f7b04 	addi	r17,r17,15852

		if((YDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
		if((CbDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
		if((CrDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");

		altera_avalon_mailbox_post(send_dev, YDCAC);
  821a6c:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, CbDCAC);
  821a70:	d127a717 	ldw	r4,-24932(gp)
  821a74:	d167b417 	ldw	r5,-24880(gp)
  821a78:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, CrDCAC);
  821a7c:	d127a717 	ldw	r4,-24932(gp)
  821a80:	d167a517 	ldw	r5,-24940(gp)
  821a84:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, Yblock);
  821a88:	d127a717 	ldw	r4,-24932(gp)
  821a8c:	d167ac17 	ldw	r5,-24912(gp)
  821a90:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, Cbblock);
  821a94:	d127a717 	ldw	r4,-24932(gp)
  821a98:	d167ad17 	ldw	r5,-24908(gp)
  821a9c:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, Crblock);
  821aa0:	d127a717 	ldw	r4,-24932(gp)
  821aa4:	d167b317 	ldw	r5,-24884(gp)
  821aa8:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, playing);
  821aac:	d167a917 	ldw	r5,-24924(gp)
  821ab0:	d127a717 	ldw	r4,-24932(gp)
  821ab4:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, getNextFile);
  821ab8:	d167b617 	ldw	r5,-24872(gp)
  821abc:	d127a717 	ldw	r4,-24932(gp)
  821ac0:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, fastForward);
  821ac4:	d167b217 	ldw	r5,-24888(gp)
  821ac8:	d127a717 	ldw	r4,-24932(gp)
  821acc:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_post(send_dev, backward);
  821ad0:	d167b017 	ldw	r5,-24896(gp)
  821ad4:	d127a717 	ldw	r4,-24932(gp)
  821ad8:	082da0c0 	call	82da0c <altera_avalon_mailbox_post>

		fileName = files[index];
  821adc:	d0e7b907 	ldb	r3,-24860(gp)
  821ae0:	18c00524 	muli	r3,r3,20
  821ae4:	1c61883a 	add	r16,r3,r17
  821ae8:	00000606 	br	821b04 <main+0x1fc>
		//returnCode = mjpeg423_decode(fileName);
		while(1){
			while( mjpeg423_decode(fileName) <= 0 ){
				index = (index + 1) % 2;
				fileName = files[index];
  821aec:	18803fcc 	andi	r2,r3,255
  821af0:	1080201c 	xori	r2,r2,128
  821af4:	10bfe004 	addi	r2,r2,-128
  821af8:	10800524 	muli	r2,r2,20

		fileName = files[index];
		//returnCode = mjpeg423_decode(fileName);
		while(1){
			while( mjpeg423_decode(fileName) <= 0 ){
				index = (index + 1) % 2;
  821afc:	d0e7b905 	stb	r3,-24860(gp)
				fileName = files[index];
  821b00:	1461883a 	add	r16,r2,r17
		altera_avalon_mailbox_post(send_dev, backward);

		fileName = files[index];
		//returnCode = mjpeg423_decode(fileName);
		while(1){
			while( mjpeg423_decode(fileName) <= 0 ){
  821b04:	8009883a 	mov	r4,r16
  821b08:	0820f840 	call	820f84 <mjpeg423_decode>
  821b0c:	00bffd16 	blt	zero,r2,821b04 <main+0x1fc>
				index = (index + 1) % 2;
  821b10:	d0a7b907 	ldb	r2,-24860(gp)
  821b14:	00e00034 	movhi	r3,32768
  821b18:	18c00044 	addi	r3,r3,1
  821b1c:	10800044 	addi	r2,r2,1
  821b20:	10c6703a 	and	r3,r2,r3
  821b24:	183ff10e 	bge	r3,zero,821aec <main+0x1e4>
  821b28:	18ffffc4 	addi	r3,r3,-1
  821b2c:	00bfff84 	movi	r2,-2
  821b30:	1886b03a 	or	r3,r3,r2
  821b34:	18c00044 	addi	r3,r3,1
  821b38:	003fec06 	br	821aec <main+0x1e4>
	  	if(!alt_up_sd_card_is_Present()){
	  	  printf("There is no SD card in the slot\n");
	  	  return -1;
	  	}
	  	if(!alt_up_sd_card_is_FAT16()){
	  	  printf("SD card is not of FAT16 type\n");
  821b3c:	010020f4 	movhi	r4,131
  821b40:	210def04 	addi	r4,r4,14268
  821b44:	0823df40 	call	823df4 <puts>
  821b48:	003fa406 	br	8219dc <main+0xd4>
	  recv_dev = altera_avalon_mailbox_open("/dev/mailbox_1");
	  while( altera_avalon_mailbox_get(recv_dev, errno) );

	  alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
	  	if(device_reference == NULL){
	  	  printf("Cannot open SD Device\n");
  821b4c:	010020f4 	movhi	r4,131
  821b50:	210de104 	addi	r4,r4,14212
  821b54:	0823df40 	call	823df4 <puts>
  821b58:	003fa006 	br	8219dc <main+0xd4>
	  	  printf("SD card is not of FAT16 type\n");
	  	  return -1;
	  	}


		if((Yblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
  821b5c:	010020f4 	movhi	r4,131
  821b60:	210df704 	addi	r4,r4,14300
  821b64:	08206880 	call	820688 <error_and_exit>
  821b68:	003fa806 	br	821a0c <main+0x104>
		if((Crblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Cbblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");

		if((YDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
		if((CbDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
		if((CrDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
  821b6c:	010020f4 	movhi	r4,131
  821b70:	210df704 	addi	r4,r4,14300
  821b74:	08206880 	call	820688 <error_and_exit>
  821b78:	003fb806 	br	821a5c <main+0x154>
		if((Yblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Crblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Cbblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");

		if((YDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
		if((CbDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
  821b7c:	010020f4 	movhi	r4,131
  821b80:	210df704 	addi	r4,r4,14300
  821b84:	08206880 	call	820688 <error_and_exit>
  821b88:	003fb006 	br	821a4c <main+0x144>

		if((Yblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Crblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Cbblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");

		if((YDCAC = malloc(sizeof(color_block_t*) * 10))==NULL) error_and_exit("malloc failed");
  821b8c:	010020f4 	movhi	r4,131
  821b90:	210df704 	addi	r4,r4,14300
  821b94:	08206880 	call	820688 <error_and_exit>
  821b98:	003fa806 	br	821a3c <main+0x134>
	  	}


		if((Yblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Crblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Cbblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
  821b9c:	010020f4 	movhi	r4,131
  821ba0:	210df704 	addi	r4,r4,14300
  821ba4:	08206880 	call	820688 <error_and_exit>
  821ba8:	003fa006 	br	821a2c <main+0x124>
	  	  return -1;
	  	}


		if((Yblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
		if((Crblock = malloc(sizeof(color_block_t*) * 5))==NULL) error_and_exit("malloc failed");
  821bac:	010020f4 	movhi	r4,131
  821bb0:	210df704 	addi	r4,r4,14300
  821bb4:	08206880 	call	820688 <error_and_exit>
  821bb8:	003f9806 	br	821a1c <main+0x114>

00821bbc <sd_seek>:
 * Set indices into the SD card for a certain point in the file with the sector list.
 * @param start_byte_in_file : Byte in the current file (has sector list loaded) from which to start reading
 * @return:	Returns 0
 */
int sd_seek(uint32_t start_byte_in_file) {
	sd_card_curr_read_sector = start_byte_in_file / 512;
  821bbc:	2004d27a 	srli	r2,r4,9
	sd_card_start_byte_in_sector = start_byte_in_file % 512;
  821bc0:	21007fcc 	andi	r4,r4,511
  821bc4:	d127be15 	stw	r4,-24840(gp)
 * Set indices into the SD card for a certain point in the file with the sector list.
 * @param start_byte_in_file : Byte in the current file (has sector list loaded) from which to start reading
 * @return:	Returns 0
 */
int sd_seek(uint32_t start_byte_in_file) {
	sd_card_curr_read_sector = start_byte_in_file / 512;
  821bc8:	d0a7bd15 	stw	r2,-24844(gp)
	sd_card_start_byte_in_sector = start_byte_in_file % 512;
	return 0;
}
  821bcc:	0005883a 	mov	r2,zero
  821bd0:	f800283a 	ret

00821bd4 <sd_card_file_size>:
	}
	return true;
}

unsigned int sd_card_file_size(short int file_handle)
{
  821bd4:	213fffcc 	andi	r4,r4,65535
  821bd8:	2120001c 	xori	r4,r4,32768
  821bdc:	21200004 	addi	r4,r4,-32768
  821be0:	200891ba 	slli	r4,r4,6
  821be4:	008020f4 	movhi	r2,131
  821be8:	109e7904 	addi	r2,r2,31204
  821bec:	2089883a 	add	r4,r4,r2
	return active_files[file_handle].file_size_in_bytes;
}
  821bf0:	20800017 	ldw	r2,0(r4)
  821bf4:	f800283a 	ret

00821bf8 <sd_card_wait_read_sector>:
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
}

bool sd_card_wait_read_sector()
{
  821bf8:	008020f4 	movhi	r2,131
  821bfc:	109e4204 	addi	r2,r2,30984
  821c00:	11000017 	ldw	r4,0(r2)
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  821c04:	2080002b 	ldhuio	r2,0(r4)
	} while ((reg_state & 0x04)!=0);
  821c08:	10bfffcc 	andi	r2,r2,65535
  821c0c:	10c0010c 	andi	r3,r2,4
  821c10:	183ffc1e 	bne	r3,zero,821c04 <sd_card_wait_read_sector+0xc>
  821c14:	1004d13a 	srli	r2,r2,4
  821c18:	1080005c 	xori	r2,r2,1
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
		return true;
	else
		return false;
}
  821c1c:	1080004c 	andi	r2,r2,1
  821c20:	f800283a 	ret

00821c24 <sd_card_start_read_sector>:
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  821c24:	d0a7bc17 	ldw	r2,-24848(gp)
  821c28:	2109883a 	add	r4,r4,r4
  821c2c:	2109883a 	add	r4,r4,r4
  821c30:	2085883a 	add	r2,r4,r2
  821c34:	01c020f4 	movhi	r7,131
  821c38:	39de4804 	addi	r7,r7,31008
  821c3c:	10c00017 	ldw	r3,0(r2)
  821c40:	39400017 	ldw	r5,0(r7)
  821c44:	008020f4 	movhi	r2,131
  821c48:	109e4604 	addi	r2,r2,31000
  821c4c:	11800017 	ldw	r6,0(r2)
  821c50:	1947883a 	add	r3,r3,r5
  821c54:	1806927a 	slli	r3,r3,9
  821c58:	30c00035 	stwio	r3,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  821c5c:	008020f4 	movhi	r2,131
  821c60:	109e4504 	addi	r2,r2,30996
  821c64:	11400017 	ldw	r5,0(r2)
  821c68:	00c00444 	movi	r3,17
  821c6c:	28c0002d 	sthio	r3,0(r5)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  821c70:	d0e7bc17 	ldw	r3,-24848(gp)
  821c74:	39800017 	ldw	r6,0(r7)
  821c78:	20c9883a 	add	r4,r4,r3
  821c7c:	20800017 	ldw	r2,0(r4)
  821c80:	00c020f4 	movhi	r3,131
  821c84:	18de4c04 	addi	r3,r3,31024
  821c88:	1185883a 	add	r2,r2,r6
  821c8c:	18800015 	stw	r2,0(r3)
}
  821c90:	f800283a 	ret

00821c94 <sd_card_create_sectors_list>:
}


bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);
  821c94:	d0a7bc17 	ldw	r2,-24848(gp)
	return bytes_read;
}


bool sd_card_create_sectors_list(short int file_handle)
{
  821c98:	defff604 	addi	sp,sp,-40
  821c9c:	dc000115 	stw	r16,4(sp)
  821ca0:	dfc00915 	stw	ra,36(sp)
  821ca4:	ddc00815 	stw	r23,32(sp)
  821ca8:	dd800715 	stw	r22,28(sp)
  821cac:	dd400615 	stw	r21,24(sp)
  821cb0:	dd000515 	stw	r20,20(sp)
  821cb4:	dcc00415 	stw	r19,16(sp)
  821cb8:	dc800315 	stw	r18,12(sp)
  821cbc:	dc400215 	stw	r17,8(sp)
  821cc0:	2021883a 	mov	r16,r4
	if(sectors != NULL) free(sectors);
  821cc4:	10000226 	beq	r2,zero,821cd0 <sd_card_create_sectors_list+0x3c>
  821cc8:	1009883a 	mov	r4,r2
  821ccc:	08235500 	call	823550 <free>

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  821cd0:	80bfffcc 	andi	r2,r16,65535
  821cd4:	10a0001c 	xori	r2,r2,32768
  821cd8:	10a00004 	addi	r2,r2,-32768
  821cdc:	100491ba 	slli	r2,r2,6
  821ce0:	00c020f4 	movhi	r3,131
  821ce4:	18de7304 	addi	r3,r3,31180
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  821ce8:	054020f4 	movhi	r21,131
  821cec:	ad5e5e04 	addi	r21,r21,31096
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  821cf0:	10e1883a 	add	r16,r2,r3
  821cf4:	81000617 	ldw	r4,24(r16)
  821cf8:	0822c0c0 	call	822c0c <__floatunsidf>
  821cfc:	0011883a 	mov	r8,zero
  821d00:	024fd834 	movhi	r9,16224
  821d04:	480f883a 	mov	r7,r9
  821d08:	400d883a 	mov	r6,r8
  821d0c:	180b883a 	mov	r5,r3
  821d10:	1009883a 	mov	r4,r2
  821d14:	08226e80 	call	8226e8 <__muldf3>
  821d18:	180b883a 	mov	r5,r3
  821d1c:	1009883a 	mov	r4,r2
  821d20:	0821fd00 	call	821fd0 <ceil>
  821d24:	180b883a 	mov	r5,r3
  821d28:	1009883a 	mov	r4,r2
  821d2c:	0822b340 	call	822b34 <__fixdfsi>
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  821d30:	1089883a 	add	r4,r2,r2
  821d34:	2109883a 	add	r4,r4,r4
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  821d38:	1027883a 	mov	r19,r2
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading
  821d3c:	d0a7bf15 	stw	r2,-24836(gp)

	//allocate sector list
	sectors = malloc(4*sectors_num);
  821d40:	08235640 	call	823564 <malloc>
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  821d44:	80c00717 	ldw	r3,28(r16)
  821d48:	a9800383 	ldbu	r6,14(r21)
  821d4c:	81400817 	ldw	r5,32(r16)
  821d50:	a9001417 	ldw	r4,80(r21)
  821d54:	18ffff84 	addi	r3,r3,-2
  821d58:	1987383a 	mul	r3,r3,r6
  821d5c:	2149883a 	add	r4,r4,r5
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821d60:	01c00044 	movi	r7,1
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  821d64:	190d883a 	add	r6,r3,r4
	sectors[0] = data_sector;
  821d68:	11800015 	stw	r6,0(r2)
	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  821d6c:	d0a7bc15 	stw	r2,-24848(gp)

	// Reset the offsets into the sectors and bytes in the sector
	sd_card_curr_read_sector = 0;
  821d70:	d027bd15 	stw	zero,-24844(gp)
	sd_card_start_byte_in_sector = 0;
  821d74:	d027be15 	stw	zero,-24840(gp)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821d78:	3cc0280e 	bge	r7,r19,821e1c <sd_card_create_sectors_list+0x188>
  821d7c:	8023883a 	mov	r17,r16
  821d80:	3825883a 	mov	r18,r7
  821d84:	04000104 	movi	r16,4
  821d88:	8d000804 	addi	r20,r17,32
  821d8c:	a82d883a 	mov	r22,r21
  821d90:	05fffe14 	movui	r23,65528
  821d94:	00000806 	br	821db8 <sd_card_create_sectors_list+0x124>
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  821d98:	d0a7bc17 	ldw	r2,-24848(gp)
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  821d9c:	a1000015 	stw	r4,0(r20)
			data_sector = data_sector + 1;
  821da0:	31800044 	addi	r6,r6,1
		}

		sectors[i] = data_sector;
  821da4:	8085883a 	add	r2,r16,r2
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821da8:	94800044 	addi	r18,r18,1
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  821dac:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821db0:	84000104 	addi	r16,r16,4
  821db4:	9c801926 	beq	r19,r18,821e1c <sd_card_create_sectors_list+0x188>

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  821db8:	a8800383 	ldbu	r2,14(r21)
  821dbc:	88c00817 	ldw	r3,32(r17)
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  821dc0:	d80b883a 	mov	r5,sp

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  821dc4:	10bfffc4 	addi	r2,r2,-1
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  821dc8:	19000044 	addi	r4,r3,1

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  821dcc:	18bff21e 	bne	r3,r2,821d98 <sd_card_create_sectors_list+0x104>
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  821dd0:	89000717 	ldw	r4,28(r17)
  821dd4:	082e2b00 	call	82e2b0 <get_cluster_flag>
  821dd8:	10001c26 	beq	r2,zero,821e4c <sd_card_create_sectors_list+0x1b8>
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  821ddc:	d900000b 	ldhu	r4,0(sp)
  821de0:	20bffe0c 	andi	r2,r4,65528
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  821de4:	217fff84 	addi	r5,r4,-2
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  821de8:	15c01826 	beq	r2,r23,821e4c <sd_card_create_sectors_list+0x1b8>
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  821dec:	b0800383 	ldbu	r2,14(r22)
  821df0:	b0c01417 	ldw	r3,80(r22)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821df4:	94800044 	addi	r18,r18,1
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  821df8:	2885383a 	mul	r2,r5,r2
					/* End of file */
					return false;
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
  821dfc:	89000715 	stw	r4,28(r17)
					active_files[file_handle].current_sector_in_cluster = 0;
  821e00:	88000815 	stw	zero,32(r17)
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  821e04:	10cd883a 	add	r6,r2,r3
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  821e08:	d0a7bc17 	ldw	r2,-24848(gp)
  821e0c:	8085883a 	add	r2,r16,r2
  821e10:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821e14:	84000104 	addi	r16,r16,4
  821e18:	9cbfe71e 	bne	r19,r18,821db8 <sd_card_create_sectors_list+0x124>
  821e1c:	00800044 	movi	r2,1
		}

		sectors[i] = data_sector;
	}
	return true;
}
  821e20:	dfc00917 	ldw	ra,36(sp)
  821e24:	ddc00817 	ldw	r23,32(sp)
  821e28:	dd800717 	ldw	r22,28(sp)
  821e2c:	dd400617 	ldw	r21,24(sp)
  821e30:	dd000517 	ldw	r20,20(sp)
  821e34:	dcc00417 	ldw	r19,16(sp)
  821e38:	dc800317 	ldw	r18,12(sp)
  821e3c:	dc400217 	ldw	r17,8(sp)
  821e40:	dc000117 	ldw	r16,4(sp)
  821e44:	dec00a04 	addi	sp,sp,40
  821e48:	f800283a 	ret
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  821e4c:	0005883a 	mov	r2,zero
  821e50:	003ff306 	br	821e20 <sd_card_create_sectors_list+0x18c>

00821e54 <sd_read>:
 * @param count	: Number of bytes to read from SD card.
 * @return: On success, returns number of bytes read.
 * 			If at end of file, returns -1.
 * 			On error, returns -2.
 */
int sd_read(void* buf, int count) {
  821e54:	defffc04 	addi	sp,sp,-16
  821e58:	dfc00315 	stw	ra,12(sp)
  821e5c:	dc800215 	stw	r18,8(sp)
  821e60:	dc400115 	stw	r17,4(sp)
  821e64:	dc000015 	stw	r16,0(sp)
  821e68:	2817883a 	mov	r11,r5
  821e6c:	2019883a 	mov	r12,r4
	int bytes_read = 0;

	if (count <= 0) { return 0; }
  821e70:	01400816 	blt	zero,r5,821e94 <sd_read+0x40>
			if (bytes_read >= count) {
				sd_card_start_byte_in_sector = j + 4;
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);
  821e74:	0011883a 	mov	r8,zero

		sd_card_curr_read_sector++;
		sd_card_start_byte_in_sector = 0;
	}
	return bytes_read;
}
  821e78:	4005883a 	mov	r2,r8
  821e7c:	dfc00317 	ldw	ra,12(sp)
  821e80:	dc800217 	ldw	r18,8(sp)
  821e84:	dc400117 	ldw	r17,4(sp)
  821e88:	dc000017 	ldw	r16,0(sp)
  821e8c:	dec00404 	addi	sp,sp,16
  821e90:	f800283a 	ret
 */
int sd_read(void* buf, int count) {
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }
  821e94:	d127bd17 	ldw	r4,-24844(gp)
  821e98:	d0a7bf17 	ldw	r2,-24836(gp)
  821e9c:	2080440e 	bge	r4,r2,821fb0 <sd_read+0x15c>
  821ea0:	d367bc17 	ldw	r13,-24848(gp)
  821ea4:	0011883a 	mov	r8,zero
  821ea8:	048020f4 	movhi	r18,131
  821eac:	949e4604 	addi	r18,r18,31000
  821eb0:	038020f4 	movhi	r14,131
  821eb4:	739e4804 	addi	r14,r14,31008
  821eb8:	03c020f4 	movhi	r15,131
  821ebc:	7bde4504 	addi	r15,r15,30996
  821ec0:	040020f4 	movhi	r16,131
  821ec4:	841e4c04 	addi	r16,r16,31024
  821ec8:	044020f4 	movhi	r17,131
  821ecc:	8c5e4204 	addi	r17,r17,30984
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  821ed0:	2109883a 	add	r4,r4,r4
  821ed4:	2109883a 	add	r4,r4,r4
  821ed8:	2347883a 	add	r3,r4,r13
  821edc:	18800017 	ldw	r2,0(r3)
  821ee0:	71400017 	ldw	r5,0(r14)
  821ee4:	91800017 	ldw	r6,0(r18)
  821ee8:	1145883a 	add	r2,r2,r5
  821eec:	1004927a 	slli	r2,r2,9
  821ef0:	30800035 	stwio	r2,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  821ef4:	78c00017 	ldw	r3,0(r15)
  821ef8:	00800444 	movi	r2,17
  821efc:	1880002d 	sthio	r2,0(r3)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  821f00:	d367bc17 	ldw	r13,-24848(gp)
  821f04:	70c00017 	ldw	r3,0(r14)
  821f08:	89400017 	ldw	r5,0(r17)
  821f0c:	2349883a 	add	r4,r4,r13
  821f10:	20800017 	ldw	r2,0(r4)
  821f14:	10c5883a 	add	r2,r2,r3
  821f18:	80800015 	stw	r2,0(r16)

bool sd_card_wait_read_sector()
{
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  821f1c:	2880002b 	ldhuio	r2,0(r5)
	} while ((reg_state & 0x04)!=0);
  821f20:	10bfffcc 	andi	r2,r2,65535
  821f24:	10c0010c 	andi	r3,r2,4
  821f28:	183ffc1e 	bne	r3,zero,821f1c <sd_read+0xc8>
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
  821f2c:	1080040c 	andi	r2,r2,16
  821f30:	1000211e 	bne	r2,zero,821fb8 <sd_read+0x164>
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
			return -2;
		}

		//move sector to file buffer 32bits at a time
		for(int j = sd_card_start_byte_in_sector; j < 512; j+=4){
  821f34:	d1e7be17 	ldw	r7,-24840(gp)
  821f38:	00c07fc4 	movi	r3,511
  821f3c:	380d883a 	mov	r6,r7
  821f40:	19c01216 	blt	r3,r7,821f8c <sd_read+0x138>
  821f44:	008020f4 	movhi	r2,131
  821f48:	109e4704 	addi	r2,r2,31004
  821f4c:	12400017 	ldw	r9,0(r2)
  821f50:	1815883a 	mov	r10,r3
  821f54:	3b0b883a 	add	r5,r7,r12
  821f58:	00000206 	br	821f64 <sd_read+0x110>
  821f5c:	31800104 	addi	r6,r6,4
  821f60:	51800a16 	blt	r10,r6,821f8c <sd_read+0x138>
			*((uint32_t*)(buf+j-sd_card_start_byte_in_sector)) = IORD_32DIRECT(buffer_memory, j);
  821f64:	29c5c83a 	sub	r2,r5,r7
  821f68:	3247883a 	add	r3,r6,r9
  821f6c:	19000037 	ldwio	r4,0(r3)
			bytes_read += 4;
  821f70:	42000104 	addi	r8,r8,4
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
			return -2;
		}

		//move sector to file buffer 32bits at a time
		for(int j = sd_card_start_byte_in_sector; j < 512; j+=4){
  821f74:	29400104 	addi	r5,r5,4
			*((uint32_t*)(buf+j-sd_card_start_byte_in_sector)) = IORD_32DIRECT(buffer_memory, j);
  821f78:	11000015 	stw	r4,0(r2)
			bytes_read += 4;
			if (bytes_read >= count) {
  821f7c:	42fff716 	blt	r8,r11,821f5c <sd_read+0x108>
				sd_card_start_byte_in_sector = j + 4;
  821f80:	31c00104 	addi	r7,r6,4
  821f84:	d1e7be15 	stw	r7,-24840(gp)
  821f88:	003fbb06 	br	821e78 <sd_read+0x24>
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  821f8c:	d0a7bd17 	ldw	r2,-24844(gp)
		sd_card_start_byte_in_sector = 0;
  821f90:	d027be15 	stw	zero,-24840(gp)
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  821f94:	11000044 	addi	r4,r2,1
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }

	while (sd_card_curr_read_sector < sd_card_sectors_num){
  821f98:	d0a7bf17 	ldw	r2,-24836(gp)
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  821f9c:	d127bd15 	stw	r4,-24844(gp)
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }

	while (sd_card_curr_read_sector < sd_card_sectors_num){
  821fa0:	20bfb50e 	bge	r4,r2,821e78 <sd_read+0x24>
			if (bytes_read >= count) {
				sd_card_start_byte_in_sector = j + 4;
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);
  821fa4:	61c5c83a 	sub	r2,r12,r7
  821fa8:	13008004 	addi	r12,r2,512
  821fac:	003fc806 	br	821ed0 <sd_read+0x7c>
 */
int sd_read(void* buf, int count) {
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }
  821fb0:	023fffc4 	movi	r8,-1
  821fb4:	003fb006 	br	821e78 <sd_read+0x24>

	while (sd_card_curr_read_sector < sd_card_sectors_num){
		sd_card_start_read_sector(sd_card_curr_read_sector);
		if(!sd_card_wait_read_sector()){
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
  821fb8:	d167bd17 	ldw	r5,-24844(gp)
  821fbc:	010020f4 	movhi	r4,131
  821fc0:	210dfb04 	addi	r4,r4,14316
  821fc4:	0823cb80 	call	823cb8 <printf>
  821fc8:	023fff84 	movi	r8,-2
  821fcc:	003faa06 	br	821e78 <sd_read+0x24>

00821fd0 <ceil>:
  821fd0:	2805d53a 	srai	r2,r5,20
  821fd4:	defff604 	addi	sp,sp,-40
  821fd8:	dd800615 	stw	r22,24(sp)
  821fdc:	10c1ffcc 	andi	r3,r2,2047
  821fe0:	1dbf0044 	addi	r22,r3,-1023
  821fe4:	008004c4 	movi	r2,19
  821fe8:	ddc00715 	stw	r23,28(sp)
  821fec:	dc800215 	stw	r18,8(sp)
  821ff0:	dc400115 	stw	r17,4(sp)
  821ff4:	dc000015 	stw	r16,0(sp)
  821ff8:	dfc00915 	stw	ra,36(sp)
  821ffc:	df000815 	stw	fp,32(sp)
  822000:	dd400515 	stw	r21,20(sp)
  822004:	dd000415 	stw	r20,16(sp)
  822008:	dcc00315 	stw	r19,12(sp)
  82200c:	2021883a 	mov	r16,r4
  822010:	2823883a 	mov	r17,r5
  822014:	282f883a 	mov	r23,r5
  822018:	2025883a 	mov	r18,r4
  82201c:	15802c16 	blt	r2,r22,8220d0 <ceil+0x100>
  822020:	b0005416 	blt	r22,zero,822174 <ceil+0x1a4>
  822024:	00800434 	movhi	r2,16
  822028:	10bfffc4 	addi	r2,r2,-1
  82202c:	15b9d83a 	sra	fp,r2,r22
  822030:	282f883a 	mov	r23,r5
  822034:	e144703a 	and	r2,fp,r5
  822038:	1104b03a 	or	r2,r2,r4
  82203c:	10001626 	beq	r2,zero,822098 <ceil+0xc8>
  822040:	00a20034 	movhi	r2,34816
  822044:	109d6704 	addi	r2,r2,30108
  822048:	00df8e34 	movhi	r3,32312
  82204c:	18f90f04 	addi	r3,r3,-7108
  822050:	180f883a 	mov	r7,r3
  822054:	100d883a 	mov	r6,r2
  822058:	08226740 	call	822674 <__adddf3>
  82205c:	180b883a 	mov	r5,r3
  822060:	000d883a 	mov	r6,zero
  822064:	000f883a 	mov	r7,zero
  822068:	1009883a 	mov	r4,r2
  82206c:	0822aac0 	call	822aac <__gtdf2>
  822070:	0080070e 	bge	zero,r2,822090 <ceil+0xc0>
  822074:	0440030e 	bge	zero,r17,822084 <ceil+0xb4>
  822078:	00800434 	movhi	r2,16
  82207c:	1585d83a 	sra	r2,r2,r22
  822080:	88af883a 	add	r23,r17,r2
  822084:	0704303a 	nor	r2,zero,fp
  822088:	b8ae703a 	and	r23,r23,r2
  82208c:	0025883a 	mov	r18,zero
  822090:	9021883a 	mov	r16,r18
  822094:	b823883a 	mov	r17,r23
  822098:	8005883a 	mov	r2,r16
  82209c:	8807883a 	mov	r3,r17
  8220a0:	dfc00917 	ldw	ra,36(sp)
  8220a4:	df000817 	ldw	fp,32(sp)
  8220a8:	ddc00717 	ldw	r23,28(sp)
  8220ac:	dd800617 	ldw	r22,24(sp)
  8220b0:	dd400517 	ldw	r21,20(sp)
  8220b4:	dd000417 	ldw	r20,16(sp)
  8220b8:	dcc00317 	ldw	r19,12(sp)
  8220bc:	dc800217 	ldw	r18,8(sp)
  8220c0:	dc400117 	ldw	r17,4(sp)
  8220c4:	dc000017 	ldw	r16,0(sp)
  8220c8:	dec00a04 	addi	sp,sp,40
  8220cc:	f800283a 	ret
  8220d0:	00800cc4 	movi	r2,51
  8220d4:	15801f16 	blt	r2,r22,822154 <ceil+0x184>
  8220d8:	18befb44 	addi	r2,r3,-1043
  8220dc:	00ffffc4 	movi	r3,-1
  8220e0:	18b8d83a 	srl	fp,r3,r2
  8220e4:	e104703a 	and	r2,fp,r4
  8220e8:	103feb26 	beq	r2,zero,822098 <ceil+0xc8>
  8220ec:	00a20034 	movhi	r2,34816
  8220f0:	109d6704 	addi	r2,r2,30108
  8220f4:	00df8e34 	movhi	r3,32312
  8220f8:	18f90f04 	addi	r3,r3,-7108
  8220fc:	180f883a 	mov	r7,r3
  822100:	100d883a 	mov	r6,r2
  822104:	08226740 	call	822674 <__adddf3>
  822108:	180b883a 	mov	r5,r3
  82210c:	000d883a 	mov	r6,zero
  822110:	000f883a 	mov	r7,zero
  822114:	1009883a 	mov	r4,r2
  822118:	0822aac0 	call	822aac <__gtdf2>
  82211c:	0080250e 	bge	zero,r2,8221b4 <ceil+0x1e4>
  822120:	0440090e 	bge	zero,r17,822148 <ceil+0x178>
  822124:	00800504 	movi	r2,20
  822128:	b0802926 	beq	r22,r2,8221d0 <ceil+0x200>
  82212c:	00c00d04 	movi	r3,52
  822130:	1d87c83a 	sub	r3,r3,r22
  822134:	00800044 	movi	r2,1
  822138:	10c4983a 	sll	r2,r2,r3
  82213c:	8085883a 	add	r2,r16,r2
  822140:	14001e36 	bltu	r2,r16,8221bc <ceil+0x1ec>
  822144:	1025883a 	mov	r18,r2
  822148:	0704303a 	nor	r2,zero,fp
  82214c:	90a4703a 	and	r18,r18,r2
  822150:	003fcf06 	br	822090 <ceil+0xc0>
  822154:	00810004 	movi	r2,1024
  822158:	b0bfcf1e 	bne	r22,r2,822098 <ceil+0xc8>
  82215c:	800d883a 	mov	r6,r16
  822160:	280f883a 	mov	r7,r5
  822164:	08226740 	call	822674 <__adddf3>
  822168:	1021883a 	mov	r16,r2
  82216c:	1823883a 	mov	r17,r3
  822170:	003fc906 	br	822098 <ceil+0xc8>
  822174:	00a20034 	movhi	r2,34816
  822178:	109d6704 	addi	r2,r2,30108
  82217c:	00df8e34 	movhi	r3,32312
  822180:	18f90f04 	addi	r3,r3,-7108
  822184:	180f883a 	mov	r7,r3
  822188:	100d883a 	mov	r6,r2
  82218c:	08226740 	call	822674 <__adddf3>
  822190:	180b883a 	mov	r5,r3
  822194:	000d883a 	mov	r6,zero
  822198:	000f883a 	mov	r7,zero
  82219c:	1009883a 	mov	r4,r2
  8221a0:	0822aac0 	call	822aac <__gtdf2>
  8221a4:	00bfba0e 	bge	zero,r2,822090 <ceil+0xc0>
  8221a8:	88000b16 	blt	r17,zero,8221d8 <ceil+0x208>
  8221ac:	8c04b03a 	or	r2,r17,r16
  8221b0:	1000041e 	bne	r2,zero,8221c4 <ceil+0x1f4>
  8221b4:	882f883a 	mov	r23,r17
  8221b8:	003fb506 	br	822090 <ceil+0xc0>
  8221bc:	8dc00044 	addi	r23,r17,1
  8221c0:	003fe006 	br	822144 <ceil+0x174>
  8221c4:	05cffc34 	movhi	r23,16368
  8221c8:	0025883a 	mov	r18,zero
  8221cc:	003fb006 	br	822090 <ceil+0xc0>
  8221d0:	8dc00044 	addi	r23,r17,1
  8221d4:	003fdc06 	br	822148 <ceil+0x178>
  8221d8:	05e00034 	movhi	r23,32768
  8221dc:	0025883a 	mov	r18,zero
  8221e0:	003fab06 	br	822090 <ceil+0xc0>

008221e4 <_fpadd_parts>:
  8221e4:	defff804 	addi	sp,sp,-32
  8221e8:	dcc00315 	stw	r19,12(sp)
  8221ec:	2027883a 	mov	r19,r4
  8221f0:	21000017 	ldw	r4,0(r4)
  8221f4:	00c00044 	movi	r3,1
  8221f8:	dd400515 	stw	r21,20(sp)
  8221fc:	dd000415 	stw	r20,16(sp)
  822200:	ddc00715 	stw	r23,28(sp)
  822204:	dd800615 	stw	r22,24(sp)
  822208:	dc800215 	stw	r18,8(sp)
  82220c:	dc400115 	stw	r17,4(sp)
  822210:	dc000015 	stw	r16,0(sp)
  822214:	282b883a 	mov	r21,r5
  822218:	3029883a 	mov	r20,r6
  82221c:	1900632e 	bgeu	r3,r4,8223ac <_fpadd_parts+0x1c8>
  822220:	28800017 	ldw	r2,0(r5)
  822224:	1880812e 	bgeu	r3,r2,82242c <_fpadd_parts+0x248>
  822228:	00c00104 	movi	r3,4
  82222c:	20c0dc26 	beq	r4,r3,8225a0 <_fpadd_parts+0x3bc>
  822230:	10c07e26 	beq	r2,r3,82242c <_fpadd_parts+0x248>
  822234:	00c00084 	movi	r3,2
  822238:	10c06726 	beq	r2,r3,8223d8 <_fpadd_parts+0x1f4>
  82223c:	20c07b26 	beq	r4,r3,82242c <_fpadd_parts+0x248>
  822240:	9dc00217 	ldw	r23,8(r19)
  822244:	28c00217 	ldw	r3,8(r5)
  822248:	9c400317 	ldw	r17,12(r19)
  82224c:	2bc00317 	ldw	r15,12(r5)
  822250:	b8cdc83a 	sub	r6,r23,r3
  822254:	9c800417 	ldw	r18,16(r19)
  822258:	2c000417 	ldw	r16,16(r5)
  82225c:	3009883a 	mov	r4,r6
  822260:	30009716 	blt	r6,zero,8224c0 <_fpadd_parts+0x2dc>
  822264:	00800fc4 	movi	r2,63
  822268:	11806b16 	blt	r2,r6,822418 <_fpadd_parts+0x234>
  82226c:	0100a40e 	bge	zero,r4,822500 <_fpadd_parts+0x31c>
  822270:	35bff804 	addi	r22,r6,-32
  822274:	b000bc16 	blt	r22,zero,822568 <_fpadd_parts+0x384>
  822278:	8596d83a 	srl	r11,r16,r22
  82227c:	0019883a 	mov	r12,zero
  822280:	0013883a 	mov	r9,zero
  822284:	01000044 	movi	r4,1
  822288:	0015883a 	mov	r10,zero
  82228c:	b000be16 	blt	r22,zero,822588 <_fpadd_parts+0x3a4>
  822290:	2590983a 	sll	r8,r4,r22
  822294:	000f883a 	mov	r7,zero
  822298:	00bfffc4 	movi	r2,-1
  82229c:	3889883a 	add	r4,r7,r2
  8222a0:	408b883a 	add	r5,r8,r2
  8222a4:	21cd803a 	cmpltu	r6,r4,r7
  8222a8:	314b883a 	add	r5,r6,r5
  8222ac:	7904703a 	and	r2,r15,r4
  8222b0:	8146703a 	and	r3,r16,r5
  8222b4:	10c4b03a 	or	r2,r2,r3
  8222b8:	10000226 	beq	r2,zero,8222c4 <_fpadd_parts+0xe0>
  8222bc:	02400044 	movi	r9,1
  8222c0:	0015883a 	mov	r10,zero
  8222c4:	5a5eb03a 	or	r15,r11,r9
  8222c8:	62a0b03a 	or	r16,r12,r10
  8222cc:	99400117 	ldw	r5,4(r19)
  8222d0:	a8800117 	ldw	r2,4(r21)
  8222d4:	28806e26 	beq	r5,r2,822490 <_fpadd_parts+0x2ac>
  8222d8:	28006626 	beq	r5,zero,822474 <_fpadd_parts+0x290>
  8222dc:	7c45c83a 	sub	r2,r15,r17
  8222e0:	7889803a 	cmpltu	r4,r15,r2
  8222e4:	8487c83a 	sub	r3,r16,r18
  8222e8:	1909c83a 	sub	r4,r3,r4
  8222ec:	100d883a 	mov	r6,r2
  8222f0:	200f883a 	mov	r7,r4
  8222f4:	38007716 	blt	r7,zero,8224d4 <_fpadd_parts+0x2f0>
  8222f8:	a5c00215 	stw	r23,8(r20)
  8222fc:	a1c00415 	stw	r7,16(r20)
  822300:	a0000115 	stw	zero,4(r20)
  822304:	a1800315 	stw	r6,12(r20)
  822308:	a2000317 	ldw	r8,12(r20)
  82230c:	a2400417 	ldw	r9,16(r20)
  822310:	00bfffc4 	movi	r2,-1
  822314:	408b883a 	add	r5,r8,r2
  822318:	2a09803a 	cmpltu	r4,r5,r8
  82231c:	488d883a 	add	r6,r9,r2
  822320:	01c40034 	movhi	r7,4096
  822324:	39ffffc4 	addi	r7,r7,-1
  822328:	218d883a 	add	r6,r4,r6
  82232c:	39801736 	bltu	r7,r6,82238c <_fpadd_parts+0x1a8>
  822330:	31c06526 	beq	r6,r7,8224c8 <_fpadd_parts+0x2e4>
  822334:	a3000217 	ldw	r12,8(r20)
  822338:	4209883a 	add	r4,r8,r8
  82233c:	00bfffc4 	movi	r2,-1
  822340:	220f803a 	cmpltu	r7,r4,r8
  822344:	4a4b883a 	add	r5,r9,r9
  822348:	394f883a 	add	r7,r7,r5
  82234c:	2095883a 	add	r10,r4,r2
  822350:	3897883a 	add	r11,r7,r2
  822354:	510d803a 	cmpltu	r6,r10,r4
  822358:	6099883a 	add	r12,r12,r2
  82235c:	32d7883a 	add	r11,r6,r11
  822360:	00840034 	movhi	r2,4096
  822364:	10bfffc4 	addi	r2,r2,-1
  822368:	2011883a 	mov	r8,r4
  82236c:	3813883a 	mov	r9,r7
  822370:	a1000315 	stw	r4,12(r20)
  822374:	a1c00415 	stw	r7,16(r20)
  822378:	a3000215 	stw	r12,8(r20)
  82237c:	12c00336 	bltu	r2,r11,82238c <_fpadd_parts+0x1a8>
  822380:	58bfed1e 	bne	r11,r2,822338 <_fpadd_parts+0x154>
  822384:	00bfff84 	movi	r2,-2
  822388:	12bfeb2e 	bgeu	r2,r10,822338 <_fpadd_parts+0x154>
  82238c:	a2800417 	ldw	r10,16(r20)
  822390:	008000c4 	movi	r2,3
  822394:	00c80034 	movhi	r3,8192
  822398:	18ffffc4 	addi	r3,r3,-1
  82239c:	a2400317 	ldw	r9,12(r20)
  8223a0:	a0800015 	stw	r2,0(r20)
  8223a4:	1a802336 	bltu	r3,r10,822434 <_fpadd_parts+0x250>
  8223a8:	a027883a 	mov	r19,r20
  8223ac:	9805883a 	mov	r2,r19
  8223b0:	ddc00717 	ldw	r23,28(sp)
  8223b4:	dd800617 	ldw	r22,24(sp)
  8223b8:	dd400517 	ldw	r21,20(sp)
  8223bc:	dd000417 	ldw	r20,16(sp)
  8223c0:	dcc00317 	ldw	r19,12(sp)
  8223c4:	dc800217 	ldw	r18,8(sp)
  8223c8:	dc400117 	ldw	r17,4(sp)
  8223cc:	dc000017 	ldw	r16,0(sp)
  8223d0:	dec00804 	addi	sp,sp,32
  8223d4:	f800283a 	ret
  8223d8:	20fff41e 	bne	r4,r3,8223ac <_fpadd_parts+0x1c8>
  8223dc:	31000015 	stw	r4,0(r6)
  8223e0:	98800117 	ldw	r2,4(r19)
  8223e4:	30800115 	stw	r2,4(r6)
  8223e8:	98c00217 	ldw	r3,8(r19)
  8223ec:	30c00215 	stw	r3,8(r6)
  8223f0:	98800317 	ldw	r2,12(r19)
  8223f4:	30800315 	stw	r2,12(r6)
  8223f8:	98c00417 	ldw	r3,16(r19)
  8223fc:	30c00415 	stw	r3,16(r6)
  822400:	98800117 	ldw	r2,4(r19)
  822404:	28c00117 	ldw	r3,4(r5)
  822408:	3027883a 	mov	r19,r6
  82240c:	10c4703a 	and	r2,r2,r3
  822410:	30800115 	stw	r2,4(r6)
  822414:	003fe506 	br	8223ac <_fpadd_parts+0x1c8>
  822418:	1dc02616 	blt	r3,r23,8224b4 <_fpadd_parts+0x2d0>
  82241c:	0023883a 	mov	r17,zero
  822420:	182f883a 	mov	r23,r3
  822424:	0025883a 	mov	r18,zero
  822428:	003fa806 	br	8222cc <_fpadd_parts+0xe8>
  82242c:	a827883a 	mov	r19,r21
  822430:	003fde06 	br	8223ac <_fpadd_parts+0x1c8>
  822434:	01800044 	movi	r6,1
  822438:	500497fa 	slli	r2,r10,31
  82243c:	4808d07a 	srli	r4,r9,1
  822440:	518ad83a 	srl	r5,r10,r6
  822444:	a2000217 	ldw	r8,8(r20)
  822448:	1108b03a 	or	r4,r2,r4
  82244c:	0007883a 	mov	r3,zero
  822450:	4984703a 	and	r2,r9,r6
  822454:	208cb03a 	or	r6,r4,r2
  822458:	28ceb03a 	or	r7,r5,r3
  82245c:	42000044 	addi	r8,r8,1
  822460:	a027883a 	mov	r19,r20
  822464:	a1c00415 	stw	r7,16(r20)
  822468:	a2000215 	stw	r8,8(r20)
  82246c:	a1800315 	stw	r6,12(r20)
  822470:	003fce06 	br	8223ac <_fpadd_parts+0x1c8>
  822474:	8bc5c83a 	sub	r2,r17,r15
  822478:	8889803a 	cmpltu	r4,r17,r2
  82247c:	9407c83a 	sub	r3,r18,r16
  822480:	1909c83a 	sub	r4,r3,r4
  822484:	100d883a 	mov	r6,r2
  822488:	200f883a 	mov	r7,r4
  82248c:	003f9906 	br	8222f4 <_fpadd_parts+0x110>
  822490:	8bc5883a 	add	r2,r17,r15
  822494:	1449803a 	cmpltu	r4,r2,r17
  822498:	9407883a 	add	r3,r18,r16
  82249c:	20c9883a 	add	r4,r4,r3
  8224a0:	a1400115 	stw	r5,4(r20)
  8224a4:	a5c00215 	stw	r23,8(r20)
  8224a8:	a0800315 	stw	r2,12(r20)
  8224ac:	a1000415 	stw	r4,16(r20)
  8224b0:	003fb606 	br	82238c <_fpadd_parts+0x1a8>
  8224b4:	001f883a 	mov	r15,zero
  8224b8:	0021883a 	mov	r16,zero
  8224bc:	003f8306 	br	8222cc <_fpadd_parts+0xe8>
  8224c0:	018dc83a 	sub	r6,zero,r6
  8224c4:	003f6706 	br	822264 <_fpadd_parts+0x80>
  8224c8:	00bfff84 	movi	r2,-2
  8224cc:	117faf36 	bltu	r2,r5,82238c <_fpadd_parts+0x1a8>
  8224d0:	003f9806 	br	822334 <_fpadd_parts+0x150>
  8224d4:	0005883a 	mov	r2,zero
  8224d8:	1189c83a 	sub	r4,r2,r6
  8224dc:	1105803a 	cmpltu	r2,r2,r4
  8224e0:	01cbc83a 	sub	r5,zero,r7
  8224e4:	2885c83a 	sub	r2,r5,r2
  8224e8:	01800044 	movi	r6,1
  8224ec:	a1800115 	stw	r6,4(r20)
  8224f0:	a5c00215 	stw	r23,8(r20)
  8224f4:	a1000315 	stw	r4,12(r20)
  8224f8:	a0800415 	stw	r2,16(r20)
  8224fc:	003f8206 	br	822308 <_fpadd_parts+0x124>
  822500:	203f7226 	beq	r4,zero,8222cc <_fpadd_parts+0xe8>
  822504:	35bff804 	addi	r22,r6,-32
  822508:	b9af883a 	add	r23,r23,r6
  82250c:	b0003116 	blt	r22,zero,8225d4 <_fpadd_parts+0x3f0>
  822510:	959ad83a 	srl	r13,r18,r22
  822514:	001d883a 	mov	r14,zero
  822518:	000f883a 	mov	r7,zero
  82251c:	01000044 	movi	r4,1
  822520:	0011883a 	mov	r8,zero
  822524:	b0002516 	blt	r22,zero,8225bc <_fpadd_parts+0x3d8>
  822528:	2594983a 	sll	r10,r4,r22
  82252c:	0013883a 	mov	r9,zero
  822530:	00bfffc4 	movi	r2,-1
  822534:	4889883a 	add	r4,r9,r2
  822538:	508b883a 	add	r5,r10,r2
  82253c:	224d803a 	cmpltu	r6,r4,r9
  822540:	314b883a 	add	r5,r6,r5
  822544:	8904703a 	and	r2,r17,r4
  822548:	9146703a 	and	r3,r18,r5
  82254c:	10c4b03a 	or	r2,r2,r3
  822550:	10000226 	beq	r2,zero,82255c <_fpadd_parts+0x378>
  822554:	01c00044 	movi	r7,1
  822558:	0011883a 	mov	r8,zero
  82255c:	69e2b03a 	or	r17,r13,r7
  822560:	7224b03a 	or	r18,r14,r8
  822564:	003f5906 	br	8222cc <_fpadd_parts+0xe8>
  822568:	8407883a 	add	r3,r16,r16
  82256c:	008007c4 	movi	r2,31
  822570:	1185c83a 	sub	r2,r2,r6
  822574:	1886983a 	sll	r3,r3,r2
  822578:	7996d83a 	srl	r11,r15,r6
  82257c:	8198d83a 	srl	r12,r16,r6
  822580:	1ad6b03a 	or	r11,r3,r11
  822584:	003f3e06 	br	822280 <_fpadd_parts+0x9c>
  822588:	2006d07a 	srli	r3,r4,1
  82258c:	008007c4 	movi	r2,31
  822590:	1185c83a 	sub	r2,r2,r6
  822594:	1890d83a 	srl	r8,r3,r2
  822598:	218e983a 	sll	r7,r4,r6
  82259c:	003f3e06 	br	822298 <_fpadd_parts+0xb4>
  8225a0:	113f821e 	bne	r2,r4,8223ac <_fpadd_parts+0x1c8>
  8225a4:	28c00117 	ldw	r3,4(r5)
  8225a8:	98800117 	ldw	r2,4(r19)
  8225ac:	10ff7f26 	beq	r2,r3,8223ac <_fpadd_parts+0x1c8>
  8225b0:	04c020f4 	movhi	r19,131
  8225b4:	9cce0204 	addi	r19,r19,14344
  8225b8:	003f7c06 	br	8223ac <_fpadd_parts+0x1c8>
  8225bc:	2006d07a 	srli	r3,r4,1
  8225c0:	008007c4 	movi	r2,31
  8225c4:	1185c83a 	sub	r2,r2,r6
  8225c8:	1894d83a 	srl	r10,r3,r2
  8225cc:	2192983a 	sll	r9,r4,r6
  8225d0:	003fd706 	br	822530 <_fpadd_parts+0x34c>
  8225d4:	9487883a 	add	r3,r18,r18
  8225d8:	008007c4 	movi	r2,31
  8225dc:	1185c83a 	sub	r2,r2,r6
  8225e0:	1886983a 	sll	r3,r3,r2
  8225e4:	899ad83a 	srl	r13,r17,r6
  8225e8:	919cd83a 	srl	r14,r18,r6
  8225ec:	1b5ab03a 	or	r13,r3,r13
  8225f0:	003fc906 	br	822518 <_fpadd_parts+0x334>

008225f4 <__subdf3>:
  8225f4:	deffea04 	addi	sp,sp,-88
  8225f8:	dcc01415 	stw	r19,80(sp)
  8225fc:	dcc00404 	addi	r19,sp,16
  822600:	2011883a 	mov	r8,r4
  822604:	2813883a 	mov	r9,r5
  822608:	dc401315 	stw	r17,76(sp)
  82260c:	d809883a 	mov	r4,sp
  822610:	980b883a 	mov	r5,r19
  822614:	dc400904 	addi	r17,sp,36
  822618:	dfc01515 	stw	ra,84(sp)
  82261c:	da400115 	stw	r9,4(sp)
  822620:	d9c00315 	stw	r7,12(sp)
  822624:	da000015 	stw	r8,0(sp)
  822628:	d9800215 	stw	r6,8(sp)
  82262c:	08233180 	call	823318 <__unpack_d>
  822630:	d9000204 	addi	r4,sp,8
  822634:	880b883a 	mov	r5,r17
  822638:	08233180 	call	823318 <__unpack_d>
  82263c:	d8800a17 	ldw	r2,40(sp)
  822640:	880b883a 	mov	r5,r17
  822644:	9809883a 	mov	r4,r19
  822648:	d9800e04 	addi	r6,sp,56
  82264c:	1080005c 	xori	r2,r2,1
  822650:	d8800a15 	stw	r2,40(sp)
  822654:	08221e40 	call	8221e4 <_fpadd_parts>
  822658:	1009883a 	mov	r4,r2
  82265c:	08230040 	call	823004 <__pack_d>
  822660:	dfc01517 	ldw	ra,84(sp)
  822664:	dcc01417 	ldw	r19,80(sp)
  822668:	dc401317 	ldw	r17,76(sp)
  82266c:	dec01604 	addi	sp,sp,88
  822670:	f800283a 	ret

00822674 <__adddf3>:
  822674:	deffea04 	addi	sp,sp,-88
  822678:	dcc01415 	stw	r19,80(sp)
  82267c:	dcc00404 	addi	r19,sp,16
  822680:	2011883a 	mov	r8,r4
  822684:	2813883a 	mov	r9,r5
  822688:	dc401315 	stw	r17,76(sp)
  82268c:	d809883a 	mov	r4,sp
  822690:	980b883a 	mov	r5,r19
  822694:	dc400904 	addi	r17,sp,36
  822698:	dfc01515 	stw	ra,84(sp)
  82269c:	da400115 	stw	r9,4(sp)
  8226a0:	d9c00315 	stw	r7,12(sp)
  8226a4:	da000015 	stw	r8,0(sp)
  8226a8:	d9800215 	stw	r6,8(sp)
  8226ac:	08233180 	call	823318 <__unpack_d>
  8226b0:	d9000204 	addi	r4,sp,8
  8226b4:	880b883a 	mov	r5,r17
  8226b8:	08233180 	call	823318 <__unpack_d>
  8226bc:	d9800e04 	addi	r6,sp,56
  8226c0:	9809883a 	mov	r4,r19
  8226c4:	880b883a 	mov	r5,r17
  8226c8:	08221e40 	call	8221e4 <_fpadd_parts>
  8226cc:	1009883a 	mov	r4,r2
  8226d0:	08230040 	call	823004 <__pack_d>
  8226d4:	dfc01517 	ldw	ra,84(sp)
  8226d8:	dcc01417 	ldw	r19,80(sp)
  8226dc:	dc401317 	ldw	r17,76(sp)
  8226e0:	dec01604 	addi	sp,sp,88
  8226e4:	f800283a 	ret

008226e8 <__muldf3>:
  8226e8:	deffe004 	addi	sp,sp,-128
  8226ec:	dc401815 	stw	r17,96(sp)
  8226f0:	dc400404 	addi	r17,sp,16
  8226f4:	2011883a 	mov	r8,r4
  8226f8:	2813883a 	mov	r9,r5
  8226fc:	dc001715 	stw	r16,92(sp)
  822700:	d809883a 	mov	r4,sp
  822704:	880b883a 	mov	r5,r17
  822708:	dc000904 	addi	r16,sp,36
  82270c:	dfc01f15 	stw	ra,124(sp)
  822710:	da400115 	stw	r9,4(sp)
  822714:	d9c00315 	stw	r7,12(sp)
  822718:	da000015 	stw	r8,0(sp)
  82271c:	d9800215 	stw	r6,8(sp)
  822720:	ddc01e15 	stw	r23,120(sp)
  822724:	dd801d15 	stw	r22,116(sp)
  822728:	dd401c15 	stw	r21,112(sp)
  82272c:	dd001b15 	stw	r20,108(sp)
  822730:	dcc01a15 	stw	r19,104(sp)
  822734:	dc801915 	stw	r18,100(sp)
  822738:	08233180 	call	823318 <__unpack_d>
  82273c:	d9000204 	addi	r4,sp,8
  822740:	800b883a 	mov	r5,r16
  822744:	08233180 	call	823318 <__unpack_d>
  822748:	d9000417 	ldw	r4,16(sp)
  82274c:	00800044 	movi	r2,1
  822750:	1100102e 	bgeu	r2,r4,822794 <__muldf3+0xac>
  822754:	d8c00917 	ldw	r3,36(sp)
  822758:	10c0062e 	bgeu	r2,r3,822774 <__muldf3+0x8c>
  82275c:	00800104 	movi	r2,4
  822760:	20800a26 	beq	r4,r2,82278c <__muldf3+0xa4>
  822764:	1880cc26 	beq	r3,r2,822a98 <__muldf3+0x3b0>
  822768:	00800084 	movi	r2,2
  82276c:	20800926 	beq	r4,r2,822794 <__muldf3+0xac>
  822770:	1880191e 	bne	r3,r2,8227d8 <__muldf3+0xf0>
  822774:	d8c00a17 	ldw	r3,40(sp)
  822778:	d8800517 	ldw	r2,20(sp)
  82277c:	8009883a 	mov	r4,r16
  822780:	10c4c03a 	cmpne	r2,r2,r3
  822784:	d8800a15 	stw	r2,40(sp)
  822788:	00000706 	br	8227a8 <__muldf3+0xc0>
  82278c:	00800084 	movi	r2,2
  822790:	1880c326 	beq	r3,r2,822aa0 <__muldf3+0x3b8>
  822794:	d8800517 	ldw	r2,20(sp)
  822798:	d8c00a17 	ldw	r3,40(sp)
  82279c:	8809883a 	mov	r4,r17
  8227a0:	10c4c03a 	cmpne	r2,r2,r3
  8227a4:	d8800515 	stw	r2,20(sp)
  8227a8:	08230040 	call	823004 <__pack_d>
  8227ac:	dfc01f17 	ldw	ra,124(sp)
  8227b0:	ddc01e17 	ldw	r23,120(sp)
  8227b4:	dd801d17 	ldw	r22,116(sp)
  8227b8:	dd401c17 	ldw	r21,112(sp)
  8227bc:	dd001b17 	ldw	r20,108(sp)
  8227c0:	dcc01a17 	ldw	r19,104(sp)
  8227c4:	dc801917 	ldw	r18,100(sp)
  8227c8:	dc401817 	ldw	r17,96(sp)
  8227cc:	dc001717 	ldw	r16,92(sp)
  8227d0:	dec02004 	addi	sp,sp,128
  8227d4:	f800283a 	ret
  8227d8:	dd800717 	ldw	r22,28(sp)
  8227dc:	dc800c17 	ldw	r18,48(sp)
  8227e0:	002b883a 	mov	r21,zero
  8227e4:	0023883a 	mov	r17,zero
  8227e8:	a80b883a 	mov	r5,r21
  8227ec:	b00d883a 	mov	r6,r22
  8227f0:	880f883a 	mov	r7,r17
  8227f4:	ddc00817 	ldw	r23,32(sp)
  8227f8:	dcc00d17 	ldw	r19,52(sp)
  8227fc:	9009883a 	mov	r4,r18
  822800:	0822eec0 	call	822eec <__muldi3>
  822804:	001b883a 	mov	r13,zero
  822808:	680f883a 	mov	r7,r13
  82280c:	b009883a 	mov	r4,r22
  822810:	000b883a 	mov	r5,zero
  822814:	980d883a 	mov	r6,r19
  822818:	b82d883a 	mov	r22,r23
  82281c:	002f883a 	mov	r23,zero
  822820:	db401615 	stw	r13,88(sp)
  822824:	d8801315 	stw	r2,76(sp)
  822828:	d8c01415 	stw	r3,80(sp)
  82282c:	dcc01515 	stw	r19,84(sp)
  822830:	0822eec0 	call	822eec <__muldi3>
  822834:	b00d883a 	mov	r6,r22
  822838:	000b883a 	mov	r5,zero
  82283c:	9009883a 	mov	r4,r18
  822840:	b80f883a 	mov	r7,r23
  822844:	1021883a 	mov	r16,r2
  822848:	1823883a 	mov	r17,r3
  82284c:	0822eec0 	call	822eec <__muldi3>
  822850:	8085883a 	add	r2,r16,r2
  822854:	140d803a 	cmpltu	r6,r2,r16
  822858:	88c7883a 	add	r3,r17,r3
  82285c:	30cd883a 	add	r6,r6,r3
  822860:	1029883a 	mov	r20,r2
  822864:	302b883a 	mov	r21,r6
  822868:	da801317 	ldw	r10,76(sp)
  82286c:	dac01417 	ldw	r11,80(sp)
  822870:	db001517 	ldw	r12,84(sp)
  822874:	db401617 	ldw	r13,88(sp)
  822878:	3440612e 	bgeu	r6,r17,822a00 <__muldf3+0x318>
  82287c:	0009883a 	mov	r4,zero
  822880:	5105883a 	add	r2,r10,r4
  822884:	128d803a 	cmpltu	r6,r2,r10
  822888:	5d07883a 	add	r3,r11,r20
  82288c:	30cd883a 	add	r6,r6,r3
  822890:	0021883a 	mov	r16,zero
  822894:	04400044 	movi	r17,1
  822898:	1025883a 	mov	r18,r2
  82289c:	3027883a 	mov	r19,r6
  8228a0:	32c06236 	bltu	r6,r11,822a2c <__muldf3+0x344>
  8228a4:	59807a26 	beq	r11,r6,822a90 <__muldf3+0x3a8>
  8228a8:	680b883a 	mov	r5,r13
  8228ac:	b80f883a 	mov	r7,r23
  8228b0:	6009883a 	mov	r4,r12
  8228b4:	b00d883a 	mov	r6,r22
  8228b8:	0822eec0 	call	822eec <__muldi3>
  8228bc:	1009883a 	mov	r4,r2
  8228c0:	000f883a 	mov	r7,zero
  8228c4:	1545883a 	add	r2,r2,r21
  8228c8:	1111803a 	cmpltu	r8,r2,r4
  8228cc:	19c7883a 	add	r3,r3,r7
  8228d0:	40c7883a 	add	r3,r8,r3
  8228d4:	88cb883a 	add	r5,r17,r3
  8228d8:	d8c00617 	ldw	r3,24(sp)
  8228dc:	8089883a 	add	r4,r16,r2
  8228e0:	d8800b17 	ldw	r2,44(sp)
  8228e4:	18c00104 	addi	r3,r3,4
  8228e8:	240d803a 	cmpltu	r6,r4,r16
  8228ec:	10c7883a 	add	r3,r2,r3
  8228f0:	2013883a 	mov	r9,r4
  8228f4:	d8800a17 	ldw	r2,40(sp)
  8228f8:	d9000517 	ldw	r4,20(sp)
  8228fc:	314d883a 	add	r6,r6,r5
  822900:	3015883a 	mov	r10,r6
  822904:	2088c03a 	cmpne	r4,r4,r2
  822908:	00880034 	movhi	r2,8192
  82290c:	10bfffc4 	addi	r2,r2,-1
  822910:	d9000f15 	stw	r4,60(sp)
  822914:	d8c01015 	stw	r3,64(sp)
  822918:	1180162e 	bgeu	r2,r6,822974 <__muldf3+0x28c>
  82291c:	1811883a 	mov	r8,r3
  822920:	101f883a 	mov	r15,r2
  822924:	980497fa 	slli	r2,r19,31
  822928:	9016d07a 	srli	r11,r18,1
  82292c:	500697fa 	slli	r3,r10,31
  822930:	480cd07a 	srli	r6,r9,1
  822934:	500ed07a 	srli	r7,r10,1
  822938:	12d6b03a 	or	r11,r2,r11
  82293c:	00800044 	movi	r2,1
  822940:	198cb03a 	or	r6,r3,r6
  822944:	4888703a 	and	r4,r9,r2
  822948:	9818d07a 	srli	r12,r19,1
  82294c:	001b883a 	mov	r13,zero
  822950:	03a00034 	movhi	r14,32768
  822954:	3013883a 	mov	r9,r6
  822958:	3815883a 	mov	r10,r7
  82295c:	4091883a 	add	r8,r8,r2
  822960:	20000226 	beq	r4,zero,82296c <__muldf3+0x284>
  822964:	5b64b03a 	or	r18,r11,r13
  822968:	63a6b03a 	or	r19,r12,r14
  82296c:	7abfed36 	bltu	r15,r10,822924 <__muldf3+0x23c>
  822970:	da001015 	stw	r8,64(sp)
  822974:	00840034 	movhi	r2,4096
  822978:	10bfffc4 	addi	r2,r2,-1
  82297c:	12801436 	bltu	r2,r10,8229d0 <__muldf3+0x2e8>
  822980:	da001017 	ldw	r8,64(sp)
  822984:	101f883a 	mov	r15,r2
  822988:	4a45883a 	add	r2,r9,r9
  82298c:	124d803a 	cmpltu	r6,r2,r9
  822990:	5287883a 	add	r3,r10,r10
  822994:	9497883a 	add	r11,r18,r18
  822998:	5c8f803a 	cmpltu	r7,r11,r18
  82299c:	9cd9883a 	add	r12,r19,r19
  8229a0:	01000044 	movi	r4,1
  8229a4:	30cd883a 	add	r6,r6,r3
  8229a8:	3b0f883a 	add	r7,r7,r12
  8229ac:	423fffc4 	addi	r8,r8,-1
  8229b0:	1013883a 	mov	r9,r2
  8229b4:	3015883a 	mov	r10,r6
  8229b8:	111ab03a 	or	r13,r2,r4
  8229bc:	98003016 	blt	r19,zero,822a80 <__muldf3+0x398>
  8229c0:	5825883a 	mov	r18,r11
  8229c4:	3827883a 	mov	r19,r7
  8229c8:	7abfef2e 	bgeu	r15,r10,822988 <__muldf3+0x2a0>
  8229cc:	da001015 	stw	r8,64(sp)
  8229d0:	00803fc4 	movi	r2,255
  8229d4:	488e703a 	and	r7,r9,r2
  8229d8:	00802004 	movi	r2,128
  8229dc:	0007883a 	mov	r3,zero
  8229e0:	0011883a 	mov	r8,zero
  8229e4:	38801826 	beq	r7,r2,822a48 <__muldf3+0x360>
  8229e8:	008000c4 	movi	r2,3
  8229ec:	d9000e04 	addi	r4,sp,56
  8229f0:	da801215 	stw	r10,72(sp)
  8229f4:	d8800e15 	stw	r2,56(sp)
  8229f8:	da401115 	stw	r9,68(sp)
  8229fc:	003f6a06 	br	8227a8 <__muldf3+0xc0>
  822a00:	89802126 	beq	r17,r6,822a88 <__muldf3+0x3a0>
  822a04:	0009883a 	mov	r4,zero
  822a08:	5105883a 	add	r2,r10,r4
  822a0c:	128d803a 	cmpltu	r6,r2,r10
  822a10:	5d07883a 	add	r3,r11,r20
  822a14:	30cd883a 	add	r6,r6,r3
  822a18:	0021883a 	mov	r16,zero
  822a1c:	0023883a 	mov	r17,zero
  822a20:	1025883a 	mov	r18,r2
  822a24:	3027883a 	mov	r19,r6
  822a28:	32ff9e2e 	bgeu	r6,r11,8228a4 <__muldf3+0x1bc>
  822a2c:	00800044 	movi	r2,1
  822a30:	8089883a 	add	r4,r16,r2
  822a34:	240d803a 	cmpltu	r6,r4,r16
  822a38:	344d883a 	add	r6,r6,r17
  822a3c:	2021883a 	mov	r16,r4
  822a40:	3023883a 	mov	r17,r6
  822a44:	003f9806 	br	8228a8 <__muldf3+0x1c0>
  822a48:	403fe71e 	bne	r8,zero,8229e8 <__muldf3+0x300>
  822a4c:	01004004 	movi	r4,256
  822a50:	4904703a 	and	r2,r9,r4
  822a54:	10c4b03a 	or	r2,r2,r3
  822a58:	103fe31e 	bne	r2,zero,8229e8 <__muldf3+0x300>
  822a5c:	94c4b03a 	or	r2,r18,r19
  822a60:	103fe126 	beq	r2,zero,8229e8 <__muldf3+0x300>
  822a64:	49c5883a 	add	r2,r9,r7
  822a68:	1251803a 	cmpltu	r8,r2,r9
  822a6c:	4291883a 	add	r8,r8,r10
  822a70:	013fc004 	movi	r4,-256
  822a74:	1112703a 	and	r9,r2,r4
  822a78:	4015883a 	mov	r10,r8
  822a7c:	003fda06 	br	8229e8 <__muldf3+0x300>
  822a80:	6813883a 	mov	r9,r13
  822a84:	003fce06 	br	8229c0 <__muldf3+0x2d8>
  822a88:	143f7c36 	bltu	r2,r16,82287c <__muldf3+0x194>
  822a8c:	003fdd06 	br	822a04 <__muldf3+0x31c>
  822a90:	12bf852e 	bgeu	r2,r10,8228a8 <__muldf3+0x1c0>
  822a94:	003fe506 	br	822a2c <__muldf3+0x344>
  822a98:	00800084 	movi	r2,2
  822a9c:	20bf351e 	bne	r4,r2,822774 <__muldf3+0x8c>
  822aa0:	010020f4 	movhi	r4,131
  822aa4:	210e0204 	addi	r4,r4,14344
  822aa8:	003f3f06 	br	8227a8 <__muldf3+0xc0>

00822aac <__gtdf2>:
  822aac:	deffef04 	addi	sp,sp,-68
  822ab0:	dc400f15 	stw	r17,60(sp)
  822ab4:	dc400404 	addi	r17,sp,16
  822ab8:	2005883a 	mov	r2,r4
  822abc:	2807883a 	mov	r3,r5
  822ac0:	dc000e15 	stw	r16,56(sp)
  822ac4:	d809883a 	mov	r4,sp
  822ac8:	880b883a 	mov	r5,r17
  822acc:	dc000904 	addi	r16,sp,36
  822ad0:	d8c00115 	stw	r3,4(sp)
  822ad4:	d8800015 	stw	r2,0(sp)
  822ad8:	d9800215 	stw	r6,8(sp)
  822adc:	dfc01015 	stw	ra,64(sp)
  822ae0:	d9c00315 	stw	r7,12(sp)
  822ae4:	08233180 	call	823318 <__unpack_d>
  822ae8:	d9000204 	addi	r4,sp,8
  822aec:	800b883a 	mov	r5,r16
  822af0:	08233180 	call	823318 <__unpack_d>
  822af4:	d8800417 	ldw	r2,16(sp)
  822af8:	00c00044 	movi	r3,1
  822afc:	01bfffc4 	movi	r6,-1
  822b00:	1880062e 	bgeu	r3,r2,822b1c <__gtdf2+0x70>
  822b04:	d8800917 	ldw	r2,36(sp)
  822b08:	8809883a 	mov	r4,r17
  822b0c:	800b883a 	mov	r5,r16
  822b10:	1880022e 	bgeu	r3,r2,822b1c <__gtdf2+0x70>
  822b14:	08234500 	call	823450 <__fpcmp_parts_d>
  822b18:	100d883a 	mov	r6,r2
  822b1c:	3005883a 	mov	r2,r6
  822b20:	dfc01017 	ldw	ra,64(sp)
  822b24:	dc400f17 	ldw	r17,60(sp)
  822b28:	dc000e17 	ldw	r16,56(sp)
  822b2c:	dec01104 	addi	sp,sp,68
  822b30:	f800283a 	ret

00822b34 <__fixdfsi>:
  822b34:	defff804 	addi	sp,sp,-32
  822b38:	2005883a 	mov	r2,r4
  822b3c:	2807883a 	mov	r3,r5
  822b40:	d809883a 	mov	r4,sp
  822b44:	d9400204 	addi	r5,sp,8
  822b48:	d8c00115 	stw	r3,4(sp)
  822b4c:	d8800015 	stw	r2,0(sp)
  822b50:	dfc00715 	stw	ra,28(sp)
  822b54:	08233180 	call	823318 <__unpack_d>
  822b58:	d8c00217 	ldw	r3,8(sp)
  822b5c:	00800084 	movi	r2,2
  822b60:	1880051e 	bne	r3,r2,822b78 <__fixdfsi+0x44>
  822b64:	0007883a 	mov	r3,zero
  822b68:	1805883a 	mov	r2,r3
  822b6c:	dfc00717 	ldw	ra,28(sp)
  822b70:	dec00804 	addi	sp,sp,32
  822b74:	f800283a 	ret
  822b78:	00800044 	movi	r2,1
  822b7c:	10fff92e 	bgeu	r2,r3,822b64 <__fixdfsi+0x30>
  822b80:	00800104 	movi	r2,4
  822b84:	18800426 	beq	r3,r2,822b98 <__fixdfsi+0x64>
  822b88:	d8c00417 	ldw	r3,16(sp)
  822b8c:	183ff516 	blt	r3,zero,822b64 <__fixdfsi+0x30>
  822b90:	00800784 	movi	r2,30
  822b94:	10c0080e 	bge	r2,r3,822bb8 <__fixdfsi+0x84>
  822b98:	d8800317 	ldw	r2,12(sp)
  822b9c:	1000121e 	bne	r2,zero,822be8 <__fixdfsi+0xb4>
  822ba0:	00e00034 	movhi	r3,32768
  822ba4:	18ffffc4 	addi	r3,r3,-1
  822ba8:	1805883a 	mov	r2,r3
  822bac:	dfc00717 	ldw	ra,28(sp)
  822bb0:	dec00804 	addi	sp,sp,32
  822bb4:	f800283a 	ret
  822bb8:	00800f04 	movi	r2,60
  822bbc:	10d1c83a 	sub	r8,r2,r3
  822bc0:	40bff804 	addi	r2,r8,-32
  822bc4:	d9800517 	ldw	r6,20(sp)
  822bc8:	d9c00617 	ldw	r7,24(sp)
  822bcc:	10000816 	blt	r2,zero,822bf0 <__fixdfsi+0xbc>
  822bd0:	3888d83a 	srl	r4,r7,r2
  822bd4:	d8800317 	ldw	r2,12(sp)
  822bd8:	2007883a 	mov	r3,r4
  822bdc:	103fe226 	beq	r2,zero,822b68 <__fixdfsi+0x34>
  822be0:	0107c83a 	sub	r3,zero,r4
  822be4:	003fe006 	br	822b68 <__fixdfsi+0x34>
  822be8:	00e00034 	movhi	r3,32768
  822bec:	003fde06 	br	822b68 <__fixdfsi+0x34>
  822bf0:	39c7883a 	add	r3,r7,r7
  822bf4:	008007c4 	movi	r2,31
  822bf8:	1205c83a 	sub	r2,r2,r8
  822bfc:	1886983a 	sll	r3,r3,r2
  822c00:	3208d83a 	srl	r4,r6,r8
  822c04:	1908b03a 	or	r4,r3,r4
  822c08:	003ff206 	br	822bd4 <__fixdfsi+0xa0>

00822c0c <__floatunsidf>:
  822c0c:	defff204 	addi	sp,sp,-56
  822c10:	dfc00d15 	stw	ra,52(sp)
  822c14:	ddc00c15 	stw	r23,48(sp)
  822c18:	dd800b15 	stw	r22,44(sp)
  822c1c:	dd400a15 	stw	r21,40(sp)
  822c20:	dd000915 	stw	r20,36(sp)
  822c24:	dcc00815 	stw	r19,32(sp)
  822c28:	dc800715 	stw	r18,28(sp)
  822c2c:	dc400615 	stw	r17,24(sp)
  822c30:	dc000515 	stw	r16,20(sp)
  822c34:	d8000115 	stw	zero,4(sp)
  822c38:	20000f1e 	bne	r4,zero,822c78 <__floatunsidf+0x6c>
  822c3c:	00800084 	movi	r2,2
  822c40:	d8800015 	stw	r2,0(sp)
  822c44:	d809883a 	mov	r4,sp
  822c48:	08230040 	call	823004 <__pack_d>
  822c4c:	dfc00d17 	ldw	ra,52(sp)
  822c50:	ddc00c17 	ldw	r23,48(sp)
  822c54:	dd800b17 	ldw	r22,44(sp)
  822c58:	dd400a17 	ldw	r21,40(sp)
  822c5c:	dd000917 	ldw	r20,36(sp)
  822c60:	dcc00817 	ldw	r19,32(sp)
  822c64:	dc800717 	ldw	r18,28(sp)
  822c68:	dc400617 	ldw	r17,24(sp)
  822c6c:	dc000517 	ldw	r16,20(sp)
  822c70:	dec00e04 	addi	sp,sp,56
  822c74:	f800283a 	ret
  822c78:	008000c4 	movi	r2,3
  822c7c:	00c00f04 	movi	r3,60
  822c80:	002f883a 	mov	r23,zero
  822c84:	202d883a 	mov	r22,r4
  822c88:	d8800015 	stw	r2,0(sp)
  822c8c:	d8c00215 	stw	r3,8(sp)
  822c90:	d9000315 	stw	r4,12(sp)
  822c94:	ddc00415 	stw	r23,16(sp)
  822c98:	0822f840 	call	822f84 <__clzsi2>
  822c9c:	12400744 	addi	r9,r2,29
  822ca0:	48000b16 	blt	r9,zero,822cd0 <__floatunsidf+0xc4>
  822ca4:	483fe726 	beq	r9,zero,822c44 <__floatunsidf+0x38>
  822ca8:	10bfff44 	addi	r2,r2,-3
  822cac:	10002e16 	blt	r2,zero,822d68 <__floatunsidf+0x15c>
  822cb0:	b0a2983a 	sll	r17,r22,r2
  822cb4:	0021883a 	mov	r16,zero
  822cb8:	d8800217 	ldw	r2,8(sp)
  822cbc:	dc400415 	stw	r17,16(sp)
  822cc0:	dc000315 	stw	r16,12(sp)
  822cc4:	1245c83a 	sub	r2,r2,r9
  822cc8:	d8800215 	stw	r2,8(sp)
  822ccc:	003fdd06 	br	822c44 <__floatunsidf+0x38>
  822cd0:	0255c83a 	sub	r10,zero,r9
  822cd4:	51bff804 	addi	r6,r10,-32
  822cd8:	30001b16 	blt	r6,zero,822d48 <__floatunsidf+0x13c>
  822cdc:	b9a8d83a 	srl	r20,r23,r6
  822ce0:	002b883a 	mov	r21,zero
  822ce4:	000f883a 	mov	r7,zero
  822ce8:	01000044 	movi	r4,1
  822cec:	0011883a 	mov	r8,zero
  822cf0:	30002516 	blt	r6,zero,822d88 <__floatunsidf+0x17c>
  822cf4:	21a6983a 	sll	r19,r4,r6
  822cf8:	0025883a 	mov	r18,zero
  822cfc:	00bfffc4 	movi	r2,-1
  822d00:	9089883a 	add	r4,r18,r2
  822d04:	988b883a 	add	r5,r19,r2
  822d08:	248d803a 	cmpltu	r6,r4,r18
  822d0c:	314b883a 	add	r5,r6,r5
  822d10:	b104703a 	and	r2,r22,r4
  822d14:	b946703a 	and	r3,r23,r5
  822d18:	10c4b03a 	or	r2,r2,r3
  822d1c:	10000226 	beq	r2,zero,822d28 <__floatunsidf+0x11c>
  822d20:	01c00044 	movi	r7,1
  822d24:	0011883a 	mov	r8,zero
  822d28:	d9000217 	ldw	r4,8(sp)
  822d2c:	a1c4b03a 	or	r2,r20,r7
  822d30:	aa06b03a 	or	r3,r21,r8
  822d34:	2249c83a 	sub	r4,r4,r9
  822d38:	d8c00415 	stw	r3,16(sp)
  822d3c:	d9000215 	stw	r4,8(sp)
  822d40:	d8800315 	stw	r2,12(sp)
  822d44:	003fbf06 	br	822c44 <__floatunsidf+0x38>
  822d48:	bdc7883a 	add	r3,r23,r23
  822d4c:	008007c4 	movi	r2,31
  822d50:	1285c83a 	sub	r2,r2,r10
  822d54:	1886983a 	sll	r3,r3,r2
  822d58:	b2a8d83a 	srl	r20,r22,r10
  822d5c:	baaad83a 	srl	r21,r23,r10
  822d60:	1d28b03a 	or	r20,r3,r20
  822d64:	003fdf06 	br	822ce4 <__floatunsidf+0xd8>
  822d68:	b006d07a 	srli	r3,r22,1
  822d6c:	008007c4 	movi	r2,31
  822d70:	1245c83a 	sub	r2,r2,r9
  822d74:	1886d83a 	srl	r3,r3,r2
  822d78:	ba62983a 	sll	r17,r23,r9
  822d7c:	b260983a 	sll	r16,r22,r9
  822d80:	1c62b03a 	or	r17,r3,r17
  822d84:	003fcc06 	br	822cb8 <__floatunsidf+0xac>
  822d88:	2006d07a 	srli	r3,r4,1
  822d8c:	008007c4 	movi	r2,31
  822d90:	1285c83a 	sub	r2,r2,r10
  822d94:	18a6d83a 	srl	r19,r3,r2
  822d98:	22a4983a 	sll	r18,r4,r10
  822d9c:	003fd706 	br	822cfc <__floatunsidf+0xf0>

00822da0 <udivmodsi4>:
  822da0:	29001b2e 	bgeu	r5,r4,822e10 <udivmodsi4+0x70>
  822da4:	28001a16 	blt	r5,zero,822e10 <udivmodsi4+0x70>
  822da8:	00800044 	movi	r2,1
  822dac:	0007883a 	mov	r3,zero
  822db0:	01c007c4 	movi	r7,31
  822db4:	00000306 	br	822dc4 <udivmodsi4+0x24>
  822db8:	19c01326 	beq	r3,r7,822e08 <udivmodsi4+0x68>
  822dbc:	18c00044 	addi	r3,r3,1
  822dc0:	28000416 	blt	r5,zero,822dd4 <udivmodsi4+0x34>
  822dc4:	294b883a 	add	r5,r5,r5
  822dc8:	1085883a 	add	r2,r2,r2
  822dcc:	293ffa36 	bltu	r5,r4,822db8 <udivmodsi4+0x18>
  822dd0:	10000d26 	beq	r2,zero,822e08 <udivmodsi4+0x68>
  822dd4:	0007883a 	mov	r3,zero
  822dd8:	21400236 	bltu	r4,r5,822de4 <udivmodsi4+0x44>
  822ddc:	2149c83a 	sub	r4,r4,r5
  822de0:	1886b03a 	or	r3,r3,r2
  822de4:	1004d07a 	srli	r2,r2,1
  822de8:	280ad07a 	srli	r5,r5,1
  822dec:	103ffa1e 	bne	r2,zero,822dd8 <udivmodsi4+0x38>
  822df0:	30000226 	beq	r6,zero,822dfc <udivmodsi4+0x5c>
  822df4:	2005883a 	mov	r2,r4
  822df8:	f800283a 	ret
  822dfc:	1809883a 	mov	r4,r3
  822e00:	2005883a 	mov	r2,r4
  822e04:	f800283a 	ret
  822e08:	0007883a 	mov	r3,zero
  822e0c:	003ff806 	br	822df0 <udivmodsi4+0x50>
  822e10:	00800044 	movi	r2,1
  822e14:	0007883a 	mov	r3,zero
  822e18:	003fef06 	br	822dd8 <udivmodsi4+0x38>

00822e1c <__divsi3>:
  822e1c:	defffe04 	addi	sp,sp,-8
  822e20:	dc000015 	stw	r16,0(sp)
  822e24:	dfc00115 	stw	ra,4(sp)
  822e28:	0021883a 	mov	r16,zero
  822e2c:	20000c16 	blt	r4,zero,822e60 <__divsi3+0x44>
  822e30:	000d883a 	mov	r6,zero
  822e34:	28000e16 	blt	r5,zero,822e70 <__divsi3+0x54>
  822e38:	0822da00 	call	822da0 <udivmodsi4>
  822e3c:	1007883a 	mov	r3,r2
  822e40:	8005003a 	cmpeq	r2,r16,zero
  822e44:	1000011e 	bne	r2,zero,822e4c <__divsi3+0x30>
  822e48:	00c7c83a 	sub	r3,zero,r3
  822e4c:	1805883a 	mov	r2,r3
  822e50:	dfc00117 	ldw	ra,4(sp)
  822e54:	dc000017 	ldw	r16,0(sp)
  822e58:	dec00204 	addi	sp,sp,8
  822e5c:	f800283a 	ret
  822e60:	0109c83a 	sub	r4,zero,r4
  822e64:	04000044 	movi	r16,1
  822e68:	000d883a 	mov	r6,zero
  822e6c:	283ff20e 	bge	r5,zero,822e38 <__divsi3+0x1c>
  822e70:	014bc83a 	sub	r5,zero,r5
  822e74:	8021003a 	cmpeq	r16,r16,zero
  822e78:	003fef06 	br	822e38 <__divsi3+0x1c>

00822e7c <__modsi3>:
  822e7c:	deffff04 	addi	sp,sp,-4
  822e80:	dfc00015 	stw	ra,0(sp)
  822e84:	01800044 	movi	r6,1
  822e88:	2807883a 	mov	r3,r5
  822e8c:	20000416 	blt	r4,zero,822ea0 <__modsi3+0x24>
  822e90:	28000c16 	blt	r5,zero,822ec4 <__modsi3+0x48>
  822e94:	dfc00017 	ldw	ra,0(sp)
  822e98:	dec00104 	addi	sp,sp,4
  822e9c:	0822da01 	jmpi	822da0 <udivmodsi4>
  822ea0:	0109c83a 	sub	r4,zero,r4
  822ea4:	28000b16 	blt	r5,zero,822ed4 <__modsi3+0x58>
  822ea8:	180b883a 	mov	r5,r3
  822eac:	01800044 	movi	r6,1
  822eb0:	0822da00 	call	822da0 <udivmodsi4>
  822eb4:	0085c83a 	sub	r2,zero,r2
  822eb8:	dfc00017 	ldw	ra,0(sp)
  822ebc:	dec00104 	addi	sp,sp,4
  822ec0:	f800283a 	ret
  822ec4:	014bc83a 	sub	r5,zero,r5
  822ec8:	dfc00017 	ldw	ra,0(sp)
  822ecc:	dec00104 	addi	sp,sp,4
  822ed0:	0822da01 	jmpi	822da0 <udivmodsi4>
  822ed4:	0147c83a 	sub	r3,zero,r5
  822ed8:	003ff306 	br	822ea8 <__modsi3+0x2c>

00822edc <__udivsi3>:
  822edc:	000d883a 	mov	r6,zero
  822ee0:	0822da01 	jmpi	822da0 <udivmodsi4>

00822ee4 <__umodsi3>:
  822ee4:	01800044 	movi	r6,1
  822ee8:	0822da01 	jmpi	822da0 <udivmodsi4>

00822eec <__muldi3>:
  822eec:	2011883a 	mov	r8,r4
  822ef0:	427fffcc 	andi	r9,r8,65535
  822ef4:	4018d43a 	srli	r12,r8,16
  822ef8:	32bfffcc 	andi	r10,r6,65535
  822efc:	3016d43a 	srli	r11,r6,16
  822f00:	4a85383a 	mul	r2,r9,r10
  822f04:	6295383a 	mul	r10,r12,r10
  822f08:	4ad3383a 	mul	r9,r9,r11
  822f0c:	113fffcc 	andi	r4,r2,65535
  822f10:	1004d43a 	srli	r2,r2,16
  822f14:	4a93883a 	add	r9,r9,r10
  822f18:	3807883a 	mov	r3,r7
  822f1c:	1245883a 	add	r2,r2,r9
  822f20:	280f883a 	mov	r7,r5
  822f24:	180b883a 	mov	r5,r3
  822f28:	1006943a 	slli	r3,r2,16
  822f2c:	defffd04 	addi	sp,sp,-12
  822f30:	dc800215 	stw	r18,8(sp)
  822f34:	1907883a 	add	r3,r3,r4
  822f38:	dc400115 	stw	r17,4(sp)
  822f3c:	dc000015 	stw	r16,0(sp)
  822f40:	4165383a 	mul	r18,r8,r5
  822f44:	31e3383a 	mul	r17,r6,r7
  822f48:	1012d43a 	srli	r9,r2,16
  822f4c:	62d9383a 	mul	r12,r12,r11
  822f50:	181f883a 	mov	r15,r3
  822f54:	1280022e 	bgeu	r2,r10,822f60 <__muldi3+0x74>
  822f58:	00800074 	movhi	r2,1
  822f5c:	6099883a 	add	r12,r12,r2
  822f60:	624d883a 	add	r6,r12,r9
  822f64:	9187883a 	add	r3,r18,r6
  822f68:	88c7883a 	add	r3,r17,r3
  822f6c:	7805883a 	mov	r2,r15
  822f70:	dc800217 	ldw	r18,8(sp)
  822f74:	dc400117 	ldw	r17,4(sp)
  822f78:	dc000017 	ldw	r16,0(sp)
  822f7c:	dec00304 	addi	sp,sp,12
  822f80:	f800283a 	ret

00822f84 <__clzsi2>:
  822f84:	00bfffd4 	movui	r2,65535
  822f88:	11000e36 	bltu	r2,r4,822fc4 <__clzsi2+0x40>
  822f8c:	00803fc4 	movi	r2,255
  822f90:	01400204 	movi	r5,8
  822f94:	0007883a 	mov	r3,zero
  822f98:	11001036 	bltu	r2,r4,822fdc <__clzsi2+0x58>
  822f9c:	000b883a 	mov	r5,zero
  822fa0:	20c6d83a 	srl	r3,r4,r3
  822fa4:	008020f4 	movhi	r2,131
  822fa8:	108e0704 	addi	r2,r2,14364
  822fac:	1887883a 	add	r3,r3,r2
  822fb0:	18800003 	ldbu	r2,0(r3)
  822fb4:	00c00804 	movi	r3,32
  822fb8:	2885883a 	add	r2,r5,r2
  822fbc:	1885c83a 	sub	r2,r3,r2
  822fc0:	f800283a 	ret
  822fc4:	01400404 	movi	r5,16
  822fc8:	00804034 	movhi	r2,256
  822fcc:	10bfffc4 	addi	r2,r2,-1
  822fd0:	2807883a 	mov	r3,r5
  822fd4:	113ff22e 	bgeu	r2,r4,822fa0 <__clzsi2+0x1c>
  822fd8:	01400604 	movi	r5,24
  822fdc:	2807883a 	mov	r3,r5
  822fe0:	20c6d83a 	srl	r3,r4,r3
  822fe4:	008020f4 	movhi	r2,131
  822fe8:	108e0704 	addi	r2,r2,14364
  822fec:	1887883a 	add	r3,r3,r2
  822ff0:	18800003 	ldbu	r2,0(r3)
  822ff4:	00c00804 	movi	r3,32
  822ff8:	2885883a 	add	r2,r5,r2
  822ffc:	1885c83a 	sub	r2,r3,r2
  823000:	f800283a 	ret

00823004 <__pack_d>:
  823004:	20c00017 	ldw	r3,0(r4)
  823008:	defffd04 	addi	sp,sp,-12
  82300c:	dc000015 	stw	r16,0(sp)
  823010:	dc800215 	stw	r18,8(sp)
  823014:	dc400115 	stw	r17,4(sp)
  823018:	00800044 	movi	r2,1
  82301c:	22000317 	ldw	r8,12(r4)
  823020:	001f883a 	mov	r15,zero
  823024:	22400417 	ldw	r9,16(r4)
  823028:	24000117 	ldw	r16,4(r4)
  82302c:	10c0552e 	bgeu	r2,r3,823184 <__pack_d+0x180>
  823030:	00800104 	movi	r2,4
  823034:	18804f26 	beq	r3,r2,823174 <__pack_d+0x170>
  823038:	00800084 	movi	r2,2
  82303c:	18800226 	beq	r3,r2,823048 <__pack_d+0x44>
  823040:	4244b03a 	or	r2,r8,r9
  823044:	10001a1e 	bne	r2,zero,8230b0 <__pack_d+0xac>
  823048:	000d883a 	mov	r6,zero
  82304c:	000f883a 	mov	r7,zero
  823050:	0011883a 	mov	r8,zero
  823054:	00800434 	movhi	r2,16
  823058:	10bfffc4 	addi	r2,r2,-1
  82305c:	301d883a 	mov	r14,r6
  823060:	3884703a 	and	r2,r7,r2
  823064:	400a953a 	slli	r5,r8,20
  823068:	79bffc2c 	andhi	r6,r15,65520
  82306c:	308cb03a 	or	r6,r6,r2
  823070:	00e00434 	movhi	r3,32784
  823074:	18ffffc4 	addi	r3,r3,-1
  823078:	800497fa 	slli	r2,r16,31
  82307c:	30c6703a 	and	r3,r6,r3
  823080:	1946b03a 	or	r3,r3,r5
  823084:	01600034 	movhi	r5,32768
  823088:	297fffc4 	addi	r5,r5,-1
  82308c:	194a703a 	and	r5,r3,r5
  823090:	288ab03a 	or	r5,r5,r2
  823094:	2807883a 	mov	r3,r5
  823098:	7005883a 	mov	r2,r14
  82309c:	dc800217 	ldw	r18,8(sp)
  8230a0:	dc400117 	ldw	r17,4(sp)
  8230a4:	dc000017 	ldw	r16,0(sp)
  8230a8:	dec00304 	addi	sp,sp,12
  8230ac:	f800283a 	ret
  8230b0:	21000217 	ldw	r4,8(r4)
  8230b4:	00bf0084 	movi	r2,-1022
  8230b8:	20803f16 	blt	r4,r2,8231b8 <__pack_d+0x1b4>
  8230bc:	0080ffc4 	movi	r2,1023
  8230c0:	11002c16 	blt	r2,r4,823174 <__pack_d+0x170>
  8230c4:	00803fc4 	movi	r2,255
  8230c8:	408c703a 	and	r6,r8,r2
  8230cc:	00802004 	movi	r2,128
  8230d0:	0007883a 	mov	r3,zero
  8230d4:	000f883a 	mov	r7,zero
  8230d8:	2280ffc4 	addi	r10,r4,1023
  8230dc:	30801e26 	beq	r6,r2,823158 <__pack_d+0x154>
  8230e0:	00801fc4 	movi	r2,127
  8230e4:	4089883a 	add	r4,r8,r2
  8230e8:	220d803a 	cmpltu	r6,r4,r8
  8230ec:	324d883a 	add	r6,r6,r9
  8230f0:	2011883a 	mov	r8,r4
  8230f4:	3013883a 	mov	r9,r6
  8230f8:	00880034 	movhi	r2,8192
  8230fc:	10bfffc4 	addi	r2,r2,-1
  823100:	12400d36 	bltu	r2,r9,823138 <__pack_d+0x134>
  823104:	4804963a 	slli	r2,r9,24
  823108:	400cd23a 	srli	r6,r8,8
  82310c:	480ed23a 	srli	r7,r9,8
  823110:	013fffc4 	movi	r4,-1
  823114:	118cb03a 	or	r6,r2,r6
  823118:	01400434 	movhi	r5,16
  82311c:	297fffc4 	addi	r5,r5,-1
  823120:	3104703a 	and	r2,r6,r4
  823124:	3946703a 	and	r3,r7,r5
  823128:	5201ffcc 	andi	r8,r10,2047
  82312c:	100d883a 	mov	r6,r2
  823130:	180f883a 	mov	r7,r3
  823134:	003fc706 	br	823054 <__pack_d+0x50>
  823138:	480897fa 	slli	r4,r9,31
  82313c:	4004d07a 	srli	r2,r8,1
  823140:	4806d07a 	srli	r3,r9,1
  823144:	52800044 	addi	r10,r10,1
  823148:	2084b03a 	or	r2,r4,r2
  82314c:	1011883a 	mov	r8,r2
  823150:	1813883a 	mov	r9,r3
  823154:	003feb06 	br	823104 <__pack_d+0x100>
  823158:	383fe11e 	bne	r7,zero,8230e0 <__pack_d+0xdc>
  82315c:	01004004 	movi	r4,256
  823160:	4104703a 	and	r2,r8,r4
  823164:	10c4b03a 	or	r2,r2,r3
  823168:	103fe326 	beq	r2,zero,8230f8 <__pack_d+0xf4>
  82316c:	3005883a 	mov	r2,r6
  823170:	003fdc06 	br	8230e4 <__pack_d+0xe0>
  823174:	000d883a 	mov	r6,zero
  823178:	000f883a 	mov	r7,zero
  82317c:	0201ffc4 	movi	r8,2047
  823180:	003fb406 	br	823054 <__pack_d+0x50>
  823184:	0005883a 	mov	r2,zero
  823188:	00c00234 	movhi	r3,8
  82318c:	408cb03a 	or	r6,r8,r2
  823190:	48ceb03a 	or	r7,r9,r3
  823194:	013fffc4 	movi	r4,-1
  823198:	01400434 	movhi	r5,16
  82319c:	297fffc4 	addi	r5,r5,-1
  8231a0:	3104703a 	and	r2,r6,r4
  8231a4:	3946703a 	and	r3,r7,r5
  8231a8:	100d883a 	mov	r6,r2
  8231ac:	180f883a 	mov	r7,r3
  8231b0:	0201ffc4 	movi	r8,2047
  8231b4:	003fa706 	br	823054 <__pack_d+0x50>
  8231b8:	1109c83a 	sub	r4,r2,r4
  8231bc:	00800e04 	movi	r2,56
  8231c0:	11004316 	blt	r2,r4,8232d0 <__pack_d+0x2cc>
  8231c4:	21fff804 	addi	r7,r4,-32
  8231c8:	38004516 	blt	r7,zero,8232e0 <__pack_d+0x2dc>
  8231cc:	49d8d83a 	srl	r12,r9,r7
  8231d0:	001b883a 	mov	r13,zero
  8231d4:	0023883a 	mov	r17,zero
  8231d8:	01400044 	movi	r5,1
  8231dc:	0025883a 	mov	r18,zero
  8231e0:	38004716 	blt	r7,zero,823300 <__pack_d+0x2fc>
  8231e4:	29d6983a 	sll	r11,r5,r7
  8231e8:	0015883a 	mov	r10,zero
  8231ec:	00bfffc4 	movi	r2,-1
  8231f0:	5089883a 	add	r4,r10,r2
  8231f4:	588b883a 	add	r5,r11,r2
  8231f8:	228d803a 	cmpltu	r6,r4,r10
  8231fc:	314b883a 	add	r5,r6,r5
  823200:	4104703a 	and	r2,r8,r4
  823204:	4946703a 	and	r3,r9,r5
  823208:	10c4b03a 	or	r2,r2,r3
  82320c:	10000226 	beq	r2,zero,823218 <__pack_d+0x214>
  823210:	04400044 	movi	r17,1
  823214:	0025883a 	mov	r18,zero
  823218:	00803fc4 	movi	r2,255
  82321c:	644eb03a 	or	r7,r12,r17
  823220:	3892703a 	and	r9,r7,r2
  823224:	00802004 	movi	r2,128
  823228:	6c90b03a 	or	r8,r13,r18
  82322c:	0015883a 	mov	r10,zero
  823230:	48801626 	beq	r9,r2,82328c <__pack_d+0x288>
  823234:	01001fc4 	movi	r4,127
  823238:	3905883a 	add	r2,r7,r4
  82323c:	11cd803a 	cmpltu	r6,r2,r7
  823240:	320d883a 	add	r6,r6,r8
  823244:	100f883a 	mov	r7,r2
  823248:	00840034 	movhi	r2,4096
  82324c:	10bfffc4 	addi	r2,r2,-1
  823250:	3011883a 	mov	r8,r6
  823254:	0007883a 	mov	r3,zero
  823258:	11801b36 	bltu	r2,r6,8232c8 <__pack_d+0x2c4>
  82325c:	4004963a 	slli	r2,r8,24
  823260:	3808d23a 	srli	r4,r7,8
  823264:	400ad23a 	srli	r5,r8,8
  823268:	1813883a 	mov	r9,r3
  82326c:	1108b03a 	or	r4,r2,r4
  823270:	00bfffc4 	movi	r2,-1
  823274:	00c00434 	movhi	r3,16
  823278:	18ffffc4 	addi	r3,r3,-1
  82327c:	208c703a 	and	r6,r4,r2
  823280:	28ce703a 	and	r7,r5,r3
  823284:	4a01ffcc 	andi	r8,r9,2047
  823288:	003f7206 	br	823054 <__pack_d+0x50>
  82328c:	503fe91e 	bne	r10,zero,823234 <__pack_d+0x230>
  823290:	01004004 	movi	r4,256
  823294:	3904703a 	and	r2,r7,r4
  823298:	0007883a 	mov	r3,zero
  82329c:	10c4b03a 	or	r2,r2,r3
  8232a0:	10000626 	beq	r2,zero,8232bc <__pack_d+0x2b8>
  8232a4:	3a45883a 	add	r2,r7,r9
  8232a8:	11cd803a 	cmpltu	r6,r2,r7
  8232ac:	320d883a 	add	r6,r6,r8
  8232b0:	100f883a 	mov	r7,r2
  8232b4:	3011883a 	mov	r8,r6
  8232b8:	0007883a 	mov	r3,zero
  8232bc:	00840034 	movhi	r2,4096
  8232c0:	10bfffc4 	addi	r2,r2,-1
  8232c4:	123fe52e 	bgeu	r2,r8,82325c <__pack_d+0x258>
  8232c8:	00c00044 	movi	r3,1
  8232cc:	003fe306 	br	82325c <__pack_d+0x258>
  8232d0:	0009883a 	mov	r4,zero
  8232d4:	0013883a 	mov	r9,zero
  8232d8:	000b883a 	mov	r5,zero
  8232dc:	003fe406 	br	823270 <__pack_d+0x26c>
  8232e0:	4a47883a 	add	r3,r9,r9
  8232e4:	008007c4 	movi	r2,31
  8232e8:	1105c83a 	sub	r2,r2,r4
  8232ec:	1886983a 	sll	r3,r3,r2
  8232f0:	4118d83a 	srl	r12,r8,r4
  8232f4:	491ad83a 	srl	r13,r9,r4
  8232f8:	1b18b03a 	or	r12,r3,r12
  8232fc:	003fb506 	br	8231d4 <__pack_d+0x1d0>
  823300:	2806d07a 	srli	r3,r5,1
  823304:	008007c4 	movi	r2,31
  823308:	1105c83a 	sub	r2,r2,r4
  82330c:	1896d83a 	srl	r11,r3,r2
  823310:	2914983a 	sll	r10,r5,r4
  823314:	003fb506 	br	8231ec <__pack_d+0x1e8>

00823318 <__unpack_d>:
  823318:	20c00117 	ldw	r3,4(r4)
  82331c:	22400017 	ldw	r9,0(r4)
  823320:	00800434 	movhi	r2,16
  823324:	10bfffc4 	addi	r2,r2,-1
  823328:	1808d53a 	srli	r4,r3,20
  82332c:	180cd7fa 	srli	r6,r3,31
  823330:	1894703a 	and	r10,r3,r2
  823334:	2201ffcc 	andi	r8,r4,2047
  823338:	281b883a 	mov	r13,r5
  82333c:	4817883a 	mov	r11,r9
  823340:	29800115 	stw	r6,4(r5)
  823344:	5019883a 	mov	r12,r10
  823348:	40001e1e 	bne	r8,zero,8233c4 <__unpack_d+0xac>
  82334c:	4a84b03a 	or	r2,r9,r10
  823350:	10001926 	beq	r2,zero,8233b8 <__unpack_d+0xa0>
  823354:	4804d63a 	srli	r2,r9,24
  823358:	500c923a 	slli	r6,r10,8
  82335c:	013f0084 	movi	r4,-1022
  823360:	00c40034 	movhi	r3,4096
  823364:	18ffffc4 	addi	r3,r3,-1
  823368:	118cb03a 	or	r6,r2,r6
  82336c:	008000c4 	movi	r2,3
  823370:	480a923a 	slli	r5,r9,8
  823374:	68800015 	stw	r2,0(r13)
  823378:	69000215 	stw	r4,8(r13)
  82337c:	19800b36 	bltu	r3,r6,8233ac <__unpack_d+0x94>
  823380:	200f883a 	mov	r7,r4
  823384:	1811883a 	mov	r8,r3
  823388:	2945883a 	add	r2,r5,r5
  82338c:	1149803a 	cmpltu	r4,r2,r5
  823390:	3187883a 	add	r3,r6,r6
  823394:	20c9883a 	add	r4,r4,r3
  823398:	100b883a 	mov	r5,r2
  82339c:	200d883a 	mov	r6,r4
  8233a0:	39ffffc4 	addi	r7,r7,-1
  8233a4:	413ff82e 	bgeu	r8,r4,823388 <__unpack_d+0x70>
  8233a8:	69c00215 	stw	r7,8(r13)
  8233ac:	69800415 	stw	r6,16(r13)
  8233b0:	69400315 	stw	r5,12(r13)
  8233b4:	f800283a 	ret
  8233b8:	00800084 	movi	r2,2
  8233bc:	28800015 	stw	r2,0(r5)
  8233c0:	f800283a 	ret
  8233c4:	0081ffc4 	movi	r2,2047
  8233c8:	40800f26 	beq	r8,r2,823408 <__unpack_d+0xf0>
  8233cc:	480cd63a 	srli	r6,r9,24
  8233d0:	5006923a 	slli	r3,r10,8
  8233d4:	4804923a 	slli	r2,r9,8
  8233d8:	0009883a 	mov	r4,zero
  8233dc:	30c6b03a 	or	r3,r6,r3
  8233e0:	01440034 	movhi	r5,4096
  8233e4:	110cb03a 	or	r6,r2,r4
  8233e8:	423f0044 	addi	r8,r8,-1023
  8233ec:	194eb03a 	or	r7,r3,r5
  8233f0:	008000c4 	movi	r2,3
  8233f4:	69c00415 	stw	r7,16(r13)
  8233f8:	6a000215 	stw	r8,8(r13)
  8233fc:	68800015 	stw	r2,0(r13)
  823400:	69800315 	stw	r6,12(r13)
  823404:	f800283a 	ret
  823408:	4a84b03a 	or	r2,r9,r10
  82340c:	1000031e 	bne	r2,zero,82341c <__unpack_d+0x104>
  823410:	00800104 	movi	r2,4
  823414:	28800015 	stw	r2,0(r5)
  823418:	f800283a 	ret
  82341c:	0009883a 	mov	r4,zero
  823420:	01400234 	movhi	r5,8
  823424:	4904703a 	and	r2,r9,r4
  823428:	5146703a 	and	r3,r10,r5
  82342c:	10c4b03a 	or	r2,r2,r3
  823430:	10000526 	beq	r2,zero,823448 <__unpack_d+0x130>
  823434:	00800044 	movi	r2,1
  823438:	68800015 	stw	r2,0(r13)
  82343c:	6b000415 	stw	r12,16(r13)
  823440:	6ac00315 	stw	r11,12(r13)
  823444:	f800283a 	ret
  823448:	68000015 	stw	zero,0(r13)
  82344c:	003ffb06 	br	82343c <__unpack_d+0x124>

00823450 <__fpcmp_parts_d>:
  823450:	21800017 	ldw	r6,0(r4)
  823454:	00c00044 	movi	r3,1
  823458:	19800a2e 	bgeu	r3,r6,823484 <__fpcmp_parts_d+0x34>
  82345c:	28800017 	ldw	r2,0(r5)
  823460:	1880082e 	bgeu	r3,r2,823484 <__fpcmp_parts_d+0x34>
  823464:	00c00104 	movi	r3,4
  823468:	30c02626 	beq	r6,r3,823504 <__fpcmp_parts_d+0xb4>
  82346c:	10c02226 	beq	r2,r3,8234f8 <__fpcmp_parts_d+0xa8>
  823470:	00c00084 	movi	r3,2
  823474:	30c00526 	beq	r6,r3,82348c <__fpcmp_parts_d+0x3c>
  823478:	10c0071e 	bne	r2,r3,823498 <__fpcmp_parts_d+0x48>
  82347c:	20800117 	ldw	r2,4(r4)
  823480:	1000091e 	bne	r2,zero,8234a8 <__fpcmp_parts_d+0x58>
  823484:	00800044 	movi	r2,1
  823488:	f800283a 	ret
  82348c:	10c01a1e 	bne	r2,r3,8234f8 <__fpcmp_parts_d+0xa8>
  823490:	0005883a 	mov	r2,zero
  823494:	f800283a 	ret
  823498:	22000117 	ldw	r8,4(r4)
  82349c:	28800117 	ldw	r2,4(r5)
  8234a0:	40800326 	beq	r8,r2,8234b0 <__fpcmp_parts_d+0x60>
  8234a4:	403ff726 	beq	r8,zero,823484 <__fpcmp_parts_d+0x34>
  8234a8:	00bfffc4 	movi	r2,-1
  8234ac:	f800283a 	ret
  8234b0:	20c00217 	ldw	r3,8(r4)
  8234b4:	28800217 	ldw	r2,8(r5)
  8234b8:	10fffa16 	blt	r2,r3,8234a4 <__fpcmp_parts_d+0x54>
  8234bc:	18800916 	blt	r3,r2,8234e4 <__fpcmp_parts_d+0x94>
  8234c0:	21c00417 	ldw	r7,16(r4)
  8234c4:	28c00417 	ldw	r3,16(r5)
  8234c8:	21800317 	ldw	r6,12(r4)
  8234cc:	28800317 	ldw	r2,12(r5)
  8234d0:	19fff436 	bltu	r3,r7,8234a4 <__fpcmp_parts_d+0x54>
  8234d4:	38c00526 	beq	r7,r3,8234ec <__fpcmp_parts_d+0x9c>
  8234d8:	38c00236 	bltu	r7,r3,8234e4 <__fpcmp_parts_d+0x94>
  8234dc:	19ffec1e 	bne	r3,r7,823490 <__fpcmp_parts_d+0x40>
  8234e0:	30bfeb2e 	bgeu	r6,r2,823490 <__fpcmp_parts_d+0x40>
  8234e4:	403fe71e 	bne	r8,zero,823484 <__fpcmp_parts_d+0x34>
  8234e8:	003fef06 	br	8234a8 <__fpcmp_parts_d+0x58>
  8234ec:	11bffa2e 	bgeu	r2,r6,8234d8 <__fpcmp_parts_d+0x88>
  8234f0:	403fe426 	beq	r8,zero,823484 <__fpcmp_parts_d+0x34>
  8234f4:	003fec06 	br	8234a8 <__fpcmp_parts_d+0x58>
  8234f8:	28800117 	ldw	r2,4(r5)
  8234fc:	103fe11e 	bne	r2,zero,823484 <__fpcmp_parts_d+0x34>
  823500:	003fe906 	br	8234a8 <__fpcmp_parts_d+0x58>
  823504:	11bfdd1e 	bne	r2,r6,82347c <__fpcmp_parts_d+0x2c>
  823508:	28c00117 	ldw	r3,4(r5)
  82350c:	20800117 	ldw	r2,4(r4)
  823510:	1885c83a 	sub	r2,r3,r2
  823514:	f800283a 	ret

00823518 <exit>:
  823518:	defffe04 	addi	sp,sp,-8
  82351c:	000b883a 	mov	r5,zero
  823520:	dc000015 	stw	r16,0(sp)
  823524:	dfc00115 	stw	ra,4(sp)
  823528:	2021883a 	mov	r16,r4
  82352c:	0825f540 	call	825f54 <__call_exitprocs>
  823530:	008020f4 	movhi	r2,131
  823534:	10967604 	addi	r2,r2,23000
  823538:	11000017 	ldw	r4,0(r2)
  82353c:	20800f17 	ldw	r2,60(r4)
  823540:	10000126 	beq	r2,zero,823548 <exit+0x30>
  823544:	103ee83a 	callr	r2
  823548:	8009883a 	mov	r4,r16
  82354c:	082c0a40 	call	82c0a4 <_exit>

00823550 <free>:
  823550:	008020f4 	movhi	r2,131
  823554:	10967504 	addi	r2,r2,22996
  823558:	200b883a 	mov	r5,r4
  82355c:	11000017 	ldw	r4,0(r2)
  823560:	0827eec1 	jmpi	827eec <_free_r>

00823564 <malloc>:
  823564:	008020f4 	movhi	r2,131
  823568:	10967504 	addi	r2,r2,22996
  82356c:	200b883a 	mov	r5,r4
  823570:	11000017 	ldw	r4,0(r2)
  823574:	08235781 	jmpi	823578 <_malloc_r>

00823578 <_malloc_r>:
  823578:	defff604 	addi	sp,sp,-40
  82357c:	28c002c4 	addi	r3,r5,11
  823580:	00800584 	movi	r2,22
  823584:	dc800215 	stw	r18,8(sp)
  823588:	dfc00915 	stw	ra,36(sp)
  82358c:	df000815 	stw	fp,32(sp)
  823590:	ddc00715 	stw	r23,28(sp)
  823594:	dd800615 	stw	r22,24(sp)
  823598:	dd400515 	stw	r21,20(sp)
  82359c:	dd000415 	stw	r20,16(sp)
  8235a0:	dcc00315 	stw	r19,12(sp)
  8235a4:	dc400115 	stw	r17,4(sp)
  8235a8:	dc000015 	stw	r16,0(sp)
  8235ac:	2025883a 	mov	r18,r4
  8235b0:	10c01236 	bltu	r2,r3,8235fc <_malloc_r+0x84>
  8235b4:	04400404 	movi	r17,16
  8235b8:	8940142e 	bgeu	r17,r5,82360c <_malloc_r+0x94>
  8235bc:	00800304 	movi	r2,12
  8235c0:	0007883a 	mov	r3,zero
  8235c4:	90800015 	stw	r2,0(r18)
  8235c8:	1805883a 	mov	r2,r3
  8235cc:	dfc00917 	ldw	ra,36(sp)
  8235d0:	df000817 	ldw	fp,32(sp)
  8235d4:	ddc00717 	ldw	r23,28(sp)
  8235d8:	dd800617 	ldw	r22,24(sp)
  8235dc:	dd400517 	ldw	r21,20(sp)
  8235e0:	dd000417 	ldw	r20,16(sp)
  8235e4:	dcc00317 	ldw	r19,12(sp)
  8235e8:	dc800217 	ldw	r18,8(sp)
  8235ec:	dc400117 	ldw	r17,4(sp)
  8235f0:	dc000017 	ldw	r16,0(sp)
  8235f4:	dec00a04 	addi	sp,sp,40
  8235f8:	f800283a 	ret
  8235fc:	00bffe04 	movi	r2,-8
  823600:	18a2703a 	and	r17,r3,r2
  823604:	883fed16 	blt	r17,zero,8235bc <_malloc_r+0x44>
  823608:	897fec36 	bltu	r17,r5,8235bc <_malloc_r+0x44>
  82360c:	9009883a 	mov	r4,r18
  823610:	082c7800 	call	82c780 <__malloc_lock>
  823614:	00807dc4 	movi	r2,503
  823618:	14402b2e 	bgeu	r2,r17,8236c8 <_malloc_r+0x150>
  82361c:	8806d27a 	srli	r3,r17,9
  823620:	18003f1e 	bne	r3,zero,823720 <_malloc_r+0x1a8>
  823624:	880cd0fa 	srli	r6,r17,3
  823628:	300490fa 	slli	r2,r6,3
  82362c:	02c020f4 	movhi	r11,131
  823630:	5ad0c504 	addi	r11,r11,17172
  823634:	12cb883a 	add	r5,r2,r11
  823638:	2c000317 	ldw	r16,12(r5)
  82363c:	580f883a 	mov	r7,r11
  823640:	2c00041e 	bne	r5,r16,823654 <_malloc_r+0xdc>
  823644:	00000a06 	br	823670 <_malloc_r+0xf8>
  823648:	1800860e 	bge	r3,zero,823864 <_malloc_r+0x2ec>
  82364c:	84000317 	ldw	r16,12(r16)
  823650:	2c000726 	beq	r5,r16,823670 <_malloc_r+0xf8>
  823654:	80800117 	ldw	r2,4(r16)
  823658:	00ffff04 	movi	r3,-4
  82365c:	10c8703a 	and	r4,r2,r3
  823660:	2447c83a 	sub	r3,r4,r17
  823664:	008003c4 	movi	r2,15
  823668:	10fff70e 	bge	r2,r3,823648 <_malloc_r+0xd0>
  82366c:	31bfffc4 	addi	r6,r6,-1
  823670:	32400044 	addi	r9,r6,1
  823674:	028020f4 	movhi	r10,131
  823678:	5290c704 	addi	r10,r10,17180
  82367c:	54000217 	ldw	r16,8(r10)
  823680:	8280a026 	beq	r16,r10,823904 <_malloc_r+0x38c>
  823684:	80800117 	ldw	r2,4(r16)
  823688:	00ffff04 	movi	r3,-4
  82368c:	10ca703a 	and	r5,r2,r3
  823690:	2c4dc83a 	sub	r6,r5,r17
  823694:	008003c4 	movi	r2,15
  823698:	11808316 	blt	r2,r6,8238a8 <_malloc_r+0x330>
  82369c:	52800315 	stw	r10,12(r10)
  8236a0:	52800215 	stw	r10,8(r10)
  8236a4:	30002916 	blt	r6,zero,82374c <_malloc_r+0x1d4>
  8236a8:	8147883a 	add	r3,r16,r5
  8236ac:	18800117 	ldw	r2,4(r3)
  8236b0:	9009883a 	mov	r4,r18
  8236b4:	10800054 	ori	r2,r2,1
  8236b8:	18800115 	stw	r2,4(r3)
  8236bc:	082c7a00 	call	82c7a0 <__malloc_unlock>
  8236c0:	80c00204 	addi	r3,r16,8
  8236c4:	003fc006 	br	8235c8 <_malloc_r+0x50>
  8236c8:	02c020f4 	movhi	r11,131
  8236cc:	5ad0c504 	addi	r11,r11,17172
  8236d0:	8ac5883a 	add	r2,r17,r11
  8236d4:	14000317 	ldw	r16,12(r2)
  8236d8:	580f883a 	mov	r7,r11
  8236dc:	8806d0fa 	srli	r3,r17,3
  8236e0:	14006c26 	beq	r2,r16,823894 <_malloc_r+0x31c>
  8236e4:	80c00117 	ldw	r3,4(r16)
  8236e8:	00bfff04 	movi	r2,-4
  8236ec:	81800317 	ldw	r6,12(r16)
  8236f0:	1886703a 	and	r3,r3,r2
  8236f4:	80c7883a 	add	r3,r16,r3
  8236f8:	18800117 	ldw	r2,4(r3)
  8236fc:	81400217 	ldw	r5,8(r16)
  823700:	9009883a 	mov	r4,r18
  823704:	10800054 	ori	r2,r2,1
  823708:	18800115 	stw	r2,4(r3)
  82370c:	31400215 	stw	r5,8(r6)
  823710:	29800315 	stw	r6,12(r5)
  823714:	082c7a00 	call	82c7a0 <__malloc_unlock>
  823718:	80c00204 	addi	r3,r16,8
  82371c:	003faa06 	br	8235c8 <_malloc_r+0x50>
  823720:	00800104 	movi	r2,4
  823724:	10c0052e 	bgeu	r2,r3,82373c <_malloc_r+0x1c4>
  823728:	00800504 	movi	r2,20
  82372c:	10c07836 	bltu	r2,r3,823910 <_malloc_r+0x398>
  823730:	198016c4 	addi	r6,r3,91
  823734:	300490fa 	slli	r2,r6,3
  823738:	003fbc06 	br	82362c <_malloc_r+0xb4>
  82373c:	8804d1ba 	srli	r2,r17,6
  823740:	11800e04 	addi	r6,r2,56
  823744:	300490fa 	slli	r2,r6,3
  823748:	003fb806 	br	82362c <_malloc_r+0xb4>
  82374c:	00807fc4 	movi	r2,511
  823750:	1140bb36 	bltu	r2,r5,823a40 <_malloc_r+0x4c8>
  823754:	2806d0fa 	srli	r3,r5,3
  823758:	573ffe04 	addi	fp,r10,-8
  82375c:	00800044 	movi	r2,1
  823760:	180890fa 	slli	r4,r3,3
  823764:	1807d0ba 	srai	r3,r3,2
  823768:	e1c00117 	ldw	r7,4(fp)
  82376c:	5909883a 	add	r4,r11,r4
  823770:	21400217 	ldw	r5,8(r4)
  823774:	10c4983a 	sll	r2,r2,r3
  823778:	81000315 	stw	r4,12(r16)
  82377c:	81400215 	stw	r5,8(r16)
  823780:	388eb03a 	or	r7,r7,r2
  823784:	2c000315 	stw	r16,12(r5)
  823788:	24000215 	stw	r16,8(r4)
  82378c:	e1c00115 	stw	r7,4(fp)
  823790:	4807883a 	mov	r3,r9
  823794:	4800cd16 	blt	r9,zero,823acc <_malloc_r+0x554>
  823798:	1807d0ba 	srai	r3,r3,2
  82379c:	00800044 	movi	r2,1
  8237a0:	10c8983a 	sll	r4,r2,r3
  8237a4:	39004436 	bltu	r7,r4,8238b8 <_malloc_r+0x340>
  8237a8:	21c4703a 	and	r2,r4,r7
  8237ac:	10000a1e 	bne	r2,zero,8237d8 <_malloc_r+0x260>
  8237b0:	2109883a 	add	r4,r4,r4
  8237b4:	00bfff04 	movi	r2,-4
  8237b8:	4884703a 	and	r2,r9,r2
  8237bc:	3906703a 	and	r3,r7,r4
  8237c0:	12400104 	addi	r9,r2,4
  8237c4:	1800041e 	bne	r3,zero,8237d8 <_malloc_r+0x260>
  8237c8:	2109883a 	add	r4,r4,r4
  8237cc:	3904703a 	and	r2,r7,r4
  8237d0:	4a400104 	addi	r9,r9,4
  8237d4:	103ffc26 	beq	r2,zero,8237c8 <_malloc_r+0x250>
  8237d8:	480490fa 	slli	r2,r9,3
  8237dc:	4819883a 	mov	r12,r9
  8237e0:	023fff04 	movi	r8,-4
  8237e4:	589b883a 	add	r13,r11,r2
  8237e8:	6807883a 	mov	r3,r13
  8237ec:	014003c4 	movi	r5,15
  8237f0:	1c000317 	ldw	r16,12(r3)
  8237f4:	1c00041e 	bne	r3,r16,823808 <_malloc_r+0x290>
  8237f8:	0000a706 	br	823a98 <_malloc_r+0x520>
  8237fc:	3000ab0e 	bge	r6,zero,823aac <_malloc_r+0x534>
  823800:	84000317 	ldw	r16,12(r16)
  823804:	1c00a426 	beq	r3,r16,823a98 <_malloc_r+0x520>
  823808:	80800117 	ldw	r2,4(r16)
  82380c:	1204703a 	and	r2,r2,r8
  823810:	144dc83a 	sub	r6,r2,r17
  823814:	29bff90e 	bge	r5,r6,8237fc <_malloc_r+0x284>
  823818:	81000317 	ldw	r4,12(r16)
  82381c:	80c00217 	ldw	r3,8(r16)
  823820:	89400054 	ori	r5,r17,1
  823824:	8445883a 	add	r2,r16,r17
  823828:	20c00215 	stw	r3,8(r4)
  82382c:	19000315 	stw	r4,12(r3)
  823830:	81400115 	stw	r5,4(r16)
  823834:	1187883a 	add	r3,r2,r6
  823838:	31000054 	ori	r4,r6,1
  82383c:	50800315 	stw	r2,12(r10)
  823840:	50800215 	stw	r2,8(r10)
  823844:	19800015 	stw	r6,0(r3)
  823848:	11000115 	stw	r4,4(r2)
  82384c:	12800215 	stw	r10,8(r2)
  823850:	12800315 	stw	r10,12(r2)
  823854:	9009883a 	mov	r4,r18
  823858:	082c7a00 	call	82c7a0 <__malloc_unlock>
  82385c:	80c00204 	addi	r3,r16,8
  823860:	003f5906 	br	8235c8 <_malloc_r+0x50>
  823864:	8109883a 	add	r4,r16,r4
  823868:	20800117 	ldw	r2,4(r4)
  82386c:	80c00217 	ldw	r3,8(r16)
  823870:	81400317 	ldw	r5,12(r16)
  823874:	10800054 	ori	r2,r2,1
  823878:	20800115 	stw	r2,4(r4)
  82387c:	28c00215 	stw	r3,8(r5)
  823880:	19400315 	stw	r5,12(r3)
  823884:	9009883a 	mov	r4,r18
  823888:	082c7a00 	call	82c7a0 <__malloc_unlock>
  82388c:	80c00204 	addi	r3,r16,8
  823890:	003f4d06 	br	8235c8 <_malloc_r+0x50>
  823894:	80800204 	addi	r2,r16,8
  823898:	14000317 	ldw	r16,12(r2)
  82389c:	143f911e 	bne	r2,r16,8236e4 <_malloc_r+0x16c>
  8238a0:	1a400084 	addi	r9,r3,2
  8238a4:	003f7306 	br	823674 <_malloc_r+0xfc>
  8238a8:	88c00054 	ori	r3,r17,1
  8238ac:	8445883a 	add	r2,r16,r17
  8238b0:	80c00115 	stw	r3,4(r16)
  8238b4:	003fdf06 	br	823834 <_malloc_r+0x2bc>
  8238b8:	e4000217 	ldw	r16,8(fp)
  8238bc:	00bfff04 	movi	r2,-4
  8238c0:	80c00117 	ldw	r3,4(r16)
  8238c4:	802d883a 	mov	r22,r16
  8238c8:	18aa703a 	and	r21,r3,r2
  8238cc:	ac401636 	bltu	r21,r17,823928 <_malloc_r+0x3b0>
  8238d0:	ac49c83a 	sub	r4,r21,r17
  8238d4:	008003c4 	movi	r2,15
  8238d8:	1100130e 	bge	r2,r4,823928 <_malloc_r+0x3b0>
  8238dc:	88800054 	ori	r2,r17,1
  8238e0:	8447883a 	add	r3,r16,r17
  8238e4:	80800115 	stw	r2,4(r16)
  8238e8:	20800054 	ori	r2,r4,1
  8238ec:	18800115 	stw	r2,4(r3)
  8238f0:	e0c00215 	stw	r3,8(fp)
  8238f4:	9009883a 	mov	r4,r18
  8238f8:	082c7a00 	call	82c7a0 <__malloc_unlock>
  8238fc:	80c00204 	addi	r3,r16,8
  823900:	003f3106 	br	8235c8 <_malloc_r+0x50>
  823904:	39c00117 	ldw	r7,4(r7)
  823908:	573ffe04 	addi	fp,r10,-8
  82390c:	003fa006 	br	823790 <_malloc_r+0x218>
  823910:	00801504 	movi	r2,84
  823914:	10c06736 	bltu	r2,r3,823ab4 <_malloc_r+0x53c>
  823918:	8804d33a 	srli	r2,r17,12
  82391c:	11801b84 	addi	r6,r2,110
  823920:	300490fa 	slli	r2,r6,3
  823924:	003f4106 	br	82362c <_malloc_r+0xb4>
  823928:	d0a7c117 	ldw	r2,-24828(gp)
  82392c:	d0e00317 	ldw	r3,-32756(gp)
  823930:	053fffc4 	movi	r20,-1
  823934:	10800404 	addi	r2,r2,16
  823938:	88a7883a 	add	r19,r17,r2
  82393c:	1d000326 	beq	r3,r20,82394c <_malloc_r+0x3d4>
  823940:	98c3ffc4 	addi	r3,r19,4095
  823944:	00bc0004 	movi	r2,-4096
  823948:	18a6703a 	and	r19,r3,r2
  82394c:	9009883a 	mov	r4,r18
  823950:	980b883a 	mov	r5,r19
  823954:	0823e080 	call	823e08 <_sbrk_r>
  823958:	1009883a 	mov	r4,r2
  82395c:	15000426 	beq	r2,r20,823970 <_malloc_r+0x3f8>
  823960:	854b883a 	add	r5,r16,r21
  823964:	1029883a 	mov	r20,r2
  823968:	11405a2e 	bgeu	r2,r5,823ad4 <_malloc_r+0x55c>
  82396c:	87000c26 	beq	r16,fp,8239a0 <_malloc_r+0x428>
  823970:	e4000217 	ldw	r16,8(fp)
  823974:	80c00117 	ldw	r3,4(r16)
  823978:	00bfff04 	movi	r2,-4
  82397c:	1884703a 	and	r2,r3,r2
  823980:	14400336 	bltu	r2,r17,823990 <_malloc_r+0x418>
  823984:	1449c83a 	sub	r4,r2,r17
  823988:	008003c4 	movi	r2,15
  82398c:	113fd316 	blt	r2,r4,8238dc <_malloc_r+0x364>
  823990:	9009883a 	mov	r4,r18
  823994:	082c7a00 	call	82c7a0 <__malloc_unlock>
  823998:	0007883a 	mov	r3,zero
  82399c:	003f0a06 	br	8235c8 <_malloc_r+0x50>
  8239a0:	05c020f4 	movhi	r23,131
  8239a4:	bdde4f04 	addi	r23,r23,31036
  8239a8:	b8800017 	ldw	r2,0(r23)
  8239ac:	988d883a 	add	r6,r19,r2
  8239b0:	b9800015 	stw	r6,0(r23)
  8239b4:	d0e00317 	ldw	r3,-32756(gp)
  8239b8:	00bfffc4 	movi	r2,-1
  8239bc:	18808e26 	beq	r3,r2,823bf8 <_malloc_r+0x680>
  8239c0:	2145c83a 	sub	r2,r4,r5
  8239c4:	3085883a 	add	r2,r6,r2
  8239c8:	b8800015 	stw	r2,0(r23)
  8239cc:	20c001cc 	andi	r3,r4,7
  8239d0:	18005f1e 	bne	r3,zero,823b50 <_malloc_r+0x5d8>
  8239d4:	000b883a 	mov	r5,zero
  8239d8:	a4c5883a 	add	r2,r20,r19
  8239dc:	1083ffcc 	andi	r2,r2,4095
  8239e0:	00c40004 	movi	r3,4096
  8239e4:	1887c83a 	sub	r3,r3,r2
  8239e8:	28e7883a 	add	r19,r5,r3
  8239ec:	9009883a 	mov	r4,r18
  8239f0:	980b883a 	mov	r5,r19
  8239f4:	0823e080 	call	823e08 <_sbrk_r>
  8239f8:	1007883a 	mov	r3,r2
  8239fc:	00bfffc4 	movi	r2,-1
  823a00:	18807a26 	beq	r3,r2,823bec <_malloc_r+0x674>
  823a04:	1d05c83a 	sub	r2,r3,r20
  823a08:	9885883a 	add	r2,r19,r2
  823a0c:	10c00054 	ori	r3,r2,1
  823a10:	b8800017 	ldw	r2,0(r23)
  823a14:	a021883a 	mov	r16,r20
  823a18:	a0c00115 	stw	r3,4(r20)
  823a1c:	9885883a 	add	r2,r19,r2
  823a20:	b8800015 	stw	r2,0(r23)
  823a24:	e5000215 	stw	r20,8(fp)
  823a28:	b7003626 	beq	r22,fp,823b04 <_malloc_r+0x58c>
  823a2c:	018003c4 	movi	r6,15
  823a30:	35404b36 	bltu	r6,r21,823b60 <_malloc_r+0x5e8>
  823a34:	00800044 	movi	r2,1
  823a38:	a0800115 	stw	r2,4(r20)
  823a3c:	003fcd06 	br	823974 <_malloc_r+0x3fc>
  823a40:	2808d27a 	srli	r4,r5,9
  823a44:	2000371e 	bne	r4,zero,823b24 <_malloc_r+0x5ac>
  823a48:	2808d0fa 	srli	r4,r5,3
  823a4c:	200690fa 	slli	r3,r4,3
  823a50:	1ad1883a 	add	r8,r3,r11
  823a54:	41800217 	ldw	r6,8(r8)
  823a58:	41805b26 	beq	r8,r6,823bc8 <_malloc_r+0x650>
  823a5c:	30800117 	ldw	r2,4(r6)
  823a60:	00ffff04 	movi	r3,-4
  823a64:	10c4703a 	and	r2,r2,r3
  823a68:	2880022e 	bgeu	r5,r2,823a74 <_malloc_r+0x4fc>
  823a6c:	31800217 	ldw	r6,8(r6)
  823a70:	41bffa1e 	bne	r8,r6,823a5c <_malloc_r+0x4e4>
  823a74:	32000317 	ldw	r8,12(r6)
  823a78:	39c00117 	ldw	r7,4(r7)
  823a7c:	82000315 	stw	r8,12(r16)
  823a80:	81800215 	stw	r6,8(r16)
  823a84:	070020f4 	movhi	fp,131
  823a88:	e710c504 	addi	fp,fp,17172
  823a8c:	34000315 	stw	r16,12(r6)
  823a90:	44000215 	stw	r16,8(r8)
  823a94:	003f3e06 	br	823790 <_malloc_r+0x218>
  823a98:	63000044 	addi	r12,r12,1
  823a9c:	608000cc 	andi	r2,r12,3
  823aa0:	10005d26 	beq	r2,zero,823c18 <_malloc_r+0x6a0>
  823aa4:	18c00204 	addi	r3,r3,8
  823aa8:	003f5106 	br	8237f0 <_malloc_r+0x278>
  823aac:	8089883a 	add	r4,r16,r2
  823ab0:	003f6d06 	br	823868 <_malloc_r+0x2f0>
  823ab4:	00805504 	movi	r2,340
  823ab8:	10c02036 	bltu	r2,r3,823b3c <_malloc_r+0x5c4>
  823abc:	8804d3fa 	srli	r2,r17,15
  823ac0:	11801dc4 	addi	r6,r2,119
  823ac4:	300490fa 	slli	r2,r6,3
  823ac8:	003ed806 	br	82362c <_malloc_r+0xb4>
  823acc:	48c000c4 	addi	r3,r9,3
  823ad0:	003f3106 	br	823798 <_malloc_r+0x220>
  823ad4:	05c020f4 	movhi	r23,131
  823ad8:	bdde4f04 	addi	r23,r23,31036
  823adc:	b8800017 	ldw	r2,0(r23)
  823ae0:	988d883a 	add	r6,r19,r2
  823ae4:	b9800015 	stw	r6,0(r23)
  823ae8:	293fb21e 	bne	r5,r4,8239b4 <_malloc_r+0x43c>
  823aec:	2083ffcc 	andi	r2,r4,4095
  823af0:	103fb01e 	bne	r2,zero,8239b4 <_malloc_r+0x43c>
  823af4:	e4000217 	ldw	r16,8(fp)
  823af8:	9d45883a 	add	r2,r19,r21
  823afc:	10800054 	ori	r2,r2,1
  823b00:	80800115 	stw	r2,4(r16)
  823b04:	b8c00017 	ldw	r3,0(r23)
  823b08:	d0a7c217 	ldw	r2,-24824(gp)
  823b0c:	10c0012e 	bgeu	r2,r3,823b14 <_malloc_r+0x59c>
  823b10:	d0e7c215 	stw	r3,-24824(gp)
  823b14:	d0a7c317 	ldw	r2,-24820(gp)
  823b18:	10ff962e 	bgeu	r2,r3,823974 <_malloc_r+0x3fc>
  823b1c:	d0e7c315 	stw	r3,-24820(gp)
  823b20:	003f9406 	br	823974 <_malloc_r+0x3fc>
  823b24:	00800104 	movi	r2,4
  823b28:	11001e36 	bltu	r2,r4,823ba4 <_malloc_r+0x62c>
  823b2c:	2804d1ba 	srli	r2,r5,6
  823b30:	11000e04 	addi	r4,r2,56
  823b34:	200690fa 	slli	r3,r4,3
  823b38:	003fc506 	br	823a50 <_malloc_r+0x4d8>
  823b3c:	00815504 	movi	r2,1364
  823b40:	10c01d2e 	bgeu	r2,r3,823bb8 <_malloc_r+0x640>
  823b44:	01801f84 	movi	r6,126
  823b48:	0080fc04 	movi	r2,1008
  823b4c:	003eb706 	br	82362c <_malloc_r+0xb4>
  823b50:	00800204 	movi	r2,8
  823b54:	10cbc83a 	sub	r5,r2,r3
  823b58:	2169883a 	add	r20,r4,r5
  823b5c:	003f9e06 	br	8239d8 <_malloc_r+0x460>
  823b60:	00bffe04 	movi	r2,-8
  823b64:	a93ffd04 	addi	r4,r21,-12
  823b68:	2088703a 	and	r4,r4,r2
  823b6c:	b10b883a 	add	r5,r22,r4
  823b70:	00c00144 	movi	r3,5
  823b74:	28c00215 	stw	r3,8(r5)
  823b78:	28c00115 	stw	r3,4(r5)
  823b7c:	b0800117 	ldw	r2,4(r22)
  823b80:	1080004c 	andi	r2,r2,1
  823b84:	2084b03a 	or	r2,r4,r2
  823b88:	b0800115 	stw	r2,4(r22)
  823b8c:	313fdd2e 	bgeu	r6,r4,823b04 <_malloc_r+0x58c>
  823b90:	b1400204 	addi	r5,r22,8
  823b94:	9009883a 	mov	r4,r18
  823b98:	0827eec0 	call	827eec <_free_r>
  823b9c:	e4000217 	ldw	r16,8(fp)
  823ba0:	003fd806 	br	823b04 <_malloc_r+0x58c>
  823ba4:	00800504 	movi	r2,20
  823ba8:	11001536 	bltu	r2,r4,823c00 <_malloc_r+0x688>
  823bac:	210016c4 	addi	r4,r4,91
  823bb0:	200690fa 	slli	r3,r4,3
  823bb4:	003fa606 	br	823a50 <_malloc_r+0x4d8>
  823bb8:	8804d4ba 	srli	r2,r17,18
  823bbc:	11801f04 	addi	r6,r2,124
  823bc0:	300490fa 	slli	r2,r6,3
  823bc4:	003e9906 	br	82362c <_malloc_r+0xb4>
  823bc8:	2009d0ba 	srai	r4,r4,2
  823bcc:	014020f4 	movhi	r5,131
  823bd0:	2950c504 	addi	r5,r5,17172
  823bd4:	00c00044 	movi	r3,1
  823bd8:	28800117 	ldw	r2,4(r5)
  823bdc:	1906983a 	sll	r3,r3,r4
  823be0:	10c4b03a 	or	r2,r2,r3
  823be4:	28800115 	stw	r2,4(r5)
  823be8:	003fa306 	br	823a78 <_malloc_r+0x500>
  823bec:	0027883a 	mov	r19,zero
  823bf0:	00c00044 	movi	r3,1
  823bf4:	003f8606 	br	823a10 <_malloc_r+0x498>
  823bf8:	d1200315 	stw	r4,-32756(gp)
  823bfc:	003f7306 	br	8239cc <_malloc_r+0x454>
  823c00:	00801504 	movi	r2,84
  823c04:	11001936 	bltu	r2,r4,823c6c <_malloc_r+0x6f4>
  823c08:	2804d33a 	srli	r2,r5,12
  823c0c:	11001b84 	addi	r4,r2,110
  823c10:	200690fa 	slli	r3,r4,3
  823c14:	003f8e06 	br	823a50 <_malloc_r+0x4d8>
  823c18:	480b883a 	mov	r5,r9
  823c1c:	6807883a 	mov	r3,r13
  823c20:	288000cc 	andi	r2,r5,3
  823c24:	18fffe04 	addi	r3,r3,-8
  823c28:	297fffc4 	addi	r5,r5,-1
  823c2c:	10001526 	beq	r2,zero,823c84 <_malloc_r+0x70c>
  823c30:	18800217 	ldw	r2,8(r3)
  823c34:	10fffa26 	beq	r2,r3,823c20 <_malloc_r+0x6a8>
  823c38:	2109883a 	add	r4,r4,r4
  823c3c:	393f1e36 	bltu	r7,r4,8238b8 <_malloc_r+0x340>
  823c40:	203f1d26 	beq	r4,zero,8238b8 <_malloc_r+0x340>
  823c44:	21c4703a 	and	r2,r4,r7
  823c48:	10000226 	beq	r2,zero,823c54 <_malloc_r+0x6dc>
  823c4c:	6013883a 	mov	r9,r12
  823c50:	003ee106 	br	8237d8 <_malloc_r+0x260>
  823c54:	2109883a 	add	r4,r4,r4
  823c58:	3904703a 	and	r2,r7,r4
  823c5c:	63000104 	addi	r12,r12,4
  823c60:	103ffc26 	beq	r2,zero,823c54 <_malloc_r+0x6dc>
  823c64:	6013883a 	mov	r9,r12
  823c68:	003edb06 	br	8237d8 <_malloc_r+0x260>
  823c6c:	00805504 	movi	r2,340
  823c70:	11000836 	bltu	r2,r4,823c94 <_malloc_r+0x71c>
  823c74:	2804d3fa 	srli	r2,r5,15
  823c78:	11001dc4 	addi	r4,r2,119
  823c7c:	200690fa 	slli	r3,r4,3
  823c80:	003f7306 	br	823a50 <_malloc_r+0x4d8>
  823c84:	0104303a 	nor	r2,zero,r4
  823c88:	388e703a 	and	r7,r7,r2
  823c8c:	e1c00115 	stw	r7,4(fp)
  823c90:	003fe906 	br	823c38 <_malloc_r+0x6c0>
  823c94:	00815504 	movi	r2,1364
  823c98:	1100032e 	bgeu	r2,r4,823ca8 <_malloc_r+0x730>
  823c9c:	01001f84 	movi	r4,126
  823ca0:	00c0fc04 	movi	r3,1008
  823ca4:	003f6a06 	br	823a50 <_malloc_r+0x4d8>
  823ca8:	2804d4ba 	srli	r2,r5,18
  823cac:	11001f04 	addi	r4,r2,124
  823cb0:	200690fa 	slli	r3,r4,3
  823cb4:	003f6606 	br	823a50 <_malloc_r+0x4d8>

00823cb8 <printf>:
  823cb8:	defffb04 	addi	sp,sp,-20
  823cbc:	dfc00115 	stw	ra,4(sp)
  823cc0:	d9400215 	stw	r5,8(sp)
  823cc4:	d9800315 	stw	r6,12(sp)
  823cc8:	d9c00415 	stw	r7,16(sp)
  823ccc:	008020f4 	movhi	r2,131
  823cd0:	10967504 	addi	r2,r2,22996
  823cd4:	10c00017 	ldw	r3,0(r2)
  823cd8:	200b883a 	mov	r5,r4
  823cdc:	d8800204 	addi	r2,sp,8
  823ce0:	19000217 	ldw	r4,8(r3)
  823ce4:	100d883a 	mov	r6,r2
  823ce8:	d8800015 	stw	r2,0(sp)
  823cec:	0825df00 	call	825df0 <__vfprintf_internal>
  823cf0:	dfc00117 	ldw	ra,4(sp)
  823cf4:	dec00504 	addi	sp,sp,20
  823cf8:	f800283a 	ret

00823cfc <_printf_r>:
  823cfc:	defffc04 	addi	sp,sp,-16
  823d00:	dfc00115 	stw	ra,4(sp)
  823d04:	d9800215 	stw	r6,8(sp)
  823d08:	d9c00315 	stw	r7,12(sp)
  823d0c:	280d883a 	mov	r6,r5
  823d10:	21400217 	ldw	r5,8(r4)
  823d14:	d8c00204 	addi	r3,sp,8
  823d18:	180f883a 	mov	r7,r3
  823d1c:	d8c00015 	stw	r3,0(sp)
  823d20:	0823f440 	call	823f44 <___vfprintf_internal_r>
  823d24:	dfc00117 	ldw	ra,4(sp)
  823d28:	dec00404 	addi	sp,sp,16
  823d2c:	f800283a 	ret

00823d30 <putchar>:
  823d30:	008020f4 	movhi	r2,131
  823d34:	10967504 	addi	r2,r2,22996
  823d38:	11800017 	ldw	r6,0(r2)
  823d3c:	200b883a 	mov	r5,r4
  823d40:	3009883a 	mov	r4,r6
  823d44:	31800217 	ldw	r6,8(r6)
  823d48:	0829e681 	jmpi	829e68 <_putc_r>

00823d4c <_putchar_r>:
  823d4c:	21800217 	ldw	r6,8(r4)
  823d50:	0829e681 	jmpi	829e68 <_putc_r>

00823d54 <_puts_r>:
  823d54:	defff604 	addi	sp,sp,-40
  823d58:	dc400715 	stw	r17,28(sp)
  823d5c:	2023883a 	mov	r17,r4
  823d60:	2809883a 	mov	r4,r5
  823d64:	dfc00915 	stw	ra,36(sp)
  823d68:	dcc00815 	stw	r19,32(sp)
  823d6c:	2827883a 	mov	r19,r5
  823d70:	0823e780 	call	823e78 <strlen>
  823d74:	89400217 	ldw	r5,8(r17)
  823d78:	00c020f4 	movhi	r3,131
  823d7c:	18cd8304 	addi	r3,r3,13836
  823d80:	01c00044 	movi	r7,1
  823d84:	12000044 	addi	r8,r2,1
  823d88:	d8c00515 	stw	r3,20(sp)
  823d8c:	d9c00615 	stw	r7,24(sp)
  823d90:	d8c00304 	addi	r3,sp,12
  823d94:	01c00084 	movi	r7,2
  823d98:	8809883a 	mov	r4,r17
  823d9c:	d80d883a 	mov	r6,sp
  823da0:	d8c00015 	stw	r3,0(sp)
  823da4:	dcc00315 	stw	r19,12(sp)
  823da8:	da000215 	stw	r8,8(sp)
  823dac:	d9c00115 	stw	r7,4(sp)
  823db0:	d8800415 	stw	r2,16(sp)
  823db4:	08282000 	call	828200 <__sfvwrite_r>
  823db8:	00ffffc4 	movi	r3,-1
  823dbc:	10000626 	beq	r2,zero,823dd8 <_puts_r+0x84>
  823dc0:	1805883a 	mov	r2,r3
  823dc4:	dfc00917 	ldw	ra,36(sp)
  823dc8:	dcc00817 	ldw	r19,32(sp)
  823dcc:	dc400717 	ldw	r17,28(sp)
  823dd0:	dec00a04 	addi	sp,sp,40
  823dd4:	f800283a 	ret
  823dd8:	00c00284 	movi	r3,10
  823ddc:	1805883a 	mov	r2,r3
  823de0:	dfc00917 	ldw	ra,36(sp)
  823de4:	dcc00817 	ldw	r19,32(sp)
  823de8:	dc400717 	ldw	r17,28(sp)
  823dec:	dec00a04 	addi	sp,sp,40
  823df0:	f800283a 	ret

00823df4 <puts>:
  823df4:	008020f4 	movhi	r2,131
  823df8:	10967504 	addi	r2,r2,22996
  823dfc:	200b883a 	mov	r5,r4
  823e00:	11000017 	ldw	r4,0(r2)
  823e04:	0823d541 	jmpi	823d54 <_puts_r>

00823e08 <_sbrk_r>:
  823e08:	defffd04 	addi	sp,sp,-12
  823e0c:	dc000015 	stw	r16,0(sp)
  823e10:	040020f4 	movhi	r16,131
  823e14:	841e3504 	addi	r16,r16,30932
  823e18:	dc400115 	stw	r17,4(sp)
  823e1c:	80000015 	stw	zero,0(r16)
  823e20:	2023883a 	mov	r17,r4
  823e24:	2809883a 	mov	r4,r5
  823e28:	dfc00215 	stw	ra,8(sp)
  823e2c:	082c9a00 	call	82c9a0 <sbrk>
  823e30:	1007883a 	mov	r3,r2
  823e34:	00bfffc4 	movi	r2,-1
  823e38:	18800626 	beq	r3,r2,823e54 <_sbrk_r+0x4c>
  823e3c:	1805883a 	mov	r2,r3
  823e40:	dfc00217 	ldw	ra,8(sp)
  823e44:	dc400117 	ldw	r17,4(sp)
  823e48:	dc000017 	ldw	r16,0(sp)
  823e4c:	dec00304 	addi	sp,sp,12
  823e50:	f800283a 	ret
  823e54:	80800017 	ldw	r2,0(r16)
  823e58:	103ff826 	beq	r2,zero,823e3c <_sbrk_r+0x34>
  823e5c:	88800015 	stw	r2,0(r17)
  823e60:	1805883a 	mov	r2,r3
  823e64:	dfc00217 	ldw	ra,8(sp)
  823e68:	dc400117 	ldw	r17,4(sp)
  823e6c:	dc000017 	ldw	r16,0(sp)
  823e70:	dec00304 	addi	sp,sp,12
  823e74:	f800283a 	ret

00823e78 <strlen>:
  823e78:	208000cc 	andi	r2,r4,3
  823e7c:	2011883a 	mov	r8,r4
  823e80:	1000161e 	bne	r2,zero,823edc <strlen+0x64>
  823e84:	20c00017 	ldw	r3,0(r4)
  823e88:	017fbff4 	movhi	r5,65279
  823e8c:	297fbfc4 	addi	r5,r5,-257
  823e90:	01e02074 	movhi	r7,32897
  823e94:	39e02004 	addi	r7,r7,-32640
  823e98:	1945883a 	add	r2,r3,r5
  823e9c:	11c4703a 	and	r2,r2,r7
  823ea0:	00c6303a 	nor	r3,zero,r3
  823ea4:	1886703a 	and	r3,r3,r2
  823ea8:	18000c1e 	bne	r3,zero,823edc <strlen+0x64>
  823eac:	280d883a 	mov	r6,r5
  823eb0:	380b883a 	mov	r5,r7
  823eb4:	21000104 	addi	r4,r4,4
  823eb8:	20800017 	ldw	r2,0(r4)
  823ebc:	1187883a 	add	r3,r2,r6
  823ec0:	1946703a 	and	r3,r3,r5
  823ec4:	0084303a 	nor	r2,zero,r2
  823ec8:	10c4703a 	and	r2,r2,r3
  823ecc:	103ff926 	beq	r2,zero,823eb4 <strlen+0x3c>
  823ed0:	20800007 	ldb	r2,0(r4)
  823ed4:	10000326 	beq	r2,zero,823ee4 <strlen+0x6c>
  823ed8:	21000044 	addi	r4,r4,1
  823edc:	20800007 	ldb	r2,0(r4)
  823ee0:	103ffd1e 	bne	r2,zero,823ed8 <strlen+0x60>
  823ee4:	2205c83a 	sub	r2,r4,r8
  823ee8:	f800283a 	ret

00823eec <__sprint_r>:
  823eec:	30800217 	ldw	r2,8(r6)
  823ef0:	defffe04 	addi	sp,sp,-8
  823ef4:	dc000015 	stw	r16,0(sp)
  823ef8:	dfc00115 	stw	ra,4(sp)
  823efc:	3021883a 	mov	r16,r6
  823f00:	0007883a 	mov	r3,zero
  823f04:	1000061e 	bne	r2,zero,823f20 <__sprint_r+0x34>
  823f08:	1805883a 	mov	r2,r3
  823f0c:	30000115 	stw	zero,4(r6)
  823f10:	dfc00117 	ldw	ra,4(sp)
  823f14:	dc000017 	ldw	r16,0(sp)
  823f18:	dec00204 	addi	sp,sp,8
  823f1c:	f800283a 	ret
  823f20:	08282000 	call	828200 <__sfvwrite_r>
  823f24:	1007883a 	mov	r3,r2
  823f28:	1805883a 	mov	r2,r3
  823f2c:	80000115 	stw	zero,4(r16)
  823f30:	80000215 	stw	zero,8(r16)
  823f34:	dfc00117 	ldw	ra,4(sp)
  823f38:	dc000017 	ldw	r16,0(sp)
  823f3c:	dec00204 	addi	sp,sp,8
  823f40:	f800283a 	ret

00823f44 <___vfprintf_internal_r>:
  823f44:	defea404 	addi	sp,sp,-1392
  823f48:	dd815815 	stw	r22,1376(sp)
  823f4c:	dc015215 	stw	r16,1352(sp)
  823f50:	d9c15115 	stw	r7,1348(sp)
  823f54:	dfc15b15 	stw	ra,1388(sp)
  823f58:	df015a15 	stw	fp,1384(sp)
  823f5c:	ddc15915 	stw	r23,1380(sp)
  823f60:	dd415715 	stw	r21,1372(sp)
  823f64:	dd015615 	stw	r20,1368(sp)
  823f68:	dcc15515 	stw	r19,1364(sp)
  823f6c:	dc815415 	stw	r18,1360(sp)
  823f70:	dc415315 	stw	r17,1356(sp)
  823f74:	282d883a 	mov	r22,r5
  823f78:	3021883a 	mov	r16,r6
  823f7c:	d9014f15 	stw	r4,1340(sp)
  823f80:	08288240 	call	828824 <_localeconv_r>
  823f84:	10800017 	ldw	r2,0(r2)
  823f88:	d9c15117 	ldw	r7,1348(sp)
  823f8c:	d8814915 	stw	r2,1316(sp)
  823f90:	d8814f17 	ldw	r2,1340(sp)
  823f94:	10000226 	beq	r2,zero,823fa0 <___vfprintf_internal_r+0x5c>
  823f98:	10800e17 	ldw	r2,56(r2)
  823f9c:	10020d26 	beq	r2,zero,8247d4 <___vfprintf_internal_r+0x890>
  823fa0:	b080030b 	ldhu	r2,12(r22)
  823fa4:	1080020c 	andi	r2,r2,8
  823fa8:	10020e26 	beq	r2,zero,8247e4 <___vfprintf_internal_r+0x8a0>
  823fac:	b0800417 	ldw	r2,16(r22)
  823fb0:	10020c26 	beq	r2,zero,8247e4 <___vfprintf_internal_r+0x8a0>
  823fb4:	b200030b 	ldhu	r8,12(r22)
  823fb8:	00800284 	movi	r2,10
  823fbc:	40c0068c 	andi	r3,r8,26
  823fc0:	18802f1e 	bne	r3,r2,824080 <___vfprintf_internal_r+0x13c>
  823fc4:	b080038f 	ldh	r2,14(r22)
  823fc8:	10002d16 	blt	r2,zero,824080 <___vfprintf_internal_r+0x13c>
  823fcc:	b240038b 	ldhu	r9,14(r22)
  823fd0:	b2800717 	ldw	r10,28(r22)
  823fd4:	b2c00917 	ldw	r11,36(r22)
  823fd8:	d9014f17 	ldw	r4,1340(sp)
  823fdc:	dc402904 	addi	r17,sp,164
  823fe0:	d8804004 	addi	r2,sp,256
  823fe4:	00c10004 	movi	r3,1024
  823fe8:	423fff4c 	andi	r8,r8,65533
  823fec:	800d883a 	mov	r6,r16
  823ff0:	880b883a 	mov	r5,r17
  823ff4:	da002c0d 	sth	r8,176(sp)
  823ff8:	da402c8d 	sth	r9,178(sp)
  823ffc:	da803015 	stw	r10,192(sp)
  824000:	dac03215 	stw	r11,200(sp)
  824004:	d8802d15 	stw	r2,180(sp)
  824008:	d8c02e15 	stw	r3,184(sp)
  82400c:	d8802915 	stw	r2,164(sp)
  824010:	d8c02b15 	stw	r3,172(sp)
  824014:	d8002f15 	stw	zero,188(sp)
  824018:	0823f440 	call	823f44 <___vfprintf_internal_r>
  82401c:	d8814b15 	stw	r2,1324(sp)
  824020:	10000416 	blt	r2,zero,824034 <___vfprintf_internal_r+0xf0>
  824024:	d9014f17 	ldw	r4,1340(sp)
  824028:	880b883a 	mov	r5,r17
  82402c:	08278d00 	call	8278d0 <_fflush_r>
  824030:	1002321e 	bne	r2,zero,8248fc <___vfprintf_internal_r+0x9b8>
  824034:	d8802c0b 	ldhu	r2,176(sp)
  824038:	1080100c 	andi	r2,r2,64
  82403c:	10000326 	beq	r2,zero,82404c <___vfprintf_internal_r+0x108>
  824040:	b080030b 	ldhu	r2,12(r22)
  824044:	10801014 	ori	r2,r2,64
  824048:	b080030d 	sth	r2,12(r22)
  82404c:	d8814b17 	ldw	r2,1324(sp)
  824050:	dfc15b17 	ldw	ra,1388(sp)
  824054:	df015a17 	ldw	fp,1384(sp)
  824058:	ddc15917 	ldw	r23,1380(sp)
  82405c:	dd815817 	ldw	r22,1376(sp)
  824060:	dd415717 	ldw	r21,1372(sp)
  824064:	dd015617 	ldw	r20,1368(sp)
  824068:	dcc15517 	ldw	r19,1364(sp)
  82406c:	dc815417 	ldw	r18,1360(sp)
  824070:	dc415317 	ldw	r17,1356(sp)
  824074:	dc015217 	ldw	r16,1352(sp)
  824078:	dec15c04 	addi	sp,sp,1392
  82407c:	f800283a 	ret
  824080:	0005883a 	mov	r2,zero
  824084:	0007883a 	mov	r3,zero
  824088:	dd401904 	addi	r21,sp,100
  82408c:	d8814215 	stw	r2,1288(sp)
  824090:	802f883a 	mov	r23,r16
  824094:	d8c14315 	stw	r3,1292(sp)
  824098:	d8014b15 	stw	zero,1324(sp)
  82409c:	d8014815 	stw	zero,1312(sp)
  8240a0:	d8014415 	stw	zero,1296(sp)
  8240a4:	d8014715 	stw	zero,1308(sp)
  8240a8:	dd400c15 	stw	r21,48(sp)
  8240ac:	d8000e15 	stw	zero,56(sp)
  8240b0:	d8000d15 	stw	zero,52(sp)
  8240b4:	b8800007 	ldb	r2,0(r23)
  8240b8:	10001926 	beq	r2,zero,824120 <___vfprintf_internal_r+0x1dc>
  8240bc:	00c00944 	movi	r3,37
  8240c0:	10c01726 	beq	r2,r3,824120 <___vfprintf_internal_r+0x1dc>
  8240c4:	b821883a 	mov	r16,r23
  8240c8:	00000106 	br	8240d0 <___vfprintf_internal_r+0x18c>
  8240cc:	10c00326 	beq	r2,r3,8240dc <___vfprintf_internal_r+0x198>
  8240d0:	84000044 	addi	r16,r16,1
  8240d4:	80800007 	ldb	r2,0(r16)
  8240d8:	103ffc1e 	bne	r2,zero,8240cc <___vfprintf_internal_r+0x188>
  8240dc:	85e7c83a 	sub	r19,r16,r23
  8240e0:	98000e26 	beq	r19,zero,82411c <___vfprintf_internal_r+0x1d8>
  8240e4:	dc800e17 	ldw	r18,56(sp)
  8240e8:	dc400d17 	ldw	r17,52(sp)
  8240ec:	008001c4 	movi	r2,7
  8240f0:	94e5883a 	add	r18,r18,r19
  8240f4:	8c400044 	addi	r17,r17,1
  8240f8:	adc00015 	stw	r23,0(r21)
  8240fc:	dc800e15 	stw	r18,56(sp)
  824100:	acc00115 	stw	r19,4(r21)
  824104:	dc400d15 	stw	r17,52(sp)
  824108:	14428b16 	blt	r2,r17,824b38 <___vfprintf_internal_r+0xbf4>
  82410c:	ad400204 	addi	r21,r21,8
  824110:	d9014b17 	ldw	r4,1324(sp)
  824114:	24c9883a 	add	r4,r4,r19
  824118:	d9014b15 	stw	r4,1324(sp)
  82411c:	802f883a 	mov	r23,r16
  824120:	b8800007 	ldb	r2,0(r23)
  824124:	10013c26 	beq	r2,zero,824618 <___vfprintf_internal_r+0x6d4>
  824128:	bdc00044 	addi	r23,r23,1
  82412c:	d8000405 	stb	zero,16(sp)
  824130:	b8c00007 	ldb	r3,0(r23)
  824134:	04ffffc4 	movi	r19,-1
  824138:	d8014c15 	stw	zero,1328(sp)
  82413c:	d8014a15 	stw	zero,1320(sp)
  824140:	d8c14d15 	stw	r3,1332(sp)
  824144:	bdc00044 	addi	r23,r23,1
  824148:	d9414d17 	ldw	r5,1332(sp)
  82414c:	00801604 	movi	r2,88
  824150:	28fff804 	addi	r3,r5,-32
  824154:	10c06036 	bltu	r2,r3,8242d8 <___vfprintf_internal_r+0x394>
  824158:	18c5883a 	add	r2,r3,r3
  82415c:	1085883a 	add	r2,r2,r2
  824160:	00c020b4 	movhi	r3,130
  824164:	18d05d04 	addi	r3,r3,16756
  824168:	10c5883a 	add	r2,r2,r3
  82416c:	11000017 	ldw	r4,0(r2)
  824170:	2000683a 	jmp	r4
  824174:	008250e8 	cmpgeui	r2,zero,2371
  824178:	008242d8 	cmpnei	r2,zero,2315
  82417c:	008242d8 	cmpnei	r2,zero,2315
  824180:	008250d4 	movui	r2,2371
  824184:	008242d8 	cmpnei	r2,zero,2315
  824188:	008242d8 	cmpnei	r2,zero,2315
  82418c:	008242d8 	cmpnei	r2,zero,2315
  824190:	008242d8 	cmpnei	r2,zero,2315
  824194:	008242d8 	cmpnei	r2,zero,2315
  824198:	008242d8 	cmpnei	r2,zero,2315
  82419c:	00824eb4 	movhi	r2,2362
  8241a0:	008250c4 	movi	r2,2371
  8241a4:	008242d8 	cmpnei	r2,zero,2315
  8241a8:	00824ecc 	andi	r2,zero,2363
  8241ac:	00825160 	cmpeqi	r2,zero,2373
  8241b0:	008242d8 	cmpnei	r2,zero,2315
  8241b4:	0082514c 	andi	r2,zero,2373
  8241b8:	00825114 	movui	r2,2372
  8241bc:	00825114 	movui	r2,2372
  8241c0:	00825114 	movui	r2,2372
  8241c4:	00825114 	movui	r2,2372
  8241c8:	00825114 	movui	r2,2372
  8241cc:	00825114 	movui	r2,2372
  8241d0:	00825114 	movui	r2,2372
  8241d4:	00825114 	movui	r2,2372
  8241d8:	00825114 	movui	r2,2372
  8241dc:	008242d8 	cmpnei	r2,zero,2315
  8241e0:	008242d8 	cmpnei	r2,zero,2315
  8241e4:	008242d8 	cmpnei	r2,zero,2315
  8241e8:	008242d8 	cmpnei	r2,zero,2315
  8241ec:	008242d8 	cmpnei	r2,zero,2315
  8241f0:	008242d8 	cmpnei	r2,zero,2315
  8241f4:	008242d8 	cmpnei	r2,zero,2315
  8241f8:	008242d8 	cmpnei	r2,zero,2315
  8241fc:	008242d8 	cmpnei	r2,zero,2315
  824200:	008242d8 	cmpnei	r2,zero,2315
  824204:	00824930 	cmpltui	r2,zero,2340
  824208:	00824f9c 	xori	r2,zero,2366
  82420c:	008242d8 	cmpnei	r2,zero,2315
  824210:	00824f9c 	xori	r2,zero,2366
  824214:	008242d8 	cmpnei	r2,zero,2315
  824218:	008242d8 	cmpnei	r2,zero,2315
  82421c:	008242d8 	cmpnei	r2,zero,2315
  824220:	008242d8 	cmpnei	r2,zero,2315
  824224:	00825100 	call	82510 <__alt_mem_sdram_0-0x77daf0>
  824228:	008242d8 	cmpnei	r2,zero,2315
  82422c:	008242d8 	cmpnei	r2,zero,2315
  824230:	008249e4 	muli	r2,zero,2343
  824234:	008242d8 	cmpnei	r2,zero,2315
  824238:	008242d8 	cmpnei	r2,zero,2315
  82423c:	008242d8 	cmpnei	r2,zero,2315
  824240:	008242d8 	cmpnei	r2,zero,2315
  824244:	008242d8 	cmpnei	r2,zero,2315
  824248:	00824a30 	cmpltui	r2,zero,2344
  82424c:	008242d8 	cmpnei	r2,zero,2315
  824250:	008242d8 	cmpnei	r2,zero,2315
  824254:	00825050 	cmplti	r2,zero,2369
  824258:	008242d8 	cmpnei	r2,zero,2315
  82425c:	008242d8 	cmpnei	r2,zero,2315
  824260:	008242d8 	cmpnei	r2,zero,2315
  824264:	008242d8 	cmpnei	r2,zero,2315
  824268:	008242d8 	cmpnei	r2,zero,2315
  82426c:	008242d8 	cmpnei	r2,zero,2315
  824270:	008242d8 	cmpnei	r2,zero,2315
  824274:	008242d8 	cmpnei	r2,zero,2315
  824278:	008242d8 	cmpnei	r2,zero,2315
  82427c:	008242d8 	cmpnei	r2,zero,2315
  824280:	00825024 	muli	r2,zero,2368
  824284:	0082493c 	xorhi	r2,zero,2340
  824288:	00824f9c 	xori	r2,zero,2366
  82428c:	00824f9c 	xori	r2,zero,2366
  824290:	00824f9c 	xori	r2,zero,2366
  824294:	00824f88 	cmpgei	r2,zero,2366
  824298:	0082493c 	xorhi	r2,zero,2340
  82429c:	008242d8 	cmpnei	r2,zero,2315
  8242a0:	008242d8 	cmpnei	r2,zero,2315
  8242a4:	00824f10 	cmplti	r2,zero,2364
  8242a8:	008242d8 	cmpnei	r2,zero,2315
  8242ac:	00824ee0 	cmpeqi	r2,zero,2363
  8242b0:	008249f0 	cmpltui	r2,zero,2343
  8242b4:	00824f40 	call	824f4 <__alt_mem_sdram_0-0x77db0c>
  8242b8:	00824f2c 	andhi	r2,zero,2364
  8242bc:	008242d8 	cmpnei	r2,zero,2315
  8242c0:	008251bc 	xorhi	r2,zero,2374
  8242c4:	008242d8 	cmpnei	r2,zero,2315
  8242c8:	00824a3c 	xorhi	r2,zero,2344
  8242cc:	008242d8 	cmpnei	r2,zero,2315
  8242d0:	008242d8 	cmpnei	r2,zero,2315
  8242d4:	008250b4 	movhi	r2,2370
  8242d8:	d9014d17 	ldw	r4,1332(sp)
  8242dc:	2000ce26 	beq	r4,zero,824618 <___vfprintf_internal_r+0x6d4>
  8242e0:	01400044 	movi	r5,1
  8242e4:	d9800f04 	addi	r6,sp,60
  8242e8:	d9c14015 	stw	r7,1280(sp)
  8242ec:	d9414515 	stw	r5,1300(sp)
  8242f0:	d9814115 	stw	r6,1284(sp)
  8242f4:	280f883a 	mov	r7,r5
  8242f8:	d9000f05 	stb	r4,60(sp)
  8242fc:	d8000405 	stb	zero,16(sp)
  824300:	d8014615 	stw	zero,1304(sp)
  824304:	d8c14c17 	ldw	r3,1328(sp)
  824308:	1880008c 	andi	r2,r3,2
  82430c:	1005003a 	cmpeq	r2,r2,zero
  824310:	d8815015 	stw	r2,1344(sp)
  824314:	1000031e 	bne	r2,zero,824324 <___vfprintf_internal_r+0x3e0>
  824318:	d9014517 	ldw	r4,1300(sp)
  82431c:	21000084 	addi	r4,r4,2
  824320:	d9014515 	stw	r4,1300(sp)
  824324:	d9414c17 	ldw	r5,1328(sp)
  824328:	2940210c 	andi	r5,r5,132
  82432c:	d9414e15 	stw	r5,1336(sp)
  824330:	28002d1e 	bne	r5,zero,8243e8 <___vfprintf_internal_r+0x4a4>
  824334:	d9814a17 	ldw	r6,1320(sp)
  824338:	d8814517 	ldw	r2,1300(sp)
  82433c:	30a1c83a 	sub	r16,r6,r2
  824340:	0400290e 	bge	zero,r16,8243e8 <___vfprintf_internal_r+0x4a4>
  824344:	00800404 	movi	r2,16
  824348:	1404580e 	bge	r2,r16,8254ac <___vfprintf_internal_r+0x1568>
  82434c:	dc800e17 	ldw	r18,56(sp)
  824350:	dc400d17 	ldw	r17,52(sp)
  824354:	1027883a 	mov	r19,r2
  824358:	070020f4 	movhi	fp,131
  82435c:	e70e6184 	addi	fp,fp,14726
  824360:	050001c4 	movi	r20,7
  824364:	00000306 	br	824374 <___vfprintf_internal_r+0x430>
  824368:	843ffc04 	addi	r16,r16,-16
  82436c:	ad400204 	addi	r21,r21,8
  824370:	9c00130e 	bge	r19,r16,8243c0 <___vfprintf_internal_r+0x47c>
  824374:	94800404 	addi	r18,r18,16
  824378:	8c400044 	addi	r17,r17,1
  82437c:	af000015 	stw	fp,0(r21)
  824380:	acc00115 	stw	r19,4(r21)
  824384:	dc800e15 	stw	r18,56(sp)
  824388:	dc400d15 	stw	r17,52(sp)
  82438c:	a47ff60e 	bge	r20,r17,824368 <___vfprintf_internal_r+0x424>
  824390:	d9014f17 	ldw	r4,1340(sp)
  824394:	b00b883a 	mov	r5,r22
  824398:	d9800c04 	addi	r6,sp,48
  82439c:	d9c15115 	stw	r7,1348(sp)
  8243a0:	0823eec0 	call	823eec <__sprint_r>
  8243a4:	d9c15117 	ldw	r7,1348(sp)
  8243a8:	10009e1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8243ac:	843ffc04 	addi	r16,r16,-16
  8243b0:	dc800e17 	ldw	r18,56(sp)
  8243b4:	dc400d17 	ldw	r17,52(sp)
  8243b8:	dd401904 	addi	r21,sp,100
  8243bc:	9c3fed16 	blt	r19,r16,824374 <___vfprintf_internal_r+0x430>
  8243c0:	9425883a 	add	r18,r18,r16
  8243c4:	8c400044 	addi	r17,r17,1
  8243c8:	008001c4 	movi	r2,7
  8243cc:	af000015 	stw	fp,0(r21)
  8243d0:	ac000115 	stw	r16,4(r21)
  8243d4:	dc800e15 	stw	r18,56(sp)
  8243d8:	dc400d15 	stw	r17,52(sp)
  8243dc:	1441f516 	blt	r2,r17,824bb4 <___vfprintf_internal_r+0xc70>
  8243e0:	ad400204 	addi	r21,r21,8
  8243e4:	00000206 	br	8243f0 <___vfprintf_internal_r+0x4ac>
  8243e8:	dc800e17 	ldw	r18,56(sp)
  8243ec:	dc400d17 	ldw	r17,52(sp)
  8243f0:	d8800407 	ldb	r2,16(sp)
  8243f4:	10000b26 	beq	r2,zero,824424 <___vfprintf_internal_r+0x4e0>
  8243f8:	00800044 	movi	r2,1
  8243fc:	94800044 	addi	r18,r18,1
  824400:	8c400044 	addi	r17,r17,1
  824404:	a8800115 	stw	r2,4(r21)
  824408:	d8c00404 	addi	r3,sp,16
  82440c:	008001c4 	movi	r2,7
  824410:	a8c00015 	stw	r3,0(r21)
  824414:	dc800e15 	stw	r18,56(sp)
  824418:	dc400d15 	stw	r17,52(sp)
  82441c:	1441da16 	blt	r2,r17,824b88 <___vfprintf_internal_r+0xc44>
  824420:	ad400204 	addi	r21,r21,8
  824424:	d9015017 	ldw	r4,1344(sp)
  824428:	20000b1e 	bne	r4,zero,824458 <___vfprintf_internal_r+0x514>
  82442c:	d8800444 	addi	r2,sp,17
  824430:	94800084 	addi	r18,r18,2
  824434:	8c400044 	addi	r17,r17,1
  824438:	a8800015 	stw	r2,0(r21)
  82443c:	00c00084 	movi	r3,2
  824440:	008001c4 	movi	r2,7
  824444:	a8c00115 	stw	r3,4(r21)
  824448:	dc800e15 	stw	r18,56(sp)
  82444c:	dc400d15 	stw	r17,52(sp)
  824450:	1441c216 	blt	r2,r17,824b5c <___vfprintf_internal_r+0xc18>
  824454:	ad400204 	addi	r21,r21,8
  824458:	d9414e17 	ldw	r5,1336(sp)
  82445c:	00802004 	movi	r2,128
  824460:	2880b126 	beq	r5,r2,824728 <___vfprintf_internal_r+0x7e4>
  824464:	d8c14617 	ldw	r3,1304(sp)
  824468:	19e1c83a 	sub	r16,r3,r7
  82446c:	0400260e 	bge	zero,r16,824508 <___vfprintf_internal_r+0x5c4>
  824470:	00800404 	movi	r2,16
  824474:	1403c90e 	bge	r2,r16,82539c <___vfprintf_internal_r+0x1458>
  824478:	1027883a 	mov	r19,r2
  82447c:	070020f4 	movhi	fp,131
  824480:	e70e5d84 	addi	fp,fp,14710
  824484:	050001c4 	movi	r20,7
  824488:	00000306 	br	824498 <___vfprintf_internal_r+0x554>
  82448c:	843ffc04 	addi	r16,r16,-16
  824490:	ad400204 	addi	r21,r21,8
  824494:	9c00130e 	bge	r19,r16,8244e4 <___vfprintf_internal_r+0x5a0>
  824498:	94800404 	addi	r18,r18,16
  82449c:	8c400044 	addi	r17,r17,1
  8244a0:	af000015 	stw	fp,0(r21)
  8244a4:	acc00115 	stw	r19,4(r21)
  8244a8:	dc800e15 	stw	r18,56(sp)
  8244ac:	dc400d15 	stw	r17,52(sp)
  8244b0:	a47ff60e 	bge	r20,r17,82448c <___vfprintf_internal_r+0x548>
  8244b4:	d9014f17 	ldw	r4,1340(sp)
  8244b8:	b00b883a 	mov	r5,r22
  8244bc:	d9800c04 	addi	r6,sp,48
  8244c0:	d9c15115 	stw	r7,1348(sp)
  8244c4:	0823eec0 	call	823eec <__sprint_r>
  8244c8:	d9c15117 	ldw	r7,1348(sp)
  8244cc:	1000551e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8244d0:	843ffc04 	addi	r16,r16,-16
  8244d4:	dc800e17 	ldw	r18,56(sp)
  8244d8:	dc400d17 	ldw	r17,52(sp)
  8244dc:	dd401904 	addi	r21,sp,100
  8244e0:	9c3fed16 	blt	r19,r16,824498 <___vfprintf_internal_r+0x554>
  8244e4:	9425883a 	add	r18,r18,r16
  8244e8:	8c400044 	addi	r17,r17,1
  8244ec:	008001c4 	movi	r2,7
  8244f0:	af000015 	stw	fp,0(r21)
  8244f4:	ac000115 	stw	r16,4(r21)
  8244f8:	dc800e15 	stw	r18,56(sp)
  8244fc:	dc400d15 	stw	r17,52(sp)
  824500:	14418216 	blt	r2,r17,824b0c <___vfprintf_internal_r+0xbc8>
  824504:	ad400204 	addi	r21,r21,8
  824508:	d9014c17 	ldw	r4,1328(sp)
  82450c:	2080400c 	andi	r2,r4,256
  824510:	10004a1e 	bne	r2,zero,82463c <___vfprintf_internal_r+0x6f8>
  824514:	d9414117 	ldw	r5,1284(sp)
  824518:	91e5883a 	add	r18,r18,r7
  82451c:	8c400044 	addi	r17,r17,1
  824520:	008001c4 	movi	r2,7
  824524:	a9400015 	stw	r5,0(r21)
  824528:	a9c00115 	stw	r7,4(r21)
  82452c:	dc800e15 	stw	r18,56(sp)
  824530:	dc400d15 	stw	r17,52(sp)
  824534:	14416716 	blt	r2,r17,824ad4 <___vfprintf_internal_r+0xb90>
  824538:	a8c00204 	addi	r3,r21,8
  82453c:	d9814c17 	ldw	r6,1328(sp)
  824540:	3080010c 	andi	r2,r6,4
  824544:	10002826 	beq	r2,zero,8245e8 <___vfprintf_internal_r+0x6a4>
  824548:	d8814a17 	ldw	r2,1320(sp)
  82454c:	d9014517 	ldw	r4,1300(sp)
  824550:	1121c83a 	sub	r16,r2,r4
  824554:	0400240e 	bge	zero,r16,8245e8 <___vfprintf_internal_r+0x6a4>
  824558:	00800404 	movi	r2,16
  82455c:	14044f0e 	bge	r2,r16,82569c <___vfprintf_internal_r+0x1758>
  824560:	dc400d17 	ldw	r17,52(sp)
  824564:	1027883a 	mov	r19,r2
  824568:	070020f4 	movhi	fp,131
  82456c:	e70e6184 	addi	fp,fp,14726
  824570:	050001c4 	movi	r20,7
  824574:	00000306 	br	824584 <___vfprintf_internal_r+0x640>
  824578:	843ffc04 	addi	r16,r16,-16
  82457c:	18c00204 	addi	r3,r3,8
  824580:	9c00110e 	bge	r19,r16,8245c8 <___vfprintf_internal_r+0x684>
  824584:	94800404 	addi	r18,r18,16
  824588:	8c400044 	addi	r17,r17,1
  82458c:	1f000015 	stw	fp,0(r3)
  824590:	1cc00115 	stw	r19,4(r3)
  824594:	dc800e15 	stw	r18,56(sp)
  824598:	dc400d15 	stw	r17,52(sp)
  82459c:	a47ff60e 	bge	r20,r17,824578 <___vfprintf_internal_r+0x634>
  8245a0:	d9014f17 	ldw	r4,1340(sp)
  8245a4:	b00b883a 	mov	r5,r22
  8245a8:	d9800c04 	addi	r6,sp,48
  8245ac:	0823eec0 	call	823eec <__sprint_r>
  8245b0:	10001c1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8245b4:	843ffc04 	addi	r16,r16,-16
  8245b8:	dc800e17 	ldw	r18,56(sp)
  8245bc:	dc400d17 	ldw	r17,52(sp)
  8245c0:	d8c01904 	addi	r3,sp,100
  8245c4:	9c3fef16 	blt	r19,r16,824584 <___vfprintf_internal_r+0x640>
  8245c8:	9425883a 	add	r18,r18,r16
  8245cc:	8c400044 	addi	r17,r17,1
  8245d0:	008001c4 	movi	r2,7
  8245d4:	1f000015 	stw	fp,0(r3)
  8245d8:	1c000115 	stw	r16,4(r3)
  8245dc:	dc800e15 	stw	r18,56(sp)
  8245e0:	dc400d15 	stw	r17,52(sp)
  8245e4:	1440cb16 	blt	r2,r17,824914 <___vfprintf_internal_r+0x9d0>
  8245e8:	d8814a17 	ldw	r2,1320(sp)
  8245ec:	d9414517 	ldw	r5,1300(sp)
  8245f0:	1140010e 	bge	r2,r5,8245f8 <___vfprintf_internal_r+0x6b4>
  8245f4:	2805883a 	mov	r2,r5
  8245f8:	d9814b17 	ldw	r6,1324(sp)
  8245fc:	308d883a 	add	r6,r6,r2
  824600:	d9814b15 	stw	r6,1324(sp)
  824604:	90013b1e 	bne	r18,zero,824af4 <___vfprintf_internal_r+0xbb0>
  824608:	d9c14017 	ldw	r7,1280(sp)
  82460c:	dd401904 	addi	r21,sp,100
  824610:	d8000d15 	stw	zero,52(sp)
  824614:	003ea706 	br	8240b4 <___vfprintf_internal_r+0x170>
  824618:	d8800e17 	ldw	r2,56(sp)
  82461c:	10053f1e 	bne	r2,zero,825b1c <___vfprintf_internal_r+0x1bd8>
  824620:	d8000d15 	stw	zero,52(sp)
  824624:	b080030b 	ldhu	r2,12(r22)
  824628:	1080100c 	andi	r2,r2,64
  82462c:	103e8726 	beq	r2,zero,82404c <___vfprintf_internal_r+0x108>
  824630:	00bfffc4 	movi	r2,-1
  824634:	d8814b15 	stw	r2,1324(sp)
  824638:	003e8406 	br	82404c <___vfprintf_internal_r+0x108>
  82463c:	d9814d17 	ldw	r6,1332(sp)
  824640:	00801944 	movi	r2,101
  824644:	11806e16 	blt	r2,r6,824800 <___vfprintf_internal_r+0x8bc>
  824648:	d9414717 	ldw	r5,1308(sp)
  82464c:	00c00044 	movi	r3,1
  824650:	1943430e 	bge	r3,r5,825360 <___vfprintf_internal_r+0x141c>
  824654:	d8814117 	ldw	r2,1284(sp)
  824658:	94800044 	addi	r18,r18,1
  82465c:	8c400044 	addi	r17,r17,1
  824660:	a8800015 	stw	r2,0(r21)
  824664:	008001c4 	movi	r2,7
  824668:	a8c00115 	stw	r3,4(r21)
  82466c:	dc800e15 	stw	r18,56(sp)
  824670:	dc400d15 	stw	r17,52(sp)
  824674:	1441ca16 	blt	r2,r17,824da0 <___vfprintf_internal_r+0xe5c>
  824678:	a8c00204 	addi	r3,r21,8
  82467c:	d9014917 	ldw	r4,1316(sp)
  824680:	00800044 	movi	r2,1
  824684:	94800044 	addi	r18,r18,1
  824688:	8c400044 	addi	r17,r17,1
  82468c:	18800115 	stw	r2,4(r3)
  824690:	008001c4 	movi	r2,7
  824694:	19000015 	stw	r4,0(r3)
  824698:	dc800e15 	stw	r18,56(sp)
  82469c:	dc400d15 	stw	r17,52(sp)
  8246a0:	1441b616 	blt	r2,r17,824d7c <___vfprintf_internal_r+0xe38>
  8246a4:	1cc00204 	addi	r19,r3,8
  8246a8:	d9014217 	ldw	r4,1288(sp)
  8246ac:	d9414317 	ldw	r5,1292(sp)
  8246b0:	000d883a 	mov	r6,zero
  8246b4:	000f883a 	mov	r7,zero
  8246b8:	082bc080 	call	82bc08 <__nedf2>
  8246bc:	10017426 	beq	r2,zero,824c90 <___vfprintf_internal_r+0xd4c>
  8246c0:	d9414717 	ldw	r5,1308(sp)
  8246c4:	d9814117 	ldw	r6,1284(sp)
  8246c8:	8c400044 	addi	r17,r17,1
  8246cc:	2c85883a 	add	r2,r5,r18
  8246d0:	14bfffc4 	addi	r18,r2,-1
  8246d4:	28bfffc4 	addi	r2,r5,-1
  8246d8:	30c00044 	addi	r3,r6,1
  8246dc:	98800115 	stw	r2,4(r19)
  8246e0:	008001c4 	movi	r2,7
  8246e4:	98c00015 	stw	r3,0(r19)
  8246e8:	dc800e15 	stw	r18,56(sp)
  8246ec:	dc400d15 	stw	r17,52(sp)
  8246f0:	14418e16 	blt	r2,r17,824d2c <___vfprintf_internal_r+0xde8>
  8246f4:	9cc00204 	addi	r19,r19,8
  8246f8:	d9414817 	ldw	r5,1312(sp)
  8246fc:	d8800804 	addi	r2,sp,32
  824700:	8c400044 	addi	r17,r17,1
  824704:	9165883a 	add	r18,r18,r5
  824708:	98800015 	stw	r2,0(r19)
  82470c:	008001c4 	movi	r2,7
  824710:	99400115 	stw	r5,4(r19)
  824714:	dc800e15 	stw	r18,56(sp)
  824718:	dc400d15 	stw	r17,52(sp)
  82471c:	1440ed16 	blt	r2,r17,824ad4 <___vfprintf_internal_r+0xb90>
  824720:	98c00204 	addi	r3,r19,8
  824724:	003f8506 	br	82453c <___vfprintf_internal_r+0x5f8>
  824728:	d9814a17 	ldw	r6,1320(sp)
  82472c:	d8814517 	ldw	r2,1300(sp)
  824730:	30a1c83a 	sub	r16,r6,r2
  824734:	043f4b0e 	bge	zero,r16,824464 <___vfprintf_internal_r+0x520>
  824738:	00800404 	movi	r2,16
  82473c:	1404340e 	bge	r2,r16,825810 <___vfprintf_internal_r+0x18cc>
  824740:	1027883a 	mov	r19,r2
  824744:	070020f4 	movhi	fp,131
  824748:	e70e5d84 	addi	fp,fp,14710
  82474c:	050001c4 	movi	r20,7
  824750:	00000306 	br	824760 <___vfprintf_internal_r+0x81c>
  824754:	843ffc04 	addi	r16,r16,-16
  824758:	ad400204 	addi	r21,r21,8
  82475c:	9c00130e 	bge	r19,r16,8247ac <___vfprintf_internal_r+0x868>
  824760:	94800404 	addi	r18,r18,16
  824764:	8c400044 	addi	r17,r17,1
  824768:	af000015 	stw	fp,0(r21)
  82476c:	acc00115 	stw	r19,4(r21)
  824770:	dc800e15 	stw	r18,56(sp)
  824774:	dc400d15 	stw	r17,52(sp)
  824778:	a47ff60e 	bge	r20,r17,824754 <___vfprintf_internal_r+0x810>
  82477c:	d9014f17 	ldw	r4,1340(sp)
  824780:	b00b883a 	mov	r5,r22
  824784:	d9800c04 	addi	r6,sp,48
  824788:	d9c15115 	stw	r7,1348(sp)
  82478c:	0823eec0 	call	823eec <__sprint_r>
  824790:	d9c15117 	ldw	r7,1348(sp)
  824794:	103fa31e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824798:	843ffc04 	addi	r16,r16,-16
  82479c:	dc800e17 	ldw	r18,56(sp)
  8247a0:	dc400d17 	ldw	r17,52(sp)
  8247a4:	dd401904 	addi	r21,sp,100
  8247a8:	9c3fed16 	blt	r19,r16,824760 <___vfprintf_internal_r+0x81c>
  8247ac:	9425883a 	add	r18,r18,r16
  8247b0:	8c400044 	addi	r17,r17,1
  8247b4:	008001c4 	movi	r2,7
  8247b8:	af000015 	stw	fp,0(r21)
  8247bc:	ac000115 	stw	r16,4(r21)
  8247c0:	dc800e15 	stw	r18,56(sp)
  8247c4:	dc400d15 	stw	r17,52(sp)
  8247c8:	14416116 	blt	r2,r17,824d50 <___vfprintf_internal_r+0xe0c>
  8247cc:	ad400204 	addi	r21,r21,8
  8247d0:	003f2406 	br	824464 <___vfprintf_internal_r+0x520>
  8247d4:	d9014f17 	ldw	r4,1340(sp)
  8247d8:	0827b680 	call	827b68 <__sinit>
  8247dc:	d9c15117 	ldw	r7,1348(sp)
  8247e0:	003def06 	br	823fa0 <___vfprintf_internal_r+0x5c>
  8247e4:	d9014f17 	ldw	r4,1340(sp)
  8247e8:	b00b883a 	mov	r5,r22
  8247ec:	d9c15115 	stw	r7,1348(sp)
  8247f0:	0825e140 	call	825e14 <__swsetup_r>
  8247f4:	d9c15117 	ldw	r7,1348(sp)
  8247f8:	103dee26 	beq	r2,zero,823fb4 <___vfprintf_internal_r+0x70>
  8247fc:	003f8c06 	br	824630 <___vfprintf_internal_r+0x6ec>
  824800:	d9014217 	ldw	r4,1288(sp)
  824804:	d9414317 	ldw	r5,1292(sp)
  824808:	000d883a 	mov	r6,zero
  82480c:	000f883a 	mov	r7,zero
  824810:	082bb800 	call	82bb80 <__eqdf2>
  824814:	1000f21e 	bne	r2,zero,824be0 <___vfprintf_internal_r+0xc9c>
  824818:	008020f4 	movhi	r2,131
  82481c:	108de004 	addi	r2,r2,14208
  824820:	94800044 	addi	r18,r18,1
  824824:	8c400044 	addi	r17,r17,1
  824828:	a8800015 	stw	r2,0(r21)
  82482c:	00c00044 	movi	r3,1
  824830:	008001c4 	movi	r2,7
  824834:	a8c00115 	stw	r3,4(r21)
  824838:	dc800e15 	stw	r18,56(sp)
  82483c:	dc400d15 	stw	r17,52(sp)
  824840:	1442fa16 	blt	r2,r17,82542c <___vfprintf_internal_r+0x14e8>
  824844:	a8c00204 	addi	r3,r21,8
  824848:	d8800517 	ldw	r2,20(sp)
  82484c:	d9014717 	ldw	r4,1308(sp)
  824850:	11015c0e 	bge	r2,r4,824dc4 <___vfprintf_internal_r+0xe80>
  824854:	dc400d17 	ldw	r17,52(sp)
  824858:	d9814917 	ldw	r6,1316(sp)
  82485c:	00800044 	movi	r2,1
  824860:	94800044 	addi	r18,r18,1
  824864:	8c400044 	addi	r17,r17,1
  824868:	18800115 	stw	r2,4(r3)
  82486c:	008001c4 	movi	r2,7
  824870:	19800015 	stw	r6,0(r3)
  824874:	dc800e15 	stw	r18,56(sp)
  824878:	dc400d15 	stw	r17,52(sp)
  82487c:	14431016 	blt	r2,r17,8254c0 <___vfprintf_internal_r+0x157c>
  824880:	18c00204 	addi	r3,r3,8
  824884:	d8814717 	ldw	r2,1308(sp)
  824888:	143fffc4 	addi	r16,r2,-1
  82488c:	043f2b0e 	bge	zero,r16,82453c <___vfprintf_internal_r+0x5f8>
  824890:	00800404 	movi	r2,16
  824894:	1402a20e 	bge	r2,r16,825320 <___vfprintf_internal_r+0x13dc>
  824898:	dc400d17 	ldw	r17,52(sp)
  82489c:	1027883a 	mov	r19,r2
  8248a0:	070020f4 	movhi	fp,131
  8248a4:	e70e5d84 	addi	fp,fp,14710
  8248a8:	050001c4 	movi	r20,7
  8248ac:	00000306 	br	8248bc <___vfprintf_internal_r+0x978>
  8248b0:	18c00204 	addi	r3,r3,8
  8248b4:	843ffc04 	addi	r16,r16,-16
  8248b8:	9c029c0e 	bge	r19,r16,82532c <___vfprintf_internal_r+0x13e8>
  8248bc:	94800404 	addi	r18,r18,16
  8248c0:	8c400044 	addi	r17,r17,1
  8248c4:	1f000015 	stw	fp,0(r3)
  8248c8:	1cc00115 	stw	r19,4(r3)
  8248cc:	dc800e15 	stw	r18,56(sp)
  8248d0:	dc400d15 	stw	r17,52(sp)
  8248d4:	a47ff60e 	bge	r20,r17,8248b0 <___vfprintf_internal_r+0x96c>
  8248d8:	d9014f17 	ldw	r4,1340(sp)
  8248dc:	b00b883a 	mov	r5,r22
  8248e0:	d9800c04 	addi	r6,sp,48
  8248e4:	0823eec0 	call	823eec <__sprint_r>
  8248e8:	103f4e1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8248ec:	dc800e17 	ldw	r18,56(sp)
  8248f0:	dc400d17 	ldw	r17,52(sp)
  8248f4:	d8c01904 	addi	r3,sp,100
  8248f8:	003fee06 	br	8248b4 <___vfprintf_internal_r+0x970>
  8248fc:	d8802c0b 	ldhu	r2,176(sp)
  824900:	00ffffc4 	movi	r3,-1
  824904:	d8c14b15 	stw	r3,1324(sp)
  824908:	1080100c 	andi	r2,r2,64
  82490c:	103dcc1e 	bne	r2,zero,824040 <___vfprintf_internal_r+0xfc>
  824910:	003dce06 	br	82404c <___vfprintf_internal_r+0x108>
  824914:	d9014f17 	ldw	r4,1340(sp)
  824918:	b00b883a 	mov	r5,r22
  82491c:	d9800c04 	addi	r6,sp,48
  824920:	0823eec0 	call	823eec <__sprint_r>
  824924:	103f3f1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824928:	dc800e17 	ldw	r18,56(sp)
  82492c:	003f2e06 	br	8245e8 <___vfprintf_internal_r+0x6a4>
  824930:	d9414c17 	ldw	r5,1328(sp)
  824934:	29400414 	ori	r5,r5,16
  824938:	d9414c15 	stw	r5,1328(sp)
  82493c:	d9814c17 	ldw	r6,1328(sp)
  824940:	3080080c 	andi	r2,r6,32
  824944:	10014f1e 	bne	r2,zero,824e84 <___vfprintf_internal_r+0xf40>
  824948:	d8c14c17 	ldw	r3,1328(sp)
  82494c:	1880040c 	andi	r2,r3,16
  824950:	1002ea1e 	bne	r2,zero,8254fc <___vfprintf_internal_r+0x15b8>
  824954:	d9014c17 	ldw	r4,1328(sp)
  824958:	2080100c 	andi	r2,r4,64
  82495c:	1002e726 	beq	r2,zero,8254fc <___vfprintf_internal_r+0x15b8>
  824960:	3880000f 	ldh	r2,0(r7)
  824964:	39c00104 	addi	r7,r7,4
  824968:	d9c14015 	stw	r7,1280(sp)
  82496c:	1023d7fa 	srai	r17,r2,31
  824970:	1021883a 	mov	r16,r2
  824974:	88037216 	blt	r17,zero,825740 <___vfprintf_internal_r+0x17fc>
  824978:	01000044 	movi	r4,1
  82497c:	98000416 	blt	r19,zero,824990 <___vfprintf_internal_r+0xa4c>
  824980:	d8c14c17 	ldw	r3,1328(sp)
  824984:	00bfdfc4 	movi	r2,-129
  824988:	1886703a 	and	r3,r3,r2
  82498c:	d8c14c15 	stw	r3,1328(sp)
  824990:	8444b03a 	or	r2,r16,r17
  824994:	1002261e 	bne	r2,zero,825230 <___vfprintf_internal_r+0x12ec>
  824998:	9802251e 	bne	r19,zero,825230 <___vfprintf_internal_r+0x12ec>
  82499c:	20803fcc 	andi	r2,r4,255
  8249a0:	10029b26 	beq	r2,zero,825410 <___vfprintf_internal_r+0x14cc>
  8249a4:	d8c01904 	addi	r3,sp,100
  8249a8:	dd000f04 	addi	r20,sp,60
  8249ac:	d8c14115 	stw	r3,1284(sp)
  8249b0:	d8c14117 	ldw	r3,1284(sp)
  8249b4:	dcc14515 	stw	r19,1300(sp)
  8249b8:	a0c5c83a 	sub	r2,r20,r3
  8249bc:	11c00a04 	addi	r7,r2,40
  8249c0:	99c0010e 	bge	r19,r7,8249c8 <___vfprintf_internal_r+0xa84>
  8249c4:	d9c14515 	stw	r7,1300(sp)
  8249c8:	dcc14615 	stw	r19,1304(sp)
  8249cc:	d8800407 	ldb	r2,16(sp)
  8249d0:	103e4c26 	beq	r2,zero,824304 <___vfprintf_internal_r+0x3c0>
  8249d4:	d8814517 	ldw	r2,1300(sp)
  8249d8:	10800044 	addi	r2,r2,1
  8249dc:	d8814515 	stw	r2,1300(sp)
  8249e0:	003e4806 	br	824304 <___vfprintf_internal_r+0x3c0>
  8249e4:	d9814c17 	ldw	r6,1328(sp)
  8249e8:	31800414 	ori	r6,r6,16
  8249ec:	d9814c15 	stw	r6,1328(sp)
  8249f0:	d8c14c17 	ldw	r3,1328(sp)
  8249f4:	1880080c 	andi	r2,r3,32
  8249f8:	1001271e 	bne	r2,zero,824e98 <___vfprintf_internal_r+0xf54>
  8249fc:	d9414c17 	ldw	r5,1328(sp)
  824a00:	2880040c 	andi	r2,r5,16
  824a04:	1002b61e 	bne	r2,zero,8254e0 <___vfprintf_internal_r+0x159c>
  824a08:	d9814c17 	ldw	r6,1328(sp)
  824a0c:	3080100c 	andi	r2,r6,64
  824a10:	1002b326 	beq	r2,zero,8254e0 <___vfprintf_internal_r+0x159c>
  824a14:	3c00000b 	ldhu	r16,0(r7)
  824a18:	0009883a 	mov	r4,zero
  824a1c:	39c00104 	addi	r7,r7,4
  824a20:	0023883a 	mov	r17,zero
  824a24:	d9c14015 	stw	r7,1280(sp)
  824a28:	d8000405 	stb	zero,16(sp)
  824a2c:	003fd306 	br	82497c <___vfprintf_internal_r+0xa38>
  824a30:	d9014c17 	ldw	r4,1328(sp)
  824a34:	21000414 	ori	r4,r4,16
  824a38:	d9014c15 	stw	r4,1328(sp)
  824a3c:	d9414c17 	ldw	r5,1328(sp)
  824a40:	2880080c 	andi	r2,r5,32
  824a44:	1001081e 	bne	r2,zero,824e68 <___vfprintf_internal_r+0xf24>
  824a48:	d8c14c17 	ldw	r3,1328(sp)
  824a4c:	1880040c 	andi	r2,r3,16
  824a50:	1002b01e 	bne	r2,zero,825514 <___vfprintf_internal_r+0x15d0>
  824a54:	d9014c17 	ldw	r4,1328(sp)
  824a58:	2080100c 	andi	r2,r4,64
  824a5c:	1002ad26 	beq	r2,zero,825514 <___vfprintf_internal_r+0x15d0>
  824a60:	3c00000b 	ldhu	r16,0(r7)
  824a64:	01000044 	movi	r4,1
  824a68:	39c00104 	addi	r7,r7,4
  824a6c:	0023883a 	mov	r17,zero
  824a70:	d9c14015 	stw	r7,1280(sp)
  824a74:	d8000405 	stb	zero,16(sp)
  824a78:	003fc006 	br	82497c <___vfprintf_internal_r+0xa38>
  824a7c:	d9014f17 	ldw	r4,1340(sp)
  824a80:	b00b883a 	mov	r5,r22
  824a84:	d9800c04 	addi	r6,sp,48
  824a88:	0823eec0 	call	823eec <__sprint_r>
  824a8c:	103ee51e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824a90:	dc800e17 	ldw	r18,56(sp)
  824a94:	d8c01904 	addi	r3,sp,100
  824a98:	d9814c17 	ldw	r6,1328(sp)
  824a9c:	3080004c 	andi	r2,r6,1
  824aa0:	1005003a 	cmpeq	r2,r2,zero
  824aa4:	103ea51e 	bne	r2,zero,82453c <___vfprintf_internal_r+0x5f8>
  824aa8:	00800044 	movi	r2,1
  824aac:	dc400d17 	ldw	r17,52(sp)
  824ab0:	18800115 	stw	r2,4(r3)
  824ab4:	d8814917 	ldw	r2,1316(sp)
  824ab8:	94800044 	addi	r18,r18,1
  824abc:	8c400044 	addi	r17,r17,1
  824ac0:	18800015 	stw	r2,0(r3)
  824ac4:	008001c4 	movi	r2,7
  824ac8:	dc800e15 	stw	r18,56(sp)
  824acc:	dc400d15 	stw	r17,52(sp)
  824ad0:	14421e0e 	bge	r2,r17,82534c <___vfprintf_internal_r+0x1408>
  824ad4:	d9014f17 	ldw	r4,1340(sp)
  824ad8:	b00b883a 	mov	r5,r22
  824adc:	d9800c04 	addi	r6,sp,48
  824ae0:	0823eec0 	call	823eec <__sprint_r>
  824ae4:	103ecf1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824ae8:	dc800e17 	ldw	r18,56(sp)
  824aec:	d8c01904 	addi	r3,sp,100
  824af0:	003e9206 	br	82453c <___vfprintf_internal_r+0x5f8>
  824af4:	d9014f17 	ldw	r4,1340(sp)
  824af8:	b00b883a 	mov	r5,r22
  824afc:	d9800c04 	addi	r6,sp,48
  824b00:	0823eec0 	call	823eec <__sprint_r>
  824b04:	103ec026 	beq	r2,zero,824608 <___vfprintf_internal_r+0x6c4>
  824b08:	003ec606 	br	824624 <___vfprintf_internal_r+0x6e0>
  824b0c:	d9014f17 	ldw	r4,1340(sp)
  824b10:	b00b883a 	mov	r5,r22
  824b14:	d9800c04 	addi	r6,sp,48
  824b18:	d9c15115 	stw	r7,1348(sp)
  824b1c:	0823eec0 	call	823eec <__sprint_r>
  824b20:	d9c15117 	ldw	r7,1348(sp)
  824b24:	103ebf1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824b28:	dc800e17 	ldw	r18,56(sp)
  824b2c:	dc400d17 	ldw	r17,52(sp)
  824b30:	dd401904 	addi	r21,sp,100
  824b34:	003e7406 	br	824508 <___vfprintf_internal_r+0x5c4>
  824b38:	d9014f17 	ldw	r4,1340(sp)
  824b3c:	b00b883a 	mov	r5,r22
  824b40:	d9800c04 	addi	r6,sp,48
  824b44:	d9c15115 	stw	r7,1348(sp)
  824b48:	0823eec0 	call	823eec <__sprint_r>
  824b4c:	d9c15117 	ldw	r7,1348(sp)
  824b50:	103eb41e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824b54:	dd401904 	addi	r21,sp,100
  824b58:	003d6d06 	br	824110 <___vfprintf_internal_r+0x1cc>
  824b5c:	d9014f17 	ldw	r4,1340(sp)
  824b60:	b00b883a 	mov	r5,r22
  824b64:	d9800c04 	addi	r6,sp,48
  824b68:	d9c15115 	stw	r7,1348(sp)
  824b6c:	0823eec0 	call	823eec <__sprint_r>
  824b70:	d9c15117 	ldw	r7,1348(sp)
  824b74:	103eab1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824b78:	dc800e17 	ldw	r18,56(sp)
  824b7c:	dc400d17 	ldw	r17,52(sp)
  824b80:	dd401904 	addi	r21,sp,100
  824b84:	003e3406 	br	824458 <___vfprintf_internal_r+0x514>
  824b88:	d9014f17 	ldw	r4,1340(sp)
  824b8c:	b00b883a 	mov	r5,r22
  824b90:	d9800c04 	addi	r6,sp,48
  824b94:	d9c15115 	stw	r7,1348(sp)
  824b98:	0823eec0 	call	823eec <__sprint_r>
  824b9c:	d9c15117 	ldw	r7,1348(sp)
  824ba0:	103ea01e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824ba4:	dc800e17 	ldw	r18,56(sp)
  824ba8:	dc400d17 	ldw	r17,52(sp)
  824bac:	dd401904 	addi	r21,sp,100
  824bb0:	003e1c06 	br	824424 <___vfprintf_internal_r+0x4e0>
  824bb4:	d9014f17 	ldw	r4,1340(sp)
  824bb8:	b00b883a 	mov	r5,r22
  824bbc:	d9800c04 	addi	r6,sp,48
  824bc0:	d9c15115 	stw	r7,1348(sp)
  824bc4:	0823eec0 	call	823eec <__sprint_r>
  824bc8:	d9c15117 	ldw	r7,1348(sp)
  824bcc:	103e951e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824bd0:	dc800e17 	ldw	r18,56(sp)
  824bd4:	dc400d17 	ldw	r17,52(sp)
  824bd8:	dd401904 	addi	r21,sp,100
  824bdc:	003e0406 	br	8243f0 <___vfprintf_internal_r+0x4ac>
  824be0:	d9000517 	ldw	r4,20(sp)
  824be4:	0102520e 	bge	zero,r4,825530 <___vfprintf_internal_r+0x15ec>
  824be8:	d9814717 	ldw	r6,1308(sp)
  824bec:	21807a16 	blt	r4,r6,824dd8 <___vfprintf_internal_r+0xe94>
  824bf0:	d8814117 	ldw	r2,1284(sp)
  824bf4:	91a5883a 	add	r18,r18,r6
  824bf8:	8c400044 	addi	r17,r17,1
  824bfc:	a8800015 	stw	r2,0(r21)
  824c00:	008001c4 	movi	r2,7
  824c04:	a9800115 	stw	r6,4(r21)
  824c08:	dc800e15 	stw	r18,56(sp)
  824c0c:	dc400d15 	stw	r17,52(sp)
  824c10:	1442f616 	blt	r2,r17,8257ec <___vfprintf_internal_r+0x18a8>
  824c14:	a8c00204 	addi	r3,r21,8
  824c18:	d9414717 	ldw	r5,1308(sp)
  824c1c:	2161c83a 	sub	r16,r4,r5
  824c20:	043f9d0e 	bge	zero,r16,824a98 <___vfprintf_internal_r+0xb54>
  824c24:	00800404 	movi	r2,16
  824c28:	1402130e 	bge	r2,r16,825478 <___vfprintf_internal_r+0x1534>
  824c2c:	dc400d17 	ldw	r17,52(sp)
  824c30:	1027883a 	mov	r19,r2
  824c34:	070020f4 	movhi	fp,131
  824c38:	e70e5d84 	addi	fp,fp,14710
  824c3c:	050001c4 	movi	r20,7
  824c40:	00000306 	br	824c50 <___vfprintf_internal_r+0xd0c>
  824c44:	18c00204 	addi	r3,r3,8
  824c48:	843ffc04 	addi	r16,r16,-16
  824c4c:	9c020d0e 	bge	r19,r16,825484 <___vfprintf_internal_r+0x1540>
  824c50:	94800404 	addi	r18,r18,16
  824c54:	8c400044 	addi	r17,r17,1
  824c58:	1f000015 	stw	fp,0(r3)
  824c5c:	1cc00115 	stw	r19,4(r3)
  824c60:	dc800e15 	stw	r18,56(sp)
  824c64:	dc400d15 	stw	r17,52(sp)
  824c68:	a47ff60e 	bge	r20,r17,824c44 <___vfprintf_internal_r+0xd00>
  824c6c:	d9014f17 	ldw	r4,1340(sp)
  824c70:	b00b883a 	mov	r5,r22
  824c74:	d9800c04 	addi	r6,sp,48
  824c78:	0823eec0 	call	823eec <__sprint_r>
  824c7c:	103e691e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824c80:	dc800e17 	ldw	r18,56(sp)
  824c84:	dc400d17 	ldw	r17,52(sp)
  824c88:	d8c01904 	addi	r3,sp,100
  824c8c:	003fee06 	br	824c48 <___vfprintf_internal_r+0xd04>
  824c90:	d8814717 	ldw	r2,1308(sp)
  824c94:	143fffc4 	addi	r16,r2,-1
  824c98:	043e970e 	bge	zero,r16,8246f8 <___vfprintf_internal_r+0x7b4>
  824c9c:	00800404 	movi	r2,16
  824ca0:	1400180e 	bge	r2,r16,824d04 <___vfprintf_internal_r+0xdc0>
  824ca4:	1029883a 	mov	r20,r2
  824ca8:	070020f4 	movhi	fp,131
  824cac:	e70e5d84 	addi	fp,fp,14710
  824cb0:	054001c4 	movi	r21,7
  824cb4:	00000306 	br	824cc4 <___vfprintf_internal_r+0xd80>
  824cb8:	9cc00204 	addi	r19,r19,8
  824cbc:	843ffc04 	addi	r16,r16,-16
  824cc0:	a400120e 	bge	r20,r16,824d0c <___vfprintf_internal_r+0xdc8>
  824cc4:	94800404 	addi	r18,r18,16
  824cc8:	8c400044 	addi	r17,r17,1
  824ccc:	9f000015 	stw	fp,0(r19)
  824cd0:	9d000115 	stw	r20,4(r19)
  824cd4:	dc800e15 	stw	r18,56(sp)
  824cd8:	dc400d15 	stw	r17,52(sp)
  824cdc:	ac7ff60e 	bge	r21,r17,824cb8 <___vfprintf_internal_r+0xd74>
  824ce0:	d9014f17 	ldw	r4,1340(sp)
  824ce4:	b00b883a 	mov	r5,r22
  824ce8:	d9800c04 	addi	r6,sp,48
  824cec:	0823eec0 	call	823eec <__sprint_r>
  824cf0:	103e4c1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824cf4:	dc800e17 	ldw	r18,56(sp)
  824cf8:	dc400d17 	ldw	r17,52(sp)
  824cfc:	dcc01904 	addi	r19,sp,100
  824d00:	003fee06 	br	824cbc <___vfprintf_internal_r+0xd78>
  824d04:	070020f4 	movhi	fp,131
  824d08:	e70e5d84 	addi	fp,fp,14710
  824d0c:	9425883a 	add	r18,r18,r16
  824d10:	8c400044 	addi	r17,r17,1
  824d14:	008001c4 	movi	r2,7
  824d18:	9f000015 	stw	fp,0(r19)
  824d1c:	9c000115 	stw	r16,4(r19)
  824d20:	dc800e15 	stw	r18,56(sp)
  824d24:	dc400d15 	stw	r17,52(sp)
  824d28:	147e720e 	bge	r2,r17,8246f4 <___vfprintf_internal_r+0x7b0>
  824d2c:	d9014f17 	ldw	r4,1340(sp)
  824d30:	b00b883a 	mov	r5,r22
  824d34:	d9800c04 	addi	r6,sp,48
  824d38:	0823eec0 	call	823eec <__sprint_r>
  824d3c:	103e391e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824d40:	dc800e17 	ldw	r18,56(sp)
  824d44:	dc400d17 	ldw	r17,52(sp)
  824d48:	dcc01904 	addi	r19,sp,100
  824d4c:	003e6a06 	br	8246f8 <___vfprintf_internal_r+0x7b4>
  824d50:	d9014f17 	ldw	r4,1340(sp)
  824d54:	b00b883a 	mov	r5,r22
  824d58:	d9800c04 	addi	r6,sp,48
  824d5c:	d9c15115 	stw	r7,1348(sp)
  824d60:	0823eec0 	call	823eec <__sprint_r>
  824d64:	d9c15117 	ldw	r7,1348(sp)
  824d68:	103e2e1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824d6c:	dc800e17 	ldw	r18,56(sp)
  824d70:	dc400d17 	ldw	r17,52(sp)
  824d74:	dd401904 	addi	r21,sp,100
  824d78:	003dba06 	br	824464 <___vfprintf_internal_r+0x520>
  824d7c:	d9014f17 	ldw	r4,1340(sp)
  824d80:	b00b883a 	mov	r5,r22
  824d84:	d9800c04 	addi	r6,sp,48
  824d88:	0823eec0 	call	823eec <__sprint_r>
  824d8c:	103e251e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824d90:	dc800e17 	ldw	r18,56(sp)
  824d94:	dc400d17 	ldw	r17,52(sp)
  824d98:	dcc01904 	addi	r19,sp,100
  824d9c:	003e4206 	br	8246a8 <___vfprintf_internal_r+0x764>
  824da0:	d9014f17 	ldw	r4,1340(sp)
  824da4:	b00b883a 	mov	r5,r22
  824da8:	d9800c04 	addi	r6,sp,48
  824dac:	0823eec0 	call	823eec <__sprint_r>
  824db0:	103e1c1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  824db4:	dc800e17 	ldw	r18,56(sp)
  824db8:	dc400d17 	ldw	r17,52(sp)
  824dbc:	d8c01904 	addi	r3,sp,100
  824dc0:	003e2e06 	br	82467c <___vfprintf_internal_r+0x738>
  824dc4:	d9414c17 	ldw	r5,1328(sp)
  824dc8:	2880004c 	andi	r2,r5,1
  824dcc:	1005003a 	cmpeq	r2,r2,zero
  824dd0:	103dda1e 	bne	r2,zero,82453c <___vfprintf_internal_r+0x5f8>
  824dd4:	003e9f06 	br	824854 <___vfprintf_internal_r+0x910>
  824dd8:	d8c14117 	ldw	r3,1284(sp)
  824ddc:	9125883a 	add	r18,r18,r4
  824de0:	8c400044 	addi	r17,r17,1
  824de4:	008001c4 	movi	r2,7
  824de8:	a8c00015 	stw	r3,0(r21)
  824dec:	a9000115 	stw	r4,4(r21)
  824df0:	dc800e15 	stw	r18,56(sp)
  824df4:	dc400d15 	stw	r17,52(sp)
  824df8:	14426616 	blt	r2,r17,825794 <___vfprintf_internal_r+0x1850>
  824dfc:	a8c00204 	addi	r3,r21,8
  824e00:	d9414917 	ldw	r5,1316(sp)
  824e04:	00800044 	movi	r2,1
  824e08:	94800044 	addi	r18,r18,1
  824e0c:	8c400044 	addi	r17,r17,1
  824e10:	18800115 	stw	r2,4(r3)
  824e14:	008001c4 	movi	r2,7
  824e18:	19400015 	stw	r5,0(r3)
  824e1c:	dc800e15 	stw	r18,56(sp)
  824e20:	dc400d15 	stw	r17,52(sp)
  824e24:	2021883a 	mov	r16,r4
  824e28:	14425016 	blt	r2,r17,82576c <___vfprintf_internal_r+0x1828>
  824e2c:	19400204 	addi	r5,r3,8
  824e30:	d9814717 	ldw	r6,1308(sp)
  824e34:	8c400044 	addi	r17,r17,1
  824e38:	dc400d15 	stw	r17,52(sp)
  824e3c:	3107c83a 	sub	r3,r6,r4
  824e40:	d9014117 	ldw	r4,1284(sp)
  824e44:	90e5883a 	add	r18,r18,r3
  824e48:	28c00115 	stw	r3,4(r5)
  824e4c:	8105883a 	add	r2,r16,r4
  824e50:	28800015 	stw	r2,0(r5)
  824e54:	008001c4 	movi	r2,7
  824e58:	dc800e15 	stw	r18,56(sp)
  824e5c:	147f1d16 	blt	r2,r17,824ad4 <___vfprintf_internal_r+0xb90>
  824e60:	28c00204 	addi	r3,r5,8
  824e64:	003db506 	br	82453c <___vfprintf_internal_r+0x5f8>
  824e68:	3c000017 	ldw	r16,0(r7)
  824e6c:	3c400117 	ldw	r17,4(r7)
  824e70:	39800204 	addi	r6,r7,8
  824e74:	01000044 	movi	r4,1
  824e78:	d9814015 	stw	r6,1280(sp)
  824e7c:	d8000405 	stb	zero,16(sp)
  824e80:	003ebe06 	br	82497c <___vfprintf_internal_r+0xa38>
  824e84:	3c000017 	ldw	r16,0(r7)
  824e88:	3c400117 	ldw	r17,4(r7)
  824e8c:	38800204 	addi	r2,r7,8
  824e90:	d8814015 	stw	r2,1280(sp)
  824e94:	003eb706 	br	824974 <___vfprintf_internal_r+0xa30>
  824e98:	3c000017 	ldw	r16,0(r7)
  824e9c:	3c400117 	ldw	r17,4(r7)
  824ea0:	39000204 	addi	r4,r7,8
  824ea4:	d9014015 	stw	r4,1280(sp)
  824ea8:	0009883a 	mov	r4,zero
  824eac:	d8000405 	stb	zero,16(sp)
  824eb0:	003eb206 	br	82497c <___vfprintf_internal_r+0xa38>
  824eb4:	38c00017 	ldw	r3,0(r7)
  824eb8:	39c00104 	addi	r7,r7,4
  824ebc:	d8c14a15 	stw	r3,1320(sp)
  824ec0:	1800d10e 	bge	r3,zero,825208 <___vfprintf_internal_r+0x12c4>
  824ec4:	00c7c83a 	sub	r3,zero,r3
  824ec8:	d8c14a15 	stw	r3,1320(sp)
  824ecc:	d9014c17 	ldw	r4,1328(sp)
  824ed0:	b8c00007 	ldb	r3,0(r23)
  824ed4:	21000114 	ori	r4,r4,4
  824ed8:	d9014c15 	stw	r4,1328(sp)
  824edc:	003c9806 	br	824140 <___vfprintf_internal_r+0x1fc>
  824ee0:	d9814c17 	ldw	r6,1328(sp)
  824ee4:	3080080c 	andi	r2,r6,32
  824ee8:	1001f026 	beq	r2,zero,8256ac <___vfprintf_internal_r+0x1768>
  824eec:	d9014b17 	ldw	r4,1324(sp)
  824ef0:	38800017 	ldw	r2,0(r7)
  824ef4:	39c00104 	addi	r7,r7,4
  824ef8:	d9c14015 	stw	r7,1280(sp)
  824efc:	2007d7fa 	srai	r3,r4,31
  824f00:	d9c14017 	ldw	r7,1280(sp)
  824f04:	11000015 	stw	r4,0(r2)
  824f08:	10c00115 	stw	r3,4(r2)
  824f0c:	003c6906 	br	8240b4 <___vfprintf_internal_r+0x170>
  824f10:	b8c00007 	ldb	r3,0(r23)
  824f14:	00801b04 	movi	r2,108
  824f18:	18824f26 	beq	r3,r2,825858 <___vfprintf_internal_r+0x1914>
  824f1c:	d9414c17 	ldw	r5,1328(sp)
  824f20:	29400414 	ori	r5,r5,16
  824f24:	d9414c15 	stw	r5,1328(sp)
  824f28:	003c8506 	br	824140 <___vfprintf_internal_r+0x1fc>
  824f2c:	d9814c17 	ldw	r6,1328(sp)
  824f30:	b8c00007 	ldb	r3,0(r23)
  824f34:	31800814 	ori	r6,r6,32
  824f38:	d9814c15 	stw	r6,1328(sp)
  824f3c:	003c8006 	br	824140 <___vfprintf_internal_r+0x1fc>
  824f40:	d8814c17 	ldw	r2,1328(sp)
  824f44:	3c000017 	ldw	r16,0(r7)
  824f48:	00c01e04 	movi	r3,120
  824f4c:	10800094 	ori	r2,r2,2
  824f50:	d8814c15 	stw	r2,1328(sp)
  824f54:	39c00104 	addi	r7,r7,4
  824f58:	014020f4 	movhi	r5,131
  824f5c:	294e4704 	addi	r5,r5,14620
  824f60:	00800c04 	movi	r2,48
  824f64:	0023883a 	mov	r17,zero
  824f68:	01000084 	movi	r4,2
  824f6c:	d9c14015 	stw	r7,1280(sp)
  824f70:	d8c14d15 	stw	r3,1332(sp)
  824f74:	d9414415 	stw	r5,1296(sp)
  824f78:	d8800445 	stb	r2,17(sp)
  824f7c:	d8c00485 	stb	r3,18(sp)
  824f80:	d8000405 	stb	zero,16(sp)
  824f84:	003e7d06 	br	82497c <___vfprintf_internal_r+0xa38>
  824f88:	d8814c17 	ldw	r2,1328(sp)
  824f8c:	b8c00007 	ldb	r3,0(r23)
  824f90:	10801014 	ori	r2,r2,64
  824f94:	d8814c15 	stw	r2,1328(sp)
  824f98:	003c6906 	br	824140 <___vfprintf_internal_r+0x1fc>
  824f9c:	d9414c17 	ldw	r5,1328(sp)
  824fa0:	2880020c 	andi	r2,r5,8
  824fa4:	1001df26 	beq	r2,zero,825724 <___vfprintf_internal_r+0x17e0>
  824fa8:	39800017 	ldw	r6,0(r7)
  824fac:	38800204 	addi	r2,r7,8
  824fb0:	d8814015 	stw	r2,1280(sp)
  824fb4:	d9814215 	stw	r6,1288(sp)
  824fb8:	39c00117 	ldw	r7,4(r7)
  824fbc:	d9c14315 	stw	r7,1292(sp)
  824fc0:	d9014217 	ldw	r4,1288(sp)
  824fc4:	d9414317 	ldw	r5,1292(sp)
  824fc8:	082a5440 	call	82a544 <__isinfd>
  824fcc:	10021726 	beq	r2,zero,82582c <___vfprintf_internal_r+0x18e8>
  824fd0:	d9014217 	ldw	r4,1288(sp)
  824fd4:	d9414317 	ldw	r5,1292(sp)
  824fd8:	000d883a 	mov	r6,zero
  824fdc:	000f883a 	mov	r7,zero
  824fe0:	082bd180 	call	82bd18 <__ltdf2>
  824fe4:	1002ca16 	blt	r2,zero,825b10 <___vfprintf_internal_r+0x1bcc>
  824fe8:	d9414d17 	ldw	r5,1332(sp)
  824fec:	008011c4 	movi	r2,71
  824ff0:	11420a16 	blt	r2,r5,82581c <___vfprintf_internal_r+0x18d8>
  824ff4:	018020f4 	movhi	r6,131
  824ff8:	318e4c04 	addi	r6,r6,14640
  824ffc:	d9814115 	stw	r6,1284(sp)
  825000:	d9014c17 	ldw	r4,1328(sp)
  825004:	00c000c4 	movi	r3,3
  825008:	00bfdfc4 	movi	r2,-129
  82500c:	2088703a 	and	r4,r4,r2
  825010:	180f883a 	mov	r7,r3
  825014:	d8c14515 	stw	r3,1300(sp)
  825018:	d9014c15 	stw	r4,1328(sp)
  82501c:	d8014615 	stw	zero,1304(sp)
  825020:	003e6a06 	br	8249cc <___vfprintf_internal_r+0xa88>
  825024:	38800017 	ldw	r2,0(r7)
  825028:	00c00044 	movi	r3,1
  82502c:	39c00104 	addi	r7,r7,4
  825030:	d9c14015 	stw	r7,1280(sp)
  825034:	d9000f04 	addi	r4,sp,60
  825038:	180f883a 	mov	r7,r3
  82503c:	d8c14515 	stw	r3,1300(sp)
  825040:	d9014115 	stw	r4,1284(sp)
  825044:	d8800f05 	stb	r2,60(sp)
  825048:	d8000405 	stb	zero,16(sp)
  82504c:	003cac06 	br	824300 <___vfprintf_internal_r+0x3bc>
  825050:	014020f4 	movhi	r5,131
  825054:	294e5204 	addi	r5,r5,14664
  825058:	d9414415 	stw	r5,1296(sp)
  82505c:	d9814c17 	ldw	r6,1328(sp)
  825060:	3080080c 	andi	r2,r6,32
  825064:	1000f926 	beq	r2,zero,82544c <___vfprintf_internal_r+0x1508>
  825068:	3c000017 	ldw	r16,0(r7)
  82506c:	3c400117 	ldw	r17,4(r7)
  825070:	38800204 	addi	r2,r7,8
  825074:	d8814015 	stw	r2,1280(sp)
  825078:	d9414c17 	ldw	r5,1328(sp)
  82507c:	2880004c 	andi	r2,r5,1
  825080:	1005003a 	cmpeq	r2,r2,zero
  825084:	1000b31e 	bne	r2,zero,825354 <___vfprintf_internal_r+0x1410>
  825088:	8444b03a 	or	r2,r16,r17
  82508c:	1000b126 	beq	r2,zero,825354 <___vfprintf_internal_r+0x1410>
  825090:	d9814d17 	ldw	r6,1332(sp)
  825094:	29400094 	ori	r5,r5,2
  825098:	00800c04 	movi	r2,48
  82509c:	01000084 	movi	r4,2
  8250a0:	d9414c15 	stw	r5,1328(sp)
  8250a4:	d8800445 	stb	r2,17(sp)
  8250a8:	d9800485 	stb	r6,18(sp)
  8250ac:	d8000405 	stb	zero,16(sp)
  8250b0:	003e3206 	br	82497c <___vfprintf_internal_r+0xa38>
  8250b4:	018020f4 	movhi	r6,131
  8250b8:	318e4704 	addi	r6,r6,14620
  8250bc:	d9814415 	stw	r6,1296(sp)
  8250c0:	003fe606 	br	82505c <___vfprintf_internal_r+0x1118>
  8250c4:	00800ac4 	movi	r2,43
  8250c8:	d8800405 	stb	r2,16(sp)
  8250cc:	b8c00007 	ldb	r3,0(r23)
  8250d0:	003c1b06 	br	824140 <___vfprintf_internal_r+0x1fc>
  8250d4:	d8814c17 	ldw	r2,1328(sp)
  8250d8:	b8c00007 	ldb	r3,0(r23)
  8250dc:	10800054 	ori	r2,r2,1
  8250e0:	d8814c15 	stw	r2,1328(sp)
  8250e4:	003c1606 	br	824140 <___vfprintf_internal_r+0x1fc>
  8250e8:	d8800407 	ldb	r2,16(sp)
  8250ec:	1000461e 	bne	r2,zero,825208 <___vfprintf_internal_r+0x12c4>
  8250f0:	00800804 	movi	r2,32
  8250f4:	d8800405 	stb	r2,16(sp)
  8250f8:	b8c00007 	ldb	r3,0(r23)
  8250fc:	003c1006 	br	824140 <___vfprintf_internal_r+0x1fc>
  825100:	d9814c17 	ldw	r6,1328(sp)
  825104:	b8c00007 	ldb	r3,0(r23)
  825108:	31800214 	ori	r6,r6,8
  82510c:	d9814c15 	stw	r6,1328(sp)
  825110:	003c0b06 	br	824140 <___vfprintf_internal_r+0x1fc>
  825114:	0007883a 	mov	r3,zero
  825118:	01000244 	movi	r4,9
  82511c:	188002a4 	muli	r2,r3,10
  825120:	b8c00007 	ldb	r3,0(r23)
  825124:	d9814d17 	ldw	r6,1332(sp)
  825128:	bdc00044 	addi	r23,r23,1
  82512c:	d8c14d15 	stw	r3,1332(sp)
  825130:	d9414d17 	ldw	r5,1332(sp)
  825134:	3085883a 	add	r2,r6,r2
  825138:	10fff404 	addi	r3,r2,-48
  82513c:	28bff404 	addi	r2,r5,-48
  825140:	20bff62e 	bgeu	r4,r2,82511c <___vfprintf_internal_r+0x11d8>
  825144:	d8c14a15 	stw	r3,1320(sp)
  825148:	003bff06 	br	824148 <___vfprintf_internal_r+0x204>
  82514c:	d9414c17 	ldw	r5,1328(sp)
  825150:	b8c00007 	ldb	r3,0(r23)
  825154:	29402014 	ori	r5,r5,128
  825158:	d9414c15 	stw	r5,1328(sp)
  82515c:	003bf806 	br	824140 <___vfprintf_internal_r+0x1fc>
  825160:	b8c00007 	ldb	r3,0(r23)
  825164:	00800a84 	movi	r2,42
  825168:	bdc00044 	addi	r23,r23,1
  82516c:	18831526 	beq	r3,r2,825dc4 <___vfprintf_internal_r+0x1e80>
  825170:	d8c14d15 	stw	r3,1332(sp)
  825174:	18bff404 	addi	r2,r3,-48
  825178:	00c00244 	movi	r3,9
  82517c:	18827836 	bltu	r3,r2,825b60 <___vfprintf_internal_r+0x1c1c>
  825180:	000d883a 	mov	r6,zero
  825184:	308002a4 	muli	r2,r6,10
  825188:	b9800007 	ldb	r6,0(r23)
  82518c:	d9414d17 	ldw	r5,1332(sp)
  825190:	bdc00044 	addi	r23,r23,1
  825194:	d9814d15 	stw	r6,1332(sp)
  825198:	d9014d17 	ldw	r4,1332(sp)
  82519c:	1145883a 	add	r2,r2,r5
  8251a0:	11bff404 	addi	r6,r2,-48
  8251a4:	20bff404 	addi	r2,r4,-48
  8251a8:	18bff62e 	bgeu	r3,r2,825184 <___vfprintf_internal_r+0x1240>
  8251ac:	3027883a 	mov	r19,r6
  8251b0:	303be50e 	bge	r6,zero,824148 <___vfprintf_internal_r+0x204>
  8251b4:	04ffffc4 	movi	r19,-1
  8251b8:	003be306 	br	824148 <___vfprintf_internal_r+0x204>
  8251bc:	d8000405 	stb	zero,16(sp)
  8251c0:	39800017 	ldw	r6,0(r7)
  8251c4:	39c00104 	addi	r7,r7,4
  8251c8:	d9c14015 	stw	r7,1280(sp)
  8251cc:	d9814115 	stw	r6,1284(sp)
  8251d0:	3001c926 	beq	r6,zero,8258f8 <___vfprintf_internal_r+0x19b4>
  8251d4:	98000e16 	blt	r19,zero,825210 <___vfprintf_internal_r+0x12cc>
  8251d8:	d9014117 	ldw	r4,1284(sp)
  8251dc:	000b883a 	mov	r5,zero
  8251e0:	980d883a 	mov	r6,r19
  8251e4:	0828a740 	call	828a74 <memchr>
  8251e8:	10025926 	beq	r2,zero,825b50 <___vfprintf_internal_r+0x1c0c>
  8251ec:	d8c14117 	ldw	r3,1284(sp)
  8251f0:	10cfc83a 	sub	r7,r2,r3
  8251f4:	99c19e16 	blt	r19,r7,825870 <___vfprintf_internal_r+0x192c>
  8251f8:	d9c14515 	stw	r7,1300(sp)
  8251fc:	38000916 	blt	r7,zero,825224 <___vfprintf_internal_r+0x12e0>
  825200:	d8014615 	stw	zero,1304(sp)
  825204:	003df106 	br	8249cc <___vfprintf_internal_r+0xa88>
  825208:	b8c00007 	ldb	r3,0(r23)
  82520c:	003bcc06 	br	824140 <___vfprintf_internal_r+0x1fc>
  825210:	d9014117 	ldw	r4,1284(sp)
  825214:	0823e780 	call	823e78 <strlen>
  825218:	d8814515 	stw	r2,1300(sp)
  82521c:	100f883a 	mov	r7,r2
  825220:	103ff70e 	bge	r2,zero,825200 <___vfprintf_internal_r+0x12bc>
  825224:	d8014515 	stw	zero,1300(sp)
  825228:	d8014615 	stw	zero,1304(sp)
  82522c:	003de706 	br	8249cc <___vfprintf_internal_r+0xa88>
  825230:	20c03fcc 	andi	r3,r4,255
  825234:	00800044 	movi	r2,1
  825238:	18802d26 	beq	r3,r2,8252f0 <___vfprintf_internal_r+0x13ac>
  82523c:	18800e36 	bltu	r3,r2,825278 <___vfprintf_internal_r+0x1334>
  825240:	00800084 	movi	r2,2
  825244:	1880fa26 	beq	r3,r2,825630 <___vfprintf_internal_r+0x16ec>
  825248:	010020f4 	movhi	r4,131
  82524c:	210e5704 	addi	r4,r4,14684
  825250:	0823e780 	call	823e78 <strlen>
  825254:	100f883a 	mov	r7,r2
  825258:	dcc14515 	stw	r19,1300(sp)
  82525c:	9880010e 	bge	r19,r2,825264 <___vfprintf_internal_r+0x1320>
  825260:	d8814515 	stw	r2,1300(sp)
  825264:	008020f4 	movhi	r2,131
  825268:	108e5704 	addi	r2,r2,14684
  82526c:	dcc14615 	stw	r19,1304(sp)
  825270:	d8814115 	stw	r2,1284(sp)
  825274:	003dd506 	br	8249cc <___vfprintf_internal_r+0xa88>
  825278:	d9401904 	addi	r5,sp,100
  82527c:	dd000f04 	addi	r20,sp,60
  825280:	d9414115 	stw	r5,1284(sp)
  825284:	880a977a 	slli	r5,r17,29
  825288:	d9814117 	ldw	r6,1284(sp)
  82528c:	8004d0fa 	srli	r2,r16,3
  825290:	8806d0fa 	srli	r3,r17,3
  825294:	810001cc 	andi	r4,r16,7
  825298:	2884b03a 	or	r2,r5,r2
  82529c:	31bfffc4 	addi	r6,r6,-1
  8252a0:	21000c04 	addi	r4,r4,48
  8252a4:	d9814115 	stw	r6,1284(sp)
  8252a8:	10cab03a 	or	r5,r2,r3
  8252ac:	31000005 	stb	r4,0(r6)
  8252b0:	1021883a 	mov	r16,r2
  8252b4:	1823883a 	mov	r17,r3
  8252b8:	283ff21e 	bne	r5,zero,825284 <___vfprintf_internal_r+0x1340>
  8252bc:	d8c14c17 	ldw	r3,1328(sp)
  8252c0:	1880004c 	andi	r2,r3,1
  8252c4:	1005003a 	cmpeq	r2,r2,zero
  8252c8:	103db91e 	bne	r2,zero,8249b0 <___vfprintf_internal_r+0xa6c>
  8252cc:	20803fcc 	andi	r2,r4,255
  8252d0:	1080201c 	xori	r2,r2,128
  8252d4:	10bfe004 	addi	r2,r2,-128
  8252d8:	00c00c04 	movi	r3,48
  8252dc:	10fdb426 	beq	r2,r3,8249b0 <___vfprintf_internal_r+0xa6c>
  8252e0:	31bfffc4 	addi	r6,r6,-1
  8252e4:	d9814115 	stw	r6,1284(sp)
  8252e8:	30c00005 	stb	r3,0(r6)
  8252ec:	003db006 	br	8249b0 <___vfprintf_internal_r+0xa6c>
  8252f0:	88800068 	cmpgeui	r2,r17,1
  8252f4:	10002c1e 	bne	r2,zero,8253a8 <___vfprintf_internal_r+0x1464>
  8252f8:	8800021e 	bne	r17,zero,825304 <___vfprintf_internal_r+0x13c0>
  8252fc:	00800244 	movi	r2,9
  825300:	14002936 	bltu	r2,r16,8253a8 <___vfprintf_internal_r+0x1464>
  825304:	d90018c4 	addi	r4,sp,99
  825308:	dd000f04 	addi	r20,sp,60
  82530c:	d9014115 	stw	r4,1284(sp)
  825310:	d9014117 	ldw	r4,1284(sp)
  825314:	80800c04 	addi	r2,r16,48
  825318:	20800005 	stb	r2,0(r4)
  82531c:	003da406 	br	8249b0 <___vfprintf_internal_r+0xa6c>
  825320:	dc400d17 	ldw	r17,52(sp)
  825324:	070020f4 	movhi	fp,131
  825328:	e70e5d84 	addi	fp,fp,14710
  82532c:	9425883a 	add	r18,r18,r16
  825330:	8c400044 	addi	r17,r17,1
  825334:	008001c4 	movi	r2,7
  825338:	1f000015 	stw	fp,0(r3)
  82533c:	1c000115 	stw	r16,4(r3)
  825340:	dc800e15 	stw	r18,56(sp)
  825344:	dc400d15 	stw	r17,52(sp)
  825348:	147de216 	blt	r2,r17,824ad4 <___vfprintf_internal_r+0xb90>
  82534c:	18c00204 	addi	r3,r3,8
  825350:	003c7a06 	br	82453c <___vfprintf_internal_r+0x5f8>
  825354:	01000084 	movi	r4,2
  825358:	d8000405 	stb	zero,16(sp)
  82535c:	003d8706 	br	82497c <___vfprintf_internal_r+0xa38>
  825360:	d9814c17 	ldw	r6,1328(sp)
  825364:	30c4703a 	and	r2,r6,r3
  825368:	1005003a 	cmpeq	r2,r2,zero
  82536c:	103cb926 	beq	r2,zero,824654 <___vfprintf_internal_r+0x710>
  825370:	d9014117 	ldw	r4,1284(sp)
  825374:	94800044 	addi	r18,r18,1
  825378:	8c400044 	addi	r17,r17,1
  82537c:	008001c4 	movi	r2,7
  825380:	a9000015 	stw	r4,0(r21)
  825384:	a8c00115 	stw	r3,4(r21)
  825388:	dc800e15 	stw	r18,56(sp)
  82538c:	dc400d15 	stw	r17,52(sp)
  825390:	147e6616 	blt	r2,r17,824d2c <___vfprintf_internal_r+0xde8>
  825394:	acc00204 	addi	r19,r21,8
  825398:	003cd706 	br	8246f8 <___vfprintf_internal_r+0x7b4>
  82539c:	070020f4 	movhi	fp,131
  8253a0:	e70e5d84 	addi	fp,fp,14710
  8253a4:	003c4f06 	br	8244e4 <___vfprintf_internal_r+0x5a0>
  8253a8:	dd000f04 	addi	r20,sp,60
  8253ac:	dc801904 	addi	r18,sp,100
  8253b0:	8009883a 	mov	r4,r16
  8253b4:	880b883a 	mov	r5,r17
  8253b8:	01800284 	movi	r6,10
  8253bc:	000f883a 	mov	r7,zero
  8253c0:	082b3780 	call	82b378 <__umoddi3>
  8253c4:	12000c04 	addi	r8,r2,48
  8253c8:	94bfffc4 	addi	r18,r18,-1
  8253cc:	8009883a 	mov	r4,r16
  8253d0:	880b883a 	mov	r5,r17
  8253d4:	01800284 	movi	r6,10
  8253d8:	000f883a 	mov	r7,zero
  8253dc:	92000005 	stb	r8,0(r18)
  8253e0:	082ad9c0 	call	82ad9c <__udivdi3>
  8253e4:	1009883a 	mov	r4,r2
  8253e8:	1021883a 	mov	r16,r2
  8253ec:	18800068 	cmpgeui	r2,r3,1
  8253f0:	1823883a 	mov	r17,r3
  8253f4:	103fee1e 	bne	r2,zero,8253b0 <___vfprintf_internal_r+0x146c>
  8253f8:	1800021e 	bne	r3,zero,825404 <___vfprintf_internal_r+0x14c0>
  8253fc:	00800244 	movi	r2,9
  825400:	113feb36 	bltu	r2,r4,8253b0 <___vfprintf_internal_r+0x146c>
  825404:	94bfffc4 	addi	r18,r18,-1
  825408:	dc814115 	stw	r18,1284(sp)
  82540c:	003fc006 	br	825310 <___vfprintf_internal_r+0x13cc>
  825410:	d9014c17 	ldw	r4,1328(sp)
  825414:	2080004c 	andi	r2,r4,1
  825418:	10009a1e 	bne	r2,zero,825684 <___vfprintf_internal_r+0x1740>
  82541c:	d9401904 	addi	r5,sp,100
  825420:	dd000f04 	addi	r20,sp,60
  825424:	d9414115 	stw	r5,1284(sp)
  825428:	003d6106 	br	8249b0 <___vfprintf_internal_r+0xa6c>
  82542c:	d9014f17 	ldw	r4,1340(sp)
  825430:	b00b883a 	mov	r5,r22
  825434:	d9800c04 	addi	r6,sp,48
  825438:	0823eec0 	call	823eec <__sprint_r>
  82543c:	103c791e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  825440:	dc800e17 	ldw	r18,56(sp)
  825444:	d8c01904 	addi	r3,sp,100
  825448:	003cff06 	br	824848 <___vfprintf_internal_r+0x904>
  82544c:	d8c14c17 	ldw	r3,1328(sp)
  825450:	1880040c 	andi	r2,r3,16
  825454:	1000711e 	bne	r2,zero,82561c <___vfprintf_internal_r+0x16d8>
  825458:	d9014c17 	ldw	r4,1328(sp)
  82545c:	2080100c 	andi	r2,r4,64
  825460:	10006e26 	beq	r2,zero,82561c <___vfprintf_internal_r+0x16d8>
  825464:	3c00000b 	ldhu	r16,0(r7)
  825468:	0023883a 	mov	r17,zero
  82546c:	39c00104 	addi	r7,r7,4
  825470:	d9c14015 	stw	r7,1280(sp)
  825474:	003f0006 	br	825078 <___vfprintf_internal_r+0x1134>
  825478:	dc400d17 	ldw	r17,52(sp)
  82547c:	070020f4 	movhi	fp,131
  825480:	e70e5d84 	addi	fp,fp,14710
  825484:	9425883a 	add	r18,r18,r16
  825488:	8c400044 	addi	r17,r17,1
  82548c:	008001c4 	movi	r2,7
  825490:	1f000015 	stw	fp,0(r3)
  825494:	1c000115 	stw	r16,4(r3)
  825498:	dc800e15 	stw	r18,56(sp)
  82549c:	dc400d15 	stw	r17,52(sp)
  8254a0:	147d7616 	blt	r2,r17,824a7c <___vfprintf_internal_r+0xb38>
  8254a4:	18c00204 	addi	r3,r3,8
  8254a8:	003d7b06 	br	824a98 <___vfprintf_internal_r+0xb54>
  8254ac:	dc800e17 	ldw	r18,56(sp)
  8254b0:	dc400d17 	ldw	r17,52(sp)
  8254b4:	070020f4 	movhi	fp,131
  8254b8:	e70e6184 	addi	fp,fp,14726
  8254bc:	003bc006 	br	8243c0 <___vfprintf_internal_r+0x47c>
  8254c0:	d9014f17 	ldw	r4,1340(sp)
  8254c4:	b00b883a 	mov	r5,r22
  8254c8:	d9800c04 	addi	r6,sp,48
  8254cc:	0823eec0 	call	823eec <__sprint_r>
  8254d0:	103c541e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8254d4:	dc800e17 	ldw	r18,56(sp)
  8254d8:	d8c01904 	addi	r3,sp,100
  8254dc:	003ce906 	br	824884 <___vfprintf_internal_r+0x940>
  8254e0:	3c000017 	ldw	r16,0(r7)
  8254e4:	0009883a 	mov	r4,zero
  8254e8:	39c00104 	addi	r7,r7,4
  8254ec:	0023883a 	mov	r17,zero
  8254f0:	d9c14015 	stw	r7,1280(sp)
  8254f4:	d8000405 	stb	zero,16(sp)
  8254f8:	003d2006 	br	82497c <___vfprintf_internal_r+0xa38>
  8254fc:	38800017 	ldw	r2,0(r7)
  825500:	39c00104 	addi	r7,r7,4
  825504:	d9c14015 	stw	r7,1280(sp)
  825508:	1023d7fa 	srai	r17,r2,31
  82550c:	1021883a 	mov	r16,r2
  825510:	003d1806 	br	824974 <___vfprintf_internal_r+0xa30>
  825514:	3c000017 	ldw	r16,0(r7)
  825518:	01000044 	movi	r4,1
  82551c:	39c00104 	addi	r7,r7,4
  825520:	0023883a 	mov	r17,zero
  825524:	d9c14015 	stw	r7,1280(sp)
  825528:	d8000405 	stb	zero,16(sp)
  82552c:	003d1306 	br	82497c <___vfprintf_internal_r+0xa38>
  825530:	008020f4 	movhi	r2,131
  825534:	108de004 	addi	r2,r2,14208
  825538:	94800044 	addi	r18,r18,1
  82553c:	8c400044 	addi	r17,r17,1
  825540:	a8800015 	stw	r2,0(r21)
  825544:	00c00044 	movi	r3,1
  825548:	008001c4 	movi	r2,7
  82554c:	a8c00115 	stw	r3,4(r21)
  825550:	dc800e15 	stw	r18,56(sp)
  825554:	dc400d15 	stw	r17,52(sp)
  825558:	1440ca16 	blt	r2,r17,825884 <___vfprintf_internal_r+0x1940>
  82555c:	a8c00204 	addi	r3,r21,8
  825560:	2000061e 	bne	r4,zero,82557c <___vfprintf_internal_r+0x1638>
  825564:	d9414717 	ldw	r5,1308(sp)
  825568:	2800041e 	bne	r5,zero,82557c <___vfprintf_internal_r+0x1638>
  82556c:	d9814c17 	ldw	r6,1328(sp)
  825570:	3080004c 	andi	r2,r6,1
  825574:	1005003a 	cmpeq	r2,r2,zero
  825578:	103bf01e 	bne	r2,zero,82453c <___vfprintf_internal_r+0x5f8>
  82557c:	00800044 	movi	r2,1
  825580:	dc400d17 	ldw	r17,52(sp)
  825584:	18800115 	stw	r2,4(r3)
  825588:	d8814917 	ldw	r2,1316(sp)
  82558c:	94800044 	addi	r18,r18,1
  825590:	8c400044 	addi	r17,r17,1
  825594:	18800015 	stw	r2,0(r3)
  825598:	008001c4 	movi	r2,7
  82559c:	dc800e15 	stw	r18,56(sp)
  8255a0:	dc400d15 	stw	r17,52(sp)
  8255a4:	1440ca16 	blt	r2,r17,8258d0 <___vfprintf_internal_r+0x198c>
  8255a8:	18c00204 	addi	r3,r3,8
  8255ac:	0121c83a 	sub	r16,zero,r4
  8255b0:	0400500e 	bge	zero,r16,8256f4 <___vfprintf_internal_r+0x17b0>
  8255b4:	00800404 	movi	r2,16
  8255b8:	1400800e 	bge	r2,r16,8257bc <___vfprintf_internal_r+0x1878>
  8255bc:	1027883a 	mov	r19,r2
  8255c0:	070020f4 	movhi	fp,131
  8255c4:	e70e5d84 	addi	fp,fp,14710
  8255c8:	050001c4 	movi	r20,7
  8255cc:	00000306 	br	8255dc <___vfprintf_internal_r+0x1698>
  8255d0:	18c00204 	addi	r3,r3,8
  8255d4:	843ffc04 	addi	r16,r16,-16
  8255d8:	9c007a0e 	bge	r19,r16,8257c4 <___vfprintf_internal_r+0x1880>
  8255dc:	94800404 	addi	r18,r18,16
  8255e0:	8c400044 	addi	r17,r17,1
  8255e4:	1f000015 	stw	fp,0(r3)
  8255e8:	1cc00115 	stw	r19,4(r3)
  8255ec:	dc800e15 	stw	r18,56(sp)
  8255f0:	dc400d15 	stw	r17,52(sp)
  8255f4:	a47ff60e 	bge	r20,r17,8255d0 <___vfprintf_internal_r+0x168c>
  8255f8:	d9014f17 	ldw	r4,1340(sp)
  8255fc:	b00b883a 	mov	r5,r22
  825600:	d9800c04 	addi	r6,sp,48
  825604:	0823eec0 	call	823eec <__sprint_r>
  825608:	103c061e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  82560c:	dc800e17 	ldw	r18,56(sp)
  825610:	dc400d17 	ldw	r17,52(sp)
  825614:	d8c01904 	addi	r3,sp,100
  825618:	003fee06 	br	8255d4 <___vfprintf_internal_r+0x1690>
  82561c:	3c000017 	ldw	r16,0(r7)
  825620:	0023883a 	mov	r17,zero
  825624:	39c00104 	addi	r7,r7,4
  825628:	d9c14015 	stw	r7,1280(sp)
  82562c:	003e9206 	br	825078 <___vfprintf_internal_r+0x1134>
  825630:	d9401904 	addi	r5,sp,100
  825634:	dd000f04 	addi	r20,sp,60
  825638:	d9414115 	stw	r5,1284(sp)
  82563c:	d9814417 	ldw	r6,1296(sp)
  825640:	880a973a 	slli	r5,r17,28
  825644:	8004d13a 	srli	r2,r16,4
  825648:	810003cc 	andi	r4,r16,15
  82564c:	3109883a 	add	r4,r6,r4
  825650:	2884b03a 	or	r2,r5,r2
  825654:	21400003 	ldbu	r5,0(r4)
  825658:	d9014117 	ldw	r4,1284(sp)
  82565c:	8806d13a 	srli	r3,r17,4
  825660:	1021883a 	mov	r16,r2
  825664:	213fffc4 	addi	r4,r4,-1
  825668:	d9014115 	stw	r4,1284(sp)
  82566c:	d9814117 	ldw	r6,1284(sp)
  825670:	10c8b03a 	or	r4,r2,r3
  825674:	1823883a 	mov	r17,r3
  825678:	31400005 	stb	r5,0(r6)
  82567c:	203fef1e 	bne	r4,zero,82563c <___vfprintf_internal_r+0x16f8>
  825680:	003ccb06 	br	8249b0 <___vfprintf_internal_r+0xa6c>
  825684:	00800c04 	movi	r2,48
  825688:	d98018c4 	addi	r6,sp,99
  82568c:	dd000f04 	addi	r20,sp,60
  825690:	d88018c5 	stb	r2,99(sp)
  825694:	d9814115 	stw	r6,1284(sp)
  825698:	003cc506 	br	8249b0 <___vfprintf_internal_r+0xa6c>
  82569c:	dc400d17 	ldw	r17,52(sp)
  8256a0:	070020f4 	movhi	fp,131
  8256a4:	e70e6184 	addi	fp,fp,14726
  8256a8:	003bc706 	br	8245c8 <___vfprintf_internal_r+0x684>
  8256ac:	d9414c17 	ldw	r5,1328(sp)
  8256b0:	2880040c 	andi	r2,r5,16
  8256b4:	10007c26 	beq	r2,zero,8258a8 <___vfprintf_internal_r+0x1964>
  8256b8:	38800017 	ldw	r2,0(r7)
  8256bc:	39c00104 	addi	r7,r7,4
  8256c0:	d9c14015 	stw	r7,1280(sp)
  8256c4:	d9814b17 	ldw	r6,1324(sp)
  8256c8:	d9c14017 	ldw	r7,1280(sp)
  8256cc:	11800015 	stw	r6,0(r2)
  8256d0:	003a7806 	br	8240b4 <___vfprintf_internal_r+0x170>
  8256d4:	d9014f17 	ldw	r4,1340(sp)
  8256d8:	b00b883a 	mov	r5,r22
  8256dc:	d9800c04 	addi	r6,sp,48
  8256e0:	0823eec0 	call	823eec <__sprint_r>
  8256e4:	103bcf1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8256e8:	dc800e17 	ldw	r18,56(sp)
  8256ec:	dc400d17 	ldw	r17,52(sp)
  8256f0:	d8c01904 	addi	r3,sp,100
  8256f4:	d9014717 	ldw	r4,1308(sp)
  8256f8:	d9414117 	ldw	r5,1284(sp)
  8256fc:	8c400044 	addi	r17,r17,1
  825700:	9125883a 	add	r18,r18,r4
  825704:	008001c4 	movi	r2,7
  825708:	19400015 	stw	r5,0(r3)
  82570c:	19000115 	stw	r4,4(r3)
  825710:	dc800e15 	stw	r18,56(sp)
  825714:	dc400d15 	stw	r17,52(sp)
  825718:	147cee16 	blt	r2,r17,824ad4 <___vfprintf_internal_r+0xb90>
  82571c:	18c00204 	addi	r3,r3,8
  825720:	003b8606 	br	82453c <___vfprintf_internal_r+0x5f8>
  825724:	38c00017 	ldw	r3,0(r7)
  825728:	39000204 	addi	r4,r7,8
  82572c:	d9014015 	stw	r4,1280(sp)
  825730:	d8c14215 	stw	r3,1288(sp)
  825734:	39c00117 	ldw	r7,4(r7)
  825738:	d9c14315 	stw	r7,1292(sp)
  82573c:	003e2006 	br	824fc0 <___vfprintf_internal_r+0x107c>
  825740:	0005883a 	mov	r2,zero
  825744:	1409c83a 	sub	r4,r2,r16
  825748:	1105803a 	cmpltu	r2,r2,r4
  82574c:	044bc83a 	sub	r5,zero,r17
  825750:	2885c83a 	sub	r2,r5,r2
  825754:	2021883a 	mov	r16,r4
  825758:	1023883a 	mov	r17,r2
  82575c:	01000044 	movi	r4,1
  825760:	00800b44 	movi	r2,45
  825764:	d8800405 	stb	r2,16(sp)
  825768:	003c8406 	br	82497c <___vfprintf_internal_r+0xa38>
  82576c:	d9014f17 	ldw	r4,1340(sp)
  825770:	b00b883a 	mov	r5,r22
  825774:	d9800c04 	addi	r6,sp,48
  825778:	0823eec0 	call	823eec <__sprint_r>
  82577c:	103ba91e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  825780:	dc800e17 	ldw	r18,56(sp)
  825784:	dc400d17 	ldw	r17,52(sp)
  825788:	d9000517 	ldw	r4,20(sp)
  82578c:	d9401904 	addi	r5,sp,100
  825790:	003da706 	br	824e30 <___vfprintf_internal_r+0xeec>
  825794:	d9014f17 	ldw	r4,1340(sp)
  825798:	b00b883a 	mov	r5,r22
  82579c:	d9800c04 	addi	r6,sp,48
  8257a0:	0823eec0 	call	823eec <__sprint_r>
  8257a4:	103b9f1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8257a8:	dc800e17 	ldw	r18,56(sp)
  8257ac:	dc400d17 	ldw	r17,52(sp)
  8257b0:	d9000517 	ldw	r4,20(sp)
  8257b4:	d8c01904 	addi	r3,sp,100
  8257b8:	003d9106 	br	824e00 <___vfprintf_internal_r+0xebc>
  8257bc:	070020f4 	movhi	fp,131
  8257c0:	e70e5d84 	addi	fp,fp,14710
  8257c4:	9425883a 	add	r18,r18,r16
  8257c8:	8c400044 	addi	r17,r17,1
  8257cc:	008001c4 	movi	r2,7
  8257d0:	1f000015 	stw	fp,0(r3)
  8257d4:	1c000115 	stw	r16,4(r3)
  8257d8:	dc800e15 	stw	r18,56(sp)
  8257dc:	dc400d15 	stw	r17,52(sp)
  8257e0:	147fbc16 	blt	r2,r17,8256d4 <___vfprintf_internal_r+0x1790>
  8257e4:	18c00204 	addi	r3,r3,8
  8257e8:	003fc206 	br	8256f4 <___vfprintf_internal_r+0x17b0>
  8257ec:	d9014f17 	ldw	r4,1340(sp)
  8257f0:	b00b883a 	mov	r5,r22
  8257f4:	d9800c04 	addi	r6,sp,48
  8257f8:	0823eec0 	call	823eec <__sprint_r>
  8257fc:	103b891e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  825800:	dc800e17 	ldw	r18,56(sp)
  825804:	d9000517 	ldw	r4,20(sp)
  825808:	d8c01904 	addi	r3,sp,100
  82580c:	003d0206 	br	824c18 <___vfprintf_internal_r+0xcd4>
  825810:	070020f4 	movhi	fp,131
  825814:	e70e5d84 	addi	fp,fp,14710
  825818:	003be406 	br	8247ac <___vfprintf_internal_r+0x868>
  82581c:	008020f4 	movhi	r2,131
  825820:	108e4d04 	addi	r2,r2,14644
  825824:	d8814115 	stw	r2,1284(sp)
  825828:	003df506 	br	825000 <___vfprintf_internal_r+0x10bc>
  82582c:	d9014217 	ldw	r4,1288(sp)
  825830:	d9414317 	ldw	r5,1292(sp)
  825834:	082a5840 	call	82a584 <__isnand>
  825838:	10003926 	beq	r2,zero,825920 <___vfprintf_internal_r+0x19dc>
  82583c:	d9414d17 	ldw	r5,1332(sp)
  825840:	008011c4 	movi	r2,71
  825844:	1140ce16 	blt	r2,r5,825b80 <___vfprintf_internal_r+0x1c3c>
  825848:	018020f4 	movhi	r6,131
  82584c:	318e4e04 	addi	r6,r6,14648
  825850:	d9814115 	stw	r6,1284(sp)
  825854:	003dea06 	br	825000 <___vfprintf_internal_r+0x10bc>
  825858:	d9014c17 	ldw	r4,1328(sp)
  82585c:	bdc00044 	addi	r23,r23,1
  825860:	b8c00007 	ldb	r3,0(r23)
  825864:	21000814 	ori	r4,r4,32
  825868:	d9014c15 	stw	r4,1328(sp)
  82586c:	003a3406 	br	824140 <___vfprintf_internal_r+0x1fc>
  825870:	dcc14515 	stw	r19,1300(sp)
  825874:	98011016 	blt	r19,zero,825cb8 <___vfprintf_internal_r+0x1d74>
  825878:	980f883a 	mov	r7,r19
  82587c:	d8014615 	stw	zero,1304(sp)
  825880:	003c5206 	br	8249cc <___vfprintf_internal_r+0xa88>
  825884:	d9014f17 	ldw	r4,1340(sp)
  825888:	b00b883a 	mov	r5,r22
  82588c:	d9800c04 	addi	r6,sp,48
  825890:	0823eec0 	call	823eec <__sprint_r>
  825894:	103b631e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  825898:	dc800e17 	ldw	r18,56(sp)
  82589c:	d9000517 	ldw	r4,20(sp)
  8258a0:	d8c01904 	addi	r3,sp,100
  8258a4:	003f2e06 	br	825560 <___vfprintf_internal_r+0x161c>
  8258a8:	d8c14c17 	ldw	r3,1328(sp)
  8258ac:	1880100c 	andi	r2,r3,64
  8258b0:	1000a026 	beq	r2,zero,825b34 <___vfprintf_internal_r+0x1bf0>
  8258b4:	38800017 	ldw	r2,0(r7)
  8258b8:	39c00104 	addi	r7,r7,4
  8258bc:	d9c14015 	stw	r7,1280(sp)
  8258c0:	d9014b17 	ldw	r4,1324(sp)
  8258c4:	d9c14017 	ldw	r7,1280(sp)
  8258c8:	1100000d 	sth	r4,0(r2)
  8258cc:	0039f906 	br	8240b4 <___vfprintf_internal_r+0x170>
  8258d0:	d9014f17 	ldw	r4,1340(sp)
  8258d4:	b00b883a 	mov	r5,r22
  8258d8:	d9800c04 	addi	r6,sp,48
  8258dc:	0823eec0 	call	823eec <__sprint_r>
  8258e0:	103b501e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  8258e4:	dc800e17 	ldw	r18,56(sp)
  8258e8:	dc400d17 	ldw	r17,52(sp)
  8258ec:	d9000517 	ldw	r4,20(sp)
  8258f0:	d8c01904 	addi	r3,sp,100
  8258f4:	003f2d06 	br	8255ac <___vfprintf_internal_r+0x1668>
  8258f8:	00800184 	movi	r2,6
  8258fc:	14c09a36 	bltu	r2,r19,825b68 <___vfprintf_internal_r+0x1c24>
  825900:	dcc14515 	stw	r19,1300(sp)
  825904:	9800010e 	bge	r19,zero,82590c <___vfprintf_internal_r+0x19c8>
  825908:	d8014515 	stw	zero,1300(sp)
  82590c:	008020f4 	movhi	r2,131
  825910:	108e5004 	addi	r2,r2,14656
  825914:	980f883a 	mov	r7,r19
  825918:	d8814115 	stw	r2,1284(sp)
  82591c:	003a7806 	br	824300 <___vfprintf_internal_r+0x3bc>
  825920:	00bfffc4 	movi	r2,-1
  825924:	9880e226 	beq	r19,r2,825cb0 <___vfprintf_internal_r+0x1d6c>
  825928:	d9414d17 	ldw	r5,1332(sp)
  82592c:	008019c4 	movi	r2,103
  825930:	2880dc26 	beq	r5,r2,825ca4 <___vfprintf_internal_r+0x1d60>
  825934:	008011c4 	movi	r2,71
  825938:	2880da26 	beq	r5,r2,825ca4 <___vfprintf_internal_r+0x1d60>
  82593c:	d9414c17 	ldw	r5,1328(sp)
  825940:	d9014317 	ldw	r4,1292(sp)
  825944:	d9814217 	ldw	r6,1288(sp)
  825948:	29404014 	ori	r5,r5,256
  82594c:	d9414c15 	stw	r5,1328(sp)
  825950:	2000cc16 	blt	r4,zero,825c84 <___vfprintf_internal_r+0x1d40>
  825954:	3021883a 	mov	r16,r6
  825958:	2023883a 	mov	r17,r4
  82595c:	0039883a 	mov	fp,zero
  825960:	d9414d17 	ldw	r5,1332(sp)
  825964:	00801984 	movi	r2,102
  825968:	2880b726 	beq	r5,r2,825c48 <___vfprintf_internal_r+0x1d04>
  82596c:	00801184 	movi	r2,70
  825970:	2880b526 	beq	r5,r2,825c48 <___vfprintf_internal_r+0x1d04>
  825974:	00801944 	movi	r2,101
  825978:	2880c826 	beq	r5,r2,825c9c <___vfprintf_internal_r+0x1d58>
  82597c:	00801144 	movi	r2,69
  825980:	2880c626 	beq	r5,r2,825c9c <___vfprintf_internal_r+0x1d58>
  825984:	9829883a 	mov	r20,r19
  825988:	d9014f17 	ldw	r4,1340(sp)
  82598c:	d8800504 	addi	r2,sp,20
  825990:	880d883a 	mov	r6,r17
  825994:	d8800115 	stw	r2,4(sp)
  825998:	d8c00604 	addi	r3,sp,24
  82599c:	d8800704 	addi	r2,sp,28
  8259a0:	800b883a 	mov	r5,r16
  8259a4:	01c00084 	movi	r7,2
  8259a8:	d8c00215 	stw	r3,8(sp)
  8259ac:	d8800315 	stw	r2,12(sp)
  8259b0:	dd000015 	stw	r20,0(sp)
  8259b4:	082631c0 	call	82631c <_dtoa_r>
  8259b8:	d9814d17 	ldw	r6,1332(sp)
  8259bc:	d8814115 	stw	r2,1284(sp)
  8259c0:	008019c4 	movi	r2,103
  8259c4:	30809526 	beq	r6,r2,825c1c <___vfprintf_internal_r+0x1cd8>
  8259c8:	d8c14d17 	ldw	r3,1332(sp)
  8259cc:	008011c4 	movi	r2,71
  8259d0:	18809226 	beq	r3,r2,825c1c <___vfprintf_internal_r+0x1cd8>
  8259d4:	d9414117 	ldw	r5,1284(sp)
  8259d8:	d9814d17 	ldw	r6,1332(sp)
  8259dc:	00801984 	movi	r2,102
  8259e0:	2d25883a 	add	r18,r5,r20
  8259e4:	30808626 	beq	r6,r2,825c00 <___vfprintf_internal_r+0x1cbc>
  8259e8:	00801184 	movi	r2,70
  8259ec:	30808426 	beq	r6,r2,825c00 <___vfprintf_internal_r+0x1cbc>
  8259f0:	000d883a 	mov	r6,zero
  8259f4:	000f883a 	mov	r7,zero
  8259f8:	880b883a 	mov	r5,r17
  8259fc:	8009883a 	mov	r4,r16
  825a00:	082bb800 	call	82bb80 <__eqdf2>
  825a04:	1000751e 	bne	r2,zero,825bdc <___vfprintf_internal_r+0x1c98>
  825a08:	9005883a 	mov	r2,r18
  825a0c:	dc800715 	stw	r18,28(sp)
  825a10:	d9014117 	ldw	r4,1284(sp)
  825a14:	d9414d17 	ldw	r5,1332(sp)
  825a18:	00c019c4 	movi	r3,103
  825a1c:	1125c83a 	sub	r18,r2,r4
  825a20:	28c06826 	beq	r5,r3,825bc4 <___vfprintf_internal_r+0x1c80>
  825a24:	008011c4 	movi	r2,71
  825a28:	28806626 	beq	r5,r2,825bc4 <___vfprintf_internal_r+0x1c80>
  825a2c:	d9000517 	ldw	r4,20(sp)
  825a30:	d8c14d17 	ldw	r3,1332(sp)
  825a34:	00801944 	movi	r2,101
  825a38:	10c05516 	blt	r2,r3,825b90 <___vfprintf_internal_r+0x1c4c>
  825a3c:	213fffc4 	addi	r4,r4,-1
  825a40:	d9000515 	stw	r4,20(sp)
  825a44:	d8c00805 	stb	r3,32(sp)
  825a48:	2021883a 	mov	r16,r4
  825a4c:	2000c116 	blt	r4,zero,825d54 <___vfprintf_internal_r+0x1e10>
  825a50:	00800ac4 	movi	r2,43
  825a54:	d8800845 	stb	r2,33(sp)
  825a58:	00800244 	movi	r2,9
  825a5c:	1400af0e 	bge	r2,r16,825d1c <___vfprintf_internal_r+0x1dd8>
  825a60:	1027883a 	mov	r19,r2
  825a64:	dc400b84 	addi	r17,sp,46
  825a68:	8009883a 	mov	r4,r16
  825a6c:	01400284 	movi	r5,10
  825a70:	0822e7c0 	call	822e7c <__modsi3>
  825a74:	10800c04 	addi	r2,r2,48
  825a78:	8c7fffc4 	addi	r17,r17,-1
  825a7c:	8009883a 	mov	r4,r16
  825a80:	01400284 	movi	r5,10
  825a84:	88800005 	stb	r2,0(r17)
  825a88:	0822e1c0 	call	822e1c <__divsi3>
  825a8c:	1021883a 	mov	r16,r2
  825a90:	98bff516 	blt	r19,r2,825a68 <___vfprintf_internal_r+0x1b24>
  825a94:	10c00c04 	addi	r3,r2,48
  825a98:	d88009c4 	addi	r2,sp,39
  825a9c:	108001c4 	addi	r2,r2,7
  825aa0:	897fffc4 	addi	r5,r17,-1
  825aa4:	88ffffc5 	stb	r3,-1(r17)
  825aa8:	2880a72e 	bgeu	r5,r2,825d48 <___vfprintf_internal_r+0x1e04>
  825aac:	1009883a 	mov	r4,r2
  825ab0:	d9800804 	addi	r6,sp,32
  825ab4:	d8c00884 	addi	r3,sp,34
  825ab8:	28800003 	ldbu	r2,0(r5)
  825abc:	29400044 	addi	r5,r5,1
  825ac0:	18800005 	stb	r2,0(r3)
  825ac4:	18c00044 	addi	r3,r3,1
  825ac8:	293ffb36 	bltu	r5,r4,825ab8 <___vfprintf_internal_r+0x1b74>
  825acc:	1987c83a 	sub	r3,r3,r6
  825ad0:	00800044 	movi	r2,1
  825ad4:	d8c14815 	stw	r3,1312(sp)
  825ad8:	90cf883a 	add	r7,r18,r3
  825adc:	1480960e 	bge	r2,r18,825d38 <___vfprintf_internal_r+0x1df4>
  825ae0:	39c00044 	addi	r7,r7,1
  825ae4:	d9c14515 	stw	r7,1300(sp)
  825ae8:	38003416 	blt	r7,zero,825bbc <___vfprintf_internal_r+0x1c78>
  825aec:	e0803fcc 	andi	r2,fp,255
  825af0:	1080201c 	xori	r2,r2,128
  825af4:	10bfe004 	addi	r2,r2,-128
  825af8:	10004e26 	beq	r2,zero,825c34 <___vfprintf_internal_r+0x1cf0>
  825afc:	00800b44 	movi	r2,45
  825b00:	dc814715 	stw	r18,1308(sp)
  825b04:	d8014615 	stw	zero,1304(sp)
  825b08:	d8800405 	stb	r2,16(sp)
  825b0c:	003bb106 	br	8249d4 <___vfprintf_internal_r+0xa90>
  825b10:	00800b44 	movi	r2,45
  825b14:	d8800405 	stb	r2,16(sp)
  825b18:	003d3306 	br	824fe8 <___vfprintf_internal_r+0x10a4>
  825b1c:	d9014f17 	ldw	r4,1340(sp)
  825b20:	b00b883a 	mov	r5,r22
  825b24:	d9800c04 	addi	r6,sp,48
  825b28:	0823eec0 	call	823eec <__sprint_r>
  825b2c:	103abd1e 	bne	r2,zero,824624 <___vfprintf_internal_r+0x6e0>
  825b30:	003abb06 	br	824620 <___vfprintf_internal_r+0x6dc>
  825b34:	38800017 	ldw	r2,0(r7)
  825b38:	39c00104 	addi	r7,r7,4
  825b3c:	d9c14015 	stw	r7,1280(sp)
  825b40:	d9414b17 	ldw	r5,1324(sp)
  825b44:	d9c14017 	ldw	r7,1280(sp)
  825b48:	11400015 	stw	r5,0(r2)
  825b4c:	00395906 	br	8240b4 <___vfprintf_internal_r+0x170>
  825b50:	980f883a 	mov	r7,r19
  825b54:	dcc14515 	stw	r19,1300(sp)
  825b58:	d8014615 	stw	zero,1304(sp)
  825b5c:	003b9b06 	br	8249cc <___vfprintf_internal_r+0xa88>
  825b60:	0027883a 	mov	r19,zero
  825b64:	00397806 	br	824148 <___vfprintf_internal_r+0x204>
  825b68:	00c020f4 	movhi	r3,131
  825b6c:	18ce5004 	addi	r3,r3,14656
  825b70:	100f883a 	mov	r7,r2
  825b74:	d8814515 	stw	r2,1300(sp)
  825b78:	d8c14115 	stw	r3,1284(sp)
  825b7c:	0039e006 	br	824300 <___vfprintf_internal_r+0x3bc>
  825b80:	008020f4 	movhi	r2,131
  825b84:	108e4f04 	addi	r2,r2,14652
  825b88:	d8814115 	stw	r2,1284(sp)
  825b8c:	003d1c06 	br	825000 <___vfprintf_internal_r+0x10bc>
  825b90:	d9414d17 	ldw	r5,1332(sp)
  825b94:	00801984 	movi	r2,102
  825b98:	28804926 	beq	r5,r2,825cc0 <___vfprintf_internal_r+0x1d7c>
  825b9c:	200f883a 	mov	r7,r4
  825ba0:	24805716 	blt	r4,r18,825d00 <___vfprintf_internal_r+0x1dbc>
  825ba4:	d9414c17 	ldw	r5,1328(sp)
  825ba8:	2880004c 	andi	r2,r5,1
  825bac:	10000126 	beq	r2,zero,825bb4 <___vfprintf_internal_r+0x1c70>
  825bb0:	21c00044 	addi	r7,r4,1
  825bb4:	d9c14515 	stw	r7,1300(sp)
  825bb8:	383fcc0e 	bge	r7,zero,825aec <___vfprintf_internal_r+0x1ba8>
  825bbc:	d8014515 	stw	zero,1300(sp)
  825bc0:	003fca06 	br	825aec <___vfprintf_internal_r+0x1ba8>
  825bc4:	d9000517 	ldw	r4,20(sp)
  825bc8:	00bfff04 	movi	r2,-4
  825bcc:	1100480e 	bge	r2,r4,825cf0 <___vfprintf_internal_r+0x1dac>
  825bd0:	99004716 	blt	r19,r4,825cf0 <___vfprintf_internal_r+0x1dac>
  825bd4:	d8c14d15 	stw	r3,1332(sp)
  825bd8:	003ff006 	br	825b9c <___vfprintf_internal_r+0x1c58>
  825bdc:	d8800717 	ldw	r2,28(sp)
  825be0:	14bf8b2e 	bgeu	r2,r18,825a10 <___vfprintf_internal_r+0x1acc>
  825be4:	9007883a 	mov	r3,r18
  825be8:	01000c04 	movi	r4,48
  825bec:	11000005 	stb	r4,0(r2)
  825bf0:	10800044 	addi	r2,r2,1
  825bf4:	d8800715 	stw	r2,28(sp)
  825bf8:	18bffc1e 	bne	r3,r2,825bec <___vfprintf_internal_r+0x1ca8>
  825bfc:	003f8406 	br	825a10 <___vfprintf_internal_r+0x1acc>
  825c00:	d8814117 	ldw	r2,1284(sp)
  825c04:	10c00007 	ldb	r3,0(r2)
  825c08:	00800c04 	movi	r2,48
  825c0c:	18805b26 	beq	r3,r2,825d7c <___vfprintf_internal_r+0x1e38>
  825c10:	d9000517 	ldw	r4,20(sp)
  825c14:	9125883a 	add	r18,r18,r4
  825c18:	003f7506 	br	8259f0 <___vfprintf_internal_r+0x1aac>
  825c1c:	d9014c17 	ldw	r4,1328(sp)
  825c20:	2080004c 	andi	r2,r4,1
  825c24:	1005003a 	cmpeq	r2,r2,zero
  825c28:	103f6a26 	beq	r2,zero,8259d4 <___vfprintf_internal_r+0x1a90>
  825c2c:	d8800717 	ldw	r2,28(sp)
  825c30:	003f7706 	br	825a10 <___vfprintf_internal_r+0x1acc>
  825c34:	d9c14515 	stw	r7,1300(sp)
  825c38:	38004d16 	blt	r7,zero,825d70 <___vfprintf_internal_r+0x1e2c>
  825c3c:	dc814715 	stw	r18,1308(sp)
  825c40:	d8014615 	stw	zero,1304(sp)
  825c44:	003b6106 	br	8249cc <___vfprintf_internal_r+0xa88>
  825c48:	d9014f17 	ldw	r4,1340(sp)
  825c4c:	d8800504 	addi	r2,sp,20
  825c50:	d8800115 	stw	r2,4(sp)
  825c54:	d8c00604 	addi	r3,sp,24
  825c58:	d8800704 	addi	r2,sp,28
  825c5c:	800b883a 	mov	r5,r16
  825c60:	880d883a 	mov	r6,r17
  825c64:	01c000c4 	movi	r7,3
  825c68:	d8c00215 	stw	r3,8(sp)
  825c6c:	d8800315 	stw	r2,12(sp)
  825c70:	dcc00015 	stw	r19,0(sp)
  825c74:	9829883a 	mov	r20,r19
  825c78:	082631c0 	call	82631c <_dtoa_r>
  825c7c:	d8814115 	stw	r2,1284(sp)
  825c80:	003f5106 	br	8259c8 <___vfprintf_internal_r+0x1a84>
  825c84:	d8c14217 	ldw	r3,1288(sp)
  825c88:	d9014317 	ldw	r4,1292(sp)
  825c8c:	07000b44 	movi	fp,45
  825c90:	1821883a 	mov	r16,r3
  825c94:	2460003c 	xorhi	r17,r4,32768
  825c98:	003f3106 	br	825960 <___vfprintf_internal_r+0x1a1c>
  825c9c:	9d000044 	addi	r20,r19,1
  825ca0:	003f3906 	br	825988 <___vfprintf_internal_r+0x1a44>
  825ca4:	983f251e 	bne	r19,zero,82593c <___vfprintf_internal_r+0x19f8>
  825ca8:	04c00044 	movi	r19,1
  825cac:	003f2306 	br	82593c <___vfprintf_internal_r+0x19f8>
  825cb0:	04c00184 	movi	r19,6
  825cb4:	003f2106 	br	82593c <___vfprintf_internal_r+0x19f8>
  825cb8:	d8014515 	stw	zero,1300(sp)
  825cbc:	003eee06 	br	825878 <___vfprintf_internal_r+0x1934>
  825cc0:	200f883a 	mov	r7,r4
  825cc4:	0100370e 	bge	zero,r4,825da4 <___vfprintf_internal_r+0x1e60>
  825cc8:	9800031e 	bne	r19,zero,825cd8 <___vfprintf_internal_r+0x1d94>
  825ccc:	d9814c17 	ldw	r6,1328(sp)
  825cd0:	3080004c 	andi	r2,r6,1
  825cd4:	103fb726 	beq	r2,zero,825bb4 <___vfprintf_internal_r+0x1c70>
  825cd8:	20800044 	addi	r2,r4,1
  825cdc:	98a7883a 	add	r19,r19,r2
  825ce0:	dcc14515 	stw	r19,1300(sp)
  825ce4:	980f883a 	mov	r7,r19
  825ce8:	983f800e 	bge	r19,zero,825aec <___vfprintf_internal_r+0x1ba8>
  825cec:	003fb306 	br	825bbc <___vfprintf_internal_r+0x1c78>
  825cf0:	d9814d17 	ldw	r6,1332(sp)
  825cf4:	31bfff84 	addi	r6,r6,-2
  825cf8:	d9814d15 	stw	r6,1332(sp)
  825cfc:	003f4c06 	br	825a30 <___vfprintf_internal_r+0x1aec>
  825d00:	0100180e 	bge	zero,r4,825d64 <___vfprintf_internal_r+0x1e20>
  825d04:	00800044 	movi	r2,1
  825d08:	1485883a 	add	r2,r2,r18
  825d0c:	d8814515 	stw	r2,1300(sp)
  825d10:	100f883a 	mov	r7,r2
  825d14:	103f750e 	bge	r2,zero,825aec <___vfprintf_internal_r+0x1ba8>
  825d18:	003fa806 	br	825bbc <___vfprintf_internal_r+0x1c78>
  825d1c:	80c00c04 	addi	r3,r16,48
  825d20:	00800c04 	movi	r2,48
  825d24:	d8c008c5 	stb	r3,35(sp)
  825d28:	d9800804 	addi	r6,sp,32
  825d2c:	d8c00904 	addi	r3,sp,36
  825d30:	d8800885 	stb	r2,34(sp)
  825d34:	003f6506 	br	825acc <___vfprintf_internal_r+0x1b88>
  825d38:	d9014c17 	ldw	r4,1328(sp)
  825d3c:	2084703a 	and	r2,r4,r2
  825d40:	103f9c26 	beq	r2,zero,825bb4 <___vfprintf_internal_r+0x1c70>
  825d44:	003f6606 	br	825ae0 <___vfprintf_internal_r+0x1b9c>
  825d48:	d9800804 	addi	r6,sp,32
  825d4c:	d8c00884 	addi	r3,sp,34
  825d50:	003f5e06 	br	825acc <___vfprintf_internal_r+0x1b88>
  825d54:	00800b44 	movi	r2,45
  825d58:	0121c83a 	sub	r16,zero,r4
  825d5c:	d8800845 	stb	r2,33(sp)
  825d60:	003f3d06 	br	825a58 <___vfprintf_internal_r+0x1b14>
  825d64:	00800084 	movi	r2,2
  825d68:	1105c83a 	sub	r2,r2,r4
  825d6c:	003fe606 	br	825d08 <___vfprintf_internal_r+0x1dc4>
  825d70:	d8014515 	stw	zero,1300(sp)
  825d74:	dc814715 	stw	r18,1308(sp)
  825d78:	003fb106 	br	825c40 <___vfprintf_internal_r+0x1cfc>
  825d7c:	000d883a 	mov	r6,zero
  825d80:	000f883a 	mov	r7,zero
  825d84:	8009883a 	mov	r4,r16
  825d88:	880b883a 	mov	r5,r17
  825d8c:	082bc080 	call	82bc08 <__nedf2>
  825d90:	103f9f26 	beq	r2,zero,825c10 <___vfprintf_internal_r+0x1ccc>
  825d94:	00800044 	movi	r2,1
  825d98:	1509c83a 	sub	r4,r2,r20
  825d9c:	d9000515 	stw	r4,20(sp)
  825da0:	003f9b06 	br	825c10 <___vfprintf_internal_r+0x1ccc>
  825da4:	98000d1e 	bne	r19,zero,825ddc <___vfprintf_internal_r+0x1e98>
  825da8:	d8c14c17 	ldw	r3,1328(sp)
  825dac:	1880004c 	andi	r2,r3,1
  825db0:	10000a1e 	bne	r2,zero,825ddc <___vfprintf_internal_r+0x1e98>
  825db4:	01000044 	movi	r4,1
  825db8:	200f883a 	mov	r7,r4
  825dbc:	d9014515 	stw	r4,1300(sp)
  825dc0:	003f4a06 	br	825aec <___vfprintf_internal_r+0x1ba8>
  825dc4:	3cc00017 	ldw	r19,0(r7)
  825dc8:	39c00104 	addi	r7,r7,4
  825dcc:	983d0e0e 	bge	r19,zero,825208 <___vfprintf_internal_r+0x12c4>
  825dd0:	b8c00007 	ldb	r3,0(r23)
  825dd4:	04ffffc4 	movi	r19,-1
  825dd8:	0038d906 	br	824140 <___vfprintf_internal_r+0x1fc>
  825ddc:	9cc00084 	addi	r19,r19,2
  825de0:	dcc14515 	stw	r19,1300(sp)
  825de4:	980f883a 	mov	r7,r19
  825de8:	983f400e 	bge	r19,zero,825aec <___vfprintf_internal_r+0x1ba8>
  825dec:	003f7306 	br	825bbc <___vfprintf_internal_r+0x1c78>

00825df0 <__vfprintf_internal>:
  825df0:	008020f4 	movhi	r2,131
  825df4:	10967504 	addi	r2,r2,22996
  825df8:	2013883a 	mov	r9,r4
  825dfc:	11000017 	ldw	r4,0(r2)
  825e00:	2805883a 	mov	r2,r5
  825e04:	300f883a 	mov	r7,r6
  825e08:	480b883a 	mov	r5,r9
  825e0c:	100d883a 	mov	r6,r2
  825e10:	0823f441 	jmpi	823f44 <___vfprintf_internal_r>

00825e14 <__swsetup_r>:
  825e14:	008020f4 	movhi	r2,131
  825e18:	10967504 	addi	r2,r2,22996
  825e1c:	10c00017 	ldw	r3,0(r2)
  825e20:	defffd04 	addi	sp,sp,-12
  825e24:	dc400115 	stw	r17,4(sp)
  825e28:	dc000015 	stw	r16,0(sp)
  825e2c:	dfc00215 	stw	ra,8(sp)
  825e30:	2023883a 	mov	r17,r4
  825e34:	2821883a 	mov	r16,r5
  825e38:	18000226 	beq	r3,zero,825e44 <__swsetup_r+0x30>
  825e3c:	18800e17 	ldw	r2,56(r3)
  825e40:	10001f26 	beq	r2,zero,825ec0 <__swsetup_r+0xac>
  825e44:	8100030b 	ldhu	r4,12(r16)
  825e48:	2080020c 	andi	r2,r4,8
  825e4c:	10002826 	beq	r2,zero,825ef0 <__swsetup_r+0xdc>
  825e50:	81400417 	ldw	r5,16(r16)
  825e54:	28001d26 	beq	r5,zero,825ecc <__swsetup_r+0xb8>
  825e58:	2080004c 	andi	r2,r4,1
  825e5c:	1005003a 	cmpeq	r2,r2,zero
  825e60:	10000b26 	beq	r2,zero,825e90 <__swsetup_r+0x7c>
  825e64:	2080008c 	andi	r2,r4,2
  825e68:	10001226 	beq	r2,zero,825eb4 <__swsetup_r+0xa0>
  825e6c:	0005883a 	mov	r2,zero
  825e70:	80800215 	stw	r2,8(r16)
  825e74:	28000b26 	beq	r5,zero,825ea4 <__swsetup_r+0x90>
  825e78:	0005883a 	mov	r2,zero
  825e7c:	dfc00217 	ldw	ra,8(sp)
  825e80:	dc400117 	ldw	r17,4(sp)
  825e84:	dc000017 	ldw	r16,0(sp)
  825e88:	dec00304 	addi	sp,sp,12
  825e8c:	f800283a 	ret
  825e90:	80800517 	ldw	r2,20(r16)
  825e94:	80000215 	stw	zero,8(r16)
  825e98:	0085c83a 	sub	r2,zero,r2
  825e9c:	80800615 	stw	r2,24(r16)
  825ea0:	283ff51e 	bne	r5,zero,825e78 <__swsetup_r+0x64>
  825ea4:	2080200c 	andi	r2,r4,128
  825ea8:	103ff326 	beq	r2,zero,825e78 <__swsetup_r+0x64>
  825eac:	00bfffc4 	movi	r2,-1
  825eb0:	003ff206 	br	825e7c <__swsetup_r+0x68>
  825eb4:	80800517 	ldw	r2,20(r16)
  825eb8:	80800215 	stw	r2,8(r16)
  825ebc:	003fed06 	br	825e74 <__swsetup_r+0x60>
  825ec0:	1809883a 	mov	r4,r3
  825ec4:	0827b680 	call	827b68 <__sinit>
  825ec8:	003fde06 	br	825e44 <__swsetup_r+0x30>
  825ecc:	20c0a00c 	andi	r3,r4,640
  825ed0:	00808004 	movi	r2,512
  825ed4:	18bfe026 	beq	r3,r2,825e58 <__swsetup_r+0x44>
  825ed8:	8809883a 	mov	r4,r17
  825edc:	800b883a 	mov	r5,r16
  825ee0:	08288e00 	call	8288e0 <__smakebuf_r>
  825ee4:	8100030b 	ldhu	r4,12(r16)
  825ee8:	81400417 	ldw	r5,16(r16)
  825eec:	003fda06 	br	825e58 <__swsetup_r+0x44>
  825ef0:	2080040c 	andi	r2,r4,16
  825ef4:	103fed26 	beq	r2,zero,825eac <__swsetup_r+0x98>
  825ef8:	2080010c 	andi	r2,r4,4
  825efc:	10001226 	beq	r2,zero,825f48 <__swsetup_r+0x134>
  825f00:	81400c17 	ldw	r5,48(r16)
  825f04:	28000526 	beq	r5,zero,825f1c <__swsetup_r+0x108>
  825f08:	80801004 	addi	r2,r16,64
  825f0c:	28800226 	beq	r5,r2,825f18 <__swsetup_r+0x104>
  825f10:	8809883a 	mov	r4,r17
  825f14:	0827eec0 	call	827eec <_free_r>
  825f18:	80000c15 	stw	zero,48(r16)
  825f1c:	8080030b 	ldhu	r2,12(r16)
  825f20:	81400417 	ldw	r5,16(r16)
  825f24:	80000115 	stw	zero,4(r16)
  825f28:	10bff6cc 	andi	r2,r2,65499
  825f2c:	8080030d 	sth	r2,12(r16)
  825f30:	81400015 	stw	r5,0(r16)
  825f34:	8080030b 	ldhu	r2,12(r16)
  825f38:	10800214 	ori	r2,r2,8
  825f3c:	113fffcc 	andi	r4,r2,65535
  825f40:	8080030d 	sth	r2,12(r16)
  825f44:	003fc306 	br	825e54 <__swsetup_r+0x40>
  825f48:	81400417 	ldw	r5,16(r16)
  825f4c:	003ff906 	br	825f34 <__swsetup_r+0x120>

00825f50 <register_fini>:
  825f50:	f800283a 	ret

00825f54 <__call_exitprocs>:
  825f54:	008020f4 	movhi	r2,131
  825f58:	10967604 	addi	r2,r2,23000
  825f5c:	10800017 	ldw	r2,0(r2)
  825f60:	defff304 	addi	sp,sp,-52
  825f64:	df000b15 	stw	fp,44(sp)
  825f68:	d8800115 	stw	r2,4(sp)
  825f6c:	008020b4 	movhi	r2,130
  825f70:	108d5404 	addi	r2,r2,13648
  825f74:	1005003a 	cmpeq	r2,r2,zero
  825f78:	d8800215 	stw	r2,8(sp)
  825f7c:	d8800117 	ldw	r2,4(sp)
  825f80:	dd400815 	stw	r21,32(sp)
  825f84:	dd000715 	stw	r20,28(sp)
  825f88:	10805204 	addi	r2,r2,328
  825f8c:	dfc00c15 	stw	ra,48(sp)
  825f90:	ddc00a15 	stw	r23,40(sp)
  825f94:	dd800915 	stw	r22,36(sp)
  825f98:	dcc00615 	stw	r19,24(sp)
  825f9c:	dc800515 	stw	r18,20(sp)
  825fa0:	dc400415 	stw	r17,16(sp)
  825fa4:	dc000315 	stw	r16,12(sp)
  825fa8:	282b883a 	mov	r21,r5
  825fac:	2039883a 	mov	fp,r4
  825fb0:	d8800015 	stw	r2,0(sp)
  825fb4:	2829003a 	cmpeq	r20,r5,zero
  825fb8:	d8800117 	ldw	r2,4(sp)
  825fbc:	14405217 	ldw	r17,328(r2)
  825fc0:	88001026 	beq	r17,zero,826004 <__call_exitprocs+0xb0>
  825fc4:	ddc00017 	ldw	r23,0(sp)
  825fc8:	88800117 	ldw	r2,4(r17)
  825fcc:	8c802204 	addi	r18,r17,136
  825fd0:	143fffc4 	addi	r16,r2,-1
  825fd4:	80000916 	blt	r16,zero,825ffc <__call_exitprocs+0xa8>
  825fd8:	05bfffc4 	movi	r22,-1
  825fdc:	a000151e 	bne	r20,zero,826034 <__call_exitprocs+0xe0>
  825fe0:	8409883a 	add	r4,r16,r16
  825fe4:	2105883a 	add	r2,r4,r4
  825fe8:	1485883a 	add	r2,r2,r18
  825fec:	10c02017 	ldw	r3,128(r2)
  825ff0:	a8c01126 	beq	r21,r3,826038 <__call_exitprocs+0xe4>
  825ff4:	843fffc4 	addi	r16,r16,-1
  825ff8:	85bff81e 	bne	r16,r22,825fdc <__call_exitprocs+0x88>
  825ffc:	d8800217 	ldw	r2,8(sp)
  826000:	10003126 	beq	r2,zero,8260c8 <__call_exitprocs+0x174>
  826004:	dfc00c17 	ldw	ra,48(sp)
  826008:	df000b17 	ldw	fp,44(sp)
  82600c:	ddc00a17 	ldw	r23,40(sp)
  826010:	dd800917 	ldw	r22,36(sp)
  826014:	dd400817 	ldw	r21,32(sp)
  826018:	dd000717 	ldw	r20,28(sp)
  82601c:	dcc00617 	ldw	r19,24(sp)
  826020:	dc800517 	ldw	r18,20(sp)
  826024:	dc400417 	ldw	r17,16(sp)
  826028:	dc000317 	ldw	r16,12(sp)
  82602c:	dec00d04 	addi	sp,sp,52
  826030:	f800283a 	ret
  826034:	8409883a 	add	r4,r16,r16
  826038:	88c00117 	ldw	r3,4(r17)
  82603c:	2105883a 	add	r2,r4,r4
  826040:	1445883a 	add	r2,r2,r17
  826044:	18ffffc4 	addi	r3,r3,-1
  826048:	11800217 	ldw	r6,8(r2)
  82604c:	1c001526 	beq	r3,r16,8260a4 <__call_exitprocs+0x150>
  826050:	10000215 	stw	zero,8(r2)
  826054:	303fe726 	beq	r6,zero,825ff4 <__call_exitprocs+0xa0>
  826058:	00c00044 	movi	r3,1
  82605c:	1c06983a 	sll	r3,r3,r16
  826060:	90804017 	ldw	r2,256(r18)
  826064:	8cc00117 	ldw	r19,4(r17)
  826068:	1884703a 	and	r2,r3,r2
  82606c:	10001426 	beq	r2,zero,8260c0 <__call_exitprocs+0x16c>
  826070:	90804117 	ldw	r2,260(r18)
  826074:	1884703a 	and	r2,r3,r2
  826078:	10000c1e 	bne	r2,zero,8260ac <__call_exitprocs+0x158>
  82607c:	2105883a 	add	r2,r4,r4
  826080:	1485883a 	add	r2,r2,r18
  826084:	11400017 	ldw	r5,0(r2)
  826088:	e009883a 	mov	r4,fp
  82608c:	303ee83a 	callr	r6
  826090:	88800117 	ldw	r2,4(r17)
  826094:	98bfc81e 	bne	r19,r2,825fb8 <__call_exitprocs+0x64>
  826098:	b8800017 	ldw	r2,0(r23)
  82609c:	147fd526 	beq	r2,r17,825ff4 <__call_exitprocs+0xa0>
  8260a0:	003fc506 	br	825fb8 <__call_exitprocs+0x64>
  8260a4:	8c000115 	stw	r16,4(r17)
  8260a8:	003fea06 	br	826054 <__call_exitprocs+0x100>
  8260ac:	2105883a 	add	r2,r4,r4
  8260b0:	1485883a 	add	r2,r2,r18
  8260b4:	11000017 	ldw	r4,0(r2)
  8260b8:	303ee83a 	callr	r6
  8260bc:	003ff406 	br	826090 <__call_exitprocs+0x13c>
  8260c0:	303ee83a 	callr	r6
  8260c4:	003ff206 	br	826090 <__call_exitprocs+0x13c>
  8260c8:	88800117 	ldw	r2,4(r17)
  8260cc:	1000081e 	bne	r2,zero,8260f0 <__call_exitprocs+0x19c>
  8260d0:	89000017 	ldw	r4,0(r17)
  8260d4:	20000726 	beq	r4,zero,8260f4 <__call_exitprocs+0x1a0>
  8260d8:	b9000015 	stw	r4,0(r23)
  8260dc:	8809883a 	mov	r4,r17
  8260e0:	08235500 	call	823550 <free>
  8260e4:	bc400017 	ldw	r17,0(r23)
  8260e8:	883fb71e 	bne	r17,zero,825fc8 <__call_exitprocs+0x74>
  8260ec:	003fc506 	br	826004 <__call_exitprocs+0xb0>
  8260f0:	89000017 	ldw	r4,0(r17)
  8260f4:	882f883a 	mov	r23,r17
  8260f8:	2023883a 	mov	r17,r4
  8260fc:	883fb21e 	bne	r17,zero,825fc8 <__call_exitprocs+0x74>
  826100:	003fc006 	br	826004 <__call_exitprocs+0xb0>

00826104 <quorem>:
  826104:	28c00417 	ldw	r3,16(r5)
  826108:	20800417 	ldw	r2,16(r4)
  82610c:	defff604 	addi	sp,sp,-40
  826110:	ddc00715 	stw	r23,28(sp)
  826114:	dd400515 	stw	r21,20(sp)
  826118:	dfc00915 	stw	ra,36(sp)
  82611c:	df000815 	stw	fp,32(sp)
  826120:	dd800615 	stw	r22,24(sp)
  826124:	dd000415 	stw	r20,16(sp)
  826128:	dcc00315 	stw	r19,12(sp)
  82612c:	dc800215 	stw	r18,8(sp)
  826130:	dc400115 	stw	r17,4(sp)
  826134:	dc000015 	stw	r16,0(sp)
  826138:	202f883a 	mov	r23,r4
  82613c:	282b883a 	mov	r21,r5
  826140:	10c07416 	blt	r2,r3,826314 <quorem+0x210>
  826144:	1c7fffc4 	addi	r17,r3,-1
  826148:	8c45883a 	add	r2,r17,r17
  82614c:	1085883a 	add	r2,r2,r2
  826150:	2c000504 	addi	r16,r5,20
  826154:	24c00504 	addi	r19,r4,20
  826158:	14ed883a 	add	r22,r2,r19
  82615c:	80a5883a 	add	r18,r16,r2
  826160:	b7000017 	ldw	fp,0(r22)
  826164:	91400017 	ldw	r5,0(r18)
  826168:	e009883a 	mov	r4,fp
  82616c:	29400044 	addi	r5,r5,1
  826170:	0822edc0 	call	822edc <__udivsi3>
  826174:	1029883a 	mov	r20,r2
  826178:	10003c1e 	bne	r2,zero,82626c <quorem+0x168>
  82617c:	a80b883a 	mov	r5,r21
  826180:	b809883a 	mov	r4,r23
  826184:	0828ecc0 	call	828ecc <__mcmp>
  826188:	10002b16 	blt	r2,zero,826238 <quorem+0x134>
  82618c:	a5000044 	addi	r20,r20,1
  826190:	980f883a 	mov	r7,r19
  826194:	0011883a 	mov	r8,zero
  826198:	0009883a 	mov	r4,zero
  82619c:	81400017 	ldw	r5,0(r16)
  8261a0:	38c00017 	ldw	r3,0(r7)
  8261a4:	84000104 	addi	r16,r16,4
  8261a8:	28bfffcc 	andi	r2,r5,65535
  8261ac:	2085883a 	add	r2,r4,r2
  8261b0:	11bfffcc 	andi	r6,r2,65535
  8261b4:	193fffcc 	andi	r4,r3,65535
  8261b8:	1004d43a 	srli	r2,r2,16
  8261bc:	280ad43a 	srli	r5,r5,16
  8261c0:	2189c83a 	sub	r4,r4,r6
  8261c4:	2209883a 	add	r4,r4,r8
  8261c8:	1806d43a 	srli	r3,r3,16
  8261cc:	288b883a 	add	r5,r5,r2
  8261d0:	200dd43a 	srai	r6,r4,16
  8261d4:	28bfffcc 	andi	r2,r5,65535
  8261d8:	1887c83a 	sub	r3,r3,r2
  8261dc:	1987883a 	add	r3,r3,r6
  8261e0:	3900000d 	sth	r4,0(r7)
  8261e4:	38c0008d 	sth	r3,2(r7)
  8261e8:	2808d43a 	srli	r4,r5,16
  8261ec:	39c00104 	addi	r7,r7,4
  8261f0:	1811d43a 	srai	r8,r3,16
  8261f4:	943fe92e 	bgeu	r18,r16,82619c <quorem+0x98>
  8261f8:	8c45883a 	add	r2,r17,r17
  8261fc:	1085883a 	add	r2,r2,r2
  826200:	9885883a 	add	r2,r19,r2
  826204:	10c00017 	ldw	r3,0(r2)
  826208:	18000b1e 	bne	r3,zero,826238 <quorem+0x134>
  82620c:	113fff04 	addi	r4,r2,-4
  826210:	9900082e 	bgeu	r19,r4,826234 <quorem+0x130>
  826214:	10bfff17 	ldw	r2,-4(r2)
  826218:	10000326 	beq	r2,zero,826228 <quorem+0x124>
  82621c:	00000506 	br	826234 <quorem+0x130>
  826220:	20800017 	ldw	r2,0(r4)
  826224:	1000031e 	bne	r2,zero,826234 <quorem+0x130>
  826228:	213fff04 	addi	r4,r4,-4
  82622c:	8c7fffc4 	addi	r17,r17,-1
  826230:	993ffb36 	bltu	r19,r4,826220 <quorem+0x11c>
  826234:	bc400415 	stw	r17,16(r23)
  826238:	a005883a 	mov	r2,r20
  82623c:	dfc00917 	ldw	ra,36(sp)
  826240:	df000817 	ldw	fp,32(sp)
  826244:	ddc00717 	ldw	r23,28(sp)
  826248:	dd800617 	ldw	r22,24(sp)
  82624c:	dd400517 	ldw	r21,20(sp)
  826250:	dd000417 	ldw	r20,16(sp)
  826254:	dcc00317 	ldw	r19,12(sp)
  826258:	dc800217 	ldw	r18,8(sp)
  82625c:	dc400117 	ldw	r17,4(sp)
  826260:	dc000017 	ldw	r16,0(sp)
  826264:	dec00a04 	addi	sp,sp,40
  826268:	f800283a 	ret
  82626c:	980f883a 	mov	r7,r19
  826270:	8011883a 	mov	r8,r16
  826274:	0013883a 	mov	r9,zero
  826278:	000d883a 	mov	r6,zero
  82627c:	40c00017 	ldw	r3,0(r8)
  826280:	39000017 	ldw	r4,0(r7)
  826284:	42000104 	addi	r8,r8,4
  826288:	18bfffcc 	andi	r2,r3,65535
  82628c:	a085383a 	mul	r2,r20,r2
  826290:	1806d43a 	srli	r3,r3,16
  826294:	217fffcc 	andi	r5,r4,65535
  826298:	3085883a 	add	r2,r6,r2
  82629c:	11bfffcc 	andi	r6,r2,65535
  8262a0:	a0c7383a 	mul	r3,r20,r3
  8262a4:	1004d43a 	srli	r2,r2,16
  8262a8:	298bc83a 	sub	r5,r5,r6
  8262ac:	2a4b883a 	add	r5,r5,r9
  8262b0:	2008d43a 	srli	r4,r4,16
  8262b4:	1887883a 	add	r3,r3,r2
  8262b8:	280dd43a 	srai	r6,r5,16
  8262bc:	18bfffcc 	andi	r2,r3,65535
  8262c0:	2089c83a 	sub	r4,r4,r2
  8262c4:	2189883a 	add	r4,r4,r6
  8262c8:	3900008d 	sth	r4,2(r7)
  8262cc:	3940000d 	sth	r5,0(r7)
  8262d0:	180cd43a 	srli	r6,r3,16
  8262d4:	39c00104 	addi	r7,r7,4
  8262d8:	2013d43a 	srai	r9,r4,16
  8262dc:	923fe72e 	bgeu	r18,r8,82627c <quorem+0x178>
  8262e0:	e03fa61e 	bne	fp,zero,82617c <quorem+0x78>
  8262e4:	b0ffff04 	addi	r3,r22,-4
  8262e8:	98c0082e 	bgeu	r19,r3,82630c <quorem+0x208>
  8262ec:	b0bfff17 	ldw	r2,-4(r22)
  8262f0:	10000326 	beq	r2,zero,826300 <quorem+0x1fc>
  8262f4:	00000506 	br	82630c <quorem+0x208>
  8262f8:	18800017 	ldw	r2,0(r3)
  8262fc:	1000031e 	bne	r2,zero,82630c <quorem+0x208>
  826300:	18ffff04 	addi	r3,r3,-4
  826304:	8c7fffc4 	addi	r17,r17,-1
  826308:	98fffb36 	bltu	r19,r3,8262f8 <quorem+0x1f4>
  82630c:	bc400415 	stw	r17,16(r23)
  826310:	003f9a06 	br	82617c <quorem+0x78>
  826314:	0005883a 	mov	r2,zero
  826318:	003fc806 	br	82623c <quorem+0x138>

0082631c <_dtoa_r>:
  82631c:	22001017 	ldw	r8,64(r4)
  826320:	deffda04 	addi	sp,sp,-152
  826324:	dd402115 	stw	r21,132(sp)
  826328:	dd002015 	stw	r20,128(sp)
  82632c:	dc801e15 	stw	r18,120(sp)
  826330:	dc401d15 	stw	r17,116(sp)
  826334:	dfc02515 	stw	ra,148(sp)
  826338:	df002415 	stw	fp,144(sp)
  82633c:	ddc02315 	stw	r23,140(sp)
  826340:	dd802215 	stw	r22,136(sp)
  826344:	dcc01f15 	stw	r19,124(sp)
  826348:	dc001c15 	stw	r16,112(sp)
  82634c:	d9001615 	stw	r4,88(sp)
  826350:	3023883a 	mov	r17,r6
  826354:	2829883a 	mov	r20,r5
  826358:	d9c01715 	stw	r7,92(sp)
  82635c:	dc802817 	ldw	r18,160(sp)
  826360:	302b883a 	mov	r21,r6
  826364:	40000a26 	beq	r8,zero,826390 <_dtoa_r+0x74>
  826368:	20801117 	ldw	r2,68(r4)
  82636c:	400b883a 	mov	r5,r8
  826370:	40800115 	stw	r2,4(r8)
  826374:	20c01117 	ldw	r3,68(r4)
  826378:	00800044 	movi	r2,1
  82637c:	10c4983a 	sll	r2,r2,r3
  826380:	40800215 	stw	r2,8(r8)
  826384:	0828d700 	call	828d70 <_Bfree>
  826388:	d8c01617 	ldw	r3,88(sp)
  82638c:	18001015 	stw	zero,64(r3)
  826390:	8800a316 	blt	r17,zero,826620 <_dtoa_r+0x304>
  826394:	90000015 	stw	zero,0(r18)
  826398:	a8dffc2c 	andhi	r3,r21,32752
  82639c:	009ffc34 	movhi	r2,32752
  8263a0:	18809126 	beq	r3,r2,8265e8 <_dtoa_r+0x2cc>
  8263a4:	000d883a 	mov	r6,zero
  8263a8:	000f883a 	mov	r7,zero
  8263ac:	a009883a 	mov	r4,r20
  8263b0:	a80b883a 	mov	r5,r21
  8263b4:	dd001215 	stw	r20,72(sp)
  8263b8:	dd401315 	stw	r21,76(sp)
  8263bc:	082bc080 	call	82bc08 <__nedf2>
  8263c0:	1000171e 	bne	r2,zero,826420 <_dtoa_r+0x104>
  8263c4:	d9802717 	ldw	r6,156(sp)
  8263c8:	00800044 	movi	r2,1
  8263cc:	30800015 	stw	r2,0(r6)
  8263d0:	d8802917 	ldw	r2,164(sp)
  8263d4:	10029b26 	beq	r2,zero,826e44 <_dtoa_r+0xb28>
  8263d8:	d9002917 	ldw	r4,164(sp)
  8263dc:	008020f4 	movhi	r2,131
  8263e0:	108de044 	addi	r2,r2,14209
  8263e4:	10ffffc4 	addi	r3,r2,-1
  8263e8:	20800015 	stw	r2,0(r4)
  8263ec:	1805883a 	mov	r2,r3
  8263f0:	dfc02517 	ldw	ra,148(sp)
  8263f4:	df002417 	ldw	fp,144(sp)
  8263f8:	ddc02317 	ldw	r23,140(sp)
  8263fc:	dd802217 	ldw	r22,136(sp)
  826400:	dd402117 	ldw	r21,132(sp)
  826404:	dd002017 	ldw	r20,128(sp)
  826408:	dcc01f17 	ldw	r19,124(sp)
  82640c:	dc801e17 	ldw	r18,120(sp)
  826410:	dc401d17 	ldw	r17,116(sp)
  826414:	dc001c17 	ldw	r16,112(sp)
  826418:	dec02604 	addi	sp,sp,152
  82641c:	f800283a 	ret
  826420:	d9001617 	ldw	r4,88(sp)
  826424:	d9401217 	ldw	r5,72(sp)
  826428:	d8800104 	addi	r2,sp,4
  82642c:	a80d883a 	mov	r6,r21
  826430:	d9c00204 	addi	r7,sp,8
  826434:	d8800015 	stw	r2,0(sp)
  826438:	08293ac0 	call	8293ac <__d2b>
  82643c:	d8800715 	stw	r2,28(sp)
  826440:	a804d53a 	srli	r2,r21,20
  826444:	1101ffcc 	andi	r4,r2,2047
  826448:	20008626 	beq	r4,zero,826664 <_dtoa_r+0x348>
  82644c:	d8c01217 	ldw	r3,72(sp)
  826450:	00800434 	movhi	r2,16
  826454:	10bfffc4 	addi	r2,r2,-1
  826458:	ddc00117 	ldw	r23,4(sp)
  82645c:	a884703a 	and	r2,r21,r2
  826460:	1811883a 	mov	r8,r3
  826464:	124ffc34 	orhi	r9,r2,16368
  826468:	25bf0044 	addi	r22,r4,-1023
  82646c:	d8000815 	stw	zero,32(sp)
  826470:	0005883a 	mov	r2,zero
  826474:	00cffe34 	movhi	r3,16376
  826478:	480b883a 	mov	r5,r9
  82647c:	4009883a 	mov	r4,r8
  826480:	180f883a 	mov	r7,r3
  826484:	100d883a 	mov	r6,r2
  826488:	08225f40 	call	8225f4 <__subdf3>
  82648c:	0218dbf4 	movhi	r8,25455
  826490:	4210d844 	addi	r8,r8,17249
  826494:	024ff4f4 	movhi	r9,16339
  826498:	4a61e9c4 	addi	r9,r9,-30809
  82649c:	480f883a 	mov	r7,r9
  8264a0:	400d883a 	mov	r6,r8
  8264a4:	180b883a 	mov	r5,r3
  8264a8:	1009883a 	mov	r4,r2
  8264ac:	08226e80 	call	8226e8 <__muldf3>
  8264b0:	0222d874 	movhi	r8,35681
  8264b4:	42322cc4 	addi	r8,r8,-14157
  8264b8:	024ff1f4 	movhi	r9,16327
  8264bc:	4a628a04 	addi	r9,r9,-30168
  8264c0:	480f883a 	mov	r7,r9
  8264c4:	400d883a 	mov	r6,r8
  8264c8:	180b883a 	mov	r5,r3
  8264cc:	1009883a 	mov	r4,r2
  8264d0:	08226740 	call	822674 <__adddf3>
  8264d4:	b009883a 	mov	r4,r22
  8264d8:	1021883a 	mov	r16,r2
  8264dc:	1823883a 	mov	r17,r3
  8264e0:	082bda00 	call	82bda0 <__floatsidf>
  8264e4:	021427f4 	movhi	r8,20639
  8264e8:	421e7ec4 	addi	r8,r8,31227
  8264ec:	024ff4f4 	movhi	r9,16339
  8264f0:	4a5104c4 	addi	r9,r9,17427
  8264f4:	480f883a 	mov	r7,r9
  8264f8:	400d883a 	mov	r6,r8
  8264fc:	180b883a 	mov	r5,r3
  826500:	1009883a 	mov	r4,r2
  826504:	08226e80 	call	8226e8 <__muldf3>
  826508:	180f883a 	mov	r7,r3
  82650c:	880b883a 	mov	r5,r17
  826510:	100d883a 	mov	r6,r2
  826514:	8009883a 	mov	r4,r16
  826518:	08226740 	call	822674 <__adddf3>
  82651c:	1009883a 	mov	r4,r2
  826520:	180b883a 	mov	r5,r3
  826524:	1021883a 	mov	r16,r2
  826528:	1823883a 	mov	r17,r3
  82652c:	0822b340 	call	822b34 <__fixdfsi>
  826530:	000d883a 	mov	r6,zero
  826534:	000f883a 	mov	r7,zero
  826538:	8009883a 	mov	r4,r16
  82653c:	880b883a 	mov	r5,r17
  826540:	d8800d15 	stw	r2,52(sp)
  826544:	082bd180 	call	82bd18 <__ltdf2>
  826548:	10031716 	blt	r2,zero,8271a8 <_dtoa_r+0xe8c>
  82654c:	d8c00d17 	ldw	r3,52(sp)
  826550:	00800584 	movi	r2,22
  826554:	10c1482e 	bgeu	r2,r3,826a78 <_dtoa_r+0x75c>
  826558:	01000044 	movi	r4,1
  82655c:	d9000c15 	stw	r4,48(sp)
  826560:	bd85c83a 	sub	r2,r23,r22
  826564:	11bfffc4 	addi	r6,r2,-1
  826568:	30030b16 	blt	r6,zero,827198 <_dtoa_r+0xe7c>
  82656c:	d9800a15 	stw	r6,40(sp)
  826570:	d8001115 	stw	zero,68(sp)
  826574:	d8c00d17 	ldw	r3,52(sp)
  826578:	1802ff16 	blt	r3,zero,827178 <_dtoa_r+0xe5c>
  82657c:	d9000a17 	ldw	r4,40(sp)
  826580:	d8c00915 	stw	r3,36(sp)
  826584:	d8001015 	stw	zero,64(sp)
  826588:	20c9883a 	add	r4,r4,r3
  82658c:	d9000a15 	stw	r4,40(sp)
  826590:	d9001717 	ldw	r4,92(sp)
  826594:	00800244 	movi	r2,9
  826598:	11004636 	bltu	r2,r4,8266b4 <_dtoa_r+0x398>
  82659c:	00800144 	movi	r2,5
  8265a0:	11020416 	blt	r2,r4,826db4 <_dtoa_r+0xa98>
  8265a4:	04400044 	movi	r17,1
  8265a8:	d8c01717 	ldw	r3,92(sp)
  8265ac:	00800144 	movi	r2,5
  8265b0:	10c1ed36 	bltu	r2,r3,826d68 <_dtoa_r+0xa4c>
  8265b4:	18c5883a 	add	r2,r3,r3
  8265b8:	1085883a 	add	r2,r2,r2
  8265bc:	00c020b4 	movhi	r3,130
  8265c0:	18d97404 	addi	r3,r3,26064
  8265c4:	10c5883a 	add	r2,r2,r3
  8265c8:	11000017 	ldw	r4,0(r2)
  8265cc:	2000683a 	jmp	r4
  8265d0:	008266bc 	xorhi	r2,zero,2458
  8265d4:	008266bc 	xorhi	r2,zero,2458
  8265d8:	008270bc 	xorhi	r2,zero,2498
  8265dc:	00827094 	movui	r2,2498
  8265e0:	008270d8 	cmpnei	r2,zero,2499
  8265e4:	008270e4 	muli	r2,zero,2499
  8265e8:	d9002717 	ldw	r4,156(sp)
  8265ec:	0089c3c4 	movi	r2,9999
  8265f0:	20800015 	stw	r2,0(r4)
  8265f4:	a0001026 	beq	r20,zero,826638 <_dtoa_r+0x31c>
  8265f8:	00c020f4 	movhi	r3,131
  8265fc:	18ce6904 	addi	r3,r3,14756
  826600:	d9802917 	ldw	r6,164(sp)
  826604:	303f7926 	beq	r6,zero,8263ec <_dtoa_r+0xd0>
  826608:	188000c7 	ldb	r2,3(r3)
  82660c:	190000c4 	addi	r4,r3,3
  826610:	1000101e 	bne	r2,zero,826654 <_dtoa_r+0x338>
  826614:	d8802917 	ldw	r2,164(sp)
  826618:	11000015 	stw	r4,0(r2)
  82661c:	003f7306 	br	8263ec <_dtoa_r+0xd0>
  826620:	00a00034 	movhi	r2,32768
  826624:	10bfffc4 	addi	r2,r2,-1
  826628:	00c00044 	movi	r3,1
  82662c:	88aa703a 	and	r21,r17,r2
  826630:	90c00015 	stw	r3,0(r18)
  826634:	003f5806 	br	826398 <_dtoa_r+0x7c>
  826638:	00800434 	movhi	r2,16
  82663c:	10bfffc4 	addi	r2,r2,-1
  826640:	a884703a 	and	r2,r21,r2
  826644:	103fec1e 	bne	r2,zero,8265f8 <_dtoa_r+0x2dc>
  826648:	00c020f4 	movhi	r3,131
  82664c:	18ce6604 	addi	r3,r3,14744
  826650:	003feb06 	br	826600 <_dtoa_r+0x2e4>
  826654:	d8802917 	ldw	r2,164(sp)
  826658:	19000204 	addi	r4,r3,8
  82665c:	11000015 	stw	r4,0(r2)
  826660:	003f6206 	br	8263ec <_dtoa_r+0xd0>
  826664:	ddc00117 	ldw	r23,4(sp)
  826668:	d8800217 	ldw	r2,8(sp)
  82666c:	01000804 	movi	r4,32
  826670:	b8c10c84 	addi	r3,r23,1074
  826674:	18a3883a 	add	r17,r3,r2
  826678:	2441b80e 	bge	r4,r17,826d5c <_dtoa_r+0xa40>
  82667c:	00c01004 	movi	r3,64
  826680:	1c47c83a 	sub	r3,r3,r17
  826684:	88bff804 	addi	r2,r17,-32
  826688:	a8c6983a 	sll	r3,r21,r3
  82668c:	a084d83a 	srl	r2,r20,r2
  826690:	1888b03a 	or	r4,r3,r2
  826694:	0822c0c0 	call	822c0c <__floatunsidf>
  826698:	1011883a 	mov	r8,r2
  82669c:	00bf8434 	movhi	r2,65040
  8266a0:	01000044 	movi	r4,1
  8266a4:	10d3883a 	add	r9,r2,r3
  8266a8:	8dbef344 	addi	r22,r17,-1075
  8266ac:	d9000815 	stw	r4,32(sp)
  8266b0:	003f6f06 	br	826470 <_dtoa_r+0x154>
  8266b4:	d8001715 	stw	zero,92(sp)
  8266b8:	04400044 	movi	r17,1
  8266bc:	00bfffc4 	movi	r2,-1
  8266c0:	00c00044 	movi	r3,1
  8266c4:	d8800e15 	stw	r2,56(sp)
  8266c8:	d8002615 	stw	zero,152(sp)
  8266cc:	d8800f15 	stw	r2,60(sp)
  8266d0:	d8c00b15 	stw	r3,44(sp)
  8266d4:	1021883a 	mov	r16,r2
  8266d8:	d8801617 	ldw	r2,88(sp)
  8266dc:	10001115 	stw	zero,68(r2)
  8266e0:	d8801617 	ldw	r2,88(sp)
  8266e4:	11401117 	ldw	r5,68(r2)
  8266e8:	1009883a 	mov	r4,r2
  8266ec:	08292f00 	call	8292f0 <_Balloc>
  8266f0:	d8c01617 	ldw	r3,88(sp)
  8266f4:	d8800515 	stw	r2,20(sp)
  8266f8:	18801015 	stw	r2,64(r3)
  8266fc:	00800384 	movi	r2,14
  826700:	14006836 	bltu	r2,r16,8268a4 <_dtoa_r+0x588>
  826704:	8805003a 	cmpeq	r2,r17,zero
  826708:	1000661e 	bne	r2,zero,8268a4 <_dtoa_r+0x588>
  82670c:	d9000d17 	ldw	r4,52(sp)
  826710:	0102300e 	bge	zero,r4,826fd4 <_dtoa_r+0xcb8>
  826714:	208003cc 	andi	r2,r4,15
  826718:	100490fa 	slli	r2,r2,3
  82671c:	2025d13a 	srai	r18,r4,4
  826720:	00c020f4 	movhi	r3,131
  826724:	18ce7a04 	addi	r3,r3,14824
  826728:	10c5883a 	add	r2,r2,r3
  82672c:	90c0040c 	andi	r3,r18,16
  826730:	14000017 	ldw	r16,0(r2)
  826734:	14400117 	ldw	r17,4(r2)
  826738:	18036a1e 	bne	r3,zero,8274e4 <_dtoa_r+0x11c8>
  82673c:	05800084 	movi	r22,2
  826740:	90001026 	beq	r18,zero,826784 <_dtoa_r+0x468>
  826744:	04c020f4 	movhi	r19,131
  826748:	9cceac04 	addi	r19,r19,15024
  82674c:	9080004c 	andi	r2,r18,1
  826750:	1005003a 	cmpeq	r2,r2,zero
  826754:	1000081e 	bne	r2,zero,826778 <_dtoa_r+0x45c>
  826758:	99800017 	ldw	r6,0(r19)
  82675c:	99c00117 	ldw	r7,4(r19)
  826760:	880b883a 	mov	r5,r17
  826764:	8009883a 	mov	r4,r16
  826768:	08226e80 	call	8226e8 <__muldf3>
  82676c:	1021883a 	mov	r16,r2
  826770:	b5800044 	addi	r22,r22,1
  826774:	1823883a 	mov	r17,r3
  826778:	9025d07a 	srai	r18,r18,1
  82677c:	9cc00204 	addi	r19,r19,8
  826780:	903ff21e 	bne	r18,zero,82674c <_dtoa_r+0x430>
  826784:	a80b883a 	mov	r5,r21
  826788:	a009883a 	mov	r4,r20
  82678c:	880f883a 	mov	r7,r17
  826790:	800d883a 	mov	r6,r16
  826794:	082b9280 	call	82b928 <__divdf3>
  826798:	1029883a 	mov	r20,r2
  82679c:	182b883a 	mov	r21,r3
  8267a0:	d8c00c17 	ldw	r3,48(sp)
  8267a4:	1805003a 	cmpeq	r2,r3,zero
  8267a8:	1000081e 	bne	r2,zero,8267cc <_dtoa_r+0x4b0>
  8267ac:	0005883a 	mov	r2,zero
  8267b0:	00cffc34 	movhi	r3,16368
  8267b4:	180f883a 	mov	r7,r3
  8267b8:	a009883a 	mov	r4,r20
  8267bc:	a80b883a 	mov	r5,r21
  8267c0:	100d883a 	mov	r6,r2
  8267c4:	082bd180 	call	82bd18 <__ltdf2>
  8267c8:	1003fe16 	blt	r2,zero,8277c4 <_dtoa_r+0x14a8>
  8267cc:	b009883a 	mov	r4,r22
  8267d0:	082bda00 	call	82bda0 <__floatsidf>
  8267d4:	180b883a 	mov	r5,r3
  8267d8:	1009883a 	mov	r4,r2
  8267dc:	a00d883a 	mov	r6,r20
  8267e0:	a80f883a 	mov	r7,r21
  8267e4:	08226e80 	call	8226e8 <__muldf3>
  8267e8:	0011883a 	mov	r8,zero
  8267ec:	02500734 	movhi	r9,16412
  8267f0:	1009883a 	mov	r4,r2
  8267f4:	180b883a 	mov	r5,r3
  8267f8:	480f883a 	mov	r7,r9
  8267fc:	400d883a 	mov	r6,r8
  826800:	08226740 	call	822674 <__adddf3>
  826804:	d9000f17 	ldw	r4,60(sp)
  826808:	102d883a 	mov	r22,r2
  82680c:	00bf3034 	movhi	r2,64704
  826810:	18b9883a 	add	fp,r3,r2
  826814:	e02f883a 	mov	r23,fp
  826818:	20028f1e 	bne	r4,zero,827258 <_dtoa_r+0xf3c>
  82681c:	0005883a 	mov	r2,zero
  826820:	00d00534 	movhi	r3,16404
  826824:	a009883a 	mov	r4,r20
  826828:	a80b883a 	mov	r5,r21
  82682c:	180f883a 	mov	r7,r3
  826830:	100d883a 	mov	r6,r2
  826834:	08225f40 	call	8225f4 <__subdf3>
  826838:	1009883a 	mov	r4,r2
  82683c:	e00f883a 	mov	r7,fp
  826840:	180b883a 	mov	r5,r3
  826844:	b00d883a 	mov	r6,r22
  826848:	1025883a 	mov	r18,r2
  82684c:	1827883a 	mov	r19,r3
  826850:	0822aac0 	call	822aac <__gtdf2>
  826854:	00834f16 	blt	zero,r2,827594 <_dtoa_r+0x1278>
  826858:	e0e0003c 	xorhi	r3,fp,32768
  82685c:	9009883a 	mov	r4,r18
  826860:	980b883a 	mov	r5,r19
  826864:	180f883a 	mov	r7,r3
  826868:	b00d883a 	mov	r6,r22
  82686c:	082bd180 	call	82bd18 <__ltdf2>
  826870:	1000080e 	bge	r2,zero,826894 <_dtoa_r+0x578>
  826874:	0027883a 	mov	r19,zero
  826878:	0025883a 	mov	r18,zero
  82687c:	d8802617 	ldw	r2,152(sp)
  826880:	df000517 	ldw	fp,20(sp)
  826884:	d8000615 	stw	zero,24(sp)
  826888:	0084303a 	nor	r2,zero,r2
  82688c:	d8800d15 	stw	r2,52(sp)
  826890:	00019b06 	br	826f00 <_dtoa_r+0xbe4>
  826894:	d9801217 	ldw	r6,72(sp)
  826898:	d8801317 	ldw	r2,76(sp)
  82689c:	3029883a 	mov	r20,r6
  8268a0:	102b883a 	mov	r21,r2
  8268a4:	d8c00217 	ldw	r3,8(sp)
  8268a8:	18008516 	blt	r3,zero,826ac0 <_dtoa_r+0x7a4>
  8268ac:	d9000d17 	ldw	r4,52(sp)
  8268b0:	00800384 	movi	r2,14
  8268b4:	11008216 	blt	r2,r4,826ac0 <_dtoa_r+0x7a4>
  8268b8:	200490fa 	slli	r2,r4,3
  8268bc:	d9802617 	ldw	r6,152(sp)
  8268c0:	00c020f4 	movhi	r3,131
  8268c4:	18ce7a04 	addi	r3,r3,14824
  8268c8:	10c5883a 	add	r2,r2,r3
  8268cc:	14800017 	ldw	r18,0(r2)
  8268d0:	14c00117 	ldw	r19,4(r2)
  8268d4:	30031e16 	blt	r6,zero,827550 <_dtoa_r+0x1234>
  8268d8:	d9000517 	ldw	r4,20(sp)
  8268dc:	d8c00f17 	ldw	r3,60(sp)
  8268e0:	a823883a 	mov	r17,r21
  8268e4:	a021883a 	mov	r16,r20
  8268e8:	192b883a 	add	r21,r3,r4
  8268ec:	2039883a 	mov	fp,r4
  8268f0:	00000f06 	br	826930 <_dtoa_r+0x614>
  8268f4:	0005883a 	mov	r2,zero
  8268f8:	00d00934 	movhi	r3,16420
  8268fc:	5009883a 	mov	r4,r10
  826900:	580b883a 	mov	r5,r11
  826904:	180f883a 	mov	r7,r3
  826908:	100d883a 	mov	r6,r2
  82690c:	08226e80 	call	8226e8 <__muldf3>
  826910:	180b883a 	mov	r5,r3
  826914:	000d883a 	mov	r6,zero
  826918:	000f883a 	mov	r7,zero
  82691c:	1009883a 	mov	r4,r2
  826920:	1021883a 	mov	r16,r2
  826924:	1823883a 	mov	r17,r3
  826928:	082bc080 	call	82bc08 <__nedf2>
  82692c:	10004526 	beq	r2,zero,826a44 <_dtoa_r+0x728>
  826930:	900d883a 	mov	r6,r18
  826934:	980f883a 	mov	r7,r19
  826938:	8009883a 	mov	r4,r16
  82693c:	880b883a 	mov	r5,r17
  826940:	082b9280 	call	82b928 <__divdf3>
  826944:	180b883a 	mov	r5,r3
  826948:	1009883a 	mov	r4,r2
  82694c:	0822b340 	call	822b34 <__fixdfsi>
  826950:	1009883a 	mov	r4,r2
  826954:	1029883a 	mov	r20,r2
  826958:	082bda00 	call	82bda0 <__floatsidf>
  82695c:	180f883a 	mov	r7,r3
  826960:	9009883a 	mov	r4,r18
  826964:	980b883a 	mov	r5,r19
  826968:	100d883a 	mov	r6,r2
  82696c:	08226e80 	call	8226e8 <__muldf3>
  826970:	180f883a 	mov	r7,r3
  826974:	880b883a 	mov	r5,r17
  826978:	8009883a 	mov	r4,r16
  82697c:	100d883a 	mov	r6,r2
  826980:	08225f40 	call	8225f4 <__subdf3>
  826984:	1015883a 	mov	r10,r2
  826988:	a0800c04 	addi	r2,r20,48
  82698c:	e0800005 	stb	r2,0(fp)
  826990:	e7000044 	addi	fp,fp,1
  826994:	1817883a 	mov	r11,r3
  826998:	e57fd61e 	bne	fp,r21,8268f4 <_dtoa_r+0x5d8>
  82699c:	500d883a 	mov	r6,r10
  8269a0:	180f883a 	mov	r7,r3
  8269a4:	5009883a 	mov	r4,r10
  8269a8:	180b883a 	mov	r5,r3
  8269ac:	08226740 	call	822674 <__adddf3>
  8269b0:	100d883a 	mov	r6,r2
  8269b4:	9009883a 	mov	r4,r18
  8269b8:	980b883a 	mov	r5,r19
  8269bc:	180f883a 	mov	r7,r3
  8269c0:	1021883a 	mov	r16,r2
  8269c4:	1823883a 	mov	r17,r3
  8269c8:	082bd180 	call	82bd18 <__ltdf2>
  8269cc:	10000816 	blt	r2,zero,8269f0 <_dtoa_r+0x6d4>
  8269d0:	980b883a 	mov	r5,r19
  8269d4:	800d883a 	mov	r6,r16
  8269d8:	880f883a 	mov	r7,r17
  8269dc:	9009883a 	mov	r4,r18
  8269e0:	082bb800 	call	82bb80 <__eqdf2>
  8269e4:	1000171e 	bne	r2,zero,826a44 <_dtoa_r+0x728>
  8269e8:	a080004c 	andi	r2,r20,1
  8269ec:	10001526 	beq	r2,zero,826a44 <_dtoa_r+0x728>
  8269f0:	d8800d17 	ldw	r2,52(sp)
  8269f4:	d8800415 	stw	r2,16(sp)
  8269f8:	e009883a 	mov	r4,fp
  8269fc:	213fffc4 	addi	r4,r4,-1
  826a00:	20c00007 	ldb	r3,0(r4)
  826a04:	00800e44 	movi	r2,57
  826a08:	1880081e 	bne	r3,r2,826a2c <_dtoa_r+0x710>
  826a0c:	d8800517 	ldw	r2,20(sp)
  826a10:	113ffa1e 	bne	r2,r4,8269fc <_dtoa_r+0x6e0>
  826a14:	d8c00417 	ldw	r3,16(sp)
  826a18:	d9800517 	ldw	r6,20(sp)
  826a1c:	00800c04 	movi	r2,48
  826a20:	18c00044 	addi	r3,r3,1
  826a24:	d8c00415 	stw	r3,16(sp)
  826a28:	30800005 	stb	r2,0(r6)
  826a2c:	20800003 	ldbu	r2,0(r4)
  826a30:	d8c00417 	ldw	r3,16(sp)
  826a34:	27000044 	addi	fp,r4,1
  826a38:	10800044 	addi	r2,r2,1
  826a3c:	d8c00d15 	stw	r3,52(sp)
  826a40:	20800005 	stb	r2,0(r4)
  826a44:	d9001617 	ldw	r4,88(sp)
  826a48:	d9400717 	ldw	r5,28(sp)
  826a4c:	0828d700 	call	828d70 <_Bfree>
  826a50:	e0000005 	stb	zero,0(fp)
  826a54:	d9800d17 	ldw	r6,52(sp)
  826a58:	d8c02717 	ldw	r3,156(sp)
  826a5c:	d9002917 	ldw	r4,164(sp)
  826a60:	30800044 	addi	r2,r6,1
  826a64:	18800015 	stw	r2,0(r3)
  826a68:	20029c26 	beq	r4,zero,8274dc <_dtoa_r+0x11c0>
  826a6c:	d8c00517 	ldw	r3,20(sp)
  826a70:	27000015 	stw	fp,0(r4)
  826a74:	003e5d06 	br	8263ec <_dtoa_r+0xd0>
  826a78:	d9800d17 	ldw	r6,52(sp)
  826a7c:	00c020f4 	movhi	r3,131
  826a80:	18ce7a04 	addi	r3,r3,14824
  826a84:	d9001217 	ldw	r4,72(sp)
  826a88:	300490fa 	slli	r2,r6,3
  826a8c:	d9401317 	ldw	r5,76(sp)
  826a90:	10c5883a 	add	r2,r2,r3
  826a94:	12000017 	ldw	r8,0(r2)
  826a98:	12400117 	ldw	r9,4(r2)
  826a9c:	400d883a 	mov	r6,r8
  826aa0:	480f883a 	mov	r7,r9
  826aa4:	082bd180 	call	82bd18 <__ltdf2>
  826aa8:	1000030e 	bge	r2,zero,826ab8 <_dtoa_r+0x79c>
  826aac:	d8800d17 	ldw	r2,52(sp)
  826ab0:	10bfffc4 	addi	r2,r2,-1
  826ab4:	d8800d15 	stw	r2,52(sp)
  826ab8:	d8000c15 	stw	zero,48(sp)
  826abc:	003ea806 	br	826560 <_dtoa_r+0x244>
  826ac0:	d9000b17 	ldw	r4,44(sp)
  826ac4:	202cc03a 	cmpne	r22,r4,zero
  826ac8:	b000c71e 	bne	r22,zero,826de8 <_dtoa_r+0xacc>
  826acc:	dc001117 	ldw	r16,68(sp)
  826ad0:	dc801017 	ldw	r18,64(sp)
  826ad4:	0027883a 	mov	r19,zero
  826ad8:	04000b0e 	bge	zero,r16,826b08 <_dtoa_r+0x7ec>
  826adc:	d8c00a17 	ldw	r3,40(sp)
  826ae0:	00c0090e 	bge	zero,r3,826b08 <_dtoa_r+0x7ec>
  826ae4:	8005883a 	mov	r2,r16
  826ae8:	1c011316 	blt	r3,r16,826f38 <_dtoa_r+0xc1c>
  826aec:	d9000a17 	ldw	r4,40(sp)
  826af0:	d9801117 	ldw	r6,68(sp)
  826af4:	80a1c83a 	sub	r16,r16,r2
  826af8:	2089c83a 	sub	r4,r4,r2
  826afc:	308dc83a 	sub	r6,r6,r2
  826b00:	d9000a15 	stw	r4,40(sp)
  826b04:	d9801115 	stw	r6,68(sp)
  826b08:	d8801017 	ldw	r2,64(sp)
  826b0c:	0080150e 	bge	zero,r2,826b64 <_dtoa_r+0x848>
  826b10:	d8c00b17 	ldw	r3,44(sp)
  826b14:	1805003a 	cmpeq	r2,r3,zero
  826b18:	1001c91e 	bne	r2,zero,827240 <_dtoa_r+0xf24>
  826b1c:	04800e0e 	bge	zero,r18,826b58 <_dtoa_r+0x83c>
  826b20:	d9001617 	ldw	r4,88(sp)
  826b24:	980b883a 	mov	r5,r19
  826b28:	900d883a 	mov	r6,r18
  826b2c:	0829b240 	call	829b24 <__pow5mult>
  826b30:	d9001617 	ldw	r4,88(sp)
  826b34:	d9800717 	ldw	r6,28(sp)
  826b38:	100b883a 	mov	r5,r2
  826b3c:	1027883a 	mov	r19,r2
  826b40:	08298000 	call	829800 <__multiply>
  826b44:	d9001617 	ldw	r4,88(sp)
  826b48:	d9400717 	ldw	r5,28(sp)
  826b4c:	1023883a 	mov	r17,r2
  826b50:	0828d700 	call	828d70 <_Bfree>
  826b54:	dc400715 	stw	r17,28(sp)
  826b58:	d9001017 	ldw	r4,64(sp)
  826b5c:	248dc83a 	sub	r6,r4,r18
  826b60:	30010e1e 	bne	r6,zero,826f9c <_dtoa_r+0xc80>
  826b64:	d9001617 	ldw	r4,88(sp)
  826b68:	04400044 	movi	r17,1
  826b6c:	880b883a 	mov	r5,r17
  826b70:	08299e80 	call	8299e8 <__i2b>
  826b74:	d9800917 	ldw	r6,36(sp)
  826b78:	1025883a 	mov	r18,r2
  826b7c:	0180040e 	bge	zero,r6,826b90 <_dtoa_r+0x874>
  826b80:	d9001617 	ldw	r4,88(sp)
  826b84:	100b883a 	mov	r5,r2
  826b88:	0829b240 	call	829b24 <__pow5mult>
  826b8c:	1025883a 	mov	r18,r2
  826b90:	d8801717 	ldw	r2,92(sp)
  826b94:	8880f30e 	bge	r17,r2,826f64 <_dtoa_r+0xc48>
  826b98:	0023883a 	mov	r17,zero
  826b9c:	d9800917 	ldw	r6,36(sp)
  826ba0:	30019e1e 	bne	r6,zero,82721c <_dtoa_r+0xf00>
  826ba4:	00c00044 	movi	r3,1
  826ba8:	d9000a17 	ldw	r4,40(sp)
  826bac:	20c5883a 	add	r2,r4,r3
  826bb0:	10c007cc 	andi	r3,r2,31
  826bb4:	1800841e 	bne	r3,zero,826dc8 <_dtoa_r+0xaac>
  826bb8:	00800704 	movi	r2,28
  826bbc:	d9000a17 	ldw	r4,40(sp)
  826bc0:	d9801117 	ldw	r6,68(sp)
  826bc4:	80a1883a 	add	r16,r16,r2
  826bc8:	2089883a 	add	r4,r4,r2
  826bcc:	308d883a 	add	r6,r6,r2
  826bd0:	d9000a15 	stw	r4,40(sp)
  826bd4:	d9801115 	stw	r6,68(sp)
  826bd8:	d8801117 	ldw	r2,68(sp)
  826bdc:	0080050e 	bge	zero,r2,826bf4 <_dtoa_r+0x8d8>
  826be0:	d9400717 	ldw	r5,28(sp)
  826be4:	d9001617 	ldw	r4,88(sp)
  826be8:	100d883a 	mov	r6,r2
  826bec:	08296b40 	call	8296b4 <__lshift>
  826bf0:	d8800715 	stw	r2,28(sp)
  826bf4:	d8c00a17 	ldw	r3,40(sp)
  826bf8:	00c0050e 	bge	zero,r3,826c10 <_dtoa_r+0x8f4>
  826bfc:	d9001617 	ldw	r4,88(sp)
  826c00:	900b883a 	mov	r5,r18
  826c04:	180d883a 	mov	r6,r3
  826c08:	08296b40 	call	8296b4 <__lshift>
  826c0c:	1025883a 	mov	r18,r2
  826c10:	d9000c17 	ldw	r4,48(sp)
  826c14:	2005003a 	cmpeq	r2,r4,zero
  826c18:	10016f26 	beq	r2,zero,8271d8 <_dtoa_r+0xebc>
  826c1c:	d9000f17 	ldw	r4,60(sp)
  826c20:	0102170e 	bge	zero,r4,827480 <_dtoa_r+0x1164>
  826c24:	d9800b17 	ldw	r6,44(sp)
  826c28:	3005003a 	cmpeq	r2,r6,zero
  826c2c:	1000881e 	bne	r2,zero,826e50 <_dtoa_r+0xb34>
  826c30:	0400050e 	bge	zero,r16,826c48 <_dtoa_r+0x92c>
  826c34:	d9001617 	ldw	r4,88(sp)
  826c38:	980b883a 	mov	r5,r19
  826c3c:	800d883a 	mov	r6,r16
  826c40:	08296b40 	call	8296b4 <__lshift>
  826c44:	1027883a 	mov	r19,r2
  826c48:	8804c03a 	cmpne	r2,r17,zero
  826c4c:	1002541e 	bne	r2,zero,8275a0 <_dtoa_r+0x1284>
  826c50:	980b883a 	mov	r5,r19
  826c54:	dd800517 	ldw	r22,20(sp)
  826c58:	dcc00615 	stw	r19,24(sp)
  826c5c:	a700004c 	andi	fp,r20,1
  826c60:	2827883a 	mov	r19,r5
  826c64:	d9000717 	ldw	r4,28(sp)
  826c68:	900b883a 	mov	r5,r18
  826c6c:	08261040 	call	826104 <quorem>
  826c70:	d9000717 	ldw	r4,28(sp)
  826c74:	d9400617 	ldw	r5,24(sp)
  826c78:	1023883a 	mov	r17,r2
  826c7c:	8dc00c04 	addi	r23,r17,48
  826c80:	0828ecc0 	call	828ecc <__mcmp>
  826c84:	d9001617 	ldw	r4,88(sp)
  826c88:	900b883a 	mov	r5,r18
  826c8c:	980d883a 	mov	r6,r19
  826c90:	1029883a 	mov	r20,r2
  826c94:	08295280 	call	829528 <__mdiff>
  826c98:	102b883a 	mov	r21,r2
  826c9c:	10800317 	ldw	r2,12(r2)
  826ca0:	1001281e 	bne	r2,zero,827144 <_dtoa_r+0xe28>
  826ca4:	d9000717 	ldw	r4,28(sp)
  826ca8:	a80b883a 	mov	r5,r21
  826cac:	0828ecc0 	call	828ecc <__mcmp>
  826cb0:	d9001617 	ldw	r4,88(sp)
  826cb4:	1021883a 	mov	r16,r2
  826cb8:	a80b883a 	mov	r5,r21
  826cbc:	0828d700 	call	828d70 <_Bfree>
  826cc0:	8000041e 	bne	r16,zero,826cd4 <_dtoa_r+0x9b8>
  826cc4:	d8801717 	ldw	r2,92(sp)
  826cc8:	1000021e 	bne	r2,zero,826cd4 <_dtoa_r+0x9b8>
  826ccc:	e004c03a 	cmpne	r2,fp,zero
  826cd0:	10011726 	beq	r2,zero,827130 <_dtoa_r+0xe14>
  826cd4:	a0010616 	blt	r20,zero,8270f0 <_dtoa_r+0xdd4>
  826cd8:	a000041e 	bne	r20,zero,826cec <_dtoa_r+0x9d0>
  826cdc:	d8c01717 	ldw	r3,92(sp)
  826ce0:	1800021e 	bne	r3,zero,826cec <_dtoa_r+0x9d0>
  826ce4:	e004c03a 	cmpne	r2,fp,zero
  826ce8:	10010126 	beq	r2,zero,8270f0 <_dtoa_r+0xdd4>
  826cec:	04023d16 	blt	zero,r16,8275e4 <_dtoa_r+0x12c8>
  826cf0:	b5c00005 	stb	r23,0(r22)
  826cf4:	d9800517 	ldw	r6,20(sp)
  826cf8:	d9000f17 	ldw	r4,60(sp)
  826cfc:	b5800044 	addi	r22,r22,1
  826d00:	3105883a 	add	r2,r6,r4
  826d04:	b0806526 	beq	r22,r2,826e9c <_dtoa_r+0xb80>
  826d08:	d9400717 	ldw	r5,28(sp)
  826d0c:	d9001617 	ldw	r4,88(sp)
  826d10:	01800284 	movi	r6,10
  826d14:	000f883a 	mov	r7,zero
  826d18:	0829a240 	call	829a24 <__multadd>
  826d1c:	d8800715 	stw	r2,28(sp)
  826d20:	d8800617 	ldw	r2,24(sp)
  826d24:	14c10c26 	beq	r2,r19,827158 <_dtoa_r+0xe3c>
  826d28:	d9400617 	ldw	r5,24(sp)
  826d2c:	d9001617 	ldw	r4,88(sp)
  826d30:	01800284 	movi	r6,10
  826d34:	000f883a 	mov	r7,zero
  826d38:	0829a240 	call	829a24 <__multadd>
  826d3c:	d9001617 	ldw	r4,88(sp)
  826d40:	980b883a 	mov	r5,r19
  826d44:	01800284 	movi	r6,10
  826d48:	000f883a 	mov	r7,zero
  826d4c:	d8800615 	stw	r2,24(sp)
  826d50:	0829a240 	call	829a24 <__multadd>
  826d54:	1027883a 	mov	r19,r2
  826d58:	003fc206 	br	826c64 <_dtoa_r+0x948>
  826d5c:	2445c83a 	sub	r2,r4,r17
  826d60:	a088983a 	sll	r4,r20,r2
  826d64:	003e4b06 	br	826694 <_dtoa_r+0x378>
  826d68:	01bfffc4 	movi	r6,-1
  826d6c:	00800044 	movi	r2,1
  826d70:	d9800e15 	stw	r6,56(sp)
  826d74:	d9800f15 	stw	r6,60(sp)
  826d78:	d8800b15 	stw	r2,44(sp)
  826d7c:	d8c01617 	ldw	r3,88(sp)
  826d80:	008005c4 	movi	r2,23
  826d84:	18001115 	stw	zero,68(r3)
  826d88:	1580082e 	bgeu	r2,r22,826dac <_dtoa_r+0xa90>
  826d8c:	00c00104 	movi	r3,4
  826d90:	0009883a 	mov	r4,zero
  826d94:	18c7883a 	add	r3,r3,r3
  826d98:	18800504 	addi	r2,r3,20
  826d9c:	21000044 	addi	r4,r4,1
  826da0:	b0bffc2e 	bgeu	r22,r2,826d94 <_dtoa_r+0xa78>
  826da4:	d9801617 	ldw	r6,88(sp)
  826da8:	31001115 	stw	r4,68(r6)
  826dac:	dc000f17 	ldw	r16,60(sp)
  826db0:	003e4b06 	br	8266e0 <_dtoa_r+0x3c4>
  826db4:	d9801717 	ldw	r6,92(sp)
  826db8:	0023883a 	mov	r17,zero
  826dbc:	31bfff04 	addi	r6,r6,-4
  826dc0:	d9801715 	stw	r6,92(sp)
  826dc4:	003df806 	br	8265a8 <_dtoa_r+0x28c>
  826dc8:	00800804 	movi	r2,32
  826dcc:	10c9c83a 	sub	r4,r2,r3
  826dd0:	00c00104 	movi	r3,4
  826dd4:	19005a16 	blt	r3,r4,826f40 <_dtoa_r+0xc24>
  826dd8:	008000c4 	movi	r2,3
  826ddc:	113f7e16 	blt	r2,r4,826bd8 <_dtoa_r+0x8bc>
  826de0:	20800704 	addi	r2,r4,28
  826de4:	003f7506 	br	826bbc <_dtoa_r+0x8a0>
  826de8:	d9801717 	ldw	r6,92(sp)
  826dec:	00800044 	movi	r2,1
  826df0:	1180a10e 	bge	r2,r6,827078 <_dtoa_r+0xd5c>
  826df4:	d9800f17 	ldw	r6,60(sp)
  826df8:	d8c01017 	ldw	r3,64(sp)
  826dfc:	30bfffc4 	addi	r2,r6,-1
  826e00:	1881c616 	blt	r3,r2,82751c <_dtoa_r+0x1200>
  826e04:	18a5c83a 	sub	r18,r3,r2
  826e08:	d8800f17 	ldw	r2,60(sp)
  826e0c:	10026216 	blt	r2,zero,827798 <_dtoa_r+0x147c>
  826e10:	dc001117 	ldw	r16,68(sp)
  826e14:	1007883a 	mov	r3,r2
  826e18:	d9800a17 	ldw	r6,40(sp)
  826e1c:	d8801117 	ldw	r2,68(sp)
  826e20:	d9001617 	ldw	r4,88(sp)
  826e24:	30cd883a 	add	r6,r6,r3
  826e28:	10c5883a 	add	r2,r2,r3
  826e2c:	01400044 	movi	r5,1
  826e30:	d9800a15 	stw	r6,40(sp)
  826e34:	d8801115 	stw	r2,68(sp)
  826e38:	08299e80 	call	8299e8 <__i2b>
  826e3c:	1027883a 	mov	r19,r2
  826e40:	003f2506 	br	826ad8 <_dtoa_r+0x7bc>
  826e44:	00c020f4 	movhi	r3,131
  826e48:	18cde004 	addi	r3,r3,14208
  826e4c:	003d6706 	br	8263ec <_dtoa_r+0xd0>
  826e50:	dd800517 	ldw	r22,20(sp)
  826e54:	04000044 	movi	r16,1
  826e58:	00000706 	br	826e78 <_dtoa_r+0xb5c>
  826e5c:	d9400717 	ldw	r5,28(sp)
  826e60:	d9001617 	ldw	r4,88(sp)
  826e64:	01800284 	movi	r6,10
  826e68:	000f883a 	mov	r7,zero
  826e6c:	0829a240 	call	829a24 <__multadd>
  826e70:	d8800715 	stw	r2,28(sp)
  826e74:	84000044 	addi	r16,r16,1
  826e78:	d9000717 	ldw	r4,28(sp)
  826e7c:	900b883a 	mov	r5,r18
  826e80:	08261040 	call	826104 <quorem>
  826e84:	15c00c04 	addi	r23,r2,48
  826e88:	b5c00005 	stb	r23,0(r22)
  826e8c:	d8c00f17 	ldw	r3,60(sp)
  826e90:	b5800044 	addi	r22,r22,1
  826e94:	80fff116 	blt	r16,r3,826e5c <_dtoa_r+0xb40>
  826e98:	d8000615 	stw	zero,24(sp)
  826e9c:	d9400717 	ldw	r5,28(sp)
  826ea0:	d9001617 	ldw	r4,88(sp)
  826ea4:	01800044 	movi	r6,1
  826ea8:	08296b40 	call	8296b4 <__lshift>
  826eac:	1009883a 	mov	r4,r2
  826eb0:	900b883a 	mov	r5,r18
  826eb4:	d8800715 	stw	r2,28(sp)
  826eb8:	0828ecc0 	call	828ecc <__mcmp>
  826ebc:	00803c0e 	bge	zero,r2,826fb0 <_dtoa_r+0xc94>
  826ec0:	b009883a 	mov	r4,r22
  826ec4:	213fffc4 	addi	r4,r4,-1
  826ec8:	21400003 	ldbu	r5,0(r4)
  826ecc:	00800e44 	movi	r2,57
  826ed0:	28c03fcc 	andi	r3,r5,255
  826ed4:	18c0201c 	xori	r3,r3,128
  826ed8:	18ffe004 	addi	r3,r3,-128
  826edc:	1881981e 	bne	r3,r2,827540 <_dtoa_r+0x1224>
  826ee0:	d9800517 	ldw	r6,20(sp)
  826ee4:	21bff71e 	bne	r4,r6,826ec4 <_dtoa_r+0xba8>
  826ee8:	d8800d17 	ldw	r2,52(sp)
  826eec:	37000044 	addi	fp,r6,1
  826ef0:	10800044 	addi	r2,r2,1
  826ef4:	d8800d15 	stw	r2,52(sp)
  826ef8:	00800c44 	movi	r2,49
  826efc:	30800005 	stb	r2,0(r6)
  826f00:	d9001617 	ldw	r4,88(sp)
  826f04:	900b883a 	mov	r5,r18
  826f08:	0828d700 	call	828d70 <_Bfree>
  826f0c:	983ecd26 	beq	r19,zero,826a44 <_dtoa_r+0x728>
  826f10:	d8c00617 	ldw	r3,24(sp)
  826f14:	18000426 	beq	r3,zero,826f28 <_dtoa_r+0xc0c>
  826f18:	1cc00326 	beq	r3,r19,826f28 <_dtoa_r+0xc0c>
  826f1c:	d9001617 	ldw	r4,88(sp)
  826f20:	180b883a 	mov	r5,r3
  826f24:	0828d700 	call	828d70 <_Bfree>
  826f28:	d9001617 	ldw	r4,88(sp)
  826f2c:	980b883a 	mov	r5,r19
  826f30:	0828d700 	call	828d70 <_Bfree>
  826f34:	003ec306 	br	826a44 <_dtoa_r+0x728>
  826f38:	1805883a 	mov	r2,r3
  826f3c:	003eeb06 	br	826aec <_dtoa_r+0x7d0>
  826f40:	d9800a17 	ldw	r6,40(sp)
  826f44:	d8c01117 	ldw	r3,68(sp)
  826f48:	20bfff04 	addi	r2,r4,-4
  826f4c:	308d883a 	add	r6,r6,r2
  826f50:	1887883a 	add	r3,r3,r2
  826f54:	80a1883a 	add	r16,r16,r2
  826f58:	d9800a15 	stw	r6,40(sp)
  826f5c:	d8c01115 	stw	r3,68(sp)
  826f60:	003f1d06 	br	826bd8 <_dtoa_r+0x8bc>
  826f64:	a03f0c1e 	bne	r20,zero,826b98 <_dtoa_r+0x87c>
  826f68:	00800434 	movhi	r2,16
  826f6c:	10bfffc4 	addi	r2,r2,-1
  826f70:	a884703a 	and	r2,r21,r2
  826f74:	103f081e 	bne	r2,zero,826b98 <_dtoa_r+0x87c>
  826f78:	a89ffc2c 	andhi	r2,r21,32752
  826f7c:	103f0626 	beq	r2,zero,826b98 <_dtoa_r+0x87c>
  826f80:	d8c01117 	ldw	r3,68(sp)
  826f84:	d9000a17 	ldw	r4,40(sp)
  826f88:	18c00044 	addi	r3,r3,1
  826f8c:	21000044 	addi	r4,r4,1
  826f90:	d8c01115 	stw	r3,68(sp)
  826f94:	d9000a15 	stw	r4,40(sp)
  826f98:	003f0006 	br	826b9c <_dtoa_r+0x880>
  826f9c:	d9400717 	ldw	r5,28(sp)
  826fa0:	d9001617 	ldw	r4,88(sp)
  826fa4:	0829b240 	call	829b24 <__pow5mult>
  826fa8:	d8800715 	stw	r2,28(sp)
  826fac:	003eed06 	br	826b64 <_dtoa_r+0x848>
  826fb0:	1000021e 	bne	r2,zero,826fbc <_dtoa_r+0xca0>
  826fb4:	b880004c 	andi	r2,r23,1
  826fb8:	103fc11e 	bne	r2,zero,826ec0 <_dtoa_r+0xba4>
  826fbc:	b5bfffc4 	addi	r22,r22,-1
  826fc0:	b0c00007 	ldb	r3,0(r22)
  826fc4:	00800c04 	movi	r2,48
  826fc8:	18bffc26 	beq	r3,r2,826fbc <_dtoa_r+0xca0>
  826fcc:	b7000044 	addi	fp,r22,1
  826fd0:	003fcb06 	br	826f00 <_dtoa_r+0xbe4>
  826fd4:	d9800d17 	ldw	r6,52(sp)
  826fd8:	018fc83a 	sub	r7,zero,r6
  826fdc:	3801f726 	beq	r7,zero,8277bc <_dtoa_r+0x14a0>
  826fe0:	398003cc 	andi	r6,r7,15
  826fe4:	300c90fa 	slli	r6,r6,3
  826fe8:	014020f4 	movhi	r5,131
  826fec:	294e7a04 	addi	r5,r5,14824
  826ff0:	d9001217 	ldw	r4,72(sp)
  826ff4:	314d883a 	add	r6,r6,r5
  826ff8:	30c00117 	ldw	r3,4(r6)
  826ffc:	30800017 	ldw	r2,0(r6)
  827000:	d9401317 	ldw	r5,76(sp)
  827004:	3821d13a 	srai	r16,r7,4
  827008:	100d883a 	mov	r6,r2
  82700c:	180f883a 	mov	r7,r3
  827010:	08226e80 	call	8226e8 <__muldf3>
  827014:	1011883a 	mov	r8,r2
  827018:	1813883a 	mov	r9,r3
  82701c:	1029883a 	mov	r20,r2
  827020:	182b883a 	mov	r21,r3
  827024:	8001e526 	beq	r16,zero,8277bc <_dtoa_r+0x14a0>
  827028:	05800084 	movi	r22,2
  82702c:	044020f4 	movhi	r17,131
  827030:	8c4eac04 	addi	r17,r17,15024
  827034:	8080004c 	andi	r2,r16,1
  827038:	1005003a 	cmpeq	r2,r2,zero
  82703c:	1000081e 	bne	r2,zero,827060 <_dtoa_r+0xd44>
  827040:	89800017 	ldw	r6,0(r17)
  827044:	89c00117 	ldw	r7,4(r17)
  827048:	480b883a 	mov	r5,r9
  82704c:	4009883a 	mov	r4,r8
  827050:	08226e80 	call	8226e8 <__muldf3>
  827054:	1011883a 	mov	r8,r2
  827058:	b5800044 	addi	r22,r22,1
  82705c:	1813883a 	mov	r9,r3
  827060:	8021d07a 	srai	r16,r16,1
  827064:	8c400204 	addi	r17,r17,8
  827068:	803ff21e 	bne	r16,zero,827034 <_dtoa_r+0xd18>
  82706c:	4029883a 	mov	r20,r8
  827070:	482b883a 	mov	r21,r9
  827074:	003dca06 	br	8267a0 <_dtoa_r+0x484>
  827078:	d9000817 	ldw	r4,32(sp)
  82707c:	2005003a 	cmpeq	r2,r4,zero
  827080:	1001f61e 	bne	r2,zero,82785c <_dtoa_r+0x1540>
  827084:	dc001117 	ldw	r16,68(sp)
  827088:	dc801017 	ldw	r18,64(sp)
  82708c:	18c10cc4 	addi	r3,r3,1075
  827090:	003f6106 	br	826e18 <_dtoa_r+0xafc>
  827094:	d8000b15 	stw	zero,44(sp)
  827098:	d9802617 	ldw	r6,152(sp)
  82709c:	d8c00d17 	ldw	r3,52(sp)
  8270a0:	30800044 	addi	r2,r6,1
  8270a4:	18ad883a 	add	r22,r3,r2
  8270a8:	b13fffc4 	addi	r4,r22,-1
  8270ac:	d9000e15 	stw	r4,56(sp)
  8270b0:	0581f60e 	bge	zero,r22,82788c <_dtoa_r+0x1570>
  8270b4:	dd800f15 	stw	r22,60(sp)
  8270b8:	003f3006 	br	826d7c <_dtoa_r+0xa60>
  8270bc:	d8000b15 	stw	zero,44(sp)
  8270c0:	d9002617 	ldw	r4,152(sp)
  8270c4:	0101eb0e 	bge	zero,r4,827874 <_dtoa_r+0x1558>
  8270c8:	202d883a 	mov	r22,r4
  8270cc:	d9000e15 	stw	r4,56(sp)
  8270d0:	d9000f15 	stw	r4,60(sp)
  8270d4:	003f2906 	br	826d7c <_dtoa_r+0xa60>
  8270d8:	01800044 	movi	r6,1
  8270dc:	d9800b15 	stw	r6,44(sp)
  8270e0:	003ff706 	br	8270c0 <_dtoa_r+0xda4>
  8270e4:	01000044 	movi	r4,1
  8270e8:	d9000b15 	stw	r4,44(sp)
  8270ec:	003fea06 	br	827098 <_dtoa_r+0xd7c>
  8270f0:	04000c0e 	bge	zero,r16,827124 <_dtoa_r+0xe08>
  8270f4:	d9400717 	ldw	r5,28(sp)
  8270f8:	d9001617 	ldw	r4,88(sp)
  8270fc:	01800044 	movi	r6,1
  827100:	08296b40 	call	8296b4 <__lshift>
  827104:	1009883a 	mov	r4,r2
  827108:	900b883a 	mov	r5,r18
  82710c:	d8800715 	stw	r2,28(sp)
  827110:	0828ecc0 	call	828ecc <__mcmp>
  827114:	0081e00e 	bge	zero,r2,827898 <_dtoa_r+0x157c>
  827118:	bdc00044 	addi	r23,r23,1
  82711c:	00800e84 	movi	r2,58
  827120:	b881a226 	beq	r23,r2,8277ac <_dtoa_r+0x1490>
  827124:	b7000044 	addi	fp,r22,1
  827128:	b5c00005 	stb	r23,0(r22)
  82712c:	003f7406 	br	826f00 <_dtoa_r+0xbe4>
  827130:	00800e44 	movi	r2,57
  827134:	b8819d26 	beq	r23,r2,8277ac <_dtoa_r+0x1490>
  827138:	053ffa0e 	bge	zero,r20,827124 <_dtoa_r+0xe08>
  82713c:	8dc00c44 	addi	r23,r17,49
  827140:	003ff806 	br	827124 <_dtoa_r+0xe08>
  827144:	d9001617 	ldw	r4,88(sp)
  827148:	a80b883a 	mov	r5,r21
  82714c:	04000044 	movi	r16,1
  827150:	0828d700 	call	828d70 <_Bfree>
  827154:	003edf06 	br	826cd4 <_dtoa_r+0x9b8>
  827158:	d9001617 	ldw	r4,88(sp)
  82715c:	980b883a 	mov	r5,r19
  827160:	01800284 	movi	r6,10
  827164:	000f883a 	mov	r7,zero
  827168:	0829a240 	call	829a24 <__multadd>
  82716c:	1027883a 	mov	r19,r2
  827170:	d8800615 	stw	r2,24(sp)
  827174:	003ebb06 	br	826c64 <_dtoa_r+0x948>
  827178:	d9801117 	ldw	r6,68(sp)
  82717c:	d8800d17 	ldw	r2,52(sp)
  827180:	d8000915 	stw	zero,36(sp)
  827184:	308dc83a 	sub	r6,r6,r2
  827188:	0087c83a 	sub	r3,zero,r2
  82718c:	d9801115 	stw	r6,68(sp)
  827190:	d8c01015 	stw	r3,64(sp)
  827194:	003cfe06 	br	826590 <_dtoa_r+0x274>
  827198:	018dc83a 	sub	r6,zero,r6
  82719c:	d9801115 	stw	r6,68(sp)
  8271a0:	d8000a15 	stw	zero,40(sp)
  8271a4:	003cf306 	br	826574 <_dtoa_r+0x258>
  8271a8:	d9000d17 	ldw	r4,52(sp)
  8271ac:	082bda00 	call	82bda0 <__floatsidf>
  8271b0:	880b883a 	mov	r5,r17
  8271b4:	8009883a 	mov	r4,r16
  8271b8:	180f883a 	mov	r7,r3
  8271bc:	100d883a 	mov	r6,r2
  8271c0:	082bc080 	call	82bc08 <__nedf2>
  8271c4:	103ce126 	beq	r2,zero,82654c <_dtoa_r+0x230>
  8271c8:	d9800d17 	ldw	r6,52(sp)
  8271cc:	31bfffc4 	addi	r6,r6,-1
  8271d0:	d9800d15 	stw	r6,52(sp)
  8271d4:	003cdd06 	br	82654c <_dtoa_r+0x230>
  8271d8:	d9000717 	ldw	r4,28(sp)
  8271dc:	900b883a 	mov	r5,r18
  8271e0:	0828ecc0 	call	828ecc <__mcmp>
  8271e4:	103e8d0e 	bge	r2,zero,826c1c <_dtoa_r+0x900>
  8271e8:	d9400717 	ldw	r5,28(sp)
  8271ec:	d9001617 	ldw	r4,88(sp)
  8271f0:	01800284 	movi	r6,10
  8271f4:	000f883a 	mov	r7,zero
  8271f8:	0829a240 	call	829a24 <__multadd>
  8271fc:	d9800d17 	ldw	r6,52(sp)
  827200:	d8800715 	stw	r2,28(sp)
  827204:	31bfffc4 	addi	r6,r6,-1
  827208:	d9800d15 	stw	r6,52(sp)
  82720c:	b001a71e 	bne	r22,zero,8278ac <_dtoa_r+0x1590>
  827210:	d8800e17 	ldw	r2,56(sp)
  827214:	d8800f15 	stw	r2,60(sp)
  827218:	003e8006 	br	826c1c <_dtoa_r+0x900>
  82721c:	90800417 	ldw	r2,16(r18)
  827220:	1085883a 	add	r2,r2,r2
  827224:	1085883a 	add	r2,r2,r2
  827228:	1485883a 	add	r2,r2,r18
  82722c:	11000417 	ldw	r4,16(r2)
  827230:	0828d980 	call	828d98 <__hi0bits>
  827234:	00c00804 	movi	r3,32
  827238:	1887c83a 	sub	r3,r3,r2
  82723c:	003e5a06 	br	826ba8 <_dtoa_r+0x88c>
  827240:	d9400717 	ldw	r5,28(sp)
  827244:	d9801017 	ldw	r6,64(sp)
  827248:	d9001617 	ldw	r4,88(sp)
  82724c:	0829b240 	call	829b24 <__pow5mult>
  827250:	d8800715 	stw	r2,28(sp)
  827254:	003e4306 	br	826b64 <_dtoa_r+0x848>
  827258:	d9800f17 	ldw	r6,60(sp)
  82725c:	d8800d17 	ldw	r2,52(sp)
  827260:	d9800315 	stw	r6,12(sp)
  827264:	d8800415 	stw	r2,16(sp)
  827268:	d8c00b17 	ldw	r3,44(sp)
  82726c:	1805003a 	cmpeq	r2,r3,zero
  827270:	1000e21e 	bne	r2,zero,8275fc <_dtoa_r+0x12e0>
  827274:	d9000317 	ldw	r4,12(sp)
  827278:	0005883a 	mov	r2,zero
  82727c:	00cff834 	movhi	r3,16352
  827280:	200c90fa 	slli	r6,r4,3
  827284:	010020f4 	movhi	r4,131
  827288:	210e7a04 	addi	r4,r4,14824
  82728c:	180b883a 	mov	r5,r3
  827290:	310d883a 	add	r6,r6,r4
  827294:	327fff17 	ldw	r9,-4(r6)
  827298:	323ffe17 	ldw	r8,-8(r6)
  82729c:	1009883a 	mov	r4,r2
  8272a0:	480f883a 	mov	r7,r9
  8272a4:	400d883a 	mov	r6,r8
  8272a8:	082b9280 	call	82b928 <__divdf3>
  8272ac:	180b883a 	mov	r5,r3
  8272b0:	b00d883a 	mov	r6,r22
  8272b4:	b80f883a 	mov	r7,r23
  8272b8:	1009883a 	mov	r4,r2
  8272bc:	08225f40 	call	8225f4 <__subdf3>
  8272c0:	a80b883a 	mov	r5,r21
  8272c4:	a009883a 	mov	r4,r20
  8272c8:	d8c01915 	stw	r3,100(sp)
  8272cc:	d8801815 	stw	r2,96(sp)
  8272d0:	0822b340 	call	822b34 <__fixdfsi>
  8272d4:	1009883a 	mov	r4,r2
  8272d8:	1027883a 	mov	r19,r2
  8272dc:	082bda00 	call	82bda0 <__floatsidf>
  8272e0:	a80b883a 	mov	r5,r21
  8272e4:	a009883a 	mov	r4,r20
  8272e8:	180f883a 	mov	r7,r3
  8272ec:	100d883a 	mov	r6,r2
  8272f0:	08225f40 	call	8225f4 <__subdf3>
  8272f4:	d9801817 	ldw	r6,96(sp)
  8272f8:	1823883a 	mov	r17,r3
  8272fc:	d8801415 	stw	r2,80(sp)
  827300:	302d883a 	mov	r22,r6
  827304:	d9800517 	ldw	r6,20(sp)
  827308:	9cc00c04 	addi	r19,r19,48
  82730c:	dc401515 	stw	r17,84(sp)
  827310:	d8c01917 	ldw	r3,100(sp)
  827314:	34c00005 	stb	r19,0(r6)
  827318:	d8800517 	ldw	r2,20(sp)
  82731c:	d9401917 	ldw	r5,100(sp)
  827320:	d9801417 	ldw	r6,80(sp)
  827324:	b009883a 	mov	r4,r22
  827328:	880f883a 	mov	r7,r17
  82732c:	182f883a 	mov	r23,r3
  827330:	17000044 	addi	fp,r2,1
  827334:	0822aac0 	call	822aac <__gtdf2>
  827338:	00804e16 	blt	zero,r2,827474 <_dtoa_r+0x1158>
  82733c:	d9801417 	ldw	r6,80(sp)
  827340:	0005883a 	mov	r2,zero
  827344:	00cffc34 	movhi	r3,16368
  827348:	180b883a 	mov	r5,r3
  82734c:	880f883a 	mov	r7,r17
  827350:	1009883a 	mov	r4,r2
  827354:	08225f40 	call	8225f4 <__subdf3>
  827358:	d9401917 	ldw	r5,100(sp)
  82735c:	180f883a 	mov	r7,r3
  827360:	b009883a 	mov	r4,r22
  827364:	100d883a 	mov	r6,r2
  827368:	0822aac0 	call	822aac <__gtdf2>
  82736c:	00bda216 	blt	zero,r2,8269f8 <_dtoa_r+0x6dc>
  827370:	d8c00317 	ldw	r3,12(sp)
  827374:	00800044 	movi	r2,1
  827378:	10c01216 	blt	r2,r3,8273c4 <_dtoa_r+0x10a8>
  82737c:	003d4506 	br	826894 <_dtoa_r+0x578>
  827380:	d9801417 	ldw	r6,80(sp)
  827384:	0005883a 	mov	r2,zero
  827388:	00cffc34 	movhi	r3,16368
  82738c:	180b883a 	mov	r5,r3
  827390:	880f883a 	mov	r7,r17
  827394:	1009883a 	mov	r4,r2
  827398:	08225f40 	call	8225f4 <__subdf3>
  82739c:	d9c01b17 	ldw	r7,108(sp)
  8273a0:	180b883a 	mov	r5,r3
  8273a4:	1009883a 	mov	r4,r2
  8273a8:	b00d883a 	mov	r6,r22
  8273ac:	082bd180 	call	82bd18 <__ltdf2>
  8273b0:	103d9116 	blt	r2,zero,8269f8 <_dtoa_r+0x6dc>
  8273b4:	d9800517 	ldw	r6,20(sp)
  8273b8:	d9000317 	ldw	r4,12(sp)
  8273bc:	3105883a 	add	r2,r6,r4
  8273c0:	e0bd3426 	beq	fp,r2,826894 <_dtoa_r+0x578>
  8273c4:	04500934 	movhi	r17,16420
  8273c8:	0021883a 	mov	r16,zero
  8273cc:	b80b883a 	mov	r5,r23
  8273d0:	b009883a 	mov	r4,r22
  8273d4:	800d883a 	mov	r6,r16
  8273d8:	880f883a 	mov	r7,r17
  8273dc:	08226e80 	call	8226e8 <__muldf3>
  8273e0:	d9401517 	ldw	r5,84(sp)
  8273e4:	d9001417 	ldw	r4,80(sp)
  8273e8:	880f883a 	mov	r7,r17
  8273ec:	000d883a 	mov	r6,zero
  8273f0:	d8801a15 	stw	r2,104(sp)
  8273f4:	d8c01b15 	stw	r3,108(sp)
  8273f8:	08226e80 	call	8226e8 <__muldf3>
  8273fc:	180b883a 	mov	r5,r3
  827400:	1009883a 	mov	r4,r2
  827404:	1823883a 	mov	r17,r3
  827408:	1021883a 	mov	r16,r2
  82740c:	0822b340 	call	822b34 <__fixdfsi>
  827410:	1009883a 	mov	r4,r2
  827414:	102b883a 	mov	r21,r2
  827418:	082bda00 	call	82bda0 <__floatsidf>
  82741c:	880b883a 	mov	r5,r17
  827420:	8009883a 	mov	r4,r16
  827424:	180f883a 	mov	r7,r3
  827428:	100d883a 	mov	r6,r2
  82742c:	08225f40 	call	8225f4 <__subdf3>
  827430:	1021883a 	mov	r16,r2
  827434:	d9001b17 	ldw	r4,108(sp)
  827438:	1823883a 	mov	r17,r3
  82743c:	dc001415 	stw	r16,80(sp)
  827440:	ad400c04 	addi	r21,r21,48
  827444:	dc401515 	stw	r17,84(sp)
  827448:	d8801a17 	ldw	r2,104(sp)
  82744c:	e5400005 	stb	r21,0(fp)
  827450:	202f883a 	mov	r23,r4
  827454:	d9c01b17 	ldw	r7,108(sp)
  827458:	d9001417 	ldw	r4,80(sp)
  82745c:	880b883a 	mov	r5,r17
  827460:	100d883a 	mov	r6,r2
  827464:	102d883a 	mov	r22,r2
  827468:	e7000044 	addi	fp,fp,1
  82746c:	082bd180 	call	82bd18 <__ltdf2>
  827470:	103fc30e 	bge	r2,zero,827380 <_dtoa_r+0x1064>
  827474:	d9000417 	ldw	r4,16(sp)
  827478:	d9000d15 	stw	r4,52(sp)
  82747c:	003d7106 	br	826a44 <_dtoa_r+0x728>
  827480:	d9801717 	ldw	r6,92(sp)
  827484:	00800084 	movi	r2,2
  827488:	11bde60e 	bge	r2,r6,826c24 <_dtoa_r+0x908>
  82748c:	203cfb1e 	bne	r4,zero,82687c <_dtoa_r+0x560>
  827490:	d9001617 	ldw	r4,88(sp)
  827494:	900b883a 	mov	r5,r18
  827498:	01800144 	movi	r6,5
  82749c:	000f883a 	mov	r7,zero
  8274a0:	0829a240 	call	829a24 <__multadd>
  8274a4:	d9000717 	ldw	r4,28(sp)
  8274a8:	100b883a 	mov	r5,r2
  8274ac:	1025883a 	mov	r18,r2
  8274b0:	0828ecc0 	call	828ecc <__mcmp>
  8274b4:	00bcf10e 	bge	zero,r2,82687c <_dtoa_r+0x560>
  8274b8:	d8c00d17 	ldw	r3,52(sp)
  8274bc:	d9000517 	ldw	r4,20(sp)
  8274c0:	d8000615 	stw	zero,24(sp)
  8274c4:	18c00044 	addi	r3,r3,1
  8274c8:	d8c00d15 	stw	r3,52(sp)
  8274cc:	00800c44 	movi	r2,49
  8274d0:	27000044 	addi	fp,r4,1
  8274d4:	20800005 	stb	r2,0(r4)
  8274d8:	003e8906 	br	826f00 <_dtoa_r+0xbe4>
  8274dc:	d8c00517 	ldw	r3,20(sp)
  8274e0:	003bc206 	br	8263ec <_dtoa_r+0xd0>
  8274e4:	018020f4 	movhi	r6,131
  8274e8:	318eac04 	addi	r6,r6,15024
  8274ec:	30c00917 	ldw	r3,36(r6)
  8274f0:	30800817 	ldw	r2,32(r6)
  8274f4:	d9001217 	ldw	r4,72(sp)
  8274f8:	d9401317 	ldw	r5,76(sp)
  8274fc:	180f883a 	mov	r7,r3
  827500:	100d883a 	mov	r6,r2
  827504:	082b9280 	call	82b928 <__divdf3>
  827508:	948003cc 	andi	r18,r18,15
  82750c:	058000c4 	movi	r22,3
  827510:	1029883a 	mov	r20,r2
  827514:	182b883a 	mov	r21,r3
  827518:	003c8906 	br	826740 <_dtoa_r+0x424>
  82751c:	d9001017 	ldw	r4,64(sp)
  827520:	d9800917 	ldw	r6,36(sp)
  827524:	0025883a 	mov	r18,zero
  827528:	1105c83a 	sub	r2,r2,r4
  82752c:	2089883a 	add	r4,r4,r2
  827530:	308d883a 	add	r6,r6,r2
  827534:	d9001015 	stw	r4,64(sp)
  827538:	d9800915 	stw	r6,36(sp)
  82753c:	003e3206 	br	826e08 <_dtoa_r+0xaec>
  827540:	28800044 	addi	r2,r5,1
  827544:	27000044 	addi	fp,r4,1
  827548:	20800005 	stb	r2,0(r4)
  82754c:	003e6c06 	br	826f00 <_dtoa_r+0xbe4>
  827550:	d8800f17 	ldw	r2,60(sp)
  827554:	00bce016 	blt	zero,r2,8268d8 <_dtoa_r+0x5bc>
  827558:	d9800f17 	ldw	r6,60(sp)
  82755c:	303cc51e 	bne	r6,zero,826874 <_dtoa_r+0x558>
  827560:	0005883a 	mov	r2,zero
  827564:	00d00534 	movhi	r3,16404
  827568:	980b883a 	mov	r5,r19
  82756c:	180f883a 	mov	r7,r3
  827570:	9009883a 	mov	r4,r18
  827574:	100d883a 	mov	r6,r2
  827578:	08226e80 	call	8226e8 <__muldf3>
  82757c:	180b883a 	mov	r5,r3
  827580:	a80f883a 	mov	r7,r21
  827584:	1009883a 	mov	r4,r2
  827588:	a00d883a 	mov	r6,r20
  82758c:	082bc900 	call	82bc90 <__gedf2>
  827590:	103cb80e 	bge	r2,zero,826874 <_dtoa_r+0x558>
  827594:	0027883a 	mov	r19,zero
  827598:	0025883a 	mov	r18,zero
  82759c:	003fc606 	br	8274b8 <_dtoa_r+0x119c>
  8275a0:	99400117 	ldw	r5,4(r19)
  8275a4:	d9001617 	ldw	r4,88(sp)
  8275a8:	08292f00 	call	8292f0 <_Balloc>
  8275ac:	99800417 	ldw	r6,16(r19)
  8275b0:	11000304 	addi	r4,r2,12
  8275b4:	99400304 	addi	r5,r19,12
  8275b8:	318d883a 	add	r6,r6,r6
  8275bc:	318d883a 	add	r6,r6,r6
  8275c0:	31800204 	addi	r6,r6,8
  8275c4:	1023883a 	mov	r17,r2
  8275c8:	0828b580 	call	828b58 <memcpy>
  8275cc:	d9001617 	ldw	r4,88(sp)
  8275d0:	880b883a 	mov	r5,r17
  8275d4:	01800044 	movi	r6,1
  8275d8:	08296b40 	call	8296b4 <__lshift>
  8275dc:	100b883a 	mov	r5,r2
  8275e0:	003d9c06 	br	826c54 <_dtoa_r+0x938>
  8275e4:	00800e44 	movi	r2,57
  8275e8:	b8807026 	beq	r23,r2,8277ac <_dtoa_r+0x1490>
  8275ec:	b8800044 	addi	r2,r23,1
  8275f0:	b7000044 	addi	fp,r22,1
  8275f4:	b0800005 	stb	r2,0(r22)
  8275f8:	003e4106 	br	826f00 <_dtoa_r+0xbe4>
  8275fc:	d8800317 	ldw	r2,12(sp)
  827600:	018020f4 	movhi	r6,131
  827604:	318e7a04 	addi	r6,r6,14824
  827608:	b009883a 	mov	r4,r22
  82760c:	100e90fa 	slli	r7,r2,3
  827610:	b80b883a 	mov	r5,r23
  827614:	398f883a 	add	r7,r7,r6
  827618:	38bffe17 	ldw	r2,-8(r7)
  82761c:	d9800517 	ldw	r6,20(sp)
  827620:	38ffff17 	ldw	r3,-4(r7)
  827624:	37000044 	addi	fp,r6,1
  827628:	180f883a 	mov	r7,r3
  82762c:	100d883a 	mov	r6,r2
  827630:	08226e80 	call	8226e8 <__muldf3>
  827634:	a80b883a 	mov	r5,r21
  827638:	a009883a 	mov	r4,r20
  82763c:	182f883a 	mov	r23,r3
  827640:	102d883a 	mov	r22,r2
  827644:	0822b340 	call	822b34 <__fixdfsi>
  827648:	1009883a 	mov	r4,r2
  82764c:	1027883a 	mov	r19,r2
  827650:	082bda00 	call	82bda0 <__floatsidf>
  827654:	a80b883a 	mov	r5,r21
  827658:	a009883a 	mov	r4,r20
  82765c:	180f883a 	mov	r7,r3
  827660:	100d883a 	mov	r6,r2
  827664:	08225f40 	call	8225f4 <__subdf3>
  827668:	180b883a 	mov	r5,r3
  82766c:	d8c00517 	ldw	r3,20(sp)
  827670:	9cc00c04 	addi	r19,r19,48
  827674:	1009883a 	mov	r4,r2
  827678:	1cc00005 	stb	r19,0(r3)
  82767c:	2021883a 	mov	r16,r4
  827680:	d9000317 	ldw	r4,12(sp)
  827684:	00800044 	movi	r2,1
  827688:	2823883a 	mov	r17,r5
  82768c:	20802226 	beq	r4,r2,827718 <_dtoa_r+0x13fc>
  827690:	1029883a 	mov	r20,r2
  827694:	0005883a 	mov	r2,zero
  827698:	00d00934 	movhi	r3,16420
  82769c:	180f883a 	mov	r7,r3
  8276a0:	100d883a 	mov	r6,r2
  8276a4:	880b883a 	mov	r5,r17
  8276a8:	8009883a 	mov	r4,r16
  8276ac:	08226e80 	call	8226e8 <__muldf3>
  8276b0:	180b883a 	mov	r5,r3
  8276b4:	1009883a 	mov	r4,r2
  8276b8:	1823883a 	mov	r17,r3
  8276bc:	1021883a 	mov	r16,r2
  8276c0:	0822b340 	call	822b34 <__fixdfsi>
  8276c4:	1009883a 	mov	r4,r2
  8276c8:	102b883a 	mov	r21,r2
  8276cc:	082bda00 	call	82bda0 <__floatsidf>
  8276d0:	880b883a 	mov	r5,r17
  8276d4:	8009883a 	mov	r4,r16
  8276d8:	180f883a 	mov	r7,r3
  8276dc:	100d883a 	mov	r6,r2
  8276e0:	08225f40 	call	8225f4 <__subdf3>
  8276e4:	180b883a 	mov	r5,r3
  8276e8:	d8c00517 	ldw	r3,20(sp)
  8276ec:	1009883a 	mov	r4,r2
  8276f0:	ad400c04 	addi	r21,r21,48
  8276f4:	1d05883a 	add	r2,r3,r20
  8276f8:	15400005 	stb	r21,0(r2)
  8276fc:	2021883a 	mov	r16,r4
  827700:	d9000317 	ldw	r4,12(sp)
  827704:	a5000044 	addi	r20,r20,1
  827708:	2823883a 	mov	r17,r5
  82770c:	a13fe11e 	bne	r20,r4,827694 <_dtoa_r+0x1378>
  827710:	e505883a 	add	r2,fp,r20
  827714:	173fffc4 	addi	fp,r2,-1
  827718:	0025883a 	mov	r18,zero
  82771c:	04cff834 	movhi	r19,16352
  827720:	b009883a 	mov	r4,r22
  827724:	b80b883a 	mov	r5,r23
  827728:	900d883a 	mov	r6,r18
  82772c:	980f883a 	mov	r7,r19
  827730:	08226740 	call	822674 <__adddf3>
  827734:	180b883a 	mov	r5,r3
  827738:	1009883a 	mov	r4,r2
  82773c:	800d883a 	mov	r6,r16
  827740:	880f883a 	mov	r7,r17
  827744:	082bd180 	call	82bd18 <__ltdf2>
  827748:	103cab16 	blt	r2,zero,8269f8 <_dtoa_r+0x6dc>
  82774c:	0009883a 	mov	r4,zero
  827750:	980b883a 	mov	r5,r19
  827754:	b80f883a 	mov	r7,r23
  827758:	b00d883a 	mov	r6,r22
  82775c:	08225f40 	call	8225f4 <__subdf3>
  827760:	180b883a 	mov	r5,r3
  827764:	880f883a 	mov	r7,r17
  827768:	1009883a 	mov	r4,r2
  82776c:	800d883a 	mov	r6,r16
  827770:	0822aac0 	call	822aac <__gtdf2>
  827774:	00bc470e 	bge	zero,r2,826894 <_dtoa_r+0x578>
  827778:	00c00c04 	movi	r3,48
  82777c:	e73fffc4 	addi	fp,fp,-1
  827780:	e0800007 	ldb	r2,0(fp)
  827784:	10fffd26 	beq	r2,r3,82777c <_dtoa_r+0x1460>
  827788:	d9800417 	ldw	r6,16(sp)
  82778c:	e7000044 	addi	fp,fp,1
  827790:	d9800d15 	stw	r6,52(sp)
  827794:	003cab06 	br	826a44 <_dtoa_r+0x728>
  827798:	d8c00f17 	ldw	r3,60(sp)
  82779c:	d9001117 	ldw	r4,68(sp)
  8277a0:	20e1c83a 	sub	r16,r4,r3
  8277a4:	0007883a 	mov	r3,zero
  8277a8:	003d9b06 	br	826e18 <_dtoa_r+0xafc>
  8277ac:	00800e44 	movi	r2,57
  8277b0:	b0800005 	stb	r2,0(r22)
  8277b4:	b5800044 	addi	r22,r22,1
  8277b8:	003dc106 	br	826ec0 <_dtoa_r+0xba4>
  8277bc:	05800084 	movi	r22,2
  8277c0:	003bf706 	br	8267a0 <_dtoa_r+0x484>
  8277c4:	d9000f17 	ldw	r4,60(sp)
  8277c8:	013c000e 	bge	zero,r4,8267cc <_dtoa_r+0x4b0>
  8277cc:	d9800e17 	ldw	r6,56(sp)
  8277d0:	01bc300e 	bge	zero,r6,826894 <_dtoa_r+0x578>
  8277d4:	0005883a 	mov	r2,zero
  8277d8:	00d00934 	movhi	r3,16420
  8277dc:	a80b883a 	mov	r5,r21
  8277e0:	180f883a 	mov	r7,r3
  8277e4:	a009883a 	mov	r4,r20
  8277e8:	100d883a 	mov	r6,r2
  8277ec:	08226e80 	call	8226e8 <__muldf3>
  8277f0:	b1000044 	addi	r4,r22,1
  8277f4:	1021883a 	mov	r16,r2
  8277f8:	1823883a 	mov	r17,r3
  8277fc:	082bda00 	call	82bda0 <__floatsidf>
  827800:	880b883a 	mov	r5,r17
  827804:	8009883a 	mov	r4,r16
  827808:	180f883a 	mov	r7,r3
  82780c:	100d883a 	mov	r6,r2
  827810:	08226e80 	call	8226e8 <__muldf3>
  827814:	0011883a 	mov	r8,zero
  827818:	02500734 	movhi	r9,16412
  82781c:	180b883a 	mov	r5,r3
  827820:	480f883a 	mov	r7,r9
  827824:	1009883a 	mov	r4,r2
  827828:	400d883a 	mov	r6,r8
  82782c:	08226740 	call	822674 <__adddf3>
  827830:	102d883a 	mov	r22,r2
  827834:	00bf3034 	movhi	r2,64704
  827838:	10ef883a 	add	r23,r2,r3
  82783c:	d8800d17 	ldw	r2,52(sp)
  827840:	d8c00e17 	ldw	r3,56(sp)
  827844:	8029883a 	mov	r20,r16
  827848:	10bfffc4 	addi	r2,r2,-1
  82784c:	882b883a 	mov	r21,r17
  827850:	d8800415 	stw	r2,16(sp)
  827854:	d8c00315 	stw	r3,12(sp)
  827858:	003e8306 	br	827268 <_dtoa_r+0xf4c>
  82785c:	d8800117 	ldw	r2,4(sp)
  827860:	dc001117 	ldw	r16,68(sp)
  827864:	dc801017 	ldw	r18,64(sp)
  827868:	00c00d84 	movi	r3,54
  82786c:	1887c83a 	sub	r3,r3,r2
  827870:	003d6906 	br	826e18 <_dtoa_r+0xafc>
  827874:	01800044 	movi	r6,1
  827878:	3021883a 	mov	r16,r6
  82787c:	d9800f15 	stw	r6,60(sp)
  827880:	d9802615 	stw	r6,152(sp)
  827884:	d9800e15 	stw	r6,56(sp)
  827888:	003b9306 	br	8266d8 <_dtoa_r+0x3bc>
  82788c:	b021883a 	mov	r16,r22
  827890:	dd800f15 	stw	r22,60(sp)
  827894:	003b9006 	br	8266d8 <_dtoa_r+0x3bc>
  827898:	103e221e 	bne	r2,zero,827124 <_dtoa_r+0xe08>
  82789c:	b880004c 	andi	r2,r23,1
  8278a0:	1005003a 	cmpeq	r2,r2,zero
  8278a4:	103e1f1e 	bne	r2,zero,827124 <_dtoa_r+0xe08>
  8278a8:	003e1b06 	br	827118 <_dtoa_r+0xdfc>
  8278ac:	d9001617 	ldw	r4,88(sp)
  8278b0:	980b883a 	mov	r5,r19
  8278b4:	01800284 	movi	r6,10
  8278b8:	000f883a 	mov	r7,zero
  8278bc:	0829a240 	call	829a24 <__multadd>
  8278c0:	d8c00e17 	ldw	r3,56(sp)
  8278c4:	1027883a 	mov	r19,r2
  8278c8:	d8c00f15 	stw	r3,60(sp)
  8278cc:	003cd306 	br	826c1c <_dtoa_r+0x900>

008278d0 <_fflush_r>:
  8278d0:	defffb04 	addi	sp,sp,-20
  8278d4:	dcc00315 	stw	r19,12(sp)
  8278d8:	dc800215 	stw	r18,8(sp)
  8278dc:	dfc00415 	stw	ra,16(sp)
  8278e0:	dc400115 	stw	r17,4(sp)
  8278e4:	dc000015 	stw	r16,0(sp)
  8278e8:	2027883a 	mov	r19,r4
  8278ec:	2825883a 	mov	r18,r5
  8278f0:	20000226 	beq	r4,zero,8278fc <_fflush_r+0x2c>
  8278f4:	20800e17 	ldw	r2,56(r4)
  8278f8:	10005626 	beq	r2,zero,827a54 <_fflush_r+0x184>
  8278fc:	9100030b 	ldhu	r4,12(r18)
  827900:	20ffffcc 	andi	r3,r4,65535
  827904:	18e0001c 	xori	r3,r3,32768
  827908:	18e00004 	addi	r3,r3,-32768
  82790c:	1880020c 	andi	r2,r3,8
  827910:	1000261e 	bne	r2,zero,8279ac <_fflush_r+0xdc>
  827914:	90c00117 	ldw	r3,4(r18)
  827918:	20820014 	ori	r2,r4,2048
  82791c:	9080030d 	sth	r2,12(r18)
  827920:	1009883a 	mov	r4,r2
  827924:	00c0400e 	bge	zero,r3,827a28 <_fflush_r+0x158>
  827928:	92000a17 	ldw	r8,40(r18)
  82792c:	40004026 	beq	r8,zero,827a30 <_fflush_r+0x160>
  827930:	2084000c 	andi	r2,r4,4096
  827934:	10005326 	beq	r2,zero,827a84 <_fflush_r+0x1b4>
  827938:	94001417 	ldw	r16,80(r18)
  82793c:	9080030b 	ldhu	r2,12(r18)
  827940:	1080010c 	andi	r2,r2,4
  827944:	1000481e 	bne	r2,zero,827a68 <_fflush_r+0x198>
  827948:	91400717 	ldw	r5,28(r18)
  82794c:	9809883a 	mov	r4,r19
  827950:	800d883a 	mov	r6,r16
  827954:	000f883a 	mov	r7,zero
  827958:	403ee83a 	callr	r8
  82795c:	8080261e 	bne	r16,r2,8279f8 <_fflush_r+0x128>
  827960:	9080030b 	ldhu	r2,12(r18)
  827964:	91000417 	ldw	r4,16(r18)
  827968:	90000115 	stw	zero,4(r18)
  82796c:	10bdffcc 	andi	r2,r2,63487
  827970:	10ffffcc 	andi	r3,r2,65535
  827974:	18c4000c 	andi	r3,r3,4096
  827978:	9080030d 	sth	r2,12(r18)
  82797c:	91000015 	stw	r4,0(r18)
  827980:	18002b26 	beq	r3,zero,827a30 <_fflush_r+0x160>
  827984:	0007883a 	mov	r3,zero
  827988:	1805883a 	mov	r2,r3
  82798c:	94001415 	stw	r16,80(r18)
  827990:	dfc00417 	ldw	ra,16(sp)
  827994:	dcc00317 	ldw	r19,12(sp)
  827998:	dc800217 	ldw	r18,8(sp)
  82799c:	dc400117 	ldw	r17,4(sp)
  8279a0:	dc000017 	ldw	r16,0(sp)
  8279a4:	dec00504 	addi	sp,sp,20
  8279a8:	f800283a 	ret
  8279ac:	94400417 	ldw	r17,16(r18)
  8279b0:	88001f26 	beq	r17,zero,827a30 <_fflush_r+0x160>
  8279b4:	90800017 	ldw	r2,0(r18)
  8279b8:	18c000cc 	andi	r3,r3,3
  8279bc:	94400015 	stw	r17,0(r18)
  8279c0:	1461c83a 	sub	r16,r2,r17
  8279c4:	18002526 	beq	r3,zero,827a5c <_fflush_r+0x18c>
  8279c8:	0005883a 	mov	r2,zero
  8279cc:	90800215 	stw	r2,8(r18)
  8279d0:	0400170e 	bge	zero,r16,827a30 <_fflush_r+0x160>
  8279d4:	90c00917 	ldw	r3,36(r18)
  8279d8:	91400717 	ldw	r5,28(r18)
  8279dc:	880d883a 	mov	r6,r17
  8279e0:	800f883a 	mov	r7,r16
  8279e4:	9809883a 	mov	r4,r19
  8279e8:	183ee83a 	callr	r3
  8279ec:	88a3883a 	add	r17,r17,r2
  8279f0:	80a1c83a 	sub	r16,r16,r2
  8279f4:	00bff616 	blt	zero,r2,8279d0 <_fflush_r+0x100>
  8279f8:	9080030b 	ldhu	r2,12(r18)
  8279fc:	00ffffc4 	movi	r3,-1
  827a00:	10801014 	ori	r2,r2,64
  827a04:	9080030d 	sth	r2,12(r18)
  827a08:	1805883a 	mov	r2,r3
  827a0c:	dfc00417 	ldw	ra,16(sp)
  827a10:	dcc00317 	ldw	r19,12(sp)
  827a14:	dc800217 	ldw	r18,8(sp)
  827a18:	dc400117 	ldw	r17,4(sp)
  827a1c:	dc000017 	ldw	r16,0(sp)
  827a20:	dec00504 	addi	sp,sp,20
  827a24:	f800283a 	ret
  827a28:	90800f17 	ldw	r2,60(r18)
  827a2c:	00bfbe16 	blt	zero,r2,827928 <_fflush_r+0x58>
  827a30:	0007883a 	mov	r3,zero
  827a34:	1805883a 	mov	r2,r3
  827a38:	dfc00417 	ldw	ra,16(sp)
  827a3c:	dcc00317 	ldw	r19,12(sp)
  827a40:	dc800217 	ldw	r18,8(sp)
  827a44:	dc400117 	ldw	r17,4(sp)
  827a48:	dc000017 	ldw	r16,0(sp)
  827a4c:	dec00504 	addi	sp,sp,20
  827a50:	f800283a 	ret
  827a54:	0827b680 	call	827b68 <__sinit>
  827a58:	003fa806 	br	8278fc <_fflush_r+0x2c>
  827a5c:	90800517 	ldw	r2,20(r18)
  827a60:	90800215 	stw	r2,8(r18)
  827a64:	003fda06 	br	8279d0 <_fflush_r+0x100>
  827a68:	90800117 	ldw	r2,4(r18)
  827a6c:	90c00c17 	ldw	r3,48(r18)
  827a70:	80a1c83a 	sub	r16,r16,r2
  827a74:	183fb426 	beq	r3,zero,827948 <_fflush_r+0x78>
  827a78:	90800f17 	ldw	r2,60(r18)
  827a7c:	80a1c83a 	sub	r16,r16,r2
  827a80:	003fb106 	br	827948 <_fflush_r+0x78>
  827a84:	91400717 	ldw	r5,28(r18)
  827a88:	9809883a 	mov	r4,r19
  827a8c:	000d883a 	mov	r6,zero
  827a90:	01c00044 	movi	r7,1
  827a94:	403ee83a 	callr	r8
  827a98:	1021883a 	mov	r16,r2
  827a9c:	00bfffc4 	movi	r2,-1
  827aa0:	80800226 	beq	r16,r2,827aac <_fflush_r+0x1dc>
  827aa4:	92000a17 	ldw	r8,40(r18)
  827aa8:	003fa406 	br	82793c <_fflush_r+0x6c>
  827aac:	98c00017 	ldw	r3,0(r19)
  827ab0:	00800744 	movi	r2,29
  827ab4:	18bfde26 	beq	r3,r2,827a30 <_fflush_r+0x160>
  827ab8:	9080030b 	ldhu	r2,12(r18)
  827abc:	8007883a 	mov	r3,r16
  827ac0:	10801014 	ori	r2,r2,64
  827ac4:	9080030d 	sth	r2,12(r18)
  827ac8:	003fcf06 	br	827a08 <_fflush_r+0x138>

00827acc <fflush>:
  827acc:	014020b4 	movhi	r5,130
  827ad0:	295e3404 	addi	r5,r5,30928
  827ad4:	2007883a 	mov	r3,r4
  827ad8:	20000526 	beq	r4,zero,827af0 <fflush+0x24>
  827adc:	008020f4 	movhi	r2,131
  827ae0:	10967504 	addi	r2,r2,22996
  827ae4:	11000017 	ldw	r4,0(r2)
  827ae8:	180b883a 	mov	r5,r3
  827aec:	08278d01 	jmpi	8278d0 <_fflush_r>
  827af0:	008020f4 	movhi	r2,131
  827af4:	10967604 	addi	r2,r2,23000
  827af8:	11000017 	ldw	r4,0(r2)
  827afc:	082869c1 	jmpi	82869c <_fwalk_reent>

00827b00 <std>:
  827b00:	008020f4 	movhi	r2,131
  827b04:	10a96d04 	addi	r2,r2,-23116
  827b08:	20800b15 	stw	r2,44(r4)
  827b0c:	008020f4 	movhi	r2,131
  827b10:	10a9a804 	addi	r2,r2,-22880
  827b14:	20800815 	stw	r2,32(r4)
  827b18:	00c020f4 	movhi	r3,131
  827b1c:	18e98904 	addi	r3,r3,-23004
  827b20:	008020f4 	movhi	r2,131
  827b24:	10a96f04 	addi	r2,r2,-23108
  827b28:	2140030d 	sth	r5,12(r4)
  827b2c:	2180038d 	sth	r6,14(r4)
  827b30:	20c00915 	stw	r3,36(r4)
  827b34:	20800a15 	stw	r2,40(r4)
  827b38:	20000015 	stw	zero,0(r4)
  827b3c:	20000115 	stw	zero,4(r4)
  827b40:	20000215 	stw	zero,8(r4)
  827b44:	20000415 	stw	zero,16(r4)
  827b48:	20000515 	stw	zero,20(r4)
  827b4c:	20000615 	stw	zero,24(r4)
  827b50:	21000715 	stw	r4,28(r4)
  827b54:	f800283a 	ret

00827b58 <__sfp_lock_acquire>:
  827b58:	f800283a 	ret

00827b5c <__sfp_lock_release>:
  827b5c:	f800283a 	ret

00827b60 <__sinit_lock_acquire>:
  827b60:	f800283a 	ret

00827b64 <__sinit_lock_release>:
  827b64:	f800283a 	ret

00827b68 <__sinit>:
  827b68:	20800e17 	ldw	r2,56(r4)
  827b6c:	defffd04 	addi	sp,sp,-12
  827b70:	dc400115 	stw	r17,4(sp)
  827b74:	dc000015 	stw	r16,0(sp)
  827b78:	dfc00215 	stw	ra,8(sp)
  827b7c:	04400044 	movi	r17,1
  827b80:	01400104 	movi	r5,4
  827b84:	000d883a 	mov	r6,zero
  827b88:	2021883a 	mov	r16,r4
  827b8c:	2200bb04 	addi	r8,r4,748
  827b90:	200f883a 	mov	r7,r4
  827b94:	10000526 	beq	r2,zero,827bac <__sinit+0x44>
  827b98:	dfc00217 	ldw	ra,8(sp)
  827b9c:	dc400117 	ldw	r17,4(sp)
  827ba0:	dc000017 	ldw	r16,0(sp)
  827ba4:	dec00304 	addi	sp,sp,12
  827ba8:	f800283a 	ret
  827bac:	21000117 	ldw	r4,4(r4)
  827bb0:	008020b4 	movhi	r2,130
  827bb4:	109f1304 	addi	r2,r2,31820
  827bb8:	00c000c4 	movi	r3,3
  827bbc:	80800f15 	stw	r2,60(r16)
  827bc0:	80c0b915 	stw	r3,740(r16)
  827bc4:	8200ba15 	stw	r8,744(r16)
  827bc8:	84400e15 	stw	r17,56(r16)
  827bcc:	8000b815 	stw	zero,736(r16)
  827bd0:	0827b000 	call	827b00 <std>
  827bd4:	81000217 	ldw	r4,8(r16)
  827bd8:	880d883a 	mov	r6,r17
  827bdc:	800f883a 	mov	r7,r16
  827be0:	01400284 	movi	r5,10
  827be4:	0827b000 	call	827b00 <std>
  827be8:	81000317 	ldw	r4,12(r16)
  827bec:	800f883a 	mov	r7,r16
  827bf0:	01400484 	movi	r5,18
  827bf4:	01800084 	movi	r6,2
  827bf8:	dfc00217 	ldw	ra,8(sp)
  827bfc:	dc400117 	ldw	r17,4(sp)
  827c00:	dc000017 	ldw	r16,0(sp)
  827c04:	dec00304 	addi	sp,sp,12
  827c08:	0827b001 	jmpi	827b00 <std>

00827c0c <__fp_lock>:
  827c0c:	0005883a 	mov	r2,zero
  827c10:	f800283a 	ret

00827c14 <__fp_unlock>:
  827c14:	0005883a 	mov	r2,zero
  827c18:	f800283a 	ret

00827c1c <__fp_unlock_all>:
  827c1c:	008020f4 	movhi	r2,131
  827c20:	10967504 	addi	r2,r2,22996
  827c24:	11000017 	ldw	r4,0(r2)
  827c28:	014020b4 	movhi	r5,130
  827c2c:	295f0504 	addi	r5,r5,31764
  827c30:	08287641 	jmpi	828764 <_fwalk>

00827c34 <__fp_lock_all>:
  827c34:	008020f4 	movhi	r2,131
  827c38:	10967504 	addi	r2,r2,22996
  827c3c:	11000017 	ldw	r4,0(r2)
  827c40:	014020b4 	movhi	r5,130
  827c44:	295f0304 	addi	r5,r5,31756
  827c48:	08287641 	jmpi	828764 <_fwalk>

00827c4c <_cleanup_r>:
  827c4c:	014020f4 	movhi	r5,131
  827c50:	296aed04 	addi	r5,r5,-21580
  827c54:	08287641 	jmpi	828764 <_fwalk>

00827c58 <_cleanup>:
  827c58:	008020f4 	movhi	r2,131
  827c5c:	10967604 	addi	r2,r2,23000
  827c60:	11000017 	ldw	r4,0(r2)
  827c64:	0827c4c1 	jmpi	827c4c <_cleanup_r>

00827c68 <__sfmoreglue>:
  827c68:	defffc04 	addi	sp,sp,-16
  827c6c:	dc400115 	stw	r17,4(sp)
  827c70:	2c401724 	muli	r17,r5,92
  827c74:	dc800215 	stw	r18,8(sp)
  827c78:	2825883a 	mov	r18,r5
  827c7c:	89400304 	addi	r5,r17,12
  827c80:	dc000015 	stw	r16,0(sp)
  827c84:	dfc00315 	stw	ra,12(sp)
  827c88:	08235780 	call	823578 <_malloc_r>
  827c8c:	0021883a 	mov	r16,zero
  827c90:	880d883a 	mov	r6,r17
  827c94:	000b883a 	mov	r5,zero
  827c98:	10000626 	beq	r2,zero,827cb4 <__sfmoreglue+0x4c>
  827c9c:	11000304 	addi	r4,r2,12
  827ca0:	14800115 	stw	r18,4(r2)
  827ca4:	10000015 	stw	zero,0(r2)
  827ca8:	11000215 	stw	r4,8(r2)
  827cac:	1021883a 	mov	r16,r2
  827cb0:	0828cd80 	call	828cd8 <memset>
  827cb4:	8005883a 	mov	r2,r16
  827cb8:	dfc00317 	ldw	ra,12(sp)
  827cbc:	dc800217 	ldw	r18,8(sp)
  827cc0:	dc400117 	ldw	r17,4(sp)
  827cc4:	dc000017 	ldw	r16,0(sp)
  827cc8:	dec00404 	addi	sp,sp,16
  827ccc:	f800283a 	ret

00827cd0 <__sfp>:
  827cd0:	defffd04 	addi	sp,sp,-12
  827cd4:	008020f4 	movhi	r2,131
  827cd8:	10967604 	addi	r2,r2,23000
  827cdc:	dc000015 	stw	r16,0(sp)
  827ce0:	14000017 	ldw	r16,0(r2)
  827ce4:	dc400115 	stw	r17,4(sp)
  827ce8:	dfc00215 	stw	ra,8(sp)
  827cec:	80800e17 	ldw	r2,56(r16)
  827cf0:	2023883a 	mov	r17,r4
  827cf4:	10002626 	beq	r2,zero,827d90 <__sfp+0xc0>
  827cf8:	8400b804 	addi	r16,r16,736
  827cfc:	80800117 	ldw	r2,4(r16)
  827d00:	81000217 	ldw	r4,8(r16)
  827d04:	10ffffc4 	addi	r3,r2,-1
  827d08:	18000916 	blt	r3,zero,827d30 <__sfp+0x60>
  827d0c:	2080030f 	ldh	r2,12(r4)
  827d10:	10000b26 	beq	r2,zero,827d40 <__sfp+0x70>
  827d14:	017fffc4 	movi	r5,-1
  827d18:	00000206 	br	827d24 <__sfp+0x54>
  827d1c:	2080030f 	ldh	r2,12(r4)
  827d20:	10000726 	beq	r2,zero,827d40 <__sfp+0x70>
  827d24:	18ffffc4 	addi	r3,r3,-1
  827d28:	21001704 	addi	r4,r4,92
  827d2c:	197ffb1e 	bne	r3,r5,827d1c <__sfp+0x4c>
  827d30:	80800017 	ldw	r2,0(r16)
  827d34:	10001926 	beq	r2,zero,827d9c <__sfp+0xcc>
  827d38:	1021883a 	mov	r16,r2
  827d3c:	003fef06 	br	827cfc <__sfp+0x2c>
  827d40:	00bfffc4 	movi	r2,-1
  827d44:	00c00044 	movi	r3,1
  827d48:	2080038d 	sth	r2,14(r4)
  827d4c:	20c0030d 	sth	r3,12(r4)
  827d50:	20000015 	stw	zero,0(r4)
  827d54:	20000215 	stw	zero,8(r4)
  827d58:	20000115 	stw	zero,4(r4)
  827d5c:	20000415 	stw	zero,16(r4)
  827d60:	20000515 	stw	zero,20(r4)
  827d64:	20000615 	stw	zero,24(r4)
  827d68:	20000c15 	stw	zero,48(r4)
  827d6c:	20000d15 	stw	zero,52(r4)
  827d70:	20001115 	stw	zero,68(r4)
  827d74:	20001215 	stw	zero,72(r4)
  827d78:	2005883a 	mov	r2,r4
  827d7c:	dfc00217 	ldw	ra,8(sp)
  827d80:	dc400117 	ldw	r17,4(sp)
  827d84:	dc000017 	ldw	r16,0(sp)
  827d88:	dec00304 	addi	sp,sp,12
  827d8c:	f800283a 	ret
  827d90:	8009883a 	mov	r4,r16
  827d94:	0827b680 	call	827b68 <__sinit>
  827d98:	003fd706 	br	827cf8 <__sfp+0x28>
  827d9c:	8809883a 	mov	r4,r17
  827da0:	01400104 	movi	r5,4
  827da4:	0827c680 	call	827c68 <__sfmoreglue>
  827da8:	80800015 	stw	r2,0(r16)
  827dac:	103fe21e 	bne	r2,zero,827d38 <__sfp+0x68>
  827db0:	00800304 	movi	r2,12
  827db4:	0009883a 	mov	r4,zero
  827db8:	88800015 	stw	r2,0(r17)
  827dbc:	003fee06 	br	827d78 <__sfp+0xa8>

00827dc0 <_malloc_trim_r>:
  827dc0:	defffb04 	addi	sp,sp,-20
  827dc4:	dcc00315 	stw	r19,12(sp)
  827dc8:	04c020f4 	movhi	r19,131
  827dcc:	9cd0c504 	addi	r19,r19,17172
  827dd0:	dc800215 	stw	r18,8(sp)
  827dd4:	dc400115 	stw	r17,4(sp)
  827dd8:	dc000015 	stw	r16,0(sp)
  827ddc:	2823883a 	mov	r17,r5
  827de0:	2025883a 	mov	r18,r4
  827de4:	dfc00415 	stw	ra,16(sp)
  827de8:	082c7800 	call	82c780 <__malloc_lock>
  827dec:	98800217 	ldw	r2,8(r19)
  827df0:	9009883a 	mov	r4,r18
  827df4:	000b883a 	mov	r5,zero
  827df8:	10c00117 	ldw	r3,4(r2)
  827dfc:	00bfff04 	movi	r2,-4
  827e00:	18a0703a 	and	r16,r3,r2
  827e04:	8463c83a 	sub	r17,r16,r17
  827e08:	8c43fbc4 	addi	r17,r17,4079
  827e0c:	8822d33a 	srli	r17,r17,12
  827e10:	0083ffc4 	movi	r2,4095
  827e14:	8c7fffc4 	addi	r17,r17,-1
  827e18:	8822933a 	slli	r17,r17,12
  827e1c:	1440060e 	bge	r2,r17,827e38 <_malloc_trim_r+0x78>
  827e20:	0823e080 	call	823e08 <_sbrk_r>
  827e24:	98c00217 	ldw	r3,8(r19)
  827e28:	9009883a 	mov	r4,r18
  827e2c:	044bc83a 	sub	r5,zero,r17
  827e30:	80c7883a 	add	r3,r16,r3
  827e34:	10c00926 	beq	r2,r3,827e5c <_malloc_trim_r+0x9c>
  827e38:	082c7a00 	call	82c7a0 <__malloc_unlock>
  827e3c:	0005883a 	mov	r2,zero
  827e40:	dfc00417 	ldw	ra,16(sp)
  827e44:	dcc00317 	ldw	r19,12(sp)
  827e48:	dc800217 	ldw	r18,8(sp)
  827e4c:	dc400117 	ldw	r17,4(sp)
  827e50:	dc000017 	ldw	r16,0(sp)
  827e54:	dec00504 	addi	sp,sp,20
  827e58:	f800283a 	ret
  827e5c:	9009883a 	mov	r4,r18
  827e60:	0823e080 	call	823e08 <_sbrk_r>
  827e64:	844dc83a 	sub	r6,r16,r17
  827e68:	00ffffc4 	movi	r3,-1
  827e6c:	9009883a 	mov	r4,r18
  827e70:	000b883a 	mov	r5,zero
  827e74:	01c020f4 	movhi	r7,131
  827e78:	39de4f04 	addi	r7,r7,31036
  827e7c:	31800054 	ori	r6,r6,1
  827e80:	10c00926 	beq	r2,r3,827ea8 <_malloc_trim_r+0xe8>
  827e84:	38800017 	ldw	r2,0(r7)
  827e88:	98c00217 	ldw	r3,8(r19)
  827e8c:	9009883a 	mov	r4,r18
  827e90:	1445c83a 	sub	r2,r2,r17
  827e94:	38800015 	stw	r2,0(r7)
  827e98:	19800115 	stw	r6,4(r3)
  827e9c:	082c7a00 	call	82c7a0 <__malloc_unlock>
  827ea0:	00800044 	movi	r2,1
  827ea4:	003fe606 	br	827e40 <_malloc_trim_r+0x80>
  827ea8:	0823e080 	call	823e08 <_sbrk_r>
  827eac:	99800217 	ldw	r6,8(r19)
  827eb0:	100f883a 	mov	r7,r2
  827eb4:	9009883a 	mov	r4,r18
  827eb8:	1187c83a 	sub	r3,r2,r6
  827ebc:	008003c4 	movi	r2,15
  827ec0:	19400054 	ori	r5,r3,1
  827ec4:	10ffdc0e 	bge	r2,r3,827e38 <_malloc_trim_r+0x78>
  827ec8:	008020f4 	movhi	r2,131
  827ecc:	10967804 	addi	r2,r2,23008
  827ed0:	10c00017 	ldw	r3,0(r2)
  827ed4:	008020f4 	movhi	r2,131
  827ed8:	109e4f04 	addi	r2,r2,31036
  827edc:	31400115 	stw	r5,4(r6)
  827ee0:	38c7c83a 	sub	r3,r7,r3
  827ee4:	10c00015 	stw	r3,0(r2)
  827ee8:	003fd306 	br	827e38 <_malloc_trim_r+0x78>

00827eec <_free_r>:
  827eec:	defffd04 	addi	sp,sp,-12
  827ef0:	dc400115 	stw	r17,4(sp)
  827ef4:	dc000015 	stw	r16,0(sp)
  827ef8:	dfc00215 	stw	ra,8(sp)
  827efc:	2821883a 	mov	r16,r5
  827f00:	2023883a 	mov	r17,r4
  827f04:	28005a26 	beq	r5,zero,828070 <_free_r+0x184>
  827f08:	082c7800 	call	82c780 <__malloc_lock>
  827f0c:	823ffe04 	addi	r8,r16,-8
  827f10:	41400117 	ldw	r5,4(r8)
  827f14:	00bfff84 	movi	r2,-2
  827f18:	028020f4 	movhi	r10,131
  827f1c:	5290c504 	addi	r10,r10,17172
  827f20:	288e703a 	and	r7,r5,r2
  827f24:	41cd883a 	add	r6,r8,r7
  827f28:	30c00117 	ldw	r3,4(r6)
  827f2c:	51000217 	ldw	r4,8(r10)
  827f30:	00bfff04 	movi	r2,-4
  827f34:	1892703a 	and	r9,r3,r2
  827f38:	5017883a 	mov	r11,r10
  827f3c:	31006726 	beq	r6,r4,8280dc <_free_r+0x1f0>
  827f40:	2880004c 	andi	r2,r5,1
  827f44:	1005003a 	cmpeq	r2,r2,zero
  827f48:	32400115 	stw	r9,4(r6)
  827f4c:	10001a1e 	bne	r2,zero,827fb8 <_free_r+0xcc>
  827f50:	000b883a 	mov	r5,zero
  827f54:	3247883a 	add	r3,r6,r9
  827f58:	18800117 	ldw	r2,4(r3)
  827f5c:	1080004c 	andi	r2,r2,1
  827f60:	1000231e 	bne	r2,zero,827ff0 <_free_r+0x104>
  827f64:	280ac03a 	cmpne	r5,r5,zero
  827f68:	3a4f883a 	add	r7,r7,r9
  827f6c:	2800451e 	bne	r5,zero,828084 <_free_r+0x198>
  827f70:	31000217 	ldw	r4,8(r6)
  827f74:	008020f4 	movhi	r2,131
  827f78:	1090c704 	addi	r2,r2,17180
  827f7c:	20807b26 	beq	r4,r2,82816c <_free_r+0x280>
  827f80:	30800317 	ldw	r2,12(r6)
  827f84:	3a07883a 	add	r3,r7,r8
  827f88:	19c00015 	stw	r7,0(r3)
  827f8c:	11000215 	stw	r4,8(r2)
  827f90:	20800315 	stw	r2,12(r4)
  827f94:	38800054 	ori	r2,r7,1
  827f98:	40800115 	stw	r2,4(r8)
  827f9c:	28001a26 	beq	r5,zero,828008 <_free_r+0x11c>
  827fa0:	8809883a 	mov	r4,r17
  827fa4:	dfc00217 	ldw	ra,8(sp)
  827fa8:	dc400117 	ldw	r17,4(sp)
  827fac:	dc000017 	ldw	r16,0(sp)
  827fb0:	dec00304 	addi	sp,sp,12
  827fb4:	082c7a01 	jmpi	82c7a0 <__malloc_unlock>
  827fb8:	80bffe17 	ldw	r2,-8(r16)
  827fbc:	50c00204 	addi	r3,r10,8
  827fc0:	4091c83a 	sub	r8,r8,r2
  827fc4:	41000217 	ldw	r4,8(r8)
  827fc8:	388f883a 	add	r7,r7,r2
  827fcc:	20c06126 	beq	r4,r3,828154 <_free_r+0x268>
  827fd0:	40800317 	ldw	r2,12(r8)
  827fd4:	3247883a 	add	r3,r6,r9
  827fd8:	000b883a 	mov	r5,zero
  827fdc:	11000215 	stw	r4,8(r2)
  827fe0:	20800315 	stw	r2,12(r4)
  827fe4:	18800117 	ldw	r2,4(r3)
  827fe8:	1080004c 	andi	r2,r2,1
  827fec:	103fdd26 	beq	r2,zero,827f64 <_free_r+0x78>
  827ff0:	38800054 	ori	r2,r7,1
  827ff4:	3a07883a 	add	r3,r7,r8
  827ff8:	280ac03a 	cmpne	r5,r5,zero
  827ffc:	40800115 	stw	r2,4(r8)
  828000:	19c00015 	stw	r7,0(r3)
  828004:	283fe61e 	bne	r5,zero,827fa0 <_free_r+0xb4>
  828008:	00807fc4 	movi	r2,511
  82800c:	11c01f2e 	bgeu	r2,r7,82808c <_free_r+0x1a0>
  828010:	3806d27a 	srli	r3,r7,9
  828014:	1800481e 	bne	r3,zero,828138 <_free_r+0x24c>
  828018:	3804d0fa 	srli	r2,r7,3
  82801c:	100690fa 	slli	r3,r2,3
  828020:	1acd883a 	add	r6,r3,r11
  828024:	31400217 	ldw	r5,8(r6)
  828028:	31405926 	beq	r6,r5,828190 <_free_r+0x2a4>
  82802c:	28800117 	ldw	r2,4(r5)
  828030:	00ffff04 	movi	r3,-4
  828034:	10c4703a 	and	r2,r2,r3
  828038:	3880022e 	bgeu	r7,r2,828044 <_free_r+0x158>
  82803c:	29400217 	ldw	r5,8(r5)
  828040:	317ffa1e 	bne	r6,r5,82802c <_free_r+0x140>
  828044:	29800317 	ldw	r6,12(r5)
  828048:	41800315 	stw	r6,12(r8)
  82804c:	41400215 	stw	r5,8(r8)
  828050:	8809883a 	mov	r4,r17
  828054:	2a000315 	stw	r8,12(r5)
  828058:	32000215 	stw	r8,8(r6)
  82805c:	dfc00217 	ldw	ra,8(sp)
  828060:	dc400117 	ldw	r17,4(sp)
  828064:	dc000017 	ldw	r16,0(sp)
  828068:	dec00304 	addi	sp,sp,12
  82806c:	082c7a01 	jmpi	82c7a0 <__malloc_unlock>
  828070:	dfc00217 	ldw	ra,8(sp)
  828074:	dc400117 	ldw	r17,4(sp)
  828078:	dc000017 	ldw	r16,0(sp)
  82807c:	dec00304 	addi	sp,sp,12
  828080:	f800283a 	ret
  828084:	31000217 	ldw	r4,8(r6)
  828088:	003fbd06 	br	827f80 <_free_r+0x94>
  82808c:	3806d0fa 	srli	r3,r7,3
  828090:	00800044 	movi	r2,1
  828094:	51400117 	ldw	r5,4(r10)
  828098:	180890fa 	slli	r4,r3,3
  82809c:	1807d0ba 	srai	r3,r3,2
  8280a0:	22c9883a 	add	r4,r4,r11
  8280a4:	21800217 	ldw	r6,8(r4)
  8280a8:	10c4983a 	sll	r2,r2,r3
  8280ac:	41000315 	stw	r4,12(r8)
  8280b0:	41800215 	stw	r6,8(r8)
  8280b4:	288ab03a 	or	r5,r5,r2
  8280b8:	22000215 	stw	r8,8(r4)
  8280bc:	8809883a 	mov	r4,r17
  8280c0:	51400115 	stw	r5,4(r10)
  8280c4:	32000315 	stw	r8,12(r6)
  8280c8:	dfc00217 	ldw	ra,8(sp)
  8280cc:	dc400117 	ldw	r17,4(sp)
  8280d0:	dc000017 	ldw	r16,0(sp)
  8280d4:	dec00304 	addi	sp,sp,12
  8280d8:	082c7a01 	jmpi	82c7a0 <__malloc_unlock>
  8280dc:	2880004c 	andi	r2,r5,1
  8280e0:	3a4d883a 	add	r6,r7,r9
  8280e4:	1000071e 	bne	r2,zero,828104 <_free_r+0x218>
  8280e8:	80bffe17 	ldw	r2,-8(r16)
  8280ec:	4091c83a 	sub	r8,r8,r2
  8280f0:	41000317 	ldw	r4,12(r8)
  8280f4:	40c00217 	ldw	r3,8(r8)
  8280f8:	308d883a 	add	r6,r6,r2
  8280fc:	20c00215 	stw	r3,8(r4)
  828100:	19000315 	stw	r4,12(r3)
  828104:	008020f4 	movhi	r2,131
  828108:	10967704 	addi	r2,r2,23004
  82810c:	11000017 	ldw	r4,0(r2)
  828110:	30c00054 	ori	r3,r6,1
  828114:	52000215 	stw	r8,8(r10)
  828118:	40c00115 	stw	r3,4(r8)
  82811c:	313fa036 	bltu	r6,r4,827fa0 <_free_r+0xb4>
  828120:	008020f4 	movhi	r2,131
  828124:	109e3604 	addi	r2,r2,30936
  828128:	11400017 	ldw	r5,0(r2)
  82812c:	8809883a 	mov	r4,r17
  828130:	0827dc00 	call	827dc0 <_malloc_trim_r>
  828134:	003f9a06 	br	827fa0 <_free_r+0xb4>
  828138:	00800104 	movi	r2,4
  82813c:	10c0072e 	bgeu	r2,r3,82815c <_free_r+0x270>
  828140:	00800504 	movi	r2,20
  828144:	10c01936 	bltu	r2,r3,8281ac <_free_r+0x2c0>
  828148:	188016c4 	addi	r2,r3,91
  82814c:	100690fa 	slli	r3,r2,3
  828150:	003fb306 	br	828020 <_free_r+0x134>
  828154:	01400044 	movi	r5,1
  828158:	003f7e06 	br	827f54 <_free_r+0x68>
  82815c:	3804d1ba 	srli	r2,r7,6
  828160:	10800e04 	addi	r2,r2,56
  828164:	100690fa 	slli	r3,r2,3
  828168:	003fad06 	br	828020 <_free_r+0x134>
  82816c:	22000315 	stw	r8,12(r4)
  828170:	22000215 	stw	r8,8(r4)
  828174:	3a05883a 	add	r2,r7,r8
  828178:	38c00054 	ori	r3,r7,1
  82817c:	11c00015 	stw	r7,0(r2)
  828180:	41000215 	stw	r4,8(r8)
  828184:	40c00115 	stw	r3,4(r8)
  828188:	41000315 	stw	r4,12(r8)
  82818c:	003f8406 	br	827fa0 <_free_r+0xb4>
  828190:	1005d0ba 	srai	r2,r2,2
  828194:	00c00044 	movi	r3,1
  828198:	51000117 	ldw	r4,4(r10)
  82819c:	1886983a 	sll	r3,r3,r2
  8281a0:	20c8b03a 	or	r4,r4,r3
  8281a4:	51000115 	stw	r4,4(r10)
  8281a8:	003fa706 	br	828048 <_free_r+0x15c>
  8281ac:	00801504 	movi	r2,84
  8281b0:	10c00436 	bltu	r2,r3,8281c4 <_free_r+0x2d8>
  8281b4:	3804d33a 	srli	r2,r7,12
  8281b8:	10801b84 	addi	r2,r2,110
  8281bc:	100690fa 	slli	r3,r2,3
  8281c0:	003f9706 	br	828020 <_free_r+0x134>
  8281c4:	00805504 	movi	r2,340
  8281c8:	10c00436 	bltu	r2,r3,8281dc <_free_r+0x2f0>
  8281cc:	3804d3fa 	srli	r2,r7,15
  8281d0:	10801dc4 	addi	r2,r2,119
  8281d4:	100690fa 	slli	r3,r2,3
  8281d8:	003f9106 	br	828020 <_free_r+0x134>
  8281dc:	00815504 	movi	r2,1364
  8281e0:	10c0032e 	bgeu	r2,r3,8281f0 <_free_r+0x304>
  8281e4:	00801f84 	movi	r2,126
  8281e8:	00c0fc04 	movi	r3,1008
  8281ec:	003f8c06 	br	828020 <_free_r+0x134>
  8281f0:	3804d4ba 	srli	r2,r7,18
  8281f4:	10801f04 	addi	r2,r2,124
  8281f8:	100690fa 	slli	r3,r2,3
  8281fc:	003f8806 	br	828020 <_free_r+0x134>

00828200 <__sfvwrite_r>:
  828200:	30800217 	ldw	r2,8(r6)
  828204:	defff504 	addi	sp,sp,-44
  828208:	df000915 	stw	fp,36(sp)
  82820c:	dd800715 	stw	r22,28(sp)
  828210:	dc800315 	stw	r18,12(sp)
  828214:	dfc00a15 	stw	ra,40(sp)
  828218:	ddc00815 	stw	r23,32(sp)
  82821c:	dd400615 	stw	r21,24(sp)
  828220:	dd000515 	stw	r20,20(sp)
  828224:	dcc00415 	stw	r19,16(sp)
  828228:	dc400215 	stw	r17,8(sp)
  82822c:	dc000115 	stw	r16,4(sp)
  828230:	302d883a 	mov	r22,r6
  828234:	2039883a 	mov	fp,r4
  828238:	2825883a 	mov	r18,r5
  82823c:	10001c26 	beq	r2,zero,8282b0 <__sfvwrite_r+0xb0>
  828240:	29c0030b 	ldhu	r7,12(r5)
  828244:	3880020c 	andi	r2,r7,8
  828248:	10002726 	beq	r2,zero,8282e8 <__sfvwrite_r+0xe8>
  82824c:	28800417 	ldw	r2,16(r5)
  828250:	10002526 	beq	r2,zero,8282e8 <__sfvwrite_r+0xe8>
  828254:	3880008c 	andi	r2,r7,2
  828258:	b5400017 	ldw	r21,0(r22)
  82825c:	10002826 	beq	r2,zero,828300 <__sfvwrite_r+0x100>
  828260:	0021883a 	mov	r16,zero
  828264:	0023883a 	mov	r17,zero
  828268:	880d883a 	mov	r6,r17
  82826c:	e009883a 	mov	r4,fp
  828270:	00810004 	movi	r2,1024
  828274:	80006e26 	beq	r16,zero,828430 <__sfvwrite_r+0x230>
  828278:	800f883a 	mov	r7,r16
  82827c:	91400717 	ldw	r5,28(r18)
  828280:	1400012e 	bgeu	r2,r16,828288 <__sfvwrite_r+0x88>
  828284:	100f883a 	mov	r7,r2
  828288:	90c00917 	ldw	r3,36(r18)
  82828c:	183ee83a 	callr	r3
  828290:	1007883a 	mov	r3,r2
  828294:	80a1c83a 	sub	r16,r16,r2
  828298:	88a3883a 	add	r17,r17,r2
  82829c:	00806d0e 	bge	zero,r2,828454 <__sfvwrite_r+0x254>
  8282a0:	b0800217 	ldw	r2,8(r22)
  8282a4:	10c5c83a 	sub	r2,r2,r3
  8282a8:	b0800215 	stw	r2,8(r22)
  8282ac:	103fee1e 	bne	r2,zero,828268 <__sfvwrite_r+0x68>
  8282b0:	0009883a 	mov	r4,zero
  8282b4:	2005883a 	mov	r2,r4
  8282b8:	dfc00a17 	ldw	ra,40(sp)
  8282bc:	df000917 	ldw	fp,36(sp)
  8282c0:	ddc00817 	ldw	r23,32(sp)
  8282c4:	dd800717 	ldw	r22,28(sp)
  8282c8:	dd400617 	ldw	r21,24(sp)
  8282cc:	dd000517 	ldw	r20,20(sp)
  8282d0:	dcc00417 	ldw	r19,16(sp)
  8282d4:	dc800317 	ldw	r18,12(sp)
  8282d8:	dc400217 	ldw	r17,8(sp)
  8282dc:	dc000117 	ldw	r16,4(sp)
  8282e0:	dec00b04 	addi	sp,sp,44
  8282e4:	f800283a 	ret
  8282e8:	0825e140 	call	825e14 <__swsetup_r>
  8282ec:	1000e41e 	bne	r2,zero,828680 <__sfvwrite_r+0x480>
  8282f0:	91c0030b 	ldhu	r7,12(r18)
  8282f4:	b5400017 	ldw	r21,0(r22)
  8282f8:	3880008c 	andi	r2,r7,2
  8282fc:	103fd81e 	bne	r2,zero,828260 <__sfvwrite_r+0x60>
  828300:	3880004c 	andi	r2,r7,1
  828304:	1005003a 	cmpeq	r2,r2,zero
  828308:	10005726 	beq	r2,zero,828468 <__sfvwrite_r+0x268>
  82830c:	0029883a 	mov	r20,zero
  828310:	002f883a 	mov	r23,zero
  828314:	a0004226 	beq	r20,zero,828420 <__sfvwrite_r+0x220>
  828318:	3880800c 	andi	r2,r7,512
  82831c:	94000217 	ldw	r16,8(r18)
  828320:	10008b26 	beq	r2,zero,828550 <__sfvwrite_r+0x350>
  828324:	800d883a 	mov	r6,r16
  828328:	a400a536 	bltu	r20,r16,8285c0 <__sfvwrite_r+0x3c0>
  82832c:	3881200c 	andi	r2,r7,1152
  828330:	10002726 	beq	r2,zero,8283d0 <__sfvwrite_r+0x1d0>
  828334:	90800517 	ldw	r2,20(r18)
  828338:	92000417 	ldw	r8,16(r18)
  82833c:	91400017 	ldw	r5,0(r18)
  828340:	1087883a 	add	r3,r2,r2
  828344:	1887883a 	add	r3,r3,r2
  828348:	1808d7fa 	srli	r4,r3,31
  82834c:	2a21c83a 	sub	r16,r5,r8
  828350:	80800044 	addi	r2,r16,1
  828354:	20c9883a 	add	r4,r4,r3
  828358:	2027d07a 	srai	r19,r4,1
  82835c:	a085883a 	add	r2,r20,r2
  828360:	980d883a 	mov	r6,r19
  828364:	9880022e 	bgeu	r19,r2,828370 <__sfvwrite_r+0x170>
  828368:	1027883a 	mov	r19,r2
  82836c:	100d883a 	mov	r6,r2
  828370:	3881000c 	andi	r2,r7,1024
  828374:	1000b826 	beq	r2,zero,828658 <__sfvwrite_r+0x458>
  828378:	300b883a 	mov	r5,r6
  82837c:	e009883a 	mov	r4,fp
  828380:	08235780 	call	823578 <_malloc_r>
  828384:	10003126 	beq	r2,zero,82844c <__sfvwrite_r+0x24c>
  828388:	91400417 	ldw	r5,16(r18)
  82838c:	1009883a 	mov	r4,r2
  828390:	800d883a 	mov	r6,r16
  828394:	1023883a 	mov	r17,r2
  828398:	0828b580 	call	828b58 <memcpy>
  82839c:	90c0030b 	ldhu	r3,12(r18)
  8283a0:	00beffc4 	movi	r2,-1025
  8283a4:	1886703a 	and	r3,r3,r2
  8283a8:	18c02014 	ori	r3,r3,128
  8283ac:	90c0030d 	sth	r3,12(r18)
  8283b0:	9c07c83a 	sub	r3,r19,r16
  8283b4:	8c05883a 	add	r2,r17,r16
  8283b8:	a00d883a 	mov	r6,r20
  8283bc:	a021883a 	mov	r16,r20
  8283c0:	90800015 	stw	r2,0(r18)
  8283c4:	90c00215 	stw	r3,8(r18)
  8283c8:	94400415 	stw	r17,16(r18)
  8283cc:	94c00515 	stw	r19,20(r18)
  8283d0:	91000017 	ldw	r4,0(r18)
  8283d4:	b80b883a 	mov	r5,r23
  8283d8:	a023883a 	mov	r17,r20
  8283dc:	0828bf80 	call	828bf8 <memmove>
  8283e0:	90c00217 	ldw	r3,8(r18)
  8283e4:	90800017 	ldw	r2,0(r18)
  8283e8:	a027883a 	mov	r19,r20
  8283ec:	1c07c83a 	sub	r3,r3,r16
  8283f0:	1405883a 	add	r2,r2,r16
  8283f4:	90c00215 	stw	r3,8(r18)
  8283f8:	a021883a 	mov	r16,r20
  8283fc:	90800015 	stw	r2,0(r18)
  828400:	b0800217 	ldw	r2,8(r22)
  828404:	1405c83a 	sub	r2,r2,r16
  828408:	b0800215 	stw	r2,8(r22)
  82840c:	103fa826 	beq	r2,zero,8282b0 <__sfvwrite_r+0xb0>
  828410:	a469c83a 	sub	r20,r20,r17
  828414:	91c0030b 	ldhu	r7,12(r18)
  828418:	bcef883a 	add	r23,r23,r19
  82841c:	a03fbe1e 	bne	r20,zero,828318 <__sfvwrite_r+0x118>
  828420:	adc00017 	ldw	r23,0(r21)
  828424:	ad000117 	ldw	r20,4(r21)
  828428:	ad400204 	addi	r21,r21,8
  82842c:	003fb906 	br	828314 <__sfvwrite_r+0x114>
  828430:	ac400017 	ldw	r17,0(r21)
  828434:	ac000117 	ldw	r16,4(r21)
  828438:	ad400204 	addi	r21,r21,8
  82843c:	003f8a06 	br	828268 <__sfvwrite_r+0x68>
  828440:	91400417 	ldw	r5,16(r18)
  828444:	e009883a 	mov	r4,fp
  828448:	0827eec0 	call	827eec <_free_r>
  82844c:	00800304 	movi	r2,12
  828450:	e0800015 	stw	r2,0(fp)
  828454:	9080030b 	ldhu	r2,12(r18)
  828458:	013fffc4 	movi	r4,-1
  82845c:	10801014 	ori	r2,r2,64
  828460:	9080030d 	sth	r2,12(r18)
  828464:	003f9306 	br	8282b4 <__sfvwrite_r+0xb4>
  828468:	0027883a 	mov	r19,zero
  82846c:	002f883a 	mov	r23,zero
  828470:	d8000015 	stw	zero,0(sp)
  828474:	0029883a 	mov	r20,zero
  828478:	98001e26 	beq	r19,zero,8284f4 <__sfvwrite_r+0x2f4>
  82847c:	d8c00017 	ldw	r3,0(sp)
  828480:	1804c03a 	cmpne	r2,r3,zero
  828484:	10005e26 	beq	r2,zero,828600 <__sfvwrite_r+0x400>
  828488:	9821883a 	mov	r16,r19
  82848c:	a4c0012e 	bgeu	r20,r19,828494 <__sfvwrite_r+0x294>
  828490:	a021883a 	mov	r16,r20
  828494:	91000017 	ldw	r4,0(r18)
  828498:	90800417 	ldw	r2,16(r18)
  82849c:	91800217 	ldw	r6,8(r18)
  8284a0:	91c00517 	ldw	r7,20(r18)
  8284a4:	1100022e 	bgeu	r2,r4,8284b0 <__sfvwrite_r+0x2b0>
  8284a8:	31e3883a 	add	r17,r6,r7
  8284ac:	8c001616 	blt	r17,r16,828508 <__sfvwrite_r+0x308>
  8284b0:	81c03816 	blt	r16,r7,828594 <__sfvwrite_r+0x394>
  8284b4:	90c00917 	ldw	r3,36(r18)
  8284b8:	91400717 	ldw	r5,28(r18)
  8284bc:	e009883a 	mov	r4,fp
  8284c0:	b80d883a 	mov	r6,r23
  8284c4:	183ee83a 	callr	r3
  8284c8:	1023883a 	mov	r17,r2
  8284cc:	00bfe10e 	bge	zero,r2,828454 <__sfvwrite_r+0x254>
  8284d0:	a469c83a 	sub	r20,r20,r17
  8284d4:	a0001826 	beq	r20,zero,828538 <__sfvwrite_r+0x338>
  8284d8:	b0800217 	ldw	r2,8(r22)
  8284dc:	1445c83a 	sub	r2,r2,r17
  8284e0:	b0800215 	stw	r2,8(r22)
  8284e4:	103f7226 	beq	r2,zero,8282b0 <__sfvwrite_r+0xb0>
  8284e8:	9c67c83a 	sub	r19,r19,r17
  8284ec:	bc6f883a 	add	r23,r23,r17
  8284f0:	983fe21e 	bne	r19,zero,82847c <__sfvwrite_r+0x27c>
  8284f4:	adc00017 	ldw	r23,0(r21)
  8284f8:	acc00117 	ldw	r19,4(r21)
  8284fc:	ad400204 	addi	r21,r21,8
  828500:	d8000015 	stw	zero,0(sp)
  828504:	003fdc06 	br	828478 <__sfvwrite_r+0x278>
  828508:	b80b883a 	mov	r5,r23
  82850c:	880d883a 	mov	r6,r17
  828510:	0828bf80 	call	828bf8 <memmove>
  828514:	90c00017 	ldw	r3,0(r18)
  828518:	e009883a 	mov	r4,fp
  82851c:	900b883a 	mov	r5,r18
  828520:	1c47883a 	add	r3,r3,r17
  828524:	90c00015 	stw	r3,0(r18)
  828528:	08278d00 	call	8278d0 <_fflush_r>
  82852c:	103fc91e 	bne	r2,zero,828454 <__sfvwrite_r+0x254>
  828530:	a469c83a 	sub	r20,r20,r17
  828534:	a03fe81e 	bne	r20,zero,8284d8 <__sfvwrite_r+0x2d8>
  828538:	e009883a 	mov	r4,fp
  82853c:	900b883a 	mov	r5,r18
  828540:	08278d00 	call	8278d0 <_fflush_r>
  828544:	103fc31e 	bne	r2,zero,828454 <__sfvwrite_r+0x254>
  828548:	d8000015 	stw	zero,0(sp)
  82854c:	003fe206 	br	8284d8 <__sfvwrite_r+0x2d8>
  828550:	91000017 	ldw	r4,0(r18)
  828554:	90800417 	ldw	r2,16(r18)
  828558:	1100022e 	bgeu	r2,r4,828564 <__sfvwrite_r+0x364>
  82855c:	8023883a 	mov	r17,r16
  828560:	85003136 	bltu	r16,r20,828628 <__sfvwrite_r+0x428>
  828564:	91c00517 	ldw	r7,20(r18)
  828568:	a1c01836 	bltu	r20,r7,8285cc <__sfvwrite_r+0x3cc>
  82856c:	90c00917 	ldw	r3,36(r18)
  828570:	91400717 	ldw	r5,28(r18)
  828574:	e009883a 	mov	r4,fp
  828578:	b80d883a 	mov	r6,r23
  82857c:	183ee83a 	callr	r3
  828580:	1021883a 	mov	r16,r2
  828584:	00bfb30e 	bge	zero,r2,828454 <__sfvwrite_r+0x254>
  828588:	1023883a 	mov	r17,r2
  82858c:	1027883a 	mov	r19,r2
  828590:	003f9b06 	br	828400 <__sfvwrite_r+0x200>
  828594:	b80b883a 	mov	r5,r23
  828598:	800d883a 	mov	r6,r16
  82859c:	0828bf80 	call	828bf8 <memmove>
  8285a0:	90c00217 	ldw	r3,8(r18)
  8285a4:	90800017 	ldw	r2,0(r18)
  8285a8:	8023883a 	mov	r17,r16
  8285ac:	1c07c83a 	sub	r3,r3,r16
  8285b0:	1405883a 	add	r2,r2,r16
  8285b4:	90c00215 	stw	r3,8(r18)
  8285b8:	90800015 	stw	r2,0(r18)
  8285bc:	003fc406 	br	8284d0 <__sfvwrite_r+0x2d0>
  8285c0:	a00d883a 	mov	r6,r20
  8285c4:	a021883a 	mov	r16,r20
  8285c8:	003f8106 	br	8283d0 <__sfvwrite_r+0x1d0>
  8285cc:	b80b883a 	mov	r5,r23
  8285d0:	a00d883a 	mov	r6,r20
  8285d4:	0828bf80 	call	828bf8 <memmove>
  8285d8:	90c00217 	ldw	r3,8(r18)
  8285dc:	90800017 	ldw	r2,0(r18)
  8285e0:	a021883a 	mov	r16,r20
  8285e4:	1d07c83a 	sub	r3,r3,r20
  8285e8:	1505883a 	add	r2,r2,r20
  8285ec:	a023883a 	mov	r17,r20
  8285f0:	a027883a 	mov	r19,r20
  8285f4:	90c00215 	stw	r3,8(r18)
  8285f8:	90800015 	stw	r2,0(r18)
  8285fc:	003f8006 	br	828400 <__sfvwrite_r+0x200>
  828600:	b809883a 	mov	r4,r23
  828604:	01400284 	movi	r5,10
  828608:	980d883a 	mov	r6,r19
  82860c:	0828a740 	call	828a74 <memchr>
  828610:	10001726 	beq	r2,zero,828670 <__sfvwrite_r+0x470>
  828614:	15c5c83a 	sub	r2,r2,r23
  828618:	15000044 	addi	r20,r2,1
  82861c:	00800044 	movi	r2,1
  828620:	d8800015 	stw	r2,0(sp)
  828624:	003f9806 	br	828488 <__sfvwrite_r+0x288>
  828628:	b80b883a 	mov	r5,r23
  82862c:	800d883a 	mov	r6,r16
  828630:	0828bf80 	call	828bf8 <memmove>
  828634:	90c00017 	ldw	r3,0(r18)
  828638:	e009883a 	mov	r4,fp
  82863c:	900b883a 	mov	r5,r18
  828640:	1c07883a 	add	r3,r3,r16
  828644:	90c00015 	stw	r3,0(r18)
  828648:	8027883a 	mov	r19,r16
  82864c:	08278d00 	call	8278d0 <_fflush_r>
  828650:	103f6b26 	beq	r2,zero,828400 <__sfvwrite_r+0x200>
  828654:	003f7f06 	br	828454 <__sfvwrite_r+0x254>
  828658:	400b883a 	mov	r5,r8
  82865c:	e009883a 	mov	r4,fp
  828660:	0829f500 	call	829f50 <_realloc_r>
  828664:	103f7626 	beq	r2,zero,828440 <__sfvwrite_r+0x240>
  828668:	1023883a 	mov	r17,r2
  82866c:	003f5006 	br	8283b0 <__sfvwrite_r+0x1b0>
  828670:	00c00044 	movi	r3,1
  828674:	9d000044 	addi	r20,r19,1
  828678:	d8c00015 	stw	r3,0(sp)
  82867c:	003f8206 	br	828488 <__sfvwrite_r+0x288>
  828680:	9080030b 	ldhu	r2,12(r18)
  828684:	00c00244 	movi	r3,9
  828688:	013fffc4 	movi	r4,-1
  82868c:	10801014 	ori	r2,r2,64
  828690:	9080030d 	sth	r2,12(r18)
  828694:	e0c00015 	stw	r3,0(fp)
  828698:	003f0606 	br	8282b4 <__sfvwrite_r+0xb4>

0082869c <_fwalk_reent>:
  82869c:	defff704 	addi	sp,sp,-36
  8286a0:	dcc00315 	stw	r19,12(sp)
  8286a4:	24c0b804 	addi	r19,r4,736
  8286a8:	dd800615 	stw	r22,24(sp)
  8286ac:	dd400515 	stw	r21,20(sp)
  8286b0:	dfc00815 	stw	ra,32(sp)
  8286b4:	ddc00715 	stw	r23,28(sp)
  8286b8:	dd000415 	stw	r20,16(sp)
  8286bc:	dc800215 	stw	r18,8(sp)
  8286c0:	dc400115 	stw	r17,4(sp)
  8286c4:	dc000015 	stw	r16,0(sp)
  8286c8:	202b883a 	mov	r21,r4
  8286cc:	282d883a 	mov	r22,r5
  8286d0:	0827b580 	call	827b58 <__sfp_lock_acquire>
  8286d4:	98002126 	beq	r19,zero,82875c <_fwalk_reent+0xc0>
  8286d8:	002f883a 	mov	r23,zero
  8286dc:	9c800117 	ldw	r18,4(r19)
  8286e0:	9c000217 	ldw	r16,8(r19)
  8286e4:	90bfffc4 	addi	r2,r18,-1
  8286e8:	10000d16 	blt	r2,zero,828720 <_fwalk_reent+0x84>
  8286ec:	0023883a 	mov	r17,zero
  8286f0:	053fffc4 	movi	r20,-1
  8286f4:	8080030f 	ldh	r2,12(r16)
  8286f8:	8c400044 	addi	r17,r17,1
  8286fc:	10000626 	beq	r2,zero,828718 <_fwalk_reent+0x7c>
  828700:	8080038f 	ldh	r2,14(r16)
  828704:	800b883a 	mov	r5,r16
  828708:	a809883a 	mov	r4,r21
  82870c:	15000226 	beq	r2,r20,828718 <_fwalk_reent+0x7c>
  828710:	b03ee83a 	callr	r22
  828714:	b8aeb03a 	or	r23,r23,r2
  828718:	84001704 	addi	r16,r16,92
  82871c:	947ff51e 	bne	r18,r17,8286f4 <_fwalk_reent+0x58>
  828720:	9cc00017 	ldw	r19,0(r19)
  828724:	983fed1e 	bne	r19,zero,8286dc <_fwalk_reent+0x40>
  828728:	0827b5c0 	call	827b5c <__sfp_lock_release>
  82872c:	b805883a 	mov	r2,r23
  828730:	dfc00817 	ldw	ra,32(sp)
  828734:	ddc00717 	ldw	r23,28(sp)
  828738:	dd800617 	ldw	r22,24(sp)
  82873c:	dd400517 	ldw	r21,20(sp)
  828740:	dd000417 	ldw	r20,16(sp)
  828744:	dcc00317 	ldw	r19,12(sp)
  828748:	dc800217 	ldw	r18,8(sp)
  82874c:	dc400117 	ldw	r17,4(sp)
  828750:	dc000017 	ldw	r16,0(sp)
  828754:	dec00904 	addi	sp,sp,36
  828758:	f800283a 	ret
  82875c:	002f883a 	mov	r23,zero
  828760:	003ff106 	br	828728 <_fwalk_reent+0x8c>

00828764 <_fwalk>:
  828764:	defff804 	addi	sp,sp,-32
  828768:	dcc00315 	stw	r19,12(sp)
  82876c:	24c0b804 	addi	r19,r4,736
  828770:	dd400515 	stw	r21,20(sp)
  828774:	dfc00715 	stw	ra,28(sp)
  828778:	dd800615 	stw	r22,24(sp)
  82877c:	dd000415 	stw	r20,16(sp)
  828780:	dc800215 	stw	r18,8(sp)
  828784:	dc400115 	stw	r17,4(sp)
  828788:	dc000015 	stw	r16,0(sp)
  82878c:	282b883a 	mov	r21,r5
  828790:	0827b580 	call	827b58 <__sfp_lock_acquire>
  828794:	98001f26 	beq	r19,zero,828814 <_fwalk+0xb0>
  828798:	002d883a 	mov	r22,zero
  82879c:	9c800117 	ldw	r18,4(r19)
  8287a0:	9c000217 	ldw	r16,8(r19)
  8287a4:	90bfffc4 	addi	r2,r18,-1
  8287a8:	10000c16 	blt	r2,zero,8287dc <_fwalk+0x78>
  8287ac:	0023883a 	mov	r17,zero
  8287b0:	053fffc4 	movi	r20,-1
  8287b4:	8080030f 	ldh	r2,12(r16)
  8287b8:	8c400044 	addi	r17,r17,1
  8287bc:	10000526 	beq	r2,zero,8287d4 <_fwalk+0x70>
  8287c0:	8080038f 	ldh	r2,14(r16)
  8287c4:	8009883a 	mov	r4,r16
  8287c8:	15000226 	beq	r2,r20,8287d4 <_fwalk+0x70>
  8287cc:	a83ee83a 	callr	r21
  8287d0:	b0acb03a 	or	r22,r22,r2
  8287d4:	84001704 	addi	r16,r16,92
  8287d8:	947ff61e 	bne	r18,r17,8287b4 <_fwalk+0x50>
  8287dc:	9cc00017 	ldw	r19,0(r19)
  8287e0:	983fee1e 	bne	r19,zero,82879c <_fwalk+0x38>
  8287e4:	0827b5c0 	call	827b5c <__sfp_lock_release>
  8287e8:	b005883a 	mov	r2,r22
  8287ec:	dfc00717 	ldw	ra,28(sp)
  8287f0:	dd800617 	ldw	r22,24(sp)
  8287f4:	dd400517 	ldw	r21,20(sp)
  8287f8:	dd000417 	ldw	r20,16(sp)
  8287fc:	dcc00317 	ldw	r19,12(sp)
  828800:	dc800217 	ldw	r18,8(sp)
  828804:	dc400117 	ldw	r17,4(sp)
  828808:	dc000017 	ldw	r16,0(sp)
  82880c:	dec00804 	addi	sp,sp,32
  828810:	f800283a 	ret
  828814:	002d883a 	mov	r22,zero
  828818:	003ff206 	br	8287e4 <_fwalk+0x80>

0082881c <__locale_charset>:
  82881c:	d0a00517 	ldw	r2,-32748(gp)
  828820:	f800283a 	ret

00828824 <_localeconv_r>:
  828824:	008020f4 	movhi	r2,131
  828828:	108e6e04 	addi	r2,r2,14776
  82882c:	f800283a 	ret

00828830 <localeconv>:
  828830:	008020f4 	movhi	r2,131
  828834:	10967504 	addi	r2,r2,22996
  828838:	11000017 	ldw	r4,0(r2)
  82883c:	08288241 	jmpi	828824 <_localeconv_r>

00828840 <_setlocale_r>:
  828840:	defffc04 	addi	sp,sp,-16
  828844:	00c020f4 	movhi	r3,131
  828848:	18cdb804 	addi	r3,r3,14048
  82884c:	dc800215 	stw	r18,8(sp)
  828850:	dc400115 	stw	r17,4(sp)
  828854:	dc000015 	stw	r16,0(sp)
  828858:	2023883a 	mov	r17,r4
  82885c:	2825883a 	mov	r18,r5
  828860:	dfc00315 	stw	ra,12(sp)
  828864:	3021883a 	mov	r16,r6
  828868:	3009883a 	mov	r4,r6
  82886c:	180b883a 	mov	r5,r3
  828870:	30000926 	beq	r6,zero,828898 <_setlocale_r+0x58>
  828874:	082a7000 	call	82a700 <strcmp>
  828878:	8009883a 	mov	r4,r16
  82887c:	014020f4 	movhi	r5,131
  828880:	294dcd04 	addi	r5,r5,14132
  828884:	10000b1e 	bne	r2,zero,8288b4 <_setlocale_r+0x74>
  828888:	8c000d15 	stw	r16,52(r17)
  82888c:	8c800c15 	stw	r18,48(r17)
  828890:	00c020f4 	movhi	r3,131
  828894:	18cdb804 	addi	r3,r3,14048
  828898:	1805883a 	mov	r2,r3
  82889c:	dfc00317 	ldw	ra,12(sp)
  8288a0:	dc800217 	ldw	r18,8(sp)
  8288a4:	dc400117 	ldw	r17,4(sp)
  8288a8:	dc000017 	ldw	r16,0(sp)
  8288ac:	dec00404 	addi	sp,sp,16
  8288b0:	f800283a 	ret
  8288b4:	082a7000 	call	82a700 <strcmp>
  8288b8:	0007883a 	mov	r3,zero
  8288bc:	103ff226 	beq	r2,zero,828888 <_setlocale_r+0x48>
  8288c0:	003ff506 	br	828898 <_setlocale_r+0x58>

008288c4 <setlocale>:
  8288c4:	018020f4 	movhi	r6,131
  8288c8:	31967504 	addi	r6,r6,22996
  8288cc:	2007883a 	mov	r3,r4
  8288d0:	31000017 	ldw	r4,0(r6)
  8288d4:	280d883a 	mov	r6,r5
  8288d8:	180b883a 	mov	r5,r3
  8288dc:	08288401 	jmpi	828840 <_setlocale_r>

008288e0 <__smakebuf_r>:
  8288e0:	2880030b 	ldhu	r2,12(r5)
  8288e4:	deffed04 	addi	sp,sp,-76
  8288e8:	dc401015 	stw	r17,64(sp)
  8288ec:	1080008c 	andi	r2,r2,2
  8288f0:	dc000f15 	stw	r16,60(sp)
  8288f4:	dfc01215 	stw	ra,72(sp)
  8288f8:	dc801115 	stw	r18,68(sp)
  8288fc:	2821883a 	mov	r16,r5
  828900:	2023883a 	mov	r17,r4
  828904:	10000b26 	beq	r2,zero,828934 <__smakebuf_r+0x54>
  828908:	28c010c4 	addi	r3,r5,67
  82890c:	00800044 	movi	r2,1
  828910:	28800515 	stw	r2,20(r5)
  828914:	28c00415 	stw	r3,16(r5)
  828918:	28c00015 	stw	r3,0(r5)
  82891c:	dfc01217 	ldw	ra,72(sp)
  828920:	dc801117 	ldw	r18,68(sp)
  828924:	dc401017 	ldw	r17,64(sp)
  828928:	dc000f17 	ldw	r16,60(sp)
  82892c:	dec01304 	addi	sp,sp,76
  828930:	f800283a 	ret
  828934:	2940038f 	ldh	r5,14(r5)
  828938:	28002116 	blt	r5,zero,8289c0 <__smakebuf_r+0xe0>
  82893c:	d80d883a 	mov	r6,sp
  828940:	082abc80 	call	82abc8 <_fstat_r>
  828944:	10001e16 	blt	r2,zero,8289c0 <__smakebuf_r+0xe0>
  828948:	d8800117 	ldw	r2,4(sp)
  82894c:	00e00014 	movui	r3,32768
  828950:	113c000c 	andi	r4,r2,61440
  828954:	20c03126 	beq	r4,r3,828a1c <__smakebuf_r+0x13c>
  828958:	8080030b 	ldhu	r2,12(r16)
  82895c:	00c80004 	movi	r3,8192
  828960:	10820014 	ori	r2,r2,2048
  828964:	8080030d 	sth	r2,12(r16)
  828968:	20c01e26 	beq	r4,r3,8289e4 <__smakebuf_r+0x104>
  82896c:	04810004 	movi	r18,1024
  828970:	8809883a 	mov	r4,r17
  828974:	900b883a 	mov	r5,r18
  828978:	08235780 	call	823578 <_malloc_r>
  82897c:	1009883a 	mov	r4,r2
  828980:	10003126 	beq	r2,zero,828a48 <__smakebuf_r+0x168>
  828984:	80c0030b 	ldhu	r3,12(r16)
  828988:	008020b4 	movhi	r2,130
  82898c:	109f1304 	addi	r2,r2,31820
  828990:	88800f15 	stw	r2,60(r17)
  828994:	18c02014 	ori	r3,r3,128
  828998:	84800515 	stw	r18,20(r16)
  82899c:	80c0030d 	sth	r3,12(r16)
  8289a0:	81000415 	stw	r4,16(r16)
  8289a4:	81000015 	stw	r4,0(r16)
  8289a8:	dfc01217 	ldw	ra,72(sp)
  8289ac:	dc801117 	ldw	r18,68(sp)
  8289b0:	dc401017 	ldw	r17,64(sp)
  8289b4:	dc000f17 	ldw	r16,60(sp)
  8289b8:	dec01304 	addi	sp,sp,76
  8289bc:	f800283a 	ret
  8289c0:	80c0030b 	ldhu	r3,12(r16)
  8289c4:	1880200c 	andi	r2,r3,128
  8289c8:	10000426 	beq	r2,zero,8289dc <__smakebuf_r+0xfc>
  8289cc:	04801004 	movi	r18,64
  8289d0:	18820014 	ori	r2,r3,2048
  8289d4:	8080030d 	sth	r2,12(r16)
  8289d8:	003fe506 	br	828970 <__smakebuf_r+0x90>
  8289dc:	04810004 	movi	r18,1024
  8289e0:	003ffb06 	br	8289d0 <__smakebuf_r+0xf0>
  8289e4:	8140038f 	ldh	r5,14(r16)
  8289e8:	8809883a 	mov	r4,r17
  8289ec:	082ac3c0 	call	82ac3c <_isatty_r>
  8289f0:	103fde26 	beq	r2,zero,82896c <__smakebuf_r+0x8c>
  8289f4:	8080030b 	ldhu	r2,12(r16)
  8289f8:	80c010c4 	addi	r3,r16,67
  8289fc:	04810004 	movi	r18,1024
  828a00:	10800054 	ori	r2,r2,1
  828a04:	8080030d 	sth	r2,12(r16)
  828a08:	00800044 	movi	r2,1
  828a0c:	80c00415 	stw	r3,16(r16)
  828a10:	80800515 	stw	r2,20(r16)
  828a14:	80c00015 	stw	r3,0(r16)
  828a18:	003fd506 	br	828970 <__smakebuf_r+0x90>
  828a1c:	80c00a17 	ldw	r3,40(r16)
  828a20:	008020f4 	movhi	r2,131
  828a24:	10a96f04 	addi	r2,r2,-23108
  828a28:	18bfcb1e 	bne	r3,r2,828958 <__smakebuf_r+0x78>
  828a2c:	8080030b 	ldhu	r2,12(r16)
  828a30:	00c10004 	movi	r3,1024
  828a34:	1825883a 	mov	r18,r3
  828a38:	10c4b03a 	or	r2,r2,r3
  828a3c:	8080030d 	sth	r2,12(r16)
  828a40:	80c01315 	stw	r3,76(r16)
  828a44:	003fca06 	br	828970 <__smakebuf_r+0x90>
  828a48:	8100030b 	ldhu	r4,12(r16)
  828a4c:	2080800c 	andi	r2,r4,512
  828a50:	103fb21e 	bne	r2,zero,82891c <__smakebuf_r+0x3c>
  828a54:	80c010c4 	addi	r3,r16,67
  828a58:	21000094 	ori	r4,r4,2
  828a5c:	00800044 	movi	r2,1
  828a60:	80800515 	stw	r2,20(r16)
  828a64:	8100030d 	sth	r4,12(r16)
  828a68:	80c00415 	stw	r3,16(r16)
  828a6c:	80c00015 	stw	r3,0(r16)
  828a70:	003faa06 	br	82891c <__smakebuf_r+0x3c>

00828a74 <memchr>:
  828a74:	008000c4 	movi	r2,3
  828a78:	29403fcc 	andi	r5,r5,255
  828a7c:	2007883a 	mov	r3,r4
  828a80:	1180022e 	bgeu	r2,r6,828a8c <memchr+0x18>
  828a84:	2084703a 	and	r2,r4,r2
  828a88:	10000b26 	beq	r2,zero,828ab8 <memchr+0x44>
  828a8c:	313fffc4 	addi	r4,r6,-1
  828a90:	3000051e 	bne	r6,zero,828aa8 <memchr+0x34>
  828a94:	00002c06 	br	828b48 <memchr+0xd4>
  828a98:	213fffc4 	addi	r4,r4,-1
  828a9c:	00bfffc4 	movi	r2,-1
  828aa0:	18c00044 	addi	r3,r3,1
  828aa4:	20802826 	beq	r4,r2,828b48 <memchr+0xd4>
  828aa8:	18800003 	ldbu	r2,0(r3)
  828aac:	28bffa1e 	bne	r5,r2,828a98 <memchr+0x24>
  828ab0:	1805883a 	mov	r2,r3
  828ab4:	f800283a 	ret
  828ab8:	0011883a 	mov	r8,zero
  828abc:	0007883a 	mov	r3,zero
  828ac0:	01c00104 	movi	r7,4
  828ac4:	4004923a 	slli	r2,r8,8
  828ac8:	18c00044 	addi	r3,r3,1
  828acc:	1151883a 	add	r8,r2,r5
  828ad0:	19fffc1e 	bne	r3,r7,828ac4 <memchr+0x50>
  828ad4:	02bfbff4 	movhi	r10,65279
  828ad8:	52bfbfc4 	addi	r10,r10,-257
  828adc:	02602074 	movhi	r9,32897
  828ae0:	4a602004 	addi	r9,r9,-32640
  828ae4:	02c000c4 	movi	r11,3
  828ae8:	20800017 	ldw	r2,0(r4)
  828aec:	31bfff04 	addi	r6,r6,-4
  828af0:	200f883a 	mov	r7,r4
  828af4:	1204f03a 	xor	r2,r2,r8
  828af8:	1287883a 	add	r3,r2,r10
  828afc:	1a46703a 	and	r3,r3,r9
  828b00:	0084303a 	nor	r2,zero,r2
  828b04:	10c4703a 	and	r2,r2,r3
  828b08:	10000b26 	beq	r2,zero,828b38 <memchr+0xc4>
  828b0c:	20800003 	ldbu	r2,0(r4)
  828b10:	28800f26 	beq	r5,r2,828b50 <memchr+0xdc>
  828b14:	20800043 	ldbu	r2,1(r4)
  828b18:	21c00044 	addi	r7,r4,1
  828b1c:	28800c26 	beq	r5,r2,828b50 <memchr+0xdc>
  828b20:	20800083 	ldbu	r2,2(r4)
  828b24:	21c00084 	addi	r7,r4,2
  828b28:	28800926 	beq	r5,r2,828b50 <memchr+0xdc>
  828b2c:	208000c3 	ldbu	r2,3(r4)
  828b30:	21c000c4 	addi	r7,r4,3
  828b34:	28800626 	beq	r5,r2,828b50 <memchr+0xdc>
  828b38:	21000104 	addi	r4,r4,4
  828b3c:	59bfea36 	bltu	r11,r6,828ae8 <memchr+0x74>
  828b40:	2007883a 	mov	r3,r4
  828b44:	003fd106 	br	828a8c <memchr+0x18>
  828b48:	0005883a 	mov	r2,zero
  828b4c:	f800283a 	ret
  828b50:	3805883a 	mov	r2,r7
  828b54:	f800283a 	ret

00828b58 <memcpy>:
  828b58:	01c003c4 	movi	r7,15
  828b5c:	2007883a 	mov	r3,r4
  828b60:	3980032e 	bgeu	r7,r6,828b70 <memcpy+0x18>
  828b64:	2904b03a 	or	r2,r5,r4
  828b68:	108000cc 	andi	r2,r2,3
  828b6c:	10000926 	beq	r2,zero,828b94 <memcpy+0x3c>
  828b70:	30000626 	beq	r6,zero,828b8c <memcpy+0x34>
  828b74:	30cd883a 	add	r6,r6,r3
  828b78:	28800003 	ldbu	r2,0(r5)
  828b7c:	29400044 	addi	r5,r5,1
  828b80:	18800005 	stb	r2,0(r3)
  828b84:	18c00044 	addi	r3,r3,1
  828b88:	30fffb1e 	bne	r6,r3,828b78 <memcpy+0x20>
  828b8c:	2005883a 	mov	r2,r4
  828b90:	f800283a 	ret
  828b94:	3811883a 	mov	r8,r7
  828b98:	200f883a 	mov	r7,r4
  828b9c:	28c00017 	ldw	r3,0(r5)
  828ba0:	31bffc04 	addi	r6,r6,-16
  828ba4:	38c00015 	stw	r3,0(r7)
  828ba8:	28800117 	ldw	r2,4(r5)
  828bac:	38800115 	stw	r2,4(r7)
  828bb0:	28c00217 	ldw	r3,8(r5)
  828bb4:	38c00215 	stw	r3,8(r7)
  828bb8:	28800317 	ldw	r2,12(r5)
  828bbc:	29400404 	addi	r5,r5,16
  828bc0:	38800315 	stw	r2,12(r7)
  828bc4:	39c00404 	addi	r7,r7,16
  828bc8:	41bff436 	bltu	r8,r6,828b9c <memcpy+0x44>
  828bcc:	008000c4 	movi	r2,3
  828bd0:	1180072e 	bgeu	r2,r6,828bf0 <memcpy+0x98>
  828bd4:	1007883a 	mov	r3,r2
  828bd8:	28800017 	ldw	r2,0(r5)
  828bdc:	31bfff04 	addi	r6,r6,-4
  828be0:	29400104 	addi	r5,r5,4
  828be4:	38800015 	stw	r2,0(r7)
  828be8:	39c00104 	addi	r7,r7,4
  828bec:	19bffa36 	bltu	r3,r6,828bd8 <memcpy+0x80>
  828bf0:	3807883a 	mov	r3,r7
  828bf4:	003fde06 	br	828b70 <memcpy+0x18>

00828bf8 <memmove>:
  828bf8:	2807883a 	mov	r3,r5
  828bfc:	2011883a 	mov	r8,r4
  828c00:	29000c2e 	bgeu	r5,r4,828c34 <memmove+0x3c>
  828c04:	298f883a 	add	r7,r5,r6
  828c08:	21c00a2e 	bgeu	r4,r7,828c34 <memmove+0x3c>
  828c0c:	30000726 	beq	r6,zero,828c2c <memmove+0x34>
  828c10:	2187883a 	add	r3,r4,r6
  828c14:	198dc83a 	sub	r6,r3,r6
  828c18:	39ffffc4 	addi	r7,r7,-1
  828c1c:	38800003 	ldbu	r2,0(r7)
  828c20:	18ffffc4 	addi	r3,r3,-1
  828c24:	18800005 	stb	r2,0(r3)
  828c28:	19bffb1e 	bne	r3,r6,828c18 <memmove+0x20>
  828c2c:	2005883a 	mov	r2,r4
  828c30:	f800283a 	ret
  828c34:	01c003c4 	movi	r7,15
  828c38:	39800a36 	bltu	r7,r6,828c64 <memmove+0x6c>
  828c3c:	303ffb26 	beq	r6,zero,828c2c <memmove+0x34>
  828c40:	400f883a 	mov	r7,r8
  828c44:	320d883a 	add	r6,r6,r8
  828c48:	28800003 	ldbu	r2,0(r5)
  828c4c:	29400044 	addi	r5,r5,1
  828c50:	38800005 	stb	r2,0(r7)
  828c54:	39c00044 	addi	r7,r7,1
  828c58:	39bffb1e 	bne	r7,r6,828c48 <memmove+0x50>
  828c5c:	2005883a 	mov	r2,r4
  828c60:	f800283a 	ret
  828c64:	1904b03a 	or	r2,r3,r4
  828c68:	108000cc 	andi	r2,r2,3
  828c6c:	103ff31e 	bne	r2,zero,828c3c <memmove+0x44>
  828c70:	3811883a 	mov	r8,r7
  828c74:	180b883a 	mov	r5,r3
  828c78:	200f883a 	mov	r7,r4
  828c7c:	28c00017 	ldw	r3,0(r5)
  828c80:	31bffc04 	addi	r6,r6,-16
  828c84:	38c00015 	stw	r3,0(r7)
  828c88:	28800117 	ldw	r2,4(r5)
  828c8c:	38800115 	stw	r2,4(r7)
  828c90:	28c00217 	ldw	r3,8(r5)
  828c94:	38c00215 	stw	r3,8(r7)
  828c98:	28800317 	ldw	r2,12(r5)
  828c9c:	29400404 	addi	r5,r5,16
  828ca0:	38800315 	stw	r2,12(r7)
  828ca4:	39c00404 	addi	r7,r7,16
  828ca8:	41bff436 	bltu	r8,r6,828c7c <memmove+0x84>
  828cac:	008000c4 	movi	r2,3
  828cb0:	1180072e 	bgeu	r2,r6,828cd0 <memmove+0xd8>
  828cb4:	1007883a 	mov	r3,r2
  828cb8:	28800017 	ldw	r2,0(r5)
  828cbc:	31bfff04 	addi	r6,r6,-4
  828cc0:	29400104 	addi	r5,r5,4
  828cc4:	38800015 	stw	r2,0(r7)
  828cc8:	39c00104 	addi	r7,r7,4
  828ccc:	19bffa36 	bltu	r3,r6,828cb8 <memmove+0xc0>
  828cd0:	3811883a 	mov	r8,r7
  828cd4:	003fd906 	br	828c3c <memmove+0x44>

00828cd8 <memset>:
  828cd8:	008000c4 	movi	r2,3
  828cdc:	29403fcc 	andi	r5,r5,255
  828ce0:	2007883a 	mov	r3,r4
  828ce4:	1180022e 	bgeu	r2,r6,828cf0 <memset+0x18>
  828ce8:	2084703a 	and	r2,r4,r2
  828cec:	10000826 	beq	r2,zero,828d10 <memset+0x38>
  828cf0:	30000526 	beq	r6,zero,828d08 <memset+0x30>
  828cf4:	2805883a 	mov	r2,r5
  828cf8:	30cd883a 	add	r6,r6,r3
  828cfc:	18800005 	stb	r2,0(r3)
  828d00:	18c00044 	addi	r3,r3,1
  828d04:	19bffd1e 	bne	r3,r6,828cfc <memset+0x24>
  828d08:	2005883a 	mov	r2,r4
  828d0c:	f800283a 	ret
  828d10:	2804923a 	slli	r2,r5,8
  828d14:	020003c4 	movi	r8,15
  828d18:	200f883a 	mov	r7,r4
  828d1c:	2884b03a 	or	r2,r5,r2
  828d20:	1006943a 	slli	r3,r2,16
  828d24:	10c6b03a 	or	r3,r2,r3
  828d28:	41800a2e 	bgeu	r8,r6,828d54 <memset+0x7c>
  828d2c:	4005883a 	mov	r2,r8
  828d30:	31bffc04 	addi	r6,r6,-16
  828d34:	38c00015 	stw	r3,0(r7)
  828d38:	38c00115 	stw	r3,4(r7)
  828d3c:	38c00215 	stw	r3,8(r7)
  828d40:	38c00315 	stw	r3,12(r7)
  828d44:	39c00404 	addi	r7,r7,16
  828d48:	11bff936 	bltu	r2,r6,828d30 <memset+0x58>
  828d4c:	008000c4 	movi	r2,3
  828d50:	1180052e 	bgeu	r2,r6,828d68 <memset+0x90>
  828d54:	31bfff04 	addi	r6,r6,-4
  828d58:	008000c4 	movi	r2,3
  828d5c:	38c00015 	stw	r3,0(r7)
  828d60:	39c00104 	addi	r7,r7,4
  828d64:	11bffb36 	bltu	r2,r6,828d54 <memset+0x7c>
  828d68:	3807883a 	mov	r3,r7
  828d6c:	003fe006 	br	828cf0 <memset+0x18>

00828d70 <_Bfree>:
  828d70:	28000826 	beq	r5,zero,828d94 <_Bfree+0x24>
  828d74:	28800117 	ldw	r2,4(r5)
  828d78:	21001317 	ldw	r4,76(r4)
  828d7c:	1085883a 	add	r2,r2,r2
  828d80:	1085883a 	add	r2,r2,r2
  828d84:	1105883a 	add	r2,r2,r4
  828d88:	10c00017 	ldw	r3,0(r2)
  828d8c:	28c00015 	stw	r3,0(r5)
  828d90:	11400015 	stw	r5,0(r2)
  828d94:	f800283a 	ret

00828d98 <__hi0bits>:
  828d98:	20bfffec 	andhi	r2,r4,65535
  828d9c:	10001426 	beq	r2,zero,828df0 <__hi0bits+0x58>
  828da0:	0007883a 	mov	r3,zero
  828da4:	20bfc02c 	andhi	r2,r4,65280
  828da8:	1000021e 	bne	r2,zero,828db4 <__hi0bits+0x1c>
  828dac:	2008923a 	slli	r4,r4,8
  828db0:	18c00204 	addi	r3,r3,8
  828db4:	20bc002c 	andhi	r2,r4,61440
  828db8:	1000021e 	bne	r2,zero,828dc4 <__hi0bits+0x2c>
  828dbc:	2008913a 	slli	r4,r4,4
  828dc0:	18c00104 	addi	r3,r3,4
  828dc4:	20b0002c 	andhi	r2,r4,49152
  828dc8:	1000031e 	bne	r2,zero,828dd8 <__hi0bits+0x40>
  828dcc:	2105883a 	add	r2,r4,r4
  828dd0:	18c00084 	addi	r3,r3,2
  828dd4:	1089883a 	add	r4,r2,r2
  828dd8:	20000316 	blt	r4,zero,828de8 <__hi0bits+0x50>
  828ddc:	2090002c 	andhi	r2,r4,16384
  828de0:	10000626 	beq	r2,zero,828dfc <__hi0bits+0x64>
  828de4:	18c00044 	addi	r3,r3,1
  828de8:	1805883a 	mov	r2,r3
  828dec:	f800283a 	ret
  828df0:	2008943a 	slli	r4,r4,16
  828df4:	00c00404 	movi	r3,16
  828df8:	003fea06 	br	828da4 <__hi0bits+0xc>
  828dfc:	00c00804 	movi	r3,32
  828e00:	1805883a 	mov	r2,r3
  828e04:	f800283a 	ret

00828e08 <__lo0bits>:
  828e08:	20c00017 	ldw	r3,0(r4)
  828e0c:	188001cc 	andi	r2,r3,7
  828e10:	10000a26 	beq	r2,zero,828e3c <__lo0bits+0x34>
  828e14:	1880004c 	andi	r2,r3,1
  828e18:	1005003a 	cmpeq	r2,r2,zero
  828e1c:	10002126 	beq	r2,zero,828ea4 <__lo0bits+0x9c>
  828e20:	1880008c 	andi	r2,r3,2
  828e24:	1000251e 	bne	r2,zero,828ebc <__lo0bits+0xb4>
  828e28:	1804d0ba 	srli	r2,r3,2
  828e2c:	01400084 	movi	r5,2
  828e30:	20800015 	stw	r2,0(r4)
  828e34:	2805883a 	mov	r2,r5
  828e38:	f800283a 	ret
  828e3c:	18bfffcc 	andi	r2,r3,65535
  828e40:	10001526 	beq	r2,zero,828e98 <__lo0bits+0x90>
  828e44:	000b883a 	mov	r5,zero
  828e48:	18803fcc 	andi	r2,r3,255
  828e4c:	1000021e 	bne	r2,zero,828e58 <__lo0bits+0x50>
  828e50:	1806d23a 	srli	r3,r3,8
  828e54:	29400204 	addi	r5,r5,8
  828e58:	188003cc 	andi	r2,r3,15
  828e5c:	1000021e 	bne	r2,zero,828e68 <__lo0bits+0x60>
  828e60:	1806d13a 	srli	r3,r3,4
  828e64:	29400104 	addi	r5,r5,4
  828e68:	188000cc 	andi	r2,r3,3
  828e6c:	1000021e 	bne	r2,zero,828e78 <__lo0bits+0x70>
  828e70:	1806d0ba 	srli	r3,r3,2
  828e74:	29400084 	addi	r5,r5,2
  828e78:	1880004c 	andi	r2,r3,1
  828e7c:	1000031e 	bne	r2,zero,828e8c <__lo0bits+0x84>
  828e80:	1806d07a 	srli	r3,r3,1
  828e84:	18000a26 	beq	r3,zero,828eb0 <__lo0bits+0xa8>
  828e88:	29400044 	addi	r5,r5,1
  828e8c:	2805883a 	mov	r2,r5
  828e90:	20c00015 	stw	r3,0(r4)
  828e94:	f800283a 	ret
  828e98:	1806d43a 	srli	r3,r3,16
  828e9c:	01400404 	movi	r5,16
  828ea0:	003fe906 	br	828e48 <__lo0bits+0x40>
  828ea4:	000b883a 	mov	r5,zero
  828ea8:	2805883a 	mov	r2,r5
  828eac:	f800283a 	ret
  828eb0:	01400804 	movi	r5,32
  828eb4:	2805883a 	mov	r2,r5
  828eb8:	f800283a 	ret
  828ebc:	1804d07a 	srli	r2,r3,1
  828ec0:	01400044 	movi	r5,1
  828ec4:	20800015 	stw	r2,0(r4)
  828ec8:	003fda06 	br	828e34 <__lo0bits+0x2c>

00828ecc <__mcmp>:
  828ecc:	20800417 	ldw	r2,16(r4)
  828ed0:	28c00417 	ldw	r3,16(r5)
  828ed4:	10cfc83a 	sub	r7,r2,r3
  828ed8:	38000c1e 	bne	r7,zero,828f0c <__mcmp+0x40>
  828edc:	18c5883a 	add	r2,r3,r3
  828ee0:	1085883a 	add	r2,r2,r2
  828ee4:	10c00504 	addi	r3,r2,20
  828ee8:	21000504 	addi	r4,r4,20
  828eec:	28cb883a 	add	r5,r5,r3
  828ef0:	2085883a 	add	r2,r4,r2
  828ef4:	10bfff04 	addi	r2,r2,-4
  828ef8:	297fff04 	addi	r5,r5,-4
  828efc:	11800017 	ldw	r6,0(r2)
  828f00:	28c00017 	ldw	r3,0(r5)
  828f04:	30c0031e 	bne	r6,r3,828f14 <__mcmp+0x48>
  828f08:	20bffa36 	bltu	r4,r2,828ef4 <__mcmp+0x28>
  828f0c:	3805883a 	mov	r2,r7
  828f10:	f800283a 	ret
  828f14:	30c00336 	bltu	r6,r3,828f24 <__mcmp+0x58>
  828f18:	01c00044 	movi	r7,1
  828f1c:	3805883a 	mov	r2,r7
  828f20:	f800283a 	ret
  828f24:	01ffffc4 	movi	r7,-1
  828f28:	003ff806 	br	828f0c <__mcmp+0x40>

00828f2c <__ulp>:
  828f2c:	295ffc2c 	andhi	r5,r5,32752
  828f30:	013f3034 	movhi	r4,64704
  828f34:	290b883a 	add	r5,r5,r4
  828f38:	0145c83a 	sub	r2,zero,r5
  828f3c:	1007d53a 	srai	r3,r2,20
  828f40:	000d883a 	mov	r6,zero
  828f44:	0140040e 	bge	zero,r5,828f58 <__ulp+0x2c>
  828f48:	280f883a 	mov	r7,r5
  828f4c:	3807883a 	mov	r3,r7
  828f50:	3005883a 	mov	r2,r6
  828f54:	f800283a 	ret
  828f58:	008004c4 	movi	r2,19
  828f5c:	193ffb04 	addi	r4,r3,-20
  828f60:	10c00c0e 	bge	r2,r3,828f94 <__ulp+0x68>
  828f64:	008007c4 	movi	r2,31
  828f68:	1107c83a 	sub	r3,r2,r4
  828f6c:	00800784 	movi	r2,30
  828f70:	01400044 	movi	r5,1
  828f74:	11000216 	blt	r2,r4,828f80 <__ulp+0x54>
  828f78:	00800044 	movi	r2,1
  828f7c:	10ca983a 	sll	r5,r2,r3
  828f80:	000f883a 	mov	r7,zero
  828f84:	280d883a 	mov	r6,r5
  828f88:	3807883a 	mov	r3,r7
  828f8c:	3005883a 	mov	r2,r6
  828f90:	f800283a 	ret
  828f94:	00800234 	movhi	r2,8
  828f98:	10cfd83a 	sra	r7,r2,r3
  828f9c:	000d883a 	mov	r6,zero
  828fa0:	3005883a 	mov	r2,r6
  828fa4:	3807883a 	mov	r3,r7
  828fa8:	f800283a 	ret

00828fac <__b2d>:
  828fac:	20800417 	ldw	r2,16(r4)
  828fb0:	defff904 	addi	sp,sp,-28
  828fb4:	dd000415 	stw	r20,16(sp)
  828fb8:	1085883a 	add	r2,r2,r2
  828fbc:	25000504 	addi	r20,r4,20
  828fc0:	1085883a 	add	r2,r2,r2
  828fc4:	dc000015 	stw	r16,0(sp)
  828fc8:	a0a1883a 	add	r16,r20,r2
  828fcc:	dd400515 	stw	r21,20(sp)
  828fd0:	857fff17 	ldw	r21,-4(r16)
  828fd4:	dc400115 	stw	r17,4(sp)
  828fd8:	dfc00615 	stw	ra,24(sp)
  828fdc:	a809883a 	mov	r4,r21
  828fe0:	2823883a 	mov	r17,r5
  828fe4:	dcc00315 	stw	r19,12(sp)
  828fe8:	dc800215 	stw	r18,8(sp)
  828fec:	0828d980 	call	828d98 <__hi0bits>
  828ff0:	100b883a 	mov	r5,r2
  828ff4:	00800804 	movi	r2,32
  828ff8:	1145c83a 	sub	r2,r2,r5
  828ffc:	88800015 	stw	r2,0(r17)
  829000:	00800284 	movi	r2,10
  829004:	80ffff04 	addi	r3,r16,-4
  829008:	11401416 	blt	r2,r5,82905c <__b2d+0xb0>
  82900c:	008002c4 	movi	r2,11
  829010:	1149c83a 	sub	r4,r2,r5
  829014:	a0c02736 	bltu	r20,r3,8290b4 <__b2d+0x108>
  829018:	000d883a 	mov	r6,zero
  82901c:	28800544 	addi	r2,r5,21
  829020:	a906d83a 	srl	r3,r21,r4
  829024:	a884983a 	sll	r2,r21,r2
  829028:	1ccffc34 	orhi	r19,r3,16368
  82902c:	11a4b03a 	or	r18,r2,r6
  829030:	9005883a 	mov	r2,r18
  829034:	9807883a 	mov	r3,r19
  829038:	dfc00617 	ldw	ra,24(sp)
  82903c:	dd400517 	ldw	r21,20(sp)
  829040:	dd000417 	ldw	r20,16(sp)
  829044:	dcc00317 	ldw	r19,12(sp)
  829048:	dc800217 	ldw	r18,8(sp)
  82904c:	dc400117 	ldw	r17,4(sp)
  829050:	dc000017 	ldw	r16,0(sp)
  829054:	dec00704 	addi	sp,sp,28
  829058:	f800283a 	ret
  82905c:	a0c00e36 	bltu	r20,r3,829098 <__b2d+0xec>
  829060:	293ffd44 	addi	r4,r5,-11
  829064:	000d883a 	mov	r6,zero
  829068:	20000f26 	beq	r4,zero,8290a8 <__b2d+0xfc>
  82906c:	00800804 	movi	r2,32
  829070:	110bc83a 	sub	r5,r2,r4
  829074:	a0c01236 	bltu	r20,r3,8290c0 <__b2d+0x114>
  829078:	000f883a 	mov	r7,zero
  82907c:	a904983a 	sll	r2,r21,r4
  829080:	3146d83a 	srl	r3,r6,r5
  829084:	3108983a 	sll	r4,r6,r4
  829088:	108ffc34 	orhi	r2,r2,16368
  82908c:	18a6b03a 	or	r19,r3,r2
  829090:	3924b03a 	or	r18,r7,r4
  829094:	003fe606 	br	829030 <__b2d+0x84>
  829098:	293ffd44 	addi	r4,r5,-11
  82909c:	81bffe17 	ldw	r6,-8(r16)
  8290a0:	80fffe04 	addi	r3,r16,-8
  8290a4:	203ff11e 	bne	r4,zero,82906c <__b2d+0xc0>
  8290a8:	accffc34 	orhi	r19,r21,16368
  8290ac:	3025883a 	mov	r18,r6
  8290b0:	003fdf06 	br	829030 <__b2d+0x84>
  8290b4:	18bfff17 	ldw	r2,-4(r3)
  8290b8:	110cd83a 	srl	r6,r2,r4
  8290bc:	003fd706 	br	82901c <__b2d+0x70>
  8290c0:	18bfff17 	ldw	r2,-4(r3)
  8290c4:	114ed83a 	srl	r7,r2,r5
  8290c8:	003fec06 	br	82907c <__b2d+0xd0>

008290cc <__ratio>:
  8290cc:	defff904 	addi	sp,sp,-28
  8290d0:	dc400215 	stw	r17,8(sp)
  8290d4:	2823883a 	mov	r17,r5
  8290d8:	d80b883a 	mov	r5,sp
  8290dc:	dfc00615 	stw	ra,24(sp)
  8290e0:	dd000515 	stw	r20,20(sp)
  8290e4:	dcc00415 	stw	r19,16(sp)
  8290e8:	dc800315 	stw	r18,12(sp)
  8290ec:	2025883a 	mov	r18,r4
  8290f0:	0828fac0 	call	828fac <__b2d>
  8290f4:	8809883a 	mov	r4,r17
  8290f8:	d9400104 	addi	r5,sp,4
  8290fc:	1027883a 	mov	r19,r2
  829100:	1829883a 	mov	r20,r3
  829104:	0828fac0 	call	828fac <__b2d>
  829108:	89000417 	ldw	r4,16(r17)
  82910c:	91c00417 	ldw	r7,16(r18)
  829110:	d9800117 	ldw	r6,4(sp)
  829114:	180b883a 	mov	r5,r3
  829118:	390fc83a 	sub	r7,r7,r4
  82911c:	1009883a 	mov	r4,r2
  829120:	d8800017 	ldw	r2,0(sp)
  829124:	380e917a 	slli	r7,r7,5
  829128:	2011883a 	mov	r8,r4
  82912c:	1185c83a 	sub	r2,r2,r6
  829130:	11c5883a 	add	r2,r2,r7
  829134:	1006953a 	slli	r3,r2,20
  829138:	2813883a 	mov	r9,r5
  82913c:	00800d0e 	bge	zero,r2,829174 <__ratio+0xa8>
  829140:	1d29883a 	add	r20,r3,r20
  829144:	a00b883a 	mov	r5,r20
  829148:	480f883a 	mov	r7,r9
  82914c:	9809883a 	mov	r4,r19
  829150:	400d883a 	mov	r6,r8
  829154:	082b9280 	call	82b928 <__divdf3>
  829158:	dfc00617 	ldw	ra,24(sp)
  82915c:	dd000517 	ldw	r20,20(sp)
  829160:	dcc00417 	ldw	r19,16(sp)
  829164:	dc800317 	ldw	r18,12(sp)
  829168:	dc400217 	ldw	r17,8(sp)
  82916c:	dec00704 	addi	sp,sp,28
  829170:	f800283a 	ret
  829174:	28d3c83a 	sub	r9,r5,r3
  829178:	003ff206 	br	829144 <__ratio+0x78>

0082917c <_mprec_log10>:
  82917c:	defffe04 	addi	sp,sp,-8
  829180:	008005c4 	movi	r2,23
  829184:	dc000015 	stw	r16,0(sp)
  829188:	dfc00115 	stw	ra,4(sp)
  82918c:	2021883a 	mov	r16,r4
  829190:	11000c16 	blt	r2,r4,8291c4 <_mprec_log10+0x48>
  829194:	200490fa 	slli	r2,r4,3
  829198:	00c020f4 	movhi	r3,131
  82919c:	18ce7a04 	addi	r3,r3,14824
  8291a0:	10c5883a 	add	r2,r2,r3
  8291a4:	12400117 	ldw	r9,4(r2)
  8291a8:	12000017 	ldw	r8,0(r2)
  8291ac:	4807883a 	mov	r3,r9
  8291b0:	4005883a 	mov	r2,r8
  8291b4:	dfc00117 	ldw	ra,4(sp)
  8291b8:	dc000017 	ldw	r16,0(sp)
  8291bc:	dec00204 	addi	sp,sp,8
  8291c0:	f800283a 	ret
  8291c4:	0011883a 	mov	r8,zero
  8291c8:	024ffc34 	movhi	r9,16368
  8291cc:	0005883a 	mov	r2,zero
  8291d0:	00d00934 	movhi	r3,16420
  8291d4:	480b883a 	mov	r5,r9
  8291d8:	4009883a 	mov	r4,r8
  8291dc:	180f883a 	mov	r7,r3
  8291e0:	100d883a 	mov	r6,r2
  8291e4:	08226e80 	call	8226e8 <__muldf3>
  8291e8:	843fffc4 	addi	r16,r16,-1
  8291ec:	1011883a 	mov	r8,r2
  8291f0:	1813883a 	mov	r9,r3
  8291f4:	803ff51e 	bne	r16,zero,8291cc <_mprec_log10+0x50>
  8291f8:	4005883a 	mov	r2,r8
  8291fc:	4807883a 	mov	r3,r9
  829200:	dfc00117 	ldw	ra,4(sp)
  829204:	dc000017 	ldw	r16,0(sp)
  829208:	dec00204 	addi	sp,sp,8
  82920c:	f800283a 	ret

00829210 <__copybits>:
  829210:	297fffc4 	addi	r5,r5,-1
  829214:	30800417 	ldw	r2,16(r6)
  829218:	280bd17a 	srai	r5,r5,5
  82921c:	31800504 	addi	r6,r6,20
  829220:	1085883a 	add	r2,r2,r2
  829224:	294b883a 	add	r5,r5,r5
  829228:	294b883a 	add	r5,r5,r5
  82922c:	1085883a 	add	r2,r2,r2
  829230:	290b883a 	add	r5,r5,r4
  829234:	3087883a 	add	r3,r6,r2
  829238:	29400104 	addi	r5,r5,4
  82923c:	30c0052e 	bgeu	r6,r3,829254 <__copybits+0x44>
  829240:	30800017 	ldw	r2,0(r6)
  829244:	31800104 	addi	r6,r6,4
  829248:	20800015 	stw	r2,0(r4)
  82924c:	21000104 	addi	r4,r4,4
  829250:	30fffb36 	bltu	r6,r3,829240 <__copybits+0x30>
  829254:	2140032e 	bgeu	r4,r5,829264 <__copybits+0x54>
  829258:	20000015 	stw	zero,0(r4)
  82925c:	21000104 	addi	r4,r4,4
  829260:	217ffd36 	bltu	r4,r5,829258 <__copybits+0x48>
  829264:	f800283a 	ret

00829268 <__any_on>:
  829268:	20800417 	ldw	r2,16(r4)
  82926c:	2807d17a 	srai	r3,r5,5
  829270:	21000504 	addi	r4,r4,20
  829274:	10c00d0e 	bge	r2,r3,8292ac <__any_on+0x44>
  829278:	1085883a 	add	r2,r2,r2
  82927c:	1085883a 	add	r2,r2,r2
  829280:	208d883a 	add	r6,r4,r2
  829284:	2180182e 	bgeu	r4,r6,8292e8 <__any_on+0x80>
  829288:	30bfff17 	ldw	r2,-4(r6)
  82928c:	30ffff04 	addi	r3,r6,-4
  829290:	1000041e 	bne	r2,zero,8292a4 <__any_on+0x3c>
  829294:	20c0142e 	bgeu	r4,r3,8292e8 <__any_on+0x80>
  829298:	18ffff04 	addi	r3,r3,-4
  82929c:	18800017 	ldw	r2,0(r3)
  8292a0:	103ffc26 	beq	r2,zero,829294 <__any_on+0x2c>
  8292a4:	00800044 	movi	r2,1
  8292a8:	f800283a 	ret
  8292ac:	18800a0e 	bge	r3,r2,8292d8 <__any_on+0x70>
  8292b0:	294007cc 	andi	r5,r5,31
  8292b4:	28000826 	beq	r5,zero,8292d8 <__any_on+0x70>
  8292b8:	18c5883a 	add	r2,r3,r3
  8292bc:	1085883a 	add	r2,r2,r2
  8292c0:	208d883a 	add	r6,r4,r2
  8292c4:	30c00017 	ldw	r3,0(r6)
  8292c8:	1944d83a 	srl	r2,r3,r5
  8292cc:	1144983a 	sll	r2,r2,r5
  8292d0:	18bff41e 	bne	r3,r2,8292a4 <__any_on+0x3c>
  8292d4:	003feb06 	br	829284 <__any_on+0x1c>
  8292d8:	18c5883a 	add	r2,r3,r3
  8292dc:	1085883a 	add	r2,r2,r2
  8292e0:	208d883a 	add	r6,r4,r2
  8292e4:	003fe706 	br	829284 <__any_on+0x1c>
  8292e8:	0005883a 	mov	r2,zero
  8292ec:	f800283a 	ret

008292f0 <_Balloc>:
  8292f0:	20c01317 	ldw	r3,76(r4)
  8292f4:	defffb04 	addi	sp,sp,-20
  8292f8:	dcc00315 	stw	r19,12(sp)
  8292fc:	dc800215 	stw	r18,8(sp)
  829300:	dfc00415 	stw	ra,16(sp)
  829304:	2825883a 	mov	r18,r5
  829308:	dc400115 	stw	r17,4(sp)
  82930c:	dc000015 	stw	r16,0(sp)
  829310:	2027883a 	mov	r19,r4
  829314:	01800404 	movi	r6,16
  829318:	01400104 	movi	r5,4
  82931c:	18001726 	beq	r3,zero,82937c <_Balloc+0x8c>
  829320:	01400044 	movi	r5,1
  829324:	9485883a 	add	r2,r18,r18
  829328:	2ca2983a 	sll	r17,r5,r18
  82932c:	1085883a 	add	r2,r2,r2
  829330:	10c7883a 	add	r3,r2,r3
  829334:	1c000017 	ldw	r16,0(r3)
  829338:	8c4d883a 	add	r6,r17,r17
  82933c:	318d883a 	add	r6,r6,r6
  829340:	9809883a 	mov	r4,r19
  829344:	31800504 	addi	r6,r6,20
  829348:	80001226 	beq	r16,zero,829394 <_Balloc+0xa4>
  82934c:	80800017 	ldw	r2,0(r16)
  829350:	18800015 	stw	r2,0(r3)
  829354:	80000415 	stw	zero,16(r16)
  829358:	80000315 	stw	zero,12(r16)
  82935c:	8005883a 	mov	r2,r16
  829360:	dfc00417 	ldw	ra,16(sp)
  829364:	dcc00317 	ldw	r19,12(sp)
  829368:	dc800217 	ldw	r18,8(sp)
  82936c:	dc400117 	ldw	r17,4(sp)
  829370:	dc000017 	ldw	r16,0(sp)
  829374:	dec00504 	addi	sp,sp,20
  829378:	f800283a 	ret
  82937c:	082a9800 	call	82a980 <_calloc_r>
  829380:	1007883a 	mov	r3,r2
  829384:	0021883a 	mov	r16,zero
  829388:	98801315 	stw	r2,76(r19)
  82938c:	103fe41e 	bne	r2,zero,829320 <_Balloc+0x30>
  829390:	003ff206 	br	82935c <_Balloc+0x6c>
  829394:	082a9800 	call	82a980 <_calloc_r>
  829398:	103ff026 	beq	r2,zero,82935c <_Balloc+0x6c>
  82939c:	1021883a 	mov	r16,r2
  8293a0:	14800115 	stw	r18,4(r2)
  8293a4:	14400215 	stw	r17,8(r2)
  8293a8:	003fea06 	br	829354 <_Balloc+0x64>

008293ac <__d2b>:
  8293ac:	defff504 	addi	sp,sp,-44
  8293b0:	dcc00515 	stw	r19,20(sp)
  8293b4:	04c00044 	movi	r19,1
  8293b8:	dc000215 	stw	r16,8(sp)
  8293bc:	2821883a 	mov	r16,r5
  8293c0:	980b883a 	mov	r5,r19
  8293c4:	ddc00915 	stw	r23,36(sp)
  8293c8:	dd800815 	stw	r22,32(sp)
  8293cc:	dd400715 	stw	r21,28(sp)
  8293d0:	dd000615 	stw	r20,24(sp)
  8293d4:	dc800415 	stw	r18,16(sp)
  8293d8:	dc400315 	stw	r17,12(sp)
  8293dc:	dfc00a15 	stw	ra,40(sp)
  8293e0:	3023883a 	mov	r17,r6
  8293e4:	382d883a 	mov	r22,r7
  8293e8:	ddc00b17 	ldw	r23,44(sp)
  8293ec:	08292f00 	call	8292f0 <_Balloc>
  8293f0:	1025883a 	mov	r18,r2
  8293f4:	00a00034 	movhi	r2,32768
  8293f8:	10bfffc4 	addi	r2,r2,-1
  8293fc:	8888703a 	and	r4,r17,r2
  829400:	202ad53a 	srli	r21,r4,20
  829404:	00800434 	movhi	r2,16
  829408:	10bfffc4 	addi	r2,r2,-1
  82940c:	8886703a 	and	r3,r17,r2
  829410:	a829003a 	cmpeq	r20,r21,zero
  829414:	800b883a 	mov	r5,r16
  829418:	d8c00115 	stw	r3,4(sp)
  82941c:	94000504 	addi	r16,r18,20
  829420:	a000021e 	bne	r20,zero,82942c <__d2b+0x80>
  829424:	18c00434 	orhi	r3,r3,16
  829428:	d8c00115 	stw	r3,4(sp)
  82942c:	28002726 	beq	r5,zero,8294cc <__d2b+0x120>
  829430:	d809883a 	mov	r4,sp
  829434:	d9400015 	stw	r5,0(sp)
  829438:	0828e080 	call	828e08 <__lo0bits>
  82943c:	100d883a 	mov	r6,r2
  829440:	10003526 	beq	r2,zero,829518 <__d2b+0x16c>
  829444:	d8c00117 	ldw	r3,4(sp)
  829448:	00800804 	movi	r2,32
  82944c:	1185c83a 	sub	r2,r2,r6
  829450:	d9000017 	ldw	r4,0(sp)
  829454:	1886983a 	sll	r3,r3,r2
  829458:	1906b03a 	or	r3,r3,r4
  82945c:	90c00515 	stw	r3,20(r18)
  829460:	d8c00117 	ldw	r3,4(sp)
  829464:	1986d83a 	srl	r3,r3,r6
  829468:	d8c00115 	stw	r3,4(sp)
  82946c:	180b003a 	cmpeq	r5,r3,zero
  829470:	00800084 	movi	r2,2
  829474:	114bc83a 	sub	r5,r2,r5
  829478:	80c00115 	stw	r3,4(r16)
  82947c:	91400415 	stw	r5,16(r18)
  829480:	a0001a1e 	bne	r20,zero,8294ec <__d2b+0x140>
  829484:	3545883a 	add	r2,r6,r21
  829488:	10bef344 	addi	r2,r2,-1075
  82948c:	00c00d44 	movi	r3,53
  829490:	b0800015 	stw	r2,0(r22)
  829494:	1987c83a 	sub	r3,r3,r6
  829498:	b8c00015 	stw	r3,0(r23)
  82949c:	9005883a 	mov	r2,r18
  8294a0:	dfc00a17 	ldw	ra,40(sp)
  8294a4:	ddc00917 	ldw	r23,36(sp)
  8294a8:	dd800817 	ldw	r22,32(sp)
  8294ac:	dd400717 	ldw	r21,28(sp)
  8294b0:	dd000617 	ldw	r20,24(sp)
  8294b4:	dcc00517 	ldw	r19,20(sp)
  8294b8:	dc800417 	ldw	r18,16(sp)
  8294bc:	dc400317 	ldw	r17,12(sp)
  8294c0:	dc000217 	ldw	r16,8(sp)
  8294c4:	dec00b04 	addi	sp,sp,44
  8294c8:	f800283a 	ret
  8294cc:	d9000104 	addi	r4,sp,4
  8294d0:	0828e080 	call	828e08 <__lo0bits>
  8294d4:	11800804 	addi	r6,r2,32
  8294d8:	d8800117 	ldw	r2,4(sp)
  8294dc:	94c00415 	stw	r19,16(r18)
  8294e0:	980b883a 	mov	r5,r19
  8294e4:	90800515 	stw	r2,20(r18)
  8294e8:	a03fe626 	beq	r20,zero,829484 <__d2b+0xd8>
  8294ec:	2945883a 	add	r2,r5,r5
  8294f0:	1085883a 	add	r2,r2,r2
  8294f4:	1405883a 	add	r2,r2,r16
  8294f8:	113fff17 	ldw	r4,-4(r2)
  8294fc:	30fef384 	addi	r3,r6,-1074
  829500:	2820917a 	slli	r16,r5,5
  829504:	b0c00015 	stw	r3,0(r22)
  829508:	0828d980 	call	828d98 <__hi0bits>
  82950c:	80a1c83a 	sub	r16,r16,r2
  829510:	bc000015 	stw	r16,0(r23)
  829514:	003fe106 	br	82949c <__d2b+0xf0>
  829518:	d8800017 	ldw	r2,0(sp)
  82951c:	90800515 	stw	r2,20(r18)
  829520:	d8c00117 	ldw	r3,4(sp)
  829524:	003fd106 	br	82946c <__d2b+0xc0>

00829528 <__mdiff>:
  829528:	defffb04 	addi	sp,sp,-20
  82952c:	dc000015 	stw	r16,0(sp)
  829530:	2821883a 	mov	r16,r5
  829534:	dc800215 	stw	r18,8(sp)
  829538:	300b883a 	mov	r5,r6
  82953c:	2025883a 	mov	r18,r4
  829540:	8009883a 	mov	r4,r16
  829544:	dc400115 	stw	r17,4(sp)
  829548:	dfc00415 	stw	ra,16(sp)
  82954c:	dcc00315 	stw	r19,12(sp)
  829550:	3023883a 	mov	r17,r6
  829554:	0828ecc0 	call	828ecc <__mcmp>
  829558:	10004226 	beq	r2,zero,829664 <__mdiff+0x13c>
  82955c:	10005016 	blt	r2,zero,8296a0 <__mdiff+0x178>
  829560:	0027883a 	mov	r19,zero
  829564:	81400117 	ldw	r5,4(r16)
  829568:	9009883a 	mov	r4,r18
  82956c:	08292f00 	call	8292f0 <_Balloc>
  829570:	1019883a 	mov	r12,r2
  829574:	82800417 	ldw	r10,16(r16)
  829578:	88800417 	ldw	r2,16(r17)
  82957c:	81800504 	addi	r6,r16,20
  829580:	5287883a 	add	r3,r10,r10
  829584:	1085883a 	add	r2,r2,r2
  829588:	18c7883a 	add	r3,r3,r3
  82958c:	1085883a 	add	r2,r2,r2
  829590:	8a000504 	addi	r8,r17,20
  829594:	64c00315 	stw	r19,12(r12)
  829598:	30db883a 	add	r13,r6,r3
  82959c:	4097883a 	add	r11,r8,r2
  8295a0:	61c00504 	addi	r7,r12,20
  8295a4:	0013883a 	mov	r9,zero
  8295a8:	31000017 	ldw	r4,0(r6)
  8295ac:	41400017 	ldw	r5,0(r8)
  8295b0:	42000104 	addi	r8,r8,4
  8295b4:	20bfffcc 	andi	r2,r4,65535
  8295b8:	28ffffcc 	andi	r3,r5,65535
  8295bc:	10c5c83a 	sub	r2,r2,r3
  8295c0:	1245883a 	add	r2,r2,r9
  8295c4:	2008d43a 	srli	r4,r4,16
  8295c8:	280ad43a 	srli	r5,r5,16
  8295cc:	1007d43a 	srai	r3,r2,16
  8295d0:	3880000d 	sth	r2,0(r7)
  8295d4:	2149c83a 	sub	r4,r4,r5
  8295d8:	20c9883a 	add	r4,r4,r3
  8295dc:	3900008d 	sth	r4,2(r7)
  8295e0:	31800104 	addi	r6,r6,4
  8295e4:	39c00104 	addi	r7,r7,4
  8295e8:	2013d43a 	srai	r9,r4,16
  8295ec:	42ffee36 	bltu	r8,r11,8295a8 <__mdiff+0x80>
  8295f0:	33400c2e 	bgeu	r6,r13,829624 <__mdiff+0xfc>
  8295f4:	30800017 	ldw	r2,0(r6)
  8295f8:	31800104 	addi	r6,r6,4
  8295fc:	10ffffcc 	andi	r3,r2,65535
  829600:	1a47883a 	add	r3,r3,r9
  829604:	1004d43a 	srli	r2,r2,16
  829608:	1809d43a 	srai	r4,r3,16
  82960c:	38c0000d 	sth	r3,0(r7)
  829610:	1105883a 	add	r2,r2,r4
  829614:	3880008d 	sth	r2,2(r7)
  829618:	1013d43a 	srai	r9,r2,16
  82961c:	39c00104 	addi	r7,r7,4
  829620:	337ff436 	bltu	r6,r13,8295f4 <__mdiff+0xcc>
  829624:	38bfff17 	ldw	r2,-4(r7)
  829628:	38ffff04 	addi	r3,r7,-4
  82962c:	1000041e 	bne	r2,zero,829640 <__mdiff+0x118>
  829630:	18ffff04 	addi	r3,r3,-4
  829634:	18800017 	ldw	r2,0(r3)
  829638:	52bfffc4 	addi	r10,r10,-1
  82963c:	103ffc26 	beq	r2,zero,829630 <__mdiff+0x108>
  829640:	6005883a 	mov	r2,r12
  829644:	62800415 	stw	r10,16(r12)
  829648:	dfc00417 	ldw	ra,16(sp)
  82964c:	dcc00317 	ldw	r19,12(sp)
  829650:	dc800217 	ldw	r18,8(sp)
  829654:	dc400117 	ldw	r17,4(sp)
  829658:	dc000017 	ldw	r16,0(sp)
  82965c:	dec00504 	addi	sp,sp,20
  829660:	f800283a 	ret
  829664:	9009883a 	mov	r4,r18
  829668:	000b883a 	mov	r5,zero
  82966c:	08292f00 	call	8292f0 <_Balloc>
  829670:	1019883a 	mov	r12,r2
  829674:	00800044 	movi	r2,1
  829678:	60800415 	stw	r2,16(r12)
  82967c:	6005883a 	mov	r2,r12
  829680:	60000515 	stw	zero,20(r12)
  829684:	dfc00417 	ldw	ra,16(sp)
  829688:	dcc00317 	ldw	r19,12(sp)
  82968c:	dc800217 	ldw	r18,8(sp)
  829690:	dc400117 	ldw	r17,4(sp)
  829694:	dc000017 	ldw	r16,0(sp)
  829698:	dec00504 	addi	sp,sp,20
  82969c:	f800283a 	ret
  8296a0:	880d883a 	mov	r6,r17
  8296a4:	04c00044 	movi	r19,1
  8296a8:	8023883a 	mov	r17,r16
  8296ac:	3021883a 	mov	r16,r6
  8296b0:	003fac06 	br	829564 <__mdiff+0x3c>

008296b4 <__lshift>:
  8296b4:	defff904 	addi	sp,sp,-28
  8296b8:	28800417 	ldw	r2,16(r5)
  8296bc:	dc000015 	stw	r16,0(sp)
  8296c0:	3021d17a 	srai	r16,r6,5
  8296c4:	28c00217 	ldw	r3,8(r5)
  8296c8:	10800044 	addi	r2,r2,1
  8296cc:	dc400115 	stw	r17,4(sp)
  8296d0:	80a3883a 	add	r17,r16,r2
  8296d4:	dd400515 	stw	r21,20(sp)
  8296d8:	dd000415 	stw	r20,16(sp)
  8296dc:	dc800215 	stw	r18,8(sp)
  8296e0:	dfc00615 	stw	ra,24(sp)
  8296e4:	2825883a 	mov	r18,r5
  8296e8:	dcc00315 	stw	r19,12(sp)
  8296ec:	3029883a 	mov	r20,r6
  8296f0:	202b883a 	mov	r21,r4
  8296f4:	29400117 	ldw	r5,4(r5)
  8296f8:	1c40030e 	bge	r3,r17,829708 <__lshift+0x54>
  8296fc:	18c7883a 	add	r3,r3,r3
  829700:	29400044 	addi	r5,r5,1
  829704:	1c7ffd16 	blt	r3,r17,8296fc <__lshift+0x48>
  829708:	a809883a 	mov	r4,r21
  82970c:	08292f00 	call	8292f0 <_Balloc>
  829710:	1027883a 	mov	r19,r2
  829714:	11400504 	addi	r5,r2,20
  829718:	0400090e 	bge	zero,r16,829740 <__lshift+0x8c>
  82971c:	2805883a 	mov	r2,r5
  829720:	0007883a 	mov	r3,zero
  829724:	18c00044 	addi	r3,r3,1
  829728:	10000015 	stw	zero,0(r2)
  82972c:	10800104 	addi	r2,r2,4
  829730:	80fffc1e 	bne	r16,r3,829724 <__lshift+0x70>
  829734:	8405883a 	add	r2,r16,r16
  829738:	1085883a 	add	r2,r2,r2
  82973c:	288b883a 	add	r5,r5,r2
  829740:	90800417 	ldw	r2,16(r18)
  829744:	91000504 	addi	r4,r18,20
  829748:	a18007cc 	andi	r6,r20,31
  82974c:	1085883a 	add	r2,r2,r2
  829750:	1085883a 	add	r2,r2,r2
  829754:	208f883a 	add	r7,r4,r2
  829758:	30001e26 	beq	r6,zero,8297d4 <__lshift+0x120>
  82975c:	00800804 	movi	r2,32
  829760:	1191c83a 	sub	r8,r2,r6
  829764:	0007883a 	mov	r3,zero
  829768:	20800017 	ldw	r2,0(r4)
  82976c:	1184983a 	sll	r2,r2,r6
  829770:	1884b03a 	or	r2,r3,r2
  829774:	28800015 	stw	r2,0(r5)
  829778:	20c00017 	ldw	r3,0(r4)
  82977c:	21000104 	addi	r4,r4,4
  829780:	29400104 	addi	r5,r5,4
  829784:	1a06d83a 	srl	r3,r3,r8
  829788:	21fff736 	bltu	r4,r7,829768 <__lshift+0xb4>
  82978c:	28c00015 	stw	r3,0(r5)
  829790:	18000126 	beq	r3,zero,829798 <__lshift+0xe4>
  829794:	8c400044 	addi	r17,r17,1
  829798:	88bfffc4 	addi	r2,r17,-1
  82979c:	98800415 	stw	r2,16(r19)
  8297a0:	a809883a 	mov	r4,r21
  8297a4:	900b883a 	mov	r5,r18
  8297a8:	0828d700 	call	828d70 <_Bfree>
  8297ac:	9805883a 	mov	r2,r19
  8297b0:	dfc00617 	ldw	ra,24(sp)
  8297b4:	dd400517 	ldw	r21,20(sp)
  8297b8:	dd000417 	ldw	r20,16(sp)
  8297bc:	dcc00317 	ldw	r19,12(sp)
  8297c0:	dc800217 	ldw	r18,8(sp)
  8297c4:	dc400117 	ldw	r17,4(sp)
  8297c8:	dc000017 	ldw	r16,0(sp)
  8297cc:	dec00704 	addi	sp,sp,28
  8297d0:	f800283a 	ret
  8297d4:	20800017 	ldw	r2,0(r4)
  8297d8:	21000104 	addi	r4,r4,4
  8297dc:	28800015 	stw	r2,0(r5)
  8297e0:	29400104 	addi	r5,r5,4
  8297e4:	21ffec2e 	bgeu	r4,r7,829798 <__lshift+0xe4>
  8297e8:	20800017 	ldw	r2,0(r4)
  8297ec:	21000104 	addi	r4,r4,4
  8297f0:	28800015 	stw	r2,0(r5)
  8297f4:	29400104 	addi	r5,r5,4
  8297f8:	21fff636 	bltu	r4,r7,8297d4 <__lshift+0x120>
  8297fc:	003fe606 	br	829798 <__lshift+0xe4>

00829800 <__multiply>:
  829800:	defff904 	addi	sp,sp,-28
  829804:	dcc00315 	stw	r19,12(sp)
  829808:	dc800215 	stw	r18,8(sp)
  82980c:	2cc00417 	ldw	r19,16(r5)
  829810:	34800417 	ldw	r18,16(r6)
  829814:	dd000415 	stw	r20,16(sp)
  829818:	dc400115 	stw	r17,4(sp)
  82981c:	dfc00615 	stw	ra,24(sp)
  829820:	dd400515 	stw	r21,20(sp)
  829824:	dc000015 	stw	r16,0(sp)
  829828:	2823883a 	mov	r17,r5
  82982c:	3029883a 	mov	r20,r6
  829830:	9c80040e 	bge	r19,r18,829844 <__multiply+0x44>
  829834:	9027883a 	mov	r19,r18
  829838:	2c800417 	ldw	r18,16(r5)
  82983c:	2829883a 	mov	r20,r5
  829840:	3023883a 	mov	r17,r6
  829844:	88800217 	ldw	r2,8(r17)
  829848:	9ca1883a 	add	r16,r19,r18
  82984c:	89400117 	ldw	r5,4(r17)
  829850:	1400010e 	bge	r2,r16,829858 <__multiply+0x58>
  829854:	29400044 	addi	r5,r5,1
  829858:	08292f00 	call	8292f0 <_Balloc>
  82985c:	102b883a 	mov	r21,r2
  829860:	8405883a 	add	r2,r16,r16
  829864:	1085883a 	add	r2,r2,r2
  829868:	a9000504 	addi	r4,r21,20
  82986c:	209d883a 	add	r14,r4,r2
  829870:	2380042e 	bgeu	r4,r14,829884 <__multiply+0x84>
  829874:	2005883a 	mov	r2,r4
  829878:	10000015 	stw	zero,0(r2)
  82987c:	10800104 	addi	r2,r2,4
  829880:	13bffd36 	bltu	r2,r14,829878 <__multiply+0x78>
  829884:	9485883a 	add	r2,r18,r18
  829888:	9cc7883a 	add	r3,r19,r19
  82988c:	a1800504 	addi	r6,r20,20
  829890:	1085883a 	add	r2,r2,r2
  829894:	8b400504 	addi	r13,r17,20
  829898:	18c7883a 	add	r3,r3,r3
  82989c:	309f883a 	add	r15,r6,r2
  8298a0:	68d7883a 	add	r11,r13,r3
  8298a4:	33c03b2e 	bgeu	r6,r15,829994 <__multiply+0x194>
  8298a8:	2019883a 	mov	r12,r4
  8298ac:	30800017 	ldw	r2,0(r6)
  8298b0:	127fffcc 	andi	r9,r2,65535
  8298b4:	48001826 	beq	r9,zero,829918 <__multiply+0x118>
  8298b8:	6811883a 	mov	r8,r13
  8298bc:	600f883a 	mov	r7,r12
  8298c0:	0015883a 	mov	r10,zero
  8298c4:	40c00017 	ldw	r3,0(r8)
  8298c8:	39400017 	ldw	r5,0(r7)
  8298cc:	42000104 	addi	r8,r8,4
  8298d0:	193fffcc 	andi	r4,r3,65535
  8298d4:	4909383a 	mul	r4,r9,r4
  8298d8:	1806d43a 	srli	r3,r3,16
  8298dc:	28bfffcc 	andi	r2,r5,65535
  8298e0:	5085883a 	add	r2,r10,r2
  8298e4:	2089883a 	add	r4,r4,r2
  8298e8:	48c7383a 	mul	r3,r9,r3
  8298ec:	280ad43a 	srli	r5,r5,16
  8298f0:	2004d43a 	srli	r2,r4,16
  8298f4:	3900000d 	sth	r4,0(r7)
  8298f8:	1947883a 	add	r3,r3,r5
  8298fc:	10c5883a 	add	r2,r2,r3
  829900:	3880008d 	sth	r2,2(r7)
  829904:	1014d43a 	srli	r10,r2,16
  829908:	39c00104 	addi	r7,r7,4
  82990c:	42ffed36 	bltu	r8,r11,8298c4 <__multiply+0xc4>
  829910:	3a800015 	stw	r10,0(r7)
  829914:	30800017 	ldw	r2,0(r6)
  829918:	1012d43a 	srli	r9,r2,16
  82991c:	48001926 	beq	r9,zero,829984 <__multiply+0x184>
  829920:	60800017 	ldw	r2,0(r12)
  829924:	6811883a 	mov	r8,r13
  829928:	600f883a 	mov	r7,r12
  82992c:	0015883a 	mov	r10,zero
  829930:	100b883a 	mov	r5,r2
  829934:	41000017 	ldw	r4,0(r8)
  829938:	2806d43a 	srli	r3,r5,16
  82993c:	3880000d 	sth	r2,0(r7)
  829940:	20bfffcc 	andi	r2,r4,65535
  829944:	4885383a 	mul	r2,r9,r2
  829948:	50c7883a 	add	r3,r10,r3
  82994c:	2008d43a 	srli	r4,r4,16
  829950:	10c5883a 	add	r2,r2,r3
  829954:	3880008d 	sth	r2,2(r7)
  829958:	39c00104 	addi	r7,r7,4
  82995c:	39400017 	ldw	r5,0(r7)
  829960:	4909383a 	mul	r4,r9,r4
  829964:	1004d43a 	srli	r2,r2,16
  829968:	28ffffcc 	andi	r3,r5,65535
  82996c:	20c9883a 	add	r4,r4,r3
  829970:	1105883a 	add	r2,r2,r4
  829974:	42000104 	addi	r8,r8,4
  829978:	1014d43a 	srli	r10,r2,16
  82997c:	42ffed36 	bltu	r8,r11,829934 <__multiply+0x134>
  829980:	38800015 	stw	r2,0(r7)
  829984:	31800104 	addi	r6,r6,4
  829988:	33c0022e 	bgeu	r6,r15,829994 <__multiply+0x194>
  82998c:	63000104 	addi	r12,r12,4
  829990:	003fc606 	br	8298ac <__multiply+0xac>
  829994:	0400090e 	bge	zero,r16,8299bc <__multiply+0x1bc>
  829998:	70bfff17 	ldw	r2,-4(r14)
  82999c:	70ffff04 	addi	r3,r14,-4
  8299a0:	10000326 	beq	r2,zero,8299b0 <__multiply+0x1b0>
  8299a4:	00000506 	br	8299bc <__multiply+0x1bc>
  8299a8:	18800017 	ldw	r2,0(r3)
  8299ac:	1000031e 	bne	r2,zero,8299bc <__multiply+0x1bc>
  8299b0:	843fffc4 	addi	r16,r16,-1
  8299b4:	18ffff04 	addi	r3,r3,-4
  8299b8:	803ffb1e 	bne	r16,zero,8299a8 <__multiply+0x1a8>
  8299bc:	a805883a 	mov	r2,r21
  8299c0:	ac000415 	stw	r16,16(r21)
  8299c4:	dfc00617 	ldw	ra,24(sp)
  8299c8:	dd400517 	ldw	r21,20(sp)
  8299cc:	dd000417 	ldw	r20,16(sp)
  8299d0:	dcc00317 	ldw	r19,12(sp)
  8299d4:	dc800217 	ldw	r18,8(sp)
  8299d8:	dc400117 	ldw	r17,4(sp)
  8299dc:	dc000017 	ldw	r16,0(sp)
  8299e0:	dec00704 	addi	sp,sp,28
  8299e4:	f800283a 	ret

008299e8 <__i2b>:
  8299e8:	defffd04 	addi	sp,sp,-12
  8299ec:	dc000015 	stw	r16,0(sp)
  8299f0:	04000044 	movi	r16,1
  8299f4:	dc800115 	stw	r18,4(sp)
  8299f8:	2825883a 	mov	r18,r5
  8299fc:	800b883a 	mov	r5,r16
  829a00:	dfc00215 	stw	ra,8(sp)
  829a04:	08292f00 	call	8292f0 <_Balloc>
  829a08:	14000415 	stw	r16,16(r2)
  829a0c:	14800515 	stw	r18,20(r2)
  829a10:	dfc00217 	ldw	ra,8(sp)
  829a14:	dc800117 	ldw	r18,4(sp)
  829a18:	dc000017 	ldw	r16,0(sp)
  829a1c:	dec00304 	addi	sp,sp,12
  829a20:	f800283a 	ret

00829a24 <__multadd>:
  829a24:	defffa04 	addi	sp,sp,-24
  829a28:	dc800215 	stw	r18,8(sp)
  829a2c:	2c800417 	ldw	r18,16(r5)
  829a30:	dd000415 	stw	r20,16(sp)
  829a34:	dcc00315 	stw	r19,12(sp)
  829a38:	dc000015 	stw	r16,0(sp)
  829a3c:	dfc00515 	stw	ra,20(sp)
  829a40:	3821883a 	mov	r16,r7
  829a44:	dc400115 	stw	r17,4(sp)
  829a48:	2827883a 	mov	r19,r5
  829a4c:	2029883a 	mov	r20,r4
  829a50:	2a000504 	addi	r8,r5,20
  829a54:	000f883a 	mov	r7,zero
  829a58:	40800017 	ldw	r2,0(r8)
  829a5c:	39c00044 	addi	r7,r7,1
  829a60:	10ffffcc 	andi	r3,r2,65535
  829a64:	1987383a 	mul	r3,r3,r6
  829a68:	1004d43a 	srli	r2,r2,16
  829a6c:	1c07883a 	add	r3,r3,r16
  829a70:	180ad43a 	srli	r5,r3,16
  829a74:	1185383a 	mul	r2,r2,r6
  829a78:	18ffffcc 	andi	r3,r3,65535
  829a7c:	1145883a 	add	r2,r2,r5
  829a80:	1008943a 	slli	r4,r2,16
  829a84:	1020d43a 	srli	r16,r2,16
  829a88:	20c9883a 	add	r4,r4,r3
  829a8c:	41000015 	stw	r4,0(r8)
  829a90:	42000104 	addi	r8,r8,4
  829a94:	3cbff016 	blt	r7,r18,829a58 <__multadd+0x34>
  829a98:	80000826 	beq	r16,zero,829abc <__multadd+0x98>
  829a9c:	98800217 	ldw	r2,8(r19)
  829aa0:	90800f0e 	bge	r18,r2,829ae0 <__multadd+0xbc>
  829aa4:	9485883a 	add	r2,r18,r18
  829aa8:	1085883a 	add	r2,r2,r2
  829aac:	14c5883a 	add	r2,r2,r19
  829ab0:	90c00044 	addi	r3,r18,1
  829ab4:	14000515 	stw	r16,20(r2)
  829ab8:	98c00415 	stw	r3,16(r19)
  829abc:	9805883a 	mov	r2,r19
  829ac0:	dfc00517 	ldw	ra,20(sp)
  829ac4:	dd000417 	ldw	r20,16(sp)
  829ac8:	dcc00317 	ldw	r19,12(sp)
  829acc:	dc800217 	ldw	r18,8(sp)
  829ad0:	dc400117 	ldw	r17,4(sp)
  829ad4:	dc000017 	ldw	r16,0(sp)
  829ad8:	dec00604 	addi	sp,sp,24
  829adc:	f800283a 	ret
  829ae0:	99400117 	ldw	r5,4(r19)
  829ae4:	a009883a 	mov	r4,r20
  829ae8:	29400044 	addi	r5,r5,1
  829aec:	08292f00 	call	8292f0 <_Balloc>
  829af0:	99800417 	ldw	r6,16(r19)
  829af4:	99400304 	addi	r5,r19,12
  829af8:	11000304 	addi	r4,r2,12
  829afc:	318d883a 	add	r6,r6,r6
  829b00:	318d883a 	add	r6,r6,r6
  829b04:	31800204 	addi	r6,r6,8
  829b08:	1023883a 	mov	r17,r2
  829b0c:	0828b580 	call	828b58 <memcpy>
  829b10:	980b883a 	mov	r5,r19
  829b14:	a009883a 	mov	r4,r20
  829b18:	0828d700 	call	828d70 <_Bfree>
  829b1c:	8827883a 	mov	r19,r17
  829b20:	003fe006 	br	829aa4 <__multadd+0x80>

00829b24 <__pow5mult>:
  829b24:	defffa04 	addi	sp,sp,-24
  829b28:	308000cc 	andi	r2,r6,3
  829b2c:	dd000415 	stw	r20,16(sp)
  829b30:	dcc00315 	stw	r19,12(sp)
  829b34:	dc000015 	stw	r16,0(sp)
  829b38:	dfc00515 	stw	ra,20(sp)
  829b3c:	dc800215 	stw	r18,8(sp)
  829b40:	dc400115 	stw	r17,4(sp)
  829b44:	3021883a 	mov	r16,r6
  829b48:	2027883a 	mov	r19,r4
  829b4c:	2829883a 	mov	r20,r5
  829b50:	10002b1e 	bne	r2,zero,829c00 <__pow5mult+0xdc>
  829b54:	8025d0ba 	srai	r18,r16,2
  829b58:	90001b26 	beq	r18,zero,829bc8 <__pow5mult+0xa4>
  829b5c:	9c001217 	ldw	r16,72(r19)
  829b60:	8000081e 	bne	r16,zero,829b84 <__pow5mult+0x60>
  829b64:	00003006 	br	829c28 <__pow5mult+0x104>
  829b68:	800b883a 	mov	r5,r16
  829b6c:	800d883a 	mov	r6,r16
  829b70:	9809883a 	mov	r4,r19
  829b74:	90001426 	beq	r18,zero,829bc8 <__pow5mult+0xa4>
  829b78:	80800017 	ldw	r2,0(r16)
  829b7c:	10001b26 	beq	r2,zero,829bec <__pow5mult+0xc8>
  829b80:	1021883a 	mov	r16,r2
  829b84:	9080004c 	andi	r2,r18,1
  829b88:	1005003a 	cmpeq	r2,r2,zero
  829b8c:	9025d07a 	srai	r18,r18,1
  829b90:	800d883a 	mov	r6,r16
  829b94:	9809883a 	mov	r4,r19
  829b98:	a00b883a 	mov	r5,r20
  829b9c:	103ff21e 	bne	r2,zero,829b68 <__pow5mult+0x44>
  829ba0:	08298000 	call	829800 <__multiply>
  829ba4:	a00b883a 	mov	r5,r20
  829ba8:	9809883a 	mov	r4,r19
  829bac:	1023883a 	mov	r17,r2
  829bb0:	0828d700 	call	828d70 <_Bfree>
  829bb4:	8829883a 	mov	r20,r17
  829bb8:	800b883a 	mov	r5,r16
  829bbc:	800d883a 	mov	r6,r16
  829bc0:	9809883a 	mov	r4,r19
  829bc4:	903fec1e 	bne	r18,zero,829b78 <__pow5mult+0x54>
  829bc8:	a005883a 	mov	r2,r20
  829bcc:	dfc00517 	ldw	ra,20(sp)
  829bd0:	dd000417 	ldw	r20,16(sp)
  829bd4:	dcc00317 	ldw	r19,12(sp)
  829bd8:	dc800217 	ldw	r18,8(sp)
  829bdc:	dc400117 	ldw	r17,4(sp)
  829be0:	dc000017 	ldw	r16,0(sp)
  829be4:	dec00604 	addi	sp,sp,24
  829be8:	f800283a 	ret
  829bec:	08298000 	call	829800 <__multiply>
  829bf0:	80800015 	stw	r2,0(r16)
  829bf4:	1021883a 	mov	r16,r2
  829bf8:	10000015 	stw	zero,0(r2)
  829bfc:	003fe106 	br	829b84 <__pow5mult+0x60>
  829c00:	1085883a 	add	r2,r2,r2
  829c04:	00c020f4 	movhi	r3,131
  829c08:	18cec004 	addi	r3,r3,15104
  829c0c:	1085883a 	add	r2,r2,r2
  829c10:	10c5883a 	add	r2,r2,r3
  829c14:	11bfff17 	ldw	r6,-4(r2)
  829c18:	000f883a 	mov	r7,zero
  829c1c:	0829a240 	call	829a24 <__multadd>
  829c20:	1029883a 	mov	r20,r2
  829c24:	003fcb06 	br	829b54 <__pow5mult+0x30>
  829c28:	9809883a 	mov	r4,r19
  829c2c:	01409c44 	movi	r5,625
  829c30:	08299e80 	call	8299e8 <__i2b>
  829c34:	98801215 	stw	r2,72(r19)
  829c38:	1021883a 	mov	r16,r2
  829c3c:	10000015 	stw	zero,0(r2)
  829c40:	003fd006 	br	829b84 <__pow5mult+0x60>

00829c44 <__s2b>:
  829c44:	defff904 	addi	sp,sp,-28
  829c48:	dcc00315 	stw	r19,12(sp)
  829c4c:	dc800215 	stw	r18,8(sp)
  829c50:	2827883a 	mov	r19,r5
  829c54:	2025883a 	mov	r18,r4
  829c58:	01400244 	movi	r5,9
  829c5c:	39000204 	addi	r4,r7,8
  829c60:	dd000415 	stw	r20,16(sp)
  829c64:	dc400115 	stw	r17,4(sp)
  829c68:	dfc00615 	stw	ra,24(sp)
  829c6c:	dd400515 	stw	r21,20(sp)
  829c70:	dc000015 	stw	r16,0(sp)
  829c74:	3829883a 	mov	r20,r7
  829c78:	3023883a 	mov	r17,r6
  829c7c:	0822e1c0 	call	822e1c <__divsi3>
  829c80:	00c00044 	movi	r3,1
  829c84:	1880350e 	bge	r3,r2,829d5c <__s2b+0x118>
  829c88:	000b883a 	mov	r5,zero
  829c8c:	18c7883a 	add	r3,r3,r3
  829c90:	29400044 	addi	r5,r5,1
  829c94:	18bffd16 	blt	r3,r2,829c8c <__s2b+0x48>
  829c98:	9009883a 	mov	r4,r18
  829c9c:	08292f00 	call	8292f0 <_Balloc>
  829ca0:	1011883a 	mov	r8,r2
  829ca4:	d8800717 	ldw	r2,28(sp)
  829ca8:	00c00044 	movi	r3,1
  829cac:	01800244 	movi	r6,9
  829cb0:	40800515 	stw	r2,20(r8)
  829cb4:	40c00415 	stw	r3,16(r8)
  829cb8:	3440260e 	bge	r6,r17,829d54 <__s2b+0x110>
  829cbc:	3021883a 	mov	r16,r6
  829cc0:	99ab883a 	add	r21,r19,r6
  829cc4:	9c05883a 	add	r2,r19,r16
  829cc8:	11c00007 	ldb	r7,0(r2)
  829ccc:	400b883a 	mov	r5,r8
  829cd0:	9009883a 	mov	r4,r18
  829cd4:	39fff404 	addi	r7,r7,-48
  829cd8:	01800284 	movi	r6,10
  829cdc:	0829a240 	call	829a24 <__multadd>
  829ce0:	84000044 	addi	r16,r16,1
  829ce4:	1011883a 	mov	r8,r2
  829ce8:	8c3ff61e 	bne	r17,r16,829cc4 <__s2b+0x80>
  829cec:	ac45883a 	add	r2,r21,r17
  829cf0:	117ffe04 	addi	r5,r2,-8
  829cf4:	880d883a 	mov	r6,r17
  829cf8:	35000c0e 	bge	r6,r20,829d2c <__s2b+0xe8>
  829cfc:	a185c83a 	sub	r2,r20,r6
  829d00:	2821883a 	mov	r16,r5
  829d04:	28a3883a 	add	r17,r5,r2
  829d08:	81c00007 	ldb	r7,0(r16)
  829d0c:	400b883a 	mov	r5,r8
  829d10:	9009883a 	mov	r4,r18
  829d14:	39fff404 	addi	r7,r7,-48
  829d18:	01800284 	movi	r6,10
  829d1c:	0829a240 	call	829a24 <__multadd>
  829d20:	84000044 	addi	r16,r16,1
  829d24:	1011883a 	mov	r8,r2
  829d28:	847ff71e 	bne	r16,r17,829d08 <__s2b+0xc4>
  829d2c:	4005883a 	mov	r2,r8
  829d30:	dfc00617 	ldw	ra,24(sp)
  829d34:	dd400517 	ldw	r21,20(sp)
  829d38:	dd000417 	ldw	r20,16(sp)
  829d3c:	dcc00317 	ldw	r19,12(sp)
  829d40:	dc800217 	ldw	r18,8(sp)
  829d44:	dc400117 	ldw	r17,4(sp)
  829d48:	dc000017 	ldw	r16,0(sp)
  829d4c:	dec00704 	addi	sp,sp,28
  829d50:	f800283a 	ret
  829d54:	99400284 	addi	r5,r19,10
  829d58:	003fe706 	br	829cf8 <__s2b+0xb4>
  829d5c:	000b883a 	mov	r5,zero
  829d60:	003fcd06 	br	829c98 <__s2b+0x54>

00829d64 <putc>:
  829d64:	defffc04 	addi	sp,sp,-16
  829d68:	dc800215 	stw	r18,8(sp)
  829d6c:	048020f4 	movhi	r18,131
  829d70:	94967504 	addi	r18,r18,22996
  829d74:	90c00017 	ldw	r3,0(r18)
  829d78:	dc400115 	stw	r17,4(sp)
  829d7c:	dc000015 	stw	r16,0(sp)
  829d80:	dfc00315 	stw	ra,12(sp)
  829d84:	2023883a 	mov	r17,r4
  829d88:	2821883a 	mov	r16,r5
  829d8c:	18000226 	beq	r3,zero,829d98 <putc+0x34>
  829d90:	18800e17 	ldw	r2,56(r3)
  829d94:	10001126 	beq	r2,zero,829ddc <putc+0x78>
  829d98:	80800217 	ldw	r2,8(r16)
  829d9c:	10ffffc4 	addi	r3,r2,-1
  829da0:	80c00215 	stw	r3,8(r16)
  829da4:	18001316 	blt	r3,zero,829df4 <putc+0x90>
  829da8:	80800017 	ldw	r2,0(r16)
  829dac:	14400005 	stb	r17,0(r2)
  829db0:	80c00017 	ldw	r3,0(r16)
  829db4:	18800044 	addi	r2,r3,1
  829db8:	18c00003 	ldbu	r3,0(r3)
  829dbc:	80800015 	stw	r2,0(r16)
  829dc0:	1805883a 	mov	r2,r3
  829dc4:	dfc00317 	ldw	ra,12(sp)
  829dc8:	dc800217 	ldw	r18,8(sp)
  829dcc:	dc400117 	ldw	r17,4(sp)
  829dd0:	dc000017 	ldw	r16,0(sp)
  829dd4:	dec00404 	addi	sp,sp,16
  829dd8:	f800283a 	ret
  829ddc:	1809883a 	mov	r4,r3
  829de0:	0827b680 	call	827b68 <__sinit>
  829de4:	80800217 	ldw	r2,8(r16)
  829de8:	10ffffc4 	addi	r3,r2,-1
  829dec:	80c00215 	stw	r3,8(r16)
  829df0:	183fed0e 	bge	r3,zero,829da8 <putc+0x44>
  829df4:	80800617 	ldw	r2,24(r16)
  829df8:	18800f16 	blt	r3,r2,829e38 <putc+0xd4>
  829dfc:	80800017 	ldw	r2,0(r16)
  829e00:	14400005 	stb	r17,0(r2)
  829e04:	81000017 	ldw	r4,0(r16)
  829e08:	00800284 	movi	r2,10
  829e0c:	20c00003 	ldbu	r3,0(r4)
  829e10:	18801226 	beq	r3,r2,829e5c <putc+0xf8>
  829e14:	20800044 	addi	r2,r4,1
  829e18:	80800015 	stw	r2,0(r16)
  829e1c:	1805883a 	mov	r2,r3
  829e20:	dfc00317 	ldw	ra,12(sp)
  829e24:	dc800217 	ldw	r18,8(sp)
  829e28:	dc400117 	ldw	r17,4(sp)
  829e2c:	dc000017 	ldw	r16,0(sp)
  829e30:	dec00404 	addi	sp,sp,16
  829e34:	f800283a 	ret
  829e38:	91000017 	ldw	r4,0(r18)
  829e3c:	880b883a 	mov	r5,r17
  829e40:	800d883a 	mov	r6,r16
  829e44:	dfc00317 	ldw	ra,12(sp)
  829e48:	dc800217 	ldw	r18,8(sp)
  829e4c:	dc400117 	ldw	r17,4(sp)
  829e50:	dc000017 	ldw	r16,0(sp)
  829e54:	dec00404 	addi	sp,sp,16
  829e58:	082a7bc1 	jmpi	82a7bc <__swbuf_r>
  829e5c:	91000017 	ldw	r4,0(r18)
  829e60:	180b883a 	mov	r5,r3
  829e64:	003ff606 	br	829e40 <putc+0xdc>

00829e68 <_putc_r>:
  829e68:	defffc04 	addi	sp,sp,-16
  829e6c:	dc400215 	stw	r17,8(sp)
  829e70:	dc000115 	stw	r16,4(sp)
  829e74:	dfc00315 	stw	ra,12(sp)
  829e78:	2021883a 	mov	r16,r4
  829e7c:	2823883a 	mov	r17,r5
  829e80:	20000226 	beq	r4,zero,829e8c <_putc_r+0x24>
  829e84:	20800e17 	ldw	r2,56(r4)
  829e88:	10001026 	beq	r2,zero,829ecc <_putc_r+0x64>
  829e8c:	30800217 	ldw	r2,8(r6)
  829e90:	10ffffc4 	addi	r3,r2,-1
  829e94:	30c00215 	stw	r3,8(r6)
  829e98:	18001316 	blt	r3,zero,829ee8 <_putc_r+0x80>
  829e9c:	30800017 	ldw	r2,0(r6)
  829ea0:	14400005 	stb	r17,0(r2)
  829ea4:	30c00017 	ldw	r3,0(r6)
  829ea8:	18800044 	addi	r2,r3,1
  829eac:	18c00003 	ldbu	r3,0(r3)
  829eb0:	30800015 	stw	r2,0(r6)
  829eb4:	1805883a 	mov	r2,r3
  829eb8:	dfc00317 	ldw	ra,12(sp)
  829ebc:	dc400217 	ldw	r17,8(sp)
  829ec0:	dc000117 	ldw	r16,4(sp)
  829ec4:	dec00404 	addi	sp,sp,16
  829ec8:	f800283a 	ret
  829ecc:	d9800015 	stw	r6,0(sp)
  829ed0:	0827b680 	call	827b68 <__sinit>
  829ed4:	d9800017 	ldw	r6,0(sp)
  829ed8:	30800217 	ldw	r2,8(r6)
  829edc:	10ffffc4 	addi	r3,r2,-1
  829ee0:	30c00215 	stw	r3,8(r6)
  829ee4:	183fed0e 	bge	r3,zero,829e9c <_putc_r+0x34>
  829ee8:	30800617 	ldw	r2,24(r6)
  829eec:	18800e16 	blt	r3,r2,829f28 <_putc_r+0xc0>
  829ef0:	30800017 	ldw	r2,0(r6)
  829ef4:	14400005 	stb	r17,0(r2)
  829ef8:	31000017 	ldw	r4,0(r6)
  829efc:	00800284 	movi	r2,10
  829f00:	20c00003 	ldbu	r3,0(r4)
  829f04:	18800f26 	beq	r3,r2,829f44 <_putc_r+0xdc>
  829f08:	20800044 	addi	r2,r4,1
  829f0c:	30800015 	stw	r2,0(r6)
  829f10:	1805883a 	mov	r2,r3
  829f14:	dfc00317 	ldw	ra,12(sp)
  829f18:	dc400217 	ldw	r17,8(sp)
  829f1c:	dc000117 	ldw	r16,4(sp)
  829f20:	dec00404 	addi	sp,sp,16
  829f24:	f800283a 	ret
  829f28:	8009883a 	mov	r4,r16
  829f2c:	880b883a 	mov	r5,r17
  829f30:	dfc00317 	ldw	ra,12(sp)
  829f34:	dc400217 	ldw	r17,8(sp)
  829f38:	dc000117 	ldw	r16,4(sp)
  829f3c:	dec00404 	addi	sp,sp,16
  829f40:	082a7bc1 	jmpi	82a7bc <__swbuf_r>
  829f44:	8009883a 	mov	r4,r16
  829f48:	180b883a 	mov	r5,r3
  829f4c:	003ff806 	br	829f30 <_putc_r+0xc8>

00829f50 <_realloc_r>:
  829f50:	defff404 	addi	sp,sp,-48
  829f54:	dd800815 	stw	r22,32(sp)
  829f58:	dc800415 	stw	r18,16(sp)
  829f5c:	dc400315 	stw	r17,12(sp)
  829f60:	dfc00b15 	stw	ra,44(sp)
  829f64:	df000a15 	stw	fp,40(sp)
  829f68:	ddc00915 	stw	r23,36(sp)
  829f6c:	dd400715 	stw	r21,28(sp)
  829f70:	dd000615 	stw	r20,24(sp)
  829f74:	dcc00515 	stw	r19,20(sp)
  829f78:	dc000215 	stw	r16,8(sp)
  829f7c:	2825883a 	mov	r18,r5
  829f80:	3023883a 	mov	r17,r6
  829f84:	202d883a 	mov	r22,r4
  829f88:	2800c926 	beq	r5,zero,82a2b0 <_realloc_r+0x360>
  829f8c:	082c7800 	call	82c780 <__malloc_lock>
  829f90:	943ffe04 	addi	r16,r18,-8
  829f94:	88c002c4 	addi	r3,r17,11
  829f98:	00800584 	movi	r2,22
  829f9c:	82000117 	ldw	r8,4(r16)
  829fa0:	10c01b2e 	bgeu	r2,r3,82a010 <_realloc_r+0xc0>
  829fa4:	00bffe04 	movi	r2,-8
  829fa8:	188e703a 	and	r7,r3,r2
  829fac:	3839883a 	mov	fp,r7
  829fb0:	38001a16 	blt	r7,zero,82a01c <_realloc_r+0xcc>
  829fb4:	e4401936 	bltu	fp,r17,82a01c <_realloc_r+0xcc>
  829fb8:	013fff04 	movi	r4,-4
  829fbc:	4126703a 	and	r19,r8,r4
  829fc0:	99c02616 	blt	r19,r7,82a05c <_realloc_r+0x10c>
  829fc4:	802b883a 	mov	r21,r16
  829fc8:	9829883a 	mov	r20,r19
  829fcc:	84000204 	addi	r16,r16,8
  829fd0:	a80f883a 	mov	r7,r21
  829fd4:	a70dc83a 	sub	r6,r20,fp
  829fd8:	008003c4 	movi	r2,15
  829fdc:	1180c136 	bltu	r2,r6,82a2e4 <_realloc_r+0x394>
  829fe0:	38800117 	ldw	r2,4(r7)
  829fe4:	a549883a 	add	r4,r20,r21
  829fe8:	1080004c 	andi	r2,r2,1
  829fec:	a084b03a 	or	r2,r20,r2
  829ff0:	38800115 	stw	r2,4(r7)
  829ff4:	20c00117 	ldw	r3,4(r4)
  829ff8:	18c00054 	ori	r3,r3,1
  829ffc:	20c00115 	stw	r3,4(r4)
  82a000:	b009883a 	mov	r4,r22
  82a004:	082c7a00 	call	82c7a0 <__malloc_unlock>
  82a008:	8023883a 	mov	r17,r16
  82a00c:	00000606 	br	82a028 <_realloc_r+0xd8>
  82a010:	01c00404 	movi	r7,16
  82a014:	3839883a 	mov	fp,r7
  82a018:	e47fe72e 	bgeu	fp,r17,829fb8 <_realloc_r+0x68>
  82a01c:	00800304 	movi	r2,12
  82a020:	0023883a 	mov	r17,zero
  82a024:	b0800015 	stw	r2,0(r22)
  82a028:	8805883a 	mov	r2,r17
  82a02c:	dfc00b17 	ldw	ra,44(sp)
  82a030:	df000a17 	ldw	fp,40(sp)
  82a034:	ddc00917 	ldw	r23,36(sp)
  82a038:	dd800817 	ldw	r22,32(sp)
  82a03c:	dd400717 	ldw	r21,28(sp)
  82a040:	dd000617 	ldw	r20,24(sp)
  82a044:	dcc00517 	ldw	r19,20(sp)
  82a048:	dc800417 	ldw	r18,16(sp)
  82a04c:	dc400317 	ldw	r17,12(sp)
  82a050:	dc000217 	ldw	r16,8(sp)
  82a054:	dec00c04 	addi	sp,sp,48
  82a058:	f800283a 	ret
  82a05c:	008020f4 	movhi	r2,131
  82a060:	1090c504 	addi	r2,r2,17172
  82a064:	12400217 	ldw	r9,8(r2)
  82a068:	84cd883a 	add	r6,r16,r19
  82a06c:	802b883a 	mov	r21,r16
  82a070:	3240b926 	beq	r6,r9,82a358 <_realloc_r+0x408>
  82a074:	31400117 	ldw	r5,4(r6)
  82a078:	00bfff84 	movi	r2,-2
  82a07c:	2884703a 	and	r2,r5,r2
  82a080:	1185883a 	add	r2,r2,r6
  82a084:	10c00117 	ldw	r3,4(r2)
  82a088:	18c0004c 	andi	r3,r3,1
  82a08c:	1807003a 	cmpeq	r3,r3,zero
  82a090:	1800a326 	beq	r3,zero,82a320 <_realloc_r+0x3d0>
  82a094:	2908703a 	and	r4,r5,r4
  82a098:	9929883a 	add	r20,r19,r4
  82a09c:	a1c0a30e 	bge	r20,r7,82a32c <_realloc_r+0x3dc>
  82a0a0:	4080004c 	andi	r2,r8,1
  82a0a4:	1000551e 	bne	r2,zero,82a1fc <_realloc_r+0x2ac>
  82a0a8:	80800017 	ldw	r2,0(r16)
  82a0ac:	80afc83a 	sub	r23,r16,r2
  82a0b0:	b8c00117 	ldw	r3,4(r23)
  82a0b4:	00bfff04 	movi	r2,-4
  82a0b8:	1884703a 	and	r2,r3,r2
  82a0bc:	30002e26 	beq	r6,zero,82a178 <_realloc_r+0x228>
  82a0c0:	3240b926 	beq	r6,r9,82a3a8 <_realloc_r+0x458>
  82a0c4:	98a9883a 	add	r20,r19,r2
  82a0c8:	2509883a 	add	r4,r4,r20
  82a0cc:	d9000015 	stw	r4,0(sp)
  82a0d0:	21c02a16 	blt	r4,r7,82a17c <_realloc_r+0x22c>
  82a0d4:	30800317 	ldw	r2,12(r6)
  82a0d8:	30c00217 	ldw	r3,8(r6)
  82a0dc:	01400904 	movi	r5,36
  82a0e0:	99bfff04 	addi	r6,r19,-4
  82a0e4:	18800315 	stw	r2,12(r3)
  82a0e8:	10c00215 	stw	r3,8(r2)
  82a0ec:	b9000317 	ldw	r4,12(r23)
  82a0f0:	b8800217 	ldw	r2,8(r23)
  82a0f4:	b82b883a 	mov	r21,r23
  82a0f8:	bc000204 	addi	r16,r23,8
  82a0fc:	20800215 	stw	r2,8(r4)
  82a100:	11000315 	stw	r4,12(r2)
  82a104:	2980e436 	bltu	r5,r6,82a498 <_realloc_r+0x548>
  82a108:	008004c4 	movi	r2,19
  82a10c:	9009883a 	mov	r4,r18
  82a110:	8011883a 	mov	r8,r16
  82a114:	11800f2e 	bgeu	r2,r6,82a154 <_realloc_r+0x204>
  82a118:	90800017 	ldw	r2,0(r18)
  82a11c:	ba000404 	addi	r8,r23,16
  82a120:	91000204 	addi	r4,r18,8
  82a124:	b8800215 	stw	r2,8(r23)
  82a128:	90c00117 	ldw	r3,4(r18)
  82a12c:	008006c4 	movi	r2,27
  82a130:	b8c00315 	stw	r3,12(r23)
  82a134:	1180072e 	bgeu	r2,r6,82a154 <_realloc_r+0x204>
  82a138:	90c00217 	ldw	r3,8(r18)
  82a13c:	ba000604 	addi	r8,r23,24
  82a140:	91000404 	addi	r4,r18,16
  82a144:	b8c00415 	stw	r3,16(r23)
  82a148:	90800317 	ldw	r2,12(r18)
  82a14c:	b8800515 	stw	r2,20(r23)
  82a150:	3140e726 	beq	r6,r5,82a4f0 <_realloc_r+0x5a0>
  82a154:	20800017 	ldw	r2,0(r4)
  82a158:	dd000017 	ldw	r20,0(sp)
  82a15c:	b80f883a 	mov	r7,r23
  82a160:	40800015 	stw	r2,0(r8)
  82a164:	20c00117 	ldw	r3,4(r4)
  82a168:	40c00115 	stw	r3,4(r8)
  82a16c:	20800217 	ldw	r2,8(r4)
  82a170:	40800215 	stw	r2,8(r8)
  82a174:	003f9706 	br	829fd4 <_realloc_r+0x84>
  82a178:	98a9883a 	add	r20,r19,r2
  82a17c:	a1c01f16 	blt	r20,r7,82a1fc <_realloc_r+0x2ac>
  82a180:	b8c00317 	ldw	r3,12(r23)
  82a184:	b8800217 	ldw	r2,8(r23)
  82a188:	99bfff04 	addi	r6,r19,-4
  82a18c:	01400904 	movi	r5,36
  82a190:	b82b883a 	mov	r21,r23
  82a194:	18800215 	stw	r2,8(r3)
  82a198:	10c00315 	stw	r3,12(r2)
  82a19c:	bc000204 	addi	r16,r23,8
  82a1a0:	2980c336 	bltu	r5,r6,82a4b0 <_realloc_r+0x560>
  82a1a4:	008004c4 	movi	r2,19
  82a1a8:	9009883a 	mov	r4,r18
  82a1ac:	8011883a 	mov	r8,r16
  82a1b0:	11800f2e 	bgeu	r2,r6,82a1f0 <_realloc_r+0x2a0>
  82a1b4:	90800017 	ldw	r2,0(r18)
  82a1b8:	ba000404 	addi	r8,r23,16
  82a1bc:	91000204 	addi	r4,r18,8
  82a1c0:	b8800215 	stw	r2,8(r23)
  82a1c4:	90c00117 	ldw	r3,4(r18)
  82a1c8:	008006c4 	movi	r2,27
  82a1cc:	b8c00315 	stw	r3,12(r23)
  82a1d0:	1180072e 	bgeu	r2,r6,82a1f0 <_realloc_r+0x2a0>
  82a1d4:	90c00217 	ldw	r3,8(r18)
  82a1d8:	ba000604 	addi	r8,r23,24
  82a1dc:	91000404 	addi	r4,r18,16
  82a1e0:	b8c00415 	stw	r3,16(r23)
  82a1e4:	90800317 	ldw	r2,12(r18)
  82a1e8:	b8800515 	stw	r2,20(r23)
  82a1ec:	3140c726 	beq	r6,r5,82a50c <_realloc_r+0x5bc>
  82a1f0:	20800017 	ldw	r2,0(r4)
  82a1f4:	b80f883a 	mov	r7,r23
  82a1f8:	003fd906 	br	82a160 <_realloc_r+0x210>
  82a1fc:	880b883a 	mov	r5,r17
  82a200:	b009883a 	mov	r4,r22
  82a204:	08235780 	call	823578 <_malloc_r>
  82a208:	1023883a 	mov	r17,r2
  82a20c:	10002526 	beq	r2,zero,82a2a4 <_realloc_r+0x354>
  82a210:	80800117 	ldw	r2,4(r16)
  82a214:	00ffff84 	movi	r3,-2
  82a218:	893ffe04 	addi	r4,r17,-8
  82a21c:	10c4703a 	and	r2,r2,r3
  82a220:	8085883a 	add	r2,r16,r2
  82a224:	20809526 	beq	r4,r2,82a47c <_realloc_r+0x52c>
  82a228:	99bfff04 	addi	r6,r19,-4
  82a22c:	01c00904 	movi	r7,36
  82a230:	39804536 	bltu	r7,r6,82a348 <_realloc_r+0x3f8>
  82a234:	008004c4 	movi	r2,19
  82a238:	9009883a 	mov	r4,r18
  82a23c:	880b883a 	mov	r5,r17
  82a240:	11800f2e 	bgeu	r2,r6,82a280 <_realloc_r+0x330>
  82a244:	90800017 	ldw	r2,0(r18)
  82a248:	89400204 	addi	r5,r17,8
  82a24c:	91000204 	addi	r4,r18,8
  82a250:	88800015 	stw	r2,0(r17)
  82a254:	90c00117 	ldw	r3,4(r18)
  82a258:	008006c4 	movi	r2,27
  82a25c:	88c00115 	stw	r3,4(r17)
  82a260:	1180072e 	bgeu	r2,r6,82a280 <_realloc_r+0x330>
  82a264:	90c00217 	ldw	r3,8(r18)
  82a268:	89400404 	addi	r5,r17,16
  82a26c:	91000404 	addi	r4,r18,16
  82a270:	88c00215 	stw	r3,8(r17)
  82a274:	90800317 	ldw	r2,12(r18)
  82a278:	88800315 	stw	r2,12(r17)
  82a27c:	31c09126 	beq	r6,r7,82a4c4 <_realloc_r+0x574>
  82a280:	20800017 	ldw	r2,0(r4)
  82a284:	28800015 	stw	r2,0(r5)
  82a288:	20c00117 	ldw	r3,4(r4)
  82a28c:	28c00115 	stw	r3,4(r5)
  82a290:	20800217 	ldw	r2,8(r4)
  82a294:	28800215 	stw	r2,8(r5)
  82a298:	900b883a 	mov	r5,r18
  82a29c:	b009883a 	mov	r4,r22
  82a2a0:	0827eec0 	call	827eec <_free_r>
  82a2a4:	b009883a 	mov	r4,r22
  82a2a8:	082c7a00 	call	82c7a0 <__malloc_unlock>
  82a2ac:	003f5e06 	br	82a028 <_realloc_r+0xd8>
  82a2b0:	300b883a 	mov	r5,r6
  82a2b4:	dfc00b17 	ldw	ra,44(sp)
  82a2b8:	df000a17 	ldw	fp,40(sp)
  82a2bc:	ddc00917 	ldw	r23,36(sp)
  82a2c0:	dd800817 	ldw	r22,32(sp)
  82a2c4:	dd400717 	ldw	r21,28(sp)
  82a2c8:	dd000617 	ldw	r20,24(sp)
  82a2cc:	dcc00517 	ldw	r19,20(sp)
  82a2d0:	dc800417 	ldw	r18,16(sp)
  82a2d4:	dc400317 	ldw	r17,12(sp)
  82a2d8:	dc000217 	ldw	r16,8(sp)
  82a2dc:	dec00c04 	addi	sp,sp,48
  82a2e0:	08235781 	jmpi	823578 <_malloc_r>
  82a2e4:	38800117 	ldw	r2,4(r7)
  82a2e8:	e54b883a 	add	r5,fp,r21
  82a2ec:	31000054 	ori	r4,r6,1
  82a2f0:	1080004c 	andi	r2,r2,1
  82a2f4:	1704b03a 	or	r2,r2,fp
  82a2f8:	38800115 	stw	r2,4(r7)
  82a2fc:	29000115 	stw	r4,4(r5)
  82a300:	2987883a 	add	r3,r5,r6
  82a304:	18800117 	ldw	r2,4(r3)
  82a308:	29400204 	addi	r5,r5,8
  82a30c:	b009883a 	mov	r4,r22
  82a310:	10800054 	ori	r2,r2,1
  82a314:	18800115 	stw	r2,4(r3)
  82a318:	0827eec0 	call	827eec <_free_r>
  82a31c:	003f3806 	br	82a000 <_realloc_r+0xb0>
  82a320:	000d883a 	mov	r6,zero
  82a324:	0009883a 	mov	r4,zero
  82a328:	003f5d06 	br	82a0a0 <_realloc_r+0x150>
  82a32c:	30c00217 	ldw	r3,8(r6)
  82a330:	30800317 	ldw	r2,12(r6)
  82a334:	800f883a 	mov	r7,r16
  82a338:	84000204 	addi	r16,r16,8
  82a33c:	10c00215 	stw	r3,8(r2)
  82a340:	18800315 	stw	r2,12(r3)
  82a344:	003f2306 	br	829fd4 <_realloc_r+0x84>
  82a348:	8809883a 	mov	r4,r17
  82a34c:	900b883a 	mov	r5,r18
  82a350:	0828bf80 	call	828bf8 <memmove>
  82a354:	003fd006 	br	82a298 <_realloc_r+0x348>
  82a358:	30800117 	ldw	r2,4(r6)
  82a35c:	e0c00404 	addi	r3,fp,16
  82a360:	1108703a 	and	r4,r2,r4
  82a364:	9905883a 	add	r2,r19,r4
  82a368:	10ff4d16 	blt	r2,r3,82a0a0 <_realloc_r+0x150>
  82a36c:	1705c83a 	sub	r2,r2,fp
  82a370:	870b883a 	add	r5,r16,fp
  82a374:	10800054 	ori	r2,r2,1
  82a378:	28800115 	stw	r2,4(r5)
  82a37c:	80c00117 	ldw	r3,4(r16)
  82a380:	008020f4 	movhi	r2,131
  82a384:	1090c504 	addi	r2,r2,17172
  82a388:	b009883a 	mov	r4,r22
  82a38c:	18c0004c 	andi	r3,r3,1
  82a390:	e0c6b03a 	or	r3,fp,r3
  82a394:	11400215 	stw	r5,8(r2)
  82a398:	80c00115 	stw	r3,4(r16)
  82a39c:	082c7a00 	call	82c7a0 <__malloc_unlock>
  82a3a0:	84400204 	addi	r17,r16,8
  82a3a4:	003f2006 	br	82a028 <_realloc_r+0xd8>
  82a3a8:	98a9883a 	add	r20,r19,r2
  82a3ac:	2509883a 	add	r4,r4,r20
  82a3b0:	e0800404 	addi	r2,fp,16
  82a3b4:	d9000115 	stw	r4,4(sp)
  82a3b8:	20bf7016 	blt	r4,r2,82a17c <_realloc_r+0x22c>
  82a3bc:	b8c00317 	ldw	r3,12(r23)
  82a3c0:	b8800217 	ldw	r2,8(r23)
  82a3c4:	99bfff04 	addi	r6,r19,-4
  82a3c8:	01400904 	movi	r5,36
  82a3cc:	18800215 	stw	r2,8(r3)
  82a3d0:	10c00315 	stw	r3,12(r2)
  82a3d4:	bc400204 	addi	r17,r23,8
  82a3d8:	29804136 	bltu	r5,r6,82a4e0 <_realloc_r+0x590>
  82a3dc:	008004c4 	movi	r2,19
  82a3e0:	9009883a 	mov	r4,r18
  82a3e4:	880f883a 	mov	r7,r17
  82a3e8:	11800f2e 	bgeu	r2,r6,82a428 <_realloc_r+0x4d8>
  82a3ec:	90800017 	ldw	r2,0(r18)
  82a3f0:	b9c00404 	addi	r7,r23,16
  82a3f4:	91000204 	addi	r4,r18,8
  82a3f8:	b8800215 	stw	r2,8(r23)
  82a3fc:	90c00117 	ldw	r3,4(r18)
  82a400:	008006c4 	movi	r2,27
  82a404:	b8c00315 	stw	r3,12(r23)
  82a408:	1180072e 	bgeu	r2,r6,82a428 <_realloc_r+0x4d8>
  82a40c:	90c00217 	ldw	r3,8(r18)
  82a410:	b9c00604 	addi	r7,r23,24
  82a414:	91000404 	addi	r4,r18,16
  82a418:	b8c00415 	stw	r3,16(r23)
  82a41c:	90800317 	ldw	r2,12(r18)
  82a420:	b8800515 	stw	r2,20(r23)
  82a424:	31404026 	beq	r6,r5,82a528 <_realloc_r+0x5d8>
  82a428:	20800017 	ldw	r2,0(r4)
  82a42c:	38800015 	stw	r2,0(r7)
  82a430:	20c00117 	ldw	r3,4(r4)
  82a434:	38c00115 	stw	r3,4(r7)
  82a438:	20800217 	ldw	r2,8(r4)
  82a43c:	38800215 	stw	r2,8(r7)
  82a440:	d8c00117 	ldw	r3,4(sp)
  82a444:	bf0b883a 	add	r5,r23,fp
  82a448:	b009883a 	mov	r4,r22
  82a44c:	1f05c83a 	sub	r2,r3,fp
  82a450:	10800054 	ori	r2,r2,1
  82a454:	28800115 	stw	r2,4(r5)
  82a458:	b8c00117 	ldw	r3,4(r23)
  82a45c:	008020f4 	movhi	r2,131
  82a460:	1090c504 	addi	r2,r2,17172
  82a464:	11400215 	stw	r5,8(r2)
  82a468:	18c0004c 	andi	r3,r3,1
  82a46c:	e0c6b03a 	or	r3,fp,r3
  82a470:	b8c00115 	stw	r3,4(r23)
  82a474:	082c7a00 	call	82c7a0 <__malloc_unlock>
  82a478:	003eeb06 	br	82a028 <_realloc_r+0xd8>
  82a47c:	20800117 	ldw	r2,4(r4)
  82a480:	00ffff04 	movi	r3,-4
  82a484:	800f883a 	mov	r7,r16
  82a488:	10c4703a 	and	r2,r2,r3
  82a48c:	98a9883a 	add	r20,r19,r2
  82a490:	84000204 	addi	r16,r16,8
  82a494:	003ecf06 	br	829fd4 <_realloc_r+0x84>
  82a498:	900b883a 	mov	r5,r18
  82a49c:	8009883a 	mov	r4,r16
  82a4a0:	0828bf80 	call	828bf8 <memmove>
  82a4a4:	dd000017 	ldw	r20,0(sp)
  82a4a8:	b80f883a 	mov	r7,r23
  82a4ac:	003ec906 	br	829fd4 <_realloc_r+0x84>
  82a4b0:	900b883a 	mov	r5,r18
  82a4b4:	8009883a 	mov	r4,r16
  82a4b8:	0828bf80 	call	828bf8 <memmove>
  82a4bc:	b80f883a 	mov	r7,r23
  82a4c0:	003ec406 	br	829fd4 <_realloc_r+0x84>
  82a4c4:	90c00417 	ldw	r3,16(r18)
  82a4c8:	89400604 	addi	r5,r17,24
  82a4cc:	91000604 	addi	r4,r18,24
  82a4d0:	88c00415 	stw	r3,16(r17)
  82a4d4:	90800517 	ldw	r2,20(r18)
  82a4d8:	88800515 	stw	r2,20(r17)
  82a4dc:	003f6806 	br	82a280 <_realloc_r+0x330>
  82a4e0:	900b883a 	mov	r5,r18
  82a4e4:	8809883a 	mov	r4,r17
  82a4e8:	0828bf80 	call	828bf8 <memmove>
  82a4ec:	003fd406 	br	82a440 <_realloc_r+0x4f0>
  82a4f0:	90c00417 	ldw	r3,16(r18)
  82a4f4:	91000604 	addi	r4,r18,24
  82a4f8:	ba000804 	addi	r8,r23,32
  82a4fc:	b8c00615 	stw	r3,24(r23)
  82a500:	90800517 	ldw	r2,20(r18)
  82a504:	b8800715 	stw	r2,28(r23)
  82a508:	003f1206 	br	82a154 <_realloc_r+0x204>
  82a50c:	90c00417 	ldw	r3,16(r18)
  82a510:	91000604 	addi	r4,r18,24
  82a514:	ba000804 	addi	r8,r23,32
  82a518:	b8c00615 	stw	r3,24(r23)
  82a51c:	90800517 	ldw	r2,20(r18)
  82a520:	b8800715 	stw	r2,28(r23)
  82a524:	003f3206 	br	82a1f0 <_realloc_r+0x2a0>
  82a528:	90c00417 	ldw	r3,16(r18)
  82a52c:	91000604 	addi	r4,r18,24
  82a530:	b9c00804 	addi	r7,r23,32
  82a534:	b8c00615 	stw	r3,24(r23)
  82a538:	90800517 	ldw	r2,20(r18)
  82a53c:	b8800715 	stw	r2,28(r23)
  82a540:	003fb906 	br	82a428 <_realloc_r+0x4d8>

0082a544 <__isinfd>:
  82a544:	200d883a 	mov	r6,r4
  82a548:	0109c83a 	sub	r4,zero,r4
  82a54c:	2188b03a 	or	r4,r4,r6
  82a550:	2008d7fa 	srli	r4,r4,31
  82a554:	00a00034 	movhi	r2,32768
  82a558:	10bfffc4 	addi	r2,r2,-1
  82a55c:	1144703a 	and	r2,r2,r5
  82a560:	2088b03a 	or	r4,r4,r2
  82a564:	009ffc34 	movhi	r2,32752
  82a568:	1105c83a 	sub	r2,r2,r4
  82a56c:	0087c83a 	sub	r3,zero,r2
  82a570:	10c4b03a 	or	r2,r2,r3
  82a574:	1004d7fa 	srli	r2,r2,31
  82a578:	00c00044 	movi	r3,1
  82a57c:	1885c83a 	sub	r2,r3,r2
  82a580:	f800283a 	ret

0082a584 <__isnand>:
  82a584:	200d883a 	mov	r6,r4
  82a588:	0109c83a 	sub	r4,zero,r4
  82a58c:	2188b03a 	or	r4,r4,r6
  82a590:	2008d7fa 	srli	r4,r4,31
  82a594:	00a00034 	movhi	r2,32768
  82a598:	10bfffc4 	addi	r2,r2,-1
  82a59c:	1144703a 	and	r2,r2,r5
  82a5a0:	2088b03a 	or	r4,r4,r2
  82a5a4:	009ffc34 	movhi	r2,32752
  82a5a8:	1105c83a 	sub	r2,r2,r4
  82a5ac:	1004d7fa 	srli	r2,r2,31
  82a5b0:	f800283a 	ret

0082a5b4 <__sclose>:
  82a5b4:	2940038f 	ldh	r5,14(r5)
  82a5b8:	082aa341 	jmpi	82aa34 <_close_r>

0082a5bc <__sseek>:
  82a5bc:	defffe04 	addi	sp,sp,-8
  82a5c0:	dc000015 	stw	r16,0(sp)
  82a5c4:	2821883a 	mov	r16,r5
  82a5c8:	2940038f 	ldh	r5,14(r5)
  82a5cc:	dfc00115 	stw	ra,4(sp)
  82a5d0:	082acac0 	call	82acac <_lseek_r>
  82a5d4:	1007883a 	mov	r3,r2
  82a5d8:	00bfffc4 	movi	r2,-1
  82a5dc:	18800926 	beq	r3,r2,82a604 <__sseek+0x48>
  82a5e0:	8080030b 	ldhu	r2,12(r16)
  82a5e4:	80c01415 	stw	r3,80(r16)
  82a5e8:	10840014 	ori	r2,r2,4096
  82a5ec:	8080030d 	sth	r2,12(r16)
  82a5f0:	1805883a 	mov	r2,r3
  82a5f4:	dfc00117 	ldw	ra,4(sp)
  82a5f8:	dc000017 	ldw	r16,0(sp)
  82a5fc:	dec00204 	addi	sp,sp,8
  82a600:	f800283a 	ret
  82a604:	8080030b 	ldhu	r2,12(r16)
  82a608:	10bbffcc 	andi	r2,r2,61439
  82a60c:	8080030d 	sth	r2,12(r16)
  82a610:	1805883a 	mov	r2,r3
  82a614:	dfc00117 	ldw	ra,4(sp)
  82a618:	dc000017 	ldw	r16,0(sp)
  82a61c:	dec00204 	addi	sp,sp,8
  82a620:	f800283a 	ret

0082a624 <__swrite>:
  82a624:	2880030b 	ldhu	r2,12(r5)
  82a628:	defffb04 	addi	sp,sp,-20
  82a62c:	dcc00315 	stw	r19,12(sp)
  82a630:	1080400c 	andi	r2,r2,256
  82a634:	dc800215 	stw	r18,8(sp)
  82a638:	dc400115 	stw	r17,4(sp)
  82a63c:	dc000015 	stw	r16,0(sp)
  82a640:	3027883a 	mov	r19,r6
  82a644:	3825883a 	mov	r18,r7
  82a648:	dfc00415 	stw	ra,16(sp)
  82a64c:	2821883a 	mov	r16,r5
  82a650:	000d883a 	mov	r6,zero
  82a654:	01c00084 	movi	r7,2
  82a658:	2023883a 	mov	r17,r4
  82a65c:	10000226 	beq	r2,zero,82a668 <__swrite+0x44>
  82a660:	2940038f 	ldh	r5,14(r5)
  82a664:	082acac0 	call	82acac <_lseek_r>
  82a668:	8080030b 	ldhu	r2,12(r16)
  82a66c:	8140038f 	ldh	r5,14(r16)
  82a670:	8809883a 	mov	r4,r17
  82a674:	10bbffcc 	andi	r2,r2,61439
  82a678:	980d883a 	mov	r6,r19
  82a67c:	900f883a 	mov	r7,r18
  82a680:	8080030d 	sth	r2,12(r16)
  82a684:	dfc00417 	ldw	ra,16(sp)
  82a688:	dcc00317 	ldw	r19,12(sp)
  82a68c:	dc800217 	ldw	r18,8(sp)
  82a690:	dc400117 	ldw	r17,4(sp)
  82a694:	dc000017 	ldw	r16,0(sp)
  82a698:	dec00504 	addi	sp,sp,20
  82a69c:	082a9081 	jmpi	82a908 <_write_r>

0082a6a0 <__sread>:
  82a6a0:	defffe04 	addi	sp,sp,-8
  82a6a4:	dc000015 	stw	r16,0(sp)
  82a6a8:	2821883a 	mov	r16,r5
  82a6ac:	2940038f 	ldh	r5,14(r5)
  82a6b0:	dfc00115 	stw	ra,4(sp)
  82a6b4:	082ad240 	call	82ad24 <_read_r>
  82a6b8:	1007883a 	mov	r3,r2
  82a6bc:	10000816 	blt	r2,zero,82a6e0 <__sread+0x40>
  82a6c0:	80801417 	ldw	r2,80(r16)
  82a6c4:	10c5883a 	add	r2,r2,r3
  82a6c8:	80801415 	stw	r2,80(r16)
  82a6cc:	1805883a 	mov	r2,r3
  82a6d0:	dfc00117 	ldw	ra,4(sp)
  82a6d4:	dc000017 	ldw	r16,0(sp)
  82a6d8:	dec00204 	addi	sp,sp,8
  82a6dc:	f800283a 	ret
  82a6e0:	8080030b 	ldhu	r2,12(r16)
  82a6e4:	10bbffcc 	andi	r2,r2,61439
  82a6e8:	8080030d 	sth	r2,12(r16)
  82a6ec:	1805883a 	mov	r2,r3
  82a6f0:	dfc00117 	ldw	ra,4(sp)
  82a6f4:	dc000017 	ldw	r16,0(sp)
  82a6f8:	dec00204 	addi	sp,sp,8
  82a6fc:	f800283a 	ret

0082a700 <strcmp>:
  82a700:	2144b03a 	or	r2,r4,r5
  82a704:	108000cc 	andi	r2,r2,3
  82a708:	10001d1e 	bne	r2,zero,82a780 <strcmp+0x80>
  82a70c:	200f883a 	mov	r7,r4
  82a710:	28800017 	ldw	r2,0(r5)
  82a714:	21000017 	ldw	r4,0(r4)
  82a718:	280d883a 	mov	r6,r5
  82a71c:	2080161e 	bne	r4,r2,82a778 <strcmp+0x78>
  82a720:	023fbff4 	movhi	r8,65279
  82a724:	423fbfc4 	addi	r8,r8,-257
  82a728:	2207883a 	add	r3,r4,r8
  82a72c:	01602074 	movhi	r5,32897
  82a730:	29602004 	addi	r5,r5,-32640
  82a734:	1946703a 	and	r3,r3,r5
  82a738:	0104303a 	nor	r2,zero,r4
  82a73c:	10c4703a 	and	r2,r2,r3
  82a740:	10001c1e 	bne	r2,zero,82a7b4 <strcmp+0xb4>
  82a744:	4013883a 	mov	r9,r8
  82a748:	2811883a 	mov	r8,r5
  82a74c:	00000106 	br	82a754 <strcmp+0x54>
  82a750:	1800181e 	bne	r3,zero,82a7b4 <strcmp+0xb4>
  82a754:	39c00104 	addi	r7,r7,4
  82a758:	39000017 	ldw	r4,0(r7)
  82a75c:	31800104 	addi	r6,r6,4
  82a760:	31400017 	ldw	r5,0(r6)
  82a764:	2245883a 	add	r2,r4,r9
  82a768:	1204703a 	and	r2,r2,r8
  82a76c:	0106303a 	nor	r3,zero,r4
  82a770:	1886703a 	and	r3,r3,r2
  82a774:	217ff626 	beq	r4,r5,82a750 <strcmp+0x50>
  82a778:	3809883a 	mov	r4,r7
  82a77c:	300b883a 	mov	r5,r6
  82a780:	20c00007 	ldb	r3,0(r4)
  82a784:	1800051e 	bne	r3,zero,82a79c <strcmp+0x9c>
  82a788:	00000606 	br	82a7a4 <strcmp+0xa4>
  82a78c:	21000044 	addi	r4,r4,1
  82a790:	20c00007 	ldb	r3,0(r4)
  82a794:	29400044 	addi	r5,r5,1
  82a798:	18000226 	beq	r3,zero,82a7a4 <strcmp+0xa4>
  82a79c:	28800007 	ldb	r2,0(r5)
  82a7a0:	18bffa26 	beq	r3,r2,82a78c <strcmp+0x8c>
  82a7a4:	20c00003 	ldbu	r3,0(r4)
  82a7a8:	28800003 	ldbu	r2,0(r5)
  82a7ac:	1885c83a 	sub	r2,r3,r2
  82a7b0:	f800283a 	ret
  82a7b4:	0005883a 	mov	r2,zero
  82a7b8:	f800283a 	ret

0082a7bc <__swbuf_r>:
  82a7bc:	defffc04 	addi	sp,sp,-16
  82a7c0:	dc400215 	stw	r17,8(sp)
  82a7c4:	dc000115 	stw	r16,4(sp)
  82a7c8:	dfc00315 	stw	ra,12(sp)
  82a7cc:	2023883a 	mov	r17,r4
  82a7d0:	2821883a 	mov	r16,r5
  82a7d4:	20000226 	beq	r4,zero,82a7e0 <__swbuf_r+0x24>
  82a7d8:	20800e17 	ldw	r2,56(r4)
  82a7dc:	10002f26 	beq	r2,zero,82a89c <__swbuf_r+0xe0>
  82a7e0:	3080030b 	ldhu	r2,12(r6)
  82a7e4:	30c00617 	ldw	r3,24(r6)
  82a7e8:	1080020c 	andi	r2,r2,8
  82a7ec:	30c00215 	stw	r3,8(r6)
  82a7f0:	10002226 	beq	r2,zero,82a87c <__swbuf_r+0xc0>
  82a7f4:	30c00417 	ldw	r3,16(r6)
  82a7f8:	18002026 	beq	r3,zero,82a87c <__swbuf_r+0xc0>
  82a7fc:	31000017 	ldw	r4,0(r6)
  82a800:	30800517 	ldw	r2,20(r6)
  82a804:	20c7c83a 	sub	r3,r4,r3
  82a808:	18802f0e 	bge	r3,r2,82a8c8 <__swbuf_r+0x10c>
  82a80c:	19400044 	addi	r5,r3,1
  82a810:	30800217 	ldw	r2,8(r6)
  82a814:	84003fcc 	andi	r16,r16,255
  82a818:	20c00044 	addi	r3,r4,1
  82a81c:	10bfffc4 	addi	r2,r2,-1
  82a820:	30800215 	stw	r2,8(r6)
  82a824:	24000005 	stb	r16,0(r4)
  82a828:	30800517 	ldw	r2,20(r6)
  82a82c:	30c00015 	stw	r3,0(r6)
  82a830:	11400c26 	beq	r2,r5,82a864 <__swbuf_r+0xa8>
  82a834:	3080030b 	ldhu	r2,12(r6)
  82a838:	1080004c 	andi	r2,r2,1
  82a83c:	1005003a 	cmpeq	r2,r2,zero
  82a840:	10000626 	beq	r2,zero,82a85c <__swbuf_r+0xa0>
  82a844:	8005883a 	mov	r2,r16
  82a848:	dfc00317 	ldw	ra,12(sp)
  82a84c:	dc400217 	ldw	r17,8(sp)
  82a850:	dc000117 	ldw	r16,4(sp)
  82a854:	dec00404 	addi	sp,sp,16
  82a858:	f800283a 	ret
  82a85c:	00800284 	movi	r2,10
  82a860:	80bff81e 	bne	r16,r2,82a844 <__swbuf_r+0x88>
  82a864:	8809883a 	mov	r4,r17
  82a868:	300b883a 	mov	r5,r6
  82a86c:	08278d00 	call	8278d0 <_fflush_r>
  82a870:	103ff426 	beq	r2,zero,82a844 <__swbuf_r+0x88>
  82a874:	043fffc4 	movi	r16,-1
  82a878:	003ff206 	br	82a844 <__swbuf_r+0x88>
  82a87c:	300b883a 	mov	r5,r6
  82a880:	8809883a 	mov	r4,r17
  82a884:	d9800015 	stw	r6,0(sp)
  82a888:	0825e140 	call	825e14 <__swsetup_r>
  82a88c:	d9800017 	ldw	r6,0(sp)
  82a890:	1000061e 	bne	r2,zero,82a8ac <__swbuf_r+0xf0>
  82a894:	30c00417 	ldw	r3,16(r6)
  82a898:	003fd806 	br	82a7fc <__swbuf_r+0x40>
  82a89c:	d9800015 	stw	r6,0(sp)
  82a8a0:	0827b680 	call	827b68 <__sinit>
  82a8a4:	d9800017 	ldw	r6,0(sp)
  82a8a8:	003fcd06 	br	82a7e0 <__swbuf_r+0x24>
  82a8ac:	3080030b 	ldhu	r2,12(r6)
  82a8b0:	00c00244 	movi	r3,9
  82a8b4:	043fffc4 	movi	r16,-1
  82a8b8:	10801014 	ori	r2,r2,64
  82a8bc:	3080030d 	sth	r2,12(r6)
  82a8c0:	88c00015 	stw	r3,0(r17)
  82a8c4:	003fdf06 	br	82a844 <__swbuf_r+0x88>
  82a8c8:	300b883a 	mov	r5,r6
  82a8cc:	8809883a 	mov	r4,r17
  82a8d0:	d9800015 	stw	r6,0(sp)
  82a8d4:	08278d00 	call	8278d0 <_fflush_r>
  82a8d8:	d9800017 	ldw	r6,0(sp)
  82a8dc:	103fe51e 	bne	r2,zero,82a874 <__swbuf_r+0xb8>
  82a8e0:	31000017 	ldw	r4,0(r6)
  82a8e4:	01400044 	movi	r5,1
  82a8e8:	003fc906 	br	82a810 <__swbuf_r+0x54>

0082a8ec <__swbuf>:
  82a8ec:	018020f4 	movhi	r6,131
  82a8f0:	31967504 	addi	r6,r6,22996
  82a8f4:	2007883a 	mov	r3,r4
  82a8f8:	31000017 	ldw	r4,0(r6)
  82a8fc:	280d883a 	mov	r6,r5
  82a900:	180b883a 	mov	r5,r3
  82a904:	082a7bc1 	jmpi	82a7bc <__swbuf_r>

0082a908 <_write_r>:
  82a908:	defffd04 	addi	sp,sp,-12
  82a90c:	dc000015 	stw	r16,0(sp)
  82a910:	040020f4 	movhi	r16,131
  82a914:	841e3504 	addi	r16,r16,30932
  82a918:	dc400115 	stw	r17,4(sp)
  82a91c:	80000015 	stw	zero,0(r16)
  82a920:	2023883a 	mov	r17,r4
  82a924:	2809883a 	mov	r4,r5
  82a928:	300b883a 	mov	r5,r6
  82a92c:	380d883a 	mov	r6,r7
  82a930:	dfc00215 	stw	ra,8(sp)
  82a934:	082ca5c0 	call	82ca5c <write>
  82a938:	1007883a 	mov	r3,r2
  82a93c:	00bfffc4 	movi	r2,-1
  82a940:	18800626 	beq	r3,r2,82a95c <_write_r+0x54>
  82a944:	1805883a 	mov	r2,r3
  82a948:	dfc00217 	ldw	ra,8(sp)
  82a94c:	dc400117 	ldw	r17,4(sp)
  82a950:	dc000017 	ldw	r16,0(sp)
  82a954:	dec00304 	addi	sp,sp,12
  82a958:	f800283a 	ret
  82a95c:	80800017 	ldw	r2,0(r16)
  82a960:	103ff826 	beq	r2,zero,82a944 <_write_r+0x3c>
  82a964:	88800015 	stw	r2,0(r17)
  82a968:	1805883a 	mov	r2,r3
  82a96c:	dfc00217 	ldw	ra,8(sp)
  82a970:	dc400117 	ldw	r17,4(sp)
  82a974:	dc000017 	ldw	r16,0(sp)
  82a978:	dec00304 	addi	sp,sp,12
  82a97c:	f800283a 	ret

0082a980 <_calloc_r>:
  82a980:	298b383a 	mul	r5,r5,r6
  82a984:	defffe04 	addi	sp,sp,-8
  82a988:	dc000015 	stw	r16,0(sp)
  82a98c:	dfc00115 	stw	ra,4(sp)
  82a990:	08235780 	call	823578 <_malloc_r>
  82a994:	1021883a 	mov	r16,r2
  82a998:	01c00904 	movi	r7,36
  82a99c:	10000d26 	beq	r2,zero,82a9d4 <_calloc_r+0x54>
  82a9a0:	10ffff17 	ldw	r3,-4(r2)
  82a9a4:	1009883a 	mov	r4,r2
  82a9a8:	00bfff04 	movi	r2,-4
  82a9ac:	1886703a 	and	r3,r3,r2
  82a9b0:	1887883a 	add	r3,r3,r2
  82a9b4:	180d883a 	mov	r6,r3
  82a9b8:	000b883a 	mov	r5,zero
  82a9bc:	38c01736 	bltu	r7,r3,82aa1c <_calloc_r+0x9c>
  82a9c0:	008004c4 	movi	r2,19
  82a9c4:	10c00836 	bltu	r2,r3,82a9e8 <_calloc_r+0x68>
  82a9c8:	20000215 	stw	zero,8(r4)
  82a9cc:	20000015 	stw	zero,0(r4)
  82a9d0:	20000115 	stw	zero,4(r4)
  82a9d4:	8005883a 	mov	r2,r16
  82a9d8:	dfc00117 	ldw	ra,4(sp)
  82a9dc:	dc000017 	ldw	r16,0(sp)
  82a9e0:	dec00204 	addi	sp,sp,8
  82a9e4:	f800283a 	ret
  82a9e8:	008006c4 	movi	r2,27
  82a9ec:	80000015 	stw	zero,0(r16)
  82a9f0:	80000115 	stw	zero,4(r16)
  82a9f4:	81000204 	addi	r4,r16,8
  82a9f8:	10fff32e 	bgeu	r2,r3,82a9c8 <_calloc_r+0x48>
  82a9fc:	80000215 	stw	zero,8(r16)
  82aa00:	80000315 	stw	zero,12(r16)
  82aa04:	81000404 	addi	r4,r16,16
  82aa08:	19ffef1e 	bne	r3,r7,82a9c8 <_calloc_r+0x48>
  82aa0c:	81000604 	addi	r4,r16,24
  82aa10:	80000415 	stw	zero,16(r16)
  82aa14:	80000515 	stw	zero,20(r16)
  82aa18:	003feb06 	br	82a9c8 <_calloc_r+0x48>
  82aa1c:	0828cd80 	call	828cd8 <memset>
  82aa20:	8005883a 	mov	r2,r16
  82aa24:	dfc00117 	ldw	ra,4(sp)
  82aa28:	dc000017 	ldw	r16,0(sp)
  82aa2c:	dec00204 	addi	sp,sp,8
  82aa30:	f800283a 	ret

0082aa34 <_close_r>:
  82aa34:	defffd04 	addi	sp,sp,-12
  82aa38:	dc000015 	stw	r16,0(sp)
  82aa3c:	040020f4 	movhi	r16,131
  82aa40:	841e3504 	addi	r16,r16,30932
  82aa44:	dc400115 	stw	r17,4(sp)
  82aa48:	80000015 	stw	zero,0(r16)
  82aa4c:	2023883a 	mov	r17,r4
  82aa50:	2809883a 	mov	r4,r5
  82aa54:	dfc00215 	stw	ra,8(sp)
  82aa58:	082be980 	call	82be98 <close>
  82aa5c:	1007883a 	mov	r3,r2
  82aa60:	00bfffc4 	movi	r2,-1
  82aa64:	18800626 	beq	r3,r2,82aa80 <_close_r+0x4c>
  82aa68:	1805883a 	mov	r2,r3
  82aa6c:	dfc00217 	ldw	ra,8(sp)
  82aa70:	dc400117 	ldw	r17,4(sp)
  82aa74:	dc000017 	ldw	r16,0(sp)
  82aa78:	dec00304 	addi	sp,sp,12
  82aa7c:	f800283a 	ret
  82aa80:	80800017 	ldw	r2,0(r16)
  82aa84:	103ff826 	beq	r2,zero,82aa68 <_close_r+0x34>
  82aa88:	88800015 	stw	r2,0(r17)
  82aa8c:	1805883a 	mov	r2,r3
  82aa90:	dfc00217 	ldw	ra,8(sp)
  82aa94:	dc400117 	ldw	r17,4(sp)
  82aa98:	dc000017 	ldw	r16,0(sp)
  82aa9c:	dec00304 	addi	sp,sp,12
  82aaa0:	f800283a 	ret

0082aaa4 <_fclose_r>:
  82aaa4:	defffc04 	addi	sp,sp,-16
  82aaa8:	dc400115 	stw	r17,4(sp)
  82aaac:	dc000015 	stw	r16,0(sp)
  82aab0:	dfc00315 	stw	ra,12(sp)
  82aab4:	dc800215 	stw	r18,8(sp)
  82aab8:	2821883a 	mov	r16,r5
  82aabc:	2023883a 	mov	r17,r4
  82aac0:	28002926 	beq	r5,zero,82ab68 <_fclose_r+0xc4>
  82aac4:	0827b580 	call	827b58 <__sfp_lock_acquire>
  82aac8:	88000226 	beq	r17,zero,82aad4 <_fclose_r+0x30>
  82aacc:	88800e17 	ldw	r2,56(r17)
  82aad0:	10002d26 	beq	r2,zero,82ab88 <_fclose_r+0xe4>
  82aad4:	8080030f 	ldh	r2,12(r16)
  82aad8:	10002226 	beq	r2,zero,82ab64 <_fclose_r+0xc0>
  82aadc:	8809883a 	mov	r4,r17
  82aae0:	800b883a 	mov	r5,r16
  82aae4:	08278d00 	call	8278d0 <_fflush_r>
  82aae8:	1025883a 	mov	r18,r2
  82aaec:	80800b17 	ldw	r2,44(r16)
  82aaf0:	10000426 	beq	r2,zero,82ab04 <_fclose_r+0x60>
  82aaf4:	81400717 	ldw	r5,28(r16)
  82aaf8:	8809883a 	mov	r4,r17
  82aafc:	103ee83a 	callr	r2
  82ab00:	10002a16 	blt	r2,zero,82abac <_fclose_r+0x108>
  82ab04:	8080030b 	ldhu	r2,12(r16)
  82ab08:	1080200c 	andi	r2,r2,128
  82ab0c:	1000231e 	bne	r2,zero,82ab9c <_fclose_r+0xf8>
  82ab10:	81400c17 	ldw	r5,48(r16)
  82ab14:	28000526 	beq	r5,zero,82ab2c <_fclose_r+0x88>
  82ab18:	80801004 	addi	r2,r16,64
  82ab1c:	28800226 	beq	r5,r2,82ab28 <_fclose_r+0x84>
  82ab20:	8809883a 	mov	r4,r17
  82ab24:	0827eec0 	call	827eec <_free_r>
  82ab28:	80000c15 	stw	zero,48(r16)
  82ab2c:	81401117 	ldw	r5,68(r16)
  82ab30:	28000326 	beq	r5,zero,82ab40 <_fclose_r+0x9c>
  82ab34:	8809883a 	mov	r4,r17
  82ab38:	0827eec0 	call	827eec <_free_r>
  82ab3c:	80001115 	stw	zero,68(r16)
  82ab40:	8000030d 	sth	zero,12(r16)
  82ab44:	0827b5c0 	call	827b5c <__sfp_lock_release>
  82ab48:	9005883a 	mov	r2,r18
  82ab4c:	dfc00317 	ldw	ra,12(sp)
  82ab50:	dc800217 	ldw	r18,8(sp)
  82ab54:	dc400117 	ldw	r17,4(sp)
  82ab58:	dc000017 	ldw	r16,0(sp)
  82ab5c:	dec00404 	addi	sp,sp,16
  82ab60:	f800283a 	ret
  82ab64:	0827b5c0 	call	827b5c <__sfp_lock_release>
  82ab68:	0025883a 	mov	r18,zero
  82ab6c:	9005883a 	mov	r2,r18
  82ab70:	dfc00317 	ldw	ra,12(sp)
  82ab74:	dc800217 	ldw	r18,8(sp)
  82ab78:	dc400117 	ldw	r17,4(sp)
  82ab7c:	dc000017 	ldw	r16,0(sp)
  82ab80:	dec00404 	addi	sp,sp,16
  82ab84:	f800283a 	ret
  82ab88:	8809883a 	mov	r4,r17
  82ab8c:	0827b680 	call	827b68 <__sinit>
  82ab90:	8080030f 	ldh	r2,12(r16)
  82ab94:	103fd11e 	bne	r2,zero,82aadc <_fclose_r+0x38>
  82ab98:	003ff206 	br	82ab64 <_fclose_r+0xc0>
  82ab9c:	81400417 	ldw	r5,16(r16)
  82aba0:	8809883a 	mov	r4,r17
  82aba4:	0827eec0 	call	827eec <_free_r>
  82aba8:	003fd906 	br	82ab10 <_fclose_r+0x6c>
  82abac:	04bfffc4 	movi	r18,-1
  82abb0:	003fd406 	br	82ab04 <_fclose_r+0x60>

0082abb4 <fclose>:
  82abb4:	008020f4 	movhi	r2,131
  82abb8:	10967504 	addi	r2,r2,22996
  82abbc:	200b883a 	mov	r5,r4
  82abc0:	11000017 	ldw	r4,0(r2)
  82abc4:	082aaa41 	jmpi	82aaa4 <_fclose_r>

0082abc8 <_fstat_r>:
  82abc8:	defffd04 	addi	sp,sp,-12
  82abcc:	dc000015 	stw	r16,0(sp)
  82abd0:	040020f4 	movhi	r16,131
  82abd4:	841e3504 	addi	r16,r16,30932
  82abd8:	dc400115 	stw	r17,4(sp)
  82abdc:	80000015 	stw	zero,0(r16)
  82abe0:	2023883a 	mov	r17,r4
  82abe4:	2809883a 	mov	r4,r5
  82abe8:	300b883a 	mov	r5,r6
  82abec:	dfc00215 	stw	ra,8(sp)
  82abf0:	082c0c40 	call	82c0c4 <fstat>
  82abf4:	1007883a 	mov	r3,r2
  82abf8:	00bfffc4 	movi	r2,-1
  82abfc:	18800626 	beq	r3,r2,82ac18 <_fstat_r+0x50>
  82ac00:	1805883a 	mov	r2,r3
  82ac04:	dfc00217 	ldw	ra,8(sp)
  82ac08:	dc400117 	ldw	r17,4(sp)
  82ac0c:	dc000017 	ldw	r16,0(sp)
  82ac10:	dec00304 	addi	sp,sp,12
  82ac14:	f800283a 	ret
  82ac18:	80800017 	ldw	r2,0(r16)
  82ac1c:	103ff826 	beq	r2,zero,82ac00 <_fstat_r+0x38>
  82ac20:	88800015 	stw	r2,0(r17)
  82ac24:	1805883a 	mov	r2,r3
  82ac28:	dfc00217 	ldw	ra,8(sp)
  82ac2c:	dc400117 	ldw	r17,4(sp)
  82ac30:	dc000017 	ldw	r16,0(sp)
  82ac34:	dec00304 	addi	sp,sp,12
  82ac38:	f800283a 	ret

0082ac3c <_isatty_r>:
  82ac3c:	defffd04 	addi	sp,sp,-12
  82ac40:	dc000015 	stw	r16,0(sp)
  82ac44:	040020f4 	movhi	r16,131
  82ac48:	841e3504 	addi	r16,r16,30932
  82ac4c:	dc400115 	stw	r17,4(sp)
  82ac50:	80000015 	stw	zero,0(r16)
  82ac54:	2023883a 	mov	r17,r4
  82ac58:	2809883a 	mov	r4,r5
  82ac5c:	dfc00215 	stw	ra,8(sp)
  82ac60:	082c3b80 	call	82c3b8 <isatty>
  82ac64:	1007883a 	mov	r3,r2
  82ac68:	00bfffc4 	movi	r2,-1
  82ac6c:	18800626 	beq	r3,r2,82ac88 <_isatty_r+0x4c>
  82ac70:	1805883a 	mov	r2,r3
  82ac74:	dfc00217 	ldw	ra,8(sp)
  82ac78:	dc400117 	ldw	r17,4(sp)
  82ac7c:	dc000017 	ldw	r16,0(sp)
  82ac80:	dec00304 	addi	sp,sp,12
  82ac84:	f800283a 	ret
  82ac88:	80800017 	ldw	r2,0(r16)
  82ac8c:	103ff826 	beq	r2,zero,82ac70 <_isatty_r+0x34>
  82ac90:	88800015 	stw	r2,0(r17)
  82ac94:	1805883a 	mov	r2,r3
  82ac98:	dfc00217 	ldw	ra,8(sp)
  82ac9c:	dc400117 	ldw	r17,4(sp)
  82aca0:	dc000017 	ldw	r16,0(sp)
  82aca4:	dec00304 	addi	sp,sp,12
  82aca8:	f800283a 	ret

0082acac <_lseek_r>:
  82acac:	defffd04 	addi	sp,sp,-12
  82acb0:	dc000015 	stw	r16,0(sp)
  82acb4:	040020f4 	movhi	r16,131
  82acb8:	841e3504 	addi	r16,r16,30932
  82acbc:	dc400115 	stw	r17,4(sp)
  82acc0:	80000015 	stw	zero,0(r16)
  82acc4:	2023883a 	mov	r17,r4
  82acc8:	2809883a 	mov	r4,r5
  82accc:	300b883a 	mov	r5,r6
  82acd0:	380d883a 	mov	r6,r7
  82acd4:	dfc00215 	stw	ra,8(sp)
  82acd8:	082c5c40 	call	82c5c4 <lseek>
  82acdc:	1007883a 	mov	r3,r2
  82ace0:	00bfffc4 	movi	r2,-1
  82ace4:	18800626 	beq	r3,r2,82ad00 <_lseek_r+0x54>
  82ace8:	1805883a 	mov	r2,r3
  82acec:	dfc00217 	ldw	ra,8(sp)
  82acf0:	dc400117 	ldw	r17,4(sp)
  82acf4:	dc000017 	ldw	r16,0(sp)
  82acf8:	dec00304 	addi	sp,sp,12
  82acfc:	f800283a 	ret
  82ad00:	80800017 	ldw	r2,0(r16)
  82ad04:	103ff826 	beq	r2,zero,82ace8 <_lseek_r+0x3c>
  82ad08:	88800015 	stw	r2,0(r17)
  82ad0c:	1805883a 	mov	r2,r3
  82ad10:	dfc00217 	ldw	ra,8(sp)
  82ad14:	dc400117 	ldw	r17,4(sp)
  82ad18:	dc000017 	ldw	r16,0(sp)
  82ad1c:	dec00304 	addi	sp,sp,12
  82ad20:	f800283a 	ret

0082ad24 <_read_r>:
  82ad24:	defffd04 	addi	sp,sp,-12
  82ad28:	dc000015 	stw	r16,0(sp)
  82ad2c:	040020f4 	movhi	r16,131
  82ad30:	841e3504 	addi	r16,r16,30932
  82ad34:	dc400115 	stw	r17,4(sp)
  82ad38:	80000015 	stw	zero,0(r16)
  82ad3c:	2023883a 	mov	r17,r4
  82ad40:	2809883a 	mov	r4,r5
  82ad44:	300b883a 	mov	r5,r6
  82ad48:	380d883a 	mov	r6,r7
  82ad4c:	dfc00215 	stw	ra,8(sp)
  82ad50:	082c7c00 	call	82c7c0 <read>
  82ad54:	1007883a 	mov	r3,r2
  82ad58:	00bfffc4 	movi	r2,-1
  82ad5c:	18800626 	beq	r3,r2,82ad78 <_read_r+0x54>
  82ad60:	1805883a 	mov	r2,r3
  82ad64:	dfc00217 	ldw	ra,8(sp)
  82ad68:	dc400117 	ldw	r17,4(sp)
  82ad6c:	dc000017 	ldw	r16,0(sp)
  82ad70:	dec00304 	addi	sp,sp,12
  82ad74:	f800283a 	ret
  82ad78:	80800017 	ldw	r2,0(r16)
  82ad7c:	103ff826 	beq	r2,zero,82ad60 <_read_r+0x3c>
  82ad80:	88800015 	stw	r2,0(r17)
  82ad84:	1805883a 	mov	r2,r3
  82ad88:	dfc00217 	ldw	ra,8(sp)
  82ad8c:	dc400117 	ldw	r17,4(sp)
  82ad90:	dc000017 	ldw	r16,0(sp)
  82ad94:	dec00304 	addi	sp,sp,12
  82ad98:	f800283a 	ret

0082ad9c <__udivdi3>:
  82ad9c:	defff004 	addi	sp,sp,-64
  82ada0:	2005883a 	mov	r2,r4
  82ada4:	3011883a 	mov	r8,r6
  82ada8:	df000e15 	stw	fp,56(sp)
  82adac:	dd000a15 	stw	r20,40(sp)
  82adb0:	dc000615 	stw	r16,24(sp)
  82adb4:	dfc00f15 	stw	ra,60(sp)
  82adb8:	ddc00d15 	stw	r23,52(sp)
  82adbc:	dd800c15 	stw	r22,48(sp)
  82adc0:	dd400b15 	stw	r21,44(sp)
  82adc4:	dcc00915 	stw	r19,36(sp)
  82adc8:	dc800815 	stw	r18,32(sp)
  82adcc:	dc400715 	stw	r17,28(sp)
  82add0:	4021883a 	mov	r16,r8
  82add4:	1039883a 	mov	fp,r2
  82add8:	2829883a 	mov	r20,r5
  82addc:	38003b1e 	bne	r7,zero,82aecc <__udivdi3+0x130>
  82ade0:	2a005c36 	bltu	r5,r8,82af54 <__udivdi3+0x1b8>
  82ade4:	4000a626 	beq	r8,zero,82b080 <__udivdi3+0x2e4>
  82ade8:	00bfffd4 	movui	r2,65535
  82adec:	14009e36 	bltu	r2,r16,82b068 <__udivdi3+0x2cc>
  82adf0:	00803fc4 	movi	r2,255
  82adf4:	14013d36 	bltu	r2,r16,82b2ec <__udivdi3+0x550>
  82adf8:	000b883a 	mov	r5,zero
  82adfc:	0005883a 	mov	r2,zero
  82ae00:	8084d83a 	srl	r2,r16,r2
  82ae04:	010020f4 	movhi	r4,131
  82ae08:	210e0704 	addi	r4,r4,14364
  82ae0c:	01800804 	movi	r6,32
  82ae10:	1105883a 	add	r2,r2,r4
  82ae14:	10c00003 	ldbu	r3,0(r2)
  82ae18:	28c7883a 	add	r3,r5,r3
  82ae1c:	30edc83a 	sub	r22,r6,r3
  82ae20:	b000ee1e 	bne	r22,zero,82b1dc <__udivdi3+0x440>
  82ae24:	802ad43a 	srli	r21,r16,16
  82ae28:	00800044 	movi	r2,1
  82ae2c:	a423c83a 	sub	r17,r20,r16
  82ae30:	85ffffcc 	andi	r23,r16,65535
  82ae34:	d8800315 	stw	r2,12(sp)
  82ae38:	8809883a 	mov	r4,r17
  82ae3c:	a80b883a 	mov	r5,r21
  82ae40:	0822edc0 	call	822edc <__udivsi3>
  82ae44:	8809883a 	mov	r4,r17
  82ae48:	a80b883a 	mov	r5,r21
  82ae4c:	102d883a 	mov	r22,r2
  82ae50:	0822ee40 	call	822ee4 <__umodsi3>
  82ae54:	1004943a 	slli	r2,r2,16
  82ae58:	e006d43a 	srli	r3,fp,16
  82ae5c:	bda3383a 	mul	r17,r23,r22
  82ae60:	10c4b03a 	or	r2,r2,r3
  82ae64:	1440042e 	bgeu	r2,r17,82ae78 <__udivdi3+0xdc>
  82ae68:	1405883a 	add	r2,r2,r16
  82ae6c:	b5bfffc4 	addi	r22,r22,-1
  82ae70:	14000136 	bltu	r2,r16,82ae78 <__udivdi3+0xdc>
  82ae74:	14413d36 	bltu	r2,r17,82b36c <__udivdi3+0x5d0>
  82ae78:	1463c83a 	sub	r17,r2,r17
  82ae7c:	8809883a 	mov	r4,r17
  82ae80:	a80b883a 	mov	r5,r21
  82ae84:	0822edc0 	call	822edc <__udivsi3>
  82ae88:	8809883a 	mov	r4,r17
  82ae8c:	a80b883a 	mov	r5,r21
  82ae90:	1029883a 	mov	r20,r2
  82ae94:	0822ee40 	call	822ee4 <__umodsi3>
  82ae98:	1004943a 	slli	r2,r2,16
  82ae9c:	bd09383a 	mul	r4,r23,r20
  82aea0:	e0ffffcc 	andi	r3,fp,65535
  82aea4:	10c4b03a 	or	r2,r2,r3
  82aea8:	1100042e 	bgeu	r2,r4,82aebc <__udivdi3+0x120>
  82aeac:	8085883a 	add	r2,r16,r2
  82aeb0:	a53fffc4 	addi	r20,r20,-1
  82aeb4:	14000136 	bltu	r2,r16,82aebc <__udivdi3+0x120>
  82aeb8:	11012036 	bltu	r2,r4,82b33c <__udivdi3+0x5a0>
  82aebc:	b004943a 	slli	r2,r22,16
  82aec0:	d9000317 	ldw	r4,12(sp)
  82aec4:	a084b03a 	or	r2,r20,r2
  82aec8:	00001506 	br	82af20 <__udivdi3+0x184>
  82aecc:	380d883a 	mov	r6,r7
  82aed0:	29c06236 	bltu	r5,r7,82b05c <__udivdi3+0x2c0>
  82aed4:	00bfffd4 	movui	r2,65535
  82aed8:	11c05a36 	bltu	r2,r7,82b044 <__udivdi3+0x2a8>
  82aedc:	00803fc4 	movi	r2,255
  82aee0:	11c0fc36 	bltu	r2,r7,82b2d4 <__udivdi3+0x538>
  82aee4:	000b883a 	mov	r5,zero
  82aee8:	0005883a 	mov	r2,zero
  82aeec:	3084d83a 	srl	r2,r6,r2
  82aef0:	010020f4 	movhi	r4,131
  82aef4:	210e0704 	addi	r4,r4,14364
  82aef8:	01c00804 	movi	r7,32
  82aefc:	1105883a 	add	r2,r2,r4
  82af00:	10c00003 	ldbu	r3,0(r2)
  82af04:	28c7883a 	add	r3,r5,r3
  82af08:	38efc83a 	sub	r23,r7,r3
  82af0c:	b800691e 	bne	r23,zero,82b0b4 <__udivdi3+0x318>
  82af10:	35000136 	bltu	r6,r20,82af18 <__udivdi3+0x17c>
  82af14:	e4005136 	bltu	fp,r16,82b05c <__udivdi3+0x2c0>
  82af18:	00800044 	movi	r2,1
  82af1c:	0009883a 	mov	r4,zero
  82af20:	2007883a 	mov	r3,r4
  82af24:	dfc00f17 	ldw	ra,60(sp)
  82af28:	df000e17 	ldw	fp,56(sp)
  82af2c:	ddc00d17 	ldw	r23,52(sp)
  82af30:	dd800c17 	ldw	r22,48(sp)
  82af34:	dd400b17 	ldw	r21,44(sp)
  82af38:	dd000a17 	ldw	r20,40(sp)
  82af3c:	dcc00917 	ldw	r19,36(sp)
  82af40:	dc800817 	ldw	r18,32(sp)
  82af44:	dc400717 	ldw	r17,28(sp)
  82af48:	dc000617 	ldw	r16,24(sp)
  82af4c:	dec01004 	addi	sp,sp,64
  82af50:	f800283a 	ret
  82af54:	00bfffd4 	movui	r2,65535
  82af58:	12005036 	bltu	r2,r8,82b09c <__udivdi3+0x300>
  82af5c:	00803fc4 	movi	r2,255
  82af60:	1200e836 	bltu	r2,r8,82b304 <__udivdi3+0x568>
  82af64:	000b883a 	mov	r5,zero
  82af68:	0005883a 	mov	r2,zero
  82af6c:	8084d83a 	srl	r2,r16,r2
  82af70:	010020f4 	movhi	r4,131
  82af74:	210e0704 	addi	r4,r4,14364
  82af78:	01800804 	movi	r6,32
  82af7c:	1105883a 	add	r2,r2,r4
  82af80:	10c00003 	ldbu	r3,0(r2)
  82af84:	28c7883a 	add	r3,r5,r3
  82af88:	30cbc83a 	sub	r5,r6,r3
  82af8c:	28000626 	beq	r5,zero,82afa8 <__udivdi3+0x20c>
  82af90:	3145c83a 	sub	r2,r6,r5
  82af94:	e084d83a 	srl	r2,fp,r2
  82af98:	a146983a 	sll	r3,r20,r5
  82af9c:	e178983a 	sll	fp,fp,r5
  82afa0:	8160983a 	sll	r16,r16,r5
  82afa4:	18a8b03a 	or	r20,r3,r2
  82afa8:	802ad43a 	srli	r21,r16,16
  82afac:	a009883a 	mov	r4,r20
  82afb0:	85ffffcc 	andi	r23,r16,65535
  82afb4:	a80b883a 	mov	r5,r21
  82afb8:	0822edc0 	call	822edc <__udivsi3>
  82afbc:	a009883a 	mov	r4,r20
  82afc0:	a80b883a 	mov	r5,r21
  82afc4:	102d883a 	mov	r22,r2
  82afc8:	0822ee40 	call	822ee4 <__umodsi3>
  82afcc:	1004943a 	slli	r2,r2,16
  82afd0:	e006d43a 	srli	r3,fp,16
  82afd4:	bda3383a 	mul	r17,r23,r22
  82afd8:	10c4b03a 	or	r2,r2,r3
  82afdc:	1440042e 	bgeu	r2,r17,82aff0 <__udivdi3+0x254>
  82afe0:	1405883a 	add	r2,r2,r16
  82afe4:	b5bfffc4 	addi	r22,r22,-1
  82afe8:	14000136 	bltu	r2,r16,82aff0 <__udivdi3+0x254>
  82afec:	1440d536 	bltu	r2,r17,82b344 <__udivdi3+0x5a8>
  82aff0:	1463c83a 	sub	r17,r2,r17
  82aff4:	8809883a 	mov	r4,r17
  82aff8:	a80b883a 	mov	r5,r21
  82affc:	0822edc0 	call	822edc <__udivsi3>
  82b000:	8809883a 	mov	r4,r17
  82b004:	a80b883a 	mov	r5,r21
  82b008:	1029883a 	mov	r20,r2
  82b00c:	0822ee40 	call	822ee4 <__umodsi3>
  82b010:	1004943a 	slli	r2,r2,16
  82b014:	bd09383a 	mul	r4,r23,r20
  82b018:	e0ffffcc 	andi	r3,fp,65535
  82b01c:	10c4b03a 	or	r2,r2,r3
  82b020:	1100042e 	bgeu	r2,r4,82b034 <__udivdi3+0x298>
  82b024:	8085883a 	add	r2,r16,r2
  82b028:	a53fffc4 	addi	r20,r20,-1
  82b02c:	14000136 	bltu	r2,r16,82b034 <__udivdi3+0x298>
  82b030:	1100c736 	bltu	r2,r4,82b350 <__udivdi3+0x5b4>
  82b034:	b004943a 	slli	r2,r22,16
  82b038:	0009883a 	mov	r4,zero
  82b03c:	a084b03a 	or	r2,r20,r2
  82b040:	003fb706 	br	82af20 <__udivdi3+0x184>
  82b044:	00804034 	movhi	r2,256
  82b048:	10bfffc4 	addi	r2,r2,-1
  82b04c:	11c0a436 	bltu	r2,r7,82b2e0 <__udivdi3+0x544>
  82b050:	01400404 	movi	r5,16
  82b054:	2805883a 	mov	r2,r5
  82b058:	003fa406 	br	82aeec <__udivdi3+0x150>
  82b05c:	0005883a 	mov	r2,zero
  82b060:	0009883a 	mov	r4,zero
  82b064:	003fae06 	br	82af20 <__udivdi3+0x184>
  82b068:	00804034 	movhi	r2,256
  82b06c:	10bfffc4 	addi	r2,r2,-1
  82b070:	1400a136 	bltu	r2,r16,82b2f8 <__udivdi3+0x55c>
  82b074:	01400404 	movi	r5,16
  82b078:	2805883a 	mov	r2,r5
  82b07c:	003f6006 	br	82ae00 <__udivdi3+0x64>
  82b080:	01000044 	movi	r4,1
  82b084:	000b883a 	mov	r5,zero
  82b088:	0822edc0 	call	822edc <__udivsi3>
  82b08c:	1021883a 	mov	r16,r2
  82b090:	00bfffd4 	movui	r2,65535
  82b094:	143ff436 	bltu	r2,r16,82b068 <__udivdi3+0x2cc>
  82b098:	003f5506 	br	82adf0 <__udivdi3+0x54>
  82b09c:	00804034 	movhi	r2,256
  82b0a0:	10bfffc4 	addi	r2,r2,-1
  82b0a4:	12009a36 	bltu	r2,r8,82b310 <__udivdi3+0x574>
  82b0a8:	01400404 	movi	r5,16
  82b0ac:	2805883a 	mov	r2,r5
  82b0b0:	003fae06 	br	82af6c <__udivdi3+0x1d0>
  82b0b4:	3dc5c83a 	sub	r2,r7,r23
  82b0b8:	35c8983a 	sll	r4,r6,r23
  82b0bc:	8086d83a 	srl	r3,r16,r2
  82b0c0:	a0a2d83a 	srl	r17,r20,r2
  82b0c4:	e084d83a 	srl	r2,fp,r2
  82b0c8:	20eab03a 	or	r21,r4,r3
  82b0cc:	a82cd43a 	srli	r22,r21,16
  82b0d0:	a5c6983a 	sll	r3,r20,r23
  82b0d4:	8809883a 	mov	r4,r17
  82b0d8:	b00b883a 	mov	r5,r22
  82b0dc:	1886b03a 	or	r3,r3,r2
  82b0e0:	d8c00215 	stw	r3,8(sp)
  82b0e4:	0822edc0 	call	822edc <__udivsi3>
  82b0e8:	8809883a 	mov	r4,r17
  82b0ec:	b00b883a 	mov	r5,r22
  82b0f0:	1029883a 	mov	r20,r2
  82b0f4:	0822ee40 	call	822ee4 <__umodsi3>
  82b0f8:	a8ffffcc 	andi	r3,r21,65535
  82b0fc:	d8c00515 	stw	r3,20(sp)
  82b100:	d9000217 	ldw	r4,8(sp)
  82b104:	d9400517 	ldw	r5,20(sp)
  82b108:	1004943a 	slli	r2,r2,16
  82b10c:	2006d43a 	srli	r3,r4,16
  82b110:	85e0983a 	sll	r16,r16,r23
  82b114:	2d23383a 	mul	r17,r5,r20
  82b118:	10c4b03a 	or	r2,r2,r3
  82b11c:	dc000015 	stw	r16,0(sp)
  82b120:	1440032e 	bgeu	r2,r17,82b130 <__udivdi3+0x394>
  82b124:	1545883a 	add	r2,r2,r21
  82b128:	a53fffc4 	addi	r20,r20,-1
  82b12c:	15407f2e 	bgeu	r2,r21,82b32c <__udivdi3+0x590>
  82b130:	1463c83a 	sub	r17,r2,r17
  82b134:	8809883a 	mov	r4,r17
  82b138:	b00b883a 	mov	r5,r22
  82b13c:	0822edc0 	call	822edc <__udivsi3>
  82b140:	8809883a 	mov	r4,r17
  82b144:	b00b883a 	mov	r5,r22
  82b148:	1021883a 	mov	r16,r2
  82b14c:	0822ee40 	call	822ee4 <__umodsi3>
  82b150:	d8c00517 	ldw	r3,20(sp)
  82b154:	d9000217 	ldw	r4,8(sp)
  82b158:	1004943a 	slli	r2,r2,16
  82b15c:	1c0f383a 	mul	r7,r3,r16
  82b160:	20ffffcc 	andi	r3,r4,65535
  82b164:	10e2b03a 	or	r17,r2,r3
  82b168:	89c0032e 	bgeu	r17,r7,82b178 <__udivdi3+0x3dc>
  82b16c:	8d63883a 	add	r17,r17,r21
  82b170:	843fffc4 	addi	r16,r16,-1
  82b174:	8d40692e 	bgeu	r17,r21,82b31c <__udivdi3+0x580>
  82b178:	a008943a 	slli	r4,r20,16
  82b17c:	d9400017 	ldw	r5,0(sp)
  82b180:	89e3c83a 	sub	r17,r17,r7
  82b184:	8110b03a 	or	r8,r16,r4
  82b188:	280cd43a 	srli	r6,r5,16
  82b18c:	28ffffcc 	andi	r3,r5,65535
  82b190:	40bfffcc 	andi	r2,r8,65535
  82b194:	400ad43a 	srli	r5,r8,16
  82b198:	10d3383a 	mul	r9,r2,r3
  82b19c:	1185383a 	mul	r2,r2,r6
  82b1a0:	28c7383a 	mul	r3,r5,r3
  82b1a4:	4808d43a 	srli	r4,r9,16
  82b1a8:	298b383a 	mul	r5,r5,r6
  82b1ac:	10c5883a 	add	r2,r2,r3
  82b1b0:	2089883a 	add	r4,r4,r2
  82b1b4:	20c0022e 	bgeu	r4,r3,82b1c0 <__udivdi3+0x424>
  82b1b8:	00800074 	movhi	r2,1
  82b1bc:	288b883a 	add	r5,r5,r2
  82b1c0:	2004d43a 	srli	r2,r4,16
  82b1c4:	288b883a 	add	r5,r5,r2
  82b1c8:	89403f36 	bltu	r17,r5,82b2c8 <__udivdi3+0x52c>
  82b1cc:	89403926 	beq	r17,r5,82b2b4 <__udivdi3+0x518>
  82b1d0:	4005883a 	mov	r2,r8
  82b1d4:	0009883a 	mov	r4,zero
  82b1d8:	003f5106 	br	82af20 <__udivdi3+0x184>
  82b1dc:	85a0983a 	sll	r16,r16,r22
  82b1e0:	3585c83a 	sub	r2,r6,r22
  82b1e4:	a0a2d83a 	srl	r17,r20,r2
  82b1e8:	802ad43a 	srli	r21,r16,16
  82b1ec:	e084d83a 	srl	r2,fp,r2
  82b1f0:	a586983a 	sll	r3,r20,r22
  82b1f4:	8809883a 	mov	r4,r17
  82b1f8:	a80b883a 	mov	r5,r21
  82b1fc:	1886b03a 	or	r3,r3,r2
  82b200:	d8c00115 	stw	r3,4(sp)
  82b204:	0822edc0 	call	822edc <__udivsi3>
  82b208:	8809883a 	mov	r4,r17
  82b20c:	a80b883a 	mov	r5,r21
  82b210:	d8800415 	stw	r2,16(sp)
  82b214:	0822ee40 	call	822ee4 <__umodsi3>
  82b218:	d9000117 	ldw	r4,4(sp)
  82b21c:	d9400417 	ldw	r5,16(sp)
  82b220:	1004943a 	slli	r2,r2,16
  82b224:	85ffffcc 	andi	r23,r16,65535
  82b228:	2006d43a 	srli	r3,r4,16
  82b22c:	b963383a 	mul	r17,r23,r5
  82b230:	10c4b03a 	or	r2,r2,r3
  82b234:	1440042e 	bgeu	r2,r17,82b248 <__udivdi3+0x4ac>
  82b238:	297fffc4 	addi	r5,r5,-1
  82b23c:	1405883a 	add	r2,r2,r16
  82b240:	d9400415 	stw	r5,16(sp)
  82b244:	1400442e 	bgeu	r2,r16,82b358 <__udivdi3+0x5bc>
  82b248:	1463c83a 	sub	r17,r2,r17
  82b24c:	8809883a 	mov	r4,r17
  82b250:	a80b883a 	mov	r5,r21
  82b254:	0822edc0 	call	822edc <__udivsi3>
  82b258:	8809883a 	mov	r4,r17
  82b25c:	a80b883a 	mov	r5,r21
  82b260:	1029883a 	mov	r20,r2
  82b264:	0822ee40 	call	822ee4 <__umodsi3>
  82b268:	d9400117 	ldw	r5,4(sp)
  82b26c:	1004943a 	slli	r2,r2,16
  82b270:	bd09383a 	mul	r4,r23,r20
  82b274:	28ffffcc 	andi	r3,r5,65535
  82b278:	10c6b03a 	or	r3,r2,r3
  82b27c:	1900062e 	bgeu	r3,r4,82b298 <__udivdi3+0x4fc>
  82b280:	1c07883a 	add	r3,r3,r16
  82b284:	a53fffc4 	addi	r20,r20,-1
  82b288:	1c000336 	bltu	r3,r16,82b298 <__udivdi3+0x4fc>
  82b28c:	1900022e 	bgeu	r3,r4,82b298 <__udivdi3+0x4fc>
  82b290:	a53fffc4 	addi	r20,r20,-1
  82b294:	1c07883a 	add	r3,r3,r16
  82b298:	d9400417 	ldw	r5,16(sp)
  82b29c:	e5b8983a 	sll	fp,fp,r22
  82b2a0:	1923c83a 	sub	r17,r3,r4
  82b2a4:	2804943a 	slli	r2,r5,16
  82b2a8:	a0a8b03a 	or	r20,r20,r2
  82b2ac:	dd000315 	stw	r20,12(sp)
  82b2b0:	003ee106 	br	82ae38 <__udivdi3+0x9c>
  82b2b4:	2004943a 	slli	r2,r4,16
  82b2b8:	e5c8983a 	sll	r4,fp,r23
  82b2bc:	48ffffcc 	andi	r3,r9,65535
  82b2c0:	10c5883a 	add	r2,r2,r3
  82b2c4:	20bfc22e 	bgeu	r4,r2,82b1d0 <__udivdi3+0x434>
  82b2c8:	40bfffc4 	addi	r2,r8,-1
  82b2cc:	0009883a 	mov	r4,zero
  82b2d0:	003f1306 	br	82af20 <__udivdi3+0x184>
  82b2d4:	01400204 	movi	r5,8
  82b2d8:	2805883a 	mov	r2,r5
  82b2dc:	003f0306 	br	82aeec <__udivdi3+0x150>
  82b2e0:	01400604 	movi	r5,24
  82b2e4:	2805883a 	mov	r2,r5
  82b2e8:	003f0006 	br	82aeec <__udivdi3+0x150>
  82b2ec:	01400204 	movi	r5,8
  82b2f0:	2805883a 	mov	r2,r5
  82b2f4:	003ec206 	br	82ae00 <__udivdi3+0x64>
  82b2f8:	01400604 	movi	r5,24
  82b2fc:	2805883a 	mov	r2,r5
  82b300:	003ebf06 	br	82ae00 <__udivdi3+0x64>
  82b304:	01400204 	movi	r5,8
  82b308:	2805883a 	mov	r2,r5
  82b30c:	003f1706 	br	82af6c <__udivdi3+0x1d0>
  82b310:	01400604 	movi	r5,24
  82b314:	2805883a 	mov	r2,r5
  82b318:	003f1406 	br	82af6c <__udivdi3+0x1d0>
  82b31c:	89ff962e 	bgeu	r17,r7,82b178 <__udivdi3+0x3dc>
  82b320:	8d63883a 	add	r17,r17,r21
  82b324:	843fffc4 	addi	r16,r16,-1
  82b328:	003f9306 	br	82b178 <__udivdi3+0x3dc>
  82b32c:	147f802e 	bgeu	r2,r17,82b130 <__udivdi3+0x394>
  82b330:	a53fffc4 	addi	r20,r20,-1
  82b334:	1545883a 	add	r2,r2,r21
  82b338:	003f7d06 	br	82b130 <__udivdi3+0x394>
  82b33c:	a53fffc4 	addi	r20,r20,-1
  82b340:	003ede06 	br	82aebc <__udivdi3+0x120>
  82b344:	b5bfffc4 	addi	r22,r22,-1
  82b348:	1405883a 	add	r2,r2,r16
  82b34c:	003f2806 	br	82aff0 <__udivdi3+0x254>
  82b350:	a53fffc4 	addi	r20,r20,-1
  82b354:	003f3706 	br	82b034 <__udivdi3+0x298>
  82b358:	147fbb2e 	bgeu	r2,r17,82b248 <__udivdi3+0x4ac>
  82b35c:	297fffc4 	addi	r5,r5,-1
  82b360:	1405883a 	add	r2,r2,r16
  82b364:	d9400415 	stw	r5,16(sp)
  82b368:	003fb706 	br	82b248 <__udivdi3+0x4ac>
  82b36c:	b5bfffc4 	addi	r22,r22,-1
  82b370:	1405883a 	add	r2,r2,r16
  82b374:	003ec006 	br	82ae78 <__udivdi3+0xdc>

0082b378 <__umoddi3>:
  82b378:	defff104 	addi	sp,sp,-60
  82b37c:	dd800b15 	stw	r22,44(sp)
  82b380:	dd000915 	stw	r20,36(sp)
  82b384:	dc000515 	stw	r16,20(sp)
  82b388:	dfc00e15 	stw	ra,56(sp)
  82b38c:	df000d15 	stw	fp,52(sp)
  82b390:	ddc00c15 	stw	r23,48(sp)
  82b394:	dd400a15 	stw	r21,40(sp)
  82b398:	dcc00815 	stw	r19,32(sp)
  82b39c:	dc800715 	stw	r18,28(sp)
  82b3a0:	dc400615 	stw	r17,24(sp)
  82b3a4:	3021883a 	mov	r16,r6
  82b3a8:	202d883a 	mov	r22,r4
  82b3ac:	2829883a 	mov	r20,r5
  82b3b0:	38002b1e 	bne	r7,zero,82b460 <__umoddi3+0xe8>
  82b3b4:	29805036 	bltu	r5,r6,82b4f8 <__umoddi3+0x180>
  82b3b8:	30008a26 	beq	r6,zero,82b5e4 <__umoddi3+0x26c>
  82b3bc:	00bfffd4 	movui	r2,65535
  82b3c0:	14008236 	bltu	r2,r16,82b5cc <__umoddi3+0x254>
  82b3c4:	00803fc4 	movi	r2,255
  82b3c8:	14013636 	bltu	r2,r16,82b8a4 <__umoddi3+0x52c>
  82b3cc:	000b883a 	mov	r5,zero
  82b3d0:	0005883a 	mov	r2,zero
  82b3d4:	8084d83a 	srl	r2,r16,r2
  82b3d8:	010020f4 	movhi	r4,131
  82b3dc:	210e0704 	addi	r4,r4,14364
  82b3e0:	01800804 	movi	r6,32
  82b3e4:	1105883a 	add	r2,r2,r4
  82b3e8:	10c00003 	ldbu	r3,0(r2)
  82b3ec:	28c7883a 	add	r3,r5,r3
  82b3f0:	30efc83a 	sub	r23,r6,r3
  82b3f4:	b800941e 	bne	r23,zero,82b648 <__umoddi3+0x2d0>
  82b3f8:	802ad43a 	srli	r21,r16,16
  82b3fc:	a423c83a 	sub	r17,r20,r16
  82b400:	0039883a 	mov	fp,zero
  82b404:	853fffcc 	andi	r20,r16,65535
  82b408:	8809883a 	mov	r4,r17
  82b40c:	a80b883a 	mov	r5,r21
  82b410:	0822edc0 	call	822edc <__udivsi3>
  82b414:	8809883a 	mov	r4,r17
  82b418:	a80b883a 	mov	r5,r21
  82b41c:	a0a3383a 	mul	r17,r20,r2
  82b420:	0822ee40 	call	822ee4 <__umodsi3>
  82b424:	1004943a 	slli	r2,r2,16
  82b428:	b006d43a 	srli	r3,r22,16
  82b42c:	10c4b03a 	or	r2,r2,r3
  82b430:	1440032e 	bgeu	r2,r17,82b440 <__umoddi3+0xc8>
  82b434:	1405883a 	add	r2,r2,r16
  82b438:	14000136 	bltu	r2,r16,82b440 <__umoddi3+0xc8>
  82b43c:	14413536 	bltu	r2,r17,82b914 <__umoddi3+0x59c>
  82b440:	1463c83a 	sub	r17,r2,r17
  82b444:	8809883a 	mov	r4,r17
  82b448:	a80b883a 	mov	r5,r21
  82b44c:	0822edc0 	call	822edc <__udivsi3>
  82b450:	8809883a 	mov	r4,r17
  82b454:	a0a3383a 	mul	r17,r20,r2
  82b458:	a80b883a 	mov	r5,r21
  82b45c:	00004d06 	br	82b594 <__umoddi3+0x21c>
  82b460:	380d883a 	mov	r6,r7
  82b464:	29c0102e 	bgeu	r5,r7,82b4a8 <__umoddi3+0x130>
  82b468:	2011883a 	mov	r8,r4
  82b46c:	2813883a 	mov	r9,r5
  82b470:	4005883a 	mov	r2,r8
  82b474:	4807883a 	mov	r3,r9
  82b478:	dfc00e17 	ldw	ra,56(sp)
  82b47c:	df000d17 	ldw	fp,52(sp)
  82b480:	ddc00c17 	ldw	r23,48(sp)
  82b484:	dd800b17 	ldw	r22,44(sp)
  82b488:	dd400a17 	ldw	r21,40(sp)
  82b48c:	dd000917 	ldw	r20,36(sp)
  82b490:	dcc00817 	ldw	r19,32(sp)
  82b494:	dc800717 	ldw	r18,28(sp)
  82b498:	dc400617 	ldw	r17,24(sp)
  82b49c:	dc000517 	ldw	r16,20(sp)
  82b4a0:	dec00f04 	addi	sp,sp,60
  82b4a4:	f800283a 	ret
  82b4a8:	00bfffd4 	movui	r2,65535
  82b4ac:	11c05a36 	bltu	r2,r7,82b618 <__umoddi3+0x2a0>
  82b4b0:	00803fc4 	movi	r2,255
  82b4b4:	11c0fe36 	bltu	r2,r7,82b8b0 <__umoddi3+0x538>
  82b4b8:	000b883a 	mov	r5,zero
  82b4bc:	0005883a 	mov	r2,zero
  82b4c0:	3084d83a 	srl	r2,r6,r2
  82b4c4:	010020f4 	movhi	r4,131
  82b4c8:	210e0704 	addi	r4,r4,14364
  82b4cc:	01c00804 	movi	r7,32
  82b4d0:	1105883a 	add	r2,r2,r4
  82b4d4:	10c00003 	ldbu	r3,0(r2)
  82b4d8:	28c7883a 	add	r3,r5,r3
  82b4dc:	38ebc83a 	sub	r21,r7,r3
  82b4e0:	a800851e 	bne	r21,zero,82b6f8 <__umoddi3+0x380>
  82b4e4:	35005236 	bltu	r6,r20,82b630 <__umoddi3+0x2b8>
  82b4e8:	b400512e 	bgeu	r22,r16,82b630 <__umoddi3+0x2b8>
  82b4ec:	b011883a 	mov	r8,r22
  82b4f0:	a013883a 	mov	r9,r20
  82b4f4:	003fde06 	br	82b470 <__umoddi3+0xf8>
  82b4f8:	00bfffd4 	movui	r2,65535
  82b4fc:	11804036 	bltu	r2,r6,82b600 <__umoddi3+0x288>
  82b500:	00803fc4 	movi	r2,255
  82b504:	1180ed36 	bltu	r2,r6,82b8bc <__umoddi3+0x544>
  82b508:	000b883a 	mov	r5,zero
  82b50c:	0005883a 	mov	r2,zero
  82b510:	8084d83a 	srl	r2,r16,r2
  82b514:	010020f4 	movhi	r4,131
  82b518:	210e0704 	addi	r4,r4,14364
  82b51c:	01800804 	movi	r6,32
  82b520:	1105883a 	add	r2,r2,r4
  82b524:	10c00003 	ldbu	r3,0(r2)
  82b528:	28c7883a 	add	r3,r5,r3
  82b52c:	30c7c83a 	sub	r3,r6,r3
  82b530:	1800bf1e 	bne	r3,zero,82b830 <__umoddi3+0x4b8>
  82b534:	0039883a 	mov	fp,zero
  82b538:	802ad43a 	srli	r21,r16,16
  82b53c:	a009883a 	mov	r4,r20
  82b540:	85ffffcc 	andi	r23,r16,65535
  82b544:	a80b883a 	mov	r5,r21
  82b548:	0822edc0 	call	822edc <__udivsi3>
  82b54c:	a009883a 	mov	r4,r20
  82b550:	a80b883a 	mov	r5,r21
  82b554:	b8a3383a 	mul	r17,r23,r2
  82b558:	0822ee40 	call	822ee4 <__umodsi3>
  82b55c:	1004943a 	slli	r2,r2,16
  82b560:	b006d43a 	srli	r3,r22,16
  82b564:	10c4b03a 	or	r2,r2,r3
  82b568:	1440032e 	bgeu	r2,r17,82b578 <__umoddi3+0x200>
  82b56c:	1405883a 	add	r2,r2,r16
  82b570:	14000136 	bltu	r2,r16,82b578 <__umoddi3+0x200>
  82b574:	1440e536 	bltu	r2,r17,82b90c <__umoddi3+0x594>
  82b578:	1463c83a 	sub	r17,r2,r17
  82b57c:	8809883a 	mov	r4,r17
  82b580:	a80b883a 	mov	r5,r21
  82b584:	0822edc0 	call	822edc <__udivsi3>
  82b588:	8809883a 	mov	r4,r17
  82b58c:	b8a3383a 	mul	r17,r23,r2
  82b590:	a80b883a 	mov	r5,r21
  82b594:	0822ee40 	call	822ee4 <__umodsi3>
  82b598:	1004943a 	slli	r2,r2,16
  82b59c:	b0ffffcc 	andi	r3,r22,65535
  82b5a0:	10c4b03a 	or	r2,r2,r3
  82b5a4:	1440042e 	bgeu	r2,r17,82b5b8 <__umoddi3+0x240>
  82b5a8:	1405883a 	add	r2,r2,r16
  82b5ac:	14000236 	bltu	r2,r16,82b5b8 <__umoddi3+0x240>
  82b5b0:	1440012e 	bgeu	r2,r17,82b5b8 <__umoddi3+0x240>
  82b5b4:	1405883a 	add	r2,r2,r16
  82b5b8:	1445c83a 	sub	r2,r2,r17
  82b5bc:	1724d83a 	srl	r18,r2,fp
  82b5c0:	0013883a 	mov	r9,zero
  82b5c4:	9011883a 	mov	r8,r18
  82b5c8:	003fa906 	br	82b470 <__umoddi3+0xf8>
  82b5cc:	00804034 	movhi	r2,256
  82b5d0:	10bfffc4 	addi	r2,r2,-1
  82b5d4:	1400b036 	bltu	r2,r16,82b898 <__umoddi3+0x520>
  82b5d8:	01400404 	movi	r5,16
  82b5dc:	2805883a 	mov	r2,r5
  82b5e0:	003f7c06 	br	82b3d4 <__umoddi3+0x5c>
  82b5e4:	01000044 	movi	r4,1
  82b5e8:	000b883a 	mov	r5,zero
  82b5ec:	0822edc0 	call	822edc <__udivsi3>
  82b5f0:	1021883a 	mov	r16,r2
  82b5f4:	00bfffd4 	movui	r2,65535
  82b5f8:	143ff436 	bltu	r2,r16,82b5cc <__umoddi3+0x254>
  82b5fc:	003f7106 	br	82b3c4 <__umoddi3+0x4c>
  82b600:	00804034 	movhi	r2,256
  82b604:	10bfffc4 	addi	r2,r2,-1
  82b608:	1180af36 	bltu	r2,r6,82b8c8 <__umoddi3+0x550>
  82b60c:	01400404 	movi	r5,16
  82b610:	2805883a 	mov	r2,r5
  82b614:	003fbe06 	br	82b510 <__umoddi3+0x198>
  82b618:	00804034 	movhi	r2,256
  82b61c:	10bfffc4 	addi	r2,r2,-1
  82b620:	11c0ac36 	bltu	r2,r7,82b8d4 <__umoddi3+0x55c>
  82b624:	01400404 	movi	r5,16
  82b628:	2805883a 	mov	r2,r5
  82b62c:	003fa406 	br	82b4c0 <__umoddi3+0x148>
  82b630:	b409c83a 	sub	r4,r22,r16
  82b634:	b105803a 	cmpltu	r2,r22,r4
  82b638:	a187c83a 	sub	r3,r20,r6
  82b63c:	18a9c83a 	sub	r20,r3,r2
  82b640:	202d883a 	mov	r22,r4
  82b644:	003fa906 	br	82b4ec <__umoddi3+0x174>
  82b648:	85e0983a 	sll	r16,r16,r23
  82b64c:	35c5c83a 	sub	r2,r6,r23
  82b650:	a0a2d83a 	srl	r17,r20,r2
  82b654:	802ad43a 	srli	r21,r16,16
  82b658:	b084d83a 	srl	r2,r22,r2
  82b65c:	a5c6983a 	sll	r3,r20,r23
  82b660:	8809883a 	mov	r4,r17
  82b664:	a80b883a 	mov	r5,r21
  82b668:	1886b03a 	or	r3,r3,r2
  82b66c:	d8c00115 	stw	r3,4(sp)
  82b670:	853fffcc 	andi	r20,r16,65535
  82b674:	0822edc0 	call	822edc <__udivsi3>
  82b678:	8809883a 	mov	r4,r17
  82b67c:	a80b883a 	mov	r5,r21
  82b680:	a0a3383a 	mul	r17,r20,r2
  82b684:	0822ee40 	call	822ee4 <__umodsi3>
  82b688:	d9000117 	ldw	r4,4(sp)
  82b68c:	1004943a 	slli	r2,r2,16
  82b690:	b839883a 	mov	fp,r23
  82b694:	2006d43a 	srli	r3,r4,16
  82b698:	10c4b03a 	or	r2,r2,r3
  82b69c:	1440022e 	bgeu	r2,r17,82b6a8 <__umoddi3+0x330>
  82b6a0:	1405883a 	add	r2,r2,r16
  82b6a4:	1400962e 	bgeu	r2,r16,82b900 <__umoddi3+0x588>
  82b6a8:	1463c83a 	sub	r17,r2,r17
  82b6ac:	8809883a 	mov	r4,r17
  82b6b0:	a80b883a 	mov	r5,r21
  82b6b4:	0822edc0 	call	822edc <__udivsi3>
  82b6b8:	8809883a 	mov	r4,r17
  82b6bc:	a80b883a 	mov	r5,r21
  82b6c0:	a0a3383a 	mul	r17,r20,r2
  82b6c4:	0822ee40 	call	822ee4 <__umodsi3>
  82b6c8:	d9400117 	ldw	r5,4(sp)
  82b6cc:	1004943a 	slli	r2,r2,16
  82b6d0:	28ffffcc 	andi	r3,r5,65535
  82b6d4:	10c4b03a 	or	r2,r2,r3
  82b6d8:	1440042e 	bgeu	r2,r17,82b6ec <__umoddi3+0x374>
  82b6dc:	1405883a 	add	r2,r2,r16
  82b6e0:	14000236 	bltu	r2,r16,82b6ec <__umoddi3+0x374>
  82b6e4:	1440012e 	bgeu	r2,r17,82b6ec <__umoddi3+0x374>
  82b6e8:	1405883a 	add	r2,r2,r16
  82b6ec:	b5ec983a 	sll	r22,r22,r23
  82b6f0:	1463c83a 	sub	r17,r2,r17
  82b6f4:	003f4406 	br	82b408 <__umoddi3+0x90>
  82b6f8:	3d4fc83a 	sub	r7,r7,r21
  82b6fc:	3546983a 	sll	r3,r6,r21
  82b700:	81c4d83a 	srl	r2,r16,r7
  82b704:	a1e2d83a 	srl	r17,r20,r7
  82b708:	a54c983a 	sll	r6,r20,r21
  82b70c:	18aeb03a 	or	r23,r3,r2
  82b710:	b828d43a 	srli	r20,r23,16
  82b714:	b1c4d83a 	srl	r2,r22,r7
  82b718:	8809883a 	mov	r4,r17
  82b71c:	a00b883a 	mov	r5,r20
  82b720:	308cb03a 	or	r6,r6,r2
  82b724:	d9c00315 	stw	r7,12(sp)
  82b728:	d9800215 	stw	r6,8(sp)
  82b72c:	0822edc0 	call	822edc <__udivsi3>
  82b730:	8809883a 	mov	r4,r17
  82b734:	a00b883a 	mov	r5,r20
  82b738:	1039883a 	mov	fp,r2
  82b73c:	0822ee40 	call	822ee4 <__umodsi3>
  82b740:	b8ffffcc 	andi	r3,r23,65535
  82b744:	d8c00415 	stw	r3,16(sp)
  82b748:	d9000217 	ldw	r4,8(sp)
  82b74c:	d9400417 	ldw	r5,16(sp)
  82b750:	1004943a 	slli	r2,r2,16
  82b754:	2006d43a 	srli	r3,r4,16
  82b758:	8560983a 	sll	r16,r16,r21
  82b75c:	2f23383a 	mul	r17,r5,fp
  82b760:	10c4b03a 	or	r2,r2,r3
  82b764:	dc000015 	stw	r16,0(sp)
  82b768:	b56c983a 	sll	r22,r22,r21
  82b76c:	1440032e 	bgeu	r2,r17,82b77c <__umoddi3+0x404>
  82b770:	15c5883a 	add	r2,r2,r23
  82b774:	e73fffc4 	addi	fp,fp,-1
  82b778:	15c05d2e 	bgeu	r2,r23,82b8f0 <__umoddi3+0x578>
  82b77c:	1463c83a 	sub	r17,r2,r17
  82b780:	8809883a 	mov	r4,r17
  82b784:	a00b883a 	mov	r5,r20
  82b788:	0822edc0 	call	822edc <__udivsi3>
  82b78c:	8809883a 	mov	r4,r17
  82b790:	a00b883a 	mov	r5,r20
  82b794:	1021883a 	mov	r16,r2
  82b798:	0822ee40 	call	822ee4 <__umodsi3>
  82b79c:	d8c00417 	ldw	r3,16(sp)
  82b7a0:	d9000217 	ldw	r4,8(sp)
  82b7a4:	1004943a 	slli	r2,r2,16
  82b7a8:	1c23383a 	mul	r17,r3,r16
  82b7ac:	20ffffcc 	andi	r3,r4,65535
  82b7b0:	10ceb03a 	or	r7,r2,r3
  82b7b4:	3c40032e 	bgeu	r7,r17,82b7c4 <__umoddi3+0x44c>
  82b7b8:	3dcf883a 	add	r7,r7,r23
  82b7bc:	843fffc4 	addi	r16,r16,-1
  82b7c0:	3dc0472e 	bgeu	r7,r23,82b8e0 <__umoddi3+0x568>
  82b7c4:	e004943a 	slli	r2,fp,16
  82b7c8:	d9400017 	ldw	r5,0(sp)
  82b7cc:	3c4fc83a 	sub	r7,r7,r17
  82b7d0:	8084b03a 	or	r2,r16,r2
  82b7d4:	28ffffcc 	andi	r3,r5,65535
  82b7d8:	280cd43a 	srli	r6,r5,16
  82b7dc:	100ad43a 	srli	r5,r2,16
  82b7e0:	10bfffcc 	andi	r2,r2,65535
  82b7e4:	10d1383a 	mul	r8,r2,r3
  82b7e8:	28c7383a 	mul	r3,r5,r3
  82b7ec:	1185383a 	mul	r2,r2,r6
  82b7f0:	4008d43a 	srli	r4,r8,16
  82b7f4:	298b383a 	mul	r5,r5,r6
  82b7f8:	10c5883a 	add	r2,r2,r3
  82b7fc:	2089883a 	add	r4,r4,r2
  82b800:	20c0022e 	bgeu	r4,r3,82b80c <__umoddi3+0x494>
  82b804:	00800074 	movhi	r2,1
  82b808:	288b883a 	add	r5,r5,r2
  82b80c:	2004d43a 	srli	r2,r4,16
  82b810:	2008943a 	slli	r4,r4,16
  82b814:	40ffffcc 	andi	r3,r8,65535
  82b818:	288b883a 	add	r5,r5,r2
  82b81c:	20c9883a 	add	r4,r4,r3
  82b820:	39400b36 	bltu	r7,r5,82b850 <__umoddi3+0x4d8>
  82b824:	39403d26 	beq	r7,r5,82b91c <__umoddi3+0x5a4>
  82b828:	394bc83a 	sub	r5,r7,r5
  82b82c:	00000f06 	br	82b86c <__umoddi3+0x4f4>
  82b830:	30c5c83a 	sub	r2,r6,r3
  82b834:	1839883a 	mov	fp,r3
  82b838:	b084d83a 	srl	r2,r22,r2
  82b83c:	a0c6983a 	sll	r3,r20,r3
  82b840:	8720983a 	sll	r16,r16,fp
  82b844:	b72c983a 	sll	r22,r22,fp
  82b848:	18a8b03a 	or	r20,r3,r2
  82b84c:	003f3a06 	br	82b538 <__umoddi3+0x1c0>
  82b850:	d8c00017 	ldw	r3,0(sp)
  82b854:	20c5c83a 	sub	r2,r4,r3
  82b858:	2089803a 	cmpltu	r4,r4,r2
  82b85c:	2dc7c83a 	sub	r3,r5,r23
  82b860:	1907c83a 	sub	r3,r3,r4
  82b864:	38cbc83a 	sub	r5,r7,r3
  82b868:	1009883a 	mov	r4,r2
  82b86c:	b105c83a 	sub	r2,r22,r4
  82b870:	b087803a 	cmpltu	r3,r22,r2
  82b874:	28c7c83a 	sub	r3,r5,r3
  82b878:	d9400317 	ldw	r5,12(sp)
  82b87c:	1544d83a 	srl	r2,r2,r21
  82b880:	1948983a 	sll	r4,r3,r5
  82b884:	1d46d83a 	srl	r3,r3,r21
  82b888:	20a4b03a 	or	r18,r4,r2
  82b88c:	9011883a 	mov	r8,r18
  82b890:	1813883a 	mov	r9,r3
  82b894:	003ef606 	br	82b470 <__umoddi3+0xf8>
  82b898:	01400604 	movi	r5,24
  82b89c:	2805883a 	mov	r2,r5
  82b8a0:	003ecc06 	br	82b3d4 <__umoddi3+0x5c>
  82b8a4:	01400204 	movi	r5,8
  82b8a8:	2805883a 	mov	r2,r5
  82b8ac:	003ec906 	br	82b3d4 <__umoddi3+0x5c>
  82b8b0:	01400204 	movi	r5,8
  82b8b4:	2805883a 	mov	r2,r5
  82b8b8:	003f0106 	br	82b4c0 <__umoddi3+0x148>
  82b8bc:	01400204 	movi	r5,8
  82b8c0:	2805883a 	mov	r2,r5
  82b8c4:	003f1206 	br	82b510 <__umoddi3+0x198>
  82b8c8:	01400604 	movi	r5,24
  82b8cc:	2805883a 	mov	r2,r5
  82b8d0:	003f0f06 	br	82b510 <__umoddi3+0x198>
  82b8d4:	01400604 	movi	r5,24
  82b8d8:	2805883a 	mov	r2,r5
  82b8dc:	003ef806 	br	82b4c0 <__umoddi3+0x148>
  82b8e0:	3c7fb82e 	bgeu	r7,r17,82b7c4 <__umoddi3+0x44c>
  82b8e4:	843fffc4 	addi	r16,r16,-1
  82b8e8:	3dcf883a 	add	r7,r7,r23
  82b8ec:	003fb506 	br	82b7c4 <__umoddi3+0x44c>
  82b8f0:	147fa22e 	bgeu	r2,r17,82b77c <__umoddi3+0x404>
  82b8f4:	e73fffc4 	addi	fp,fp,-1
  82b8f8:	15c5883a 	add	r2,r2,r23
  82b8fc:	003f9f06 	br	82b77c <__umoddi3+0x404>
  82b900:	147f692e 	bgeu	r2,r17,82b6a8 <__umoddi3+0x330>
  82b904:	1405883a 	add	r2,r2,r16
  82b908:	003f6706 	br	82b6a8 <__umoddi3+0x330>
  82b90c:	1405883a 	add	r2,r2,r16
  82b910:	003f1906 	br	82b578 <__umoddi3+0x200>
  82b914:	1405883a 	add	r2,r2,r16
  82b918:	003ec906 	br	82b440 <__umoddi3+0xc8>
  82b91c:	b13fcc36 	bltu	r22,r4,82b850 <__umoddi3+0x4d8>
  82b920:	000b883a 	mov	r5,zero
  82b924:	003fd106 	br	82b86c <__umoddi3+0x4f4>

0082b928 <__divdf3>:
  82b928:	deffed04 	addi	sp,sp,-76
  82b92c:	dcc01115 	stw	r19,68(sp)
  82b930:	dcc00404 	addi	r19,sp,16
  82b934:	2011883a 	mov	r8,r4
  82b938:	2813883a 	mov	r9,r5
  82b93c:	dc000e15 	stw	r16,56(sp)
  82b940:	d809883a 	mov	r4,sp
  82b944:	980b883a 	mov	r5,r19
  82b948:	dc000904 	addi	r16,sp,36
  82b94c:	dfc01215 	stw	ra,72(sp)
  82b950:	da400115 	stw	r9,4(sp)
  82b954:	d9c00315 	stw	r7,12(sp)
  82b958:	da000015 	stw	r8,0(sp)
  82b95c:	d9800215 	stw	r6,8(sp)
  82b960:	dc801015 	stw	r18,64(sp)
  82b964:	dc400f15 	stw	r17,60(sp)
  82b968:	08233180 	call	823318 <__unpack_d>
  82b96c:	d9000204 	addi	r4,sp,8
  82b970:	800b883a 	mov	r5,r16
  82b974:	08233180 	call	823318 <__unpack_d>
  82b978:	d9000417 	ldw	r4,16(sp)
  82b97c:	00800044 	movi	r2,1
  82b980:	11000b2e 	bgeu	r2,r4,82b9b0 <__divdf3+0x88>
  82b984:	d9400917 	ldw	r5,36(sp)
  82b988:	1140762e 	bgeu	r2,r5,82bb64 <__divdf3+0x23c>
  82b98c:	d8800517 	ldw	r2,20(sp)
  82b990:	d8c00a17 	ldw	r3,40(sp)
  82b994:	01800104 	movi	r6,4
  82b998:	10c4f03a 	xor	r2,r2,r3
  82b99c:	d8800515 	stw	r2,20(sp)
  82b9a0:	21800226 	beq	r4,r6,82b9ac <__divdf3+0x84>
  82b9a4:	00800084 	movi	r2,2
  82b9a8:	2080141e 	bne	r4,r2,82b9fc <__divdf3+0xd4>
  82b9ac:	29000926 	beq	r5,r4,82b9d4 <__divdf3+0xac>
  82b9b0:	9809883a 	mov	r4,r19
  82b9b4:	08230040 	call	823004 <__pack_d>
  82b9b8:	dfc01217 	ldw	ra,72(sp)
  82b9bc:	dcc01117 	ldw	r19,68(sp)
  82b9c0:	dc801017 	ldw	r18,64(sp)
  82b9c4:	dc400f17 	ldw	r17,60(sp)
  82b9c8:	dc000e17 	ldw	r16,56(sp)
  82b9cc:	dec01304 	addi	sp,sp,76
  82b9d0:	f800283a 	ret
  82b9d4:	010020f4 	movhi	r4,131
  82b9d8:	210e0204 	addi	r4,r4,14344
  82b9dc:	08230040 	call	823004 <__pack_d>
  82b9e0:	dfc01217 	ldw	ra,72(sp)
  82b9e4:	dcc01117 	ldw	r19,68(sp)
  82b9e8:	dc801017 	ldw	r18,64(sp)
  82b9ec:	dc400f17 	ldw	r17,60(sp)
  82b9f0:	dc000e17 	ldw	r16,56(sp)
  82b9f4:	dec01304 	addi	sp,sp,76
  82b9f8:	f800283a 	ret
  82b9fc:	29805b26 	beq	r5,r6,82bb6c <__divdf3+0x244>
  82ba00:	28802d26 	beq	r5,r2,82bab8 <__divdf3+0x190>
  82ba04:	d8c00617 	ldw	r3,24(sp)
  82ba08:	d8800b17 	ldw	r2,44(sp)
  82ba0c:	d9c00817 	ldw	r7,32(sp)
  82ba10:	dc400d17 	ldw	r17,52(sp)
  82ba14:	188bc83a 	sub	r5,r3,r2
  82ba18:	d9800717 	ldw	r6,28(sp)
  82ba1c:	dc000c17 	ldw	r16,48(sp)
  82ba20:	d9400615 	stw	r5,24(sp)
  82ba24:	3c403836 	bltu	r7,r17,82bb08 <__divdf3+0x1e0>
  82ba28:	89c03626 	beq	r17,r7,82bb04 <__divdf3+0x1dc>
  82ba2c:	0015883a 	mov	r10,zero
  82ba30:	001d883a 	mov	r14,zero
  82ba34:	02c40034 	movhi	r11,4096
  82ba38:	001f883a 	mov	r15,zero
  82ba3c:	003f883a 	mov	ra,zero
  82ba40:	04800f44 	movi	r18,61
  82ba44:	00000f06 	br	82ba84 <__divdf3+0x15c>
  82ba48:	601d883a 	mov	r14,r12
  82ba4c:	681f883a 	mov	r15,r13
  82ba50:	400d883a 	mov	r6,r8
  82ba54:	100f883a 	mov	r7,r2
  82ba58:	3191883a 	add	r8,r6,r6
  82ba5c:	5808d07a 	srli	r4,r11,1
  82ba60:	4185803a 	cmpltu	r2,r8,r6
  82ba64:	39d3883a 	add	r9,r7,r7
  82ba68:	28c6b03a 	or	r3,r5,r3
  82ba6c:	1245883a 	add	r2,r2,r9
  82ba70:	1815883a 	mov	r10,r3
  82ba74:	2017883a 	mov	r11,r4
  82ba78:	400d883a 	mov	r6,r8
  82ba7c:	100f883a 	mov	r7,r2
  82ba80:	fc801726 	beq	ra,r18,82bae0 <__divdf3+0x1b8>
  82ba84:	580a97fa 	slli	r5,r11,31
  82ba88:	5006d07a 	srli	r3,r10,1
  82ba8c:	ffc00044 	addi	ra,ra,1
  82ba90:	3c7ff136 	bltu	r7,r17,82ba58 <__divdf3+0x130>
  82ba94:	3411c83a 	sub	r8,r6,r16
  82ba98:	3205803a 	cmpltu	r2,r6,r8
  82ba9c:	3c53c83a 	sub	r9,r7,r17
  82baa0:	7298b03a 	or	r12,r14,r10
  82baa4:	7adab03a 	or	r13,r15,r11
  82baa8:	4885c83a 	sub	r2,r9,r2
  82baac:	89ffe61e 	bne	r17,r7,82ba48 <__divdf3+0x120>
  82bab0:	343fe936 	bltu	r6,r16,82ba58 <__divdf3+0x130>
  82bab4:	003fe406 	br	82ba48 <__divdf3+0x120>
  82bab8:	9809883a 	mov	r4,r19
  82babc:	d9800415 	stw	r6,16(sp)
  82bac0:	08230040 	call	823004 <__pack_d>
  82bac4:	dfc01217 	ldw	ra,72(sp)
  82bac8:	dcc01117 	ldw	r19,68(sp)
  82bacc:	dc801017 	ldw	r18,64(sp)
  82bad0:	dc400f17 	ldw	r17,60(sp)
  82bad4:	dc000e17 	ldw	r16,56(sp)
  82bad8:	dec01304 	addi	sp,sp,76
  82badc:	f800283a 	ret
  82bae0:	00803fc4 	movi	r2,255
  82bae4:	7090703a 	and	r8,r14,r2
  82bae8:	00802004 	movi	r2,128
  82baec:	0007883a 	mov	r3,zero
  82baf0:	0013883a 	mov	r9,zero
  82baf4:	40800d26 	beq	r8,r2,82bb2c <__divdf3+0x204>
  82baf8:	dbc00815 	stw	r15,32(sp)
  82bafc:	db800715 	stw	r14,28(sp)
  82bb00:	003fab06 	br	82b9b0 <__divdf3+0x88>
  82bb04:	343fc92e 	bgeu	r6,r16,82ba2c <__divdf3+0x104>
  82bb08:	3185883a 	add	r2,r6,r6
  82bb0c:	1189803a 	cmpltu	r4,r2,r6
  82bb10:	39c7883a 	add	r3,r7,r7
  82bb14:	20c9883a 	add	r4,r4,r3
  82bb18:	297fffc4 	addi	r5,r5,-1
  82bb1c:	100d883a 	mov	r6,r2
  82bb20:	200f883a 	mov	r7,r4
  82bb24:	d9400615 	stw	r5,24(sp)
  82bb28:	003fc006 	br	82ba2c <__divdf3+0x104>
  82bb2c:	483ff21e 	bne	r9,zero,82baf8 <__divdf3+0x1d0>
  82bb30:	01004004 	movi	r4,256
  82bb34:	7104703a 	and	r2,r14,r4
  82bb38:	10c4b03a 	or	r2,r2,r3
  82bb3c:	103fee1e 	bne	r2,zero,82baf8 <__divdf3+0x1d0>
  82bb40:	31c4b03a 	or	r2,r6,r7
  82bb44:	103fec26 	beq	r2,zero,82baf8 <__divdf3+0x1d0>
  82bb48:	7205883a 	add	r2,r14,r8
  82bb4c:	1391803a 	cmpltu	r8,r2,r14
  82bb50:	43d1883a 	add	r8,r8,r15
  82bb54:	013fc004 	movi	r4,-256
  82bb58:	111c703a 	and	r14,r2,r4
  82bb5c:	401f883a 	mov	r15,r8
  82bb60:	003fe506 	br	82baf8 <__divdf3+0x1d0>
  82bb64:	8009883a 	mov	r4,r16
  82bb68:	003f9206 	br	82b9b4 <__divdf3+0x8c>
  82bb6c:	9809883a 	mov	r4,r19
  82bb70:	d8000715 	stw	zero,28(sp)
  82bb74:	d8000815 	stw	zero,32(sp)
  82bb78:	d8000615 	stw	zero,24(sp)
  82bb7c:	003f8d06 	br	82b9b4 <__divdf3+0x8c>

0082bb80 <__eqdf2>:
  82bb80:	deffef04 	addi	sp,sp,-68
  82bb84:	dc400f15 	stw	r17,60(sp)
  82bb88:	dc400404 	addi	r17,sp,16
  82bb8c:	2005883a 	mov	r2,r4
  82bb90:	2807883a 	mov	r3,r5
  82bb94:	dc000e15 	stw	r16,56(sp)
  82bb98:	d809883a 	mov	r4,sp
  82bb9c:	880b883a 	mov	r5,r17
  82bba0:	dc000904 	addi	r16,sp,36
  82bba4:	d8c00115 	stw	r3,4(sp)
  82bba8:	d8800015 	stw	r2,0(sp)
  82bbac:	d9800215 	stw	r6,8(sp)
  82bbb0:	dfc01015 	stw	ra,64(sp)
  82bbb4:	d9c00315 	stw	r7,12(sp)
  82bbb8:	08233180 	call	823318 <__unpack_d>
  82bbbc:	d9000204 	addi	r4,sp,8
  82bbc0:	800b883a 	mov	r5,r16
  82bbc4:	08233180 	call	823318 <__unpack_d>
  82bbc8:	d8800417 	ldw	r2,16(sp)
  82bbcc:	00c00044 	movi	r3,1
  82bbd0:	180d883a 	mov	r6,r3
  82bbd4:	1880062e 	bgeu	r3,r2,82bbf0 <__eqdf2+0x70>
  82bbd8:	d8800917 	ldw	r2,36(sp)
  82bbdc:	8809883a 	mov	r4,r17
  82bbe0:	800b883a 	mov	r5,r16
  82bbe4:	1880022e 	bgeu	r3,r2,82bbf0 <__eqdf2+0x70>
  82bbe8:	08234500 	call	823450 <__fpcmp_parts_d>
  82bbec:	100d883a 	mov	r6,r2
  82bbf0:	3005883a 	mov	r2,r6
  82bbf4:	dfc01017 	ldw	ra,64(sp)
  82bbf8:	dc400f17 	ldw	r17,60(sp)
  82bbfc:	dc000e17 	ldw	r16,56(sp)
  82bc00:	dec01104 	addi	sp,sp,68
  82bc04:	f800283a 	ret

0082bc08 <__nedf2>:
  82bc08:	deffef04 	addi	sp,sp,-68
  82bc0c:	dc400f15 	stw	r17,60(sp)
  82bc10:	dc400404 	addi	r17,sp,16
  82bc14:	2005883a 	mov	r2,r4
  82bc18:	2807883a 	mov	r3,r5
  82bc1c:	dc000e15 	stw	r16,56(sp)
  82bc20:	d809883a 	mov	r4,sp
  82bc24:	880b883a 	mov	r5,r17
  82bc28:	dc000904 	addi	r16,sp,36
  82bc2c:	d8c00115 	stw	r3,4(sp)
  82bc30:	d8800015 	stw	r2,0(sp)
  82bc34:	d9800215 	stw	r6,8(sp)
  82bc38:	dfc01015 	stw	ra,64(sp)
  82bc3c:	d9c00315 	stw	r7,12(sp)
  82bc40:	08233180 	call	823318 <__unpack_d>
  82bc44:	d9000204 	addi	r4,sp,8
  82bc48:	800b883a 	mov	r5,r16
  82bc4c:	08233180 	call	823318 <__unpack_d>
  82bc50:	d8800417 	ldw	r2,16(sp)
  82bc54:	00c00044 	movi	r3,1
  82bc58:	180d883a 	mov	r6,r3
  82bc5c:	1880062e 	bgeu	r3,r2,82bc78 <__nedf2+0x70>
  82bc60:	d8800917 	ldw	r2,36(sp)
  82bc64:	8809883a 	mov	r4,r17
  82bc68:	800b883a 	mov	r5,r16
  82bc6c:	1880022e 	bgeu	r3,r2,82bc78 <__nedf2+0x70>
  82bc70:	08234500 	call	823450 <__fpcmp_parts_d>
  82bc74:	100d883a 	mov	r6,r2
  82bc78:	3005883a 	mov	r2,r6
  82bc7c:	dfc01017 	ldw	ra,64(sp)
  82bc80:	dc400f17 	ldw	r17,60(sp)
  82bc84:	dc000e17 	ldw	r16,56(sp)
  82bc88:	dec01104 	addi	sp,sp,68
  82bc8c:	f800283a 	ret

0082bc90 <__gedf2>:
  82bc90:	deffef04 	addi	sp,sp,-68
  82bc94:	dc400f15 	stw	r17,60(sp)
  82bc98:	dc400404 	addi	r17,sp,16
  82bc9c:	2005883a 	mov	r2,r4
  82bca0:	2807883a 	mov	r3,r5
  82bca4:	dc000e15 	stw	r16,56(sp)
  82bca8:	d809883a 	mov	r4,sp
  82bcac:	880b883a 	mov	r5,r17
  82bcb0:	dc000904 	addi	r16,sp,36
  82bcb4:	d8c00115 	stw	r3,4(sp)
  82bcb8:	d8800015 	stw	r2,0(sp)
  82bcbc:	d9800215 	stw	r6,8(sp)
  82bcc0:	dfc01015 	stw	ra,64(sp)
  82bcc4:	d9c00315 	stw	r7,12(sp)
  82bcc8:	08233180 	call	823318 <__unpack_d>
  82bccc:	d9000204 	addi	r4,sp,8
  82bcd0:	800b883a 	mov	r5,r16
  82bcd4:	08233180 	call	823318 <__unpack_d>
  82bcd8:	d8800417 	ldw	r2,16(sp)
  82bcdc:	00c00044 	movi	r3,1
  82bce0:	01bfffc4 	movi	r6,-1
  82bce4:	1880062e 	bgeu	r3,r2,82bd00 <__gedf2+0x70>
  82bce8:	d8800917 	ldw	r2,36(sp)
  82bcec:	8809883a 	mov	r4,r17
  82bcf0:	800b883a 	mov	r5,r16
  82bcf4:	1880022e 	bgeu	r3,r2,82bd00 <__gedf2+0x70>
  82bcf8:	08234500 	call	823450 <__fpcmp_parts_d>
  82bcfc:	100d883a 	mov	r6,r2
  82bd00:	3005883a 	mov	r2,r6
  82bd04:	dfc01017 	ldw	ra,64(sp)
  82bd08:	dc400f17 	ldw	r17,60(sp)
  82bd0c:	dc000e17 	ldw	r16,56(sp)
  82bd10:	dec01104 	addi	sp,sp,68
  82bd14:	f800283a 	ret

0082bd18 <__ltdf2>:
  82bd18:	deffef04 	addi	sp,sp,-68
  82bd1c:	dc400f15 	stw	r17,60(sp)
  82bd20:	dc400404 	addi	r17,sp,16
  82bd24:	2005883a 	mov	r2,r4
  82bd28:	2807883a 	mov	r3,r5
  82bd2c:	dc000e15 	stw	r16,56(sp)
  82bd30:	d809883a 	mov	r4,sp
  82bd34:	880b883a 	mov	r5,r17
  82bd38:	dc000904 	addi	r16,sp,36
  82bd3c:	d8c00115 	stw	r3,4(sp)
  82bd40:	d8800015 	stw	r2,0(sp)
  82bd44:	d9800215 	stw	r6,8(sp)
  82bd48:	dfc01015 	stw	ra,64(sp)
  82bd4c:	d9c00315 	stw	r7,12(sp)
  82bd50:	08233180 	call	823318 <__unpack_d>
  82bd54:	d9000204 	addi	r4,sp,8
  82bd58:	800b883a 	mov	r5,r16
  82bd5c:	08233180 	call	823318 <__unpack_d>
  82bd60:	d8800417 	ldw	r2,16(sp)
  82bd64:	00c00044 	movi	r3,1
  82bd68:	180d883a 	mov	r6,r3
  82bd6c:	1880062e 	bgeu	r3,r2,82bd88 <__ltdf2+0x70>
  82bd70:	d8800917 	ldw	r2,36(sp)
  82bd74:	8809883a 	mov	r4,r17
  82bd78:	800b883a 	mov	r5,r16
  82bd7c:	1880022e 	bgeu	r3,r2,82bd88 <__ltdf2+0x70>
  82bd80:	08234500 	call	823450 <__fpcmp_parts_d>
  82bd84:	100d883a 	mov	r6,r2
  82bd88:	3005883a 	mov	r2,r6
  82bd8c:	dfc01017 	ldw	ra,64(sp)
  82bd90:	dc400f17 	ldw	r17,60(sp)
  82bd94:	dc000e17 	ldw	r16,56(sp)
  82bd98:	dec01104 	addi	sp,sp,68
  82bd9c:	f800283a 	ret

0082bda0 <__floatsidf>:
  82bda0:	2006d7fa 	srli	r3,r4,31
  82bda4:	defff604 	addi	sp,sp,-40
  82bda8:	008000c4 	movi	r2,3
  82bdac:	dfc00915 	stw	ra,36(sp)
  82bdb0:	dcc00815 	stw	r19,32(sp)
  82bdb4:	dc800715 	stw	r18,28(sp)
  82bdb8:	dc400615 	stw	r17,24(sp)
  82bdbc:	dc000515 	stw	r16,20(sp)
  82bdc0:	d8800015 	stw	r2,0(sp)
  82bdc4:	d8c00115 	stw	r3,4(sp)
  82bdc8:	20000f1e 	bne	r4,zero,82be08 <__floatsidf+0x68>
  82bdcc:	00800084 	movi	r2,2
  82bdd0:	d8800015 	stw	r2,0(sp)
  82bdd4:	d809883a 	mov	r4,sp
  82bdd8:	08230040 	call	823004 <__pack_d>
  82bddc:	1009883a 	mov	r4,r2
  82bde0:	180b883a 	mov	r5,r3
  82bde4:	2005883a 	mov	r2,r4
  82bde8:	2807883a 	mov	r3,r5
  82bdec:	dfc00917 	ldw	ra,36(sp)
  82bdf0:	dcc00817 	ldw	r19,32(sp)
  82bdf4:	dc800717 	ldw	r18,28(sp)
  82bdf8:	dc400617 	ldw	r17,24(sp)
  82bdfc:	dc000517 	ldw	r16,20(sp)
  82be00:	dec00a04 	addi	sp,sp,40
  82be04:	f800283a 	ret
  82be08:	00800f04 	movi	r2,60
  82be0c:	1807003a 	cmpeq	r3,r3,zero
  82be10:	d8800215 	stw	r2,8(sp)
  82be14:	18001126 	beq	r3,zero,82be5c <__floatsidf+0xbc>
  82be18:	0027883a 	mov	r19,zero
  82be1c:	2025883a 	mov	r18,r4
  82be20:	d9000315 	stw	r4,12(sp)
  82be24:	dcc00415 	stw	r19,16(sp)
  82be28:	0822f840 	call	822f84 <__clzsi2>
  82be2c:	11000744 	addi	r4,r2,29
  82be30:	013fe80e 	bge	zero,r4,82bdd4 <__floatsidf+0x34>
  82be34:	10bfff44 	addi	r2,r2,-3
  82be38:	10000c16 	blt	r2,zero,82be6c <__floatsidf+0xcc>
  82be3c:	90a2983a 	sll	r17,r18,r2
  82be40:	0021883a 	mov	r16,zero
  82be44:	d8800217 	ldw	r2,8(sp)
  82be48:	dc400415 	stw	r17,16(sp)
  82be4c:	dc000315 	stw	r16,12(sp)
  82be50:	1105c83a 	sub	r2,r2,r4
  82be54:	d8800215 	stw	r2,8(sp)
  82be58:	003fde06 	br	82bdd4 <__floatsidf+0x34>
  82be5c:	00a00034 	movhi	r2,32768
  82be60:	20800a26 	beq	r4,r2,82be8c <__floatsidf+0xec>
  82be64:	0109c83a 	sub	r4,zero,r4
  82be68:	003feb06 	br	82be18 <__floatsidf+0x78>
  82be6c:	9006d07a 	srli	r3,r18,1
  82be70:	008007c4 	movi	r2,31
  82be74:	1105c83a 	sub	r2,r2,r4
  82be78:	1886d83a 	srl	r3,r3,r2
  82be7c:	9922983a 	sll	r17,r19,r4
  82be80:	9120983a 	sll	r16,r18,r4
  82be84:	1c62b03a 	or	r17,r3,r17
  82be88:	003fee06 	br	82be44 <__floatsidf+0xa4>
  82be8c:	0009883a 	mov	r4,zero
  82be90:	01707834 	movhi	r5,49632
  82be94:	003fd306 	br	82bde4 <__floatsidf+0x44>

0082be98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  82be98:	defff804 	addi	sp,sp,-32
  82be9c:	dfc00715 	stw	ra,28(sp)
  82bea0:	df000615 	stw	fp,24(sp)
  82bea4:	df000604 	addi	fp,sp,24
  82bea8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  82beac:	e0bffc17 	ldw	r2,-16(fp)
  82beb0:	1004803a 	cmplt	r2,r2,zero
  82beb4:	1000081e 	bne	r2,zero,82bed8 <close+0x40>
  82beb8:	e0bffc17 	ldw	r2,-16(fp)
  82bebc:	10800324 	muli	r2,r2,12
  82bec0:	1007883a 	mov	r3,r2
  82bec4:	008020f4 	movhi	r2,131
  82bec8:	1091d404 	addi	r2,r2,18256
  82becc:	1887883a 	add	r3,r3,r2
  82bed0:	e0ffff15 	stw	r3,-4(fp)
  82bed4:	00000106 	br	82bedc <close+0x44>
  82bed8:	e03fff15 	stw	zero,-4(fp)
  82bedc:	e0bfff17 	ldw	r2,-4(fp)
  82bee0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  82bee4:	e0bffb17 	ldw	r2,-20(fp)
  82bee8:	1005003a 	cmpeq	r2,r2,zero
  82beec:	10001d1e 	bne	r2,zero,82bf64 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  82bef0:	e0bffb17 	ldw	r2,-20(fp)
  82bef4:	10800017 	ldw	r2,0(r2)
  82bef8:	10800417 	ldw	r2,16(r2)
  82befc:	1005003a 	cmpeq	r2,r2,zero
  82bf00:	1000071e 	bne	r2,zero,82bf20 <close+0x88>
  82bf04:	e0bffb17 	ldw	r2,-20(fp)
  82bf08:	10800017 	ldw	r2,0(r2)
  82bf0c:	10800417 	ldw	r2,16(r2)
  82bf10:	e13ffb17 	ldw	r4,-20(fp)
  82bf14:	103ee83a 	callr	r2
  82bf18:	e0bffe15 	stw	r2,-8(fp)
  82bf1c:	00000106 	br	82bf24 <close+0x8c>
  82bf20:	e03ffe15 	stw	zero,-8(fp)
  82bf24:	e0bffe17 	ldw	r2,-8(fp)
  82bf28:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  82bf2c:	e13ffc17 	ldw	r4,-16(fp)
  82bf30:	082c9400 	call	82c940 <alt_release_fd>
    if (rval < 0)
  82bf34:	e0bffa17 	ldw	r2,-24(fp)
  82bf38:	1004403a 	cmpge	r2,r2,zero
  82bf3c:	1000071e 	bne	r2,zero,82bf5c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  82bf40:	082bf940 	call	82bf94 <alt_get_errno>
  82bf44:	e0fffa17 	ldw	r3,-24(fp)
  82bf48:	00c7c83a 	sub	r3,zero,r3
  82bf4c:	10c00015 	stw	r3,0(r2)
      return -1;
  82bf50:	00bfffc4 	movi	r2,-1
  82bf54:	e0bffd15 	stw	r2,-12(fp)
  82bf58:	00000806 	br	82bf7c <close+0xe4>
    }
    return 0;
  82bf5c:	e03ffd15 	stw	zero,-12(fp)
  82bf60:	00000606 	br	82bf7c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  82bf64:	082bf940 	call	82bf94 <alt_get_errno>
  82bf68:	1007883a 	mov	r3,r2
  82bf6c:	00801444 	movi	r2,81
  82bf70:	18800015 	stw	r2,0(r3)
    return -1;
  82bf74:	00bfffc4 	movi	r2,-1
  82bf78:	e0bffd15 	stw	r2,-12(fp)
  82bf7c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  82bf80:	e037883a 	mov	sp,fp
  82bf84:	dfc00117 	ldw	ra,4(sp)
  82bf88:	df000017 	ldw	fp,0(sp)
  82bf8c:	dec00204 	addi	sp,sp,8
  82bf90:	f800283a 	ret

0082bf94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82bf94:	defffd04 	addi	sp,sp,-12
  82bf98:	dfc00215 	stw	ra,8(sp)
  82bf9c:	df000115 	stw	fp,4(sp)
  82bfa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82bfa4:	008020f4 	movhi	r2,131
  82bfa8:	10968004 	addi	r2,r2,23040
  82bfac:	10800017 	ldw	r2,0(r2)
  82bfb0:	1005003a 	cmpeq	r2,r2,zero
  82bfb4:	1000061e 	bne	r2,zero,82bfd0 <alt_get_errno+0x3c>
  82bfb8:	008020f4 	movhi	r2,131
  82bfbc:	10968004 	addi	r2,r2,23040
  82bfc0:	10800017 	ldw	r2,0(r2)
  82bfc4:	103ee83a 	callr	r2
  82bfc8:	e0bfff15 	stw	r2,-4(fp)
  82bfcc:	00000306 	br	82bfdc <alt_get_errno+0x48>
  82bfd0:	008020f4 	movhi	r2,131
  82bfd4:	109e3504 	addi	r2,r2,30932
  82bfd8:	e0bfff15 	stw	r2,-4(fp)
  82bfdc:	e0bfff17 	ldw	r2,-4(fp)
}
  82bfe0:	e037883a 	mov	sp,fp
  82bfe4:	dfc00117 	ldw	ra,4(sp)
  82bfe8:	df000017 	ldw	fp,0(sp)
  82bfec:	dec00204 	addi	sp,sp,8
  82bff0:	f800283a 	ret

0082bff4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  82bff4:	defffe04 	addi	sp,sp,-8
  82bff8:	df000115 	stw	fp,4(sp)
  82bffc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  82c000:	e03fff15 	stw	zero,-4(fp)
  82c004:	00000506 	br	82c01c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  82c008:	e0bfff17 	ldw	r2,-4(fp)
  82c00c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  82c010:	e0bfff17 	ldw	r2,-4(fp)
  82c014:	10800804 	addi	r2,r2,32
  82c018:	e0bfff15 	stw	r2,-4(fp)
  82c01c:	e0bfff17 	ldw	r2,-4(fp)
  82c020:	10840030 	cmpltui	r2,r2,4096
  82c024:	103ff81e 	bne	r2,zero,82c008 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  82c028:	e037883a 	mov	sp,fp
  82c02c:	df000017 	ldw	fp,0(sp)
  82c030:	dec00104 	addi	sp,sp,4
  82c034:	f800283a 	ret

0082c038 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  82c038:	defffc04 	addi	sp,sp,-16
  82c03c:	df000315 	stw	fp,12(sp)
  82c040:	df000304 	addi	fp,sp,12
  82c044:	e13ffd15 	stw	r4,-12(fp)
  82c048:	e17ffe15 	stw	r5,-8(fp)
  82c04c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  82c050:	e0bfff17 	ldw	r2,-4(fp)
}
  82c054:	e037883a 	mov	sp,fp
  82c058:	df000017 	ldw	fp,0(sp)
  82c05c:	dec00104 	addi	sp,sp,4
  82c060:	f800283a 	ret

0082c064 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  82c064:	defffd04 	addi	sp,sp,-12
  82c068:	df000215 	stw	fp,8(sp)
  82c06c:	df000204 	addi	fp,sp,8
  82c070:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  82c074:	e0bfff17 	ldw	r2,-4(fp)
  82c078:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  82c07c:	e0bffe17 	ldw	r2,-8(fp)
  82c080:	1005003a 	cmpeq	r2,r2,zero
  82c084:	1000021e 	bne	r2,zero,82c090 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  82c088:	002af070 	cmpltui	zero,zero,43969
  82c08c:	00000106 	br	82c094 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  82c090:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  82c094:	e037883a 	mov	sp,fp
  82c098:	df000017 	ldw	fp,0(sp)
  82c09c:	dec00104 	addi	sp,sp,4
  82c0a0:	f800283a 	ret

0082c0a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  82c0a4:	defffd04 	addi	sp,sp,-12
  82c0a8:	dfc00215 	stw	ra,8(sp)
  82c0ac:	df000115 	stw	fp,4(sp)
  82c0b0:	df000104 	addi	fp,sp,4
  82c0b4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  82c0b8:	e13fff17 	ldw	r4,-4(fp)
  82c0bc:	082c0640 	call	82c064 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  82c0c0:	003fff06 	br	82c0c0 <_exit+0x1c>

0082c0c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  82c0c4:	defff904 	addi	sp,sp,-28
  82c0c8:	dfc00615 	stw	ra,24(sp)
  82c0cc:	df000515 	stw	fp,20(sp)
  82c0d0:	df000504 	addi	fp,sp,20
  82c0d4:	e13ffc15 	stw	r4,-16(fp)
  82c0d8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82c0dc:	e0bffc17 	ldw	r2,-16(fp)
  82c0e0:	1004803a 	cmplt	r2,r2,zero
  82c0e4:	1000081e 	bne	r2,zero,82c108 <fstat+0x44>
  82c0e8:	e0bffc17 	ldw	r2,-16(fp)
  82c0ec:	10800324 	muli	r2,r2,12
  82c0f0:	1007883a 	mov	r3,r2
  82c0f4:	008020f4 	movhi	r2,131
  82c0f8:	1091d404 	addi	r2,r2,18256
  82c0fc:	1887883a 	add	r3,r3,r2
  82c100:	e0ffff15 	stw	r3,-4(fp)
  82c104:	00000106 	br	82c10c <fstat+0x48>
  82c108:	e03fff15 	stw	zero,-4(fp)
  82c10c:	e0bfff17 	ldw	r2,-4(fp)
  82c110:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  82c114:	e0bffb17 	ldw	r2,-20(fp)
  82c118:	1005003a 	cmpeq	r2,r2,zero
  82c11c:	1000121e 	bne	r2,zero,82c168 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  82c120:	e0bffb17 	ldw	r2,-20(fp)
  82c124:	10800017 	ldw	r2,0(r2)
  82c128:	10800817 	ldw	r2,32(r2)
  82c12c:	1005003a 	cmpeq	r2,r2,zero
  82c130:	1000081e 	bne	r2,zero,82c154 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  82c134:	e0bffb17 	ldw	r2,-20(fp)
  82c138:	10800017 	ldw	r2,0(r2)
  82c13c:	10800817 	ldw	r2,32(r2)
  82c140:	e13ffb17 	ldw	r4,-20(fp)
  82c144:	e17ffd17 	ldw	r5,-12(fp)
  82c148:	103ee83a 	callr	r2
  82c14c:	e0bffe15 	stw	r2,-8(fp)
  82c150:	00000b06 	br	82c180 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  82c154:	e0fffd17 	ldw	r3,-12(fp)
  82c158:	00880004 	movi	r2,8192
  82c15c:	18800115 	stw	r2,4(r3)
      return 0;
  82c160:	e03ffe15 	stw	zero,-8(fp)
  82c164:	00000606 	br	82c180 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  82c168:	082c1980 	call	82c198 <alt_get_errno>
  82c16c:	1007883a 	mov	r3,r2
  82c170:	00801444 	movi	r2,81
  82c174:	18800015 	stw	r2,0(r3)
    return -1;
  82c178:	00bfffc4 	movi	r2,-1
  82c17c:	e0bffe15 	stw	r2,-8(fp)
  82c180:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  82c184:	e037883a 	mov	sp,fp
  82c188:	dfc00117 	ldw	ra,4(sp)
  82c18c:	df000017 	ldw	fp,0(sp)
  82c190:	dec00204 	addi	sp,sp,8
  82c194:	f800283a 	ret

0082c198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82c198:	defffd04 	addi	sp,sp,-12
  82c19c:	dfc00215 	stw	ra,8(sp)
  82c1a0:	df000115 	stw	fp,4(sp)
  82c1a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82c1a8:	008020f4 	movhi	r2,131
  82c1ac:	10968004 	addi	r2,r2,23040
  82c1b0:	10800017 	ldw	r2,0(r2)
  82c1b4:	1005003a 	cmpeq	r2,r2,zero
  82c1b8:	1000061e 	bne	r2,zero,82c1d4 <alt_get_errno+0x3c>
  82c1bc:	008020f4 	movhi	r2,131
  82c1c0:	10968004 	addi	r2,r2,23040
  82c1c4:	10800017 	ldw	r2,0(r2)
  82c1c8:	103ee83a 	callr	r2
  82c1cc:	e0bfff15 	stw	r2,-4(fp)
  82c1d0:	00000306 	br	82c1e0 <alt_get_errno+0x48>
  82c1d4:	008020f4 	movhi	r2,131
  82c1d8:	109e3504 	addi	r2,r2,30932
  82c1dc:	e0bfff15 	stw	r2,-4(fp)
  82c1e0:	e0bfff17 	ldw	r2,-4(fp)
}
  82c1e4:	e037883a 	mov	sp,fp
  82c1e8:	dfc00117 	ldw	ra,4(sp)
  82c1ec:	df000017 	ldw	fp,0(sp)
  82c1f0:	dec00204 	addi	sp,sp,8
  82c1f4:	f800283a 	ret

0082c1f8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  82c1f8:	deffef04 	addi	sp,sp,-68
  82c1fc:	df001015 	stw	fp,64(sp)
  82c200:	df001004 	addi	fp,sp,64
  82c204:	e13ffc15 	stw	r4,-16(fp)
  82c208:	e17ffd15 	stw	r5,-12(fp)
  82c20c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  82c210:	00bffa84 	movi	r2,-22
  82c214:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  82c218:	e0bffc17 	ldw	r2,-16(fp)
  82c21c:	10800828 	cmpgeui	r2,r2,32
  82c220:	1000601e 	bne	r2,zero,82c3a4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82c224:	0005303a 	rdctl	r2,status
  82c228:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82c22c:	e0fff917 	ldw	r3,-28(fp)
  82c230:	00bfff84 	movi	r2,-2
  82c234:	1884703a 	and	r2,r3,r2
  82c238:	1001703a 	wrctl	status,r2
  
  return context;
  82c23c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  82c240:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  82c244:	e0bffc17 	ldw	r2,-16(fp)
  82c248:	00c020f4 	movhi	r3,131
  82c24c:	18dfb304 	addi	r3,r3,32460
  82c250:	100490fa 	slli	r2,r2,3
  82c254:	10c7883a 	add	r3,r2,r3
  82c258:	e0bffe17 	ldw	r2,-8(fp)
  82c25c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  82c260:	e0bffc17 	ldw	r2,-16(fp)
  82c264:	00c020f4 	movhi	r3,131
  82c268:	18dfb304 	addi	r3,r3,32460
  82c26c:	100490fa 	slli	r2,r2,3
  82c270:	10c5883a 	add	r2,r2,r3
  82c274:	10c00104 	addi	r3,r2,4
  82c278:	e0bffd17 	ldw	r2,-12(fp)
  82c27c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  82c280:	e0bffe17 	ldw	r2,-8(fp)
  82c284:	1005003a 	cmpeq	r2,r2,zero
  82c288:	1000201e 	bne	r2,zero,82c30c <alt_irq_register+0x114>
  82c28c:	e0bffc17 	ldw	r2,-16(fp)
  82c290:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82c294:	0005303a 	rdctl	r2,status
  82c298:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82c29c:	e0fff617 	ldw	r3,-40(fp)
  82c2a0:	00bfff84 	movi	r2,-2
  82c2a4:	1884703a 	and	r2,r3,r2
  82c2a8:	1001703a 	wrctl	status,r2
  
  return context;
  82c2ac:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  82c2b0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  82c2b4:	e0fff717 	ldw	r3,-36(fp)
  82c2b8:	00800044 	movi	r2,1
  82c2bc:	10c4983a 	sll	r2,r2,r3
  82c2c0:	1007883a 	mov	r3,r2
  82c2c4:	008020f4 	movhi	r2,131
  82c2c8:	109e3c04 	addi	r2,r2,30960
  82c2cc:	10800017 	ldw	r2,0(r2)
  82c2d0:	1886b03a 	or	r3,r3,r2
  82c2d4:	008020f4 	movhi	r2,131
  82c2d8:	109e3c04 	addi	r2,r2,30960
  82c2dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  82c2e0:	008020f4 	movhi	r2,131
  82c2e4:	109e3c04 	addi	r2,r2,30960
  82c2e8:	10800017 	ldw	r2,0(r2)
  82c2ec:	100170fa 	wrctl	ienable,r2
  82c2f0:	e0bff817 	ldw	r2,-32(fp)
  82c2f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82c2f8:	e0bff517 	ldw	r2,-44(fp)
  82c2fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  82c300:	0005883a 	mov	r2,zero
  82c304:	e0bfff15 	stw	r2,-4(fp)
  82c308:	00002006 	br	82c38c <alt_irq_register+0x194>
  82c30c:	e0bffc17 	ldw	r2,-16(fp)
  82c310:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82c314:	0005303a 	rdctl	r2,status
  82c318:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82c31c:	e0fff217 	ldw	r3,-56(fp)
  82c320:	00bfff84 	movi	r2,-2
  82c324:	1884703a 	and	r2,r3,r2
  82c328:	1001703a 	wrctl	status,r2
  
  return context;
  82c32c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  82c330:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  82c334:	e0fff317 	ldw	r3,-52(fp)
  82c338:	00800044 	movi	r2,1
  82c33c:	10c4983a 	sll	r2,r2,r3
  82c340:	0084303a 	nor	r2,zero,r2
  82c344:	1007883a 	mov	r3,r2
  82c348:	008020f4 	movhi	r2,131
  82c34c:	109e3c04 	addi	r2,r2,30960
  82c350:	10800017 	ldw	r2,0(r2)
  82c354:	1886703a 	and	r3,r3,r2
  82c358:	008020f4 	movhi	r2,131
  82c35c:	109e3c04 	addi	r2,r2,30960
  82c360:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  82c364:	008020f4 	movhi	r2,131
  82c368:	109e3c04 	addi	r2,r2,30960
  82c36c:	10800017 	ldw	r2,0(r2)
  82c370:	100170fa 	wrctl	ienable,r2
  82c374:	e0bff417 	ldw	r2,-48(fp)
  82c378:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82c37c:	e0bff117 	ldw	r2,-60(fp)
  82c380:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  82c384:	0005883a 	mov	r2,zero
  82c388:	e0bfff15 	stw	r2,-4(fp)
  82c38c:	e0bfff17 	ldw	r2,-4(fp)
  82c390:	e0bffb15 	stw	r2,-20(fp)
  82c394:	e0bffa17 	ldw	r2,-24(fp)
  82c398:	e0bff015 	stw	r2,-64(fp)
  82c39c:	e0bff017 	ldw	r2,-64(fp)
  82c3a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  82c3a4:	e0bffb17 	ldw	r2,-20(fp)
}
  82c3a8:	e037883a 	mov	sp,fp
  82c3ac:	df000017 	ldw	fp,0(sp)
  82c3b0:	dec00104 	addi	sp,sp,4
  82c3b4:	f800283a 	ret

0082c3b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  82c3b8:	deffeb04 	addi	sp,sp,-84
  82c3bc:	dfc01415 	stw	ra,80(sp)
  82c3c0:	df001315 	stw	fp,76(sp)
  82c3c4:	df001304 	addi	fp,sp,76
  82c3c8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82c3cc:	e0bffd17 	ldw	r2,-12(fp)
  82c3d0:	1004803a 	cmplt	r2,r2,zero
  82c3d4:	1000081e 	bne	r2,zero,82c3f8 <isatty+0x40>
  82c3d8:	e0bffd17 	ldw	r2,-12(fp)
  82c3dc:	10800324 	muli	r2,r2,12
  82c3e0:	1007883a 	mov	r3,r2
  82c3e4:	008020f4 	movhi	r2,131
  82c3e8:	1091d404 	addi	r2,r2,18256
  82c3ec:	1887883a 	add	r3,r3,r2
  82c3f0:	e0ffff15 	stw	r3,-4(fp)
  82c3f4:	00000106 	br	82c3fc <isatty+0x44>
  82c3f8:	e03fff15 	stw	zero,-4(fp)
  82c3fc:	e0bfff17 	ldw	r2,-4(fp)
  82c400:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  82c404:	e0bfed17 	ldw	r2,-76(fp)
  82c408:	1005003a 	cmpeq	r2,r2,zero
  82c40c:	10000f1e 	bne	r2,zero,82c44c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  82c410:	e0bfed17 	ldw	r2,-76(fp)
  82c414:	10800017 	ldw	r2,0(r2)
  82c418:	10800817 	ldw	r2,32(r2)
  82c41c:	1004c03a 	cmpne	r2,r2,zero
  82c420:	1000031e 	bne	r2,zero,82c430 <isatty+0x78>
    {
      return 1;
  82c424:	00800044 	movi	r2,1
  82c428:	e0bffe15 	stw	r2,-8(fp)
  82c42c:	00000c06 	br	82c460 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  82c430:	e17fee04 	addi	r5,fp,-72
  82c434:	e13ffd17 	ldw	r4,-12(fp)
  82c438:	082c0c40 	call	82c0c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  82c43c:	e0bfef17 	ldw	r2,-68(fp)
  82c440:	10880020 	cmpeqi	r2,r2,8192
  82c444:	e0bffe15 	stw	r2,-8(fp)
  82c448:	00000506 	br	82c460 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  82c44c:	082c4780 	call	82c478 <alt_get_errno>
  82c450:	1007883a 	mov	r3,r2
  82c454:	00801444 	movi	r2,81
  82c458:	18800015 	stw	r2,0(r3)
    return 0;
  82c45c:	e03ffe15 	stw	zero,-8(fp)
  82c460:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  82c464:	e037883a 	mov	sp,fp
  82c468:	dfc00117 	ldw	ra,4(sp)
  82c46c:	df000017 	ldw	fp,0(sp)
  82c470:	dec00204 	addi	sp,sp,8
  82c474:	f800283a 	ret

0082c478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82c478:	defffd04 	addi	sp,sp,-12
  82c47c:	dfc00215 	stw	ra,8(sp)
  82c480:	df000115 	stw	fp,4(sp)
  82c484:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82c488:	008020f4 	movhi	r2,131
  82c48c:	10968004 	addi	r2,r2,23040
  82c490:	10800017 	ldw	r2,0(r2)
  82c494:	1005003a 	cmpeq	r2,r2,zero
  82c498:	1000061e 	bne	r2,zero,82c4b4 <alt_get_errno+0x3c>
  82c49c:	008020f4 	movhi	r2,131
  82c4a0:	10968004 	addi	r2,r2,23040
  82c4a4:	10800017 	ldw	r2,0(r2)
  82c4a8:	103ee83a 	callr	r2
  82c4ac:	e0bfff15 	stw	r2,-4(fp)
  82c4b0:	00000306 	br	82c4c0 <alt_get_errno+0x48>
  82c4b4:	008020f4 	movhi	r2,131
  82c4b8:	109e3504 	addi	r2,r2,30932
  82c4bc:	e0bfff15 	stw	r2,-4(fp)
  82c4c0:	e0bfff17 	ldw	r2,-4(fp)
}
  82c4c4:	e037883a 	mov	sp,fp
  82c4c8:	dfc00117 	ldw	ra,4(sp)
  82c4cc:	df000017 	ldw	fp,0(sp)
  82c4d0:	dec00204 	addi	sp,sp,8
  82c4d4:	f800283a 	ret

0082c4d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  82c4d8:	defffe04 	addi	sp,sp,-8
  82c4dc:	dfc00115 	stw	ra,4(sp)
  82c4e0:	df000015 	stw	fp,0(sp)
  82c4e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  82c4e8:	010020f4 	movhi	r4,131
  82c4ec:	21168904 	addi	r4,r4,23076
  82c4f0:	014020f4 	movhi	r5,131
  82c4f4:	294efb04 	addi	r5,r5,15340
  82c4f8:	018020f4 	movhi	r6,131
  82c4fc:	31968904 	addi	r6,r6,23076
  82c500:	082c5580 	call	82c558 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  82c504:	010020b4 	movhi	r4,130
  82c508:	21008804 	addi	r4,r4,544
  82c50c:	014020b4 	movhi	r5,130
  82c510:	29408804 	addi	r5,r5,544
  82c514:	018020b4 	movhi	r6,130
  82c518:	3180ed04 	addi	r6,r6,948
  82c51c:	082c5580 	call	82c558 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  82c520:	010020f4 	movhi	r4,131
  82c524:	210d7904 	addi	r4,r4,13796
  82c528:	014020f4 	movhi	r5,131
  82c52c:	294d7904 	addi	r5,r5,13796
  82c530:	018020f4 	movhi	r6,131
  82c534:	318efb04 	addi	r6,r6,15340
  82c538:	082c5580 	call	82c558 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  82c53c:	082bff40 	call	82bff4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  82c540:	08328900 	call	832890 <alt_icache_flush_all>
}
  82c544:	e037883a 	mov	sp,fp
  82c548:	dfc00117 	ldw	ra,4(sp)
  82c54c:	df000017 	ldw	fp,0(sp)
  82c550:	dec00204 	addi	sp,sp,8
  82c554:	f800283a 	ret

0082c558 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  82c558:	defffc04 	addi	sp,sp,-16
  82c55c:	df000315 	stw	fp,12(sp)
  82c560:	df000304 	addi	fp,sp,12
  82c564:	e13ffd15 	stw	r4,-12(fp)
  82c568:	e17ffe15 	stw	r5,-8(fp)
  82c56c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  82c570:	e0fffe17 	ldw	r3,-8(fp)
  82c574:	e0bffd17 	ldw	r2,-12(fp)
  82c578:	18800e26 	beq	r3,r2,82c5b4 <alt_load_section+0x5c>
  {
    while( to != end )
  82c57c:	00000a06 	br	82c5a8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  82c580:	e0bffd17 	ldw	r2,-12(fp)
  82c584:	10c00017 	ldw	r3,0(r2)
  82c588:	e0bffe17 	ldw	r2,-8(fp)
  82c58c:	10c00015 	stw	r3,0(r2)
  82c590:	e0bffe17 	ldw	r2,-8(fp)
  82c594:	10800104 	addi	r2,r2,4
  82c598:	e0bffe15 	stw	r2,-8(fp)
  82c59c:	e0bffd17 	ldw	r2,-12(fp)
  82c5a0:	10800104 	addi	r2,r2,4
  82c5a4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  82c5a8:	e0fffe17 	ldw	r3,-8(fp)
  82c5ac:	e0bfff17 	ldw	r2,-4(fp)
  82c5b0:	18bff31e 	bne	r3,r2,82c580 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  82c5b4:	e037883a 	mov	sp,fp
  82c5b8:	df000017 	ldw	fp,0(sp)
  82c5bc:	dec00104 	addi	sp,sp,4
  82c5c0:	f800283a 	ret

0082c5c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  82c5c4:	defff804 	addi	sp,sp,-32
  82c5c8:	dfc00715 	stw	ra,28(sp)
  82c5cc:	df000615 	stw	fp,24(sp)
  82c5d0:	df000604 	addi	fp,sp,24
  82c5d4:	e13ffc15 	stw	r4,-16(fp)
  82c5d8:	e17ffd15 	stw	r5,-12(fp)
  82c5dc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  82c5e0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82c5e4:	e0bffc17 	ldw	r2,-16(fp)
  82c5e8:	1004803a 	cmplt	r2,r2,zero
  82c5ec:	1000081e 	bne	r2,zero,82c610 <lseek+0x4c>
  82c5f0:	e0bffc17 	ldw	r2,-16(fp)
  82c5f4:	10800324 	muli	r2,r2,12
  82c5f8:	1007883a 	mov	r3,r2
  82c5fc:	008020f4 	movhi	r2,131
  82c600:	1091d404 	addi	r2,r2,18256
  82c604:	1887883a 	add	r3,r3,r2
  82c608:	e0ffff15 	stw	r3,-4(fp)
  82c60c:	00000106 	br	82c614 <lseek+0x50>
  82c610:	e03fff15 	stw	zero,-4(fp)
  82c614:	e0bfff17 	ldw	r2,-4(fp)
  82c618:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  82c61c:	e0bffb17 	ldw	r2,-20(fp)
  82c620:	1005003a 	cmpeq	r2,r2,zero
  82c624:	1000111e 	bne	r2,zero,82c66c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  82c628:	e0bffb17 	ldw	r2,-20(fp)
  82c62c:	10800017 	ldw	r2,0(r2)
  82c630:	10800717 	ldw	r2,28(r2)
  82c634:	1005003a 	cmpeq	r2,r2,zero
  82c638:	1000091e 	bne	r2,zero,82c660 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  82c63c:	e0bffb17 	ldw	r2,-20(fp)
  82c640:	10800017 	ldw	r2,0(r2)
  82c644:	10800717 	ldw	r2,28(r2)
  82c648:	e13ffb17 	ldw	r4,-20(fp)
  82c64c:	e17ffd17 	ldw	r5,-12(fp)
  82c650:	e1bffe17 	ldw	r6,-8(fp)
  82c654:	103ee83a 	callr	r2
  82c658:	e0bffa15 	stw	r2,-24(fp)
  82c65c:	00000506 	br	82c674 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  82c660:	00bfde84 	movi	r2,-134
  82c664:	e0bffa15 	stw	r2,-24(fp)
  82c668:	00000206 	br	82c674 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  82c66c:	00bfebc4 	movi	r2,-81
  82c670:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  82c674:	e0bffa17 	ldw	r2,-24(fp)
  82c678:	1004403a 	cmpge	r2,r2,zero
  82c67c:	1000071e 	bne	r2,zero,82c69c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  82c680:	082c6b40 	call	82c6b4 <alt_get_errno>
  82c684:	1007883a 	mov	r3,r2
  82c688:	e0bffa17 	ldw	r2,-24(fp)
  82c68c:	0085c83a 	sub	r2,zero,r2
  82c690:	18800015 	stw	r2,0(r3)
    rc = -1;
  82c694:	00bfffc4 	movi	r2,-1
  82c698:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  82c69c:	e0bffa17 	ldw	r2,-24(fp)
}
  82c6a0:	e037883a 	mov	sp,fp
  82c6a4:	dfc00117 	ldw	ra,4(sp)
  82c6a8:	df000017 	ldw	fp,0(sp)
  82c6ac:	dec00204 	addi	sp,sp,8
  82c6b0:	f800283a 	ret

0082c6b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82c6b4:	defffd04 	addi	sp,sp,-12
  82c6b8:	dfc00215 	stw	ra,8(sp)
  82c6bc:	df000115 	stw	fp,4(sp)
  82c6c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82c6c4:	008020f4 	movhi	r2,131
  82c6c8:	10968004 	addi	r2,r2,23040
  82c6cc:	10800017 	ldw	r2,0(r2)
  82c6d0:	1005003a 	cmpeq	r2,r2,zero
  82c6d4:	1000061e 	bne	r2,zero,82c6f0 <alt_get_errno+0x3c>
  82c6d8:	008020f4 	movhi	r2,131
  82c6dc:	10968004 	addi	r2,r2,23040
  82c6e0:	10800017 	ldw	r2,0(r2)
  82c6e4:	103ee83a 	callr	r2
  82c6e8:	e0bfff15 	stw	r2,-4(fp)
  82c6ec:	00000306 	br	82c6fc <alt_get_errno+0x48>
  82c6f0:	008020f4 	movhi	r2,131
  82c6f4:	109e3504 	addi	r2,r2,30932
  82c6f8:	e0bfff15 	stw	r2,-4(fp)
  82c6fc:	e0bfff17 	ldw	r2,-4(fp)
}
  82c700:	e037883a 	mov	sp,fp
  82c704:	dfc00117 	ldw	ra,4(sp)
  82c708:	df000017 	ldw	fp,0(sp)
  82c70c:	dec00204 	addi	sp,sp,8
  82c710:	f800283a 	ret

0082c714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  82c714:	defffd04 	addi	sp,sp,-12
  82c718:	dfc00215 	stw	ra,8(sp)
  82c71c:	df000115 	stw	fp,4(sp)
  82c720:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  82c724:	0009883a 	mov	r4,zero
  82c728:	082cbdc0 	call	82cbdc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  82c72c:	082cc100 	call	82cc10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  82c730:	010020f4 	movhi	r4,131
  82c734:	210ec604 	addi	r4,r4,15128
  82c738:	014020f4 	movhi	r5,131
  82c73c:	294ec604 	addi	r5,r5,15128
  82c740:	018020f4 	movhi	r6,131
  82c744:	318ec604 	addi	r6,r6,15128
  82c748:	0832c500 	call	832c50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  82c74c:	08327340 	call	832734 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  82c750:	010020f4 	movhi	r4,131
  82c754:	2109e604 	addi	r4,r4,10136
  82c758:	08333b80 	call	8333b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  82c75c:	d127c817 	ldw	r4,-24800(gp)
  82c760:	d167c917 	ldw	r5,-24796(gp)
  82c764:	d1a7ca17 	ldw	r6,-24792(gp)
  82c768:	08219080 	call	821908 <main>
  82c76c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  82c770:	01000044 	movi	r4,1
  82c774:	082be980 	call	82be98 <close>
  exit (result);
  82c778:	e13fff17 	ldw	r4,-4(fp)
  82c77c:	08235180 	call	823518 <exit>

0082c780 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  82c780:	defffe04 	addi	sp,sp,-8
  82c784:	df000115 	stw	fp,4(sp)
  82c788:	df000104 	addi	fp,sp,4
  82c78c:	e13fff15 	stw	r4,-4(fp)
}
  82c790:	e037883a 	mov	sp,fp
  82c794:	df000017 	ldw	fp,0(sp)
  82c798:	dec00104 	addi	sp,sp,4
  82c79c:	f800283a 	ret

0082c7a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  82c7a0:	defffe04 	addi	sp,sp,-8
  82c7a4:	df000115 	stw	fp,4(sp)
  82c7a8:	df000104 	addi	fp,sp,4
  82c7ac:	e13fff15 	stw	r4,-4(fp)
}
  82c7b0:	e037883a 	mov	sp,fp
  82c7b4:	df000017 	ldw	fp,0(sp)
  82c7b8:	dec00104 	addi	sp,sp,4
  82c7bc:	f800283a 	ret

0082c7c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  82c7c0:	defff704 	addi	sp,sp,-36
  82c7c4:	dfc00815 	stw	ra,32(sp)
  82c7c8:	df000715 	stw	fp,28(sp)
  82c7cc:	df000704 	addi	fp,sp,28
  82c7d0:	e13ffb15 	stw	r4,-20(fp)
  82c7d4:	e17ffc15 	stw	r5,-16(fp)
  82c7d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82c7dc:	e0bffb17 	ldw	r2,-20(fp)
  82c7e0:	1004803a 	cmplt	r2,r2,zero
  82c7e4:	1000081e 	bne	r2,zero,82c808 <read+0x48>
  82c7e8:	e0bffb17 	ldw	r2,-20(fp)
  82c7ec:	10800324 	muli	r2,r2,12
  82c7f0:	1007883a 	mov	r3,r2
  82c7f4:	008020f4 	movhi	r2,131
  82c7f8:	1091d404 	addi	r2,r2,18256
  82c7fc:	1887883a 	add	r3,r3,r2
  82c800:	e0ffff15 	stw	r3,-4(fp)
  82c804:	00000106 	br	82c80c <read+0x4c>
  82c808:	e03fff15 	stw	zero,-4(fp)
  82c80c:	e0bfff17 	ldw	r2,-4(fp)
  82c810:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  82c814:	e0bffa17 	ldw	r2,-24(fp)
  82c818:	1005003a 	cmpeq	r2,r2,zero
  82c81c:	1000241e 	bne	r2,zero,82c8b0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  82c820:	e0bffa17 	ldw	r2,-24(fp)
  82c824:	10800217 	ldw	r2,8(r2)
  82c828:	108000cc 	andi	r2,r2,3
  82c82c:	10800060 	cmpeqi	r2,r2,1
  82c830:	10001a1e 	bne	r2,zero,82c89c <read+0xdc>
  82c834:	e0bffa17 	ldw	r2,-24(fp)
  82c838:	10800017 	ldw	r2,0(r2)
  82c83c:	10800517 	ldw	r2,20(r2)
  82c840:	1005003a 	cmpeq	r2,r2,zero
  82c844:	1000151e 	bne	r2,zero,82c89c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  82c848:	e0bffa17 	ldw	r2,-24(fp)
  82c84c:	10800017 	ldw	r2,0(r2)
  82c850:	10800517 	ldw	r2,20(r2)
  82c854:	e17ffc17 	ldw	r5,-16(fp)
  82c858:	e1bffd17 	ldw	r6,-12(fp)
  82c85c:	e13ffa17 	ldw	r4,-24(fp)
  82c860:	103ee83a 	callr	r2
  82c864:	e0bff915 	stw	r2,-28(fp)
  82c868:	e0bff917 	ldw	r2,-28(fp)
  82c86c:	1004403a 	cmpge	r2,r2,zero
  82c870:	1000071e 	bne	r2,zero,82c890 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  82c874:	082c8e00 	call	82c8e0 <alt_get_errno>
  82c878:	e0fff917 	ldw	r3,-28(fp)
  82c87c:	00c7c83a 	sub	r3,zero,r3
  82c880:	10c00015 	stw	r3,0(r2)
          return -1;
  82c884:	00bfffc4 	movi	r2,-1
  82c888:	e0bffe15 	stw	r2,-8(fp)
  82c88c:	00000e06 	br	82c8c8 <read+0x108>
        }
        return rval;
  82c890:	e0bff917 	ldw	r2,-28(fp)
  82c894:	e0bffe15 	stw	r2,-8(fp)
  82c898:	00000b06 	br	82c8c8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  82c89c:	082c8e00 	call	82c8e0 <alt_get_errno>
  82c8a0:	1007883a 	mov	r3,r2
  82c8a4:	00800344 	movi	r2,13
  82c8a8:	18800015 	stw	r2,0(r3)
  82c8ac:	00000406 	br	82c8c0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  82c8b0:	082c8e00 	call	82c8e0 <alt_get_errno>
  82c8b4:	1007883a 	mov	r3,r2
  82c8b8:	00801444 	movi	r2,81
  82c8bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  82c8c0:	00bfffc4 	movi	r2,-1
  82c8c4:	e0bffe15 	stw	r2,-8(fp)
  82c8c8:	e0bffe17 	ldw	r2,-8(fp)
}
  82c8cc:	e037883a 	mov	sp,fp
  82c8d0:	dfc00117 	ldw	ra,4(sp)
  82c8d4:	df000017 	ldw	fp,0(sp)
  82c8d8:	dec00204 	addi	sp,sp,8
  82c8dc:	f800283a 	ret

0082c8e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82c8e0:	defffd04 	addi	sp,sp,-12
  82c8e4:	dfc00215 	stw	ra,8(sp)
  82c8e8:	df000115 	stw	fp,4(sp)
  82c8ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82c8f0:	008020f4 	movhi	r2,131
  82c8f4:	10968004 	addi	r2,r2,23040
  82c8f8:	10800017 	ldw	r2,0(r2)
  82c8fc:	1005003a 	cmpeq	r2,r2,zero
  82c900:	1000061e 	bne	r2,zero,82c91c <alt_get_errno+0x3c>
  82c904:	008020f4 	movhi	r2,131
  82c908:	10968004 	addi	r2,r2,23040
  82c90c:	10800017 	ldw	r2,0(r2)
  82c910:	103ee83a 	callr	r2
  82c914:	e0bfff15 	stw	r2,-4(fp)
  82c918:	00000306 	br	82c928 <alt_get_errno+0x48>
  82c91c:	008020f4 	movhi	r2,131
  82c920:	109e3504 	addi	r2,r2,30932
  82c924:	e0bfff15 	stw	r2,-4(fp)
  82c928:	e0bfff17 	ldw	r2,-4(fp)
}
  82c92c:	e037883a 	mov	sp,fp
  82c930:	dfc00117 	ldw	ra,4(sp)
  82c934:	df000017 	ldw	fp,0(sp)
  82c938:	dec00204 	addi	sp,sp,8
  82c93c:	f800283a 	ret

0082c940 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  82c940:	defffe04 	addi	sp,sp,-8
  82c944:	df000115 	stw	fp,4(sp)
  82c948:	df000104 	addi	fp,sp,4
  82c94c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  82c950:	e0bfff17 	ldw	r2,-4(fp)
  82c954:	108000d0 	cmplti	r2,r2,3
  82c958:	10000d1e 	bne	r2,zero,82c990 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  82c95c:	e0bfff17 	ldw	r2,-4(fp)
  82c960:	00c020f4 	movhi	r3,131
  82c964:	18d1d404 	addi	r3,r3,18256
  82c968:	10800324 	muli	r2,r2,12
  82c96c:	10c5883a 	add	r2,r2,r3
  82c970:	10800204 	addi	r2,r2,8
  82c974:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  82c978:	e0bfff17 	ldw	r2,-4(fp)
  82c97c:	00c020f4 	movhi	r3,131
  82c980:	18d1d404 	addi	r3,r3,18256
  82c984:	10800324 	muli	r2,r2,12
  82c988:	10c5883a 	add	r2,r2,r3
  82c98c:	10000015 	stw	zero,0(r2)
  }
}
  82c990:	e037883a 	mov	sp,fp
  82c994:	df000017 	ldw	fp,0(sp)
  82c998:	dec00104 	addi	sp,sp,4
  82c99c:	f800283a 	ret

0082c9a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  82c9a0:	defff804 	addi	sp,sp,-32
  82c9a4:	df000715 	stw	fp,28(sp)
  82c9a8:	df000704 	addi	fp,sp,28
  82c9ac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82c9b0:	0005303a 	rdctl	r2,status
  82c9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82c9b8:	e0fffb17 	ldw	r3,-20(fp)
  82c9bc:	00bfff84 	movi	r2,-2
  82c9c0:	1884703a 	and	r2,r3,r2
  82c9c4:	1001703a 	wrctl	status,r2
  
  return context;
  82c9c8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  82c9cc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  82c9d0:	d0a00d17 	ldw	r2,-32716(gp)
  82c9d4:	10c000c4 	addi	r3,r2,3
  82c9d8:	00bfff04 	movi	r2,-4
  82c9dc:	1884703a 	and	r2,r3,r2
  82c9e0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  82c9e4:	d0e00d17 	ldw	r3,-32716(gp)
  82c9e8:	e0bffe17 	ldw	r2,-8(fp)
  82c9ec:	1887883a 	add	r3,r3,r2
  82c9f0:	00804034 	movhi	r2,256
  82c9f4:	10800004 	addi	r2,r2,0
  82c9f8:	10c0072e 	bgeu	r2,r3,82ca18 <sbrk+0x78>
  82c9fc:	e0bffd17 	ldw	r2,-12(fp)
  82ca00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82ca04:	e0bffa17 	ldw	r2,-24(fp)
  82ca08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  82ca0c:	00bfffc4 	movi	r2,-1
  82ca10:	e0bfff15 	stw	r2,-4(fp)
  82ca14:	00000c06 	br	82ca48 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  82ca18:	d0a00d17 	ldw	r2,-32716(gp)
  82ca1c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  82ca20:	d0e00d17 	ldw	r3,-32716(gp)
  82ca24:	e0bffe17 	ldw	r2,-8(fp)
  82ca28:	1885883a 	add	r2,r3,r2
  82ca2c:	d0a00d15 	stw	r2,-32716(gp)
  82ca30:	e0bffd17 	ldw	r2,-12(fp)
  82ca34:	e0bff915 	stw	r2,-28(fp)
  82ca38:	e0bff917 	ldw	r2,-28(fp)
  82ca3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  82ca40:	e0bffc17 	ldw	r2,-16(fp)
  82ca44:	e0bfff15 	stw	r2,-4(fp)
  82ca48:	e0bfff17 	ldw	r2,-4(fp)
} 
  82ca4c:	e037883a 	mov	sp,fp
  82ca50:	df000017 	ldw	fp,0(sp)
  82ca54:	dec00104 	addi	sp,sp,4
  82ca58:	f800283a 	ret

0082ca5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  82ca5c:	defff704 	addi	sp,sp,-36
  82ca60:	dfc00815 	stw	ra,32(sp)
  82ca64:	df000715 	stw	fp,28(sp)
  82ca68:	df000704 	addi	fp,sp,28
  82ca6c:	e13ffb15 	stw	r4,-20(fp)
  82ca70:	e17ffc15 	stw	r5,-16(fp)
  82ca74:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  82ca78:	e0bffb17 	ldw	r2,-20(fp)
  82ca7c:	1004803a 	cmplt	r2,r2,zero
  82ca80:	1000081e 	bne	r2,zero,82caa4 <write+0x48>
  82ca84:	e0bffb17 	ldw	r2,-20(fp)
  82ca88:	10800324 	muli	r2,r2,12
  82ca8c:	1007883a 	mov	r3,r2
  82ca90:	008020f4 	movhi	r2,131
  82ca94:	1091d404 	addi	r2,r2,18256
  82ca98:	1887883a 	add	r3,r3,r2
  82ca9c:	e0ffff15 	stw	r3,-4(fp)
  82caa0:	00000106 	br	82caa8 <write+0x4c>
  82caa4:	e03fff15 	stw	zero,-4(fp)
  82caa8:	e0bfff17 	ldw	r2,-4(fp)
  82caac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  82cab0:	e0bffa17 	ldw	r2,-24(fp)
  82cab4:	1005003a 	cmpeq	r2,r2,zero
  82cab8:	1000241e 	bne	r2,zero,82cb4c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  82cabc:	e0bffa17 	ldw	r2,-24(fp)
  82cac0:	10800217 	ldw	r2,8(r2)
  82cac4:	108000cc 	andi	r2,r2,3
  82cac8:	1005003a 	cmpeq	r2,r2,zero
  82cacc:	10001a1e 	bne	r2,zero,82cb38 <write+0xdc>
  82cad0:	e0bffa17 	ldw	r2,-24(fp)
  82cad4:	10800017 	ldw	r2,0(r2)
  82cad8:	10800617 	ldw	r2,24(r2)
  82cadc:	1005003a 	cmpeq	r2,r2,zero
  82cae0:	1000151e 	bne	r2,zero,82cb38 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  82cae4:	e0bffa17 	ldw	r2,-24(fp)
  82cae8:	10800017 	ldw	r2,0(r2)
  82caec:	10800617 	ldw	r2,24(r2)
  82caf0:	e17ffc17 	ldw	r5,-16(fp)
  82caf4:	e1bffd17 	ldw	r6,-12(fp)
  82caf8:	e13ffa17 	ldw	r4,-24(fp)
  82cafc:	103ee83a 	callr	r2
  82cb00:	e0bff915 	stw	r2,-28(fp)
  82cb04:	e0bff917 	ldw	r2,-28(fp)
  82cb08:	1004403a 	cmpge	r2,r2,zero
  82cb0c:	1000071e 	bne	r2,zero,82cb2c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  82cb10:	082cb7c0 	call	82cb7c <alt_get_errno>
  82cb14:	e0fff917 	ldw	r3,-28(fp)
  82cb18:	00c7c83a 	sub	r3,zero,r3
  82cb1c:	10c00015 	stw	r3,0(r2)
        return -1;
  82cb20:	00bfffc4 	movi	r2,-1
  82cb24:	e0bffe15 	stw	r2,-8(fp)
  82cb28:	00000e06 	br	82cb64 <write+0x108>
      }
      return rval;
  82cb2c:	e0bff917 	ldw	r2,-28(fp)
  82cb30:	e0bffe15 	stw	r2,-8(fp)
  82cb34:	00000b06 	br	82cb64 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  82cb38:	082cb7c0 	call	82cb7c <alt_get_errno>
  82cb3c:	1007883a 	mov	r3,r2
  82cb40:	00800344 	movi	r2,13
  82cb44:	18800015 	stw	r2,0(r3)
  82cb48:	00000406 	br	82cb5c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  82cb4c:	082cb7c0 	call	82cb7c <alt_get_errno>
  82cb50:	1007883a 	mov	r3,r2
  82cb54:	00801444 	movi	r2,81
  82cb58:	18800015 	stw	r2,0(r3)
  }
  return -1;
  82cb5c:	00bfffc4 	movi	r2,-1
  82cb60:	e0bffe15 	stw	r2,-8(fp)
  82cb64:	e0bffe17 	ldw	r2,-8(fp)
}
  82cb68:	e037883a 	mov	sp,fp
  82cb6c:	dfc00117 	ldw	ra,4(sp)
  82cb70:	df000017 	ldw	fp,0(sp)
  82cb74:	dec00204 	addi	sp,sp,8
  82cb78:	f800283a 	ret

0082cb7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82cb7c:	defffd04 	addi	sp,sp,-12
  82cb80:	dfc00215 	stw	ra,8(sp)
  82cb84:	df000115 	stw	fp,4(sp)
  82cb88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82cb8c:	008020f4 	movhi	r2,131
  82cb90:	10968004 	addi	r2,r2,23040
  82cb94:	10800017 	ldw	r2,0(r2)
  82cb98:	1005003a 	cmpeq	r2,r2,zero
  82cb9c:	1000061e 	bne	r2,zero,82cbb8 <alt_get_errno+0x3c>
  82cba0:	008020f4 	movhi	r2,131
  82cba4:	10968004 	addi	r2,r2,23040
  82cba8:	10800017 	ldw	r2,0(r2)
  82cbac:	103ee83a 	callr	r2
  82cbb0:	e0bfff15 	stw	r2,-4(fp)
  82cbb4:	00000306 	br	82cbc4 <alt_get_errno+0x48>
  82cbb8:	008020f4 	movhi	r2,131
  82cbbc:	109e3504 	addi	r2,r2,30932
  82cbc0:	e0bfff15 	stw	r2,-4(fp)
  82cbc4:	e0bfff17 	ldw	r2,-4(fp)
}
  82cbc8:	e037883a 	mov	sp,fp
  82cbcc:	dfc00117 	ldw	ra,4(sp)
  82cbd0:	df000017 	ldw	fp,0(sp)
  82cbd4:	dec00204 	addi	sp,sp,8
  82cbd8:	f800283a 	ret

0082cbdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  82cbdc:	defffd04 	addi	sp,sp,-12
  82cbe0:	dfc00215 	stw	ra,8(sp)
  82cbe4:	df000115 	stw	fp,4(sp)
  82cbe8:	df000104 	addi	fp,sp,4
  82cbec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_1, cpu_1);
  82cbf0:	08331300 	call	833130 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  82cbf4:	00800044 	movi	r2,1
  82cbf8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  82cbfc:	e037883a 	mov	sp,fp
  82cc00:	dfc00117 	ldw	ra,4(sp)
  82cc04:	df000017 	ldw	fp,0(sp)
  82cc08:	dec00204 	addi	sp,sp,8
  82cc0c:	f800283a 	ret

0082cc10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  82cc10:	defffe04 	addi	sp,sp,-8
  82cc14:	dfc00115 	stw	ra,4(sp)
  82cc18:	df000015 	stw	fp,0(sp)
  82cc1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
  82cc20:	01040004 	movi	r4,4096
  82cc24:	000b883a 	mov	r5,zero
  82cc28:	01800044 	movi	r6,1
  82cc2c:	01c0fa04 	movi	r7,1000
  82cc30:	082e00c0 	call	82e00c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
  82cc34:	010020f4 	movhi	r4,131
  82cc38:	21123e04 	addi	r4,r4,18680
  82cc3c:	000b883a 	mov	r5,zero
  82cc40:	01800084 	movi	r6,2
  82cc44:	082ce0c0 	call	82ce0c <altera_avalon_jtag_uart_init>
  82cc48:	010020f4 	movhi	r4,131
  82cc4c:	21123404 	addi	r4,r4,18640
  82cc50:	082cc8c0 	call	82cc8c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  82cc54:	010020f4 	movhi	r4,131
  82cc58:	21164c04 	addi	r4,r4,22832
  82cc5c:	082d7700 	call	82d770 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  82cc60:	010020f4 	movhi	r4,131
  82cc64:	21165b04 	addi	r4,r4,22892
  82cc68:	082d7700 	call	82d770 <alt_avalon_mailbox_init>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  82cc6c:	010020f4 	movhi	r4,131
  82cc70:	21166a04 	addi	r4,r4,22952
  82cc74:	082cc8c0 	call	82cc8c <alt_dev_reg>
}
  82cc78:	e037883a 	mov	sp,fp
  82cc7c:	dfc00117 	ldw	ra,4(sp)
  82cc80:	df000017 	ldw	fp,0(sp)
  82cc84:	dec00204 	addi	sp,sp,8
  82cc88:	f800283a 	ret

0082cc8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  82cc8c:	defffd04 	addi	sp,sp,-12
  82cc90:	dfc00215 	stw	ra,8(sp)
  82cc94:	df000115 	stw	fp,4(sp)
  82cc98:	df000104 	addi	fp,sp,4
  82cc9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  82cca0:	e13fff17 	ldw	r4,-4(fp)
  82cca4:	014020f4 	movhi	r5,131
  82cca8:	29567d04 	addi	r5,r5,23028
  82ccac:	08326200 	call	832620 <alt_dev_llist_insert>
}
  82ccb0:	e037883a 	mov	sp,fp
  82ccb4:	dfc00117 	ldw	ra,4(sp)
  82ccb8:	df000017 	ldw	fp,0(sp)
  82ccbc:	dec00204 	addi	sp,sp,8
  82ccc0:	f800283a 	ret

0082ccc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  82ccc4:	defffa04 	addi	sp,sp,-24
  82ccc8:	dfc00515 	stw	ra,20(sp)
  82cccc:	df000415 	stw	fp,16(sp)
  82ccd0:	df000404 	addi	fp,sp,16
  82ccd4:	e13ffd15 	stw	r4,-12(fp)
  82ccd8:	e17ffe15 	stw	r5,-8(fp)
  82ccdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  82cce0:	e0bffd17 	ldw	r2,-12(fp)
  82cce4:	10800017 	ldw	r2,0(r2)
  82cce8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  82ccec:	e0bffc17 	ldw	r2,-16(fp)
  82ccf0:	11000a04 	addi	r4,r2,40
  82ccf4:	e0bffd17 	ldw	r2,-12(fp)
  82ccf8:	11c00217 	ldw	r7,8(r2)
  82ccfc:	e17ffe17 	ldw	r5,-8(fp)
  82cd00:	e1bfff17 	ldw	r6,-4(fp)
  82cd04:	082d30c0 	call	82d30c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  82cd08:	e037883a 	mov	sp,fp
  82cd0c:	dfc00117 	ldw	ra,4(sp)
  82cd10:	df000017 	ldw	fp,0(sp)
  82cd14:	dec00204 	addi	sp,sp,8
  82cd18:	f800283a 	ret

0082cd1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  82cd1c:	defffa04 	addi	sp,sp,-24
  82cd20:	dfc00515 	stw	ra,20(sp)
  82cd24:	df000415 	stw	fp,16(sp)
  82cd28:	df000404 	addi	fp,sp,16
  82cd2c:	e13ffd15 	stw	r4,-12(fp)
  82cd30:	e17ffe15 	stw	r5,-8(fp)
  82cd34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  82cd38:	e0bffd17 	ldw	r2,-12(fp)
  82cd3c:	10800017 	ldw	r2,0(r2)
  82cd40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  82cd44:	e0bffc17 	ldw	r2,-16(fp)
  82cd48:	11000a04 	addi	r4,r2,40
  82cd4c:	e0bffd17 	ldw	r2,-12(fp)
  82cd50:	11c00217 	ldw	r7,8(r2)
  82cd54:	e17ffe17 	ldw	r5,-8(fp)
  82cd58:	e1bfff17 	ldw	r6,-4(fp)
  82cd5c:	082d5300 	call	82d530 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  82cd60:	e037883a 	mov	sp,fp
  82cd64:	dfc00117 	ldw	ra,4(sp)
  82cd68:	df000017 	ldw	fp,0(sp)
  82cd6c:	dec00204 	addi	sp,sp,8
  82cd70:	f800283a 	ret

0082cd74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  82cd74:	defffc04 	addi	sp,sp,-16
  82cd78:	dfc00315 	stw	ra,12(sp)
  82cd7c:	df000215 	stw	fp,8(sp)
  82cd80:	df000204 	addi	fp,sp,8
  82cd84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  82cd88:	e0bfff17 	ldw	r2,-4(fp)
  82cd8c:	10800017 	ldw	r2,0(r2)
  82cd90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  82cd94:	e0bffe17 	ldw	r2,-8(fp)
  82cd98:	11000a04 	addi	r4,r2,40
  82cd9c:	e0bfff17 	ldw	r2,-4(fp)
  82cda0:	11400217 	ldw	r5,8(r2)
  82cda4:	082d1a40 	call	82d1a4 <altera_avalon_jtag_uart_close>
}
  82cda8:	e037883a 	mov	sp,fp
  82cdac:	dfc00117 	ldw	ra,4(sp)
  82cdb0:	df000017 	ldw	fp,0(sp)
  82cdb4:	dec00204 	addi	sp,sp,8
  82cdb8:	f800283a 	ret

0082cdbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  82cdbc:	defffa04 	addi	sp,sp,-24
  82cdc0:	dfc00515 	stw	ra,20(sp)
  82cdc4:	df000415 	stw	fp,16(sp)
  82cdc8:	df000404 	addi	fp,sp,16
  82cdcc:	e13ffd15 	stw	r4,-12(fp)
  82cdd0:	e17ffe15 	stw	r5,-8(fp)
  82cdd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  82cdd8:	e0bffd17 	ldw	r2,-12(fp)
  82cddc:	10800017 	ldw	r2,0(r2)
  82cde0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  82cde4:	e0bffc17 	ldw	r2,-16(fp)
  82cde8:	11000a04 	addi	r4,r2,40
  82cdec:	e17ffe17 	ldw	r5,-8(fp)
  82cdf0:	e1bfff17 	ldw	r6,-4(fp)
  82cdf4:	082d2180 	call	82d218 <altera_avalon_jtag_uart_ioctl>
}
  82cdf8:	e037883a 	mov	sp,fp
  82cdfc:	dfc00117 	ldw	ra,4(sp)
  82ce00:	df000017 	ldw	fp,0(sp)
  82ce04:	dec00204 	addi	sp,sp,8
  82ce08:	f800283a 	ret

0082ce0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  82ce0c:	defffa04 	addi	sp,sp,-24
  82ce10:	dfc00515 	stw	ra,20(sp)
  82ce14:	df000415 	stw	fp,16(sp)
  82ce18:	df000404 	addi	fp,sp,16
  82ce1c:	e13ffd15 	stw	r4,-12(fp)
  82ce20:	e17ffe15 	stw	r5,-8(fp)
  82ce24:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82ce28:	e0fffd17 	ldw	r3,-12(fp)
  82ce2c:	00800044 	movi	r2,1
  82ce30:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  82ce34:	e0bffd17 	ldw	r2,-12(fp)
  82ce38:	10800017 	ldw	r2,0(r2)
  82ce3c:	11000104 	addi	r4,r2,4
  82ce40:	e0bffd17 	ldw	r2,-12(fp)
  82ce44:	10800817 	ldw	r2,32(r2)
  82ce48:	1007883a 	mov	r3,r2
  82ce4c:	2005883a 	mov	r2,r4
  82ce50:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  82ce54:	e13ffe17 	ldw	r4,-8(fp)
  82ce58:	e17fff17 	ldw	r5,-4(fp)
  82ce5c:	d8000015 	stw	zero,0(sp)
  82ce60:	018020f4 	movhi	r6,131
  82ce64:	31b3b304 	addi	r6,r6,-12596
  82ce68:	e1fffd17 	ldw	r7,-12(fp)
  82ce6c:	08328c00 	call	8328c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  82ce70:	e0bffd17 	ldw	r2,-12(fp)
  82ce74:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  82ce78:	e0bffd17 	ldw	r2,-12(fp)
  82ce7c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  82ce80:	008020f4 	movhi	r2,131
  82ce84:	109e4d04 	addi	r2,r2,31028
  82ce88:	10800017 	ldw	r2,0(r2)
  82ce8c:	100b883a 	mov	r5,r2
  82ce90:	018020f4 	movhi	r6,131
  82ce94:	31b43d04 	addi	r6,r6,-12044
  82ce98:	e1fffd17 	ldw	r7,-12(fp)
  82ce9c:	08324cc0 	call	8324cc <alt_alarm_start>
  82cea0:	1004403a 	cmpge	r2,r2,zero
  82cea4:	1000041e 	bne	r2,zero,82ceb8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  82cea8:	e0fffd17 	ldw	r3,-12(fp)
  82ceac:	00a00034 	movhi	r2,32768
  82ceb0:	10bfffc4 	addi	r2,r2,-1
  82ceb4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  82ceb8:	e037883a 	mov	sp,fp
  82cebc:	dfc00117 	ldw	ra,4(sp)
  82cec0:	df000017 	ldw	fp,0(sp)
  82cec4:	dec00204 	addi	sp,sp,8
  82cec8:	f800283a 	ret

0082cecc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  82cecc:	defff804 	addi	sp,sp,-32
  82ced0:	df000715 	stw	fp,28(sp)
  82ced4:	df000704 	addi	fp,sp,28
  82ced8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  82cedc:	e0bfff17 	ldw	r2,-4(fp)
  82cee0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  82cee4:	e0bffe17 	ldw	r2,-8(fp)
  82cee8:	10800017 	ldw	r2,0(r2)
  82ceec:	e0bffd15 	stw	r2,-12(fp)
  82cef0:	00000006 	br	82cef4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82cef4:	e0bffd17 	ldw	r2,-12(fp)
  82cef8:	10800104 	addi	r2,r2,4
  82cefc:	10800037 	ldwio	r2,0(r2)
  82cf00:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  82cf04:	e0bffc17 	ldw	r2,-16(fp)
  82cf08:	1080c00c 	andi	r2,r2,768
  82cf0c:	1005003a 	cmpeq	r2,r2,zero
  82cf10:	1000741e 	bne	r2,zero,82d0e4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  82cf14:	e0bffc17 	ldw	r2,-16(fp)
  82cf18:	1080400c 	andi	r2,r2,256
  82cf1c:	1005003a 	cmpeq	r2,r2,zero
  82cf20:	1000351e 	bne	r2,zero,82cff8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  82cf24:	00800074 	movhi	r2,1
  82cf28:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82cf2c:	e0bffe17 	ldw	r2,-8(fp)
  82cf30:	10800a17 	ldw	r2,40(r2)
  82cf34:	10800044 	addi	r2,r2,1
  82cf38:	1081ffcc 	andi	r2,r2,2047
  82cf3c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  82cf40:	e0bffe17 	ldw	r2,-8(fp)
  82cf44:	10c00b17 	ldw	r3,44(r2)
  82cf48:	e0bffa17 	ldw	r2,-24(fp)
  82cf4c:	18801626 	beq	r3,r2,82cfa8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  82cf50:	e0bffd17 	ldw	r2,-12(fp)
  82cf54:	10800037 	ldwio	r2,0(r2)
  82cf58:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  82cf5c:	e0bffb17 	ldw	r2,-20(fp)
  82cf60:	10a0000c 	andi	r2,r2,32768
  82cf64:	1005003a 	cmpeq	r2,r2,zero
  82cf68:	10000f1e 	bne	r2,zero,82cfa8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  82cf6c:	e0bffe17 	ldw	r2,-8(fp)
  82cf70:	10c00a17 	ldw	r3,40(r2)
  82cf74:	e0bffb17 	ldw	r2,-20(fp)
  82cf78:	1009883a 	mov	r4,r2
  82cf7c:	e0bffe17 	ldw	r2,-8(fp)
  82cf80:	1885883a 	add	r2,r3,r2
  82cf84:	10800e04 	addi	r2,r2,56
  82cf88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82cf8c:	e0bffe17 	ldw	r2,-8(fp)
  82cf90:	10800a17 	ldw	r2,40(r2)
  82cf94:	10800044 	addi	r2,r2,1
  82cf98:	10c1ffcc 	andi	r3,r2,2047
  82cf9c:	e0bffe17 	ldw	r2,-8(fp)
  82cfa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  82cfa4:	003fe106 	br	82cf2c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  82cfa8:	e0bffb17 	ldw	r2,-20(fp)
  82cfac:	10bfffec 	andhi	r2,r2,65535
  82cfb0:	1005003a 	cmpeq	r2,r2,zero
  82cfb4:	1000101e 	bne	r2,zero,82cff8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82cfb8:	e0bffe17 	ldw	r2,-8(fp)
  82cfbc:	10c00817 	ldw	r3,32(r2)
  82cfc0:	00bfff84 	movi	r2,-2
  82cfc4:	1886703a 	and	r3,r3,r2
  82cfc8:	e0bffe17 	ldw	r2,-8(fp)
  82cfcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  82cfd0:	e0bffd17 	ldw	r2,-12(fp)
  82cfd4:	11000104 	addi	r4,r2,4
  82cfd8:	e0bffe17 	ldw	r2,-8(fp)
  82cfdc:	10800817 	ldw	r2,32(r2)
  82cfe0:	1007883a 	mov	r3,r2
  82cfe4:	2005883a 	mov	r2,r4
  82cfe8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82cfec:	e0bffd17 	ldw	r2,-12(fp)
  82cff0:	10800104 	addi	r2,r2,4
  82cff4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  82cff8:	e0bffc17 	ldw	r2,-16(fp)
  82cffc:	1080800c 	andi	r2,r2,512
  82d000:	1005003a 	cmpeq	r2,r2,zero
  82d004:	103fbb1e 	bne	r2,zero,82cef4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  82d008:	e0bffc17 	ldw	r2,-16(fp)
  82d00c:	10bfffec 	andhi	r2,r2,65535
  82d010:	1004d43a 	srli	r2,r2,16
  82d014:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  82d018:	00001506 	br	82d070 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  82d01c:	e13ffd17 	ldw	r4,-12(fp)
  82d020:	e0bffe17 	ldw	r2,-8(fp)
  82d024:	10c00d17 	ldw	r3,52(r2)
  82d028:	e0bffe17 	ldw	r2,-8(fp)
  82d02c:	1885883a 	add	r2,r3,r2
  82d030:	10820e04 	addi	r2,r2,2104
  82d034:	10800003 	ldbu	r2,0(r2)
  82d038:	10c03fcc 	andi	r3,r2,255
  82d03c:	18c0201c 	xori	r3,r3,128
  82d040:	18ffe004 	addi	r3,r3,-128
  82d044:	2005883a 	mov	r2,r4
  82d048:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82d04c:	e0bffe17 	ldw	r2,-8(fp)
  82d050:	10800d17 	ldw	r2,52(r2)
  82d054:	10800044 	addi	r2,r2,1
  82d058:	10c1ffcc 	andi	r3,r2,2047
  82d05c:	e0bffe17 	ldw	r2,-8(fp)
  82d060:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  82d064:	e0bff917 	ldw	r2,-28(fp)
  82d068:	10bfffc4 	addi	r2,r2,-1
  82d06c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  82d070:	e0bff917 	ldw	r2,-28(fp)
  82d074:	1005003a 	cmpeq	r2,r2,zero
  82d078:	1000051e 	bne	r2,zero,82d090 <altera_avalon_jtag_uart_irq+0x1c4>
  82d07c:	e0bffe17 	ldw	r2,-8(fp)
  82d080:	10c00d17 	ldw	r3,52(r2)
  82d084:	e0bffe17 	ldw	r2,-8(fp)
  82d088:	10800c17 	ldw	r2,48(r2)
  82d08c:	18bfe31e 	bne	r3,r2,82d01c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  82d090:	e0bff917 	ldw	r2,-28(fp)
  82d094:	1005003a 	cmpeq	r2,r2,zero
  82d098:	103f961e 	bne	r2,zero,82cef4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82d09c:	e0bffe17 	ldw	r2,-8(fp)
  82d0a0:	10c00817 	ldw	r3,32(r2)
  82d0a4:	00bfff44 	movi	r2,-3
  82d0a8:	1886703a 	and	r3,r3,r2
  82d0ac:	e0bffe17 	ldw	r2,-8(fp)
  82d0b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82d0b4:	e0bffe17 	ldw	r2,-8(fp)
  82d0b8:	10800017 	ldw	r2,0(r2)
  82d0bc:	11000104 	addi	r4,r2,4
  82d0c0:	e0bffe17 	ldw	r2,-8(fp)
  82d0c4:	10800817 	ldw	r2,32(r2)
  82d0c8:	1007883a 	mov	r3,r2
  82d0cc:	2005883a 	mov	r2,r4
  82d0d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82d0d4:	e0bffd17 	ldw	r2,-12(fp)
  82d0d8:	10800104 	addi	r2,r2,4
  82d0dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  82d0e0:	003f8406 	br	82cef4 <altera_avalon_jtag_uart_irq+0x28>
}
  82d0e4:	e037883a 	mov	sp,fp
  82d0e8:	df000017 	ldw	fp,0(sp)
  82d0ec:	dec00104 	addi	sp,sp,4
  82d0f0:	f800283a 	ret

0082d0f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  82d0f4:	defffc04 	addi	sp,sp,-16
  82d0f8:	df000315 	stw	fp,12(sp)
  82d0fc:	df000304 	addi	fp,sp,12
  82d100:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  82d104:	e0bfff17 	ldw	r2,-4(fp)
  82d108:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  82d10c:	e0bffe17 	ldw	r2,-8(fp)
  82d110:	10800017 	ldw	r2,0(r2)
  82d114:	10800104 	addi	r2,r2,4
  82d118:	10800037 	ldwio	r2,0(r2)
  82d11c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  82d120:	e0bffd17 	ldw	r2,-12(fp)
  82d124:	1081000c 	andi	r2,r2,1024
  82d128:	1005003a 	cmpeq	r2,r2,zero
  82d12c:	10000c1e 	bne	r2,zero,82d160 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  82d130:	e0bffe17 	ldw	r2,-8(fp)
  82d134:	10800017 	ldw	r2,0(r2)
  82d138:	11000104 	addi	r4,r2,4
  82d13c:	e0bffe17 	ldw	r2,-8(fp)
  82d140:	10800817 	ldw	r2,32(r2)
  82d144:	10810014 	ori	r2,r2,1024
  82d148:	1007883a 	mov	r3,r2
  82d14c:	2005883a 	mov	r2,r4
  82d150:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  82d154:	e0bffe17 	ldw	r2,-8(fp)
  82d158:	10000915 	stw	zero,36(r2)
  82d15c:	00000a06 	br	82d188 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  82d160:	e0bffe17 	ldw	r2,-8(fp)
  82d164:	10c00917 	ldw	r3,36(r2)
  82d168:	00a00034 	movhi	r2,32768
  82d16c:	10bfff04 	addi	r2,r2,-4
  82d170:	10c00536 	bltu	r2,r3,82d188 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  82d174:	e0bffe17 	ldw	r2,-8(fp)
  82d178:	10800917 	ldw	r2,36(r2)
  82d17c:	10c00044 	addi	r3,r2,1
  82d180:	e0bffe17 	ldw	r2,-8(fp)
  82d184:	10c00915 	stw	r3,36(r2)
  82d188:	008020f4 	movhi	r2,131
  82d18c:	109e4d04 	addi	r2,r2,31028
  82d190:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  82d194:	e037883a 	mov	sp,fp
  82d198:	df000017 	ldw	fp,0(sp)
  82d19c:	dec00104 	addi	sp,sp,4
  82d1a0:	f800283a 	ret

0082d1a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  82d1a4:	defffc04 	addi	sp,sp,-16
  82d1a8:	df000315 	stw	fp,12(sp)
  82d1ac:	df000304 	addi	fp,sp,12
  82d1b0:	e13ffd15 	stw	r4,-12(fp)
  82d1b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  82d1b8:	00000706 	br	82d1d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  82d1bc:	e0bffe17 	ldw	r2,-8(fp)
  82d1c0:	1090000c 	andi	r2,r2,16384
  82d1c4:	1005003a 	cmpeq	r2,r2,zero
  82d1c8:	1000031e 	bne	r2,zero,82d1d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  82d1cc:	00bffd44 	movi	r2,-11
  82d1d0:	e0bfff15 	stw	r2,-4(fp)
  82d1d4:	00000b06 	br	82d204 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  82d1d8:	e0bffd17 	ldw	r2,-12(fp)
  82d1dc:	10c00d17 	ldw	r3,52(r2)
  82d1e0:	e0bffd17 	ldw	r2,-12(fp)
  82d1e4:	10800c17 	ldw	r2,48(r2)
  82d1e8:	18800526 	beq	r3,r2,82d200 <altera_avalon_jtag_uart_close+0x5c>
  82d1ec:	e0bffd17 	ldw	r2,-12(fp)
  82d1f0:	10c00917 	ldw	r3,36(r2)
  82d1f4:	e0bffd17 	ldw	r2,-12(fp)
  82d1f8:	10800117 	ldw	r2,4(r2)
  82d1fc:	18bfef36 	bltu	r3,r2,82d1bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  82d200:	e03fff15 	stw	zero,-4(fp)
  82d204:	e0bfff17 	ldw	r2,-4(fp)
}
  82d208:	e037883a 	mov	sp,fp
  82d20c:	df000017 	ldw	fp,0(sp)
  82d210:	dec00104 	addi	sp,sp,4
  82d214:	f800283a 	ret

0082d218 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  82d218:	defff804 	addi	sp,sp,-32
  82d21c:	df000715 	stw	fp,28(sp)
  82d220:	df000704 	addi	fp,sp,28
  82d224:	e13ffb15 	stw	r4,-20(fp)
  82d228:	e17ffc15 	stw	r5,-16(fp)
  82d22c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  82d230:	00bff9c4 	movi	r2,-25
  82d234:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  82d238:	e0bffc17 	ldw	r2,-16(fp)
  82d23c:	e0bfff15 	stw	r2,-4(fp)
  82d240:	e0ffff17 	ldw	r3,-4(fp)
  82d244:	189a8060 	cmpeqi	r2,r3,27137
  82d248:	1000041e 	bne	r2,zero,82d25c <altera_avalon_jtag_uart_ioctl+0x44>
  82d24c:	e0ffff17 	ldw	r3,-4(fp)
  82d250:	189a80a0 	cmpeqi	r2,r3,27138
  82d254:	10001b1e 	bne	r2,zero,82d2c4 <altera_avalon_jtag_uart_ioctl+0xac>
  82d258:	00002706 	br	82d2f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  82d25c:	e0bffb17 	ldw	r2,-20(fp)
  82d260:	10c00117 	ldw	r3,4(r2)
  82d264:	00a00034 	movhi	r2,32768
  82d268:	10bfffc4 	addi	r2,r2,-1
  82d26c:	18802226 	beq	r3,r2,82d2f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  82d270:	e0bffd17 	ldw	r2,-12(fp)
  82d274:	10800017 	ldw	r2,0(r2)
  82d278:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  82d27c:	e0bff917 	ldw	r2,-28(fp)
  82d280:	10800090 	cmplti	r2,r2,2
  82d284:	1000071e 	bne	r2,zero,82d2a4 <altera_avalon_jtag_uart_ioctl+0x8c>
  82d288:	e0fff917 	ldw	r3,-28(fp)
  82d28c:	00a00034 	movhi	r2,32768
  82d290:	10bfffc4 	addi	r2,r2,-1
  82d294:	18800326 	beq	r3,r2,82d2a4 <altera_avalon_jtag_uart_ioctl+0x8c>
  82d298:	e0bff917 	ldw	r2,-28(fp)
  82d29c:	e0bffe15 	stw	r2,-8(fp)
  82d2a0:	00000306 	br	82d2b0 <altera_avalon_jtag_uart_ioctl+0x98>
  82d2a4:	00e00034 	movhi	r3,32768
  82d2a8:	18ffff84 	addi	r3,r3,-2
  82d2ac:	e0fffe15 	stw	r3,-8(fp)
  82d2b0:	e0bffb17 	ldw	r2,-20(fp)
  82d2b4:	e0fffe17 	ldw	r3,-8(fp)
  82d2b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  82d2bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  82d2c0:	00000d06 	br	82d2f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  82d2c4:	e0bffb17 	ldw	r2,-20(fp)
  82d2c8:	10c00117 	ldw	r3,4(r2)
  82d2cc:	00a00034 	movhi	r2,32768
  82d2d0:	10bfffc4 	addi	r2,r2,-1
  82d2d4:	18800826 	beq	r3,r2,82d2f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  82d2d8:	e13ffd17 	ldw	r4,-12(fp)
  82d2dc:	e0bffb17 	ldw	r2,-20(fp)
  82d2e0:	10c00917 	ldw	r3,36(r2)
  82d2e4:	e0bffb17 	ldw	r2,-20(fp)
  82d2e8:	10800117 	ldw	r2,4(r2)
  82d2ec:	1885803a 	cmpltu	r2,r3,r2
  82d2f0:	20800015 	stw	r2,0(r4)
      rc = 0;
  82d2f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  82d2f8:	e0bffa17 	ldw	r2,-24(fp)
}
  82d2fc:	e037883a 	mov	sp,fp
  82d300:	df000017 	ldw	fp,0(sp)
  82d304:	dec00104 	addi	sp,sp,4
  82d308:	f800283a 	ret

0082d30c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  82d30c:	defff204 	addi	sp,sp,-56
  82d310:	dfc00d15 	stw	ra,52(sp)
  82d314:	df000c15 	stw	fp,48(sp)
  82d318:	df000c04 	addi	fp,sp,48
  82d31c:	e13ffb15 	stw	r4,-20(fp)
  82d320:	e17ffc15 	stw	r5,-16(fp)
  82d324:	e1bffd15 	stw	r6,-12(fp)
  82d328:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  82d32c:	e0bffc17 	ldw	r2,-16(fp)
  82d330:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  82d334:	00004806 	br	82d458 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  82d338:	e0bffb17 	ldw	r2,-20(fp)
  82d33c:	10800a17 	ldw	r2,40(r2)
  82d340:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  82d344:	e0bffb17 	ldw	r2,-20(fp)
  82d348:	10800b17 	ldw	r2,44(r2)
  82d34c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  82d350:	e0fff717 	ldw	r3,-36(fp)
  82d354:	e0bff617 	ldw	r2,-40(fp)
  82d358:	18800536 	bltu	r3,r2,82d370 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  82d35c:	e0bff717 	ldw	r2,-36(fp)
  82d360:	e0fff617 	ldw	r3,-40(fp)
  82d364:	10c5c83a 	sub	r2,r2,r3
  82d368:	e0bff815 	stw	r2,-32(fp)
  82d36c:	00000406 	br	82d380 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  82d370:	00820004 	movi	r2,2048
  82d374:	e0fff617 	ldw	r3,-40(fp)
  82d378:	10c5c83a 	sub	r2,r2,r3
  82d37c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  82d380:	e0bff817 	ldw	r2,-32(fp)
  82d384:	1005003a 	cmpeq	r2,r2,zero
  82d388:	10001f1e 	bne	r2,zero,82d408 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  82d38c:	e0fffd17 	ldw	r3,-12(fp)
  82d390:	e0bff817 	ldw	r2,-32(fp)
  82d394:	1880022e 	bgeu	r3,r2,82d3a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  82d398:	e0bffd17 	ldw	r2,-12(fp)
  82d39c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  82d3a0:	e0bffb17 	ldw	r2,-20(fp)
  82d3a4:	10c00e04 	addi	r3,r2,56
  82d3a8:	e0bff617 	ldw	r2,-40(fp)
  82d3ac:	1887883a 	add	r3,r3,r2
  82d3b0:	e0bffa17 	ldw	r2,-24(fp)
  82d3b4:	1009883a 	mov	r4,r2
  82d3b8:	180b883a 	mov	r5,r3
  82d3bc:	e1bff817 	ldw	r6,-32(fp)
  82d3c0:	0828b580 	call	828b58 <memcpy>
      ptr   += n;
  82d3c4:	e0fff817 	ldw	r3,-32(fp)
  82d3c8:	e0bffa17 	ldw	r2,-24(fp)
  82d3cc:	10c5883a 	add	r2,r2,r3
  82d3d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  82d3d4:	e0fffd17 	ldw	r3,-12(fp)
  82d3d8:	e0bff817 	ldw	r2,-32(fp)
  82d3dc:	1885c83a 	sub	r2,r3,r2
  82d3e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82d3e4:	e0fff617 	ldw	r3,-40(fp)
  82d3e8:	e0bff817 	ldw	r2,-32(fp)
  82d3ec:	1885883a 	add	r2,r3,r2
  82d3f0:	10c1ffcc 	andi	r3,r2,2047
  82d3f4:	e0bffb17 	ldw	r2,-20(fp)
  82d3f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  82d3fc:	e0bffd17 	ldw	r2,-12(fp)
  82d400:	10800048 	cmpgei	r2,r2,1
  82d404:	103fcc1e 	bne	r2,zero,82d338 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  82d408:	e0fffa17 	ldw	r3,-24(fp)
  82d40c:	e0bffc17 	ldw	r2,-16(fp)
  82d410:	1880141e 	bne	r3,r2,82d464 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  82d414:	e0bffe17 	ldw	r2,-8(fp)
  82d418:	1090000c 	andi	r2,r2,16384
  82d41c:	1004c03a 	cmpne	r2,r2,zero
  82d420:	1000101e 	bne	r2,zero,82d464 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  82d424:	e0bffb17 	ldw	r2,-20(fp)
  82d428:	10c00a17 	ldw	r3,40(r2)
  82d42c:	e0bff717 	ldw	r2,-36(fp)
  82d430:	1880051e 	bne	r3,r2,82d448 <altera_avalon_jtag_uart_read+0x13c>
  82d434:	e0bffb17 	ldw	r2,-20(fp)
  82d438:	10c00917 	ldw	r3,36(r2)
  82d43c:	e0bffb17 	ldw	r2,-20(fp)
  82d440:	10800117 	ldw	r2,4(r2)
  82d444:	18bff736 	bltu	r3,r2,82d424 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  82d448:	e0bffb17 	ldw	r2,-20(fp)
  82d44c:	10c00a17 	ldw	r3,40(r2)
  82d450:	e0bff717 	ldw	r2,-36(fp)
  82d454:	18800326 	beq	r3,r2,82d464 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  82d458:	e0bffd17 	ldw	r2,-12(fp)
  82d45c:	10800048 	cmpgei	r2,r2,1
  82d460:	103fb51e 	bne	r2,zero,82d338 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  82d464:	e0fffa17 	ldw	r3,-24(fp)
  82d468:	e0bffc17 	ldw	r2,-16(fp)
  82d46c:	18801926 	beq	r3,r2,82d4d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82d470:	0005303a 	rdctl	r2,status
  82d474:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82d478:	e0fff517 	ldw	r3,-44(fp)
  82d47c:	00bfff84 	movi	r2,-2
  82d480:	1884703a 	and	r2,r3,r2
  82d484:	1001703a 	wrctl	status,r2
  
  return context;
  82d488:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  82d48c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  82d490:	e0bffb17 	ldw	r2,-20(fp)
  82d494:	10800817 	ldw	r2,32(r2)
  82d498:	10c00054 	ori	r3,r2,1
  82d49c:	e0bffb17 	ldw	r2,-20(fp)
  82d4a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82d4a4:	e0bffb17 	ldw	r2,-20(fp)
  82d4a8:	10800017 	ldw	r2,0(r2)
  82d4ac:	11000104 	addi	r4,r2,4
  82d4b0:	e0bffb17 	ldw	r2,-20(fp)
  82d4b4:	10800817 	ldw	r2,32(r2)
  82d4b8:	1007883a 	mov	r3,r2
  82d4bc:	2005883a 	mov	r2,r4
  82d4c0:	10c00035 	stwio	r3,0(r2)
  82d4c4:	e0bff917 	ldw	r2,-28(fp)
  82d4c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82d4cc:	e0bff417 	ldw	r2,-48(fp)
  82d4d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  82d4d4:	e0fffa17 	ldw	r3,-24(fp)
  82d4d8:	e0bffc17 	ldw	r2,-16(fp)
  82d4dc:	18800526 	beq	r3,r2,82d4f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  82d4e0:	e0fffa17 	ldw	r3,-24(fp)
  82d4e4:	e0bffc17 	ldw	r2,-16(fp)
  82d4e8:	1887c83a 	sub	r3,r3,r2
  82d4ec:	e0ffff15 	stw	r3,-4(fp)
  82d4f0:	00000906 	br	82d518 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  82d4f4:	e0bffe17 	ldw	r2,-8(fp)
  82d4f8:	1090000c 	andi	r2,r2,16384
  82d4fc:	1005003a 	cmpeq	r2,r2,zero
  82d500:	1000031e 	bne	r2,zero,82d510 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  82d504:	00bffd44 	movi	r2,-11
  82d508:	e0bfff15 	stw	r2,-4(fp)
  82d50c:	00000206 	br	82d518 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  82d510:	00bffec4 	movi	r2,-5
  82d514:	e0bfff15 	stw	r2,-4(fp)
  82d518:	e0bfff17 	ldw	r2,-4(fp)
}
  82d51c:	e037883a 	mov	sp,fp
  82d520:	dfc00117 	ldw	ra,4(sp)
  82d524:	df000017 	ldw	fp,0(sp)
  82d528:	dec00204 	addi	sp,sp,8
  82d52c:	f800283a 	ret

0082d530 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  82d530:	defff204 	addi	sp,sp,-56
  82d534:	dfc00d15 	stw	ra,52(sp)
  82d538:	df000c15 	stw	fp,48(sp)
  82d53c:	df000c04 	addi	fp,sp,48
  82d540:	e13ffb15 	stw	r4,-20(fp)
  82d544:	e17ffc15 	stw	r5,-16(fp)
  82d548:	e1bffd15 	stw	r6,-12(fp)
  82d54c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  82d550:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  82d554:	e0bffc17 	ldw	r2,-16(fp)
  82d558:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82d55c:	00003a06 	br	82d648 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  82d560:	e0bffb17 	ldw	r2,-20(fp)
  82d564:	10800c17 	ldw	r2,48(r2)
  82d568:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  82d56c:	e0bffb17 	ldw	r2,-20(fp)
  82d570:	10800d17 	ldw	r2,52(r2)
  82d574:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  82d578:	e0fffa17 	ldw	r3,-24(fp)
  82d57c:	e0bff917 	ldw	r2,-28(fp)
  82d580:	1880062e 	bgeu	r3,r2,82d59c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  82d584:	e0fff917 	ldw	r3,-28(fp)
  82d588:	e0bffa17 	ldw	r2,-24(fp)
  82d58c:	1885c83a 	sub	r2,r3,r2
  82d590:	10bfffc4 	addi	r2,r2,-1
  82d594:	e0bff815 	stw	r2,-32(fp)
  82d598:	00000c06 	br	82d5cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  82d59c:	e0bff917 	ldw	r2,-28(fp)
  82d5a0:	1005003a 	cmpeq	r2,r2,zero
  82d5a4:	1000051e 	bne	r2,zero,82d5bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  82d5a8:	00820004 	movi	r2,2048
  82d5ac:	e0fffa17 	ldw	r3,-24(fp)
  82d5b0:	10c5c83a 	sub	r2,r2,r3
  82d5b4:	e0bff815 	stw	r2,-32(fp)
  82d5b8:	00000406 	br	82d5cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  82d5bc:	0081ffc4 	movi	r2,2047
  82d5c0:	e0fffa17 	ldw	r3,-24(fp)
  82d5c4:	10c5c83a 	sub	r2,r2,r3
  82d5c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  82d5cc:	e0bff817 	ldw	r2,-32(fp)
  82d5d0:	1005003a 	cmpeq	r2,r2,zero
  82d5d4:	10001f1e 	bne	r2,zero,82d654 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  82d5d8:	e0fffd17 	ldw	r3,-12(fp)
  82d5dc:	e0bff817 	ldw	r2,-32(fp)
  82d5e0:	1880022e 	bgeu	r3,r2,82d5ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  82d5e4:	e0bffd17 	ldw	r2,-12(fp)
  82d5e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  82d5ec:	e0bffb17 	ldw	r2,-20(fp)
  82d5f0:	10c20e04 	addi	r3,r2,2104
  82d5f4:	e0bffa17 	ldw	r2,-24(fp)
  82d5f8:	1885883a 	add	r2,r3,r2
  82d5fc:	e0fffc17 	ldw	r3,-16(fp)
  82d600:	1009883a 	mov	r4,r2
  82d604:	180b883a 	mov	r5,r3
  82d608:	e1bff817 	ldw	r6,-32(fp)
  82d60c:	0828b580 	call	828b58 <memcpy>
      ptr   += n;
  82d610:	e0fff817 	ldw	r3,-32(fp)
  82d614:	e0bffc17 	ldw	r2,-16(fp)
  82d618:	10c5883a 	add	r2,r2,r3
  82d61c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  82d620:	e0fffd17 	ldw	r3,-12(fp)
  82d624:	e0bff817 	ldw	r2,-32(fp)
  82d628:	1885c83a 	sub	r2,r3,r2
  82d62c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82d630:	e0fffa17 	ldw	r3,-24(fp)
  82d634:	e0bff817 	ldw	r2,-32(fp)
  82d638:	1885883a 	add	r2,r3,r2
  82d63c:	10c1ffcc 	andi	r3,r2,2047
  82d640:	e0bffb17 	ldw	r2,-20(fp)
  82d644:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82d648:	e0bffd17 	ldw	r2,-12(fp)
  82d64c:	10800048 	cmpgei	r2,r2,1
  82d650:	103fc31e 	bne	r2,zero,82d560 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82d654:	0005303a 	rdctl	r2,status
  82d658:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82d65c:	e0fff517 	ldw	r3,-44(fp)
  82d660:	00bfff84 	movi	r2,-2
  82d664:	1884703a 	and	r2,r3,r2
  82d668:	1001703a 	wrctl	status,r2
  
  return context;
  82d66c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  82d670:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  82d674:	e0bffb17 	ldw	r2,-20(fp)
  82d678:	10800817 	ldw	r2,32(r2)
  82d67c:	10c00094 	ori	r3,r2,2
  82d680:	e0bffb17 	ldw	r2,-20(fp)
  82d684:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  82d688:	e0bffb17 	ldw	r2,-20(fp)
  82d68c:	10800017 	ldw	r2,0(r2)
  82d690:	11000104 	addi	r4,r2,4
  82d694:	e0bffb17 	ldw	r2,-20(fp)
  82d698:	10800817 	ldw	r2,32(r2)
  82d69c:	1007883a 	mov	r3,r2
  82d6a0:	2005883a 	mov	r2,r4
  82d6a4:	10c00035 	stwio	r3,0(r2)
  82d6a8:	e0bff717 	ldw	r2,-36(fp)
  82d6ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82d6b0:	e0bff417 	ldw	r2,-48(fp)
  82d6b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  82d6b8:	e0bffd17 	ldw	r2,-12(fp)
  82d6bc:	10800050 	cmplti	r2,r2,1
  82d6c0:	1000111e 	bne	r2,zero,82d708 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  82d6c4:	e0bffe17 	ldw	r2,-8(fp)
  82d6c8:	1090000c 	andi	r2,r2,16384
  82d6cc:	1004c03a 	cmpne	r2,r2,zero
  82d6d0:	1000101e 	bne	r2,zero,82d714 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  82d6d4:	e0bffb17 	ldw	r2,-20(fp)
  82d6d8:	10c00d17 	ldw	r3,52(r2)
  82d6dc:	e0bff917 	ldw	r2,-28(fp)
  82d6e0:	1880051e 	bne	r3,r2,82d6f8 <altera_avalon_jtag_uart_write+0x1c8>
  82d6e4:	e0bffb17 	ldw	r2,-20(fp)
  82d6e8:	10c00917 	ldw	r3,36(r2)
  82d6ec:	e0bffb17 	ldw	r2,-20(fp)
  82d6f0:	10800117 	ldw	r2,4(r2)
  82d6f4:	18bff736 	bltu	r3,r2,82d6d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  82d6f8:	e0bffb17 	ldw	r2,-20(fp)
  82d6fc:	10c00d17 	ldw	r3,52(r2)
  82d700:	e0bff917 	ldw	r2,-28(fp)
  82d704:	18800326 	beq	r3,r2,82d714 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  82d708:	e0bffd17 	ldw	r2,-12(fp)
  82d70c:	10800048 	cmpgei	r2,r2,1
  82d710:	103fcd1e 	bne	r2,zero,82d648 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  82d714:	e0fffc17 	ldw	r3,-16(fp)
  82d718:	e0bff617 	ldw	r2,-40(fp)
  82d71c:	18800526 	beq	r3,r2,82d734 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  82d720:	e0fffc17 	ldw	r3,-16(fp)
  82d724:	e0bff617 	ldw	r2,-40(fp)
  82d728:	1887c83a 	sub	r3,r3,r2
  82d72c:	e0ffff15 	stw	r3,-4(fp)
  82d730:	00000906 	br	82d758 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  82d734:	e0bffe17 	ldw	r2,-8(fp)
  82d738:	1090000c 	andi	r2,r2,16384
  82d73c:	1005003a 	cmpeq	r2,r2,zero
  82d740:	1000031e 	bne	r2,zero,82d750 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  82d744:	00bffd44 	movi	r2,-11
  82d748:	e0bfff15 	stw	r2,-4(fp)
  82d74c:	00000206 	br	82d758 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  82d750:	00bffec4 	movi	r2,-5
  82d754:	e0bfff15 	stw	r2,-4(fp)
  82d758:	e0bfff17 	ldw	r2,-4(fp)
}
  82d75c:	e037883a 	mov	sp,fp
  82d760:	dfc00117 	ldw	ra,4(sp)
  82d764:	df000017 	ldw	fp,0(sp)
  82d768:	dec00204 	addi	sp,sp,8
  82d76c:	f800283a 	ret

0082d770 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  82d770:	defffa04 	addi	sp,sp,-24
  82d774:	dfc00515 	stw	ra,20(sp)
  82d778:	df000415 	stw	fp,16(sp)
  82d77c:	df000404 	addi	fp,sp,16
  82d780:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  82d784:	e0bfff17 	ldw	r2,-4(fp)
  82d788:	11000704 	addi	r4,r2,28
  82d78c:	082d8c80 	call	82d8c8 <alt_avalon_mutex_reg>
  82d790:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  82d794:	e0bffe17 	ldw	r2,-8(fp)
  82d798:	1004c03a 	cmpne	r2,r2,zero
  82d79c:	1000041e 	bne	r2,zero,82d7b0 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  82d7a0:	e0bfff17 	ldw	r2,-4(fp)
  82d7a4:	11000b04 	addi	r4,r2,44
  82d7a8:	082d8c80 	call	82d8c8 <alt_avalon_mutex_reg>
  82d7ac:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  82d7b0:	e0bffe17 	ldw	r2,-8(fp)
  82d7b4:	1004c03a 	cmpne	r2,r2,zero
  82d7b8:	1000041e 	bne	r2,zero,82d7cc <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  82d7bc:	e13fff17 	ldw	r4,-4(fp)
  82d7c0:	d1600e04 	addi	r5,gp,-32712
  82d7c4:	08326200 	call	832620 <alt_dev_llist_insert>
  82d7c8:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  82d7cc:	e0bffe17 	ldw	r2,-8(fp)
  82d7d0:	1004c03a 	cmpne	r2,r2,zero
  82d7d4:	1000361e 	bne	r2,zero,82d8b0 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  82d7d8:	e0bfff17 	ldw	r2,-4(fp)
  82d7dc:	11000917 	ldw	r4,36(r2)
  82d7e0:	082dd140 	call	82dd14 <altera_avalon_mutex_open>
  82d7e4:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  82d7e8:	e0bffd17 	ldw	r2,-12(fp)
  82d7ec:	1005003a 	cmpeq	r2,r2,zero
  82d7f0:	10002f1e 	bne	r2,zero,82d8b0 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  82d7f4:	e0bfff17 	ldw	r2,-4(fp)
  82d7f8:	11000d17 	ldw	r4,52(r2)
  82d7fc:	082dd140 	call	82dd14 <altera_avalon_mutex_open>
  82d800:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  82d804:	e0bffc17 	ldw	r2,-16(fp)
  82d808:	1005003a 	cmpeq	r2,r2,zero
  82d80c:	1000281e 	bne	r2,zero,82d8b0 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  82d810:	00000f06 	br	82d850 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  82d814:	e13ffd17 	ldw	r4,-12(fp)
  82d818:	01400044 	movi	r5,1
  82d81c:	082de2c0 	call	82de2c <altera_avalon_mutex_trylock>
  82d820:	1004c03a 	cmpne	r2,r2,zero
  82d824:	10000a1e 	bne	r2,zero,82d850 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  82d828:	e0bfff17 	ldw	r2,-4(fp)
  82d82c:	10800317 	ldw	r2,12(r2)
  82d830:	1009883a 	mov	r4,r2
  82d834:	e0bfff17 	ldw	r2,-4(fp)
  82d838:	10800517 	ldw	r2,20(r2)
  82d83c:	1007883a 	mov	r3,r2
  82d840:	2005883a 	mov	r2,r4
  82d844:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  82d848:	e13ffd17 	ldw	r4,-12(fp)
  82d84c:	082de6c0 	call	82de6c <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  82d850:	e13ffd17 	ldw	r4,-12(fp)
  82d854:	082df440 	call	82df44 <altera_avalon_mutex_first_lock>
  82d858:	1004c03a 	cmpne	r2,r2,zero
  82d85c:	103fed1e 	bne	r2,zero,82d814 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  82d860:	00000f06 	br	82d8a0 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  82d864:	e13ffc17 	ldw	r4,-16(fp)
  82d868:	01400044 	movi	r5,1
  82d86c:	082de2c0 	call	82de2c <altera_avalon_mutex_trylock>
  82d870:	1004c03a 	cmpne	r2,r2,zero
  82d874:	10000a1e 	bne	r2,zero,82d8a0 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  82d878:	e0bfff17 	ldw	r2,-4(fp)
  82d87c:	10800417 	ldw	r2,16(r2)
  82d880:	1009883a 	mov	r4,r2
  82d884:	e0bfff17 	ldw	r2,-4(fp)
  82d888:	10800517 	ldw	r2,20(r2)
  82d88c:	1007883a 	mov	r3,r2
  82d890:	2005883a 	mov	r2,r4
  82d894:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  82d898:	e13ffc17 	ldw	r4,-16(fp)
  82d89c:	082de6c0 	call	82de6c <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  82d8a0:	e13ffc17 	ldw	r4,-16(fp)
  82d8a4:	082df440 	call	82df44 <altera_avalon_mutex_first_lock>
  82d8a8:	1004c03a 	cmpne	r2,r2,zero
  82d8ac:	103fed1e 	bne	r2,zero,82d864 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  82d8b0:	e0bffe17 	ldw	r2,-8(fp)
}
  82d8b4:	e037883a 	mov	sp,fp
  82d8b8:	dfc00117 	ldw	ra,4(sp)
  82d8bc:	df000017 	ldw	fp,0(sp)
  82d8c0:	dec00204 	addi	sp,sp,8
  82d8c4:	f800283a 	ret

0082d8c8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  82d8c8:	defffc04 	addi	sp,sp,-16
  82d8cc:	dfc00315 	stw	ra,12(sp)
  82d8d0:	df000215 	stw	fp,8(sp)
  82d8d4:	df000204 	addi	fp,sp,8
  82d8d8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  82d8dc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  82d8e0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  82d8e4:	e0bffe17 	ldw	r2,-8(fp)
  82d8e8:	1004c03a 	cmpne	r2,r2,zero
  82d8ec:	1000061e 	bne	r2,zero,82d908 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  82d8f0:	e13fff17 	ldw	r4,-4(fp)
  82d8f4:	014020f4 	movhi	r5,131
  82d8f8:	29568504 	addi	r5,r5,23060
  82d8fc:	08326200 	call	832620 <alt_dev_llist_insert>
  82d900:	e0bffe15 	stw	r2,-8(fp)
  82d904:	00000506 	br	82d91c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  82d908:	082d9340 	call	82d934 <alt_get_errno>
  82d90c:	00c00304 	movi	r3,12
  82d910:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  82d914:	00bffd04 	movi	r2,-12
  82d918:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  82d91c:	e0bffe17 	ldw	r2,-8(fp)
}
  82d920:	e037883a 	mov	sp,fp
  82d924:	dfc00117 	ldw	ra,4(sp)
  82d928:	df000017 	ldw	fp,0(sp)
  82d92c:	dec00204 	addi	sp,sp,8
  82d930:	f800283a 	ret

0082d934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82d934:	defffd04 	addi	sp,sp,-12
  82d938:	dfc00215 	stw	ra,8(sp)
  82d93c:	df000115 	stw	fp,4(sp)
  82d940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82d944:	008020f4 	movhi	r2,131
  82d948:	10968004 	addi	r2,r2,23040
  82d94c:	10800017 	ldw	r2,0(r2)
  82d950:	1005003a 	cmpeq	r2,r2,zero
  82d954:	1000061e 	bne	r2,zero,82d970 <alt_get_errno+0x3c>
  82d958:	008020f4 	movhi	r2,131
  82d95c:	10968004 	addi	r2,r2,23040
  82d960:	10800017 	ldw	r2,0(r2)
  82d964:	103ee83a 	callr	r2
  82d968:	e0bfff15 	stw	r2,-4(fp)
  82d96c:	00000306 	br	82d97c <alt_get_errno+0x48>
  82d970:	008020f4 	movhi	r2,131
  82d974:	109e3504 	addi	r2,r2,30932
  82d978:	e0bfff15 	stw	r2,-4(fp)
  82d97c:	e0bfff17 	ldw	r2,-4(fp)
}
  82d980:	e037883a 	mov	sp,fp
  82d984:	dfc00117 	ldw	ra,4(sp)
  82d988:	df000017 	ldw	fp,0(sp)
  82d98c:	dec00204 	addi	sp,sp,8
  82d990:	f800283a 	ret

0082d994 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  82d994:	defffc04 	addi	sp,sp,-16
  82d998:	dfc00315 	stw	ra,12(sp)
  82d99c:	df000215 	stw	fp,8(sp)
  82d9a0:	df000204 	addi	fp,sp,8
  82d9a4:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  82d9a8:	e13fff17 	ldw	r4,-4(fp)
  82d9ac:	d1600e04 	addi	r5,gp,-32712
  82d9b0:	08327fc0 	call	8327fc <alt_find_dev>
  82d9b4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  82d9b8:	e0bffe17 	ldw	r2,-8(fp)
  82d9bc:	1004c03a 	cmpne	r2,r2,zero
  82d9c0:	1000041e 	bne	r2,zero,82d9d4 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  82d9c4:	082d9340 	call	82d934 <alt_get_errno>
  82d9c8:	1007883a 	mov	r3,r2
  82d9cc:	008004c4 	movi	r2,19
  82d9d0:	18800015 	stw	r2,0(r3)
  }

  return dev;
  82d9d4:	e0bffe17 	ldw	r2,-8(fp)

}
  82d9d8:	e037883a 	mov	sp,fp
  82d9dc:	dfc00117 	ldw	ra,4(sp)
  82d9e0:	df000017 	ldw	fp,0(sp)
  82d9e4:	dec00204 	addi	sp,sp,8
  82d9e8:	f800283a 	ret

0082d9ec <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  82d9ec:	defffe04 	addi	sp,sp,-8
  82d9f0:	df000115 	stw	fp,4(sp)
  82d9f4:	df000104 	addi	fp,sp,4
  82d9f8:	e13fff15 	stw	r4,-4(fp)
  return;
}
  82d9fc:	e037883a 	mov	sp,fp
  82da00:	df000017 	ldw	fp,0(sp)
  82da04:	dec00104 	addi	sp,sp,4
  82da08:	f800283a 	ret

0082da0c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  82da0c:	defff904 	addi	sp,sp,-28
  82da10:	dfc00615 	stw	ra,24(sp)
  82da14:	df000515 	stw	fp,20(sp)
  82da18:	df000504 	addi	fp,sp,20
  82da1c:	e13ffe15 	stw	r4,-8(fp)
  82da20:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  82da24:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  82da28:	e0bffe17 	ldw	r2,-8(fp)
  82da2c:	11000704 	addi	r4,r2,28
  82da30:	01400044 	movi	r5,1
  82da34:	082ddec0 	call	82ddec <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  82da38:	e0bffe17 	ldw	r2,-8(fp)
  82da3c:	10800317 	ldw	r2,12(r2)
  82da40:	10800037 	ldwio	r2,0(r2)
  82da44:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  82da48:	e13ffe17 	ldw	r4,-8(fp)
  82da4c:	e17ffc17 	ldw	r5,-16(fp)
  82da50:	082dac80 	call	82dac8 <alt_mailbox_increment_ptr>
  82da54:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  82da58:	e0bffe17 	ldw	r2,-8(fp)
  82da5c:	10800417 	ldw	r2,16(r2)
  82da60:	10800037 	ldwio	r2,0(r2)
  82da64:	1007883a 	mov	r3,r2
  82da68:	e0bffb17 	ldw	r2,-20(fp)
  82da6c:	1880061e 	bne	r3,r2,82da88 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  82da70:	082d9340 	call	82d934 <alt_get_errno>
  82da74:	00c002c4 	movi	r3,11
  82da78:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  82da7c:	00bffd44 	movi	r2,-11
  82da80:	e0bffd15 	stw	r2,-12(fp)
  82da84:	00000706 	br	82daa4 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  82da88:	e0bffc17 	ldw	r2,-16(fp)
  82da8c:	e0ffff17 	ldw	r3,-4(fp)
  82da90:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  82da94:	e0bffe17 	ldw	r2,-8(fp)
  82da98:	10800317 	ldw	r2,12(r2)
  82da9c:	e0fffb17 	ldw	r3,-20(fp)
  82daa0:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  82daa4:	e0bffe17 	ldw	r2,-8(fp)
  82daa8:	11000704 	addi	r4,r2,28
  82daac:	082de6c0 	call	82de6c <altera_avalon_mutex_unlock>

  return ret_code;
  82dab0:	e0bffd17 	ldw	r2,-12(fp)

}
  82dab4:	e037883a 	mov	sp,fp
  82dab8:	dfc00117 	ldw	ra,4(sp)
  82dabc:	df000017 	ldw	fp,0(sp)
  82dac0:	dec00204 	addi	sp,sp,8
  82dac4:	f800283a 	ret

0082dac8 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  82dac8:	defffd04 	addi	sp,sp,-12
  82dacc:	df000215 	stw	fp,8(sp)
  82dad0:	df000204 	addi	fp,sp,8
  82dad4:	e13ffe15 	stw	r4,-8(fp)
  82dad8:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  82dadc:	e0bfff17 	ldw	r2,-4(fp)
  82dae0:	10800104 	addi	r2,r2,4
  82dae4:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  82dae8:	e0bffe17 	ldw	r2,-8(fp)
  82daec:	10c00617 	ldw	r3,24(r2)
  82daf0:	e0bfff17 	ldw	r2,-4(fp)
  82daf4:	1880032e 	bgeu	r3,r2,82db04 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  82daf8:	e0bffe17 	ldw	r2,-8(fp)
  82dafc:	10800517 	ldw	r2,20(r2)
  82db00:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  82db04:	e0bfff17 	ldw	r2,-4(fp)
}
  82db08:	e037883a 	mov	sp,fp
  82db0c:	df000017 	ldw	fp,0(sp)
  82db10:	dec00104 	addi	sp,sp,4
  82db14:	f800283a 	ret

0082db18 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  82db18:	defffa04 	addi	sp,sp,-24
  82db1c:	dfc00515 	stw	ra,20(sp)
  82db20:	df000415 	stw	fp,16(sp)
  82db24:	dc000315 	stw	r16,12(sp)
  82db28:	df000304 	addi	fp,sp,12
  82db2c:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  82db30:	e0bfff17 	ldw	r2,-4(fp)
  82db34:	11000b04 	addi	r4,r2,44
  82db38:	01400044 	movi	r5,1
  82db3c:	082ddec0 	call	82ddec <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  82db40:	e0bfff17 	ldw	r2,-4(fp)
  82db44:	10800417 	ldw	r2,16(r2)
  82db48:	10800037 	ldwio	r2,0(r2)
  82db4c:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  82db50:	e0bfff17 	ldw	r2,-4(fp)
  82db54:	10800317 	ldw	r2,12(r2)
  82db58:	10800037 	ldwio	r2,0(r2)
  82db5c:	1007883a 	mov	r3,r2
  82db60:	e0bffd17 	ldw	r2,-12(fp)
  82db64:	18bffa26 	beq	r3,r2,82db50 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  82db68:	e0bffd17 	ldw	r2,-12(fp)
  82db6c:	10800037 	ldwio	r2,0(r2)
  82db70:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  82db74:	e0bfff17 	ldw	r2,-4(fp)
  82db78:	10800417 	ldw	r2,16(r2)
  82db7c:	1021883a 	mov	r16,r2
  82db80:	e13fff17 	ldw	r4,-4(fp)
  82db84:	e17ffd17 	ldw	r5,-12(fp)
  82db88:	082dac80 	call	82dac8 <alt_mailbox_increment_ptr>
  82db8c:	1007883a 	mov	r3,r2
  82db90:	8005883a 	mov	r2,r16
  82db94:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  82db98:	e0bfff17 	ldw	r2,-4(fp)
  82db9c:	11000b04 	addi	r4,r2,44
  82dba0:	082de6c0 	call	82de6c <altera_avalon_mutex_unlock>

  return msg;
  82dba4:	e0bffe17 	ldw	r2,-8(fp)

}
  82dba8:	e037883a 	mov	sp,fp
  82dbac:	dfc00217 	ldw	ra,8(sp)
  82dbb0:	df000117 	ldw	fp,4(sp)
  82dbb4:	dc000017 	ldw	r16,0(sp)
  82dbb8:	dec00304 	addi	sp,sp,12
  82dbbc:	f800283a 	ret

0082dbc0 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  82dbc0:	defff904 	addi	sp,sp,-28
  82dbc4:	dfc00615 	stw	ra,24(sp)
  82dbc8:	df000515 	stw	fp,20(sp)
  82dbcc:	dc000415 	stw	r16,16(sp)
  82dbd0:	df000404 	addi	fp,sp,16
  82dbd4:	e13ffe15 	stw	r4,-8(fp)
  82dbd8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  82dbdc:	e0bfff17 	ldw	r2,-4(fp)
  82dbe0:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  82dbe4:	e0bffe17 	ldw	r2,-8(fp)
  82dbe8:	11000b04 	addi	r4,r2,44
  82dbec:	01400044 	movi	r5,1
  82dbf0:	082ddec0 	call	82ddec <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  82dbf4:	e0bffe17 	ldw	r2,-8(fp)
  82dbf8:	10800417 	ldw	r2,16(r2)
  82dbfc:	10800037 	ldwio	r2,0(r2)
  82dc00:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  82dc04:	e0bffe17 	ldw	r2,-8(fp)
  82dc08:	10800317 	ldw	r2,12(r2)
  82dc0c:	10800037 	ldwio	r2,0(r2)
  82dc10:	1007883a 	mov	r3,r2
  82dc14:	e0bffc17 	ldw	r2,-16(fp)
  82dc18:	1880091e 	bne	r3,r2,82dc40 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  82dc1c:	e0ffff17 	ldw	r3,-4(fp)
  82dc20:	00bffd44 	movi	r2,-11
  82dc24:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  82dc28:	082d9340 	call	82d934 <alt_get_errno>
  82dc2c:	1007883a 	mov	r3,r2
  82dc30:	008002c4 	movi	r2,11
  82dc34:	18800015 	stw	r2,0(r3)
    msg = 0;
  82dc38:	e03ffd15 	stw	zero,-12(fp)
  82dc3c:	00000c06 	br	82dc70 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  82dc40:	e0bffc17 	ldw	r2,-16(fp)
  82dc44:	10800037 	ldwio	r2,0(r2)
  82dc48:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  82dc4c:	e0bffe17 	ldw	r2,-8(fp)
  82dc50:	10800417 	ldw	r2,16(r2)
  82dc54:	1021883a 	mov	r16,r2
  82dc58:	e13ffe17 	ldw	r4,-8(fp)
  82dc5c:	e17ffc17 	ldw	r5,-16(fp)
  82dc60:	082dac80 	call	82dac8 <alt_mailbox_increment_ptr>
  82dc64:	1007883a 	mov	r3,r2
  82dc68:	8005883a 	mov	r2,r16
  82dc6c:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  82dc70:	e0bffe17 	ldw	r2,-8(fp)
  82dc74:	11000b04 	addi	r4,r2,44
  82dc78:	082de6c0 	call	82de6c <altera_avalon_mutex_unlock>

  return msg;
  82dc7c:	e0bffd17 	ldw	r2,-12(fp)

}
  82dc80:	e037883a 	mov	sp,fp
  82dc84:	dfc00217 	ldw	ra,8(sp)
  82dc88:	df000117 	ldw	fp,4(sp)
  82dc8c:	dc000017 	ldw	r16,0(sp)
  82dc90:	dec00304 	addi	sp,sp,12
  82dc94:	f800283a 	ret

0082dc98 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  82dc98:	defff904 	addi	sp,sp,-28
  82dc9c:	df000615 	stw	fp,24(sp)
  82dca0:	df000604 	addi	fp,sp,24
  82dca4:	e13ffe15 	stw	r4,-8(fp)
  82dca8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  82dcac:	00bfffc4 	movi	r2,-1
  82dcb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  82dcb4:	0005317a 	rdctl	r2,cpuid
  82dcb8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  82dcbc:	e0bffd17 	ldw	r2,-12(fp)
  82dcc0:	1006943a 	slli	r3,r2,16
  82dcc4:	e0bfff17 	ldw	r2,-4(fp)
  82dcc8:	1884b03a 	or	r2,r3,r2
  82dccc:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  82dcd0:	e0bffe17 	ldw	r2,-8(fp)
  82dcd4:	10800317 	ldw	r2,12(r2)
  82dcd8:	e0fffc17 	ldw	r3,-16(fp)
  82dcdc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  82dce0:	e0bffe17 	ldw	r2,-8(fp)
  82dce4:	10800317 	ldw	r2,12(r2)
  82dce8:	10800037 	ldwio	r2,0(r2)
  82dcec:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  82dcf0:	e0fffb17 	ldw	r3,-20(fp)
  82dcf4:	e0bffc17 	ldw	r2,-16(fp)
  82dcf8:	1880011e 	bne	r3,r2,82dd00 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  82dcfc:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  82dd00:	e0bffa17 	ldw	r2,-24(fp)
}
  82dd04:	e037883a 	mov	sp,fp
  82dd08:	df000017 	ldw	fp,0(sp)
  82dd0c:	dec00104 	addi	sp,sp,4
  82dd10:	f800283a 	ret

0082dd14 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  82dd14:	defffc04 	addi	sp,sp,-16
  82dd18:	dfc00315 	stw	ra,12(sp)
  82dd1c:	df000215 	stw	fp,8(sp)
  82dd20:	df000204 	addi	fp,sp,8
  82dd24:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  82dd28:	e13fff17 	ldw	r4,-4(fp)
  82dd2c:	d1601004 	addi	r5,gp,-32704
  82dd30:	08327fc0 	call	8327fc <alt_find_dev>
  82dd34:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  82dd38:	e0bffe17 	ldw	r2,-8(fp)
  82dd3c:	1004c03a 	cmpne	r2,r2,zero
  82dd40:	1000041e 	bne	r2,zero,82dd54 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  82dd44:	082dd6c0 	call	82dd6c <alt_get_errno>
  82dd48:	1007883a 	mov	r3,r2
  82dd4c:	008004c4 	movi	r2,19
  82dd50:	18800015 	stw	r2,0(r3)
  }

  return dev;
  82dd54:	e0bffe17 	ldw	r2,-8(fp)
}
  82dd58:	e037883a 	mov	sp,fp
  82dd5c:	dfc00117 	ldw	ra,4(sp)
  82dd60:	df000017 	ldw	fp,0(sp)
  82dd64:	dec00204 	addi	sp,sp,8
  82dd68:	f800283a 	ret

0082dd6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82dd6c:	defffd04 	addi	sp,sp,-12
  82dd70:	dfc00215 	stw	ra,8(sp)
  82dd74:	df000115 	stw	fp,4(sp)
  82dd78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82dd7c:	008020f4 	movhi	r2,131
  82dd80:	10968004 	addi	r2,r2,23040
  82dd84:	10800017 	ldw	r2,0(r2)
  82dd88:	1005003a 	cmpeq	r2,r2,zero
  82dd8c:	1000061e 	bne	r2,zero,82dda8 <alt_get_errno+0x3c>
  82dd90:	008020f4 	movhi	r2,131
  82dd94:	10968004 	addi	r2,r2,23040
  82dd98:	10800017 	ldw	r2,0(r2)
  82dd9c:	103ee83a 	callr	r2
  82dda0:	e0bfff15 	stw	r2,-4(fp)
  82dda4:	00000306 	br	82ddb4 <alt_get_errno+0x48>
  82dda8:	008020f4 	movhi	r2,131
  82ddac:	109e3504 	addi	r2,r2,30932
  82ddb0:	e0bfff15 	stw	r2,-4(fp)
  82ddb4:	e0bfff17 	ldw	r2,-4(fp)
}
  82ddb8:	e037883a 	mov	sp,fp
  82ddbc:	dfc00117 	ldw	ra,4(sp)
  82ddc0:	df000017 	ldw	fp,0(sp)
  82ddc4:	dec00204 	addi	sp,sp,8
  82ddc8:	f800283a 	ret

0082ddcc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  82ddcc:	defffe04 	addi	sp,sp,-8
  82ddd0:	df000115 	stw	fp,4(sp)
  82ddd4:	df000104 	addi	fp,sp,4
  82ddd8:	e13fff15 	stw	r4,-4(fp)
  return;
}
  82dddc:	e037883a 	mov	sp,fp
  82dde0:	df000017 	ldw	fp,0(sp)
  82dde4:	dec00104 	addi	sp,sp,4
  82dde8:	f800283a 	ret

0082ddec <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  82ddec:	defffc04 	addi	sp,sp,-16
  82ddf0:	dfc00315 	stw	ra,12(sp)
  82ddf4:	df000215 	stw	fp,8(sp)
  82ddf8:	df000204 	addi	fp,sp,8
  82ddfc:	e13ffe15 	stw	r4,-8(fp)
  82de00:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  82de04:	e13ffe17 	ldw	r4,-8(fp)
  82de08:	e17fff17 	ldw	r5,-4(fp)
  82de0c:	082dc980 	call	82dc98 <alt_mutex_trylock>
  82de10:	1004c03a 	cmpne	r2,r2,zero
  82de14:	103ffb1e 	bne	r2,zero,82de04 <altera_avalon_mutex_lock+0x18>
}
  82de18:	e037883a 	mov	sp,fp
  82de1c:	dfc00117 	ldw	ra,4(sp)
  82de20:	df000017 	ldw	fp,0(sp)
  82de24:	dec00204 	addi	sp,sp,8
  82de28:	f800283a 	ret

0082de2c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  82de2c:	defffb04 	addi	sp,sp,-20
  82de30:	dfc00415 	stw	ra,16(sp)
  82de34:	df000315 	stw	fp,12(sp)
  82de38:	df000304 	addi	fp,sp,12
  82de3c:	e13ffe15 	stw	r4,-8(fp)
  82de40:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  82de44:	e13ffe17 	ldw	r4,-8(fp)
  82de48:	e17fff17 	ldw	r5,-4(fp)
  82de4c:	082dc980 	call	82dc98 <alt_mutex_trylock>
  82de50:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  82de54:	e0bffd17 	ldw	r2,-12(fp)
}
  82de58:	e037883a 	mov	sp,fp
  82de5c:	dfc00117 	ldw	ra,4(sp)
  82de60:	df000017 	ldw	fp,0(sp)
  82de64:	dec00204 	addi	sp,sp,8
  82de68:	f800283a 	ret

0082de6c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  82de6c:	defffd04 	addi	sp,sp,-12
  82de70:	df000215 	stw	fp,8(sp)
  82de74:	df000204 	addi	fp,sp,8
  82de78:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  82de7c:	0005317a 	rdctl	r2,cpuid
  82de80:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  82de84:	e0bfff17 	ldw	r2,-4(fp)
  82de88:	10800317 	ldw	r2,12(r2)
  82de8c:	10800104 	addi	r2,r2,4
  82de90:	1007883a 	mov	r3,r2
  82de94:	00800044 	movi	r2,1
  82de98:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  82de9c:	e0bfff17 	ldw	r2,-4(fp)
  82dea0:	11000317 	ldw	r4,12(r2)
  82dea4:	e0bffe17 	ldw	r2,-8(fp)
  82dea8:	1004943a 	slli	r2,r2,16
  82deac:	1007883a 	mov	r3,r2
  82deb0:	2005883a 	mov	r2,r4
  82deb4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  82deb8:	e037883a 	mov	sp,fp
  82debc:	df000017 	ldw	fp,0(sp)
  82dec0:	dec00104 	addi	sp,sp,4
  82dec4:	f800283a 	ret

0082dec8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  82dec8:	defff904 	addi	sp,sp,-28
  82decc:	df000615 	stw	fp,24(sp)
  82ded0:	df000604 	addi	fp,sp,24
  82ded4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  82ded8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  82dedc:	0005317a 	rdctl	r2,cpuid
  82dee0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  82dee4:	e0bfff17 	ldw	r2,-4(fp)
  82dee8:	10800317 	ldw	r2,12(r2)
  82deec:	10800037 	ldwio	r2,0(r2)
  82def0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  82def4:	e0bffd17 	ldw	r2,-12(fp)
  82def8:	10bfffec 	andhi	r2,r2,65535
  82defc:	1004d43a 	srli	r2,r2,16
  82df00:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  82df04:	e0fffc17 	ldw	r3,-16(fp)
  82df08:	e0bffe17 	ldw	r2,-8(fp)
  82df0c:	1880081e 	bne	r3,r2,82df30 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  82df10:	e0bffd17 	ldw	r2,-12(fp)
  82df14:	10bfffcc 	andi	r2,r2,65535
  82df18:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  82df1c:	e0bffb17 	ldw	r2,-20(fp)
  82df20:	1005003a 	cmpeq	r2,r2,zero
  82df24:	1000021e 	bne	r2,zero,82df30 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  82df28:	00800044 	movi	r2,1
  82df2c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  82df30:	e0bffa17 	ldw	r2,-24(fp)
}
  82df34:	e037883a 	mov	sp,fp
  82df38:	df000017 	ldw	fp,0(sp)
  82df3c:	dec00104 	addi	sp,sp,4
  82df40:	f800283a 	ret

0082df44 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  82df44:	defffc04 	addi	sp,sp,-16
  82df48:	df000315 	stw	fp,12(sp)
  82df4c:	df000304 	addi	fp,sp,12
  82df50:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  82df54:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  82df58:	e0bfff17 	ldw	r2,-4(fp)
  82df5c:	10800317 	ldw	r2,12(r2)
  82df60:	10800104 	addi	r2,r2,4
  82df64:	10800037 	ldwio	r2,0(r2)
  82df68:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  82df6c:	e0bffe17 	ldw	r2,-8(fp)
  82df70:	1080004c 	andi	r2,r2,1
  82df74:	10803fcc 	andi	r2,r2,255
  82df78:	1005003a 	cmpeq	r2,r2,zero
  82df7c:	1000021e 	bne	r2,zero,82df88 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  82df80:	00800044 	movi	r2,1
  82df84:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  82df88:	e0bffd17 	ldw	r2,-12(fp)
}
  82df8c:	e037883a 	mov	sp,fp
  82df90:	df000017 	ldw	fp,0(sp)
  82df94:	dec00104 	addi	sp,sp,4
  82df98:	f800283a 	ret

0082df9c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  82df9c:	defffa04 	addi	sp,sp,-24
  82dfa0:	dfc00515 	stw	ra,20(sp)
  82dfa4:	df000415 	stw	fp,16(sp)
  82dfa8:	df000404 	addi	fp,sp,16
  82dfac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  82dfb0:	e0bfff17 	ldw	r2,-4(fp)
  82dfb4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  82dfb8:	e0bfff17 	ldw	r2,-4(fp)
  82dfbc:	10800104 	addi	r2,r2,4
  82dfc0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82dfc4:	0005303a 	rdctl	r2,status
  82dfc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82dfcc:	e0fffd17 	ldw	r3,-12(fp)
  82dfd0:	00bfff84 	movi	r2,-2
  82dfd4:	1884703a 	and	r2,r3,r2
  82dfd8:	1001703a 	wrctl	status,r2
  
  return context;
  82dfdc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  82dfe0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  82dfe4:	08330240 	call	833024 <alt_tick>
  82dfe8:	e0bffe17 	ldw	r2,-8(fp)
  82dfec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82dff0:	e0bffc17 	ldw	r2,-16(fp)
  82dff4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  82dff8:	e037883a 	mov	sp,fp
  82dffc:	dfc00117 	ldw	ra,4(sp)
  82e000:	df000017 	ldw	fp,0(sp)
  82e004:	dec00204 	addi	sp,sp,8
  82e008:	f800283a 	ret

0082e00c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  82e00c:	defff804 	addi	sp,sp,-32
  82e010:	dfc00715 	stw	ra,28(sp)
  82e014:	df000615 	stw	fp,24(sp)
  82e018:	df000604 	addi	fp,sp,24
  82e01c:	e13ffc15 	stw	r4,-16(fp)
  82e020:	e17ffd15 	stw	r5,-12(fp)
  82e024:	e1bffe15 	stw	r6,-8(fp)
  82e028:	e1ffff15 	stw	r7,-4(fp)
  82e02c:	e0bfff17 	ldw	r2,-4(fp)
  82e030:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  82e034:	008020f4 	movhi	r2,131
  82e038:	109e4d04 	addi	r2,r2,31028
  82e03c:	10800017 	ldw	r2,0(r2)
  82e040:	1004c03a 	cmpne	r2,r2,zero
  82e044:	1000041e 	bne	r2,zero,82e058 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  82e048:	00c020f4 	movhi	r3,131
  82e04c:	18de4d04 	addi	r3,r3,31028
  82e050:	e0bffb17 	ldw	r2,-20(fp)
  82e054:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  82e058:	e0bffc17 	ldw	r2,-16(fp)
  82e05c:	10800104 	addi	r2,r2,4
  82e060:	1007883a 	mov	r3,r2
  82e064:	008001c4 	movi	r2,7
  82e068:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  82e06c:	d8000015 	stw	zero,0(sp)
  82e070:	e13ffd17 	ldw	r4,-12(fp)
  82e074:	e17ffe17 	ldw	r5,-8(fp)
  82e078:	018020f4 	movhi	r6,131
  82e07c:	31b7e704 	addi	r6,r6,-8292
  82e080:	e1fffc17 	ldw	r7,-16(fp)
  82e084:	08328c00 	call	8328c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  82e088:	e037883a 	mov	sp,fp
  82e08c:	dfc00117 	ldw	ra,4(sp)
  82e090:	df000017 	ldw	fp,0(sp)
  82e094:	dec00204 	addi	sp,sp,8
  82e098:	f800283a 	ret

0082e09c <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  82e09c:	defffa04 	addi	sp,sp,-24
  82e0a0:	dfc00515 	stw	ra,20(sp)
  82e0a4:	df000415 	stw	fp,16(sp)
  82e0a8:	df000404 	addi	fp,sp,16
  82e0ac:	e13ffe15 	stw	r4,-8(fp)
  82e0b0:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  82e0b4:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
  82e0b8:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  82e0bc:	1005003a 	cmpeq	r2,r2,zero
  82e0c0:	1000221e 	bne	r2,zero,82e14c <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
  82e0c4:	00803fc4 	movi	r2,255
  82e0c8:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  82e0cc:	d0a7d117 	ldw	r2,-24764(gp)
  82e0d0:	1009883a 	mov	r4,r2
  82e0d4:	e0fffe17 	ldw	r3,-8(fp)
  82e0d8:	e0bfff17 	ldw	r2,-4(fp)
  82e0dc:	1885883a 	add	r2,r3,r2
  82e0e0:	1006927a 	slli	r3,r2,9
  82e0e4:	2005883a 	mov	r2,r4
  82e0e8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  82e0ec:	d0a7d017 	ldw	r2,-24768(gp)
  82e0f0:	1007883a 	mov	r3,r2
  82e0f4:	00800604 	movi	r2,24
  82e0f8:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  82e0fc:	d0a7cd17 	ldw	r2,-24780(gp)
  82e100:	1080002b 	ldhuio	r2,0(r2)
  82e104:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
  82e108:	e0bffc0b 	ldhu	r2,-16(fp)
  82e10c:	10bfffcc 	andi	r2,r2,65535
  82e110:	1080010c 	andi	r2,r2,4
  82e114:	1004c03a 	cmpne	r2,r2,zero
  82e118:	103ff81e 	bne	r2,zero,82e0fc <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  82e11c:	e0bffc0b 	ldhu	r2,-16(fp)
  82e120:	10bfffcc 	andi	r2,r2,65535
  82e124:	1080040c 	andi	r2,r2,16
  82e128:	1004c03a 	cmpne	r2,r2,zero
  82e12c:	1000071e 	bne	r2,zero,82e14c <Write_Sector_Data+0xb0>
        {
            result = true;
  82e130:	00800044 	movi	r2,1
  82e134:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
  82e138:	d027d615 	stw	zero,-24744(gp)
            current_sector_index = sector_index+partition_offset;
  82e13c:	e0fffe17 	ldw	r3,-8(fp)
  82e140:	e0bfff17 	ldw	r2,-4(fp)
  82e144:	1885883a 	add	r2,r3,r2
  82e148:	d0a7d715 	stw	r2,-24740(gp)
        }
    }
    return result;
  82e14c:	e0bffd17 	ldw	r2,-12(fp)
}
  82e150:	e037883a 	mov	sp,fp
  82e154:	dfc00117 	ldw	ra,4(sp)
  82e158:	df000017 	ldw	fp,0(sp)
  82e15c:	dec00204 	addi	sp,sp,8
  82e160:	f800283a 	ret

0082e164 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  82e164:	defffd04 	addi	sp,sp,-12
  82e168:	dfc00215 	stw	ra,8(sp)
  82e16c:	df000115 	stw	fp,4(sp)
  82e170:	df000104 	addi	fp,sp,4
    bool result = true;
  82e174:	00800044 	movi	r2,1
  82e178:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
  82e17c:	d0a7d617 	ldw	r2,-24744(gp)
  82e180:	1005003a 	cmpeq	r2,r2,zero
  82e184:	1000051e 	bne	r2,zero,82e19c <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  82e188:	d0a7d717 	ldw	r2,-24740(gp)
  82e18c:	1009883a 	mov	r4,r2
  82e190:	000b883a 	mov	r5,zero
  82e194:	082e09c0 	call	82e09c <Write_Sector_Data>
  82e198:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
  82e19c:	e0bfff17 	ldw	r2,-4(fp)
}
  82e1a0:	e037883a 	mov	sp,fp
  82e1a4:	dfc00117 	ldw	ra,4(sp)
  82e1a8:	df000017 	ldw	fp,0(sp)
  82e1ac:	dec00204 	addi	sp,sp,8
  82e1b0:	f800283a 	ret

0082e1b4 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  82e1b4:	defff904 	addi	sp,sp,-28
  82e1b8:	dfc00615 	stw	ra,24(sp)
  82e1bc:	df000515 	stw	fp,20(sp)
  82e1c0:	df000504 	addi	fp,sp,20
  82e1c4:	e13ffd15 	stw	r4,-12(fp)
  82e1c8:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  82e1cc:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
  82e1d0:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  82e1d4:	1005003a 	cmpeq	r2,r2,zero
  82e1d8:	10002d1e 	bne	r2,zero,82e290 <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
  82e1dc:	00803fc4 	movi	r2,255
  82e1e0:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  82e1e4:	d0a7d617 	ldw	r2,-24744(gp)
  82e1e8:	1005003a 	cmpeq	r2,r2,zero
  82e1ec:	1000081e 	bne	r2,zero,82e210 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  82e1f0:	d0a7d717 	ldw	r2,-24740(gp)
  82e1f4:	1009883a 	mov	r4,r2
  82e1f8:	000b883a 	mov	r5,zero
  82e1fc:	082e09c0 	call	82e09c <Write_Sector_Data>
  82e200:	1004c03a 	cmpne	r2,r2,zero
  82e204:	1000021e 	bne	r2,zero,82e210 <Read_Sector_Data+0x5c>
            {
                return false;
  82e208:	e03fff15 	stw	zero,-4(fp)
  82e20c:	00002206 	br	82e298 <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  82e210:	d0a7d117 	ldw	r2,-24764(gp)
  82e214:	1009883a 	mov	r4,r2
  82e218:	e0fffd17 	ldw	r3,-12(fp)
  82e21c:	e0bffe17 	ldw	r2,-8(fp)
  82e220:	1885883a 	add	r2,r3,r2
  82e224:	1006927a 	slli	r3,r2,9
  82e228:	2005883a 	mov	r2,r4
  82e22c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  82e230:	d0a7d017 	ldw	r2,-24768(gp)
  82e234:	1007883a 	mov	r3,r2
  82e238:	00800444 	movi	r2,17
  82e23c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  82e240:	d0a7cd17 	ldw	r2,-24780(gp)
  82e244:	1080002b 	ldhuio	r2,0(r2)
  82e248:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
  82e24c:	e0bffb0b 	ldhu	r2,-20(fp)
  82e250:	10bfffcc 	andi	r2,r2,65535
  82e254:	1080010c 	andi	r2,r2,4
  82e258:	1004c03a 	cmpne	r2,r2,zero
  82e25c:	103ff81e 	bne	r2,zero,82e240 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  82e260:	e0bffb0b 	ldhu	r2,-20(fp)
  82e264:	10bfffcc 	andi	r2,r2,65535
  82e268:	1080040c 	andi	r2,r2,16
  82e26c:	1004c03a 	cmpne	r2,r2,zero
  82e270:	1000071e 	bne	r2,zero,82e290 <Read_Sector_Data+0xdc>
		{
			result = true;
  82e274:	00800044 	movi	r2,1
  82e278:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
  82e27c:	d027d615 	stw	zero,-24744(gp)
            current_sector_index = sector_index+partition_offset;
  82e280:	e0fffd17 	ldw	r3,-12(fp)
  82e284:	e0bffe17 	ldw	r2,-8(fp)
  82e288:	1885883a 	add	r2,r3,r2
  82e28c:	d0a7d715 	stw	r2,-24740(gp)
		}
	}
	return result;
  82e290:	e0bffc17 	ldw	r2,-16(fp)
  82e294:	e0bfff15 	stw	r2,-4(fp)
  82e298:	e0bfff17 	ldw	r2,-4(fp)
}
  82e29c:	e037883a 	mov	sp,fp
  82e2a0:	dfc00117 	ldw	ra,4(sp)
  82e2a4:	df000017 	ldw	fp,0(sp)
  82e2a8:	dec00204 	addi	sp,sp,8
  82e2ac:	f800283a 	ret

0082e2b0 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  82e2b0:	defffa04 	addi	sp,sp,-24
  82e2b4:	dfc00515 	stw	ra,20(sp)
  82e2b8:	df000415 	stw	fp,16(sp)
  82e2bc:	df000404 	addi	fp,sp,16
  82e2c0:	e13ffd15 	stw	r4,-12(fp)
  82e2c4:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  82e2c8:	e0bffd17 	ldw	r2,-12(fp)
  82e2cc:	1006d23a 	srli	r3,r2,8
  82e2d0:	d0a7d317 	ldw	r2,-24756(gp)
  82e2d4:	1885883a 	add	r2,r3,r2
  82e2d8:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  82e2dc:	008020f4 	movhi	r2,131
  82e2e0:	109e5e04 	addi	r2,r2,31096
  82e2e4:	10c01117 	ldw	r3,68(r2)
  82e2e8:	e0bffc17 	ldw	r2,-16(fp)
  82e2ec:	10c5883a 	add	r2,r2,r3
  82e2f0:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
  82e2f4:	d0e7d717 	ldw	r3,-24740(gp)
  82e2f8:	e0bffc17 	ldw	r2,-16(fp)
  82e2fc:	10c00726 	beq	r2,r3,82e31c <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  82e300:	e13ffc17 	ldw	r4,-16(fp)
  82e304:	000b883a 	mov	r5,zero
  82e308:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  82e30c:	1004c03a 	cmpne	r2,r2,zero
  82e310:	1000021e 	bne	r2,zero,82e31c <get_cluster_flag+0x6c>
        {
            return false;
  82e314:	e03fff15 	stw	zero,-4(fp)
  82e318:	00000d06 	br	82e350 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  82e31c:	d0a7d517 	ldw	r2,-24748(gp)
  82e320:	10800a17 	ldw	r2,40(r2)
  82e324:	1007883a 	mov	r3,r2
  82e328:	e0bffd17 	ldw	r2,-12(fp)
  82e32c:	10803fcc 	andi	r2,r2,255
  82e330:	1085883a 	add	r2,r2,r2
  82e334:	1885883a 	add	r2,r3,r2
  82e338:	1080002b 	ldhuio	r2,0(r2)
  82e33c:	1007883a 	mov	r3,r2
  82e340:	e0bffe17 	ldw	r2,-8(fp)
  82e344:	10c0000d 	sth	r3,0(r2)
    return true;
  82e348:	00800044 	movi	r2,1
  82e34c:	e0bfff15 	stw	r2,-4(fp)
  82e350:	e0bfff17 	ldw	r2,-4(fp)
}
  82e354:	e037883a 	mov	sp,fp
  82e358:	dfc00117 	ldw	ra,4(sp)
  82e35c:	df000017 	ldw	fp,0(sp)
  82e360:	dec00204 	addi	sp,sp,8
  82e364:	f800283a 	ret

0082e368 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  82e368:	defff904 	addi	sp,sp,-28
  82e36c:	dfc00615 	stw	ra,24(sp)
  82e370:	df000515 	stw	fp,20(sp)
  82e374:	df000504 	addi	fp,sp,20
  82e378:	e13ffc15 	stw	r4,-16(fp)
  82e37c:	e1bffe15 	stw	r6,-8(fp)
  82e380:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  82e384:	e0bffc17 	ldw	r2,-16(fp)
  82e388:	1006d23a 	srli	r3,r2,8
  82e38c:	d0a7d317 	ldw	r2,-24756(gp)
  82e390:	1885883a 	add	r2,r3,r2
  82e394:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
  82e398:	e0bffe17 	ldw	r2,-8(fp)
  82e39c:	1005003a 	cmpeq	r2,r2,zero
  82e3a0:	1000071e 	bne	r2,zero,82e3c0 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  82e3a4:	008020f4 	movhi	r2,131
  82e3a8:	109e5e04 	addi	r2,r2,31096
  82e3ac:	10c01117 	ldw	r3,68(r2)
  82e3b0:	e0bffb17 	ldw	r2,-20(fp)
  82e3b4:	10c5883a 	add	r2,r2,r3
  82e3b8:	e0bffb15 	stw	r2,-20(fp)
  82e3bc:	00000606 	br	82e3d8 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  82e3c0:	008020f4 	movhi	r2,131
  82e3c4:	109e5e04 	addi	r2,r2,31096
  82e3c8:	10c01217 	ldw	r3,72(r2)
  82e3cc:	e0bffb17 	ldw	r2,-20(fp)
  82e3d0:	10c5883a 	add	r2,r2,r3
  82e3d4:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
  82e3d8:	d0e7d717 	ldw	r3,-24740(gp)
  82e3dc:	e0bffb17 	ldw	r2,-20(fp)
  82e3e0:	10c00726 	beq	r2,r3,82e400 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  82e3e4:	e13ffb17 	ldw	r4,-20(fp)
  82e3e8:	000b883a 	mov	r5,zero
  82e3ec:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  82e3f0:	1004c03a 	cmpne	r2,r2,zero
  82e3f4:	1000021e 	bne	r2,zero,82e400 <mark_cluster+0x98>
        {
            return false;
  82e3f8:	e03fff15 	stw	zero,-4(fp)
  82e3fc:	00000d06 	br	82e434 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  82e400:	d0a7d517 	ldw	r2,-24748(gp)
  82e404:	10800a17 	ldw	r2,40(r2)
  82e408:	1007883a 	mov	r3,r2
  82e40c:	e0bffc17 	ldw	r2,-16(fp)
  82e410:	10803fcc 	andi	r2,r2,255
  82e414:	1085883a 	add	r2,r2,r2
  82e418:	1885883a 	add	r2,r3,r2
  82e41c:	e0fffd0f 	ldh	r3,-12(fp)
  82e420:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  82e424:	00800044 	movi	r2,1
  82e428:	d0a7d615 	stw	r2,-24744(gp)
    return true;
  82e42c:	00800044 	movi	r2,1
  82e430:	e0bfff15 	stw	r2,-4(fp)
  82e434:	e0bfff17 	ldw	r2,-4(fp)
}
  82e438:	e037883a 	mov	sp,fp
  82e43c:	dfc00117 	ldw	ra,4(sp)
  82e440:	df000017 	ldw	fp,0(sp)
  82e444:	dec00204 	addi	sp,sp,8
  82e448:	f800283a 	ret

0082e44c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  82e44c:	defff704 	addi	sp,sp,-36
  82e450:	dfc00815 	stw	ra,32(sp)
  82e454:	df000715 	stw	fp,28(sp)
  82e458:	df000704 	addi	fp,sp,28
	bool result = false;
  82e45c:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  82e460:	0009883a 	mov	r4,zero
  82e464:	000b883a 	mov	r5,zero
  82e468:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  82e46c:	1005003a 	cmpeq	r2,r2,zero
  82e470:	10005c1e 	bne	r2,zero,82e5e4 <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  82e474:	d0a7d517 	ldw	r2,-24748(gp)
  82e478:	10800a17 	ldw	r2,40(r2)
  82e47c:	10807f84 	addi	r2,r2,510
  82e480:	1080002b 	ldhuio	r2,0(r2)
  82e484:	10bfffcc 	andi	r2,r2,65535
  82e488:	10a0001c 	xori	r2,r2,32768
  82e48c:	10a00004 	addi	r2,r2,-32768
  82e490:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  82e494:	e0bffd17 	ldw	r2,-12(fp)
  82e498:	10ffffcc 	andi	r3,r2,65535
  82e49c:	00aa9554 	movui	r2,43605
  82e4a0:	1880501e 	bne	r3,r2,82e5e4 <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  82e4a4:	e03ffe15 	stw	zero,-8(fp)
  82e4a8:	00004b06 	br	82e5d8 <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
  82e4ac:	e0bffe17 	ldw	r2,-8(fp)
  82e4b0:	1004913a 	slli	r2,r2,4
  82e4b4:	10806f84 	addi	r2,r2,446
  82e4b8:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  82e4bc:	d0a7d517 	ldw	r2,-24748(gp)
  82e4c0:	10800a17 	ldw	r2,40(r2)
  82e4c4:	1007883a 	mov	r3,r2
  82e4c8:	e0bffa17 	ldw	r2,-24(fp)
  82e4cc:	1885883a 	add	r2,r3,r2
  82e4d0:	10800104 	addi	r2,r2,4
  82e4d4:	10800023 	ldbuio	r2,0(r2)
  82e4d8:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  82e4dc:	e0bff907 	ldb	r2,-28(fp)
  82e4e0:	10800060 	cmpeqi	r2,r2,1
  82e4e4:	1000091e 	bne	r2,zero,82e50c <Check_for_Master_Boot_Record+0xc0>
  82e4e8:	e0bff907 	ldb	r2,-28(fp)
  82e4ec:	10800120 	cmpeqi	r2,r2,4
  82e4f0:	1000061e 	bne	r2,zero,82e50c <Check_for_Master_Boot_Record+0xc0>
  82e4f4:	e0bff907 	ldb	r2,-28(fp)
  82e4f8:	108001a0 	cmpeqi	r2,r2,6
  82e4fc:	1000031e 	bne	r2,zero,82e50c <Check_for_Master_Boot_Record+0xc0>
  82e500:	e0bff907 	ldb	r2,-28(fp)
  82e504:	10800398 	cmpnei	r2,r2,14
  82e508:	1000301e 	bne	r2,zero,82e5cc <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  82e50c:	d0a7d517 	ldw	r2,-24748(gp)
  82e510:	10800a17 	ldw	r2,40(r2)
  82e514:	1007883a 	mov	r3,r2
  82e518:	e0bffa17 	ldw	r2,-24(fp)
  82e51c:	1885883a 	add	r2,r3,r2
  82e520:	10800284 	addi	r2,r2,10
  82e524:	1080002b 	ldhuio	r2,0(r2)
  82e528:	10bfffcc 	andi	r2,r2,65535
  82e52c:	1008943a 	slli	r4,r2,16
  82e530:	d0a7d517 	ldw	r2,-24748(gp)
  82e534:	10800a17 	ldw	r2,40(r2)
  82e538:	1007883a 	mov	r3,r2
  82e53c:	e0bffa17 	ldw	r2,-24(fp)
  82e540:	1885883a 	add	r2,r3,r2
  82e544:	10800204 	addi	r2,r2,8
  82e548:	1080002b 	ldhuio	r2,0(r2)
  82e54c:	10bfffcc 	andi	r2,r2,65535
  82e550:	2084b03a 	or	r2,r4,r2
  82e554:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  82e558:	d0a7d517 	ldw	r2,-24748(gp)
  82e55c:	10800a17 	ldw	r2,40(r2)
  82e560:	1007883a 	mov	r3,r2
  82e564:	e0bffa17 	ldw	r2,-24(fp)
  82e568:	1885883a 	add	r2,r3,r2
  82e56c:	10800384 	addi	r2,r2,14
  82e570:	1080002b 	ldhuio	r2,0(r2)
  82e574:	10bfffcc 	andi	r2,r2,65535
  82e578:	1008943a 	slli	r4,r2,16
  82e57c:	d0a7d517 	ldw	r2,-24748(gp)
  82e580:	10800a17 	ldw	r2,40(r2)
  82e584:	1007883a 	mov	r3,r2
  82e588:	e0bffa17 	ldw	r2,-24(fp)
  82e58c:	1885883a 	add	r2,r3,r2
  82e590:	10800304 	addi	r2,r2,12
  82e594:	1080002b 	ldhuio	r2,0(r2)
  82e598:	10bfffcc 	andi	r2,r2,65535
  82e59c:	2084b03a 	or	r2,r4,r2
  82e5a0:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
  82e5a4:	e0bffb17 	ldw	r2,-20(fp)
  82e5a8:	10800050 	cmplti	r2,r2,1
  82e5ac:	1000071e 	bne	r2,zero,82e5cc <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
  82e5b0:	00800044 	movi	r2,1
  82e5b4:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  82e5b8:	e0bffb17 	ldw	r2,-20(fp)
  82e5bc:	d0a7d415 	stw	r2,-24752(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  82e5c0:	e0bffc17 	ldw	r2,-16(fp)
  82e5c4:	d0a7d315 	stw	r2,-24756(gp)
						break;
  82e5c8:	00000606 	br	82e5e4 <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  82e5cc:	e0bffe17 	ldw	r2,-8(fp)
  82e5d0:	10800044 	addi	r2,r2,1
  82e5d4:	e0bffe15 	stw	r2,-8(fp)
  82e5d8:	e0bffe17 	ldw	r2,-8(fp)
  82e5dc:	10800110 	cmplti	r2,r2,4
  82e5e0:	103fb21e 	bne	r2,zero,82e4ac <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  82e5e4:	e0bfff17 	ldw	r2,-4(fp)
}
  82e5e8:	e037883a 	mov	sp,fp
  82e5ec:	dfc00117 	ldw	ra,4(sp)
  82e5f0:	df000017 	ldw	fp,0(sp)
  82e5f4:	dec00204 	addi	sp,sp,8
  82e5f8:	f800283a 	ret

0082e5fc <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  82e5fc:	defff804 	addi	sp,sp,-32
  82e600:	dfc00715 	stw	ra,28(sp)
  82e604:	df000615 	stw	fp,24(sp)
  82e608:	df000604 	addi	fp,sp,24
  82e60c:	e13ffc15 	stw	r4,-16(fp)
  82e610:	e17ffd15 	stw	r5,-12(fp)
  82e614:	e1bffe15 	stw	r6,-8(fp)
  82e618:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  82e61c:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  82e620:	e0bffc17 	ldw	r2,-16(fp)
  82e624:	108007cc 	andi	r2,r2,31
  82e628:	1004c03a 	cmpne	r2,r2,zero
  82e62c:	10008e1e 	bne	r2,zero,82e868 <Read_File_Record_At_Offset+0x26c>
  82e630:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  82e634:	1005003a 	cmpeq	r2,r2,zero
  82e638:	10008b1e 	bne	r2,zero,82e868 <Read_File_Record_At_Offset+0x26c>
  82e63c:	d0a7cc17 	ldw	r2,-24784(gp)
  82e640:	1005003a 	cmpeq	r2,r2,zero
  82e644:	1000881e 	bne	r2,zero,82e868 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  82e648:	e03ffa15 	stw	zero,-24(fp)
  82e64c:	00001006 	br	82e690 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  82e650:	e17ffa17 	ldw	r5,-24(fp)
  82e654:	d0a7d517 	ldw	r2,-24748(gp)
  82e658:	10800a17 	ldw	r2,40(r2)
  82e65c:	1009883a 	mov	r4,r2
  82e660:	e0fffc17 	ldw	r3,-16(fp)
  82e664:	e0bffa17 	ldw	r2,-24(fp)
  82e668:	1885883a 	add	r2,r3,r2
  82e66c:	2085883a 	add	r2,r4,r2
  82e670:	10800023 	ldbuio	r2,0(r2)
  82e674:	1007883a 	mov	r3,r2
  82e678:	e0bffd17 	ldw	r2,-12(fp)
  82e67c:	1145883a 	add	r2,r2,r5
  82e680:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  82e684:	e0bffa17 	ldw	r2,-24(fp)
  82e688:	10800044 	addi	r2,r2,1
  82e68c:	e0bffa15 	stw	r2,-24(fp)
  82e690:	e0bffa17 	ldw	r2,-24(fp)
  82e694:	10800210 	cmplti	r2,r2,8
  82e698:	103fed1e 	bne	r2,zero,82e650 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  82e69c:	e03ffa15 	stw	zero,-24(fp)
  82e6a0:	00001206 	br	82e6ec <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  82e6a4:	e17ffa17 	ldw	r5,-24(fp)
  82e6a8:	d0a7d517 	ldw	r2,-24748(gp)
  82e6ac:	10800a17 	ldw	r2,40(r2)
  82e6b0:	1009883a 	mov	r4,r2
  82e6b4:	e0fffc17 	ldw	r3,-16(fp)
  82e6b8:	e0bffa17 	ldw	r2,-24(fp)
  82e6bc:	1885883a 	add	r2,r3,r2
  82e6c0:	2085883a 	add	r2,r4,r2
  82e6c4:	10800204 	addi	r2,r2,8
  82e6c8:	10800023 	ldbuio	r2,0(r2)
  82e6cc:	1007883a 	mov	r3,r2
  82e6d0:	e0bffd17 	ldw	r2,-12(fp)
  82e6d4:	2885883a 	add	r2,r5,r2
  82e6d8:	10800204 	addi	r2,r2,8
  82e6dc:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  82e6e0:	e0bffa17 	ldw	r2,-24(fp)
  82e6e4:	10800044 	addi	r2,r2,1
  82e6e8:	e0bffa15 	stw	r2,-24(fp)
  82e6ec:	e0bffa17 	ldw	r2,-24(fp)
  82e6f0:	108000d0 	cmplti	r2,r2,3
  82e6f4:	103feb1e 	bne	r2,zero,82e6a4 <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  82e6f8:	d0a7d517 	ldw	r2,-24748(gp)
  82e6fc:	10800a17 	ldw	r2,40(r2)
  82e700:	1007883a 	mov	r3,r2
  82e704:	e0bffc17 	ldw	r2,-16(fp)
  82e708:	1885883a 	add	r2,r3,r2
  82e70c:	108002c4 	addi	r2,r2,11
  82e710:	10800023 	ldbuio	r2,0(r2)
  82e714:	1007883a 	mov	r3,r2
  82e718:	e0bffd17 	ldw	r2,-12(fp)
  82e71c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  82e720:	d0a7d517 	ldw	r2,-24748(gp)
  82e724:	10800a17 	ldw	r2,40(r2)
  82e728:	1007883a 	mov	r3,r2
  82e72c:	e0bffc17 	ldw	r2,-16(fp)
  82e730:	1885883a 	add	r2,r3,r2
  82e734:	10800384 	addi	r2,r2,14
  82e738:	1080002b 	ldhuio	r2,0(r2)
  82e73c:	1007883a 	mov	r3,r2
  82e740:	e0bffd17 	ldw	r2,-12(fp)
  82e744:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  82e748:	d0a7d517 	ldw	r2,-24748(gp)
  82e74c:	10800a17 	ldw	r2,40(r2)
  82e750:	1007883a 	mov	r3,r2
  82e754:	e0bffc17 	ldw	r2,-16(fp)
  82e758:	1885883a 	add	r2,r3,r2
  82e75c:	10800404 	addi	r2,r2,16
  82e760:	1080002b 	ldhuio	r2,0(r2)
  82e764:	1007883a 	mov	r3,r2
  82e768:	e0bffd17 	ldw	r2,-12(fp)
  82e76c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  82e770:	d0a7d517 	ldw	r2,-24748(gp)
  82e774:	10800a17 	ldw	r2,40(r2)
  82e778:	1007883a 	mov	r3,r2
  82e77c:	e0bffc17 	ldw	r2,-16(fp)
  82e780:	1885883a 	add	r2,r3,r2
  82e784:	10800484 	addi	r2,r2,18
  82e788:	1080002b 	ldhuio	r2,0(r2)
  82e78c:	1007883a 	mov	r3,r2
  82e790:	e0bffd17 	ldw	r2,-12(fp)
  82e794:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  82e798:	d0a7d517 	ldw	r2,-24748(gp)
  82e79c:	10800a17 	ldw	r2,40(r2)
  82e7a0:	1007883a 	mov	r3,r2
  82e7a4:	e0bffc17 	ldw	r2,-16(fp)
  82e7a8:	1885883a 	add	r2,r3,r2
  82e7ac:	10800584 	addi	r2,r2,22
  82e7b0:	1080002b 	ldhuio	r2,0(r2)
  82e7b4:	1007883a 	mov	r3,r2
  82e7b8:	e0bffd17 	ldw	r2,-12(fp)
  82e7bc:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  82e7c0:	d0a7d517 	ldw	r2,-24748(gp)
  82e7c4:	10800a17 	ldw	r2,40(r2)
  82e7c8:	1007883a 	mov	r3,r2
  82e7cc:	e0bffc17 	ldw	r2,-16(fp)
  82e7d0:	1885883a 	add	r2,r3,r2
  82e7d4:	10800604 	addi	r2,r2,24
  82e7d8:	1080002b 	ldhuio	r2,0(r2)
  82e7dc:	1007883a 	mov	r3,r2
  82e7e0:	e0bffd17 	ldw	r2,-12(fp)
  82e7e4:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  82e7e8:	d0a7d517 	ldw	r2,-24748(gp)
  82e7ec:	10800a17 	ldw	r2,40(r2)
  82e7f0:	1007883a 	mov	r3,r2
  82e7f4:	e0bffc17 	ldw	r2,-16(fp)
  82e7f8:	1885883a 	add	r2,r3,r2
  82e7fc:	10800684 	addi	r2,r2,26
  82e800:	1080002b 	ldhuio	r2,0(r2)
  82e804:	1007883a 	mov	r3,r2
  82e808:	e0bffd17 	ldw	r2,-12(fp)
  82e80c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  82e810:	d0a7d517 	ldw	r2,-24748(gp)
  82e814:	10800a17 	ldw	r2,40(r2)
  82e818:	1007883a 	mov	r3,r2
  82e81c:	e0bffc17 	ldw	r2,-16(fp)
  82e820:	1885883a 	add	r2,r3,r2
  82e824:	10800704 	addi	r2,r2,28
  82e828:	10800037 	ldwio	r2,0(r2)
  82e82c:	1007883a 	mov	r3,r2
  82e830:	e0bffd17 	ldw	r2,-12(fp)
  82e834:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
  82e838:	e0fffd17 	ldw	r3,-12(fp)
  82e83c:	e0bffe17 	ldw	r2,-8(fp)
  82e840:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  82e844:	e0fffd17 	ldw	r3,-12(fp)
  82e848:	e0bfff17 	ldw	r2,-4(fp)
  82e84c:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  82e850:	e0bffc17 	ldw	r2,-16(fp)
  82e854:	1007883a 	mov	r3,r2
  82e858:	e0bffd17 	ldw	r2,-12(fp)
  82e85c:	10c00c0d 	sth	r3,48(r2)
		result = true;
  82e860:	00800044 	movi	r2,1
  82e864:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  82e868:	e0bffb17 	ldw	r2,-20(fp)
}
  82e86c:	e037883a 	mov	sp,fp
  82e870:	dfc00117 	ldw	ra,4(sp)
  82e874:	df000017 	ldw	fp,0(sp)
  82e878:	dec00204 	addi	sp,sp,8
  82e87c:	f800283a 	ret

0082e880 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  82e880:	defff904 	addi	sp,sp,-28
  82e884:	dfc00615 	stw	ra,24(sp)
  82e888:	df000515 	stw	fp,20(sp)
  82e88c:	df000504 	addi	fp,sp,20
  82e890:	e13ffe15 	stw	r4,-8(fp)
  82e894:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  82e898:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  82e89c:	e0bffe17 	ldw	r2,-8(fp)
  82e8a0:	108007cc 	andi	r2,r2,31
  82e8a4:	1004c03a 	cmpne	r2,r2,zero
  82e8a8:	10009d1e 	bne	r2,zero,82eb20 <Write_File_Record_At_Offset+0x2a0>
  82e8ac:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  82e8b0:	1005003a 	cmpeq	r2,r2,zero
  82e8b4:	10009a1e 	bne	r2,zero,82eb20 <Write_File_Record_At_Offset+0x2a0>
  82e8b8:	d0a7cc17 	ldw	r2,-24784(gp)
  82e8bc:	1005003a 	cmpeq	r2,r2,zero
  82e8c0:	1000971e 	bne	r2,zero,82eb20 <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  82e8c4:	e03ffc15 	stw	zero,-16(fp)
  82e8c8:	00001e06 	br	82e944 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
  82e8cc:	e0bffc17 	ldw	r2,-16(fp)
  82e8d0:	10c00044 	addi	r3,r2,1
  82e8d4:	e0bfff17 	ldw	r2,-4(fp)
  82e8d8:	10c5883a 	add	r2,r2,r3
  82e8dc:	10800003 	ldbu	r2,0(r2)
  82e8e0:	10803fcc 	andi	r2,r2,255
  82e8e4:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
  82e8e8:	e0bffb0f 	ldh	r2,-20(fp)
  82e8ec:	1004923a 	slli	r2,r2,8
  82e8f0:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
  82e8f4:	e0fffc17 	ldw	r3,-16(fp)
  82e8f8:	e0bfff17 	ldw	r2,-4(fp)
  82e8fc:	10c5883a 	add	r2,r2,r3
  82e900:	10800003 	ldbu	r2,0(r2)
  82e904:	10c03fcc 	andi	r3,r2,255
  82e908:	e0bffb0b 	ldhu	r2,-20(fp)
  82e90c:	10c4b03a 	or	r2,r2,r3
  82e910:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  82e914:	d0a7d517 	ldw	r2,-24748(gp)
  82e918:	10800a17 	ldw	r2,40(r2)
  82e91c:	1009883a 	mov	r4,r2
  82e920:	e0fffe17 	ldw	r3,-8(fp)
  82e924:	e0bffc17 	ldw	r2,-16(fp)
  82e928:	1885883a 	add	r2,r3,r2
  82e92c:	2085883a 	add	r2,r4,r2
  82e930:	e0fffb0f 	ldh	r3,-20(fp)
  82e934:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  82e938:	e0bffc17 	ldw	r2,-16(fp)
  82e93c:	10800084 	addi	r2,r2,2
  82e940:	e0bffc15 	stw	r2,-16(fp)
  82e944:	e0bffc17 	ldw	r2,-16(fp)
  82e948:	10800210 	cmplti	r2,r2,8
  82e94c:	103fdf1e 	bne	r2,zero,82e8cc <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  82e950:	e03ffc15 	stw	zero,-16(fp)
  82e954:	00001306 	br	82e9a4 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  82e958:	d0a7d517 	ldw	r2,-24748(gp)
  82e95c:	10800a17 	ldw	r2,40(r2)
  82e960:	1009883a 	mov	r4,r2
  82e964:	e0fffe17 	ldw	r3,-8(fp)
  82e968:	e0bffc17 	ldw	r2,-16(fp)
  82e96c:	1885883a 	add	r2,r3,r2
  82e970:	2085883a 	add	r2,r4,r2
  82e974:	11000204 	addi	r4,r2,8
  82e978:	e0fffc17 	ldw	r3,-16(fp)
  82e97c:	e0bfff17 	ldw	r2,-4(fp)
  82e980:	1885883a 	add	r2,r3,r2
  82e984:	10800204 	addi	r2,r2,8
  82e988:	10800003 	ldbu	r2,0(r2)
  82e98c:	10c03fcc 	andi	r3,r2,255
  82e990:	2005883a 	mov	r2,r4
  82e994:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  82e998:	e0bffc17 	ldw	r2,-16(fp)
  82e99c:	10800044 	addi	r2,r2,1
  82e9a0:	e0bffc15 	stw	r2,-16(fp)
  82e9a4:	e0bffc17 	ldw	r2,-16(fp)
  82e9a8:	108000d0 	cmplti	r2,r2,3
  82e9ac:	103fea1e 	bne	r2,zero,82e958 <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  82e9b0:	d0a7d517 	ldw	r2,-24748(gp)
  82e9b4:	10800a17 	ldw	r2,40(r2)
  82e9b8:	1007883a 	mov	r3,r2
  82e9bc:	e0bffe17 	ldw	r2,-8(fp)
  82e9c0:	1885883a 	add	r2,r3,r2
  82e9c4:	110002c4 	addi	r4,r2,11
  82e9c8:	e0bfff17 	ldw	r2,-4(fp)
  82e9cc:	108002c3 	ldbu	r2,11(r2)
  82e9d0:	10c03fcc 	andi	r3,r2,255
  82e9d4:	2005883a 	mov	r2,r4
  82e9d8:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  82e9dc:	d0a7d517 	ldw	r2,-24748(gp)
  82e9e0:	10800a17 	ldw	r2,40(r2)
  82e9e4:	1007883a 	mov	r3,r2
  82e9e8:	e0bffe17 	ldw	r2,-8(fp)
  82e9ec:	1885883a 	add	r2,r3,r2
  82e9f0:	11000384 	addi	r4,r2,14
  82e9f4:	e0bfff17 	ldw	r2,-4(fp)
  82e9f8:	1080030b 	ldhu	r2,12(r2)
  82e9fc:	10ffffcc 	andi	r3,r2,65535
  82ea00:	2005883a 	mov	r2,r4
  82ea04:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  82ea08:	d0a7d517 	ldw	r2,-24748(gp)
  82ea0c:	10800a17 	ldw	r2,40(r2)
  82ea10:	1007883a 	mov	r3,r2
  82ea14:	e0bffe17 	ldw	r2,-8(fp)
  82ea18:	1885883a 	add	r2,r3,r2
  82ea1c:	11000404 	addi	r4,r2,16
  82ea20:	e0bfff17 	ldw	r2,-4(fp)
  82ea24:	1080038b 	ldhu	r2,14(r2)
  82ea28:	10ffffcc 	andi	r3,r2,65535
  82ea2c:	2005883a 	mov	r2,r4
  82ea30:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  82ea34:	d0a7d517 	ldw	r2,-24748(gp)
  82ea38:	10800a17 	ldw	r2,40(r2)
  82ea3c:	1007883a 	mov	r3,r2
  82ea40:	e0bffe17 	ldw	r2,-8(fp)
  82ea44:	1885883a 	add	r2,r3,r2
  82ea48:	11000484 	addi	r4,r2,18
  82ea4c:	e0bfff17 	ldw	r2,-4(fp)
  82ea50:	1080040b 	ldhu	r2,16(r2)
  82ea54:	10ffffcc 	andi	r3,r2,65535
  82ea58:	2005883a 	mov	r2,r4
  82ea5c:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  82ea60:	d0a7d517 	ldw	r2,-24748(gp)
  82ea64:	10800a17 	ldw	r2,40(r2)
  82ea68:	1007883a 	mov	r3,r2
  82ea6c:	e0bffe17 	ldw	r2,-8(fp)
  82ea70:	1885883a 	add	r2,r3,r2
  82ea74:	11000584 	addi	r4,r2,22
  82ea78:	e0bfff17 	ldw	r2,-4(fp)
  82ea7c:	1080048b 	ldhu	r2,18(r2)
  82ea80:	10ffffcc 	andi	r3,r2,65535
  82ea84:	2005883a 	mov	r2,r4
  82ea88:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  82ea8c:	d0a7d517 	ldw	r2,-24748(gp)
  82ea90:	10800a17 	ldw	r2,40(r2)
  82ea94:	1007883a 	mov	r3,r2
  82ea98:	e0bffe17 	ldw	r2,-8(fp)
  82ea9c:	1885883a 	add	r2,r3,r2
  82eaa0:	11000604 	addi	r4,r2,24
  82eaa4:	e0bfff17 	ldw	r2,-4(fp)
  82eaa8:	1080050b 	ldhu	r2,20(r2)
  82eaac:	10ffffcc 	andi	r3,r2,65535
  82eab0:	2005883a 	mov	r2,r4
  82eab4:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  82eab8:	d0a7d517 	ldw	r2,-24748(gp)
  82eabc:	10800a17 	ldw	r2,40(r2)
  82eac0:	1007883a 	mov	r3,r2
  82eac4:	e0bffe17 	ldw	r2,-8(fp)
  82eac8:	1885883a 	add	r2,r3,r2
  82eacc:	11000684 	addi	r4,r2,26
  82ead0:	e0bfff17 	ldw	r2,-4(fp)
  82ead4:	1080058b 	ldhu	r2,22(r2)
  82ead8:	10ffffcc 	andi	r3,r2,65535
  82eadc:	2005883a 	mov	r2,r4
  82eae0:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  82eae4:	d0a7d517 	ldw	r2,-24748(gp)
  82eae8:	10800a17 	ldw	r2,40(r2)
  82eaec:	1007883a 	mov	r3,r2
  82eaf0:	e0bffe17 	ldw	r2,-8(fp)
  82eaf4:	1885883a 	add	r2,r3,r2
  82eaf8:	11000704 	addi	r4,r2,28
  82eafc:	e0bfff17 	ldw	r2,-4(fp)
  82eb00:	10800617 	ldw	r2,24(r2)
  82eb04:	1007883a 	mov	r3,r2
  82eb08:	2005883a 	mov	r2,r4
  82eb0c:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
  82eb10:	00800044 	movi	r2,1
  82eb14:	d0a7d615 	stw	r2,-24744(gp)
        result = true;
  82eb18:	00800044 	movi	r2,1
  82eb1c:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
  82eb20:	e0bffd17 	ldw	r2,-12(fp)
}
  82eb24:	e037883a 	mov	sp,fp
  82eb28:	dfc00117 	ldw	ra,4(sp)
  82eb2c:	df000017 	ldw	fp,0(sp)
  82eb30:	dec00204 	addi	sp,sp,8
  82eb34:	f800283a 	ret

0082eb38 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  82eb38:	defff804 	addi	sp,sp,-32
  82eb3c:	dfc00715 	stw	ra,28(sp)
  82eb40:	df000615 	stw	fp,24(sp)
  82eb44:	dc000515 	stw	r16,20(sp)
  82eb48:	df000504 	addi	fp,sp,20
  82eb4c:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  82eb50:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  82eb54:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  82eb58:	0009883a 	mov	r4,zero
  82eb5c:	e17fff17 	ldw	r5,-4(fp)
  82eb60:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  82eb64:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  82eb68:	d0a7d517 	ldw	r2,-24748(gp)
  82eb6c:	10800a17 	ldw	r2,40(r2)
  82eb70:	10807f84 	addi	r2,r2,510
  82eb74:	1080002b 	ldhuio	r2,0(r2)
  82eb78:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  82eb7c:	e0bffc0f 	ldh	r2,-16(fp)
  82eb80:	10ffffcc 	andi	r3,r2,65535
  82eb84:	00aa9554 	movui	r2,43605
  82eb88:	1881751e 	bne	r3,r2,82f160 <Check_for_DOS_FAT+0x628>
  82eb8c:	e0bffe17 	ldw	r2,-8(fp)
  82eb90:	1005003a 	cmpeq	r2,r2,zero
  82eb94:	1001721e 	bne	r2,zero,82f160 <Check_for_DOS_FAT+0x628>
	{
		int num_clusters = 0;
  82eb98:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  82eb9c:	d0a7d517 	ldw	r2,-24748(gp)
  82eba0:	10800a17 	ldw	r2,40(r2)
  82eba4:	10800023 	ldbuio	r2,0(r2)
  82eba8:	1007883a 	mov	r3,r2
  82ebac:	008020f4 	movhi	r2,131
  82ebb0:	109e5e04 	addi	r2,r2,31096
  82ebb4:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  82ebb8:	d0a7d517 	ldw	r2,-24748(gp)
  82ebbc:	10800a17 	ldw	r2,40(r2)
  82ebc0:	10800044 	addi	r2,r2,1
  82ebc4:	10800023 	ldbuio	r2,0(r2)
  82ebc8:	1007883a 	mov	r3,r2
  82ebcc:	008020f4 	movhi	r2,131
  82ebd0:	109e5e04 	addi	r2,r2,31096
  82ebd4:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  82ebd8:	d0a7d517 	ldw	r2,-24748(gp)
  82ebdc:	10800a17 	ldw	r2,40(r2)
  82ebe0:	10800084 	addi	r2,r2,2
  82ebe4:	10800023 	ldbuio	r2,0(r2)
  82ebe8:	1007883a 	mov	r3,r2
  82ebec:	008020f4 	movhi	r2,131
  82ebf0:	109e5e04 	addi	r2,r2,31096
  82ebf4:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
  82ebf8:	e03ffd15 	stw	zero,-12(fp)
  82ebfc:	00001006 	br	82ec40 <Check_for_DOS_FAT+0x108>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  82ec00:	e13ffd17 	ldw	r4,-12(fp)
  82ec04:	d0a7d517 	ldw	r2,-24748(gp)
  82ec08:	10800a17 	ldw	r2,40(r2)
  82ec0c:	1007883a 	mov	r3,r2
  82ec10:	e0bffd17 	ldw	r2,-12(fp)
  82ec14:	1885883a 	add	r2,r3,r2
  82ec18:	108000c4 	addi	r2,r2,3
  82ec1c:	10800023 	ldbuio	r2,0(r2)
  82ec20:	1007883a 	mov	r3,r2
  82ec24:	008020f4 	movhi	r2,131
  82ec28:	109e5e04 	addi	r2,r2,31096
  82ec2c:	1105883a 	add	r2,r2,r4
  82ec30:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
  82ec34:	e0bffd17 	ldw	r2,-12(fp)
  82ec38:	10800044 	addi	r2,r2,1
  82ec3c:	e0bffd15 	stw	r2,-12(fp)
  82ec40:	e0bffd17 	ldw	r2,-12(fp)
  82ec44:	10800210 	cmplti	r2,r2,8
  82ec48:	103fed1e 	bne	r2,zero,82ec00 <Check_for_DOS_FAT+0xc8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  82ec4c:	d0a7d517 	ldw	r2,-24748(gp)
  82ec50:	10800a17 	ldw	r2,40(r2)
  82ec54:	10800304 	addi	r2,r2,12
  82ec58:	10800023 	ldbuio	r2,0(r2)
  82ec5c:	10803fcc 	andi	r2,r2,255
  82ec60:	1004923a 	slli	r2,r2,8
  82ec64:	1007883a 	mov	r3,r2
  82ec68:	d0a7d517 	ldw	r2,-24748(gp)
  82ec6c:	10800a17 	ldw	r2,40(r2)
  82ec70:	108002c4 	addi	r2,r2,11
  82ec74:	10800023 	ldbuio	r2,0(r2)
  82ec78:	10803fcc 	andi	r2,r2,255
  82ec7c:	1080201c 	xori	r2,r2,128
  82ec80:	10bfe004 	addi	r2,r2,-128
  82ec84:	1884b03a 	or	r2,r3,r2
  82ec88:	1007883a 	mov	r3,r2
  82ec8c:	008020f4 	movhi	r2,131
  82ec90:	109e5e04 	addi	r2,r2,31096
  82ec94:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  82ec98:	d0a7d517 	ldw	r2,-24748(gp)
  82ec9c:	10800a17 	ldw	r2,40(r2)
  82eca0:	10800344 	addi	r2,r2,13
  82eca4:	10800023 	ldbuio	r2,0(r2)
  82eca8:	1007883a 	mov	r3,r2
  82ecac:	008020f4 	movhi	r2,131
  82ecb0:	109e5e04 	addi	r2,r2,31096
  82ecb4:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  82ecb8:	d0a7d517 	ldw	r2,-24748(gp)
  82ecbc:	10800a17 	ldw	r2,40(r2)
  82ecc0:	10800384 	addi	r2,r2,14
  82ecc4:	1080002b 	ldhuio	r2,0(r2)
  82ecc8:	1007883a 	mov	r3,r2
  82eccc:	008020f4 	movhi	r2,131
  82ecd0:	109e5e04 	addi	r2,r2,31096
  82ecd4:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  82ecd8:	d0a7d517 	ldw	r2,-24748(gp)
  82ecdc:	10800a17 	ldw	r2,40(r2)
  82ece0:	10800404 	addi	r2,r2,16
  82ece4:	10800023 	ldbuio	r2,0(r2)
  82ece8:	1007883a 	mov	r3,r2
  82ecec:	008020f4 	movhi	r2,131
  82ecf0:	109e5e04 	addi	r2,r2,31096
  82ecf4:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  82ecf8:	d0a7d517 	ldw	r2,-24748(gp)
  82ecfc:	10800a17 	ldw	r2,40(r2)
  82ed00:	10800484 	addi	r2,r2,18
  82ed04:	10800023 	ldbuio	r2,0(r2)
  82ed08:	10803fcc 	andi	r2,r2,255
  82ed0c:	1004923a 	slli	r2,r2,8
  82ed10:	1007883a 	mov	r3,r2
  82ed14:	d0a7d517 	ldw	r2,-24748(gp)
  82ed18:	10800a17 	ldw	r2,40(r2)
  82ed1c:	10800444 	addi	r2,r2,17
  82ed20:	10800023 	ldbuio	r2,0(r2)
  82ed24:	10803fcc 	andi	r2,r2,255
  82ed28:	1884b03a 	or	r2,r3,r2
  82ed2c:	1007883a 	mov	r3,r2
  82ed30:	008020f4 	movhi	r2,131
  82ed34:	109e5e04 	addi	r2,r2,31096
  82ed38:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  82ed3c:	d0a7d517 	ldw	r2,-24748(gp)
  82ed40:	10800a17 	ldw	r2,40(r2)
  82ed44:	10800504 	addi	r2,r2,20
  82ed48:	10800023 	ldbuio	r2,0(r2)
  82ed4c:	10803fcc 	andi	r2,r2,255
  82ed50:	1004923a 	slli	r2,r2,8
  82ed54:	1007883a 	mov	r3,r2
  82ed58:	d0a7d517 	ldw	r2,-24748(gp)
  82ed5c:	10800a17 	ldw	r2,40(r2)
  82ed60:	108004c4 	addi	r2,r2,19
  82ed64:	10800023 	ldbuio	r2,0(r2)
  82ed68:	10803fcc 	andi	r2,r2,255
  82ed6c:	1884b03a 	or	r2,r3,r2
  82ed70:	1007883a 	mov	r3,r2
  82ed74:	008020f4 	movhi	r2,131
  82ed78:	109e5e04 	addi	r2,r2,31096
  82ed7c:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  82ed80:	d0a7d517 	ldw	r2,-24748(gp)
  82ed84:	10800a17 	ldw	r2,40(r2)
  82ed88:	10800544 	addi	r2,r2,21
  82ed8c:	10800023 	ldbuio	r2,0(r2)
  82ed90:	1007883a 	mov	r3,r2
  82ed94:	008020f4 	movhi	r2,131
  82ed98:	109e5e04 	addi	r2,r2,31096
  82ed9c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  82eda0:	d0a7d517 	ldw	r2,-24748(gp)
  82eda4:	10800a17 	ldw	r2,40(r2)
  82eda8:	10800584 	addi	r2,r2,22
  82edac:	1080002b 	ldhuio	r2,0(r2)
  82edb0:	1007883a 	mov	r3,r2
  82edb4:	008020f4 	movhi	r2,131
  82edb8:	109e5e04 	addi	r2,r2,31096
  82edbc:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  82edc0:	d0a7d517 	ldw	r2,-24748(gp)
  82edc4:	10800a17 	ldw	r2,40(r2)
  82edc8:	10800604 	addi	r2,r2,24
  82edcc:	1080002b 	ldhuio	r2,0(r2)
  82edd0:	1007883a 	mov	r3,r2
  82edd4:	008020f4 	movhi	r2,131
  82edd8:	109e5e04 	addi	r2,r2,31096
  82eddc:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  82ede0:	d0a7d517 	ldw	r2,-24748(gp)
  82ede4:	10800a17 	ldw	r2,40(r2)
  82ede8:	10800684 	addi	r2,r2,26
  82edec:	1080002b 	ldhuio	r2,0(r2)
  82edf0:	1007883a 	mov	r3,r2
  82edf4:	008020f4 	movhi	r2,131
  82edf8:	109e5e04 	addi	r2,r2,31096
  82edfc:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  82ee00:	d0a7d517 	ldw	r2,-24748(gp)
  82ee04:	10800a17 	ldw	r2,40(r2)
  82ee08:	10800704 	addi	r2,r2,28
  82ee0c:	10800037 	ldwio	r2,0(r2)
  82ee10:	1007883a 	mov	r3,r2
  82ee14:	008020f4 	movhi	r2,131
  82ee18:	109e5e04 	addi	r2,r2,31096
  82ee1c:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  82ee20:	d0a7d517 	ldw	r2,-24748(gp)
  82ee24:	10800a17 	ldw	r2,40(r2)
  82ee28:	10800804 	addi	r2,r2,32
  82ee2c:	10800037 	ldwio	r2,0(r2)
  82ee30:	1007883a 	mov	r3,r2
  82ee34:	008020f4 	movhi	r2,131
  82ee38:	109e5e04 	addi	r2,r2,31096
  82ee3c:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  82ee40:	d0a7d517 	ldw	r2,-24748(gp)
  82ee44:	10800a17 	ldw	r2,40(r2)
  82ee48:	10800904 	addi	r2,r2,36
  82ee4c:	10800023 	ldbuio	r2,0(r2)
  82ee50:	1007883a 	mov	r3,r2
  82ee54:	008020f4 	movhi	r2,131
  82ee58:	109e5e04 	addi	r2,r2,31096
  82ee5c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  82ee60:	d0a7d517 	ldw	r2,-24748(gp)
  82ee64:	10800a17 	ldw	r2,40(r2)
  82ee68:	10800944 	addi	r2,r2,37
  82ee6c:	10800023 	ldbuio	r2,0(r2)
  82ee70:	1007883a 	mov	r3,r2
  82ee74:	008020f4 	movhi	r2,131
  82ee78:	109e5e04 	addi	r2,r2,31096
  82ee7c:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  82ee80:	d0a7d517 	ldw	r2,-24748(gp)
  82ee84:	10800a17 	ldw	r2,40(r2)
  82ee88:	10800984 	addi	r2,r2,38
  82ee8c:	10800023 	ldbuio	r2,0(r2)
  82ee90:	1007883a 	mov	r3,r2
  82ee94:	008020f4 	movhi	r2,131
  82ee98:	109e5e04 	addi	r2,r2,31096
  82ee9c:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  82eea0:	008020f4 	movhi	r2,131
  82eea4:	109e5e04 	addi	r2,r2,31096
  82eea8:	1080040b 	ldhu	r2,16(r2)
  82eeac:	10ffffcc 	andi	r3,r2,65535
  82eeb0:	008020f4 	movhi	r2,131
  82eeb4:	109e5e04 	addi	r2,r2,31096
  82eeb8:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  82eebc:	008020f4 	movhi	r2,131
  82eec0:	109e5e04 	addi	r2,r2,31096
  82eec4:	10c01117 	ldw	r3,68(r2)
  82eec8:	008020f4 	movhi	r2,131
  82eecc:	109e5e04 	addi	r2,r2,31096
  82eed0:	1080068b 	ldhu	r2,26(r2)
  82eed4:	10bfffcc 	andi	r2,r2,65535
  82eed8:	1887883a 	add	r3,r3,r2
  82eedc:	008020f4 	movhi	r2,131
  82eee0:	109e5e04 	addi	r2,r2,31096
  82eee4:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  82eee8:	008020f4 	movhi	r2,131
  82eeec:	109e5e04 	addi	r2,r2,31096
  82eef0:	10c01217 	ldw	r3,72(r2)
  82eef4:	008020f4 	movhi	r2,131
  82eef8:	109e5e04 	addi	r2,r2,31096
  82eefc:	1080068b 	ldhu	r2,26(r2)
  82ef00:	10bfffcc 	andi	r2,r2,65535
  82ef04:	1887883a 	add	r3,r3,r2
  82ef08:	008020f4 	movhi	r2,131
  82ef0c:	109e5e04 	addi	r2,r2,31096
  82ef10:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  82ef14:	008020f4 	movhi	r2,131
  82ef18:	109e5e04 	addi	r2,r2,31096
  82ef1c:	14001317 	ldw	r16,76(r2)
  82ef20:	008020f4 	movhi	r2,131
  82ef24:	109e5e04 	addi	r2,r2,31096
  82ef28:	1080050b 	ldhu	r2,20(r2)
  82ef2c:	10bfffcc 	andi	r2,r2,65535
  82ef30:	1008917a 	slli	r4,r2,5
  82ef34:	008020f4 	movhi	r2,131
  82ef38:	109e5e04 	addi	r2,r2,31096
  82ef3c:	1080030b 	ldhu	r2,12(r2)
  82ef40:	117fffcc 	andi	r5,r2,65535
  82ef44:	0822e1c0 	call	822e1c <__divsi3>
  82ef48:	8087883a 	add	r3,r16,r2
  82ef4c:	008020f4 	movhi	r2,131
  82ef50:	109e5e04 	addi	r2,r2,31096
  82ef54:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  82ef58:	008020f4 	movhi	r2,131
  82ef5c:	109e5e04 	addi	r2,r2,31096
  82ef60:	1080058b 	ldhu	r2,22(r2)
  82ef64:	10bfffcc 	andi	r2,r2,65535
  82ef68:	1005003a 	cmpeq	r2,r2,zero
  82ef6c:	10000b1e 	bne	r2,zero,82ef9c <Check_for_DOS_FAT+0x464>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  82ef70:	008020f4 	movhi	r2,131
  82ef74:	109e5e04 	addi	r2,r2,31096
  82ef78:	1080058b 	ldhu	r2,22(r2)
  82ef7c:	113fffcc 	andi	r4,r2,65535
  82ef80:	008020f4 	movhi	r2,131
  82ef84:	109e5e04 	addi	r2,r2,31096
  82ef88:	10800383 	ldbu	r2,14(r2)
  82ef8c:	11403fcc 	andi	r5,r2,255
  82ef90:	0822e1c0 	call	822e1c <__divsi3>
  82ef94:	e0bffb15 	stw	r2,-20(fp)
  82ef98:	00000906 	br	82efc0 <Check_for_DOS_FAT+0x488>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  82ef9c:	008020f4 	movhi	r2,131
  82efa0:	109e5e04 	addi	r2,r2,31096
  82efa4:	11000917 	ldw	r4,36(r2)
  82efa8:	008020f4 	movhi	r2,131
  82efac:	109e5e04 	addi	r2,r2,31096
  82efb0:	10800383 	ldbu	r2,14(r2)
  82efb4:	11403fcc 	andi	r5,r2,255
  82efb8:	0822edc0 	call	822edc <__udivsi3>
  82efbc:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
  82efc0:	e0bffb17 	ldw	r2,-20(fp)
  82efc4:	1083fdc8 	cmpgei	r2,r2,4087
  82efc8:	1000051e 	bne	r2,zero,82efe0 <Check_for_DOS_FAT+0x4a8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  82efcc:	00c020f4 	movhi	r3,131
  82efd0:	18de5e04 	addi	r3,r3,31096
  82efd4:	00800304 	movi	r2,12
  82efd8:	18801085 	stb	r2,66(r3)
  82efdc:	00000c06 	br	82f010 <Check_for_DOS_FAT+0x4d8>
		}
		else if (num_clusters <= 65517)
  82efe0:	e0fffb17 	ldw	r3,-20(fp)
  82efe4:	00bffb54 	movui	r2,65517
  82efe8:	10c00516 	blt	r2,r3,82f000 <Check_for_DOS_FAT+0x4c8>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  82efec:	00c020f4 	movhi	r3,131
  82eff0:	18de5e04 	addi	r3,r3,31096
  82eff4:	00800404 	movi	r2,16
  82eff8:	18801085 	stb	r2,66(r3)
  82effc:	00000406 	br	82f010 <Check_for_DOS_FAT+0x4d8>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  82f000:	00c020f4 	movhi	r3,131
  82f004:	18de5e04 	addi	r3,r3,31096
  82f008:	00800804 	movi	r2,32
  82f00c:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
  82f010:	e03ffd15 	stw	zero,-12(fp)
  82f014:	00001106 	br	82f05c <Check_for_DOS_FAT+0x524>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  82f018:	e13ffd17 	ldw	r4,-12(fp)
  82f01c:	d0a7d517 	ldw	r2,-24748(gp)
  82f020:	10800a17 	ldw	r2,40(r2)
  82f024:	1007883a 	mov	r3,r2
  82f028:	e0bffd17 	ldw	r2,-12(fp)
  82f02c:	1885883a 	add	r2,r3,r2
  82f030:	108009c4 	addi	r2,r2,39
  82f034:	10800023 	ldbuio	r2,0(r2)
  82f038:	1007883a 	mov	r3,r2
  82f03c:	008020f4 	movhi	r2,131
  82f040:	109e5e04 	addi	r2,r2,31096
  82f044:	2085883a 	add	r2,r4,r2
  82f048:	10800a04 	addi	r2,r2,40
  82f04c:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
  82f050:	e0bffd17 	ldw	r2,-12(fp)
  82f054:	10800044 	addi	r2,r2,1
  82f058:	e0bffd15 	stw	r2,-12(fp)
  82f05c:	e0bffd17 	ldw	r2,-12(fp)
  82f060:	10800110 	cmplti	r2,r2,4
  82f064:	103fec1e 	bne	r2,zero,82f018 <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  82f068:	e03ffd15 	stw	zero,-12(fp)
  82f06c:	00001106 	br	82f0b4 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  82f070:	e13ffd17 	ldw	r4,-12(fp)
  82f074:	d0a7d517 	ldw	r2,-24748(gp)
  82f078:	10800a17 	ldw	r2,40(r2)
  82f07c:	1007883a 	mov	r3,r2
  82f080:	e0bffd17 	ldw	r2,-12(fp)
  82f084:	1885883a 	add	r2,r3,r2
  82f088:	10800ac4 	addi	r2,r2,43
  82f08c:	10800023 	ldbuio	r2,0(r2)
  82f090:	1007883a 	mov	r3,r2
  82f094:	008020f4 	movhi	r2,131
  82f098:	109e5e04 	addi	r2,r2,31096
  82f09c:	2085883a 	add	r2,r4,r2
  82f0a0:	10800b04 	addi	r2,r2,44
  82f0a4:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  82f0a8:	e0bffd17 	ldw	r2,-12(fp)
  82f0ac:	10800044 	addi	r2,r2,1
  82f0b0:	e0bffd15 	stw	r2,-12(fp)
  82f0b4:	e0bffd17 	ldw	r2,-12(fp)
  82f0b8:	108002d0 	cmplti	r2,r2,11
  82f0bc:	103fec1e 	bne	r2,zero,82f070 <Check_for_DOS_FAT+0x538>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  82f0c0:	e03ffd15 	stw	zero,-12(fp)
  82f0c4:	00001106 	br	82f10c <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  82f0c8:	e13ffd17 	ldw	r4,-12(fp)
  82f0cc:	d0a7d517 	ldw	r2,-24748(gp)
  82f0d0:	10800a17 	ldw	r2,40(r2)
  82f0d4:	1007883a 	mov	r3,r2
  82f0d8:	e0bffd17 	ldw	r2,-12(fp)
  82f0dc:	1885883a 	add	r2,r3,r2
  82f0e0:	10800d84 	addi	r2,r2,54
  82f0e4:	10800023 	ldbuio	r2,0(r2)
  82f0e8:	1007883a 	mov	r3,r2
  82f0ec:	008020f4 	movhi	r2,131
  82f0f0:	109e5e04 	addi	r2,r2,31096
  82f0f4:	2085883a 	add	r2,r4,r2
  82f0f8:	10800e04 	addi	r2,r2,56
  82f0fc:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  82f100:	e0bffd17 	ldw	r2,-12(fp)
  82f104:	10800044 	addi	r2,r2,1
  82f108:	e0bffd15 	stw	r2,-12(fp)
  82f10c:	e0bffd17 	ldw	r2,-12(fp)
  82f110:	10800210 	cmplti	r2,r2,8
  82f114:	103fec1e 	bne	r2,zero,82f0c8 <Check_for_DOS_FAT+0x590>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  82f118:	e03ffd15 	stw	zero,-12(fp)
  82f11c:	00000a06 	br	82f148 <Check_for_DOS_FAT+0x610>
		{
			active_files[counter].in_use = false;
  82f120:	e0bffd17 	ldw	r2,-12(fp)
  82f124:	00c020f4 	movhi	r3,131
  82f128:	18de7304 	addi	r3,r3,31180
  82f12c:	100491ba 	slli	r2,r2,6
  82f130:	10c5883a 	add	r2,r2,r3
  82f134:	10800f04 	addi	r2,r2,60
  82f138:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  82f13c:	e0bffd17 	ldw	r2,-12(fp)
  82f140:	10800044 	addi	r2,r2,1
  82f144:	e0bffd15 	stw	r2,-12(fp)
  82f148:	e0bffd17 	ldw	r2,-12(fp)
  82f14c:	10800510 	cmplti	r2,r2,20
  82f150:	103ff31e 	bne	r2,zero,82f120 <Check_for_DOS_FAT+0x5e8>
		{
			active_files[counter].in_use = false;
		}
		result = true;
  82f154:	00800044 	movi	r2,1
  82f158:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  82f15c:	00000106 	br	82f164 <Check_for_DOS_FAT+0x62c>
		}
		result = true;
	}
    else
    {
        result = false;
  82f160:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
  82f164:	e0bffe17 	ldw	r2,-8(fp)
}
  82f168:	e037883a 	mov	sp,fp
  82f16c:	dfc00217 	ldw	ra,8(sp)
  82f170:	df000117 	ldw	fp,4(sp)
  82f174:	dc000017 	ldw	r16,0(sp)
  82f178:	dec00304 	addi	sp,sp,12
  82f17c:	f800283a 	ret

0082f180 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  82f180:	defffc04 	addi	sp,sp,-16
  82f184:	dfc00315 	stw	ra,12(sp)
  82f188:	df000215 	stw	fp,8(sp)
  82f18c:	df000204 	addi	fp,sp,8
	bool result = false;
  82f190:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  82f194:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  82f198:	1005003a 	cmpeq	r2,r2,zero
  82f19c:	1000301e 	bne	r2,zero,82f260 <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
  82f1a0:	d0a7cf17 	ldw	r2,-24772(gp)
  82f1a4:	1080000b 	ldhu	r2,0(r2)
  82f1a8:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  82f1ac:	d027d315 	stw	zero,-24756(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  82f1b0:	d027d415 	stw	zero,-24752(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  82f1b4:	e0bffe0f 	ldh	r2,-8(fp)
  82f1b8:	1004803a 	cmplt	r2,r2,zero
  82f1bc:	1000281e 	bne	r2,zero,82f260 <Look_for_FAT16+0xe0>
  82f1c0:	e0bffe0b 	ldhu	r2,-8(fp)
  82f1c4:	10bfffcc 	andi	r2,r2,65535
  82f1c8:	1083000c 	andi	r2,r2,3072
  82f1cc:	10830020 	cmpeqi	r2,r2,3072
  82f1d0:	1000231e 	bne	r2,zero,82f260 <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  82f1d4:	e0bffe0b 	ldhu	r2,-8(fp)
  82f1d8:	10bfffcc 	andi	r2,r2,65535
  82f1dc:	1083000c 	andi	r2,r2,3072
  82f1e0:	10810018 	cmpnei	r2,r2,1024
  82f1e4:	1000031e 	bne	r2,zero,82f1f4 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  82f1e8:	0009883a 	mov	r4,zero
  82f1ec:	082eb380 	call	82eb38 <Check_for_DOS_FAT>
  82f1f0:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  82f1f4:	e0bffe0b 	ldhu	r2,-8(fp)
  82f1f8:	10bfffcc 	andi	r2,r2,65535
  82f1fc:	1083000c 	andi	r2,r2,3072
  82f200:	1004c03a 	cmpne	r2,r2,zero
  82f204:	1000061e 	bne	r2,zero,82f220 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  82f208:	082e44c0 	call	82e44c <Check_for_Master_Boot_Record>
  82f20c:	1005003a 	cmpeq	r2,r2,zero
  82f210:	1000031e 	bne	r2,zero,82f220 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  82f214:	d127d317 	ldw	r4,-24756(gp)
  82f218:	082eb380 	call	82eb38 <Check_for_DOS_FAT>
  82f21c:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
  82f220:	e0bfff17 	ldw	r2,-4(fp)
  82f224:	10800058 	cmpnei	r2,r2,1
  82f228:	10000d1e 	bne	r2,zero,82f260 <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  82f22c:	008020f4 	movhi	r2,131
  82f230:	109e5e04 	addi	r2,r2,31096
  82f234:	10801083 	ldbu	r2,66(r2)
  82f238:	10803fcc 	andi	r2,r2,255
  82f23c:	10800420 	cmpeqi	r2,r2,16
  82f240:	1000021e 	bne	r2,zero,82f24c <Look_for_FAT16+0xcc>
				{
					result = false;
  82f244:	e03fff15 	stw	zero,-4(fp)
  82f248:	00000506 	br	82f260 <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  82f24c:	008020f4 	movhi	r2,131
  82f250:	109e5e04 	addi	r2,r2,31096
  82f254:	1080058b 	ldhu	r2,22(r2)
  82f258:	10bfffcc 	andi	r2,r2,65535
  82f25c:	d0a7d415 	stw	r2,-24752(gp)
				}
			}
		}
	}
	return result;
  82f260:	e0bfff17 	ldw	r2,-4(fp)
}
  82f264:	e037883a 	mov	sp,fp
  82f268:	dfc00117 	ldw	ra,4(sp)
  82f26c:	df000017 	ldw	fp,0(sp)
  82f270:	dec00204 	addi	sp,sp,8
  82f274:	f800283a 	ret

0082f278 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  82f278:	defffb04 	addi	sp,sp,-20
  82f27c:	dfc00415 	stw	ra,16(sp)
  82f280:	df000315 	stw	fp,12(sp)
  82f284:	df000304 	addi	fp,sp,12
  82f288:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
  82f28c:	e13fff17 	ldw	r4,-4(fp)
  82f290:	0823e780 	call	823e78 <strlen>
  82f294:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
  82f298:	e03ffe15 	stw	zero,-8(fp)
  82f29c:	00002206 	br	82f328 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  82f2a0:	e0bffe17 	ldw	r2,-8(fp)
  82f2a4:	1007883a 	mov	r3,r2
  82f2a8:	e0bfff17 	ldw	r2,-4(fp)
  82f2ac:	1885883a 	add	r2,r3,r2
  82f2b0:	10800003 	ldbu	r2,0(r2)
  82f2b4:	10803fcc 	andi	r2,r2,255
  82f2b8:	1080201c 	xori	r2,r2,128
  82f2bc:	10bfe004 	addi	r2,r2,-128
  82f2c0:	10801850 	cmplti	r2,r2,97
  82f2c4:	1000151e 	bne	r2,zero,82f31c <filename_to_upper_case+0xa4>
  82f2c8:	e0bffe17 	ldw	r2,-8(fp)
  82f2cc:	1007883a 	mov	r3,r2
  82f2d0:	e0bfff17 	ldw	r2,-4(fp)
  82f2d4:	1885883a 	add	r2,r3,r2
  82f2d8:	10800003 	ldbu	r2,0(r2)
  82f2dc:	10803fcc 	andi	r2,r2,255
  82f2e0:	1080201c 	xori	r2,r2,128
  82f2e4:	10bfe004 	addi	r2,r2,-128
  82f2e8:	10801ec8 	cmpgei	r2,r2,123
  82f2ec:	10000b1e 	bne	r2,zero,82f31c <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  82f2f0:	e0bffe17 	ldw	r2,-8(fp)
  82f2f4:	1007883a 	mov	r3,r2
  82f2f8:	e0bfff17 	ldw	r2,-4(fp)
  82f2fc:	1889883a 	add	r4,r3,r2
  82f300:	e0bffe17 	ldw	r2,-8(fp)
  82f304:	1007883a 	mov	r3,r2
  82f308:	e0bfff17 	ldw	r2,-4(fp)
  82f30c:	1885883a 	add	r2,r3,r2
  82f310:	10800003 	ldbu	r2,0(r2)
  82f314:	10bff804 	addi	r2,r2,-32
  82f318:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  82f31c:	e0bffe17 	ldw	r2,-8(fp)
  82f320:	10800044 	addi	r2,r2,1
  82f324:	e0bffe15 	stw	r2,-8(fp)
  82f328:	e0fffe17 	ldw	r3,-8(fp)
  82f32c:	e0bffd17 	ldw	r2,-12(fp)
  82f330:	18bfdb16 	blt	r3,r2,82f2a0 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  82f334:	e037883a 	mov	sp,fp
  82f338:	dfc00117 	ldw	ra,4(sp)
  82f33c:	df000017 	ldw	fp,0(sp)
  82f340:	dec00204 	addi	sp,sp,8
  82f344:	f800283a 	ret

0082f348 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  82f348:	defff804 	addi	sp,sp,-32
  82f34c:	dfc00715 	stw	ra,28(sp)
  82f350:	df000615 	stw	fp,24(sp)
  82f354:	df000604 	addi	fp,sp,24
  82f358:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
  82f35c:	e13fff17 	ldw	r4,-4(fp)
  82f360:	0823e780 	call	823e78 <strlen>
  82f364:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
  82f368:	00bfffc4 	movi	r2,-1
  82f36c:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
  82f370:	00bfffc4 	movi	r2,-1
  82f374:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
  82f378:	00800044 	movi	r2,1
  82f37c:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
  82f380:	e03ffd15 	stw	zero,-12(fp)
  82f384:	00007606 	br	82f560 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
  82f388:	e0bffd17 	ldw	r2,-12(fp)
  82f38c:	1007883a 	mov	r3,r2
  82f390:	e0bfff17 	ldw	r2,-4(fp)
  82f394:	1885883a 	add	r2,r3,r2
  82f398:	10800003 	ldbu	r2,0(r2)
  82f39c:	10803fcc 	andi	r2,r2,255
  82f3a0:	1080201c 	xori	r2,r2,128
  82f3a4:	10bfe004 	addi	r2,r2,-128
  82f3a8:	10800820 	cmpeqi	r2,r2,32
  82f3ac:	1000431e 	bne	r2,zero,82f4bc <check_file_name_for_FAT16_compliance+0x174>
  82f3b0:	e0bffd17 	ldw	r2,-12(fp)
  82f3b4:	10ffffc4 	addi	r3,r2,-1
  82f3b8:	e0bffc17 	ldw	r2,-16(fp)
  82f3bc:	1880141e 	bne	r3,r2,82f410 <check_file_name_for_FAT16_compliance+0xc8>
  82f3c0:	e0bffd17 	ldw	r2,-12(fp)
  82f3c4:	1007883a 	mov	r3,r2
  82f3c8:	e0bfff17 	ldw	r2,-4(fp)
  82f3cc:	1885883a 	add	r2,r3,r2
  82f3d0:	10800003 	ldbu	r2,0(r2)
  82f3d4:	10803fcc 	andi	r2,r2,255
  82f3d8:	1080201c 	xori	r2,r2,128
  82f3dc:	10bfe004 	addi	r2,r2,-128
  82f3e0:	10801720 	cmpeqi	r2,r2,92
  82f3e4:	1000351e 	bne	r2,zero,82f4bc <check_file_name_for_FAT16_compliance+0x174>
  82f3e8:	e0bffd17 	ldw	r2,-12(fp)
  82f3ec:	1007883a 	mov	r3,r2
  82f3f0:	e0bfff17 	ldw	r2,-4(fp)
  82f3f4:	1885883a 	add	r2,r3,r2
  82f3f8:	10800003 	ldbu	r2,0(r2)
  82f3fc:	10803fcc 	andi	r2,r2,255
  82f400:	1080201c 	xori	r2,r2,128
  82f404:	10bfe004 	addi	r2,r2,-128
  82f408:	10800be0 	cmpeqi	r2,r2,47
  82f40c:	10002b1e 	bne	r2,zero,82f4bc <check_file_name_for_FAT16_compliance+0x174>
  82f410:	e0fffd17 	ldw	r3,-12(fp)
  82f414:	e0bffb17 	ldw	r2,-20(fp)
  82f418:	1885c83a 	sub	r2,r3,r2
  82f41c:	10800258 	cmpnei	r2,r2,9
  82f420:	10000a1e 	bne	r2,zero,82f44c <check_file_name_for_FAT16_compliance+0x104>
  82f424:	e0bffd17 	ldw	r2,-12(fp)
  82f428:	1007883a 	mov	r3,r2
  82f42c:	e0bfff17 	ldw	r2,-4(fp)
  82f430:	1885883a 	add	r2,r3,r2
  82f434:	10800003 	ldbu	r2,0(r2)
  82f438:	10803fcc 	andi	r2,r2,255
  82f43c:	1080201c 	xori	r2,r2,128
  82f440:	10bfe004 	addi	r2,r2,-128
  82f444:	10800b98 	cmpnei	r2,r2,46
  82f448:	10001c1e 	bne	r2,zero,82f4bc <check_file_name_for_FAT16_compliance+0x174>
  82f44c:	e0fffc17 	ldw	r3,-16(fp)
  82f450:	e0bffb17 	ldw	r2,-20(fp)
  82f454:	18801b26 	beq	r3,r2,82f4c4 <check_file_name_for_FAT16_compliance+0x17c>
  82f458:	e0fffd17 	ldw	r3,-12(fp)
  82f45c:	e0bffb17 	ldw	r2,-20(fp)
  82f460:	1885c83a 	sub	r2,r3,r2
  82f464:	10800110 	cmplti	r2,r2,4
  82f468:	1000161e 	bne	r2,zero,82f4c4 <check_file_name_for_FAT16_compliance+0x17c>
  82f46c:	e0bffd17 	ldw	r2,-12(fp)
  82f470:	1007883a 	mov	r3,r2
  82f474:	e0bfff17 	ldw	r2,-4(fp)
  82f478:	1885883a 	add	r2,r3,r2
  82f47c:	10800003 	ldbu	r2,0(r2)
  82f480:	10803fcc 	andi	r2,r2,255
  82f484:	1080201c 	xori	r2,r2,128
  82f488:	10bfe004 	addi	r2,r2,-128
  82f48c:	10801720 	cmpeqi	r2,r2,92
  82f490:	10000c1e 	bne	r2,zero,82f4c4 <check_file_name_for_FAT16_compliance+0x17c>
  82f494:	e0bffd17 	ldw	r2,-12(fp)
  82f498:	1007883a 	mov	r3,r2
  82f49c:	e0bfff17 	ldw	r2,-4(fp)
  82f4a0:	1885883a 	add	r2,r3,r2
  82f4a4:	10800003 	ldbu	r2,0(r2)
  82f4a8:	10803fcc 	andi	r2,r2,255
  82f4ac:	1080201c 	xori	r2,r2,128
  82f4b0:	10bfe004 	addi	r2,r2,-128
  82f4b4:	10800be0 	cmpeqi	r2,r2,47
  82f4b8:	1000021e 	bne	r2,zero,82f4c4 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
  82f4bc:	e03ffa15 	stw	zero,-24(fp)
            break;
  82f4c0:	00002a06 	br	82f56c <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  82f4c4:	e0bffd17 	ldw	r2,-12(fp)
  82f4c8:	1007883a 	mov	r3,r2
  82f4cc:	e0bfff17 	ldw	r2,-4(fp)
  82f4d0:	1885883a 	add	r2,r3,r2
  82f4d4:	10800003 	ldbu	r2,0(r2)
  82f4d8:	10803fcc 	andi	r2,r2,255
  82f4dc:	1080201c 	xori	r2,r2,128
  82f4e0:	10bfe004 	addi	r2,r2,-128
  82f4e4:	10801720 	cmpeqi	r2,r2,92
  82f4e8:	10000a1e 	bne	r2,zero,82f514 <check_file_name_for_FAT16_compliance+0x1cc>
  82f4ec:	e0bffd17 	ldw	r2,-12(fp)
  82f4f0:	1007883a 	mov	r3,r2
  82f4f4:	e0bfff17 	ldw	r2,-4(fp)
  82f4f8:	1885883a 	add	r2,r3,r2
  82f4fc:	10800003 	ldbu	r2,0(r2)
  82f500:	10803fcc 	andi	r2,r2,255
  82f504:	1080201c 	xori	r2,r2,128
  82f508:	10bfe004 	addi	r2,r2,-128
  82f50c:	10800bd8 	cmpnei	r2,r2,47
  82f510:	1000041e 	bne	r2,zero,82f524 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
  82f514:	e0bffd17 	ldw	r2,-12(fp)
  82f518:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
  82f51c:	e0bffd17 	ldw	r2,-12(fp)
  82f520:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
  82f524:	e0bffd17 	ldw	r2,-12(fp)
  82f528:	1007883a 	mov	r3,r2
  82f52c:	e0bfff17 	ldw	r2,-4(fp)
  82f530:	1885883a 	add	r2,r3,r2
  82f534:	10800003 	ldbu	r2,0(r2)
  82f538:	10803fcc 	andi	r2,r2,255
  82f53c:	1080201c 	xori	r2,r2,128
  82f540:	10bfe004 	addi	r2,r2,-128
  82f544:	10800b98 	cmpnei	r2,r2,46
  82f548:	1000021e 	bne	r2,zero,82f554 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
  82f54c:	e0bffd17 	ldw	r2,-12(fp)
  82f550:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  82f554:	e0bffd17 	ldw	r2,-12(fp)
  82f558:	10800044 	addi	r2,r2,1
  82f55c:	e0bffd15 	stw	r2,-12(fp)
  82f560:	e0fffd17 	ldw	r3,-12(fp)
  82f564:	e0bffe17 	ldw	r2,-8(fp)
  82f568:	18bf8716 	blt	r3,r2,82f388 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  82f56c:	e0fffe17 	ldw	r3,-8(fp)
  82f570:	e0bfff17 	ldw	r2,-4(fp)
  82f574:	1885883a 	add	r2,r3,r2
  82f578:	10bfffc4 	addi	r2,r2,-1
  82f57c:	10800003 	ldbu	r2,0(r2)
  82f580:	10803fcc 	andi	r2,r2,255
  82f584:	1080201c 	xori	r2,r2,128
  82f588:	10bfe004 	addi	r2,r2,-128
  82f58c:	10801720 	cmpeqi	r2,r2,92
  82f590:	10000a1e 	bne	r2,zero,82f5bc <check_file_name_for_FAT16_compliance+0x274>
  82f594:	e0fffe17 	ldw	r3,-8(fp)
  82f598:	e0bfff17 	ldw	r2,-4(fp)
  82f59c:	1885883a 	add	r2,r3,r2
  82f5a0:	10bfffc4 	addi	r2,r2,-1
  82f5a4:	10800003 	ldbu	r2,0(r2)
  82f5a8:	10803fcc 	andi	r2,r2,255
  82f5ac:	1080201c 	xori	r2,r2,128
  82f5b0:	10bfe004 	addi	r2,r2,-128
  82f5b4:	10800bd8 	cmpnei	r2,r2,47
  82f5b8:	1000011e 	bne	r2,zero,82f5c0 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
  82f5bc:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
  82f5c0:	e0bffa17 	ldw	r2,-24(fp)
}
  82f5c4:	e037883a 	mov	sp,fp
  82f5c8:	dfc00117 	ldw	ra,4(sp)
  82f5cc:	df000017 	ldw	fp,0(sp)
  82f5d0:	dec00204 	addi	sp,sp,8
  82f5d4:	f800283a 	ret

0082f5d8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  82f5d8:	defffb04 	addi	sp,sp,-20
  82f5dc:	dfc00415 	stw	ra,16(sp)
  82f5e0:	df000315 	stw	fp,12(sp)
  82f5e4:	df000304 	addi	fp,sp,12
  82f5e8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
  82f5ec:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
  82f5f0:	e13fff17 	ldw	r4,-4(fp)
  82f5f4:	0823e780 	call	823e78 <strlen>
  82f5f8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
  82f5fc:	e03ffe15 	stw	zero,-8(fp)
  82f600:	00001706 	br	82f660 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  82f604:	e0bffe17 	ldw	r2,-8(fp)
  82f608:	1007883a 	mov	r3,r2
  82f60c:	e0bfff17 	ldw	r2,-4(fp)
  82f610:	1885883a 	add	r2,r3,r2
  82f614:	10800003 	ldbu	r2,0(r2)
  82f618:	10803fcc 	andi	r2,r2,255
  82f61c:	1080201c 	xori	r2,r2,128
  82f620:	10bfe004 	addi	r2,r2,-128
  82f624:	10801720 	cmpeqi	r2,r2,92
  82f628:	1000101e 	bne	r2,zero,82f66c <get_dir_divider_location+0x94>
  82f62c:	e0bffe17 	ldw	r2,-8(fp)
  82f630:	1007883a 	mov	r3,r2
  82f634:	e0bfff17 	ldw	r2,-4(fp)
  82f638:	1885883a 	add	r2,r3,r2
  82f63c:	10800003 	ldbu	r2,0(r2)
  82f640:	10803fcc 	andi	r2,r2,255
  82f644:	1080201c 	xori	r2,r2,128
  82f648:	10bfe004 	addi	r2,r2,-128
  82f64c:	10800be0 	cmpeqi	r2,r2,47
  82f650:	1000061e 	bne	r2,zero,82f66c <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  82f654:	e0bffe17 	ldw	r2,-8(fp)
  82f658:	10800044 	addi	r2,r2,1
  82f65c:	e0bffe15 	stw	r2,-8(fp)
  82f660:	e0fffe17 	ldw	r3,-8(fp)
  82f664:	e0bffd17 	ldw	r2,-12(fp)
  82f668:	18bfe616 	blt	r3,r2,82f604 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
  82f66c:	e0fffe17 	ldw	r3,-8(fp)
  82f670:	e0bffd17 	ldw	r2,-12(fp)
  82f674:	1880021e 	bne	r3,r2,82f680 <get_dir_divider_location+0xa8>
    {
        index = -1;
  82f678:	00bfffc4 	movi	r2,-1
  82f67c:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
  82f680:	e0bffe17 	ldw	r2,-8(fp)
}
  82f684:	e037883a 	mov	sp,fp
  82f688:	dfc00117 	ldw	ra,4(sp)
  82f68c:	df000017 	ldw	fp,0(sp)
  82f690:	dec00204 	addi	sp,sp,8
  82f694:	f800283a 	ret

0082f698 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  82f698:	defff604 	addi	sp,sp,-40
  82f69c:	df000915 	stw	fp,36(sp)
  82f6a0:	df000904 	addi	fp,sp,36
  82f6a4:	e13ff915 	stw	r4,-28(fp)
  82f6a8:	e17ffa15 	stw	r5,-24(fp)
  82f6ac:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
  82f6b0:	00800044 	movi	r2,1
  82f6b4:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
  82f6b8:	e03ff715 	stw	zero,-36(fp)
  82f6bc:	00005006 	br	82f800 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  82f6c0:	e0fff717 	ldw	r3,-36(fp)
  82f6c4:	e0bff917 	ldw	r2,-28(fp)
  82f6c8:	10c5883a 	add	r2,r2,r3
  82f6cc:	10800003 	ldbu	r2,0(r2)
  82f6d0:	10803fcc 	andi	r2,r2,255
  82f6d4:	10801870 	cmpltui	r2,r2,97
  82f6d8:	1000111e 	bne	r2,zero,82f720 <match_file_record_to_name_ext+0x88>
  82f6dc:	e0fff717 	ldw	r3,-36(fp)
  82f6e0:	e0bff917 	ldw	r2,-28(fp)
  82f6e4:	10c5883a 	add	r2,r2,r3
  82f6e8:	10800003 	ldbu	r2,0(r2)
  82f6ec:	10803fcc 	andi	r2,r2,255
  82f6f0:	10801ee8 	cmpgeui	r2,r2,123
  82f6f4:	10000a1e 	bne	r2,zero,82f720 <match_file_record_to_name_ext+0x88>
  82f6f8:	e0fff717 	ldw	r3,-36(fp)
  82f6fc:	e0bff917 	ldw	r2,-28(fp)
  82f700:	10c5883a 	add	r2,r2,r3
  82f704:	10800003 	ldbu	r2,0(r2)
  82f708:	10bff804 	addi	r2,r2,-32
  82f70c:	10803fcc 	andi	r2,r2,255
  82f710:	1080201c 	xori	r2,r2,128
  82f714:	10bfe004 	addi	r2,r2,-128
  82f718:	e0bfff15 	stw	r2,-4(fp)
  82f71c:	00000806 	br	82f740 <match_file_record_to_name_ext+0xa8>
  82f720:	e0fff717 	ldw	r3,-36(fp)
  82f724:	e0bff917 	ldw	r2,-28(fp)
  82f728:	10c5883a 	add	r2,r2,r3
  82f72c:	10800003 	ldbu	r2,0(r2)
  82f730:	10803fcc 	andi	r2,r2,255
  82f734:	1080201c 	xori	r2,r2,128
  82f738:	10bfe004 	addi	r2,r2,-128
  82f73c:	e0bfff15 	stw	r2,-4(fp)
  82f740:	e0bff717 	ldw	r2,-36(fp)
  82f744:	1007883a 	mov	r3,r2
  82f748:	e0bffa17 	ldw	r2,-24(fp)
  82f74c:	1885883a 	add	r2,r3,r2
  82f750:	10800003 	ldbu	r2,0(r2)
  82f754:	10803fcc 	andi	r2,r2,255
  82f758:	1080201c 	xori	r2,r2,128
  82f75c:	10bfe004 	addi	r2,r2,-128
  82f760:	10801850 	cmplti	r2,r2,97
  82f764:	1000151e 	bne	r2,zero,82f7bc <match_file_record_to_name_ext+0x124>
  82f768:	e0bff717 	ldw	r2,-36(fp)
  82f76c:	1007883a 	mov	r3,r2
  82f770:	e0bffa17 	ldw	r2,-24(fp)
  82f774:	1885883a 	add	r2,r3,r2
  82f778:	10800003 	ldbu	r2,0(r2)
  82f77c:	10803fcc 	andi	r2,r2,255
  82f780:	1080201c 	xori	r2,r2,128
  82f784:	10bfe004 	addi	r2,r2,-128
  82f788:	10801ec8 	cmpgei	r2,r2,123
  82f78c:	10000b1e 	bne	r2,zero,82f7bc <match_file_record_to_name_ext+0x124>
  82f790:	e0bff717 	ldw	r2,-36(fp)
  82f794:	1007883a 	mov	r3,r2
  82f798:	e0bffa17 	ldw	r2,-24(fp)
  82f79c:	1885883a 	add	r2,r3,r2
  82f7a0:	10800003 	ldbu	r2,0(r2)
  82f7a4:	10bff804 	addi	r2,r2,-32
  82f7a8:	10803fcc 	andi	r2,r2,255
  82f7ac:	1080201c 	xori	r2,r2,128
  82f7b0:	10bfe004 	addi	r2,r2,-128
  82f7b4:	e0bffe15 	stw	r2,-8(fp)
  82f7b8:	00000906 	br	82f7e0 <match_file_record_to_name_ext+0x148>
  82f7bc:	e0bff717 	ldw	r2,-36(fp)
  82f7c0:	1007883a 	mov	r3,r2
  82f7c4:	e0bffa17 	ldw	r2,-24(fp)
  82f7c8:	1885883a 	add	r2,r3,r2
  82f7cc:	10800003 	ldbu	r2,0(r2)
  82f7d0:	10803fcc 	andi	r2,r2,255
  82f7d4:	1080201c 	xori	r2,r2,128
  82f7d8:	10bfe004 	addi	r2,r2,-128
  82f7dc:	e0bffe15 	stw	r2,-8(fp)
  82f7e0:	e0bfff17 	ldw	r2,-4(fp)
  82f7e4:	e0fffe17 	ldw	r3,-8(fp)
  82f7e8:	10c00226 	beq	r2,r3,82f7f4 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
  82f7ec:	e03ff815 	stw	zero,-32(fp)
			break;
  82f7f0:	00000606 	br	82f80c <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
  82f7f4:	e0bff717 	ldw	r2,-36(fp)
  82f7f8:	10800044 	addi	r2,r2,1
  82f7fc:	e0bff715 	stw	r2,-36(fp)
  82f800:	e0bff717 	ldw	r2,-36(fp)
  82f804:	10800210 	cmplti	r2,r2,8
  82f808:	103fad1e 	bne	r2,zero,82f6c0 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  82f80c:	e03ff715 	stw	zero,-36(fp)
  82f810:	00005406 	br	82f964 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  82f814:	e0fff717 	ldw	r3,-36(fp)
  82f818:	e0bff917 	ldw	r2,-28(fp)
  82f81c:	1885883a 	add	r2,r3,r2
  82f820:	10800204 	addi	r2,r2,8
  82f824:	10800003 	ldbu	r2,0(r2)
  82f828:	10803fcc 	andi	r2,r2,255
  82f82c:	10801870 	cmpltui	r2,r2,97
  82f830:	1000131e 	bne	r2,zero,82f880 <match_file_record_to_name_ext+0x1e8>
  82f834:	e0fff717 	ldw	r3,-36(fp)
  82f838:	e0bff917 	ldw	r2,-28(fp)
  82f83c:	1885883a 	add	r2,r3,r2
  82f840:	10800204 	addi	r2,r2,8
  82f844:	10800003 	ldbu	r2,0(r2)
  82f848:	10803fcc 	andi	r2,r2,255
  82f84c:	10801ee8 	cmpgeui	r2,r2,123
  82f850:	10000b1e 	bne	r2,zero,82f880 <match_file_record_to_name_ext+0x1e8>
  82f854:	e0fff717 	ldw	r3,-36(fp)
  82f858:	e0bff917 	ldw	r2,-28(fp)
  82f85c:	1885883a 	add	r2,r3,r2
  82f860:	10800204 	addi	r2,r2,8
  82f864:	10800003 	ldbu	r2,0(r2)
  82f868:	10bff804 	addi	r2,r2,-32
  82f86c:	10803fcc 	andi	r2,r2,255
  82f870:	1080201c 	xori	r2,r2,128
  82f874:	10bfe004 	addi	r2,r2,-128
  82f878:	e0bffd15 	stw	r2,-12(fp)
  82f87c:	00000906 	br	82f8a4 <match_file_record_to_name_ext+0x20c>
  82f880:	e0fff717 	ldw	r3,-36(fp)
  82f884:	e0bff917 	ldw	r2,-28(fp)
  82f888:	1885883a 	add	r2,r3,r2
  82f88c:	10800204 	addi	r2,r2,8
  82f890:	10800003 	ldbu	r2,0(r2)
  82f894:	10803fcc 	andi	r2,r2,255
  82f898:	1080201c 	xori	r2,r2,128
  82f89c:	10bfe004 	addi	r2,r2,-128
  82f8a0:	e0bffd15 	stw	r2,-12(fp)
  82f8a4:	e0bff717 	ldw	r2,-36(fp)
  82f8a8:	1007883a 	mov	r3,r2
  82f8ac:	e0bffb17 	ldw	r2,-20(fp)
  82f8b0:	1885883a 	add	r2,r3,r2
  82f8b4:	10800003 	ldbu	r2,0(r2)
  82f8b8:	10803fcc 	andi	r2,r2,255
  82f8bc:	1080201c 	xori	r2,r2,128
  82f8c0:	10bfe004 	addi	r2,r2,-128
  82f8c4:	10801850 	cmplti	r2,r2,97
  82f8c8:	1000151e 	bne	r2,zero,82f920 <match_file_record_to_name_ext+0x288>
  82f8cc:	e0bff717 	ldw	r2,-36(fp)
  82f8d0:	1007883a 	mov	r3,r2
  82f8d4:	e0bffb17 	ldw	r2,-20(fp)
  82f8d8:	1885883a 	add	r2,r3,r2
  82f8dc:	10800003 	ldbu	r2,0(r2)
  82f8e0:	10803fcc 	andi	r2,r2,255
  82f8e4:	1080201c 	xori	r2,r2,128
  82f8e8:	10bfe004 	addi	r2,r2,-128
  82f8ec:	10801ec8 	cmpgei	r2,r2,123
  82f8f0:	10000b1e 	bne	r2,zero,82f920 <match_file_record_to_name_ext+0x288>
  82f8f4:	e0bff717 	ldw	r2,-36(fp)
  82f8f8:	1007883a 	mov	r3,r2
  82f8fc:	e0bffb17 	ldw	r2,-20(fp)
  82f900:	1885883a 	add	r2,r3,r2
  82f904:	10800003 	ldbu	r2,0(r2)
  82f908:	10bff804 	addi	r2,r2,-32
  82f90c:	10803fcc 	andi	r2,r2,255
  82f910:	1080201c 	xori	r2,r2,128
  82f914:	10bfe004 	addi	r2,r2,-128
  82f918:	e0bffc15 	stw	r2,-16(fp)
  82f91c:	00000906 	br	82f944 <match_file_record_to_name_ext+0x2ac>
  82f920:	e0bff717 	ldw	r2,-36(fp)
  82f924:	1007883a 	mov	r3,r2
  82f928:	e0bffb17 	ldw	r2,-20(fp)
  82f92c:	1885883a 	add	r2,r3,r2
  82f930:	10800003 	ldbu	r2,0(r2)
  82f934:	10803fcc 	andi	r2,r2,255
  82f938:	1080201c 	xori	r2,r2,128
  82f93c:	10bfe004 	addi	r2,r2,-128
  82f940:	e0bffc15 	stw	r2,-16(fp)
  82f944:	e0bffd17 	ldw	r2,-12(fp)
  82f948:	e0fffc17 	ldw	r3,-16(fp)
  82f94c:	10c00226 	beq	r2,r3,82f958 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
  82f950:	e03ff815 	stw	zero,-32(fp)
			break;
  82f954:	00000606 	br	82f970 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  82f958:	e0bff717 	ldw	r2,-36(fp)
  82f95c:	10800044 	addi	r2,r2,1
  82f960:	e0bff715 	stw	r2,-36(fp)
  82f964:	e0bff717 	ldw	r2,-36(fp)
  82f968:	108000d0 	cmplti	r2,r2,3
  82f96c:	103fa91e 	bne	r2,zero,82f814 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
  82f970:	e0bff817 	ldw	r2,-32(fp)
}
  82f974:	e037883a 	mov	sp,fp
  82f978:	df000017 	ldw	fp,0(sp)
  82f97c:	dec00104 	addi	sp,sp,4
  82f980:	f800283a 	ret

0082f984 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  82f984:	deffe604 	addi	sp,sp,-104
  82f988:	dfc01915 	stw	ra,100(sp)
  82f98c:	df001815 	stw	fp,96(sp)
  82f990:	df001804 	addi	fp,sp,96
  82f994:	e13ffc15 	stw	r4,-16(fp)
  82f998:	e17ffd15 	stw	r5,-12(fp)
  82f99c:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
  82f9a0:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
  82f9a4:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
  82f9a8:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
  82f9ac:	e13ffc17 	ldw	r4,-16(fp)
  82f9b0:	082f5d80 	call	82f5d8 <get_dir_divider_location>
  82f9b4:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
  82f9b8:	00012206 	br	82fe44 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  82f9bc:	00800804 	movi	r2,32
  82f9c0:	e0bff805 	stb	r2,-32(fp)
  82f9c4:	00800804 	movi	r2,32
  82f9c8:	e0bff845 	stb	r2,-31(fp)
  82f9cc:	00800804 	movi	r2,32
  82f9d0:	e0bff885 	stb	r2,-30(fp)
  82f9d4:	00800804 	movi	r2,32
  82f9d8:	e0bff8c5 	stb	r2,-29(fp)
  82f9dc:	00800804 	movi	r2,32
  82f9e0:	e0bff905 	stb	r2,-28(fp)
  82f9e4:	00800804 	movi	r2,32
  82f9e8:	e0bff945 	stb	r2,-27(fp)
  82f9ec:	00800804 	movi	r2,32
  82f9f0:	e0bff985 	stb	r2,-26(fp)
  82f9f4:	00800804 	movi	r2,32
  82f9f8:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
  82f9fc:	00800804 	movi	r2,32
  82fa00:	e0bffa05 	stb	r2,-24(fp)
  82fa04:	00800804 	movi	r2,32
  82fa08:	e0bffa45 	stb	r2,-23(fp)
  82fa0c:	00800804 	movi	r2,32
  82fa10:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
  82fa14:	00bfffc4 	movi	r2,-1
  82fa18:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
  82fa1c:	e0bff617 	ldw	r2,-40(fp)
  82fa20:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  82fa24:	e03ff415 	stw	zero,-48(fp)
  82fa28:	00002e06 	br	82fae4 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
  82fa2c:	e0fff417 	ldw	r3,-48(fp)
  82fa30:	e0bff317 	ldw	r2,-52(fp)
  82fa34:	1885883a 	add	r2,r3,r2
  82fa38:	1007883a 	mov	r3,r2
  82fa3c:	e0bffc17 	ldw	r2,-16(fp)
  82fa40:	1885883a 	add	r2,r3,r2
  82fa44:	10800003 	ldbu	r2,0(r2)
  82fa48:	10803fcc 	andi	r2,r2,255
  82fa4c:	1080201c 	xori	r2,r2,128
  82fa50:	10bfe004 	addi	r2,r2,-128
  82fa54:	10800b98 	cmpnei	r2,r2,46
  82fa58:	1000031e 	bne	r2,zero,82fa68 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
  82fa5c:	e0bff417 	ldw	r2,-48(fp)
  82fa60:	e0bff215 	stw	r2,-56(fp)
  82fa64:	00001c06 	br	82fad8 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
  82fa68:	e0bff217 	ldw	r2,-56(fp)
  82fa6c:	1004403a 	cmpge	r2,r2,zero
  82fa70:	10000c1e 	bne	r2,zero,82faa4 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
  82fa74:	e13ff417 	ldw	r4,-48(fp)
  82fa78:	e0fff417 	ldw	r3,-48(fp)
  82fa7c:	e0bff317 	ldw	r2,-52(fp)
  82fa80:	1885883a 	add	r2,r3,r2
  82fa84:	1007883a 	mov	r3,r2
  82fa88:	e0bffc17 	ldw	r2,-16(fp)
  82fa8c:	1885883a 	add	r2,r3,r2
  82fa90:	10c00003 	ldbu	r3,0(r2)
  82fa94:	e0bff804 	addi	r2,fp,-32
  82fa98:	1105883a 	add	r2,r2,r4
  82fa9c:	10c00005 	stb	r3,0(r2)
  82faa0:	00000d06 	br	82fad8 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  82faa4:	e0fff417 	ldw	r3,-48(fp)
  82faa8:	e0bff217 	ldw	r2,-56(fp)
  82faac:	1889c83a 	sub	r4,r3,r2
  82fab0:	e0fff417 	ldw	r3,-48(fp)
  82fab4:	e0bff317 	ldw	r2,-52(fp)
  82fab8:	1885883a 	add	r2,r3,r2
  82fabc:	1007883a 	mov	r3,r2
  82fac0:	e0bffc17 	ldw	r2,-16(fp)
  82fac4:	1885883a 	add	r2,r3,r2
  82fac8:	10c00003 	ldbu	r3,0(r2)
  82facc:	e0bffa04 	addi	r2,fp,-24
  82fad0:	1105883a 	add	r2,r2,r4
  82fad4:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  82fad8:	e0bff417 	ldw	r2,-48(fp)
  82fadc:	10800044 	addi	r2,r2,1
  82fae0:	e0bff415 	stw	r2,-48(fp)
  82fae4:	e0fff417 	ldw	r3,-48(fp)
  82fae8:	e0bff517 	ldw	r2,-44(fp)
  82faec:	18bfcf16 	blt	r3,r2,82fa2c <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  82faf0:	e0bff617 	ldw	r2,-40(fp)
  82faf4:	1004c03a 	cmpne	r2,r2,zero
  82faf8:	1000551e 	bne	r2,zero,82fc50 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  82fafc:	008020f4 	movhi	r2,131
  82fb00:	109e5e04 	addi	r2,r2,31096
  82fb04:	1080050b 	ldhu	r2,20(r2)
  82fb08:	10bfffcc 	andi	r2,r2,65535
  82fb0c:	1008917a 	slli	r4,r2,5
  82fb10:	008020f4 	movhi	r2,131
  82fb14:	109e5e04 	addi	r2,r2,31096
  82fb18:	1080030b 	ldhu	r2,12(r2)
  82fb1c:	117fffcc 	andi	r5,r2,65535
  82fb20:	0822e1c0 	call	822e1c <__divsi3>
  82fb24:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  82fb28:	e03fef15 	stw	zero,-68(fp)
  82fb2c:	00003806 	br	82fc10 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  82fb30:	008020f4 	movhi	r2,131
  82fb34:	109e5e04 	addi	r2,r2,31096
  82fb38:	10c01317 	ldw	r3,76(r2)
  82fb3c:	e0bfef17 	ldw	r2,-68(fp)
  82fb40:	1885883a 	add	r2,r3,r2
  82fb44:	1009883a 	mov	r4,r2
  82fb48:	d167d317 	ldw	r5,-24756(gp)
  82fb4c:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  82fb50:	1005003a 	cmpeq	r2,r2,zero
  82fb54:	1000311e 	bne	r2,zero,82fc1c <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  82fb58:	e03fee15 	stw	zero,-72(fp)
  82fb5c:	00002306 	br	82fbec <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  82fb60:	e0bfee17 	ldw	r2,-72(fp)
  82fb64:	1008917a 	slli	r4,r2,5
  82fb68:	e1ffef17 	ldw	r7,-68(fp)
  82fb6c:	e17ffe17 	ldw	r5,-8(fp)
  82fb70:	000d883a 	mov	r6,zero
  82fb74:	082e5fc0 	call	82e5fc <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  82fb78:	e0bffe17 	ldw	r2,-8(fp)
  82fb7c:	10800003 	ldbu	r2,0(r2)
  82fb80:	10803fcc 	andi	r2,r2,255
  82fb84:	10803960 	cmpeqi	r2,r2,229
  82fb88:	1000151e 	bne	r2,zero,82fbe0 <get_home_directory_cluster_for_file+0x25c>
  82fb8c:	e0bffe17 	ldw	r2,-8(fp)
  82fb90:	10800003 	ldbu	r2,0(r2)
  82fb94:	10803fcc 	andi	r2,r2,255
  82fb98:	1005003a 	cmpeq	r2,r2,zero
  82fb9c:	1000101e 	bne	r2,zero,82fbe0 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  82fba0:	e17ff804 	addi	r5,fp,-32
  82fba4:	e1bffa04 	addi	r6,fp,-24
  82fba8:	e13ffe17 	ldw	r4,-8(fp)
  82fbac:	082f6980 	call	82f698 <match_file_record_to_name_ext>
  82fbb0:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
  82fbb4:	e0bfed17 	ldw	r2,-76(fp)
  82fbb8:	1005003a 	cmpeq	r2,r2,zero
  82fbbc:	1000081e 	bne	r2,zero,82fbe0 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
  82fbc0:	e0bffe17 	ldw	r2,-8(fp)
  82fbc4:	1080058b 	ldhu	r2,22(r2)
  82fbc8:	10bfffcc 	andi	r2,r2,65535
  82fbcc:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  82fbd0:	e0fffe17 	ldw	r3,-8(fp)
  82fbd4:	00800044 	movi	r2,1
  82fbd8:	18800a15 	stw	r2,40(r3)
                                break;
  82fbdc:	00000606 	br	82fbf8 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  82fbe0:	e0bfee17 	ldw	r2,-72(fp)
  82fbe4:	10800044 	addi	r2,r2,1
  82fbe8:	e0bfee15 	stw	r2,-72(fp)
  82fbec:	e0bfee17 	ldw	r2,-72(fp)
  82fbf0:	10800410 	cmplti	r2,r2,16
  82fbf4:	103fda1e 	bne	r2,zero,82fb60 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  82fbf8:	e0fff117 	ldw	r3,-60(fp)
  82fbfc:	e0bff617 	ldw	r2,-40(fp)
  82fc00:	1880061e 	bne	r3,r2,82fc1c <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  82fc04:	e0bfef17 	ldw	r2,-68(fp)
  82fc08:	10800044 	addi	r2,r2,1
  82fc0c:	e0bfef15 	stw	r2,-68(fp)
  82fc10:	e0ffef17 	ldw	r3,-68(fp)
  82fc14:	e0bff017 	ldw	r2,-64(fp)
  82fc18:	18bfc516 	blt	r3,r2,82fb30 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
  82fc1c:	e0fff117 	ldw	r3,-60(fp)
  82fc20:	e0bff617 	ldw	r2,-40(fp)
  82fc24:	18800826 	beq	r3,r2,82fc48 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  82fc28:	e0bff117 	ldw	r2,-60(fp)
  82fc2c:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  82fc30:	e0fff317 	ldw	r3,-52(fp)
  82fc34:	e0bff517 	ldw	r2,-44(fp)
  82fc38:	1885883a 	add	r2,r3,r2
  82fc3c:	10800044 	addi	r2,r2,1
  82fc40:	e0bff315 	stw	r2,-52(fp)
  82fc44:	00007406 	br	82fe18 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  82fc48:	e03fff15 	stw	zero,-4(fp)
  82fc4c:	00008c06 	br	82fe80 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
  82fc50:	e0bff617 	ldw	r2,-40(fp)
  82fc54:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  82fc58:	e0bfec17 	ldw	r2,-80(fp)
  82fc5c:	10ffff84 	addi	r3,r2,-2
  82fc60:	008020f4 	movhi	r2,131
  82fc64:	109e5e04 	addi	r2,r2,31096
  82fc68:	10800383 	ldbu	r2,14(r2)
  82fc6c:	10803fcc 	andi	r2,r2,255
  82fc70:	1885383a 	mul	r2,r3,r2
  82fc74:	1007883a 	mov	r3,r2
  82fc78:	008020f4 	movhi	r2,131
  82fc7c:	109e5e04 	addi	r2,r2,31096
  82fc80:	10801417 	ldw	r2,80(r2)
  82fc84:	1885883a 	add	r2,r3,r2
  82fc88:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  82fc8c:	e03fea15 	stw	zero,-88(fp)
  82fc90:	00003206 	br	82fd5c <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  82fc94:	e0ffea17 	ldw	r3,-88(fp)
  82fc98:	e0bfeb17 	ldw	r2,-84(fp)
  82fc9c:	1889883a 	add	r4,r3,r2
  82fca0:	d167d317 	ldw	r5,-24756(gp)
  82fca4:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  82fca8:	1005003a 	cmpeq	r2,r2,zero
  82fcac:	1000311e 	bne	r2,zero,82fd74 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  82fcb0:	e03fe915 	stw	zero,-92(fp)
  82fcb4:	00002006 	br	82fd38 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  82fcb8:	e0bfe917 	ldw	r2,-92(fp)
  82fcbc:	1008917a 	slli	r4,r2,5
  82fcc0:	e1bfec17 	ldw	r6,-80(fp)
  82fcc4:	e1ffea17 	ldw	r7,-88(fp)
  82fcc8:	e17ffe17 	ldw	r5,-8(fp)
  82fccc:	082e5fc0 	call	82e5fc <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  82fcd0:	e0bffe17 	ldw	r2,-8(fp)
  82fcd4:	10800003 	ldbu	r2,0(r2)
  82fcd8:	10803fcc 	andi	r2,r2,255
  82fcdc:	10803960 	cmpeqi	r2,r2,229
  82fce0:	1000121e 	bne	r2,zero,82fd2c <get_home_directory_cluster_for_file+0x3a8>
  82fce4:	e0bffe17 	ldw	r2,-8(fp)
  82fce8:	10800003 	ldbu	r2,0(r2)
  82fcec:	10803fcc 	andi	r2,r2,255
  82fcf0:	1005003a 	cmpeq	r2,r2,zero
  82fcf4:	10000d1e 	bne	r2,zero,82fd2c <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
  82fcf8:	e17ff804 	addi	r5,fp,-32
  82fcfc:	e1bffa04 	addi	r6,fp,-24
  82fd00:	e13ffe17 	ldw	r4,-8(fp)
  82fd04:	082f6980 	call	82f698 <match_file_record_to_name_ext>
  82fd08:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
  82fd0c:	e0bfe817 	ldw	r2,-96(fp)
  82fd10:	1005003a 	cmpeq	r2,r2,zero
  82fd14:	1000051e 	bne	r2,zero,82fd2c <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  82fd18:	e0bffe17 	ldw	r2,-8(fp)
  82fd1c:	1080058b 	ldhu	r2,22(r2)
  82fd20:	10bfffcc 	andi	r2,r2,65535
  82fd24:	e0bff115 	stw	r2,-60(fp)
                                    break;
  82fd28:	00000606 	br	82fd44 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  82fd2c:	e0bfe917 	ldw	r2,-92(fp)
  82fd30:	10800044 	addi	r2,r2,1
  82fd34:	e0bfe915 	stw	r2,-92(fp)
  82fd38:	e0bfe917 	ldw	r2,-92(fp)
  82fd3c:	10800410 	cmplti	r2,r2,16
  82fd40:	103fdd1e 	bne	r2,zero,82fcb8 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  82fd44:	e0fff117 	ldw	r3,-60(fp)
  82fd48:	e0bff617 	ldw	r2,-40(fp)
  82fd4c:	1880091e 	bne	r3,r2,82fd74 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  82fd50:	e0bfea17 	ldw	r2,-88(fp)
  82fd54:	10800044 	addi	r2,r2,1
  82fd58:	e0bfea15 	stw	r2,-88(fp)
  82fd5c:	008020f4 	movhi	r2,131
  82fd60:	109e5e04 	addi	r2,r2,31096
  82fd64:	10800383 	ldbu	r2,14(r2)
  82fd68:	10c03fcc 	andi	r3,r2,255
  82fd6c:	e0bfea17 	ldw	r2,-88(fp)
  82fd70:	10ffc816 	blt	r2,r3,82fc94 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  82fd74:	e0fff117 	ldw	r3,-60(fp)
  82fd78:	e0bff617 	ldw	r2,-40(fp)
  82fd7c:	1880131e 	bne	r3,r2,82fdcc <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
  82fd80:	e13ff117 	ldw	r4,-60(fp)
  82fd84:	e17ffb04 	addi	r5,fp,-20
  82fd88:	082e2b00 	call	82e2b0 <get_cluster_flag>
  82fd8c:	1005003a 	cmpeq	r2,r2,zero
  82fd90:	10000c1e 	bne	r2,zero,82fdc4 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  82fd94:	e0bffb0b 	ldhu	r2,-20(fp)
  82fd98:	10bfffcc 	andi	r2,r2,65535
  82fd9c:	10fffe0c 	andi	r3,r2,65528
  82fda0:	00bffe14 	movui	r2,65528
  82fda4:	1880021e 	bne	r3,r2,82fdb0 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
  82fda8:	e03fff15 	stw	zero,-4(fp)
  82fdac:	00003406 	br	82fe80 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  82fdb0:	e0bffb0b 	ldhu	r2,-20(fp)
  82fdb4:	10bfffcc 	andi	r2,r2,65535
  82fdb8:	10bffe0c 	andi	r2,r2,65528
  82fdbc:	e0bff115 	stw	r2,-60(fp)
  82fdc0:	00000206 	br	82fdcc <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
  82fdc4:	e03fff15 	stw	zero,-4(fp)
  82fdc8:	00002d06 	br	82fe80 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  82fdcc:	e0ffec17 	ldw	r3,-80(fp)
  82fdd0:	00bffdd4 	movui	r2,65527
  82fdd4:	10c00316 	blt	r2,r3,82fde4 <get_home_directory_cluster_for_file+0x460>
  82fdd8:	e0fff117 	ldw	r3,-60(fp)
  82fddc:	e0bff617 	ldw	r2,-40(fp)
  82fde0:	18bf9d26 	beq	r3,r2,82fc58 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
  82fde4:	e0fff117 	ldw	r3,-60(fp)
  82fde8:	e0bff617 	ldw	r2,-40(fp)
  82fdec:	18800826 	beq	r3,r2,82fe10 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  82fdf0:	e0bff117 	ldw	r2,-60(fp)
  82fdf4:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  82fdf8:	e0fff317 	ldw	r3,-52(fp)
  82fdfc:	e0bff517 	ldw	r2,-44(fp)
  82fe00:	1885883a 	add	r2,r3,r2
  82fe04:	10800044 	addi	r2,r2,1
  82fe08:	e0bff315 	stw	r2,-52(fp)
  82fe0c:	00000206 	br	82fe18 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  82fe10:	e03fff15 	stw	zero,-4(fp)
  82fe14:	00001a06 	br	82fe80 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  82fe18:	e0bff317 	ldw	r2,-52(fp)
  82fe1c:	1007883a 	mov	r3,r2
  82fe20:	e0bffc17 	ldw	r2,-16(fp)
  82fe24:	1889883a 	add	r4,r3,r2
  82fe28:	082f5d80 	call	82f5d8 <get_dir_divider_location>
  82fe2c:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
  82fe30:	e0bff517 	ldw	r2,-44(fp)
  82fe34:	1004403a 	cmpge	r2,r2,zero
  82fe38:	1000021e 	bne	r2,zero,82fe44 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
  82fe3c:	00800044 	movi	r2,1
  82fe40:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  82fe44:	e0bff517 	ldw	r2,-44(fp)
  82fe48:	10800048 	cmpgei	r2,r2,1
  82fe4c:	103edb1e 	bne	r2,zero,82f9bc <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  82fe50:	e0fffd17 	ldw	r3,-12(fp)
  82fe54:	e0bff617 	ldw	r2,-40(fp)
  82fe58:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
  82fe5c:	e0bff617 	ldw	r2,-40(fp)
  82fe60:	1004c03a 	cmpne	r2,r2,zero
  82fe64:	1000041e 	bne	r2,zero,82fe78 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  82fe68:	e0bffe17 	ldw	r2,-8(fp)
  82fe6c:	10000a15 	stw	zero,40(r2)
		result = true;
  82fe70:	00800044 	movi	r2,1
  82fe74:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
  82fe78:	e0bff717 	ldw	r2,-36(fp)
  82fe7c:	e0bfff15 	stw	r2,-4(fp)
  82fe80:	e0bfff17 	ldw	r2,-4(fp)
}
  82fe84:	e037883a 	mov	sp,fp
  82fe88:	dfc00117 	ldw	ra,4(sp)
  82fe8c:	df000017 	ldw	fp,0(sp)
  82fe90:	dec00204 	addi	sp,sp,8
  82fe94:	f800283a 	ret

0082fe98 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  82fe98:	deffe704 	addi	sp,sp,-100
  82fe9c:	dfc01815 	stw	ra,96(sp)
  82fea0:	df001715 	stw	fp,92(sp)
  82fea4:	df001704 	addi	fp,sp,92
  82fea8:	e13ffc15 	stw	r4,-16(fp)
  82feac:	e17ffd15 	stw	r5,-12(fp)
  82feb0:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
  82feb4:	e13ffd17 	ldw	r4,-12(fp)
  82feb8:	082f5d80 	call	82f5d8 <get_dir_divider_location>
  82febc:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
  82fec0:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  82fec4:	00800804 	movi	r2,32
  82fec8:	e0bff805 	stb	r2,-32(fp)
  82fecc:	00800804 	movi	r2,32
  82fed0:	e0bff845 	stb	r2,-31(fp)
  82fed4:	00800804 	movi	r2,32
  82fed8:	e0bff885 	stb	r2,-30(fp)
  82fedc:	00800804 	movi	r2,32
  82fee0:	e0bff8c5 	stb	r2,-29(fp)
  82fee4:	00800804 	movi	r2,32
  82fee8:	e0bff905 	stb	r2,-28(fp)
  82feec:	00800804 	movi	r2,32
  82fef0:	e0bff945 	stb	r2,-27(fp)
  82fef4:	00800804 	movi	r2,32
  82fef8:	e0bff985 	stb	r2,-26(fp)
  82fefc:	00800804 	movi	r2,32
  82ff00:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
  82ff04:	00800804 	movi	r2,32
  82ff08:	e0bffa05 	stb	r2,-24(fp)
  82ff0c:	00800804 	movi	r2,32
  82ff10:	e0bffa45 	stb	r2,-23(fp)
  82ff14:	00800804 	movi	r2,32
  82ff18:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
  82ff1c:	00bfffc4 	movi	r2,-1
  82ff20:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
  82ff24:	e0bffc17 	ldw	r2,-16(fp)
  82ff28:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
  82ff2c:	e13ffd17 	ldw	r4,-12(fp)
  82ff30:	0823e780 	call	823e78 <strlen>
  82ff34:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
  82ff38:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
  82ff3c:	00000b06 	br	82ff6c <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
  82ff40:	e0fff617 	ldw	r3,-40(fp)
  82ff44:	e0bff717 	ldw	r2,-36(fp)
  82ff48:	1885883a 	add	r2,r3,r2
  82ff4c:	10800044 	addi	r2,r2,1
  82ff50:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  82ff54:	e0bff617 	ldw	r2,-40(fp)
  82ff58:	1007883a 	mov	r3,r2
  82ff5c:	e0bffd17 	ldw	r2,-12(fp)
  82ff60:	1889883a 	add	r4,r3,r2
  82ff64:	082f5d80 	call	82f5d8 <get_dir_divider_location>
  82ff68:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  82ff6c:	e0bff717 	ldw	r2,-36(fp)
  82ff70:	10800048 	cmpgei	r2,r2,1
  82ff74:	103ff21e 	bne	r2,zero,82ff40 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  82ff78:	e0bff617 	ldw	r2,-40(fp)
  82ff7c:	e0bff315 	stw	r2,-52(fp)
  82ff80:	00002b06 	br	830030 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
  82ff84:	e0bff317 	ldw	r2,-52(fp)
  82ff88:	1007883a 	mov	r3,r2
  82ff8c:	e0bffd17 	ldw	r2,-12(fp)
  82ff90:	1885883a 	add	r2,r3,r2
  82ff94:	10800003 	ldbu	r2,0(r2)
  82ff98:	10803fcc 	andi	r2,r2,255
  82ff9c:	1080201c 	xori	r2,r2,128
  82ffa0:	10bfe004 	addi	r2,r2,-128
  82ffa4:	10800b98 	cmpnei	r2,r2,46
  82ffa8:	1000031e 	bne	r2,zero,82ffb8 <find_file_in_directory+0x120>
        {
            ext_index = index;
  82ffac:	e0bff317 	ldw	r2,-52(fp)
  82ffb0:	e0bff515 	stw	r2,-44(fp)
  82ffb4:	00001b06 	br	830024 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
  82ffb8:	e0bff517 	ldw	r2,-44(fp)
  82ffbc:	1004403a 	cmpge	r2,r2,zero
  82ffc0:	10000c1e 	bne	r2,zero,82fff4 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
  82ffc4:	e0fff317 	ldw	r3,-52(fp)
  82ffc8:	e0bff617 	ldw	r2,-40(fp)
  82ffcc:	1889c83a 	sub	r4,r3,r2
  82ffd0:	e0bff317 	ldw	r2,-52(fp)
  82ffd4:	1007883a 	mov	r3,r2
  82ffd8:	e0bffd17 	ldw	r2,-12(fp)
  82ffdc:	1885883a 	add	r2,r3,r2
  82ffe0:	10c00003 	ldbu	r3,0(r2)
  82ffe4:	e0bff804 	addi	r2,fp,-32
  82ffe8:	1105883a 	add	r2,r2,r4
  82ffec:	10c00005 	stb	r3,0(r2)
  82fff0:	00000c06 	br	830024 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  82fff4:	e0fff317 	ldw	r3,-52(fp)
  82fff8:	e0bff517 	ldw	r2,-44(fp)
  82fffc:	1885c83a 	sub	r2,r3,r2
  830000:	113fffc4 	addi	r4,r2,-1
  830004:	e0bff317 	ldw	r2,-52(fp)
  830008:	1007883a 	mov	r3,r2
  83000c:	e0bffd17 	ldw	r2,-12(fp)
  830010:	1885883a 	add	r2,r3,r2
  830014:	10c00003 	ldbu	r3,0(r2)
  830018:	e0bffa04 	addi	r2,fp,-24
  83001c:	1105883a 	add	r2,r2,r4
  830020:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  830024:	e0bff317 	ldw	r2,-52(fp)
  830028:	10800044 	addi	r2,r2,1
  83002c:	e0bff315 	stw	r2,-52(fp)
  830030:	e0fff317 	ldw	r3,-52(fp)
  830034:	e0bff217 	ldw	r2,-56(fp)
  830038:	18bfd216 	blt	r3,r2,82ff84 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  83003c:	e0bffc17 	ldw	r2,-16(fp)
  830040:	1004c03a 	cmpne	r2,r2,zero
  830044:	1000441e 	bne	r2,zero,830158 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  830048:	008020f4 	movhi	r2,131
  83004c:	109e5e04 	addi	r2,r2,31096
  830050:	1080050b 	ldhu	r2,20(r2)
  830054:	10bfffcc 	andi	r2,r2,65535
  830058:	1008917a 	slli	r4,r2,5
  83005c:	008020f4 	movhi	r2,131
  830060:	109e5e04 	addi	r2,r2,31096
  830064:	1080030b 	ldhu	r2,12(r2)
  830068:	117fffcc 	andi	r5,r2,65535
  83006c:	0822e1c0 	call	822e1c <__divsi3>
  830070:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  830074:	e03fef15 	stw	zero,-68(fp)
  830078:	00003306 	br	830148 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  83007c:	008020f4 	movhi	r2,131
  830080:	109e5e04 	addi	r2,r2,31096
  830084:	10c01317 	ldw	r3,76(r2)
  830088:	e0bfef17 	ldw	r2,-68(fp)
  83008c:	1885883a 	add	r2,r3,r2
  830090:	1009883a 	mov	r4,r2
  830094:	d167d317 	ldw	r5,-24756(gp)
  830098:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  83009c:	1005003a 	cmpeq	r2,r2,zero
  8300a0:	10008e1e 	bne	r2,zero,8302dc <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8300a4:	e03fee15 	stw	zero,-72(fp)
  8300a8:	00001e06 	br	830124 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  8300ac:	e0bfee17 	ldw	r2,-72(fp)
  8300b0:	1008917a 	slli	r4,r2,5
  8300b4:	e1ffef17 	ldw	r7,-68(fp)
  8300b8:	e17ffe17 	ldw	r5,-8(fp)
  8300bc:	000d883a 	mov	r6,zero
  8300c0:	082e5fc0 	call	82e5fc <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  8300c4:	e0bffe17 	ldw	r2,-8(fp)
  8300c8:	10800003 	ldbu	r2,0(r2)
  8300cc:	10803fcc 	andi	r2,r2,255
  8300d0:	10803960 	cmpeqi	r2,r2,229
  8300d4:	1000101e 	bne	r2,zero,830118 <find_file_in_directory+0x280>
  8300d8:	e0bffe17 	ldw	r2,-8(fp)
  8300dc:	10800003 	ldbu	r2,0(r2)
  8300e0:	10803fcc 	andi	r2,r2,255
  8300e4:	1005003a 	cmpeq	r2,r2,zero
  8300e8:	10000b1e 	bne	r2,zero,830118 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
  8300ec:	e17ff804 	addi	r5,fp,-32
  8300f0:	e1bffa04 	addi	r6,fp,-24
  8300f4:	e13ffe17 	ldw	r4,-8(fp)
  8300f8:	082f6980 	call	82f698 <match_file_record_to_name_ext>
  8300fc:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
  830100:	e0bfed17 	ldw	r2,-76(fp)
  830104:	1005003a 	cmpeq	r2,r2,zero
  830108:	1000031e 	bne	r2,zero,830118 <find_file_in_directory+0x280>
                        {
                            result = true;
  83010c:	00800044 	movi	r2,1
  830110:	e0bff115 	stw	r2,-60(fp)
                            break;
  830114:	00000606 	br	830130 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  830118:	e0bfee17 	ldw	r2,-72(fp)
  83011c:	10800044 	addi	r2,r2,1
  830120:	e0bfee15 	stw	r2,-72(fp)
  830124:	e0bfee17 	ldw	r2,-72(fp)
  830128:	10800410 	cmplti	r2,r2,16
  83012c:	103fdf1e 	bne	r2,zero,8300ac <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
  830130:	e0bff117 	ldw	r2,-60(fp)
  830134:	1004c03a 	cmpne	r2,r2,zero
  830138:	1000681e 	bne	r2,zero,8302dc <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  83013c:	e0bfef17 	ldw	r2,-68(fp)
  830140:	10800044 	addi	r2,r2,1
  830144:	e0bfef15 	stw	r2,-68(fp)
  830148:	e0ffef17 	ldw	r3,-68(fp)
  83014c:	e0bff017 	ldw	r2,-64(fp)
  830150:	18bfca16 	blt	r3,r2,83007c <find_file_in_directory+0x1e4>
  830154:	00006106 	br	8302dc <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  830158:	e0bff417 	ldw	r2,-48(fp)
  83015c:	10ffff84 	addi	r3,r2,-2
  830160:	008020f4 	movhi	r2,131
  830164:	109e5e04 	addi	r2,r2,31096
  830168:	10800383 	ldbu	r2,14(r2)
  83016c:	10803fcc 	andi	r2,r2,255
  830170:	1885383a 	mul	r2,r3,r2
  830174:	1007883a 	mov	r3,r2
  830178:	008020f4 	movhi	r2,131
  83017c:	109e5e04 	addi	r2,r2,31096
  830180:	10801417 	ldw	r2,80(r2)
  830184:	1885883a 	add	r2,r3,r2
  830188:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  83018c:	e03feb15 	stw	zero,-84(fp)
  830190:	00003006 	br	830254 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  830194:	e0ffeb17 	ldw	r3,-84(fp)
  830198:	e0bfec17 	ldw	r2,-80(fp)
  83019c:	1889883a 	add	r4,r3,r2
  8301a0:	d167d317 	ldw	r5,-24756(gp)
  8301a4:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  8301a8:	1005003a 	cmpeq	r2,r2,zero
  8301ac:	10002f1e 	bne	r2,zero,83026c <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  8301b0:	e03fea15 	stw	zero,-88(fp)
  8301b4:	00001e06 	br	830230 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  8301b8:	e0bfea17 	ldw	r2,-88(fp)
  8301bc:	1008917a 	slli	r4,r2,5
  8301c0:	e1bff417 	ldw	r6,-48(fp)
  8301c4:	e1ffeb17 	ldw	r7,-84(fp)
  8301c8:	e17ffe17 	ldw	r5,-8(fp)
  8301cc:	082e5fc0 	call	82e5fc <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  8301d0:	e0bffe17 	ldw	r2,-8(fp)
  8301d4:	10800003 	ldbu	r2,0(r2)
  8301d8:	10803fcc 	andi	r2,r2,255
  8301dc:	10803960 	cmpeqi	r2,r2,229
  8301e0:	1000101e 	bne	r2,zero,830224 <find_file_in_directory+0x38c>
  8301e4:	e0bffe17 	ldw	r2,-8(fp)
  8301e8:	10800003 	ldbu	r2,0(r2)
  8301ec:	10803fcc 	andi	r2,r2,255
  8301f0:	1005003a 	cmpeq	r2,r2,zero
  8301f4:	10000b1e 	bne	r2,zero,830224 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  8301f8:	e17ff804 	addi	r5,fp,-32
  8301fc:	e1bffa04 	addi	r6,fp,-24
  830200:	e13ffe17 	ldw	r4,-8(fp)
  830204:	082f6980 	call	82f698 <match_file_record_to_name_ext>
  830208:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
  83020c:	e0bfe917 	ldw	r2,-92(fp)
  830210:	1005003a 	cmpeq	r2,r2,zero
  830214:	1000031e 	bne	r2,zero,830224 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
  830218:	00800044 	movi	r2,1
  83021c:	e0bff115 	stw	r2,-60(fp)
                                break;
  830220:	00000606 	br	83023c <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  830224:	e0bfea17 	ldw	r2,-88(fp)
  830228:	10800044 	addi	r2,r2,1
  83022c:	e0bfea15 	stw	r2,-88(fp)
  830230:	e0bfea17 	ldw	r2,-88(fp)
  830234:	10800410 	cmplti	r2,r2,16
  830238:	103fdf1e 	bne	r2,zero,8301b8 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
  83023c:	e0bff117 	ldw	r2,-60(fp)
  830240:	1004c03a 	cmpne	r2,r2,zero
  830244:	1000091e 	bne	r2,zero,83026c <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  830248:	e0bfeb17 	ldw	r2,-84(fp)
  83024c:	10800044 	addi	r2,r2,1
  830250:	e0bfeb15 	stw	r2,-84(fp)
  830254:	008020f4 	movhi	r2,131
  830258:	109e5e04 	addi	r2,r2,31096
  83025c:	10800383 	ldbu	r2,14(r2)
  830260:	10c03fcc 	andi	r3,r2,255
  830264:	e0bfeb17 	ldw	r2,-84(fp)
  830268:	10ffca16 	blt	r2,r3,830194 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  83026c:	e0bff117 	ldw	r2,-60(fp)
  830270:	1004c03a 	cmpne	r2,r2,zero
  830274:	1000131e 	bne	r2,zero,8302c4 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
  830278:	e13ff417 	ldw	r4,-48(fp)
  83027c:	e17ffb04 	addi	r5,fp,-20
  830280:	082e2b00 	call	82e2b0 <get_cluster_flag>
  830284:	1005003a 	cmpeq	r2,r2,zero
  830288:	10000c1e 	bne	r2,zero,8302bc <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  83028c:	e0bffb0b 	ldhu	r2,-20(fp)
  830290:	10bfffcc 	andi	r2,r2,65535
  830294:	10fffe0c 	andi	r3,r2,65528
  830298:	00bffe14 	movui	r2,65528
  83029c:	1880021e 	bne	r3,r2,8302a8 <find_file_in_directory+0x410>
					{
						return false;
  8302a0:	e03fff15 	stw	zero,-4(fp)
  8302a4:	00000f06 	br	8302e4 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  8302a8:	e0bffb0b 	ldhu	r2,-20(fp)
  8302ac:	10bfffcc 	andi	r2,r2,65535
  8302b0:	10bffe0c 	andi	r2,r2,65528
  8302b4:	e0bff415 	stw	r2,-48(fp)
  8302b8:	00000206 	br	8302c4 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
  8302bc:	e03fff15 	stw	zero,-4(fp)
  8302c0:	00000806 	br	8302e4 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  8302c4:	e0fff417 	ldw	r3,-48(fp)
  8302c8:	00bffdd4 	movui	r2,65527
  8302cc:	10c00316 	blt	r2,r3,8302dc <find_file_in_directory+0x444>
  8302d0:	e0bff117 	ldw	r2,-60(fp)
  8302d4:	1005003a 	cmpeq	r2,r2,zero
  8302d8:	103f9f1e 	bne	r2,zero,830158 <find_file_in_directory+0x2c0>
    }
    
    return result;   
  8302dc:	e0bff117 	ldw	r2,-60(fp)
  8302e0:	e0bfff15 	stw	r2,-4(fp)
  8302e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8302e8:	e037883a 	mov	sp,fp
  8302ec:	dfc00117 	ldw	ra,4(sp)
  8302f0:	df000017 	ldw	fp,0(sp)
  8302f4:	dec00204 	addi	sp,sp,8
  8302f8:	f800283a 	ret

008302fc <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  8302fc:	defff504 	addi	sp,sp,-44
  830300:	dfc00a15 	stw	ra,40(sp)
  830304:	df000915 	stw	fp,36(sp)
  830308:	df000904 	addi	fp,sp,36
  83030c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  830310:	008020f4 	movhi	r2,131
  830314:	109e5e04 	addi	r2,r2,31096
  830318:	10801117 	ldw	r2,68(r2)
  83031c:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
  830320:	00800084 	movi	r2,2
  830324:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
  830328:	00bfffc4 	movi	r2,-1
  83032c:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
  830330:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  830334:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  830338:	008020f4 	movhi	r2,131
  83033c:	109e5e04 	addi	r2,r2,31096
  830340:	10801417 	ldw	r2,80(r2)
  830344:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  830348:	008020f4 	movhi	r2,131
  83034c:	109e5e04 	addi	r2,r2,31096
  830350:	1080058b 	ldhu	r2,22(r2)
  830354:	10bfffcc 	andi	r2,r2,65535
  830358:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
  83035c:	008020f4 	movhi	r2,131
  830360:	109e5e04 	addi	r2,r2,31096
  830364:	10800917 	ldw	r2,36(r2)
  830368:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
  83036c:	e0fff817 	ldw	r3,-32(fp)
  830370:	e0bff717 	ldw	r2,-36(fp)
  830374:	10c00b2e 	bgeu	r2,r3,8303a4 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  830378:	e0fff817 	ldw	r3,-32(fp)
  83037c:	e0bff917 	ldw	r2,-28(fp)
  830380:	1889c83a 	sub	r4,r3,r2
  830384:	008020f4 	movhi	r2,131
  830388:	109e5e04 	addi	r2,r2,31096
  83038c:	10800383 	ldbu	r2,14(r2)
  830390:	11403fcc 	andi	r5,r2,255
  830394:	0822edc0 	call	822edc <__udivsi3>
  830398:	10800044 	addi	r2,r2,1
  83039c:	e0bffa15 	stw	r2,-24(fp)
  8303a0:	00002906 	br	830448 <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  8303a4:	e0fff717 	ldw	r3,-36(fp)
  8303a8:	e0bff917 	ldw	r2,-28(fp)
  8303ac:	1889c83a 	sub	r4,r3,r2
  8303b0:	008020f4 	movhi	r2,131
  8303b4:	109e5e04 	addi	r2,r2,31096
  8303b8:	10800383 	ldbu	r2,14(r2)
  8303bc:	11403fcc 	andi	r5,r2,255
  8303c0:	0822edc0 	call	822edc <__udivsi3>
  8303c4:	10800044 	addi	r2,r2,1
  8303c8:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8303cc:	00001e06 	br	830448 <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  8303d0:	e13ffe17 	ldw	r4,-8(fp)
  8303d4:	d167d317 	ldw	r5,-24756(gp)
  8303d8:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  8303dc:	1005003a 	cmpeq	r2,r2,zero
  8303e0:	1000131e 	bne	r2,zero,830430 <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  8303e4:	d0a7d517 	ldw	r2,-24748(gp)
  8303e8:	10800a17 	ldw	r2,40(r2)
  8303ec:	1007883a 	mov	r3,r2
  8303f0:	e0bffd17 	ldw	r2,-12(fp)
  8303f4:	10803fcc 	andi	r2,r2,255
  8303f8:	1085883a 	add	r2,r2,r2
  8303fc:	1885883a 	add	r2,r3,r2
  830400:	1080002b 	ldhuio	r2,0(r2)
  830404:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
  830408:	e0bffc0f 	ldh	r2,-16(fp)
  83040c:	1005003a 	cmpeq	r2,r2,zero
  830410:	1000071e 	bne	r2,zero,830430 <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  830414:	e0bffd17 	ldw	r2,-12(fp)
  830418:	10800044 	addi	r2,r2,1
  83041c:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
  830420:	e0bffd17 	ldw	r2,-12(fp)
  830424:	10803fcc 	andi	r2,r2,255
  830428:	1004c03a 	cmpne	r2,r2,zero
  83042c:	103fed1e 	bne	r2,zero,8303e4 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
  830430:	e0bffc0f 	ldh	r2,-16(fp)
  830434:	1005003a 	cmpeq	r2,r2,zero
  830438:	1000081e 	bne	r2,zero,83045c <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
  83043c:	e0bffe17 	ldw	r2,-8(fp)
  830440:	10800044 	addi	r2,r2,1
  830444:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  830448:	008020f4 	movhi	r2,131
  83044c:	109e5e04 	addi	r2,r2,31096
  830450:	10c01217 	ldw	r3,72(r2)
  830454:	e0bffe17 	ldw	r2,-8(fp)
  830458:	18bfdd1e 	bne	r3,r2,8303d0 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  83045c:	e0bffc0f 	ldh	r2,-16(fp)
  830460:	1004c03a 	cmpne	r2,r2,zero
  830464:	1000081e 	bne	r2,zero,830488 <find_first_empty_cluster+0x18c>
  830468:	e0fffc0f 	ldh	r3,-16(fp)
  83046c:	e0bffa17 	ldw	r2,-24(fp)
  830470:	10c00536 	bltu	r2,r3,830488 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
  830474:	e0bfff17 	ldw	r2,-4(fp)
  830478:	e0fffd17 	ldw	r3,-12(fp)
  83047c:	10c00015 	stw	r3,0(r2)
		result = true;
  830480:	00800044 	movi	r2,1
  830484:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
  830488:	e0bffb17 	ldw	r2,-20(fp)
}
  83048c:	e037883a 	mov	sp,fp
  830490:	dfc00117 	ldw	ra,4(sp)
  830494:	df000017 	ldw	fp,0(sp)
  830498:	dec00204 	addi	sp,sp,8
  83049c:	f800283a 	ret

008304a0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  8304a0:	defff404 	addi	sp,sp,-48
  8304a4:	dfc00b15 	stw	ra,44(sp)
  8304a8:	df000a15 	stw	fp,40(sp)
  8304ac:	df000a04 	addi	fp,sp,40
  8304b0:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
  8304b4:	00bfffc4 	movi	r2,-1
  8304b8:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
  8304bc:	e0bffe17 	ldw	r2,-8(fp)
  8304c0:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8304c4:	e0bffa17 	ldw	r2,-24(fp)
  8304c8:	10ffff84 	addi	r3,r2,-2
  8304cc:	008020f4 	movhi	r2,131
  8304d0:	109e5e04 	addi	r2,r2,31096
  8304d4:	10800383 	ldbu	r2,14(r2)
  8304d8:	10803fcc 	andi	r2,r2,255
  8304dc:	1885383a 	mul	r2,r3,r2
  8304e0:	1007883a 	mov	r3,r2
  8304e4:	008020f4 	movhi	r2,131
  8304e8:	109e5e04 	addi	r2,r2,31096
  8304ec:	10801417 	ldw	r2,80(r2)
  8304f0:	1885883a 	add	r2,r3,r2
  8304f4:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8304f8:	e03ff815 	stw	zero,-32(fp)
  8304fc:	00002c06 	br	8305b0 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  830500:	e0fff817 	ldw	r3,-32(fp)
  830504:	e0bff917 	ldw	r2,-28(fp)
  830508:	1889883a 	add	r4,r3,r2
  83050c:	d167d317 	ldw	r5,-24756(gp)
  830510:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  830514:	1005003a 	cmpeq	r2,r2,zero
  830518:	10002b1e 	bne	r2,zero,8305c8 <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  83051c:	e03ff715 	stw	zero,-36(fp)
  830520:	00001d06 	br	830598 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  830524:	d0a7d517 	ldw	r2,-24748(gp)
  830528:	10800a17 	ldw	r2,40(r2)
  83052c:	1007883a 	mov	r3,r2
  830530:	e0bff717 	ldw	r2,-36(fp)
  830534:	1004917a 	slli	r2,r2,5
  830538:	1885883a 	add	r2,r3,r2
  83053c:	10800023 	ldbuio	r2,0(r2)
  830540:	10803fcc 	andi	r2,r2,255
  830544:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  830548:	e0bff60b 	ldhu	r2,-40(fp)
  83054c:	10803960 	cmpeqi	r2,r2,229
  830550:	1000031e 	bne	r2,zero,830560 <find_first_empty_record_in_a_subdirectory+0xc0>
  830554:	e0bff60b 	ldhu	r2,-40(fp)
  830558:	1004c03a 	cmpne	r2,r2,zero
  83055c:	10000b1e 	bne	r2,zero,83058c <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  830560:	e0bff817 	ldw	r2,-32(fp)
  830564:	1006913a 	slli	r3,r2,4
  830568:	e0bff717 	ldw	r2,-36(fp)
  83056c:	1885883a 	add	r2,r3,r2
  830570:	1006943a 	slli	r3,r2,16
  830574:	e0bffa17 	ldw	r2,-24(fp)
  830578:	1884b03a 	or	r2,r3,r2
  83057c:	e0bffb15 	stw	r2,-20(fp)
                        return result;
  830580:	e0bffb17 	ldw	r2,-20(fp)
  830584:	e0bfff15 	stw	r2,-4(fp)
  830588:	00005206 	br	8306d4 <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  83058c:	e0bff717 	ldw	r2,-36(fp)
  830590:	10800044 	addi	r2,r2,1
  830594:	e0bff715 	stw	r2,-36(fp)
  830598:	e0bff717 	ldw	r2,-36(fp)
  83059c:	10800410 	cmplti	r2,r2,16
  8305a0:	103fe01e 	bne	r2,zero,830524 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8305a4:	e0bff817 	ldw	r2,-32(fp)
  8305a8:	10800044 	addi	r2,r2,1
  8305ac:	e0bff815 	stw	r2,-32(fp)
  8305b0:	008020f4 	movhi	r2,131
  8305b4:	109e5e04 	addi	r2,r2,31096
  8305b8:	10800383 	ldbu	r2,14(r2)
  8305bc:	10c03fcc 	andi	r3,r2,255
  8305c0:	e0bff817 	ldw	r2,-32(fp)
  8305c4:	10ffce16 	blt	r2,r3,830500 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  8305c8:	e0bffb17 	ldw	r2,-20(fp)
  8305cc:	1004403a 	cmpge	r2,r2,zero
  8305d0:	1000381e 	bne	r2,zero,8306b4 <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
  8305d4:	e13ffa17 	ldw	r4,-24(fp)
  8305d8:	e17ffc04 	addi	r5,fp,-16
  8305dc:	082e2b00 	call	82e2b0 <get_cluster_flag>
  8305e0:	1005003a 	cmpeq	r2,r2,zero
  8305e4:	1000311e 	bne	r2,zero,8306ac <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  8305e8:	e0bffc0b 	ldhu	r2,-16(fp)
  8305ec:	10bfffcc 	andi	r2,r2,65535
  8305f0:	10fffe0c 	andi	r3,r2,65528
  8305f4:	00bffe14 	movui	r2,65528
  8305f8:	18802e1e 	bne	r3,r2,8306b4 <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
  8305fc:	e13ffd04 	addi	r4,fp,-12
  830600:	08302fc0 	call	8302fc <find_first_empty_cluster>
  830604:	1005003a 	cmpeq	r2,r2,zero
  830608:	1000231e 	bne	r2,zero,830698 <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  83060c:	e13ffa17 	ldw	r4,-24(fp)
  830610:	e0bffd17 	ldw	r2,-12(fp)
  830614:	117fffcc 	andi	r5,r2,65535
  830618:	2960001c 	xori	r5,r5,32768
  83061c:	29600004 	addi	r5,r5,-32768
  830620:	01800044 	movi	r6,1
  830624:	082e3680 	call	82e368 <mark_cluster>
  830628:	1005003a 	cmpeq	r2,r2,zero
  83062c:	10001a1e 	bne	r2,zero,830698 <find_first_empty_record_in_a_subdirectory+0x1f8>
  830630:	e0bffd17 	ldw	r2,-12(fp)
  830634:	1009883a 	mov	r4,r2
  830638:	017fffc4 	movi	r5,-1
  83063c:	01800044 	movi	r6,1
  830640:	082e3680 	call	82e368 <mark_cluster>
  830644:	1005003a 	cmpeq	r2,r2,zero
  830648:	1000131e 	bne	r2,zero,830698 <find_first_empty_record_in_a_subdirectory+0x1f8>
  83064c:	e13ffa17 	ldw	r4,-24(fp)
  830650:	e0bffd17 	ldw	r2,-12(fp)
  830654:	117fffcc 	andi	r5,r2,65535
  830658:	2960001c 	xori	r5,r5,32768
  83065c:	29600004 	addi	r5,r5,-32768
  830660:	000d883a 	mov	r6,zero
  830664:	082e3680 	call	82e368 <mark_cluster>
  830668:	1005003a 	cmpeq	r2,r2,zero
  83066c:	10000a1e 	bne	r2,zero,830698 <find_first_empty_record_in_a_subdirectory+0x1f8>
  830670:	e0bffd17 	ldw	r2,-12(fp)
  830674:	1009883a 	mov	r4,r2
  830678:	017fffc4 	movi	r5,-1
  83067c:	000d883a 	mov	r6,zero
  830680:	082e3680 	call	82e368 <mark_cluster>
  830684:	1005003a 	cmpeq	r2,r2,zero
  830688:	1000031e 	bne	r2,zero,830698 <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
  83068c:	082e1640 	call	82e164 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  830690:	e0bffd17 	ldw	r2,-12(fp)
  830694:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  830698:	e0bffc0b 	ldhu	r2,-16(fp)
  83069c:	10bfffcc 	andi	r2,r2,65535
  8306a0:	10bffe0c 	andi	r2,r2,65528
  8306a4:	e0bffa15 	stw	r2,-24(fp)
  8306a8:	00000206 	br	8306b4 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
  8306ac:	00bfffc4 	movi	r2,-1
  8306b0:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  8306b4:	e0fffa17 	ldw	r3,-24(fp)
  8306b8:	00bffdd4 	movui	r2,65527
  8306bc:	10c00316 	blt	r2,r3,8306cc <find_first_empty_record_in_a_subdirectory+0x22c>
  8306c0:	e0bffb17 	ldw	r2,-20(fp)
  8306c4:	10bfffe0 	cmpeqi	r2,r2,-1
  8306c8:	103f7e1e 	bne	r2,zero,8304c4 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
  8306cc:	e0bffb17 	ldw	r2,-20(fp)
  8306d0:	e0bfff15 	stw	r2,-4(fp)
  8306d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8306d8:	e037883a 	mov	sp,fp
  8306dc:	dfc00117 	ldw	ra,4(sp)
  8306e0:	df000017 	ldw	fp,0(sp)
  8306e4:	dec00204 	addi	sp,sp,8
  8306e8:	f800283a 	ret

008306ec <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  8306ec:	defff804 	addi	sp,sp,-32
  8306f0:	dfc00715 	stw	ra,28(sp)
  8306f4:	df000615 	stw	fp,24(sp)
  8306f8:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8306fc:	008020f4 	movhi	r2,131
  830700:	109e5e04 	addi	r2,r2,31096
  830704:	1080050b 	ldhu	r2,20(r2)
  830708:	10bfffcc 	andi	r2,r2,65535
  83070c:	1008917a 	slli	r4,r2,5
  830710:	008020f4 	movhi	r2,131
  830714:	109e5e04 	addi	r2,r2,31096
  830718:	1080030b 	ldhu	r2,12(r2)
  83071c:	117fffcc 	andi	r5,r2,65535
  830720:	0822e1c0 	call	822e1c <__divsi3>
  830724:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
  830728:	00bfffc4 	movi	r2,-1
  83072c:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  830730:	e03ffd15 	stw	zero,-12(fp)
  830734:	00002d06 	br	8307ec <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  830738:	008020f4 	movhi	r2,131
  83073c:	109e5e04 	addi	r2,r2,31096
  830740:	10c01317 	ldw	r3,76(r2)
  830744:	e0bffd17 	ldw	r2,-12(fp)
  830748:	1885883a 	add	r2,r3,r2
  83074c:	1009883a 	mov	r4,r2
  830750:	d167d317 	ldw	r5,-24756(gp)
  830754:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  830758:	1005003a 	cmpeq	r2,r2,zero
  83075c:	1000261e 	bne	r2,zero,8307f8 <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  830760:	e03ffb15 	stw	zero,-20(fp)
  830764:	00001b06 	br	8307d4 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  830768:	d0a7d517 	ldw	r2,-24748(gp)
  83076c:	10800a17 	ldw	r2,40(r2)
  830770:	1007883a 	mov	r3,r2
  830774:	e0bffb17 	ldw	r2,-20(fp)
  830778:	1004917a 	slli	r2,r2,5
  83077c:	1885883a 	add	r2,r3,r2
  830780:	10800023 	ldbuio	r2,0(r2)
  830784:	10803fcc 	andi	r2,r2,255
  830788:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  83078c:	e0bffa0b 	ldhu	r2,-24(fp)
  830790:	10803960 	cmpeqi	r2,r2,229
  830794:	1000031e 	bne	r2,zero,8307a4 <find_first_empty_record_in_root_directory+0xb8>
  830798:	e0bffa0b 	ldhu	r2,-24(fp)
  83079c:	1004c03a 	cmpne	r2,r2,zero
  8307a0:	1000091e 	bne	r2,zero,8307c8 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
  8307a4:	e0bffd17 	ldw	r2,-12(fp)
  8307a8:	1006913a 	slli	r3,r2,4
  8307ac:	e0bffb17 	ldw	r2,-20(fp)
  8307b0:	1885883a 	add	r2,r3,r2
  8307b4:	1004943a 	slli	r2,r2,16
  8307b8:	e0bffc15 	stw	r2,-16(fp)
                    return result;
  8307bc:	e0bffc17 	ldw	r2,-16(fp)
  8307c0:	e0bfff15 	stw	r2,-4(fp)
  8307c4:	00000e06 	br	830800 <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  8307c8:	e0bffb17 	ldw	r2,-20(fp)
  8307cc:	10800044 	addi	r2,r2,1
  8307d0:	e0bffb15 	stw	r2,-20(fp)
  8307d4:	e0bffb17 	ldw	r2,-20(fp)
  8307d8:	10800410 	cmplti	r2,r2,16
  8307dc:	103fe21e 	bne	r2,zero,830768 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8307e0:	e0bffd17 	ldw	r2,-12(fp)
  8307e4:	10800044 	addi	r2,r2,1
  8307e8:	e0bffd15 	stw	r2,-12(fp)
  8307ec:	e0fffd17 	ldw	r3,-12(fp)
  8307f0:	e0bffe17 	ldw	r2,-8(fp)
  8307f4:	18bfd016 	blt	r3,r2,830738 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
  8307f8:	e0bffc17 	ldw	r2,-16(fp)
  8307fc:	e0bfff15 	stw	r2,-4(fp)
  830800:	e0bfff17 	ldw	r2,-4(fp)
}
  830804:	e037883a 	mov	sp,fp
  830808:	dfc00117 	ldw	ra,4(sp)
  83080c:	df000017 	ldw	fp,0(sp)
  830810:	dec00204 	addi	sp,sp,8
  830814:	f800283a 	ret

00830818 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
  830818:	defffa04 	addi	sp,sp,-24
  83081c:	df000515 	stw	fp,20(sp)
  830820:	df000504 	addi	fp,sp,20
  830824:	e13ffd15 	stw	r4,-12(fp)
  830828:	e17ffe15 	stw	r5,-8(fp)
  83082c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
  830830:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
  830834:	e03ffc15 	stw	zero,-16(fp)
  830838:	00002b06 	br	8308e8 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
  83083c:	e0bffb17 	ldw	r2,-20(fp)
  830840:	1007883a 	mov	r3,r2
  830844:	e0bffd17 	ldw	r2,-12(fp)
  830848:	1885883a 	add	r2,r3,r2
  83084c:	10800003 	ldbu	r2,0(r2)
  830850:	10803fcc 	andi	r2,r2,255
  830854:	1080201c 	xori	r2,r2,128
  830858:	10bfe004 	addi	r2,r2,-128
  83085c:	10800ba0 	cmpeqi	r2,r2,46
  830860:	1000181e 	bne	r2,zero,8308c4 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
  830864:	e0bffc17 	ldw	r2,-16(fp)
  830868:	1007883a 	mov	r3,r2
  83086c:	e0bffe17 	ldw	r2,-8(fp)
  830870:	1889883a 	add	r4,r3,r2
  830874:	e0bffb17 	ldw	r2,-20(fp)
  830878:	1007883a 	mov	r3,r2
  83087c:	e0bffd17 	ldw	r2,-12(fp)
  830880:	1885883a 	add	r2,r3,r2
  830884:	10800003 	ldbu	r2,0(r2)
  830888:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
  83088c:	e0bffb17 	ldw	r2,-20(fp)
  830890:	1007883a 	mov	r3,r2
  830894:	e0bffd17 	ldw	r2,-12(fp)
  830898:	1885883a 	add	r2,r3,r2
  83089c:	10800003 	ldbu	r2,0(r2)
  8308a0:	10803fcc 	andi	r2,r2,255
  8308a4:	1080201c 	xori	r2,r2,128
  8308a8:	10bfe004 	addi	r2,r2,-128
  8308ac:	1005003a 	cmpeq	r2,r2,zero
  8308b0:	10000a1e 	bne	r2,zero,8308dc <convert_filename_to_name_extension+0xc4>
  8308b4:	e0bffb17 	ldw	r2,-20(fp)
  8308b8:	10800044 	addi	r2,r2,1
  8308bc:	e0bffb15 	stw	r2,-20(fp)
  8308c0:	00000606 	br	8308dc <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
  8308c4:	e0bffc17 	ldw	r2,-16(fp)
  8308c8:	1007883a 	mov	r3,r2
  8308cc:	e0bffe17 	ldw	r2,-8(fp)
  8308d0:	1887883a 	add	r3,r3,r2
  8308d4:	00800804 	movi	r2,32
  8308d8:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
  8308dc:	e0bffc17 	ldw	r2,-16(fp)
  8308e0:	10800044 	addi	r2,r2,1
  8308e4:	e0bffc15 	stw	r2,-16(fp)
  8308e8:	e0bffc17 	ldw	r2,-16(fp)
  8308ec:	10800210 	cmplti	r2,r2,8
  8308f0:	103fd21e 	bne	r2,zero,83083c <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  8308f4:	e0bffb17 	ldw	r2,-20(fp)
  8308f8:	1007883a 	mov	r3,r2
  8308fc:	e0bffd17 	ldw	r2,-12(fp)
  830900:	1885883a 	add	r2,r3,r2
  830904:	10800003 	ldbu	r2,0(r2)
  830908:	10803fcc 	andi	r2,r2,255
  83090c:	1080201c 	xori	r2,r2,128
  830910:	10bfe004 	addi	r2,r2,-128
  830914:	10800b98 	cmpnei	r2,r2,46
  830918:	1000031e 	bne	r2,zero,830928 <convert_filename_to_name_extension+0x110>
  83091c:	e0bffb17 	ldw	r2,-20(fp)
  830920:	10800044 	addi	r2,r2,1
  830924:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
  830928:	e03ffc15 	stw	zero,-16(fp)
  83092c:	00002106 	br	8309b4 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
  830930:	e0bffb17 	ldw	r2,-20(fp)
  830934:	1007883a 	mov	r3,r2
  830938:	e0bffd17 	ldw	r2,-12(fp)
  83093c:	1885883a 	add	r2,r3,r2
  830940:	10800003 	ldbu	r2,0(r2)
  830944:	10803fcc 	andi	r2,r2,255
  830948:	1080201c 	xori	r2,r2,128
  83094c:	10bfe004 	addi	r2,r2,-128
  830950:	1005003a 	cmpeq	r2,r2,zero
  830954:	10000e1e 	bne	r2,zero,830990 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
  830958:	e0bffc17 	ldw	r2,-16(fp)
  83095c:	1007883a 	mov	r3,r2
  830960:	e0bfff17 	ldw	r2,-4(fp)
  830964:	1889883a 	add	r4,r3,r2
  830968:	e0bffb17 	ldw	r2,-20(fp)
  83096c:	1007883a 	mov	r3,r2
  830970:	e0bffd17 	ldw	r2,-12(fp)
  830974:	1885883a 	add	r2,r3,r2
  830978:	10800003 	ldbu	r2,0(r2)
  83097c:	20800005 	stb	r2,0(r4)
            local++;
  830980:	e0bffb17 	ldw	r2,-20(fp)
  830984:	10800044 	addi	r2,r2,1
  830988:	e0bffb15 	stw	r2,-20(fp)
  83098c:	00000606 	br	8309a8 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
  830990:	e0bffc17 	ldw	r2,-16(fp)
  830994:	1007883a 	mov	r3,r2
  830998:	e0bfff17 	ldw	r2,-4(fp)
  83099c:	1887883a 	add	r3,r3,r2
  8309a0:	00800804 	movi	r2,32
  8309a4:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
  8309a8:	e0bffc17 	ldw	r2,-16(fp)
  8309ac:	10800044 	addi	r2,r2,1
  8309b0:	e0bffc15 	stw	r2,-16(fp)
  8309b4:	e0bffc17 	ldw	r2,-16(fp)
  8309b8:	108000d0 	cmplti	r2,r2,3
  8309bc:	103fdc1e 	bne	r2,zero,830930 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
  8309c0:	e037883a 	mov	sp,fp
  8309c4:	df000017 	ldw	fp,0(sp)
  8309c8:	dec00104 	addi	sp,sp,4
  8309cc:	f800283a 	ret

008309d0 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  8309d0:	defff304 	addi	sp,sp,-52
  8309d4:	dfc00c15 	stw	ra,48(sp)
  8309d8:	df000b15 	stw	fp,44(sp)
  8309dc:	df000b04 	addi	fp,sp,44
  8309e0:	e13ffb15 	stw	r4,-20(fp)
  8309e4:	e17ffc15 	stw	r5,-16(fp)
  8309e8:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
  8309ec:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
  8309f0:	e13ffa04 	addi	r4,fp,-24
  8309f4:	08302fc0 	call	8302fc <find_first_empty_cluster>
  8309f8:	1005003a 	cmpeq	r2,r2,zero
  8309fc:	1000a31e 	bne	r2,zero,830c8c <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  830a00:	e0bffd17 	ldw	r2,-12(fp)
  830a04:	10800a17 	ldw	r2,40(r2)
  830a08:	1004c03a 	cmpne	r2,r2,zero
  830a0c:	1000031e 	bne	r2,zero,830a1c <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
  830a10:	08306ec0 	call	8306ec <find_first_empty_record_in_root_directory>
  830a14:	e0bff815 	stw	r2,-32(fp)
  830a18:	00000506 	br	830a30 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  830a1c:	e0bffd17 	ldw	r2,-12(fp)
  830a20:	1080058b 	ldhu	r2,22(r2)
  830a24:	113fffcc 	andi	r4,r2,65535
  830a28:	08304a00 	call	8304a0 <find_first_empty_record_in_a_subdirectory>
  830a2c:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
  830a30:	e0bff817 	ldw	r2,-32(fp)
  830a34:	1004803a 	cmplt	r2,r2,zero
  830a38:	1000941e 	bne	r2,zero,830c8c <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
  830a3c:	e13ffb17 	ldw	r4,-20(fp)
  830a40:	082f5d80 	call	82f5d8 <get_dir_divider_location>
  830a44:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
  830a48:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
  830a4c:	00000b06 	br	830a7c <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
  830a50:	e0fff517 	ldw	r3,-44(fp)
  830a54:	e0bff617 	ldw	r2,-40(fp)
  830a58:	1885883a 	add	r2,r3,r2
  830a5c:	10800044 	addi	r2,r2,1
  830a60:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  830a64:	e0bff517 	ldw	r2,-44(fp)
  830a68:	1007883a 	mov	r3,r2
  830a6c:	e0bffb17 	ldw	r2,-20(fp)
  830a70:	1889883a 	add	r4,r3,r2
  830a74:	082f5d80 	call	82f5d8 <get_dir_divider_location>
  830a78:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  830a7c:	e0bff617 	ldw	r2,-40(fp)
  830a80:	10800048 	cmpgei	r2,r2,1
  830a84:	103ff21e 	bne	r2,zero,830a50 <create_file+0x80>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  830a88:	e0bff517 	ldw	r2,-44(fp)
  830a8c:	1007883a 	mov	r3,r2
  830a90:	e0bffb17 	ldw	r2,-20(fp)
  830a94:	1889883a 	add	r4,r3,r2
  830a98:	e0bffc17 	ldw	r2,-16(fp)
  830a9c:	100b883a 	mov	r5,r2
  830aa0:	e0bffc17 	ldw	r2,-16(fp)
  830aa4:	10800204 	addi	r2,r2,8
  830aa8:	100d883a 	mov	r6,r2
  830aac:	08308180 	call	830818 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
  830ab0:	e0bffc17 	ldw	r2,-16(fp)
  830ab4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
  830ab8:	e0bffc17 	ldw	r2,-16(fp)
  830abc:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
  830ac0:	e0bffc17 	ldw	r2,-16(fp)
  830ac4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
  830ac8:	e0bffc17 	ldw	r2,-16(fp)
  830acc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
  830ad0:	e0bffc17 	ldw	r2,-16(fp)
  830ad4:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
  830ad8:	e0bffc17 	ldw	r2,-16(fp)
  830adc:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
  830ae0:	e0bffa17 	ldw	r2,-24(fp)
  830ae4:	1007883a 	mov	r3,r2
  830ae8:	e0bffc17 	ldw	r2,-16(fp)
  830aec:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
  830af0:	e0bffc17 	ldw	r2,-16(fp)
  830af4:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
  830af8:	e0fffa17 	ldw	r3,-24(fp)
  830afc:	e0bffc17 	ldw	r2,-16(fp)
  830b00:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
  830b04:	e0bffc17 	ldw	r2,-16(fp)
  830b08:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
  830b0c:	e0bffc17 	ldw	r2,-16(fp)
  830b10:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  830b14:	e0bff817 	ldw	r2,-32(fp)
  830b18:	10ffffcc 	andi	r3,r2,65535
  830b1c:	e0bffc17 	ldw	r2,-16(fp)
  830b20:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  830b24:	e0bff817 	ldw	r2,-32(fp)
  830b28:	1005d43a 	srai	r2,r2,16
  830b2c:	10bfffcc 	andi	r2,r2,65535
  830b30:	e0bfff15 	stw	r2,-4(fp)
  830b34:	e0ffff17 	ldw	r3,-4(fp)
  830b38:	1804403a 	cmpge	r2,r3,zero
  830b3c:	1000031e 	bne	r2,zero,830b4c <create_file+0x17c>
  830b40:	e0bfff17 	ldw	r2,-4(fp)
  830b44:	108003c4 	addi	r2,r2,15
  830b48:	e0bfff15 	stw	r2,-4(fp)
  830b4c:	e0ffff17 	ldw	r3,-4(fp)
  830b50:	1805d13a 	srai	r2,r3,4
  830b54:	1007883a 	mov	r3,r2
  830b58:	e0bffc17 	ldw	r2,-16(fp)
  830b5c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  830b60:	e0bff817 	ldw	r2,-32(fp)
  830b64:	1005d43a 	srai	r2,r2,16
  830b68:	108003cc 	andi	r2,r2,15
  830b6c:	1004917a 	slli	r2,r2,5
  830b70:	1007883a 	mov	r3,r2
  830b74:	e0bffc17 	ldw	r2,-16(fp)
  830b78:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  830b7c:	e0bffd17 	ldw	r2,-12(fp)
  830b80:	1080058b 	ldhu	r2,22(r2)
  830b84:	10ffffcc 	andi	r3,r2,65535
  830b88:	e0bffc17 	ldw	r2,-16(fp)
  830b8c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
  830b90:	e0fffc17 	ldw	r3,-16(fp)
  830b94:	00800044 	movi	r2,1
  830b98:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
  830b9c:	e0fffc17 	ldw	r3,-16(fp)
  830ba0:	00800044 	movi	r2,1
  830ba4:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  830ba8:	e0bffc17 	ldw	r2,-16(fp)
  830bac:	10800a17 	ldw	r2,40(r2)
  830bb0:	1004c03a 	cmpne	r2,r2,zero
  830bb4:	1000081e 	bne	r2,zero,830bd8 <create_file+0x208>
  830bb8:	008020f4 	movhi	r2,131
  830bbc:	109e5e04 	addi	r2,r2,31096
  830bc0:	10c01317 	ldw	r3,76(r2)
  830bc4:	e0bffc17 	ldw	r2,-16(fp)
  830bc8:	10800b17 	ldw	r2,44(r2)
  830bcc:	1887883a 	add	r3,r3,r2
  830bd0:	e0fffe15 	stw	r3,-8(fp)
  830bd4:	00001006 	br	830c18 <create_file+0x248>
  830bd8:	008020f4 	movhi	r2,131
  830bdc:	109e5e04 	addi	r2,r2,31096
  830be0:	11001417 	ldw	r4,80(r2)
  830be4:	e0bffc17 	ldw	r2,-16(fp)
  830be8:	10800a17 	ldw	r2,40(r2)
  830bec:	10ffff84 	addi	r3,r2,-2
  830bf0:	008020f4 	movhi	r2,131
  830bf4:	109e5e04 	addi	r2,r2,31096
  830bf8:	10800383 	ldbu	r2,14(r2)
  830bfc:	10803fcc 	andi	r2,r2,255
  830c00:	1885383a 	mul	r2,r3,r2
  830c04:	2087883a 	add	r3,r4,r2
  830c08:	e0bffc17 	ldw	r2,-16(fp)
  830c0c:	10800b17 	ldw	r2,44(r2)
  830c10:	1887883a 	add	r3,r3,r2
  830c14:	e0fffe15 	stw	r3,-8(fp)
  830c18:	e0bffe17 	ldw	r2,-8(fp)
  830c1c:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  830c20:	e13ff717 	ldw	r4,-36(fp)
  830c24:	d167d317 	ldw	r5,-24756(gp)
  830c28:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  830c2c:	1005003a 	cmpeq	r2,r2,zero
  830c30:	1000161e 	bne	r2,zero,830c8c <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  830c34:	e0bffc17 	ldw	r2,-16(fp)
  830c38:	10800c0b 	ldhu	r2,48(r2)
  830c3c:	113fffcc 	andi	r4,r2,65535
  830c40:	2120001c 	xori	r4,r4,32768
  830c44:	21200004 	addi	r4,r4,-32768
  830c48:	e17ffc17 	ldw	r5,-16(fp)
  830c4c:	082e8800 	call	82e880 <Write_File_Record_At_Offset>
  830c50:	1005003a 	cmpeq	r2,r2,zero
  830c54:	10000d1e 	bne	r2,zero,830c8c <create_file+0x2bc>
                {
                    Save_Modified_Sector();
  830c58:	082e1640 	call	82e164 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
  830c5c:	e13ffa17 	ldw	r4,-24(fp)
  830c60:	017fffc4 	movi	r5,-1
  830c64:	01800044 	movi	r6,1
  830c68:	082e3680 	call	82e368 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
  830c6c:	e13ffa17 	ldw	r4,-24(fp)
  830c70:	017fffc4 	movi	r5,-1
  830c74:	000d883a 	mov	r6,zero
  830c78:	082e3680 	call	82e368 <mark_cluster>
  830c7c:	1005003a 	cmpeq	r2,r2,zero
  830c80:	1000021e 	bne	r2,zero,830c8c <create_file+0x2bc>
                    {
                        result = true;
  830c84:	00800044 	movi	r2,1
  830c88:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
  830c8c:	e0bff917 	ldw	r2,-28(fp)
}
  830c90:	e037883a 	mov	sp,fp
  830c94:	dfc00117 	ldw	ra,4(sp)
  830c98:	df000017 	ldw	fp,0(sp)
  830c9c:	dec00204 	addi	sp,sp,8
  830ca0:	f800283a 	ret

00830ca4 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
  830ca4:	defffb04 	addi	sp,sp,-20
  830ca8:	df000415 	stw	fp,16(sp)
  830cac:	df000404 	addi	fp,sp,16
  830cb0:	e13ffe15 	stw	r4,-8(fp)
  830cb4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  830cb8:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  830cbc:	e03ffd15 	stw	zero,-12(fp)
  830cc0:	00001606 	br	830d1c <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
  830cc4:	e0fffd17 	ldw	r3,-12(fp)
  830cc8:	e0bffe17 	ldw	r2,-8(fp)
  830ccc:	10c5883a 	add	r2,r2,r3
  830cd0:	10800003 	ldbu	r2,0(r2)
  830cd4:	10803fcc 	andi	r2,r2,255
  830cd8:	10800820 	cmpeqi	r2,r2,32
  830cdc:	10000c1e 	bne	r2,zero,830d10 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
  830ce0:	e0bffc17 	ldw	r2,-16(fp)
  830ce4:	1007883a 	mov	r3,r2
  830ce8:	e0bfff17 	ldw	r2,-4(fp)
  830cec:	1889883a 	add	r4,r3,r2
  830cf0:	e0fffd17 	ldw	r3,-12(fp)
  830cf4:	e0bffe17 	ldw	r2,-8(fp)
  830cf8:	10c5883a 	add	r2,r2,r3
  830cfc:	10800003 	ldbu	r2,0(r2)
  830d00:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  830d04:	e0bffc17 	ldw	r2,-16(fp)
  830d08:	10800044 	addi	r2,r2,1
  830d0c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  830d10:	e0bffd17 	ldw	r2,-12(fp)
  830d14:	10800044 	addi	r2,r2,1
  830d18:	e0bffd15 	stw	r2,-12(fp)
  830d1c:	e0bffd17 	ldw	r2,-12(fp)
  830d20:	10800210 	cmplti	r2,r2,8
  830d24:	103fe71e 	bne	r2,zero,830cc4 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
  830d28:	e0bffe17 	ldw	r2,-8(fp)
  830d2c:	10800203 	ldbu	r2,8(r2)
  830d30:	10803fcc 	andi	r2,r2,255
  830d34:	10800820 	cmpeqi	r2,r2,32
  830d38:	1000261e 	bne	r2,zero,830dd4 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
  830d3c:	e0bffc17 	ldw	r2,-16(fp)
  830d40:	1007883a 	mov	r3,r2
  830d44:	e0bfff17 	ldw	r2,-4(fp)
  830d48:	1887883a 	add	r3,r3,r2
  830d4c:	00800b84 	movi	r2,46
  830d50:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  830d54:	e0bffc17 	ldw	r2,-16(fp)
  830d58:	10800044 	addi	r2,r2,1
  830d5c:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
  830d60:	e03ffd15 	stw	zero,-12(fp)
  830d64:	00001806 	br	830dc8 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
  830d68:	e0fffd17 	ldw	r3,-12(fp)
  830d6c:	e0bffe17 	ldw	r2,-8(fp)
  830d70:	1885883a 	add	r2,r3,r2
  830d74:	10800204 	addi	r2,r2,8
  830d78:	10800003 	ldbu	r2,0(r2)
  830d7c:	10803fcc 	andi	r2,r2,255
  830d80:	10800820 	cmpeqi	r2,r2,32
  830d84:	10000d1e 	bne	r2,zero,830dbc <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
  830d88:	e0bffc17 	ldw	r2,-16(fp)
  830d8c:	1007883a 	mov	r3,r2
  830d90:	e0bfff17 	ldw	r2,-4(fp)
  830d94:	1889883a 	add	r4,r3,r2
  830d98:	e0fffd17 	ldw	r3,-12(fp)
  830d9c:	e0bffe17 	ldw	r2,-8(fp)
  830da0:	1885883a 	add	r2,r3,r2
  830da4:	10800204 	addi	r2,r2,8
  830da8:	10800003 	ldbu	r2,0(r2)
  830dac:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  830db0:	e0bffc17 	ldw	r2,-16(fp)
  830db4:	10800044 	addi	r2,r2,1
  830db8:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
  830dbc:	e0bffd17 	ldw	r2,-12(fp)
  830dc0:	10800044 	addi	r2,r2,1
  830dc4:	e0bffd15 	stw	r2,-12(fp)
  830dc8:	e0bffd17 	ldw	r2,-12(fp)
  830dcc:	108000d0 	cmplti	r2,r2,3
  830dd0:	103fe51e 	bne	r2,zero,830d68 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  830dd4:	e0bffc17 	ldw	r2,-16(fp)
  830dd8:	1007883a 	mov	r3,r2
  830ddc:	e0bfff17 	ldw	r2,-4(fp)
  830de0:	1885883a 	add	r2,r3,r2
  830de4:	10000005 	stb	zero,0(r2)
}
  830de8:	e037883a 	mov	sp,fp
  830dec:	df000017 	ldw	fp,0(sp)
  830df0:	dec00104 	addi	sp,sp,4
  830df4:	f800283a 	ret

00830df8 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  830df8:	defffc04 	addi	sp,sp,-16
  830dfc:	dfc00315 	stw	ra,12(sp)
  830e00:	df000215 	stw	fp,8(sp)
  830e04:	df000204 	addi	fp,sp,8
  830e08:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  830e0c:	e13fff17 	ldw	r4,-4(fp)
  830e10:	014020f4 	movhi	r5,131
  830e14:	29567d04 	addi	r5,r5,23028
  830e18:	08327fc0 	call	8327fc <alt_find_dev>
  830e1c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
  830e20:	e0bffe17 	ldw	r2,-8(fp)
  830e24:	1005003a 	cmpeq	r2,r2,zero
  830e28:	10001e1e 	bne	r2,zero,830ea4 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  830e2c:	e0bffe17 	ldw	r2,-8(fp)
  830e30:	10800a17 	ldw	r2,40(r2)
  830e34:	10808d04 	addi	r2,r2,564
  830e38:	d0a7cd15 	stw	r2,-24780(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  830e3c:	e0bffe17 	ldw	r2,-8(fp)
  830e40:	10800a17 	ldw	r2,40(r2)
  830e44:	10808904 	addi	r2,r2,548
  830e48:	d0a7ce15 	stw	r2,-24776(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  830e4c:	e0bffe17 	ldw	r2,-8(fp)
  830e50:	10800a17 	ldw	r2,40(r2)
  830e54:	10808404 	addi	r2,r2,528
  830e58:	d0a7cf15 	stw	r2,-24772(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  830e5c:	e0bffe17 	ldw	r2,-8(fp)
  830e60:	10800a17 	ldw	r2,40(r2)
  830e64:	10808c04 	addi	r2,r2,560
  830e68:	d0a7d015 	stw	r2,-24768(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  830e6c:	e0bffe17 	ldw	r2,-8(fp)
  830e70:	10800a17 	ldw	r2,40(r2)
  830e74:	10808b04 	addi	r2,r2,556
  830e78:	d0a7d115 	stw	r2,-24764(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  830e7c:	e0bffe17 	ldw	r2,-8(fp)
  830e80:	10800a17 	ldw	r2,40(r2)
  830e84:	d0a7d215 	stw	r2,-24760(gp)
		device_pointer = dev;
  830e88:	e0bffe17 	ldw	r2,-8(fp)
  830e8c:	d0a7d515 	stw	r2,-24748(gp)
		initialized = false;
  830e90:	d027cb15 	stw	zero,-24788(gp)
		is_sd_card_formated_as_FAT16 = false;
  830e94:	d027cc15 	stw	zero,-24784(gp)
		search_data.valid = false;
  830e98:	008020f4 	movhi	r2,131
  830e9c:	109e5904 	addi	r2,r2,31076
  830ea0:	10000415 	stw	zero,16(r2)
	}
	return dev;
  830ea4:	e0bffe17 	ldw	r2,-8(fp)
}
  830ea8:	e037883a 	mov	sp,fp
  830eac:	dfc00117 	ldw	ra,4(sp)
  830eb0:	df000017 	ldw	fp,0(sp)
  830eb4:	dec00204 	addi	sp,sp,8
  830eb8:	f800283a 	ret

00830ebc <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  830ebc:	defffd04 	addi	sp,sp,-12
  830ec0:	df000215 	stw	fp,8(sp)
  830ec4:	df000204 	addi	fp,sp,8
    bool result = false;
  830ec8:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  830ecc:	d0a7d517 	ldw	r2,-24748(gp)
  830ed0:	1005003a 	cmpeq	r2,r2,zero
  830ed4:	1000081e 	bne	r2,zero,830ef8 <alt_up_sd_card_is_Present+0x3c>
  830ed8:	d0a7cd17 	ldw	r2,-24780(gp)
  830edc:	1080002b 	ldhuio	r2,0(r2)
  830ee0:	1080008c 	andi	r2,r2,2
  830ee4:	1005003a 	cmpeq	r2,r2,zero
  830ee8:	1000031e 	bne	r2,zero,830ef8 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
  830eec:	00800044 	movi	r2,1
  830ef0:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  830ef4:	00001e06 	br	830f70 <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
  830ef8:	d0a7cb17 	ldw	r2,-24788(gp)
  830efc:	10800058 	cmpnei	r2,r2,1
  830f00:	10001b1e 	bne	r2,zero,830f70 <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
  830f04:	d027cb15 	stw	zero,-24788(gp)
		search_data.valid = false;
  830f08:	008020f4 	movhi	r2,131
  830f0c:	109e5904 	addi	r2,r2,31076
  830f10:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  830f14:	d027cc15 	stw	zero,-24784(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
  830f18:	e03ffe15 	stw	zero,-8(fp)
  830f1c:	00001106 	br	830f64 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
  830f20:	e0bffe17 	ldw	r2,-8(fp)
  830f24:	00c020f4 	movhi	r3,131
  830f28:	18de7304 	addi	r3,r3,31180
  830f2c:	100491ba 	slli	r2,r2,6
  830f30:	10c5883a 	add	r2,r2,r3
  830f34:	10800f04 	addi	r2,r2,60
  830f38:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  830f3c:	e0bffe17 	ldw	r2,-8(fp)
  830f40:	00c020f4 	movhi	r3,131
  830f44:	18de7304 	addi	r3,r3,31180
  830f48:	100491ba 	slli	r2,r2,6
  830f4c:	10c5883a 	add	r2,r2,r3
  830f50:	10800e04 	addi	r2,r2,56
  830f54:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  830f58:	e0bffe17 	ldw	r2,-8(fp)
  830f5c:	10800044 	addi	r2,r2,1
  830f60:	e0bffe15 	stw	r2,-8(fp)
  830f64:	e0bffe17 	ldw	r2,-8(fp)
  830f68:	10800510 	cmplti	r2,r2,20
  830f6c:	103fec1e 	bne	r2,zero,830f20 <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
  830f70:	e0bfff17 	ldw	r2,-4(fp)
}
  830f74:	e037883a 	mov	sp,fp
  830f78:	df000017 	ldw	fp,0(sp)
  830f7c:	dec00104 	addi	sp,sp,4
  830f80:	f800283a 	ret

00830f84 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  830f84:	defffd04 	addi	sp,sp,-12
  830f88:	dfc00215 	stw	ra,8(sp)
  830f8c:	df000115 	stw	fp,4(sp)
  830f90:	df000104 	addi	fp,sp,4
	bool result = false;
  830f94:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  830f98:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  830f9c:	1005003a 	cmpeq	r2,r2,zero
  830fa0:	10000d1e 	bne	r2,zero,830fd8 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  830fa4:	d0a7cb17 	ldw	r2,-24788(gp)
  830fa8:	1004c03a 	cmpne	r2,r2,zero
  830fac:	1000071e 	bne	r2,zero,830fcc <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  830fb0:	082f1800 	call	82f180 <Look_for_FAT16>
  830fb4:	d0a7cc15 	stw	r2,-24784(gp)
			initialized = is_sd_card_formated_as_FAT16;
  830fb8:	d0a7cc17 	ldw	r2,-24784(gp)
  830fbc:	d0a7cb15 	stw	r2,-24788(gp)
			search_data.valid = false;
  830fc0:	008020f4 	movhi	r2,131
  830fc4:	109e5904 	addi	r2,r2,31076
  830fc8:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  830fcc:	d0a7cc17 	ldw	r2,-24784(gp)
  830fd0:	e0bfff15 	stw	r2,-4(fp)
  830fd4:	00000206 	br	830fe0 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  830fd8:	d027cb15 	stw	zero,-24788(gp)
		is_sd_card_formated_as_FAT16 = false;
  830fdc:	d027cc15 	stw	zero,-24784(gp)
	}

	return result;
  830fe0:	e0bfff17 	ldw	r2,-4(fp)
}
  830fe4:	e037883a 	mov	sp,fp
  830fe8:	dfc00117 	ldw	ra,4(sp)
  830fec:	df000017 	ldw	fp,0(sp)
  830ff0:	dec00204 	addi	sp,sp,8
  830ff4:	f800283a 	ret

00830ff8 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  830ff8:	deffea04 	addi	sp,sp,-88
  830ffc:	dfc01515 	stw	ra,84(sp)
  831000:	df001415 	stw	fp,80(sp)
  831004:	df001404 	addi	fp,sp,80
  831008:	e13ffe15 	stw	r4,-8(fp)
  83100c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  831010:	00800084 	movi	r2,2
  831014:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  831018:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  83101c:	1005003a 	cmpeq	r2,r2,zero
  831020:	1000241e 	bne	r2,zero,8310b4 <alt_up_sd_card_find_first+0xbc>
  831024:	d0a7cc17 	ldw	r2,-24784(gp)
  831028:	1005003a 	cmpeq	r2,r2,zero
  83102c:	1000211e 	bne	r2,zero,8310b4 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  831030:	e17fed04 	addi	r5,fp,-76
  831034:	e1bfee04 	addi	r6,fp,-72
  831038:	e13ffe17 	ldw	r4,-8(fp)
  83103c:	082f9840 	call	82f984 <get_home_directory_cluster_for_file>
  831040:	1005003a 	cmpeq	r2,r2,zero
  831044:	1000191e 	bne	r2,zero,8310ac <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  831048:	e0bfed17 	ldw	r2,-76(fp)
  83104c:	1007883a 	mov	r3,r2
  831050:	008020f4 	movhi	r2,131
  831054:	109e5904 	addi	r2,r2,31076
  831058:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  83105c:	e0bfed17 	ldw	r2,-76(fp)
  831060:	1007883a 	mov	r3,r2
  831064:	008020f4 	movhi	r2,131
  831068:	109e5904 	addi	r2,r2,31076
  83106c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  831070:	008020f4 	movhi	r2,131
  831074:	109e5904 	addi	r2,r2,31076
  831078:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  83107c:	00c020f4 	movhi	r3,131
  831080:	18de5904 	addi	r3,r3,31076
  831084:	00bfffc4 	movi	r2,-1
  831088:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  83108c:	00c020f4 	movhi	r3,131
  831090:	18de5904 	addi	r3,r3,31076
  831094:	00800044 	movi	r2,1
  831098:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  83109c:	e13fff17 	ldw	r4,-4(fp)
  8310a0:	08310cc0 	call	8310cc <alt_up_sd_card_find_next>
  8310a4:	e0bfec0d 	sth	r2,-80(fp)
  8310a8:	00000206 	br	8310b4 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
  8310ac:	00800044 	movi	r2,1
  8310b0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  8310b4:	e0bfec0f 	ldh	r2,-80(fp)
}
  8310b8:	e037883a 	mov	sp,fp
  8310bc:	dfc00117 	ldw	ra,4(sp)
  8310c0:	df000017 	ldw	fp,0(sp)
  8310c4:	dec00204 	addi	sp,sp,8
  8310c8:	f800283a 	ret

008310cc <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  8310cc:	deffe404 	addi	sp,sp,-112
  8310d0:	dfc01b15 	stw	ra,108(sp)
  8310d4:	df001a15 	stw	fp,104(sp)
  8310d8:	df001a04 	addi	fp,sp,104
  8310dc:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  8310e0:	00800084 	movi	r2,2
  8310e4:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8310e8:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  8310ec:	1005003a 	cmpeq	r2,r2,zero
  8310f0:	1000da1e 	bne	r2,zero,83145c <alt_up_sd_card_find_next+0x390>
  8310f4:	d0a7cc17 	ldw	r2,-24784(gp)
  8310f8:	1005003a 	cmpeq	r2,r2,zero
  8310fc:	1000d71e 	bne	r2,zero,83145c <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
  831100:	008020f4 	movhi	r2,131
  831104:	109e5904 	addi	r2,r2,31076
  831108:	10800417 	ldw	r2,16(r2)
  83110c:	1005003a 	cmpeq	r2,r2,zero
  831110:	1000d01e 	bne	r2,zero,831454 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  831114:	008020f4 	movhi	r2,131
  831118:	109e5904 	addi	r2,r2,31076
  83111c:	10800117 	ldw	r2,4(r2)
  831120:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
  831124:	e0bfec17 	ldw	r2,-80(fp)
  831128:	1004c03a 	cmpne	r2,r2,zero
  83112c:	1000511e 	bne	r2,zero,831274 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  831130:	008020f4 	movhi	r2,131
  831134:	109e5e04 	addi	r2,r2,31096
  831138:	1080050b 	ldhu	r2,20(r2)
  83113c:	10bfffcc 	andi	r2,r2,65535
  831140:	1008917a 	slli	r4,r2,5
  831144:	008020f4 	movhi	r2,131
  831148:	109e5e04 	addi	r2,r2,31096
  83114c:	1080030b 	ldhu	r2,12(r2)
  831150:	117fffcc 	andi	r5,r2,65535
  831154:	0822e1c0 	call	822e1c <__divsi3>
  831158:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  83115c:	008020f4 	movhi	r2,131
  831160:	109e5904 	addi	r2,r2,31076
  831164:	10800217 	ldw	r2,8(r2)
  831168:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
  83116c:	008020f4 	movhi	r2,131
  831170:	109e5904 	addi	r2,r2,31076
  831174:	1080030b 	ldhu	r2,12(r2)
  831178:	10bfffcc 	andi	r2,r2,65535
  83117c:	10a0001c 	xori	r2,r2,32768
  831180:	10a00004 	addi	r2,r2,-32768
  831184:	10800044 	addi	r2,r2,1
  831188:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  83118c:	00003306 	br	83125c <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  831190:	008020f4 	movhi	r2,131
  831194:	109e5e04 	addi	r2,r2,31096
  831198:	10c01317 	ldw	r3,76(r2)
  83119c:	e0bfea17 	ldw	r2,-88(fp)
  8311a0:	1885883a 	add	r2,r3,r2
  8311a4:	1009883a 	mov	r4,r2
  8311a8:	d167d317 	ldw	r5,-24756(gp)
  8311ac:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  8311b0:	1005003a 	cmpeq	r2,r2,zero
  8311b4:	10002c1e 	bne	r2,zero,831268 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  8311b8:	00002106 	br	831240 <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  8311bc:	e0bfe917 	ldw	r2,-92(fp)
  8311c0:	1008917a 	slli	r4,r2,5
  8311c4:	e1ffea17 	ldw	r7,-88(fp)
  8311c8:	e17fee04 	addi	r5,fp,-72
  8311cc:	000d883a 	mov	r6,zero
  8311d0:	082e5fc0 	call	82e5fc <Read_File_Record_At_Offset>
  8311d4:	1005003a 	cmpeq	r2,r2,zero
  8311d8:	1000161e 	bne	r2,zero,831234 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  8311dc:	e0bfee03 	ldbu	r2,-72(fp)
  8311e0:	10803fcc 	andi	r2,r2,255
  8311e4:	1005003a 	cmpeq	r2,r2,zero
  8311e8:	1000121e 	bne	r2,zero,831234 <alt_up_sd_card_find_next+0x168>
  8311ec:	e0bfee03 	ldbu	r2,-72(fp)
  8311f0:	10803fcc 	andi	r2,r2,255
  8311f4:	10803960 	cmpeqi	r2,r2,229
  8311f8:	10000e1e 	bne	r2,zero,831234 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  8311fc:	e0bfe917 	ldw	r2,-92(fp)
  831200:	1007883a 	mov	r3,r2
  831204:	008020f4 	movhi	r2,131
  831208:	109e5904 	addi	r2,r2,31076
  83120c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
  831210:	e0ffea17 	ldw	r3,-88(fp)
  831214:	008020f4 	movhi	r2,131
  831218:	109e5904 	addi	r2,r2,31076
  83121c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
  831220:	e13fee04 	addi	r4,fp,-72
  831224:	e17ffe17 	ldw	r5,-8(fp)
  831228:	0830ca40 	call	830ca4 <copy_file_record_name_to_string>
									return 0;
  83122c:	e03fff15 	stw	zero,-4(fp)
  831230:	00008c06 	br	831464 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  831234:	e0bfe917 	ldw	r2,-92(fp)
  831238:	10800044 	addi	r2,r2,1
  83123c:	e0bfe915 	stw	r2,-92(fp)
  831240:	e0bfe917 	ldw	r2,-92(fp)
  831244:	10800410 	cmplti	r2,r2,16
  831248:	103fdc1e 	bne	r2,zero,8311bc <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  83124c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  831250:	e0bfea17 	ldw	r2,-88(fp)
  831254:	10800044 	addi	r2,r2,1
  831258:	e0bfea15 	stw	r2,-88(fp)
  83125c:	e0ffea17 	ldw	r3,-88(fp)
  831260:	e0bfeb17 	ldw	r2,-84(fp)
  831264:	18bfca16 	blt	r3,r2,831190 <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
  831268:	00bfffc4 	movi	r2,-1
  83126c:	e0bfed0d 	sth	r2,-76(fp)
  831270:	00007a06 	br	83145c <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  831274:	008020f4 	movhi	r2,131
  831278:	109e5904 	addi	r2,r2,31076
  83127c:	1080030b 	ldhu	r2,12(r2)
  831280:	10bfffcc 	andi	r2,r2,65535
  831284:	10a0001c 	xori	r2,r2,32768
  831288:	10a00004 	addi	r2,r2,-32768
  83128c:	10800044 	addi	r2,r2,1
  831290:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  831294:	e0bfec17 	ldw	r2,-80(fp)
  831298:	10ffff84 	addi	r3,r2,-2
  83129c:	008020f4 	movhi	r2,131
  8312a0:	109e5e04 	addi	r2,r2,31096
  8312a4:	10800383 	ldbu	r2,14(r2)
  8312a8:	10803fcc 	andi	r2,r2,255
  8312ac:	1885383a 	mul	r2,r3,r2
  8312b0:	1007883a 	mov	r3,r2
  8312b4:	008020f4 	movhi	r2,131
  8312b8:	109e5e04 	addi	r2,r2,31096
  8312bc:	10801417 	ldw	r2,80(r2)
  8312c0:	1885883a 	add	r2,r3,r2
  8312c4:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  8312c8:	008020f4 	movhi	r2,131
  8312cc:	109e5904 	addi	r2,r2,31076
  8312d0:	10800217 	ldw	r2,8(r2)
  8312d4:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8312d8:	00003406 	br	8313ac <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  8312dc:	e0ffe617 	ldw	r3,-104(fp)
  8312e0:	e0bfe717 	ldw	r2,-100(fp)
  8312e4:	1889883a 	add	r4,r3,r2
  8312e8:	d167d317 	ldw	r5,-24756(gp)
  8312ec:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  8312f0:	1005003a 	cmpeq	r2,r2,zero
  8312f4:	1000331e 	bne	r2,zero,8313c4 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
  8312f8:	00002506 	br	831390 <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  8312fc:	e0bfe817 	ldw	r2,-96(fp)
  831300:	1008917a 	slli	r4,r2,5
  831304:	e1bfec17 	ldw	r6,-80(fp)
  831308:	e1ffe617 	ldw	r7,-104(fp)
  83130c:	e17fee04 	addi	r5,fp,-72
  831310:	082e5fc0 	call	82e5fc <Read_File_Record_At_Offset>
  831314:	1005003a 	cmpeq	r2,r2,zero
  831318:	10001a1e 	bne	r2,zero,831384 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  83131c:	e0bfee03 	ldbu	r2,-72(fp)
  831320:	10803fcc 	andi	r2,r2,255
  831324:	1005003a 	cmpeq	r2,r2,zero
  831328:	1000161e 	bne	r2,zero,831384 <alt_up_sd_card_find_next+0x2b8>
  83132c:	e0bfee03 	ldbu	r2,-72(fp)
  831330:	10803fcc 	andi	r2,r2,255
  831334:	10803960 	cmpeqi	r2,r2,229
  831338:	1000121e 	bne	r2,zero,831384 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  83133c:	e0ffec17 	ldw	r3,-80(fp)
  831340:	008020f4 	movhi	r2,131
  831344:	109e5904 	addi	r2,r2,31076
  831348:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
  83134c:	e0bfe817 	ldw	r2,-96(fp)
  831350:	1007883a 	mov	r3,r2
  831354:	008020f4 	movhi	r2,131
  831358:	109e5904 	addi	r2,r2,31076
  83135c:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
  831360:	e0ffe617 	ldw	r3,-104(fp)
  831364:	008020f4 	movhi	r2,131
  831368:	109e5904 	addi	r2,r2,31076
  83136c:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
  831370:	e13fee04 	addi	r4,fp,-72
  831374:	e17ffe17 	ldw	r5,-8(fp)
  831378:	0830ca40 	call	830ca4 <copy_file_record_name_to_string>
										return 0;
  83137c:	e03fff15 	stw	zero,-4(fp)
  831380:	00003806 	br	831464 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  831384:	e0bfe817 	ldw	r2,-96(fp)
  831388:	10800044 	addi	r2,r2,1
  83138c:	e0bfe815 	stw	r2,-96(fp)
  831390:	e0bfe817 	ldw	r2,-96(fp)
  831394:	10800410 	cmplti	r2,r2,16
  831398:	103fd81e 	bne	r2,zero,8312fc <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  83139c:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8313a0:	e0bfe617 	ldw	r2,-104(fp)
  8313a4:	10800044 	addi	r2,r2,1
  8313a8:	e0bfe615 	stw	r2,-104(fp)
  8313ac:	008020f4 	movhi	r2,131
  8313b0:	109e5e04 	addi	r2,r2,31096
  8313b4:	10800383 	ldbu	r2,14(r2)
  8313b8:	10c03fcc 	andi	r3,r2,255
  8313bc:	e0bfe617 	ldw	r2,-104(fp)
  8313c0:	10ffc616 	blt	r2,r3,8312dc <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  8313c4:	008020f4 	movhi	r2,131
  8313c8:	109e5e04 	addi	r2,r2,31096
  8313cc:	10800383 	ldbu	r2,14(r2)
  8313d0:	10c03fcc 	andi	r3,r2,255
  8313d4:	e0bfe617 	ldw	r2,-104(fp)
  8313d8:	10c01a16 	blt	r2,r3,831444 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
  8313dc:	e13fec17 	ldw	r4,-80(fp)
  8313e0:	e17fed84 	addi	r5,fp,-74
  8313e4:	082e2b00 	call	82e2b0 <get_cluster_flag>
  8313e8:	1005003a 	cmpeq	r2,r2,zero
  8313ec:	1000131e 	bne	r2,zero,83143c <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  8313f0:	e0bfed8b 	ldhu	r2,-74(fp)
  8313f4:	10bfffcc 	andi	r2,r2,65535
  8313f8:	10a0001c 	xori	r2,r2,32768
  8313fc:	10a00004 	addi	r2,r2,-32768
  831400:	10fffe0c 	andi	r3,r2,65528
  831404:	00bffe14 	movui	r2,65528
  831408:	1880051e 	bne	r3,r2,831420 <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
  83140c:	00bfffc4 	movi	r2,-1
  831410:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  831414:	008020f4 	movhi	r2,131
  831418:	109e5904 	addi	r2,r2,31076
  83141c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  831420:	e0bfed8b 	ldhu	r2,-74(fp)
  831424:	10bfffcc 	andi	r2,r2,65535
  831428:	10a0001c 	xori	r2,r2,32768
  83142c:	10a00004 	addi	r2,r2,-32768
  831430:	10bffe0c 	andi	r2,r2,65528
  831434:	e0bfec15 	stw	r2,-80(fp)
  831438:	00000206 	br	831444 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
  83143c:	00bfffc4 	movi	r2,-1
  831440:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
  831444:	e0ffec17 	ldw	r3,-80(fp)
  831448:	00bffdd4 	movui	r2,65527
  83144c:	10ff910e 	bge	r2,r3,831294 <alt_up_sd_card_find_next+0x1c8>
  831450:	00000206 	br	83145c <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
  831454:	008000c4 	movi	r2,3
  831458:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  83145c:	e0bfed0f 	ldh	r2,-76(fp)
  831460:	e0bfff15 	stw	r2,-4(fp)
  831464:	e0bfff17 	ldw	r2,-4(fp)
}
  831468:	e037883a 	mov	sp,fp
  83146c:	dfc00117 	ldw	ra,4(sp)
  831470:	df000017 	ldw	fp,0(sp)
  831474:	dec00204 	addi	sp,sp,8
  831478:	f800283a 	ret

0083147c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  83147c:	deffe804 	addi	sp,sp,-96
  831480:	dfc01715 	stw	ra,92(sp)
  831484:	df001615 	stw	fp,88(sp)
  831488:	df001604 	addi	fp,sp,88
  83148c:	e13ffd15 	stw	r4,-12(fp)
  831490:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  831494:	00bfffc4 	movi	r2,-1
  831498:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  83149c:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  8314a0:	1005003a 	cmpeq	r2,r2,zero
  8314a4:	1000d71e 	bne	r2,zero,831804 <alt_up_sd_card_fopen+0x388>
  8314a8:	d0a7cc17 	ldw	r2,-24784(gp)
  8314ac:	1005003a 	cmpeq	r2,r2,zero
  8314b0:	1000d41e 	bne	r2,zero,831804 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
  8314b4:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
  8314b8:	e13ffd17 	ldw	r4,-12(fp)
  8314bc:	082f2780 	call	82f278 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
  8314c0:	e13ffd17 	ldw	r4,-12(fp)
  8314c4:	082f3480 	call	82f348 <check_file_name_for_FAT16_compliance>
  8314c8:	1005003a 	cmpeq	r2,r2,zero
  8314cc:	1000cd1e 	bne	r2,zero,831804 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  8314d0:	e17fec04 	addi	r5,fp,-80
  8314d4:	e1bfed04 	addi	r6,fp,-76
  8314d8:	e13ffd17 	ldw	r4,-12(fp)
  8314dc:	082f9840 	call	82f984 <get_home_directory_cluster_for_file>
  8314e0:	1004c03a 	cmpne	r2,r2,zero
  8314e4:	1000031e 	bne	r2,zero,8314f4 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
  8314e8:	e0bfeb0f 	ldh	r2,-84(fp)
  8314ec:	e0bfff15 	stw	r2,-4(fp)
  8314f0:	0000c606 	br	83180c <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  8314f4:	e03fea15 	stw	zero,-88(fp)
  8314f8:	00000f06 	br	831538 <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
  8314fc:	e0bfea17 	ldw	r2,-88(fp)
  831500:	00c020f4 	movhi	r3,131
  831504:	18de7304 	addi	r3,r3,31180
  831508:	100491ba 	slli	r2,r2,6
  83150c:	10c5883a 	add	r2,r2,r3
  831510:	10800f04 	addi	r2,r2,60
  831514:	10800017 	ldw	r2,0(r2)
  831518:	1004c03a 	cmpne	r2,r2,zero
  83151c:	1000031e 	bne	r2,zero,83152c <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
  831520:	e0bfea17 	ldw	r2,-88(fp)
  831524:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
  831528:	00000606 	br	831544 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  83152c:	e0bfea17 	ldw	r2,-88(fp)
  831530:	10800044 	addi	r2,r2,1
  831534:	e0bfea15 	stw	r2,-88(fp)
  831538:	e0bfea17 	ldw	r2,-88(fp)
  83153c:	10800510 	cmplti	r2,r2,20
  831540:	103fee1e 	bne	r2,zero,8314fc <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  831544:	e0bfeb0f 	ldh	r2,-84(fp)
  831548:	1004803a 	cmplt	r2,r2,zero
  83154c:	1000ad1e 	bne	r2,zero,831804 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  831550:	e0bfec17 	ldw	r2,-80(fp)
  831554:	1009883a 	mov	r4,r2
  831558:	e0bfeb0f 	ldh	r2,-84(fp)
  83155c:	100491ba 	slli	r2,r2,6
  831560:	1007883a 	mov	r3,r2
  831564:	008020f4 	movhi	r2,131
  831568:	109e7304 	addi	r2,r2,31180
  83156c:	188d883a 	add	r6,r3,r2
  831570:	e17ffd17 	ldw	r5,-12(fp)
  831574:	082fe980 	call	82fe98 <find_file_in_directory>
  831578:	1005003a 	cmpeq	r2,r2,zero
  83157c:	10007d1e 	bne	r2,zero,831774 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
  831580:	e0bffe17 	ldw	r2,-8(fp)
  831584:	1005003a 	cmpeq	r2,r2,zero
  831588:	1000031e 	bne	r2,zero,831598 <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
  83158c:	00bfffc4 	movi	r2,-1
  831590:	e0bfff15 	stw	r2,-4(fp)
  831594:	00009d06 	br	83180c <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  831598:	e17feb0f 	ldh	r5,-84(fp)
  83159c:	e0bfeb0f 	ldh	r2,-84(fp)
  8315a0:	00c020f4 	movhi	r3,131
  8315a4:	18de7304 	addi	r3,r3,31180
  8315a8:	100491ba 	slli	r2,r2,6
  8315ac:	10c5883a 	add	r2,r2,r3
  8315b0:	10800504 	addi	r2,r2,20
  8315b4:	1080008b 	ldhu	r2,2(r2)
  8315b8:	113fffcc 	andi	r4,r2,65535
  8315bc:	00c020f4 	movhi	r3,131
  8315c0:	18de7304 	addi	r3,r3,31180
  8315c4:	280491ba 	slli	r2,r5,6
  8315c8:	10c5883a 	add	r2,r2,r3
  8315cc:	10800704 	addi	r2,r2,28
  8315d0:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
  8315d4:	e0bfeb0f 	ldh	r2,-84(fp)
  8315d8:	00c020f4 	movhi	r3,131
  8315dc:	18de7304 	addi	r3,r3,31180
  8315e0:	100491ba 	slli	r2,r2,6
  8315e4:	10c5883a 	add	r2,r2,r3
  8315e8:	10800804 	addi	r2,r2,32
  8315ec:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
  8315f0:	e0bfeb0f 	ldh	r2,-84(fp)
  8315f4:	00c020f4 	movhi	r3,131
  8315f8:	18de7304 	addi	r3,r3,31180
  8315fc:	100491ba 	slli	r2,r2,6
  831600:	10c5883a 	add	r2,r2,r3
  831604:	10800904 	addi	r2,r2,36
  831608:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
  83160c:	e0bfeb0f 	ldh	r2,-84(fp)
  831610:	00c020f4 	movhi	r3,131
  831614:	18de7304 	addi	r3,r3,31180
  831618:	100491ba 	slli	r2,r2,6
  83161c:	10c5883a 	add	r2,r2,r3
  831620:	10c00f04 	addi	r3,r2,60
  831624:	00800044 	movi	r2,1
  831628:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
  83162c:	e0bfeb0f 	ldh	r2,-84(fp)
  831630:	00c020f4 	movhi	r3,131
  831634:	18de7304 	addi	r3,r3,31180
  831638:	100491ba 	slli	r2,r2,6
  83163c:	10c5883a 	add	r2,r2,r3
  831640:	10800e04 	addi	r2,r2,56
  831644:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  831648:	e03fea15 	stw	zero,-88(fp)
  83164c:	00004506 	br	831764 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  831650:	e0ffeb0f 	ldh	r3,-84(fp)
  831654:	e0bfea17 	ldw	r2,-88(fp)
  831658:	18803f26 	beq	r3,r2,831758 <alt_up_sd_card_fopen+0x2dc>
  83165c:	e0bfea17 	ldw	r2,-88(fp)
  831660:	00c020f4 	movhi	r3,131
  831664:	18de7304 	addi	r3,r3,31180
  831668:	100491ba 	slli	r2,r2,6
  83166c:	10c5883a 	add	r2,r2,r3
  831670:	10800f04 	addi	r2,r2,60
  831674:	10800017 	ldw	r2,0(r2)
  831678:	10800058 	cmpnei	r2,r2,1
  83167c:	1000361e 	bne	r2,zero,831758 <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  831680:	e0bfeb0f 	ldh	r2,-84(fp)
  831684:	00c020f4 	movhi	r3,131
  831688:	18de7304 	addi	r3,r3,31180
  83168c:	100491ba 	slli	r2,r2,6
  831690:	10c5883a 	add	r2,r2,r3
  831694:	10800a04 	addi	r2,r2,40
  831698:	11000017 	ldw	r4,0(r2)
  83169c:	e0bfea17 	ldw	r2,-88(fp)
  8316a0:	00c020f4 	movhi	r3,131
  8316a4:	18de7304 	addi	r3,r3,31180
  8316a8:	100491ba 	slli	r2,r2,6
  8316ac:	10c5883a 	add	r2,r2,r3
  8316b0:	10800a04 	addi	r2,r2,40
  8316b4:	10800017 	ldw	r2,0(r2)
  8316b8:	2080271e 	bne	r4,r2,831758 <alt_up_sd_card_fopen+0x2dc>
  8316bc:	e0bfeb0f 	ldh	r2,-84(fp)
  8316c0:	00c020f4 	movhi	r3,131
  8316c4:	18de7304 	addi	r3,r3,31180
  8316c8:	100491ba 	slli	r2,r2,6
  8316cc:	10c5883a 	add	r2,r2,r3
  8316d0:	10800b04 	addi	r2,r2,44
  8316d4:	11000017 	ldw	r4,0(r2)
  8316d8:	e0bfea17 	ldw	r2,-88(fp)
  8316dc:	00c020f4 	movhi	r3,131
  8316e0:	18de7304 	addi	r3,r3,31180
  8316e4:	100491ba 	slli	r2,r2,6
  8316e8:	10c5883a 	add	r2,r2,r3
  8316ec:	10800b04 	addi	r2,r2,44
  8316f0:	10800017 	ldw	r2,0(r2)
  8316f4:	2080181e 	bne	r4,r2,831758 <alt_up_sd_card_fopen+0x2dc>
  8316f8:	e0bfeb0f 	ldh	r2,-84(fp)
  8316fc:	00c020f4 	movhi	r3,131
  831700:	18de7304 	addi	r3,r3,31180
  831704:	100491ba 	slli	r2,r2,6
  831708:	10c5883a 	add	r2,r2,r3
  83170c:	10800c04 	addi	r2,r2,48
  831710:	1100000b 	ldhu	r4,0(r2)
  831714:	e0bfea17 	ldw	r2,-88(fp)
  831718:	00c020f4 	movhi	r3,131
  83171c:	18de7304 	addi	r3,r3,31180
  831720:	100491ba 	slli	r2,r2,6
  831724:	10c5883a 	add	r2,r2,r3
  831728:	10800c04 	addi	r2,r2,48
  83172c:	1080000b 	ldhu	r2,0(r2)
  831730:	20ffffcc 	andi	r3,r4,65535
  831734:	18e0001c 	xori	r3,r3,32768
  831738:	18e00004 	addi	r3,r3,-32768
  83173c:	10bfffcc 	andi	r2,r2,65535
  831740:	10a0001c 	xori	r2,r2,32768
  831744:	10a00004 	addi	r2,r2,-32768
  831748:	1880031e 	bne	r3,r2,831758 <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
  83174c:	00bfff84 	movi	r2,-2
  831750:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  831754:	00002b06 	br	831804 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  831758:	e0bfea17 	ldw	r2,-88(fp)
  83175c:	10800044 	addi	r2,r2,1
  831760:	e0bfea15 	stw	r2,-88(fp)
  831764:	e0bfea17 	ldw	r2,-88(fp)
  831768:	10800510 	cmplti	r2,r2,20
  83176c:	103fb81e 	bne	r2,zero,831650 <alt_up_sd_card_fopen+0x1d4>
  831770:	00002406 	br	831804 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
  831774:	e0bffe17 	ldw	r2,-8(fp)
  831778:	1005003a 	cmpeq	r2,r2,zero
  83177c:	10001f1e 	bne	r2,zero,8317fc <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  831780:	e0bfeb0f 	ldh	r2,-84(fp)
  831784:	100491ba 	slli	r2,r2,6
  831788:	1007883a 	mov	r3,r2
  83178c:	008020f4 	movhi	r2,131
  831790:	109e7304 	addi	r2,r2,31180
  831794:	188b883a 	add	r5,r3,r2
  831798:	e1bfed04 	addi	r6,fp,-76
  83179c:	e13ffd17 	ldw	r4,-12(fp)
  8317a0:	08309d00 	call	8309d0 <create_file>
  8317a4:	1005003a 	cmpeq	r2,r2,zero
  8317a8:	1000111e 	bne	r2,zero,8317f0 <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
  8317ac:	e0bfeb0f 	ldh	r2,-84(fp)
  8317b0:	00c020f4 	movhi	r3,131
  8317b4:	18de7304 	addi	r3,r3,31180
  8317b8:	100491ba 	slli	r2,r2,6
  8317bc:	10c5883a 	add	r2,r2,r3
  8317c0:	10c00f04 	addi	r3,r2,60
  8317c4:	00800044 	movi	r2,1
  8317c8:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
  8317cc:	e0bfeb0f 	ldh	r2,-84(fp)
  8317d0:	00c020f4 	movhi	r3,131
  8317d4:	18de7304 	addi	r3,r3,31180
  8317d8:	100491ba 	slli	r2,r2,6
  8317dc:	10c5883a 	add	r2,r2,r3
  8317e0:	10c00e04 	addi	r3,r2,56
  8317e4:	00800044 	movi	r2,1
  8317e8:	18800015 	stw	r2,0(r3)
  8317ec:	00000506 	br	831804 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
  8317f0:	00bfffc4 	movi	r2,-1
  8317f4:	e0bfeb0d 	sth	r2,-84(fp)
  8317f8:	00000206 	br	831804 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
  8317fc:	00bfffc4 	movi	r2,-1
  831800:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
  831804:	e0bfeb0f 	ldh	r2,-84(fp)
  831808:	e0bfff15 	stw	r2,-4(fp)
  83180c:	e0bfff17 	ldw	r2,-4(fp)
}
  831810:	e037883a 	mov	sp,fp
  831814:	dfc00117 	ldw	ra,4(sp)
  831818:	df000017 	ldw	fp,0(sp)
  83181c:	dec00204 	addi	sp,sp,8
  831820:	f800283a 	ret

00831824 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  831824:	defffd04 	addi	sp,sp,-12
  831828:	df000215 	stw	fp,8(sp)
  83182c:	df000204 	addi	fp,sp,8
  831830:	e13ffe0d 	sth	r4,-8(fp)
  831834:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  831838:	e0bffe0f 	ldh	r2,-8(fp)
  83183c:	1004803a 	cmplt	r2,r2,zero
  831840:	1000181e 	bne	r2,zero,8318a4 <alt_up_sd_card_set_attributes+0x80>
  831844:	e0bffe0f 	ldh	r2,-8(fp)
  831848:	10800508 	cmpgei	r2,r2,20
  83184c:	1000151e 	bne	r2,zero,8318a4 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
  831850:	e0bffe0f 	ldh	r2,-8(fp)
  831854:	00c020f4 	movhi	r3,131
  831858:	18de7304 	addi	r3,r3,31180
  83185c:	100491ba 	slli	r2,r2,6
  831860:	10c5883a 	add	r2,r2,r3
  831864:	10800f04 	addi	r2,r2,60
  831868:	10800017 	ldw	r2,0(r2)
  83186c:	1005003a 	cmpeq	r2,r2,zero
  831870:	10000c1e 	bne	r2,zero,8318a4 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  831874:	e17ffe0f 	ldh	r5,-8(fp)
  831878:	e0bfff0b 	ldhu	r2,-4(fp)
  83187c:	1007883a 	mov	r3,r2
  831880:	00bfffc4 	movi	r2,-1
  831884:	1884703a 	and	r2,r3,r2
  831888:	1009883a 	mov	r4,r2
  83188c:	00c020f4 	movhi	r3,131
  831890:	18de7304 	addi	r3,r3,31180
  831894:	280491ba 	slli	r2,r5,6
  831898:	10c5883a 	add	r2,r2,r3
  83189c:	10800204 	addi	r2,r2,8
  8318a0:	110000c5 	stb	r4,3(r2)
        }
    }
}
  8318a4:	e037883a 	mov	sp,fp
  8318a8:	df000017 	ldw	fp,0(sp)
  8318ac:	dec00104 	addi	sp,sp,4
  8318b0:	f800283a 	ret

008318b4 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  8318b4:	defffd04 	addi	sp,sp,-12
  8318b8:	df000215 	stw	fp,8(sp)
  8318bc:	df000204 	addi	fp,sp,8
  8318c0:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  8318c4:	00bfffc4 	movi	r2,-1
  8318c8:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  8318cc:	e0bfff0f 	ldh	r2,-4(fp)
  8318d0:	1004803a 	cmplt	r2,r2,zero
  8318d4:	1000151e 	bne	r2,zero,83192c <alt_up_sd_card_get_attributes+0x78>
  8318d8:	e0bfff0f 	ldh	r2,-4(fp)
  8318dc:	10800508 	cmpgei	r2,r2,20
  8318e0:	1000121e 	bne	r2,zero,83192c <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
  8318e4:	e0bfff0f 	ldh	r2,-4(fp)
  8318e8:	00c020f4 	movhi	r3,131
  8318ec:	18de7304 	addi	r3,r3,31180
  8318f0:	100491ba 	slli	r2,r2,6
  8318f4:	10c5883a 	add	r2,r2,r3
  8318f8:	10800f04 	addi	r2,r2,60
  8318fc:	10800017 	ldw	r2,0(r2)
  831900:	1005003a 	cmpeq	r2,r2,zero
  831904:	1000091e 	bne	r2,zero,83192c <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
  831908:	e0bfff0f 	ldh	r2,-4(fp)
  83190c:	00c020f4 	movhi	r3,131
  831910:	18de7304 	addi	r3,r3,31180
  831914:	100491ba 	slli	r2,r2,6
  831918:	10c5883a 	add	r2,r2,r3
  83191c:	10800204 	addi	r2,r2,8
  831920:	108000c3 	ldbu	r2,3(r2)
  831924:	10803fcc 	andi	r2,r2,255
  831928:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  83192c:	e0bffe0f 	ldh	r2,-8(fp)
}
  831930:	e037883a 	mov	sp,fp
  831934:	df000017 	ldw	fp,0(sp)
  831938:	dec00104 	addi	sp,sp,4
  83193c:	f800283a 	ret

00831940 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  831940:	defffa04 	addi	sp,sp,-24
  831944:	dfc00515 	stw	ra,20(sp)
  831948:	df000415 	stw	fp,16(sp)
  83194c:	df000404 	addi	fp,sp,16
  831950:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
  831954:	00bfffc4 	movi	r2,-1
  831958:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  83195c:	e0bffe0f 	ldh	r2,-8(fp)
  831960:	1004803a 	cmplt	r2,r2,zero
  831964:	1000d51e 	bne	r2,zero,831cbc <alt_up_sd_card_read+0x37c>
  831968:	e0bffe0f 	ldh	r2,-8(fp)
  83196c:	10800508 	cmpgei	r2,r2,20
  831970:	1000d21e 	bne	r2,zero,831cbc <alt_up_sd_card_read+0x37c>
    {
        if (active_files[file_handle].in_use)
  831974:	e0bffe0f 	ldh	r2,-8(fp)
  831978:	00c020f4 	movhi	r3,131
  83197c:	18de7304 	addi	r3,r3,31180
  831980:	100491ba 	slli	r2,r2,6
  831984:	10c5883a 	add	r2,r2,r3
  831988:	10800f04 	addi	r2,r2,60
  83198c:	10800017 	ldw	r2,0(r2)
  831990:	1005003a 	cmpeq	r2,r2,zero
  831994:	1000c91e 	bne	r2,zero,831cbc <alt_up_sd_card_read+0x37c>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  831998:	e0bffe0f 	ldh	r2,-8(fp)
  83199c:	00c020f4 	movhi	r3,131
  8319a0:	18de7304 	addi	r3,r3,31180
  8319a4:	100491ba 	slli	r2,r2,6
  8319a8:	10c5883a 	add	r2,r2,r3
  8319ac:	10800904 	addi	r2,r2,36
  8319b0:	11000017 	ldw	r4,0(r2)
  8319b4:	e0bffe0f 	ldh	r2,-8(fp)
  8319b8:	00c020f4 	movhi	r3,131
  8319bc:	18de7304 	addi	r3,r3,31180
  8319c0:	100491ba 	slli	r2,r2,6
  8319c4:	10c5883a 	add	r2,r2,r3
  8319c8:	10800604 	addi	r2,r2,24
  8319cc:	10800017 	ldw	r2,0(r2)
  8319d0:	2080ba2e 	bgeu	r4,r2,831cbc <alt_up_sd_card_read+0x37c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  8319d4:	008020f4 	movhi	r2,131
  8319d8:	109e5e04 	addi	r2,r2,31096
  8319dc:	11001417 	ldw	r4,80(r2)
  8319e0:	e0bffe0f 	ldh	r2,-8(fp)
  8319e4:	00c020f4 	movhi	r3,131
  8319e8:	18de7304 	addi	r3,r3,31180
  8319ec:	100491ba 	slli	r2,r2,6
  8319f0:	10c5883a 	add	r2,r2,r3
  8319f4:	10800704 	addi	r2,r2,28
  8319f8:	10800017 	ldw	r2,0(r2)
  8319fc:	10ffff84 	addi	r3,r2,-2
  831a00:	008020f4 	movhi	r2,131
  831a04:	109e5e04 	addi	r2,r2,31096
  831a08:	10800383 	ldbu	r2,14(r2)
  831a0c:	10803fcc 	andi	r2,r2,255
  831a10:	1885383a 	mul	r2,r3,r2
  831a14:	2089883a 	add	r4,r4,r2
  831a18:	e0bffe0f 	ldh	r2,-8(fp)
  831a1c:	00c020f4 	movhi	r3,131
  831a20:	18de7304 	addi	r3,r3,31180
  831a24:	100491ba 	slli	r2,r2,6
  831a28:	10c5883a 	add	r2,r2,r3
  831a2c:	10800804 	addi	r2,r2,32
  831a30:	10800017 	ldw	r2,0(r2)
  831a34:	2085883a 	add	r2,r4,r2
  831a38:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  831a3c:	e0bffe0f 	ldh	r2,-8(fp)
  831a40:	00c020f4 	movhi	r3,131
  831a44:	18de7304 	addi	r3,r3,31180
  831a48:	100491ba 	slli	r2,r2,6
  831a4c:	10c5883a 	add	r2,r2,r3
  831a50:	10800904 	addi	r2,r2,36
  831a54:	10800017 	ldw	r2,0(r2)
  831a58:	1005003a 	cmpeq	r2,r2,zero
  831a5c:	10006a1e 	bne	r2,zero,831c08 <alt_up_sd_card_read+0x2c8>
  831a60:	e0bffe0f 	ldh	r2,-8(fp)
  831a64:	00c020f4 	movhi	r3,131
  831a68:	18de7304 	addi	r3,r3,31180
  831a6c:	100491ba 	slli	r2,r2,6
  831a70:	10c5883a 	add	r2,r2,r3
  831a74:	10800904 	addi	r2,r2,36
  831a78:	10800017 	ldw	r2,0(r2)
  831a7c:	10807fcc 	andi	r2,r2,511
  831a80:	1004c03a 	cmpne	r2,r2,zero
  831a84:	1000601e 	bne	r2,zero,831c08 <alt_up_sd_card_read+0x2c8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  831a88:	e0bffe0f 	ldh	r2,-8(fp)
  831a8c:	00c020f4 	movhi	r3,131
  831a90:	18de7304 	addi	r3,r3,31180
  831a94:	100491ba 	slli	r2,r2,6
  831a98:	10c5883a 	add	r2,r2,r3
  831a9c:	10800804 	addi	r2,r2,32
  831aa0:	10c00017 	ldw	r3,0(r2)
  831aa4:	008020f4 	movhi	r2,131
  831aa8:	109e5e04 	addi	r2,r2,31096
  831aac:	10800383 	ldbu	r2,14(r2)
  831ab0:	10803fcc 	andi	r2,r2,255
  831ab4:	10bfffc4 	addi	r2,r2,-1
  831ab8:	1880411e 	bne	r3,r2,831bc0 <alt_up_sd_card_read+0x280>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  831abc:	e0bffe0f 	ldh	r2,-8(fp)
  831ac0:	00c020f4 	movhi	r3,131
  831ac4:	18de7304 	addi	r3,r3,31180
  831ac8:	100491ba 	slli	r2,r2,6
  831acc:	10c5883a 	add	r2,r2,r3
  831ad0:	10800704 	addi	r2,r2,28
  831ad4:	11000017 	ldw	r4,0(r2)
  831ad8:	e17ffd84 	addi	r5,fp,-10
  831adc:	082e2b00 	call	82e2b0 <get_cluster_flag>
  831ae0:	1005003a 	cmpeq	r2,r2,zero
  831ae4:	1000331e 	bne	r2,zero,831bb4 <alt_up_sd_card_read+0x274>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  831ae8:	e0bffd8b 	ldhu	r2,-10(fp)
  831aec:	10bfffcc 	andi	r2,r2,65535
  831af0:	10fffe0c 	andi	r3,r2,65528
  831af4:	00bffe14 	movui	r2,65528
  831af8:	1880031e 	bne	r3,r2,831b08 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
  831afc:	00bfffc4 	movi	r2,-1
  831b00:	e0bfff15 	stw	r2,-4(fp)
  831b04:	00006f06 	br	831cc4 <alt_up_sd_card_read+0x384>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  831b08:	e13ffe0f 	ldh	r4,-8(fp)
  831b0c:	e0bffd8b 	ldhu	r2,-10(fp)
  831b10:	117fffcc 	andi	r5,r2,65535
  831b14:	00c020f4 	movhi	r3,131
  831b18:	18de7304 	addi	r3,r3,31180
  831b1c:	200491ba 	slli	r2,r4,6
  831b20:	10c5883a 	add	r2,r2,r3
  831b24:	10800704 	addi	r2,r2,28
  831b28:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  831b2c:	e0bffe0f 	ldh	r2,-8(fp)
  831b30:	00c020f4 	movhi	r3,131
  831b34:	18de7304 	addi	r3,r3,31180
  831b38:	100491ba 	slli	r2,r2,6
  831b3c:	10c5883a 	add	r2,r2,r3
  831b40:	10800804 	addi	r2,r2,32
  831b44:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  831b48:	008020f4 	movhi	r2,131
  831b4c:	109e5e04 	addi	r2,r2,31096
  831b50:	11001417 	ldw	r4,80(r2)
  831b54:	e0bffe0f 	ldh	r2,-8(fp)
  831b58:	00c020f4 	movhi	r3,131
  831b5c:	18de7304 	addi	r3,r3,31180
  831b60:	100491ba 	slli	r2,r2,6
  831b64:	10c5883a 	add	r2,r2,r3
  831b68:	10800704 	addi	r2,r2,28
  831b6c:	10800017 	ldw	r2,0(r2)
  831b70:	10ffff84 	addi	r3,r2,-2
  831b74:	008020f4 	movhi	r2,131
  831b78:	109e5e04 	addi	r2,r2,31096
  831b7c:	10800383 	ldbu	r2,14(r2)
  831b80:	10803fcc 	andi	r2,r2,255
  831b84:	1885383a 	mul	r2,r3,r2
  831b88:	2089883a 	add	r4,r4,r2
  831b8c:	e0bffe0f 	ldh	r2,-8(fp)
  831b90:	00c020f4 	movhi	r3,131
  831b94:	18de7304 	addi	r3,r3,31180
  831b98:	100491ba 	slli	r2,r2,6
  831b9c:	10c5883a 	add	r2,r2,r3
  831ba0:	10800804 	addi	r2,r2,32
  831ba4:	10800017 	ldw	r2,0(r2)
  831ba8:	2085883a 	add	r2,r4,r2
  831bac:	e0bffc15 	stw	r2,-16(fp)
  831bb0:	00001506 	br	831c08 <alt_up_sd_card_read+0x2c8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
  831bb4:	00bfff84 	movi	r2,-2
  831bb8:	e0bfff15 	stw	r2,-4(fp)
  831bbc:	00004106 	br	831cc4 <alt_up_sd_card_read+0x384>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  831bc0:	e17ffe0f 	ldh	r5,-8(fp)
  831bc4:	e0bffe0f 	ldh	r2,-8(fp)
  831bc8:	00c020f4 	movhi	r3,131
  831bcc:	18de7304 	addi	r3,r3,31180
  831bd0:	100491ba 	slli	r2,r2,6
  831bd4:	10c5883a 	add	r2,r2,r3
  831bd8:	10800804 	addi	r2,r2,32
  831bdc:	10800017 	ldw	r2,0(r2)
  831be0:	11000044 	addi	r4,r2,1
  831be4:	00c020f4 	movhi	r3,131
  831be8:	18de7304 	addi	r3,r3,31180
  831bec:	280491ba 	slli	r2,r5,6
  831bf0:	10c5883a 	add	r2,r2,r3
  831bf4:	10800804 	addi	r2,r2,32
  831bf8:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  831bfc:	e0bffc17 	ldw	r2,-16(fp)
  831c00:	10800044 	addi	r2,r2,1
  831c04:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  831c08:	d0e7d317 	ldw	r3,-24756(gp)
  831c0c:	e0bffc17 	ldw	r2,-16(fp)
  831c10:	1885883a 	add	r2,r3,r2
  831c14:	1007883a 	mov	r3,r2
  831c18:	d0a7d717 	ldw	r2,-24740(gp)
  831c1c:	18800826 	beq	r3,r2,831c40 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  831c20:	d167d317 	ldw	r5,-24756(gp)
  831c24:	e13ffc17 	ldw	r4,-16(fp)
  831c28:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  831c2c:	1004c03a 	cmpne	r2,r2,zero
  831c30:	1000031e 	bne	r2,zero,831c40 <alt_up_sd_card_read+0x300>
                    {
						return -2;
  831c34:	00bfff84 	movi	r2,-2
  831c38:	e0bfff15 	stw	r2,-4(fp)
  831c3c:	00002106 	br	831cc4 <alt_up_sd_card_read+0x384>
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  831c40:	e0bffe0f 	ldh	r2,-8(fp)
  831c44:	00c020f4 	movhi	r3,131
  831c48:	18de7304 	addi	r3,r3,31180
  831c4c:	100491ba 	slli	r2,r2,6
  831c50:	10c5883a 	add	r2,r2,r3
  831c54:	10800904 	addi	r2,r2,36
  831c58:	10800017 	ldw	r2,0(r2)
  831c5c:	10807fcc 	andi	r2,r2,511
  831c60:	1007883a 	mov	r3,r2
  831c64:	d0a7d217 	ldw	r2,-24760(gp)
  831c68:	1885883a 	add	r2,r3,r2
  831c6c:	10800023 	ldbuio	r2,0(r2)
  831c70:	10803fcc 	andi	r2,r2,255
  831c74:	1080201c 	xori	r2,r2,128
  831c78:	10bfe004 	addi	r2,r2,-128
  831c7c:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  831c80:	e17ffe0f 	ldh	r5,-8(fp)
  831c84:	e0bffe0f 	ldh	r2,-8(fp)
  831c88:	00c020f4 	movhi	r3,131
  831c8c:	18de7304 	addi	r3,r3,31180
  831c90:	100491ba 	slli	r2,r2,6
  831c94:	10c5883a 	add	r2,r2,r3
  831c98:	10800904 	addi	r2,r2,36
  831c9c:	10800017 	ldw	r2,0(r2)
  831ca0:	11000044 	addi	r4,r2,1
  831ca4:	00c020f4 	movhi	r3,131
  831ca8:	18de7304 	addi	r3,r3,31180
  831cac:	280491ba 	slli	r2,r5,6
  831cb0:	10c5883a 	add	r2,r2,r3
  831cb4:	10800904 	addi	r2,r2,36
  831cb8:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
  831cbc:	e0bffd0f 	ldh	r2,-12(fp)
  831cc0:	e0bfff15 	stw	r2,-4(fp)
  831cc4:	e0bfff17 	ldw	r2,-4(fp)
}
  831cc8:	e037883a 	mov	sp,fp
  831ccc:	dfc00117 	ldw	ra,4(sp)
  831cd0:	df000017 	ldw	fp,0(sp)
  831cd4:	dec00204 	addi	sp,sp,8
  831cd8:	f800283a 	ret

00831cdc <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  831cdc:	defff504 	addi	sp,sp,-44
  831ce0:	dfc00a15 	stw	ra,40(sp)
  831ce4:	df000915 	stw	fp,36(sp)
  831ce8:	dc000815 	stw	r16,32(sp)
  831cec:	df000804 	addi	fp,sp,32
  831cf0:	e13ffd0d 	sth	r4,-12(fp)
  831cf4:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
  831cf8:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  831cfc:	e0bffd0f 	ldh	r2,-12(fp)
  831d00:	1004803a 	cmplt	r2,r2,zero
  831d04:	1001751e 	bne	r2,zero,8322dc <alt_up_sd_card_write+0x600>
  831d08:	e0bffd0f 	ldh	r2,-12(fp)
  831d0c:	10800508 	cmpgei	r2,r2,20
  831d10:	1001721e 	bne	r2,zero,8322dc <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
  831d14:	e0bffd0f 	ldh	r2,-12(fp)
  831d18:	00c020f4 	movhi	r3,131
  831d1c:	18de7304 	addi	r3,r3,31180
  831d20:	100491ba 	slli	r2,r2,6
  831d24:	10c5883a 	add	r2,r2,r3
  831d28:	10800f04 	addi	r2,r2,60
  831d2c:	10800017 	ldw	r2,0(r2)
  831d30:	1005003a 	cmpeq	r2,r2,zero
  831d34:	1001691e 	bne	r2,zero,8322dc <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  831d38:	008020f4 	movhi	r2,131
  831d3c:	109e5e04 	addi	r2,r2,31096
  831d40:	11001417 	ldw	r4,80(r2)
  831d44:	e0bffd0f 	ldh	r2,-12(fp)
  831d48:	00c020f4 	movhi	r3,131
  831d4c:	18de7304 	addi	r3,r3,31180
  831d50:	100491ba 	slli	r2,r2,6
  831d54:	10c5883a 	add	r2,r2,r3
  831d58:	10800704 	addi	r2,r2,28
  831d5c:	10800017 	ldw	r2,0(r2)
  831d60:	10ffff84 	addi	r3,r2,-2
  831d64:	008020f4 	movhi	r2,131
  831d68:	109e5e04 	addi	r2,r2,31096
  831d6c:	10800383 	ldbu	r2,14(r2)
  831d70:	10803fcc 	andi	r2,r2,255
  831d74:	1885383a 	mul	r2,r3,r2
  831d78:	2089883a 	add	r4,r4,r2
  831d7c:	e0bffd0f 	ldh	r2,-12(fp)
  831d80:	00c020f4 	movhi	r3,131
  831d84:	18de7304 	addi	r3,r3,31180
  831d88:	100491ba 	slli	r2,r2,6
  831d8c:	10c5883a 	add	r2,r2,r3
  831d90:	10800804 	addi	r2,r2,32
  831d94:	10800017 	ldw	r2,0(r2)
  831d98:	2085883a 	add	r2,r4,r2
  831d9c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  831da0:	e0bffd0f 	ldh	r2,-12(fp)
  831da4:	00c020f4 	movhi	r3,131
  831da8:	18de7304 	addi	r3,r3,31180
  831dac:	100491ba 	slli	r2,r2,6
  831db0:	10c5883a 	add	r2,r2,r3
  831db4:	10800904 	addi	r2,r2,36
  831db8:	11000017 	ldw	r4,0(r2)
  831dbc:	008020f4 	movhi	r2,131
  831dc0:	109e5e04 	addi	r2,r2,31096
  831dc4:	1080030b 	ldhu	r2,12(r2)
  831dc8:	117fffcc 	andi	r5,r2,65535
  831dcc:	0822ee40 	call	822ee4 <__umodsi3>
  831dd0:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  831dd4:	e0bffd0f 	ldh	r2,-12(fp)
  831dd8:	00c020f4 	movhi	r3,131
  831ddc:	18de7304 	addi	r3,r3,31180
  831de0:	100491ba 	slli	r2,r2,6
  831de4:	10c5883a 	add	r2,r2,r3
  831de8:	10800904 	addi	r2,r2,36
  831dec:	11000017 	ldw	r4,0(r2)
  831df0:	e0bffd0f 	ldh	r2,-12(fp)
  831df4:	00c020f4 	movhi	r3,131
  831df8:	18de7304 	addi	r3,r3,31180
  831dfc:	100491ba 	slli	r2,r2,6
  831e00:	10c5883a 	add	r2,r2,r3
  831e04:	10800604 	addi	r2,r2,24
  831e08:	10800017 	ldw	r2,0(r2)
  831e0c:	2080682e 	bgeu	r4,r2,831fb0 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  831e10:	e0bffd0f 	ldh	r2,-12(fp)
  831e14:	00c020f4 	movhi	r3,131
  831e18:	18de7304 	addi	r3,r3,31180
  831e1c:	100491ba 	slli	r2,r2,6
  831e20:	10c5883a 	add	r2,r2,r3
  831e24:	10800904 	addi	r2,r2,36
  831e28:	10800017 	ldw	r2,0(r2)
  831e2c:	1005003a 	cmpeq	r2,r2,zero
  831e30:	1000de1e 	bne	r2,zero,8321ac <alt_up_sd_card_write+0x4d0>
  831e34:	e0bff80f 	ldh	r2,-32(fp)
  831e38:	1004c03a 	cmpne	r2,r2,zero
  831e3c:	1000db1e 	bne	r2,zero,8321ac <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  831e40:	e0bffd0f 	ldh	r2,-12(fp)
  831e44:	00c020f4 	movhi	r3,131
  831e48:	18de7304 	addi	r3,r3,31180
  831e4c:	100491ba 	slli	r2,r2,6
  831e50:	10c5883a 	add	r2,r2,r3
  831e54:	10800804 	addi	r2,r2,32
  831e58:	10c00017 	ldw	r3,0(r2)
  831e5c:	008020f4 	movhi	r2,131
  831e60:	109e5e04 	addi	r2,r2,31096
  831e64:	10800383 	ldbu	r2,14(r2)
  831e68:	10803fcc 	andi	r2,r2,255
  831e6c:	10bfffc4 	addi	r2,r2,-1
  831e70:	18803c1e 	bne	r3,r2,831f64 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  831e74:	e0bffd0f 	ldh	r2,-12(fp)
  831e78:	00c020f4 	movhi	r3,131
  831e7c:	18de7304 	addi	r3,r3,31180
  831e80:	100491ba 	slli	r2,r2,6
  831e84:	10c5883a 	add	r2,r2,r3
  831e88:	10800704 	addi	r2,r2,28
  831e8c:	11000017 	ldw	r4,0(r2)
  831e90:	e17ffb04 	addi	r5,fp,-20
  831e94:	082e2b00 	call	82e2b0 <get_cluster_flag>
  831e98:	1005003a 	cmpeq	r2,r2,zero
  831e9c:	10002f1e 	bne	r2,zero,831f5c <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
  831ea0:	e0bffb0b 	ldhu	r2,-20(fp)
  831ea4:	10ffffcc 	andi	r3,r2,65535
  831ea8:	00bffdd4 	movui	r2,65527
  831eac:	10c0bf36 	bltu	r2,r3,8321ac <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  831eb0:	e13ffd0f 	ldh	r4,-12(fp)
  831eb4:	e0bffb0b 	ldhu	r2,-20(fp)
  831eb8:	117fffcc 	andi	r5,r2,65535
  831ebc:	00c020f4 	movhi	r3,131
  831ec0:	18de7304 	addi	r3,r3,31180
  831ec4:	200491ba 	slli	r2,r4,6
  831ec8:	10c5883a 	add	r2,r2,r3
  831ecc:	10800704 	addi	r2,r2,28
  831ed0:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  831ed4:	e0bffd0f 	ldh	r2,-12(fp)
  831ed8:	00c020f4 	movhi	r3,131
  831edc:	18de7304 	addi	r3,r3,31180
  831ee0:	100491ba 	slli	r2,r2,6
  831ee4:	10c5883a 	add	r2,r2,r3
  831ee8:	10800804 	addi	r2,r2,32
  831eec:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  831ef0:	008020f4 	movhi	r2,131
  831ef4:	109e5e04 	addi	r2,r2,31096
  831ef8:	11001417 	ldw	r4,80(r2)
  831efc:	e0bffd0f 	ldh	r2,-12(fp)
  831f00:	00c020f4 	movhi	r3,131
  831f04:	18de7304 	addi	r3,r3,31180
  831f08:	100491ba 	slli	r2,r2,6
  831f0c:	10c5883a 	add	r2,r2,r3
  831f10:	10800704 	addi	r2,r2,28
  831f14:	10800017 	ldw	r2,0(r2)
  831f18:	10ffff84 	addi	r3,r2,-2
  831f1c:	008020f4 	movhi	r2,131
  831f20:	109e5e04 	addi	r2,r2,31096
  831f24:	10800383 	ldbu	r2,14(r2)
  831f28:	10803fcc 	andi	r2,r2,255
  831f2c:	1885383a 	mul	r2,r3,r2
  831f30:	2089883a 	add	r4,r4,r2
  831f34:	e0bffd0f 	ldh	r2,-12(fp)
  831f38:	00c020f4 	movhi	r3,131
  831f3c:	18de7304 	addi	r3,r3,31180
  831f40:	100491ba 	slli	r2,r2,6
  831f44:	10c5883a 	add	r2,r2,r3
  831f48:	10800804 	addi	r2,r2,32
  831f4c:	10800017 	ldw	r2,0(r2)
  831f50:	2085883a 	add	r2,r4,r2
  831f54:	e0bff915 	stw	r2,-28(fp)
  831f58:	00009406 	br	8321ac <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
  831f5c:	e03fff15 	stw	zero,-4(fp)
  831f60:	0000e006 	br	8322e4 <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  831f64:	e17ffd0f 	ldh	r5,-12(fp)
  831f68:	e0bffd0f 	ldh	r2,-12(fp)
  831f6c:	00c020f4 	movhi	r3,131
  831f70:	18de7304 	addi	r3,r3,31180
  831f74:	100491ba 	slli	r2,r2,6
  831f78:	10c5883a 	add	r2,r2,r3
  831f7c:	10800804 	addi	r2,r2,32
  831f80:	10800017 	ldw	r2,0(r2)
  831f84:	11000044 	addi	r4,r2,1
  831f88:	00c020f4 	movhi	r3,131
  831f8c:	18de7304 	addi	r3,r3,31180
  831f90:	280491ba 	slli	r2,r5,6
  831f94:	10c5883a 	add	r2,r2,r3
  831f98:	10800804 	addi	r2,r2,32
  831f9c:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  831fa0:	e0bff917 	ldw	r2,-28(fp)
  831fa4:	10800044 	addi	r2,r2,1
  831fa8:	e0bff915 	stw	r2,-28(fp)
  831fac:	00007f06 	br	8321ac <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  831fb0:	e0bffd0f 	ldh	r2,-12(fp)
  831fb4:	00c020f4 	movhi	r3,131
  831fb8:	18de7304 	addi	r3,r3,31180
  831fbc:	100491ba 	slli	r2,r2,6
  831fc0:	10c5883a 	add	r2,r2,r3
  831fc4:	10800904 	addi	r2,r2,36
  831fc8:	10800017 	ldw	r2,0(r2)
  831fcc:	1005003a 	cmpeq	r2,r2,zero
  831fd0:	1000761e 	bne	r2,zero,8321ac <alt_up_sd_card_write+0x4d0>
  831fd4:	e0bff80f 	ldh	r2,-32(fp)
  831fd8:	1004c03a 	cmpne	r2,r2,zero
  831fdc:	1000731e 	bne	r2,zero,8321ac <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  831fe0:	e0bffd0f 	ldh	r2,-12(fp)
  831fe4:	00c020f4 	movhi	r3,131
  831fe8:	18de7304 	addi	r3,r3,31180
  831fec:	100491ba 	slli	r2,r2,6
  831ff0:	10c5883a 	add	r2,r2,r3
  831ff4:	10800804 	addi	r2,r2,32
  831ff8:	10c00017 	ldw	r3,0(r2)
  831ffc:	008020f4 	movhi	r2,131
  832000:	109e5e04 	addi	r2,r2,31096
  832004:	10800383 	ldbu	r2,14(r2)
  832008:	10803fcc 	andi	r2,r2,255
  83200c:	10bfffc4 	addi	r2,r2,-1
  832010:	1880381e 	bne	r3,r2,8320f4 <alt_up_sd_card_write+0x418>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
  832014:	e13ffc04 	addi	r4,fp,-16
  832018:	08302fc0 	call	8302fc <find_first_empty_cluster>
  83201c:	1005003a 	cmpeq	r2,r2,zero
  832020:	1000321e 	bne	r2,zero,8320ec <alt_up_sd_card_write+0x410>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  832024:	e0bffd0f 	ldh	r2,-12(fp)
  832028:	00c020f4 	movhi	r3,131
  83202c:	18de7304 	addi	r3,r3,31180
  832030:	100491ba 	slli	r2,r2,6
  832034:	10c5883a 	add	r2,r2,r3
  832038:	10800704 	addi	r2,r2,28
  83203c:	11000017 	ldw	r4,0(r2)
  832040:	e0bffc17 	ldw	r2,-16(fp)
  832044:	117fffcc 	andi	r5,r2,65535
  832048:	2960001c 	xori	r5,r5,32768
  83204c:	29600004 	addi	r5,r5,-32768
  832050:	01800044 	movi	r6,1
  832054:	082e3680 	call	82e368 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
  832058:	e13ffc17 	ldw	r4,-16(fp)
  83205c:	017fffc4 	movi	r5,-1
  832060:	01800044 	movi	r6,1
  832064:	082e3680 	call	82e368 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  832068:	e0bffd0f 	ldh	r2,-12(fp)
  83206c:	00c020f4 	movhi	r3,131
  832070:	18de7304 	addi	r3,r3,31180
  832074:	100491ba 	slli	r2,r2,6
  832078:	10c5883a 	add	r2,r2,r3
  83207c:	10800704 	addi	r2,r2,28
  832080:	11000017 	ldw	r4,0(r2)
  832084:	e0bffc17 	ldw	r2,-16(fp)
  832088:	117fffcc 	andi	r5,r2,65535
  83208c:	2960001c 	xori	r5,r5,32768
  832090:	29600004 	addi	r5,r5,-32768
  832094:	000d883a 	mov	r6,zero
  832098:	082e3680 	call	82e368 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
  83209c:	e13ffc17 	ldw	r4,-16(fp)
  8320a0:	017fffc4 	movi	r5,-1
  8320a4:	000d883a 	mov	r6,zero
  8320a8:	082e3680 	call	82e368 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  8320ac:	e0bffd0f 	ldh	r2,-12(fp)
  8320b0:	e13ffc17 	ldw	r4,-16(fp)
  8320b4:	00c020f4 	movhi	r3,131
  8320b8:	18de7304 	addi	r3,r3,31180
  8320bc:	100491ba 	slli	r2,r2,6
  8320c0:	10c5883a 	add	r2,r2,r3
  8320c4:	10800704 	addi	r2,r2,28
  8320c8:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  8320cc:	e0bffd0f 	ldh	r2,-12(fp)
  8320d0:	00c020f4 	movhi	r3,131
  8320d4:	18de7304 	addi	r3,r3,31180
  8320d8:	100491ba 	slli	r2,r2,6
  8320dc:	10c5883a 	add	r2,r2,r3
  8320e0:	10800804 	addi	r2,r2,32
  8320e4:	10000015 	stw	zero,0(r2)
  8320e8:	00001606 	br	832144 <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
  8320ec:	e03fff15 	stw	zero,-4(fp)
  8320f0:	00007c06 	br	8322e4 <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  8320f4:	e43ffd0f 	ldh	r16,-12(fp)
  8320f8:	e0bffd0f 	ldh	r2,-12(fp)
  8320fc:	00c020f4 	movhi	r3,131
  832100:	18de7304 	addi	r3,r3,31180
  832104:	100491ba 	slli	r2,r2,6
  832108:	10c5883a 	add	r2,r2,r3
  83210c:	10800904 	addi	r2,r2,36
  832110:	11000017 	ldw	r4,0(r2)
  832114:	008020f4 	movhi	r2,131
  832118:	109e5e04 	addi	r2,r2,31096
  83211c:	1080030b 	ldhu	r2,12(r2)
  832120:	117fffcc 	andi	r5,r2,65535
  832124:	0822edc0 	call	822edc <__udivsi3>
  832128:	1009883a 	mov	r4,r2
  83212c:	00c020f4 	movhi	r3,131
  832130:	18de7304 	addi	r3,r3,31180
  832134:	800491ba 	slli	r2,r16,6
  832138:	10c5883a 	add	r2,r2,r3
  83213c:	10800804 	addi	r2,r2,32
  832140:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  832144:	008020f4 	movhi	r2,131
  832148:	109e5e04 	addi	r2,r2,31096
  83214c:	11001417 	ldw	r4,80(r2)
  832150:	e0bffd0f 	ldh	r2,-12(fp)
  832154:	00c020f4 	movhi	r3,131
  832158:	18de7304 	addi	r3,r3,31180
  83215c:	100491ba 	slli	r2,r2,6
  832160:	10c5883a 	add	r2,r2,r3
  832164:	10800704 	addi	r2,r2,28
  832168:	10800017 	ldw	r2,0(r2)
  83216c:	10ffff84 	addi	r3,r2,-2
  832170:	008020f4 	movhi	r2,131
  832174:	109e5e04 	addi	r2,r2,31096
  832178:	10800383 	ldbu	r2,14(r2)
  83217c:	10803fcc 	andi	r2,r2,255
  832180:	1885383a 	mul	r2,r3,r2
  832184:	2089883a 	add	r4,r4,r2
  832188:	e0bffd0f 	ldh	r2,-12(fp)
  83218c:	00c020f4 	movhi	r3,131
  832190:	18de7304 	addi	r3,r3,31180
  832194:	100491ba 	slli	r2,r2,6
  832198:	10c5883a 	add	r2,r2,r3
  83219c:	10800804 	addi	r2,r2,32
  8321a0:	10800017 	ldw	r2,0(r2)
  8321a4:	2085883a 	add	r2,r4,r2
  8321a8:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  8321ac:	d0e7d317 	ldw	r3,-24756(gp)
  8321b0:	e0bff917 	ldw	r2,-28(fp)
  8321b4:	1885883a 	add	r2,r3,r2
  8321b8:	1007883a 	mov	r3,r2
  8321bc:	d0a7d717 	ldw	r2,-24740(gp)
  8321c0:	18800726 	beq	r3,r2,8321e0 <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  8321c4:	d167d317 	ldw	r5,-24756(gp)
  8321c8:	e13ff917 	ldw	r4,-28(fp)
  8321cc:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  8321d0:	1004c03a 	cmpne	r2,r2,zero
  8321d4:	1000021e 	bne	r2,zero,8321e0 <alt_up_sd_card_write+0x504>
                {
					return false;
  8321d8:	e03fff15 	stw	zero,-4(fp)
  8321dc:	00004106 	br	8322e4 <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  8321e0:	e0bff80f 	ldh	r2,-32(fp)
  8321e4:	1007883a 	mov	r3,r2
  8321e8:	d0a7d217 	ldw	r2,-24760(gp)
  8321ec:	1885883a 	add	r2,r3,r2
  8321f0:	e0fffe07 	ldb	r3,-8(fp)
  8321f4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  8321f8:	e17ffd0f 	ldh	r5,-12(fp)
  8321fc:	e0bffd0f 	ldh	r2,-12(fp)
  832200:	00c020f4 	movhi	r3,131
  832204:	18de7304 	addi	r3,r3,31180
  832208:	100491ba 	slli	r2,r2,6
  83220c:	10c5883a 	add	r2,r2,r3
  832210:	10800904 	addi	r2,r2,36
  832214:	10800017 	ldw	r2,0(r2)
  832218:	11000044 	addi	r4,r2,1
  83221c:	00c020f4 	movhi	r3,131
  832220:	18de7304 	addi	r3,r3,31180
  832224:	280491ba 	slli	r2,r5,6
  832228:	10c5883a 	add	r2,r2,r3
  83222c:	10800904 	addi	r2,r2,36
  832230:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  832234:	e0bffd0f 	ldh	r2,-12(fp)
  832238:	00c020f4 	movhi	r3,131
  83223c:	18de7304 	addi	r3,r3,31180
  832240:	100491ba 	slli	r2,r2,6
  832244:	10c5883a 	add	r2,r2,r3
  832248:	10800904 	addi	r2,r2,36
  83224c:	11000017 	ldw	r4,0(r2)
  832250:	e0bffd0f 	ldh	r2,-12(fp)
  832254:	00c020f4 	movhi	r3,131
  832258:	18de7304 	addi	r3,r3,31180
  83225c:	100491ba 	slli	r2,r2,6
  832260:	10c5883a 	add	r2,r2,r3
  832264:	10800604 	addi	r2,r2,24
  832268:	10800017 	ldw	r2,0(r2)
  83226c:	20801736 	bltu	r4,r2,8322cc <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  832270:	e17ffd0f 	ldh	r5,-12(fp)
  832274:	e0bffd0f 	ldh	r2,-12(fp)
  832278:	00c020f4 	movhi	r3,131
  83227c:	18de7304 	addi	r3,r3,31180
  832280:	100491ba 	slli	r2,r2,6
  832284:	10c5883a 	add	r2,r2,r3
  832288:	10800604 	addi	r2,r2,24
  83228c:	10800017 	ldw	r2,0(r2)
  832290:	11000044 	addi	r4,r2,1
  832294:	00c020f4 	movhi	r3,131
  832298:	18de7304 	addi	r3,r3,31180
  83229c:	280491ba 	slli	r2,r5,6
  8322a0:	10c5883a 	add	r2,r2,r3
  8322a4:	10800604 	addi	r2,r2,24
  8322a8:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
  8322ac:	e0bffd0f 	ldh	r2,-12(fp)
  8322b0:	00c020f4 	movhi	r3,131
  8322b4:	18de7304 	addi	r3,r3,31180
  8322b8:	100491ba 	slli	r2,r2,6
  8322bc:	10c5883a 	add	r2,r2,r3
  8322c0:	10c00e04 	addi	r3,r2,56
  8322c4:	00800044 	movi	r2,1
  8322c8:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  8322cc:	00800044 	movi	r2,1
  8322d0:	d0a7d615 	stw	r2,-24744(gp)
			result = true;
  8322d4:	00800044 	movi	r2,1
  8322d8:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
  8322dc:	e0bffa17 	ldw	r2,-24(fp)
  8322e0:	e0bfff15 	stw	r2,-4(fp)
  8322e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8322e8:	e037883a 	mov	sp,fp
  8322ec:	dfc00217 	ldw	ra,8(sp)
  8322f0:	df000117 	ldw	fp,4(sp)
  8322f4:	dc000017 	ldw	r16,0(sp)
  8322f8:	dec00304 	addi	sp,sp,12
  8322fc:	f800283a 	ret

00832300 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  832300:	defffb04 	addi	sp,sp,-20
  832304:	dfc00415 	stw	ra,16(sp)
  832308:	df000315 	stw	fp,12(sp)
  83230c:	df000304 	addi	fp,sp,12
  832310:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
  832314:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  832318:	0830ebc0 	call	830ebc <alt_up_sd_card_is_Present>
  83231c:	1005003a 	cmpeq	r2,r2,zero
  832320:	1000641e 	bne	r2,zero,8324b4 <alt_up_sd_card_fclose+0x1b4>
  832324:	d0a7cc17 	ldw	r2,-24784(gp)
  832328:	1005003a 	cmpeq	r2,r2,zero
  83232c:	1000611e 	bne	r2,zero,8324b4 <alt_up_sd_card_fclose+0x1b4>
    {
        if (active_files[file_handle].in_use) 
  832330:	e0bfff0f 	ldh	r2,-4(fp)
  832334:	00c020f4 	movhi	r3,131
  832338:	18de7304 	addi	r3,r3,31180
  83233c:	100491ba 	slli	r2,r2,6
  832340:	10c5883a 	add	r2,r2,r3
  832344:	10800f04 	addi	r2,r2,60
  832348:	10800017 	ldw	r2,0(r2)
  83234c:	1005003a 	cmpeq	r2,r2,zero
  832350:	1000581e 	bne	r2,zero,8324b4 <alt_up_sd_card_fclose+0x1b4>
        {
			if (active_files[file_handle].modified)
  832354:	e0bfff0f 	ldh	r2,-4(fp)
  832358:	00c020f4 	movhi	r3,131
  83235c:	18de7304 	addi	r3,r3,31180
  832360:	100491ba 	slli	r2,r2,6
  832364:	10c5883a 	add	r2,r2,r3
  832368:	10800e04 	addi	r2,r2,56
  83236c:	10800017 	ldw	r2,0(r2)
  832370:	1005003a 	cmpeq	r2,r2,zero
  832374:	1000461e 	bne	r2,zero,832490 <alt_up_sd_card_fclose+0x190>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  832378:	e0bfff0f 	ldh	r2,-4(fp)
  83237c:	00c020f4 	movhi	r3,131
  832380:	18de7304 	addi	r3,r3,31180
  832384:	100491ba 	slli	r2,r2,6
  832388:	10c5883a 	add	r2,r2,r3
  83238c:	10800b04 	addi	r2,r2,44
  832390:	10800017 	ldw	r2,0(r2)
  832394:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
  832398:	e0bfff0f 	ldh	r2,-4(fp)
  83239c:	00c020f4 	movhi	r3,131
  8323a0:	18de7304 	addi	r3,r3,31180
  8323a4:	100491ba 	slli	r2,r2,6
  8323a8:	10c5883a 	add	r2,r2,r3
  8323ac:	10800a04 	addi	r2,r2,40
  8323b0:	10800017 	ldw	r2,0(r2)
  8323b4:	1004c03a 	cmpne	r2,r2,zero
  8323b8:	1000071e 	bne	r2,zero,8323d8 <alt_up_sd_card_fclose+0xd8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  8323bc:	008020f4 	movhi	r2,131
  8323c0:	109e5e04 	addi	r2,r2,31096
  8323c4:	10c01317 	ldw	r3,76(r2)
  8323c8:	e0bffd17 	ldw	r2,-12(fp)
  8323cc:	10c5883a 	add	r2,r2,r3
  8323d0:	e0bffd15 	stw	r2,-12(fp)
  8323d4:	00001406 	br	832428 <alt_up_sd_card_fclose+0x128>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  8323d8:	008020f4 	movhi	r2,131
  8323dc:	109e5e04 	addi	r2,r2,31096
  8323e0:	10c01417 	ldw	r3,80(r2)
  8323e4:	e0bffd17 	ldw	r2,-12(fp)
  8323e8:	1889883a 	add	r4,r3,r2
  8323ec:	e0bfff0f 	ldh	r2,-4(fp)
  8323f0:	00c020f4 	movhi	r3,131
  8323f4:	18de7304 	addi	r3,r3,31180
  8323f8:	100491ba 	slli	r2,r2,6
  8323fc:	10c5883a 	add	r2,r2,r3
  832400:	10800a04 	addi	r2,r2,40
  832404:	10800017 	ldw	r2,0(r2)
  832408:	10ffff84 	addi	r3,r2,-2
  83240c:	008020f4 	movhi	r2,131
  832410:	109e5e04 	addi	r2,r2,31096
  832414:	10800383 	ldbu	r2,14(r2)
  832418:	10803fcc 	andi	r2,r2,255
  83241c:	1885383a 	mul	r2,r3,r2
  832420:	2085883a 	add	r2,r4,r2
  832424:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  832428:	e13ffd17 	ldw	r4,-12(fp)
  83242c:	d167d317 	ldw	r5,-24756(gp)
  832430:	082e1b40 	call	82e1b4 <Read_Sector_Data>
  832434:	1005003a 	cmpeq	r2,r2,zero
  832438:	1000151e 	bne	r2,zero,832490 <alt_up_sd_card_fclose+0x190>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  83243c:	e0bfff0f 	ldh	r2,-4(fp)
  832440:	00c020f4 	movhi	r3,131
  832444:	18de7304 	addi	r3,r3,31180
  832448:	100491ba 	slli	r2,r2,6
  83244c:	10c5883a 	add	r2,r2,r3
  832450:	10800c04 	addi	r2,r2,48
  832454:	1080000b 	ldhu	r2,0(r2)
  832458:	113fffcc 	andi	r4,r2,65535
  83245c:	2120001c 	xori	r4,r4,32768
  832460:	21200004 	addi	r4,r4,-32768
  832464:	e0bfff0f 	ldh	r2,-4(fp)
  832468:	100491ba 	slli	r2,r2,6
  83246c:	1007883a 	mov	r3,r2
  832470:	008020f4 	movhi	r2,131
  832474:	109e7304 	addi	r2,r2,31180
  832478:	188b883a 	add	r5,r3,r2
  83247c:	082e8800 	call	82e880 <Write_File_Record_At_Offset>
  832480:	1005003a 	cmpeq	r2,r2,zero
  832484:	1000021e 	bne	r2,zero,832490 <alt_up_sd_card_fclose+0x190>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  832488:	082e1640 	call	82e164 <Save_Modified_Sector>
  83248c:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  832490:	e0bfff0f 	ldh	r2,-4(fp)
  832494:	00c020f4 	movhi	r3,131
  832498:	18de7304 	addi	r3,r3,31180
  83249c:	100491ba 	slli	r2,r2,6
  8324a0:	10c5883a 	add	r2,r2,r3
  8324a4:	10800f04 	addi	r2,r2,60
  8324a8:	10000015 	stw	zero,0(r2)
			result = true;
  8324ac:	00800044 	movi	r2,1
  8324b0:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
  8324b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8324b8:	e037883a 	mov	sp,fp
  8324bc:	dfc00117 	ldw	ra,4(sp)
  8324c0:	df000017 	ldw	fp,0(sp)
  8324c4:	dec00204 	addi	sp,sp,8
  8324c8:	f800283a 	ret

008324cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8324cc:	defff404 	addi	sp,sp,-48
  8324d0:	df000b15 	stw	fp,44(sp)
  8324d4:	df000b04 	addi	fp,sp,44
  8324d8:	e13ffb15 	stw	r4,-20(fp)
  8324dc:	e17ffc15 	stw	r5,-16(fp)
  8324e0:	e1bffd15 	stw	r6,-12(fp)
  8324e4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8324e8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8324ec:	008020f4 	movhi	r2,131
  8324f0:	109e4d04 	addi	r2,r2,31028
  8324f4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8324f8:	1005003a 	cmpeq	r2,r2,zero
  8324fc:	1000411e 	bne	r2,zero,832604 <alt_alarm_start+0x138>
  {
    if (alarm)
  832500:	e0bffb17 	ldw	r2,-20(fp)
  832504:	1005003a 	cmpeq	r2,r2,zero
  832508:	10003b1e 	bne	r2,zero,8325f8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  83250c:	e0fffb17 	ldw	r3,-20(fp)
  832510:	e0bffd17 	ldw	r2,-12(fp)
  832514:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  832518:	e0fffb17 	ldw	r3,-20(fp)
  83251c:	e0bffe17 	ldw	r2,-8(fp)
  832520:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  832524:	0005303a 	rdctl	r2,status
  832528:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  83252c:	e0fff817 	ldw	r3,-32(fp)
  832530:	00bfff84 	movi	r2,-2
  832534:	1884703a 	and	r2,r3,r2
  832538:	1001703a 	wrctl	status,r2
  
  return context;
  83253c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  832540:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  832544:	008020f4 	movhi	r2,131
  832548:	109e4e04 	addi	r2,r2,31032
  83254c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  832550:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  832554:	e0fffc17 	ldw	r3,-16(fp)
  832558:	e0bff917 	ldw	r2,-28(fp)
  83255c:	1885883a 	add	r2,r3,r2
  832560:	10c00044 	addi	r3,r2,1
  832564:	e0bffb17 	ldw	r2,-20(fp)
  832568:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  83256c:	e0bffb17 	ldw	r2,-20(fp)
  832570:	10c00217 	ldw	r3,8(r2)
  832574:	e0bff917 	ldw	r2,-28(fp)
  832578:	1880042e 	bgeu	r3,r2,83258c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  83257c:	e0fffb17 	ldw	r3,-20(fp)
  832580:	00800044 	movi	r2,1
  832584:	18800405 	stb	r2,16(r3)
  832588:	00000206 	br	832594 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  83258c:	e0bffb17 	ldw	r2,-20(fp)
  832590:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  832594:	e0fffb17 	ldw	r3,-20(fp)
  832598:	008020f4 	movhi	r2,131
  83259c:	10968704 	addi	r2,r2,23068
  8325a0:	e0bff615 	stw	r2,-40(fp)
  8325a4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8325a8:	e0fff717 	ldw	r3,-36(fp)
  8325ac:	e0bff617 	ldw	r2,-40(fp)
  8325b0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8325b4:	e0bff617 	ldw	r2,-40(fp)
  8325b8:	10c00017 	ldw	r3,0(r2)
  8325bc:	e0bff717 	ldw	r2,-36(fp)
  8325c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8325c4:	e0bff617 	ldw	r2,-40(fp)
  8325c8:	10c00017 	ldw	r3,0(r2)
  8325cc:	e0bff717 	ldw	r2,-36(fp)
  8325d0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8325d4:	e0fff617 	ldw	r3,-40(fp)
  8325d8:	e0bff717 	ldw	r2,-36(fp)
  8325dc:	18800015 	stw	r2,0(r3)
  8325e0:	e0bffa17 	ldw	r2,-24(fp)
  8325e4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8325e8:	e0bff517 	ldw	r2,-44(fp)
  8325ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8325f0:	e03fff15 	stw	zero,-4(fp)
  8325f4:	00000506 	br	83260c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8325f8:	00bffa84 	movi	r2,-22
  8325fc:	e0bfff15 	stw	r2,-4(fp)
  832600:	00000206 	br	83260c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  832604:	00bfde84 	movi	r2,-134
  832608:	e0bfff15 	stw	r2,-4(fp)
  83260c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  832610:	e037883a 	mov	sp,fp
  832614:	df000017 	ldw	fp,0(sp)
  832618:	dec00104 	addi	sp,sp,4
  83261c:	f800283a 	ret

00832620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  832620:	defff904 	addi	sp,sp,-28
  832624:	dfc00615 	stw	ra,24(sp)
  832628:	df000515 	stw	fp,20(sp)
  83262c:	df000504 	addi	fp,sp,20
  832630:	e13ffd15 	stw	r4,-12(fp)
  832634:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  832638:	e0bffd17 	ldw	r2,-12(fp)
  83263c:	1005003a 	cmpeq	r2,r2,zero
  832640:	1000041e 	bne	r2,zero,832654 <alt_dev_llist_insert+0x34>
  832644:	e0bffd17 	ldw	r2,-12(fp)
  832648:	10800217 	ldw	r2,8(r2)
  83264c:	1004c03a 	cmpne	r2,r2,zero
  832650:	1000071e 	bne	r2,zero,832670 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  832654:	08326d40 	call	8326d4 <alt_get_errno>
  832658:	1007883a 	mov	r3,r2
  83265c:	00800584 	movi	r2,22
  832660:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  832664:	00bffa84 	movi	r2,-22
  832668:	e0bfff15 	stw	r2,-4(fp)
  83266c:	00001306 	br	8326bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  832670:	e0fffd17 	ldw	r3,-12(fp)
  832674:	e0bffe17 	ldw	r2,-8(fp)
  832678:	e0bffb15 	stw	r2,-20(fp)
  83267c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  832680:	e0fffc17 	ldw	r3,-16(fp)
  832684:	e0bffb17 	ldw	r2,-20(fp)
  832688:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  83268c:	e0bffb17 	ldw	r2,-20(fp)
  832690:	10c00017 	ldw	r3,0(r2)
  832694:	e0bffc17 	ldw	r2,-16(fp)
  832698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  83269c:	e0bffb17 	ldw	r2,-20(fp)
  8326a0:	10c00017 	ldw	r3,0(r2)
  8326a4:	e0bffc17 	ldw	r2,-16(fp)
  8326a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8326ac:	e0fffb17 	ldw	r3,-20(fp)
  8326b0:	e0bffc17 	ldw	r2,-16(fp)
  8326b4:	18800015 	stw	r2,0(r3)

  return 0;  
  8326b8:	e03fff15 	stw	zero,-4(fp)
  8326bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8326c0:	e037883a 	mov	sp,fp
  8326c4:	dfc00117 	ldw	ra,4(sp)
  8326c8:	df000017 	ldw	fp,0(sp)
  8326cc:	dec00204 	addi	sp,sp,8
  8326d0:	f800283a 	ret

008326d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8326d4:	defffd04 	addi	sp,sp,-12
  8326d8:	dfc00215 	stw	ra,8(sp)
  8326dc:	df000115 	stw	fp,4(sp)
  8326e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8326e4:	008020f4 	movhi	r2,131
  8326e8:	10968004 	addi	r2,r2,23040
  8326ec:	10800017 	ldw	r2,0(r2)
  8326f0:	1005003a 	cmpeq	r2,r2,zero
  8326f4:	1000061e 	bne	r2,zero,832710 <alt_get_errno+0x3c>
  8326f8:	008020f4 	movhi	r2,131
  8326fc:	10968004 	addi	r2,r2,23040
  832700:	10800017 	ldw	r2,0(r2)
  832704:	103ee83a 	callr	r2
  832708:	e0bfff15 	stw	r2,-4(fp)
  83270c:	00000306 	br	83271c <alt_get_errno+0x48>
  832710:	008020f4 	movhi	r2,131
  832714:	109e3504 	addi	r2,r2,30932
  832718:	e0bfff15 	stw	r2,-4(fp)
  83271c:	e0bfff17 	ldw	r2,-4(fp)
}
  832720:	e037883a 	mov	sp,fp
  832724:	dfc00117 	ldw	ra,4(sp)
  832728:	df000017 	ldw	fp,0(sp)
  83272c:	dec00204 	addi	sp,sp,8
  832730:	f800283a 	ret

00832734 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  832734:	defffd04 	addi	sp,sp,-12
  832738:	dfc00215 	stw	ra,8(sp)
  83273c:	df000115 	stw	fp,4(sp)
  832740:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  832744:	00bfff04 	movi	r2,-4
  832748:	00c020f4 	movhi	r3,131
  83274c:	18cd7904 	addi	r3,r3,13796
  832750:	1885883a 	add	r2,r3,r2
  832754:	e0bfff15 	stw	r2,-4(fp)
  832758:	00000606 	br	832774 <_do_ctors+0x40>
        (*ctor) (); 
  83275c:	e0bfff17 	ldw	r2,-4(fp)
  832760:	10800017 	ldw	r2,0(r2)
  832764:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  832768:	e0bfff17 	ldw	r2,-4(fp)
  83276c:	10bfff04 	addi	r2,r2,-4
  832770:	e0bfff15 	stw	r2,-4(fp)
  832774:	e0ffff17 	ldw	r3,-4(fp)
  832778:	008020f4 	movhi	r2,131
  83277c:	108d7804 	addi	r2,r2,13792
  832780:	18bff62e 	bgeu	r3,r2,83275c <_do_ctors+0x28>
        (*ctor) (); 
}
  832784:	e037883a 	mov	sp,fp
  832788:	dfc00117 	ldw	ra,4(sp)
  83278c:	df000017 	ldw	fp,0(sp)
  832790:	dec00204 	addi	sp,sp,8
  832794:	f800283a 	ret

00832798 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  832798:	defffd04 	addi	sp,sp,-12
  83279c:	dfc00215 	stw	ra,8(sp)
  8327a0:	df000115 	stw	fp,4(sp)
  8327a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8327a8:	00bfff04 	movi	r2,-4
  8327ac:	00c020f4 	movhi	r3,131
  8327b0:	18cd7904 	addi	r3,r3,13796
  8327b4:	1885883a 	add	r2,r3,r2
  8327b8:	e0bfff15 	stw	r2,-4(fp)
  8327bc:	00000606 	br	8327d8 <_do_dtors+0x40>
        (*dtor) (); 
  8327c0:	e0bfff17 	ldw	r2,-4(fp)
  8327c4:	10800017 	ldw	r2,0(r2)
  8327c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8327cc:	e0bfff17 	ldw	r2,-4(fp)
  8327d0:	10bfff04 	addi	r2,r2,-4
  8327d4:	e0bfff15 	stw	r2,-4(fp)
  8327d8:	e0ffff17 	ldw	r3,-4(fp)
  8327dc:	008020f4 	movhi	r2,131
  8327e0:	108d7904 	addi	r2,r2,13796
  8327e4:	18bff62e 	bgeu	r3,r2,8327c0 <_do_dtors+0x28>
        (*dtor) (); 
}
  8327e8:	e037883a 	mov	sp,fp
  8327ec:	dfc00117 	ldw	ra,4(sp)
  8327f0:	df000017 	ldw	fp,0(sp)
  8327f4:	dec00204 	addi	sp,sp,8
  8327f8:	f800283a 	ret

008327fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8327fc:	defff904 	addi	sp,sp,-28
  832800:	dfc00615 	stw	ra,24(sp)
  832804:	df000515 	stw	fp,20(sp)
  832808:	df000504 	addi	fp,sp,20
  83280c:	e13ffd15 	stw	r4,-12(fp)
  832810:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  832814:	e0bffe17 	ldw	r2,-8(fp)
  832818:	10800017 	ldw	r2,0(r2)
  83281c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  832820:	e13ffd17 	ldw	r4,-12(fp)
  832824:	0823e780 	call	823e78 <strlen>
  832828:	10800044 	addi	r2,r2,1
  83282c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  832830:	00000d06 	br	832868 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  832834:	e0bffc17 	ldw	r2,-16(fp)
  832838:	11000217 	ldw	r4,8(r2)
  83283c:	e1bffb17 	ldw	r6,-20(fp)
  832840:	e17ffd17 	ldw	r5,-12(fp)
  832844:	08333cc0 	call	8333cc <memcmp>
  832848:	1004c03a 	cmpne	r2,r2,zero
  83284c:	1000031e 	bne	r2,zero,83285c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  832850:	e0bffc17 	ldw	r2,-16(fp)
  832854:	e0bfff15 	stw	r2,-4(fp)
  832858:	00000706 	br	832878 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  83285c:	e0bffc17 	ldw	r2,-16(fp)
  832860:	10800017 	ldw	r2,0(r2)
  832864:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  832868:	e0fffe17 	ldw	r3,-8(fp)
  83286c:	e0bffc17 	ldw	r2,-16(fp)
  832870:	10fff01e 	bne	r2,r3,832834 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  832874:	e03fff15 	stw	zero,-4(fp)
  832878:	e0bfff17 	ldw	r2,-4(fp)
}
  83287c:	e037883a 	mov	sp,fp
  832880:	dfc00117 	ldw	ra,4(sp)
  832884:	df000017 	ldw	fp,0(sp)
  832888:	dec00204 	addi	sp,sp,8
  83288c:	f800283a 	ret

00832890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  832890:	defffe04 	addi	sp,sp,-8
  832894:	dfc00115 	stw	ra,4(sp)
  832898:	df000015 	stw	fp,0(sp)
  83289c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8328a0:	0009883a 	mov	r4,zero
  8328a4:	01440004 	movi	r5,4096
  8328a8:	08333280 	call	833328 <alt_icache_flush>
#endif
}
  8328ac:	e037883a 	mov	sp,fp
  8328b0:	dfc00117 	ldw	ra,4(sp)
  8328b4:	df000017 	ldw	fp,0(sp)
  8328b8:	dec00204 	addi	sp,sp,8
  8328bc:	f800283a 	ret

008328c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8328c0:	defff904 	addi	sp,sp,-28
  8328c4:	dfc00615 	stw	ra,24(sp)
  8328c8:	df000515 	stw	fp,20(sp)
  8328cc:	df000504 	addi	fp,sp,20
  8328d0:	e13ffc15 	stw	r4,-16(fp)
  8328d4:	e17ffd15 	stw	r5,-12(fp)
  8328d8:	e1bffe15 	stw	r6,-8(fp)
  8328dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8328e0:	e0800217 	ldw	r2,8(fp)
  8328e4:	d8800015 	stw	r2,0(sp)
  8328e8:	e13ffc17 	ldw	r4,-16(fp)
  8328ec:	e17ffd17 	ldw	r5,-12(fp)
  8328f0:	e1bffe17 	ldw	r6,-8(fp)
  8328f4:	e1ffff17 	ldw	r7,-4(fp)
  8328f8:	0832a940 	call	832a94 <alt_iic_isr_register>
}  
  8328fc:	e037883a 	mov	sp,fp
  832900:	dfc00117 	ldw	ra,4(sp)
  832904:	df000017 	ldw	fp,0(sp)
  832908:	dec00204 	addi	sp,sp,8
  83290c:	f800283a 	ret

00832910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  832910:	defff904 	addi	sp,sp,-28
  832914:	df000615 	stw	fp,24(sp)
  832918:	df000604 	addi	fp,sp,24
  83291c:	e13ffe15 	stw	r4,-8(fp)
  832920:	e17fff15 	stw	r5,-4(fp)
  832924:	e0bfff17 	ldw	r2,-4(fp)
  832928:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  83292c:	0005303a 	rdctl	r2,status
  832930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  832934:	e0fffb17 	ldw	r3,-20(fp)
  832938:	00bfff84 	movi	r2,-2
  83293c:	1884703a 	and	r2,r3,r2
  832940:	1001703a 	wrctl	status,r2
  
  return context;
  832944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  832948:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  83294c:	e0fffc17 	ldw	r3,-16(fp)
  832950:	00800044 	movi	r2,1
  832954:	10c4983a 	sll	r2,r2,r3
  832958:	1007883a 	mov	r3,r2
  83295c:	008020f4 	movhi	r2,131
  832960:	109e3c04 	addi	r2,r2,30960
  832964:	10800017 	ldw	r2,0(r2)
  832968:	1886b03a 	or	r3,r3,r2
  83296c:	008020f4 	movhi	r2,131
  832970:	109e3c04 	addi	r2,r2,30960
  832974:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  832978:	008020f4 	movhi	r2,131
  83297c:	109e3c04 	addi	r2,r2,30960
  832980:	10800017 	ldw	r2,0(r2)
  832984:	100170fa 	wrctl	ienable,r2
  832988:	e0bffd17 	ldw	r2,-12(fp)
  83298c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  832990:	e0bffa17 	ldw	r2,-24(fp)
  832994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  832998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  83299c:	e037883a 	mov	sp,fp
  8329a0:	df000017 	ldw	fp,0(sp)
  8329a4:	dec00104 	addi	sp,sp,4
  8329a8:	f800283a 	ret

008329ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8329ac:	defff904 	addi	sp,sp,-28
  8329b0:	df000615 	stw	fp,24(sp)
  8329b4:	df000604 	addi	fp,sp,24
  8329b8:	e13ffe15 	stw	r4,-8(fp)
  8329bc:	e17fff15 	stw	r5,-4(fp)
  8329c0:	e0bfff17 	ldw	r2,-4(fp)
  8329c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8329c8:	0005303a 	rdctl	r2,status
  8329cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8329d0:	e0fffb17 	ldw	r3,-20(fp)
  8329d4:	00bfff84 	movi	r2,-2
  8329d8:	1884703a 	and	r2,r3,r2
  8329dc:	1001703a 	wrctl	status,r2
  
  return context;
  8329e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8329e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8329e8:	e0fffc17 	ldw	r3,-16(fp)
  8329ec:	00800044 	movi	r2,1
  8329f0:	10c4983a 	sll	r2,r2,r3
  8329f4:	0084303a 	nor	r2,zero,r2
  8329f8:	1007883a 	mov	r3,r2
  8329fc:	008020f4 	movhi	r2,131
  832a00:	109e3c04 	addi	r2,r2,30960
  832a04:	10800017 	ldw	r2,0(r2)
  832a08:	1886703a 	and	r3,r3,r2
  832a0c:	008020f4 	movhi	r2,131
  832a10:	109e3c04 	addi	r2,r2,30960
  832a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  832a18:	008020f4 	movhi	r2,131
  832a1c:	109e3c04 	addi	r2,r2,30960
  832a20:	10800017 	ldw	r2,0(r2)
  832a24:	100170fa 	wrctl	ienable,r2
  832a28:	e0bffd17 	ldw	r2,-12(fp)
  832a2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  832a30:	e0bffa17 	ldw	r2,-24(fp)
  832a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  832a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  832a3c:	e037883a 	mov	sp,fp
  832a40:	df000017 	ldw	fp,0(sp)
  832a44:	dec00104 	addi	sp,sp,4
  832a48:	f800283a 	ret

00832a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  832a4c:	defffc04 	addi	sp,sp,-16
  832a50:	df000315 	stw	fp,12(sp)
  832a54:	df000304 	addi	fp,sp,12
  832a58:	e13ffe15 	stw	r4,-8(fp)
  832a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  832a60:	000530fa 	rdctl	r2,ienable
  832a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  832a68:	e0ffff17 	ldw	r3,-4(fp)
  832a6c:	00800044 	movi	r2,1
  832a70:	10c4983a 	sll	r2,r2,r3
  832a74:	1007883a 	mov	r3,r2
  832a78:	e0bffd17 	ldw	r2,-12(fp)
  832a7c:	1884703a 	and	r2,r3,r2
  832a80:	1004c03a 	cmpne	r2,r2,zero
}
  832a84:	e037883a 	mov	sp,fp
  832a88:	df000017 	ldw	fp,0(sp)
  832a8c:	dec00104 	addi	sp,sp,4
  832a90:	f800283a 	ret

00832a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  832a94:	defff404 	addi	sp,sp,-48
  832a98:	dfc00b15 	stw	ra,44(sp)
  832a9c:	df000a15 	stw	fp,40(sp)
  832aa0:	df000a04 	addi	fp,sp,40
  832aa4:	e13ffb15 	stw	r4,-20(fp)
  832aa8:	e17ffc15 	stw	r5,-16(fp)
  832aac:	e1bffd15 	stw	r6,-12(fp)
  832ab0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  832ab4:	00bffa84 	movi	r2,-22
  832ab8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  832abc:	e0bffc17 	ldw	r2,-16(fp)
  832ac0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  832ac4:	e0bff917 	ldw	r2,-28(fp)
  832ac8:	10800808 	cmpgei	r2,r2,32
  832acc:	1000291e 	bne	r2,zero,832b74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  832ad0:	0005303a 	rdctl	r2,status
  832ad4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  832ad8:	e0fff717 	ldw	r3,-36(fp)
  832adc:	00bfff84 	movi	r2,-2
  832ae0:	1884703a 	and	r2,r3,r2
  832ae4:	1001703a 	wrctl	status,r2
  
  return context;
  832ae8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  832aec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  832af0:	e0bff917 	ldw	r2,-28(fp)
  832af4:	00c020f4 	movhi	r3,131
  832af8:	18dfb304 	addi	r3,r3,32460
  832afc:	100490fa 	slli	r2,r2,3
  832b00:	10c7883a 	add	r3,r2,r3
  832b04:	e0bffd17 	ldw	r2,-12(fp)
  832b08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  832b0c:	e0bff917 	ldw	r2,-28(fp)
  832b10:	00c020f4 	movhi	r3,131
  832b14:	18dfb304 	addi	r3,r3,32460
  832b18:	100490fa 	slli	r2,r2,3
  832b1c:	10c5883a 	add	r2,r2,r3
  832b20:	10c00104 	addi	r3,r2,4
  832b24:	e0bffe17 	ldw	r2,-8(fp)
  832b28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  832b2c:	e0bffd17 	ldw	r2,-12(fp)
  832b30:	1005003a 	cmpeq	r2,r2,zero
  832b34:	1000051e 	bne	r2,zero,832b4c <alt_iic_isr_register+0xb8>
  832b38:	e17ff917 	ldw	r5,-28(fp)
  832b3c:	e13ffb17 	ldw	r4,-20(fp)
  832b40:	08329100 	call	832910 <alt_ic_irq_enable>
  832b44:	e0bfff15 	stw	r2,-4(fp)
  832b48:	00000406 	br	832b5c <alt_iic_isr_register+0xc8>
  832b4c:	e17ff917 	ldw	r5,-28(fp)
  832b50:	e13ffb17 	ldw	r4,-20(fp)
  832b54:	08329ac0 	call	8329ac <alt_ic_irq_disable>
  832b58:	e0bfff15 	stw	r2,-4(fp)
  832b5c:	e0bfff17 	ldw	r2,-4(fp)
  832b60:	e0bffa15 	stw	r2,-24(fp)
  832b64:	e0bff817 	ldw	r2,-32(fp)
  832b68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  832b6c:	e0bff617 	ldw	r2,-40(fp)
  832b70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  832b74:	e0bffa17 	ldw	r2,-24(fp)
}
  832b78:	e037883a 	mov	sp,fp
  832b7c:	dfc00117 	ldw	ra,4(sp)
  832b80:	df000017 	ldw	fp,0(sp)
  832b84:	dec00204 	addi	sp,sp,8
  832b88:	f800283a 	ret

00832b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  832b8c:	defff904 	addi	sp,sp,-28
  832b90:	dfc00615 	stw	ra,24(sp)
  832b94:	df000515 	stw	fp,20(sp)
  832b98:	df000504 	addi	fp,sp,20
  832b9c:	e13ffc15 	stw	r4,-16(fp)
  832ba0:	e17ffd15 	stw	r5,-12(fp)
  832ba4:	e1bffe15 	stw	r6,-8(fp)
  832ba8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  832bac:	e13ffd17 	ldw	r4,-12(fp)
  832bb0:	e17ffe17 	ldw	r5,-8(fp)
  832bb4:	e1bfff17 	ldw	r6,-4(fp)
  832bb8:	0832da40 	call	832da4 <open>
  832bbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  832bc0:	e0bffb17 	ldw	r2,-20(fp)
  832bc4:	1004803a 	cmplt	r2,r2,zero
  832bc8:	10001c1e 	bne	r2,zero,832c3c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  832bcc:	e0bffb17 	ldw	r2,-20(fp)
  832bd0:	00c020f4 	movhi	r3,131
  832bd4:	18d1d404 	addi	r3,r3,18256
  832bd8:	10800324 	muli	r2,r2,12
  832bdc:	10c5883a 	add	r2,r2,r3
  832be0:	10c00017 	ldw	r3,0(r2)
  832be4:	e0bffc17 	ldw	r2,-16(fp)
  832be8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  832bec:	e0bffb17 	ldw	r2,-20(fp)
  832bf0:	00c020f4 	movhi	r3,131
  832bf4:	18d1d404 	addi	r3,r3,18256
  832bf8:	10800324 	muli	r2,r2,12
  832bfc:	10c5883a 	add	r2,r2,r3
  832c00:	10800104 	addi	r2,r2,4
  832c04:	10c00017 	ldw	r3,0(r2)
  832c08:	e0bffc17 	ldw	r2,-16(fp)
  832c0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  832c10:	e0bffb17 	ldw	r2,-20(fp)
  832c14:	00c020f4 	movhi	r3,131
  832c18:	18d1d404 	addi	r3,r3,18256
  832c1c:	10800324 	muli	r2,r2,12
  832c20:	10c5883a 	add	r2,r2,r3
  832c24:	10800204 	addi	r2,r2,8
  832c28:	10c00017 	ldw	r3,0(r2)
  832c2c:	e0bffc17 	ldw	r2,-16(fp)
  832c30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  832c34:	e13ffb17 	ldw	r4,-20(fp)
  832c38:	082c9400 	call	82c940 <alt_release_fd>
  }
} 
  832c3c:	e037883a 	mov	sp,fp
  832c40:	dfc00117 	ldw	ra,4(sp)
  832c44:	df000017 	ldw	fp,0(sp)
  832c48:	dec00204 	addi	sp,sp,8
  832c4c:	f800283a 	ret

00832c50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  832c50:	defffb04 	addi	sp,sp,-20
  832c54:	dfc00415 	stw	ra,16(sp)
  832c58:	df000315 	stw	fp,12(sp)
  832c5c:	df000304 	addi	fp,sp,12
  832c60:	e13ffd15 	stw	r4,-12(fp)
  832c64:	e17ffe15 	stw	r5,-8(fp)
  832c68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  832c6c:	010020f4 	movhi	r4,131
  832c70:	2111d704 	addi	r4,r4,18268
  832c74:	e17ffd17 	ldw	r5,-12(fp)
  832c78:	01800044 	movi	r6,1
  832c7c:	01c07fc4 	movi	r7,511
  832c80:	0832b8c0 	call	832b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  832c84:	010020f4 	movhi	r4,131
  832c88:	2111d404 	addi	r4,r4,18256
  832c8c:	e17ffe17 	ldw	r5,-8(fp)
  832c90:	000d883a 	mov	r6,zero
  832c94:	01c07fc4 	movi	r7,511
  832c98:	0832b8c0 	call	832b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  832c9c:	010020f4 	movhi	r4,131
  832ca0:	2111da04 	addi	r4,r4,18280
  832ca4:	e17fff17 	ldw	r5,-4(fp)
  832ca8:	01800044 	movi	r6,1
  832cac:	01c07fc4 	movi	r7,511
  832cb0:	0832b8c0 	call	832b8c <alt_open_fd>
}  
  832cb4:	e037883a 	mov	sp,fp
  832cb8:	dfc00117 	ldw	ra,4(sp)
  832cbc:	df000017 	ldw	fp,0(sp)
  832cc0:	dec00204 	addi	sp,sp,8
  832cc4:	f800283a 	ret

00832cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  832cc8:	defffc04 	addi	sp,sp,-16
  832ccc:	df000315 	stw	fp,12(sp)
  832cd0:	df000304 	addi	fp,sp,12
  832cd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  832cd8:	e0bffe17 	ldw	r2,-8(fp)
  832cdc:	10800217 	ldw	r2,8(r2)
  832ce0:	10d00034 	orhi	r3,r2,16384
  832ce4:	e0bffe17 	ldw	r2,-8(fp)
  832ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  832cec:	e03ffd15 	stw	zero,-12(fp)
  832cf0:	00002006 	br	832d74 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  832cf4:	e0bffd17 	ldw	r2,-12(fp)
  832cf8:	00c020f4 	movhi	r3,131
  832cfc:	18d1d404 	addi	r3,r3,18256
  832d00:	10800324 	muli	r2,r2,12
  832d04:	10c5883a 	add	r2,r2,r3
  832d08:	10c00017 	ldw	r3,0(r2)
  832d0c:	e0bffe17 	ldw	r2,-8(fp)
  832d10:	10800017 	ldw	r2,0(r2)
  832d14:	1880141e 	bne	r3,r2,832d68 <alt_file_locked+0xa0>
  832d18:	e0bffd17 	ldw	r2,-12(fp)
  832d1c:	00c020f4 	movhi	r3,131
  832d20:	18d1d404 	addi	r3,r3,18256
  832d24:	10800324 	muli	r2,r2,12
  832d28:	10c5883a 	add	r2,r2,r3
  832d2c:	10800204 	addi	r2,r2,8
  832d30:	10800017 	ldw	r2,0(r2)
  832d34:	1004403a 	cmpge	r2,r2,zero
  832d38:	10000b1e 	bne	r2,zero,832d68 <alt_file_locked+0xa0>
  832d3c:	e0bffd17 	ldw	r2,-12(fp)
  832d40:	10800324 	muli	r2,r2,12
  832d44:	1007883a 	mov	r3,r2
  832d48:	008020f4 	movhi	r2,131
  832d4c:	1091d404 	addi	r2,r2,18256
  832d50:	1887883a 	add	r3,r3,r2
  832d54:	e0bffe17 	ldw	r2,-8(fp)
  832d58:	18800326 	beq	r3,r2,832d68 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  832d5c:	00bffcc4 	movi	r2,-13
  832d60:	e0bfff15 	stw	r2,-4(fp)
  832d64:	00000a06 	br	832d90 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  832d68:	e0bffd17 	ldw	r2,-12(fp)
  832d6c:	10800044 	addi	r2,r2,1
  832d70:	e0bffd15 	stw	r2,-12(fp)
  832d74:	008020f4 	movhi	r2,131
  832d78:	10967f04 	addi	r2,r2,23036
  832d7c:	10800017 	ldw	r2,0(r2)
  832d80:	1007883a 	mov	r3,r2
  832d84:	e0bffd17 	ldw	r2,-12(fp)
  832d88:	18bfda2e 	bgeu	r3,r2,832cf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  832d8c:	e03fff15 	stw	zero,-4(fp)
  832d90:	e0bfff17 	ldw	r2,-4(fp)
}
  832d94:	e037883a 	mov	sp,fp
  832d98:	df000017 	ldw	fp,0(sp)
  832d9c:	dec00104 	addi	sp,sp,4
  832da0:	f800283a 	ret

00832da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  832da4:	defff404 	addi	sp,sp,-48
  832da8:	dfc00b15 	stw	ra,44(sp)
  832dac:	df000a15 	stw	fp,40(sp)
  832db0:	df000a04 	addi	fp,sp,40
  832db4:	e13ffb15 	stw	r4,-20(fp)
  832db8:	e17ffc15 	stw	r5,-16(fp)
  832dbc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  832dc0:	00bfffc4 	movi	r2,-1
  832dc4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  832dc8:	00bffb44 	movi	r2,-19
  832dcc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  832dd0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  832dd4:	e13ffb17 	ldw	r4,-20(fp)
  832dd8:	014020f4 	movhi	r5,131
  832ddc:	29567d04 	addi	r5,r5,23028
  832de0:	08327fc0 	call	8327fc <alt_find_dev>
  832de4:	e0bffa15 	stw	r2,-24(fp)
  832de8:	e0bffa17 	ldw	r2,-24(fp)
  832dec:	1004c03a 	cmpne	r2,r2,zero
  832df0:	1000051e 	bne	r2,zero,832e08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  832df4:	e13ffb17 	ldw	r4,-20(fp)
  832df8:	08331500 	call	833150 <alt_find_file>
  832dfc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  832e00:	00800044 	movi	r2,1
  832e04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  832e08:	e0bffa17 	ldw	r2,-24(fp)
  832e0c:	1005003a 	cmpeq	r2,r2,zero
  832e10:	1000301e 	bne	r2,zero,832ed4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  832e14:	e13ffa17 	ldw	r4,-24(fp)
  832e18:	08332700 	call	833270 <alt_get_fd>
  832e1c:	e0bff815 	stw	r2,-32(fp)
  832e20:	e0bff817 	ldw	r2,-32(fp)
  832e24:	1004403a 	cmpge	r2,r2,zero
  832e28:	1000031e 	bne	r2,zero,832e38 <open+0x94>
    {
      status = index;
  832e2c:	e0bff817 	ldw	r2,-32(fp)
  832e30:	e0bff715 	stw	r2,-36(fp)
  832e34:	00002906 	br	832edc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  832e38:	e0bff817 	ldw	r2,-32(fp)
  832e3c:	10800324 	muli	r2,r2,12
  832e40:	1007883a 	mov	r3,r2
  832e44:	008020f4 	movhi	r2,131
  832e48:	1091d404 	addi	r2,r2,18256
  832e4c:	1885883a 	add	r2,r3,r2
  832e50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  832e54:	e0fffc17 	ldw	r3,-16(fp)
  832e58:	00900034 	movhi	r2,16384
  832e5c:	10bfffc4 	addi	r2,r2,-1
  832e60:	1886703a 	and	r3,r3,r2
  832e64:	e0bff917 	ldw	r2,-28(fp)
  832e68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  832e6c:	e0bff617 	ldw	r2,-40(fp)
  832e70:	1004c03a 	cmpne	r2,r2,zero
  832e74:	1000061e 	bne	r2,zero,832e90 <open+0xec>
  832e78:	e13ff917 	ldw	r4,-28(fp)
  832e7c:	0832cc80 	call	832cc8 <alt_file_locked>
  832e80:	e0bff715 	stw	r2,-36(fp)
  832e84:	e0bff717 	ldw	r2,-36(fp)
  832e88:	1004803a 	cmplt	r2,r2,zero
  832e8c:	1000131e 	bne	r2,zero,832edc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  832e90:	e0bffa17 	ldw	r2,-24(fp)
  832e94:	10800317 	ldw	r2,12(r2)
  832e98:	1005003a 	cmpeq	r2,r2,zero
  832e9c:	1000091e 	bne	r2,zero,832ec4 <open+0x120>
  832ea0:	e0bffa17 	ldw	r2,-24(fp)
  832ea4:	10800317 	ldw	r2,12(r2)
  832ea8:	e13ff917 	ldw	r4,-28(fp)
  832eac:	e17ffb17 	ldw	r5,-20(fp)
  832eb0:	e1bffc17 	ldw	r6,-16(fp)
  832eb4:	e1fffd17 	ldw	r7,-12(fp)
  832eb8:	103ee83a 	callr	r2
  832ebc:	e0bfff15 	stw	r2,-4(fp)
  832ec0:	00000106 	br	832ec8 <open+0x124>
  832ec4:	e03fff15 	stw	zero,-4(fp)
  832ec8:	e0bfff17 	ldw	r2,-4(fp)
  832ecc:	e0bff715 	stw	r2,-36(fp)
  832ed0:	00000206 	br	832edc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  832ed4:	00bffb44 	movi	r2,-19
  832ed8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  832edc:	e0bff717 	ldw	r2,-36(fp)
  832ee0:	1004403a 	cmpge	r2,r2,zero
  832ee4:	1000091e 	bne	r2,zero,832f0c <open+0x168>
  {
    alt_release_fd (index);  
  832ee8:	e13ff817 	ldw	r4,-32(fp)
  832eec:	082c9400 	call	82c940 <alt_release_fd>
    ALT_ERRNO = -status;
  832ef0:	0832f2c0 	call	832f2c <alt_get_errno>
  832ef4:	e0fff717 	ldw	r3,-36(fp)
  832ef8:	00c7c83a 	sub	r3,zero,r3
  832efc:	10c00015 	stw	r3,0(r2)
    return -1;
  832f00:	00bfffc4 	movi	r2,-1
  832f04:	e0bffe15 	stw	r2,-8(fp)
  832f08:	00000206 	br	832f14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  832f0c:	e0bff817 	ldw	r2,-32(fp)
  832f10:	e0bffe15 	stw	r2,-8(fp)
  832f14:	e0bffe17 	ldw	r2,-8(fp)
}
  832f18:	e037883a 	mov	sp,fp
  832f1c:	dfc00117 	ldw	ra,4(sp)
  832f20:	df000017 	ldw	fp,0(sp)
  832f24:	dec00204 	addi	sp,sp,8
  832f28:	f800283a 	ret

00832f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  832f2c:	defffd04 	addi	sp,sp,-12
  832f30:	dfc00215 	stw	ra,8(sp)
  832f34:	df000115 	stw	fp,4(sp)
  832f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  832f3c:	008020f4 	movhi	r2,131
  832f40:	10968004 	addi	r2,r2,23040
  832f44:	10800017 	ldw	r2,0(r2)
  832f48:	1005003a 	cmpeq	r2,r2,zero
  832f4c:	1000061e 	bne	r2,zero,832f68 <alt_get_errno+0x3c>
  832f50:	008020f4 	movhi	r2,131
  832f54:	10968004 	addi	r2,r2,23040
  832f58:	10800017 	ldw	r2,0(r2)
  832f5c:	103ee83a 	callr	r2
  832f60:	e0bfff15 	stw	r2,-4(fp)
  832f64:	00000306 	br	832f74 <alt_get_errno+0x48>
  832f68:	008020f4 	movhi	r2,131
  832f6c:	109e3504 	addi	r2,r2,30932
  832f70:	e0bfff15 	stw	r2,-4(fp)
  832f74:	e0bfff17 	ldw	r2,-4(fp)
}
  832f78:	e037883a 	mov	sp,fp
  832f7c:	dfc00117 	ldw	ra,4(sp)
  832f80:	df000017 	ldw	fp,0(sp)
  832f84:	dec00204 	addi	sp,sp,8
  832f88:	f800283a 	ret

00832f8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  832f8c:	defffa04 	addi	sp,sp,-24
  832f90:	df000515 	stw	fp,20(sp)
  832f94:	df000504 	addi	fp,sp,20
  832f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  832f9c:	0005303a 	rdctl	r2,status
  832fa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  832fa4:	e0fffd17 	ldw	r3,-12(fp)
  832fa8:	00bfff84 	movi	r2,-2
  832fac:	1884703a 	and	r2,r3,r2
  832fb0:	1001703a 	wrctl	status,r2
  
  return context;
  832fb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  832fb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  832fbc:	e0bfff17 	ldw	r2,-4(fp)
  832fc0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  832fc4:	e0bffc17 	ldw	r2,-16(fp)
  832fc8:	10c00017 	ldw	r3,0(r2)
  832fcc:	e0bffc17 	ldw	r2,-16(fp)
  832fd0:	10800117 	ldw	r2,4(r2)
  832fd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  832fd8:	e0bffc17 	ldw	r2,-16(fp)
  832fdc:	10c00117 	ldw	r3,4(r2)
  832fe0:	e0bffc17 	ldw	r2,-16(fp)
  832fe4:	10800017 	ldw	r2,0(r2)
  832fe8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  832fec:	e0fffc17 	ldw	r3,-16(fp)
  832ff0:	e0bffc17 	ldw	r2,-16(fp)
  832ff4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  832ff8:	e0fffc17 	ldw	r3,-16(fp)
  832ffc:	e0bffc17 	ldw	r2,-16(fp)
  833000:	18800015 	stw	r2,0(r3)
  833004:	e0bffe17 	ldw	r2,-8(fp)
  833008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  83300c:	e0bffb17 	ldw	r2,-20(fp)
  833010:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  833014:	e037883a 	mov	sp,fp
  833018:	df000017 	ldw	fp,0(sp)
  83301c:	dec00104 	addi	sp,sp,4
  833020:	f800283a 	ret

00833024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  833024:	defffb04 	addi	sp,sp,-20
  833028:	dfc00415 	stw	ra,16(sp)
  83302c:	df000315 	stw	fp,12(sp)
  833030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  833034:	d0a01217 	ldw	r2,-32696(gp)
  833038:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  83303c:	d0a7d917 	ldw	r2,-24732(gp)
  833040:	10800044 	addi	r2,r2,1
  833044:	d0a7d915 	stw	r2,-24732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  833048:	00003106 	br	833110 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  83304c:	e0bffe17 	ldw	r2,-8(fp)
  833050:	10800017 	ldw	r2,0(r2)
  833054:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  833058:	e0bffe17 	ldw	r2,-8(fp)
  83305c:	10800403 	ldbu	r2,16(r2)
  833060:	10803fcc 	andi	r2,r2,255
  833064:	1005003a 	cmpeq	r2,r2,zero
  833068:	1000051e 	bne	r2,zero,833080 <alt_tick+0x5c>
  83306c:	d0a7d917 	ldw	r2,-24732(gp)
  833070:	1004c03a 	cmpne	r2,r2,zero
  833074:	1000021e 	bne	r2,zero,833080 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  833078:	e0bffe17 	ldw	r2,-8(fp)
  83307c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  833080:	e0bffe17 	ldw	r2,-8(fp)
  833084:	10c00217 	ldw	r3,8(r2)
  833088:	d0a7d917 	ldw	r2,-24732(gp)
  83308c:	10c01e36 	bltu	r2,r3,833108 <alt_tick+0xe4>
  833090:	e0bffe17 	ldw	r2,-8(fp)
  833094:	10800403 	ldbu	r2,16(r2)
  833098:	10803fcc 	andi	r2,r2,255
  83309c:	1004c03a 	cmpne	r2,r2,zero
  8330a0:	1000191e 	bne	r2,zero,833108 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8330a4:	e0bffe17 	ldw	r2,-8(fp)
  8330a8:	10c00317 	ldw	r3,12(r2)
  8330ac:	e0bffe17 	ldw	r2,-8(fp)
  8330b0:	11000517 	ldw	r4,20(r2)
  8330b4:	183ee83a 	callr	r3
  8330b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8330bc:	e0bffd17 	ldw	r2,-12(fp)
  8330c0:	1004c03a 	cmpne	r2,r2,zero
  8330c4:	1000031e 	bne	r2,zero,8330d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8330c8:	e13ffe17 	ldw	r4,-8(fp)
  8330cc:	0832f8c0 	call	832f8c <alt_alarm_stop>
  8330d0:	00000d06 	br	833108 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8330d4:	e0bffe17 	ldw	r2,-8(fp)
  8330d8:	10c00217 	ldw	r3,8(r2)
  8330dc:	e0bffd17 	ldw	r2,-12(fp)
  8330e0:	1887883a 	add	r3,r3,r2
  8330e4:	e0bffe17 	ldw	r2,-8(fp)
  8330e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8330ec:	e0bffe17 	ldw	r2,-8(fp)
  8330f0:	10c00217 	ldw	r3,8(r2)
  8330f4:	d0a7d917 	ldw	r2,-24732(gp)
  8330f8:	1880032e 	bgeu	r3,r2,833108 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8330fc:	e0fffe17 	ldw	r3,-8(fp)
  833100:	00800044 	movi	r2,1
  833104:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  833108:	e0bfff17 	ldw	r2,-4(fp)
  83310c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  833110:	d0e01204 	addi	r3,gp,-32696
  833114:	e0bffe17 	ldw	r2,-8(fp)
  833118:	10ffcc1e 	bne	r2,r3,83304c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  83311c:	e037883a 	mov	sp,fp
  833120:	dfc00117 	ldw	ra,4(sp)
  833124:	df000017 	ldw	fp,0(sp)
  833128:	dec00204 	addi	sp,sp,8
  83312c:	f800283a 	ret

00833130 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  833130:	deffff04 	addi	sp,sp,-4
  833134:	df000015 	stw	fp,0(sp)
  833138:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  83313c:	000170fa 	wrctl	ienable,zero
}
  833140:	e037883a 	mov	sp,fp
  833144:	df000017 	ldw	fp,0(sp)
  833148:	dec00104 	addi	sp,sp,4
  83314c:	f800283a 	ret

00833150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  833150:	defffa04 	addi	sp,sp,-24
  833154:	dfc00515 	stw	ra,20(sp)
  833158:	df000415 	stw	fp,16(sp)
  83315c:	df000404 	addi	fp,sp,16
  833160:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  833164:	008020f4 	movhi	r2,131
  833168:	10967b04 	addi	r2,r2,23020
  83316c:	10800017 	ldw	r2,0(r2)
  833170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  833174:	00003306 	br	833244 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  833178:	e0bffd17 	ldw	r2,-12(fp)
  83317c:	11000217 	ldw	r4,8(r2)
  833180:	0823e780 	call	823e78 <strlen>
  833184:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  833188:	e0bffd17 	ldw	r2,-12(fp)
  83318c:	10c00217 	ldw	r3,8(r2)
  833190:	e0bffc17 	ldw	r2,-16(fp)
  833194:	1885883a 	add	r2,r3,r2
  833198:	10bfffc4 	addi	r2,r2,-1
  83319c:	10800003 	ldbu	r2,0(r2)
  8331a0:	10803fcc 	andi	r2,r2,255
  8331a4:	1080201c 	xori	r2,r2,128
  8331a8:	10bfe004 	addi	r2,r2,-128
  8331ac:	10800bd8 	cmpnei	r2,r2,47
  8331b0:	1000031e 	bne	r2,zero,8331c0 <alt_find_file+0x70>
    {
      len -= 1;
  8331b4:	e0bffc17 	ldw	r2,-16(fp)
  8331b8:	10bfffc4 	addi	r2,r2,-1
  8331bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8331c0:	e0bffc17 	ldw	r2,-16(fp)
  8331c4:	1007883a 	mov	r3,r2
  8331c8:	e0bffe17 	ldw	r2,-8(fp)
  8331cc:	1885883a 	add	r2,r3,r2
  8331d0:	10800003 	ldbu	r2,0(r2)
  8331d4:	10803fcc 	andi	r2,r2,255
  8331d8:	1080201c 	xori	r2,r2,128
  8331dc:	10bfe004 	addi	r2,r2,-128
  8331e0:	10800be0 	cmpeqi	r2,r2,47
  8331e4:	10000a1e 	bne	r2,zero,833210 <alt_find_file+0xc0>
  8331e8:	e0bffc17 	ldw	r2,-16(fp)
  8331ec:	1007883a 	mov	r3,r2
  8331f0:	e0bffe17 	ldw	r2,-8(fp)
  8331f4:	1885883a 	add	r2,r3,r2
  8331f8:	10800003 	ldbu	r2,0(r2)
  8331fc:	10803fcc 	andi	r2,r2,255
  833200:	1080201c 	xori	r2,r2,128
  833204:	10bfe004 	addi	r2,r2,-128
  833208:	1004c03a 	cmpne	r2,r2,zero
  83320c:	10000a1e 	bne	r2,zero,833238 <alt_find_file+0xe8>
  833210:	e0bffd17 	ldw	r2,-12(fp)
  833214:	11000217 	ldw	r4,8(r2)
  833218:	e1bffc17 	ldw	r6,-16(fp)
  83321c:	e17ffe17 	ldw	r5,-8(fp)
  833220:	08333cc0 	call	8333cc <memcmp>
  833224:	1004c03a 	cmpne	r2,r2,zero
  833228:	1000031e 	bne	r2,zero,833238 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  83322c:	e0bffd17 	ldw	r2,-12(fp)
  833230:	e0bfff15 	stw	r2,-4(fp)
  833234:	00000806 	br	833258 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  833238:	e0bffd17 	ldw	r2,-12(fp)
  83323c:	10800017 	ldw	r2,0(r2)
  833240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  833244:	00c020f4 	movhi	r3,131
  833248:	18d67b04 	addi	r3,r3,23020
  83324c:	e0bffd17 	ldw	r2,-12(fp)
  833250:	10ffc91e 	bne	r2,r3,833178 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  833254:	e03fff15 	stw	zero,-4(fp)
  833258:	e0bfff17 	ldw	r2,-4(fp)
}
  83325c:	e037883a 	mov	sp,fp
  833260:	dfc00117 	ldw	ra,4(sp)
  833264:	df000017 	ldw	fp,0(sp)
  833268:	dec00204 	addi	sp,sp,8
  83326c:	f800283a 	ret

00833270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  833270:	defffc04 	addi	sp,sp,-16
  833274:	df000315 	stw	fp,12(sp)
  833278:	df000304 	addi	fp,sp,12
  83327c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  833280:	00bffa04 	movi	r2,-24
  833284:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  833288:	e03ffe15 	stw	zero,-8(fp)
  83328c:	00001e06 	br	833308 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  833290:	e0bffe17 	ldw	r2,-8(fp)
  833294:	00c020f4 	movhi	r3,131
  833298:	18d1d404 	addi	r3,r3,18256
  83329c:	10800324 	muli	r2,r2,12
  8332a0:	10c5883a 	add	r2,r2,r3
  8332a4:	10800017 	ldw	r2,0(r2)
  8332a8:	1004c03a 	cmpne	r2,r2,zero
  8332ac:	1000131e 	bne	r2,zero,8332fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8332b0:	e0bffe17 	ldw	r2,-8(fp)
  8332b4:	00c020f4 	movhi	r3,131
  8332b8:	18d1d404 	addi	r3,r3,18256
  8332bc:	10800324 	muli	r2,r2,12
  8332c0:	10c7883a 	add	r3,r2,r3
  8332c4:	e0bfff17 	ldw	r2,-4(fp)
  8332c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8332cc:	008020f4 	movhi	r2,131
  8332d0:	10967f04 	addi	r2,r2,23036
  8332d4:	10c00017 	ldw	r3,0(r2)
  8332d8:	e0bffe17 	ldw	r2,-8(fp)
  8332dc:	1880040e 	bge	r3,r2,8332f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8332e0:	00c020f4 	movhi	r3,131
  8332e4:	18d67f04 	addi	r3,r3,23036
  8332e8:	e0bffe17 	ldw	r2,-8(fp)
  8332ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8332f0:	e0bffe17 	ldw	r2,-8(fp)
  8332f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8332f8:	00000606 	br	833314 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8332fc:	e0bffe17 	ldw	r2,-8(fp)
  833300:	10800044 	addi	r2,r2,1
  833304:	e0bffe15 	stw	r2,-8(fp)
  833308:	e0bffe17 	ldw	r2,-8(fp)
  83330c:	10800810 	cmplti	r2,r2,32
  833310:	103fdf1e 	bne	r2,zero,833290 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  833314:	e0bffd17 	ldw	r2,-12(fp)
}
  833318:	e037883a 	mov	sp,fp
  83331c:	df000017 	ldw	fp,0(sp)
  833320:	dec00104 	addi	sp,sp,4
  833324:	f800283a 	ret

00833328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  833328:	defffb04 	addi	sp,sp,-20
  83332c:	df000415 	stw	fp,16(sp)
  833330:	df000404 	addi	fp,sp,16
  833334:	e13ffe15 	stw	r4,-8(fp)
  833338:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  83333c:	e0bfff17 	ldw	r2,-4(fp)
  833340:	10840070 	cmpltui	r2,r2,4097
  833344:	1000021e 	bne	r2,zero,833350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  833348:	00840004 	movi	r2,4096
  83334c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  833350:	e0fffe17 	ldw	r3,-8(fp)
  833354:	e0bfff17 	ldw	r2,-4(fp)
  833358:	1885883a 	add	r2,r3,r2
  83335c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  833360:	e0bffe17 	ldw	r2,-8(fp)
  833364:	e0bffd15 	stw	r2,-12(fp)
  833368:	00000506 	br	833380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  83336c:	e0bffd17 	ldw	r2,-12(fp)
  833370:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  833374:	e0bffd17 	ldw	r2,-12(fp)
  833378:	10800804 	addi	r2,r2,32
  83337c:	e0bffd15 	stw	r2,-12(fp)
  833380:	e0fffd17 	ldw	r3,-12(fp)
  833384:	e0bffc17 	ldw	r2,-16(fp)
  833388:	18bff836 	bltu	r3,r2,83336c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  83338c:	e0bffe17 	ldw	r2,-8(fp)
  833390:	108007cc 	andi	r2,r2,31
  833394:	1005003a 	cmpeq	r2,r2,zero
  833398:	1000021e 	bne	r2,zero,8333a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  83339c:	e0bffd17 	ldw	r2,-12(fp)
  8333a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8333a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8333a8:	e037883a 	mov	sp,fp
  8333ac:	df000017 	ldw	fp,0(sp)
  8333b0:	dec00104 	addi	sp,sp,4
  8333b4:	f800283a 	ret

008333b8 <atexit>:
  8333b8:	200b883a 	mov	r5,r4
  8333bc:	000d883a 	mov	r6,zero
  8333c0:	0009883a 	mov	r4,zero
  8333c4:	000f883a 	mov	r7,zero
  8333c8:	08334401 	jmpi	833440 <__register_exitproc>

008333cc <memcmp>:
  8333cc:	00c000c4 	movi	r3,3
  8333d0:	1980032e 	bgeu	r3,r6,8333e0 <memcmp+0x14>
  8333d4:	2144b03a 	or	r2,r4,r5
  8333d8:	10c4703a 	and	r2,r2,r3
  8333dc:	10000f26 	beq	r2,zero,83341c <memcmp+0x50>
  8333e0:	31ffffc4 	addi	r7,r6,-1
  8333e4:	3000061e 	bne	r6,zero,833400 <memcmp+0x34>
  8333e8:	00000a06 	br	833414 <memcmp+0x48>
  8333ec:	39ffffc4 	addi	r7,r7,-1
  8333f0:	00bfffc4 	movi	r2,-1
  8333f4:	21000044 	addi	r4,r4,1
  8333f8:	29400044 	addi	r5,r5,1
  8333fc:	38800526 	beq	r7,r2,833414 <memcmp+0x48>
  833400:	20c00003 	ldbu	r3,0(r4)
  833404:	28800003 	ldbu	r2,0(r5)
  833408:	18bff826 	beq	r3,r2,8333ec <memcmp+0x20>
  83340c:	1885c83a 	sub	r2,r3,r2
  833410:	f800283a 	ret
  833414:	0005883a 	mov	r2,zero
  833418:	f800283a 	ret
  83341c:	180f883a 	mov	r7,r3
  833420:	20c00017 	ldw	r3,0(r4)
  833424:	28800017 	ldw	r2,0(r5)
  833428:	18bfed1e 	bne	r3,r2,8333e0 <memcmp+0x14>
  83342c:	31bfff04 	addi	r6,r6,-4
  833430:	21000104 	addi	r4,r4,4
  833434:	29400104 	addi	r5,r5,4
  833438:	39bff936 	bltu	r7,r6,833420 <memcmp+0x54>
  83343c:	003fe806 	br	8333e0 <memcmp+0x14>

00833440 <__register_exitproc>:
  833440:	defffa04 	addi	sp,sp,-24
  833444:	008020f4 	movhi	r2,131
  833448:	10967604 	addi	r2,r2,23000
  83344c:	dc000015 	stw	r16,0(sp)
  833450:	14000017 	ldw	r16,0(r2)
  833454:	dd000415 	stw	r20,16(sp)
  833458:	2829883a 	mov	r20,r5
  83345c:	81405217 	ldw	r5,328(r16)
  833460:	dcc00315 	stw	r19,12(sp)
  833464:	dc800215 	stw	r18,8(sp)
  833468:	dc400115 	stw	r17,4(sp)
  83346c:	dfc00515 	stw	ra,20(sp)
  833470:	2023883a 	mov	r17,r4
  833474:	3027883a 	mov	r19,r6
  833478:	3825883a 	mov	r18,r7
  83347c:	28002526 	beq	r5,zero,833514 <__register_exitproc+0xd4>
  833480:	29000117 	ldw	r4,4(r5)
  833484:	008007c4 	movi	r2,31
  833488:	11002716 	blt	r2,r4,833528 <__register_exitproc+0xe8>
  83348c:	8800101e 	bne	r17,zero,8334d0 <__register_exitproc+0x90>
  833490:	2105883a 	add	r2,r4,r4
  833494:	1085883a 	add	r2,r2,r2
  833498:	20c00044 	addi	r3,r4,1
  83349c:	1145883a 	add	r2,r2,r5
  8334a0:	0009883a 	mov	r4,zero
  8334a4:	15000215 	stw	r20,8(r2)
  8334a8:	28c00115 	stw	r3,4(r5)
  8334ac:	2005883a 	mov	r2,r4
  8334b0:	dfc00517 	ldw	ra,20(sp)
  8334b4:	dd000417 	ldw	r20,16(sp)
  8334b8:	dcc00317 	ldw	r19,12(sp)
  8334bc:	dc800217 	ldw	r18,8(sp)
  8334c0:	dc400117 	ldw	r17,4(sp)
  8334c4:	dc000017 	ldw	r16,0(sp)
  8334c8:	dec00604 	addi	sp,sp,24
  8334cc:	f800283a 	ret
  8334d0:	29802204 	addi	r6,r5,136
  8334d4:	00800044 	movi	r2,1
  8334d8:	110e983a 	sll	r7,r2,r4
  8334dc:	30c04017 	ldw	r3,256(r6)
  8334e0:	2105883a 	add	r2,r4,r4
  8334e4:	1085883a 	add	r2,r2,r2
  8334e8:	1185883a 	add	r2,r2,r6
  8334ec:	19c6b03a 	or	r3,r3,r7
  8334f0:	14802015 	stw	r18,128(r2)
  8334f4:	14c00015 	stw	r19,0(r2)
  8334f8:	00800084 	movi	r2,2
  8334fc:	30c04015 	stw	r3,256(r6)
  833500:	88bfe31e 	bne	r17,r2,833490 <__register_exitproc+0x50>
  833504:	30804117 	ldw	r2,260(r6)
  833508:	11c4b03a 	or	r2,r2,r7
  83350c:	30804115 	stw	r2,260(r6)
  833510:	003fdf06 	br	833490 <__register_exitproc+0x50>
  833514:	008020f4 	movhi	r2,131
  833518:	109ff304 	addi	r2,r2,32716
  83351c:	100b883a 	mov	r5,r2
  833520:	80805215 	stw	r2,328(r16)
  833524:	003fd606 	br	833480 <__register_exitproc+0x40>
  833528:	008020b4 	movhi	r2,130
  83352c:	108d5904 	addi	r2,r2,13668
  833530:	1000021e 	bne	r2,zero,83353c <__register_exitproc+0xfc>
  833534:	013fffc4 	movi	r4,-1
  833538:	003fdc06 	br	8334ac <__register_exitproc+0x6c>
  83353c:	01006404 	movi	r4,400
  833540:	103ee83a 	callr	r2
  833544:	1007883a 	mov	r3,r2
  833548:	103ffa26 	beq	r2,zero,833534 <__register_exitproc+0xf4>
  83354c:	80805217 	ldw	r2,328(r16)
  833550:	180b883a 	mov	r5,r3
  833554:	18000115 	stw	zero,4(r3)
  833558:	18800015 	stw	r2,0(r3)
  83355c:	80c05215 	stw	r3,328(r16)
  833560:	18006215 	stw	zero,392(r3)
  833564:	18006315 	stw	zero,396(r3)
  833568:	0009883a 	mov	r4,zero
  83356c:	883fc826 	beq	r17,zero,833490 <__register_exitproc+0x50>
  833570:	003fd706 	br	8334d0 <__register_exitproc+0x90>
  833574:	00000010 	cmplti	zero,zero,0
  833578:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  83357c:	00527a01 	jmpi	527a0 <__alt_mem_sdram_0-0x7ad860>
  833580:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram_0-0x6e0840>
  833584:	001b0c0b 	ldhu	zero,27696(zero)
  833588:	00000028 	cmpgeui	zero,zero,0
  83358c:	00000018 	cmpnei	zero,zero,0
  833590:	0082ad9c 	xori	r2,zero,2742
  833594:	000005dc 	xori	zero,zero,23
  833598:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  83359c:	92099170 	cmpltui	r8,r18,9797
  8335a0:	95079308 	cmpgei	r20,r18,7756
  8335a4:	97049605 	stb	fp,4696(r18)
  8335a8:	90019f03 	ldbu	zero,1660(r18)
  8335ac:	9c06940a 	0x9c06940a
  8335b0:	00000002 	0x2
  8335b4:	00000028 	cmpgeui	zero,zero,0
  8335b8:	00000044 	movi	zero,1
  8335bc:	0082b378 	rdprs	r2,zero,2765
  8335c0:	000005b0 	cmpltui	zero,zero,22
  8335c4:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  8335c8:	92099168 	cmpgeui	r8,r18,9797
  8335cc:	95079308 	cmpgei	r20,r18,7756
  8335d0:	9c039705 	stb	r16,3676(r19)
  8335d4:	90019f02 	0x90019f02
  8335d8:	9606940a 	0x9606940a
  8335dc:	00000004 	movi	zero,0
  8335e0:	00825f50 	cmplti	r2,zero,2429
