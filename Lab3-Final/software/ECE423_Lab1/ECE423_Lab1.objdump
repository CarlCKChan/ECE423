
ECE423_Lab1.elf:     file format elf32-littlenios2
ECE423_Lab1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000141fc memsz 0x000141fc flags r-x
    LOAD off    0x0001521c vaddr 0x0081421c paddr 0x00815f34 align 2**12
         filesz 0x00001d18 memsz 0x00001d18 flags rw-
    LOAD off    0x00017c4c vaddr 0x00817c4c paddr 0x00817c4c align 2**12
         filesz 0x00000000 memsz 0x000008d0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013a04  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000694  00813b88  00813b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d18  0081421c  00815f34  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000008d0  00817c4c  00817c4c  00017c4c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00016f34  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000eb8  00000000  00000000  00016f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001fef  00000000  00000000  00017e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a35e  00000000  00000000  00019dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a3e  00000000  00000000  0004415d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c113  00000000  00000000  0004db9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ee8  00000000  00000000  00069cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004b88  00000000  00000000  0006bb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001206a  00000000  00000000  00070720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008278c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000020e8  00000000  00000000  000827c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000888ff  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00088902  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00088907  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00088908  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0008890c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00088910  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00088914  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0008891f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0008892a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  00088935  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0008893c  2**0
                  CONTENTS, READONLY
 28 .jdi          000041ac  00000000  00000000  00088958  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
00813b88 l    d  .rodata	00000000 .rodata
0081421c l    d  .rwdata	00000000 .rwdata
00817c4c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 main_code.c
00801888 l     F .text	000000ac handle_button_interrupts
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 dp-bit.c
00801fdc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00814458 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803e7c l     F .text	00000058 __sprint_r
00814076 l     O .rodata	00000010 blanks.3452
00814066 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00805ef8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
008060ac l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00807ad4 l     F .text	00000058 std
00807be0 l     F .text	00000008 __fp_lock
00807be8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00815f08 l     O .rwdata	00000004 charset
008140a8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008141f0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0080a710 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c1d4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080c414 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815f28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00814e14 l     O .rwdata	00001060 jtag_uart_0
00815e74 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00815ec8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080cd24 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0080cdfc l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00817cc8 g     O .bss	00000004 aux_status_register
00803c60 g     F .text	0000001c putchar
00817c7c g     O .bss	00000004 sectors
008090ec g     F .text	00000094 _mprec_log10
008091d8 g     F .text	00000088 __any_on
0080ae38 g     F .text	00000070 _isatty_r
008141c8 g     O .rodata	00000028 __mprec_tinytens
0080c7b0 g     F .text	00000060 alt_main
0080d3ec g     F .text	000001e4 alt_up_pixel_buffer_dma_draw_vline
00803c84 g     F .text	000000a0 _puts_r
0081828c g     O .bss	00000100 alt_irq
0080aea8 g     F .text	00000078 _lseek_r
008019f0 g     F .text	0000002c sd_card_wait_read_sector
008015d0 g     F .text	00000180 ycbcr_to_rgb
00815f34 g       *ABS*	00000000 __flash_rwdata_start
0080bebc g     F .text	00000088 __eqdf2
0080f8c0 g     F .text	000001c8 Check_for_Master_Boot_Record
00817c88 g     O .bss	00000004 sd_card_sectors_num
0081851c g       *ABS*	00000000 __alt_heap_start
0080f23c g     F .text	0000016c alt_up_sd_card_fclose
00803be8 g     F .text	00000044 printf
0081421c g     O .rwdata	00000080 Yquant
0080a7a4 g     F .text	00000068 __sseek
00807b3c g     F .text	000000a4 __sinit
0080a9a4 g     F .text	00000130 __swbuf_r
00808848 g     F .text	00000084 _setlocale_r
00807c3c g     F .text	0000009c __sfmoreglue
0080c814 g     F .text	00000004 __malloc_unlock
00817cec g     O .bss	00000004 current_sector_modified
00801c4c g     F .text	0000017c sd_read
00817c4c g     O .bss	00000004 last_tested
00817cbc g     O .bss	00000004 altera_avalon_timer_ts_freq
00801934 g     F .text	00000080 GetInputString
00808c00 g     F .text	000000e0 memmove
00807c2c g     F .text	00000010 _cleanup
00809260 g     F .text	000000bc _Balloc
0080e988 g     F .text	0000006c alt_up_sd_card_is_Present
0080fdf0 g     F .text	000000bc Save_Modified_Sector
0080dbd4 g     F .text	000000f4 alt_up_pixel_buffer_dma_draw
008028a4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080dd00 g     F .text	0000000c alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
00817ce4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00817c50 g     O .bss	00000004 edge_capture
00801dc8 g     F .text	00000214 ceil
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080adc4 g     F .text	00000074 _fstat_r
00817c98 g     O .bss	00000004 errno
00803d84 g     F .text	00000014 __srget
00817cb0 g     O .bss	00000004 alt_argv
0081def4 g       *ABS*	00000000 _gp
00812dac g     F .text	000002e8 alt_up_sd_card_fopen
00811c6c g     F .text	000000dc alt_up_sd_card_find_first
0080dcd8 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00817cd8 g     O .bss	00000004 command_argument_register
00814c94 g     O .rwdata	00000180 alt_fd_list
00803358 g     F .text	00000090 _getc_r
008032c0 g     F .text	00000098 getc
00803c7c g     F .text	00000008 _putchar_r
0080f3a8 g     F .text	000000b4 find_first_empty_record_in_root_directory
00813254 g     F .text	00000094 alt_find_dev
00808b60 g     F .text	000000a0 memcpy
00807c20 g     F .text	0000000c _cleanup_r
0080c0dc g     F .text	000000f8 __floatsidf
00813418 g     F .text	0000014c alt_io_redirect
0080c054 g     F .text	00000088 __ltdf2
00813b88 g       *ABS*	00000000 __DTOR_END__
00803d24 g     F .text	00000014 puts
0080f45c g     F .text	000000f4 find_first_empty_cluster
0081380c g     F .text	00000008 altera_nios2_irq_init
0080903c g     F .text	000000b0 __ratio
0080e9f4 g     F .text	0000006c alt_up_sd_card_open_dev
0080dcc8 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080cf8c g     F .text	0000016c altera_avalon_jtag_uart_read
008033fc g     F .text	00000014 malloc
00803c2c g     F .text	00000034 _printf_r
0080090c g     F .text	00000490 lossless_decode
0080c310 g     F .text	00000008 __udivsi3
0080c59c g     F .text	000000a4 isatty
008140d8 g     O .rodata	000000c8 __mprec_tens
0080d5d0 g     F .text	000001d0 alt_up_pixel_buffer_dma_draw_hline
00808824 g     F .text	00000008 __locale_charset
00813924 g     F .text	00000038 alt_icache_flush
00817c8c g     O .bss	00000004 __malloc_top_pad
00815f04 g     O .rwdata	00000004 __mb_cur_max
0080882c g     F .text	0000000c _localeconv_r
008099c4 g     F .text	0000003c __i2b
00808208 g     F .text	0000049c __sfvwrite_r
0080ea60 g     F .text	00000080 get_dir_divider_location
00803d98 g     F .text	00000070 _sbrk_r
0080d31c g     F .text	000000d0 helper_plot_pixel
0080ebec g     F .text	0000005c filename_to_upper_case
0080e910 g     F .text	00000038 alt_up_sd_card_set_attributes
0080ee6c g     F .text	000001e0 Read_File_Record_At_Offset
0080af20 g     F .text	00000078 _read_r
00814c60 g     O .rwdata	0000000c __lc_ctype
00815f1c g     O .rwdata	00000004 alt_max_fd
00803088 g     F .text	00000138 __unpack_d
008102c4 g     F .text	00000ccc find_file_in_directory
0080aca0 g     F .text	00000110 _fclose_r
00807aa0 g     F .text	00000034 fflush
00817c90 g     O .bss	00000004 __malloc_max_sbrked_mem
0080c4dc g     F .text	000000c0 alt_irq_register
0080fb80 g     F .text	00000138 alt_up_sd_card_is_FAT16
0080246c g     F .text	00000074 __adddf3
00808f1c g     F .text	00000120 __b2d
0080dae8 g     F .text	000000c8 alt_up_pixel_buffer_dma_clear_screen
0080b604 g     F .text	00000660 __umoddi3
0080c6f4 g     F .text	000000bc lseek
008001d0 g     F .text	000000bc print_dct
00815ef8 g     O .rwdata	00000004 _global_impure_ptr
00810f90 g     F .text	00000cdc get_home_directory_cluster_for_file
00809f58 g     F .text	000005f4 _realloc_r
0081851c g       *ABS*	00000000 __bss_end
00813390 g     F .text	00000088 alt_iic_isr_register
0080d86c g     F .text	0000027c alt_up_pixel_buffer_dma_draw_box
00813724 g     F .text	000000e8 alt_tick
0080af98 g     F .text	0000066c __udivdi3
008141a0 g     O .rodata	00000028 __mprec_bigtens
00809c4c g     F .text	00000120 __s2b
00802a04 g     F .text	00000194 __floatunsidf
00817c74 g     O .bss	00000004 button_latch
00808e3c g     F .text	00000060 __mcmp
00817cf0 g     O .bss	00000004 current_sector_index
00807c08 g     F .text	00000018 __fp_lock_all
008132f4 g     F .text	00000018 alt_ic_irq_enabled
008136f0 g     F .text	00000034 alt_alarm_stop
00801a8c g     F .text	000001c0 sd_card_create_sectors_list
0080fcb8 g     F .text	000000b0 mark_cluster
00800890 g     F .text	0000007c input_AC
00817ca8 g     O .bss	00000004 alt_irq_active
00800d9c g     F .text	00000834 mjpeg423_decode
008000ec g     F .exceptions	00000098 alt_irq_handler
00814c6c g     O .rwdata	00000028 alt_dev_null
0080e4f8 g     F .text	000002e0 convert_filename_to_name_extension
00817c54 g     O .bss	00000004 timer_value
00813128 g     F .text	00000018 alt_dcache_flush_all
00808d08 g     F .text	00000070 __hi0bits
00817cc4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0080d7a0 g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
0080292c g     F .text	000000d8 __fixdfsi
00812370 g     F .text	00000330 find_first_empty_record_in_a_subdirectory
00815f34 g       *ABS*	00000000 __ram_rwdata_end
00815f14 g     O .rwdata	00000008 alt_dev_list
0080ca08 g     F .text	0000013c write
00809e70 g     F .text	000000e8 _putc_r
00817ce8 g     O .bss	00000004 device_pointer
0080d27c g     F .text	00000010 alt_timestamp_freq
0080dd0c g     F .text	0000031c alt_up_pixel_buffer_dma_draw_line
0081421c g       *ABS*	00000000 __ram_rodata_end
0080c430 g     F .text	000000ac fstat
00817c58 g     O .bss	00000004 playing
00809b2c g     F .text	00000120 __pow5mult
00817c9c g     O .bss	00000004 __nlocale_changed
0080c318 g     F .text	00000008 __umodsi3
0081851c g       *ABS*	00000000 end
0080cd7c g     F .text	00000080 altera_avalon_jtag_uart_init
00813b84 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802cf4 g     F .text	00000080 __clzsi2
0080d0f8 g     F .text	00000184 altera_avalon_jtag_uart_write
00807b2c g     F .text	00000004 __sfp_lock_acquire
00808a7c g     F .text	000000e4 memchr
00803ed4 g     F .text	00001ec4 ___vfprintf_internal_r
00807ef4 g     F .text	00000314 _free_r
00803d38 g     F .text	0000004c __srget_r
00805efc g     F .text	000001b0 __call_exitprocs
00817ca0 g     O .bss	00000004 __mlocale_changed
00815f00 g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000004c _start
00817cf4 g     O .bss	00000004 _alt_tick_rate
0080028c g     F .text	000000c4 print_block
00800350 g     F .text	00000108 print_bitstream
00809624 g     F .text	0000014c __lshift
00801a1c g     F .text	00000070 sd_card_start_read_sector
00817cf8 g     O .bss	00000004 _alt_nticks
0080c818 g     F .text	00000140 read
0080cb64 g     F .text	0000013c alt_sys_init
008019b4 g     F .text	00000018 sd_seek
008139e4 g     F .text	00000134 __register_exitproc
00809770 g     F .text	00000254 __multiply
0080ccdc g     F .text	00000048 altera_avalon_jtag_uart_close
00802b98 g     F .text	00000038 __mulsi3
0081421c g       *ABS*	00000000 __ram_rwdata_start
00813b88 g       *ABS*	00000000 __ram_rodata_start
00817cfc g     O .bss	00000028 __malloc_current_mallinfo
0080931c g     F .text	0000017c __d2b
00817cc0 g     O .bss	00000004 initialized
0081441c g     O .rwdata	0000003c files
0080cccc g     F .text	00000010 altera_avalon_jtag_uart_read_fd
008138c4 g     F .text	00000060 alt_get_fd
00817d24 g     O .bss	00000014 search_data
008031c0 g     F .text	000000c8 __fpcmp_parts_d
0080ac30 g     F .text	00000070 _close_r
00813970 g     F .text	00000074 memcmp
0080ccac g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0081851c g       *ABS*	00000000 __alt_stack_base
0080cca0 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00800478 g     F .text	000002e8 idct
00805dbc g     F .text	0000013c __swsetup_r
0080bc64 g     F .text	00000258 __divdf3
00807cd8 g     F .text	000000f0 __sfp
00817d38 g     O .bss	00000054 boot_sector_data
00809180 g     F .text	00000058 __copybits
00814858 g     O .rwdata	00000408 __malloc_av_
00807b38 g     F .text	00000004 __sinit_lock_release
008024e0 g     F .text	000003c4 __muldf3
0080a888 g     F .text	00000060 __sread
00817c5c g     O .bss	00000004 backward
00813814 g     F .text	000000b0 alt_find_file
00813140 g     F .text	0000007c alt_dev_llist_insert
0080c810 g     F .text	00000004 __malloc_lock
0080c9b4 g     F .text	00000054 sbrk
008078a4 g     F .text	000001fc _fflush_r
0080ab68 g     F .text	000000c8 _calloc_r
00817c70 g     O .bss	00000001 index
0080081c g     F .text	00000074 input_DC
00817c4c g       *ABS*	00000000 __bss_start
00803b50 g     F .text	00000098 memset
00817c80 g     O .bss	00000004 sd_card_curr_read_sector
00801750 g     F .text	00000138 main
00817cb4 g     O .bss	00000004 alt_envp
00817c94 g     O .bss	00000004 __malloc_max_total_mem
0080dbb0 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0080ccbc g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0080aad4 g     F .text	0000001c __swbuf
0080e948 g     F .text	00000040 alt_up_sd_card_get_attributes
0080f04c g     F .text	000000ac Write_Sector_Data
00811eec g     F .text	00000484 alt_up_sd_card_write
0080a79c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080adb0 g     F .text	00000014 fclose
0080d28c g     F .text	00000048 alt_timestamp_start
0081838c g     O .bss	00000190 _atexit0
008062f0 g     F .text	000015b4 _dtoa_r
00803410 g     F .text	00000740 _malloc_r
00815f20 g     O .rwdata	00000004 alt_errno
008019cc g     F .text	00000024 sd_card_file_size
0080876c g     F .text	000000b8 _fwalk
00817c60 g     O .bss	00000004 fastForward
00809d6c g     F .text	00000104 putc
0080c250 g     F .text	00000060 __divsi3
00813ef8 g     O .rodata	00000014 __thenan_df
00807dc8 g     F .text	0000012c _malloc_trim_r
00813b88 g       *ABS*	00000000 __CTOR_END__
00817ccc g     O .bss	00000004 status_register
0080a8e8 g     F .text	000000bc strcmp
00817cd4 g     O .bss	00000004 command_register
00813b88 g       *ABS*	00000000 __flash_rodata_start
00813b88 g       *ABS*	00000000 __DTOR_LIST__
0080bf44 g     F .text	00000088 __nedf2
0080cb44 g     F .text	00000020 alt_irq_init
0080c958 g     F .text	0000005c alt_release_fd
00817c78 g     O .bss	00000004 button_state
0080fd68 g     F .text	00000088 get_cluster_flag
00813f0c g     O .rodata	00000100 __clz_tab
0080ec48 g     F .text	00000224 Write_File_Record_At_Offset
00817ca4 g     O .bss	00000004 _PathLocale
0081395c g     F .text	00000014 atexit
0080aaf0 g     F .text	00000078 _write_r
008088cc g     F .text	0000001c setlocale
0080f550 g     F .text	00000370 Check_for_DOS_FAT
008126a0 g     F .text	0000070c create_file
00815ef4 g     O .rwdata	00000004 _impure_ptr
00817cd0 g     O .bss	00000004 CSD_register_w0
00817cac g     O .bss	00000004 alt_argc
00817cb8 g     O .bss	00000004 altera_avalon_timer_ts_base
00813208 g     F .text	0000004c _do_dtors
0080a54c g     F .text	000001c4 __srefill_r
0081431c g     O .rwdata	00000100 zigzag_table
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800458 g     F .text	00000020 error_and_exit
00808e9c g     F .text	00000080 __ulp
0080a72c g     F .text	00000040 __isinfd
00807bf0 g     F .text	00000018 __fp_unlock_all
00815f0c g     O .rwdata	00000008 alt_fs_list
0080eae0 g     F .text	0000010c check_file_name_for_FAT16_compliance
00817cdc g     O .bss	00000004 buffer_memory
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808838 g     F .text	00000010 localeconv
0080d2d4 g     F .text	00000048 alt_timestamp
00817c64 g     O .bss	00000004 frame_index
0081338c g     F .text	00000004 alt_ic_isr_register
00817ce0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00815f34 g       *ABS*	00000000 _edata
00800760 g     F .text	000000bc update_buffer
0081851c g       *ABS*	00000000 _end
00817d8c g     O .bss	00000500 active_files
00800184 g       *ABS*	00000000 __ram_exceptions_end
00817c84 g     O .bss	00000004 sd_card_start_byte_in_sector
0080e7d8 g     F .text	00000138 copy_file_record_name_to_string
0080cf04 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
0080fa88 g     F .text	000000f8 Look_for_FAT16
00817c68 g     O .bss	00000004 getNextFile
0081334c g     F .text	00000040 alt_ic_irq_disable
0080a80c g     F .text	0000007c __swrite
00815efc g     O .rwdata	00000004 __malloc_trim_threshold
00803288 g     F .text	00000038 exit
0080feac g     F .text	00000418 alt_up_sd_card_find_next
008086a4 g     F .text	000000c8 _fwalk_reent
00809498 g     F .text	0000018c __mdiff
0080c2b0 g     F .text	00000060 __modsi3
0080f0f8 g     F .text	00000144 Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807b30 g     F .text	00000004 __sfp_lock_release
0080a76c g     F .text	00000030 __isnand
0080c41c g     F .text	00000014 _exit
00813094 g     F .text	00000094 alt_alarm_start
00802bd0 g     F .text	00000124 __muldi3
00811d48 g     F .text	000001a4 alt_up_sd_card_read
008088e8 g     F .text	00000194 __smakebuf_r
00803e08 g     F .text	00000074 strlen
00813564 g     F .text	0000018c open
0080bfcc g     F .text	00000088 __gedf2
008132e8 g     F .text	0000000c alt_icache_flush_all
00815f24 g     O .rwdata	00000004 alt_priority_mask
0081429c g     O .rwdata	00000080 Cquant
0081330c g     F .text	00000040 alt_ic_irq_enable
00805d98 g     F .text	00000024 __vfprintf_internal
008023ec g     F .text	00000080 __subdf3
00808d78 g     F .text	000000c4 __lo0bits
00817c6c g     O .bss	00000004 current_frame
00815f2c g     O .rwdata	00000008 alt_alarm_list
008131bc g     F .text	0000004c _do_ctors
0080c320 g     F .text	000000f4 close
0080c640 g     F .text	000000b4 alt_load
00802d74 g     F .text	00000314 __pack_d
0080e028 g     F .text	000004d0 match_file_record_to_name_ext
008033e8 g     F .text	00000014 free
00807b34 g     F .text	00000004 __sinit_lock_acquire
00809a00 g     F .text	0000012c __multadd
00808ce0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	040020b4 	movhi	r16,130
  800108:	8420a304 	addi	r16,r16,-32116
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800184:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800188:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80018c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  800190:	00bffd16 	blt	zero,r2,800188 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001a0:	d6b7bd14 	ori	gp,gp,57076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001a8:	109f1314 	ori	r2,r2,31820

    movhi r3, %hi(__bss_end)
  8001ac:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001b0:	18e14714 	ori	r3,r3,34076

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x40>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	080c6400 	call	80c640 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	080c7b00 	call	80c7b0 <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <print_dct>:
            else printf("%u\n", b[row][column]);
        } 
}

void print_dct(pdct_block_t b)
{
  8001d0:	defffd04 	addi	sp,sp,-12
  8001d4:	dc400115 	stw	r17,4(sp)
  8001d8:	dc000015 	stw	r16,0(sp)
  8001dc:	dfc00215 	stw	ra,8(sp)
  8001e0:	2021883a 	mov	r16,r4
  8001e4:	0023883a 	mov	r17,zero
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8001e8:	8140000f 	ldh	r5,0(r16)
  8001ec:	01002074 	movhi	r4,129
  8001f0:	210ee204 	addi	r4,r4,15240
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  8001f4:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8001f8:	0803be80 	call	803be8 <printf>
  8001fc:	8140008f 	ldh	r5,2(r16)
  800200:	01002074 	movhi	r4,129
  800204:	210ee204 	addi	r4,r4,15240
  800208:	0803be80 	call	803be8 <printf>
  80020c:	8140010f 	ldh	r5,4(r16)
  800210:	01002074 	movhi	r4,129
  800214:	210ee204 	addi	r4,r4,15240
  800218:	0803be80 	call	803be8 <printf>
  80021c:	8140018f 	ldh	r5,6(r16)
  800220:	01002074 	movhi	r4,129
  800224:	210ee204 	addi	r4,r4,15240
  800228:	0803be80 	call	803be8 <printf>
  80022c:	8140020f 	ldh	r5,8(r16)
  800230:	01002074 	movhi	r4,129
  800234:	210ee204 	addi	r4,r4,15240
  800238:	0803be80 	call	803be8 <printf>
  80023c:	8140028f 	ldh	r5,10(r16)
  800240:	01002074 	movhi	r4,129
  800244:	210ee204 	addi	r4,r4,15240
  800248:	0803be80 	call	803be8 <printf>
  80024c:	8140030f 	ldh	r5,12(r16)
  800250:	01002074 	movhi	r4,129
  800254:	210ee204 	addi	r4,r4,15240
  800258:	0803be80 	call	803be8 <printf>
            else printf("%d\n", b[row][column]);
  80025c:	8140038f 	ldh	r5,14(r16)
  800260:	01002074 	movhi	r4,129
  800264:	210ee304 	addi	r4,r4,15244
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800268:	84000404 	addi	r16,r16,16
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
  80026c:	0803be80 	call	803be8 <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800270:	00c00204 	movi	r3,8
  800274:	88ffdc1e 	bne	r17,r3,8001e8 <print_dct+0x18>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
  800278:	dfc00217 	ldw	ra,8(sp)
  80027c:	dc400117 	ldw	r17,4(sp)
  800280:	dc000017 	ldw	r16,0(sp)
  800284:	dec00304 	addi	sp,sp,12
  800288:	f800283a 	ret

0080028c <print_block>:
    printf("Error: %s\n", str);
    exit(-1);
}

void print_block(pcolor_block_t b)
{
  80028c:	defffc04 	addi	sp,sp,-16
  800290:	dc800215 	stw	r18,8(sp)
  800294:	dc400115 	stw	r17,4(sp)
  800298:	dc000015 	stw	r16,0(sp)
  80029c:	dfc00315 	stw	ra,12(sp)
  8002a0:	2021883a 	mov	r16,r4
  8002a4:	0023883a 	mov	r17,zero
  8002a8:	04800204 	movi	r18,8
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8002ac:	81400003 	ldbu	r5,0(r16)
  8002b0:	01002074 	movhi	r4,129
  8002b4:	210ee204 	addi	r4,r4,15240
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  8002b8:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8002bc:	0803be80 	call	803be8 <printf>
  8002c0:	81400043 	ldbu	r5,1(r16)
  8002c4:	01002074 	movhi	r4,129
  8002c8:	210ee204 	addi	r4,r4,15240
  8002cc:	0803be80 	call	803be8 <printf>
  8002d0:	81400083 	ldbu	r5,2(r16)
  8002d4:	01002074 	movhi	r4,129
  8002d8:	210ee204 	addi	r4,r4,15240
  8002dc:	0803be80 	call	803be8 <printf>
  8002e0:	814000c3 	ldbu	r5,3(r16)
  8002e4:	01002074 	movhi	r4,129
  8002e8:	210ee204 	addi	r4,r4,15240
  8002ec:	0803be80 	call	803be8 <printf>
  8002f0:	81400103 	ldbu	r5,4(r16)
  8002f4:	01002074 	movhi	r4,129
  8002f8:	210ee204 	addi	r4,r4,15240
  8002fc:	0803be80 	call	803be8 <printf>
  800300:	81400143 	ldbu	r5,5(r16)
  800304:	01002074 	movhi	r4,129
  800308:	210ee204 	addi	r4,r4,15240
  80030c:	0803be80 	call	803be8 <printf>
  800310:	81400183 	ldbu	r5,6(r16)
  800314:	01002074 	movhi	r4,129
  800318:	210ee204 	addi	r4,r4,15240
  80031c:	0803be80 	call	803be8 <printf>
            else printf("%u\n", b[row][column]);
  800320:	814001c3 	ldbu	r5,7(r16)
  800324:	01002074 	movhi	r4,129
  800328:	210f1704 	addi	r4,r4,15452
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  80032c:	84000204 	addi	r16,r16,8
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
  800330:	0803be80 	call	803be8 <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  800334:	8cbfdd1e 	bne	r17,r18,8002ac <print_block+0x20>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
  800338:	dfc00317 	ldw	ra,12(sp)
  80033c:	dc800217 	ldw	r18,8(sp)
  800340:	dc400117 	ldw	r17,4(sp)
  800344:	dc000017 	ldw	r16,0(sp)
  800348:	dec00404 	addi	sp,sp,16
  80034c:	f800283a 	ret

00800350 <print_bitstream>:
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
  800350:	defffd04 	addi	sp,sp,-12
  800354:	dfc00215 	stw	ra,8(sp)
  800358:	dc400115 	stw	r17,4(sp)
  80035c:	dc000015 	stw	r16,0(sp)
    for (int index = 0; index < num_bytes; index++)
  800360:	0100370e 	bge	zero,r4,800440 <print_bitstream+0xf0>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800364:	2821883a 	mov	r16,r5
  800368:	2923883a 	add	r17,r5,r4

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
  80036c:	81400003 	ldbu	r5,0(r16)
  800370:	01002074 	movhi	r4,129
  800374:	210ee404 	addi	r4,r4,15248
  800378:	280ad1fa 	srli	r5,r5,7
  80037c:	0803be80 	call	803be8 <printf>
  800380:	81400003 	ldbu	r5,0(r16)
  800384:	01002074 	movhi	r4,129
  800388:	210ee404 	addi	r4,r4,15248
  80038c:	294b883a 	add	r5,r5,r5
  800390:	29403fcc 	andi	r5,r5,255
  800394:	280ad1fa 	srli	r5,r5,7
  800398:	0803be80 	call	803be8 <printf>
  80039c:	81400003 	ldbu	r5,0(r16)
  8003a0:	01002074 	movhi	r4,129
  8003a4:	210ee404 	addi	r4,r4,15248
  8003a8:	294b883a 	add	r5,r5,r5
  8003ac:	294b883a 	add	r5,r5,r5
  8003b0:	29403fcc 	andi	r5,r5,255
  8003b4:	280ad1fa 	srli	r5,r5,7
  8003b8:	0803be80 	call	803be8 <printf>
  8003bc:	81400003 	ldbu	r5,0(r16)
  8003c0:	01002074 	movhi	r4,129
  8003c4:	210ee404 	addi	r4,r4,15248
  8003c8:	280ad13a 	srli	r5,r5,4
  8003cc:	2940004c 	andi	r5,r5,1
  8003d0:	0803be80 	call	803be8 <printf>
  8003d4:	81400003 	ldbu	r5,0(r16)
  8003d8:	01002074 	movhi	r4,129
  8003dc:	210ee404 	addi	r4,r4,15248
  8003e0:	280ad0fa 	srli	r5,r5,3
  8003e4:	2940004c 	andi	r5,r5,1
  8003e8:	0803be80 	call	803be8 <printf>
  8003ec:	81400003 	ldbu	r5,0(r16)
  8003f0:	01002074 	movhi	r4,129
  8003f4:	210ee404 	addi	r4,r4,15248
  8003f8:	280ad0ba 	srli	r5,r5,2
  8003fc:	2940004c 	andi	r5,r5,1
  800400:	0803be80 	call	803be8 <printf>
  800404:	81400003 	ldbu	r5,0(r16)
  800408:	01002074 	movhi	r4,129
  80040c:	210ee404 	addi	r4,r4,15248
  800410:	280ad07a 	srli	r5,r5,1
  800414:	2940004c 	andi	r5,r5,1
  800418:	0803be80 	call	803be8 <printf>
  80041c:	81400003 	ldbu	r5,0(r16)
  800420:	01002074 	movhi	r4,129
  800424:	210ee404 	addi	r4,r4,15248
  800428:	84000044 	addi	r16,r16,1
  80042c:	280a91fa 	slli	r5,r5,7
  800430:	29403fcc 	andi	r5,r5,255
  800434:	280ac03a 	cmpne	r5,r5,zero
  800438:	0803be80 	call	803be8 <printf>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
  80043c:	8c3fcb1e 	bne	r17,r16,80036c <print_bitstream+0x1c>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800440:	01000284 	movi	r4,10
}
  800444:	dfc00217 	ldw	ra,8(sp)
  800448:	dc400117 	ldw	r17,4(sp)
  80044c:	dc000017 	ldw	r16,0(sp)
  800450:	dec00304 	addi	sp,sp,12
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800454:	0803c601 	jmpi	803c60 <putchar>

00800458 <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800458:	deffff04 	addi	sp,sp,-4
  80045c:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
  800460:	01002074 	movhi	r4,129
  800464:	210ee504 	addi	r4,r4,15252

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800468:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
  80046c:	0803be80 	call	803be8 <printf>
    exit(-1);
  800470:	013fffc4 	movi	r4,-1
  800474:	08032880 	call	803288 <exit>

00800478 <idct>:
	 int scratchpad_input1,scratchpad_input2;
	 int scratchpad_output;

	 scratchpad_input1 = input[0];
	 scratchpad_input2 = input[1];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0,scratchpad_input1,scratchpad_input2);
  800478:	21800017 	ldw	r6,0(r4)
  80047c:	20800117 	ldw	r2,4(r4)
  800480:	308dd032 	custom	64,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[2];
	 scratchpad_input2 = input[3];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST( 0x10 ,scratchpad_input1,scratchpad_input2);
  800484:	20c00217 	ldw	r3,8(r4)
  800488:	20800317 	ldw	r2,12(r4)
  80048c:	1887d432 	custom	80,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[4];
	 scratchpad_input2 = input[5];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST( 0x2 ,scratchpad_input1,scratchpad_input2);
  800490:	21800417 	ldw	r6,16(r4)
  800494:	20800517 	ldw	r2,20(r4)
  800498:	308dd0b2 	custom	66,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[6];
	 scratchpad_input2 = input[7];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x12,scratchpad_input1,scratchpad_input2);
  80049c:	20c00617 	ldw	r3,24(r4)
  8004a0:	20800717 	ldw	r2,28(r4)
  8004a4:	1887d4b2 	custom	82,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[8];
	 scratchpad_input2 = input[9];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x4,scratchpad_input1,scratchpad_input2);
  8004a8:	21800817 	ldw	r6,32(r4)
  8004ac:	20800917 	ldw	r2,36(r4)
  8004b0:	308dd132 	custom	68,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[10];
	 scratchpad_input2 = input[11];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x14,scratchpad_input1,scratchpad_input2);
  8004b4:	20c00a17 	ldw	r3,40(r4)
  8004b8:	20800b17 	ldw	r2,44(r4)
  8004bc:	1887d532 	custom	84,r3,r3,r2
	 //printf("2 %d\n",scratchpad_input2);
	 ////printf("%d\n",scratchpad_output);

	 scratchpad_input1 = input[12];
	 scratchpad_input2 = input[13];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x6,scratchpad_input1,scratchpad_input2);
  8004c0:	21800c17 	ldw	r6,48(r4)
  8004c4:	20800d17 	ldw	r2,52(r4)
  8004c8:	308dd1b2 	custom	70,r6,r6,r2
	 //printf("2 %d\n",scratchpad_input2);
	 ////printf("%d\n",scratchpad_output);

	 scratchpad_input1 = input[14];
	 scratchpad_input2 = input[15];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x16,scratchpad_input1,scratchpad_input2);
  8004cc:	20c00e17 	ldw	r3,56(r4)
  8004d0:	20800f17 	ldw	r2,60(r4)
  8004d4:	1887d5b2 	custom	86,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[16];
	 scratchpad_input2 = input[17];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x08,scratchpad_input1,scratchpad_input2);
  8004d8:	21801017 	ldw	r6,64(r4)
  8004dc:	20801117 	ldw	r2,68(r4)
  8004e0:	308dd232 	custom	72,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[18];
	 scratchpad_input2 = input[19];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x18,scratchpad_input1,scratchpad_input2);
  8004e4:	20c01217 	ldw	r3,72(r4)
  8004e8:	20801317 	ldw	r2,76(r4)
  8004ec:	1887d632 	custom	88,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[20];
	 scratchpad_input2 = input[21];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0a,scratchpad_input1,scratchpad_input2);
  8004f0:	21801417 	ldw	r6,80(r4)
  8004f4:	20801517 	ldw	r2,84(r4)
  8004f8:	308dd2b2 	custom	74,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[22];
	 scratchpad_input2 = input[23];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1a,scratchpad_input1,scratchpad_input2);
  8004fc:	20c01617 	ldw	r3,88(r4)
  800500:	20801717 	ldw	r2,92(r4)
  800504:	1887d6b2 	custom	90,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[24];
	 scratchpad_input2 = input[25];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0c,scratchpad_input1,scratchpad_input2);
  800508:	21801817 	ldw	r6,96(r4)
  80050c:	20801917 	ldw	r2,100(r4)
  800510:	308dd332 	custom	76,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[26];
	 scratchpad_input2 = input[27];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1c,scratchpad_input1,scratchpad_input2);
  800514:	20c01a17 	ldw	r3,104(r4)
  800518:	20801b17 	ldw	r2,108(r4)
  80051c:	1887d732 	custom	92,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[28];
	 scratchpad_input2 = input[29];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0e,scratchpad_input1,scratchpad_input2);
  800520:	21801c17 	ldw	r6,112(r4)
  800524:	20801d17 	ldw	r2,116(r4)
  800528:	308dd3b2 	custom	78,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[30];
	 scratchpad_input2 = input[31];
  80052c:	21c01f17 	ldw	r7,124(r4)
	 scratchpad_input2 = input[29];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0e,scratchpad_input1,scratchpad_input2);
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[30];
  800530:	20801e17 	ldw	r2,120(r4)
	 scratchpad_input2 = input[31];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
  800534:	11c7d7b2 	custom	94,r3,r2,r7
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
  800538:	11c5d7b2 	custom	94,r2,r2,r7
	 ////printf("1 %d\n",scratchpad_input1);
	 ////printf("2 %d\n",scratchpad_input2);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x01,0,0);
  80053c:	0007883a 	mov	r3,zero
  800540:	18c9d072 	custom	65,r4,r3,r3
	 block[0][0] = scratchpad_output >> 16;
  800544:	2005d43a 	srai	r2,r4,16
	 block[1][0] = scratchpad_output & 0xffff;
  800548:	2b400204 	addi	r13,r5,8
	 ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
	 ////printf("1 %d\n",scratchpad_input1);
	 ////printf("2 %d\n",scratchpad_input2);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x01,0,0);
	 block[0][0] = scratchpad_output >> 16;
  80054c:	28800005 	stb	r2,0(r5)
	 block[1][0] = scratchpad_output & 0xffff;
  800550:	69000005 	stb	r4,0(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x11,0,0);
  800554:	18cdd472 	custom	81,r6,r3,r3
	 block[2][0] = scratchpad_output >> 16;
  800558:	3005d43a 	srai	r2,r6,16
  80055c:	2ac00404 	addi	r11,r5,16
	 block[3][0] = scratchpad_output & 0xffff;
  800560:	2b000604 	addi	r12,r5,24
	 block[0][0] = scratchpad_output >> 16;
	 block[1][0] = scratchpad_output & 0xffff;
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x11,0,0);
	 block[2][0] = scratchpad_output >> 16;
  800564:	58800005 	stb	r2,0(r11)
	 block[3][0] = scratchpad_output & 0xffff;
  800568:	61800005 	stb	r6,0(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x21,0,0);
  80056c:	18c9d872 	custom	97,r4,r3,r3
	 block[4][0] = scratchpad_output >> 16;
  800570:	2005d43a 	srai	r2,r4,16
  800574:	2a400804 	addi	r9,r5,32
	 block[5][0] = scratchpad_output & 0xffff;
  800578:	2a800a04 	addi	r10,r5,40
	 block[2][0] = scratchpad_output >> 16;
	 block[3][0] = scratchpad_output & 0xffff;
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x21,0,0);
	 block[4][0] = scratchpad_output >> 16;
  80057c:	48800005 	stb	r2,0(r9)
	 block[5][0] = scratchpad_output & 0xffff;
  800580:	51000005 	stb	r4,0(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x31,0,0);
  800584:	18cddc72 	custom	113,r6,r3,r3
	 block[6][0] = scratchpad_output >> 16;
  800588:	3005d43a 	srai	r2,r6,16
  80058c:	29c00c04 	addi	r7,r5,48
	 block[7][0] = scratchpad_output & 0xffff;
  800590:	2a000e04 	addi	r8,r5,56
	 block[4][0] = scratchpad_output >> 16;
	 block[5][0] = scratchpad_output & 0xffff;
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x31,0,0);
	 block[6][0] = scratchpad_output >> 16;
  800594:	38800005 	stb	r2,0(r7)
	 block[7][0] = scratchpad_output & 0xffff;
  800598:	41800005 	stb	r6,0(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x03,0,0);
  80059c:	18c9d0f2 	custom	67,r4,r3,r3
	 block[0][1] = scratchpad_output >> 16;
  8005a0:	2005d43a 	srai	r2,r4,16
  8005a4:	28800045 	stb	r2,1(r5)
	 block[1][1] = scratchpad_output & 0xffff;
  8005a8:	69000045 	stb	r4,1(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x13,0,0);
  8005ac:	18cdd4f2 	custom	83,r6,r3,r3
	 block[2][1] = scratchpad_output >> 16;
  8005b0:	3005d43a 	srai	r2,r6,16
  8005b4:	58800045 	stb	r2,1(r11)
	 block[3][1] = scratchpad_output & 0xffff;
  8005b8:	61800045 	stb	r6,1(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x23,0,0);
  8005bc:	18c9d8f2 	custom	99,r4,r3,r3
	 block[4][1] = scratchpad_output >> 16;
  8005c0:	2005d43a 	srai	r2,r4,16
  8005c4:	48800045 	stb	r2,1(r9)
	 block[5][1] = scratchpad_output & 0xffff;
  8005c8:	51000045 	stb	r4,1(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x33,0,0);
  8005cc:	18cddcf2 	custom	115,r6,r3,r3
	 block[6][1] = scratchpad_output >> 16;
  8005d0:	3005d43a 	srai	r2,r6,16
  8005d4:	38800045 	stb	r2,1(r7)
	 block[7][1] = scratchpad_output & 0xffff;
  8005d8:	41800045 	stb	r6,1(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x05,0,0);
  8005dc:	18c9d172 	custom	69,r4,r3,r3
	 block[0][2] = scratchpad_output >> 16;
  8005e0:	2005d43a 	srai	r2,r4,16
  8005e4:	28800085 	stb	r2,2(r5)
	 block[1][2] = scratchpad_output & 0xffff;
  8005e8:	69000085 	stb	r4,2(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x15,0,0);
  8005ec:	18cdd572 	custom	85,r6,r3,r3
	 block[2][2] = scratchpad_output >> 16;
  8005f0:	3005d43a 	srai	r2,r6,16
  8005f4:	58800085 	stb	r2,2(r11)
	 block[3][2] = scratchpad_output & 0xffff;
  8005f8:	61800085 	stb	r6,2(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x25,0,0);
  8005fc:	18c9d972 	custom	101,r4,r3,r3
	 block[4][2] = scratchpad_output >> 16;
  800600:	2005d43a 	srai	r2,r4,16
  800604:	48800085 	stb	r2,2(r9)
	 block[5][2] = scratchpad_output & 0xffff;
  800608:	51000085 	stb	r4,2(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x35,0,0);
  80060c:	18cddd72 	custom	117,r6,r3,r3
	 block[6][2] = scratchpad_output >> 16;
  800610:	3005d43a 	srai	r2,r6,16
  800614:	38800085 	stb	r2,2(r7)
	 block[7][2] = scratchpad_output & 0xffff;
  800618:	41800085 	stb	r6,2(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x07,0,0);
  80061c:	18c9d1f2 	custom	71,r4,r3,r3
	 block[0][3] = scratchpad_output >> 16;
  800620:	2005d43a 	srai	r2,r4,16
  800624:	288000c5 	stb	r2,3(r5)
	 block[1][3] = scratchpad_output & 0xffff;
  800628:	690000c5 	stb	r4,3(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x17,0,0);
  80062c:	18cdd5f2 	custom	87,r6,r3,r3
	 block[2][3] = scratchpad_output >> 16;
  800630:	3005d43a 	srai	r2,r6,16
  800634:	588000c5 	stb	r2,3(r11)
	 block[3][3] = scratchpad_output & 0xffff;
  800638:	618000c5 	stb	r6,3(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x27,0,0);
  80063c:	18c9d9f2 	custom	103,r4,r3,r3
	 block[4][3] = scratchpad_output >> 16;
  800640:	2005d43a 	srai	r2,r4,16
  800644:	488000c5 	stb	r2,3(r9)
	 block[5][3] = scratchpad_output & 0xffff;
  800648:	510000c5 	stb	r4,3(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x37,0,0);
  80064c:	18cdddf2 	custom	119,r6,r3,r3
	 block[6][3] = scratchpad_output >> 16;
  800650:	3005d43a 	srai	r2,r6,16
  800654:	388000c5 	stb	r2,3(r7)
	 block[7][3] = scratchpad_output & 0xffff;
  800658:	418000c5 	stb	r6,3(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x09,0,0);
  80065c:	18c9d272 	custom	73,r4,r3,r3
	 block[0][4] = scratchpad_output >> 16;
  800660:	2005d43a 	srai	r2,r4,16
  800664:	28800105 	stb	r2,4(r5)
	 block[1][4] = scratchpad_output & 0xffff;
  800668:	69000105 	stb	r4,4(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x19,0,0);
  80066c:	18cdd672 	custom	89,r6,r3,r3
	 block[2][4] = scratchpad_output >> 16;
  800670:	3005d43a 	srai	r2,r6,16
  800674:	58800105 	stb	r2,4(r11)
	 block[3][4] = scratchpad_output & 0xffff;
  800678:	61800105 	stb	r6,4(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x29,0,0);
  80067c:	18c9da72 	custom	105,r4,r3,r3
	 block[4][4] = scratchpad_output >> 16;
  800680:	2005d43a 	srai	r2,r4,16
  800684:	48800105 	stb	r2,4(r9)
	 block[5][4] = scratchpad_output & 0xffff;
  800688:	51000105 	stb	r4,4(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x39,0,0);
  80068c:	18cdde72 	custom	121,r6,r3,r3
	 block[6][4] = scratchpad_output >> 16;
  800690:	3005d43a 	srai	r2,r6,16
  800694:	38800105 	stb	r2,4(r7)
	 block[7][4] = scratchpad_output & 0xffff;
  800698:	41800105 	stb	r6,4(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0b,0,0);
  80069c:	18c9d2f2 	custom	75,r4,r3,r3
	 block[0][5] = scratchpad_output >> 16;
  8006a0:	2005d43a 	srai	r2,r4,16
  8006a4:	28800145 	stb	r2,5(r5)
	 block[1][5] = scratchpad_output & 0xffff;
  8006a8:	69000145 	stb	r4,5(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1b,0,0);
  8006ac:	18cdd6f2 	custom	91,r6,r3,r3
	 block[2][5] = scratchpad_output >> 16;
  8006b0:	3005d43a 	srai	r2,r6,16
  8006b4:	58800145 	stb	r2,5(r11)
	 block[3][5] = scratchpad_output & 0xffff;
  8006b8:	61800145 	stb	r6,5(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2b,0,0);
  8006bc:	18c9daf2 	custom	107,r4,r3,r3
	 block[4][5] = scratchpad_output >> 16;
  8006c0:	2005d43a 	srai	r2,r4,16
  8006c4:	48800145 	stb	r2,5(r9)
	 block[5][5] = scratchpad_output & 0xffff;
  8006c8:	51000145 	stb	r4,5(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3b,0,0);
  8006cc:	18cddef2 	custom	123,r6,r3,r3
	 block[6][5] = scratchpad_output >> 16;
  8006d0:	3005d43a 	srai	r2,r6,16
  8006d4:	38800145 	stb	r2,5(r7)
	 block[7][5] = scratchpad_output & 0xffff;
  8006d8:	41800145 	stb	r6,5(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0d,0,0);
  8006dc:	18c9d372 	custom	77,r4,r3,r3
	 block[0][6] = scratchpad_output >> 16;
  8006e0:	2005d43a 	srai	r2,r4,16
  8006e4:	28800185 	stb	r2,6(r5)
	 block[1][6] = scratchpad_output & 0xffff;
  8006e8:	69000185 	stb	r4,6(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1d,0,0);
  8006ec:	18cdd772 	custom	93,r6,r3,r3
	 block[2][6] = scratchpad_output >> 16;
  8006f0:	3005d43a 	srai	r2,r6,16
  8006f4:	58800185 	stb	r2,6(r11)
	 block[3][6] = scratchpad_output & 0xffff;
  8006f8:	61800185 	stb	r6,6(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2d,0,0);
  8006fc:	18c9db72 	custom	109,r4,r3,r3
	 block[4][6] = scratchpad_output >> 16;
  800700:	2005d43a 	srai	r2,r4,16
  800704:	48800185 	stb	r2,6(r9)
	 block[5][6] = scratchpad_output & 0xffff;
  800708:	51000185 	stb	r4,6(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3d,0,0);
  80070c:	18cddf72 	custom	125,r6,r3,r3
	 block[6][6] = scratchpad_output >> 16;
  800710:	3005d43a 	srai	r2,r6,16
  800714:	38800185 	stb	r2,6(r7)
	 block[7][6] = scratchpad_output & 0xffff;
  800718:	41800185 	stb	r6,6(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0f,0,0);
  80071c:	18c9d3f2 	custom	79,r4,r3,r3
	 block[0][7] = scratchpad_output >> 16;
  800720:	2005d43a 	srai	r2,r4,16
  800724:	288001c5 	stb	r2,7(r5)
	 block[1][7] = scratchpad_output & 0xffff;
  800728:	690001c5 	stb	r4,7(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1f,0,0);
  80072c:	18cbd7f2 	custom	95,r5,r3,r3
	 block[2][7] = scratchpad_output >> 16;
  800730:	2805d43a 	srai	r2,r5,16
  800734:	588001c5 	stb	r2,7(r11)
	 block[3][7] = scratchpad_output & 0xffff;
  800738:	614001c5 	stb	r5,7(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2f,0,0);
  80073c:	18c9dbf2 	custom	111,r4,r3,r3
	 block[4][7] = scratchpad_output >> 16;
  800740:	2005d43a 	srai	r2,r4,16
  800744:	488001c5 	stb	r2,7(r9)
	 block[5][7] = scratchpad_output & 0xffff;
  800748:	510001c5 	stb	r4,7(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3f,0,0);
  80074c:	18c7dff2 	custom	127,r3,r3,r3
	 block[6][7] = scratchpad_output >> 16;
  800750:	1805d43a 	srai	r2,r3,16
  800754:	388001c5 	stb	r2,7(r7)
	 block[7][7] = scratchpad_output & 0xffff;
  800758:	40c001c5 	stb	r3,7(r8)
//
//		 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3f,0,0);
//		 block[7][6] = scratchpad_output >> 16;
//		 block[7][7] = scratchpad_output & 0xffff;

}
  80075c:	f800283a 	ret

00800760 <update_buffer>:
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800760:	20c00017 	ldw	r3,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  800764:	30800017 	ldw	r2,0(r6)
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800768:	39c03fcc 	andi	r7,r7,255
  80076c:	19d2983a 	sll	r9,r3,r7
    //total number of bits to be shifted in
    *pbitcount += size;
  800770:	388f883a 	add	r7,r7,r2
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800774:	008001c4 	movi	r2,7
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800778:	3abffe04 	addi	r10,r7,-8
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  80077c:	3b4001cc 	andi	r13,r7,7
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800780:	22400015 	stw	r9,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  800784:	31c00015 	stw	r7,0(r6)
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800788:	11c01c0e 	bge	r2,r7,8007fc <update_buffer+0x9c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  80078c:	2a000017 	ldw	r8,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800790:	3b3ffc04 	addi	r12,r7,-16
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800794:	40800003 	ldbu	r2,0(r8)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800798:	40c00044 	addi	r3,r8,1
  80079c:	28c00015 	stw	r3,0(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8007a0:	1284983a 	sll	r2,r2,r10
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8007a4:	42c00084 	addi	r11,r8,2
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8007a8:	4886b03a 	or	r3,r9,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8007ac:	008003c4 	movi	r2,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8007b0:	20c00015 	stw	r3,0(r4)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8007b4:	11c0110e 	bge	r2,r7,8007fc <update_buffer+0x9c>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8007b8:	40800043 	ldbu	r2,1(r8)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8007bc:	3abffa04 	addi	r10,r7,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8007c0:	424000c4 	addi	r9,r8,3
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8007c4:	1304983a 	sll	r2,r2,r12
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8007c8:	2ac00015 	stw	r11,0(r5)
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8007cc:	1886b03a 	or	r3,r3,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8007d0:	008005c4 	movi	r2,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8007d4:	20c00015 	stw	r3,0(r4)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8007d8:	11c0080e 	bge	r2,r7,8007fc <update_buffer+0x9c>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8007dc:	40800083 	ldbu	r2,2(r8)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8007e0:	42c00104 	addi	r11,r8,4
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8007e4:	2a400015 	stw	r9,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8007e8:	1284983a 	sll	r2,r2,r10
  8007ec:	1886b03a 	or	r3,r3,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  8007f0:	00800804 	movi	r2,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8007f4:	20c00015 	stw	r3,0(r4)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  8007f8:	38800226 	beq	r7,r2,800804 <update_buffer+0xa4>
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  8007fc:	33400015 	stw	r13,0(r6)
}
  800800:	f800283a 	ret
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800804:	408000c3 	ldbu	r2,3(r8)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800808:	2ac00015 	stw	r11,0(r5)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  80080c:	33400015 	stw	r13,0(r6)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800810:	1884b03a 	or	r2,r3,r2
  800814:	20800015 	stw	r2,0(r4)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
}
  800818:	f800283a 	ret

0080081c <input_DC>:
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  80081c:	2006913a 	slli	r3,r4,4

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  800820:	2008d73a 	srli	r4,r4,28
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800824:	00800804 	movi	r2,32
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
  800828:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  80082c:	21403fcc 	andi	r5,r4,255
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800830:	1145c83a 	sub	r2,r2,r5
  800834:	188cd83a 	srl	r6,r3,r2
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800838:	02000104 	movi	r8,4
  80083c:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800840:	28bfffc4 	addi	r2,r5,-1
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800844:	28000626 	beq	r5,zero,800860 <input_DC+0x44>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800848:	3086d83a 	srl	r3,r6,r2
  80084c:	00bfffc4 	movi	r2,-1
  800850:	300f883a 	mov	r7,r6
  800854:	1144983a 	sll	r2,r2,r5
  800858:	18000a26 	beq	r3,zero,800884 <input_DC+0x68>
        ib.bits = size + 4;
  80085c:	22000104 	addi	r8,r4,4
    }
    return ib;
  800860:	d8800045 	stb	r2,1(sp)
  800864:	da000005 	stb	r8,0(sp)
  800868:	38bfffcc 	andi	r2,r7,65535
  80086c:	d8c0000b 	ldhu	r3,0(sp)
  800870:	1004943a 	slli	r2,r2,16
  800874:	d9c0008d 	sth	r7,2(sp)
}
  800878:	1884b03a 	or	r2,r3,r2
  80087c:	dec00104 	addi	sp,sp,4
  800880:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800884:	10800044 	addi	r2,r2,1
  800888:	308f883a 	add	r7,r6,r2
  80088c:	003ff306 	br	80085c <input_DC+0x40>

00800890 <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800890:	2004913a 	slli	r2,r4,4
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800894:	2006923a 	slli	r3,r4,8
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
  800898:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  80089c:	1010d73a 	srli	r8,r2,28
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8008a0:	00800804 	movi	r2,32
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8008a4:	02400204 	movi	r9,8
  8008a8:	41403fcc 	andi	r5,r8,255
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8008ac:	1145c83a 	sub	r2,r2,r5
  8008b0:	188cd83a 	srl	r6,r3,r2
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8008b4:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8008b8:	28ffffc4 	addi	r3,r5,-1
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  8008bc:	28000726 	beq	r5,zero,8008dc <input_AC+0x4c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  8008c0:	00bfffc4 	movi	r2,-1
  8008c4:	1144983a 	sll	r2,r2,r5
  8008c8:	30c6d83a 	srl	r3,r6,r3
  8008cc:	300f883a 	mov	r7,r6
  8008d0:	10800044 	addi	r2,r2,1
  8008d4:	18000b26 	beq	r3,zero,800904 <input_AC+0x74>
        ib.bits = size + 8;
  8008d8:	42400204 	addi	r9,r8,8
    }
    return ib;
  8008dc:	2004d73a 	srli	r2,r4,28
  8008e0:	38ffffcc 	andi	r3,r7,65535
  8008e4:	da400005 	stb	r9,0(sp)
  8008e8:	d8800045 	stb	r2,1(sp)
  8008ec:	1806943a 	slli	r3,r3,16
  8008f0:	d880000b 	ldhu	r2,0(sp)
  8008f4:	d9c0008d 	sth	r7,2(sp)
}
  8008f8:	10c4b03a 	or	r2,r2,r3
  8008fc:	dec00104 	addi	sp,sp,4
  800900:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800904:	308f883a 	add	r7,r6,r2
  800908:	003ff306 	br	8008d8 <input_AC+0x48>

0080090c <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  80090c:	defff304 	addi	sp,sp,-52
  800910:	d9000215 	stw	r4,8(sp)
  800914:	df000b15 	stw	fp,44(sp)
  800918:	3839883a 	mov	fp,r7
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  80091c:	d9c00217 	ldw	r7,8(sp)
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800920:	dfc00c15 	stw	ra,48(sp)
  800924:	ddc00a15 	stw	r23,40(sp)
  800928:	dd800915 	stw	r22,36(sp)
  80092c:	dd400815 	stw	r21,32(sp)
  800930:	dd000715 	stw	r20,28(sp)
  800934:	dcc00615 	stw	r19,24(sp)
  800938:	dc800515 	stw	r18,20(sp)
  80093c:	dc400415 	stw	r17,16(sp)
  800940:	dc000315 	stw	r16,12(sp)
  800944:	2811883a 	mov	r8,r5
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800948:	29000003 	ldbu	r4,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  80094c:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800950:	28800083 	ldbu	r2,2(r5)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800954:	294000c3 	ldbu	r5,3(r5)
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800958:	01c0bc0e 	bge	zero,r7,800c4c <lossless_decode+0x340>
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  80095c:	18c03fcc 	andi	r3,r3,255
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800960:	2008963a 	slli	r4,r4,24
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800964:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800968:	10803fcc 	andi	r2,r2,255
  80096c:	1004923a 	slli	r2,r2,8
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800970:	20c8b03a 	or	r4,r4,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800974:	29403fcc 	andi	r5,r5,255
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800978:	2088b03a 	or	r4,r4,r2
  80097c:	d8800d17 	ldw	r2,52(sp)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800980:	2166b03a 	or	r19,r4,r5
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800984:	45400104 	addi	r21,r8,4
  800988:	3029883a 	mov	r20,r6
  80098c:	d800010d 	sth	zero,4(sp)
  800990:	d8000015 	stw	zero,0(sp)
  800994:	002d883a 	mov	r22,zero
  800998:	102f003a 	cmpeq	r23,r2,zero

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  80099c:	980cd73a 	srli	r6,r19,28
    if(size == 0){
  8009a0:	31403fcc 	andi	r5,r6,255
  8009a4:	2800e31e 	bne	r5,zero,800d34 <lossless_decode+0x428>
  8009a8:	0009883a 	mov	r4,zero
  8009ac:	00800104 	movi	r2,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  8009b0:	15a1883a 	add	r16,r2,r22
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  8009b4:	98a6983a 	sll	r19,r19,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8009b8:	008001c4 	movi	r2,7
  8009bc:	1400160e 	bge	r2,r16,800a18 <lossless_decode+0x10c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009c0:	a8800003 	ldbu	r2,0(r21)
  8009c4:	80fffe04 	addi	r3,r16,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8009c8:	a9400044 	addi	r5,r21,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009cc:	10c4983a 	sll	r2,r2,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8009d0:	00c003c4 	movi	r3,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009d4:	98a6b03a 	or	r19,r19,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8009d8:	1c000e0e 	bge	r3,r16,800a14 <lossless_decode+0x108>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009dc:	a8800043 	ldbu	r2,1(r21)
  8009e0:	80fffc04 	addi	r3,r16,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8009e4:	a9400084 	addi	r5,r21,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009e8:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8009ec:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009f0:	98a6b03a 	or	r19,r19,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  8009f4:	1c00070e 	bge	r3,r16,800a14 <lossless_decode+0x108>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8009f8:	a8800083 	ldbu	r2,2(r21)
  8009fc:	80fffa04 	addi	r3,r16,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a00:	a94000c4 	addi	r5,r21,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a04:	10c4983a 	sll	r2,r2,r3
  800a08:	98a6b03a 	or	r19,r19,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800a0c:	00800804 	movi	r2,32
  800a10:	8080de26 	beq	r16,r2,800d8c <lossless_decode+0x480>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a14:	282b883a 	mov	r21,r5
        
        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
  800a18:	b800d41e 	bne	r23,zero,800d6c <lossless_decode+0x460>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
  800a1c:	e140000b 	ldhu	r5,0(fp)
  800a20:	0802b980 	call	802b98 <__mulsi3>
  800a24:	a0c0000b 	ldhu	r3,0(r20)
  800a28:	10c5883a 	add	r2,r2,r3
  800a2c:	a080000d 	sth	r2,0(r20)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800a30:	858001cc 	andi	r22,r16,7
  800a34:	04800044 	movi	r18,1
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800a38:	9804913a 	slli	r2,r19,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800a3c:	980ed73a 	srli	r7,r19,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800a40:	100cd73a 	srli	r6,r2,28
    if(size == 0) {
  800a44:	31403fcc 	andi	r5,r6,255
  800a48:	28002b1e 	bne	r5,zero,800af8 <lossless_decode+0x1ec>
  800a4c:	0009883a 	mov	r4,zero
  800a50:	00800204 	movi	r2,8
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800a54:	158b883a 	add	r5,r2,r22
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800a58:	98a6983a 	sll	r19,r19,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800a5c:	008001c4 	movi	r2,7
  800a60:	1140160e 	bge	r2,r5,800abc <lossless_decode+0x1b0>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a64:	a8800003 	ldbu	r2,0(r21)
  800a68:	28fffe04 	addi	r3,r5,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a6c:	a9800044 	addi	r6,r21,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a70:	10c4983a 	sll	r2,r2,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800a74:	00c003c4 	movi	r3,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800a78:	98a6b03a 	or	r19,r19,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800a7c:	19400e0e 	bge	r3,r5,800ab8 <lossless_decode+0x1ac>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a80:	a8800043 	ldbu	r2,1(r21)
  800a84:	28fffc04 	addi	r3,r5,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a88:	a9800084 	addi	r6,r21,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a8c:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800a90:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a94:	98a6b03a 	or	r19,r19,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800a98:	1940070e 	bge	r3,r5,800ab8 <lossless_decode+0x1ac>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a9c:	a8800083 	ldbu	r2,2(r21)
  800aa0:	28fffa04 	addi	r3,r5,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800aa4:	a98000c4 	addi	r6,r21,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800aa8:	10c4983a 	sll	r2,r2,r3
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800aac:	00c00804 	movi	r3,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800ab0:	98a6b03a 	or	r19,r19,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800ab4:	28c01e26 	beq	r5,r3,800b30 <lossless_decode+0x224>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ab8:	302b883a 	mov	r21,r6
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800abc:	20bfffcc 	andi	r2,r4,65535
  800ac0:	10a0001c 	xori	r2,r2,32768
  800ac4:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800ac8:	2d8001cc 	andi	r22,r5,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800acc:	1000201e 	bne	r2,zero,800b50 <lossless_decode+0x244>
                if(ib.runlength == 15){
  800ad0:	38c03fcc 	andi	r3,r7,255
  800ad4:	008003c4 	movi	r2,15
  800ad8:	1880791e 	bne	r3,r2,800cc0 <lossless_decode+0x3b4>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
  800adc:	b800671e 	bne	r23,zero,800c7c <lossless_decode+0x370>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800ae0:	9804913a 	slli	r2,r19,4
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
  800ae4:	94800404 	addi	r18,r18,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800ae8:	980ed73a 	srli	r7,r19,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800aec:	100cd73a 	srli	r6,r2,28
    if(size == 0) {
  800af0:	31403fcc 	andi	r5,r6,255
  800af4:	283fd526 	beq	r5,zero,800a4c <lossless_decode+0x140>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800af8:	9808923a 	slli	r4,r19,8
  800afc:	00800804 	movi	r2,32
  800b00:	1147c83a 	sub	r3,r2,r5
  800b04:	20c8d83a 	srl	r4,r4,r3
  800b08:	28bfffc4 	addi	r2,r5,-1
  800b0c:	2084d83a 	srl	r2,r4,r2
  800b10:	1000041e 	bne	r2,zero,800b24 <lossless_decode+0x218>
  800b14:	00bfffc4 	movi	r2,-1
  800b18:	1144983a 	sll	r2,r2,r5
  800b1c:	10800044 	addi	r2,r2,1
  800b20:	2089883a 	add	r4,r4,r2
  800b24:	30800204 	addi	r2,r6,8
  800b28:	10803fcc 	andi	r2,r2,255
  800b2c:	003fc906 	br	800a54 <lossless_decode+0x148>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800b30:	a88000c3 	ldbu	r2,3(r21)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800b34:	2d8001cc 	andi	r22,r5,7
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b38:	ad400104 	addi	r21,r21,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800b3c:	98a6b03a 	or	r19,r19,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800b40:	20bfffcc 	andi	r2,r4,65535
  800b44:	10a0001c 	xori	r2,r2,32768
  800b48:	10a00004 	addi	r2,r2,-32768
  800b4c:	103fe026 	beq	r2,zero,800ad0 <lossless_decode+0x1c4>
                    //if P == 1, then don't change the values
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
  800b50:	b800141e 	bne	r23,zero,800ba4 <lossless_decode+0x298>
                    index += ib.runlength;
  800b54:	91e5883a 	add	r18,r18,r7
                        pe[zigzag_table[index]] = 0;
                }
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800b58:	94403fcc 	andi	r17,r18,255
  800b5c:	8c45883a 	add	r2,r17,r17
  800b60:	02002074 	movhi	r8,129
  800b64:	4210c704 	addi	r8,r8,17180
  800b68:	1085883a 	add	r2,r2,r2
  800b6c:	1205883a 	add	r2,r2,r8
  800b70:	14000017 	ldw	r16,0(r2)
  800b74:	8421883a 	add	r16,r16,r16
  800b78:	8705883a 	add	r2,r16,fp
  800b7c:	1140000b 	ldhu	r5,0(r2)
  800b80:	a421883a 	add	r16,r20,r16
  800b84:	0802b980 	call	802b98 <__mulsi3>
  800b88:	80c0000b 	ldhu	r3,0(r16)
  800b8c:	10c5883a 	add	r2,r2,r3
  800b90:	8080000d 	sth	r2,0(r16)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800b94:	00800f84 	movi	r2,62
  800b98:	14402636 	bltu	r2,r17,800c34 <lossless_decode+0x328>
                index++;
  800b9c:	94800044 	addi	r18,r18,1
  800ba0:	003fa506 	br	800a38 <lossless_decode+0x12c>
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
  800ba4:	91c7883a 	add	r3,r18,r7
                    for(; index < terminal; index++)
  800ba8:	94403fcc 	andi	r17,r18,255
  800bac:	18803fcc 	andi	r2,r3,255
  800bb0:	88805c2e 	bgeu	r17,r2,800d24 <lossless_decode+0x418>
  800bb4:	180f883a 	mov	r7,r3
  800bb8:	900b883a 	mov	r5,r18
  800bbc:	8805883a 	mov	r2,r17
  800bc0:	02002074 	movhi	r8,129
  800bc4:	4210c704 	addi	r8,r8,17180
  800bc8:	19803fcc 	andi	r6,r3,255
                        pe[zigzag_table[index]] = 0;
  800bcc:	1085883a 	add	r2,r2,r2
  800bd0:	1085883a 	add	r2,r2,r2
  800bd4:	1205883a 	add	r2,r2,r8
  800bd8:	10c00017 	ldw	r3,0(r2)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800bdc:	29400044 	addi	r5,r5,1
  800be0:	28803fcc 	andi	r2,r5,255
                        pe[zigzag_table[index]] = 0;
  800be4:	18c7883a 	add	r3,r3,r3
  800be8:	1d07883a 	add	r3,r3,r20
  800bec:	1800000d 	sth	zero,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800bf0:	11bff61e 	bne	r2,r6,800bcc <lossless_decode+0x2c0>
  800bf4:	3805883a 	mov	r2,r7
  800bf8:	3825883a 	mov	r18,r7
  800bfc:	3c403fcc 	andi	r17,r7,255
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	1085883a 	add	r2,r2,r2
  800c08:	1085883a 	add	r2,r2,r2
  800c0c:	1205883a 	add	r2,r2,r8
  800c10:	14000017 	ldw	r16,0(r2)
  800c14:	8421883a 	add	r16,r16,r16
  800c18:	8705883a 	add	r2,r16,fp
  800c1c:	1140000b 	ldhu	r5,0(r2)
  800c20:	a421883a 	add	r16,r20,r16
  800c24:	0802b980 	call	802b98 <__mulsi3>
  800c28:	8080000d 	sth	r2,0(r16)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800c2c:	00800f84 	movi	r2,62
  800c30:	147fda2e 	bgeu	r2,r17,800b9c <lossless_decode+0x290>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800c34:	d8800017 	ldw	r2,0(sp)
  800c38:	d8c00217 	ldw	r3,8(sp)
  800c3c:	a5002004 	addi	r20,r20,128
  800c40:	10800044 	addi	r2,r2,1
  800c44:	d8800015 	stw	r2,0(sp)
  800c48:	18bf541e 	bne	r3,r2,80099c <lossless_decode+0x90>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800c4c:	dfc00c17 	ldw	ra,48(sp)
  800c50:	df000b17 	ldw	fp,44(sp)
  800c54:	ddc00a17 	ldw	r23,40(sp)
  800c58:	dd800917 	ldw	r22,36(sp)
  800c5c:	dd400817 	ldw	r21,32(sp)
  800c60:	dd000717 	ldw	r20,28(sp)
  800c64:	dcc00617 	ldw	r19,24(sp)
  800c68:	dc800517 	ldw	r18,20(sp)
  800c6c:	dc400417 	ldw	r17,16(sp)
  800c70:	dc000317 	ldw	r16,12(sp)
  800c74:	dec00d04 	addi	sp,sp,52
  800c78:	f800283a 	ret
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
  800c7c:	90800404 	addi	r2,r18,16
                        for(; index < terminal; index++)
  800c80:	11003fcc 	andi	r4,r2,255
  800c84:	94403fcc 	andi	r17,r18,255
  800c88:	893f6b2e 	bgeu	r17,r4,800a38 <lossless_decode+0x12c>
  800c8c:	02002074 	movhi	r8,129
  800c90:	4210c704 	addi	r8,r8,17180
                            pe[zigzag_table[index]] = 0;
  800c94:	8c45883a 	add	r2,r17,r17
  800c98:	1085883a 	add	r2,r2,r2
  800c9c:	1205883a 	add	r2,r2,r8
  800ca0:	10c00017 	ldw	r3,0(r2)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800ca4:	94800044 	addi	r18,r18,1
  800ca8:	94403fcc 	andi	r17,r18,255
                            pe[zigzag_table[index]] = 0;
  800cac:	18c7883a 	add	r3,r3,r3
  800cb0:	1d07883a 	add	r3,r3,r20
  800cb4:	1800000d 	sth	zero,0(r3)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800cb8:	893ff636 	bltu	r17,r4,800c94 <lossless_decode+0x388>
  800cbc:	003f5e06 	br	800a38 <lossless_decode+0x12c>
                            pe[zigzag_table[index]] = 0;
                    }
                }
                else {
                    //END
                    if(P == 0){
  800cc0:	d9c00d17 	ldw	r7,52(sp)
  800cc4:	383fdb1e 	bne	r7,zero,800c34 <lossless_decode+0x328>
                        //output all zeros
                        for(; index < 64; index++)
  800cc8:	94403fcc 	andi	r17,r18,255
  800ccc:	00800fc4 	movi	r2,63
  800cd0:	147fd836 	bltu	r2,r17,800c34 <lossless_decode+0x328>
  800cd4:	02002074 	movhi	r8,129
  800cd8:	4210c704 	addi	r8,r8,17180
  800cdc:	01001004 	movi	r4,64
                            pe[zigzag_table[index]] = 0;
  800ce0:	8c45883a 	add	r2,r17,r17
  800ce4:	1085883a 	add	r2,r2,r2
  800ce8:	1205883a 	add	r2,r2,r8
  800cec:	10c00017 	ldw	r3,0(r2)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800cf0:	94800044 	addi	r18,r18,1
  800cf4:	94403fcc 	andi	r17,r18,255
                            pe[zigzag_table[index]] = 0;
  800cf8:	18c7883a 	add	r3,r3,r3
  800cfc:	1d07883a 	add	r3,r3,r20
  800d00:	1800000d 	sth	zero,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800d04:	893ff61e 	bne	r17,r4,800ce0 <lossless_decode+0x3d4>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800d08:	d8800017 	ldw	r2,0(sp)
  800d0c:	d8c00217 	ldw	r3,8(sp)
  800d10:	a5002004 	addi	r20,r20,128
  800d14:	10800044 	addi	r2,r2,1
  800d18:	d8800015 	stw	r2,0(sp)
  800d1c:	18bf1f1e 	bne	r3,r2,80099c <lossless_decode+0x90>
  800d20:	003fca06 	br	800c4c <lossless_decode+0x340>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800d24:	9005883a 	mov	r2,r18
  800d28:	02002074 	movhi	r8,129
  800d2c:	4210c704 	addi	r8,r8,17180
  800d30:	003fb306 	br	800c00 <lossless_decode+0x2f4>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800d34:	9808913a 	slli	r4,r19,4
  800d38:	01c00804 	movi	r7,32
  800d3c:	3947c83a 	sub	r3,r7,r5
  800d40:	20c8d83a 	srl	r4,r4,r3
  800d44:	28bfffc4 	addi	r2,r5,-1
  800d48:	2084d83a 	srl	r2,r4,r2
  800d4c:	1000041e 	bne	r2,zero,800d60 <lossless_decode+0x454>
  800d50:	00bfffc4 	movi	r2,-1
  800d54:	1144983a 	sll	r2,r2,r5
  800d58:	10800044 	addi	r2,r2,1
  800d5c:	2089883a 	add	r4,r4,r2
  800d60:	30800104 	addi	r2,r6,4
  800d64:	10803fcc 	andi	r2,r2,255
  800d68:	003f1106 	br	8009b0 <lossless_decode+0xa4>
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  800d6c:	d8c0010b 	ldhu	r3,4(sp)
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800d70:	e140000b 	ldhu	r5,0(fp)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  800d74:	1905883a 	add	r2,r3,r4
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800d78:	1009883a 	mov	r4,r2
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  800d7c:	d880010d 	sth	r2,4(sp)
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800d80:	0802b980 	call	802b98 <__mulsi3>
  800d84:	a080000d 	sth	r2,0(r20)
  800d88:	003f2906 	br	800a30 <lossless_decode+0x124>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800d8c:	a88000c3 	ldbu	r2,3(r21)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800d90:	ad400104 	addi	r21,r21,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800d94:	98a6b03a 	or	r19,r19,r2
  800d98:	003f1f06 	br	800a18 <lossless_decode+0x10c>

00800d9c <mjpeg423_decode>:
int last_tested;
int frame_index;
int current_frame;

int mjpeg423_decode(const char* filename_in)
{
  800d9c:	deffbf04 	addi	sp,sp,-260
  800da0:	dc003715 	stw	r16,220(sp)
  800da4:	2021883a 	mov	r16,r4

    alt_up_pixel_buffer_dma_dev * pixel_buf_dev;
    //file streams
    FILE* file_in;

    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  800da8:	01002074 	movhi	r4,129
  800dac:	210ee804 	addi	r4,r4,15264
int last_tested;
int frame_index;
int current_frame;

int mjpeg423_decode(const char* filename_in)
{
  800db0:	dd803d15 	stw	r22,244(sp)
  800db4:	dfc04015 	stw	ra,256(sp)
  800db8:	df003f15 	stw	fp,252(sp)
  800dbc:	ddc03e15 	stw	r23,248(sp)
  800dc0:	dd403c15 	stw	r21,240(sp)
  800dc4:	dd003b15 	stw	r20,236(sp)
  800dc8:	dcc03a15 	stw	r19,232(sp)
  800dcc:	dc803915 	stw	r18,228(sp)
  800dd0:	dc403815 	stw	r17,224(sp)

    alt_up_pixel_buffer_dma_dev * pixel_buf_dev;
    //file streams
    FILE* file_in;

    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  800dd4:	080dd000 	call	80dd00 <alt_up_pixel_buffer_dma_open_dev>
  800dd8:	102d883a 	mov	r22,r2
    if ( pixel_buf_dev == NULL){
  800ddc:	1001da26 	beq	r2,zero,801548 <mjpeg423_decode+0x7ac>
    	error_and_exit ("Error: could not open pixel buffer device \n");
    }
    alt_timestamp_start();
  800de0:	080d28c0 	call	80d28c <alt_timestamp_start>
    short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
  800de4:	8009883a 	mov	r4,r16
  800de8:	000b883a 	mov	r5,zero
  800dec:	0812dac0 	call	812dac <alt_up_sd_card_fopen>
	if(file_handle == -1){
  800df0:	10bfffcc 	andi	r2,r2,65535
  800df4:	10a0001c 	xori	r2,r2,32768
  800df8:	10a00004 	addi	r2,r2,-32768
  800dfc:	d8803315 	stw	r2,204(sp)
  800e00:	d8c03317 	ldw	r3,204(sp)
  800e04:	00bfffc4 	movi	r2,-1
  800e08:	1881be26 	beq	r3,r2,801504 <mjpeg423_decode+0x768>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if(!sd_card_create_sectors_list(file_handle)){
  800e0c:	d9003317 	ldw	r4,204(sp)
  800e10:	0801a8c0 	call	801a8c <sd_card_create_sectors_list>
  800e14:	1001b726 	beq	r2,zero,8014f4 <mjpeg423_decode+0x758>
		error_and_exit("Cannot create sectors list\n");
	}

	//create filebuffer to hold entire file
	printf("File size: %d\n",sd_card_file_size(file_handle));
  800e18:	d9003317 	ldw	r4,204(sp)
  800e1c:	08019cc0 	call	8019cc <sd_card_file_size>
  800e20:	100b883a 	mov	r5,r2
  800e24:	01002074 	movhi	r4,129
  800e28:	210f0704 	addi	r4,r4,15388
  800e2c:	0803be80 	call	803be8 <printf>

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
  800e30:	d9003317 	ldw	r4,204(sp)
  800e34:	08019cc0 	call	8019cc <sd_card_file_size>
	if((filebuffer = malloc(5*512)) == NULL){
  800e38:	01028004 	movi	r4,2560
  800e3c:	08033fc0 	call	8033fc <malloc>
  800e40:	d8803415 	stw	r2,208(sp)
  800e44:	1001b826 	beq	r2,zero,801528 <mjpeg423_decode+0x78c>
	}

	//read all sectors into the filebuffer
	uint8_t* pos = filebuffer;
	int sd_bytes_read = 0;
	sd_seek(0);
  800e48:	0009883a 	mov	r4,zero
  800e4c:	08019b40 	call	8019b4 <sd_seek>
    frame_counter = alt_timestamp();
  800e50:	080d2d40 	call	80d2d4 <alt_timestamp>
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
  800e54:	100b883a 	mov	r5,r2
  800e58:	01002074 	movhi	r4,129
  800e5c:	210f1204 	addi	r4,r4,15432
  800e60:	0803be80 	call	803be8 <printf>
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
  800e64:	d9003417 	ldw	r4,208(sp)
  800e68:	01400504 	movi	r5,20
  800e6c:	0801c4c0 	call	801c4c <sd_read>
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800e70:	d9003417 	ldw	r4,208(sp)
    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800e74:	d9403417 	ldw	r5,208(sp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800e78:	d9c03417 	ldw	r7,208(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800e7c:	dac03417 	ldw	r11,208(sp)
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800e80:	20c00104 	addi	r3,r4,4
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800e84:	20800204 	addi	r2,r4,8
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800e88:	21000304 	addi	r4,r4,12
  800e8c:	23800043 	ldbu	r14,1(r4)
  800e90:	23c00083 	ldbu	r15,2(r4)
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800e94:	1a400043 	ldbu	r9,1(r3)
  800e98:	1a800083 	ldbu	r10,2(r3)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800e9c:	13000043 	ldbu	r12,1(r2)
  800ea0:	13400083 	ldbu	r13,2(r2)
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800ea4:	1c0000c3 	ldbu	r16,3(r3)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800ea8:	144000c3 	ldbu	r17,3(r2)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800eac:	248000c3 	ldbu	r18,3(r4)
    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800eb0:	28800003 	ldbu	r2,0(r5)
  800eb4:	28c00043 	ldbu	r3,1(r5)
  800eb8:	29000083 	ldbu	r4,2(r5)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800ebc:	39800103 	ldbu	r6,4(r7)
    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800ec0:	294000c3 	ldbu	r5,3(r5)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800ec4:	39c00203 	ldbu	r7,8(r7)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800ec8:	5a000303 	ldbu	r8,12(r11)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800ecc:	5ac00403 	ldbu	r11,16(r11)
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800ed0:	da400445 	stb	r9,17(sp)
  800ed4:	da800485 	stb	r10,18(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800ed8:	db000545 	stb	r12,21(sp)
  800edc:	db400585 	stb	r13,22(sp)
    frame_counter = alt_timestamp();
	DEBUG_PRINT_ARG("TIMER READ SD CARD: %u\n", frame_counter);
	HORRRIBLE_LABEL:
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
  800ee0:	d8800305 	stb	r2,12(sp)
  800ee4:	d8c00345 	stb	r3,13(sp)
  800ee8:	d9000385 	stb	r4,14(sp)
  800eec:	d94003c5 	stb	r5,15(sp)
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
  800ef0:	d9800405 	stb	r6,16(sp)
  800ef4:	dc0004c5 	stb	r16,19(sp)
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
  800ef8:	d9c00505 	stb	r7,20(sp)
  800efc:	dc4005c5 	stb	r17,23(sp)
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800f00:	da000605 	stb	r8,24(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800f04:	dcc03417 	ldw	r19,208(sp)
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800f08:	db800645 	stb	r14,25(sp)
  800f0c:	dbc00685 	stb	r15,26(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800f10:	dac00705 	stb	r11,28(sp)
	sd_bytes_read = sd_read(pos, HEADER_OFFSET);
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
  800f14:	dc8006c5 	stb	r18,27(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800f18:	98800404 	addi	r2,r19,16
  800f1c:	11c000c3 	ldbu	r7,3(r2)
  800f20:	10c00043 	ldbu	r3,1(r2)
  800f24:	11800083 	ldbu	r6,2(r2)
    
    DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
  800f28:	d9400317 	ldw	r5,12(sp)
  800f2c:	01002074 	movhi	r4,129
  800f30:	210f1804 	addi	r4,r4,15456
    //read header
    memcpy(&num_frames, filebuffer, sizeof(uint32_t));
    memcpy(&w_size, filebuffer+4, sizeof(uint32_t));
    memcpy(&h_size, filebuffer+8, sizeof(uint32_t));
    memcpy(&num_iframes, filebuffer+12, sizeof(uint32_t));
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
  800f34:	d8c00745 	stb	r3,29(sp)
  800f38:	d9800785 	stb	r6,30(sp)
  800f3c:	d9c007c5 	stb	r7,31(sp)
    
    DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
  800f40:	0803be80 	call	803be8 <printf>
    DEBUG_PRINT_ARG("payload_size: %u\n", payload_size)
  800f44:	d9400717 	ldw	r5,28(sp)
  800f48:	01002074 	movhi	r4,129
  800f4c:	210f1c04 	addi	r4,r4,15472
  800f50:	0803be80 	call	803be8 <printf>
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);
  800f54:	d9000617 	ldw	r4,24(sp)
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
    
    DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
    DEBUG_PRINT_ARG("payload_size: %u\n", payload_size)

    int hCb_size = h_size/8;           //number of chrominance blocks
  800f58:	dc400517 	ldw	r17,20(sp)
    int wCb_size = w_size/8;
  800f5c:	d8800417 	ldw	r2,16(sp)
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);
  800f60:	200890fa 	slli	r4,r4,3
    memcpy(&payload_size, filebuffer+16, sizeof(uint32_t));
    
    DEBUG_PRINT_ARG("num_frames: %u\n", num_frames);
    DEBUG_PRINT_ARG("payload_size: %u\n", payload_size)

    int hCb_size = h_size/8;           //number of chrominance blocks
  800f64:	8822d0fa 	srli	r17,r17,3
    int wCb_size = w_size/8;
  800f68:	102ad0fa 	srli	r21,r2,3
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);
  800f6c:	08033fc0 	call	8033fc <malloc>
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  800f70:	8809883a 	mov	r4,r17
  800f74:	a80b883a 	mov	r5,r21
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);
  800f78:	d8803215 	stw	r2,200(sp)
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  800f7c:	0802b980 	call	802b98 <__mulsi3>
  800f80:	102291ba 	slli	r17,r2,6
  800f84:	1029883a 	mov	r20,r2
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    //trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);
  800f88:	dc003217 	ldw	r16,200(sp)
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  800f8c:	8809883a 	mov	r4,r17
  800f90:	08033fc0 	call	8033fc <malloc>
  800f94:	102f883a 	mov	r23,r2
  800f98:	10016726 	beq	r2,zero,801538 <mjpeg423_decode+0x79c>
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
  800f9c:	8809883a 	mov	r4,r17
  800fa0:	08033fc0 	call	8033fc <malloc>
  800fa4:	1039883a 	mov	fp,r2
  800fa8:	10017326 	beq	r2,zero,801578 <mjpeg423_decode+0x7dc>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
  800fac:	8809883a 	mov	r4,r17
  800fb0:	08033fc0 	call	8033fc <malloc>
  800fb4:	d8802f15 	stw	r2,188(sp)
  800fb8:	10017326 	beq	r2,zero,801588 <mjpeg423_decode+0x7ec>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
  800fbc:	a02291fa 	slli	r17,r20,7
  800fc0:	8809883a 	mov	r4,r17
  800fc4:	08033fc0 	call	8033fc <malloc>
  800fc8:	d8802d15 	stw	r2,180(sp)
  800fcc:	10017226 	beq	r2,zero,801598 <mjpeg423_decode+0x7fc>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
  800fd0:	8809883a 	mov	r4,r17
  800fd4:	08033fc0 	call	8033fc <malloc>
  800fd8:	d8802e15 	stw	r2,184(sp)
  800fdc:	10017226 	beq	r2,zero,8015a8 <mjpeg423_decode+0x80c>
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
  800fe0:	8809883a 	mov	r4,r17
  800fe4:	08033fc0 	call	8033fc <malloc>
  800fe8:	d8803015 	stw	r2,192(sp)
  800fec:	10015a26 	beq	r2,zero,801558 <mjpeg423_decode+0x7bc>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
  800ff0:	a509883a 	add	r4,r20,r20
  800ff4:	2509883a 	add	r4,r4,r20
  800ff8:	200891fa 	slli	r4,r4,7
  800ffc:	08033fc0 	call	8033fc <malloc>
  801000:	d8803515 	stw	r2,212(sp)
  801004:	10015826 	beq	r2,zero,801568 <mjpeg423_decode+0x7cc>
    uint8_t* Crbitstream;
    
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    sd_seek(HEADER_OFFSET + payload_size);
  801008:	d9000717 	ldw	r4,28(sp)
  80100c:	21000504 	addi	r4,r4,20
  801010:	08019b40 	call	8019b4 <sd_seek>
    int trailer_counter = 0;
    for(int count = 0; count < num_iframes; count++){
  801014:	d8c00617 	ldw	r3,24(sp)
  801018:	18001326 	beq	r3,zero,801068 <mjpeg423_decode+0x2cc>
  80101c:	0023883a 	mov	r17,zero
    	sd_bytes_read = sd_read(&(trailer[count].frame_index), sizeof(uint32_t));
  801020:	8009883a 	mov	r4,r16
  801024:	01400104 	movi	r5,4
  801028:	0801c4c0 	call	801c4c <sd_read>
    	sd_bytes_read = sd_read(&(trailer[count].frame_position), sizeof(uint32_t));
  80102c:	81000104 	addi	r4,r16,4
  801030:	01400104 	movi	r5,4
  801034:	0801c4c0 	call	801c4c <sd_read>
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  801038:	81400017 	ldw	r5,0(r16)
  80103c:	01002074 	movhi	r4,129
  801040:	210f4c04 	addi	r4,r4,15664
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    sd_seek(HEADER_OFFSET + payload_size);
    int trailer_counter = 0;
    for(int count = 0; count < num_iframes; count++){
  801044:	8c400044 	addi	r17,r17,1
    	sd_bytes_read = sd_read(&(trailer[count].frame_index), sizeof(uint32_t));
    	sd_bytes_read = sd_read(&(trailer[count].frame_position), sizeof(uint32_t));
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
  801048:	0803be80 	call	803be8 <printf>
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  80104c:	81400117 	ldw	r5,4(r16)
  801050:	01002074 	movhi	r4,129
  801054:	210f5104 	addi	r4,r4,15684
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    sd_seek(HEADER_OFFSET + payload_size);
    int trailer_counter = 0;
    for(int count = 0; count < num_iframes; count++){
  801058:	84000204 	addi	r16,r16,8
    	sd_bytes_read = sd_read(&(trailer[count].frame_index), sizeof(uint32_t));
    	sd_bytes_read = sd_read(&(trailer[count].frame_position), sizeof(uint32_t));
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
  80105c:	0803be80 	call	803be8 <printf>
    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    sd_seek(HEADER_OFFSET + payload_size);
    int trailer_counter = 0;
    for(int count = 0; count < num_iframes; count++){
  801060:	d8c00617 	ldw	r3,24(sp)
  801064:	88ffee36 	bltu	r17,r3,801020 <mjpeg423_decode+0x284>
  						 {0, 0, 0, 100, 0, 0, 0, 0},
  						 {0, 0, 0, 0, 100, 0, 0, 0},
  						 {0, 0, 0, 0, 0, 100, 0, 0},
  						 {0, 0, 0, 0, 0, 0, 100, 0},
  						 {0, 0, 0, 0, 0, 0, 0, 100}
  				 };
  801068:	dc400c04 	addi	r17,sp,48
  80106c:	8809883a 	mov	r4,r17
  801070:	000b883a 	mov	r5,zero
  801074:	01802004 	movi	r6,128
  801078:	0803b500 	call	803b50 <memset>
  80107c:	00801904 	movi	r2,100
  	 idct(DCAC, Yblock[0]);
  801080:	8809883a 	mov	r4,r17
  801084:	b80b883a 	mov	r5,r23
  						 {0, 0, 0, 100, 0, 0, 0, 0},
  						 {0, 0, 0, 0, 100, 0, 0, 0},
  						 {0, 0, 0, 0, 0, 100, 0, 0},
  						 {0, 0, 0, 0, 0, 0, 100, 0},
  						 {0, 0, 0, 0, 0, 0, 0, 100}
  				 };
  801088:	d8802b8d 	sth	r2,174(sp)
  80108c:	d8800c0d 	sth	r2,48(sp)
  801090:	d880108d 	sth	r2,66(sp)
  801094:	d880150d 	sth	r2,84(sp)
  801098:	d880198d 	sth	r2,102(sp)
  80109c:	d8801e0d 	sth	r2,120(sp)
  8010a0:	d880228d 	sth	r2,138(sp)
  8010a4:	d880270d 	sth	r2,156(sp)
  	 idct(DCAC, Yblock[0]);
  8010a8:	08004780 	call	800478 <idct>
  8010ac:	00800504 	movi	r2,20
  8010b0:	a0c00050 	cmplti	r3,r20,1
  8010b4:	d8803115 	stw	r2,196(sp)
  8010b8:	d8c03615 	stw	r3,216(sp)


    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  8010bc:	d8800717 	ldw	r2,28(sp)
  8010c0:	da003117 	ldw	r8,196(sp)
  8010c4:	4080d02e 	bgeu	r8,r2,801408 <mjpeg423_decode+0x66c>
				if(getNextFile){
  8010c8:	d0a75d17 	ldw	r2,-25228(gp)
  8010cc:	1000ce1e 	bne	r2,zero,801408 <mjpeg423_decode+0x66c>
    				break;
    	    	}
    	    	if(fastForward){
  8010d0:	d0a75b17 	ldw	r2,-25236(gp)
  8010d4:	10001a26 	beq	r2,zero,801140 <mjpeg423_decode+0x3a4>
    	    		fastForward = 0;
    	    		int index = 0;
    	    		for(int i=0; i< num_iframes; i++){
  8010d8:	d9c00617 	ldw	r7,24(sp)
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
				if(getNextFile){
    				break;
    	    	}
    	    	if(fastForward){
    	    		fastForward = 0;
  8010dc:	d0275b15 	stw	zero,-25236(gp)
    	    		int index = 0;
    	    		for(int i=0; i< num_iframes; i++){
  8010e0:	38000e26 	beq	r7,zero,80111c <mjpeg423_decode+0x380>
    	    			if( trailer[i].frame_index >= (current_frame + 226) ) {
  8010e4:	d9003217 	ldw	r4,200(sp)
  8010e8:	d0a75e17 	ldw	r2,-25224(gp)
  8010ec:	20c00017 	ldw	r3,0(r4)
  8010f0:	11803884 	addi	r6,r2,226
  8010f4:	1980092e 	bgeu	r3,r6,80111c <mjpeg423_decode+0x380>
  8010f8:	21400204 	addi	r5,r4,8
  8010fc:	0009883a 	mov	r4,zero
  801100:	00000206 	br	80110c <mjpeg423_decode+0x370>
  801104:	18800017 	ldw	r2,0(r3)
  801108:	1180062e 	bgeu	r2,r6,801124 <mjpeg423_decode+0x388>
    				break;
    	    	}
    	    	if(fastForward){
    	    		fastForward = 0;
    	    		int index = 0;
    	    		for(int i=0; i< num_iframes; i++){
  80110c:	21000044 	addi	r4,r4,1
    	    			if( trailer[i].frame_index >= (current_frame + 226) ) {
  801110:	2807883a 	mov	r3,r5
  801114:	29400204 	addi	r5,r5,8
    				break;
    	    	}
    	    	if(fastForward){
    	    		fastForward = 0;
    	    		int index = 0;
    	    		for(int i=0; i< num_iframes; i++){
  801118:	21fffa1e 	bne	r4,r7,801104 <mjpeg423_decode+0x368>
  80111c:	d8c03217 	ldw	r3,200(sp)
  801120:	18800017 	ldw	r2,0(r3)
    	    			if( trailer[i].frame_index >= (current_frame + 226) ) {
    	    				index = i;
    	    				break;
    	    			}
    				}
    				frame_byte_counter = trailer[index].frame_position;
  801124:	18c00117 	ldw	r3,4(r3)
    				current_frame = trailer[index].frame_index;
    				DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
  801128:	01002074 	movhi	r4,129
  80112c:	210f5504 	addi	r4,r4,15700
  801130:	100b883a 	mov	r5,r2
    	    			if( trailer[i].frame_index >= (current_frame + 226) ) {
    	    				index = i;
    	    				break;
    	    			}
    				}
    				frame_byte_counter = trailer[index].frame_position;
  801134:	d8c03115 	stw	r3,196(sp)
    				current_frame = trailer[index].frame_index;
  801138:	d0a75e15 	stw	r2,-25224(gp)
    				DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
  80113c:	0803be80 	call	803be8 <printf>
    			}
    			if (backward) {
  801140:	d0a75a17 	ldw	r2,-25240(gp)
  801144:	10000e26 	beq	r2,zero,801180 <mjpeg423_decode+0x3e4>
    				unsigned int magic = 0;
    				backward = 0;
    				int index = num_iframes - 1;
    				if(current_frame < 240){
  801148:	d1275e17 	ldw	r4,-25224(gp)
  80114c:	00803bc4 	movi	r2,239
    				current_frame = trailer[index].frame_index;
    				DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
    			}
    			if (backward) {
    				unsigned int magic = 0;
    				backward = 0;
  801150:	d0275a15 	stw	zero,-25240(gp)
    				int index = num_iframes - 1;
  801154:	d9400617 	ldw	r5,24(sp)
    				if(current_frame < 240){
  801158:	1100d016 	blt	r2,r4,80149c <mjpeg423_decode+0x700>
  80115c:	d9803217 	ldw	r6,200(sp)
  801160:	32000017 	ldw	r8,0(r6)
    						break;
    					}
    				}
    				}

    				frame_byte_counter = trailer[index].frame_position;
  801164:	31800117 	ldw	r6,4(r6)
    				current_frame = trailer[index].frame_index;
    				DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
  801168:	400b883a 	mov	r5,r8
  80116c:	01002074 	movhi	r4,129
  801170:	210f5504 	addi	r4,r4,15700
    						break;
    					}
    				}
    				}

    				frame_byte_counter = trailer[index].frame_position;
  801174:	d9803115 	stw	r6,196(sp)
    				current_frame = trailer[index].frame_index;
  801178:	d2275e15 	stw	r8,-25224(gp)
    				DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
  80117c:	0803be80 	call	803be8 <printf>
    			}
    	if(!playing){
  801180:	d0a75917 	ldw	r2,-25244(gp)
  801184:	103fcd26 	beq	r2,zero,8010bc <mjpeg423_decode+0x320>
    	}


        //DEBUG_PRINT_ARG("\nFrame #%u\n",)
        //read frame payload
        alt_timestamp_start();
  801188:	080d28c0 	call	80d28c <alt_timestamp_start>
        sd_seek(frame_byte_counter);
  80118c:	d9003117 	ldw	r4,196(sp)
  801190:	08019b40 	call	8019b4 <sd_seek>
        sd_bytes_read = sd_read(&(frame_size), sizeof(uint32_t));
  801194:	01400104 	movi	r5,4
  801198:	d9000a04 	addi	r4,sp,40
  80119c:	0801c4c0 	call	801c4c <sd_read>
		//memcpy(&(frame_size), filebuffer+frame_byte_counter, sizeof(uint32_t));
        frame_byte_counter+=sizeof(uint32_t);
        DEBUG_PRINT_ARG("Frame_size: %u\n",frame_size)
  8011a0:	d9400a17 	ldw	r5,40(sp)
  8011a4:	01002074 	movhi	r4,129
  8011a8:	210f5904 	addi	r4,r4,15716
  8011ac:	0803be80 	call	803be8 <printf>
        //sd_seek(frame_byte_counter);
        sd_bytes_read = sd_read(&(frame_type), sizeof(uint32_t));
  8011b0:	d9000b04 	addi	r4,sp,44
  8011b4:	01400104 	movi	r5,4
  8011b8:	0801c4c0 	call	801c4c <sd_read>
        DEBUG_PRINT_ARG("Frame_type: %u\n",frame_type)
  8011bc:	d9400b17 	ldw	r5,44(sp)
  8011c0:	01002074 	movhi	r4,129
  8011c4:	210f5d04 	addi	r4,r4,15732
  8011c8:	0803be80 	call	803be8 <printf>
		//memcpy(&(frame_type), filebuffer+frame_byte_counter, sizeof(uint32_t));

        frame_byte_counter+=sizeof(uint32_t);
        //sd_seek(frame_byte_counter);
        sd_bytes_read = sd_read(&(Ysize), sizeof(uint32_t));
  8011cc:	d9000804 	addi	r4,sp,32
  8011d0:	01400104 	movi	r5,4
  8011d4:	0801c4c0 	call	801c4c <sd_read>
		//memcpy(&(Ysize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		//sd_seek(frame_byte_counter);
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
  8011d8:	d9000904 	addi	r4,sp,36
  8011dc:	01400104 	movi	r5,4
  8011e0:	0801c4c0 	call	801c4c <sd_read>
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream,  frame_size - 4 * sizeof(uint32_t));
  8011e4:	d9400a17 	ldw	r5,40(sp)
  8011e8:	d9003517 	ldw	r4,212(sp)
  8011ec:	297ffc04 	addi	r5,r5,-16
  8011f0:	0801c4c0 	call	801c4c <sd_read>
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8011f4:	dcc00a17 	ldw	r19,40(sp)

        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
  8011f8:	dc400817 	ldw	r17,32(sp)
  8011fc:	d8803517 	ldw	r2,212(sp)
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream,  frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  801200:	dcc02c15 	stw	r19,176(sp)

        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
  801204:	dcc00917 	ldw	r19,36(sp)
		sd_bytes_read = sd_read(Ybitstream,  frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));

        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
  801208:	1463883a 	add	r17,r2,r17
        Crbitstream = Cbbitstream + Cbsize;

        //lossless decoding
        alt_timestamp_start();
  80120c:	080d28c0 	call	80d28c <alt_timestamp_start>
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
  801210:	d9802d17 	ldw	r6,180(sp)
  801214:	d9403517 	ldw	r5,212(sp)
  801218:	d8800b17 	ldw	r2,44(sp)
  80121c:	01c02074 	movhi	r7,129
  801220:	39d08704 	addi	r7,r7,16924
  801224:	a009883a 	mov	r4,r20
  801228:	d8800015 	stw	r2,0(sp)
  80122c:	080090c0 	call	80090c <lossless_decode>
        frame_counter = alt_timestamp();
  801230:	080d2d40 	call	80d2d4 <alt_timestamp>
        DEBUG_PRINT_ARG("TIMER DECODE Y-stream: %u\n", frame_counter);
  801234:	100b883a 	mov	r5,r2
  801238:	01002074 	movhi	r4,129
  80123c:	210f6104 	addi	r4,r4,15748
  801240:	0803be80 	call	803be8 <printf>
        alt_timestamp_start();
  801244:	080d28c0 	call	80d28c <alt_timestamp_start>
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
  801248:	d9802e17 	ldw	r6,184(sp)
  80124c:	d8800b17 	ldw	r2,44(sp)
  801250:	01c02074 	movhi	r7,129
  801254:	39d0a704 	addi	r7,r7,17052
  801258:	880b883a 	mov	r5,r17
  80125c:	a009883a 	mov	r4,r20
  801260:	d8800015 	stw	r2,0(sp)
  801264:	080090c0 	call	80090c <lossless_decode>
        frame_counter = alt_timestamp();
  801268:	080d2d40 	call	80d2d4 <alt_timestamp>
        DEBUG_PRINT_ARG("TIMER DECODE Cb-stream: %u\n", frame_counter);
  80126c:	100b883a 	mov	r5,r2
  801270:	01002074 	movhi	r4,129
  801274:	210f6804 	addi	r4,r4,15776
  801278:	0803be80 	call	803be8 <printf>
        alt_timestamp_start();
  80127c:	080d28c0 	call	80d28c <alt_timestamp_start>
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
  801280:	d9803017 	ldw	r6,192(sp)
  801284:	d8800b17 	ldw	r2,44(sp)
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));

        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
  801288:	8ce7883a 	add	r19,r17,r19
        alt_timestamp_start();
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER DECODE Cb-stream: %u\n", frame_counter);
        alt_timestamp_start();
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
  80128c:	01c02074 	movhi	r7,129
  801290:	39d0a704 	addi	r7,r7,17052
  801294:	980b883a 	mov	r5,r19
  801298:	a009883a 	mov	r4,r20
  80129c:	d8800015 	stw	r2,0(sp)
  8012a0:	080090c0 	call	80090c <lossless_decode>
        frame_counter = alt_timestamp();
  8012a4:	080d2d40 	call	80d2d4 <alt_timestamp>
        DEBUG_PRINT_ARG("TIMER DECODE Cr-stream: %u\n", frame_counter);
  8012a8:	100b883a 	mov	r5,r2
  8012ac:	01002074 	movhi	r4,129
  8012b0:	210f6f04 	addi	r4,r4,15804
  8012b4:	0803be80 	call	803be8 <printf>

        alt_timestamp_start();
  8012b8:	080d28c0 	call	80d28c <alt_timestamp_start>
        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
  8012bc:	d8c03617 	ldw	r3,216(sp)
  8012c0:	18001e1e 	bne	r3,zero,80133c <mjpeg423_decode+0x5a0>
  8012c4:	dc402d17 	ldw	r17,180(sp)
  8012c8:	b821883a 	mov	r16,r23
  8012cc:	0025883a 	mov	r18,zero
  8012d0:	8809883a 	mov	r4,r17
  8012d4:	800b883a 	mov	r5,r16
  8012d8:	94800044 	addi	r18,r18,1
  8012dc:	08004780 	call	800478 <idct>
  8012e0:	8c402004 	addi	r17,r17,128
  8012e4:	84001004 	addi	r16,r16,64
  8012e8:	a4bff91e 	bne	r20,r18,8012d0 <mjpeg423_decode+0x534>
  8012ec:	dc402e17 	ldw	r17,184(sp)
  8012f0:	e021883a 	mov	r16,fp
  8012f4:	0025883a 	mov	r18,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
  8012f8:	8809883a 	mov	r4,r17
  8012fc:	800b883a 	mov	r5,r16
  801300:	94800044 	addi	r18,r18,1
  801304:	08004780 	call	800478 <idct>
  801308:	8c402004 	addi	r17,r17,128
  80130c:	84001004 	addi	r16,r16,64
  801310:	a4bff91e 	bne	r20,r18,8012f8 <mjpeg423_decode+0x55c>
  801314:	dc403017 	ldw	r17,192(sp)
  801318:	dc002f17 	ldw	r16,188(sp)
  80131c:	0025883a 	mov	r18,zero
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
  801320:	8809883a 	mov	r4,r17
  801324:	800b883a 	mov	r5,r16
  801328:	94800044 	addi	r18,r18,1
  80132c:	08004780 	call	800478 <idct>
  801330:	8c402004 	addi	r17,r17,128
  801334:	84001004 	addi	r16,r16,64
  801338:	953ff916 	blt	r18,r20,801320 <mjpeg423_decode+0x584>
        frame_counter = alt_timestamp();
  80133c:	080d2d40 	call	80d2d4 <alt_timestamp>
        DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
  801340:	100b883a 	mov	r5,r2
  801344:	01002074 	movhi	r4,129
  801348:	210f7604 	addi	r4,r4,15832
  80134c:	0803be80 	call	803be8 <printf>
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
  801350:	b009883a 	mov	r4,r22
  801354:	080dcc80 	call	80dcc8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  801358:	103ffd1e 	bne	r2,zero,801350 <mjpeg423_decode+0x5b4>
        alt_timestamp_start();
  80135c:	080d28c0 	call	80d28c <alt_timestamp_start>
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  801360:	d9003617 	ldw	r4,216(sp)
  801364:	2000171e 	bne	r4,zero,8013c4 <mjpeg423_decode+0x628>
  801368:	0025883a 	mov	r18,zero
  80136c:	0021883a 	mov	r16,zero
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  801370:	9563283a 	div	r17,r18,r21
  801374:	8809883a 	mov	r4,r17
  801378:	a80b883a 	mov	r5,r21
  80137c:	0802b980 	call	802b98 <__mulsi3>
  801380:	d9402f17 	ldw	r5,188(sp)
  801384:	8707883a 	add	r3,r16,fp
  801388:	9085c83a 	sub	r2,r18,r2
  80138c:	8149883a 	add	r4,r16,r5
  801390:	d9000115 	stw	r4,4(sp)
  801394:	d8c00015 	stw	r3,0(sp)
  801398:	882290fa 	slli	r17,r17,3
  80139c:	100a90fa 	slli	r5,r2,3
  8013a0:	d9800417 	ldw	r6,16(sp)
  8013a4:	b0800c17 	ldw	r2,48(r22)
  8013a8:	bc0f883a 	add	r7,r23,r16
  8013ac:	8809883a 	mov	r4,r17
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        alt_timestamp_start();
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  8013b0:	94800044 	addi	r18,r18,1
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  8013b4:	d8800215 	stw	r2,8(sp)
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        alt_timestamp_start();
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  8013b8:	84001004 	addi	r16,r16,64
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  8013bc:	08015d00 	call	8015d0 <ycbcr_to_rgb>
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER IDCT: %u\n", frame_counter);
        //ybcbr to rgb conversion
        while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
        alt_timestamp_start();
        for(int b = 0; b < hCb_size*wCb_size; b++) 
  8013c0:	a4bfeb1e 	bne	r20,r18,801370 <mjpeg423_decode+0x5d4>
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));

        frame_counter = alt_timestamp();
  8013c4:	080d2d40 	call	80d2d4 <alt_timestamp>
        DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);
  8013c8:	100b883a 	mov	r5,r2
  8013cc:	01002074 	movhi	r4,129
  8013d0:	210f7a04 	addi	r4,r4,15848
  8013d4:	0803be80 	call	803be8 <printf>
        
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  8013d8:	b009883a 	mov	r4,r22
  8013dc:	080dbb00 	call	80dbb0 <alt_up_pixel_buffer_dma_swap_buffers>
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream,  frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8013e0:	d9803117 	ldw	r6,196(sp)
  8013e4:	d9c02c17 	ldw	r7,176(sp)
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);
        
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);

		current_frame++;
  8013e8:	d0a75e17 	ldw	r2,-25224(gp)
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream,  frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8013ec:	31cd883a 	add	r6,r6,r7
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);
        
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);

		current_frame++;
  8013f0:	10800044 	addi	r2,r2,1
		sd_bytes_read = sd_read(&(Cbsize), sizeof(uint32_t));
		//memcpy(&(Cbsize), filebuffer+frame_byte_counter, sizeof(uint32_t));
		frame_byte_counter+=sizeof(uint32_t);
		sd_bytes_read = sd_read(Ybitstream,  frame_size - 4 * sizeof(uint32_t));
		//memcpy(Ybitstream, filebuffer+frame_byte_counter,);
		frame_byte_counter += (frame_size - 4 * sizeof(uint32_t));
  8013f4:	d9803115 	stw	r6,196(sp)
        frame_counter = alt_timestamp();
        DEBUG_PRINT_ARG("TIMER YCBCR->RGB/DRAW FRAME: %u\n", frame_counter);
        
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);

		current_frame++;
  8013f8:	d0a75e15 	stw	r2,-25224(gp)
  				 };
  	 idct(DCAC, Yblock[0]);


    //read and decode frames
    for(int frame_byte_counter = HEADER_OFFSET; frame_byte_counter < payload_size;){
  8013fc:	da003117 	ldw	r8,196(sp)
  801400:	d8800717 	ldw	r2,28(sp)
  801404:	40bf3036 	bltu	r8,r2,8010c8 <mjpeg423_decode+0x32c>
		//DEBUG_PRINT_ARG("current frame: %u\n",current_frame)
    } //end frame iteration
    
    
    //close down
    alt_up_sd_card_fclose(file_handle);
  801408:	d9003317 	ldw	r4,204(sp)
  80140c:	080f23c0 	call	80f23c <alt_up_sd_card_fclose>
    free(Yblock);
  801410:	b809883a 	mov	r4,r23
  801414:	08033e80 	call	8033e8 <free>
    free(Cbblock);
  801418:	e009883a 	mov	r4,fp
  80141c:	08033e80 	call	8033e8 <free>
    free(Crblock);
  801420:	d9002f17 	ldw	r4,188(sp)
  801424:	08033e80 	call	8033e8 <free>
    free(YDCAC);
  801428:	d9002d17 	ldw	r4,180(sp)
  80142c:	08033e80 	call	8033e8 <free>
    free(CbDCAC);
  801430:	d9002e17 	ldw	r4,184(sp)
  801434:	08033e80 	call	8033e8 <free>
    free(CrDCAC);
  801438:	d9003017 	ldw	r4,192(sp)
  80143c:	08033e80 	call	8033e8 <free>
    free(Ybitstream);
  801440:	d9003517 	ldw	r4,212(sp)
  801444:	08033e80 	call	8033e8 <free>
    free(filebuffer);
  801448:	d9003417 	ldw	r4,208(sp)
  80144c:	08033e80 	call	8033e8 <free>
    if(getNextFile){
  801450:	d0a75d17 	ldw	r2,-25228(gp)
  801454:	1000581e 	bne	r2,zero,8015b8 <mjpeg423_decode+0x81c>
        DEBUG_PRINT("\nSwitch to next file.\n\n\n")
    	getNextFile = 0;
    	return -1;
    }else{
        DEBUG_PRINT("\nDecoder done.\n\n\n")
  801458:	01002074 	movhi	r4,129
  80145c:	210f8904 	addi	r4,r4,15908
  801460:	0803d240 	call	803d24 <puts>
        		playing = 0;
  801464:	0005883a 	mov	r2,zero
  801468:	d0275915 	stw	zero,-25244(gp)
        return 0;
    }
}
  80146c:	dfc04017 	ldw	ra,256(sp)
  801470:	df003f17 	ldw	fp,252(sp)
  801474:	ddc03e17 	ldw	r23,248(sp)
  801478:	dd803d17 	ldw	r22,244(sp)
  80147c:	dd403c17 	ldw	r21,240(sp)
  801480:	dd003b17 	ldw	r20,236(sp)
  801484:	dcc03a17 	ldw	r19,232(sp)
  801488:	dc803917 	ldw	r18,228(sp)
  80148c:	dc403817 	ldw	r17,224(sp)
  801490:	dc003717 	ldw	r16,220(sp)
  801494:	dec04104 	addi	sp,sp,260
  801498:	f800283a 	ret
    				DEBUG_PRINT_ARG("\nFrame: #%u\n",current_frame)
    			}
    			if (backward) {
    				unsigned int magic = 0;
    				backward = 0;
    				int index = num_iframes - 1;
  80149c:	28ffffc4 	addi	r3,r5,-1
    				if(current_frame < 240){
    					index = 0;
    				}else{
    				for (int i = num_iframes - 1; i >= 0; i--) {
  8014a0:	18001c16 	blt	r3,zero,801514 <mjpeg423_decode+0x778>
    					if (trailer[i].frame_index <= (current_frame - 226)) {
  8014a4:	da003217 	ldw	r8,200(sp)
  8014a8:	180490fa 	slli	r2,r3,3
  8014ac:	21ffc784 	addi	r7,r4,-226
  8014b0:	408d883a 	add	r6,r8,r2
  8014b4:	32000017 	ldw	r8,0(r6)
  8014b8:	3a3f2a2e 	bgeu	r7,r8,801164 <mjpeg423_decode+0x3c8>
  8014bc:	280490fa 	slli	r2,r5,3
  8014c0:	dac03217 	ldw	r11,200(sp)
  8014c4:	1809883a 	mov	r4,r3
  8014c8:	5885883a 	add	r2,r11,r2
  8014cc:	10bffc04 	addi	r2,r2,-16
    				backward = 0;
    				int index = num_iframes - 1;
    				if(current_frame < 240){
    					index = 0;
    				}else{
    				for (int i = num_iframes - 1; i >= 0; i--) {
  8014d0:	213fffc4 	addi	r4,r4,-1
    					if (trailer[i].frame_index <= (current_frame - 226)) {
  8014d4:	1007883a 	mov	r3,r2
  8014d8:	10bffe04 	addi	r2,r2,-8
    				backward = 0;
    				int index = num_iframes - 1;
    				if(current_frame < 240){
    					index = 0;
    				}else{
    				for (int i = num_iframes - 1; i >= 0; i--) {
  8014dc:	203f2116 	blt	r4,zero,801164 <mjpeg423_decode+0x3c8>
    					if (trailer[i].frame_index <= (current_frame - 226)) {
  8014e0:	19400017 	ldw	r5,0(r3)
  8014e4:	397ffa36 	bltu	r7,r5,8014d0 <mjpeg423_decode+0x734>
  8014e8:	180d883a 	mov	r6,r3
  8014ec:	2811883a 	mov	r8,r5
  8014f0:	003f1c06 	br	801164 <mjpeg423_decode+0x3c8>
		error_and_exit("Cannot find file\n");
	}

	//create list of sectors
	if(!sd_card_create_sectors_list(file_handle)){
		error_and_exit("Cannot create sectors list\n");
  8014f4:	01002074 	movhi	r4,129
  8014f8:	210f0004 	addi	r4,r4,15360
  8014fc:	08004580 	call	800458 <error_and_exit>
  801500:	003e4506 	br	800e18 <mjpeg423_decode+0x7c>
    	error_and_exit ("Error: could not open pixel buffer device \n");
    }
    alt_timestamp_start();
    short int file_handle = alt_up_sd_card_fopen(filename_in, 0);
	if(file_handle == -1){
		error_and_exit("Cannot find file\n");
  801504:	01002074 	movhi	r4,129
  801508:	210efb04 	addi	r4,r4,15340
  80150c:	08004580 	call	800458 <error_and_exit>
  801510:	003e3e06 	br	800e0c <mjpeg423_decode+0x70>
    				backward = 0;
    				int index = num_iframes - 1;
    				if(current_frame < 240){
    					index = 0;
    				}else{
    				for (int i = num_iframes - 1; i >= 0; i--) {
  801514:	180490fa 	slli	r2,r3,3
  801518:	d9403217 	ldw	r5,200(sp)
  80151c:	288d883a 	add	r6,r5,r2
  801520:	32000017 	ldw	r8,0(r6)
  801524:	003f0f06 	br	801164 <mjpeg423_decode+0x3c8>
	//create filebuffer to hold entire file
	printf("File size: %d\n",sd_card_file_size(file_handle));

	int sectors_num = ceil(sd_card_file_size(file_handle)/512.0);
	if((filebuffer = malloc(5*512)) == NULL){
		error_and_exit("Cannot allocate filebuffer\n");
  801528:	01002074 	movhi	r4,129
  80152c:	210f0b04 	addi	r4,r4,15404
  801530:	08004580 	call	800458 <error_and_exit>
  801534:	003e4406 	br	800e48 <mjpeg423_decode+0xac>
    
    //main data structures. See lab manual for explanation
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
  801538:	01002074 	movhi	r4,129
  80153c:	210f2104 	addi	r4,r4,15492
  801540:	08004580 	call	800458 <error_and_exit>
  801544:	003e9506 	br	800f9c <mjpeg423_decode+0x200>
    //file streams
    FILE* file_in;

    pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
    if ( pixel_buf_dev == NULL){
    	error_and_exit ("Error: could not open pixel buffer device \n");
  801548:	01002074 	movhi	r4,129
  80154c:	210ef004 	addi	r4,r4,15296
  801550:	08004580 	call	800458 <error_and_exit>
  801554:	003e2206 	br	800de0 <mjpeg423_decode+0x44>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
  801558:	01002074 	movhi	r4,129
  80155c:	210f3f04 	addi	r4,r4,15612
  801560:	08004580 	call	800458 <error_and_exit>
  801564:	003ea206 	br	800ff0 <mjpeg423_decode+0x254>
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");
  801568:	01002074 	movhi	r4,129
  80156c:	210f4504 	addi	r4,r4,15636
  801570:	08004580 	call	800458 <error_and_exit>
  801574:	003ea406 	br	801008 <mjpeg423_decode+0x26c>
    //rgb_pixel_t* rgbblock;
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
  801578:	01002074 	movhi	r4,129
  80157c:	210f2704 	addi	r4,r4,15516
  801580:	08004580 	call	800458 <error_and_exit>
  801584:	003e8906 	br	800fac <mjpeg423_decode+0x210>
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
  801588:	01002074 	movhi	r4,129
  80158c:	210f2d04 	addi	r4,r4,15540
  801590:	08004580 	call	800458 <error_and_exit>
  801594:	003e8906 	br	800fbc <mjpeg423_decode+0x220>
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
  801598:	01002074 	movhi	r4,129
  80159c:	210f3304 	addi	r4,r4,15564
  8015a0:	08004580 	call	800458 <error_and_exit>
  8015a4:	003e8a06 	br	800fd0 <mjpeg423_decode+0x234>
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
  8015a8:	01002074 	movhi	r4,129
  8015ac:	210f3904 	addi	r4,r4,15588
  8015b0:	08004580 	call	800458 <error_and_exit>
  8015b4:	003e8a06 	br	800fe0 <mjpeg423_decode+0x244>
    free(CbDCAC);
    free(CrDCAC);
    free(Ybitstream);
    free(filebuffer);
    if(getNextFile){
        DEBUG_PRINT("\nSwitch to next file.\n\n\n")
  8015b8:	01002074 	movhi	r4,129
  8015bc:	210f8304 	addi	r4,r4,15884
  8015c0:	0803d240 	call	803d24 <puts>
    	getNextFile = 0;
  8015c4:	00bfffc4 	movi	r2,-1
  8015c8:	d0275d15 	stw	zero,-25228(gp)
  8015cc:	003fa706 	br	80146c <mjpeg423_decode+0x6d0>

008015d0 <ycbcr_to_rgb>:
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
  8015d0:	defffc04 	addi	sp,sp,-16
  8015d4:	2007883a 	mov	r3,r4
  8015d8:	dc400115 	stw	r17,4(sp)
  8015dc:	3009883a 	mov	r4,r6
  8015e0:	2823883a 	mov	r17,r5
  8015e4:	318d883a 	add	r6,r6,r6
  8015e8:	180b883a 	mov	r5,r3
  8015ec:	dc800215 	stw	r18,8(sp)
  8015f0:	dc000015 	stw	r16,0(sp)
  8015f4:	31a5883a 	add	r18,r6,r6
  8015f8:	3821883a 	mov	r16,r7
  8015fc:	dfc00315 	stw	ra,12(sp)
  801600:	0802b980 	call	802b98 <__mulsi3>
  801604:	88a3883a 	add	r17,r17,r2
  801608:	db000417 	ldw	r12,16(sp)
  80160c:	dac00517 	ldw	r11,20(sp)
  801610:	d8800617 	ldw	r2,24(sp)
  801614:	8c63883a 	add	r17,r17,r17
  801618:	8c63883a 	add	r17,r17,r17
  80161c:	144d883a 	add	r6,r2,r17
  801620:	5813883a 	mov	r9,r11
  801624:	6011883a 	mov	r8,r12
  801628:	800f883a 	mov	r7,r16
  80162c:	0015883a 	mov	r10,zero
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801630:	52c5883a 	add	r2,r10,r11
  801634:	11000003 	ldbu	r4,0(r2)
  801638:	5307883a 	add	r3,r10,r12
  80163c:	19400003 	ldbu	r5,0(r3)
  801640:	2008923a 	slli	r4,r4,8
  801644:	5407883a 	add	r3,r10,r16
  801648:	18800003 	ldbu	r2,0(r3)
  80164c:	2148b03a 	or	r4,r4,r5
  801650:	1105c032 	custom	0,r2,r2,r4
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801654:	30800035 	stwio	r2,0(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801658:	48c00043 	ldbu	r3,1(r9)
  80165c:	40800043 	ldbu	r2,1(r8)
  801660:	39000043 	ldbu	r4,1(r7)
  801664:	1806923a 	slli	r3,r3,8
  801668:	1886b03a 	or	r3,r3,r2
  80166c:	20c9c032 	custom	0,r4,r4,r3
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801670:	31000135 	stwio	r4,4(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801674:	48800083 	ldbu	r2,2(r9)
  801678:	41000083 	ldbu	r4,2(r8)
  80167c:	38c00083 	ldbu	r3,2(r7)
  801680:	1004923a 	slli	r2,r2,8
  801684:	1104b03a 	or	r2,r2,r4
  801688:	1887c032 	custom	0,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  80168c:	30c00235 	stwio	r3,8(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801690:	488000c3 	ldbu	r2,3(r9)
  801694:	410000c3 	ldbu	r4,3(r8)
  801698:	38c000c3 	ldbu	r3,3(r7)
  80169c:	1004923a 	slli	r2,r2,8
  8016a0:	1104b03a 	or	r2,r2,r4
  8016a4:	1887c032 	custom	0,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  8016a8:	30c00335 	stwio	r3,12(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  8016ac:	48800103 	ldbu	r2,4(r9)
  8016b0:	41000103 	ldbu	r4,4(r8)
  8016b4:	38c00103 	ldbu	r3,4(r7)
  8016b8:	1004923a 	slli	r2,r2,8
  8016bc:	1104b03a 	or	r2,r2,r4
  8016c0:	1887c032 	custom	0,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  8016c4:	30c00435 	stwio	r3,16(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  8016c8:	48800143 	ldbu	r2,5(r9)
  8016cc:	41000143 	ldbu	r4,5(r8)
  8016d0:	38c00143 	ldbu	r3,5(r7)
  8016d4:	1004923a 	slli	r2,r2,8
  8016d8:	1104b03a 	or	r2,r2,r4
  8016dc:	1887c032 	custom	0,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  8016e0:	30c00535 	stwio	r3,20(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  8016e4:	48800183 	ldbu	r2,6(r9)
  8016e8:	41000183 	ldbu	r4,6(r8)
  8016ec:	38c00183 	ldbu	r3,6(r7)
  8016f0:	1004923a 	slli	r2,r2,8
  8016f4:	1104b03a 	or	r2,r2,r4
  8016f8:	1887c032 	custom	0,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  8016fc:	30c00635 	stwio	r3,24(r6)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801700:	488001c3 	ldbu	r2,7(r9)
  801704:	410001c3 	ldbu	r4,7(r8)
  801708:	38c001c3 	ldbu	r3,7(r7)
  80170c:	1004923a 	slli	r2,r2,8
  801710:	1104b03a 	or	r2,r2,r4
  801714:	1887c032 	custom	0,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801718:	30c00735 	stwio	r3,28(r6)
  80171c:	52800204 	addi	r10,r10,8


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  801720:	00801004 	movi	r2,64
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801724:	348d883a 	add	r6,r6,r18
  801728:	4a400204 	addi	r9,r9,8
  80172c:	42000204 	addi	r8,r8,8
  801730:	39c00204 	addi	r7,r7,8


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  801734:	50bfbe1e 	bne	r10,r2,801630 <ycbcr_to_rgb+0x60>
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
            index++;
        }
    }
}
  801738:	dfc00317 	ldw	ra,12(sp)
  80173c:	dc800217 	ldw	r18,8(sp)
  801740:	dc400117 	ldw	r17,4(sp)
  801744:	dc000017 	ldw	r16,0(sp)
  801748:	dec00404 	addi	sp,sp,16
  80174c:	f800283a 	ret

00801750 <main>:

#endif


int main()
{
  801750:	defffd04 	addi	sp,sp,-12
  801754:	dfc00215 	stw	ra,8(sp)
  801758:	dcc00115 	stw	r19,4(sp)
  80175c:	dc400015 	stw	r17,0(sp)
	unsigned char *fileName;
	alt_timestamp_type time1,time2;
	alt_timestamp_start();
  801760:	080d28c0 	call	80d28c <alt_timestamp_start>
	int returnCode;
	time1 = alt_timestamp();
  801764:	080d2d40 	call	80d2d4 <alt_timestamp>
  801768:	1023883a 	mov	r17,r2
	time2 = alt_timestamp();
  80176c:	080d2d40 	call	80d2d4 <alt_timestamp>
  801770:	1027883a 	mov	r19,r2
	printf("TIMER BEGIN %u\n", time1);
  801774:	880b883a 	mov	r5,r17
  801778:	01002074 	movhi	r4,129
  80177c:	210f8e04 	addi	r4,r4,15928
  801780:	0803be80 	call	803be8 <printf>
	printf("TIMER CALL %u\n",time2 );
  801784:	01002074 	movhi	r4,129
  801788:	210f9204 	addi	r4,r4,15944
  80178c:	980b883a 	mov	r5,r19
  801790:	0803be80 	call	803be8 <printf>

	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  801794:	01002074 	movhi	r4,129
  801798:	210f9604 	addi	r4,r4,15960
  80179c:	080e9f40 	call	80e9f4 <alt_up_sd_card_open_dev>
	if(device_reference == NULL){
  8017a0:	10003526 	beq	r2,zero,801878 <main+0x128>
	  printf("Cannot open SD Device\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_Present()){
  8017a4:	080e9880 	call	80e988 <alt_up_sd_card_is_Present>
  8017a8:	1000091e 	bne	r2,zero,8017d0 <main+0x80>
	  printf("There is no SD card in the slot\n");
  8017ac:	01002074 	movhi	r4,129
  8017b0:	210fa704 	addi	r4,r4,16028
  8017b4:	0803d240 	call	803d24 <puts>
//		alt_up_sd_card_find_next(fileName);
//		returnCode = mjpeg423_decode(fileName);
//	}

  return( 0 );
}
  8017b8:	00bfffc4 	movi	r2,-1
  8017bc:	dfc00217 	ldw	ra,8(sp)
  8017c0:	dcc00117 	ldw	r19,4(sp)
  8017c4:	dc400017 	ldw	r17,0(sp)
  8017c8:	dec00304 	addi	sp,sp,12
  8017cc:	f800283a 	ret
	}
	if(!alt_up_sd_card_is_Present()){
	  printf("There is no SD card in the slot\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
  8017d0:	080fb800 	call	80fb80 <alt_up_sd_card_is_FAT16>
  8017d4:	10002426 	beq	r2,zero,801868 <main+0x118>

static void init_button_pio()
{
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  alt_irq_register(BUTTON_PIO_IRQ, (void*)0, handle_button_interrupts);
  8017d8:	01000084 	movi	r4,2
  8017dc:	000b883a 	mov	r5,zero
  8017e0:	01802034 	movhi	r6,128
  8017e4:	31862204 	addi	r6,r6,6280
  8017e8:	080c4dc0 	call	80c4dc <alt_irq_register>
  IOWR(BUTTON_PIO_BASE, 3, 0x0);
  8017ec:	00c04434 	movhi	r3,272
  8017f0:	18c50b04 	addi	r3,r3,5164
  8017f4:	18000035 	stwio	zero,0(r3)
  IOWR(BUTTON_PIO_BASE, 2 ,0xF);
  8017f8:	010003c4 	movi	r4,15
  8017fc:	00804434 	movhi	r2,272
  801800:	10850a04 	addi	r2,r2,5160
  801804:	11000035 	stwio	r4,0(r2)
	if(!alt_up_sd_card_is_FAT16()){
	  printf("SD card is not of FAT16 type\n");
	  return -1;
	}
	init_button_pio();
	fileName = files[index];
  801808:	d1275f07 	ldb	r4,-25220(gp)
  80180c:	01400504 	movi	r5,20
  801810:	04c02074 	movhi	r19,129
  801814:	9cd10704 	addi	r19,r19,17436
  801818:	0802b980 	call	802b98 <__mulsi3>
  80181c:	14e3883a 	add	r17,r2,r19
	//returnCode = mjpeg423_decode(fileName);
	while(1){
		while( mjpeg423_decode(fileName) <= 0 ){
  801820:	8809883a 	mov	r4,r17
  801824:	0800d9c0 	call	800d9c <mjpeg423_decode>
			index = (index + 1) % 3;
			fileName = files[index];
  801828:	01400504 	movi	r5,20
	}
	init_button_pio();
	fileName = files[index];
	//returnCode = mjpeg423_decode(fileName);
	while(1){
		while( mjpeg423_decode(fileName) <= 0 ){
  80182c:	00bffc16 	blt	zero,r2,801820 <main+0xd0>
			index = (index + 1) % 3;
  801830:	d0a75f07 	ldb	r2,-25220(gp)
  801834:	00c000c4 	movi	r3,3
  801838:	10800044 	addi	r2,r2,1
  80183c:	10c7283a 	div	r3,r2,r3
  801840:	18c9883a 	add	r4,r3,r3
  801844:	20c9883a 	add	r4,r4,r3
  801848:	1105c83a 	sub	r2,r2,r4
			fileName = files[index];
  80184c:	11003fcc 	andi	r4,r2,255
  801850:	2100201c 	xori	r4,r4,128
  801854:	213fe004 	addi	r4,r4,-128
	init_button_pio();
	fileName = files[index];
	//returnCode = mjpeg423_decode(fileName);
	while(1){
		while( mjpeg423_decode(fileName) <= 0 ){
			index = (index + 1) % 3;
  801858:	d0a75f05 	stb	r2,-25220(gp)
			fileName = files[index];
  80185c:	0802b980 	call	802b98 <__mulsi3>
  801860:	14e3883a 	add	r17,r2,r19
  801864:	003fee06 	br	801820 <main+0xd0>
	if(!alt_up_sd_card_is_Present()){
	  printf("There is no SD card in the slot\n");
	  return -1;
	}
	if(!alt_up_sd_card_is_FAT16()){
	  printf("SD card is not of FAT16 type\n");
  801868:	01002074 	movhi	r4,129
  80186c:	210faf04 	addi	r4,r4,16060
  801870:	0803d240 	call	803d24 <puts>
  801874:	003fd006 	br	8017b8 <main+0x68>
	printf("TIMER BEGIN %u\n", time1);
	printf("TIMER CALL %u\n",time2 );

	alt_up_sd_card_dev *device_reference = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
	if(device_reference == NULL){
	  printf("Cannot open SD Device\n");
  801878:	01002074 	movhi	r4,129
  80187c:	210fa104 	addi	r4,r4,16004
  801880:	0803d240 	call	803d24 <puts>
  801884:	003fcc06 	br	8017b8 <main+0x68>

00801888 <handle_button_interrupts>:
{
  /* Cast context to edge_capture's type.
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  button_state = IORD(BUTTON_PIO_BASE,3);
  801888:	00804434 	movhi	r2,272
  80188c:	10850b04 	addi	r2,r2,5164
  801890:	10c00037 	ldwio	r3,0(r2)
  801894:	d0e76115 	stw	r3,-25212(gp)
  button_latch = IORD(BUTTON_PIO_BASE,0);
  801898:	10bffd04 	addi	r2,r2,-12
  80189c:	10c00037 	ldwio	r3,0(r2)
  if(button_latch != 15){
  8018a0:	008003c4 	movi	r2,15
  /* Cast context to edge_capture's type.
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  button_state = IORD(BUTTON_PIO_BASE,3);
  button_latch = IORD(BUTTON_PIO_BASE,0);
  8018a4:	d0e76015 	stw	r3,-25216(gp)
  if(button_latch != 15){
  8018a8:	d1276017 	ldw	r4,-25216(gp)
	  if(button_state & 1){
  8018ac:	00c00044 	movi	r3,1
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  button_state = IORD(BUTTON_PIO_BASE,3);
  button_latch = IORD(BUTTON_PIO_BASE,0);
  if(button_latch != 15){
  8018b0:	20800826 	beq	r4,r2,8018d4 <handle_button_interrupts+0x4c>
	  if(button_state & 1){
  8018b4:	d0a76117 	ldw	r2,-25212(gp)
  8018b8:	10c4703a 	and	r2,r2,r3
  8018bc:	1005003a 	cmpeq	r2,r2,zero
  8018c0:	10000826 	beq	r2,zero,8018e4 <handle_button_interrupts+0x5c>
		  playing = playing > 0 ? 0 : 1;
	  }else if(button_state & 2){
  8018c4:	d0a76117 	ldw	r2,-25212(gp)
  8018c8:	1080008c 	andi	r2,r2,2
  8018cc:	10000c26 	beq	r2,zero,801900 <handle_button_interrupts+0x78>
		  getNextFile = 1;
  8018d0:	d0e75d15 	stw	r3,-25228(gp)
		  fastForward = 1;
	  }else if(button_state & 8){
		  backward = 1;
	  }
  }
  IOWR(BUTTON_PIO_BASE,3,0x0);
  8018d4:	00804434 	movhi	r2,272
  8018d8:	10850b04 	addi	r2,r2,5164
  8018dc:	10000035 	stwio	zero,0(r2)
}
  8018e0:	f800283a 	ret
   */
  button_state = IORD(BUTTON_PIO_BASE,3);
  button_latch = IORD(BUTTON_PIO_BASE,0);
  if(button_latch != 15){
	  if(button_state & 1){
		  playing = playing > 0 ? 0 : 1;
  8018e4:	d0a75917 	ldw	r2,-25244(gp)
  8018e8:	10c4803a 	cmplt	r2,r2,r3
  8018ec:	d0a75915 	stw	r2,-25244(gp)
		  fastForward = 1;
	  }else if(button_state & 8){
		  backward = 1;
	  }
  }
  IOWR(BUTTON_PIO_BASE,3,0x0);
  8018f0:	00804434 	movhi	r2,272
  8018f4:	10850b04 	addi	r2,r2,5164
  8018f8:	10000035 	stwio	zero,0(r2)
}
  8018fc:	f800283a 	ret
  if(button_latch != 15){
	  if(button_state & 1){
		  playing = playing > 0 ? 0 : 1;
	  }else if(button_state & 2){
		  getNextFile = 1;
	  }else if(button_state & 4){
  801900:	d0a76117 	ldw	r2,-25212(gp)
  801904:	1080010c 	andi	r2,r2,4
  801908:	1000051e 	bne	r2,zero,801920 <handle_button_interrupts+0x98>
		  fastForward = 1;
	  }else if(button_state & 8){
  80190c:	d0a76117 	ldw	r2,-25212(gp)
  801910:	1080020c 	andi	r2,r2,8
  801914:	103fef26 	beq	r2,zero,8018d4 <handle_button_interrupts+0x4c>
		  backward = 1;
  801918:	d0e75a15 	stw	r3,-25240(gp)
  80191c:	003fed06 	br	8018d4 <handle_button_interrupts+0x4c>
	  }
  }
  IOWR(BUTTON_PIO_BASE,3,0x0);
  801920:	00804434 	movhi	r2,272
  801924:	10850b04 	addi	r2,r2,5164
	  if(button_state & 1){
		  playing = playing > 0 ? 0 : 1;
	  }else if(button_state & 2){
		  getNextFile = 1;
	  }else if(button_state & 4){
		  fastForward = 1;
  801928:	d0e75b15 	stw	r3,-25236(gp)
	  }else if(button_state & 8){
		  backward = 1;
	  }
  }
  IOWR(BUTTON_PIO_BASE,3,0x0);
  80192c:	10000035 	stwio	zero,0(r2)
}
  801930:	f800283a 	ret

00801934 <GetInputString>:
*           returns the string, minus any '\r' characters it
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
  801934:	defff904 	addi	sp,sp,-28
  801938:	dcc00315 	stw	r19,12(sp)
  80193c:	dc800215 	stw	r18,8(sp)
  801940:	dc400115 	stw	r17,4(sp)
  801944:	dfc00615 	stw	ra,24(sp)
  801948:	dd400515 	stw	r21,20(sp)
  80194c:	dd000415 	stw	r20,16(sp)
  801950:	dc000015 	stw	r16,0(sp)
  801954:	2827883a 	mov	r19,r5
  801958:	2025883a 	mov	r18,r4
  80195c:	3023883a 	mov	r17,r6
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801960:	01400b0e 	bge	zero,r5,801990 <GetInputString+0x5c>
  801964:	0021883a 	mov	r16,zero
  801968:	05000344 	movi	r20,13
  80196c:	05400284 	movi	r21,10
  {
    if( (ch = getc(stream)) != '\r')
  801970:	8809883a 	mov	r4,r17
  801974:	08032c00 	call	8032c0 <getc>
    {
      entry[i] = ch;
  801978:	8487883a 	add	r3,r16,r18
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  {
    if( (ch = getc(stream)) != '\r')
  80197c:	15000326 	beq	r2,r20,80198c <GetInputString+0x58>
    {
      entry[i] = ch;
  801980:	18800005 	stb	r2,0(r3)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  801984:	15400226 	beq	r2,r21,801990 <GetInputString+0x5c>
  {
    if( (ch = getc(stream)) != '\r')
    {
      entry[i] = ch;
      i++;
  801988:	84000044 	addi	r16,r16,1
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  80198c:	84fff816 	blt	r16,r19,801970 <GetInputString+0x3c>
    {
      entry[i] = ch;
      i++;
    }
  }
}
  801990:	dfc00617 	ldw	ra,24(sp)
  801994:	dd400517 	ldw	r21,20(sp)
  801998:	dd000417 	ldw	r20,16(sp)
  80199c:	dcc00317 	ldw	r19,12(sp)
  8019a0:	dc800217 	ldw	r18,8(sp)
  8019a4:	dc400117 	ldw	r17,4(sp)
  8019a8:	dc000017 	ldw	r16,0(sp)
  8019ac:	dec00704 	addi	sp,sp,28
  8019b0:	f800283a 	ret

008019b4 <sd_seek>:
 * Set indices into the SD card for a certain point in the file with the sector list.
 * @param start_byte_in_file : Byte in the current file (has sector list loaded) from which to start reading
 * @return:	Returns 0
 */
int sd_seek(uint32_t start_byte_in_file) {
	sd_card_curr_read_sector = start_byte_in_file / 512;
  8019b4:	2004d27a 	srli	r2,r4,9
	sd_card_start_byte_in_sector = start_byte_in_file % 512;
  8019b8:	21007fcc 	andi	r4,r4,511
  8019bc:	d1276415 	stw	r4,-25200(gp)
 * Set indices into the SD card for a certain point in the file with the sector list.
 * @param start_byte_in_file : Byte in the current file (has sector list loaded) from which to start reading
 * @return:	Returns 0
 */
int sd_seek(uint32_t start_byte_in_file) {
	sd_card_curr_read_sector = start_byte_in_file / 512;
  8019c0:	d0a76315 	stw	r2,-25204(gp)
	sd_card_start_byte_in_sector = start_byte_in_file % 512;
	return 0;
}
  8019c4:	0005883a 	mov	r2,zero
  8019c8:	f800283a 	ret

008019cc <sd_card_file_size>:
	}
	return true;
}

unsigned int sd_card_file_size(short int file_handle)
{
  8019cc:	213fffcc 	andi	r4,r4,65535
  8019d0:	2120001c 	xori	r4,r4,32768
  8019d4:	21200004 	addi	r4,r4,-32768
  8019d8:	200891ba 	slli	r4,r4,6
  8019dc:	00802074 	movhi	r2,129
  8019e0:	109f6904 	addi	r2,r2,32164
  8019e4:	2089883a 	add	r4,r4,r2
	return active_files[file_handle].file_size_in_bytes;
}
  8019e8:	20800017 	ldw	r2,0(r4)
  8019ec:	f800283a 	ret

008019f0 <sd_card_wait_read_sector>:
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
}

bool sd_card_wait_read_sector()
{
  8019f0:	00802074 	movhi	r2,129
  8019f4:	109f3204 	addi	r2,r2,31944
  8019f8:	11000017 	ldw	r4,0(r2)
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  8019fc:	2080002b 	ldhuio	r2,0(r4)
	} while ((reg_state & 0x04)!=0);
  801a00:	10bfffcc 	andi	r2,r2,65535
  801a04:	10c0010c 	andi	r3,r2,4
  801a08:	183ffc1e 	bne	r3,zero,8019fc <sd_card_wait_read_sector+0xc>
  801a0c:	1004d13a 	srli	r2,r2,4
  801a10:	1080005c 	xori	r2,r2,1
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
		return true;
	else
		return false;
}
  801a14:	1080004c 	andi	r2,r2,1
  801a18:	f800283a 	ret

00801a1c <sd_card_start_read_sector>:
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  801a1c:	d0a76217 	ldw	r2,-25208(gp)
  801a20:	2109883a 	add	r4,r4,r4
  801a24:	2109883a 	add	r4,r4,r4
  801a28:	2085883a 	add	r2,r4,r2
  801a2c:	01c02074 	movhi	r7,129
  801a30:	39df3804 	addi	r7,r7,31968
  801a34:	10c00017 	ldw	r3,0(r2)
  801a38:	39400017 	ldw	r5,0(r7)
  801a3c:	00802074 	movhi	r2,129
  801a40:	109f3604 	addi	r2,r2,31960
  801a44:	11800017 	ldw	r6,0(r2)
  801a48:	1947883a 	add	r3,r3,r5
  801a4c:	1806927a 	slli	r3,r3,9
  801a50:	30c00035 	stwio	r3,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  801a54:	00802074 	movhi	r2,129
  801a58:	109f3504 	addi	r2,r2,31956
  801a5c:	11400017 	ldw	r5,0(r2)
  801a60:	00c00444 	movi	r3,17
  801a64:	28c0002d 	sthio	r3,0(r5)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  801a68:	d0e76217 	ldw	r3,-25208(gp)
  801a6c:	39800017 	ldw	r6,0(r7)
  801a70:	20c9883a 	add	r4,r4,r3
  801a74:	20800017 	ldw	r2,0(r4)
  801a78:	00c02074 	movhi	r3,129
  801a7c:	18df3c04 	addi	r3,r3,31984
  801a80:	1185883a 	add	r2,r2,r6
  801a84:	18800015 	stw	r2,0(r3)
}
  801a88:	f800283a 	ret

00801a8c <sd_card_create_sectors_list>:
}


bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);
  801a8c:	d0a76217 	ldw	r2,-25208(gp)
	return bytes_read;
}


bool sd_card_create_sectors_list(short int file_handle)
{
  801a90:	defff604 	addi	sp,sp,-40
  801a94:	dc000115 	stw	r16,4(sp)
  801a98:	dfc00915 	stw	ra,36(sp)
  801a9c:	ddc00815 	stw	r23,32(sp)
  801aa0:	dd800715 	stw	r22,28(sp)
  801aa4:	dd400615 	stw	r21,24(sp)
  801aa8:	dd000515 	stw	r20,20(sp)
  801aac:	dcc00415 	stw	r19,16(sp)
  801ab0:	dc800315 	stw	r18,12(sp)
  801ab4:	dc400215 	stw	r17,8(sp)
  801ab8:	2021883a 	mov	r16,r4
	if(sectors != NULL) free(sectors);
  801abc:	10000226 	beq	r2,zero,801ac8 <sd_card_create_sectors_list+0x3c>
  801ac0:	1009883a 	mov	r4,r2
  801ac4:	08033e80 	call	8033e8 <free>

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801ac8:	80bfffcc 	andi	r2,r16,65535
  801acc:	10a0001c 	xori	r2,r2,32768
  801ad0:	10a00004 	addi	r2,r2,-32768
  801ad4:	100491ba 	slli	r2,r2,6
  801ad8:	00c02074 	movhi	r3,129
  801adc:	18df6304 	addi	r3,r3,32140
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801ae0:	05402074 	movhi	r21,129
  801ae4:	ad5f4e04 	addi	r21,r21,32056
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801ae8:	10e1883a 	add	r16,r2,r3
  801aec:	81000617 	ldw	r4,24(r16)
  801af0:	0802a040 	call	802a04 <__floatunsidf>
  801af4:	0011883a 	mov	r8,zero
  801af8:	024fd834 	movhi	r9,16224
  801afc:	400d883a 	mov	r6,r8
  801b00:	480f883a 	mov	r7,r9
  801b04:	180b883a 	mov	r5,r3
  801b08:	1009883a 	mov	r4,r2
  801b0c:	08024e00 	call	8024e0 <__muldf3>
  801b10:	180b883a 	mov	r5,r3
  801b14:	1009883a 	mov	r4,r2
  801b18:	0801dc80 	call	801dc8 <ceil>
  801b1c:	180b883a 	mov	r5,r3
  801b20:	1009883a 	mov	r4,r2
  801b24:	080292c0 	call	80292c <__fixdfsi>
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801b28:	1089883a 	add	r4,r2,r2
  801b2c:	2109883a 	add	r4,r4,r4
bool sd_card_create_sectors_list(short int file_handle)
{
	if(sectors != NULL) free(sectors);

	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
  801b30:	1027883a 	mov	r19,r2
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading
  801b34:	d0a76515 	stw	r2,-25196(gp)

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801b38:	08033fc0 	call	8033fc <malloc>
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801b3c:	81000717 	ldw	r4,28(r16)
  801b40:	a9400383 	ldbu	r5,14(r21)
	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801b44:	1023883a 	mov	r17,r2
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801b48:	213fff84 	addi	r4,r4,-2
	//determine number of sectors and clusters
	int sectors_num = ceil(active_files[file_handle].file_size_in_bytes/512.0);
	sd_card_sectors_num = sectors_num;			// Store in global variables for when reading

	//allocate sector list
	sectors = malloc(4*sectors_num);
  801b4c:	d0a76215 	stw	r2,-25208(gp)

	// Reset the offsets into the sectors and bytes in the sector
	sd_card_curr_read_sector = 0;
  801b50:	d0276315 	stw	zero,-25204(gp)
	sd_card_start_byte_in_sector = 0;
  801b54:	d0276415 	stw	zero,-25200(gp)

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801b58:	0802b980 	call	802b98 <__mulsi3>
  801b5c:	a8c01417 	ldw	r3,80(r21)
  801b60:	81000817 	ldw	r4,32(r16)
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801b64:	01400044 	movi	r5,1
	sd_card_curr_read_sector = 0;
	sd_card_start_byte_in_sector = 0;

	//set first sector
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
  801b68:	1907883a 	add	r3,r3,r4
  801b6c:	10cd883a 	add	r6,r2,r3
	sectors[0] = data_sector;
  801b70:	89800015 	stw	r6,0(r17)

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801b74:	2cc0270e 	bge	r5,r19,801c14 <sd_card_create_sectors_list+0x188>
  801b78:	2825883a 	mov	r18,r5
  801b7c:	04400104 	movi	r17,4
  801b80:	85000804 	addi	r20,r16,32
  801b84:	a82d883a 	mov	r22,r21
  801b88:	05fffe14 	movui	r23,65528
  801b8c:	00000806 	br	801bb0 <sd_card_create_sectors_list+0x124>
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801b90:	d0a76217 	ldw	r2,-25208(gp)
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  801b94:	a1000015 	stw	r4,0(r20)
			data_sector = data_sector + 1;
  801b98:	31800044 	addi	r6,r6,1
		}

		sectors[i] = data_sector;
  801b9c:	8885883a 	add	r2,r17,r2
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801ba0:	94800044 	addi	r18,r18,1
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801ba4:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801ba8:	8c400104 	addi	r17,r17,4
  801bac:	9c801926 	beq	r19,r18,801c14 <sd_card_create_sectors_list+0x188>

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801bb0:	a8800383 	ldbu	r2,14(r21)
  801bb4:	80c00817 	ldw	r3,32(r16)
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  801bb8:	d80b883a 	mov	r5,sp

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801bbc:	10bfffc4 	addi	r2,r2,-1
				return false;
			}
		}
		else
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  801bc0:	19000044 	addi	r4,r3,1

	//set other sectors
	for(int i = 1; i < sectors_num; i++){

		// Read in a new sector of data.
		if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  801bc4:	18bff21e 	bne	r3,r2,801b90 <sd_card_create_sectors_list+0x104>
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  801bc8:	81000717 	ldw	r4,28(r16)
  801bcc:	080fd680 	call	80fd68 <get_cluster_flag>
  801bd0:	10001c26 	beq	r2,zero,801c44 <sd_card_create_sectors_list+0x1b8>
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  801bd4:	d8c0000b 	ldhu	r3,0(sp)
  801bd8:	18bffe0c 	andi	r2,r3,65528
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801bdc:	193fff84 	addi	r4,r3,-2
		{
			// Go to the next cluster.
			unsigned short int next_cluster;
			if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
			{
				if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  801be0:	15c01826 	beq	r2,r23,801c44 <sd_card_create_sectors_list+0x1b8>
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801be4:	b1400383 	ldbu	r5,14(r22)
					/* End of file */
					return false;
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
  801be8:	80c00715 	stw	r3,28(r16)
					active_files[file_handle].current_sector_in_cluster = 0;
  801bec:	80000815 	stw	zero,32(r16)
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801bf0:	0802b980 	call	802b98 <__mulsi3>
  801bf4:	b0c01417 	ldw	r3,80(r22)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801bf8:	94800044 	addi	r18,r18,1
				}
				else
				{
					active_files[file_handle].current_cluster_index = next_cluster;
					active_files[file_handle].current_sector_in_cluster = 0;
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  801bfc:	10cd883a 	add	r6,r2,r3
		{
			active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
			data_sector = data_sector + 1;
		}

		sectors[i] = data_sector;
  801c00:	d0a76217 	ldw	r2,-25208(gp)
  801c04:	8885883a 	add	r2,r17,r2
  801c08:	11800015 	stw	r6,0(r2)
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801c0c:	8c400104 	addi	r17,r17,4
  801c10:	9cbfe71e 	bne	r19,r18,801bb0 <sd_card_create_sectors_list+0x124>
  801c14:	00800044 	movi	r2,1
		}

		sectors[i] = data_sector;
	}
	return true;
}
  801c18:	dfc00917 	ldw	ra,36(sp)
  801c1c:	ddc00817 	ldw	r23,32(sp)
  801c20:	dd800717 	ldw	r22,28(sp)
  801c24:	dd400617 	ldw	r21,24(sp)
  801c28:	dd000517 	ldw	r20,20(sp)
  801c2c:	dcc00417 	ldw	r19,16(sp)
  801c30:	dc800317 	ldw	r18,12(sp)
  801c34:	dc400217 	ldw	r17,8(sp)
  801c38:	dc000117 	ldw	r16,4(sp)
  801c3c:	dec00a04 	addi	sp,sp,40
  801c40:	f800283a 	ret
	int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
			active_files[file_handle].current_sector_in_cluster;
	sectors[0] = data_sector;

	//set other sectors
	for(int i = 1; i < sectors_num; i++){
  801c44:	0005883a 	mov	r2,zero
  801c48:	003ff306 	br	801c18 <sd_card_create_sectors_list+0x18c>

00801c4c <sd_read>:
 * @param count	: Number of bytes to read from SD card.
 * @return: On success, returns number of bytes read.
 * 			If at end of file, returns -1.
 * 			On error, returns -2.
 */
int sd_read(void* buf, int count) {
  801c4c:	defffc04 	addi	sp,sp,-16
  801c50:	dfc00315 	stw	ra,12(sp)
  801c54:	dc800215 	stw	r18,8(sp)
  801c58:	dc400115 	stw	r17,4(sp)
  801c5c:	dc000015 	stw	r16,0(sp)
  801c60:	2817883a 	mov	r11,r5
  801c64:	2019883a 	mov	r12,r4
	int bytes_read = 0;

	if (count <= 0) { return 0; }
  801c68:	01400816 	blt	zero,r5,801c8c <sd_read+0x40>
			if (bytes_read >= count) {
				sd_card_start_byte_in_sector = j + 4;
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);
  801c6c:	0011883a 	mov	r8,zero

		sd_card_curr_read_sector++;
		sd_card_start_byte_in_sector = 0;
	}
	return bytes_read;
}
  801c70:	4005883a 	mov	r2,r8
  801c74:	dfc00317 	ldw	ra,12(sp)
  801c78:	dc800217 	ldw	r18,8(sp)
  801c7c:	dc400117 	ldw	r17,4(sp)
  801c80:	dc000017 	ldw	r16,0(sp)
  801c84:	dec00404 	addi	sp,sp,16
  801c88:	f800283a 	ret
 */
int sd_read(void* buf, int count) {
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }
  801c8c:	d1276317 	ldw	r4,-25204(gp)
  801c90:	d0a76517 	ldw	r2,-25196(gp)
  801c94:	2080440e 	bge	r4,r2,801da8 <sd_read+0x15c>
  801c98:	d3676217 	ldw	r13,-25208(gp)
  801c9c:	0011883a 	mov	r8,zero
  801ca0:	04802074 	movhi	r18,129
  801ca4:	949f3604 	addi	r18,r18,31960
  801ca8:	03802074 	movhi	r14,129
  801cac:	739f3804 	addi	r14,r14,31968
  801cb0:	03c02074 	movhi	r15,129
  801cb4:	7bdf3504 	addi	r15,r15,31956
  801cb8:	04002074 	movhi	r16,129
  801cbc:	841f3c04 	addi	r16,r16,31984
  801cc0:	04402074 	movhi	r17,129
  801cc4:	8c5f3204 	addi	r17,r17,31944
void sd_card_start_read_sector(int index)
{

	/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
	 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
	IOWR_32DIRECT(command_argument_register, 0, (sectors[index] + fat_partition_offset_in_512_byte_sectors)*512);
  801cc8:	2109883a 	add	r4,r4,r4
  801ccc:	2109883a 	add	r4,r4,r4
  801cd0:	2347883a 	add	r3,r4,r13
  801cd4:	18800017 	ldw	r2,0(r3)
  801cd8:	71400017 	ldw	r5,0(r14)
  801cdc:	91800017 	ldw	r6,0(r18)
  801ce0:	1145883a 	add	r2,r2,r5
  801ce4:	1004927a 	slli	r2,r2,9
  801ce8:	30800035 	stwio	r2,0(r6)
	IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  801cec:	78c00017 	ldw	r3,0(r15)
  801cf0:	00800444 	movi	r2,17
  801cf4:	1880002d 	sthio	r2,0(r3)
	current_sector_index = sectors[index]+fat_partition_offset_in_512_byte_sectors;
  801cf8:	d3676217 	ldw	r13,-25208(gp)
  801cfc:	70c00017 	ldw	r3,0(r14)
  801d00:	89400017 	ldw	r5,0(r17)
  801d04:	2349883a 	add	r4,r4,r13
  801d08:	20800017 	ldw	r2,0(r4)
  801d0c:	10c5883a 	add	r2,r2,r3
  801d10:	80800015 	stw	r2,0(r16)

bool sd_card_wait_read_sector()
{
	short int reg_state;
	do {
		reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  801d14:	2880002b 	ldhuio	r2,0(r5)
	} while ((reg_state & 0x04)!=0);
  801d18:	10bfffcc 	andi	r2,r2,65535
  801d1c:	10c0010c 	andi	r3,r2,4
  801d20:	183ffc1e 	bne	r3,zero,801d14 <sd_read+0xc8>
	// Make sure the request did not time out.
	if ((reg_state & 0x10) == 0)
  801d24:	1080040c 	andi	r2,r2,16
  801d28:	1000211e 	bne	r2,zero,801db0 <sd_read+0x164>
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
			return -2;
		}

		//move sector to file buffer 32bits at a time
		for(int j = sd_card_start_byte_in_sector; j < 512; j+=4){
  801d2c:	d1e76417 	ldw	r7,-25200(gp)
  801d30:	00c07fc4 	movi	r3,511
  801d34:	380d883a 	mov	r6,r7
  801d38:	19c01216 	blt	r3,r7,801d84 <sd_read+0x138>
  801d3c:	00802074 	movhi	r2,129
  801d40:	109f3704 	addi	r2,r2,31964
  801d44:	12400017 	ldw	r9,0(r2)
  801d48:	1815883a 	mov	r10,r3
  801d4c:	3b0b883a 	add	r5,r7,r12
  801d50:	00000206 	br	801d5c <sd_read+0x110>
  801d54:	31800104 	addi	r6,r6,4
  801d58:	51800a16 	blt	r10,r6,801d84 <sd_read+0x138>
			*((uint32_t*)(buf+j-sd_card_start_byte_in_sector)) = IORD_32DIRECT(buffer_memory, j);
  801d5c:	29c5c83a 	sub	r2,r5,r7
  801d60:	3247883a 	add	r3,r6,r9
  801d64:	19000037 	ldwio	r4,0(r3)
			bytes_read += 4;
  801d68:	42000104 	addi	r8,r8,4
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
			return -2;
		}

		//move sector to file buffer 32bits at a time
		for(int j = sd_card_start_byte_in_sector; j < 512; j+=4){
  801d6c:	29400104 	addi	r5,r5,4
			*((uint32_t*)(buf+j-sd_card_start_byte_in_sector)) = IORD_32DIRECT(buffer_memory, j);
  801d70:	11000015 	stw	r4,0(r2)
			bytes_read += 4;
			if (bytes_read >= count) {
  801d74:	42fff716 	blt	r8,r11,801d54 <sd_read+0x108>
				sd_card_start_byte_in_sector = j + 4;
  801d78:	31c00104 	addi	r7,r6,4
  801d7c:	d1e76415 	stw	r7,-25200(gp)
  801d80:	003fbb06 	br	801c70 <sd_read+0x24>
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  801d84:	d0a76317 	ldw	r2,-25204(gp)
		sd_card_start_byte_in_sector = 0;
  801d88:	d0276415 	stw	zero,-25200(gp)
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  801d8c:	11000044 	addi	r4,r2,1
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }

	while (sd_card_curr_read_sector < sd_card_sectors_num){
  801d90:	d0a76517 	ldw	r2,-25196(gp)
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);

		sd_card_curr_read_sector++;
  801d94:	d1276315 	stw	r4,-25204(gp)
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }

	while (sd_card_curr_read_sector < sd_card_sectors_num){
  801d98:	20bfb50e 	bge	r4,r2,801c70 <sd_read+0x24>
			if (bytes_read >= count) {
				sd_card_start_byte_in_sector = j + 4;
				return bytes_read;
			}
		}
		buf+= (512 - sd_card_start_byte_in_sector);
  801d9c:	61c5c83a 	sub	r2,r12,r7
  801da0:	13008004 	addi	r12,r2,512
  801da4:	003fc806 	br	801cc8 <sd_read+0x7c>
 */
int sd_read(void* buf, int count) {
	int bytes_read = 0;

	if (count <= 0) { return 0; }
	if (sd_card_curr_read_sector >= sd_card_sectors_num) { return -1; }
  801da8:	023fffc4 	movi	r8,-1
  801dac:	003fb006 	br	801c70 <sd_read+0x24>

	while (sd_card_curr_read_sector < sd_card_sectors_num){
		sd_card_start_read_sector(sd_card_curr_read_sector);
		if(!sd_card_wait_read_sector()){
			printf("Cannot read %d-th sector\n", sd_card_curr_read_sector);
  801db0:	d1676317 	ldw	r5,-25204(gp)
  801db4:	01002074 	movhi	r4,129
  801db8:	210fb704 	addi	r4,r4,16092
  801dbc:	0803be80 	call	803be8 <printf>
  801dc0:	023fff84 	movi	r8,-2
  801dc4:	003faa06 	br	801c70 <sd_read+0x24>

00801dc8 <ceil>:
  801dc8:	2805d53a 	srai	r2,r5,20
  801dcc:	defff604 	addi	sp,sp,-40
  801dd0:	dd800615 	stw	r22,24(sp)
  801dd4:	10c1ffcc 	andi	r3,r2,2047
  801dd8:	1dbf0044 	addi	r22,r3,-1023
  801ddc:	008004c4 	movi	r2,19
  801de0:	ddc00715 	stw	r23,28(sp)
  801de4:	dc800215 	stw	r18,8(sp)
  801de8:	dc400115 	stw	r17,4(sp)
  801dec:	dc000015 	stw	r16,0(sp)
  801df0:	dfc00915 	stw	ra,36(sp)
  801df4:	df000815 	stw	fp,32(sp)
  801df8:	dd400515 	stw	r21,20(sp)
  801dfc:	dd000415 	stw	r20,16(sp)
  801e00:	dcc00315 	stw	r19,12(sp)
  801e04:	2021883a 	mov	r16,r4
  801e08:	2823883a 	mov	r17,r5
  801e0c:	282f883a 	mov	r23,r5
  801e10:	2025883a 	mov	r18,r4
  801e14:	15802c16 	blt	r2,r22,801ec8 <ceil+0x100>
  801e18:	b0005416 	blt	r22,zero,801f6c <ceil+0x1a4>
  801e1c:	00800434 	movhi	r2,16
  801e20:	10bfffc4 	addi	r2,r2,-1
  801e24:	15b9d83a 	sra	fp,r2,r22
  801e28:	282f883a 	mov	r23,r5
  801e2c:	e144703a 	and	r2,fp,r5
  801e30:	1104b03a 	or	r2,r2,r4
  801e34:	10001626 	beq	r2,zero,801e90 <ceil+0xc8>
  801e38:	00a20034 	movhi	r2,34816
  801e3c:	109d6704 	addi	r2,r2,30108
  801e40:	00df8e34 	movhi	r3,32312
  801e44:	18f90f04 	addi	r3,r3,-7108
  801e48:	180f883a 	mov	r7,r3
  801e4c:	100d883a 	mov	r6,r2
  801e50:	080246c0 	call	80246c <__adddf3>
  801e54:	180b883a 	mov	r5,r3
  801e58:	000d883a 	mov	r6,zero
  801e5c:	000f883a 	mov	r7,zero
  801e60:	1009883a 	mov	r4,r2
  801e64:	08028a40 	call	8028a4 <__gtdf2>
  801e68:	0080070e 	bge	zero,r2,801e88 <ceil+0xc0>
  801e6c:	0440030e 	bge	zero,r17,801e7c <ceil+0xb4>
  801e70:	00800434 	movhi	r2,16
  801e74:	1585d83a 	sra	r2,r2,r22
  801e78:	88af883a 	add	r23,r17,r2
  801e7c:	0704303a 	nor	r2,zero,fp
  801e80:	b8ae703a 	and	r23,r23,r2
  801e84:	0025883a 	mov	r18,zero
  801e88:	9021883a 	mov	r16,r18
  801e8c:	b823883a 	mov	r17,r23
  801e90:	8005883a 	mov	r2,r16
  801e94:	8807883a 	mov	r3,r17
  801e98:	dfc00917 	ldw	ra,36(sp)
  801e9c:	df000817 	ldw	fp,32(sp)
  801ea0:	ddc00717 	ldw	r23,28(sp)
  801ea4:	dd800617 	ldw	r22,24(sp)
  801ea8:	dd400517 	ldw	r21,20(sp)
  801eac:	dd000417 	ldw	r20,16(sp)
  801eb0:	dcc00317 	ldw	r19,12(sp)
  801eb4:	dc800217 	ldw	r18,8(sp)
  801eb8:	dc400117 	ldw	r17,4(sp)
  801ebc:	dc000017 	ldw	r16,0(sp)
  801ec0:	dec00a04 	addi	sp,sp,40
  801ec4:	f800283a 	ret
  801ec8:	00800cc4 	movi	r2,51
  801ecc:	15801f16 	blt	r2,r22,801f4c <ceil+0x184>
  801ed0:	18befb44 	addi	r2,r3,-1043
  801ed4:	00ffffc4 	movi	r3,-1
  801ed8:	18b8d83a 	srl	fp,r3,r2
  801edc:	e104703a 	and	r2,fp,r4
  801ee0:	103feb26 	beq	r2,zero,801e90 <ceil+0xc8>
  801ee4:	00a20034 	movhi	r2,34816
  801ee8:	109d6704 	addi	r2,r2,30108
  801eec:	00df8e34 	movhi	r3,32312
  801ef0:	18f90f04 	addi	r3,r3,-7108
  801ef4:	180f883a 	mov	r7,r3
  801ef8:	100d883a 	mov	r6,r2
  801efc:	080246c0 	call	80246c <__adddf3>
  801f00:	180b883a 	mov	r5,r3
  801f04:	000d883a 	mov	r6,zero
  801f08:	000f883a 	mov	r7,zero
  801f0c:	1009883a 	mov	r4,r2
  801f10:	08028a40 	call	8028a4 <__gtdf2>
  801f14:	0080250e 	bge	zero,r2,801fac <ceil+0x1e4>
  801f18:	0440090e 	bge	zero,r17,801f40 <ceil+0x178>
  801f1c:	00800504 	movi	r2,20
  801f20:	b0802926 	beq	r22,r2,801fc8 <ceil+0x200>
  801f24:	00c00d04 	movi	r3,52
  801f28:	1d87c83a 	sub	r3,r3,r22
  801f2c:	00800044 	movi	r2,1
  801f30:	10c4983a 	sll	r2,r2,r3
  801f34:	8085883a 	add	r2,r16,r2
  801f38:	14001e36 	bltu	r2,r16,801fb4 <ceil+0x1ec>
  801f3c:	1025883a 	mov	r18,r2
  801f40:	0704303a 	nor	r2,zero,fp
  801f44:	90a4703a 	and	r18,r18,r2
  801f48:	003fcf06 	br	801e88 <ceil+0xc0>
  801f4c:	00810004 	movi	r2,1024
  801f50:	b0bfcf1e 	bne	r22,r2,801e90 <ceil+0xc8>
  801f54:	800d883a 	mov	r6,r16
  801f58:	280f883a 	mov	r7,r5
  801f5c:	080246c0 	call	80246c <__adddf3>
  801f60:	1021883a 	mov	r16,r2
  801f64:	1823883a 	mov	r17,r3
  801f68:	003fc906 	br	801e90 <ceil+0xc8>
  801f6c:	00a20034 	movhi	r2,34816
  801f70:	109d6704 	addi	r2,r2,30108
  801f74:	00df8e34 	movhi	r3,32312
  801f78:	18f90f04 	addi	r3,r3,-7108
  801f7c:	180f883a 	mov	r7,r3
  801f80:	100d883a 	mov	r6,r2
  801f84:	080246c0 	call	80246c <__adddf3>
  801f88:	180b883a 	mov	r5,r3
  801f8c:	000d883a 	mov	r6,zero
  801f90:	000f883a 	mov	r7,zero
  801f94:	1009883a 	mov	r4,r2
  801f98:	08028a40 	call	8028a4 <__gtdf2>
  801f9c:	00bfba0e 	bge	zero,r2,801e88 <ceil+0xc0>
  801fa0:	88000b16 	blt	r17,zero,801fd0 <ceil+0x208>
  801fa4:	8c04b03a 	or	r2,r17,r16
  801fa8:	1000041e 	bne	r2,zero,801fbc <ceil+0x1f4>
  801fac:	882f883a 	mov	r23,r17
  801fb0:	003fb506 	br	801e88 <ceil+0xc0>
  801fb4:	8dc00044 	addi	r23,r17,1
  801fb8:	003fe006 	br	801f3c <ceil+0x174>
  801fbc:	05cffc34 	movhi	r23,16368
  801fc0:	0025883a 	mov	r18,zero
  801fc4:	003fb006 	br	801e88 <ceil+0xc0>
  801fc8:	8dc00044 	addi	r23,r17,1
  801fcc:	003fdc06 	br	801f40 <ceil+0x178>
  801fd0:	05e00034 	movhi	r23,32768
  801fd4:	0025883a 	mov	r18,zero
  801fd8:	003fab06 	br	801e88 <ceil+0xc0>

00801fdc <_fpadd_parts>:
  801fdc:	defff804 	addi	sp,sp,-32
  801fe0:	dcc00315 	stw	r19,12(sp)
  801fe4:	2027883a 	mov	r19,r4
  801fe8:	21000017 	ldw	r4,0(r4)
  801fec:	00c00044 	movi	r3,1
  801ff0:	dd400515 	stw	r21,20(sp)
  801ff4:	dd000415 	stw	r20,16(sp)
  801ff8:	ddc00715 	stw	r23,28(sp)
  801ffc:	dd800615 	stw	r22,24(sp)
  802000:	dc800215 	stw	r18,8(sp)
  802004:	dc400115 	stw	r17,4(sp)
  802008:	dc000015 	stw	r16,0(sp)
  80200c:	282b883a 	mov	r21,r5
  802010:	3029883a 	mov	r20,r6
  802014:	1900632e 	bgeu	r3,r4,8021a4 <_fpadd_parts+0x1c8>
  802018:	28800017 	ldw	r2,0(r5)
  80201c:	1880812e 	bgeu	r3,r2,802224 <_fpadd_parts+0x248>
  802020:	00c00104 	movi	r3,4
  802024:	20c0dc26 	beq	r4,r3,802398 <_fpadd_parts+0x3bc>
  802028:	10c07e26 	beq	r2,r3,802224 <_fpadd_parts+0x248>
  80202c:	00c00084 	movi	r3,2
  802030:	10c06726 	beq	r2,r3,8021d0 <_fpadd_parts+0x1f4>
  802034:	20c07b26 	beq	r4,r3,802224 <_fpadd_parts+0x248>
  802038:	9dc00217 	ldw	r23,8(r19)
  80203c:	28c00217 	ldw	r3,8(r5)
  802040:	9c400317 	ldw	r17,12(r19)
  802044:	2bc00317 	ldw	r15,12(r5)
  802048:	b8cdc83a 	sub	r6,r23,r3
  80204c:	9c800417 	ldw	r18,16(r19)
  802050:	2c000417 	ldw	r16,16(r5)
  802054:	3009883a 	mov	r4,r6
  802058:	30009716 	blt	r6,zero,8022b8 <_fpadd_parts+0x2dc>
  80205c:	00800fc4 	movi	r2,63
  802060:	11806b16 	blt	r2,r6,802210 <_fpadd_parts+0x234>
  802064:	0100a40e 	bge	zero,r4,8022f8 <_fpadd_parts+0x31c>
  802068:	35bff804 	addi	r22,r6,-32
  80206c:	b000bc16 	blt	r22,zero,802360 <_fpadd_parts+0x384>
  802070:	8596d83a 	srl	r11,r16,r22
  802074:	0019883a 	mov	r12,zero
  802078:	0013883a 	mov	r9,zero
  80207c:	01000044 	movi	r4,1
  802080:	0015883a 	mov	r10,zero
  802084:	b000be16 	blt	r22,zero,802380 <_fpadd_parts+0x3a4>
  802088:	2590983a 	sll	r8,r4,r22
  80208c:	000f883a 	mov	r7,zero
  802090:	00bfffc4 	movi	r2,-1
  802094:	3889883a 	add	r4,r7,r2
  802098:	408b883a 	add	r5,r8,r2
  80209c:	21cd803a 	cmpltu	r6,r4,r7
  8020a0:	314b883a 	add	r5,r6,r5
  8020a4:	7904703a 	and	r2,r15,r4
  8020a8:	8146703a 	and	r3,r16,r5
  8020ac:	10c4b03a 	or	r2,r2,r3
  8020b0:	10000226 	beq	r2,zero,8020bc <_fpadd_parts+0xe0>
  8020b4:	02400044 	movi	r9,1
  8020b8:	0015883a 	mov	r10,zero
  8020bc:	5a5eb03a 	or	r15,r11,r9
  8020c0:	62a0b03a 	or	r16,r12,r10
  8020c4:	99400117 	ldw	r5,4(r19)
  8020c8:	a8800117 	ldw	r2,4(r21)
  8020cc:	28806e26 	beq	r5,r2,802288 <_fpadd_parts+0x2ac>
  8020d0:	28006626 	beq	r5,zero,80226c <_fpadd_parts+0x290>
  8020d4:	7c45c83a 	sub	r2,r15,r17
  8020d8:	7889803a 	cmpltu	r4,r15,r2
  8020dc:	8487c83a 	sub	r3,r16,r18
  8020e0:	1909c83a 	sub	r4,r3,r4
  8020e4:	100d883a 	mov	r6,r2
  8020e8:	200f883a 	mov	r7,r4
  8020ec:	38007716 	blt	r7,zero,8022cc <_fpadd_parts+0x2f0>
  8020f0:	a5c00215 	stw	r23,8(r20)
  8020f4:	a1c00415 	stw	r7,16(r20)
  8020f8:	a0000115 	stw	zero,4(r20)
  8020fc:	a1800315 	stw	r6,12(r20)
  802100:	a2000317 	ldw	r8,12(r20)
  802104:	a2400417 	ldw	r9,16(r20)
  802108:	00bfffc4 	movi	r2,-1
  80210c:	408b883a 	add	r5,r8,r2
  802110:	2a09803a 	cmpltu	r4,r5,r8
  802114:	488d883a 	add	r6,r9,r2
  802118:	01c40034 	movhi	r7,4096
  80211c:	39ffffc4 	addi	r7,r7,-1
  802120:	218d883a 	add	r6,r4,r6
  802124:	39801736 	bltu	r7,r6,802184 <_fpadd_parts+0x1a8>
  802128:	31c06526 	beq	r6,r7,8022c0 <_fpadd_parts+0x2e4>
  80212c:	a3000217 	ldw	r12,8(r20)
  802130:	4209883a 	add	r4,r8,r8
  802134:	00bfffc4 	movi	r2,-1
  802138:	220f803a 	cmpltu	r7,r4,r8
  80213c:	4a4b883a 	add	r5,r9,r9
  802140:	394f883a 	add	r7,r7,r5
  802144:	2095883a 	add	r10,r4,r2
  802148:	3897883a 	add	r11,r7,r2
  80214c:	510d803a 	cmpltu	r6,r10,r4
  802150:	6099883a 	add	r12,r12,r2
  802154:	32d7883a 	add	r11,r6,r11
  802158:	00840034 	movhi	r2,4096
  80215c:	10bfffc4 	addi	r2,r2,-1
  802160:	2011883a 	mov	r8,r4
  802164:	3813883a 	mov	r9,r7
  802168:	a1000315 	stw	r4,12(r20)
  80216c:	a1c00415 	stw	r7,16(r20)
  802170:	a3000215 	stw	r12,8(r20)
  802174:	12c00336 	bltu	r2,r11,802184 <_fpadd_parts+0x1a8>
  802178:	58bfed1e 	bne	r11,r2,802130 <_fpadd_parts+0x154>
  80217c:	00bfff84 	movi	r2,-2
  802180:	12bfeb2e 	bgeu	r2,r10,802130 <_fpadd_parts+0x154>
  802184:	a2800417 	ldw	r10,16(r20)
  802188:	008000c4 	movi	r2,3
  80218c:	00c80034 	movhi	r3,8192
  802190:	18ffffc4 	addi	r3,r3,-1
  802194:	a2400317 	ldw	r9,12(r20)
  802198:	a0800015 	stw	r2,0(r20)
  80219c:	1a802336 	bltu	r3,r10,80222c <_fpadd_parts+0x250>
  8021a0:	a027883a 	mov	r19,r20
  8021a4:	9805883a 	mov	r2,r19
  8021a8:	ddc00717 	ldw	r23,28(sp)
  8021ac:	dd800617 	ldw	r22,24(sp)
  8021b0:	dd400517 	ldw	r21,20(sp)
  8021b4:	dd000417 	ldw	r20,16(sp)
  8021b8:	dcc00317 	ldw	r19,12(sp)
  8021bc:	dc800217 	ldw	r18,8(sp)
  8021c0:	dc400117 	ldw	r17,4(sp)
  8021c4:	dc000017 	ldw	r16,0(sp)
  8021c8:	dec00804 	addi	sp,sp,32
  8021cc:	f800283a 	ret
  8021d0:	20fff41e 	bne	r4,r3,8021a4 <_fpadd_parts+0x1c8>
  8021d4:	31000015 	stw	r4,0(r6)
  8021d8:	98800117 	ldw	r2,4(r19)
  8021dc:	30800115 	stw	r2,4(r6)
  8021e0:	98c00217 	ldw	r3,8(r19)
  8021e4:	30c00215 	stw	r3,8(r6)
  8021e8:	98800317 	ldw	r2,12(r19)
  8021ec:	30800315 	stw	r2,12(r6)
  8021f0:	98c00417 	ldw	r3,16(r19)
  8021f4:	30c00415 	stw	r3,16(r6)
  8021f8:	98800117 	ldw	r2,4(r19)
  8021fc:	28c00117 	ldw	r3,4(r5)
  802200:	3027883a 	mov	r19,r6
  802204:	10c4703a 	and	r2,r2,r3
  802208:	30800115 	stw	r2,4(r6)
  80220c:	003fe506 	br	8021a4 <_fpadd_parts+0x1c8>
  802210:	1dc02616 	blt	r3,r23,8022ac <_fpadd_parts+0x2d0>
  802214:	0023883a 	mov	r17,zero
  802218:	182f883a 	mov	r23,r3
  80221c:	0025883a 	mov	r18,zero
  802220:	003fa806 	br	8020c4 <_fpadd_parts+0xe8>
  802224:	a827883a 	mov	r19,r21
  802228:	003fde06 	br	8021a4 <_fpadd_parts+0x1c8>
  80222c:	01800044 	movi	r6,1
  802230:	500497fa 	slli	r2,r10,31
  802234:	4808d07a 	srli	r4,r9,1
  802238:	518ad83a 	srl	r5,r10,r6
  80223c:	a2000217 	ldw	r8,8(r20)
  802240:	1108b03a 	or	r4,r2,r4
  802244:	0007883a 	mov	r3,zero
  802248:	4984703a 	and	r2,r9,r6
  80224c:	208cb03a 	or	r6,r4,r2
  802250:	28ceb03a 	or	r7,r5,r3
  802254:	42000044 	addi	r8,r8,1
  802258:	a027883a 	mov	r19,r20
  80225c:	a1c00415 	stw	r7,16(r20)
  802260:	a2000215 	stw	r8,8(r20)
  802264:	a1800315 	stw	r6,12(r20)
  802268:	003fce06 	br	8021a4 <_fpadd_parts+0x1c8>
  80226c:	8bc5c83a 	sub	r2,r17,r15
  802270:	8889803a 	cmpltu	r4,r17,r2
  802274:	9407c83a 	sub	r3,r18,r16
  802278:	1909c83a 	sub	r4,r3,r4
  80227c:	100d883a 	mov	r6,r2
  802280:	200f883a 	mov	r7,r4
  802284:	003f9906 	br	8020ec <_fpadd_parts+0x110>
  802288:	8bc5883a 	add	r2,r17,r15
  80228c:	1449803a 	cmpltu	r4,r2,r17
  802290:	9407883a 	add	r3,r18,r16
  802294:	20c9883a 	add	r4,r4,r3
  802298:	a1400115 	stw	r5,4(r20)
  80229c:	a5c00215 	stw	r23,8(r20)
  8022a0:	a0800315 	stw	r2,12(r20)
  8022a4:	a1000415 	stw	r4,16(r20)
  8022a8:	003fb606 	br	802184 <_fpadd_parts+0x1a8>
  8022ac:	001f883a 	mov	r15,zero
  8022b0:	0021883a 	mov	r16,zero
  8022b4:	003f8306 	br	8020c4 <_fpadd_parts+0xe8>
  8022b8:	018dc83a 	sub	r6,zero,r6
  8022bc:	003f6706 	br	80205c <_fpadd_parts+0x80>
  8022c0:	00bfff84 	movi	r2,-2
  8022c4:	117faf36 	bltu	r2,r5,802184 <_fpadd_parts+0x1a8>
  8022c8:	003f9806 	br	80212c <_fpadd_parts+0x150>
  8022cc:	0005883a 	mov	r2,zero
  8022d0:	1189c83a 	sub	r4,r2,r6
  8022d4:	1105803a 	cmpltu	r2,r2,r4
  8022d8:	01cbc83a 	sub	r5,zero,r7
  8022dc:	2885c83a 	sub	r2,r5,r2
  8022e0:	01800044 	movi	r6,1
  8022e4:	a1800115 	stw	r6,4(r20)
  8022e8:	a5c00215 	stw	r23,8(r20)
  8022ec:	a1000315 	stw	r4,12(r20)
  8022f0:	a0800415 	stw	r2,16(r20)
  8022f4:	003f8206 	br	802100 <_fpadd_parts+0x124>
  8022f8:	203f7226 	beq	r4,zero,8020c4 <_fpadd_parts+0xe8>
  8022fc:	35bff804 	addi	r22,r6,-32
  802300:	b9af883a 	add	r23,r23,r6
  802304:	b0003116 	blt	r22,zero,8023cc <_fpadd_parts+0x3f0>
  802308:	959ad83a 	srl	r13,r18,r22
  80230c:	001d883a 	mov	r14,zero
  802310:	000f883a 	mov	r7,zero
  802314:	01000044 	movi	r4,1
  802318:	0011883a 	mov	r8,zero
  80231c:	b0002516 	blt	r22,zero,8023b4 <_fpadd_parts+0x3d8>
  802320:	2594983a 	sll	r10,r4,r22
  802324:	0013883a 	mov	r9,zero
  802328:	00bfffc4 	movi	r2,-1
  80232c:	4889883a 	add	r4,r9,r2
  802330:	508b883a 	add	r5,r10,r2
  802334:	224d803a 	cmpltu	r6,r4,r9
  802338:	314b883a 	add	r5,r6,r5
  80233c:	8904703a 	and	r2,r17,r4
  802340:	9146703a 	and	r3,r18,r5
  802344:	10c4b03a 	or	r2,r2,r3
  802348:	10000226 	beq	r2,zero,802354 <_fpadd_parts+0x378>
  80234c:	01c00044 	movi	r7,1
  802350:	0011883a 	mov	r8,zero
  802354:	69e2b03a 	or	r17,r13,r7
  802358:	7224b03a 	or	r18,r14,r8
  80235c:	003f5906 	br	8020c4 <_fpadd_parts+0xe8>
  802360:	8407883a 	add	r3,r16,r16
  802364:	008007c4 	movi	r2,31
  802368:	1185c83a 	sub	r2,r2,r6
  80236c:	1886983a 	sll	r3,r3,r2
  802370:	7996d83a 	srl	r11,r15,r6
  802374:	8198d83a 	srl	r12,r16,r6
  802378:	1ad6b03a 	or	r11,r3,r11
  80237c:	003f3e06 	br	802078 <_fpadd_parts+0x9c>
  802380:	2006d07a 	srli	r3,r4,1
  802384:	008007c4 	movi	r2,31
  802388:	1185c83a 	sub	r2,r2,r6
  80238c:	1890d83a 	srl	r8,r3,r2
  802390:	218e983a 	sll	r7,r4,r6
  802394:	003f3e06 	br	802090 <_fpadd_parts+0xb4>
  802398:	113f821e 	bne	r2,r4,8021a4 <_fpadd_parts+0x1c8>
  80239c:	28c00117 	ldw	r3,4(r5)
  8023a0:	98800117 	ldw	r2,4(r19)
  8023a4:	10ff7f26 	beq	r2,r3,8021a4 <_fpadd_parts+0x1c8>
  8023a8:	04c02074 	movhi	r19,129
  8023ac:	9ccfbe04 	addi	r19,r19,16120
  8023b0:	003f7c06 	br	8021a4 <_fpadd_parts+0x1c8>
  8023b4:	2006d07a 	srli	r3,r4,1
  8023b8:	008007c4 	movi	r2,31
  8023bc:	1185c83a 	sub	r2,r2,r6
  8023c0:	1894d83a 	srl	r10,r3,r2
  8023c4:	2192983a 	sll	r9,r4,r6
  8023c8:	003fd706 	br	802328 <_fpadd_parts+0x34c>
  8023cc:	9487883a 	add	r3,r18,r18
  8023d0:	008007c4 	movi	r2,31
  8023d4:	1185c83a 	sub	r2,r2,r6
  8023d8:	1886983a 	sll	r3,r3,r2
  8023dc:	899ad83a 	srl	r13,r17,r6
  8023e0:	919cd83a 	srl	r14,r18,r6
  8023e4:	1b5ab03a 	or	r13,r3,r13
  8023e8:	003fc906 	br	802310 <_fpadd_parts+0x334>

008023ec <__subdf3>:
  8023ec:	deffea04 	addi	sp,sp,-88
  8023f0:	dcc01415 	stw	r19,80(sp)
  8023f4:	dcc00404 	addi	r19,sp,16
  8023f8:	2011883a 	mov	r8,r4
  8023fc:	2813883a 	mov	r9,r5
  802400:	dc401315 	stw	r17,76(sp)
  802404:	d809883a 	mov	r4,sp
  802408:	980b883a 	mov	r5,r19
  80240c:	dc400904 	addi	r17,sp,36
  802410:	dfc01515 	stw	ra,84(sp)
  802414:	da400115 	stw	r9,4(sp)
  802418:	d9c00315 	stw	r7,12(sp)
  80241c:	da000015 	stw	r8,0(sp)
  802420:	d9800215 	stw	r6,8(sp)
  802424:	08030880 	call	803088 <__unpack_d>
  802428:	d9000204 	addi	r4,sp,8
  80242c:	880b883a 	mov	r5,r17
  802430:	08030880 	call	803088 <__unpack_d>
  802434:	d8800a17 	ldw	r2,40(sp)
  802438:	880b883a 	mov	r5,r17
  80243c:	9809883a 	mov	r4,r19
  802440:	d9800e04 	addi	r6,sp,56
  802444:	1080005c 	xori	r2,r2,1
  802448:	d8800a15 	stw	r2,40(sp)
  80244c:	0801fdc0 	call	801fdc <_fpadd_parts>
  802450:	1009883a 	mov	r4,r2
  802454:	0802d740 	call	802d74 <__pack_d>
  802458:	dfc01517 	ldw	ra,84(sp)
  80245c:	dcc01417 	ldw	r19,80(sp)
  802460:	dc401317 	ldw	r17,76(sp)
  802464:	dec01604 	addi	sp,sp,88
  802468:	f800283a 	ret

0080246c <__adddf3>:
  80246c:	deffea04 	addi	sp,sp,-88
  802470:	dcc01415 	stw	r19,80(sp)
  802474:	dcc00404 	addi	r19,sp,16
  802478:	2011883a 	mov	r8,r4
  80247c:	2813883a 	mov	r9,r5
  802480:	dc401315 	stw	r17,76(sp)
  802484:	d809883a 	mov	r4,sp
  802488:	980b883a 	mov	r5,r19
  80248c:	dc400904 	addi	r17,sp,36
  802490:	dfc01515 	stw	ra,84(sp)
  802494:	da400115 	stw	r9,4(sp)
  802498:	d9c00315 	stw	r7,12(sp)
  80249c:	da000015 	stw	r8,0(sp)
  8024a0:	d9800215 	stw	r6,8(sp)
  8024a4:	08030880 	call	803088 <__unpack_d>
  8024a8:	d9000204 	addi	r4,sp,8
  8024ac:	880b883a 	mov	r5,r17
  8024b0:	08030880 	call	803088 <__unpack_d>
  8024b4:	d9800e04 	addi	r6,sp,56
  8024b8:	9809883a 	mov	r4,r19
  8024bc:	880b883a 	mov	r5,r17
  8024c0:	0801fdc0 	call	801fdc <_fpadd_parts>
  8024c4:	1009883a 	mov	r4,r2
  8024c8:	0802d740 	call	802d74 <__pack_d>
  8024cc:	dfc01517 	ldw	ra,84(sp)
  8024d0:	dcc01417 	ldw	r19,80(sp)
  8024d4:	dc401317 	ldw	r17,76(sp)
  8024d8:	dec01604 	addi	sp,sp,88
  8024dc:	f800283a 	ret

008024e0 <__muldf3>:
  8024e0:	deffe004 	addi	sp,sp,-128
  8024e4:	dc401815 	stw	r17,96(sp)
  8024e8:	dc400404 	addi	r17,sp,16
  8024ec:	2011883a 	mov	r8,r4
  8024f0:	2813883a 	mov	r9,r5
  8024f4:	dc001715 	stw	r16,92(sp)
  8024f8:	d809883a 	mov	r4,sp
  8024fc:	880b883a 	mov	r5,r17
  802500:	dc000904 	addi	r16,sp,36
  802504:	dfc01f15 	stw	ra,124(sp)
  802508:	da400115 	stw	r9,4(sp)
  80250c:	d9c00315 	stw	r7,12(sp)
  802510:	da000015 	stw	r8,0(sp)
  802514:	d9800215 	stw	r6,8(sp)
  802518:	ddc01e15 	stw	r23,120(sp)
  80251c:	dd801d15 	stw	r22,116(sp)
  802520:	dd401c15 	stw	r21,112(sp)
  802524:	dd001b15 	stw	r20,108(sp)
  802528:	dcc01a15 	stw	r19,104(sp)
  80252c:	dc801915 	stw	r18,100(sp)
  802530:	08030880 	call	803088 <__unpack_d>
  802534:	d9000204 	addi	r4,sp,8
  802538:	800b883a 	mov	r5,r16
  80253c:	08030880 	call	803088 <__unpack_d>
  802540:	d9000417 	ldw	r4,16(sp)
  802544:	00800044 	movi	r2,1
  802548:	1100102e 	bgeu	r2,r4,80258c <__muldf3+0xac>
  80254c:	d8c00917 	ldw	r3,36(sp)
  802550:	10c0062e 	bgeu	r2,r3,80256c <__muldf3+0x8c>
  802554:	00800104 	movi	r2,4
  802558:	20800a26 	beq	r4,r2,802584 <__muldf3+0xa4>
  80255c:	1880cc26 	beq	r3,r2,802890 <__muldf3+0x3b0>
  802560:	00800084 	movi	r2,2
  802564:	20800926 	beq	r4,r2,80258c <__muldf3+0xac>
  802568:	1880191e 	bne	r3,r2,8025d0 <__muldf3+0xf0>
  80256c:	d8c00a17 	ldw	r3,40(sp)
  802570:	d8800517 	ldw	r2,20(sp)
  802574:	8009883a 	mov	r4,r16
  802578:	10c4c03a 	cmpne	r2,r2,r3
  80257c:	d8800a15 	stw	r2,40(sp)
  802580:	00000706 	br	8025a0 <__muldf3+0xc0>
  802584:	00800084 	movi	r2,2
  802588:	1880c326 	beq	r3,r2,802898 <__muldf3+0x3b8>
  80258c:	d8800517 	ldw	r2,20(sp)
  802590:	d8c00a17 	ldw	r3,40(sp)
  802594:	8809883a 	mov	r4,r17
  802598:	10c4c03a 	cmpne	r2,r2,r3
  80259c:	d8800515 	stw	r2,20(sp)
  8025a0:	0802d740 	call	802d74 <__pack_d>
  8025a4:	dfc01f17 	ldw	ra,124(sp)
  8025a8:	ddc01e17 	ldw	r23,120(sp)
  8025ac:	dd801d17 	ldw	r22,116(sp)
  8025b0:	dd401c17 	ldw	r21,112(sp)
  8025b4:	dd001b17 	ldw	r20,108(sp)
  8025b8:	dcc01a17 	ldw	r19,104(sp)
  8025bc:	dc801917 	ldw	r18,100(sp)
  8025c0:	dc401817 	ldw	r17,96(sp)
  8025c4:	dc001717 	ldw	r16,92(sp)
  8025c8:	dec02004 	addi	sp,sp,128
  8025cc:	f800283a 	ret
  8025d0:	dd800717 	ldw	r22,28(sp)
  8025d4:	dc800c17 	ldw	r18,48(sp)
  8025d8:	002b883a 	mov	r21,zero
  8025dc:	0023883a 	mov	r17,zero
  8025e0:	a80b883a 	mov	r5,r21
  8025e4:	b00d883a 	mov	r6,r22
  8025e8:	880f883a 	mov	r7,r17
  8025ec:	ddc00817 	ldw	r23,32(sp)
  8025f0:	dcc00d17 	ldw	r19,52(sp)
  8025f4:	9009883a 	mov	r4,r18
  8025f8:	0802bd00 	call	802bd0 <__muldi3>
  8025fc:	001b883a 	mov	r13,zero
  802600:	680f883a 	mov	r7,r13
  802604:	b009883a 	mov	r4,r22
  802608:	000b883a 	mov	r5,zero
  80260c:	980d883a 	mov	r6,r19
  802610:	b82d883a 	mov	r22,r23
  802614:	002f883a 	mov	r23,zero
  802618:	db401615 	stw	r13,88(sp)
  80261c:	d8801315 	stw	r2,76(sp)
  802620:	d8c01415 	stw	r3,80(sp)
  802624:	dcc01515 	stw	r19,84(sp)
  802628:	0802bd00 	call	802bd0 <__muldi3>
  80262c:	b00d883a 	mov	r6,r22
  802630:	000b883a 	mov	r5,zero
  802634:	9009883a 	mov	r4,r18
  802638:	b80f883a 	mov	r7,r23
  80263c:	1021883a 	mov	r16,r2
  802640:	1823883a 	mov	r17,r3
  802644:	0802bd00 	call	802bd0 <__muldi3>
  802648:	8085883a 	add	r2,r16,r2
  80264c:	140d803a 	cmpltu	r6,r2,r16
  802650:	88c7883a 	add	r3,r17,r3
  802654:	30cd883a 	add	r6,r6,r3
  802658:	1029883a 	mov	r20,r2
  80265c:	302b883a 	mov	r21,r6
  802660:	da801317 	ldw	r10,76(sp)
  802664:	dac01417 	ldw	r11,80(sp)
  802668:	db001517 	ldw	r12,84(sp)
  80266c:	db401617 	ldw	r13,88(sp)
  802670:	3440612e 	bgeu	r6,r17,8027f8 <__muldf3+0x318>
  802674:	0009883a 	mov	r4,zero
  802678:	5105883a 	add	r2,r10,r4
  80267c:	128d803a 	cmpltu	r6,r2,r10
  802680:	5d07883a 	add	r3,r11,r20
  802684:	30cd883a 	add	r6,r6,r3
  802688:	0021883a 	mov	r16,zero
  80268c:	04400044 	movi	r17,1
  802690:	1025883a 	mov	r18,r2
  802694:	3027883a 	mov	r19,r6
  802698:	32c06236 	bltu	r6,r11,802824 <__muldf3+0x344>
  80269c:	59807a26 	beq	r11,r6,802888 <__muldf3+0x3a8>
  8026a0:	680b883a 	mov	r5,r13
  8026a4:	b80f883a 	mov	r7,r23
  8026a8:	6009883a 	mov	r4,r12
  8026ac:	b00d883a 	mov	r6,r22
  8026b0:	0802bd00 	call	802bd0 <__muldi3>
  8026b4:	1009883a 	mov	r4,r2
  8026b8:	000f883a 	mov	r7,zero
  8026bc:	1545883a 	add	r2,r2,r21
  8026c0:	1111803a 	cmpltu	r8,r2,r4
  8026c4:	19c7883a 	add	r3,r3,r7
  8026c8:	40c7883a 	add	r3,r8,r3
  8026cc:	88cb883a 	add	r5,r17,r3
  8026d0:	d8c00617 	ldw	r3,24(sp)
  8026d4:	8089883a 	add	r4,r16,r2
  8026d8:	d8800b17 	ldw	r2,44(sp)
  8026dc:	18c00104 	addi	r3,r3,4
  8026e0:	240d803a 	cmpltu	r6,r4,r16
  8026e4:	10c7883a 	add	r3,r2,r3
  8026e8:	2013883a 	mov	r9,r4
  8026ec:	d8800a17 	ldw	r2,40(sp)
  8026f0:	d9000517 	ldw	r4,20(sp)
  8026f4:	314d883a 	add	r6,r6,r5
  8026f8:	3015883a 	mov	r10,r6
  8026fc:	2088c03a 	cmpne	r4,r4,r2
  802700:	00880034 	movhi	r2,8192
  802704:	10bfffc4 	addi	r2,r2,-1
  802708:	d9000f15 	stw	r4,60(sp)
  80270c:	d8c01015 	stw	r3,64(sp)
  802710:	1180162e 	bgeu	r2,r6,80276c <__muldf3+0x28c>
  802714:	1811883a 	mov	r8,r3
  802718:	101f883a 	mov	r15,r2
  80271c:	980497fa 	slli	r2,r19,31
  802720:	9016d07a 	srli	r11,r18,1
  802724:	500697fa 	slli	r3,r10,31
  802728:	480cd07a 	srli	r6,r9,1
  80272c:	500ed07a 	srli	r7,r10,1
  802730:	12d6b03a 	or	r11,r2,r11
  802734:	00800044 	movi	r2,1
  802738:	198cb03a 	or	r6,r3,r6
  80273c:	4888703a 	and	r4,r9,r2
  802740:	9818d07a 	srli	r12,r19,1
  802744:	001b883a 	mov	r13,zero
  802748:	03a00034 	movhi	r14,32768
  80274c:	3013883a 	mov	r9,r6
  802750:	3815883a 	mov	r10,r7
  802754:	4091883a 	add	r8,r8,r2
  802758:	20000226 	beq	r4,zero,802764 <__muldf3+0x284>
  80275c:	5b64b03a 	or	r18,r11,r13
  802760:	63a6b03a 	or	r19,r12,r14
  802764:	7abfed36 	bltu	r15,r10,80271c <__muldf3+0x23c>
  802768:	da001015 	stw	r8,64(sp)
  80276c:	00840034 	movhi	r2,4096
  802770:	10bfffc4 	addi	r2,r2,-1
  802774:	12801436 	bltu	r2,r10,8027c8 <__muldf3+0x2e8>
  802778:	da001017 	ldw	r8,64(sp)
  80277c:	101f883a 	mov	r15,r2
  802780:	4a45883a 	add	r2,r9,r9
  802784:	124d803a 	cmpltu	r6,r2,r9
  802788:	5287883a 	add	r3,r10,r10
  80278c:	9497883a 	add	r11,r18,r18
  802790:	5c8f803a 	cmpltu	r7,r11,r18
  802794:	9cd9883a 	add	r12,r19,r19
  802798:	01000044 	movi	r4,1
  80279c:	30cd883a 	add	r6,r6,r3
  8027a0:	3b0f883a 	add	r7,r7,r12
  8027a4:	423fffc4 	addi	r8,r8,-1
  8027a8:	1013883a 	mov	r9,r2
  8027ac:	3015883a 	mov	r10,r6
  8027b0:	111ab03a 	or	r13,r2,r4
  8027b4:	98003016 	blt	r19,zero,802878 <__muldf3+0x398>
  8027b8:	5825883a 	mov	r18,r11
  8027bc:	3827883a 	mov	r19,r7
  8027c0:	7abfef2e 	bgeu	r15,r10,802780 <__muldf3+0x2a0>
  8027c4:	da001015 	stw	r8,64(sp)
  8027c8:	00803fc4 	movi	r2,255
  8027cc:	488e703a 	and	r7,r9,r2
  8027d0:	00802004 	movi	r2,128
  8027d4:	0007883a 	mov	r3,zero
  8027d8:	0011883a 	mov	r8,zero
  8027dc:	38801826 	beq	r7,r2,802840 <__muldf3+0x360>
  8027e0:	008000c4 	movi	r2,3
  8027e4:	d9000e04 	addi	r4,sp,56
  8027e8:	da801215 	stw	r10,72(sp)
  8027ec:	d8800e15 	stw	r2,56(sp)
  8027f0:	da401115 	stw	r9,68(sp)
  8027f4:	003f6a06 	br	8025a0 <__muldf3+0xc0>
  8027f8:	89802126 	beq	r17,r6,802880 <__muldf3+0x3a0>
  8027fc:	0009883a 	mov	r4,zero
  802800:	5105883a 	add	r2,r10,r4
  802804:	128d803a 	cmpltu	r6,r2,r10
  802808:	5d07883a 	add	r3,r11,r20
  80280c:	30cd883a 	add	r6,r6,r3
  802810:	0021883a 	mov	r16,zero
  802814:	0023883a 	mov	r17,zero
  802818:	1025883a 	mov	r18,r2
  80281c:	3027883a 	mov	r19,r6
  802820:	32ff9e2e 	bgeu	r6,r11,80269c <__muldf3+0x1bc>
  802824:	00800044 	movi	r2,1
  802828:	8089883a 	add	r4,r16,r2
  80282c:	240d803a 	cmpltu	r6,r4,r16
  802830:	344d883a 	add	r6,r6,r17
  802834:	2021883a 	mov	r16,r4
  802838:	3023883a 	mov	r17,r6
  80283c:	003f9806 	br	8026a0 <__muldf3+0x1c0>
  802840:	403fe71e 	bne	r8,zero,8027e0 <__muldf3+0x300>
  802844:	01004004 	movi	r4,256
  802848:	4904703a 	and	r2,r9,r4
  80284c:	10c4b03a 	or	r2,r2,r3
  802850:	103fe31e 	bne	r2,zero,8027e0 <__muldf3+0x300>
  802854:	94c4b03a 	or	r2,r18,r19
  802858:	103fe126 	beq	r2,zero,8027e0 <__muldf3+0x300>
  80285c:	49c5883a 	add	r2,r9,r7
  802860:	1251803a 	cmpltu	r8,r2,r9
  802864:	4291883a 	add	r8,r8,r10
  802868:	013fc004 	movi	r4,-256
  80286c:	1112703a 	and	r9,r2,r4
  802870:	4015883a 	mov	r10,r8
  802874:	003fda06 	br	8027e0 <__muldf3+0x300>
  802878:	6813883a 	mov	r9,r13
  80287c:	003fce06 	br	8027b8 <__muldf3+0x2d8>
  802880:	143f7c36 	bltu	r2,r16,802674 <__muldf3+0x194>
  802884:	003fdd06 	br	8027fc <__muldf3+0x31c>
  802888:	12bf852e 	bgeu	r2,r10,8026a0 <__muldf3+0x1c0>
  80288c:	003fe506 	br	802824 <__muldf3+0x344>
  802890:	00800084 	movi	r2,2
  802894:	20bf351e 	bne	r4,r2,80256c <__muldf3+0x8c>
  802898:	01002074 	movhi	r4,129
  80289c:	210fbe04 	addi	r4,r4,16120
  8028a0:	003f3f06 	br	8025a0 <__muldf3+0xc0>

008028a4 <__gtdf2>:
  8028a4:	deffef04 	addi	sp,sp,-68
  8028a8:	dc400f15 	stw	r17,60(sp)
  8028ac:	dc400404 	addi	r17,sp,16
  8028b0:	2005883a 	mov	r2,r4
  8028b4:	2807883a 	mov	r3,r5
  8028b8:	dc000e15 	stw	r16,56(sp)
  8028bc:	d809883a 	mov	r4,sp
  8028c0:	880b883a 	mov	r5,r17
  8028c4:	dc000904 	addi	r16,sp,36
  8028c8:	d8c00115 	stw	r3,4(sp)
  8028cc:	d8800015 	stw	r2,0(sp)
  8028d0:	d9800215 	stw	r6,8(sp)
  8028d4:	dfc01015 	stw	ra,64(sp)
  8028d8:	d9c00315 	stw	r7,12(sp)
  8028dc:	08030880 	call	803088 <__unpack_d>
  8028e0:	d9000204 	addi	r4,sp,8
  8028e4:	800b883a 	mov	r5,r16
  8028e8:	08030880 	call	803088 <__unpack_d>
  8028ec:	d8800417 	ldw	r2,16(sp)
  8028f0:	00c00044 	movi	r3,1
  8028f4:	01bfffc4 	movi	r6,-1
  8028f8:	1880062e 	bgeu	r3,r2,802914 <__gtdf2+0x70>
  8028fc:	d8800917 	ldw	r2,36(sp)
  802900:	8809883a 	mov	r4,r17
  802904:	800b883a 	mov	r5,r16
  802908:	1880022e 	bgeu	r3,r2,802914 <__gtdf2+0x70>
  80290c:	08031c00 	call	8031c0 <__fpcmp_parts_d>
  802910:	100d883a 	mov	r6,r2
  802914:	3005883a 	mov	r2,r6
  802918:	dfc01017 	ldw	ra,64(sp)
  80291c:	dc400f17 	ldw	r17,60(sp)
  802920:	dc000e17 	ldw	r16,56(sp)
  802924:	dec01104 	addi	sp,sp,68
  802928:	f800283a 	ret

0080292c <__fixdfsi>:
  80292c:	defff804 	addi	sp,sp,-32
  802930:	2005883a 	mov	r2,r4
  802934:	2807883a 	mov	r3,r5
  802938:	d809883a 	mov	r4,sp
  80293c:	d9400204 	addi	r5,sp,8
  802940:	d8c00115 	stw	r3,4(sp)
  802944:	d8800015 	stw	r2,0(sp)
  802948:	dfc00715 	stw	ra,28(sp)
  80294c:	08030880 	call	803088 <__unpack_d>
  802950:	d8c00217 	ldw	r3,8(sp)
  802954:	00800084 	movi	r2,2
  802958:	1880051e 	bne	r3,r2,802970 <__fixdfsi+0x44>
  80295c:	0007883a 	mov	r3,zero
  802960:	1805883a 	mov	r2,r3
  802964:	dfc00717 	ldw	ra,28(sp)
  802968:	dec00804 	addi	sp,sp,32
  80296c:	f800283a 	ret
  802970:	00800044 	movi	r2,1
  802974:	10fff92e 	bgeu	r2,r3,80295c <__fixdfsi+0x30>
  802978:	00800104 	movi	r2,4
  80297c:	18800426 	beq	r3,r2,802990 <__fixdfsi+0x64>
  802980:	d8c00417 	ldw	r3,16(sp)
  802984:	183ff516 	blt	r3,zero,80295c <__fixdfsi+0x30>
  802988:	00800784 	movi	r2,30
  80298c:	10c0080e 	bge	r2,r3,8029b0 <__fixdfsi+0x84>
  802990:	d8800317 	ldw	r2,12(sp)
  802994:	1000121e 	bne	r2,zero,8029e0 <__fixdfsi+0xb4>
  802998:	00e00034 	movhi	r3,32768
  80299c:	18ffffc4 	addi	r3,r3,-1
  8029a0:	1805883a 	mov	r2,r3
  8029a4:	dfc00717 	ldw	ra,28(sp)
  8029a8:	dec00804 	addi	sp,sp,32
  8029ac:	f800283a 	ret
  8029b0:	00800f04 	movi	r2,60
  8029b4:	10d1c83a 	sub	r8,r2,r3
  8029b8:	40bff804 	addi	r2,r8,-32
  8029bc:	d9800517 	ldw	r6,20(sp)
  8029c0:	d9c00617 	ldw	r7,24(sp)
  8029c4:	10000816 	blt	r2,zero,8029e8 <__fixdfsi+0xbc>
  8029c8:	3888d83a 	srl	r4,r7,r2
  8029cc:	d8800317 	ldw	r2,12(sp)
  8029d0:	2007883a 	mov	r3,r4
  8029d4:	103fe226 	beq	r2,zero,802960 <__fixdfsi+0x34>
  8029d8:	0107c83a 	sub	r3,zero,r4
  8029dc:	003fe006 	br	802960 <__fixdfsi+0x34>
  8029e0:	00e00034 	movhi	r3,32768
  8029e4:	003fde06 	br	802960 <__fixdfsi+0x34>
  8029e8:	39c7883a 	add	r3,r7,r7
  8029ec:	008007c4 	movi	r2,31
  8029f0:	1205c83a 	sub	r2,r2,r8
  8029f4:	1886983a 	sll	r3,r3,r2
  8029f8:	3208d83a 	srl	r4,r6,r8
  8029fc:	1908b03a 	or	r4,r3,r4
  802a00:	003ff206 	br	8029cc <__fixdfsi+0xa0>

00802a04 <__floatunsidf>:
  802a04:	defff204 	addi	sp,sp,-56
  802a08:	dfc00d15 	stw	ra,52(sp)
  802a0c:	ddc00c15 	stw	r23,48(sp)
  802a10:	dd800b15 	stw	r22,44(sp)
  802a14:	dd400a15 	stw	r21,40(sp)
  802a18:	dd000915 	stw	r20,36(sp)
  802a1c:	dcc00815 	stw	r19,32(sp)
  802a20:	dc800715 	stw	r18,28(sp)
  802a24:	dc400615 	stw	r17,24(sp)
  802a28:	dc000515 	stw	r16,20(sp)
  802a2c:	d8000115 	stw	zero,4(sp)
  802a30:	20000f1e 	bne	r4,zero,802a70 <__floatunsidf+0x6c>
  802a34:	00800084 	movi	r2,2
  802a38:	d8800015 	stw	r2,0(sp)
  802a3c:	d809883a 	mov	r4,sp
  802a40:	0802d740 	call	802d74 <__pack_d>
  802a44:	dfc00d17 	ldw	ra,52(sp)
  802a48:	ddc00c17 	ldw	r23,48(sp)
  802a4c:	dd800b17 	ldw	r22,44(sp)
  802a50:	dd400a17 	ldw	r21,40(sp)
  802a54:	dd000917 	ldw	r20,36(sp)
  802a58:	dcc00817 	ldw	r19,32(sp)
  802a5c:	dc800717 	ldw	r18,28(sp)
  802a60:	dc400617 	ldw	r17,24(sp)
  802a64:	dc000517 	ldw	r16,20(sp)
  802a68:	dec00e04 	addi	sp,sp,56
  802a6c:	f800283a 	ret
  802a70:	008000c4 	movi	r2,3
  802a74:	00c00f04 	movi	r3,60
  802a78:	002f883a 	mov	r23,zero
  802a7c:	202d883a 	mov	r22,r4
  802a80:	d8800015 	stw	r2,0(sp)
  802a84:	d8c00215 	stw	r3,8(sp)
  802a88:	d9000315 	stw	r4,12(sp)
  802a8c:	ddc00415 	stw	r23,16(sp)
  802a90:	0802cf40 	call	802cf4 <__clzsi2>
  802a94:	12400744 	addi	r9,r2,29
  802a98:	48000b16 	blt	r9,zero,802ac8 <__floatunsidf+0xc4>
  802a9c:	483fe726 	beq	r9,zero,802a3c <__floatunsidf+0x38>
  802aa0:	10bfff44 	addi	r2,r2,-3
  802aa4:	10002e16 	blt	r2,zero,802b60 <__floatunsidf+0x15c>
  802aa8:	b0a2983a 	sll	r17,r22,r2
  802aac:	0021883a 	mov	r16,zero
  802ab0:	d8800217 	ldw	r2,8(sp)
  802ab4:	dc400415 	stw	r17,16(sp)
  802ab8:	dc000315 	stw	r16,12(sp)
  802abc:	1245c83a 	sub	r2,r2,r9
  802ac0:	d8800215 	stw	r2,8(sp)
  802ac4:	003fdd06 	br	802a3c <__floatunsidf+0x38>
  802ac8:	0255c83a 	sub	r10,zero,r9
  802acc:	51bff804 	addi	r6,r10,-32
  802ad0:	30001b16 	blt	r6,zero,802b40 <__floatunsidf+0x13c>
  802ad4:	b9a8d83a 	srl	r20,r23,r6
  802ad8:	002b883a 	mov	r21,zero
  802adc:	000f883a 	mov	r7,zero
  802ae0:	01000044 	movi	r4,1
  802ae4:	0011883a 	mov	r8,zero
  802ae8:	30002516 	blt	r6,zero,802b80 <__floatunsidf+0x17c>
  802aec:	21a6983a 	sll	r19,r4,r6
  802af0:	0025883a 	mov	r18,zero
  802af4:	00bfffc4 	movi	r2,-1
  802af8:	9089883a 	add	r4,r18,r2
  802afc:	988b883a 	add	r5,r19,r2
  802b00:	248d803a 	cmpltu	r6,r4,r18
  802b04:	314b883a 	add	r5,r6,r5
  802b08:	b104703a 	and	r2,r22,r4
  802b0c:	b946703a 	and	r3,r23,r5
  802b10:	10c4b03a 	or	r2,r2,r3
  802b14:	10000226 	beq	r2,zero,802b20 <__floatunsidf+0x11c>
  802b18:	01c00044 	movi	r7,1
  802b1c:	0011883a 	mov	r8,zero
  802b20:	d9000217 	ldw	r4,8(sp)
  802b24:	a1c4b03a 	or	r2,r20,r7
  802b28:	aa06b03a 	or	r3,r21,r8
  802b2c:	2249c83a 	sub	r4,r4,r9
  802b30:	d8c00415 	stw	r3,16(sp)
  802b34:	d9000215 	stw	r4,8(sp)
  802b38:	d8800315 	stw	r2,12(sp)
  802b3c:	003fbf06 	br	802a3c <__floatunsidf+0x38>
  802b40:	bdc7883a 	add	r3,r23,r23
  802b44:	008007c4 	movi	r2,31
  802b48:	1285c83a 	sub	r2,r2,r10
  802b4c:	1886983a 	sll	r3,r3,r2
  802b50:	b2a8d83a 	srl	r20,r22,r10
  802b54:	baaad83a 	srl	r21,r23,r10
  802b58:	1d28b03a 	or	r20,r3,r20
  802b5c:	003fdf06 	br	802adc <__floatunsidf+0xd8>
  802b60:	b006d07a 	srli	r3,r22,1
  802b64:	008007c4 	movi	r2,31
  802b68:	1245c83a 	sub	r2,r2,r9
  802b6c:	1886d83a 	srl	r3,r3,r2
  802b70:	ba62983a 	sll	r17,r23,r9
  802b74:	b260983a 	sll	r16,r22,r9
  802b78:	1c62b03a 	or	r17,r3,r17
  802b7c:	003fcc06 	br	802ab0 <__floatunsidf+0xac>
  802b80:	2006d07a 	srli	r3,r4,1
  802b84:	008007c4 	movi	r2,31
  802b88:	1285c83a 	sub	r2,r2,r10
  802b8c:	18a6d83a 	srl	r19,r3,r2
  802b90:	22a4983a 	sll	r18,r4,r10
  802b94:	003fd706 	br	802af4 <__floatunsidf+0xf0>

00802b98 <__mulsi3>:
  802b98:	20000a26 	beq	r4,zero,802bc4 <__mulsi3+0x2c>
  802b9c:	0007883a 	mov	r3,zero
  802ba0:	2080004c 	andi	r2,r4,1
  802ba4:	1005003a 	cmpeq	r2,r2,zero
  802ba8:	2008d07a 	srli	r4,r4,1
  802bac:	1000011e 	bne	r2,zero,802bb4 <__mulsi3+0x1c>
  802bb0:	1947883a 	add	r3,r3,r5
  802bb4:	294b883a 	add	r5,r5,r5
  802bb8:	203ff91e 	bne	r4,zero,802ba0 <__mulsi3+0x8>
  802bbc:	1805883a 	mov	r2,r3
  802bc0:	f800283a 	ret
  802bc4:	0007883a 	mov	r3,zero
  802bc8:	1805883a 	mov	r2,r3
  802bcc:	f800283a 	ret

00802bd0 <__muldi3>:
  802bd0:	defff204 	addi	sp,sp,-56
  802bd4:	df000c15 	stw	fp,48(sp)
  802bd8:	3038d43a 	srli	fp,r6,16
  802bdc:	dd000815 	stw	r20,32(sp)
  802be0:	dc400515 	stw	r17,20(sp)
  802be4:	2028d43a 	srli	r20,r4,16
  802be8:	247fffcc 	andi	r17,r4,65535
  802bec:	dc000415 	stw	r16,16(sp)
  802bf0:	343fffcc 	andi	r16,r6,65535
  802bf4:	dcc00715 	stw	r19,28(sp)
  802bf8:	d9000015 	stw	r4,0(sp)
  802bfc:	2827883a 	mov	r19,r5
  802c00:	8809883a 	mov	r4,r17
  802c04:	d9400115 	stw	r5,4(sp)
  802c08:	800b883a 	mov	r5,r16
  802c0c:	d9800215 	stw	r6,8(sp)
  802c10:	dfc00d15 	stw	ra,52(sp)
  802c14:	d9c00315 	stw	r7,12(sp)
  802c18:	dd800a15 	stw	r22,40(sp)
  802c1c:	dd400915 	stw	r21,36(sp)
  802c20:	302d883a 	mov	r22,r6
  802c24:	ddc00b15 	stw	r23,44(sp)
  802c28:	dc800615 	stw	r18,24(sp)
  802c2c:	0802b980 	call	802b98 <__mulsi3>
  802c30:	8809883a 	mov	r4,r17
  802c34:	e00b883a 	mov	r5,fp
  802c38:	102b883a 	mov	r21,r2
  802c3c:	0802b980 	call	802b98 <__mulsi3>
  802c40:	800b883a 	mov	r5,r16
  802c44:	a009883a 	mov	r4,r20
  802c48:	1023883a 	mov	r17,r2
  802c4c:	0802b980 	call	802b98 <__mulsi3>
  802c50:	a009883a 	mov	r4,r20
  802c54:	e00b883a 	mov	r5,fp
  802c58:	1021883a 	mov	r16,r2
  802c5c:	0802b980 	call	802b98 <__mulsi3>
  802c60:	a8ffffcc 	andi	r3,r21,65535
  802c64:	a82ad43a 	srli	r21,r21,16
  802c68:	8c23883a 	add	r17,r17,r16
  802c6c:	1011883a 	mov	r8,r2
  802c70:	ac6b883a 	add	r21,r21,r17
  802c74:	a804943a 	slli	r2,r21,16
  802c78:	b009883a 	mov	r4,r22
  802c7c:	980b883a 	mov	r5,r19
  802c80:	10c7883a 	add	r3,r2,r3
  802c84:	a812d43a 	srli	r9,r21,16
  802c88:	180d883a 	mov	r6,r3
  802c8c:	ac00022e 	bgeu	r21,r16,802c98 <__muldi3+0xc8>
  802c90:	00800074 	movhi	r2,1
  802c94:	4091883a 	add	r8,r8,r2
  802c98:	4267883a 	add	r19,r8,r9
  802c9c:	302d883a 	mov	r22,r6
  802ca0:	0802b980 	call	802b98 <__mulsi3>
  802ca4:	d9400317 	ldw	r5,12(sp)
  802ca8:	d9000017 	ldw	r4,0(sp)
  802cac:	1023883a 	mov	r17,r2
  802cb0:	0802b980 	call	802b98 <__mulsi3>
  802cb4:	14cb883a 	add	r5,r2,r19
  802cb8:	894b883a 	add	r5,r17,r5
  802cbc:	b005883a 	mov	r2,r22
  802cc0:	2807883a 	mov	r3,r5
  802cc4:	dfc00d17 	ldw	ra,52(sp)
  802cc8:	df000c17 	ldw	fp,48(sp)
  802ccc:	ddc00b17 	ldw	r23,44(sp)
  802cd0:	dd800a17 	ldw	r22,40(sp)
  802cd4:	dd400917 	ldw	r21,36(sp)
  802cd8:	dd000817 	ldw	r20,32(sp)
  802cdc:	dcc00717 	ldw	r19,28(sp)
  802ce0:	dc800617 	ldw	r18,24(sp)
  802ce4:	dc400517 	ldw	r17,20(sp)
  802ce8:	dc000417 	ldw	r16,16(sp)
  802cec:	dec00e04 	addi	sp,sp,56
  802cf0:	f800283a 	ret

00802cf4 <__clzsi2>:
  802cf4:	00bfffd4 	movui	r2,65535
  802cf8:	11000e36 	bltu	r2,r4,802d34 <__clzsi2+0x40>
  802cfc:	00803fc4 	movi	r2,255
  802d00:	01400204 	movi	r5,8
  802d04:	0007883a 	mov	r3,zero
  802d08:	11001036 	bltu	r2,r4,802d4c <__clzsi2+0x58>
  802d0c:	000b883a 	mov	r5,zero
  802d10:	20c6d83a 	srl	r3,r4,r3
  802d14:	00802074 	movhi	r2,129
  802d18:	108fc304 	addi	r2,r2,16140
  802d1c:	1887883a 	add	r3,r3,r2
  802d20:	18800003 	ldbu	r2,0(r3)
  802d24:	00c00804 	movi	r3,32
  802d28:	2885883a 	add	r2,r5,r2
  802d2c:	1885c83a 	sub	r2,r3,r2
  802d30:	f800283a 	ret
  802d34:	01400404 	movi	r5,16
  802d38:	00804034 	movhi	r2,256
  802d3c:	10bfffc4 	addi	r2,r2,-1
  802d40:	2807883a 	mov	r3,r5
  802d44:	113ff22e 	bgeu	r2,r4,802d10 <__clzsi2+0x1c>
  802d48:	01400604 	movi	r5,24
  802d4c:	2807883a 	mov	r3,r5
  802d50:	20c6d83a 	srl	r3,r4,r3
  802d54:	00802074 	movhi	r2,129
  802d58:	108fc304 	addi	r2,r2,16140
  802d5c:	1887883a 	add	r3,r3,r2
  802d60:	18800003 	ldbu	r2,0(r3)
  802d64:	00c00804 	movi	r3,32
  802d68:	2885883a 	add	r2,r5,r2
  802d6c:	1885c83a 	sub	r2,r3,r2
  802d70:	f800283a 	ret

00802d74 <__pack_d>:
  802d74:	20c00017 	ldw	r3,0(r4)
  802d78:	defffd04 	addi	sp,sp,-12
  802d7c:	dc000015 	stw	r16,0(sp)
  802d80:	dc800215 	stw	r18,8(sp)
  802d84:	dc400115 	stw	r17,4(sp)
  802d88:	00800044 	movi	r2,1
  802d8c:	22000317 	ldw	r8,12(r4)
  802d90:	001f883a 	mov	r15,zero
  802d94:	22400417 	ldw	r9,16(r4)
  802d98:	24000117 	ldw	r16,4(r4)
  802d9c:	10c0552e 	bgeu	r2,r3,802ef4 <__pack_d+0x180>
  802da0:	00800104 	movi	r2,4
  802da4:	18804f26 	beq	r3,r2,802ee4 <__pack_d+0x170>
  802da8:	00800084 	movi	r2,2
  802dac:	18800226 	beq	r3,r2,802db8 <__pack_d+0x44>
  802db0:	4244b03a 	or	r2,r8,r9
  802db4:	10001a1e 	bne	r2,zero,802e20 <__pack_d+0xac>
  802db8:	000d883a 	mov	r6,zero
  802dbc:	000f883a 	mov	r7,zero
  802dc0:	0011883a 	mov	r8,zero
  802dc4:	00800434 	movhi	r2,16
  802dc8:	10bfffc4 	addi	r2,r2,-1
  802dcc:	301d883a 	mov	r14,r6
  802dd0:	3884703a 	and	r2,r7,r2
  802dd4:	400a953a 	slli	r5,r8,20
  802dd8:	79bffc2c 	andhi	r6,r15,65520
  802ddc:	308cb03a 	or	r6,r6,r2
  802de0:	00e00434 	movhi	r3,32784
  802de4:	18ffffc4 	addi	r3,r3,-1
  802de8:	800497fa 	slli	r2,r16,31
  802dec:	30c6703a 	and	r3,r6,r3
  802df0:	1946b03a 	or	r3,r3,r5
  802df4:	01600034 	movhi	r5,32768
  802df8:	297fffc4 	addi	r5,r5,-1
  802dfc:	194a703a 	and	r5,r3,r5
  802e00:	288ab03a 	or	r5,r5,r2
  802e04:	2807883a 	mov	r3,r5
  802e08:	7005883a 	mov	r2,r14
  802e0c:	dc800217 	ldw	r18,8(sp)
  802e10:	dc400117 	ldw	r17,4(sp)
  802e14:	dc000017 	ldw	r16,0(sp)
  802e18:	dec00304 	addi	sp,sp,12
  802e1c:	f800283a 	ret
  802e20:	21000217 	ldw	r4,8(r4)
  802e24:	00bf0084 	movi	r2,-1022
  802e28:	20803f16 	blt	r4,r2,802f28 <__pack_d+0x1b4>
  802e2c:	0080ffc4 	movi	r2,1023
  802e30:	11002c16 	blt	r2,r4,802ee4 <__pack_d+0x170>
  802e34:	00803fc4 	movi	r2,255
  802e38:	408c703a 	and	r6,r8,r2
  802e3c:	00802004 	movi	r2,128
  802e40:	0007883a 	mov	r3,zero
  802e44:	000f883a 	mov	r7,zero
  802e48:	2280ffc4 	addi	r10,r4,1023
  802e4c:	30801e26 	beq	r6,r2,802ec8 <__pack_d+0x154>
  802e50:	00801fc4 	movi	r2,127
  802e54:	4089883a 	add	r4,r8,r2
  802e58:	220d803a 	cmpltu	r6,r4,r8
  802e5c:	324d883a 	add	r6,r6,r9
  802e60:	2011883a 	mov	r8,r4
  802e64:	3013883a 	mov	r9,r6
  802e68:	00880034 	movhi	r2,8192
  802e6c:	10bfffc4 	addi	r2,r2,-1
  802e70:	12400d36 	bltu	r2,r9,802ea8 <__pack_d+0x134>
  802e74:	4804963a 	slli	r2,r9,24
  802e78:	400cd23a 	srli	r6,r8,8
  802e7c:	480ed23a 	srli	r7,r9,8
  802e80:	013fffc4 	movi	r4,-1
  802e84:	118cb03a 	or	r6,r2,r6
  802e88:	01400434 	movhi	r5,16
  802e8c:	297fffc4 	addi	r5,r5,-1
  802e90:	3104703a 	and	r2,r6,r4
  802e94:	3946703a 	and	r3,r7,r5
  802e98:	5201ffcc 	andi	r8,r10,2047
  802e9c:	100d883a 	mov	r6,r2
  802ea0:	180f883a 	mov	r7,r3
  802ea4:	003fc706 	br	802dc4 <__pack_d+0x50>
  802ea8:	480897fa 	slli	r4,r9,31
  802eac:	4004d07a 	srli	r2,r8,1
  802eb0:	4806d07a 	srli	r3,r9,1
  802eb4:	52800044 	addi	r10,r10,1
  802eb8:	2084b03a 	or	r2,r4,r2
  802ebc:	1011883a 	mov	r8,r2
  802ec0:	1813883a 	mov	r9,r3
  802ec4:	003feb06 	br	802e74 <__pack_d+0x100>
  802ec8:	383fe11e 	bne	r7,zero,802e50 <__pack_d+0xdc>
  802ecc:	01004004 	movi	r4,256
  802ed0:	4104703a 	and	r2,r8,r4
  802ed4:	10c4b03a 	or	r2,r2,r3
  802ed8:	103fe326 	beq	r2,zero,802e68 <__pack_d+0xf4>
  802edc:	3005883a 	mov	r2,r6
  802ee0:	003fdc06 	br	802e54 <__pack_d+0xe0>
  802ee4:	000d883a 	mov	r6,zero
  802ee8:	000f883a 	mov	r7,zero
  802eec:	0201ffc4 	movi	r8,2047
  802ef0:	003fb406 	br	802dc4 <__pack_d+0x50>
  802ef4:	0005883a 	mov	r2,zero
  802ef8:	00c00234 	movhi	r3,8
  802efc:	408cb03a 	or	r6,r8,r2
  802f00:	48ceb03a 	or	r7,r9,r3
  802f04:	013fffc4 	movi	r4,-1
  802f08:	01400434 	movhi	r5,16
  802f0c:	297fffc4 	addi	r5,r5,-1
  802f10:	3104703a 	and	r2,r6,r4
  802f14:	3946703a 	and	r3,r7,r5
  802f18:	100d883a 	mov	r6,r2
  802f1c:	180f883a 	mov	r7,r3
  802f20:	0201ffc4 	movi	r8,2047
  802f24:	003fa706 	br	802dc4 <__pack_d+0x50>
  802f28:	1109c83a 	sub	r4,r2,r4
  802f2c:	00800e04 	movi	r2,56
  802f30:	11004316 	blt	r2,r4,803040 <__pack_d+0x2cc>
  802f34:	21fff804 	addi	r7,r4,-32
  802f38:	38004516 	blt	r7,zero,803050 <__pack_d+0x2dc>
  802f3c:	49d8d83a 	srl	r12,r9,r7
  802f40:	001b883a 	mov	r13,zero
  802f44:	0023883a 	mov	r17,zero
  802f48:	01400044 	movi	r5,1
  802f4c:	0025883a 	mov	r18,zero
  802f50:	38004716 	blt	r7,zero,803070 <__pack_d+0x2fc>
  802f54:	29d6983a 	sll	r11,r5,r7
  802f58:	0015883a 	mov	r10,zero
  802f5c:	00bfffc4 	movi	r2,-1
  802f60:	5089883a 	add	r4,r10,r2
  802f64:	588b883a 	add	r5,r11,r2
  802f68:	228d803a 	cmpltu	r6,r4,r10
  802f6c:	314b883a 	add	r5,r6,r5
  802f70:	4104703a 	and	r2,r8,r4
  802f74:	4946703a 	and	r3,r9,r5
  802f78:	10c4b03a 	or	r2,r2,r3
  802f7c:	10000226 	beq	r2,zero,802f88 <__pack_d+0x214>
  802f80:	04400044 	movi	r17,1
  802f84:	0025883a 	mov	r18,zero
  802f88:	00803fc4 	movi	r2,255
  802f8c:	644eb03a 	or	r7,r12,r17
  802f90:	3892703a 	and	r9,r7,r2
  802f94:	00802004 	movi	r2,128
  802f98:	6c90b03a 	or	r8,r13,r18
  802f9c:	0015883a 	mov	r10,zero
  802fa0:	48801626 	beq	r9,r2,802ffc <__pack_d+0x288>
  802fa4:	01001fc4 	movi	r4,127
  802fa8:	3905883a 	add	r2,r7,r4
  802fac:	11cd803a 	cmpltu	r6,r2,r7
  802fb0:	320d883a 	add	r6,r6,r8
  802fb4:	100f883a 	mov	r7,r2
  802fb8:	00840034 	movhi	r2,4096
  802fbc:	10bfffc4 	addi	r2,r2,-1
  802fc0:	3011883a 	mov	r8,r6
  802fc4:	0007883a 	mov	r3,zero
  802fc8:	11801b36 	bltu	r2,r6,803038 <__pack_d+0x2c4>
  802fcc:	4004963a 	slli	r2,r8,24
  802fd0:	3808d23a 	srli	r4,r7,8
  802fd4:	400ad23a 	srli	r5,r8,8
  802fd8:	1813883a 	mov	r9,r3
  802fdc:	1108b03a 	or	r4,r2,r4
  802fe0:	00bfffc4 	movi	r2,-1
  802fe4:	00c00434 	movhi	r3,16
  802fe8:	18ffffc4 	addi	r3,r3,-1
  802fec:	208c703a 	and	r6,r4,r2
  802ff0:	28ce703a 	and	r7,r5,r3
  802ff4:	4a01ffcc 	andi	r8,r9,2047
  802ff8:	003f7206 	br	802dc4 <__pack_d+0x50>
  802ffc:	503fe91e 	bne	r10,zero,802fa4 <__pack_d+0x230>
  803000:	01004004 	movi	r4,256
  803004:	3904703a 	and	r2,r7,r4
  803008:	0007883a 	mov	r3,zero
  80300c:	10c4b03a 	or	r2,r2,r3
  803010:	10000626 	beq	r2,zero,80302c <__pack_d+0x2b8>
  803014:	3a45883a 	add	r2,r7,r9
  803018:	11cd803a 	cmpltu	r6,r2,r7
  80301c:	320d883a 	add	r6,r6,r8
  803020:	100f883a 	mov	r7,r2
  803024:	3011883a 	mov	r8,r6
  803028:	0007883a 	mov	r3,zero
  80302c:	00840034 	movhi	r2,4096
  803030:	10bfffc4 	addi	r2,r2,-1
  803034:	123fe52e 	bgeu	r2,r8,802fcc <__pack_d+0x258>
  803038:	00c00044 	movi	r3,1
  80303c:	003fe306 	br	802fcc <__pack_d+0x258>
  803040:	0009883a 	mov	r4,zero
  803044:	0013883a 	mov	r9,zero
  803048:	000b883a 	mov	r5,zero
  80304c:	003fe406 	br	802fe0 <__pack_d+0x26c>
  803050:	4a47883a 	add	r3,r9,r9
  803054:	008007c4 	movi	r2,31
  803058:	1105c83a 	sub	r2,r2,r4
  80305c:	1886983a 	sll	r3,r3,r2
  803060:	4118d83a 	srl	r12,r8,r4
  803064:	491ad83a 	srl	r13,r9,r4
  803068:	1b18b03a 	or	r12,r3,r12
  80306c:	003fb506 	br	802f44 <__pack_d+0x1d0>
  803070:	2806d07a 	srli	r3,r5,1
  803074:	008007c4 	movi	r2,31
  803078:	1105c83a 	sub	r2,r2,r4
  80307c:	1896d83a 	srl	r11,r3,r2
  803080:	2914983a 	sll	r10,r5,r4
  803084:	003fb506 	br	802f5c <__pack_d+0x1e8>

00803088 <__unpack_d>:
  803088:	20c00117 	ldw	r3,4(r4)
  80308c:	22400017 	ldw	r9,0(r4)
  803090:	00800434 	movhi	r2,16
  803094:	10bfffc4 	addi	r2,r2,-1
  803098:	1808d53a 	srli	r4,r3,20
  80309c:	180cd7fa 	srli	r6,r3,31
  8030a0:	1894703a 	and	r10,r3,r2
  8030a4:	2201ffcc 	andi	r8,r4,2047
  8030a8:	281b883a 	mov	r13,r5
  8030ac:	4817883a 	mov	r11,r9
  8030b0:	29800115 	stw	r6,4(r5)
  8030b4:	5019883a 	mov	r12,r10
  8030b8:	40001e1e 	bne	r8,zero,803134 <__unpack_d+0xac>
  8030bc:	4a84b03a 	or	r2,r9,r10
  8030c0:	10001926 	beq	r2,zero,803128 <__unpack_d+0xa0>
  8030c4:	4804d63a 	srli	r2,r9,24
  8030c8:	500c923a 	slli	r6,r10,8
  8030cc:	013f0084 	movi	r4,-1022
  8030d0:	00c40034 	movhi	r3,4096
  8030d4:	18ffffc4 	addi	r3,r3,-1
  8030d8:	118cb03a 	or	r6,r2,r6
  8030dc:	008000c4 	movi	r2,3
  8030e0:	480a923a 	slli	r5,r9,8
  8030e4:	68800015 	stw	r2,0(r13)
  8030e8:	69000215 	stw	r4,8(r13)
  8030ec:	19800b36 	bltu	r3,r6,80311c <__unpack_d+0x94>
  8030f0:	200f883a 	mov	r7,r4
  8030f4:	1811883a 	mov	r8,r3
  8030f8:	2945883a 	add	r2,r5,r5
  8030fc:	1149803a 	cmpltu	r4,r2,r5
  803100:	3187883a 	add	r3,r6,r6
  803104:	20c9883a 	add	r4,r4,r3
  803108:	100b883a 	mov	r5,r2
  80310c:	200d883a 	mov	r6,r4
  803110:	39ffffc4 	addi	r7,r7,-1
  803114:	413ff82e 	bgeu	r8,r4,8030f8 <__unpack_d+0x70>
  803118:	69c00215 	stw	r7,8(r13)
  80311c:	69800415 	stw	r6,16(r13)
  803120:	69400315 	stw	r5,12(r13)
  803124:	f800283a 	ret
  803128:	00800084 	movi	r2,2
  80312c:	28800015 	stw	r2,0(r5)
  803130:	f800283a 	ret
  803134:	0081ffc4 	movi	r2,2047
  803138:	40800f26 	beq	r8,r2,803178 <__unpack_d+0xf0>
  80313c:	480cd63a 	srli	r6,r9,24
  803140:	5006923a 	slli	r3,r10,8
  803144:	4804923a 	slli	r2,r9,8
  803148:	0009883a 	mov	r4,zero
  80314c:	30c6b03a 	or	r3,r6,r3
  803150:	01440034 	movhi	r5,4096
  803154:	110cb03a 	or	r6,r2,r4
  803158:	423f0044 	addi	r8,r8,-1023
  80315c:	194eb03a 	or	r7,r3,r5
  803160:	008000c4 	movi	r2,3
  803164:	69c00415 	stw	r7,16(r13)
  803168:	6a000215 	stw	r8,8(r13)
  80316c:	68800015 	stw	r2,0(r13)
  803170:	69800315 	stw	r6,12(r13)
  803174:	f800283a 	ret
  803178:	4a84b03a 	or	r2,r9,r10
  80317c:	1000031e 	bne	r2,zero,80318c <__unpack_d+0x104>
  803180:	00800104 	movi	r2,4
  803184:	28800015 	stw	r2,0(r5)
  803188:	f800283a 	ret
  80318c:	0009883a 	mov	r4,zero
  803190:	01400234 	movhi	r5,8
  803194:	4904703a 	and	r2,r9,r4
  803198:	5146703a 	and	r3,r10,r5
  80319c:	10c4b03a 	or	r2,r2,r3
  8031a0:	10000526 	beq	r2,zero,8031b8 <__unpack_d+0x130>
  8031a4:	00800044 	movi	r2,1
  8031a8:	68800015 	stw	r2,0(r13)
  8031ac:	6b000415 	stw	r12,16(r13)
  8031b0:	6ac00315 	stw	r11,12(r13)
  8031b4:	f800283a 	ret
  8031b8:	68000015 	stw	zero,0(r13)
  8031bc:	003ffb06 	br	8031ac <__unpack_d+0x124>

008031c0 <__fpcmp_parts_d>:
  8031c0:	21800017 	ldw	r6,0(r4)
  8031c4:	00c00044 	movi	r3,1
  8031c8:	19800a2e 	bgeu	r3,r6,8031f4 <__fpcmp_parts_d+0x34>
  8031cc:	28800017 	ldw	r2,0(r5)
  8031d0:	1880082e 	bgeu	r3,r2,8031f4 <__fpcmp_parts_d+0x34>
  8031d4:	00c00104 	movi	r3,4
  8031d8:	30c02626 	beq	r6,r3,803274 <__fpcmp_parts_d+0xb4>
  8031dc:	10c02226 	beq	r2,r3,803268 <__fpcmp_parts_d+0xa8>
  8031e0:	00c00084 	movi	r3,2
  8031e4:	30c00526 	beq	r6,r3,8031fc <__fpcmp_parts_d+0x3c>
  8031e8:	10c0071e 	bne	r2,r3,803208 <__fpcmp_parts_d+0x48>
  8031ec:	20800117 	ldw	r2,4(r4)
  8031f0:	1000091e 	bne	r2,zero,803218 <__fpcmp_parts_d+0x58>
  8031f4:	00800044 	movi	r2,1
  8031f8:	f800283a 	ret
  8031fc:	10c01a1e 	bne	r2,r3,803268 <__fpcmp_parts_d+0xa8>
  803200:	0005883a 	mov	r2,zero
  803204:	f800283a 	ret
  803208:	22000117 	ldw	r8,4(r4)
  80320c:	28800117 	ldw	r2,4(r5)
  803210:	40800326 	beq	r8,r2,803220 <__fpcmp_parts_d+0x60>
  803214:	403ff726 	beq	r8,zero,8031f4 <__fpcmp_parts_d+0x34>
  803218:	00bfffc4 	movi	r2,-1
  80321c:	f800283a 	ret
  803220:	20c00217 	ldw	r3,8(r4)
  803224:	28800217 	ldw	r2,8(r5)
  803228:	10fffa16 	blt	r2,r3,803214 <__fpcmp_parts_d+0x54>
  80322c:	18800916 	blt	r3,r2,803254 <__fpcmp_parts_d+0x94>
  803230:	21c00417 	ldw	r7,16(r4)
  803234:	28c00417 	ldw	r3,16(r5)
  803238:	21800317 	ldw	r6,12(r4)
  80323c:	28800317 	ldw	r2,12(r5)
  803240:	19fff436 	bltu	r3,r7,803214 <__fpcmp_parts_d+0x54>
  803244:	38c00526 	beq	r7,r3,80325c <__fpcmp_parts_d+0x9c>
  803248:	38c00236 	bltu	r7,r3,803254 <__fpcmp_parts_d+0x94>
  80324c:	19ffec1e 	bne	r3,r7,803200 <__fpcmp_parts_d+0x40>
  803250:	30bfeb2e 	bgeu	r6,r2,803200 <__fpcmp_parts_d+0x40>
  803254:	403fe71e 	bne	r8,zero,8031f4 <__fpcmp_parts_d+0x34>
  803258:	003fef06 	br	803218 <__fpcmp_parts_d+0x58>
  80325c:	11bffa2e 	bgeu	r2,r6,803248 <__fpcmp_parts_d+0x88>
  803260:	403fe426 	beq	r8,zero,8031f4 <__fpcmp_parts_d+0x34>
  803264:	003fec06 	br	803218 <__fpcmp_parts_d+0x58>
  803268:	28800117 	ldw	r2,4(r5)
  80326c:	103fe11e 	bne	r2,zero,8031f4 <__fpcmp_parts_d+0x34>
  803270:	003fe906 	br	803218 <__fpcmp_parts_d+0x58>
  803274:	11bfdd1e 	bne	r2,r6,8031ec <__fpcmp_parts_d+0x2c>
  803278:	28c00117 	ldw	r3,4(r5)
  80327c:	20800117 	ldw	r2,4(r4)
  803280:	1885c83a 	sub	r2,r3,r2
  803284:	f800283a 	ret

00803288 <exit>:
  803288:	defffe04 	addi	sp,sp,-8
  80328c:	000b883a 	mov	r5,zero
  803290:	dc000015 	stw	r16,0(sp)
  803294:	dfc00115 	stw	ra,4(sp)
  803298:	2021883a 	mov	r16,r4
  80329c:	0805efc0 	call	805efc <__call_exitprocs>
  8032a0:	00802074 	movhi	r2,129
  8032a4:	1097be04 	addi	r2,r2,24312
  8032a8:	11000017 	ldw	r4,0(r2)
  8032ac:	20800f17 	ldw	r2,60(r4)
  8032b0:	10000126 	beq	r2,zero,8032b8 <exit+0x30>
  8032b4:	103ee83a 	callr	r2
  8032b8:	8009883a 	mov	r4,r16
  8032bc:	080c41c0 	call	80c41c <_exit>

008032c0 <getc>:
  8032c0:	defffd04 	addi	sp,sp,-12
  8032c4:	dc400115 	stw	r17,4(sp)
  8032c8:	04402074 	movhi	r17,129
  8032cc:	8c57bd04 	addi	r17,r17,24308
  8032d0:	88c00017 	ldw	r3,0(r17)
  8032d4:	dc000015 	stw	r16,0(sp)
  8032d8:	dfc00215 	stw	ra,8(sp)
  8032dc:	2021883a 	mov	r16,r4
  8032e0:	18000326 	beq	r3,zero,8032f0 <getc+0x30>
  8032e4:	18800e17 	ldw	r2,56(r3)
  8032e8:	1809883a 	mov	r4,r3
  8032ec:	10000e26 	beq	r2,zero,803328 <getc+0x68>
  8032f0:	80800117 	ldw	r2,4(r16)
  8032f4:	800b883a 	mov	r5,r16
  8032f8:	10bfffc4 	addi	r2,r2,-1
  8032fc:	80800115 	stw	r2,4(r16)
  803300:	10000f16 	blt	r2,zero,803340 <getc+0x80>
  803304:	80c00017 	ldw	r3,0(r16)
  803308:	18800003 	ldbu	r2,0(r3)
  80330c:	18c00044 	addi	r3,r3,1
  803310:	80c00015 	stw	r3,0(r16)
  803314:	dfc00217 	ldw	ra,8(sp)
  803318:	dc400117 	ldw	r17,4(sp)
  80331c:	dc000017 	ldw	r16,0(sp)
  803320:	dec00304 	addi	sp,sp,12
  803324:	f800283a 	ret
  803328:	0807b3c0 	call	807b3c <__sinit>
  80332c:	80800117 	ldw	r2,4(r16)
  803330:	800b883a 	mov	r5,r16
  803334:	10bfffc4 	addi	r2,r2,-1
  803338:	80800115 	stw	r2,4(r16)
  80333c:	103ff10e 	bge	r2,zero,803304 <getc+0x44>
  803340:	89000017 	ldw	r4,0(r17)
  803344:	dfc00217 	ldw	ra,8(sp)
  803348:	dc400117 	ldw	r17,4(sp)
  80334c:	dc000017 	ldw	r16,0(sp)
  803350:	dec00304 	addi	sp,sp,12
  803354:	0803d381 	jmpi	803d38 <__srget_r>

00803358 <_getc_r>:
  803358:	defffd04 	addi	sp,sp,-12
  80335c:	dc400115 	stw	r17,4(sp)
  803360:	dc000015 	stw	r16,0(sp)
  803364:	dfc00215 	stw	ra,8(sp)
  803368:	2021883a 	mov	r16,r4
  80336c:	2823883a 	mov	r17,r5
  803370:	20000226 	beq	r4,zero,80337c <_getc_r+0x24>
  803374:	20800e17 	ldw	r2,56(r4)
  803378:	10000f26 	beq	r2,zero,8033b8 <_getc_r+0x60>
  80337c:	88800117 	ldw	r2,4(r17)
  803380:	8009883a 	mov	r4,r16
  803384:	880b883a 	mov	r5,r17
  803388:	10bfffc4 	addi	r2,r2,-1
  80338c:	88800115 	stw	r2,4(r17)
  803390:	10001016 	blt	r2,zero,8033d4 <_getc_r+0x7c>
  803394:	88c00017 	ldw	r3,0(r17)
  803398:	18800003 	ldbu	r2,0(r3)
  80339c:	18c00044 	addi	r3,r3,1
  8033a0:	88c00015 	stw	r3,0(r17)
  8033a4:	dfc00217 	ldw	ra,8(sp)
  8033a8:	dc400117 	ldw	r17,4(sp)
  8033ac:	dc000017 	ldw	r16,0(sp)
  8033b0:	dec00304 	addi	sp,sp,12
  8033b4:	f800283a 	ret
  8033b8:	0807b3c0 	call	807b3c <__sinit>
  8033bc:	88800117 	ldw	r2,4(r17)
  8033c0:	8009883a 	mov	r4,r16
  8033c4:	880b883a 	mov	r5,r17
  8033c8:	10bfffc4 	addi	r2,r2,-1
  8033cc:	88800115 	stw	r2,4(r17)
  8033d0:	103ff00e 	bge	r2,zero,803394 <_getc_r+0x3c>
  8033d4:	dfc00217 	ldw	ra,8(sp)
  8033d8:	dc400117 	ldw	r17,4(sp)
  8033dc:	dc000017 	ldw	r16,0(sp)
  8033e0:	dec00304 	addi	sp,sp,12
  8033e4:	0803d381 	jmpi	803d38 <__srget_r>

008033e8 <free>:
  8033e8:	00802074 	movhi	r2,129
  8033ec:	1097bd04 	addi	r2,r2,24308
  8033f0:	200b883a 	mov	r5,r4
  8033f4:	11000017 	ldw	r4,0(r2)
  8033f8:	0807ef41 	jmpi	807ef4 <_free_r>

008033fc <malloc>:
  8033fc:	00802074 	movhi	r2,129
  803400:	1097bd04 	addi	r2,r2,24308
  803404:	200b883a 	mov	r5,r4
  803408:	11000017 	ldw	r4,0(r2)
  80340c:	08034101 	jmpi	803410 <_malloc_r>

00803410 <_malloc_r>:
  803410:	defff604 	addi	sp,sp,-40
  803414:	28c002c4 	addi	r3,r5,11
  803418:	00800584 	movi	r2,22
  80341c:	dc800215 	stw	r18,8(sp)
  803420:	dfc00915 	stw	ra,36(sp)
  803424:	df000815 	stw	fp,32(sp)
  803428:	ddc00715 	stw	r23,28(sp)
  80342c:	dd800615 	stw	r22,24(sp)
  803430:	dd400515 	stw	r21,20(sp)
  803434:	dd000415 	stw	r20,16(sp)
  803438:	dcc00315 	stw	r19,12(sp)
  80343c:	dc400115 	stw	r17,4(sp)
  803440:	dc000015 	stw	r16,0(sp)
  803444:	2025883a 	mov	r18,r4
  803448:	10c01236 	bltu	r2,r3,803494 <_malloc_r+0x84>
  80344c:	04400404 	movi	r17,16
  803450:	8940142e 	bgeu	r17,r5,8034a4 <_malloc_r+0x94>
  803454:	00800304 	movi	r2,12
  803458:	0007883a 	mov	r3,zero
  80345c:	90800015 	stw	r2,0(r18)
  803460:	1805883a 	mov	r2,r3
  803464:	dfc00917 	ldw	ra,36(sp)
  803468:	df000817 	ldw	fp,32(sp)
  80346c:	ddc00717 	ldw	r23,28(sp)
  803470:	dd800617 	ldw	r22,24(sp)
  803474:	dd400517 	ldw	r21,20(sp)
  803478:	dd000417 	ldw	r20,16(sp)
  80347c:	dcc00317 	ldw	r19,12(sp)
  803480:	dc800217 	ldw	r18,8(sp)
  803484:	dc400117 	ldw	r17,4(sp)
  803488:	dc000017 	ldw	r16,0(sp)
  80348c:	dec00a04 	addi	sp,sp,40
  803490:	f800283a 	ret
  803494:	00bffe04 	movi	r2,-8
  803498:	18a2703a 	and	r17,r3,r2
  80349c:	883fed16 	blt	r17,zero,803454 <_malloc_r+0x44>
  8034a0:	897fec36 	bltu	r17,r5,803454 <_malloc_r+0x44>
  8034a4:	9009883a 	mov	r4,r18
  8034a8:	080c8100 	call	80c810 <__malloc_lock>
  8034ac:	00807dc4 	movi	r2,503
  8034b0:	14402b2e 	bgeu	r2,r17,803560 <_malloc_r+0x150>
  8034b4:	8806d27a 	srli	r3,r17,9
  8034b8:	18003f1e 	bne	r3,zero,8035b8 <_malloc_r+0x1a8>
  8034bc:	880cd0fa 	srli	r6,r17,3
  8034c0:	300490fa 	slli	r2,r6,3
  8034c4:	02c02074 	movhi	r11,129
  8034c8:	5ad21604 	addi	r11,r11,18520
  8034cc:	12cb883a 	add	r5,r2,r11
  8034d0:	2c000317 	ldw	r16,12(r5)
  8034d4:	580f883a 	mov	r7,r11
  8034d8:	2c00041e 	bne	r5,r16,8034ec <_malloc_r+0xdc>
  8034dc:	00000a06 	br	803508 <_malloc_r+0xf8>
  8034e0:	1800860e 	bge	r3,zero,8036fc <_malloc_r+0x2ec>
  8034e4:	84000317 	ldw	r16,12(r16)
  8034e8:	2c000726 	beq	r5,r16,803508 <_malloc_r+0xf8>
  8034ec:	80800117 	ldw	r2,4(r16)
  8034f0:	00ffff04 	movi	r3,-4
  8034f4:	10c8703a 	and	r4,r2,r3
  8034f8:	2447c83a 	sub	r3,r4,r17
  8034fc:	008003c4 	movi	r2,15
  803500:	10fff70e 	bge	r2,r3,8034e0 <_malloc_r+0xd0>
  803504:	31bfffc4 	addi	r6,r6,-1
  803508:	32400044 	addi	r9,r6,1
  80350c:	02802074 	movhi	r10,129
  803510:	52921804 	addi	r10,r10,18528
  803514:	54000217 	ldw	r16,8(r10)
  803518:	8280a026 	beq	r16,r10,80379c <_malloc_r+0x38c>
  80351c:	80800117 	ldw	r2,4(r16)
  803520:	00ffff04 	movi	r3,-4
  803524:	10ca703a 	and	r5,r2,r3
  803528:	2c4dc83a 	sub	r6,r5,r17
  80352c:	008003c4 	movi	r2,15
  803530:	11808316 	blt	r2,r6,803740 <_malloc_r+0x330>
  803534:	52800315 	stw	r10,12(r10)
  803538:	52800215 	stw	r10,8(r10)
  80353c:	30002916 	blt	r6,zero,8035e4 <_malloc_r+0x1d4>
  803540:	8147883a 	add	r3,r16,r5
  803544:	18800117 	ldw	r2,4(r3)
  803548:	9009883a 	mov	r4,r18
  80354c:	10800054 	ori	r2,r2,1
  803550:	18800115 	stw	r2,4(r3)
  803554:	080c8140 	call	80c814 <__malloc_unlock>
  803558:	80c00204 	addi	r3,r16,8
  80355c:	003fc006 	br	803460 <_malloc_r+0x50>
  803560:	02c02074 	movhi	r11,129
  803564:	5ad21604 	addi	r11,r11,18520
  803568:	8ac5883a 	add	r2,r17,r11
  80356c:	14000317 	ldw	r16,12(r2)
  803570:	580f883a 	mov	r7,r11
  803574:	8806d0fa 	srli	r3,r17,3
  803578:	14006c26 	beq	r2,r16,80372c <_malloc_r+0x31c>
  80357c:	80c00117 	ldw	r3,4(r16)
  803580:	00bfff04 	movi	r2,-4
  803584:	81800317 	ldw	r6,12(r16)
  803588:	1886703a 	and	r3,r3,r2
  80358c:	80c7883a 	add	r3,r16,r3
  803590:	18800117 	ldw	r2,4(r3)
  803594:	81400217 	ldw	r5,8(r16)
  803598:	9009883a 	mov	r4,r18
  80359c:	10800054 	ori	r2,r2,1
  8035a0:	18800115 	stw	r2,4(r3)
  8035a4:	31400215 	stw	r5,8(r6)
  8035a8:	29800315 	stw	r6,12(r5)
  8035ac:	080c8140 	call	80c814 <__malloc_unlock>
  8035b0:	80c00204 	addi	r3,r16,8
  8035b4:	003faa06 	br	803460 <_malloc_r+0x50>
  8035b8:	00800104 	movi	r2,4
  8035bc:	10c0052e 	bgeu	r2,r3,8035d4 <_malloc_r+0x1c4>
  8035c0:	00800504 	movi	r2,20
  8035c4:	10c07836 	bltu	r2,r3,8037a8 <_malloc_r+0x398>
  8035c8:	198016c4 	addi	r6,r3,91
  8035cc:	300490fa 	slli	r2,r6,3
  8035d0:	003fbc06 	br	8034c4 <_malloc_r+0xb4>
  8035d4:	8804d1ba 	srli	r2,r17,6
  8035d8:	11800e04 	addi	r6,r2,56
  8035dc:	300490fa 	slli	r2,r6,3
  8035e0:	003fb806 	br	8034c4 <_malloc_r+0xb4>
  8035e4:	00807fc4 	movi	r2,511
  8035e8:	1140bb36 	bltu	r2,r5,8038d8 <_malloc_r+0x4c8>
  8035ec:	2806d0fa 	srli	r3,r5,3
  8035f0:	573ffe04 	addi	fp,r10,-8
  8035f4:	00800044 	movi	r2,1
  8035f8:	180890fa 	slli	r4,r3,3
  8035fc:	1807d0ba 	srai	r3,r3,2
  803600:	e1c00117 	ldw	r7,4(fp)
  803604:	5909883a 	add	r4,r11,r4
  803608:	21400217 	ldw	r5,8(r4)
  80360c:	10c4983a 	sll	r2,r2,r3
  803610:	81000315 	stw	r4,12(r16)
  803614:	81400215 	stw	r5,8(r16)
  803618:	388eb03a 	or	r7,r7,r2
  80361c:	2c000315 	stw	r16,12(r5)
  803620:	24000215 	stw	r16,8(r4)
  803624:	e1c00115 	stw	r7,4(fp)
  803628:	4807883a 	mov	r3,r9
  80362c:	4800cd16 	blt	r9,zero,803964 <_malloc_r+0x554>
  803630:	1807d0ba 	srai	r3,r3,2
  803634:	00800044 	movi	r2,1
  803638:	10c8983a 	sll	r4,r2,r3
  80363c:	39004436 	bltu	r7,r4,803750 <_malloc_r+0x340>
  803640:	21c4703a 	and	r2,r4,r7
  803644:	10000a1e 	bne	r2,zero,803670 <_malloc_r+0x260>
  803648:	2109883a 	add	r4,r4,r4
  80364c:	00bfff04 	movi	r2,-4
  803650:	4884703a 	and	r2,r9,r2
  803654:	3906703a 	and	r3,r7,r4
  803658:	12400104 	addi	r9,r2,4
  80365c:	1800041e 	bne	r3,zero,803670 <_malloc_r+0x260>
  803660:	2109883a 	add	r4,r4,r4
  803664:	3904703a 	and	r2,r7,r4
  803668:	4a400104 	addi	r9,r9,4
  80366c:	103ffc26 	beq	r2,zero,803660 <_malloc_r+0x250>
  803670:	480490fa 	slli	r2,r9,3
  803674:	4819883a 	mov	r12,r9
  803678:	023fff04 	movi	r8,-4
  80367c:	589b883a 	add	r13,r11,r2
  803680:	6807883a 	mov	r3,r13
  803684:	014003c4 	movi	r5,15
  803688:	1c000317 	ldw	r16,12(r3)
  80368c:	1c00041e 	bne	r3,r16,8036a0 <_malloc_r+0x290>
  803690:	0000a706 	br	803930 <_malloc_r+0x520>
  803694:	3000ab0e 	bge	r6,zero,803944 <_malloc_r+0x534>
  803698:	84000317 	ldw	r16,12(r16)
  80369c:	1c00a426 	beq	r3,r16,803930 <_malloc_r+0x520>
  8036a0:	80800117 	ldw	r2,4(r16)
  8036a4:	1204703a 	and	r2,r2,r8
  8036a8:	144dc83a 	sub	r6,r2,r17
  8036ac:	29bff90e 	bge	r5,r6,803694 <_malloc_r+0x284>
  8036b0:	81000317 	ldw	r4,12(r16)
  8036b4:	80c00217 	ldw	r3,8(r16)
  8036b8:	89400054 	ori	r5,r17,1
  8036bc:	8445883a 	add	r2,r16,r17
  8036c0:	20c00215 	stw	r3,8(r4)
  8036c4:	19000315 	stw	r4,12(r3)
  8036c8:	81400115 	stw	r5,4(r16)
  8036cc:	1187883a 	add	r3,r2,r6
  8036d0:	31000054 	ori	r4,r6,1
  8036d4:	50800315 	stw	r2,12(r10)
  8036d8:	50800215 	stw	r2,8(r10)
  8036dc:	19800015 	stw	r6,0(r3)
  8036e0:	11000115 	stw	r4,4(r2)
  8036e4:	12800215 	stw	r10,8(r2)
  8036e8:	12800315 	stw	r10,12(r2)
  8036ec:	9009883a 	mov	r4,r18
  8036f0:	080c8140 	call	80c814 <__malloc_unlock>
  8036f4:	80c00204 	addi	r3,r16,8
  8036f8:	003f5906 	br	803460 <_malloc_r+0x50>
  8036fc:	8109883a 	add	r4,r16,r4
  803700:	20800117 	ldw	r2,4(r4)
  803704:	80c00217 	ldw	r3,8(r16)
  803708:	81400317 	ldw	r5,12(r16)
  80370c:	10800054 	ori	r2,r2,1
  803710:	20800115 	stw	r2,4(r4)
  803714:	28c00215 	stw	r3,8(r5)
  803718:	19400315 	stw	r5,12(r3)
  80371c:	9009883a 	mov	r4,r18
  803720:	080c8140 	call	80c814 <__malloc_unlock>
  803724:	80c00204 	addi	r3,r16,8
  803728:	003f4d06 	br	803460 <_malloc_r+0x50>
  80372c:	80800204 	addi	r2,r16,8
  803730:	14000317 	ldw	r16,12(r2)
  803734:	143f911e 	bne	r2,r16,80357c <_malloc_r+0x16c>
  803738:	1a400084 	addi	r9,r3,2
  80373c:	003f7306 	br	80350c <_malloc_r+0xfc>
  803740:	88c00054 	ori	r3,r17,1
  803744:	8445883a 	add	r2,r16,r17
  803748:	80c00115 	stw	r3,4(r16)
  80374c:	003fdf06 	br	8036cc <_malloc_r+0x2bc>
  803750:	e4000217 	ldw	r16,8(fp)
  803754:	00bfff04 	movi	r2,-4
  803758:	80c00117 	ldw	r3,4(r16)
  80375c:	802d883a 	mov	r22,r16
  803760:	18aa703a 	and	r21,r3,r2
  803764:	ac401636 	bltu	r21,r17,8037c0 <_malloc_r+0x3b0>
  803768:	ac49c83a 	sub	r4,r21,r17
  80376c:	008003c4 	movi	r2,15
  803770:	1100130e 	bge	r2,r4,8037c0 <_malloc_r+0x3b0>
  803774:	88800054 	ori	r2,r17,1
  803778:	8447883a 	add	r3,r16,r17
  80377c:	80800115 	stw	r2,4(r16)
  803780:	20800054 	ori	r2,r4,1
  803784:	18800115 	stw	r2,4(r3)
  803788:	e0c00215 	stw	r3,8(fp)
  80378c:	9009883a 	mov	r4,r18
  803790:	080c8140 	call	80c814 <__malloc_unlock>
  803794:	80c00204 	addi	r3,r16,8
  803798:	003f3106 	br	803460 <_malloc_r+0x50>
  80379c:	39c00117 	ldw	r7,4(r7)
  8037a0:	573ffe04 	addi	fp,r10,-8
  8037a4:	003fa006 	br	803628 <_malloc_r+0x218>
  8037a8:	00801504 	movi	r2,84
  8037ac:	10c06736 	bltu	r2,r3,80394c <_malloc_r+0x53c>
  8037b0:	8804d33a 	srli	r2,r17,12
  8037b4:	11801b84 	addi	r6,r2,110
  8037b8:	300490fa 	slli	r2,r6,3
  8037bc:	003f4106 	br	8034c4 <_malloc_r+0xb4>
  8037c0:	d0a76617 	ldw	r2,-25192(gp)
  8037c4:	d0e00317 	ldw	r3,-32756(gp)
  8037c8:	053fffc4 	movi	r20,-1
  8037cc:	10800404 	addi	r2,r2,16
  8037d0:	88a7883a 	add	r19,r17,r2
  8037d4:	1d000326 	beq	r3,r20,8037e4 <_malloc_r+0x3d4>
  8037d8:	98c3ffc4 	addi	r3,r19,4095
  8037dc:	00bc0004 	movi	r2,-4096
  8037e0:	18a6703a 	and	r19,r3,r2
  8037e4:	9009883a 	mov	r4,r18
  8037e8:	980b883a 	mov	r5,r19
  8037ec:	0803d980 	call	803d98 <_sbrk_r>
  8037f0:	1009883a 	mov	r4,r2
  8037f4:	15000426 	beq	r2,r20,803808 <_malloc_r+0x3f8>
  8037f8:	854b883a 	add	r5,r16,r21
  8037fc:	1029883a 	mov	r20,r2
  803800:	11405a2e 	bgeu	r2,r5,80396c <_malloc_r+0x55c>
  803804:	87000c26 	beq	r16,fp,803838 <_malloc_r+0x428>
  803808:	e4000217 	ldw	r16,8(fp)
  80380c:	80c00117 	ldw	r3,4(r16)
  803810:	00bfff04 	movi	r2,-4
  803814:	1884703a 	and	r2,r3,r2
  803818:	14400336 	bltu	r2,r17,803828 <_malloc_r+0x418>
  80381c:	1449c83a 	sub	r4,r2,r17
  803820:	008003c4 	movi	r2,15
  803824:	113fd316 	blt	r2,r4,803774 <_malloc_r+0x364>
  803828:	9009883a 	mov	r4,r18
  80382c:	080c8140 	call	80c814 <__malloc_unlock>
  803830:	0007883a 	mov	r3,zero
  803834:	003f0a06 	br	803460 <_malloc_r+0x50>
  803838:	05c02074 	movhi	r23,129
  80383c:	bddf3f04 	addi	r23,r23,31996
  803840:	b8800017 	ldw	r2,0(r23)
  803844:	988d883a 	add	r6,r19,r2
  803848:	b9800015 	stw	r6,0(r23)
  80384c:	d0e00317 	ldw	r3,-32756(gp)
  803850:	00bfffc4 	movi	r2,-1
  803854:	18808e26 	beq	r3,r2,803a90 <_malloc_r+0x680>
  803858:	2145c83a 	sub	r2,r4,r5
  80385c:	3085883a 	add	r2,r6,r2
  803860:	b8800015 	stw	r2,0(r23)
  803864:	20c001cc 	andi	r3,r4,7
  803868:	18005f1e 	bne	r3,zero,8039e8 <_malloc_r+0x5d8>
  80386c:	000b883a 	mov	r5,zero
  803870:	a4c5883a 	add	r2,r20,r19
  803874:	1083ffcc 	andi	r2,r2,4095
  803878:	00c40004 	movi	r3,4096
  80387c:	1887c83a 	sub	r3,r3,r2
  803880:	28e7883a 	add	r19,r5,r3
  803884:	9009883a 	mov	r4,r18
  803888:	980b883a 	mov	r5,r19
  80388c:	0803d980 	call	803d98 <_sbrk_r>
  803890:	1007883a 	mov	r3,r2
  803894:	00bfffc4 	movi	r2,-1
  803898:	18807a26 	beq	r3,r2,803a84 <_malloc_r+0x674>
  80389c:	1d05c83a 	sub	r2,r3,r20
  8038a0:	9885883a 	add	r2,r19,r2
  8038a4:	10c00054 	ori	r3,r2,1
  8038a8:	b8800017 	ldw	r2,0(r23)
  8038ac:	a021883a 	mov	r16,r20
  8038b0:	a0c00115 	stw	r3,4(r20)
  8038b4:	9885883a 	add	r2,r19,r2
  8038b8:	b8800015 	stw	r2,0(r23)
  8038bc:	e5000215 	stw	r20,8(fp)
  8038c0:	b7003626 	beq	r22,fp,80399c <_malloc_r+0x58c>
  8038c4:	018003c4 	movi	r6,15
  8038c8:	35404b36 	bltu	r6,r21,8039f8 <_malloc_r+0x5e8>
  8038cc:	00800044 	movi	r2,1
  8038d0:	a0800115 	stw	r2,4(r20)
  8038d4:	003fcd06 	br	80380c <_malloc_r+0x3fc>
  8038d8:	2808d27a 	srli	r4,r5,9
  8038dc:	2000371e 	bne	r4,zero,8039bc <_malloc_r+0x5ac>
  8038e0:	2808d0fa 	srli	r4,r5,3
  8038e4:	200690fa 	slli	r3,r4,3
  8038e8:	1ad1883a 	add	r8,r3,r11
  8038ec:	41800217 	ldw	r6,8(r8)
  8038f0:	41805b26 	beq	r8,r6,803a60 <_malloc_r+0x650>
  8038f4:	30800117 	ldw	r2,4(r6)
  8038f8:	00ffff04 	movi	r3,-4
  8038fc:	10c4703a 	and	r2,r2,r3
  803900:	2880022e 	bgeu	r5,r2,80390c <_malloc_r+0x4fc>
  803904:	31800217 	ldw	r6,8(r6)
  803908:	41bffa1e 	bne	r8,r6,8038f4 <_malloc_r+0x4e4>
  80390c:	32000317 	ldw	r8,12(r6)
  803910:	39c00117 	ldw	r7,4(r7)
  803914:	82000315 	stw	r8,12(r16)
  803918:	81800215 	stw	r6,8(r16)
  80391c:	07002074 	movhi	fp,129
  803920:	e7121604 	addi	fp,fp,18520
  803924:	34000315 	stw	r16,12(r6)
  803928:	44000215 	stw	r16,8(r8)
  80392c:	003f3e06 	br	803628 <_malloc_r+0x218>
  803930:	63000044 	addi	r12,r12,1
  803934:	608000cc 	andi	r2,r12,3
  803938:	10005d26 	beq	r2,zero,803ab0 <_malloc_r+0x6a0>
  80393c:	18c00204 	addi	r3,r3,8
  803940:	003f5106 	br	803688 <_malloc_r+0x278>
  803944:	8089883a 	add	r4,r16,r2
  803948:	003f6d06 	br	803700 <_malloc_r+0x2f0>
  80394c:	00805504 	movi	r2,340
  803950:	10c02036 	bltu	r2,r3,8039d4 <_malloc_r+0x5c4>
  803954:	8804d3fa 	srli	r2,r17,15
  803958:	11801dc4 	addi	r6,r2,119
  80395c:	300490fa 	slli	r2,r6,3
  803960:	003ed806 	br	8034c4 <_malloc_r+0xb4>
  803964:	48c000c4 	addi	r3,r9,3
  803968:	003f3106 	br	803630 <_malloc_r+0x220>
  80396c:	05c02074 	movhi	r23,129
  803970:	bddf3f04 	addi	r23,r23,31996
  803974:	b8800017 	ldw	r2,0(r23)
  803978:	988d883a 	add	r6,r19,r2
  80397c:	b9800015 	stw	r6,0(r23)
  803980:	293fb21e 	bne	r5,r4,80384c <_malloc_r+0x43c>
  803984:	2083ffcc 	andi	r2,r4,4095
  803988:	103fb01e 	bne	r2,zero,80384c <_malloc_r+0x43c>
  80398c:	e4000217 	ldw	r16,8(fp)
  803990:	9d45883a 	add	r2,r19,r21
  803994:	10800054 	ori	r2,r2,1
  803998:	80800115 	stw	r2,4(r16)
  80399c:	b8c00017 	ldw	r3,0(r23)
  8039a0:	d0a76717 	ldw	r2,-25188(gp)
  8039a4:	10c0012e 	bgeu	r2,r3,8039ac <_malloc_r+0x59c>
  8039a8:	d0e76715 	stw	r3,-25188(gp)
  8039ac:	d0a76817 	ldw	r2,-25184(gp)
  8039b0:	10ff962e 	bgeu	r2,r3,80380c <_malloc_r+0x3fc>
  8039b4:	d0e76815 	stw	r3,-25184(gp)
  8039b8:	003f9406 	br	80380c <_malloc_r+0x3fc>
  8039bc:	00800104 	movi	r2,4
  8039c0:	11001e36 	bltu	r2,r4,803a3c <_malloc_r+0x62c>
  8039c4:	2804d1ba 	srli	r2,r5,6
  8039c8:	11000e04 	addi	r4,r2,56
  8039cc:	200690fa 	slli	r3,r4,3
  8039d0:	003fc506 	br	8038e8 <_malloc_r+0x4d8>
  8039d4:	00815504 	movi	r2,1364
  8039d8:	10c01d2e 	bgeu	r2,r3,803a50 <_malloc_r+0x640>
  8039dc:	01801f84 	movi	r6,126
  8039e0:	0080fc04 	movi	r2,1008
  8039e4:	003eb706 	br	8034c4 <_malloc_r+0xb4>
  8039e8:	00800204 	movi	r2,8
  8039ec:	10cbc83a 	sub	r5,r2,r3
  8039f0:	2169883a 	add	r20,r4,r5
  8039f4:	003f9e06 	br	803870 <_malloc_r+0x460>
  8039f8:	00bffe04 	movi	r2,-8
  8039fc:	a93ffd04 	addi	r4,r21,-12
  803a00:	2088703a 	and	r4,r4,r2
  803a04:	b10b883a 	add	r5,r22,r4
  803a08:	00c00144 	movi	r3,5
  803a0c:	28c00215 	stw	r3,8(r5)
  803a10:	28c00115 	stw	r3,4(r5)
  803a14:	b0800117 	ldw	r2,4(r22)
  803a18:	1080004c 	andi	r2,r2,1
  803a1c:	2084b03a 	or	r2,r4,r2
  803a20:	b0800115 	stw	r2,4(r22)
  803a24:	313fdd2e 	bgeu	r6,r4,80399c <_malloc_r+0x58c>
  803a28:	b1400204 	addi	r5,r22,8
  803a2c:	9009883a 	mov	r4,r18
  803a30:	0807ef40 	call	807ef4 <_free_r>
  803a34:	e4000217 	ldw	r16,8(fp)
  803a38:	003fd806 	br	80399c <_malloc_r+0x58c>
  803a3c:	00800504 	movi	r2,20
  803a40:	11001536 	bltu	r2,r4,803a98 <_malloc_r+0x688>
  803a44:	210016c4 	addi	r4,r4,91
  803a48:	200690fa 	slli	r3,r4,3
  803a4c:	003fa606 	br	8038e8 <_malloc_r+0x4d8>
  803a50:	8804d4ba 	srli	r2,r17,18
  803a54:	11801f04 	addi	r6,r2,124
  803a58:	300490fa 	slli	r2,r6,3
  803a5c:	003e9906 	br	8034c4 <_malloc_r+0xb4>
  803a60:	2009d0ba 	srai	r4,r4,2
  803a64:	01402074 	movhi	r5,129
  803a68:	29521604 	addi	r5,r5,18520
  803a6c:	00c00044 	movi	r3,1
  803a70:	28800117 	ldw	r2,4(r5)
  803a74:	1906983a 	sll	r3,r3,r4
  803a78:	10c4b03a 	or	r2,r2,r3
  803a7c:	28800115 	stw	r2,4(r5)
  803a80:	003fa306 	br	803910 <_malloc_r+0x500>
  803a84:	0027883a 	mov	r19,zero
  803a88:	00c00044 	movi	r3,1
  803a8c:	003f8606 	br	8038a8 <_malloc_r+0x498>
  803a90:	d1200315 	stw	r4,-32756(gp)
  803a94:	003f7306 	br	803864 <_malloc_r+0x454>
  803a98:	00801504 	movi	r2,84
  803a9c:	11001936 	bltu	r2,r4,803b04 <_malloc_r+0x6f4>
  803aa0:	2804d33a 	srli	r2,r5,12
  803aa4:	11001b84 	addi	r4,r2,110
  803aa8:	200690fa 	slli	r3,r4,3
  803aac:	003f8e06 	br	8038e8 <_malloc_r+0x4d8>
  803ab0:	480b883a 	mov	r5,r9
  803ab4:	6807883a 	mov	r3,r13
  803ab8:	288000cc 	andi	r2,r5,3
  803abc:	18fffe04 	addi	r3,r3,-8
  803ac0:	297fffc4 	addi	r5,r5,-1
  803ac4:	10001526 	beq	r2,zero,803b1c <_malloc_r+0x70c>
  803ac8:	18800217 	ldw	r2,8(r3)
  803acc:	10fffa26 	beq	r2,r3,803ab8 <_malloc_r+0x6a8>
  803ad0:	2109883a 	add	r4,r4,r4
  803ad4:	393f1e36 	bltu	r7,r4,803750 <_malloc_r+0x340>
  803ad8:	203f1d26 	beq	r4,zero,803750 <_malloc_r+0x340>
  803adc:	21c4703a 	and	r2,r4,r7
  803ae0:	10000226 	beq	r2,zero,803aec <_malloc_r+0x6dc>
  803ae4:	6013883a 	mov	r9,r12
  803ae8:	003ee106 	br	803670 <_malloc_r+0x260>
  803aec:	2109883a 	add	r4,r4,r4
  803af0:	3904703a 	and	r2,r7,r4
  803af4:	63000104 	addi	r12,r12,4
  803af8:	103ffc26 	beq	r2,zero,803aec <_malloc_r+0x6dc>
  803afc:	6013883a 	mov	r9,r12
  803b00:	003edb06 	br	803670 <_malloc_r+0x260>
  803b04:	00805504 	movi	r2,340
  803b08:	11000836 	bltu	r2,r4,803b2c <_malloc_r+0x71c>
  803b0c:	2804d3fa 	srli	r2,r5,15
  803b10:	11001dc4 	addi	r4,r2,119
  803b14:	200690fa 	slli	r3,r4,3
  803b18:	003f7306 	br	8038e8 <_malloc_r+0x4d8>
  803b1c:	0104303a 	nor	r2,zero,r4
  803b20:	388e703a 	and	r7,r7,r2
  803b24:	e1c00115 	stw	r7,4(fp)
  803b28:	003fe906 	br	803ad0 <_malloc_r+0x6c0>
  803b2c:	00815504 	movi	r2,1364
  803b30:	1100032e 	bgeu	r2,r4,803b40 <_malloc_r+0x730>
  803b34:	01001f84 	movi	r4,126
  803b38:	00c0fc04 	movi	r3,1008
  803b3c:	003f6a06 	br	8038e8 <_malloc_r+0x4d8>
  803b40:	2804d4ba 	srli	r2,r5,18
  803b44:	11001f04 	addi	r4,r2,124
  803b48:	200690fa 	slli	r3,r4,3
  803b4c:	003f6606 	br	8038e8 <_malloc_r+0x4d8>

00803b50 <memset>:
  803b50:	008000c4 	movi	r2,3
  803b54:	29403fcc 	andi	r5,r5,255
  803b58:	2007883a 	mov	r3,r4
  803b5c:	1180022e 	bgeu	r2,r6,803b68 <memset+0x18>
  803b60:	2084703a 	and	r2,r4,r2
  803b64:	10000826 	beq	r2,zero,803b88 <memset+0x38>
  803b68:	30000526 	beq	r6,zero,803b80 <memset+0x30>
  803b6c:	2805883a 	mov	r2,r5
  803b70:	30cd883a 	add	r6,r6,r3
  803b74:	18800005 	stb	r2,0(r3)
  803b78:	18c00044 	addi	r3,r3,1
  803b7c:	19bffd1e 	bne	r3,r6,803b74 <memset+0x24>
  803b80:	2005883a 	mov	r2,r4
  803b84:	f800283a 	ret
  803b88:	2804923a 	slli	r2,r5,8
  803b8c:	020003c4 	movi	r8,15
  803b90:	200f883a 	mov	r7,r4
  803b94:	2884b03a 	or	r2,r5,r2
  803b98:	1006943a 	slli	r3,r2,16
  803b9c:	10c6b03a 	or	r3,r2,r3
  803ba0:	41800a2e 	bgeu	r8,r6,803bcc <memset+0x7c>
  803ba4:	4005883a 	mov	r2,r8
  803ba8:	31bffc04 	addi	r6,r6,-16
  803bac:	38c00015 	stw	r3,0(r7)
  803bb0:	38c00115 	stw	r3,4(r7)
  803bb4:	38c00215 	stw	r3,8(r7)
  803bb8:	38c00315 	stw	r3,12(r7)
  803bbc:	39c00404 	addi	r7,r7,16
  803bc0:	11bff936 	bltu	r2,r6,803ba8 <memset+0x58>
  803bc4:	008000c4 	movi	r2,3
  803bc8:	1180052e 	bgeu	r2,r6,803be0 <memset+0x90>
  803bcc:	31bfff04 	addi	r6,r6,-4
  803bd0:	008000c4 	movi	r2,3
  803bd4:	38c00015 	stw	r3,0(r7)
  803bd8:	39c00104 	addi	r7,r7,4
  803bdc:	11bffb36 	bltu	r2,r6,803bcc <memset+0x7c>
  803be0:	3807883a 	mov	r3,r7
  803be4:	003fe006 	br	803b68 <memset+0x18>

00803be8 <printf>:
  803be8:	defffb04 	addi	sp,sp,-20
  803bec:	dfc00115 	stw	ra,4(sp)
  803bf0:	d9400215 	stw	r5,8(sp)
  803bf4:	d9800315 	stw	r6,12(sp)
  803bf8:	d9c00415 	stw	r7,16(sp)
  803bfc:	00802074 	movhi	r2,129
  803c00:	1097bd04 	addi	r2,r2,24308
  803c04:	10c00017 	ldw	r3,0(r2)
  803c08:	200b883a 	mov	r5,r4
  803c0c:	d8800204 	addi	r2,sp,8
  803c10:	19000217 	ldw	r4,8(r3)
  803c14:	100d883a 	mov	r6,r2
  803c18:	d8800015 	stw	r2,0(sp)
  803c1c:	0805d980 	call	805d98 <__vfprintf_internal>
  803c20:	dfc00117 	ldw	ra,4(sp)
  803c24:	dec00504 	addi	sp,sp,20
  803c28:	f800283a 	ret

00803c2c <_printf_r>:
  803c2c:	defffc04 	addi	sp,sp,-16
  803c30:	dfc00115 	stw	ra,4(sp)
  803c34:	d9800215 	stw	r6,8(sp)
  803c38:	d9c00315 	stw	r7,12(sp)
  803c3c:	280d883a 	mov	r6,r5
  803c40:	21400217 	ldw	r5,8(r4)
  803c44:	d8c00204 	addi	r3,sp,8
  803c48:	180f883a 	mov	r7,r3
  803c4c:	d8c00015 	stw	r3,0(sp)
  803c50:	0803ed40 	call	803ed4 <___vfprintf_internal_r>
  803c54:	dfc00117 	ldw	ra,4(sp)
  803c58:	dec00404 	addi	sp,sp,16
  803c5c:	f800283a 	ret

00803c60 <putchar>:
  803c60:	00802074 	movhi	r2,129
  803c64:	1097bd04 	addi	r2,r2,24308
  803c68:	11800017 	ldw	r6,0(r2)
  803c6c:	200b883a 	mov	r5,r4
  803c70:	3009883a 	mov	r4,r6
  803c74:	31800217 	ldw	r6,8(r6)
  803c78:	0809e701 	jmpi	809e70 <_putc_r>

00803c7c <_putchar_r>:
  803c7c:	21800217 	ldw	r6,8(r4)
  803c80:	0809e701 	jmpi	809e70 <_putc_r>

00803c84 <_puts_r>:
  803c84:	defff604 	addi	sp,sp,-40
  803c88:	dc400715 	stw	r17,28(sp)
  803c8c:	2023883a 	mov	r17,r4
  803c90:	2809883a 	mov	r4,r5
  803c94:	dfc00915 	stw	ra,36(sp)
  803c98:	dcc00815 	stw	r19,32(sp)
  803c9c:	2827883a 	mov	r19,r5
  803ca0:	0803e080 	call	803e08 <strlen>
  803ca4:	89400217 	ldw	r5,8(r17)
  803ca8:	00c02074 	movhi	r3,129
  803cac:	18ceff04 	addi	r3,r3,15356
  803cb0:	01c00044 	movi	r7,1
  803cb4:	12000044 	addi	r8,r2,1
  803cb8:	d8c00515 	stw	r3,20(sp)
  803cbc:	d9c00615 	stw	r7,24(sp)
  803cc0:	d8c00304 	addi	r3,sp,12
  803cc4:	01c00084 	movi	r7,2
  803cc8:	8809883a 	mov	r4,r17
  803ccc:	d80d883a 	mov	r6,sp
  803cd0:	d8c00015 	stw	r3,0(sp)
  803cd4:	dcc00315 	stw	r19,12(sp)
  803cd8:	da000215 	stw	r8,8(sp)
  803cdc:	d9c00115 	stw	r7,4(sp)
  803ce0:	d8800415 	stw	r2,16(sp)
  803ce4:	08082080 	call	808208 <__sfvwrite_r>
  803ce8:	00ffffc4 	movi	r3,-1
  803cec:	10000626 	beq	r2,zero,803d08 <_puts_r+0x84>
  803cf0:	1805883a 	mov	r2,r3
  803cf4:	dfc00917 	ldw	ra,36(sp)
  803cf8:	dcc00817 	ldw	r19,32(sp)
  803cfc:	dc400717 	ldw	r17,28(sp)
  803d00:	dec00a04 	addi	sp,sp,40
  803d04:	f800283a 	ret
  803d08:	00c00284 	movi	r3,10
  803d0c:	1805883a 	mov	r2,r3
  803d10:	dfc00917 	ldw	ra,36(sp)
  803d14:	dcc00817 	ldw	r19,32(sp)
  803d18:	dc400717 	ldw	r17,28(sp)
  803d1c:	dec00a04 	addi	sp,sp,40
  803d20:	f800283a 	ret

00803d24 <puts>:
  803d24:	00802074 	movhi	r2,129
  803d28:	1097bd04 	addi	r2,r2,24308
  803d2c:	200b883a 	mov	r5,r4
  803d30:	11000017 	ldw	r4,0(r2)
  803d34:	0803c841 	jmpi	803c84 <_puts_r>

00803d38 <__srget_r>:
  803d38:	defffe04 	addi	sp,sp,-8
  803d3c:	dc000015 	stw	r16,0(sp)
  803d40:	dfc00115 	stw	ra,4(sp)
  803d44:	2821883a 	mov	r16,r5
  803d48:	080a54c0 	call	80a54c <__srefill_r>
  803d4c:	013fffc4 	movi	r4,-1
  803d50:	1000071e 	bne	r2,zero,803d70 <__srget_r+0x38>
  803d54:	80800117 	ldw	r2,4(r16)
  803d58:	81000017 	ldw	r4,0(r16)
  803d5c:	10bfffc4 	addi	r2,r2,-1
  803d60:	20c00044 	addi	r3,r4,1
  803d64:	80800115 	stw	r2,4(r16)
  803d68:	21000003 	ldbu	r4,0(r4)
  803d6c:	80c00015 	stw	r3,0(r16)
  803d70:	2005883a 	mov	r2,r4
  803d74:	dfc00117 	ldw	ra,4(sp)
  803d78:	dc000017 	ldw	r16,0(sp)
  803d7c:	dec00204 	addi	sp,sp,8
  803d80:	f800283a 	ret

00803d84 <__srget>:
  803d84:	00802074 	movhi	r2,129
  803d88:	1097bd04 	addi	r2,r2,24308
  803d8c:	200b883a 	mov	r5,r4
  803d90:	11000017 	ldw	r4,0(r2)
  803d94:	0803d381 	jmpi	803d38 <__srget_r>

00803d98 <_sbrk_r>:
  803d98:	defffd04 	addi	sp,sp,-12
  803d9c:	dc000015 	stw	r16,0(sp)
  803da0:	04002074 	movhi	r16,129
  803da4:	841f2604 	addi	r16,r16,31896
  803da8:	dc400115 	stw	r17,4(sp)
  803dac:	80000015 	stw	zero,0(r16)
  803db0:	2023883a 	mov	r17,r4
  803db4:	2809883a 	mov	r4,r5
  803db8:	dfc00215 	stw	ra,8(sp)
  803dbc:	080c9b40 	call	80c9b4 <sbrk>
  803dc0:	1007883a 	mov	r3,r2
  803dc4:	00bfffc4 	movi	r2,-1
  803dc8:	18800626 	beq	r3,r2,803de4 <_sbrk_r+0x4c>
  803dcc:	1805883a 	mov	r2,r3
  803dd0:	dfc00217 	ldw	ra,8(sp)
  803dd4:	dc400117 	ldw	r17,4(sp)
  803dd8:	dc000017 	ldw	r16,0(sp)
  803ddc:	dec00304 	addi	sp,sp,12
  803de0:	f800283a 	ret
  803de4:	80800017 	ldw	r2,0(r16)
  803de8:	103ff826 	beq	r2,zero,803dcc <_sbrk_r+0x34>
  803dec:	88800015 	stw	r2,0(r17)
  803df0:	1805883a 	mov	r2,r3
  803df4:	dfc00217 	ldw	ra,8(sp)
  803df8:	dc400117 	ldw	r17,4(sp)
  803dfc:	dc000017 	ldw	r16,0(sp)
  803e00:	dec00304 	addi	sp,sp,12
  803e04:	f800283a 	ret

00803e08 <strlen>:
  803e08:	208000cc 	andi	r2,r4,3
  803e0c:	2011883a 	mov	r8,r4
  803e10:	1000161e 	bne	r2,zero,803e6c <strlen+0x64>
  803e14:	20c00017 	ldw	r3,0(r4)
  803e18:	017fbff4 	movhi	r5,65279
  803e1c:	297fbfc4 	addi	r5,r5,-257
  803e20:	01e02074 	movhi	r7,32897
  803e24:	39e02004 	addi	r7,r7,-32640
  803e28:	1945883a 	add	r2,r3,r5
  803e2c:	11c4703a 	and	r2,r2,r7
  803e30:	00c6303a 	nor	r3,zero,r3
  803e34:	1886703a 	and	r3,r3,r2
  803e38:	18000c1e 	bne	r3,zero,803e6c <strlen+0x64>
  803e3c:	280d883a 	mov	r6,r5
  803e40:	380b883a 	mov	r5,r7
  803e44:	21000104 	addi	r4,r4,4
  803e48:	20800017 	ldw	r2,0(r4)
  803e4c:	1187883a 	add	r3,r2,r6
  803e50:	1946703a 	and	r3,r3,r5
  803e54:	0084303a 	nor	r2,zero,r2
  803e58:	10c4703a 	and	r2,r2,r3
  803e5c:	103ff926 	beq	r2,zero,803e44 <strlen+0x3c>
  803e60:	20800007 	ldb	r2,0(r4)
  803e64:	10000326 	beq	r2,zero,803e74 <strlen+0x6c>
  803e68:	21000044 	addi	r4,r4,1
  803e6c:	20800007 	ldb	r2,0(r4)
  803e70:	103ffd1e 	bne	r2,zero,803e68 <strlen+0x60>
  803e74:	2205c83a 	sub	r2,r4,r8
  803e78:	f800283a 	ret

00803e7c <__sprint_r>:
  803e7c:	30800217 	ldw	r2,8(r6)
  803e80:	defffe04 	addi	sp,sp,-8
  803e84:	dc000015 	stw	r16,0(sp)
  803e88:	dfc00115 	stw	ra,4(sp)
  803e8c:	3021883a 	mov	r16,r6
  803e90:	0007883a 	mov	r3,zero
  803e94:	1000061e 	bne	r2,zero,803eb0 <__sprint_r+0x34>
  803e98:	1805883a 	mov	r2,r3
  803e9c:	30000115 	stw	zero,4(r6)
  803ea0:	dfc00117 	ldw	ra,4(sp)
  803ea4:	dc000017 	ldw	r16,0(sp)
  803ea8:	dec00204 	addi	sp,sp,8
  803eac:	f800283a 	ret
  803eb0:	08082080 	call	808208 <__sfvwrite_r>
  803eb4:	1007883a 	mov	r3,r2
  803eb8:	1805883a 	mov	r2,r3
  803ebc:	80000115 	stw	zero,4(r16)
  803ec0:	80000215 	stw	zero,8(r16)
  803ec4:	dfc00117 	ldw	ra,4(sp)
  803ec8:	dc000017 	ldw	r16,0(sp)
  803ecc:	dec00204 	addi	sp,sp,8
  803ed0:	f800283a 	ret

00803ed4 <___vfprintf_internal_r>:
  803ed4:	defea404 	addi	sp,sp,-1392
  803ed8:	dd815815 	stw	r22,1376(sp)
  803edc:	dc015215 	stw	r16,1352(sp)
  803ee0:	d9c15115 	stw	r7,1348(sp)
  803ee4:	dfc15b15 	stw	ra,1388(sp)
  803ee8:	df015a15 	stw	fp,1384(sp)
  803eec:	ddc15915 	stw	r23,1380(sp)
  803ef0:	dd415715 	stw	r21,1372(sp)
  803ef4:	dd015615 	stw	r20,1368(sp)
  803ef8:	dcc15515 	stw	r19,1364(sp)
  803efc:	dc815415 	stw	r18,1360(sp)
  803f00:	dc415315 	stw	r17,1356(sp)
  803f04:	282d883a 	mov	r22,r5
  803f08:	3021883a 	mov	r16,r6
  803f0c:	d9014f15 	stw	r4,1340(sp)
  803f10:	080882c0 	call	80882c <_localeconv_r>
  803f14:	10800017 	ldw	r2,0(r2)
  803f18:	d9c15117 	ldw	r7,1348(sp)
  803f1c:	d8814915 	stw	r2,1316(sp)
  803f20:	d8814f17 	ldw	r2,1340(sp)
  803f24:	10000226 	beq	r2,zero,803f30 <___vfprintf_internal_r+0x5c>
  803f28:	10800e17 	ldw	r2,56(r2)
  803f2c:	10020d26 	beq	r2,zero,804764 <___vfprintf_internal_r+0x890>
  803f30:	b080030b 	ldhu	r2,12(r22)
  803f34:	1080020c 	andi	r2,r2,8
  803f38:	10020e26 	beq	r2,zero,804774 <___vfprintf_internal_r+0x8a0>
  803f3c:	b0800417 	ldw	r2,16(r22)
  803f40:	10020c26 	beq	r2,zero,804774 <___vfprintf_internal_r+0x8a0>
  803f44:	b200030b 	ldhu	r8,12(r22)
  803f48:	00800284 	movi	r2,10
  803f4c:	40c0068c 	andi	r3,r8,26
  803f50:	18802f1e 	bne	r3,r2,804010 <___vfprintf_internal_r+0x13c>
  803f54:	b080038f 	ldh	r2,14(r22)
  803f58:	10002d16 	blt	r2,zero,804010 <___vfprintf_internal_r+0x13c>
  803f5c:	b240038b 	ldhu	r9,14(r22)
  803f60:	b2800717 	ldw	r10,28(r22)
  803f64:	b2c00917 	ldw	r11,36(r22)
  803f68:	d9014f17 	ldw	r4,1340(sp)
  803f6c:	dc402904 	addi	r17,sp,164
  803f70:	d8804004 	addi	r2,sp,256
  803f74:	00c10004 	movi	r3,1024
  803f78:	423fff4c 	andi	r8,r8,65533
  803f7c:	800d883a 	mov	r6,r16
  803f80:	880b883a 	mov	r5,r17
  803f84:	da002c0d 	sth	r8,176(sp)
  803f88:	da402c8d 	sth	r9,178(sp)
  803f8c:	da803015 	stw	r10,192(sp)
  803f90:	dac03215 	stw	r11,200(sp)
  803f94:	d8802d15 	stw	r2,180(sp)
  803f98:	d8c02e15 	stw	r3,184(sp)
  803f9c:	d8802915 	stw	r2,164(sp)
  803fa0:	d8c02b15 	stw	r3,172(sp)
  803fa4:	d8002f15 	stw	zero,188(sp)
  803fa8:	0803ed40 	call	803ed4 <___vfprintf_internal_r>
  803fac:	d8814b15 	stw	r2,1324(sp)
  803fb0:	10000416 	blt	r2,zero,803fc4 <___vfprintf_internal_r+0xf0>
  803fb4:	d9014f17 	ldw	r4,1340(sp)
  803fb8:	880b883a 	mov	r5,r17
  803fbc:	08078a40 	call	8078a4 <_fflush_r>
  803fc0:	1002321e 	bne	r2,zero,80488c <___vfprintf_internal_r+0x9b8>
  803fc4:	d8802c0b 	ldhu	r2,176(sp)
  803fc8:	1080100c 	andi	r2,r2,64
  803fcc:	10000326 	beq	r2,zero,803fdc <___vfprintf_internal_r+0x108>
  803fd0:	b080030b 	ldhu	r2,12(r22)
  803fd4:	10801014 	ori	r2,r2,64
  803fd8:	b080030d 	sth	r2,12(r22)
  803fdc:	d8814b17 	ldw	r2,1324(sp)
  803fe0:	dfc15b17 	ldw	ra,1388(sp)
  803fe4:	df015a17 	ldw	fp,1384(sp)
  803fe8:	ddc15917 	ldw	r23,1380(sp)
  803fec:	dd815817 	ldw	r22,1376(sp)
  803ff0:	dd415717 	ldw	r21,1372(sp)
  803ff4:	dd015617 	ldw	r20,1368(sp)
  803ff8:	dcc15517 	ldw	r19,1364(sp)
  803ffc:	dc815417 	ldw	r18,1360(sp)
  804000:	dc415317 	ldw	r17,1356(sp)
  804004:	dc015217 	ldw	r16,1352(sp)
  804008:	dec15c04 	addi	sp,sp,1392
  80400c:	f800283a 	ret
  804010:	0005883a 	mov	r2,zero
  804014:	0007883a 	mov	r3,zero
  804018:	dd401904 	addi	r21,sp,100
  80401c:	d8814215 	stw	r2,1288(sp)
  804020:	802f883a 	mov	r23,r16
  804024:	d8c14315 	stw	r3,1292(sp)
  804028:	d8014b15 	stw	zero,1324(sp)
  80402c:	d8014815 	stw	zero,1312(sp)
  804030:	d8014415 	stw	zero,1296(sp)
  804034:	d8014715 	stw	zero,1308(sp)
  804038:	dd400c15 	stw	r21,48(sp)
  80403c:	d8000e15 	stw	zero,56(sp)
  804040:	d8000d15 	stw	zero,52(sp)
  804044:	b8800007 	ldb	r2,0(r23)
  804048:	10001926 	beq	r2,zero,8040b0 <___vfprintf_internal_r+0x1dc>
  80404c:	00c00944 	movi	r3,37
  804050:	10c01726 	beq	r2,r3,8040b0 <___vfprintf_internal_r+0x1dc>
  804054:	b821883a 	mov	r16,r23
  804058:	00000106 	br	804060 <___vfprintf_internal_r+0x18c>
  80405c:	10c00326 	beq	r2,r3,80406c <___vfprintf_internal_r+0x198>
  804060:	84000044 	addi	r16,r16,1
  804064:	80800007 	ldb	r2,0(r16)
  804068:	103ffc1e 	bne	r2,zero,80405c <___vfprintf_internal_r+0x188>
  80406c:	85e7c83a 	sub	r19,r16,r23
  804070:	98000e26 	beq	r19,zero,8040ac <___vfprintf_internal_r+0x1d8>
  804074:	dc800e17 	ldw	r18,56(sp)
  804078:	dc400d17 	ldw	r17,52(sp)
  80407c:	008001c4 	movi	r2,7
  804080:	94e5883a 	add	r18,r18,r19
  804084:	8c400044 	addi	r17,r17,1
  804088:	adc00015 	stw	r23,0(r21)
  80408c:	dc800e15 	stw	r18,56(sp)
  804090:	acc00115 	stw	r19,4(r21)
  804094:	dc400d15 	stw	r17,52(sp)
  804098:	14428b16 	blt	r2,r17,804ac8 <___vfprintf_internal_r+0xbf4>
  80409c:	ad400204 	addi	r21,r21,8
  8040a0:	d9014b17 	ldw	r4,1324(sp)
  8040a4:	24c9883a 	add	r4,r4,r19
  8040a8:	d9014b15 	stw	r4,1324(sp)
  8040ac:	802f883a 	mov	r23,r16
  8040b0:	b8800007 	ldb	r2,0(r23)
  8040b4:	10013c26 	beq	r2,zero,8045a8 <___vfprintf_internal_r+0x6d4>
  8040b8:	bdc00044 	addi	r23,r23,1
  8040bc:	d8000405 	stb	zero,16(sp)
  8040c0:	b8c00007 	ldb	r3,0(r23)
  8040c4:	04ffffc4 	movi	r19,-1
  8040c8:	d8014c15 	stw	zero,1328(sp)
  8040cc:	d8014a15 	stw	zero,1320(sp)
  8040d0:	d8c14d15 	stw	r3,1332(sp)
  8040d4:	bdc00044 	addi	r23,r23,1
  8040d8:	d9414d17 	ldw	r5,1332(sp)
  8040dc:	00801604 	movi	r2,88
  8040e0:	28fff804 	addi	r3,r5,-32
  8040e4:	10c06036 	bltu	r2,r3,804268 <___vfprintf_internal_r+0x394>
  8040e8:	18c5883a 	add	r2,r3,r3
  8040ec:	1085883a 	add	r2,r2,r2
  8040f0:	00c02034 	movhi	r3,128
  8040f4:	18d04104 	addi	r3,r3,16644
  8040f8:	10c5883a 	add	r2,r2,r3
  8040fc:	11000017 	ldw	r4,0(r2)
  804100:	2000683a 	jmp	r4
  804104:	00805078 	rdprs	r2,zero,321
  804108:	00804268 	cmpgeui	r2,zero,265
  80410c:	00804268 	cmpgeui	r2,zero,265
  804110:	00805064 	muli	r2,zero,321
  804114:	00804268 	cmpgeui	r2,zero,265
  804118:	00804268 	cmpgeui	r2,zero,265
  80411c:	00804268 	cmpgeui	r2,zero,265
  804120:	00804268 	cmpgeui	r2,zero,265
  804124:	00804268 	cmpgeui	r2,zero,265
  804128:	00804268 	cmpgeui	r2,zero,265
  80412c:	00804e44 	movi	r2,313
  804130:	00805054 	movui	r2,321
  804134:	00804268 	cmpgeui	r2,zero,265
  804138:	00804e5c 	xori	r2,zero,313
  80413c:	008050fc 	xorhi	r2,zero,323
  804140:	00804268 	cmpgeui	r2,zero,265
  804144:	008050e8 	cmpgeui	r2,zero,323
  804148:	008050a4 	muli	r2,zero,322
  80414c:	008050a4 	muli	r2,zero,322
  804150:	008050a4 	muli	r2,zero,322
  804154:	008050a4 	muli	r2,zero,322
  804158:	008050a4 	muli	r2,zero,322
  80415c:	008050a4 	muli	r2,zero,322
  804160:	008050a4 	muli	r2,zero,322
  804164:	008050a4 	muli	r2,zero,322
  804168:	008050a4 	muli	r2,zero,322
  80416c:	00804268 	cmpgeui	r2,zero,265
  804170:	00804268 	cmpgeui	r2,zero,265
  804174:	00804268 	cmpgeui	r2,zero,265
  804178:	00804268 	cmpgeui	r2,zero,265
  80417c:	00804268 	cmpgeui	r2,zero,265
  804180:	00804268 	cmpgeui	r2,zero,265
  804184:	00804268 	cmpgeui	r2,zero,265
  804188:	00804268 	cmpgeui	r2,zero,265
  80418c:	00804268 	cmpgeui	r2,zero,265
  804190:	00804268 	cmpgeui	r2,zero,265
  804194:	008048c0 	call	8048c <__reset-0x77fb74>
  804198:	00804f2c 	andhi	r2,zero,316
  80419c:	00804268 	cmpgeui	r2,zero,265
  8041a0:	00804f2c 	andhi	r2,zero,316
  8041a4:	00804268 	cmpgeui	r2,zero,265
  8041a8:	00804268 	cmpgeui	r2,zero,265
  8041ac:	00804268 	cmpgeui	r2,zero,265
  8041b0:	00804268 	cmpgeui	r2,zero,265
  8041b4:	00805090 	cmplti	r2,zero,322
  8041b8:	00804268 	cmpgeui	r2,zero,265
  8041bc:	00804268 	cmpgeui	r2,zero,265
  8041c0:	00804974 	movhi	r2,293
  8041c4:	00804268 	cmpgeui	r2,zero,265
  8041c8:	00804268 	cmpgeui	r2,zero,265
  8041cc:	00804268 	cmpgeui	r2,zero,265
  8041d0:	00804268 	cmpgeui	r2,zero,265
  8041d4:	00804268 	cmpgeui	r2,zero,265
  8041d8:	008049c0 	call	8049c <__reset-0x77fb64>
  8041dc:	00804268 	cmpgeui	r2,zero,265
  8041e0:	00804268 	cmpgeui	r2,zero,265
  8041e4:	00804fe0 	cmpeqi	r2,zero,319
  8041e8:	00804268 	cmpgeui	r2,zero,265
  8041ec:	00804268 	cmpgeui	r2,zero,265
  8041f0:	00804268 	cmpgeui	r2,zero,265
  8041f4:	00804268 	cmpgeui	r2,zero,265
  8041f8:	00804268 	cmpgeui	r2,zero,265
  8041fc:	00804268 	cmpgeui	r2,zero,265
  804200:	00804268 	cmpgeui	r2,zero,265
  804204:	00804268 	cmpgeui	r2,zero,265
  804208:	00804268 	cmpgeui	r2,zero,265
  80420c:	00804268 	cmpgeui	r2,zero,265
  804210:	00804fb4 	movhi	r2,318
  804214:	008048cc 	andi	r2,zero,291
  804218:	00804f2c 	andhi	r2,zero,316
  80421c:	00804f2c 	andhi	r2,zero,316
  804220:	00804f2c 	andhi	r2,zero,316
  804224:	00804f18 	cmpnei	r2,zero,316
  804228:	008048cc 	andi	r2,zero,291
  80422c:	00804268 	cmpgeui	r2,zero,265
  804230:	00804268 	cmpgeui	r2,zero,265
  804234:	00804ea0 	cmpeqi	r2,zero,314
  804238:	00804268 	cmpgeui	r2,zero,265
  80423c:	00804e70 	cmpltui	r2,zero,313
  804240:	00804980 	call	80498 <__reset-0x77fb68>
  804244:	00804ed0 	cmplti	r2,zero,315
  804248:	00804ebc 	xorhi	r2,zero,314
  80424c:	00804268 	cmpgeui	r2,zero,265
  804250:	00805164 	muli	r2,zero,325
  804254:	00804268 	cmpgeui	r2,zero,265
  804258:	008049cc 	andi	r2,zero,295
  80425c:	00804268 	cmpgeui	r2,zero,265
  804260:	00804268 	cmpgeui	r2,zero,265
  804264:	00805044 	movi	r2,321
  804268:	d9014d17 	ldw	r4,1332(sp)
  80426c:	2000ce26 	beq	r4,zero,8045a8 <___vfprintf_internal_r+0x6d4>
  804270:	01400044 	movi	r5,1
  804274:	d9800f04 	addi	r6,sp,60
  804278:	d9c14015 	stw	r7,1280(sp)
  80427c:	d9414515 	stw	r5,1300(sp)
  804280:	d9814115 	stw	r6,1284(sp)
  804284:	280f883a 	mov	r7,r5
  804288:	d9000f05 	stb	r4,60(sp)
  80428c:	d8000405 	stb	zero,16(sp)
  804290:	d8014615 	stw	zero,1304(sp)
  804294:	d8c14c17 	ldw	r3,1328(sp)
  804298:	1880008c 	andi	r2,r3,2
  80429c:	1005003a 	cmpeq	r2,r2,zero
  8042a0:	d8815015 	stw	r2,1344(sp)
  8042a4:	1000031e 	bne	r2,zero,8042b4 <___vfprintf_internal_r+0x3e0>
  8042a8:	d9014517 	ldw	r4,1300(sp)
  8042ac:	21000084 	addi	r4,r4,2
  8042b0:	d9014515 	stw	r4,1300(sp)
  8042b4:	d9414c17 	ldw	r5,1328(sp)
  8042b8:	2940210c 	andi	r5,r5,132
  8042bc:	d9414e15 	stw	r5,1336(sp)
  8042c0:	28002d1e 	bne	r5,zero,804378 <___vfprintf_internal_r+0x4a4>
  8042c4:	d9814a17 	ldw	r6,1320(sp)
  8042c8:	d8814517 	ldw	r2,1300(sp)
  8042cc:	30a1c83a 	sub	r16,r6,r2
  8042d0:	0400290e 	bge	zero,r16,804378 <___vfprintf_internal_r+0x4a4>
  8042d4:	00800404 	movi	r2,16
  8042d8:	14045e0e 	bge	r2,r16,805454 <___vfprintf_internal_r+0x1580>
  8042dc:	dc800e17 	ldw	r18,56(sp)
  8042e0:	dc400d17 	ldw	r17,52(sp)
  8042e4:	1027883a 	mov	r19,r2
  8042e8:	07002074 	movhi	fp,129
  8042ec:	e7101d84 	addi	fp,fp,16502
  8042f0:	050001c4 	movi	r20,7
  8042f4:	00000306 	br	804304 <___vfprintf_internal_r+0x430>
  8042f8:	843ffc04 	addi	r16,r16,-16
  8042fc:	ad400204 	addi	r21,r21,8
  804300:	9c00130e 	bge	r19,r16,804350 <___vfprintf_internal_r+0x47c>
  804304:	94800404 	addi	r18,r18,16
  804308:	8c400044 	addi	r17,r17,1
  80430c:	af000015 	stw	fp,0(r21)
  804310:	acc00115 	stw	r19,4(r21)
  804314:	dc800e15 	stw	r18,56(sp)
  804318:	dc400d15 	stw	r17,52(sp)
  80431c:	a47ff60e 	bge	r20,r17,8042f8 <___vfprintf_internal_r+0x424>
  804320:	d9014f17 	ldw	r4,1340(sp)
  804324:	b00b883a 	mov	r5,r22
  804328:	d9800c04 	addi	r6,sp,48
  80432c:	d9c15115 	stw	r7,1348(sp)
  804330:	0803e7c0 	call	803e7c <__sprint_r>
  804334:	d9c15117 	ldw	r7,1348(sp)
  804338:	10009e1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  80433c:	843ffc04 	addi	r16,r16,-16
  804340:	dc800e17 	ldw	r18,56(sp)
  804344:	dc400d17 	ldw	r17,52(sp)
  804348:	dd401904 	addi	r21,sp,100
  80434c:	9c3fed16 	blt	r19,r16,804304 <___vfprintf_internal_r+0x430>
  804350:	9425883a 	add	r18,r18,r16
  804354:	8c400044 	addi	r17,r17,1
  804358:	008001c4 	movi	r2,7
  80435c:	af000015 	stw	fp,0(r21)
  804360:	ac000115 	stw	r16,4(r21)
  804364:	dc800e15 	stw	r18,56(sp)
  804368:	dc400d15 	stw	r17,52(sp)
  80436c:	1441f516 	blt	r2,r17,804b44 <___vfprintf_internal_r+0xc70>
  804370:	ad400204 	addi	r21,r21,8
  804374:	00000206 	br	804380 <___vfprintf_internal_r+0x4ac>
  804378:	dc800e17 	ldw	r18,56(sp)
  80437c:	dc400d17 	ldw	r17,52(sp)
  804380:	d8800407 	ldb	r2,16(sp)
  804384:	10000b26 	beq	r2,zero,8043b4 <___vfprintf_internal_r+0x4e0>
  804388:	00800044 	movi	r2,1
  80438c:	94800044 	addi	r18,r18,1
  804390:	8c400044 	addi	r17,r17,1
  804394:	a8800115 	stw	r2,4(r21)
  804398:	d8c00404 	addi	r3,sp,16
  80439c:	008001c4 	movi	r2,7
  8043a0:	a8c00015 	stw	r3,0(r21)
  8043a4:	dc800e15 	stw	r18,56(sp)
  8043a8:	dc400d15 	stw	r17,52(sp)
  8043ac:	1441da16 	blt	r2,r17,804b18 <___vfprintf_internal_r+0xc44>
  8043b0:	ad400204 	addi	r21,r21,8
  8043b4:	d9015017 	ldw	r4,1344(sp)
  8043b8:	20000b1e 	bne	r4,zero,8043e8 <___vfprintf_internal_r+0x514>
  8043bc:	d8800444 	addi	r2,sp,17
  8043c0:	94800084 	addi	r18,r18,2
  8043c4:	8c400044 	addi	r17,r17,1
  8043c8:	a8800015 	stw	r2,0(r21)
  8043cc:	00c00084 	movi	r3,2
  8043d0:	008001c4 	movi	r2,7
  8043d4:	a8c00115 	stw	r3,4(r21)
  8043d8:	dc800e15 	stw	r18,56(sp)
  8043dc:	dc400d15 	stw	r17,52(sp)
  8043e0:	1441c216 	blt	r2,r17,804aec <___vfprintf_internal_r+0xc18>
  8043e4:	ad400204 	addi	r21,r21,8
  8043e8:	d9414e17 	ldw	r5,1336(sp)
  8043ec:	00802004 	movi	r2,128
  8043f0:	2880b126 	beq	r5,r2,8046b8 <___vfprintf_internal_r+0x7e4>
  8043f4:	d8c14617 	ldw	r3,1304(sp)
  8043f8:	19e1c83a 	sub	r16,r3,r7
  8043fc:	0400260e 	bge	zero,r16,804498 <___vfprintf_internal_r+0x5c4>
  804400:	00800404 	movi	r2,16
  804404:	1403cf0e 	bge	r2,r16,805344 <___vfprintf_internal_r+0x1470>
  804408:	1027883a 	mov	r19,r2
  80440c:	07002074 	movhi	fp,129
  804410:	e7101984 	addi	fp,fp,16486
  804414:	050001c4 	movi	r20,7
  804418:	00000306 	br	804428 <___vfprintf_internal_r+0x554>
  80441c:	843ffc04 	addi	r16,r16,-16
  804420:	ad400204 	addi	r21,r21,8
  804424:	9c00130e 	bge	r19,r16,804474 <___vfprintf_internal_r+0x5a0>
  804428:	94800404 	addi	r18,r18,16
  80442c:	8c400044 	addi	r17,r17,1
  804430:	af000015 	stw	fp,0(r21)
  804434:	acc00115 	stw	r19,4(r21)
  804438:	dc800e15 	stw	r18,56(sp)
  80443c:	dc400d15 	stw	r17,52(sp)
  804440:	a47ff60e 	bge	r20,r17,80441c <___vfprintf_internal_r+0x548>
  804444:	d9014f17 	ldw	r4,1340(sp)
  804448:	b00b883a 	mov	r5,r22
  80444c:	d9800c04 	addi	r6,sp,48
  804450:	d9c15115 	stw	r7,1348(sp)
  804454:	0803e7c0 	call	803e7c <__sprint_r>
  804458:	d9c15117 	ldw	r7,1348(sp)
  80445c:	1000551e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804460:	843ffc04 	addi	r16,r16,-16
  804464:	dc800e17 	ldw	r18,56(sp)
  804468:	dc400d17 	ldw	r17,52(sp)
  80446c:	dd401904 	addi	r21,sp,100
  804470:	9c3fed16 	blt	r19,r16,804428 <___vfprintf_internal_r+0x554>
  804474:	9425883a 	add	r18,r18,r16
  804478:	8c400044 	addi	r17,r17,1
  80447c:	008001c4 	movi	r2,7
  804480:	af000015 	stw	fp,0(r21)
  804484:	ac000115 	stw	r16,4(r21)
  804488:	dc800e15 	stw	r18,56(sp)
  80448c:	dc400d15 	stw	r17,52(sp)
  804490:	14418216 	blt	r2,r17,804a9c <___vfprintf_internal_r+0xbc8>
  804494:	ad400204 	addi	r21,r21,8
  804498:	d9014c17 	ldw	r4,1328(sp)
  80449c:	2080400c 	andi	r2,r4,256
  8044a0:	10004a1e 	bne	r2,zero,8045cc <___vfprintf_internal_r+0x6f8>
  8044a4:	d9414117 	ldw	r5,1284(sp)
  8044a8:	91e5883a 	add	r18,r18,r7
  8044ac:	8c400044 	addi	r17,r17,1
  8044b0:	008001c4 	movi	r2,7
  8044b4:	a9400015 	stw	r5,0(r21)
  8044b8:	a9c00115 	stw	r7,4(r21)
  8044bc:	dc800e15 	stw	r18,56(sp)
  8044c0:	dc400d15 	stw	r17,52(sp)
  8044c4:	14416716 	blt	r2,r17,804a64 <___vfprintf_internal_r+0xb90>
  8044c8:	a8c00204 	addi	r3,r21,8
  8044cc:	d9814c17 	ldw	r6,1328(sp)
  8044d0:	3080010c 	andi	r2,r6,4
  8044d4:	10002826 	beq	r2,zero,804578 <___vfprintf_internal_r+0x6a4>
  8044d8:	d8814a17 	ldw	r2,1320(sp)
  8044dc:	d9014517 	ldw	r4,1300(sp)
  8044e0:	1121c83a 	sub	r16,r2,r4
  8044e4:	0400240e 	bge	zero,r16,804578 <___vfprintf_internal_r+0x6a4>
  8044e8:	00800404 	movi	r2,16
  8044ec:	1404550e 	bge	r2,r16,805644 <___vfprintf_internal_r+0x1770>
  8044f0:	dc400d17 	ldw	r17,52(sp)
  8044f4:	1027883a 	mov	r19,r2
  8044f8:	07002074 	movhi	fp,129
  8044fc:	e7101d84 	addi	fp,fp,16502
  804500:	050001c4 	movi	r20,7
  804504:	00000306 	br	804514 <___vfprintf_internal_r+0x640>
  804508:	843ffc04 	addi	r16,r16,-16
  80450c:	18c00204 	addi	r3,r3,8
  804510:	9c00110e 	bge	r19,r16,804558 <___vfprintf_internal_r+0x684>
  804514:	94800404 	addi	r18,r18,16
  804518:	8c400044 	addi	r17,r17,1
  80451c:	1f000015 	stw	fp,0(r3)
  804520:	1cc00115 	stw	r19,4(r3)
  804524:	dc800e15 	stw	r18,56(sp)
  804528:	dc400d15 	stw	r17,52(sp)
  80452c:	a47ff60e 	bge	r20,r17,804508 <___vfprintf_internal_r+0x634>
  804530:	d9014f17 	ldw	r4,1340(sp)
  804534:	b00b883a 	mov	r5,r22
  804538:	d9800c04 	addi	r6,sp,48
  80453c:	0803e7c0 	call	803e7c <__sprint_r>
  804540:	10001c1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804544:	843ffc04 	addi	r16,r16,-16
  804548:	dc800e17 	ldw	r18,56(sp)
  80454c:	dc400d17 	ldw	r17,52(sp)
  804550:	d8c01904 	addi	r3,sp,100
  804554:	9c3fef16 	blt	r19,r16,804514 <___vfprintf_internal_r+0x640>
  804558:	9425883a 	add	r18,r18,r16
  80455c:	8c400044 	addi	r17,r17,1
  804560:	008001c4 	movi	r2,7
  804564:	1f000015 	stw	fp,0(r3)
  804568:	1c000115 	stw	r16,4(r3)
  80456c:	dc800e15 	stw	r18,56(sp)
  804570:	dc400d15 	stw	r17,52(sp)
  804574:	1440cb16 	blt	r2,r17,8048a4 <___vfprintf_internal_r+0x9d0>
  804578:	d8814a17 	ldw	r2,1320(sp)
  80457c:	d9414517 	ldw	r5,1300(sp)
  804580:	1140010e 	bge	r2,r5,804588 <___vfprintf_internal_r+0x6b4>
  804584:	2805883a 	mov	r2,r5
  804588:	d9814b17 	ldw	r6,1324(sp)
  80458c:	308d883a 	add	r6,r6,r2
  804590:	d9814b15 	stw	r6,1324(sp)
  804594:	90013b1e 	bne	r18,zero,804a84 <___vfprintf_internal_r+0xbb0>
  804598:	d9c14017 	ldw	r7,1280(sp)
  80459c:	dd401904 	addi	r21,sp,100
  8045a0:	d8000d15 	stw	zero,52(sp)
  8045a4:	003ea706 	br	804044 <___vfprintf_internal_r+0x170>
  8045a8:	d8800e17 	ldw	r2,56(sp)
  8045ac:	1005451e 	bne	r2,zero,805ac4 <___vfprintf_internal_r+0x1bf0>
  8045b0:	d8000d15 	stw	zero,52(sp)
  8045b4:	b080030b 	ldhu	r2,12(r22)
  8045b8:	1080100c 	andi	r2,r2,64
  8045bc:	103e8726 	beq	r2,zero,803fdc <___vfprintf_internal_r+0x108>
  8045c0:	00bfffc4 	movi	r2,-1
  8045c4:	d8814b15 	stw	r2,1324(sp)
  8045c8:	003e8406 	br	803fdc <___vfprintf_internal_r+0x108>
  8045cc:	d9814d17 	ldw	r6,1332(sp)
  8045d0:	00801944 	movi	r2,101
  8045d4:	11806e16 	blt	r2,r6,804790 <___vfprintf_internal_r+0x8bc>
  8045d8:	d9414717 	ldw	r5,1308(sp)
  8045dc:	00c00044 	movi	r3,1
  8045e0:	1943490e 	bge	r3,r5,805308 <___vfprintf_internal_r+0x1434>
  8045e4:	d8814117 	ldw	r2,1284(sp)
  8045e8:	94800044 	addi	r18,r18,1
  8045ec:	8c400044 	addi	r17,r17,1
  8045f0:	a8800015 	stw	r2,0(r21)
  8045f4:	008001c4 	movi	r2,7
  8045f8:	a8c00115 	stw	r3,4(r21)
  8045fc:	dc800e15 	stw	r18,56(sp)
  804600:	dc400d15 	stw	r17,52(sp)
  804604:	1441ca16 	blt	r2,r17,804d30 <___vfprintf_internal_r+0xe5c>
  804608:	a8c00204 	addi	r3,r21,8
  80460c:	d9014917 	ldw	r4,1316(sp)
  804610:	00800044 	movi	r2,1
  804614:	94800044 	addi	r18,r18,1
  804618:	8c400044 	addi	r17,r17,1
  80461c:	18800115 	stw	r2,4(r3)
  804620:	008001c4 	movi	r2,7
  804624:	19000015 	stw	r4,0(r3)
  804628:	dc800e15 	stw	r18,56(sp)
  80462c:	dc400d15 	stw	r17,52(sp)
  804630:	1441b616 	blt	r2,r17,804d0c <___vfprintf_internal_r+0xe38>
  804634:	1cc00204 	addi	r19,r3,8
  804638:	d9014217 	ldw	r4,1288(sp)
  80463c:	d9414317 	ldw	r5,1292(sp)
  804640:	000d883a 	mov	r6,zero
  804644:	000f883a 	mov	r7,zero
  804648:	080bf440 	call	80bf44 <__nedf2>
  80464c:	10017426 	beq	r2,zero,804c20 <___vfprintf_internal_r+0xd4c>
  804650:	d9414717 	ldw	r5,1308(sp)
  804654:	d9814117 	ldw	r6,1284(sp)
  804658:	8c400044 	addi	r17,r17,1
  80465c:	2c85883a 	add	r2,r5,r18
  804660:	14bfffc4 	addi	r18,r2,-1
  804664:	28bfffc4 	addi	r2,r5,-1
  804668:	30c00044 	addi	r3,r6,1
  80466c:	98800115 	stw	r2,4(r19)
  804670:	008001c4 	movi	r2,7
  804674:	98c00015 	stw	r3,0(r19)
  804678:	dc800e15 	stw	r18,56(sp)
  80467c:	dc400d15 	stw	r17,52(sp)
  804680:	14418e16 	blt	r2,r17,804cbc <___vfprintf_internal_r+0xde8>
  804684:	9cc00204 	addi	r19,r19,8
  804688:	d9414817 	ldw	r5,1312(sp)
  80468c:	d8800804 	addi	r2,sp,32
  804690:	8c400044 	addi	r17,r17,1
  804694:	9165883a 	add	r18,r18,r5
  804698:	98800015 	stw	r2,0(r19)
  80469c:	008001c4 	movi	r2,7
  8046a0:	99400115 	stw	r5,4(r19)
  8046a4:	dc800e15 	stw	r18,56(sp)
  8046a8:	dc400d15 	stw	r17,52(sp)
  8046ac:	1440ed16 	blt	r2,r17,804a64 <___vfprintf_internal_r+0xb90>
  8046b0:	98c00204 	addi	r3,r19,8
  8046b4:	003f8506 	br	8044cc <___vfprintf_internal_r+0x5f8>
  8046b8:	d9814a17 	ldw	r6,1320(sp)
  8046bc:	d8814517 	ldw	r2,1300(sp)
  8046c0:	30a1c83a 	sub	r16,r6,r2
  8046c4:	043f4b0e 	bge	zero,r16,8043f4 <___vfprintf_internal_r+0x520>
  8046c8:	00800404 	movi	r2,16
  8046cc:	14043a0e 	bge	r2,r16,8057b8 <___vfprintf_internal_r+0x18e4>
  8046d0:	1027883a 	mov	r19,r2
  8046d4:	07002074 	movhi	fp,129
  8046d8:	e7101984 	addi	fp,fp,16486
  8046dc:	050001c4 	movi	r20,7
  8046e0:	00000306 	br	8046f0 <___vfprintf_internal_r+0x81c>
  8046e4:	843ffc04 	addi	r16,r16,-16
  8046e8:	ad400204 	addi	r21,r21,8
  8046ec:	9c00130e 	bge	r19,r16,80473c <___vfprintf_internal_r+0x868>
  8046f0:	94800404 	addi	r18,r18,16
  8046f4:	8c400044 	addi	r17,r17,1
  8046f8:	af000015 	stw	fp,0(r21)
  8046fc:	acc00115 	stw	r19,4(r21)
  804700:	dc800e15 	stw	r18,56(sp)
  804704:	dc400d15 	stw	r17,52(sp)
  804708:	a47ff60e 	bge	r20,r17,8046e4 <___vfprintf_internal_r+0x810>
  80470c:	d9014f17 	ldw	r4,1340(sp)
  804710:	b00b883a 	mov	r5,r22
  804714:	d9800c04 	addi	r6,sp,48
  804718:	d9c15115 	stw	r7,1348(sp)
  80471c:	0803e7c0 	call	803e7c <__sprint_r>
  804720:	d9c15117 	ldw	r7,1348(sp)
  804724:	103fa31e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804728:	843ffc04 	addi	r16,r16,-16
  80472c:	dc800e17 	ldw	r18,56(sp)
  804730:	dc400d17 	ldw	r17,52(sp)
  804734:	dd401904 	addi	r21,sp,100
  804738:	9c3fed16 	blt	r19,r16,8046f0 <___vfprintf_internal_r+0x81c>
  80473c:	9425883a 	add	r18,r18,r16
  804740:	8c400044 	addi	r17,r17,1
  804744:	008001c4 	movi	r2,7
  804748:	af000015 	stw	fp,0(r21)
  80474c:	ac000115 	stw	r16,4(r21)
  804750:	dc800e15 	stw	r18,56(sp)
  804754:	dc400d15 	stw	r17,52(sp)
  804758:	14416116 	blt	r2,r17,804ce0 <___vfprintf_internal_r+0xe0c>
  80475c:	ad400204 	addi	r21,r21,8
  804760:	003f2406 	br	8043f4 <___vfprintf_internal_r+0x520>
  804764:	d9014f17 	ldw	r4,1340(sp)
  804768:	0807b3c0 	call	807b3c <__sinit>
  80476c:	d9c15117 	ldw	r7,1348(sp)
  804770:	003def06 	br	803f30 <___vfprintf_internal_r+0x5c>
  804774:	d9014f17 	ldw	r4,1340(sp)
  804778:	b00b883a 	mov	r5,r22
  80477c:	d9c15115 	stw	r7,1348(sp)
  804780:	0805dbc0 	call	805dbc <__swsetup_r>
  804784:	d9c15117 	ldw	r7,1348(sp)
  804788:	103dee26 	beq	r2,zero,803f44 <___vfprintf_internal_r+0x70>
  80478c:	003f8c06 	br	8045c0 <___vfprintf_internal_r+0x6ec>
  804790:	d9014217 	ldw	r4,1288(sp)
  804794:	d9414317 	ldw	r5,1292(sp)
  804798:	000d883a 	mov	r6,zero
  80479c:	000f883a 	mov	r7,zero
  8047a0:	080bebc0 	call	80bebc <__eqdf2>
  8047a4:	1000f21e 	bne	r2,zero,804b70 <___vfprintf_internal_r+0xc9c>
  8047a8:	00802074 	movhi	r2,129
  8047ac:	108eef04 	addi	r2,r2,15292
  8047b0:	94800044 	addi	r18,r18,1
  8047b4:	8c400044 	addi	r17,r17,1
  8047b8:	a8800015 	stw	r2,0(r21)
  8047bc:	00c00044 	movi	r3,1
  8047c0:	008001c4 	movi	r2,7
  8047c4:	a8c00115 	stw	r3,4(r21)
  8047c8:	dc800e15 	stw	r18,56(sp)
  8047cc:	dc400d15 	stw	r17,52(sp)
  8047d0:	14430016 	blt	r2,r17,8053d4 <___vfprintf_internal_r+0x1500>
  8047d4:	a8c00204 	addi	r3,r21,8
  8047d8:	d8800517 	ldw	r2,20(sp)
  8047dc:	d9014717 	ldw	r4,1308(sp)
  8047e0:	11015c0e 	bge	r2,r4,804d54 <___vfprintf_internal_r+0xe80>
  8047e4:	dc400d17 	ldw	r17,52(sp)
  8047e8:	d9814917 	ldw	r6,1316(sp)
  8047ec:	00800044 	movi	r2,1
  8047f0:	94800044 	addi	r18,r18,1
  8047f4:	8c400044 	addi	r17,r17,1
  8047f8:	18800115 	stw	r2,4(r3)
  8047fc:	008001c4 	movi	r2,7
  804800:	19800015 	stw	r6,0(r3)
  804804:	dc800e15 	stw	r18,56(sp)
  804808:	dc400d15 	stw	r17,52(sp)
  80480c:	14431616 	blt	r2,r17,805468 <___vfprintf_internal_r+0x1594>
  804810:	18c00204 	addi	r3,r3,8
  804814:	d8814717 	ldw	r2,1308(sp)
  804818:	143fffc4 	addi	r16,r2,-1
  80481c:	043f2b0e 	bge	zero,r16,8044cc <___vfprintf_internal_r+0x5f8>
  804820:	00800404 	movi	r2,16
  804824:	1402a80e 	bge	r2,r16,8052c8 <___vfprintf_internal_r+0x13f4>
  804828:	dc400d17 	ldw	r17,52(sp)
  80482c:	1027883a 	mov	r19,r2
  804830:	07002074 	movhi	fp,129
  804834:	e7101984 	addi	fp,fp,16486
  804838:	050001c4 	movi	r20,7
  80483c:	00000306 	br	80484c <___vfprintf_internal_r+0x978>
  804840:	18c00204 	addi	r3,r3,8
  804844:	843ffc04 	addi	r16,r16,-16
  804848:	9c02a20e 	bge	r19,r16,8052d4 <___vfprintf_internal_r+0x1400>
  80484c:	94800404 	addi	r18,r18,16
  804850:	8c400044 	addi	r17,r17,1
  804854:	1f000015 	stw	fp,0(r3)
  804858:	1cc00115 	stw	r19,4(r3)
  80485c:	dc800e15 	stw	r18,56(sp)
  804860:	dc400d15 	stw	r17,52(sp)
  804864:	a47ff60e 	bge	r20,r17,804840 <___vfprintf_internal_r+0x96c>
  804868:	d9014f17 	ldw	r4,1340(sp)
  80486c:	b00b883a 	mov	r5,r22
  804870:	d9800c04 	addi	r6,sp,48
  804874:	0803e7c0 	call	803e7c <__sprint_r>
  804878:	103f4e1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  80487c:	dc800e17 	ldw	r18,56(sp)
  804880:	dc400d17 	ldw	r17,52(sp)
  804884:	d8c01904 	addi	r3,sp,100
  804888:	003fee06 	br	804844 <___vfprintf_internal_r+0x970>
  80488c:	d8802c0b 	ldhu	r2,176(sp)
  804890:	00ffffc4 	movi	r3,-1
  804894:	d8c14b15 	stw	r3,1324(sp)
  804898:	1080100c 	andi	r2,r2,64
  80489c:	103dcc1e 	bne	r2,zero,803fd0 <___vfprintf_internal_r+0xfc>
  8048a0:	003dce06 	br	803fdc <___vfprintf_internal_r+0x108>
  8048a4:	d9014f17 	ldw	r4,1340(sp)
  8048a8:	b00b883a 	mov	r5,r22
  8048ac:	d9800c04 	addi	r6,sp,48
  8048b0:	0803e7c0 	call	803e7c <__sprint_r>
  8048b4:	103f3f1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  8048b8:	dc800e17 	ldw	r18,56(sp)
  8048bc:	003f2e06 	br	804578 <___vfprintf_internal_r+0x6a4>
  8048c0:	d9414c17 	ldw	r5,1328(sp)
  8048c4:	29400414 	ori	r5,r5,16
  8048c8:	d9414c15 	stw	r5,1328(sp)
  8048cc:	d9814c17 	ldw	r6,1328(sp)
  8048d0:	3080080c 	andi	r2,r6,32
  8048d4:	10014f1e 	bne	r2,zero,804e14 <___vfprintf_internal_r+0xf40>
  8048d8:	d8c14c17 	ldw	r3,1328(sp)
  8048dc:	1880040c 	andi	r2,r3,16
  8048e0:	1002f01e 	bne	r2,zero,8054a4 <___vfprintf_internal_r+0x15d0>
  8048e4:	d9014c17 	ldw	r4,1328(sp)
  8048e8:	2080100c 	andi	r2,r4,64
  8048ec:	1002ed26 	beq	r2,zero,8054a4 <___vfprintf_internal_r+0x15d0>
  8048f0:	3880000f 	ldh	r2,0(r7)
  8048f4:	39c00104 	addi	r7,r7,4
  8048f8:	d9c14015 	stw	r7,1280(sp)
  8048fc:	1023d7fa 	srai	r17,r2,31
  804900:	1021883a 	mov	r16,r2
  804904:	88037816 	blt	r17,zero,8056e8 <___vfprintf_internal_r+0x1814>
  804908:	01000044 	movi	r4,1
  80490c:	98000416 	blt	r19,zero,804920 <___vfprintf_internal_r+0xa4c>
  804910:	d8c14c17 	ldw	r3,1328(sp)
  804914:	00bfdfc4 	movi	r2,-129
  804918:	1886703a 	and	r3,r3,r2
  80491c:	d8c14c15 	stw	r3,1328(sp)
  804920:	8444b03a 	or	r2,r16,r17
  804924:	10022c1e 	bne	r2,zero,8051d8 <___vfprintf_internal_r+0x1304>
  804928:	98022b1e 	bne	r19,zero,8051d8 <___vfprintf_internal_r+0x1304>
  80492c:	20803fcc 	andi	r2,r4,255
  804930:	1002a126 	beq	r2,zero,8053b8 <___vfprintf_internal_r+0x14e4>
  804934:	d8c01904 	addi	r3,sp,100
  804938:	dd000f04 	addi	r20,sp,60
  80493c:	d8c14115 	stw	r3,1284(sp)
  804940:	d8c14117 	ldw	r3,1284(sp)
  804944:	dcc14515 	stw	r19,1300(sp)
  804948:	a0c5c83a 	sub	r2,r20,r3
  80494c:	11c00a04 	addi	r7,r2,40
  804950:	99c0010e 	bge	r19,r7,804958 <___vfprintf_internal_r+0xa84>
  804954:	d9c14515 	stw	r7,1300(sp)
  804958:	dcc14615 	stw	r19,1304(sp)
  80495c:	d8800407 	ldb	r2,16(sp)
  804960:	103e4c26 	beq	r2,zero,804294 <___vfprintf_internal_r+0x3c0>
  804964:	d8814517 	ldw	r2,1300(sp)
  804968:	10800044 	addi	r2,r2,1
  80496c:	d8814515 	stw	r2,1300(sp)
  804970:	003e4806 	br	804294 <___vfprintf_internal_r+0x3c0>
  804974:	d9814c17 	ldw	r6,1328(sp)
  804978:	31800414 	ori	r6,r6,16
  80497c:	d9814c15 	stw	r6,1328(sp)
  804980:	d8c14c17 	ldw	r3,1328(sp)
  804984:	1880080c 	andi	r2,r3,32
  804988:	1001271e 	bne	r2,zero,804e28 <___vfprintf_internal_r+0xf54>
  80498c:	d9414c17 	ldw	r5,1328(sp)
  804990:	2880040c 	andi	r2,r5,16
  804994:	1002bc1e 	bne	r2,zero,805488 <___vfprintf_internal_r+0x15b4>
  804998:	d9814c17 	ldw	r6,1328(sp)
  80499c:	3080100c 	andi	r2,r6,64
  8049a0:	1002b926 	beq	r2,zero,805488 <___vfprintf_internal_r+0x15b4>
  8049a4:	3c00000b 	ldhu	r16,0(r7)
  8049a8:	0009883a 	mov	r4,zero
  8049ac:	39c00104 	addi	r7,r7,4
  8049b0:	0023883a 	mov	r17,zero
  8049b4:	d9c14015 	stw	r7,1280(sp)
  8049b8:	d8000405 	stb	zero,16(sp)
  8049bc:	003fd306 	br	80490c <___vfprintf_internal_r+0xa38>
  8049c0:	d9014c17 	ldw	r4,1328(sp)
  8049c4:	21000414 	ori	r4,r4,16
  8049c8:	d9014c15 	stw	r4,1328(sp)
  8049cc:	d9414c17 	ldw	r5,1328(sp)
  8049d0:	2880080c 	andi	r2,r5,32
  8049d4:	1001081e 	bne	r2,zero,804df8 <___vfprintf_internal_r+0xf24>
  8049d8:	d8c14c17 	ldw	r3,1328(sp)
  8049dc:	1880040c 	andi	r2,r3,16
  8049e0:	1002b61e 	bne	r2,zero,8054bc <___vfprintf_internal_r+0x15e8>
  8049e4:	d9014c17 	ldw	r4,1328(sp)
  8049e8:	2080100c 	andi	r2,r4,64
  8049ec:	1002b326 	beq	r2,zero,8054bc <___vfprintf_internal_r+0x15e8>
  8049f0:	3c00000b 	ldhu	r16,0(r7)
  8049f4:	01000044 	movi	r4,1
  8049f8:	39c00104 	addi	r7,r7,4
  8049fc:	0023883a 	mov	r17,zero
  804a00:	d9c14015 	stw	r7,1280(sp)
  804a04:	d8000405 	stb	zero,16(sp)
  804a08:	003fc006 	br	80490c <___vfprintf_internal_r+0xa38>
  804a0c:	d9014f17 	ldw	r4,1340(sp)
  804a10:	b00b883a 	mov	r5,r22
  804a14:	d9800c04 	addi	r6,sp,48
  804a18:	0803e7c0 	call	803e7c <__sprint_r>
  804a1c:	103ee51e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804a20:	dc800e17 	ldw	r18,56(sp)
  804a24:	d8c01904 	addi	r3,sp,100
  804a28:	d9814c17 	ldw	r6,1328(sp)
  804a2c:	3080004c 	andi	r2,r6,1
  804a30:	1005003a 	cmpeq	r2,r2,zero
  804a34:	103ea51e 	bne	r2,zero,8044cc <___vfprintf_internal_r+0x5f8>
  804a38:	00800044 	movi	r2,1
  804a3c:	dc400d17 	ldw	r17,52(sp)
  804a40:	18800115 	stw	r2,4(r3)
  804a44:	d8814917 	ldw	r2,1316(sp)
  804a48:	94800044 	addi	r18,r18,1
  804a4c:	8c400044 	addi	r17,r17,1
  804a50:	18800015 	stw	r2,0(r3)
  804a54:	008001c4 	movi	r2,7
  804a58:	dc800e15 	stw	r18,56(sp)
  804a5c:	dc400d15 	stw	r17,52(sp)
  804a60:	1442240e 	bge	r2,r17,8052f4 <___vfprintf_internal_r+0x1420>
  804a64:	d9014f17 	ldw	r4,1340(sp)
  804a68:	b00b883a 	mov	r5,r22
  804a6c:	d9800c04 	addi	r6,sp,48
  804a70:	0803e7c0 	call	803e7c <__sprint_r>
  804a74:	103ecf1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804a78:	dc800e17 	ldw	r18,56(sp)
  804a7c:	d8c01904 	addi	r3,sp,100
  804a80:	003e9206 	br	8044cc <___vfprintf_internal_r+0x5f8>
  804a84:	d9014f17 	ldw	r4,1340(sp)
  804a88:	b00b883a 	mov	r5,r22
  804a8c:	d9800c04 	addi	r6,sp,48
  804a90:	0803e7c0 	call	803e7c <__sprint_r>
  804a94:	103ec026 	beq	r2,zero,804598 <___vfprintf_internal_r+0x6c4>
  804a98:	003ec606 	br	8045b4 <___vfprintf_internal_r+0x6e0>
  804a9c:	d9014f17 	ldw	r4,1340(sp)
  804aa0:	b00b883a 	mov	r5,r22
  804aa4:	d9800c04 	addi	r6,sp,48
  804aa8:	d9c15115 	stw	r7,1348(sp)
  804aac:	0803e7c0 	call	803e7c <__sprint_r>
  804ab0:	d9c15117 	ldw	r7,1348(sp)
  804ab4:	103ebf1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804ab8:	dc800e17 	ldw	r18,56(sp)
  804abc:	dc400d17 	ldw	r17,52(sp)
  804ac0:	dd401904 	addi	r21,sp,100
  804ac4:	003e7406 	br	804498 <___vfprintf_internal_r+0x5c4>
  804ac8:	d9014f17 	ldw	r4,1340(sp)
  804acc:	b00b883a 	mov	r5,r22
  804ad0:	d9800c04 	addi	r6,sp,48
  804ad4:	d9c15115 	stw	r7,1348(sp)
  804ad8:	0803e7c0 	call	803e7c <__sprint_r>
  804adc:	d9c15117 	ldw	r7,1348(sp)
  804ae0:	103eb41e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804ae4:	dd401904 	addi	r21,sp,100
  804ae8:	003d6d06 	br	8040a0 <___vfprintf_internal_r+0x1cc>
  804aec:	d9014f17 	ldw	r4,1340(sp)
  804af0:	b00b883a 	mov	r5,r22
  804af4:	d9800c04 	addi	r6,sp,48
  804af8:	d9c15115 	stw	r7,1348(sp)
  804afc:	0803e7c0 	call	803e7c <__sprint_r>
  804b00:	d9c15117 	ldw	r7,1348(sp)
  804b04:	103eab1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804b08:	dc800e17 	ldw	r18,56(sp)
  804b0c:	dc400d17 	ldw	r17,52(sp)
  804b10:	dd401904 	addi	r21,sp,100
  804b14:	003e3406 	br	8043e8 <___vfprintf_internal_r+0x514>
  804b18:	d9014f17 	ldw	r4,1340(sp)
  804b1c:	b00b883a 	mov	r5,r22
  804b20:	d9800c04 	addi	r6,sp,48
  804b24:	d9c15115 	stw	r7,1348(sp)
  804b28:	0803e7c0 	call	803e7c <__sprint_r>
  804b2c:	d9c15117 	ldw	r7,1348(sp)
  804b30:	103ea01e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804b34:	dc800e17 	ldw	r18,56(sp)
  804b38:	dc400d17 	ldw	r17,52(sp)
  804b3c:	dd401904 	addi	r21,sp,100
  804b40:	003e1c06 	br	8043b4 <___vfprintf_internal_r+0x4e0>
  804b44:	d9014f17 	ldw	r4,1340(sp)
  804b48:	b00b883a 	mov	r5,r22
  804b4c:	d9800c04 	addi	r6,sp,48
  804b50:	d9c15115 	stw	r7,1348(sp)
  804b54:	0803e7c0 	call	803e7c <__sprint_r>
  804b58:	d9c15117 	ldw	r7,1348(sp)
  804b5c:	103e951e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804b60:	dc800e17 	ldw	r18,56(sp)
  804b64:	dc400d17 	ldw	r17,52(sp)
  804b68:	dd401904 	addi	r21,sp,100
  804b6c:	003e0406 	br	804380 <___vfprintf_internal_r+0x4ac>
  804b70:	d9000517 	ldw	r4,20(sp)
  804b74:	0102580e 	bge	zero,r4,8054d8 <___vfprintf_internal_r+0x1604>
  804b78:	d9814717 	ldw	r6,1308(sp)
  804b7c:	21807a16 	blt	r4,r6,804d68 <___vfprintf_internal_r+0xe94>
  804b80:	d8814117 	ldw	r2,1284(sp)
  804b84:	91a5883a 	add	r18,r18,r6
  804b88:	8c400044 	addi	r17,r17,1
  804b8c:	a8800015 	stw	r2,0(r21)
  804b90:	008001c4 	movi	r2,7
  804b94:	a9800115 	stw	r6,4(r21)
  804b98:	dc800e15 	stw	r18,56(sp)
  804b9c:	dc400d15 	stw	r17,52(sp)
  804ba0:	1442fc16 	blt	r2,r17,805794 <___vfprintf_internal_r+0x18c0>
  804ba4:	a8c00204 	addi	r3,r21,8
  804ba8:	d9414717 	ldw	r5,1308(sp)
  804bac:	2161c83a 	sub	r16,r4,r5
  804bb0:	043f9d0e 	bge	zero,r16,804a28 <___vfprintf_internal_r+0xb54>
  804bb4:	00800404 	movi	r2,16
  804bb8:	1402190e 	bge	r2,r16,805420 <___vfprintf_internal_r+0x154c>
  804bbc:	dc400d17 	ldw	r17,52(sp)
  804bc0:	1027883a 	mov	r19,r2
  804bc4:	07002074 	movhi	fp,129
  804bc8:	e7101984 	addi	fp,fp,16486
  804bcc:	050001c4 	movi	r20,7
  804bd0:	00000306 	br	804be0 <___vfprintf_internal_r+0xd0c>
  804bd4:	18c00204 	addi	r3,r3,8
  804bd8:	843ffc04 	addi	r16,r16,-16
  804bdc:	9c02130e 	bge	r19,r16,80542c <___vfprintf_internal_r+0x1558>
  804be0:	94800404 	addi	r18,r18,16
  804be4:	8c400044 	addi	r17,r17,1
  804be8:	1f000015 	stw	fp,0(r3)
  804bec:	1cc00115 	stw	r19,4(r3)
  804bf0:	dc800e15 	stw	r18,56(sp)
  804bf4:	dc400d15 	stw	r17,52(sp)
  804bf8:	a47ff60e 	bge	r20,r17,804bd4 <___vfprintf_internal_r+0xd00>
  804bfc:	d9014f17 	ldw	r4,1340(sp)
  804c00:	b00b883a 	mov	r5,r22
  804c04:	d9800c04 	addi	r6,sp,48
  804c08:	0803e7c0 	call	803e7c <__sprint_r>
  804c0c:	103e691e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804c10:	dc800e17 	ldw	r18,56(sp)
  804c14:	dc400d17 	ldw	r17,52(sp)
  804c18:	d8c01904 	addi	r3,sp,100
  804c1c:	003fee06 	br	804bd8 <___vfprintf_internal_r+0xd04>
  804c20:	d8814717 	ldw	r2,1308(sp)
  804c24:	143fffc4 	addi	r16,r2,-1
  804c28:	043e970e 	bge	zero,r16,804688 <___vfprintf_internal_r+0x7b4>
  804c2c:	00800404 	movi	r2,16
  804c30:	1400180e 	bge	r2,r16,804c94 <___vfprintf_internal_r+0xdc0>
  804c34:	1029883a 	mov	r20,r2
  804c38:	07002074 	movhi	fp,129
  804c3c:	e7101984 	addi	fp,fp,16486
  804c40:	054001c4 	movi	r21,7
  804c44:	00000306 	br	804c54 <___vfprintf_internal_r+0xd80>
  804c48:	9cc00204 	addi	r19,r19,8
  804c4c:	843ffc04 	addi	r16,r16,-16
  804c50:	a400120e 	bge	r20,r16,804c9c <___vfprintf_internal_r+0xdc8>
  804c54:	94800404 	addi	r18,r18,16
  804c58:	8c400044 	addi	r17,r17,1
  804c5c:	9f000015 	stw	fp,0(r19)
  804c60:	9d000115 	stw	r20,4(r19)
  804c64:	dc800e15 	stw	r18,56(sp)
  804c68:	dc400d15 	stw	r17,52(sp)
  804c6c:	ac7ff60e 	bge	r21,r17,804c48 <___vfprintf_internal_r+0xd74>
  804c70:	d9014f17 	ldw	r4,1340(sp)
  804c74:	b00b883a 	mov	r5,r22
  804c78:	d9800c04 	addi	r6,sp,48
  804c7c:	0803e7c0 	call	803e7c <__sprint_r>
  804c80:	103e4c1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804c84:	dc800e17 	ldw	r18,56(sp)
  804c88:	dc400d17 	ldw	r17,52(sp)
  804c8c:	dcc01904 	addi	r19,sp,100
  804c90:	003fee06 	br	804c4c <___vfprintf_internal_r+0xd78>
  804c94:	07002074 	movhi	fp,129
  804c98:	e7101984 	addi	fp,fp,16486
  804c9c:	9425883a 	add	r18,r18,r16
  804ca0:	8c400044 	addi	r17,r17,1
  804ca4:	008001c4 	movi	r2,7
  804ca8:	9f000015 	stw	fp,0(r19)
  804cac:	9c000115 	stw	r16,4(r19)
  804cb0:	dc800e15 	stw	r18,56(sp)
  804cb4:	dc400d15 	stw	r17,52(sp)
  804cb8:	147e720e 	bge	r2,r17,804684 <___vfprintf_internal_r+0x7b0>
  804cbc:	d9014f17 	ldw	r4,1340(sp)
  804cc0:	b00b883a 	mov	r5,r22
  804cc4:	d9800c04 	addi	r6,sp,48
  804cc8:	0803e7c0 	call	803e7c <__sprint_r>
  804ccc:	103e391e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804cd0:	dc800e17 	ldw	r18,56(sp)
  804cd4:	dc400d17 	ldw	r17,52(sp)
  804cd8:	dcc01904 	addi	r19,sp,100
  804cdc:	003e6a06 	br	804688 <___vfprintf_internal_r+0x7b4>
  804ce0:	d9014f17 	ldw	r4,1340(sp)
  804ce4:	b00b883a 	mov	r5,r22
  804ce8:	d9800c04 	addi	r6,sp,48
  804cec:	d9c15115 	stw	r7,1348(sp)
  804cf0:	0803e7c0 	call	803e7c <__sprint_r>
  804cf4:	d9c15117 	ldw	r7,1348(sp)
  804cf8:	103e2e1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804cfc:	dc800e17 	ldw	r18,56(sp)
  804d00:	dc400d17 	ldw	r17,52(sp)
  804d04:	dd401904 	addi	r21,sp,100
  804d08:	003dba06 	br	8043f4 <___vfprintf_internal_r+0x520>
  804d0c:	d9014f17 	ldw	r4,1340(sp)
  804d10:	b00b883a 	mov	r5,r22
  804d14:	d9800c04 	addi	r6,sp,48
  804d18:	0803e7c0 	call	803e7c <__sprint_r>
  804d1c:	103e251e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804d20:	dc800e17 	ldw	r18,56(sp)
  804d24:	dc400d17 	ldw	r17,52(sp)
  804d28:	dcc01904 	addi	r19,sp,100
  804d2c:	003e4206 	br	804638 <___vfprintf_internal_r+0x764>
  804d30:	d9014f17 	ldw	r4,1340(sp)
  804d34:	b00b883a 	mov	r5,r22
  804d38:	d9800c04 	addi	r6,sp,48
  804d3c:	0803e7c0 	call	803e7c <__sprint_r>
  804d40:	103e1c1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  804d44:	dc800e17 	ldw	r18,56(sp)
  804d48:	dc400d17 	ldw	r17,52(sp)
  804d4c:	d8c01904 	addi	r3,sp,100
  804d50:	003e2e06 	br	80460c <___vfprintf_internal_r+0x738>
  804d54:	d9414c17 	ldw	r5,1328(sp)
  804d58:	2880004c 	andi	r2,r5,1
  804d5c:	1005003a 	cmpeq	r2,r2,zero
  804d60:	103dda1e 	bne	r2,zero,8044cc <___vfprintf_internal_r+0x5f8>
  804d64:	003e9f06 	br	8047e4 <___vfprintf_internal_r+0x910>
  804d68:	d8c14117 	ldw	r3,1284(sp)
  804d6c:	9125883a 	add	r18,r18,r4
  804d70:	8c400044 	addi	r17,r17,1
  804d74:	008001c4 	movi	r2,7
  804d78:	a8c00015 	stw	r3,0(r21)
  804d7c:	a9000115 	stw	r4,4(r21)
  804d80:	dc800e15 	stw	r18,56(sp)
  804d84:	dc400d15 	stw	r17,52(sp)
  804d88:	14426c16 	blt	r2,r17,80573c <___vfprintf_internal_r+0x1868>
  804d8c:	a8c00204 	addi	r3,r21,8
  804d90:	d9414917 	ldw	r5,1316(sp)
  804d94:	00800044 	movi	r2,1
  804d98:	94800044 	addi	r18,r18,1
  804d9c:	8c400044 	addi	r17,r17,1
  804da0:	18800115 	stw	r2,4(r3)
  804da4:	008001c4 	movi	r2,7
  804da8:	19400015 	stw	r5,0(r3)
  804dac:	dc800e15 	stw	r18,56(sp)
  804db0:	dc400d15 	stw	r17,52(sp)
  804db4:	2021883a 	mov	r16,r4
  804db8:	14425616 	blt	r2,r17,805714 <___vfprintf_internal_r+0x1840>
  804dbc:	19400204 	addi	r5,r3,8
  804dc0:	d9814717 	ldw	r6,1308(sp)
  804dc4:	8c400044 	addi	r17,r17,1
  804dc8:	dc400d15 	stw	r17,52(sp)
  804dcc:	3107c83a 	sub	r3,r6,r4
  804dd0:	d9014117 	ldw	r4,1284(sp)
  804dd4:	90e5883a 	add	r18,r18,r3
  804dd8:	28c00115 	stw	r3,4(r5)
  804ddc:	8105883a 	add	r2,r16,r4
  804de0:	28800015 	stw	r2,0(r5)
  804de4:	008001c4 	movi	r2,7
  804de8:	dc800e15 	stw	r18,56(sp)
  804dec:	147f1d16 	blt	r2,r17,804a64 <___vfprintf_internal_r+0xb90>
  804df0:	28c00204 	addi	r3,r5,8
  804df4:	003db506 	br	8044cc <___vfprintf_internal_r+0x5f8>
  804df8:	3c000017 	ldw	r16,0(r7)
  804dfc:	3c400117 	ldw	r17,4(r7)
  804e00:	39800204 	addi	r6,r7,8
  804e04:	01000044 	movi	r4,1
  804e08:	d9814015 	stw	r6,1280(sp)
  804e0c:	d8000405 	stb	zero,16(sp)
  804e10:	003ebe06 	br	80490c <___vfprintf_internal_r+0xa38>
  804e14:	3c000017 	ldw	r16,0(r7)
  804e18:	3c400117 	ldw	r17,4(r7)
  804e1c:	38800204 	addi	r2,r7,8
  804e20:	d8814015 	stw	r2,1280(sp)
  804e24:	003eb706 	br	804904 <___vfprintf_internal_r+0xa30>
  804e28:	3c000017 	ldw	r16,0(r7)
  804e2c:	3c400117 	ldw	r17,4(r7)
  804e30:	39000204 	addi	r4,r7,8
  804e34:	d9014015 	stw	r4,1280(sp)
  804e38:	0009883a 	mov	r4,zero
  804e3c:	d8000405 	stb	zero,16(sp)
  804e40:	003eb206 	br	80490c <___vfprintf_internal_r+0xa38>
  804e44:	38c00017 	ldw	r3,0(r7)
  804e48:	39c00104 	addi	r7,r7,4
  804e4c:	d8c14a15 	stw	r3,1320(sp)
  804e50:	1800d70e 	bge	r3,zero,8051b0 <___vfprintf_internal_r+0x12dc>
  804e54:	00c7c83a 	sub	r3,zero,r3
  804e58:	d8c14a15 	stw	r3,1320(sp)
  804e5c:	d9014c17 	ldw	r4,1328(sp)
  804e60:	b8c00007 	ldb	r3,0(r23)
  804e64:	21000114 	ori	r4,r4,4
  804e68:	d9014c15 	stw	r4,1328(sp)
  804e6c:	003c9806 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  804e70:	d9814c17 	ldw	r6,1328(sp)
  804e74:	3080080c 	andi	r2,r6,32
  804e78:	1001f626 	beq	r2,zero,805654 <___vfprintf_internal_r+0x1780>
  804e7c:	d9014b17 	ldw	r4,1324(sp)
  804e80:	38800017 	ldw	r2,0(r7)
  804e84:	39c00104 	addi	r7,r7,4
  804e88:	d9c14015 	stw	r7,1280(sp)
  804e8c:	2007d7fa 	srai	r3,r4,31
  804e90:	d9c14017 	ldw	r7,1280(sp)
  804e94:	11000015 	stw	r4,0(r2)
  804e98:	10c00115 	stw	r3,4(r2)
  804e9c:	003c6906 	br	804044 <___vfprintf_internal_r+0x170>
  804ea0:	b8c00007 	ldb	r3,0(r23)
  804ea4:	00801b04 	movi	r2,108
  804ea8:	18825526 	beq	r3,r2,805800 <___vfprintf_internal_r+0x192c>
  804eac:	d9414c17 	ldw	r5,1328(sp)
  804eb0:	29400414 	ori	r5,r5,16
  804eb4:	d9414c15 	stw	r5,1328(sp)
  804eb8:	003c8506 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  804ebc:	d9814c17 	ldw	r6,1328(sp)
  804ec0:	b8c00007 	ldb	r3,0(r23)
  804ec4:	31800814 	ori	r6,r6,32
  804ec8:	d9814c15 	stw	r6,1328(sp)
  804ecc:	003c8006 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  804ed0:	d8814c17 	ldw	r2,1328(sp)
  804ed4:	3c000017 	ldw	r16,0(r7)
  804ed8:	00c01e04 	movi	r3,120
  804edc:	10800094 	ori	r2,r2,2
  804ee0:	d8814c15 	stw	r2,1328(sp)
  804ee4:	39c00104 	addi	r7,r7,4
  804ee8:	01402074 	movhi	r5,129
  804eec:	29500304 	addi	r5,r5,16396
  804ef0:	00800c04 	movi	r2,48
  804ef4:	0023883a 	mov	r17,zero
  804ef8:	01000084 	movi	r4,2
  804efc:	d9c14015 	stw	r7,1280(sp)
  804f00:	d8c14d15 	stw	r3,1332(sp)
  804f04:	d9414415 	stw	r5,1296(sp)
  804f08:	d8800445 	stb	r2,17(sp)
  804f0c:	d8c00485 	stb	r3,18(sp)
  804f10:	d8000405 	stb	zero,16(sp)
  804f14:	003e7d06 	br	80490c <___vfprintf_internal_r+0xa38>
  804f18:	d8814c17 	ldw	r2,1328(sp)
  804f1c:	b8c00007 	ldb	r3,0(r23)
  804f20:	10801014 	ori	r2,r2,64
  804f24:	d8814c15 	stw	r2,1328(sp)
  804f28:	003c6906 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  804f2c:	d9414c17 	ldw	r5,1328(sp)
  804f30:	2880020c 	andi	r2,r5,8
  804f34:	1001e526 	beq	r2,zero,8056cc <___vfprintf_internal_r+0x17f8>
  804f38:	39800017 	ldw	r6,0(r7)
  804f3c:	38800204 	addi	r2,r7,8
  804f40:	d8814015 	stw	r2,1280(sp)
  804f44:	d9814215 	stw	r6,1288(sp)
  804f48:	39c00117 	ldw	r7,4(r7)
  804f4c:	d9c14315 	stw	r7,1292(sp)
  804f50:	d9014217 	ldw	r4,1288(sp)
  804f54:	d9414317 	ldw	r5,1292(sp)
  804f58:	080a72c0 	call	80a72c <__isinfd>
  804f5c:	10021d26 	beq	r2,zero,8057d4 <___vfprintf_internal_r+0x1900>
  804f60:	d9014217 	ldw	r4,1288(sp)
  804f64:	d9414317 	ldw	r5,1292(sp)
  804f68:	000d883a 	mov	r6,zero
  804f6c:	000f883a 	mov	r7,zero
  804f70:	080c0540 	call	80c054 <__ltdf2>
  804f74:	1002d016 	blt	r2,zero,805ab8 <___vfprintf_internal_r+0x1be4>
  804f78:	d9414d17 	ldw	r5,1332(sp)
  804f7c:	008011c4 	movi	r2,71
  804f80:	11421016 	blt	r2,r5,8057c4 <___vfprintf_internal_r+0x18f0>
  804f84:	01802074 	movhi	r6,129
  804f88:	31900804 	addi	r6,r6,16416
  804f8c:	d9814115 	stw	r6,1284(sp)
  804f90:	d9014c17 	ldw	r4,1328(sp)
  804f94:	00c000c4 	movi	r3,3
  804f98:	00bfdfc4 	movi	r2,-129
  804f9c:	2088703a 	and	r4,r4,r2
  804fa0:	180f883a 	mov	r7,r3
  804fa4:	d8c14515 	stw	r3,1300(sp)
  804fa8:	d9014c15 	stw	r4,1328(sp)
  804fac:	d8014615 	stw	zero,1304(sp)
  804fb0:	003e6a06 	br	80495c <___vfprintf_internal_r+0xa88>
  804fb4:	38800017 	ldw	r2,0(r7)
  804fb8:	00c00044 	movi	r3,1
  804fbc:	39c00104 	addi	r7,r7,4
  804fc0:	d9c14015 	stw	r7,1280(sp)
  804fc4:	d9000f04 	addi	r4,sp,60
  804fc8:	180f883a 	mov	r7,r3
  804fcc:	d8c14515 	stw	r3,1300(sp)
  804fd0:	d9014115 	stw	r4,1284(sp)
  804fd4:	d8800f05 	stb	r2,60(sp)
  804fd8:	d8000405 	stb	zero,16(sp)
  804fdc:	003cac06 	br	804290 <___vfprintf_internal_r+0x3bc>
  804fe0:	01402074 	movhi	r5,129
  804fe4:	29500e04 	addi	r5,r5,16440
  804fe8:	d9414415 	stw	r5,1296(sp)
  804fec:	d9814c17 	ldw	r6,1328(sp)
  804ff0:	3080080c 	andi	r2,r6,32
  804ff4:	1000ff26 	beq	r2,zero,8053f4 <___vfprintf_internal_r+0x1520>
  804ff8:	3c000017 	ldw	r16,0(r7)
  804ffc:	3c400117 	ldw	r17,4(r7)
  805000:	38800204 	addi	r2,r7,8
  805004:	d8814015 	stw	r2,1280(sp)
  805008:	d9414c17 	ldw	r5,1328(sp)
  80500c:	2880004c 	andi	r2,r5,1
  805010:	1005003a 	cmpeq	r2,r2,zero
  805014:	1000b91e 	bne	r2,zero,8052fc <___vfprintf_internal_r+0x1428>
  805018:	8444b03a 	or	r2,r16,r17
  80501c:	1000b726 	beq	r2,zero,8052fc <___vfprintf_internal_r+0x1428>
  805020:	d9814d17 	ldw	r6,1332(sp)
  805024:	29400094 	ori	r5,r5,2
  805028:	00800c04 	movi	r2,48
  80502c:	01000084 	movi	r4,2
  805030:	d9414c15 	stw	r5,1328(sp)
  805034:	d8800445 	stb	r2,17(sp)
  805038:	d9800485 	stb	r6,18(sp)
  80503c:	d8000405 	stb	zero,16(sp)
  805040:	003e3206 	br	80490c <___vfprintf_internal_r+0xa38>
  805044:	01802074 	movhi	r6,129
  805048:	31900304 	addi	r6,r6,16396
  80504c:	d9814415 	stw	r6,1296(sp)
  805050:	003fe606 	br	804fec <___vfprintf_internal_r+0x1118>
  805054:	00800ac4 	movi	r2,43
  805058:	d8800405 	stb	r2,16(sp)
  80505c:	b8c00007 	ldb	r3,0(r23)
  805060:	003c1b06 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  805064:	d8814c17 	ldw	r2,1328(sp)
  805068:	b8c00007 	ldb	r3,0(r23)
  80506c:	10800054 	ori	r2,r2,1
  805070:	d8814c15 	stw	r2,1328(sp)
  805074:	003c1606 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  805078:	d8800407 	ldb	r2,16(sp)
  80507c:	10004c1e 	bne	r2,zero,8051b0 <___vfprintf_internal_r+0x12dc>
  805080:	00800804 	movi	r2,32
  805084:	d8800405 	stb	r2,16(sp)
  805088:	b8c00007 	ldb	r3,0(r23)
  80508c:	003c1006 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  805090:	d9814c17 	ldw	r6,1328(sp)
  805094:	b8c00007 	ldb	r3,0(r23)
  805098:	31800214 	ori	r6,r6,8
  80509c:	d9814c15 	stw	r6,1328(sp)
  8050a0:	003c0b06 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  8050a4:	0009883a 	mov	r4,zero
  8050a8:	04000244 	movi	r16,9
  8050ac:	01400284 	movi	r5,10
  8050b0:	d9c15115 	stw	r7,1348(sp)
  8050b4:	0802b980 	call	802b98 <__mulsi3>
  8050b8:	b9000007 	ldb	r4,0(r23)
  8050bc:	d8c14d17 	ldw	r3,1332(sp)
  8050c0:	bdc00044 	addi	r23,r23,1
  8050c4:	d9014d15 	stw	r4,1332(sp)
  8050c8:	d9414d17 	ldw	r5,1332(sp)
  8050cc:	1885883a 	add	r2,r3,r2
  8050d0:	113ff404 	addi	r4,r2,-48
  8050d4:	28bff404 	addi	r2,r5,-48
  8050d8:	d9c15117 	ldw	r7,1348(sp)
  8050dc:	80bff32e 	bgeu	r16,r2,8050ac <___vfprintf_internal_r+0x11d8>
  8050e0:	d9014a15 	stw	r4,1320(sp)
  8050e4:	003bfc06 	br	8040d8 <___vfprintf_internal_r+0x204>
  8050e8:	d8814c17 	ldw	r2,1328(sp)
  8050ec:	b8c00007 	ldb	r3,0(r23)
  8050f0:	10802014 	ori	r2,r2,128
  8050f4:	d8814c15 	stw	r2,1328(sp)
  8050f8:	003bf506 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  8050fc:	b8c00007 	ldb	r3,0(r23)
  805100:	00800a84 	movi	r2,42
  805104:	bdc00044 	addi	r23,r23,1
  805108:	18831826 	beq	r3,r2,805d6c <___vfprintf_internal_r+0x1e98>
  80510c:	d8c14d15 	stw	r3,1332(sp)
  805110:	18bff404 	addi	r2,r3,-48
  805114:	00c00244 	movi	r3,9
  805118:	18827b36 	bltu	r3,r2,805b08 <___vfprintf_internal_r+0x1c34>
  80511c:	1821883a 	mov	r16,r3
  805120:	0009883a 	mov	r4,zero
  805124:	01400284 	movi	r5,10
  805128:	d9c15115 	stw	r7,1348(sp)
  80512c:	0802b980 	call	802b98 <__mulsi3>
  805130:	d9414d17 	ldw	r5,1332(sp)
  805134:	b9800007 	ldb	r6,0(r23)
  805138:	d9c15117 	ldw	r7,1348(sp)
  80513c:	1145883a 	add	r2,r2,r5
  805140:	113ff404 	addi	r4,r2,-48
  805144:	30bff404 	addi	r2,r6,-48
  805148:	d9814d15 	stw	r6,1332(sp)
  80514c:	bdc00044 	addi	r23,r23,1
  805150:	80bff42e 	bgeu	r16,r2,805124 <___vfprintf_internal_r+0x1250>
  805154:	2027883a 	mov	r19,r4
  805158:	203bdf0e 	bge	r4,zero,8040d8 <___vfprintf_internal_r+0x204>
  80515c:	04ffffc4 	movi	r19,-1
  805160:	003bdd06 	br	8040d8 <___vfprintf_internal_r+0x204>
  805164:	d8000405 	stb	zero,16(sp)
  805168:	39800017 	ldw	r6,0(r7)
  80516c:	39c00104 	addi	r7,r7,4
  805170:	d9c14015 	stw	r7,1280(sp)
  805174:	d9814115 	stw	r6,1284(sp)
  805178:	3001c926 	beq	r6,zero,8058a0 <___vfprintf_internal_r+0x19cc>
  80517c:	98000e16 	blt	r19,zero,8051b8 <___vfprintf_internal_r+0x12e4>
  805180:	d9014117 	ldw	r4,1284(sp)
  805184:	000b883a 	mov	r5,zero
  805188:	980d883a 	mov	r6,r19
  80518c:	0808a7c0 	call	808a7c <memchr>
  805190:	10025926 	beq	r2,zero,805af8 <___vfprintf_internal_r+0x1c24>
  805194:	d8c14117 	ldw	r3,1284(sp)
  805198:	10cfc83a 	sub	r7,r2,r3
  80519c:	99c19e16 	blt	r19,r7,805818 <___vfprintf_internal_r+0x1944>
  8051a0:	d9c14515 	stw	r7,1300(sp)
  8051a4:	38000916 	blt	r7,zero,8051cc <___vfprintf_internal_r+0x12f8>
  8051a8:	d8014615 	stw	zero,1304(sp)
  8051ac:	003deb06 	br	80495c <___vfprintf_internal_r+0xa88>
  8051b0:	b8c00007 	ldb	r3,0(r23)
  8051b4:	003bc606 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  8051b8:	d9014117 	ldw	r4,1284(sp)
  8051bc:	0803e080 	call	803e08 <strlen>
  8051c0:	d8814515 	stw	r2,1300(sp)
  8051c4:	100f883a 	mov	r7,r2
  8051c8:	103ff70e 	bge	r2,zero,8051a8 <___vfprintf_internal_r+0x12d4>
  8051cc:	d8014515 	stw	zero,1300(sp)
  8051d0:	d8014615 	stw	zero,1304(sp)
  8051d4:	003de106 	br	80495c <___vfprintf_internal_r+0xa88>
  8051d8:	20c03fcc 	andi	r3,r4,255
  8051dc:	00800044 	movi	r2,1
  8051e0:	18802d26 	beq	r3,r2,805298 <___vfprintf_internal_r+0x13c4>
  8051e4:	18800e36 	bltu	r3,r2,805220 <___vfprintf_internal_r+0x134c>
  8051e8:	00800084 	movi	r2,2
  8051ec:	1880fa26 	beq	r3,r2,8055d8 <___vfprintf_internal_r+0x1704>
  8051f0:	01002074 	movhi	r4,129
  8051f4:	21101304 	addi	r4,r4,16460
  8051f8:	0803e080 	call	803e08 <strlen>
  8051fc:	100f883a 	mov	r7,r2
  805200:	dcc14515 	stw	r19,1300(sp)
  805204:	9880010e 	bge	r19,r2,80520c <___vfprintf_internal_r+0x1338>
  805208:	d8814515 	stw	r2,1300(sp)
  80520c:	00802074 	movhi	r2,129
  805210:	10901304 	addi	r2,r2,16460
  805214:	dcc14615 	stw	r19,1304(sp)
  805218:	d8814115 	stw	r2,1284(sp)
  80521c:	003dcf06 	br	80495c <___vfprintf_internal_r+0xa88>
  805220:	d9401904 	addi	r5,sp,100
  805224:	dd000f04 	addi	r20,sp,60
  805228:	d9414115 	stw	r5,1284(sp)
  80522c:	880a977a 	slli	r5,r17,29
  805230:	d9814117 	ldw	r6,1284(sp)
  805234:	8004d0fa 	srli	r2,r16,3
  805238:	8806d0fa 	srli	r3,r17,3
  80523c:	810001cc 	andi	r4,r16,7
  805240:	2884b03a 	or	r2,r5,r2
  805244:	31bfffc4 	addi	r6,r6,-1
  805248:	21000c04 	addi	r4,r4,48
  80524c:	d9814115 	stw	r6,1284(sp)
  805250:	10cab03a 	or	r5,r2,r3
  805254:	31000005 	stb	r4,0(r6)
  805258:	1021883a 	mov	r16,r2
  80525c:	1823883a 	mov	r17,r3
  805260:	283ff21e 	bne	r5,zero,80522c <___vfprintf_internal_r+0x1358>
  805264:	d8c14c17 	ldw	r3,1328(sp)
  805268:	1880004c 	andi	r2,r3,1
  80526c:	1005003a 	cmpeq	r2,r2,zero
  805270:	103db31e 	bne	r2,zero,804940 <___vfprintf_internal_r+0xa6c>
  805274:	20803fcc 	andi	r2,r4,255
  805278:	1080201c 	xori	r2,r2,128
  80527c:	10bfe004 	addi	r2,r2,-128
  805280:	00c00c04 	movi	r3,48
  805284:	10fdae26 	beq	r2,r3,804940 <___vfprintf_internal_r+0xa6c>
  805288:	31bfffc4 	addi	r6,r6,-1
  80528c:	d9814115 	stw	r6,1284(sp)
  805290:	30c00005 	stb	r3,0(r6)
  805294:	003daa06 	br	804940 <___vfprintf_internal_r+0xa6c>
  805298:	88800068 	cmpgeui	r2,r17,1
  80529c:	10002c1e 	bne	r2,zero,805350 <___vfprintf_internal_r+0x147c>
  8052a0:	8800021e 	bne	r17,zero,8052ac <___vfprintf_internal_r+0x13d8>
  8052a4:	00800244 	movi	r2,9
  8052a8:	14002936 	bltu	r2,r16,805350 <___vfprintf_internal_r+0x147c>
  8052ac:	d90018c4 	addi	r4,sp,99
  8052b0:	dd000f04 	addi	r20,sp,60
  8052b4:	d9014115 	stw	r4,1284(sp)
  8052b8:	d9014117 	ldw	r4,1284(sp)
  8052bc:	80800c04 	addi	r2,r16,48
  8052c0:	20800005 	stb	r2,0(r4)
  8052c4:	003d9e06 	br	804940 <___vfprintf_internal_r+0xa6c>
  8052c8:	dc400d17 	ldw	r17,52(sp)
  8052cc:	07002074 	movhi	fp,129
  8052d0:	e7101984 	addi	fp,fp,16486
  8052d4:	9425883a 	add	r18,r18,r16
  8052d8:	8c400044 	addi	r17,r17,1
  8052dc:	008001c4 	movi	r2,7
  8052e0:	1f000015 	stw	fp,0(r3)
  8052e4:	1c000115 	stw	r16,4(r3)
  8052e8:	dc800e15 	stw	r18,56(sp)
  8052ec:	dc400d15 	stw	r17,52(sp)
  8052f0:	147ddc16 	blt	r2,r17,804a64 <___vfprintf_internal_r+0xb90>
  8052f4:	18c00204 	addi	r3,r3,8
  8052f8:	003c7406 	br	8044cc <___vfprintf_internal_r+0x5f8>
  8052fc:	01000084 	movi	r4,2
  805300:	d8000405 	stb	zero,16(sp)
  805304:	003d8106 	br	80490c <___vfprintf_internal_r+0xa38>
  805308:	d9814c17 	ldw	r6,1328(sp)
  80530c:	30c4703a 	and	r2,r6,r3
  805310:	1005003a 	cmpeq	r2,r2,zero
  805314:	103cb326 	beq	r2,zero,8045e4 <___vfprintf_internal_r+0x710>
  805318:	d9014117 	ldw	r4,1284(sp)
  80531c:	94800044 	addi	r18,r18,1
  805320:	8c400044 	addi	r17,r17,1
  805324:	008001c4 	movi	r2,7
  805328:	a9000015 	stw	r4,0(r21)
  80532c:	a8c00115 	stw	r3,4(r21)
  805330:	dc800e15 	stw	r18,56(sp)
  805334:	dc400d15 	stw	r17,52(sp)
  805338:	147e6016 	blt	r2,r17,804cbc <___vfprintf_internal_r+0xde8>
  80533c:	acc00204 	addi	r19,r21,8
  805340:	003cd106 	br	804688 <___vfprintf_internal_r+0x7b4>
  805344:	07002074 	movhi	fp,129
  805348:	e7101984 	addi	fp,fp,16486
  80534c:	003c4906 	br	804474 <___vfprintf_internal_r+0x5a0>
  805350:	dd000f04 	addi	r20,sp,60
  805354:	dc801904 	addi	r18,sp,100
  805358:	8009883a 	mov	r4,r16
  80535c:	880b883a 	mov	r5,r17
  805360:	01800284 	movi	r6,10
  805364:	000f883a 	mov	r7,zero
  805368:	080b6040 	call	80b604 <__umoddi3>
  80536c:	12000c04 	addi	r8,r2,48
  805370:	94bfffc4 	addi	r18,r18,-1
  805374:	8009883a 	mov	r4,r16
  805378:	880b883a 	mov	r5,r17
  80537c:	01800284 	movi	r6,10
  805380:	000f883a 	mov	r7,zero
  805384:	92000005 	stb	r8,0(r18)
  805388:	080af980 	call	80af98 <__udivdi3>
  80538c:	1009883a 	mov	r4,r2
  805390:	1021883a 	mov	r16,r2
  805394:	18800068 	cmpgeui	r2,r3,1
  805398:	1823883a 	mov	r17,r3
  80539c:	103fee1e 	bne	r2,zero,805358 <___vfprintf_internal_r+0x1484>
  8053a0:	1800021e 	bne	r3,zero,8053ac <___vfprintf_internal_r+0x14d8>
  8053a4:	00800244 	movi	r2,9
  8053a8:	113feb36 	bltu	r2,r4,805358 <___vfprintf_internal_r+0x1484>
  8053ac:	94bfffc4 	addi	r18,r18,-1
  8053b0:	dc814115 	stw	r18,1284(sp)
  8053b4:	003fc006 	br	8052b8 <___vfprintf_internal_r+0x13e4>
  8053b8:	d9014c17 	ldw	r4,1328(sp)
  8053bc:	2080004c 	andi	r2,r4,1
  8053c0:	10009a1e 	bne	r2,zero,80562c <___vfprintf_internal_r+0x1758>
  8053c4:	d9401904 	addi	r5,sp,100
  8053c8:	dd000f04 	addi	r20,sp,60
  8053cc:	d9414115 	stw	r5,1284(sp)
  8053d0:	003d5b06 	br	804940 <___vfprintf_internal_r+0xa6c>
  8053d4:	d9014f17 	ldw	r4,1340(sp)
  8053d8:	b00b883a 	mov	r5,r22
  8053dc:	d9800c04 	addi	r6,sp,48
  8053e0:	0803e7c0 	call	803e7c <__sprint_r>
  8053e4:	103c731e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  8053e8:	dc800e17 	ldw	r18,56(sp)
  8053ec:	d8c01904 	addi	r3,sp,100
  8053f0:	003cf906 	br	8047d8 <___vfprintf_internal_r+0x904>
  8053f4:	d8c14c17 	ldw	r3,1328(sp)
  8053f8:	1880040c 	andi	r2,r3,16
  8053fc:	1000711e 	bne	r2,zero,8055c4 <___vfprintf_internal_r+0x16f0>
  805400:	d9014c17 	ldw	r4,1328(sp)
  805404:	2080100c 	andi	r2,r4,64
  805408:	10006e26 	beq	r2,zero,8055c4 <___vfprintf_internal_r+0x16f0>
  80540c:	3c00000b 	ldhu	r16,0(r7)
  805410:	0023883a 	mov	r17,zero
  805414:	39c00104 	addi	r7,r7,4
  805418:	d9c14015 	stw	r7,1280(sp)
  80541c:	003efa06 	br	805008 <___vfprintf_internal_r+0x1134>
  805420:	dc400d17 	ldw	r17,52(sp)
  805424:	07002074 	movhi	fp,129
  805428:	e7101984 	addi	fp,fp,16486
  80542c:	9425883a 	add	r18,r18,r16
  805430:	8c400044 	addi	r17,r17,1
  805434:	008001c4 	movi	r2,7
  805438:	1f000015 	stw	fp,0(r3)
  80543c:	1c000115 	stw	r16,4(r3)
  805440:	dc800e15 	stw	r18,56(sp)
  805444:	dc400d15 	stw	r17,52(sp)
  805448:	147d7016 	blt	r2,r17,804a0c <___vfprintf_internal_r+0xb38>
  80544c:	18c00204 	addi	r3,r3,8
  805450:	003d7506 	br	804a28 <___vfprintf_internal_r+0xb54>
  805454:	dc800e17 	ldw	r18,56(sp)
  805458:	dc400d17 	ldw	r17,52(sp)
  80545c:	07002074 	movhi	fp,129
  805460:	e7101d84 	addi	fp,fp,16502
  805464:	003bba06 	br	804350 <___vfprintf_internal_r+0x47c>
  805468:	d9014f17 	ldw	r4,1340(sp)
  80546c:	b00b883a 	mov	r5,r22
  805470:	d9800c04 	addi	r6,sp,48
  805474:	0803e7c0 	call	803e7c <__sprint_r>
  805478:	103c4e1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  80547c:	dc800e17 	ldw	r18,56(sp)
  805480:	d8c01904 	addi	r3,sp,100
  805484:	003ce306 	br	804814 <___vfprintf_internal_r+0x940>
  805488:	3c000017 	ldw	r16,0(r7)
  80548c:	0009883a 	mov	r4,zero
  805490:	39c00104 	addi	r7,r7,4
  805494:	0023883a 	mov	r17,zero
  805498:	d9c14015 	stw	r7,1280(sp)
  80549c:	d8000405 	stb	zero,16(sp)
  8054a0:	003d1a06 	br	80490c <___vfprintf_internal_r+0xa38>
  8054a4:	38800017 	ldw	r2,0(r7)
  8054a8:	39c00104 	addi	r7,r7,4
  8054ac:	d9c14015 	stw	r7,1280(sp)
  8054b0:	1023d7fa 	srai	r17,r2,31
  8054b4:	1021883a 	mov	r16,r2
  8054b8:	003d1206 	br	804904 <___vfprintf_internal_r+0xa30>
  8054bc:	3c000017 	ldw	r16,0(r7)
  8054c0:	01000044 	movi	r4,1
  8054c4:	39c00104 	addi	r7,r7,4
  8054c8:	0023883a 	mov	r17,zero
  8054cc:	d9c14015 	stw	r7,1280(sp)
  8054d0:	d8000405 	stb	zero,16(sp)
  8054d4:	003d0d06 	br	80490c <___vfprintf_internal_r+0xa38>
  8054d8:	00802074 	movhi	r2,129
  8054dc:	108eef04 	addi	r2,r2,15292
  8054e0:	94800044 	addi	r18,r18,1
  8054e4:	8c400044 	addi	r17,r17,1
  8054e8:	a8800015 	stw	r2,0(r21)
  8054ec:	00c00044 	movi	r3,1
  8054f0:	008001c4 	movi	r2,7
  8054f4:	a8c00115 	stw	r3,4(r21)
  8054f8:	dc800e15 	stw	r18,56(sp)
  8054fc:	dc400d15 	stw	r17,52(sp)
  805500:	1440ca16 	blt	r2,r17,80582c <___vfprintf_internal_r+0x1958>
  805504:	a8c00204 	addi	r3,r21,8
  805508:	2000061e 	bne	r4,zero,805524 <___vfprintf_internal_r+0x1650>
  80550c:	d9414717 	ldw	r5,1308(sp)
  805510:	2800041e 	bne	r5,zero,805524 <___vfprintf_internal_r+0x1650>
  805514:	d9814c17 	ldw	r6,1328(sp)
  805518:	3080004c 	andi	r2,r6,1
  80551c:	1005003a 	cmpeq	r2,r2,zero
  805520:	103bea1e 	bne	r2,zero,8044cc <___vfprintf_internal_r+0x5f8>
  805524:	00800044 	movi	r2,1
  805528:	dc400d17 	ldw	r17,52(sp)
  80552c:	18800115 	stw	r2,4(r3)
  805530:	d8814917 	ldw	r2,1316(sp)
  805534:	94800044 	addi	r18,r18,1
  805538:	8c400044 	addi	r17,r17,1
  80553c:	18800015 	stw	r2,0(r3)
  805540:	008001c4 	movi	r2,7
  805544:	dc800e15 	stw	r18,56(sp)
  805548:	dc400d15 	stw	r17,52(sp)
  80554c:	1440ca16 	blt	r2,r17,805878 <___vfprintf_internal_r+0x19a4>
  805550:	18c00204 	addi	r3,r3,8
  805554:	0121c83a 	sub	r16,zero,r4
  805558:	0400500e 	bge	zero,r16,80569c <___vfprintf_internal_r+0x17c8>
  80555c:	00800404 	movi	r2,16
  805560:	1400800e 	bge	r2,r16,805764 <___vfprintf_internal_r+0x1890>
  805564:	1027883a 	mov	r19,r2
  805568:	07002074 	movhi	fp,129
  80556c:	e7101984 	addi	fp,fp,16486
  805570:	050001c4 	movi	r20,7
  805574:	00000306 	br	805584 <___vfprintf_internal_r+0x16b0>
  805578:	18c00204 	addi	r3,r3,8
  80557c:	843ffc04 	addi	r16,r16,-16
  805580:	9c007a0e 	bge	r19,r16,80576c <___vfprintf_internal_r+0x1898>
  805584:	94800404 	addi	r18,r18,16
  805588:	8c400044 	addi	r17,r17,1
  80558c:	1f000015 	stw	fp,0(r3)
  805590:	1cc00115 	stw	r19,4(r3)
  805594:	dc800e15 	stw	r18,56(sp)
  805598:	dc400d15 	stw	r17,52(sp)
  80559c:	a47ff60e 	bge	r20,r17,805578 <___vfprintf_internal_r+0x16a4>
  8055a0:	d9014f17 	ldw	r4,1340(sp)
  8055a4:	b00b883a 	mov	r5,r22
  8055a8:	d9800c04 	addi	r6,sp,48
  8055ac:	0803e7c0 	call	803e7c <__sprint_r>
  8055b0:	103c001e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  8055b4:	dc800e17 	ldw	r18,56(sp)
  8055b8:	dc400d17 	ldw	r17,52(sp)
  8055bc:	d8c01904 	addi	r3,sp,100
  8055c0:	003fee06 	br	80557c <___vfprintf_internal_r+0x16a8>
  8055c4:	3c000017 	ldw	r16,0(r7)
  8055c8:	0023883a 	mov	r17,zero
  8055cc:	39c00104 	addi	r7,r7,4
  8055d0:	d9c14015 	stw	r7,1280(sp)
  8055d4:	003e8c06 	br	805008 <___vfprintf_internal_r+0x1134>
  8055d8:	d9401904 	addi	r5,sp,100
  8055dc:	dd000f04 	addi	r20,sp,60
  8055e0:	d9414115 	stw	r5,1284(sp)
  8055e4:	d9814417 	ldw	r6,1296(sp)
  8055e8:	880a973a 	slli	r5,r17,28
  8055ec:	8004d13a 	srli	r2,r16,4
  8055f0:	810003cc 	andi	r4,r16,15
  8055f4:	3109883a 	add	r4,r6,r4
  8055f8:	2884b03a 	or	r2,r5,r2
  8055fc:	21400003 	ldbu	r5,0(r4)
  805600:	d9014117 	ldw	r4,1284(sp)
  805604:	8806d13a 	srli	r3,r17,4
  805608:	1021883a 	mov	r16,r2
  80560c:	213fffc4 	addi	r4,r4,-1
  805610:	d9014115 	stw	r4,1284(sp)
  805614:	d9814117 	ldw	r6,1284(sp)
  805618:	10c8b03a 	or	r4,r2,r3
  80561c:	1823883a 	mov	r17,r3
  805620:	31400005 	stb	r5,0(r6)
  805624:	203fef1e 	bne	r4,zero,8055e4 <___vfprintf_internal_r+0x1710>
  805628:	003cc506 	br	804940 <___vfprintf_internal_r+0xa6c>
  80562c:	00800c04 	movi	r2,48
  805630:	d98018c4 	addi	r6,sp,99
  805634:	dd000f04 	addi	r20,sp,60
  805638:	d88018c5 	stb	r2,99(sp)
  80563c:	d9814115 	stw	r6,1284(sp)
  805640:	003cbf06 	br	804940 <___vfprintf_internal_r+0xa6c>
  805644:	dc400d17 	ldw	r17,52(sp)
  805648:	07002074 	movhi	fp,129
  80564c:	e7101d84 	addi	fp,fp,16502
  805650:	003bc106 	br	804558 <___vfprintf_internal_r+0x684>
  805654:	d9414c17 	ldw	r5,1328(sp)
  805658:	2880040c 	andi	r2,r5,16
  80565c:	10007c26 	beq	r2,zero,805850 <___vfprintf_internal_r+0x197c>
  805660:	38800017 	ldw	r2,0(r7)
  805664:	39c00104 	addi	r7,r7,4
  805668:	d9c14015 	stw	r7,1280(sp)
  80566c:	d9814b17 	ldw	r6,1324(sp)
  805670:	d9c14017 	ldw	r7,1280(sp)
  805674:	11800015 	stw	r6,0(r2)
  805678:	003a7206 	br	804044 <___vfprintf_internal_r+0x170>
  80567c:	d9014f17 	ldw	r4,1340(sp)
  805680:	b00b883a 	mov	r5,r22
  805684:	d9800c04 	addi	r6,sp,48
  805688:	0803e7c0 	call	803e7c <__sprint_r>
  80568c:	103bc91e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  805690:	dc800e17 	ldw	r18,56(sp)
  805694:	dc400d17 	ldw	r17,52(sp)
  805698:	d8c01904 	addi	r3,sp,100
  80569c:	d9014717 	ldw	r4,1308(sp)
  8056a0:	d9414117 	ldw	r5,1284(sp)
  8056a4:	8c400044 	addi	r17,r17,1
  8056a8:	9125883a 	add	r18,r18,r4
  8056ac:	008001c4 	movi	r2,7
  8056b0:	19400015 	stw	r5,0(r3)
  8056b4:	19000115 	stw	r4,4(r3)
  8056b8:	dc800e15 	stw	r18,56(sp)
  8056bc:	dc400d15 	stw	r17,52(sp)
  8056c0:	147ce816 	blt	r2,r17,804a64 <___vfprintf_internal_r+0xb90>
  8056c4:	18c00204 	addi	r3,r3,8
  8056c8:	003b8006 	br	8044cc <___vfprintf_internal_r+0x5f8>
  8056cc:	38c00017 	ldw	r3,0(r7)
  8056d0:	39000204 	addi	r4,r7,8
  8056d4:	d9014015 	stw	r4,1280(sp)
  8056d8:	d8c14215 	stw	r3,1288(sp)
  8056dc:	39c00117 	ldw	r7,4(r7)
  8056e0:	d9c14315 	stw	r7,1292(sp)
  8056e4:	003e1a06 	br	804f50 <___vfprintf_internal_r+0x107c>
  8056e8:	0005883a 	mov	r2,zero
  8056ec:	1409c83a 	sub	r4,r2,r16
  8056f0:	1105803a 	cmpltu	r2,r2,r4
  8056f4:	044bc83a 	sub	r5,zero,r17
  8056f8:	2885c83a 	sub	r2,r5,r2
  8056fc:	2021883a 	mov	r16,r4
  805700:	1023883a 	mov	r17,r2
  805704:	01000044 	movi	r4,1
  805708:	00800b44 	movi	r2,45
  80570c:	d8800405 	stb	r2,16(sp)
  805710:	003c7e06 	br	80490c <___vfprintf_internal_r+0xa38>
  805714:	d9014f17 	ldw	r4,1340(sp)
  805718:	b00b883a 	mov	r5,r22
  80571c:	d9800c04 	addi	r6,sp,48
  805720:	0803e7c0 	call	803e7c <__sprint_r>
  805724:	103ba31e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  805728:	dc800e17 	ldw	r18,56(sp)
  80572c:	dc400d17 	ldw	r17,52(sp)
  805730:	d9000517 	ldw	r4,20(sp)
  805734:	d9401904 	addi	r5,sp,100
  805738:	003da106 	br	804dc0 <___vfprintf_internal_r+0xeec>
  80573c:	d9014f17 	ldw	r4,1340(sp)
  805740:	b00b883a 	mov	r5,r22
  805744:	d9800c04 	addi	r6,sp,48
  805748:	0803e7c0 	call	803e7c <__sprint_r>
  80574c:	103b991e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  805750:	dc800e17 	ldw	r18,56(sp)
  805754:	dc400d17 	ldw	r17,52(sp)
  805758:	d9000517 	ldw	r4,20(sp)
  80575c:	d8c01904 	addi	r3,sp,100
  805760:	003d8b06 	br	804d90 <___vfprintf_internal_r+0xebc>
  805764:	07002074 	movhi	fp,129
  805768:	e7101984 	addi	fp,fp,16486
  80576c:	9425883a 	add	r18,r18,r16
  805770:	8c400044 	addi	r17,r17,1
  805774:	008001c4 	movi	r2,7
  805778:	1f000015 	stw	fp,0(r3)
  80577c:	1c000115 	stw	r16,4(r3)
  805780:	dc800e15 	stw	r18,56(sp)
  805784:	dc400d15 	stw	r17,52(sp)
  805788:	147fbc16 	blt	r2,r17,80567c <___vfprintf_internal_r+0x17a8>
  80578c:	18c00204 	addi	r3,r3,8
  805790:	003fc206 	br	80569c <___vfprintf_internal_r+0x17c8>
  805794:	d9014f17 	ldw	r4,1340(sp)
  805798:	b00b883a 	mov	r5,r22
  80579c:	d9800c04 	addi	r6,sp,48
  8057a0:	0803e7c0 	call	803e7c <__sprint_r>
  8057a4:	103b831e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  8057a8:	dc800e17 	ldw	r18,56(sp)
  8057ac:	d9000517 	ldw	r4,20(sp)
  8057b0:	d8c01904 	addi	r3,sp,100
  8057b4:	003cfc06 	br	804ba8 <___vfprintf_internal_r+0xcd4>
  8057b8:	07002074 	movhi	fp,129
  8057bc:	e7101984 	addi	fp,fp,16486
  8057c0:	003bde06 	br	80473c <___vfprintf_internal_r+0x868>
  8057c4:	00802074 	movhi	r2,129
  8057c8:	10900904 	addi	r2,r2,16420
  8057cc:	d8814115 	stw	r2,1284(sp)
  8057d0:	003def06 	br	804f90 <___vfprintf_internal_r+0x10bc>
  8057d4:	d9014217 	ldw	r4,1288(sp)
  8057d8:	d9414317 	ldw	r5,1292(sp)
  8057dc:	080a76c0 	call	80a76c <__isnand>
  8057e0:	10003926 	beq	r2,zero,8058c8 <___vfprintf_internal_r+0x19f4>
  8057e4:	d9414d17 	ldw	r5,1332(sp)
  8057e8:	008011c4 	movi	r2,71
  8057ec:	1140ce16 	blt	r2,r5,805b28 <___vfprintf_internal_r+0x1c54>
  8057f0:	01802074 	movhi	r6,129
  8057f4:	31900a04 	addi	r6,r6,16424
  8057f8:	d9814115 	stw	r6,1284(sp)
  8057fc:	003de406 	br	804f90 <___vfprintf_internal_r+0x10bc>
  805800:	d9014c17 	ldw	r4,1328(sp)
  805804:	bdc00044 	addi	r23,r23,1
  805808:	b8c00007 	ldb	r3,0(r23)
  80580c:	21000814 	ori	r4,r4,32
  805810:	d9014c15 	stw	r4,1328(sp)
  805814:	003a2e06 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  805818:	dcc14515 	stw	r19,1300(sp)
  80581c:	98011016 	blt	r19,zero,805c60 <___vfprintf_internal_r+0x1d8c>
  805820:	980f883a 	mov	r7,r19
  805824:	d8014615 	stw	zero,1304(sp)
  805828:	003c4c06 	br	80495c <___vfprintf_internal_r+0xa88>
  80582c:	d9014f17 	ldw	r4,1340(sp)
  805830:	b00b883a 	mov	r5,r22
  805834:	d9800c04 	addi	r6,sp,48
  805838:	0803e7c0 	call	803e7c <__sprint_r>
  80583c:	103b5d1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  805840:	dc800e17 	ldw	r18,56(sp)
  805844:	d9000517 	ldw	r4,20(sp)
  805848:	d8c01904 	addi	r3,sp,100
  80584c:	003f2e06 	br	805508 <___vfprintf_internal_r+0x1634>
  805850:	d8c14c17 	ldw	r3,1328(sp)
  805854:	1880100c 	andi	r2,r3,64
  805858:	1000a026 	beq	r2,zero,805adc <___vfprintf_internal_r+0x1c08>
  80585c:	38800017 	ldw	r2,0(r7)
  805860:	39c00104 	addi	r7,r7,4
  805864:	d9c14015 	stw	r7,1280(sp)
  805868:	d9014b17 	ldw	r4,1324(sp)
  80586c:	d9c14017 	ldw	r7,1280(sp)
  805870:	1100000d 	sth	r4,0(r2)
  805874:	0039f306 	br	804044 <___vfprintf_internal_r+0x170>
  805878:	d9014f17 	ldw	r4,1340(sp)
  80587c:	b00b883a 	mov	r5,r22
  805880:	d9800c04 	addi	r6,sp,48
  805884:	0803e7c0 	call	803e7c <__sprint_r>
  805888:	103b4a1e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  80588c:	dc800e17 	ldw	r18,56(sp)
  805890:	dc400d17 	ldw	r17,52(sp)
  805894:	d9000517 	ldw	r4,20(sp)
  805898:	d8c01904 	addi	r3,sp,100
  80589c:	003f2d06 	br	805554 <___vfprintf_internal_r+0x1680>
  8058a0:	00800184 	movi	r2,6
  8058a4:	14c09a36 	bltu	r2,r19,805b10 <___vfprintf_internal_r+0x1c3c>
  8058a8:	dcc14515 	stw	r19,1300(sp)
  8058ac:	9800010e 	bge	r19,zero,8058b4 <___vfprintf_internal_r+0x19e0>
  8058b0:	d8014515 	stw	zero,1300(sp)
  8058b4:	00802074 	movhi	r2,129
  8058b8:	10900c04 	addi	r2,r2,16432
  8058bc:	980f883a 	mov	r7,r19
  8058c0:	d8814115 	stw	r2,1284(sp)
  8058c4:	003a7206 	br	804290 <___vfprintf_internal_r+0x3bc>
  8058c8:	00bfffc4 	movi	r2,-1
  8058cc:	9880e226 	beq	r19,r2,805c58 <___vfprintf_internal_r+0x1d84>
  8058d0:	d9414d17 	ldw	r5,1332(sp)
  8058d4:	008019c4 	movi	r2,103
  8058d8:	2880dc26 	beq	r5,r2,805c4c <___vfprintf_internal_r+0x1d78>
  8058dc:	008011c4 	movi	r2,71
  8058e0:	2880da26 	beq	r5,r2,805c4c <___vfprintf_internal_r+0x1d78>
  8058e4:	d9414c17 	ldw	r5,1328(sp)
  8058e8:	d9014317 	ldw	r4,1292(sp)
  8058ec:	d9814217 	ldw	r6,1288(sp)
  8058f0:	29404014 	ori	r5,r5,256
  8058f4:	d9414c15 	stw	r5,1328(sp)
  8058f8:	2000cc16 	blt	r4,zero,805c2c <___vfprintf_internal_r+0x1d58>
  8058fc:	3021883a 	mov	r16,r6
  805900:	2023883a 	mov	r17,r4
  805904:	0039883a 	mov	fp,zero
  805908:	d9414d17 	ldw	r5,1332(sp)
  80590c:	00801984 	movi	r2,102
  805910:	2880b726 	beq	r5,r2,805bf0 <___vfprintf_internal_r+0x1d1c>
  805914:	00801184 	movi	r2,70
  805918:	2880b526 	beq	r5,r2,805bf0 <___vfprintf_internal_r+0x1d1c>
  80591c:	00801944 	movi	r2,101
  805920:	2880c826 	beq	r5,r2,805c44 <___vfprintf_internal_r+0x1d70>
  805924:	00801144 	movi	r2,69
  805928:	2880c626 	beq	r5,r2,805c44 <___vfprintf_internal_r+0x1d70>
  80592c:	9829883a 	mov	r20,r19
  805930:	d9014f17 	ldw	r4,1340(sp)
  805934:	d8800504 	addi	r2,sp,20
  805938:	880d883a 	mov	r6,r17
  80593c:	d8800115 	stw	r2,4(sp)
  805940:	d8c00604 	addi	r3,sp,24
  805944:	d8800704 	addi	r2,sp,28
  805948:	800b883a 	mov	r5,r16
  80594c:	01c00084 	movi	r7,2
  805950:	d8c00215 	stw	r3,8(sp)
  805954:	d8800315 	stw	r2,12(sp)
  805958:	dd000015 	stw	r20,0(sp)
  80595c:	08062f00 	call	8062f0 <_dtoa_r>
  805960:	d9814d17 	ldw	r6,1332(sp)
  805964:	d8814115 	stw	r2,1284(sp)
  805968:	008019c4 	movi	r2,103
  80596c:	30809526 	beq	r6,r2,805bc4 <___vfprintf_internal_r+0x1cf0>
  805970:	d8c14d17 	ldw	r3,1332(sp)
  805974:	008011c4 	movi	r2,71
  805978:	18809226 	beq	r3,r2,805bc4 <___vfprintf_internal_r+0x1cf0>
  80597c:	d9414117 	ldw	r5,1284(sp)
  805980:	d9814d17 	ldw	r6,1332(sp)
  805984:	00801984 	movi	r2,102
  805988:	2d25883a 	add	r18,r5,r20
  80598c:	30808626 	beq	r6,r2,805ba8 <___vfprintf_internal_r+0x1cd4>
  805990:	00801184 	movi	r2,70
  805994:	30808426 	beq	r6,r2,805ba8 <___vfprintf_internal_r+0x1cd4>
  805998:	000d883a 	mov	r6,zero
  80599c:	000f883a 	mov	r7,zero
  8059a0:	880b883a 	mov	r5,r17
  8059a4:	8009883a 	mov	r4,r16
  8059a8:	080bebc0 	call	80bebc <__eqdf2>
  8059ac:	1000751e 	bne	r2,zero,805b84 <___vfprintf_internal_r+0x1cb0>
  8059b0:	9005883a 	mov	r2,r18
  8059b4:	dc800715 	stw	r18,28(sp)
  8059b8:	d9014117 	ldw	r4,1284(sp)
  8059bc:	d9414d17 	ldw	r5,1332(sp)
  8059c0:	00c019c4 	movi	r3,103
  8059c4:	1125c83a 	sub	r18,r2,r4
  8059c8:	28c06826 	beq	r5,r3,805b6c <___vfprintf_internal_r+0x1c98>
  8059cc:	008011c4 	movi	r2,71
  8059d0:	28806626 	beq	r5,r2,805b6c <___vfprintf_internal_r+0x1c98>
  8059d4:	d9000517 	ldw	r4,20(sp)
  8059d8:	d8c14d17 	ldw	r3,1332(sp)
  8059dc:	00801944 	movi	r2,101
  8059e0:	10c05516 	blt	r2,r3,805b38 <___vfprintf_internal_r+0x1c64>
  8059e4:	213fffc4 	addi	r4,r4,-1
  8059e8:	d9000515 	stw	r4,20(sp)
  8059ec:	d8c00805 	stb	r3,32(sp)
  8059f0:	2021883a 	mov	r16,r4
  8059f4:	2000c116 	blt	r4,zero,805cfc <___vfprintf_internal_r+0x1e28>
  8059f8:	00800ac4 	movi	r2,43
  8059fc:	d8800845 	stb	r2,33(sp)
  805a00:	00800244 	movi	r2,9
  805a04:	1400af0e 	bge	r2,r16,805cc4 <___vfprintf_internal_r+0x1df0>
  805a08:	1027883a 	mov	r19,r2
  805a0c:	dc400b84 	addi	r17,sp,46
  805a10:	8009883a 	mov	r4,r16
  805a14:	01400284 	movi	r5,10
  805a18:	080c2b00 	call	80c2b0 <__modsi3>
  805a1c:	10800c04 	addi	r2,r2,48
  805a20:	8c7fffc4 	addi	r17,r17,-1
  805a24:	8009883a 	mov	r4,r16
  805a28:	01400284 	movi	r5,10
  805a2c:	88800005 	stb	r2,0(r17)
  805a30:	080c2500 	call	80c250 <__divsi3>
  805a34:	1021883a 	mov	r16,r2
  805a38:	98bff516 	blt	r19,r2,805a10 <___vfprintf_internal_r+0x1b3c>
  805a3c:	10c00c04 	addi	r3,r2,48
  805a40:	d88009c4 	addi	r2,sp,39
  805a44:	108001c4 	addi	r2,r2,7
  805a48:	897fffc4 	addi	r5,r17,-1
  805a4c:	88ffffc5 	stb	r3,-1(r17)
  805a50:	2880a72e 	bgeu	r5,r2,805cf0 <___vfprintf_internal_r+0x1e1c>
  805a54:	1009883a 	mov	r4,r2
  805a58:	d9800804 	addi	r6,sp,32
  805a5c:	d8c00884 	addi	r3,sp,34
  805a60:	28800003 	ldbu	r2,0(r5)
  805a64:	29400044 	addi	r5,r5,1
  805a68:	18800005 	stb	r2,0(r3)
  805a6c:	18c00044 	addi	r3,r3,1
  805a70:	293ffb36 	bltu	r5,r4,805a60 <___vfprintf_internal_r+0x1b8c>
  805a74:	1987c83a 	sub	r3,r3,r6
  805a78:	00800044 	movi	r2,1
  805a7c:	d8c14815 	stw	r3,1312(sp)
  805a80:	90cf883a 	add	r7,r18,r3
  805a84:	1480960e 	bge	r2,r18,805ce0 <___vfprintf_internal_r+0x1e0c>
  805a88:	39c00044 	addi	r7,r7,1
  805a8c:	d9c14515 	stw	r7,1300(sp)
  805a90:	38003416 	blt	r7,zero,805b64 <___vfprintf_internal_r+0x1c90>
  805a94:	e0803fcc 	andi	r2,fp,255
  805a98:	1080201c 	xori	r2,r2,128
  805a9c:	10bfe004 	addi	r2,r2,-128
  805aa0:	10004e26 	beq	r2,zero,805bdc <___vfprintf_internal_r+0x1d08>
  805aa4:	00800b44 	movi	r2,45
  805aa8:	dc814715 	stw	r18,1308(sp)
  805aac:	d8014615 	stw	zero,1304(sp)
  805ab0:	d8800405 	stb	r2,16(sp)
  805ab4:	003bab06 	br	804964 <___vfprintf_internal_r+0xa90>
  805ab8:	00800b44 	movi	r2,45
  805abc:	d8800405 	stb	r2,16(sp)
  805ac0:	003d2d06 	br	804f78 <___vfprintf_internal_r+0x10a4>
  805ac4:	d9014f17 	ldw	r4,1340(sp)
  805ac8:	b00b883a 	mov	r5,r22
  805acc:	d9800c04 	addi	r6,sp,48
  805ad0:	0803e7c0 	call	803e7c <__sprint_r>
  805ad4:	103ab71e 	bne	r2,zero,8045b4 <___vfprintf_internal_r+0x6e0>
  805ad8:	003ab506 	br	8045b0 <___vfprintf_internal_r+0x6dc>
  805adc:	38800017 	ldw	r2,0(r7)
  805ae0:	39c00104 	addi	r7,r7,4
  805ae4:	d9c14015 	stw	r7,1280(sp)
  805ae8:	d9414b17 	ldw	r5,1324(sp)
  805aec:	d9c14017 	ldw	r7,1280(sp)
  805af0:	11400015 	stw	r5,0(r2)
  805af4:	00395306 	br	804044 <___vfprintf_internal_r+0x170>
  805af8:	980f883a 	mov	r7,r19
  805afc:	dcc14515 	stw	r19,1300(sp)
  805b00:	d8014615 	stw	zero,1304(sp)
  805b04:	003b9506 	br	80495c <___vfprintf_internal_r+0xa88>
  805b08:	0027883a 	mov	r19,zero
  805b0c:	00397206 	br	8040d8 <___vfprintf_internal_r+0x204>
  805b10:	00c02074 	movhi	r3,129
  805b14:	18d00c04 	addi	r3,r3,16432
  805b18:	100f883a 	mov	r7,r2
  805b1c:	d8814515 	stw	r2,1300(sp)
  805b20:	d8c14115 	stw	r3,1284(sp)
  805b24:	0039da06 	br	804290 <___vfprintf_internal_r+0x3bc>
  805b28:	00802074 	movhi	r2,129
  805b2c:	10900b04 	addi	r2,r2,16428
  805b30:	d8814115 	stw	r2,1284(sp)
  805b34:	003d1606 	br	804f90 <___vfprintf_internal_r+0x10bc>
  805b38:	d9414d17 	ldw	r5,1332(sp)
  805b3c:	00801984 	movi	r2,102
  805b40:	28804926 	beq	r5,r2,805c68 <___vfprintf_internal_r+0x1d94>
  805b44:	200f883a 	mov	r7,r4
  805b48:	24805716 	blt	r4,r18,805ca8 <___vfprintf_internal_r+0x1dd4>
  805b4c:	d9414c17 	ldw	r5,1328(sp)
  805b50:	2880004c 	andi	r2,r5,1
  805b54:	10000126 	beq	r2,zero,805b5c <___vfprintf_internal_r+0x1c88>
  805b58:	21c00044 	addi	r7,r4,1
  805b5c:	d9c14515 	stw	r7,1300(sp)
  805b60:	383fcc0e 	bge	r7,zero,805a94 <___vfprintf_internal_r+0x1bc0>
  805b64:	d8014515 	stw	zero,1300(sp)
  805b68:	003fca06 	br	805a94 <___vfprintf_internal_r+0x1bc0>
  805b6c:	d9000517 	ldw	r4,20(sp)
  805b70:	00bfff04 	movi	r2,-4
  805b74:	1100480e 	bge	r2,r4,805c98 <___vfprintf_internal_r+0x1dc4>
  805b78:	99004716 	blt	r19,r4,805c98 <___vfprintf_internal_r+0x1dc4>
  805b7c:	d8c14d15 	stw	r3,1332(sp)
  805b80:	003ff006 	br	805b44 <___vfprintf_internal_r+0x1c70>
  805b84:	d8800717 	ldw	r2,28(sp)
  805b88:	14bf8b2e 	bgeu	r2,r18,8059b8 <___vfprintf_internal_r+0x1ae4>
  805b8c:	9007883a 	mov	r3,r18
  805b90:	01000c04 	movi	r4,48
  805b94:	11000005 	stb	r4,0(r2)
  805b98:	10800044 	addi	r2,r2,1
  805b9c:	d8800715 	stw	r2,28(sp)
  805ba0:	18bffc1e 	bne	r3,r2,805b94 <___vfprintf_internal_r+0x1cc0>
  805ba4:	003f8406 	br	8059b8 <___vfprintf_internal_r+0x1ae4>
  805ba8:	d8814117 	ldw	r2,1284(sp)
  805bac:	10c00007 	ldb	r3,0(r2)
  805bb0:	00800c04 	movi	r2,48
  805bb4:	18805b26 	beq	r3,r2,805d24 <___vfprintf_internal_r+0x1e50>
  805bb8:	d9000517 	ldw	r4,20(sp)
  805bbc:	9125883a 	add	r18,r18,r4
  805bc0:	003f7506 	br	805998 <___vfprintf_internal_r+0x1ac4>
  805bc4:	d9014c17 	ldw	r4,1328(sp)
  805bc8:	2080004c 	andi	r2,r4,1
  805bcc:	1005003a 	cmpeq	r2,r2,zero
  805bd0:	103f6a26 	beq	r2,zero,80597c <___vfprintf_internal_r+0x1aa8>
  805bd4:	d8800717 	ldw	r2,28(sp)
  805bd8:	003f7706 	br	8059b8 <___vfprintf_internal_r+0x1ae4>
  805bdc:	d9c14515 	stw	r7,1300(sp)
  805be0:	38004d16 	blt	r7,zero,805d18 <___vfprintf_internal_r+0x1e44>
  805be4:	dc814715 	stw	r18,1308(sp)
  805be8:	d8014615 	stw	zero,1304(sp)
  805bec:	003b5b06 	br	80495c <___vfprintf_internal_r+0xa88>
  805bf0:	d9014f17 	ldw	r4,1340(sp)
  805bf4:	d8800504 	addi	r2,sp,20
  805bf8:	d8800115 	stw	r2,4(sp)
  805bfc:	d8c00604 	addi	r3,sp,24
  805c00:	d8800704 	addi	r2,sp,28
  805c04:	800b883a 	mov	r5,r16
  805c08:	880d883a 	mov	r6,r17
  805c0c:	01c000c4 	movi	r7,3
  805c10:	d8c00215 	stw	r3,8(sp)
  805c14:	d8800315 	stw	r2,12(sp)
  805c18:	dcc00015 	stw	r19,0(sp)
  805c1c:	9829883a 	mov	r20,r19
  805c20:	08062f00 	call	8062f0 <_dtoa_r>
  805c24:	d8814115 	stw	r2,1284(sp)
  805c28:	003f5106 	br	805970 <___vfprintf_internal_r+0x1a9c>
  805c2c:	d8c14217 	ldw	r3,1288(sp)
  805c30:	d9014317 	ldw	r4,1292(sp)
  805c34:	07000b44 	movi	fp,45
  805c38:	1821883a 	mov	r16,r3
  805c3c:	2460003c 	xorhi	r17,r4,32768
  805c40:	003f3106 	br	805908 <___vfprintf_internal_r+0x1a34>
  805c44:	9d000044 	addi	r20,r19,1
  805c48:	003f3906 	br	805930 <___vfprintf_internal_r+0x1a5c>
  805c4c:	983f251e 	bne	r19,zero,8058e4 <___vfprintf_internal_r+0x1a10>
  805c50:	04c00044 	movi	r19,1
  805c54:	003f2306 	br	8058e4 <___vfprintf_internal_r+0x1a10>
  805c58:	04c00184 	movi	r19,6
  805c5c:	003f2106 	br	8058e4 <___vfprintf_internal_r+0x1a10>
  805c60:	d8014515 	stw	zero,1300(sp)
  805c64:	003eee06 	br	805820 <___vfprintf_internal_r+0x194c>
  805c68:	200f883a 	mov	r7,r4
  805c6c:	0100370e 	bge	zero,r4,805d4c <___vfprintf_internal_r+0x1e78>
  805c70:	9800031e 	bne	r19,zero,805c80 <___vfprintf_internal_r+0x1dac>
  805c74:	d9814c17 	ldw	r6,1328(sp)
  805c78:	3080004c 	andi	r2,r6,1
  805c7c:	103fb726 	beq	r2,zero,805b5c <___vfprintf_internal_r+0x1c88>
  805c80:	20800044 	addi	r2,r4,1
  805c84:	98a7883a 	add	r19,r19,r2
  805c88:	dcc14515 	stw	r19,1300(sp)
  805c8c:	980f883a 	mov	r7,r19
  805c90:	983f800e 	bge	r19,zero,805a94 <___vfprintf_internal_r+0x1bc0>
  805c94:	003fb306 	br	805b64 <___vfprintf_internal_r+0x1c90>
  805c98:	d9814d17 	ldw	r6,1332(sp)
  805c9c:	31bfff84 	addi	r6,r6,-2
  805ca0:	d9814d15 	stw	r6,1332(sp)
  805ca4:	003f4c06 	br	8059d8 <___vfprintf_internal_r+0x1b04>
  805ca8:	0100180e 	bge	zero,r4,805d0c <___vfprintf_internal_r+0x1e38>
  805cac:	00800044 	movi	r2,1
  805cb0:	1485883a 	add	r2,r2,r18
  805cb4:	d8814515 	stw	r2,1300(sp)
  805cb8:	100f883a 	mov	r7,r2
  805cbc:	103f750e 	bge	r2,zero,805a94 <___vfprintf_internal_r+0x1bc0>
  805cc0:	003fa806 	br	805b64 <___vfprintf_internal_r+0x1c90>
  805cc4:	80c00c04 	addi	r3,r16,48
  805cc8:	00800c04 	movi	r2,48
  805ccc:	d8c008c5 	stb	r3,35(sp)
  805cd0:	d9800804 	addi	r6,sp,32
  805cd4:	d8c00904 	addi	r3,sp,36
  805cd8:	d8800885 	stb	r2,34(sp)
  805cdc:	003f6506 	br	805a74 <___vfprintf_internal_r+0x1ba0>
  805ce0:	d9014c17 	ldw	r4,1328(sp)
  805ce4:	2084703a 	and	r2,r4,r2
  805ce8:	103f9c26 	beq	r2,zero,805b5c <___vfprintf_internal_r+0x1c88>
  805cec:	003f6606 	br	805a88 <___vfprintf_internal_r+0x1bb4>
  805cf0:	d9800804 	addi	r6,sp,32
  805cf4:	d8c00884 	addi	r3,sp,34
  805cf8:	003f5e06 	br	805a74 <___vfprintf_internal_r+0x1ba0>
  805cfc:	00800b44 	movi	r2,45
  805d00:	0121c83a 	sub	r16,zero,r4
  805d04:	d8800845 	stb	r2,33(sp)
  805d08:	003f3d06 	br	805a00 <___vfprintf_internal_r+0x1b2c>
  805d0c:	00800084 	movi	r2,2
  805d10:	1105c83a 	sub	r2,r2,r4
  805d14:	003fe606 	br	805cb0 <___vfprintf_internal_r+0x1ddc>
  805d18:	d8014515 	stw	zero,1300(sp)
  805d1c:	dc814715 	stw	r18,1308(sp)
  805d20:	003fb106 	br	805be8 <___vfprintf_internal_r+0x1d14>
  805d24:	000d883a 	mov	r6,zero
  805d28:	000f883a 	mov	r7,zero
  805d2c:	8009883a 	mov	r4,r16
  805d30:	880b883a 	mov	r5,r17
  805d34:	080bf440 	call	80bf44 <__nedf2>
  805d38:	103f9f26 	beq	r2,zero,805bb8 <___vfprintf_internal_r+0x1ce4>
  805d3c:	00800044 	movi	r2,1
  805d40:	1509c83a 	sub	r4,r2,r20
  805d44:	d9000515 	stw	r4,20(sp)
  805d48:	003f9b06 	br	805bb8 <___vfprintf_internal_r+0x1ce4>
  805d4c:	98000d1e 	bne	r19,zero,805d84 <___vfprintf_internal_r+0x1eb0>
  805d50:	d8c14c17 	ldw	r3,1328(sp)
  805d54:	1880004c 	andi	r2,r3,1
  805d58:	10000a1e 	bne	r2,zero,805d84 <___vfprintf_internal_r+0x1eb0>
  805d5c:	01000044 	movi	r4,1
  805d60:	200f883a 	mov	r7,r4
  805d64:	d9014515 	stw	r4,1300(sp)
  805d68:	003f4a06 	br	805a94 <___vfprintf_internal_r+0x1bc0>
  805d6c:	3cc00017 	ldw	r19,0(r7)
  805d70:	39c00104 	addi	r7,r7,4
  805d74:	983d0e0e 	bge	r19,zero,8051b0 <___vfprintf_internal_r+0x12dc>
  805d78:	b8c00007 	ldb	r3,0(r23)
  805d7c:	04ffffc4 	movi	r19,-1
  805d80:	0038d306 	br	8040d0 <___vfprintf_internal_r+0x1fc>
  805d84:	9cc00084 	addi	r19,r19,2
  805d88:	dcc14515 	stw	r19,1300(sp)
  805d8c:	980f883a 	mov	r7,r19
  805d90:	983f400e 	bge	r19,zero,805a94 <___vfprintf_internal_r+0x1bc0>
  805d94:	003f7306 	br	805b64 <___vfprintf_internal_r+0x1c90>

00805d98 <__vfprintf_internal>:
  805d98:	00802074 	movhi	r2,129
  805d9c:	1097bd04 	addi	r2,r2,24308
  805da0:	2013883a 	mov	r9,r4
  805da4:	11000017 	ldw	r4,0(r2)
  805da8:	2805883a 	mov	r2,r5
  805dac:	300f883a 	mov	r7,r6
  805db0:	480b883a 	mov	r5,r9
  805db4:	100d883a 	mov	r6,r2
  805db8:	0803ed41 	jmpi	803ed4 <___vfprintf_internal_r>

00805dbc <__swsetup_r>:
  805dbc:	00802074 	movhi	r2,129
  805dc0:	1097bd04 	addi	r2,r2,24308
  805dc4:	10c00017 	ldw	r3,0(r2)
  805dc8:	defffd04 	addi	sp,sp,-12
  805dcc:	dc400115 	stw	r17,4(sp)
  805dd0:	dc000015 	stw	r16,0(sp)
  805dd4:	dfc00215 	stw	ra,8(sp)
  805dd8:	2023883a 	mov	r17,r4
  805ddc:	2821883a 	mov	r16,r5
  805de0:	18000226 	beq	r3,zero,805dec <__swsetup_r+0x30>
  805de4:	18800e17 	ldw	r2,56(r3)
  805de8:	10001f26 	beq	r2,zero,805e68 <__swsetup_r+0xac>
  805dec:	8100030b 	ldhu	r4,12(r16)
  805df0:	2080020c 	andi	r2,r4,8
  805df4:	10002826 	beq	r2,zero,805e98 <__swsetup_r+0xdc>
  805df8:	81400417 	ldw	r5,16(r16)
  805dfc:	28001d26 	beq	r5,zero,805e74 <__swsetup_r+0xb8>
  805e00:	2080004c 	andi	r2,r4,1
  805e04:	1005003a 	cmpeq	r2,r2,zero
  805e08:	10000b26 	beq	r2,zero,805e38 <__swsetup_r+0x7c>
  805e0c:	2080008c 	andi	r2,r4,2
  805e10:	10001226 	beq	r2,zero,805e5c <__swsetup_r+0xa0>
  805e14:	0005883a 	mov	r2,zero
  805e18:	80800215 	stw	r2,8(r16)
  805e1c:	28000b26 	beq	r5,zero,805e4c <__swsetup_r+0x90>
  805e20:	0005883a 	mov	r2,zero
  805e24:	dfc00217 	ldw	ra,8(sp)
  805e28:	dc400117 	ldw	r17,4(sp)
  805e2c:	dc000017 	ldw	r16,0(sp)
  805e30:	dec00304 	addi	sp,sp,12
  805e34:	f800283a 	ret
  805e38:	80800517 	ldw	r2,20(r16)
  805e3c:	80000215 	stw	zero,8(r16)
  805e40:	0085c83a 	sub	r2,zero,r2
  805e44:	80800615 	stw	r2,24(r16)
  805e48:	283ff51e 	bne	r5,zero,805e20 <__swsetup_r+0x64>
  805e4c:	2080200c 	andi	r2,r4,128
  805e50:	103ff326 	beq	r2,zero,805e20 <__swsetup_r+0x64>
  805e54:	00bfffc4 	movi	r2,-1
  805e58:	003ff206 	br	805e24 <__swsetup_r+0x68>
  805e5c:	80800517 	ldw	r2,20(r16)
  805e60:	80800215 	stw	r2,8(r16)
  805e64:	003fed06 	br	805e1c <__swsetup_r+0x60>
  805e68:	1809883a 	mov	r4,r3
  805e6c:	0807b3c0 	call	807b3c <__sinit>
  805e70:	003fde06 	br	805dec <__swsetup_r+0x30>
  805e74:	20c0a00c 	andi	r3,r4,640
  805e78:	00808004 	movi	r2,512
  805e7c:	18bfe026 	beq	r3,r2,805e00 <__swsetup_r+0x44>
  805e80:	8809883a 	mov	r4,r17
  805e84:	800b883a 	mov	r5,r16
  805e88:	08088e80 	call	8088e8 <__smakebuf_r>
  805e8c:	8100030b 	ldhu	r4,12(r16)
  805e90:	81400417 	ldw	r5,16(r16)
  805e94:	003fda06 	br	805e00 <__swsetup_r+0x44>
  805e98:	2080040c 	andi	r2,r4,16
  805e9c:	103fed26 	beq	r2,zero,805e54 <__swsetup_r+0x98>
  805ea0:	2080010c 	andi	r2,r4,4
  805ea4:	10001226 	beq	r2,zero,805ef0 <__swsetup_r+0x134>
  805ea8:	81400c17 	ldw	r5,48(r16)
  805eac:	28000526 	beq	r5,zero,805ec4 <__swsetup_r+0x108>
  805eb0:	80801004 	addi	r2,r16,64
  805eb4:	28800226 	beq	r5,r2,805ec0 <__swsetup_r+0x104>
  805eb8:	8809883a 	mov	r4,r17
  805ebc:	0807ef40 	call	807ef4 <_free_r>
  805ec0:	80000c15 	stw	zero,48(r16)
  805ec4:	8080030b 	ldhu	r2,12(r16)
  805ec8:	81400417 	ldw	r5,16(r16)
  805ecc:	80000115 	stw	zero,4(r16)
  805ed0:	10bff6cc 	andi	r2,r2,65499
  805ed4:	8080030d 	sth	r2,12(r16)
  805ed8:	81400015 	stw	r5,0(r16)
  805edc:	8080030b 	ldhu	r2,12(r16)
  805ee0:	10800214 	ori	r2,r2,8
  805ee4:	113fffcc 	andi	r4,r2,65535
  805ee8:	8080030d 	sth	r2,12(r16)
  805eec:	003fc306 	br	805dfc <__swsetup_r+0x40>
  805ef0:	81400417 	ldw	r5,16(r16)
  805ef4:	003ff906 	br	805edc <__swsetup_r+0x120>

00805ef8 <register_fini>:
  805ef8:	f800283a 	ret

00805efc <__call_exitprocs>:
  805efc:	00802074 	movhi	r2,129
  805f00:	1097be04 	addi	r2,r2,24312
  805f04:	10800017 	ldw	r2,0(r2)
  805f08:	defff304 	addi	sp,sp,-52
  805f0c:	df000b15 	stw	fp,44(sp)
  805f10:	d8800115 	stw	r2,4(sp)
  805f14:	00802034 	movhi	r2,128
  805f18:	108cfa04 	addi	r2,r2,13288
  805f1c:	1005003a 	cmpeq	r2,r2,zero
  805f20:	d8800215 	stw	r2,8(sp)
  805f24:	d8800117 	ldw	r2,4(sp)
  805f28:	dd400815 	stw	r21,32(sp)
  805f2c:	dd000715 	stw	r20,28(sp)
  805f30:	10805204 	addi	r2,r2,328
  805f34:	dfc00c15 	stw	ra,48(sp)
  805f38:	ddc00a15 	stw	r23,40(sp)
  805f3c:	dd800915 	stw	r22,36(sp)
  805f40:	dcc00615 	stw	r19,24(sp)
  805f44:	dc800515 	stw	r18,20(sp)
  805f48:	dc400415 	stw	r17,16(sp)
  805f4c:	dc000315 	stw	r16,12(sp)
  805f50:	282b883a 	mov	r21,r5
  805f54:	2039883a 	mov	fp,r4
  805f58:	d8800015 	stw	r2,0(sp)
  805f5c:	2829003a 	cmpeq	r20,r5,zero
  805f60:	d8800117 	ldw	r2,4(sp)
  805f64:	14405217 	ldw	r17,328(r2)
  805f68:	88001026 	beq	r17,zero,805fac <__call_exitprocs+0xb0>
  805f6c:	ddc00017 	ldw	r23,0(sp)
  805f70:	88800117 	ldw	r2,4(r17)
  805f74:	8c802204 	addi	r18,r17,136
  805f78:	143fffc4 	addi	r16,r2,-1
  805f7c:	80000916 	blt	r16,zero,805fa4 <__call_exitprocs+0xa8>
  805f80:	05bfffc4 	movi	r22,-1
  805f84:	a000151e 	bne	r20,zero,805fdc <__call_exitprocs+0xe0>
  805f88:	8409883a 	add	r4,r16,r16
  805f8c:	2105883a 	add	r2,r4,r4
  805f90:	1485883a 	add	r2,r2,r18
  805f94:	10c02017 	ldw	r3,128(r2)
  805f98:	a8c01126 	beq	r21,r3,805fe0 <__call_exitprocs+0xe4>
  805f9c:	843fffc4 	addi	r16,r16,-1
  805fa0:	85bff81e 	bne	r16,r22,805f84 <__call_exitprocs+0x88>
  805fa4:	d8800217 	ldw	r2,8(sp)
  805fa8:	10003126 	beq	r2,zero,806070 <__call_exitprocs+0x174>
  805fac:	dfc00c17 	ldw	ra,48(sp)
  805fb0:	df000b17 	ldw	fp,44(sp)
  805fb4:	ddc00a17 	ldw	r23,40(sp)
  805fb8:	dd800917 	ldw	r22,36(sp)
  805fbc:	dd400817 	ldw	r21,32(sp)
  805fc0:	dd000717 	ldw	r20,28(sp)
  805fc4:	dcc00617 	ldw	r19,24(sp)
  805fc8:	dc800517 	ldw	r18,20(sp)
  805fcc:	dc400417 	ldw	r17,16(sp)
  805fd0:	dc000317 	ldw	r16,12(sp)
  805fd4:	dec00d04 	addi	sp,sp,52
  805fd8:	f800283a 	ret
  805fdc:	8409883a 	add	r4,r16,r16
  805fe0:	88c00117 	ldw	r3,4(r17)
  805fe4:	2105883a 	add	r2,r4,r4
  805fe8:	1445883a 	add	r2,r2,r17
  805fec:	18ffffc4 	addi	r3,r3,-1
  805ff0:	11800217 	ldw	r6,8(r2)
  805ff4:	1c001526 	beq	r3,r16,80604c <__call_exitprocs+0x150>
  805ff8:	10000215 	stw	zero,8(r2)
  805ffc:	303fe726 	beq	r6,zero,805f9c <__call_exitprocs+0xa0>
  806000:	00c00044 	movi	r3,1
  806004:	1c06983a 	sll	r3,r3,r16
  806008:	90804017 	ldw	r2,256(r18)
  80600c:	8cc00117 	ldw	r19,4(r17)
  806010:	1884703a 	and	r2,r3,r2
  806014:	10001426 	beq	r2,zero,806068 <__call_exitprocs+0x16c>
  806018:	90804117 	ldw	r2,260(r18)
  80601c:	1884703a 	and	r2,r3,r2
  806020:	10000c1e 	bne	r2,zero,806054 <__call_exitprocs+0x158>
  806024:	2105883a 	add	r2,r4,r4
  806028:	1485883a 	add	r2,r2,r18
  80602c:	11400017 	ldw	r5,0(r2)
  806030:	e009883a 	mov	r4,fp
  806034:	303ee83a 	callr	r6
  806038:	88800117 	ldw	r2,4(r17)
  80603c:	98bfc81e 	bne	r19,r2,805f60 <__call_exitprocs+0x64>
  806040:	b8800017 	ldw	r2,0(r23)
  806044:	147fd526 	beq	r2,r17,805f9c <__call_exitprocs+0xa0>
  806048:	003fc506 	br	805f60 <__call_exitprocs+0x64>
  80604c:	8c000115 	stw	r16,4(r17)
  806050:	003fea06 	br	805ffc <__call_exitprocs+0x100>
  806054:	2105883a 	add	r2,r4,r4
  806058:	1485883a 	add	r2,r2,r18
  80605c:	11000017 	ldw	r4,0(r2)
  806060:	303ee83a 	callr	r6
  806064:	003ff406 	br	806038 <__call_exitprocs+0x13c>
  806068:	303ee83a 	callr	r6
  80606c:	003ff206 	br	806038 <__call_exitprocs+0x13c>
  806070:	88800117 	ldw	r2,4(r17)
  806074:	1000081e 	bne	r2,zero,806098 <__call_exitprocs+0x19c>
  806078:	89000017 	ldw	r4,0(r17)
  80607c:	20000726 	beq	r4,zero,80609c <__call_exitprocs+0x1a0>
  806080:	b9000015 	stw	r4,0(r23)
  806084:	8809883a 	mov	r4,r17
  806088:	08033e80 	call	8033e8 <free>
  80608c:	bc400017 	ldw	r17,0(r23)
  806090:	883fb71e 	bne	r17,zero,805f70 <__call_exitprocs+0x74>
  806094:	003fc506 	br	805fac <__call_exitprocs+0xb0>
  806098:	89000017 	ldw	r4,0(r17)
  80609c:	882f883a 	mov	r23,r17
  8060a0:	2023883a 	mov	r17,r4
  8060a4:	883fb21e 	bne	r17,zero,805f70 <__call_exitprocs+0x74>
  8060a8:	003fc006 	br	805fac <__call_exitprocs+0xb0>

008060ac <quorem>:
  8060ac:	28c00417 	ldw	r3,16(r5)
  8060b0:	20800417 	ldw	r2,16(r4)
  8060b4:	defff104 	addi	sp,sp,-60
  8060b8:	dfc00e15 	stw	ra,56(sp)
  8060bc:	df000d15 	stw	fp,52(sp)
  8060c0:	ddc00c15 	stw	r23,48(sp)
  8060c4:	dd800b15 	stw	r22,44(sp)
  8060c8:	dd400a15 	stw	r21,40(sp)
  8060cc:	dd000915 	stw	r20,36(sp)
  8060d0:	dcc00815 	stw	r19,32(sp)
  8060d4:	dc800715 	stw	r18,28(sp)
  8060d8:	dc400615 	stw	r17,24(sp)
  8060dc:	dc000515 	stw	r16,20(sp)
  8060e0:	d9000315 	stw	r4,12(sp)
  8060e4:	d9400415 	stw	r5,16(sp)
  8060e8:	10c07f16 	blt	r2,r3,8062e8 <quorem+0x23c>
  8060ec:	1d3fffc4 	addi	r20,r3,-1
  8060f0:	d8c00417 	ldw	r3,16(sp)
  8060f4:	d9000317 	ldw	r4,12(sp)
  8060f8:	a505883a 	add	r2,r20,r20
  8060fc:	1085883a 	add	r2,r2,r2
  806100:	1cc00504 	addi	r19,r3,20
  806104:	25c00504 	addi	r23,r4,20
  806108:	98ad883a 	add	r22,r19,r2
  80610c:	15c7883a 	add	r3,r2,r23
  806110:	b1400017 	ldw	r5,0(r22)
  806114:	19000017 	ldw	r4,0(r3)
  806118:	d8c00015 	stw	r3,0(sp)
  80611c:	29400044 	addi	r5,r5,1
  806120:	d9000215 	stw	r4,8(sp)
  806124:	080c3100 	call	80c310 <__udivsi3>
  806128:	1039883a 	mov	fp,r2
  80612c:	10003d1e 	bne	r2,zero,806224 <quorem+0x178>
  806130:	d9400417 	ldw	r5,16(sp)
  806134:	d9000317 	ldw	r4,12(sp)
  806138:	0808e3c0 	call	808e3c <__mcmp>
  80613c:	10002c16 	blt	r2,zero,8061f0 <quorem+0x144>
  806140:	e7000044 	addi	fp,fp,1
  806144:	b80f883a 	mov	r7,r23
  806148:	0011883a 	mov	r8,zero
  80614c:	0009883a 	mov	r4,zero
  806150:	99400017 	ldw	r5,0(r19)
  806154:	38c00017 	ldw	r3,0(r7)
  806158:	9cc00104 	addi	r19,r19,4
  80615c:	28bfffcc 	andi	r2,r5,65535
  806160:	2085883a 	add	r2,r4,r2
  806164:	11bfffcc 	andi	r6,r2,65535
  806168:	193fffcc 	andi	r4,r3,65535
  80616c:	1004d43a 	srli	r2,r2,16
  806170:	280ad43a 	srli	r5,r5,16
  806174:	2189c83a 	sub	r4,r4,r6
  806178:	2209883a 	add	r4,r4,r8
  80617c:	1806d43a 	srli	r3,r3,16
  806180:	288b883a 	add	r5,r5,r2
  806184:	200dd43a 	srai	r6,r4,16
  806188:	28bfffcc 	andi	r2,r5,65535
  80618c:	1887c83a 	sub	r3,r3,r2
  806190:	1987883a 	add	r3,r3,r6
  806194:	3900000d 	sth	r4,0(r7)
  806198:	38c0008d 	sth	r3,2(r7)
  80619c:	2808d43a 	srli	r4,r5,16
  8061a0:	39c00104 	addi	r7,r7,4
  8061a4:	1811d43a 	srai	r8,r3,16
  8061a8:	b4ffe92e 	bgeu	r22,r19,806150 <quorem+0xa4>
  8061ac:	a505883a 	add	r2,r20,r20
  8061b0:	1085883a 	add	r2,r2,r2
  8061b4:	b885883a 	add	r2,r23,r2
  8061b8:	10c00017 	ldw	r3,0(r2)
  8061bc:	18000c1e 	bne	r3,zero,8061f0 <quorem+0x144>
  8061c0:	113fff04 	addi	r4,r2,-4
  8061c4:	b900082e 	bgeu	r23,r4,8061e8 <quorem+0x13c>
  8061c8:	10bfff17 	ldw	r2,-4(r2)
  8061cc:	10000326 	beq	r2,zero,8061dc <quorem+0x130>
  8061d0:	00000506 	br	8061e8 <quorem+0x13c>
  8061d4:	20800017 	ldw	r2,0(r4)
  8061d8:	1000031e 	bne	r2,zero,8061e8 <quorem+0x13c>
  8061dc:	213fff04 	addi	r4,r4,-4
  8061e0:	a53fffc4 	addi	r20,r20,-1
  8061e4:	b93ffb36 	bltu	r23,r4,8061d4 <quorem+0x128>
  8061e8:	d9000317 	ldw	r4,12(sp)
  8061ec:	25000415 	stw	r20,16(r4)
  8061f0:	e005883a 	mov	r2,fp
  8061f4:	dfc00e17 	ldw	ra,56(sp)
  8061f8:	df000d17 	ldw	fp,52(sp)
  8061fc:	ddc00c17 	ldw	r23,48(sp)
  806200:	dd800b17 	ldw	r22,44(sp)
  806204:	dd400a17 	ldw	r21,40(sp)
  806208:	dd000917 	ldw	r20,36(sp)
  80620c:	dcc00817 	ldw	r19,32(sp)
  806210:	dc800717 	ldw	r18,28(sp)
  806214:	dc400617 	ldw	r17,24(sp)
  806218:	dc000517 	ldw	r16,20(sp)
  80621c:	dec00f04 	addi	sp,sp,60
  806220:	f800283a 	ret
  806224:	b823883a 	mov	r17,r23
  806228:	9825883a 	mov	r18,r19
  80622c:	d8000115 	stw	zero,4(sp)
  806230:	002b883a 	mov	r21,zero
  806234:	94000017 	ldw	r16,0(r18)
  806238:	e009883a 	mov	r4,fp
  80623c:	94800104 	addi	r18,r18,4
  806240:	817fffcc 	andi	r5,r16,65535
  806244:	0802b980 	call	802b98 <__mulsi3>
  806248:	800ad43a 	srli	r5,r16,16
  80624c:	e009883a 	mov	r4,fp
  806250:	a8a1883a 	add	r16,r21,r2
  806254:	0802b980 	call	802b98 <__mulsi3>
  806258:	89000017 	ldw	r4,0(r17)
  80625c:	80ffffcc 	andi	r3,r16,65535
  806260:	8020d43a 	srli	r16,r16,16
  806264:	217fffcc 	andi	r5,r4,65535
  806268:	28cbc83a 	sub	r5,r5,r3
  80626c:	d8c00117 	ldw	r3,4(sp)
  806270:	2008d43a 	srli	r4,r4,16
  806274:	1405883a 	add	r2,r2,r16
  806278:	28cb883a 	add	r5,r5,r3
  80627c:	280dd43a 	srai	r6,r5,16
  806280:	10ffffcc 	andi	r3,r2,65535
  806284:	20c9c83a 	sub	r4,r4,r3
  806288:	2189883a 	add	r4,r4,r6
  80628c:	8900008d 	sth	r4,2(r17)
  806290:	2009d43a 	srai	r4,r4,16
  806294:	8940000d 	sth	r5,0(r17)
  806298:	102ad43a 	srli	r21,r2,16
  80629c:	8c400104 	addi	r17,r17,4
  8062a0:	d9000115 	stw	r4,4(sp)
  8062a4:	b4bfe32e 	bgeu	r22,r18,806234 <quorem+0x188>
  8062a8:	d9000217 	ldw	r4,8(sp)
  8062ac:	203fa01e 	bne	r4,zero,806130 <quorem+0x84>
  8062b0:	d8800017 	ldw	r2,0(sp)
  8062b4:	10ffff04 	addi	r3,r2,-4
  8062b8:	b8c0082e 	bgeu	r23,r3,8062dc <quorem+0x230>
  8062bc:	10bfff17 	ldw	r2,-4(r2)
  8062c0:	10000326 	beq	r2,zero,8062d0 <quorem+0x224>
  8062c4:	00000506 	br	8062dc <quorem+0x230>
  8062c8:	18800017 	ldw	r2,0(r3)
  8062cc:	1000031e 	bne	r2,zero,8062dc <quorem+0x230>
  8062d0:	18ffff04 	addi	r3,r3,-4
  8062d4:	a53fffc4 	addi	r20,r20,-1
  8062d8:	b8fffb36 	bltu	r23,r3,8062c8 <quorem+0x21c>
  8062dc:	d8c00317 	ldw	r3,12(sp)
  8062e0:	1d000415 	stw	r20,16(r3)
  8062e4:	003f9206 	br	806130 <quorem+0x84>
  8062e8:	0005883a 	mov	r2,zero
  8062ec:	003fc106 	br	8061f4 <quorem+0x148>

008062f0 <_dtoa_r>:
  8062f0:	22001017 	ldw	r8,64(r4)
  8062f4:	deffda04 	addi	sp,sp,-152
  8062f8:	dd402115 	stw	r21,132(sp)
  8062fc:	dd002015 	stw	r20,128(sp)
  806300:	dc801e15 	stw	r18,120(sp)
  806304:	dc401d15 	stw	r17,116(sp)
  806308:	dfc02515 	stw	ra,148(sp)
  80630c:	df002415 	stw	fp,144(sp)
  806310:	ddc02315 	stw	r23,140(sp)
  806314:	dd802215 	stw	r22,136(sp)
  806318:	dcc01f15 	stw	r19,124(sp)
  80631c:	dc001c15 	stw	r16,112(sp)
  806320:	d9001615 	stw	r4,88(sp)
  806324:	3023883a 	mov	r17,r6
  806328:	2829883a 	mov	r20,r5
  80632c:	d9c01715 	stw	r7,92(sp)
  806330:	dc802817 	ldw	r18,160(sp)
  806334:	302b883a 	mov	r21,r6
  806338:	40000a26 	beq	r8,zero,806364 <_dtoa_r+0x74>
  80633c:	20801117 	ldw	r2,68(r4)
  806340:	400b883a 	mov	r5,r8
  806344:	40800115 	stw	r2,4(r8)
  806348:	20c01117 	ldw	r3,68(r4)
  80634c:	00800044 	movi	r2,1
  806350:	10c4983a 	sll	r2,r2,r3
  806354:	40800215 	stw	r2,8(r8)
  806358:	0808ce00 	call	808ce0 <_Bfree>
  80635c:	d8c01617 	ldw	r3,88(sp)
  806360:	18001015 	stw	zero,64(r3)
  806364:	8800a316 	blt	r17,zero,8065f4 <_dtoa_r+0x304>
  806368:	90000015 	stw	zero,0(r18)
  80636c:	a8dffc2c 	andhi	r3,r21,32752
  806370:	009ffc34 	movhi	r2,32752
  806374:	18809126 	beq	r3,r2,8065bc <_dtoa_r+0x2cc>
  806378:	000d883a 	mov	r6,zero
  80637c:	000f883a 	mov	r7,zero
  806380:	a009883a 	mov	r4,r20
  806384:	a80b883a 	mov	r5,r21
  806388:	dd001215 	stw	r20,72(sp)
  80638c:	dd401315 	stw	r21,76(sp)
  806390:	080bf440 	call	80bf44 <__nedf2>
  806394:	1000171e 	bne	r2,zero,8063f4 <_dtoa_r+0x104>
  806398:	d9802717 	ldw	r6,156(sp)
  80639c:	00800044 	movi	r2,1
  8063a0:	30800015 	stw	r2,0(r6)
  8063a4:	d8802917 	ldw	r2,164(sp)
  8063a8:	10029b26 	beq	r2,zero,806e18 <_dtoa_r+0xb28>
  8063ac:	d9002917 	ldw	r4,164(sp)
  8063b0:	00802074 	movhi	r2,129
  8063b4:	108eef44 	addi	r2,r2,15293
  8063b8:	10ffffc4 	addi	r3,r2,-1
  8063bc:	20800015 	stw	r2,0(r4)
  8063c0:	1805883a 	mov	r2,r3
  8063c4:	dfc02517 	ldw	ra,148(sp)
  8063c8:	df002417 	ldw	fp,144(sp)
  8063cc:	ddc02317 	ldw	r23,140(sp)
  8063d0:	dd802217 	ldw	r22,136(sp)
  8063d4:	dd402117 	ldw	r21,132(sp)
  8063d8:	dd002017 	ldw	r20,128(sp)
  8063dc:	dcc01f17 	ldw	r19,124(sp)
  8063e0:	dc801e17 	ldw	r18,120(sp)
  8063e4:	dc401d17 	ldw	r17,116(sp)
  8063e8:	dc001c17 	ldw	r16,112(sp)
  8063ec:	dec02604 	addi	sp,sp,152
  8063f0:	f800283a 	ret
  8063f4:	d9001617 	ldw	r4,88(sp)
  8063f8:	d9401217 	ldw	r5,72(sp)
  8063fc:	d8800104 	addi	r2,sp,4
  806400:	a80d883a 	mov	r6,r21
  806404:	d9c00204 	addi	r7,sp,8
  806408:	d8800015 	stw	r2,0(sp)
  80640c:	080931c0 	call	80931c <__d2b>
  806410:	d8800715 	stw	r2,28(sp)
  806414:	a804d53a 	srli	r2,r21,20
  806418:	1101ffcc 	andi	r4,r2,2047
  80641c:	20008626 	beq	r4,zero,806638 <_dtoa_r+0x348>
  806420:	d8c01217 	ldw	r3,72(sp)
  806424:	00800434 	movhi	r2,16
  806428:	10bfffc4 	addi	r2,r2,-1
  80642c:	ddc00117 	ldw	r23,4(sp)
  806430:	a884703a 	and	r2,r21,r2
  806434:	1811883a 	mov	r8,r3
  806438:	124ffc34 	orhi	r9,r2,16368
  80643c:	25bf0044 	addi	r22,r4,-1023
  806440:	d8000815 	stw	zero,32(sp)
  806444:	0005883a 	mov	r2,zero
  806448:	00cffe34 	movhi	r3,16376
  80644c:	480b883a 	mov	r5,r9
  806450:	4009883a 	mov	r4,r8
  806454:	180f883a 	mov	r7,r3
  806458:	100d883a 	mov	r6,r2
  80645c:	08023ec0 	call	8023ec <__subdf3>
  806460:	0218dbf4 	movhi	r8,25455
  806464:	4210d844 	addi	r8,r8,17249
  806468:	024ff4f4 	movhi	r9,16339
  80646c:	4a61e9c4 	addi	r9,r9,-30809
  806470:	480f883a 	mov	r7,r9
  806474:	400d883a 	mov	r6,r8
  806478:	180b883a 	mov	r5,r3
  80647c:	1009883a 	mov	r4,r2
  806480:	08024e00 	call	8024e0 <__muldf3>
  806484:	0222d874 	movhi	r8,35681
  806488:	42322cc4 	addi	r8,r8,-14157
  80648c:	024ff1f4 	movhi	r9,16327
  806490:	4a628a04 	addi	r9,r9,-30168
  806494:	480f883a 	mov	r7,r9
  806498:	400d883a 	mov	r6,r8
  80649c:	180b883a 	mov	r5,r3
  8064a0:	1009883a 	mov	r4,r2
  8064a4:	080246c0 	call	80246c <__adddf3>
  8064a8:	b009883a 	mov	r4,r22
  8064ac:	1021883a 	mov	r16,r2
  8064b0:	1823883a 	mov	r17,r3
  8064b4:	080c0dc0 	call	80c0dc <__floatsidf>
  8064b8:	021427f4 	movhi	r8,20639
  8064bc:	421e7ec4 	addi	r8,r8,31227
  8064c0:	024ff4f4 	movhi	r9,16339
  8064c4:	4a5104c4 	addi	r9,r9,17427
  8064c8:	480f883a 	mov	r7,r9
  8064cc:	400d883a 	mov	r6,r8
  8064d0:	180b883a 	mov	r5,r3
  8064d4:	1009883a 	mov	r4,r2
  8064d8:	08024e00 	call	8024e0 <__muldf3>
  8064dc:	180f883a 	mov	r7,r3
  8064e0:	880b883a 	mov	r5,r17
  8064e4:	100d883a 	mov	r6,r2
  8064e8:	8009883a 	mov	r4,r16
  8064ec:	080246c0 	call	80246c <__adddf3>
  8064f0:	1009883a 	mov	r4,r2
  8064f4:	180b883a 	mov	r5,r3
  8064f8:	1021883a 	mov	r16,r2
  8064fc:	1823883a 	mov	r17,r3
  806500:	080292c0 	call	80292c <__fixdfsi>
  806504:	000d883a 	mov	r6,zero
  806508:	000f883a 	mov	r7,zero
  80650c:	8009883a 	mov	r4,r16
  806510:	880b883a 	mov	r5,r17
  806514:	d8800d15 	stw	r2,52(sp)
  806518:	080c0540 	call	80c054 <__ltdf2>
  80651c:	10031716 	blt	r2,zero,80717c <_dtoa_r+0xe8c>
  806520:	d8c00d17 	ldw	r3,52(sp)
  806524:	00800584 	movi	r2,22
  806528:	10c1482e 	bgeu	r2,r3,806a4c <_dtoa_r+0x75c>
  80652c:	01000044 	movi	r4,1
  806530:	d9000c15 	stw	r4,48(sp)
  806534:	bd85c83a 	sub	r2,r23,r22
  806538:	11bfffc4 	addi	r6,r2,-1
  80653c:	30030b16 	blt	r6,zero,80716c <_dtoa_r+0xe7c>
  806540:	d9800a15 	stw	r6,40(sp)
  806544:	d8001115 	stw	zero,68(sp)
  806548:	d8c00d17 	ldw	r3,52(sp)
  80654c:	1802ff16 	blt	r3,zero,80714c <_dtoa_r+0xe5c>
  806550:	d9000a17 	ldw	r4,40(sp)
  806554:	d8c00915 	stw	r3,36(sp)
  806558:	d8001015 	stw	zero,64(sp)
  80655c:	20c9883a 	add	r4,r4,r3
  806560:	d9000a15 	stw	r4,40(sp)
  806564:	d9001717 	ldw	r4,92(sp)
  806568:	00800244 	movi	r2,9
  80656c:	11004636 	bltu	r2,r4,806688 <_dtoa_r+0x398>
  806570:	00800144 	movi	r2,5
  806574:	11020416 	blt	r2,r4,806d88 <_dtoa_r+0xa98>
  806578:	04400044 	movi	r17,1
  80657c:	d8c01717 	ldw	r3,92(sp)
  806580:	00800144 	movi	r2,5
  806584:	10c1ed36 	bltu	r2,r3,806d3c <_dtoa_r+0xa4c>
  806588:	18c5883a 	add	r2,r3,r3
  80658c:	1085883a 	add	r2,r2,r2
  806590:	00c02034 	movhi	r3,128
  806594:	18d96904 	addi	r3,r3,26020
  806598:	10c5883a 	add	r2,r2,r3
  80659c:	11000017 	ldw	r4,0(r2)
  8065a0:	2000683a 	jmp	r4
  8065a4:	00806690 	cmplti	r2,zero,410
  8065a8:	00806690 	cmplti	r2,zero,410
  8065ac:	00807090 	cmplti	r2,zero,450
  8065b0:	00807068 	cmpgeui	r2,zero,449
  8065b4:	008070ac 	andhi	r2,zero,450
  8065b8:	008070b8 	rdprs	r2,zero,450
  8065bc:	d9002717 	ldw	r4,156(sp)
  8065c0:	0089c3c4 	movi	r2,9999
  8065c4:	20800015 	stw	r2,0(r4)
  8065c8:	a0001026 	beq	r20,zero,80660c <_dtoa_r+0x31c>
  8065cc:	00c02074 	movhi	r3,129
  8065d0:	18d02504 	addi	r3,r3,16532
  8065d4:	d9802917 	ldw	r6,164(sp)
  8065d8:	303f7926 	beq	r6,zero,8063c0 <_dtoa_r+0xd0>
  8065dc:	188000c7 	ldb	r2,3(r3)
  8065e0:	190000c4 	addi	r4,r3,3
  8065e4:	1000101e 	bne	r2,zero,806628 <_dtoa_r+0x338>
  8065e8:	d8802917 	ldw	r2,164(sp)
  8065ec:	11000015 	stw	r4,0(r2)
  8065f0:	003f7306 	br	8063c0 <_dtoa_r+0xd0>
  8065f4:	00a00034 	movhi	r2,32768
  8065f8:	10bfffc4 	addi	r2,r2,-1
  8065fc:	00c00044 	movi	r3,1
  806600:	88aa703a 	and	r21,r17,r2
  806604:	90c00015 	stw	r3,0(r18)
  806608:	003f5806 	br	80636c <_dtoa_r+0x7c>
  80660c:	00800434 	movhi	r2,16
  806610:	10bfffc4 	addi	r2,r2,-1
  806614:	a884703a 	and	r2,r21,r2
  806618:	103fec1e 	bne	r2,zero,8065cc <_dtoa_r+0x2dc>
  80661c:	00c02074 	movhi	r3,129
  806620:	18d02204 	addi	r3,r3,16520
  806624:	003feb06 	br	8065d4 <_dtoa_r+0x2e4>
  806628:	d8802917 	ldw	r2,164(sp)
  80662c:	19000204 	addi	r4,r3,8
  806630:	11000015 	stw	r4,0(r2)
  806634:	003f6206 	br	8063c0 <_dtoa_r+0xd0>
  806638:	ddc00117 	ldw	r23,4(sp)
  80663c:	d8800217 	ldw	r2,8(sp)
  806640:	01000804 	movi	r4,32
  806644:	b8c10c84 	addi	r3,r23,1074
  806648:	18a3883a 	add	r17,r3,r2
  80664c:	2441b80e 	bge	r4,r17,806d30 <_dtoa_r+0xa40>
  806650:	00c01004 	movi	r3,64
  806654:	1c47c83a 	sub	r3,r3,r17
  806658:	88bff804 	addi	r2,r17,-32
  80665c:	a8c6983a 	sll	r3,r21,r3
  806660:	a084d83a 	srl	r2,r20,r2
  806664:	1888b03a 	or	r4,r3,r2
  806668:	0802a040 	call	802a04 <__floatunsidf>
  80666c:	1011883a 	mov	r8,r2
  806670:	00bf8434 	movhi	r2,65040
  806674:	01000044 	movi	r4,1
  806678:	10d3883a 	add	r9,r2,r3
  80667c:	8dbef344 	addi	r22,r17,-1075
  806680:	d9000815 	stw	r4,32(sp)
  806684:	003f6f06 	br	806444 <_dtoa_r+0x154>
  806688:	d8001715 	stw	zero,92(sp)
  80668c:	04400044 	movi	r17,1
  806690:	00bfffc4 	movi	r2,-1
  806694:	00c00044 	movi	r3,1
  806698:	d8800e15 	stw	r2,56(sp)
  80669c:	d8002615 	stw	zero,152(sp)
  8066a0:	d8800f15 	stw	r2,60(sp)
  8066a4:	d8c00b15 	stw	r3,44(sp)
  8066a8:	1021883a 	mov	r16,r2
  8066ac:	d8801617 	ldw	r2,88(sp)
  8066b0:	10001115 	stw	zero,68(r2)
  8066b4:	d8801617 	ldw	r2,88(sp)
  8066b8:	11401117 	ldw	r5,68(r2)
  8066bc:	1009883a 	mov	r4,r2
  8066c0:	08092600 	call	809260 <_Balloc>
  8066c4:	d8c01617 	ldw	r3,88(sp)
  8066c8:	d8800515 	stw	r2,20(sp)
  8066cc:	18801015 	stw	r2,64(r3)
  8066d0:	00800384 	movi	r2,14
  8066d4:	14006836 	bltu	r2,r16,806878 <_dtoa_r+0x588>
  8066d8:	8805003a 	cmpeq	r2,r17,zero
  8066dc:	1000661e 	bne	r2,zero,806878 <_dtoa_r+0x588>
  8066e0:	d9000d17 	ldw	r4,52(sp)
  8066e4:	0102300e 	bge	zero,r4,806fa8 <_dtoa_r+0xcb8>
  8066e8:	208003cc 	andi	r2,r4,15
  8066ec:	100490fa 	slli	r2,r2,3
  8066f0:	2025d13a 	srai	r18,r4,4
  8066f4:	00c02074 	movhi	r3,129
  8066f8:	18d03604 	addi	r3,r3,16600
  8066fc:	10c5883a 	add	r2,r2,r3
  806700:	90c0040c 	andi	r3,r18,16
  806704:	14000017 	ldw	r16,0(r2)
  806708:	14400117 	ldw	r17,4(r2)
  80670c:	18036a1e 	bne	r3,zero,8074b8 <_dtoa_r+0x11c8>
  806710:	05800084 	movi	r22,2
  806714:	90001026 	beq	r18,zero,806758 <_dtoa_r+0x468>
  806718:	04c02074 	movhi	r19,129
  80671c:	9cd06804 	addi	r19,r19,16800
  806720:	9080004c 	andi	r2,r18,1
  806724:	1005003a 	cmpeq	r2,r2,zero
  806728:	1000081e 	bne	r2,zero,80674c <_dtoa_r+0x45c>
  80672c:	99800017 	ldw	r6,0(r19)
  806730:	99c00117 	ldw	r7,4(r19)
  806734:	880b883a 	mov	r5,r17
  806738:	8009883a 	mov	r4,r16
  80673c:	08024e00 	call	8024e0 <__muldf3>
  806740:	1021883a 	mov	r16,r2
  806744:	b5800044 	addi	r22,r22,1
  806748:	1823883a 	mov	r17,r3
  80674c:	9025d07a 	srai	r18,r18,1
  806750:	9cc00204 	addi	r19,r19,8
  806754:	903ff21e 	bne	r18,zero,806720 <_dtoa_r+0x430>
  806758:	a80b883a 	mov	r5,r21
  80675c:	a009883a 	mov	r4,r20
  806760:	880f883a 	mov	r7,r17
  806764:	800d883a 	mov	r6,r16
  806768:	080bc640 	call	80bc64 <__divdf3>
  80676c:	1029883a 	mov	r20,r2
  806770:	182b883a 	mov	r21,r3
  806774:	d8c00c17 	ldw	r3,48(sp)
  806778:	1805003a 	cmpeq	r2,r3,zero
  80677c:	1000081e 	bne	r2,zero,8067a0 <_dtoa_r+0x4b0>
  806780:	0005883a 	mov	r2,zero
  806784:	00cffc34 	movhi	r3,16368
  806788:	180f883a 	mov	r7,r3
  80678c:	a009883a 	mov	r4,r20
  806790:	a80b883a 	mov	r5,r21
  806794:	100d883a 	mov	r6,r2
  806798:	080c0540 	call	80c054 <__ltdf2>
  80679c:	1003fe16 	blt	r2,zero,807798 <_dtoa_r+0x14a8>
  8067a0:	b009883a 	mov	r4,r22
  8067a4:	080c0dc0 	call	80c0dc <__floatsidf>
  8067a8:	180b883a 	mov	r5,r3
  8067ac:	1009883a 	mov	r4,r2
  8067b0:	a00d883a 	mov	r6,r20
  8067b4:	a80f883a 	mov	r7,r21
  8067b8:	08024e00 	call	8024e0 <__muldf3>
  8067bc:	0011883a 	mov	r8,zero
  8067c0:	02500734 	movhi	r9,16412
  8067c4:	1009883a 	mov	r4,r2
  8067c8:	180b883a 	mov	r5,r3
  8067cc:	480f883a 	mov	r7,r9
  8067d0:	400d883a 	mov	r6,r8
  8067d4:	080246c0 	call	80246c <__adddf3>
  8067d8:	d9000f17 	ldw	r4,60(sp)
  8067dc:	102d883a 	mov	r22,r2
  8067e0:	00bf3034 	movhi	r2,64704
  8067e4:	18b9883a 	add	fp,r3,r2
  8067e8:	e02f883a 	mov	r23,fp
  8067ec:	20028f1e 	bne	r4,zero,80722c <_dtoa_r+0xf3c>
  8067f0:	0005883a 	mov	r2,zero
  8067f4:	00d00534 	movhi	r3,16404
  8067f8:	a009883a 	mov	r4,r20
  8067fc:	a80b883a 	mov	r5,r21
  806800:	180f883a 	mov	r7,r3
  806804:	100d883a 	mov	r6,r2
  806808:	08023ec0 	call	8023ec <__subdf3>
  80680c:	1009883a 	mov	r4,r2
  806810:	e00f883a 	mov	r7,fp
  806814:	180b883a 	mov	r5,r3
  806818:	b00d883a 	mov	r6,r22
  80681c:	1025883a 	mov	r18,r2
  806820:	1827883a 	mov	r19,r3
  806824:	08028a40 	call	8028a4 <__gtdf2>
  806828:	00834f16 	blt	zero,r2,807568 <_dtoa_r+0x1278>
  80682c:	e0e0003c 	xorhi	r3,fp,32768
  806830:	9009883a 	mov	r4,r18
  806834:	980b883a 	mov	r5,r19
  806838:	180f883a 	mov	r7,r3
  80683c:	b00d883a 	mov	r6,r22
  806840:	080c0540 	call	80c054 <__ltdf2>
  806844:	1000080e 	bge	r2,zero,806868 <_dtoa_r+0x578>
  806848:	0027883a 	mov	r19,zero
  80684c:	0025883a 	mov	r18,zero
  806850:	d8802617 	ldw	r2,152(sp)
  806854:	df000517 	ldw	fp,20(sp)
  806858:	d8000615 	stw	zero,24(sp)
  80685c:	0084303a 	nor	r2,zero,r2
  806860:	d8800d15 	stw	r2,52(sp)
  806864:	00019b06 	br	806ed4 <_dtoa_r+0xbe4>
  806868:	d9801217 	ldw	r6,72(sp)
  80686c:	d8801317 	ldw	r2,76(sp)
  806870:	3029883a 	mov	r20,r6
  806874:	102b883a 	mov	r21,r2
  806878:	d8c00217 	ldw	r3,8(sp)
  80687c:	18008516 	blt	r3,zero,806a94 <_dtoa_r+0x7a4>
  806880:	d9000d17 	ldw	r4,52(sp)
  806884:	00800384 	movi	r2,14
  806888:	11008216 	blt	r2,r4,806a94 <_dtoa_r+0x7a4>
  80688c:	200490fa 	slli	r2,r4,3
  806890:	d9802617 	ldw	r6,152(sp)
  806894:	00c02074 	movhi	r3,129
  806898:	18d03604 	addi	r3,r3,16600
  80689c:	10c5883a 	add	r2,r2,r3
  8068a0:	14800017 	ldw	r18,0(r2)
  8068a4:	14c00117 	ldw	r19,4(r2)
  8068a8:	30031e16 	blt	r6,zero,807524 <_dtoa_r+0x1234>
  8068ac:	d9000517 	ldw	r4,20(sp)
  8068b0:	d8c00f17 	ldw	r3,60(sp)
  8068b4:	a823883a 	mov	r17,r21
  8068b8:	a021883a 	mov	r16,r20
  8068bc:	192b883a 	add	r21,r3,r4
  8068c0:	2039883a 	mov	fp,r4
  8068c4:	00000f06 	br	806904 <_dtoa_r+0x614>
  8068c8:	0005883a 	mov	r2,zero
  8068cc:	00d00934 	movhi	r3,16420
  8068d0:	5009883a 	mov	r4,r10
  8068d4:	580b883a 	mov	r5,r11
  8068d8:	180f883a 	mov	r7,r3
  8068dc:	100d883a 	mov	r6,r2
  8068e0:	08024e00 	call	8024e0 <__muldf3>
  8068e4:	180b883a 	mov	r5,r3
  8068e8:	000d883a 	mov	r6,zero
  8068ec:	000f883a 	mov	r7,zero
  8068f0:	1009883a 	mov	r4,r2
  8068f4:	1021883a 	mov	r16,r2
  8068f8:	1823883a 	mov	r17,r3
  8068fc:	080bf440 	call	80bf44 <__nedf2>
  806900:	10004526 	beq	r2,zero,806a18 <_dtoa_r+0x728>
  806904:	900d883a 	mov	r6,r18
  806908:	980f883a 	mov	r7,r19
  80690c:	8009883a 	mov	r4,r16
  806910:	880b883a 	mov	r5,r17
  806914:	080bc640 	call	80bc64 <__divdf3>
  806918:	180b883a 	mov	r5,r3
  80691c:	1009883a 	mov	r4,r2
  806920:	080292c0 	call	80292c <__fixdfsi>
  806924:	1009883a 	mov	r4,r2
  806928:	1029883a 	mov	r20,r2
  80692c:	080c0dc0 	call	80c0dc <__floatsidf>
  806930:	180f883a 	mov	r7,r3
  806934:	9009883a 	mov	r4,r18
  806938:	980b883a 	mov	r5,r19
  80693c:	100d883a 	mov	r6,r2
  806940:	08024e00 	call	8024e0 <__muldf3>
  806944:	180f883a 	mov	r7,r3
  806948:	880b883a 	mov	r5,r17
  80694c:	8009883a 	mov	r4,r16
  806950:	100d883a 	mov	r6,r2
  806954:	08023ec0 	call	8023ec <__subdf3>
  806958:	1015883a 	mov	r10,r2
  80695c:	a0800c04 	addi	r2,r20,48
  806960:	e0800005 	stb	r2,0(fp)
  806964:	e7000044 	addi	fp,fp,1
  806968:	1817883a 	mov	r11,r3
  80696c:	e57fd61e 	bne	fp,r21,8068c8 <_dtoa_r+0x5d8>
  806970:	500d883a 	mov	r6,r10
  806974:	180f883a 	mov	r7,r3
  806978:	5009883a 	mov	r4,r10
  80697c:	180b883a 	mov	r5,r3
  806980:	080246c0 	call	80246c <__adddf3>
  806984:	100d883a 	mov	r6,r2
  806988:	9009883a 	mov	r4,r18
  80698c:	980b883a 	mov	r5,r19
  806990:	180f883a 	mov	r7,r3
  806994:	1021883a 	mov	r16,r2
  806998:	1823883a 	mov	r17,r3
  80699c:	080c0540 	call	80c054 <__ltdf2>
  8069a0:	10000816 	blt	r2,zero,8069c4 <_dtoa_r+0x6d4>
  8069a4:	980b883a 	mov	r5,r19
  8069a8:	800d883a 	mov	r6,r16
  8069ac:	880f883a 	mov	r7,r17
  8069b0:	9009883a 	mov	r4,r18
  8069b4:	080bebc0 	call	80bebc <__eqdf2>
  8069b8:	1000171e 	bne	r2,zero,806a18 <_dtoa_r+0x728>
  8069bc:	a080004c 	andi	r2,r20,1
  8069c0:	10001526 	beq	r2,zero,806a18 <_dtoa_r+0x728>
  8069c4:	d8800d17 	ldw	r2,52(sp)
  8069c8:	d8800415 	stw	r2,16(sp)
  8069cc:	e009883a 	mov	r4,fp
  8069d0:	213fffc4 	addi	r4,r4,-1
  8069d4:	20c00007 	ldb	r3,0(r4)
  8069d8:	00800e44 	movi	r2,57
  8069dc:	1880081e 	bne	r3,r2,806a00 <_dtoa_r+0x710>
  8069e0:	d8800517 	ldw	r2,20(sp)
  8069e4:	113ffa1e 	bne	r2,r4,8069d0 <_dtoa_r+0x6e0>
  8069e8:	d8c00417 	ldw	r3,16(sp)
  8069ec:	d9800517 	ldw	r6,20(sp)
  8069f0:	00800c04 	movi	r2,48
  8069f4:	18c00044 	addi	r3,r3,1
  8069f8:	d8c00415 	stw	r3,16(sp)
  8069fc:	30800005 	stb	r2,0(r6)
  806a00:	20800003 	ldbu	r2,0(r4)
  806a04:	d8c00417 	ldw	r3,16(sp)
  806a08:	27000044 	addi	fp,r4,1
  806a0c:	10800044 	addi	r2,r2,1
  806a10:	d8c00d15 	stw	r3,52(sp)
  806a14:	20800005 	stb	r2,0(r4)
  806a18:	d9001617 	ldw	r4,88(sp)
  806a1c:	d9400717 	ldw	r5,28(sp)
  806a20:	0808ce00 	call	808ce0 <_Bfree>
  806a24:	e0000005 	stb	zero,0(fp)
  806a28:	d9800d17 	ldw	r6,52(sp)
  806a2c:	d8c02717 	ldw	r3,156(sp)
  806a30:	d9002917 	ldw	r4,164(sp)
  806a34:	30800044 	addi	r2,r6,1
  806a38:	18800015 	stw	r2,0(r3)
  806a3c:	20029c26 	beq	r4,zero,8074b0 <_dtoa_r+0x11c0>
  806a40:	d8c00517 	ldw	r3,20(sp)
  806a44:	27000015 	stw	fp,0(r4)
  806a48:	003e5d06 	br	8063c0 <_dtoa_r+0xd0>
  806a4c:	d9800d17 	ldw	r6,52(sp)
  806a50:	00c02074 	movhi	r3,129
  806a54:	18d03604 	addi	r3,r3,16600
  806a58:	d9001217 	ldw	r4,72(sp)
  806a5c:	300490fa 	slli	r2,r6,3
  806a60:	d9401317 	ldw	r5,76(sp)
  806a64:	10c5883a 	add	r2,r2,r3
  806a68:	12000017 	ldw	r8,0(r2)
  806a6c:	12400117 	ldw	r9,4(r2)
  806a70:	400d883a 	mov	r6,r8
  806a74:	480f883a 	mov	r7,r9
  806a78:	080c0540 	call	80c054 <__ltdf2>
  806a7c:	1000030e 	bge	r2,zero,806a8c <_dtoa_r+0x79c>
  806a80:	d8800d17 	ldw	r2,52(sp)
  806a84:	10bfffc4 	addi	r2,r2,-1
  806a88:	d8800d15 	stw	r2,52(sp)
  806a8c:	d8000c15 	stw	zero,48(sp)
  806a90:	003ea806 	br	806534 <_dtoa_r+0x244>
  806a94:	d9000b17 	ldw	r4,44(sp)
  806a98:	202cc03a 	cmpne	r22,r4,zero
  806a9c:	b000c71e 	bne	r22,zero,806dbc <_dtoa_r+0xacc>
  806aa0:	dc001117 	ldw	r16,68(sp)
  806aa4:	dc801017 	ldw	r18,64(sp)
  806aa8:	0027883a 	mov	r19,zero
  806aac:	04000b0e 	bge	zero,r16,806adc <_dtoa_r+0x7ec>
  806ab0:	d8c00a17 	ldw	r3,40(sp)
  806ab4:	00c0090e 	bge	zero,r3,806adc <_dtoa_r+0x7ec>
  806ab8:	8005883a 	mov	r2,r16
  806abc:	1c011316 	blt	r3,r16,806f0c <_dtoa_r+0xc1c>
  806ac0:	d9000a17 	ldw	r4,40(sp)
  806ac4:	d9801117 	ldw	r6,68(sp)
  806ac8:	80a1c83a 	sub	r16,r16,r2
  806acc:	2089c83a 	sub	r4,r4,r2
  806ad0:	308dc83a 	sub	r6,r6,r2
  806ad4:	d9000a15 	stw	r4,40(sp)
  806ad8:	d9801115 	stw	r6,68(sp)
  806adc:	d8801017 	ldw	r2,64(sp)
  806ae0:	0080150e 	bge	zero,r2,806b38 <_dtoa_r+0x848>
  806ae4:	d8c00b17 	ldw	r3,44(sp)
  806ae8:	1805003a 	cmpeq	r2,r3,zero
  806aec:	1001c91e 	bne	r2,zero,807214 <_dtoa_r+0xf24>
  806af0:	04800e0e 	bge	zero,r18,806b2c <_dtoa_r+0x83c>
  806af4:	d9001617 	ldw	r4,88(sp)
  806af8:	980b883a 	mov	r5,r19
  806afc:	900d883a 	mov	r6,r18
  806b00:	0809b2c0 	call	809b2c <__pow5mult>
  806b04:	d9001617 	ldw	r4,88(sp)
  806b08:	d9800717 	ldw	r6,28(sp)
  806b0c:	100b883a 	mov	r5,r2
  806b10:	1027883a 	mov	r19,r2
  806b14:	08097700 	call	809770 <__multiply>
  806b18:	d9001617 	ldw	r4,88(sp)
  806b1c:	d9400717 	ldw	r5,28(sp)
  806b20:	1023883a 	mov	r17,r2
  806b24:	0808ce00 	call	808ce0 <_Bfree>
  806b28:	dc400715 	stw	r17,28(sp)
  806b2c:	d9001017 	ldw	r4,64(sp)
  806b30:	248dc83a 	sub	r6,r4,r18
  806b34:	30010e1e 	bne	r6,zero,806f70 <_dtoa_r+0xc80>
  806b38:	d9001617 	ldw	r4,88(sp)
  806b3c:	04400044 	movi	r17,1
  806b40:	880b883a 	mov	r5,r17
  806b44:	08099c40 	call	8099c4 <__i2b>
  806b48:	d9800917 	ldw	r6,36(sp)
  806b4c:	1025883a 	mov	r18,r2
  806b50:	0180040e 	bge	zero,r6,806b64 <_dtoa_r+0x874>
  806b54:	d9001617 	ldw	r4,88(sp)
  806b58:	100b883a 	mov	r5,r2
  806b5c:	0809b2c0 	call	809b2c <__pow5mult>
  806b60:	1025883a 	mov	r18,r2
  806b64:	d8801717 	ldw	r2,92(sp)
  806b68:	8880f30e 	bge	r17,r2,806f38 <_dtoa_r+0xc48>
  806b6c:	0023883a 	mov	r17,zero
  806b70:	d9800917 	ldw	r6,36(sp)
  806b74:	30019e1e 	bne	r6,zero,8071f0 <_dtoa_r+0xf00>
  806b78:	00c00044 	movi	r3,1
  806b7c:	d9000a17 	ldw	r4,40(sp)
  806b80:	20c5883a 	add	r2,r4,r3
  806b84:	10c007cc 	andi	r3,r2,31
  806b88:	1800841e 	bne	r3,zero,806d9c <_dtoa_r+0xaac>
  806b8c:	00800704 	movi	r2,28
  806b90:	d9000a17 	ldw	r4,40(sp)
  806b94:	d9801117 	ldw	r6,68(sp)
  806b98:	80a1883a 	add	r16,r16,r2
  806b9c:	2089883a 	add	r4,r4,r2
  806ba0:	308d883a 	add	r6,r6,r2
  806ba4:	d9000a15 	stw	r4,40(sp)
  806ba8:	d9801115 	stw	r6,68(sp)
  806bac:	d8801117 	ldw	r2,68(sp)
  806bb0:	0080050e 	bge	zero,r2,806bc8 <_dtoa_r+0x8d8>
  806bb4:	d9400717 	ldw	r5,28(sp)
  806bb8:	d9001617 	ldw	r4,88(sp)
  806bbc:	100d883a 	mov	r6,r2
  806bc0:	08096240 	call	809624 <__lshift>
  806bc4:	d8800715 	stw	r2,28(sp)
  806bc8:	d8c00a17 	ldw	r3,40(sp)
  806bcc:	00c0050e 	bge	zero,r3,806be4 <_dtoa_r+0x8f4>
  806bd0:	d9001617 	ldw	r4,88(sp)
  806bd4:	900b883a 	mov	r5,r18
  806bd8:	180d883a 	mov	r6,r3
  806bdc:	08096240 	call	809624 <__lshift>
  806be0:	1025883a 	mov	r18,r2
  806be4:	d9000c17 	ldw	r4,48(sp)
  806be8:	2005003a 	cmpeq	r2,r4,zero
  806bec:	10016f26 	beq	r2,zero,8071ac <_dtoa_r+0xebc>
  806bf0:	d9000f17 	ldw	r4,60(sp)
  806bf4:	0102170e 	bge	zero,r4,807454 <_dtoa_r+0x1164>
  806bf8:	d9800b17 	ldw	r6,44(sp)
  806bfc:	3005003a 	cmpeq	r2,r6,zero
  806c00:	1000881e 	bne	r2,zero,806e24 <_dtoa_r+0xb34>
  806c04:	0400050e 	bge	zero,r16,806c1c <_dtoa_r+0x92c>
  806c08:	d9001617 	ldw	r4,88(sp)
  806c0c:	980b883a 	mov	r5,r19
  806c10:	800d883a 	mov	r6,r16
  806c14:	08096240 	call	809624 <__lshift>
  806c18:	1027883a 	mov	r19,r2
  806c1c:	8804c03a 	cmpne	r2,r17,zero
  806c20:	1002541e 	bne	r2,zero,807574 <_dtoa_r+0x1284>
  806c24:	980b883a 	mov	r5,r19
  806c28:	dd800517 	ldw	r22,20(sp)
  806c2c:	dcc00615 	stw	r19,24(sp)
  806c30:	a700004c 	andi	fp,r20,1
  806c34:	2827883a 	mov	r19,r5
  806c38:	d9000717 	ldw	r4,28(sp)
  806c3c:	900b883a 	mov	r5,r18
  806c40:	08060ac0 	call	8060ac <quorem>
  806c44:	d9000717 	ldw	r4,28(sp)
  806c48:	d9400617 	ldw	r5,24(sp)
  806c4c:	1023883a 	mov	r17,r2
  806c50:	8dc00c04 	addi	r23,r17,48
  806c54:	0808e3c0 	call	808e3c <__mcmp>
  806c58:	d9001617 	ldw	r4,88(sp)
  806c5c:	900b883a 	mov	r5,r18
  806c60:	980d883a 	mov	r6,r19
  806c64:	1029883a 	mov	r20,r2
  806c68:	08094980 	call	809498 <__mdiff>
  806c6c:	102b883a 	mov	r21,r2
  806c70:	10800317 	ldw	r2,12(r2)
  806c74:	1001281e 	bne	r2,zero,807118 <_dtoa_r+0xe28>
  806c78:	d9000717 	ldw	r4,28(sp)
  806c7c:	a80b883a 	mov	r5,r21
  806c80:	0808e3c0 	call	808e3c <__mcmp>
  806c84:	d9001617 	ldw	r4,88(sp)
  806c88:	1021883a 	mov	r16,r2
  806c8c:	a80b883a 	mov	r5,r21
  806c90:	0808ce00 	call	808ce0 <_Bfree>
  806c94:	8000041e 	bne	r16,zero,806ca8 <_dtoa_r+0x9b8>
  806c98:	d8801717 	ldw	r2,92(sp)
  806c9c:	1000021e 	bne	r2,zero,806ca8 <_dtoa_r+0x9b8>
  806ca0:	e004c03a 	cmpne	r2,fp,zero
  806ca4:	10011726 	beq	r2,zero,807104 <_dtoa_r+0xe14>
  806ca8:	a0010616 	blt	r20,zero,8070c4 <_dtoa_r+0xdd4>
  806cac:	a000041e 	bne	r20,zero,806cc0 <_dtoa_r+0x9d0>
  806cb0:	d8c01717 	ldw	r3,92(sp)
  806cb4:	1800021e 	bne	r3,zero,806cc0 <_dtoa_r+0x9d0>
  806cb8:	e004c03a 	cmpne	r2,fp,zero
  806cbc:	10010126 	beq	r2,zero,8070c4 <_dtoa_r+0xdd4>
  806cc0:	04023d16 	blt	zero,r16,8075b8 <_dtoa_r+0x12c8>
  806cc4:	b5c00005 	stb	r23,0(r22)
  806cc8:	d9800517 	ldw	r6,20(sp)
  806ccc:	d9000f17 	ldw	r4,60(sp)
  806cd0:	b5800044 	addi	r22,r22,1
  806cd4:	3105883a 	add	r2,r6,r4
  806cd8:	b0806526 	beq	r22,r2,806e70 <_dtoa_r+0xb80>
  806cdc:	d9400717 	ldw	r5,28(sp)
  806ce0:	d9001617 	ldw	r4,88(sp)
  806ce4:	01800284 	movi	r6,10
  806ce8:	000f883a 	mov	r7,zero
  806cec:	0809a000 	call	809a00 <__multadd>
  806cf0:	d8800715 	stw	r2,28(sp)
  806cf4:	d8800617 	ldw	r2,24(sp)
  806cf8:	14c10c26 	beq	r2,r19,80712c <_dtoa_r+0xe3c>
  806cfc:	d9400617 	ldw	r5,24(sp)
  806d00:	d9001617 	ldw	r4,88(sp)
  806d04:	01800284 	movi	r6,10
  806d08:	000f883a 	mov	r7,zero
  806d0c:	0809a000 	call	809a00 <__multadd>
  806d10:	d9001617 	ldw	r4,88(sp)
  806d14:	980b883a 	mov	r5,r19
  806d18:	01800284 	movi	r6,10
  806d1c:	000f883a 	mov	r7,zero
  806d20:	d8800615 	stw	r2,24(sp)
  806d24:	0809a000 	call	809a00 <__multadd>
  806d28:	1027883a 	mov	r19,r2
  806d2c:	003fc206 	br	806c38 <_dtoa_r+0x948>
  806d30:	2445c83a 	sub	r2,r4,r17
  806d34:	a088983a 	sll	r4,r20,r2
  806d38:	003e4b06 	br	806668 <_dtoa_r+0x378>
  806d3c:	01bfffc4 	movi	r6,-1
  806d40:	00800044 	movi	r2,1
  806d44:	d9800e15 	stw	r6,56(sp)
  806d48:	d9800f15 	stw	r6,60(sp)
  806d4c:	d8800b15 	stw	r2,44(sp)
  806d50:	d8c01617 	ldw	r3,88(sp)
  806d54:	008005c4 	movi	r2,23
  806d58:	18001115 	stw	zero,68(r3)
  806d5c:	1580082e 	bgeu	r2,r22,806d80 <_dtoa_r+0xa90>
  806d60:	00c00104 	movi	r3,4
  806d64:	0009883a 	mov	r4,zero
  806d68:	18c7883a 	add	r3,r3,r3
  806d6c:	18800504 	addi	r2,r3,20
  806d70:	21000044 	addi	r4,r4,1
  806d74:	b0bffc2e 	bgeu	r22,r2,806d68 <_dtoa_r+0xa78>
  806d78:	d9801617 	ldw	r6,88(sp)
  806d7c:	31001115 	stw	r4,68(r6)
  806d80:	dc000f17 	ldw	r16,60(sp)
  806d84:	003e4b06 	br	8066b4 <_dtoa_r+0x3c4>
  806d88:	d9801717 	ldw	r6,92(sp)
  806d8c:	0023883a 	mov	r17,zero
  806d90:	31bfff04 	addi	r6,r6,-4
  806d94:	d9801715 	stw	r6,92(sp)
  806d98:	003df806 	br	80657c <_dtoa_r+0x28c>
  806d9c:	00800804 	movi	r2,32
  806da0:	10c9c83a 	sub	r4,r2,r3
  806da4:	00c00104 	movi	r3,4
  806da8:	19005a16 	blt	r3,r4,806f14 <_dtoa_r+0xc24>
  806dac:	008000c4 	movi	r2,3
  806db0:	113f7e16 	blt	r2,r4,806bac <_dtoa_r+0x8bc>
  806db4:	20800704 	addi	r2,r4,28
  806db8:	003f7506 	br	806b90 <_dtoa_r+0x8a0>
  806dbc:	d9801717 	ldw	r6,92(sp)
  806dc0:	00800044 	movi	r2,1
  806dc4:	1180a10e 	bge	r2,r6,80704c <_dtoa_r+0xd5c>
  806dc8:	d9800f17 	ldw	r6,60(sp)
  806dcc:	d8c01017 	ldw	r3,64(sp)
  806dd0:	30bfffc4 	addi	r2,r6,-1
  806dd4:	1881c616 	blt	r3,r2,8074f0 <_dtoa_r+0x1200>
  806dd8:	18a5c83a 	sub	r18,r3,r2
  806ddc:	d8800f17 	ldw	r2,60(sp)
  806de0:	10026216 	blt	r2,zero,80776c <_dtoa_r+0x147c>
  806de4:	dc001117 	ldw	r16,68(sp)
  806de8:	1007883a 	mov	r3,r2
  806dec:	d9800a17 	ldw	r6,40(sp)
  806df0:	d8801117 	ldw	r2,68(sp)
  806df4:	d9001617 	ldw	r4,88(sp)
  806df8:	30cd883a 	add	r6,r6,r3
  806dfc:	10c5883a 	add	r2,r2,r3
  806e00:	01400044 	movi	r5,1
  806e04:	d9800a15 	stw	r6,40(sp)
  806e08:	d8801115 	stw	r2,68(sp)
  806e0c:	08099c40 	call	8099c4 <__i2b>
  806e10:	1027883a 	mov	r19,r2
  806e14:	003f2506 	br	806aac <_dtoa_r+0x7bc>
  806e18:	00c02074 	movhi	r3,129
  806e1c:	18ceef04 	addi	r3,r3,15292
  806e20:	003d6706 	br	8063c0 <_dtoa_r+0xd0>
  806e24:	dd800517 	ldw	r22,20(sp)
  806e28:	04000044 	movi	r16,1
  806e2c:	00000706 	br	806e4c <_dtoa_r+0xb5c>
  806e30:	d9400717 	ldw	r5,28(sp)
  806e34:	d9001617 	ldw	r4,88(sp)
  806e38:	01800284 	movi	r6,10
  806e3c:	000f883a 	mov	r7,zero
  806e40:	0809a000 	call	809a00 <__multadd>
  806e44:	d8800715 	stw	r2,28(sp)
  806e48:	84000044 	addi	r16,r16,1
  806e4c:	d9000717 	ldw	r4,28(sp)
  806e50:	900b883a 	mov	r5,r18
  806e54:	08060ac0 	call	8060ac <quorem>
  806e58:	15c00c04 	addi	r23,r2,48
  806e5c:	b5c00005 	stb	r23,0(r22)
  806e60:	d8c00f17 	ldw	r3,60(sp)
  806e64:	b5800044 	addi	r22,r22,1
  806e68:	80fff116 	blt	r16,r3,806e30 <_dtoa_r+0xb40>
  806e6c:	d8000615 	stw	zero,24(sp)
  806e70:	d9400717 	ldw	r5,28(sp)
  806e74:	d9001617 	ldw	r4,88(sp)
  806e78:	01800044 	movi	r6,1
  806e7c:	08096240 	call	809624 <__lshift>
  806e80:	1009883a 	mov	r4,r2
  806e84:	900b883a 	mov	r5,r18
  806e88:	d8800715 	stw	r2,28(sp)
  806e8c:	0808e3c0 	call	808e3c <__mcmp>
  806e90:	00803c0e 	bge	zero,r2,806f84 <_dtoa_r+0xc94>
  806e94:	b009883a 	mov	r4,r22
  806e98:	213fffc4 	addi	r4,r4,-1
  806e9c:	21400003 	ldbu	r5,0(r4)
  806ea0:	00800e44 	movi	r2,57
  806ea4:	28c03fcc 	andi	r3,r5,255
  806ea8:	18c0201c 	xori	r3,r3,128
  806eac:	18ffe004 	addi	r3,r3,-128
  806eb0:	1881981e 	bne	r3,r2,807514 <_dtoa_r+0x1224>
  806eb4:	d9800517 	ldw	r6,20(sp)
  806eb8:	21bff71e 	bne	r4,r6,806e98 <_dtoa_r+0xba8>
  806ebc:	d8800d17 	ldw	r2,52(sp)
  806ec0:	37000044 	addi	fp,r6,1
  806ec4:	10800044 	addi	r2,r2,1
  806ec8:	d8800d15 	stw	r2,52(sp)
  806ecc:	00800c44 	movi	r2,49
  806ed0:	30800005 	stb	r2,0(r6)
  806ed4:	d9001617 	ldw	r4,88(sp)
  806ed8:	900b883a 	mov	r5,r18
  806edc:	0808ce00 	call	808ce0 <_Bfree>
  806ee0:	983ecd26 	beq	r19,zero,806a18 <_dtoa_r+0x728>
  806ee4:	d8c00617 	ldw	r3,24(sp)
  806ee8:	18000426 	beq	r3,zero,806efc <_dtoa_r+0xc0c>
  806eec:	1cc00326 	beq	r3,r19,806efc <_dtoa_r+0xc0c>
  806ef0:	d9001617 	ldw	r4,88(sp)
  806ef4:	180b883a 	mov	r5,r3
  806ef8:	0808ce00 	call	808ce0 <_Bfree>
  806efc:	d9001617 	ldw	r4,88(sp)
  806f00:	980b883a 	mov	r5,r19
  806f04:	0808ce00 	call	808ce0 <_Bfree>
  806f08:	003ec306 	br	806a18 <_dtoa_r+0x728>
  806f0c:	1805883a 	mov	r2,r3
  806f10:	003eeb06 	br	806ac0 <_dtoa_r+0x7d0>
  806f14:	d9800a17 	ldw	r6,40(sp)
  806f18:	d8c01117 	ldw	r3,68(sp)
  806f1c:	20bfff04 	addi	r2,r4,-4
  806f20:	308d883a 	add	r6,r6,r2
  806f24:	1887883a 	add	r3,r3,r2
  806f28:	80a1883a 	add	r16,r16,r2
  806f2c:	d9800a15 	stw	r6,40(sp)
  806f30:	d8c01115 	stw	r3,68(sp)
  806f34:	003f1d06 	br	806bac <_dtoa_r+0x8bc>
  806f38:	a03f0c1e 	bne	r20,zero,806b6c <_dtoa_r+0x87c>
  806f3c:	00800434 	movhi	r2,16
  806f40:	10bfffc4 	addi	r2,r2,-1
  806f44:	a884703a 	and	r2,r21,r2
  806f48:	103f081e 	bne	r2,zero,806b6c <_dtoa_r+0x87c>
  806f4c:	a89ffc2c 	andhi	r2,r21,32752
  806f50:	103f0626 	beq	r2,zero,806b6c <_dtoa_r+0x87c>
  806f54:	d8c01117 	ldw	r3,68(sp)
  806f58:	d9000a17 	ldw	r4,40(sp)
  806f5c:	18c00044 	addi	r3,r3,1
  806f60:	21000044 	addi	r4,r4,1
  806f64:	d8c01115 	stw	r3,68(sp)
  806f68:	d9000a15 	stw	r4,40(sp)
  806f6c:	003f0006 	br	806b70 <_dtoa_r+0x880>
  806f70:	d9400717 	ldw	r5,28(sp)
  806f74:	d9001617 	ldw	r4,88(sp)
  806f78:	0809b2c0 	call	809b2c <__pow5mult>
  806f7c:	d8800715 	stw	r2,28(sp)
  806f80:	003eed06 	br	806b38 <_dtoa_r+0x848>
  806f84:	1000021e 	bne	r2,zero,806f90 <_dtoa_r+0xca0>
  806f88:	b880004c 	andi	r2,r23,1
  806f8c:	103fc11e 	bne	r2,zero,806e94 <_dtoa_r+0xba4>
  806f90:	b5bfffc4 	addi	r22,r22,-1
  806f94:	b0c00007 	ldb	r3,0(r22)
  806f98:	00800c04 	movi	r2,48
  806f9c:	18bffc26 	beq	r3,r2,806f90 <_dtoa_r+0xca0>
  806fa0:	b7000044 	addi	fp,r22,1
  806fa4:	003fcb06 	br	806ed4 <_dtoa_r+0xbe4>
  806fa8:	d9800d17 	ldw	r6,52(sp)
  806fac:	018fc83a 	sub	r7,zero,r6
  806fb0:	3801f726 	beq	r7,zero,807790 <_dtoa_r+0x14a0>
  806fb4:	398003cc 	andi	r6,r7,15
  806fb8:	300c90fa 	slli	r6,r6,3
  806fbc:	01402074 	movhi	r5,129
  806fc0:	29503604 	addi	r5,r5,16600
  806fc4:	d9001217 	ldw	r4,72(sp)
  806fc8:	314d883a 	add	r6,r6,r5
  806fcc:	30c00117 	ldw	r3,4(r6)
  806fd0:	30800017 	ldw	r2,0(r6)
  806fd4:	d9401317 	ldw	r5,76(sp)
  806fd8:	3821d13a 	srai	r16,r7,4
  806fdc:	100d883a 	mov	r6,r2
  806fe0:	180f883a 	mov	r7,r3
  806fe4:	08024e00 	call	8024e0 <__muldf3>
  806fe8:	1011883a 	mov	r8,r2
  806fec:	1813883a 	mov	r9,r3
  806ff0:	1029883a 	mov	r20,r2
  806ff4:	182b883a 	mov	r21,r3
  806ff8:	8001e526 	beq	r16,zero,807790 <_dtoa_r+0x14a0>
  806ffc:	05800084 	movi	r22,2
  807000:	04402074 	movhi	r17,129
  807004:	8c506804 	addi	r17,r17,16800
  807008:	8080004c 	andi	r2,r16,1
  80700c:	1005003a 	cmpeq	r2,r2,zero
  807010:	1000081e 	bne	r2,zero,807034 <_dtoa_r+0xd44>
  807014:	89800017 	ldw	r6,0(r17)
  807018:	89c00117 	ldw	r7,4(r17)
  80701c:	480b883a 	mov	r5,r9
  807020:	4009883a 	mov	r4,r8
  807024:	08024e00 	call	8024e0 <__muldf3>
  807028:	1011883a 	mov	r8,r2
  80702c:	b5800044 	addi	r22,r22,1
  807030:	1813883a 	mov	r9,r3
  807034:	8021d07a 	srai	r16,r16,1
  807038:	8c400204 	addi	r17,r17,8
  80703c:	803ff21e 	bne	r16,zero,807008 <_dtoa_r+0xd18>
  807040:	4029883a 	mov	r20,r8
  807044:	482b883a 	mov	r21,r9
  807048:	003dca06 	br	806774 <_dtoa_r+0x484>
  80704c:	d9000817 	ldw	r4,32(sp)
  807050:	2005003a 	cmpeq	r2,r4,zero
  807054:	1001f61e 	bne	r2,zero,807830 <_dtoa_r+0x1540>
  807058:	dc001117 	ldw	r16,68(sp)
  80705c:	dc801017 	ldw	r18,64(sp)
  807060:	18c10cc4 	addi	r3,r3,1075
  807064:	003f6106 	br	806dec <_dtoa_r+0xafc>
  807068:	d8000b15 	stw	zero,44(sp)
  80706c:	d9802617 	ldw	r6,152(sp)
  807070:	d8c00d17 	ldw	r3,52(sp)
  807074:	30800044 	addi	r2,r6,1
  807078:	18ad883a 	add	r22,r3,r2
  80707c:	b13fffc4 	addi	r4,r22,-1
  807080:	d9000e15 	stw	r4,56(sp)
  807084:	0581f60e 	bge	zero,r22,807860 <_dtoa_r+0x1570>
  807088:	dd800f15 	stw	r22,60(sp)
  80708c:	003f3006 	br	806d50 <_dtoa_r+0xa60>
  807090:	d8000b15 	stw	zero,44(sp)
  807094:	d9002617 	ldw	r4,152(sp)
  807098:	0101eb0e 	bge	zero,r4,807848 <_dtoa_r+0x1558>
  80709c:	202d883a 	mov	r22,r4
  8070a0:	d9000e15 	stw	r4,56(sp)
  8070a4:	d9000f15 	stw	r4,60(sp)
  8070a8:	003f2906 	br	806d50 <_dtoa_r+0xa60>
  8070ac:	01800044 	movi	r6,1
  8070b0:	d9800b15 	stw	r6,44(sp)
  8070b4:	003ff706 	br	807094 <_dtoa_r+0xda4>
  8070b8:	01000044 	movi	r4,1
  8070bc:	d9000b15 	stw	r4,44(sp)
  8070c0:	003fea06 	br	80706c <_dtoa_r+0xd7c>
  8070c4:	04000c0e 	bge	zero,r16,8070f8 <_dtoa_r+0xe08>
  8070c8:	d9400717 	ldw	r5,28(sp)
  8070cc:	d9001617 	ldw	r4,88(sp)
  8070d0:	01800044 	movi	r6,1
  8070d4:	08096240 	call	809624 <__lshift>
  8070d8:	1009883a 	mov	r4,r2
  8070dc:	900b883a 	mov	r5,r18
  8070e0:	d8800715 	stw	r2,28(sp)
  8070e4:	0808e3c0 	call	808e3c <__mcmp>
  8070e8:	0081e00e 	bge	zero,r2,80786c <_dtoa_r+0x157c>
  8070ec:	bdc00044 	addi	r23,r23,1
  8070f0:	00800e84 	movi	r2,58
  8070f4:	b881a226 	beq	r23,r2,807780 <_dtoa_r+0x1490>
  8070f8:	b7000044 	addi	fp,r22,1
  8070fc:	b5c00005 	stb	r23,0(r22)
  807100:	003f7406 	br	806ed4 <_dtoa_r+0xbe4>
  807104:	00800e44 	movi	r2,57
  807108:	b8819d26 	beq	r23,r2,807780 <_dtoa_r+0x1490>
  80710c:	053ffa0e 	bge	zero,r20,8070f8 <_dtoa_r+0xe08>
  807110:	8dc00c44 	addi	r23,r17,49
  807114:	003ff806 	br	8070f8 <_dtoa_r+0xe08>
  807118:	d9001617 	ldw	r4,88(sp)
  80711c:	a80b883a 	mov	r5,r21
  807120:	04000044 	movi	r16,1
  807124:	0808ce00 	call	808ce0 <_Bfree>
  807128:	003edf06 	br	806ca8 <_dtoa_r+0x9b8>
  80712c:	d9001617 	ldw	r4,88(sp)
  807130:	980b883a 	mov	r5,r19
  807134:	01800284 	movi	r6,10
  807138:	000f883a 	mov	r7,zero
  80713c:	0809a000 	call	809a00 <__multadd>
  807140:	1027883a 	mov	r19,r2
  807144:	d8800615 	stw	r2,24(sp)
  807148:	003ebb06 	br	806c38 <_dtoa_r+0x948>
  80714c:	d9801117 	ldw	r6,68(sp)
  807150:	d8800d17 	ldw	r2,52(sp)
  807154:	d8000915 	stw	zero,36(sp)
  807158:	308dc83a 	sub	r6,r6,r2
  80715c:	0087c83a 	sub	r3,zero,r2
  807160:	d9801115 	stw	r6,68(sp)
  807164:	d8c01015 	stw	r3,64(sp)
  807168:	003cfe06 	br	806564 <_dtoa_r+0x274>
  80716c:	018dc83a 	sub	r6,zero,r6
  807170:	d9801115 	stw	r6,68(sp)
  807174:	d8000a15 	stw	zero,40(sp)
  807178:	003cf306 	br	806548 <_dtoa_r+0x258>
  80717c:	d9000d17 	ldw	r4,52(sp)
  807180:	080c0dc0 	call	80c0dc <__floatsidf>
  807184:	880b883a 	mov	r5,r17
  807188:	8009883a 	mov	r4,r16
  80718c:	180f883a 	mov	r7,r3
  807190:	100d883a 	mov	r6,r2
  807194:	080bf440 	call	80bf44 <__nedf2>
  807198:	103ce126 	beq	r2,zero,806520 <_dtoa_r+0x230>
  80719c:	d9800d17 	ldw	r6,52(sp)
  8071a0:	31bfffc4 	addi	r6,r6,-1
  8071a4:	d9800d15 	stw	r6,52(sp)
  8071a8:	003cdd06 	br	806520 <_dtoa_r+0x230>
  8071ac:	d9000717 	ldw	r4,28(sp)
  8071b0:	900b883a 	mov	r5,r18
  8071b4:	0808e3c0 	call	808e3c <__mcmp>
  8071b8:	103e8d0e 	bge	r2,zero,806bf0 <_dtoa_r+0x900>
  8071bc:	d9400717 	ldw	r5,28(sp)
  8071c0:	d9001617 	ldw	r4,88(sp)
  8071c4:	01800284 	movi	r6,10
  8071c8:	000f883a 	mov	r7,zero
  8071cc:	0809a000 	call	809a00 <__multadd>
  8071d0:	d9800d17 	ldw	r6,52(sp)
  8071d4:	d8800715 	stw	r2,28(sp)
  8071d8:	31bfffc4 	addi	r6,r6,-1
  8071dc:	d9800d15 	stw	r6,52(sp)
  8071e0:	b001a71e 	bne	r22,zero,807880 <_dtoa_r+0x1590>
  8071e4:	d8800e17 	ldw	r2,56(sp)
  8071e8:	d8800f15 	stw	r2,60(sp)
  8071ec:	003e8006 	br	806bf0 <_dtoa_r+0x900>
  8071f0:	90800417 	ldw	r2,16(r18)
  8071f4:	1085883a 	add	r2,r2,r2
  8071f8:	1085883a 	add	r2,r2,r2
  8071fc:	1485883a 	add	r2,r2,r18
  807200:	11000417 	ldw	r4,16(r2)
  807204:	0808d080 	call	808d08 <__hi0bits>
  807208:	00c00804 	movi	r3,32
  80720c:	1887c83a 	sub	r3,r3,r2
  807210:	003e5a06 	br	806b7c <_dtoa_r+0x88c>
  807214:	d9400717 	ldw	r5,28(sp)
  807218:	d9801017 	ldw	r6,64(sp)
  80721c:	d9001617 	ldw	r4,88(sp)
  807220:	0809b2c0 	call	809b2c <__pow5mult>
  807224:	d8800715 	stw	r2,28(sp)
  807228:	003e4306 	br	806b38 <_dtoa_r+0x848>
  80722c:	d9800f17 	ldw	r6,60(sp)
  807230:	d8800d17 	ldw	r2,52(sp)
  807234:	d9800315 	stw	r6,12(sp)
  807238:	d8800415 	stw	r2,16(sp)
  80723c:	d8c00b17 	ldw	r3,44(sp)
  807240:	1805003a 	cmpeq	r2,r3,zero
  807244:	1000e21e 	bne	r2,zero,8075d0 <_dtoa_r+0x12e0>
  807248:	d9000317 	ldw	r4,12(sp)
  80724c:	0005883a 	mov	r2,zero
  807250:	00cff834 	movhi	r3,16352
  807254:	200c90fa 	slli	r6,r4,3
  807258:	01002074 	movhi	r4,129
  80725c:	21103604 	addi	r4,r4,16600
  807260:	180b883a 	mov	r5,r3
  807264:	310d883a 	add	r6,r6,r4
  807268:	327fff17 	ldw	r9,-4(r6)
  80726c:	323ffe17 	ldw	r8,-8(r6)
  807270:	1009883a 	mov	r4,r2
  807274:	480f883a 	mov	r7,r9
  807278:	400d883a 	mov	r6,r8
  80727c:	080bc640 	call	80bc64 <__divdf3>
  807280:	180b883a 	mov	r5,r3
  807284:	b00d883a 	mov	r6,r22
  807288:	b80f883a 	mov	r7,r23
  80728c:	1009883a 	mov	r4,r2
  807290:	08023ec0 	call	8023ec <__subdf3>
  807294:	a80b883a 	mov	r5,r21
  807298:	a009883a 	mov	r4,r20
  80729c:	d8c01915 	stw	r3,100(sp)
  8072a0:	d8801815 	stw	r2,96(sp)
  8072a4:	080292c0 	call	80292c <__fixdfsi>
  8072a8:	1009883a 	mov	r4,r2
  8072ac:	1027883a 	mov	r19,r2
  8072b0:	080c0dc0 	call	80c0dc <__floatsidf>
  8072b4:	a80b883a 	mov	r5,r21
  8072b8:	a009883a 	mov	r4,r20
  8072bc:	180f883a 	mov	r7,r3
  8072c0:	100d883a 	mov	r6,r2
  8072c4:	08023ec0 	call	8023ec <__subdf3>
  8072c8:	d9801817 	ldw	r6,96(sp)
  8072cc:	1823883a 	mov	r17,r3
  8072d0:	d8801415 	stw	r2,80(sp)
  8072d4:	302d883a 	mov	r22,r6
  8072d8:	d9800517 	ldw	r6,20(sp)
  8072dc:	9cc00c04 	addi	r19,r19,48
  8072e0:	dc401515 	stw	r17,84(sp)
  8072e4:	d8c01917 	ldw	r3,100(sp)
  8072e8:	34c00005 	stb	r19,0(r6)
  8072ec:	d8800517 	ldw	r2,20(sp)
  8072f0:	d9401917 	ldw	r5,100(sp)
  8072f4:	d9801417 	ldw	r6,80(sp)
  8072f8:	b009883a 	mov	r4,r22
  8072fc:	880f883a 	mov	r7,r17
  807300:	182f883a 	mov	r23,r3
  807304:	17000044 	addi	fp,r2,1
  807308:	08028a40 	call	8028a4 <__gtdf2>
  80730c:	00804e16 	blt	zero,r2,807448 <_dtoa_r+0x1158>
  807310:	d9801417 	ldw	r6,80(sp)
  807314:	0005883a 	mov	r2,zero
  807318:	00cffc34 	movhi	r3,16368
  80731c:	180b883a 	mov	r5,r3
  807320:	880f883a 	mov	r7,r17
  807324:	1009883a 	mov	r4,r2
  807328:	08023ec0 	call	8023ec <__subdf3>
  80732c:	d9401917 	ldw	r5,100(sp)
  807330:	180f883a 	mov	r7,r3
  807334:	b009883a 	mov	r4,r22
  807338:	100d883a 	mov	r6,r2
  80733c:	08028a40 	call	8028a4 <__gtdf2>
  807340:	00bda216 	blt	zero,r2,8069cc <_dtoa_r+0x6dc>
  807344:	d8c00317 	ldw	r3,12(sp)
  807348:	00800044 	movi	r2,1
  80734c:	10c01216 	blt	r2,r3,807398 <_dtoa_r+0x10a8>
  807350:	003d4506 	br	806868 <_dtoa_r+0x578>
  807354:	d9801417 	ldw	r6,80(sp)
  807358:	0005883a 	mov	r2,zero
  80735c:	00cffc34 	movhi	r3,16368
  807360:	180b883a 	mov	r5,r3
  807364:	880f883a 	mov	r7,r17
  807368:	1009883a 	mov	r4,r2
  80736c:	08023ec0 	call	8023ec <__subdf3>
  807370:	d9c01b17 	ldw	r7,108(sp)
  807374:	180b883a 	mov	r5,r3
  807378:	1009883a 	mov	r4,r2
  80737c:	b00d883a 	mov	r6,r22
  807380:	080c0540 	call	80c054 <__ltdf2>
  807384:	103d9116 	blt	r2,zero,8069cc <_dtoa_r+0x6dc>
  807388:	d9800517 	ldw	r6,20(sp)
  80738c:	d9000317 	ldw	r4,12(sp)
  807390:	3105883a 	add	r2,r6,r4
  807394:	e0bd3426 	beq	fp,r2,806868 <_dtoa_r+0x578>
  807398:	04500934 	movhi	r17,16420
  80739c:	0021883a 	mov	r16,zero
  8073a0:	b80b883a 	mov	r5,r23
  8073a4:	b009883a 	mov	r4,r22
  8073a8:	800d883a 	mov	r6,r16
  8073ac:	880f883a 	mov	r7,r17
  8073b0:	08024e00 	call	8024e0 <__muldf3>
  8073b4:	d9401517 	ldw	r5,84(sp)
  8073b8:	d9001417 	ldw	r4,80(sp)
  8073bc:	880f883a 	mov	r7,r17
  8073c0:	000d883a 	mov	r6,zero
  8073c4:	d8801a15 	stw	r2,104(sp)
  8073c8:	d8c01b15 	stw	r3,108(sp)
  8073cc:	08024e00 	call	8024e0 <__muldf3>
  8073d0:	180b883a 	mov	r5,r3
  8073d4:	1009883a 	mov	r4,r2
  8073d8:	1823883a 	mov	r17,r3
  8073dc:	1021883a 	mov	r16,r2
  8073e0:	080292c0 	call	80292c <__fixdfsi>
  8073e4:	1009883a 	mov	r4,r2
  8073e8:	102b883a 	mov	r21,r2
  8073ec:	080c0dc0 	call	80c0dc <__floatsidf>
  8073f0:	880b883a 	mov	r5,r17
  8073f4:	8009883a 	mov	r4,r16
  8073f8:	180f883a 	mov	r7,r3
  8073fc:	100d883a 	mov	r6,r2
  807400:	08023ec0 	call	8023ec <__subdf3>
  807404:	1021883a 	mov	r16,r2
  807408:	d9001b17 	ldw	r4,108(sp)
  80740c:	1823883a 	mov	r17,r3
  807410:	dc001415 	stw	r16,80(sp)
  807414:	ad400c04 	addi	r21,r21,48
  807418:	dc401515 	stw	r17,84(sp)
  80741c:	d8801a17 	ldw	r2,104(sp)
  807420:	e5400005 	stb	r21,0(fp)
  807424:	202f883a 	mov	r23,r4
  807428:	d9c01b17 	ldw	r7,108(sp)
  80742c:	d9001417 	ldw	r4,80(sp)
  807430:	880b883a 	mov	r5,r17
  807434:	100d883a 	mov	r6,r2
  807438:	102d883a 	mov	r22,r2
  80743c:	e7000044 	addi	fp,fp,1
  807440:	080c0540 	call	80c054 <__ltdf2>
  807444:	103fc30e 	bge	r2,zero,807354 <_dtoa_r+0x1064>
  807448:	d9000417 	ldw	r4,16(sp)
  80744c:	d9000d15 	stw	r4,52(sp)
  807450:	003d7106 	br	806a18 <_dtoa_r+0x728>
  807454:	d9801717 	ldw	r6,92(sp)
  807458:	00800084 	movi	r2,2
  80745c:	11bde60e 	bge	r2,r6,806bf8 <_dtoa_r+0x908>
  807460:	203cfb1e 	bne	r4,zero,806850 <_dtoa_r+0x560>
  807464:	d9001617 	ldw	r4,88(sp)
  807468:	900b883a 	mov	r5,r18
  80746c:	01800144 	movi	r6,5
  807470:	000f883a 	mov	r7,zero
  807474:	0809a000 	call	809a00 <__multadd>
  807478:	d9000717 	ldw	r4,28(sp)
  80747c:	100b883a 	mov	r5,r2
  807480:	1025883a 	mov	r18,r2
  807484:	0808e3c0 	call	808e3c <__mcmp>
  807488:	00bcf10e 	bge	zero,r2,806850 <_dtoa_r+0x560>
  80748c:	d8c00d17 	ldw	r3,52(sp)
  807490:	d9000517 	ldw	r4,20(sp)
  807494:	d8000615 	stw	zero,24(sp)
  807498:	18c00044 	addi	r3,r3,1
  80749c:	d8c00d15 	stw	r3,52(sp)
  8074a0:	00800c44 	movi	r2,49
  8074a4:	27000044 	addi	fp,r4,1
  8074a8:	20800005 	stb	r2,0(r4)
  8074ac:	003e8906 	br	806ed4 <_dtoa_r+0xbe4>
  8074b0:	d8c00517 	ldw	r3,20(sp)
  8074b4:	003bc206 	br	8063c0 <_dtoa_r+0xd0>
  8074b8:	01802074 	movhi	r6,129
  8074bc:	31906804 	addi	r6,r6,16800
  8074c0:	30c00917 	ldw	r3,36(r6)
  8074c4:	30800817 	ldw	r2,32(r6)
  8074c8:	d9001217 	ldw	r4,72(sp)
  8074cc:	d9401317 	ldw	r5,76(sp)
  8074d0:	180f883a 	mov	r7,r3
  8074d4:	100d883a 	mov	r6,r2
  8074d8:	080bc640 	call	80bc64 <__divdf3>
  8074dc:	948003cc 	andi	r18,r18,15
  8074e0:	058000c4 	movi	r22,3
  8074e4:	1029883a 	mov	r20,r2
  8074e8:	182b883a 	mov	r21,r3
  8074ec:	003c8906 	br	806714 <_dtoa_r+0x424>
  8074f0:	d9001017 	ldw	r4,64(sp)
  8074f4:	d9800917 	ldw	r6,36(sp)
  8074f8:	0025883a 	mov	r18,zero
  8074fc:	1105c83a 	sub	r2,r2,r4
  807500:	2089883a 	add	r4,r4,r2
  807504:	308d883a 	add	r6,r6,r2
  807508:	d9001015 	stw	r4,64(sp)
  80750c:	d9800915 	stw	r6,36(sp)
  807510:	003e3206 	br	806ddc <_dtoa_r+0xaec>
  807514:	28800044 	addi	r2,r5,1
  807518:	27000044 	addi	fp,r4,1
  80751c:	20800005 	stb	r2,0(r4)
  807520:	003e6c06 	br	806ed4 <_dtoa_r+0xbe4>
  807524:	d8800f17 	ldw	r2,60(sp)
  807528:	00bce016 	blt	zero,r2,8068ac <_dtoa_r+0x5bc>
  80752c:	d9800f17 	ldw	r6,60(sp)
  807530:	303cc51e 	bne	r6,zero,806848 <_dtoa_r+0x558>
  807534:	0005883a 	mov	r2,zero
  807538:	00d00534 	movhi	r3,16404
  80753c:	980b883a 	mov	r5,r19
  807540:	180f883a 	mov	r7,r3
  807544:	9009883a 	mov	r4,r18
  807548:	100d883a 	mov	r6,r2
  80754c:	08024e00 	call	8024e0 <__muldf3>
  807550:	180b883a 	mov	r5,r3
  807554:	a80f883a 	mov	r7,r21
  807558:	1009883a 	mov	r4,r2
  80755c:	a00d883a 	mov	r6,r20
  807560:	080bfcc0 	call	80bfcc <__gedf2>
  807564:	103cb80e 	bge	r2,zero,806848 <_dtoa_r+0x558>
  807568:	0027883a 	mov	r19,zero
  80756c:	0025883a 	mov	r18,zero
  807570:	003fc606 	br	80748c <_dtoa_r+0x119c>
  807574:	99400117 	ldw	r5,4(r19)
  807578:	d9001617 	ldw	r4,88(sp)
  80757c:	08092600 	call	809260 <_Balloc>
  807580:	99800417 	ldw	r6,16(r19)
  807584:	11000304 	addi	r4,r2,12
  807588:	99400304 	addi	r5,r19,12
  80758c:	318d883a 	add	r6,r6,r6
  807590:	318d883a 	add	r6,r6,r6
  807594:	31800204 	addi	r6,r6,8
  807598:	1023883a 	mov	r17,r2
  80759c:	0808b600 	call	808b60 <memcpy>
  8075a0:	d9001617 	ldw	r4,88(sp)
  8075a4:	880b883a 	mov	r5,r17
  8075a8:	01800044 	movi	r6,1
  8075ac:	08096240 	call	809624 <__lshift>
  8075b0:	100b883a 	mov	r5,r2
  8075b4:	003d9c06 	br	806c28 <_dtoa_r+0x938>
  8075b8:	00800e44 	movi	r2,57
  8075bc:	b8807026 	beq	r23,r2,807780 <_dtoa_r+0x1490>
  8075c0:	b8800044 	addi	r2,r23,1
  8075c4:	b7000044 	addi	fp,r22,1
  8075c8:	b0800005 	stb	r2,0(r22)
  8075cc:	003e4106 	br	806ed4 <_dtoa_r+0xbe4>
  8075d0:	d8800317 	ldw	r2,12(sp)
  8075d4:	01802074 	movhi	r6,129
  8075d8:	31903604 	addi	r6,r6,16600
  8075dc:	b009883a 	mov	r4,r22
  8075e0:	100e90fa 	slli	r7,r2,3
  8075e4:	b80b883a 	mov	r5,r23
  8075e8:	398f883a 	add	r7,r7,r6
  8075ec:	38bffe17 	ldw	r2,-8(r7)
  8075f0:	d9800517 	ldw	r6,20(sp)
  8075f4:	38ffff17 	ldw	r3,-4(r7)
  8075f8:	37000044 	addi	fp,r6,1
  8075fc:	180f883a 	mov	r7,r3
  807600:	100d883a 	mov	r6,r2
  807604:	08024e00 	call	8024e0 <__muldf3>
  807608:	a80b883a 	mov	r5,r21
  80760c:	a009883a 	mov	r4,r20
  807610:	182f883a 	mov	r23,r3
  807614:	102d883a 	mov	r22,r2
  807618:	080292c0 	call	80292c <__fixdfsi>
  80761c:	1009883a 	mov	r4,r2
  807620:	1027883a 	mov	r19,r2
  807624:	080c0dc0 	call	80c0dc <__floatsidf>
  807628:	a80b883a 	mov	r5,r21
  80762c:	a009883a 	mov	r4,r20
  807630:	180f883a 	mov	r7,r3
  807634:	100d883a 	mov	r6,r2
  807638:	08023ec0 	call	8023ec <__subdf3>
  80763c:	180b883a 	mov	r5,r3
  807640:	d8c00517 	ldw	r3,20(sp)
  807644:	9cc00c04 	addi	r19,r19,48
  807648:	1009883a 	mov	r4,r2
  80764c:	1cc00005 	stb	r19,0(r3)
  807650:	2021883a 	mov	r16,r4
  807654:	d9000317 	ldw	r4,12(sp)
  807658:	00800044 	movi	r2,1
  80765c:	2823883a 	mov	r17,r5
  807660:	20802226 	beq	r4,r2,8076ec <_dtoa_r+0x13fc>
  807664:	1029883a 	mov	r20,r2
  807668:	0005883a 	mov	r2,zero
  80766c:	00d00934 	movhi	r3,16420
  807670:	180f883a 	mov	r7,r3
  807674:	100d883a 	mov	r6,r2
  807678:	880b883a 	mov	r5,r17
  80767c:	8009883a 	mov	r4,r16
  807680:	08024e00 	call	8024e0 <__muldf3>
  807684:	180b883a 	mov	r5,r3
  807688:	1009883a 	mov	r4,r2
  80768c:	1823883a 	mov	r17,r3
  807690:	1021883a 	mov	r16,r2
  807694:	080292c0 	call	80292c <__fixdfsi>
  807698:	1009883a 	mov	r4,r2
  80769c:	102b883a 	mov	r21,r2
  8076a0:	080c0dc0 	call	80c0dc <__floatsidf>
  8076a4:	880b883a 	mov	r5,r17
  8076a8:	8009883a 	mov	r4,r16
  8076ac:	180f883a 	mov	r7,r3
  8076b0:	100d883a 	mov	r6,r2
  8076b4:	08023ec0 	call	8023ec <__subdf3>
  8076b8:	180b883a 	mov	r5,r3
  8076bc:	d8c00517 	ldw	r3,20(sp)
  8076c0:	1009883a 	mov	r4,r2
  8076c4:	ad400c04 	addi	r21,r21,48
  8076c8:	1d05883a 	add	r2,r3,r20
  8076cc:	15400005 	stb	r21,0(r2)
  8076d0:	2021883a 	mov	r16,r4
  8076d4:	d9000317 	ldw	r4,12(sp)
  8076d8:	a5000044 	addi	r20,r20,1
  8076dc:	2823883a 	mov	r17,r5
  8076e0:	a13fe11e 	bne	r20,r4,807668 <_dtoa_r+0x1378>
  8076e4:	e505883a 	add	r2,fp,r20
  8076e8:	173fffc4 	addi	fp,r2,-1
  8076ec:	0025883a 	mov	r18,zero
  8076f0:	04cff834 	movhi	r19,16352
  8076f4:	b009883a 	mov	r4,r22
  8076f8:	b80b883a 	mov	r5,r23
  8076fc:	900d883a 	mov	r6,r18
  807700:	980f883a 	mov	r7,r19
  807704:	080246c0 	call	80246c <__adddf3>
  807708:	180b883a 	mov	r5,r3
  80770c:	1009883a 	mov	r4,r2
  807710:	800d883a 	mov	r6,r16
  807714:	880f883a 	mov	r7,r17
  807718:	080c0540 	call	80c054 <__ltdf2>
  80771c:	103cab16 	blt	r2,zero,8069cc <_dtoa_r+0x6dc>
  807720:	0009883a 	mov	r4,zero
  807724:	980b883a 	mov	r5,r19
  807728:	b80f883a 	mov	r7,r23
  80772c:	b00d883a 	mov	r6,r22
  807730:	08023ec0 	call	8023ec <__subdf3>
  807734:	180b883a 	mov	r5,r3
  807738:	880f883a 	mov	r7,r17
  80773c:	1009883a 	mov	r4,r2
  807740:	800d883a 	mov	r6,r16
  807744:	08028a40 	call	8028a4 <__gtdf2>
  807748:	00bc470e 	bge	zero,r2,806868 <_dtoa_r+0x578>
  80774c:	00c00c04 	movi	r3,48
  807750:	e73fffc4 	addi	fp,fp,-1
  807754:	e0800007 	ldb	r2,0(fp)
  807758:	10fffd26 	beq	r2,r3,807750 <_dtoa_r+0x1460>
  80775c:	d9800417 	ldw	r6,16(sp)
  807760:	e7000044 	addi	fp,fp,1
  807764:	d9800d15 	stw	r6,52(sp)
  807768:	003cab06 	br	806a18 <_dtoa_r+0x728>
  80776c:	d8c00f17 	ldw	r3,60(sp)
  807770:	d9001117 	ldw	r4,68(sp)
  807774:	20e1c83a 	sub	r16,r4,r3
  807778:	0007883a 	mov	r3,zero
  80777c:	003d9b06 	br	806dec <_dtoa_r+0xafc>
  807780:	00800e44 	movi	r2,57
  807784:	b0800005 	stb	r2,0(r22)
  807788:	b5800044 	addi	r22,r22,1
  80778c:	003dc106 	br	806e94 <_dtoa_r+0xba4>
  807790:	05800084 	movi	r22,2
  807794:	003bf706 	br	806774 <_dtoa_r+0x484>
  807798:	d9000f17 	ldw	r4,60(sp)
  80779c:	013c000e 	bge	zero,r4,8067a0 <_dtoa_r+0x4b0>
  8077a0:	d9800e17 	ldw	r6,56(sp)
  8077a4:	01bc300e 	bge	zero,r6,806868 <_dtoa_r+0x578>
  8077a8:	0005883a 	mov	r2,zero
  8077ac:	00d00934 	movhi	r3,16420
  8077b0:	a80b883a 	mov	r5,r21
  8077b4:	180f883a 	mov	r7,r3
  8077b8:	a009883a 	mov	r4,r20
  8077bc:	100d883a 	mov	r6,r2
  8077c0:	08024e00 	call	8024e0 <__muldf3>
  8077c4:	b1000044 	addi	r4,r22,1
  8077c8:	1021883a 	mov	r16,r2
  8077cc:	1823883a 	mov	r17,r3
  8077d0:	080c0dc0 	call	80c0dc <__floatsidf>
  8077d4:	880b883a 	mov	r5,r17
  8077d8:	8009883a 	mov	r4,r16
  8077dc:	180f883a 	mov	r7,r3
  8077e0:	100d883a 	mov	r6,r2
  8077e4:	08024e00 	call	8024e0 <__muldf3>
  8077e8:	0011883a 	mov	r8,zero
  8077ec:	02500734 	movhi	r9,16412
  8077f0:	180b883a 	mov	r5,r3
  8077f4:	480f883a 	mov	r7,r9
  8077f8:	1009883a 	mov	r4,r2
  8077fc:	400d883a 	mov	r6,r8
  807800:	080246c0 	call	80246c <__adddf3>
  807804:	102d883a 	mov	r22,r2
  807808:	00bf3034 	movhi	r2,64704
  80780c:	10ef883a 	add	r23,r2,r3
  807810:	d8800d17 	ldw	r2,52(sp)
  807814:	d8c00e17 	ldw	r3,56(sp)
  807818:	8029883a 	mov	r20,r16
  80781c:	10bfffc4 	addi	r2,r2,-1
  807820:	882b883a 	mov	r21,r17
  807824:	d8800415 	stw	r2,16(sp)
  807828:	d8c00315 	stw	r3,12(sp)
  80782c:	003e8306 	br	80723c <_dtoa_r+0xf4c>
  807830:	d8800117 	ldw	r2,4(sp)
  807834:	dc001117 	ldw	r16,68(sp)
  807838:	dc801017 	ldw	r18,64(sp)
  80783c:	00c00d84 	movi	r3,54
  807840:	1887c83a 	sub	r3,r3,r2
  807844:	003d6906 	br	806dec <_dtoa_r+0xafc>
  807848:	01800044 	movi	r6,1
  80784c:	3021883a 	mov	r16,r6
  807850:	d9800f15 	stw	r6,60(sp)
  807854:	d9802615 	stw	r6,152(sp)
  807858:	d9800e15 	stw	r6,56(sp)
  80785c:	003b9306 	br	8066ac <_dtoa_r+0x3bc>
  807860:	b021883a 	mov	r16,r22
  807864:	dd800f15 	stw	r22,60(sp)
  807868:	003b9006 	br	8066ac <_dtoa_r+0x3bc>
  80786c:	103e221e 	bne	r2,zero,8070f8 <_dtoa_r+0xe08>
  807870:	b880004c 	andi	r2,r23,1
  807874:	1005003a 	cmpeq	r2,r2,zero
  807878:	103e1f1e 	bne	r2,zero,8070f8 <_dtoa_r+0xe08>
  80787c:	003e1b06 	br	8070ec <_dtoa_r+0xdfc>
  807880:	d9001617 	ldw	r4,88(sp)
  807884:	980b883a 	mov	r5,r19
  807888:	01800284 	movi	r6,10
  80788c:	000f883a 	mov	r7,zero
  807890:	0809a000 	call	809a00 <__multadd>
  807894:	d8c00e17 	ldw	r3,56(sp)
  807898:	1027883a 	mov	r19,r2
  80789c:	d8c00f15 	stw	r3,60(sp)
  8078a0:	003cd306 	br	806bf0 <_dtoa_r+0x900>

008078a4 <_fflush_r>:
  8078a4:	defffb04 	addi	sp,sp,-20
  8078a8:	dcc00315 	stw	r19,12(sp)
  8078ac:	dc800215 	stw	r18,8(sp)
  8078b0:	dfc00415 	stw	ra,16(sp)
  8078b4:	dc400115 	stw	r17,4(sp)
  8078b8:	dc000015 	stw	r16,0(sp)
  8078bc:	2027883a 	mov	r19,r4
  8078c0:	2825883a 	mov	r18,r5
  8078c4:	20000226 	beq	r4,zero,8078d0 <_fflush_r+0x2c>
  8078c8:	20800e17 	ldw	r2,56(r4)
  8078cc:	10005626 	beq	r2,zero,807a28 <_fflush_r+0x184>
  8078d0:	9100030b 	ldhu	r4,12(r18)
  8078d4:	20ffffcc 	andi	r3,r4,65535
  8078d8:	18e0001c 	xori	r3,r3,32768
  8078dc:	18e00004 	addi	r3,r3,-32768
  8078e0:	1880020c 	andi	r2,r3,8
  8078e4:	1000261e 	bne	r2,zero,807980 <_fflush_r+0xdc>
  8078e8:	90c00117 	ldw	r3,4(r18)
  8078ec:	20820014 	ori	r2,r4,2048
  8078f0:	9080030d 	sth	r2,12(r18)
  8078f4:	1009883a 	mov	r4,r2
  8078f8:	00c0400e 	bge	zero,r3,8079fc <_fflush_r+0x158>
  8078fc:	92000a17 	ldw	r8,40(r18)
  807900:	40004026 	beq	r8,zero,807a04 <_fflush_r+0x160>
  807904:	2084000c 	andi	r2,r4,4096
  807908:	10005326 	beq	r2,zero,807a58 <_fflush_r+0x1b4>
  80790c:	94001417 	ldw	r16,80(r18)
  807910:	9080030b 	ldhu	r2,12(r18)
  807914:	1080010c 	andi	r2,r2,4
  807918:	1000481e 	bne	r2,zero,807a3c <_fflush_r+0x198>
  80791c:	91400717 	ldw	r5,28(r18)
  807920:	9809883a 	mov	r4,r19
  807924:	800d883a 	mov	r6,r16
  807928:	000f883a 	mov	r7,zero
  80792c:	403ee83a 	callr	r8
  807930:	8080261e 	bne	r16,r2,8079cc <_fflush_r+0x128>
  807934:	9080030b 	ldhu	r2,12(r18)
  807938:	91000417 	ldw	r4,16(r18)
  80793c:	90000115 	stw	zero,4(r18)
  807940:	10bdffcc 	andi	r2,r2,63487
  807944:	10ffffcc 	andi	r3,r2,65535
  807948:	18c4000c 	andi	r3,r3,4096
  80794c:	9080030d 	sth	r2,12(r18)
  807950:	91000015 	stw	r4,0(r18)
  807954:	18002b26 	beq	r3,zero,807a04 <_fflush_r+0x160>
  807958:	0007883a 	mov	r3,zero
  80795c:	1805883a 	mov	r2,r3
  807960:	94001415 	stw	r16,80(r18)
  807964:	dfc00417 	ldw	ra,16(sp)
  807968:	dcc00317 	ldw	r19,12(sp)
  80796c:	dc800217 	ldw	r18,8(sp)
  807970:	dc400117 	ldw	r17,4(sp)
  807974:	dc000017 	ldw	r16,0(sp)
  807978:	dec00504 	addi	sp,sp,20
  80797c:	f800283a 	ret
  807980:	94400417 	ldw	r17,16(r18)
  807984:	88001f26 	beq	r17,zero,807a04 <_fflush_r+0x160>
  807988:	90800017 	ldw	r2,0(r18)
  80798c:	18c000cc 	andi	r3,r3,3
  807990:	94400015 	stw	r17,0(r18)
  807994:	1461c83a 	sub	r16,r2,r17
  807998:	18002526 	beq	r3,zero,807a30 <_fflush_r+0x18c>
  80799c:	0005883a 	mov	r2,zero
  8079a0:	90800215 	stw	r2,8(r18)
  8079a4:	0400170e 	bge	zero,r16,807a04 <_fflush_r+0x160>
  8079a8:	90c00917 	ldw	r3,36(r18)
  8079ac:	91400717 	ldw	r5,28(r18)
  8079b0:	880d883a 	mov	r6,r17
  8079b4:	800f883a 	mov	r7,r16
  8079b8:	9809883a 	mov	r4,r19
  8079bc:	183ee83a 	callr	r3
  8079c0:	88a3883a 	add	r17,r17,r2
  8079c4:	80a1c83a 	sub	r16,r16,r2
  8079c8:	00bff616 	blt	zero,r2,8079a4 <_fflush_r+0x100>
  8079cc:	9080030b 	ldhu	r2,12(r18)
  8079d0:	00ffffc4 	movi	r3,-1
  8079d4:	10801014 	ori	r2,r2,64
  8079d8:	9080030d 	sth	r2,12(r18)
  8079dc:	1805883a 	mov	r2,r3
  8079e0:	dfc00417 	ldw	ra,16(sp)
  8079e4:	dcc00317 	ldw	r19,12(sp)
  8079e8:	dc800217 	ldw	r18,8(sp)
  8079ec:	dc400117 	ldw	r17,4(sp)
  8079f0:	dc000017 	ldw	r16,0(sp)
  8079f4:	dec00504 	addi	sp,sp,20
  8079f8:	f800283a 	ret
  8079fc:	90800f17 	ldw	r2,60(r18)
  807a00:	00bfbe16 	blt	zero,r2,8078fc <_fflush_r+0x58>
  807a04:	0007883a 	mov	r3,zero
  807a08:	1805883a 	mov	r2,r3
  807a0c:	dfc00417 	ldw	ra,16(sp)
  807a10:	dcc00317 	ldw	r19,12(sp)
  807a14:	dc800217 	ldw	r18,8(sp)
  807a18:	dc400117 	ldw	r17,4(sp)
  807a1c:	dc000017 	ldw	r16,0(sp)
  807a20:	dec00504 	addi	sp,sp,20
  807a24:	f800283a 	ret
  807a28:	0807b3c0 	call	807b3c <__sinit>
  807a2c:	003fa806 	br	8078d0 <_fflush_r+0x2c>
  807a30:	90800517 	ldw	r2,20(r18)
  807a34:	90800215 	stw	r2,8(r18)
  807a38:	003fda06 	br	8079a4 <_fflush_r+0x100>
  807a3c:	90800117 	ldw	r2,4(r18)
  807a40:	90c00c17 	ldw	r3,48(r18)
  807a44:	80a1c83a 	sub	r16,r16,r2
  807a48:	183fb426 	beq	r3,zero,80791c <_fflush_r+0x78>
  807a4c:	90800f17 	ldw	r2,60(r18)
  807a50:	80a1c83a 	sub	r16,r16,r2
  807a54:	003fb106 	br	80791c <_fflush_r+0x78>
  807a58:	91400717 	ldw	r5,28(r18)
  807a5c:	9809883a 	mov	r4,r19
  807a60:	000d883a 	mov	r6,zero
  807a64:	01c00044 	movi	r7,1
  807a68:	403ee83a 	callr	r8
  807a6c:	1021883a 	mov	r16,r2
  807a70:	00bfffc4 	movi	r2,-1
  807a74:	80800226 	beq	r16,r2,807a80 <_fflush_r+0x1dc>
  807a78:	92000a17 	ldw	r8,40(r18)
  807a7c:	003fa406 	br	807910 <_fflush_r+0x6c>
  807a80:	98c00017 	ldw	r3,0(r19)
  807a84:	00800744 	movi	r2,29
  807a88:	18bfde26 	beq	r3,r2,807a04 <_fflush_r+0x160>
  807a8c:	9080030b 	ldhu	r2,12(r18)
  807a90:	8007883a 	mov	r3,r16
  807a94:	10801014 	ori	r2,r2,64
  807a98:	9080030d 	sth	r2,12(r18)
  807a9c:	003fcf06 	br	8079dc <_fflush_r+0x138>

00807aa0 <fflush>:
  807aa0:	01402034 	movhi	r5,128
  807aa4:	295e2904 	addi	r5,r5,30884
  807aa8:	2007883a 	mov	r3,r4
  807aac:	20000526 	beq	r4,zero,807ac4 <fflush+0x24>
  807ab0:	00802074 	movhi	r2,129
  807ab4:	1097bd04 	addi	r2,r2,24308
  807ab8:	11000017 	ldw	r4,0(r2)
  807abc:	180b883a 	mov	r5,r3
  807ac0:	08078a41 	jmpi	8078a4 <_fflush_r>
  807ac4:	00802074 	movhi	r2,129
  807ac8:	1097be04 	addi	r2,r2,24312
  807acc:	11000017 	ldw	r4,0(r2)
  807ad0:	08086a41 	jmpi	8086a4 <_fwalk_reent>

00807ad4 <std>:
  807ad4:	00802074 	movhi	r2,129
  807ad8:	10a9e704 	addi	r2,r2,-22628
  807adc:	20800b15 	stw	r2,44(r4)
  807ae0:	00802074 	movhi	r2,129
  807ae4:	10aa2204 	addi	r2,r2,-22392
  807ae8:	20800815 	stw	r2,32(r4)
  807aec:	00c02074 	movhi	r3,129
  807af0:	18ea0304 	addi	r3,r3,-22516
  807af4:	00802074 	movhi	r2,129
  807af8:	10a9e904 	addi	r2,r2,-22620
  807afc:	2140030d 	sth	r5,12(r4)
  807b00:	2180038d 	sth	r6,14(r4)
  807b04:	20c00915 	stw	r3,36(r4)
  807b08:	20800a15 	stw	r2,40(r4)
  807b0c:	20000015 	stw	zero,0(r4)
  807b10:	20000115 	stw	zero,4(r4)
  807b14:	20000215 	stw	zero,8(r4)
  807b18:	20000415 	stw	zero,16(r4)
  807b1c:	20000515 	stw	zero,20(r4)
  807b20:	20000615 	stw	zero,24(r4)
  807b24:	21000715 	stw	r4,28(r4)
  807b28:	f800283a 	ret

00807b2c <__sfp_lock_acquire>:
  807b2c:	f800283a 	ret

00807b30 <__sfp_lock_release>:
  807b30:	f800283a 	ret

00807b34 <__sinit_lock_acquire>:
  807b34:	f800283a 	ret

00807b38 <__sinit_lock_release>:
  807b38:	f800283a 	ret

00807b3c <__sinit>:
  807b3c:	20800e17 	ldw	r2,56(r4)
  807b40:	defffd04 	addi	sp,sp,-12
  807b44:	dc400115 	stw	r17,4(sp)
  807b48:	dc000015 	stw	r16,0(sp)
  807b4c:	dfc00215 	stw	ra,8(sp)
  807b50:	04400044 	movi	r17,1
  807b54:	01400104 	movi	r5,4
  807b58:	000d883a 	mov	r6,zero
  807b5c:	2021883a 	mov	r16,r4
  807b60:	2200bb04 	addi	r8,r4,748
  807b64:	200f883a 	mov	r7,r4
  807b68:	10000526 	beq	r2,zero,807b80 <__sinit+0x44>
  807b6c:	dfc00217 	ldw	ra,8(sp)
  807b70:	dc400117 	ldw	r17,4(sp)
  807b74:	dc000017 	ldw	r16,0(sp)
  807b78:	dec00304 	addi	sp,sp,12
  807b7c:	f800283a 	ret
  807b80:	21000117 	ldw	r4,4(r4)
  807b84:	00802034 	movhi	r2,128
  807b88:	109f0804 	addi	r2,r2,31776
  807b8c:	00c000c4 	movi	r3,3
  807b90:	80800f15 	stw	r2,60(r16)
  807b94:	80c0b915 	stw	r3,740(r16)
  807b98:	8200ba15 	stw	r8,744(r16)
  807b9c:	84400e15 	stw	r17,56(r16)
  807ba0:	8000b815 	stw	zero,736(r16)
  807ba4:	0807ad40 	call	807ad4 <std>
  807ba8:	81000217 	ldw	r4,8(r16)
  807bac:	880d883a 	mov	r6,r17
  807bb0:	800f883a 	mov	r7,r16
  807bb4:	01400284 	movi	r5,10
  807bb8:	0807ad40 	call	807ad4 <std>
  807bbc:	81000317 	ldw	r4,12(r16)
  807bc0:	800f883a 	mov	r7,r16
  807bc4:	01400484 	movi	r5,18
  807bc8:	01800084 	movi	r6,2
  807bcc:	dfc00217 	ldw	ra,8(sp)
  807bd0:	dc400117 	ldw	r17,4(sp)
  807bd4:	dc000017 	ldw	r16,0(sp)
  807bd8:	dec00304 	addi	sp,sp,12
  807bdc:	0807ad41 	jmpi	807ad4 <std>

00807be0 <__fp_lock>:
  807be0:	0005883a 	mov	r2,zero
  807be4:	f800283a 	ret

00807be8 <__fp_unlock>:
  807be8:	0005883a 	mov	r2,zero
  807bec:	f800283a 	ret

00807bf0 <__fp_unlock_all>:
  807bf0:	00802074 	movhi	r2,129
  807bf4:	1097bd04 	addi	r2,r2,24308
  807bf8:	11000017 	ldw	r4,0(r2)
  807bfc:	01402034 	movhi	r5,128
  807c00:	295efa04 	addi	r5,r5,31720
  807c04:	080876c1 	jmpi	80876c <_fwalk>

00807c08 <__fp_lock_all>:
  807c08:	00802074 	movhi	r2,129
  807c0c:	1097bd04 	addi	r2,r2,24308
  807c10:	11000017 	ldw	r4,0(r2)
  807c14:	01402034 	movhi	r5,128
  807c18:	295ef804 	addi	r5,r5,31712
  807c1c:	080876c1 	jmpi	80876c <_fwalk>

00807c20 <_cleanup_r>:
  807c20:	01402074 	movhi	r5,129
  807c24:	296b6c04 	addi	r5,r5,-21072
  807c28:	080876c1 	jmpi	80876c <_fwalk>

00807c2c <_cleanup>:
  807c2c:	00802074 	movhi	r2,129
  807c30:	1097be04 	addi	r2,r2,24312
  807c34:	11000017 	ldw	r4,0(r2)
  807c38:	0807c201 	jmpi	807c20 <_cleanup_r>

00807c3c <__sfmoreglue>:
  807c3c:	defffc04 	addi	sp,sp,-16
  807c40:	dc000015 	stw	r16,0(sp)
  807c44:	2821883a 	mov	r16,r5
  807c48:	dc400115 	stw	r17,4(sp)
  807c4c:	01401704 	movi	r5,92
  807c50:	2023883a 	mov	r17,r4
  807c54:	8009883a 	mov	r4,r16
  807c58:	dfc00315 	stw	ra,12(sp)
  807c5c:	dcc00215 	stw	r19,8(sp)
  807c60:	0802b980 	call	802b98 <__mulsi3>
  807c64:	11400304 	addi	r5,r2,12
  807c68:	8809883a 	mov	r4,r17
  807c6c:	1027883a 	mov	r19,r2
  807c70:	08034100 	call	803410 <_malloc_r>
  807c74:	10c00304 	addi	r3,r2,12
  807c78:	1023883a 	mov	r17,r2
  807c7c:	1809883a 	mov	r4,r3
  807c80:	980d883a 	mov	r6,r19
  807c84:	000b883a 	mov	r5,zero
  807c88:	10000b26 	beq	r2,zero,807cb8 <__sfmoreglue+0x7c>
  807c8c:	14000115 	stw	r16,4(r2)
  807c90:	10c00215 	stw	r3,8(r2)
  807c94:	10000015 	stw	zero,0(r2)
  807c98:	0803b500 	call	803b50 <memset>
  807c9c:	8805883a 	mov	r2,r17
  807ca0:	dfc00317 	ldw	ra,12(sp)
  807ca4:	dcc00217 	ldw	r19,8(sp)
  807ca8:	dc400117 	ldw	r17,4(sp)
  807cac:	dc000017 	ldw	r16,0(sp)
  807cb0:	dec00404 	addi	sp,sp,16
  807cb4:	f800283a 	ret
  807cb8:	0023883a 	mov	r17,zero
  807cbc:	8805883a 	mov	r2,r17
  807cc0:	dfc00317 	ldw	ra,12(sp)
  807cc4:	dcc00217 	ldw	r19,8(sp)
  807cc8:	dc400117 	ldw	r17,4(sp)
  807ccc:	dc000017 	ldw	r16,0(sp)
  807cd0:	dec00404 	addi	sp,sp,16
  807cd4:	f800283a 	ret

00807cd8 <__sfp>:
  807cd8:	defffd04 	addi	sp,sp,-12
  807cdc:	00802074 	movhi	r2,129
  807ce0:	1097be04 	addi	r2,r2,24312
  807ce4:	dc000015 	stw	r16,0(sp)
  807ce8:	14000017 	ldw	r16,0(r2)
  807cec:	dc400115 	stw	r17,4(sp)
  807cf0:	dfc00215 	stw	ra,8(sp)
  807cf4:	80800e17 	ldw	r2,56(r16)
  807cf8:	2023883a 	mov	r17,r4
  807cfc:	10002626 	beq	r2,zero,807d98 <__sfp+0xc0>
  807d00:	8400b804 	addi	r16,r16,736
  807d04:	80800117 	ldw	r2,4(r16)
  807d08:	81000217 	ldw	r4,8(r16)
  807d0c:	10ffffc4 	addi	r3,r2,-1
  807d10:	18000916 	blt	r3,zero,807d38 <__sfp+0x60>
  807d14:	2080030f 	ldh	r2,12(r4)
  807d18:	10000b26 	beq	r2,zero,807d48 <__sfp+0x70>
  807d1c:	017fffc4 	movi	r5,-1
  807d20:	00000206 	br	807d2c <__sfp+0x54>
  807d24:	2080030f 	ldh	r2,12(r4)
  807d28:	10000726 	beq	r2,zero,807d48 <__sfp+0x70>
  807d2c:	18ffffc4 	addi	r3,r3,-1
  807d30:	21001704 	addi	r4,r4,92
  807d34:	197ffb1e 	bne	r3,r5,807d24 <__sfp+0x4c>
  807d38:	80800017 	ldw	r2,0(r16)
  807d3c:	10001926 	beq	r2,zero,807da4 <__sfp+0xcc>
  807d40:	1021883a 	mov	r16,r2
  807d44:	003fef06 	br	807d04 <__sfp+0x2c>
  807d48:	00bfffc4 	movi	r2,-1
  807d4c:	00c00044 	movi	r3,1
  807d50:	2080038d 	sth	r2,14(r4)
  807d54:	20c0030d 	sth	r3,12(r4)
  807d58:	20000015 	stw	zero,0(r4)
  807d5c:	20000215 	stw	zero,8(r4)
  807d60:	20000115 	stw	zero,4(r4)
  807d64:	20000415 	stw	zero,16(r4)
  807d68:	20000515 	stw	zero,20(r4)
  807d6c:	20000615 	stw	zero,24(r4)
  807d70:	20000c15 	stw	zero,48(r4)
  807d74:	20000d15 	stw	zero,52(r4)
  807d78:	20001115 	stw	zero,68(r4)
  807d7c:	20001215 	stw	zero,72(r4)
  807d80:	2005883a 	mov	r2,r4
  807d84:	dfc00217 	ldw	ra,8(sp)
  807d88:	dc400117 	ldw	r17,4(sp)
  807d8c:	dc000017 	ldw	r16,0(sp)
  807d90:	dec00304 	addi	sp,sp,12
  807d94:	f800283a 	ret
  807d98:	8009883a 	mov	r4,r16
  807d9c:	0807b3c0 	call	807b3c <__sinit>
  807da0:	003fd706 	br	807d00 <__sfp+0x28>
  807da4:	8809883a 	mov	r4,r17
  807da8:	01400104 	movi	r5,4
  807dac:	0807c3c0 	call	807c3c <__sfmoreglue>
  807db0:	80800015 	stw	r2,0(r16)
  807db4:	103fe21e 	bne	r2,zero,807d40 <__sfp+0x68>
  807db8:	00800304 	movi	r2,12
  807dbc:	0009883a 	mov	r4,zero
  807dc0:	88800015 	stw	r2,0(r17)
  807dc4:	003fee06 	br	807d80 <__sfp+0xa8>

00807dc8 <_malloc_trim_r>:
  807dc8:	defffb04 	addi	sp,sp,-20
  807dcc:	dcc00315 	stw	r19,12(sp)
  807dd0:	04c02074 	movhi	r19,129
  807dd4:	9cd21604 	addi	r19,r19,18520
  807dd8:	dc800215 	stw	r18,8(sp)
  807ddc:	dc400115 	stw	r17,4(sp)
  807de0:	dc000015 	stw	r16,0(sp)
  807de4:	2823883a 	mov	r17,r5
  807de8:	2025883a 	mov	r18,r4
  807dec:	dfc00415 	stw	ra,16(sp)
  807df0:	080c8100 	call	80c810 <__malloc_lock>
  807df4:	98800217 	ldw	r2,8(r19)
  807df8:	9009883a 	mov	r4,r18
  807dfc:	000b883a 	mov	r5,zero
  807e00:	10c00117 	ldw	r3,4(r2)
  807e04:	00bfff04 	movi	r2,-4
  807e08:	18a0703a 	and	r16,r3,r2
  807e0c:	8463c83a 	sub	r17,r16,r17
  807e10:	8c43fbc4 	addi	r17,r17,4079
  807e14:	8822d33a 	srli	r17,r17,12
  807e18:	0083ffc4 	movi	r2,4095
  807e1c:	8c7fffc4 	addi	r17,r17,-1
  807e20:	8822933a 	slli	r17,r17,12
  807e24:	1440060e 	bge	r2,r17,807e40 <_malloc_trim_r+0x78>
  807e28:	0803d980 	call	803d98 <_sbrk_r>
  807e2c:	98c00217 	ldw	r3,8(r19)
  807e30:	9009883a 	mov	r4,r18
  807e34:	044bc83a 	sub	r5,zero,r17
  807e38:	80c7883a 	add	r3,r16,r3
  807e3c:	10c00926 	beq	r2,r3,807e64 <_malloc_trim_r+0x9c>
  807e40:	080c8140 	call	80c814 <__malloc_unlock>
  807e44:	0005883a 	mov	r2,zero
  807e48:	dfc00417 	ldw	ra,16(sp)
  807e4c:	dcc00317 	ldw	r19,12(sp)
  807e50:	dc800217 	ldw	r18,8(sp)
  807e54:	dc400117 	ldw	r17,4(sp)
  807e58:	dc000017 	ldw	r16,0(sp)
  807e5c:	dec00504 	addi	sp,sp,20
  807e60:	f800283a 	ret
  807e64:	9009883a 	mov	r4,r18
  807e68:	0803d980 	call	803d98 <_sbrk_r>
  807e6c:	844dc83a 	sub	r6,r16,r17
  807e70:	00ffffc4 	movi	r3,-1
  807e74:	9009883a 	mov	r4,r18
  807e78:	000b883a 	mov	r5,zero
  807e7c:	01c02074 	movhi	r7,129
  807e80:	39df3f04 	addi	r7,r7,31996
  807e84:	31800054 	ori	r6,r6,1
  807e88:	10c00926 	beq	r2,r3,807eb0 <_malloc_trim_r+0xe8>
  807e8c:	38800017 	ldw	r2,0(r7)
  807e90:	98c00217 	ldw	r3,8(r19)
  807e94:	9009883a 	mov	r4,r18
  807e98:	1445c83a 	sub	r2,r2,r17
  807e9c:	38800015 	stw	r2,0(r7)
  807ea0:	19800115 	stw	r6,4(r3)
  807ea4:	080c8140 	call	80c814 <__malloc_unlock>
  807ea8:	00800044 	movi	r2,1
  807eac:	003fe606 	br	807e48 <_malloc_trim_r+0x80>
  807eb0:	0803d980 	call	803d98 <_sbrk_r>
  807eb4:	99800217 	ldw	r6,8(r19)
  807eb8:	100f883a 	mov	r7,r2
  807ebc:	9009883a 	mov	r4,r18
  807ec0:	1187c83a 	sub	r3,r2,r6
  807ec4:	008003c4 	movi	r2,15
  807ec8:	19400054 	ori	r5,r3,1
  807ecc:	10ffdc0e 	bge	r2,r3,807e40 <_malloc_trim_r+0x78>
  807ed0:	00802074 	movhi	r2,129
  807ed4:	1097c004 	addi	r2,r2,24320
  807ed8:	10c00017 	ldw	r3,0(r2)
  807edc:	00802074 	movhi	r2,129
  807ee0:	109f3f04 	addi	r2,r2,31996
  807ee4:	31400115 	stw	r5,4(r6)
  807ee8:	38c7c83a 	sub	r3,r7,r3
  807eec:	10c00015 	stw	r3,0(r2)
  807ef0:	003fd306 	br	807e40 <_malloc_trim_r+0x78>

00807ef4 <_free_r>:
  807ef4:	defffd04 	addi	sp,sp,-12
  807ef8:	dc400115 	stw	r17,4(sp)
  807efc:	dc000015 	stw	r16,0(sp)
  807f00:	dfc00215 	stw	ra,8(sp)
  807f04:	2821883a 	mov	r16,r5
  807f08:	2023883a 	mov	r17,r4
  807f0c:	28005a26 	beq	r5,zero,808078 <_free_r+0x184>
  807f10:	080c8100 	call	80c810 <__malloc_lock>
  807f14:	823ffe04 	addi	r8,r16,-8
  807f18:	41400117 	ldw	r5,4(r8)
  807f1c:	00bfff84 	movi	r2,-2
  807f20:	02802074 	movhi	r10,129
  807f24:	52921604 	addi	r10,r10,18520
  807f28:	288e703a 	and	r7,r5,r2
  807f2c:	41cd883a 	add	r6,r8,r7
  807f30:	30c00117 	ldw	r3,4(r6)
  807f34:	51000217 	ldw	r4,8(r10)
  807f38:	00bfff04 	movi	r2,-4
  807f3c:	1892703a 	and	r9,r3,r2
  807f40:	5017883a 	mov	r11,r10
  807f44:	31006726 	beq	r6,r4,8080e4 <_free_r+0x1f0>
  807f48:	2880004c 	andi	r2,r5,1
  807f4c:	1005003a 	cmpeq	r2,r2,zero
  807f50:	32400115 	stw	r9,4(r6)
  807f54:	10001a1e 	bne	r2,zero,807fc0 <_free_r+0xcc>
  807f58:	000b883a 	mov	r5,zero
  807f5c:	3247883a 	add	r3,r6,r9
  807f60:	18800117 	ldw	r2,4(r3)
  807f64:	1080004c 	andi	r2,r2,1
  807f68:	1000231e 	bne	r2,zero,807ff8 <_free_r+0x104>
  807f6c:	280ac03a 	cmpne	r5,r5,zero
  807f70:	3a4f883a 	add	r7,r7,r9
  807f74:	2800451e 	bne	r5,zero,80808c <_free_r+0x198>
  807f78:	31000217 	ldw	r4,8(r6)
  807f7c:	00802074 	movhi	r2,129
  807f80:	10921804 	addi	r2,r2,18528
  807f84:	20807b26 	beq	r4,r2,808174 <_free_r+0x280>
  807f88:	30800317 	ldw	r2,12(r6)
  807f8c:	3a07883a 	add	r3,r7,r8
  807f90:	19c00015 	stw	r7,0(r3)
  807f94:	11000215 	stw	r4,8(r2)
  807f98:	20800315 	stw	r2,12(r4)
  807f9c:	38800054 	ori	r2,r7,1
  807fa0:	40800115 	stw	r2,4(r8)
  807fa4:	28001a26 	beq	r5,zero,808010 <_free_r+0x11c>
  807fa8:	8809883a 	mov	r4,r17
  807fac:	dfc00217 	ldw	ra,8(sp)
  807fb0:	dc400117 	ldw	r17,4(sp)
  807fb4:	dc000017 	ldw	r16,0(sp)
  807fb8:	dec00304 	addi	sp,sp,12
  807fbc:	080c8141 	jmpi	80c814 <__malloc_unlock>
  807fc0:	80bffe17 	ldw	r2,-8(r16)
  807fc4:	50c00204 	addi	r3,r10,8
  807fc8:	4091c83a 	sub	r8,r8,r2
  807fcc:	41000217 	ldw	r4,8(r8)
  807fd0:	388f883a 	add	r7,r7,r2
  807fd4:	20c06126 	beq	r4,r3,80815c <_free_r+0x268>
  807fd8:	40800317 	ldw	r2,12(r8)
  807fdc:	3247883a 	add	r3,r6,r9
  807fe0:	000b883a 	mov	r5,zero
  807fe4:	11000215 	stw	r4,8(r2)
  807fe8:	20800315 	stw	r2,12(r4)
  807fec:	18800117 	ldw	r2,4(r3)
  807ff0:	1080004c 	andi	r2,r2,1
  807ff4:	103fdd26 	beq	r2,zero,807f6c <_free_r+0x78>
  807ff8:	38800054 	ori	r2,r7,1
  807ffc:	3a07883a 	add	r3,r7,r8
  808000:	280ac03a 	cmpne	r5,r5,zero
  808004:	40800115 	stw	r2,4(r8)
  808008:	19c00015 	stw	r7,0(r3)
  80800c:	283fe61e 	bne	r5,zero,807fa8 <_free_r+0xb4>
  808010:	00807fc4 	movi	r2,511
  808014:	11c01f2e 	bgeu	r2,r7,808094 <_free_r+0x1a0>
  808018:	3806d27a 	srli	r3,r7,9
  80801c:	1800481e 	bne	r3,zero,808140 <_free_r+0x24c>
  808020:	3804d0fa 	srli	r2,r7,3
  808024:	100690fa 	slli	r3,r2,3
  808028:	1acd883a 	add	r6,r3,r11
  80802c:	31400217 	ldw	r5,8(r6)
  808030:	31405926 	beq	r6,r5,808198 <_free_r+0x2a4>
  808034:	28800117 	ldw	r2,4(r5)
  808038:	00ffff04 	movi	r3,-4
  80803c:	10c4703a 	and	r2,r2,r3
  808040:	3880022e 	bgeu	r7,r2,80804c <_free_r+0x158>
  808044:	29400217 	ldw	r5,8(r5)
  808048:	317ffa1e 	bne	r6,r5,808034 <_free_r+0x140>
  80804c:	29800317 	ldw	r6,12(r5)
  808050:	41800315 	stw	r6,12(r8)
  808054:	41400215 	stw	r5,8(r8)
  808058:	8809883a 	mov	r4,r17
  80805c:	2a000315 	stw	r8,12(r5)
  808060:	32000215 	stw	r8,8(r6)
  808064:	dfc00217 	ldw	ra,8(sp)
  808068:	dc400117 	ldw	r17,4(sp)
  80806c:	dc000017 	ldw	r16,0(sp)
  808070:	dec00304 	addi	sp,sp,12
  808074:	080c8141 	jmpi	80c814 <__malloc_unlock>
  808078:	dfc00217 	ldw	ra,8(sp)
  80807c:	dc400117 	ldw	r17,4(sp)
  808080:	dc000017 	ldw	r16,0(sp)
  808084:	dec00304 	addi	sp,sp,12
  808088:	f800283a 	ret
  80808c:	31000217 	ldw	r4,8(r6)
  808090:	003fbd06 	br	807f88 <_free_r+0x94>
  808094:	3806d0fa 	srli	r3,r7,3
  808098:	00800044 	movi	r2,1
  80809c:	51400117 	ldw	r5,4(r10)
  8080a0:	180890fa 	slli	r4,r3,3
  8080a4:	1807d0ba 	srai	r3,r3,2
  8080a8:	22c9883a 	add	r4,r4,r11
  8080ac:	21800217 	ldw	r6,8(r4)
  8080b0:	10c4983a 	sll	r2,r2,r3
  8080b4:	41000315 	stw	r4,12(r8)
  8080b8:	41800215 	stw	r6,8(r8)
  8080bc:	288ab03a 	or	r5,r5,r2
  8080c0:	22000215 	stw	r8,8(r4)
  8080c4:	8809883a 	mov	r4,r17
  8080c8:	51400115 	stw	r5,4(r10)
  8080cc:	32000315 	stw	r8,12(r6)
  8080d0:	dfc00217 	ldw	ra,8(sp)
  8080d4:	dc400117 	ldw	r17,4(sp)
  8080d8:	dc000017 	ldw	r16,0(sp)
  8080dc:	dec00304 	addi	sp,sp,12
  8080e0:	080c8141 	jmpi	80c814 <__malloc_unlock>
  8080e4:	2880004c 	andi	r2,r5,1
  8080e8:	3a4d883a 	add	r6,r7,r9
  8080ec:	1000071e 	bne	r2,zero,80810c <_free_r+0x218>
  8080f0:	80bffe17 	ldw	r2,-8(r16)
  8080f4:	4091c83a 	sub	r8,r8,r2
  8080f8:	41000317 	ldw	r4,12(r8)
  8080fc:	40c00217 	ldw	r3,8(r8)
  808100:	308d883a 	add	r6,r6,r2
  808104:	20c00215 	stw	r3,8(r4)
  808108:	19000315 	stw	r4,12(r3)
  80810c:	00802074 	movhi	r2,129
  808110:	1097bf04 	addi	r2,r2,24316
  808114:	11000017 	ldw	r4,0(r2)
  808118:	30c00054 	ori	r3,r6,1
  80811c:	52000215 	stw	r8,8(r10)
  808120:	40c00115 	stw	r3,4(r8)
  808124:	313fa036 	bltu	r6,r4,807fa8 <_free_r+0xb4>
  808128:	00802074 	movhi	r2,129
  80812c:	109f2304 	addi	r2,r2,31884
  808130:	11400017 	ldw	r5,0(r2)
  808134:	8809883a 	mov	r4,r17
  808138:	0807dc80 	call	807dc8 <_malloc_trim_r>
  80813c:	003f9a06 	br	807fa8 <_free_r+0xb4>
  808140:	00800104 	movi	r2,4
  808144:	10c0072e 	bgeu	r2,r3,808164 <_free_r+0x270>
  808148:	00800504 	movi	r2,20
  80814c:	10c01936 	bltu	r2,r3,8081b4 <_free_r+0x2c0>
  808150:	188016c4 	addi	r2,r3,91
  808154:	100690fa 	slli	r3,r2,3
  808158:	003fb306 	br	808028 <_free_r+0x134>
  80815c:	01400044 	movi	r5,1
  808160:	003f7e06 	br	807f5c <_free_r+0x68>
  808164:	3804d1ba 	srli	r2,r7,6
  808168:	10800e04 	addi	r2,r2,56
  80816c:	100690fa 	slli	r3,r2,3
  808170:	003fad06 	br	808028 <_free_r+0x134>
  808174:	22000315 	stw	r8,12(r4)
  808178:	22000215 	stw	r8,8(r4)
  80817c:	3a05883a 	add	r2,r7,r8
  808180:	38c00054 	ori	r3,r7,1
  808184:	11c00015 	stw	r7,0(r2)
  808188:	41000215 	stw	r4,8(r8)
  80818c:	40c00115 	stw	r3,4(r8)
  808190:	41000315 	stw	r4,12(r8)
  808194:	003f8406 	br	807fa8 <_free_r+0xb4>
  808198:	1005d0ba 	srai	r2,r2,2
  80819c:	00c00044 	movi	r3,1
  8081a0:	51000117 	ldw	r4,4(r10)
  8081a4:	1886983a 	sll	r3,r3,r2
  8081a8:	20c8b03a 	or	r4,r4,r3
  8081ac:	51000115 	stw	r4,4(r10)
  8081b0:	003fa706 	br	808050 <_free_r+0x15c>
  8081b4:	00801504 	movi	r2,84
  8081b8:	10c00436 	bltu	r2,r3,8081cc <_free_r+0x2d8>
  8081bc:	3804d33a 	srli	r2,r7,12
  8081c0:	10801b84 	addi	r2,r2,110
  8081c4:	100690fa 	slli	r3,r2,3
  8081c8:	003f9706 	br	808028 <_free_r+0x134>
  8081cc:	00805504 	movi	r2,340
  8081d0:	10c00436 	bltu	r2,r3,8081e4 <_free_r+0x2f0>
  8081d4:	3804d3fa 	srli	r2,r7,15
  8081d8:	10801dc4 	addi	r2,r2,119
  8081dc:	100690fa 	slli	r3,r2,3
  8081e0:	003f9106 	br	808028 <_free_r+0x134>
  8081e4:	00815504 	movi	r2,1364
  8081e8:	10c0032e 	bgeu	r2,r3,8081f8 <_free_r+0x304>
  8081ec:	00801f84 	movi	r2,126
  8081f0:	00c0fc04 	movi	r3,1008
  8081f4:	003f8c06 	br	808028 <_free_r+0x134>
  8081f8:	3804d4ba 	srli	r2,r7,18
  8081fc:	10801f04 	addi	r2,r2,124
  808200:	100690fa 	slli	r3,r2,3
  808204:	003f8806 	br	808028 <_free_r+0x134>

00808208 <__sfvwrite_r>:
  808208:	30800217 	ldw	r2,8(r6)
  80820c:	defff504 	addi	sp,sp,-44
  808210:	df000915 	stw	fp,36(sp)
  808214:	dd800715 	stw	r22,28(sp)
  808218:	dc800315 	stw	r18,12(sp)
  80821c:	dfc00a15 	stw	ra,40(sp)
  808220:	ddc00815 	stw	r23,32(sp)
  808224:	dd400615 	stw	r21,24(sp)
  808228:	dd000515 	stw	r20,20(sp)
  80822c:	dcc00415 	stw	r19,16(sp)
  808230:	dc400215 	stw	r17,8(sp)
  808234:	dc000115 	stw	r16,4(sp)
  808238:	302d883a 	mov	r22,r6
  80823c:	2039883a 	mov	fp,r4
  808240:	2825883a 	mov	r18,r5
  808244:	10001c26 	beq	r2,zero,8082b8 <__sfvwrite_r+0xb0>
  808248:	29c0030b 	ldhu	r7,12(r5)
  80824c:	3880020c 	andi	r2,r7,8
  808250:	10002726 	beq	r2,zero,8082f0 <__sfvwrite_r+0xe8>
  808254:	28800417 	ldw	r2,16(r5)
  808258:	10002526 	beq	r2,zero,8082f0 <__sfvwrite_r+0xe8>
  80825c:	3880008c 	andi	r2,r7,2
  808260:	b5400017 	ldw	r21,0(r22)
  808264:	10002826 	beq	r2,zero,808308 <__sfvwrite_r+0x100>
  808268:	0021883a 	mov	r16,zero
  80826c:	0023883a 	mov	r17,zero
  808270:	880d883a 	mov	r6,r17
  808274:	e009883a 	mov	r4,fp
  808278:	00810004 	movi	r2,1024
  80827c:	80006e26 	beq	r16,zero,808438 <__sfvwrite_r+0x230>
  808280:	800f883a 	mov	r7,r16
  808284:	91400717 	ldw	r5,28(r18)
  808288:	1400012e 	bgeu	r2,r16,808290 <__sfvwrite_r+0x88>
  80828c:	100f883a 	mov	r7,r2
  808290:	90c00917 	ldw	r3,36(r18)
  808294:	183ee83a 	callr	r3
  808298:	1007883a 	mov	r3,r2
  80829c:	80a1c83a 	sub	r16,r16,r2
  8082a0:	88a3883a 	add	r17,r17,r2
  8082a4:	00806d0e 	bge	zero,r2,80845c <__sfvwrite_r+0x254>
  8082a8:	b0800217 	ldw	r2,8(r22)
  8082ac:	10c5c83a 	sub	r2,r2,r3
  8082b0:	b0800215 	stw	r2,8(r22)
  8082b4:	103fee1e 	bne	r2,zero,808270 <__sfvwrite_r+0x68>
  8082b8:	0009883a 	mov	r4,zero
  8082bc:	2005883a 	mov	r2,r4
  8082c0:	dfc00a17 	ldw	ra,40(sp)
  8082c4:	df000917 	ldw	fp,36(sp)
  8082c8:	ddc00817 	ldw	r23,32(sp)
  8082cc:	dd800717 	ldw	r22,28(sp)
  8082d0:	dd400617 	ldw	r21,24(sp)
  8082d4:	dd000517 	ldw	r20,20(sp)
  8082d8:	dcc00417 	ldw	r19,16(sp)
  8082dc:	dc800317 	ldw	r18,12(sp)
  8082e0:	dc400217 	ldw	r17,8(sp)
  8082e4:	dc000117 	ldw	r16,4(sp)
  8082e8:	dec00b04 	addi	sp,sp,44
  8082ec:	f800283a 	ret
  8082f0:	0805dbc0 	call	805dbc <__swsetup_r>
  8082f4:	1000e41e 	bne	r2,zero,808688 <__sfvwrite_r+0x480>
  8082f8:	91c0030b 	ldhu	r7,12(r18)
  8082fc:	b5400017 	ldw	r21,0(r22)
  808300:	3880008c 	andi	r2,r7,2
  808304:	103fd81e 	bne	r2,zero,808268 <__sfvwrite_r+0x60>
  808308:	3880004c 	andi	r2,r7,1
  80830c:	1005003a 	cmpeq	r2,r2,zero
  808310:	10005726 	beq	r2,zero,808470 <__sfvwrite_r+0x268>
  808314:	0029883a 	mov	r20,zero
  808318:	002f883a 	mov	r23,zero
  80831c:	a0004226 	beq	r20,zero,808428 <__sfvwrite_r+0x220>
  808320:	3880800c 	andi	r2,r7,512
  808324:	94000217 	ldw	r16,8(r18)
  808328:	10008b26 	beq	r2,zero,808558 <__sfvwrite_r+0x350>
  80832c:	800d883a 	mov	r6,r16
  808330:	a400a536 	bltu	r20,r16,8085c8 <__sfvwrite_r+0x3c0>
  808334:	3881200c 	andi	r2,r7,1152
  808338:	10002726 	beq	r2,zero,8083d8 <__sfvwrite_r+0x1d0>
  80833c:	90800517 	ldw	r2,20(r18)
  808340:	92000417 	ldw	r8,16(r18)
  808344:	91400017 	ldw	r5,0(r18)
  808348:	1087883a 	add	r3,r2,r2
  80834c:	1887883a 	add	r3,r3,r2
  808350:	1808d7fa 	srli	r4,r3,31
  808354:	2a21c83a 	sub	r16,r5,r8
  808358:	80800044 	addi	r2,r16,1
  80835c:	20c9883a 	add	r4,r4,r3
  808360:	2027d07a 	srai	r19,r4,1
  808364:	a085883a 	add	r2,r20,r2
  808368:	980d883a 	mov	r6,r19
  80836c:	9880022e 	bgeu	r19,r2,808378 <__sfvwrite_r+0x170>
  808370:	1027883a 	mov	r19,r2
  808374:	100d883a 	mov	r6,r2
  808378:	3881000c 	andi	r2,r7,1024
  80837c:	1000b826 	beq	r2,zero,808660 <__sfvwrite_r+0x458>
  808380:	300b883a 	mov	r5,r6
  808384:	e009883a 	mov	r4,fp
  808388:	08034100 	call	803410 <_malloc_r>
  80838c:	10003126 	beq	r2,zero,808454 <__sfvwrite_r+0x24c>
  808390:	91400417 	ldw	r5,16(r18)
  808394:	1009883a 	mov	r4,r2
  808398:	800d883a 	mov	r6,r16
  80839c:	1023883a 	mov	r17,r2
  8083a0:	0808b600 	call	808b60 <memcpy>
  8083a4:	90c0030b 	ldhu	r3,12(r18)
  8083a8:	00beffc4 	movi	r2,-1025
  8083ac:	1886703a 	and	r3,r3,r2
  8083b0:	18c02014 	ori	r3,r3,128
  8083b4:	90c0030d 	sth	r3,12(r18)
  8083b8:	9c07c83a 	sub	r3,r19,r16
  8083bc:	8c05883a 	add	r2,r17,r16
  8083c0:	a00d883a 	mov	r6,r20
  8083c4:	a021883a 	mov	r16,r20
  8083c8:	90800015 	stw	r2,0(r18)
  8083cc:	90c00215 	stw	r3,8(r18)
  8083d0:	94400415 	stw	r17,16(r18)
  8083d4:	94c00515 	stw	r19,20(r18)
  8083d8:	91000017 	ldw	r4,0(r18)
  8083dc:	b80b883a 	mov	r5,r23
  8083e0:	a023883a 	mov	r17,r20
  8083e4:	0808c000 	call	808c00 <memmove>
  8083e8:	90c00217 	ldw	r3,8(r18)
  8083ec:	90800017 	ldw	r2,0(r18)
  8083f0:	a027883a 	mov	r19,r20
  8083f4:	1c07c83a 	sub	r3,r3,r16
  8083f8:	1405883a 	add	r2,r2,r16
  8083fc:	90c00215 	stw	r3,8(r18)
  808400:	a021883a 	mov	r16,r20
  808404:	90800015 	stw	r2,0(r18)
  808408:	b0800217 	ldw	r2,8(r22)
  80840c:	1405c83a 	sub	r2,r2,r16
  808410:	b0800215 	stw	r2,8(r22)
  808414:	103fa826 	beq	r2,zero,8082b8 <__sfvwrite_r+0xb0>
  808418:	a469c83a 	sub	r20,r20,r17
  80841c:	91c0030b 	ldhu	r7,12(r18)
  808420:	bcef883a 	add	r23,r23,r19
  808424:	a03fbe1e 	bne	r20,zero,808320 <__sfvwrite_r+0x118>
  808428:	adc00017 	ldw	r23,0(r21)
  80842c:	ad000117 	ldw	r20,4(r21)
  808430:	ad400204 	addi	r21,r21,8
  808434:	003fb906 	br	80831c <__sfvwrite_r+0x114>
  808438:	ac400017 	ldw	r17,0(r21)
  80843c:	ac000117 	ldw	r16,4(r21)
  808440:	ad400204 	addi	r21,r21,8
  808444:	003f8a06 	br	808270 <__sfvwrite_r+0x68>
  808448:	91400417 	ldw	r5,16(r18)
  80844c:	e009883a 	mov	r4,fp
  808450:	0807ef40 	call	807ef4 <_free_r>
  808454:	00800304 	movi	r2,12
  808458:	e0800015 	stw	r2,0(fp)
  80845c:	9080030b 	ldhu	r2,12(r18)
  808460:	013fffc4 	movi	r4,-1
  808464:	10801014 	ori	r2,r2,64
  808468:	9080030d 	sth	r2,12(r18)
  80846c:	003f9306 	br	8082bc <__sfvwrite_r+0xb4>
  808470:	0027883a 	mov	r19,zero
  808474:	002f883a 	mov	r23,zero
  808478:	d8000015 	stw	zero,0(sp)
  80847c:	0029883a 	mov	r20,zero
  808480:	98001e26 	beq	r19,zero,8084fc <__sfvwrite_r+0x2f4>
  808484:	d8c00017 	ldw	r3,0(sp)
  808488:	1804c03a 	cmpne	r2,r3,zero
  80848c:	10005e26 	beq	r2,zero,808608 <__sfvwrite_r+0x400>
  808490:	9821883a 	mov	r16,r19
  808494:	a4c0012e 	bgeu	r20,r19,80849c <__sfvwrite_r+0x294>
  808498:	a021883a 	mov	r16,r20
  80849c:	91000017 	ldw	r4,0(r18)
  8084a0:	90800417 	ldw	r2,16(r18)
  8084a4:	91800217 	ldw	r6,8(r18)
  8084a8:	91c00517 	ldw	r7,20(r18)
  8084ac:	1100022e 	bgeu	r2,r4,8084b8 <__sfvwrite_r+0x2b0>
  8084b0:	31e3883a 	add	r17,r6,r7
  8084b4:	8c001616 	blt	r17,r16,808510 <__sfvwrite_r+0x308>
  8084b8:	81c03816 	blt	r16,r7,80859c <__sfvwrite_r+0x394>
  8084bc:	90c00917 	ldw	r3,36(r18)
  8084c0:	91400717 	ldw	r5,28(r18)
  8084c4:	e009883a 	mov	r4,fp
  8084c8:	b80d883a 	mov	r6,r23
  8084cc:	183ee83a 	callr	r3
  8084d0:	1023883a 	mov	r17,r2
  8084d4:	00bfe10e 	bge	zero,r2,80845c <__sfvwrite_r+0x254>
  8084d8:	a469c83a 	sub	r20,r20,r17
  8084dc:	a0001826 	beq	r20,zero,808540 <__sfvwrite_r+0x338>
  8084e0:	b0800217 	ldw	r2,8(r22)
  8084e4:	1445c83a 	sub	r2,r2,r17
  8084e8:	b0800215 	stw	r2,8(r22)
  8084ec:	103f7226 	beq	r2,zero,8082b8 <__sfvwrite_r+0xb0>
  8084f0:	9c67c83a 	sub	r19,r19,r17
  8084f4:	bc6f883a 	add	r23,r23,r17
  8084f8:	983fe21e 	bne	r19,zero,808484 <__sfvwrite_r+0x27c>
  8084fc:	adc00017 	ldw	r23,0(r21)
  808500:	acc00117 	ldw	r19,4(r21)
  808504:	ad400204 	addi	r21,r21,8
  808508:	d8000015 	stw	zero,0(sp)
  80850c:	003fdc06 	br	808480 <__sfvwrite_r+0x278>
  808510:	b80b883a 	mov	r5,r23
  808514:	880d883a 	mov	r6,r17
  808518:	0808c000 	call	808c00 <memmove>
  80851c:	90c00017 	ldw	r3,0(r18)
  808520:	e009883a 	mov	r4,fp
  808524:	900b883a 	mov	r5,r18
  808528:	1c47883a 	add	r3,r3,r17
  80852c:	90c00015 	stw	r3,0(r18)
  808530:	08078a40 	call	8078a4 <_fflush_r>
  808534:	103fc91e 	bne	r2,zero,80845c <__sfvwrite_r+0x254>
  808538:	a469c83a 	sub	r20,r20,r17
  80853c:	a03fe81e 	bne	r20,zero,8084e0 <__sfvwrite_r+0x2d8>
  808540:	e009883a 	mov	r4,fp
  808544:	900b883a 	mov	r5,r18
  808548:	08078a40 	call	8078a4 <_fflush_r>
  80854c:	103fc31e 	bne	r2,zero,80845c <__sfvwrite_r+0x254>
  808550:	d8000015 	stw	zero,0(sp)
  808554:	003fe206 	br	8084e0 <__sfvwrite_r+0x2d8>
  808558:	91000017 	ldw	r4,0(r18)
  80855c:	90800417 	ldw	r2,16(r18)
  808560:	1100022e 	bgeu	r2,r4,80856c <__sfvwrite_r+0x364>
  808564:	8023883a 	mov	r17,r16
  808568:	85003136 	bltu	r16,r20,808630 <__sfvwrite_r+0x428>
  80856c:	91c00517 	ldw	r7,20(r18)
  808570:	a1c01836 	bltu	r20,r7,8085d4 <__sfvwrite_r+0x3cc>
  808574:	90c00917 	ldw	r3,36(r18)
  808578:	91400717 	ldw	r5,28(r18)
  80857c:	e009883a 	mov	r4,fp
  808580:	b80d883a 	mov	r6,r23
  808584:	183ee83a 	callr	r3
  808588:	1021883a 	mov	r16,r2
  80858c:	00bfb30e 	bge	zero,r2,80845c <__sfvwrite_r+0x254>
  808590:	1023883a 	mov	r17,r2
  808594:	1027883a 	mov	r19,r2
  808598:	003f9b06 	br	808408 <__sfvwrite_r+0x200>
  80859c:	b80b883a 	mov	r5,r23
  8085a0:	800d883a 	mov	r6,r16
  8085a4:	0808c000 	call	808c00 <memmove>
  8085a8:	90c00217 	ldw	r3,8(r18)
  8085ac:	90800017 	ldw	r2,0(r18)
  8085b0:	8023883a 	mov	r17,r16
  8085b4:	1c07c83a 	sub	r3,r3,r16
  8085b8:	1405883a 	add	r2,r2,r16
  8085bc:	90c00215 	stw	r3,8(r18)
  8085c0:	90800015 	stw	r2,0(r18)
  8085c4:	003fc406 	br	8084d8 <__sfvwrite_r+0x2d0>
  8085c8:	a00d883a 	mov	r6,r20
  8085cc:	a021883a 	mov	r16,r20
  8085d0:	003f8106 	br	8083d8 <__sfvwrite_r+0x1d0>
  8085d4:	b80b883a 	mov	r5,r23
  8085d8:	a00d883a 	mov	r6,r20
  8085dc:	0808c000 	call	808c00 <memmove>
  8085e0:	90c00217 	ldw	r3,8(r18)
  8085e4:	90800017 	ldw	r2,0(r18)
  8085e8:	a021883a 	mov	r16,r20
  8085ec:	1d07c83a 	sub	r3,r3,r20
  8085f0:	1505883a 	add	r2,r2,r20
  8085f4:	a023883a 	mov	r17,r20
  8085f8:	a027883a 	mov	r19,r20
  8085fc:	90c00215 	stw	r3,8(r18)
  808600:	90800015 	stw	r2,0(r18)
  808604:	003f8006 	br	808408 <__sfvwrite_r+0x200>
  808608:	b809883a 	mov	r4,r23
  80860c:	01400284 	movi	r5,10
  808610:	980d883a 	mov	r6,r19
  808614:	0808a7c0 	call	808a7c <memchr>
  808618:	10001726 	beq	r2,zero,808678 <__sfvwrite_r+0x470>
  80861c:	15c5c83a 	sub	r2,r2,r23
  808620:	15000044 	addi	r20,r2,1
  808624:	00800044 	movi	r2,1
  808628:	d8800015 	stw	r2,0(sp)
  80862c:	003f9806 	br	808490 <__sfvwrite_r+0x288>
  808630:	b80b883a 	mov	r5,r23
  808634:	800d883a 	mov	r6,r16
  808638:	0808c000 	call	808c00 <memmove>
  80863c:	90c00017 	ldw	r3,0(r18)
  808640:	e009883a 	mov	r4,fp
  808644:	900b883a 	mov	r5,r18
  808648:	1c07883a 	add	r3,r3,r16
  80864c:	90c00015 	stw	r3,0(r18)
  808650:	8027883a 	mov	r19,r16
  808654:	08078a40 	call	8078a4 <_fflush_r>
  808658:	103f6b26 	beq	r2,zero,808408 <__sfvwrite_r+0x200>
  80865c:	003f7f06 	br	80845c <__sfvwrite_r+0x254>
  808660:	400b883a 	mov	r5,r8
  808664:	e009883a 	mov	r4,fp
  808668:	0809f580 	call	809f58 <_realloc_r>
  80866c:	103f7626 	beq	r2,zero,808448 <__sfvwrite_r+0x240>
  808670:	1023883a 	mov	r17,r2
  808674:	003f5006 	br	8083b8 <__sfvwrite_r+0x1b0>
  808678:	00c00044 	movi	r3,1
  80867c:	9d000044 	addi	r20,r19,1
  808680:	d8c00015 	stw	r3,0(sp)
  808684:	003f8206 	br	808490 <__sfvwrite_r+0x288>
  808688:	9080030b 	ldhu	r2,12(r18)
  80868c:	00c00244 	movi	r3,9
  808690:	013fffc4 	movi	r4,-1
  808694:	10801014 	ori	r2,r2,64
  808698:	9080030d 	sth	r2,12(r18)
  80869c:	e0c00015 	stw	r3,0(fp)
  8086a0:	003f0606 	br	8082bc <__sfvwrite_r+0xb4>

008086a4 <_fwalk_reent>:
  8086a4:	defff704 	addi	sp,sp,-36
  8086a8:	dcc00315 	stw	r19,12(sp)
  8086ac:	24c0b804 	addi	r19,r4,736
  8086b0:	dd800615 	stw	r22,24(sp)
  8086b4:	dd400515 	stw	r21,20(sp)
  8086b8:	dfc00815 	stw	ra,32(sp)
  8086bc:	ddc00715 	stw	r23,28(sp)
  8086c0:	dd000415 	stw	r20,16(sp)
  8086c4:	dc800215 	stw	r18,8(sp)
  8086c8:	dc400115 	stw	r17,4(sp)
  8086cc:	dc000015 	stw	r16,0(sp)
  8086d0:	202b883a 	mov	r21,r4
  8086d4:	282d883a 	mov	r22,r5
  8086d8:	0807b2c0 	call	807b2c <__sfp_lock_acquire>
  8086dc:	98002126 	beq	r19,zero,808764 <_fwalk_reent+0xc0>
  8086e0:	002f883a 	mov	r23,zero
  8086e4:	9c800117 	ldw	r18,4(r19)
  8086e8:	9c000217 	ldw	r16,8(r19)
  8086ec:	90bfffc4 	addi	r2,r18,-1
  8086f0:	10000d16 	blt	r2,zero,808728 <_fwalk_reent+0x84>
  8086f4:	0023883a 	mov	r17,zero
  8086f8:	053fffc4 	movi	r20,-1
  8086fc:	8080030f 	ldh	r2,12(r16)
  808700:	8c400044 	addi	r17,r17,1
  808704:	10000626 	beq	r2,zero,808720 <_fwalk_reent+0x7c>
  808708:	8080038f 	ldh	r2,14(r16)
  80870c:	800b883a 	mov	r5,r16
  808710:	a809883a 	mov	r4,r21
  808714:	15000226 	beq	r2,r20,808720 <_fwalk_reent+0x7c>
  808718:	b03ee83a 	callr	r22
  80871c:	b8aeb03a 	or	r23,r23,r2
  808720:	84001704 	addi	r16,r16,92
  808724:	947ff51e 	bne	r18,r17,8086fc <_fwalk_reent+0x58>
  808728:	9cc00017 	ldw	r19,0(r19)
  80872c:	983fed1e 	bne	r19,zero,8086e4 <_fwalk_reent+0x40>
  808730:	0807b300 	call	807b30 <__sfp_lock_release>
  808734:	b805883a 	mov	r2,r23
  808738:	dfc00817 	ldw	ra,32(sp)
  80873c:	ddc00717 	ldw	r23,28(sp)
  808740:	dd800617 	ldw	r22,24(sp)
  808744:	dd400517 	ldw	r21,20(sp)
  808748:	dd000417 	ldw	r20,16(sp)
  80874c:	dcc00317 	ldw	r19,12(sp)
  808750:	dc800217 	ldw	r18,8(sp)
  808754:	dc400117 	ldw	r17,4(sp)
  808758:	dc000017 	ldw	r16,0(sp)
  80875c:	dec00904 	addi	sp,sp,36
  808760:	f800283a 	ret
  808764:	002f883a 	mov	r23,zero
  808768:	003ff106 	br	808730 <_fwalk_reent+0x8c>

0080876c <_fwalk>:
  80876c:	defff804 	addi	sp,sp,-32
  808770:	dcc00315 	stw	r19,12(sp)
  808774:	24c0b804 	addi	r19,r4,736
  808778:	dd400515 	stw	r21,20(sp)
  80877c:	dfc00715 	stw	ra,28(sp)
  808780:	dd800615 	stw	r22,24(sp)
  808784:	dd000415 	stw	r20,16(sp)
  808788:	dc800215 	stw	r18,8(sp)
  80878c:	dc400115 	stw	r17,4(sp)
  808790:	dc000015 	stw	r16,0(sp)
  808794:	282b883a 	mov	r21,r5
  808798:	0807b2c0 	call	807b2c <__sfp_lock_acquire>
  80879c:	98001f26 	beq	r19,zero,80881c <_fwalk+0xb0>
  8087a0:	002d883a 	mov	r22,zero
  8087a4:	9c800117 	ldw	r18,4(r19)
  8087a8:	9c000217 	ldw	r16,8(r19)
  8087ac:	90bfffc4 	addi	r2,r18,-1
  8087b0:	10000c16 	blt	r2,zero,8087e4 <_fwalk+0x78>
  8087b4:	0023883a 	mov	r17,zero
  8087b8:	053fffc4 	movi	r20,-1
  8087bc:	8080030f 	ldh	r2,12(r16)
  8087c0:	8c400044 	addi	r17,r17,1
  8087c4:	10000526 	beq	r2,zero,8087dc <_fwalk+0x70>
  8087c8:	8080038f 	ldh	r2,14(r16)
  8087cc:	8009883a 	mov	r4,r16
  8087d0:	15000226 	beq	r2,r20,8087dc <_fwalk+0x70>
  8087d4:	a83ee83a 	callr	r21
  8087d8:	b0acb03a 	or	r22,r22,r2
  8087dc:	84001704 	addi	r16,r16,92
  8087e0:	947ff61e 	bne	r18,r17,8087bc <_fwalk+0x50>
  8087e4:	9cc00017 	ldw	r19,0(r19)
  8087e8:	983fee1e 	bne	r19,zero,8087a4 <_fwalk+0x38>
  8087ec:	0807b300 	call	807b30 <__sfp_lock_release>
  8087f0:	b005883a 	mov	r2,r22
  8087f4:	dfc00717 	ldw	ra,28(sp)
  8087f8:	dd800617 	ldw	r22,24(sp)
  8087fc:	dd400517 	ldw	r21,20(sp)
  808800:	dd000417 	ldw	r20,16(sp)
  808804:	dcc00317 	ldw	r19,12(sp)
  808808:	dc800217 	ldw	r18,8(sp)
  80880c:	dc400117 	ldw	r17,4(sp)
  808810:	dc000017 	ldw	r16,0(sp)
  808814:	dec00804 	addi	sp,sp,32
  808818:	f800283a 	ret
  80881c:	002d883a 	mov	r22,zero
  808820:	003ff206 	br	8087ec <_fwalk+0x80>

00808824 <__locale_charset>:
  808824:	d0a00517 	ldw	r2,-32748(gp)
  808828:	f800283a 	ret

0080882c <_localeconv_r>:
  80882c:	00802074 	movhi	r2,129
  808830:	10902a04 	addi	r2,r2,16552
  808834:	f800283a 	ret

00808838 <localeconv>:
  808838:	00802074 	movhi	r2,129
  80883c:	1097bd04 	addi	r2,r2,24308
  808840:	11000017 	ldw	r4,0(r2)
  808844:	080882c1 	jmpi	80882c <_localeconv_r>

00808848 <_setlocale_r>:
  808848:	defffc04 	addi	sp,sp,-16
  80884c:	00c02074 	movhi	r3,129
  808850:	18cf3804 	addi	r3,r3,15584
  808854:	dc800215 	stw	r18,8(sp)
  808858:	dc400115 	stw	r17,4(sp)
  80885c:	dc000015 	stw	r16,0(sp)
  808860:	2023883a 	mov	r17,r4
  808864:	2825883a 	mov	r18,r5
  808868:	dfc00315 	stw	ra,12(sp)
  80886c:	3021883a 	mov	r16,r6
  808870:	3009883a 	mov	r4,r6
  808874:	180b883a 	mov	r5,r3
  808878:	30000926 	beq	r6,zero,8088a0 <_setlocale_r+0x58>
  80887c:	080a8e80 	call	80a8e8 <strcmp>
  808880:	8009883a 	mov	r4,r16
  808884:	01402074 	movhi	r5,129
  808888:	294f8d04 	addi	r5,r5,15924
  80888c:	10000b1e 	bne	r2,zero,8088bc <_setlocale_r+0x74>
  808890:	8c000d15 	stw	r16,52(r17)
  808894:	8c800c15 	stw	r18,48(r17)
  808898:	00c02074 	movhi	r3,129
  80889c:	18cf3804 	addi	r3,r3,15584
  8088a0:	1805883a 	mov	r2,r3
  8088a4:	dfc00317 	ldw	ra,12(sp)
  8088a8:	dc800217 	ldw	r18,8(sp)
  8088ac:	dc400117 	ldw	r17,4(sp)
  8088b0:	dc000017 	ldw	r16,0(sp)
  8088b4:	dec00404 	addi	sp,sp,16
  8088b8:	f800283a 	ret
  8088bc:	080a8e80 	call	80a8e8 <strcmp>
  8088c0:	0007883a 	mov	r3,zero
  8088c4:	103ff226 	beq	r2,zero,808890 <_setlocale_r+0x48>
  8088c8:	003ff506 	br	8088a0 <_setlocale_r+0x58>

008088cc <setlocale>:
  8088cc:	01802074 	movhi	r6,129
  8088d0:	3197bd04 	addi	r6,r6,24308
  8088d4:	2007883a 	mov	r3,r4
  8088d8:	31000017 	ldw	r4,0(r6)
  8088dc:	280d883a 	mov	r6,r5
  8088e0:	180b883a 	mov	r5,r3
  8088e4:	08088481 	jmpi	808848 <_setlocale_r>

008088e8 <__smakebuf_r>:
  8088e8:	2880030b 	ldhu	r2,12(r5)
  8088ec:	deffed04 	addi	sp,sp,-76
  8088f0:	dc401015 	stw	r17,64(sp)
  8088f4:	1080008c 	andi	r2,r2,2
  8088f8:	dc000f15 	stw	r16,60(sp)
  8088fc:	dfc01215 	stw	ra,72(sp)
  808900:	dc801115 	stw	r18,68(sp)
  808904:	2821883a 	mov	r16,r5
  808908:	2023883a 	mov	r17,r4
  80890c:	10000b26 	beq	r2,zero,80893c <__smakebuf_r+0x54>
  808910:	28c010c4 	addi	r3,r5,67
  808914:	00800044 	movi	r2,1
  808918:	28800515 	stw	r2,20(r5)
  80891c:	28c00415 	stw	r3,16(r5)
  808920:	28c00015 	stw	r3,0(r5)
  808924:	dfc01217 	ldw	ra,72(sp)
  808928:	dc801117 	ldw	r18,68(sp)
  80892c:	dc401017 	ldw	r17,64(sp)
  808930:	dc000f17 	ldw	r16,60(sp)
  808934:	dec01304 	addi	sp,sp,76
  808938:	f800283a 	ret
  80893c:	2940038f 	ldh	r5,14(r5)
  808940:	28002116 	blt	r5,zero,8089c8 <__smakebuf_r+0xe0>
  808944:	d80d883a 	mov	r6,sp
  808948:	080adc40 	call	80adc4 <_fstat_r>
  80894c:	10001e16 	blt	r2,zero,8089c8 <__smakebuf_r+0xe0>
  808950:	d8800117 	ldw	r2,4(sp)
  808954:	00e00014 	movui	r3,32768
  808958:	113c000c 	andi	r4,r2,61440
  80895c:	20c03126 	beq	r4,r3,808a24 <__smakebuf_r+0x13c>
  808960:	8080030b 	ldhu	r2,12(r16)
  808964:	00c80004 	movi	r3,8192
  808968:	10820014 	ori	r2,r2,2048
  80896c:	8080030d 	sth	r2,12(r16)
  808970:	20c01e26 	beq	r4,r3,8089ec <__smakebuf_r+0x104>
  808974:	04810004 	movi	r18,1024
  808978:	8809883a 	mov	r4,r17
  80897c:	900b883a 	mov	r5,r18
  808980:	08034100 	call	803410 <_malloc_r>
  808984:	1009883a 	mov	r4,r2
  808988:	10003126 	beq	r2,zero,808a50 <__smakebuf_r+0x168>
  80898c:	80c0030b 	ldhu	r3,12(r16)
  808990:	00802034 	movhi	r2,128
  808994:	109f0804 	addi	r2,r2,31776
  808998:	88800f15 	stw	r2,60(r17)
  80899c:	18c02014 	ori	r3,r3,128
  8089a0:	84800515 	stw	r18,20(r16)
  8089a4:	80c0030d 	sth	r3,12(r16)
  8089a8:	81000415 	stw	r4,16(r16)
  8089ac:	81000015 	stw	r4,0(r16)
  8089b0:	dfc01217 	ldw	ra,72(sp)
  8089b4:	dc801117 	ldw	r18,68(sp)
  8089b8:	dc401017 	ldw	r17,64(sp)
  8089bc:	dc000f17 	ldw	r16,60(sp)
  8089c0:	dec01304 	addi	sp,sp,76
  8089c4:	f800283a 	ret
  8089c8:	80c0030b 	ldhu	r3,12(r16)
  8089cc:	1880200c 	andi	r2,r3,128
  8089d0:	10000426 	beq	r2,zero,8089e4 <__smakebuf_r+0xfc>
  8089d4:	04801004 	movi	r18,64
  8089d8:	18820014 	ori	r2,r3,2048
  8089dc:	8080030d 	sth	r2,12(r16)
  8089e0:	003fe506 	br	808978 <__smakebuf_r+0x90>
  8089e4:	04810004 	movi	r18,1024
  8089e8:	003ffb06 	br	8089d8 <__smakebuf_r+0xf0>
  8089ec:	8140038f 	ldh	r5,14(r16)
  8089f0:	8809883a 	mov	r4,r17
  8089f4:	080ae380 	call	80ae38 <_isatty_r>
  8089f8:	103fde26 	beq	r2,zero,808974 <__smakebuf_r+0x8c>
  8089fc:	8080030b 	ldhu	r2,12(r16)
  808a00:	80c010c4 	addi	r3,r16,67
  808a04:	04810004 	movi	r18,1024
  808a08:	10800054 	ori	r2,r2,1
  808a0c:	8080030d 	sth	r2,12(r16)
  808a10:	00800044 	movi	r2,1
  808a14:	80c00415 	stw	r3,16(r16)
  808a18:	80800515 	stw	r2,20(r16)
  808a1c:	80c00015 	stw	r3,0(r16)
  808a20:	003fd506 	br	808978 <__smakebuf_r+0x90>
  808a24:	80c00a17 	ldw	r3,40(r16)
  808a28:	00802074 	movhi	r2,129
  808a2c:	10a9e904 	addi	r2,r2,-22620
  808a30:	18bfcb1e 	bne	r3,r2,808960 <__smakebuf_r+0x78>
  808a34:	8080030b 	ldhu	r2,12(r16)
  808a38:	00c10004 	movi	r3,1024
  808a3c:	1825883a 	mov	r18,r3
  808a40:	10c4b03a 	or	r2,r2,r3
  808a44:	8080030d 	sth	r2,12(r16)
  808a48:	80c01315 	stw	r3,76(r16)
  808a4c:	003fca06 	br	808978 <__smakebuf_r+0x90>
  808a50:	8100030b 	ldhu	r4,12(r16)
  808a54:	2080800c 	andi	r2,r4,512
  808a58:	103fb21e 	bne	r2,zero,808924 <__smakebuf_r+0x3c>
  808a5c:	80c010c4 	addi	r3,r16,67
  808a60:	21000094 	ori	r4,r4,2
  808a64:	00800044 	movi	r2,1
  808a68:	80800515 	stw	r2,20(r16)
  808a6c:	8100030d 	sth	r4,12(r16)
  808a70:	80c00415 	stw	r3,16(r16)
  808a74:	80c00015 	stw	r3,0(r16)
  808a78:	003faa06 	br	808924 <__smakebuf_r+0x3c>

00808a7c <memchr>:
  808a7c:	008000c4 	movi	r2,3
  808a80:	29403fcc 	andi	r5,r5,255
  808a84:	2007883a 	mov	r3,r4
  808a88:	1180022e 	bgeu	r2,r6,808a94 <memchr+0x18>
  808a8c:	2084703a 	and	r2,r4,r2
  808a90:	10000b26 	beq	r2,zero,808ac0 <memchr+0x44>
  808a94:	313fffc4 	addi	r4,r6,-1
  808a98:	3000051e 	bne	r6,zero,808ab0 <memchr+0x34>
  808a9c:	00002c06 	br	808b50 <memchr+0xd4>
  808aa0:	213fffc4 	addi	r4,r4,-1
  808aa4:	00bfffc4 	movi	r2,-1
  808aa8:	18c00044 	addi	r3,r3,1
  808aac:	20802826 	beq	r4,r2,808b50 <memchr+0xd4>
  808ab0:	18800003 	ldbu	r2,0(r3)
  808ab4:	28bffa1e 	bne	r5,r2,808aa0 <memchr+0x24>
  808ab8:	1805883a 	mov	r2,r3
  808abc:	f800283a 	ret
  808ac0:	0011883a 	mov	r8,zero
  808ac4:	0007883a 	mov	r3,zero
  808ac8:	01c00104 	movi	r7,4
  808acc:	4004923a 	slli	r2,r8,8
  808ad0:	18c00044 	addi	r3,r3,1
  808ad4:	1151883a 	add	r8,r2,r5
  808ad8:	19fffc1e 	bne	r3,r7,808acc <memchr+0x50>
  808adc:	02bfbff4 	movhi	r10,65279
  808ae0:	52bfbfc4 	addi	r10,r10,-257
  808ae4:	02602074 	movhi	r9,32897
  808ae8:	4a602004 	addi	r9,r9,-32640
  808aec:	02c000c4 	movi	r11,3
  808af0:	20800017 	ldw	r2,0(r4)
  808af4:	31bfff04 	addi	r6,r6,-4
  808af8:	200f883a 	mov	r7,r4
  808afc:	1204f03a 	xor	r2,r2,r8
  808b00:	1287883a 	add	r3,r2,r10
  808b04:	1a46703a 	and	r3,r3,r9
  808b08:	0084303a 	nor	r2,zero,r2
  808b0c:	10c4703a 	and	r2,r2,r3
  808b10:	10000b26 	beq	r2,zero,808b40 <memchr+0xc4>
  808b14:	20800003 	ldbu	r2,0(r4)
  808b18:	28800f26 	beq	r5,r2,808b58 <memchr+0xdc>
  808b1c:	20800043 	ldbu	r2,1(r4)
  808b20:	21c00044 	addi	r7,r4,1
  808b24:	28800c26 	beq	r5,r2,808b58 <memchr+0xdc>
  808b28:	20800083 	ldbu	r2,2(r4)
  808b2c:	21c00084 	addi	r7,r4,2
  808b30:	28800926 	beq	r5,r2,808b58 <memchr+0xdc>
  808b34:	208000c3 	ldbu	r2,3(r4)
  808b38:	21c000c4 	addi	r7,r4,3
  808b3c:	28800626 	beq	r5,r2,808b58 <memchr+0xdc>
  808b40:	21000104 	addi	r4,r4,4
  808b44:	59bfea36 	bltu	r11,r6,808af0 <memchr+0x74>
  808b48:	2007883a 	mov	r3,r4
  808b4c:	003fd106 	br	808a94 <memchr+0x18>
  808b50:	0005883a 	mov	r2,zero
  808b54:	f800283a 	ret
  808b58:	3805883a 	mov	r2,r7
  808b5c:	f800283a 	ret

00808b60 <memcpy>:
  808b60:	01c003c4 	movi	r7,15
  808b64:	2007883a 	mov	r3,r4
  808b68:	3980032e 	bgeu	r7,r6,808b78 <memcpy+0x18>
  808b6c:	2904b03a 	or	r2,r5,r4
  808b70:	108000cc 	andi	r2,r2,3
  808b74:	10000926 	beq	r2,zero,808b9c <memcpy+0x3c>
  808b78:	30000626 	beq	r6,zero,808b94 <memcpy+0x34>
  808b7c:	30cd883a 	add	r6,r6,r3
  808b80:	28800003 	ldbu	r2,0(r5)
  808b84:	29400044 	addi	r5,r5,1
  808b88:	18800005 	stb	r2,0(r3)
  808b8c:	18c00044 	addi	r3,r3,1
  808b90:	30fffb1e 	bne	r6,r3,808b80 <memcpy+0x20>
  808b94:	2005883a 	mov	r2,r4
  808b98:	f800283a 	ret
  808b9c:	3811883a 	mov	r8,r7
  808ba0:	200f883a 	mov	r7,r4
  808ba4:	28c00017 	ldw	r3,0(r5)
  808ba8:	31bffc04 	addi	r6,r6,-16
  808bac:	38c00015 	stw	r3,0(r7)
  808bb0:	28800117 	ldw	r2,4(r5)
  808bb4:	38800115 	stw	r2,4(r7)
  808bb8:	28c00217 	ldw	r3,8(r5)
  808bbc:	38c00215 	stw	r3,8(r7)
  808bc0:	28800317 	ldw	r2,12(r5)
  808bc4:	29400404 	addi	r5,r5,16
  808bc8:	38800315 	stw	r2,12(r7)
  808bcc:	39c00404 	addi	r7,r7,16
  808bd0:	41bff436 	bltu	r8,r6,808ba4 <memcpy+0x44>
  808bd4:	008000c4 	movi	r2,3
  808bd8:	1180072e 	bgeu	r2,r6,808bf8 <memcpy+0x98>
  808bdc:	1007883a 	mov	r3,r2
  808be0:	28800017 	ldw	r2,0(r5)
  808be4:	31bfff04 	addi	r6,r6,-4
  808be8:	29400104 	addi	r5,r5,4
  808bec:	38800015 	stw	r2,0(r7)
  808bf0:	39c00104 	addi	r7,r7,4
  808bf4:	19bffa36 	bltu	r3,r6,808be0 <memcpy+0x80>
  808bf8:	3807883a 	mov	r3,r7
  808bfc:	003fde06 	br	808b78 <memcpy+0x18>

00808c00 <memmove>:
  808c00:	2807883a 	mov	r3,r5
  808c04:	2011883a 	mov	r8,r4
  808c08:	29000c2e 	bgeu	r5,r4,808c3c <memmove+0x3c>
  808c0c:	298f883a 	add	r7,r5,r6
  808c10:	21c00a2e 	bgeu	r4,r7,808c3c <memmove+0x3c>
  808c14:	30000726 	beq	r6,zero,808c34 <memmove+0x34>
  808c18:	2187883a 	add	r3,r4,r6
  808c1c:	198dc83a 	sub	r6,r3,r6
  808c20:	39ffffc4 	addi	r7,r7,-1
  808c24:	38800003 	ldbu	r2,0(r7)
  808c28:	18ffffc4 	addi	r3,r3,-1
  808c2c:	18800005 	stb	r2,0(r3)
  808c30:	19bffb1e 	bne	r3,r6,808c20 <memmove+0x20>
  808c34:	2005883a 	mov	r2,r4
  808c38:	f800283a 	ret
  808c3c:	01c003c4 	movi	r7,15
  808c40:	39800a36 	bltu	r7,r6,808c6c <memmove+0x6c>
  808c44:	303ffb26 	beq	r6,zero,808c34 <memmove+0x34>
  808c48:	400f883a 	mov	r7,r8
  808c4c:	320d883a 	add	r6,r6,r8
  808c50:	28800003 	ldbu	r2,0(r5)
  808c54:	29400044 	addi	r5,r5,1
  808c58:	38800005 	stb	r2,0(r7)
  808c5c:	39c00044 	addi	r7,r7,1
  808c60:	39bffb1e 	bne	r7,r6,808c50 <memmove+0x50>
  808c64:	2005883a 	mov	r2,r4
  808c68:	f800283a 	ret
  808c6c:	1904b03a 	or	r2,r3,r4
  808c70:	108000cc 	andi	r2,r2,3
  808c74:	103ff31e 	bne	r2,zero,808c44 <memmove+0x44>
  808c78:	3811883a 	mov	r8,r7
  808c7c:	180b883a 	mov	r5,r3
  808c80:	200f883a 	mov	r7,r4
  808c84:	28c00017 	ldw	r3,0(r5)
  808c88:	31bffc04 	addi	r6,r6,-16
  808c8c:	38c00015 	stw	r3,0(r7)
  808c90:	28800117 	ldw	r2,4(r5)
  808c94:	38800115 	stw	r2,4(r7)
  808c98:	28c00217 	ldw	r3,8(r5)
  808c9c:	38c00215 	stw	r3,8(r7)
  808ca0:	28800317 	ldw	r2,12(r5)
  808ca4:	29400404 	addi	r5,r5,16
  808ca8:	38800315 	stw	r2,12(r7)
  808cac:	39c00404 	addi	r7,r7,16
  808cb0:	41bff436 	bltu	r8,r6,808c84 <memmove+0x84>
  808cb4:	008000c4 	movi	r2,3
  808cb8:	1180072e 	bgeu	r2,r6,808cd8 <memmove+0xd8>
  808cbc:	1007883a 	mov	r3,r2
  808cc0:	28800017 	ldw	r2,0(r5)
  808cc4:	31bfff04 	addi	r6,r6,-4
  808cc8:	29400104 	addi	r5,r5,4
  808ccc:	38800015 	stw	r2,0(r7)
  808cd0:	39c00104 	addi	r7,r7,4
  808cd4:	19bffa36 	bltu	r3,r6,808cc0 <memmove+0xc0>
  808cd8:	3811883a 	mov	r8,r7
  808cdc:	003fd906 	br	808c44 <memmove+0x44>

00808ce0 <_Bfree>:
  808ce0:	28000826 	beq	r5,zero,808d04 <_Bfree+0x24>
  808ce4:	28800117 	ldw	r2,4(r5)
  808ce8:	21001317 	ldw	r4,76(r4)
  808cec:	1085883a 	add	r2,r2,r2
  808cf0:	1085883a 	add	r2,r2,r2
  808cf4:	1105883a 	add	r2,r2,r4
  808cf8:	10c00017 	ldw	r3,0(r2)
  808cfc:	28c00015 	stw	r3,0(r5)
  808d00:	11400015 	stw	r5,0(r2)
  808d04:	f800283a 	ret

00808d08 <__hi0bits>:
  808d08:	20bfffec 	andhi	r2,r4,65535
  808d0c:	10001426 	beq	r2,zero,808d60 <__hi0bits+0x58>
  808d10:	0007883a 	mov	r3,zero
  808d14:	20bfc02c 	andhi	r2,r4,65280
  808d18:	1000021e 	bne	r2,zero,808d24 <__hi0bits+0x1c>
  808d1c:	2008923a 	slli	r4,r4,8
  808d20:	18c00204 	addi	r3,r3,8
  808d24:	20bc002c 	andhi	r2,r4,61440
  808d28:	1000021e 	bne	r2,zero,808d34 <__hi0bits+0x2c>
  808d2c:	2008913a 	slli	r4,r4,4
  808d30:	18c00104 	addi	r3,r3,4
  808d34:	20b0002c 	andhi	r2,r4,49152
  808d38:	1000031e 	bne	r2,zero,808d48 <__hi0bits+0x40>
  808d3c:	2105883a 	add	r2,r4,r4
  808d40:	18c00084 	addi	r3,r3,2
  808d44:	1089883a 	add	r4,r2,r2
  808d48:	20000316 	blt	r4,zero,808d58 <__hi0bits+0x50>
  808d4c:	2090002c 	andhi	r2,r4,16384
  808d50:	10000626 	beq	r2,zero,808d6c <__hi0bits+0x64>
  808d54:	18c00044 	addi	r3,r3,1
  808d58:	1805883a 	mov	r2,r3
  808d5c:	f800283a 	ret
  808d60:	2008943a 	slli	r4,r4,16
  808d64:	00c00404 	movi	r3,16
  808d68:	003fea06 	br	808d14 <__hi0bits+0xc>
  808d6c:	00c00804 	movi	r3,32
  808d70:	1805883a 	mov	r2,r3
  808d74:	f800283a 	ret

00808d78 <__lo0bits>:
  808d78:	20c00017 	ldw	r3,0(r4)
  808d7c:	188001cc 	andi	r2,r3,7
  808d80:	10000a26 	beq	r2,zero,808dac <__lo0bits+0x34>
  808d84:	1880004c 	andi	r2,r3,1
  808d88:	1005003a 	cmpeq	r2,r2,zero
  808d8c:	10002126 	beq	r2,zero,808e14 <__lo0bits+0x9c>
  808d90:	1880008c 	andi	r2,r3,2
  808d94:	1000251e 	bne	r2,zero,808e2c <__lo0bits+0xb4>
  808d98:	1804d0ba 	srli	r2,r3,2
  808d9c:	01400084 	movi	r5,2
  808da0:	20800015 	stw	r2,0(r4)
  808da4:	2805883a 	mov	r2,r5
  808da8:	f800283a 	ret
  808dac:	18bfffcc 	andi	r2,r3,65535
  808db0:	10001526 	beq	r2,zero,808e08 <__lo0bits+0x90>
  808db4:	000b883a 	mov	r5,zero
  808db8:	18803fcc 	andi	r2,r3,255
  808dbc:	1000021e 	bne	r2,zero,808dc8 <__lo0bits+0x50>
  808dc0:	1806d23a 	srli	r3,r3,8
  808dc4:	29400204 	addi	r5,r5,8
  808dc8:	188003cc 	andi	r2,r3,15
  808dcc:	1000021e 	bne	r2,zero,808dd8 <__lo0bits+0x60>
  808dd0:	1806d13a 	srli	r3,r3,4
  808dd4:	29400104 	addi	r5,r5,4
  808dd8:	188000cc 	andi	r2,r3,3
  808ddc:	1000021e 	bne	r2,zero,808de8 <__lo0bits+0x70>
  808de0:	1806d0ba 	srli	r3,r3,2
  808de4:	29400084 	addi	r5,r5,2
  808de8:	1880004c 	andi	r2,r3,1
  808dec:	1000031e 	bne	r2,zero,808dfc <__lo0bits+0x84>
  808df0:	1806d07a 	srli	r3,r3,1
  808df4:	18000a26 	beq	r3,zero,808e20 <__lo0bits+0xa8>
  808df8:	29400044 	addi	r5,r5,1
  808dfc:	2805883a 	mov	r2,r5
  808e00:	20c00015 	stw	r3,0(r4)
  808e04:	f800283a 	ret
  808e08:	1806d43a 	srli	r3,r3,16
  808e0c:	01400404 	movi	r5,16
  808e10:	003fe906 	br	808db8 <__lo0bits+0x40>
  808e14:	000b883a 	mov	r5,zero
  808e18:	2805883a 	mov	r2,r5
  808e1c:	f800283a 	ret
  808e20:	01400804 	movi	r5,32
  808e24:	2805883a 	mov	r2,r5
  808e28:	f800283a 	ret
  808e2c:	1804d07a 	srli	r2,r3,1
  808e30:	01400044 	movi	r5,1
  808e34:	20800015 	stw	r2,0(r4)
  808e38:	003fda06 	br	808da4 <__lo0bits+0x2c>

00808e3c <__mcmp>:
  808e3c:	20800417 	ldw	r2,16(r4)
  808e40:	28c00417 	ldw	r3,16(r5)
  808e44:	10cfc83a 	sub	r7,r2,r3
  808e48:	38000c1e 	bne	r7,zero,808e7c <__mcmp+0x40>
  808e4c:	18c5883a 	add	r2,r3,r3
  808e50:	1085883a 	add	r2,r2,r2
  808e54:	10c00504 	addi	r3,r2,20
  808e58:	21000504 	addi	r4,r4,20
  808e5c:	28cb883a 	add	r5,r5,r3
  808e60:	2085883a 	add	r2,r4,r2
  808e64:	10bfff04 	addi	r2,r2,-4
  808e68:	297fff04 	addi	r5,r5,-4
  808e6c:	11800017 	ldw	r6,0(r2)
  808e70:	28c00017 	ldw	r3,0(r5)
  808e74:	30c0031e 	bne	r6,r3,808e84 <__mcmp+0x48>
  808e78:	20bffa36 	bltu	r4,r2,808e64 <__mcmp+0x28>
  808e7c:	3805883a 	mov	r2,r7
  808e80:	f800283a 	ret
  808e84:	30c00336 	bltu	r6,r3,808e94 <__mcmp+0x58>
  808e88:	01c00044 	movi	r7,1
  808e8c:	3805883a 	mov	r2,r7
  808e90:	f800283a 	ret
  808e94:	01ffffc4 	movi	r7,-1
  808e98:	003ff806 	br	808e7c <__mcmp+0x40>

00808e9c <__ulp>:
  808e9c:	295ffc2c 	andhi	r5,r5,32752
  808ea0:	013f3034 	movhi	r4,64704
  808ea4:	290b883a 	add	r5,r5,r4
  808ea8:	0145c83a 	sub	r2,zero,r5
  808eac:	1007d53a 	srai	r3,r2,20
  808eb0:	000d883a 	mov	r6,zero
  808eb4:	0140040e 	bge	zero,r5,808ec8 <__ulp+0x2c>
  808eb8:	280f883a 	mov	r7,r5
  808ebc:	3807883a 	mov	r3,r7
  808ec0:	3005883a 	mov	r2,r6
  808ec4:	f800283a 	ret
  808ec8:	008004c4 	movi	r2,19
  808ecc:	193ffb04 	addi	r4,r3,-20
  808ed0:	10c00c0e 	bge	r2,r3,808f04 <__ulp+0x68>
  808ed4:	008007c4 	movi	r2,31
  808ed8:	1107c83a 	sub	r3,r2,r4
  808edc:	00800784 	movi	r2,30
  808ee0:	01400044 	movi	r5,1
  808ee4:	11000216 	blt	r2,r4,808ef0 <__ulp+0x54>
  808ee8:	00800044 	movi	r2,1
  808eec:	10ca983a 	sll	r5,r2,r3
  808ef0:	000f883a 	mov	r7,zero
  808ef4:	280d883a 	mov	r6,r5
  808ef8:	3807883a 	mov	r3,r7
  808efc:	3005883a 	mov	r2,r6
  808f00:	f800283a 	ret
  808f04:	00800234 	movhi	r2,8
  808f08:	10cfd83a 	sra	r7,r2,r3
  808f0c:	000d883a 	mov	r6,zero
  808f10:	3005883a 	mov	r2,r6
  808f14:	3807883a 	mov	r3,r7
  808f18:	f800283a 	ret

00808f1c <__b2d>:
  808f1c:	20800417 	ldw	r2,16(r4)
  808f20:	defff904 	addi	sp,sp,-28
  808f24:	dd000415 	stw	r20,16(sp)
  808f28:	1085883a 	add	r2,r2,r2
  808f2c:	25000504 	addi	r20,r4,20
  808f30:	1085883a 	add	r2,r2,r2
  808f34:	dc000015 	stw	r16,0(sp)
  808f38:	a0a1883a 	add	r16,r20,r2
  808f3c:	dd400515 	stw	r21,20(sp)
  808f40:	857fff17 	ldw	r21,-4(r16)
  808f44:	dc400115 	stw	r17,4(sp)
  808f48:	dfc00615 	stw	ra,24(sp)
  808f4c:	a809883a 	mov	r4,r21
  808f50:	2823883a 	mov	r17,r5
  808f54:	dcc00315 	stw	r19,12(sp)
  808f58:	dc800215 	stw	r18,8(sp)
  808f5c:	0808d080 	call	808d08 <__hi0bits>
  808f60:	100b883a 	mov	r5,r2
  808f64:	00800804 	movi	r2,32
  808f68:	1145c83a 	sub	r2,r2,r5
  808f6c:	88800015 	stw	r2,0(r17)
  808f70:	00800284 	movi	r2,10
  808f74:	80ffff04 	addi	r3,r16,-4
  808f78:	11401416 	blt	r2,r5,808fcc <__b2d+0xb0>
  808f7c:	008002c4 	movi	r2,11
  808f80:	1149c83a 	sub	r4,r2,r5
  808f84:	a0c02736 	bltu	r20,r3,809024 <__b2d+0x108>
  808f88:	000d883a 	mov	r6,zero
  808f8c:	28800544 	addi	r2,r5,21
  808f90:	a906d83a 	srl	r3,r21,r4
  808f94:	a884983a 	sll	r2,r21,r2
  808f98:	1ccffc34 	orhi	r19,r3,16368
  808f9c:	11a4b03a 	or	r18,r2,r6
  808fa0:	9005883a 	mov	r2,r18
  808fa4:	9807883a 	mov	r3,r19
  808fa8:	dfc00617 	ldw	ra,24(sp)
  808fac:	dd400517 	ldw	r21,20(sp)
  808fb0:	dd000417 	ldw	r20,16(sp)
  808fb4:	dcc00317 	ldw	r19,12(sp)
  808fb8:	dc800217 	ldw	r18,8(sp)
  808fbc:	dc400117 	ldw	r17,4(sp)
  808fc0:	dc000017 	ldw	r16,0(sp)
  808fc4:	dec00704 	addi	sp,sp,28
  808fc8:	f800283a 	ret
  808fcc:	a0c00e36 	bltu	r20,r3,809008 <__b2d+0xec>
  808fd0:	293ffd44 	addi	r4,r5,-11
  808fd4:	000d883a 	mov	r6,zero
  808fd8:	20000f26 	beq	r4,zero,809018 <__b2d+0xfc>
  808fdc:	00800804 	movi	r2,32
  808fe0:	110bc83a 	sub	r5,r2,r4
  808fe4:	a0c01236 	bltu	r20,r3,809030 <__b2d+0x114>
  808fe8:	000f883a 	mov	r7,zero
  808fec:	a904983a 	sll	r2,r21,r4
  808ff0:	3146d83a 	srl	r3,r6,r5
  808ff4:	3108983a 	sll	r4,r6,r4
  808ff8:	108ffc34 	orhi	r2,r2,16368
  808ffc:	18a6b03a 	or	r19,r3,r2
  809000:	3924b03a 	or	r18,r7,r4
  809004:	003fe606 	br	808fa0 <__b2d+0x84>
  809008:	293ffd44 	addi	r4,r5,-11
  80900c:	81bffe17 	ldw	r6,-8(r16)
  809010:	80fffe04 	addi	r3,r16,-8
  809014:	203ff11e 	bne	r4,zero,808fdc <__b2d+0xc0>
  809018:	accffc34 	orhi	r19,r21,16368
  80901c:	3025883a 	mov	r18,r6
  809020:	003fdf06 	br	808fa0 <__b2d+0x84>
  809024:	18bfff17 	ldw	r2,-4(r3)
  809028:	110cd83a 	srl	r6,r2,r4
  80902c:	003fd706 	br	808f8c <__b2d+0x70>
  809030:	18bfff17 	ldw	r2,-4(r3)
  809034:	114ed83a 	srl	r7,r2,r5
  809038:	003fec06 	br	808fec <__b2d+0xd0>

0080903c <__ratio>:
  80903c:	defff904 	addi	sp,sp,-28
  809040:	dc400215 	stw	r17,8(sp)
  809044:	2823883a 	mov	r17,r5
  809048:	d80b883a 	mov	r5,sp
  80904c:	dfc00615 	stw	ra,24(sp)
  809050:	dd000515 	stw	r20,20(sp)
  809054:	dcc00415 	stw	r19,16(sp)
  809058:	dc800315 	stw	r18,12(sp)
  80905c:	2025883a 	mov	r18,r4
  809060:	0808f1c0 	call	808f1c <__b2d>
  809064:	8809883a 	mov	r4,r17
  809068:	d9400104 	addi	r5,sp,4
  80906c:	1027883a 	mov	r19,r2
  809070:	1829883a 	mov	r20,r3
  809074:	0808f1c0 	call	808f1c <__b2d>
  809078:	89000417 	ldw	r4,16(r17)
  80907c:	91c00417 	ldw	r7,16(r18)
  809080:	d9800117 	ldw	r6,4(sp)
  809084:	180b883a 	mov	r5,r3
  809088:	390fc83a 	sub	r7,r7,r4
  80908c:	1009883a 	mov	r4,r2
  809090:	d8800017 	ldw	r2,0(sp)
  809094:	380e917a 	slli	r7,r7,5
  809098:	2011883a 	mov	r8,r4
  80909c:	1185c83a 	sub	r2,r2,r6
  8090a0:	11c5883a 	add	r2,r2,r7
  8090a4:	1006953a 	slli	r3,r2,20
  8090a8:	2813883a 	mov	r9,r5
  8090ac:	00800d0e 	bge	zero,r2,8090e4 <__ratio+0xa8>
  8090b0:	1d29883a 	add	r20,r3,r20
  8090b4:	a00b883a 	mov	r5,r20
  8090b8:	480f883a 	mov	r7,r9
  8090bc:	9809883a 	mov	r4,r19
  8090c0:	400d883a 	mov	r6,r8
  8090c4:	080bc640 	call	80bc64 <__divdf3>
  8090c8:	dfc00617 	ldw	ra,24(sp)
  8090cc:	dd000517 	ldw	r20,20(sp)
  8090d0:	dcc00417 	ldw	r19,16(sp)
  8090d4:	dc800317 	ldw	r18,12(sp)
  8090d8:	dc400217 	ldw	r17,8(sp)
  8090dc:	dec00704 	addi	sp,sp,28
  8090e0:	f800283a 	ret
  8090e4:	28d3c83a 	sub	r9,r5,r3
  8090e8:	003ff206 	br	8090b4 <__ratio+0x78>

008090ec <_mprec_log10>:
  8090ec:	defffe04 	addi	sp,sp,-8
  8090f0:	008005c4 	movi	r2,23
  8090f4:	dc000015 	stw	r16,0(sp)
  8090f8:	dfc00115 	stw	ra,4(sp)
  8090fc:	2021883a 	mov	r16,r4
  809100:	11000c16 	blt	r2,r4,809134 <_mprec_log10+0x48>
  809104:	200490fa 	slli	r2,r4,3
  809108:	00c02074 	movhi	r3,129
  80910c:	18d03604 	addi	r3,r3,16600
  809110:	10c5883a 	add	r2,r2,r3
  809114:	12400117 	ldw	r9,4(r2)
  809118:	12000017 	ldw	r8,0(r2)
  80911c:	4807883a 	mov	r3,r9
  809120:	4005883a 	mov	r2,r8
  809124:	dfc00117 	ldw	ra,4(sp)
  809128:	dc000017 	ldw	r16,0(sp)
  80912c:	dec00204 	addi	sp,sp,8
  809130:	f800283a 	ret
  809134:	0011883a 	mov	r8,zero
  809138:	024ffc34 	movhi	r9,16368
  80913c:	0005883a 	mov	r2,zero
  809140:	00d00934 	movhi	r3,16420
  809144:	480b883a 	mov	r5,r9
  809148:	4009883a 	mov	r4,r8
  80914c:	180f883a 	mov	r7,r3
  809150:	100d883a 	mov	r6,r2
  809154:	08024e00 	call	8024e0 <__muldf3>
  809158:	843fffc4 	addi	r16,r16,-1
  80915c:	1011883a 	mov	r8,r2
  809160:	1813883a 	mov	r9,r3
  809164:	803ff51e 	bne	r16,zero,80913c <_mprec_log10+0x50>
  809168:	4005883a 	mov	r2,r8
  80916c:	4807883a 	mov	r3,r9
  809170:	dfc00117 	ldw	ra,4(sp)
  809174:	dc000017 	ldw	r16,0(sp)
  809178:	dec00204 	addi	sp,sp,8
  80917c:	f800283a 	ret

00809180 <__copybits>:
  809180:	297fffc4 	addi	r5,r5,-1
  809184:	30800417 	ldw	r2,16(r6)
  809188:	280bd17a 	srai	r5,r5,5
  80918c:	31800504 	addi	r6,r6,20
  809190:	1085883a 	add	r2,r2,r2
  809194:	294b883a 	add	r5,r5,r5
  809198:	294b883a 	add	r5,r5,r5
  80919c:	1085883a 	add	r2,r2,r2
  8091a0:	290b883a 	add	r5,r5,r4
  8091a4:	3087883a 	add	r3,r6,r2
  8091a8:	29400104 	addi	r5,r5,4
  8091ac:	30c0052e 	bgeu	r6,r3,8091c4 <__copybits+0x44>
  8091b0:	30800017 	ldw	r2,0(r6)
  8091b4:	31800104 	addi	r6,r6,4
  8091b8:	20800015 	stw	r2,0(r4)
  8091bc:	21000104 	addi	r4,r4,4
  8091c0:	30fffb36 	bltu	r6,r3,8091b0 <__copybits+0x30>
  8091c4:	2140032e 	bgeu	r4,r5,8091d4 <__copybits+0x54>
  8091c8:	20000015 	stw	zero,0(r4)
  8091cc:	21000104 	addi	r4,r4,4
  8091d0:	217ffd36 	bltu	r4,r5,8091c8 <__copybits+0x48>
  8091d4:	f800283a 	ret

008091d8 <__any_on>:
  8091d8:	20800417 	ldw	r2,16(r4)
  8091dc:	2807d17a 	srai	r3,r5,5
  8091e0:	21000504 	addi	r4,r4,20
  8091e4:	10c00d0e 	bge	r2,r3,80921c <__any_on+0x44>
  8091e8:	1085883a 	add	r2,r2,r2
  8091ec:	1085883a 	add	r2,r2,r2
  8091f0:	208d883a 	add	r6,r4,r2
  8091f4:	2180182e 	bgeu	r4,r6,809258 <__any_on+0x80>
  8091f8:	30bfff17 	ldw	r2,-4(r6)
  8091fc:	30ffff04 	addi	r3,r6,-4
  809200:	1000041e 	bne	r2,zero,809214 <__any_on+0x3c>
  809204:	20c0142e 	bgeu	r4,r3,809258 <__any_on+0x80>
  809208:	18ffff04 	addi	r3,r3,-4
  80920c:	18800017 	ldw	r2,0(r3)
  809210:	103ffc26 	beq	r2,zero,809204 <__any_on+0x2c>
  809214:	00800044 	movi	r2,1
  809218:	f800283a 	ret
  80921c:	18800a0e 	bge	r3,r2,809248 <__any_on+0x70>
  809220:	294007cc 	andi	r5,r5,31
  809224:	28000826 	beq	r5,zero,809248 <__any_on+0x70>
  809228:	18c5883a 	add	r2,r3,r3
  80922c:	1085883a 	add	r2,r2,r2
  809230:	208d883a 	add	r6,r4,r2
  809234:	30c00017 	ldw	r3,0(r6)
  809238:	1944d83a 	srl	r2,r3,r5
  80923c:	1144983a 	sll	r2,r2,r5
  809240:	18bff41e 	bne	r3,r2,809214 <__any_on+0x3c>
  809244:	003feb06 	br	8091f4 <__any_on+0x1c>
  809248:	18c5883a 	add	r2,r3,r3
  80924c:	1085883a 	add	r2,r2,r2
  809250:	208d883a 	add	r6,r4,r2
  809254:	003fe706 	br	8091f4 <__any_on+0x1c>
  809258:	0005883a 	mov	r2,zero
  80925c:	f800283a 	ret

00809260 <_Balloc>:
  809260:	20c01317 	ldw	r3,76(r4)
  809264:	defffb04 	addi	sp,sp,-20
  809268:	dcc00315 	stw	r19,12(sp)
  80926c:	dc800215 	stw	r18,8(sp)
  809270:	dfc00415 	stw	ra,16(sp)
  809274:	2825883a 	mov	r18,r5
  809278:	dc400115 	stw	r17,4(sp)
  80927c:	dc000015 	stw	r16,0(sp)
  809280:	2027883a 	mov	r19,r4
  809284:	01800404 	movi	r6,16
  809288:	01400104 	movi	r5,4
  80928c:	18001726 	beq	r3,zero,8092ec <_Balloc+0x8c>
  809290:	01400044 	movi	r5,1
  809294:	9485883a 	add	r2,r18,r18
  809298:	2ca2983a 	sll	r17,r5,r18
  80929c:	1085883a 	add	r2,r2,r2
  8092a0:	10c7883a 	add	r3,r2,r3
  8092a4:	1c000017 	ldw	r16,0(r3)
  8092a8:	8c4d883a 	add	r6,r17,r17
  8092ac:	318d883a 	add	r6,r6,r6
  8092b0:	9809883a 	mov	r4,r19
  8092b4:	31800504 	addi	r6,r6,20
  8092b8:	80001226 	beq	r16,zero,809304 <_Balloc+0xa4>
  8092bc:	80800017 	ldw	r2,0(r16)
  8092c0:	18800015 	stw	r2,0(r3)
  8092c4:	80000415 	stw	zero,16(r16)
  8092c8:	80000315 	stw	zero,12(r16)
  8092cc:	8005883a 	mov	r2,r16
  8092d0:	dfc00417 	ldw	ra,16(sp)
  8092d4:	dcc00317 	ldw	r19,12(sp)
  8092d8:	dc800217 	ldw	r18,8(sp)
  8092dc:	dc400117 	ldw	r17,4(sp)
  8092e0:	dc000017 	ldw	r16,0(sp)
  8092e4:	dec00504 	addi	sp,sp,20
  8092e8:	f800283a 	ret
  8092ec:	080ab680 	call	80ab68 <_calloc_r>
  8092f0:	1007883a 	mov	r3,r2
  8092f4:	0021883a 	mov	r16,zero
  8092f8:	98801315 	stw	r2,76(r19)
  8092fc:	103fe41e 	bne	r2,zero,809290 <_Balloc+0x30>
  809300:	003ff206 	br	8092cc <_Balloc+0x6c>
  809304:	080ab680 	call	80ab68 <_calloc_r>
  809308:	103ff026 	beq	r2,zero,8092cc <_Balloc+0x6c>
  80930c:	1021883a 	mov	r16,r2
  809310:	14800115 	stw	r18,4(r2)
  809314:	14400215 	stw	r17,8(r2)
  809318:	003fea06 	br	8092c4 <_Balloc+0x64>

0080931c <__d2b>:
  80931c:	defff504 	addi	sp,sp,-44
  809320:	dcc00515 	stw	r19,20(sp)
  809324:	04c00044 	movi	r19,1
  809328:	dc000215 	stw	r16,8(sp)
  80932c:	2821883a 	mov	r16,r5
  809330:	980b883a 	mov	r5,r19
  809334:	ddc00915 	stw	r23,36(sp)
  809338:	dd800815 	stw	r22,32(sp)
  80933c:	dd400715 	stw	r21,28(sp)
  809340:	dd000615 	stw	r20,24(sp)
  809344:	dc800415 	stw	r18,16(sp)
  809348:	dc400315 	stw	r17,12(sp)
  80934c:	dfc00a15 	stw	ra,40(sp)
  809350:	3023883a 	mov	r17,r6
  809354:	382d883a 	mov	r22,r7
  809358:	ddc00b17 	ldw	r23,44(sp)
  80935c:	08092600 	call	809260 <_Balloc>
  809360:	1025883a 	mov	r18,r2
  809364:	00a00034 	movhi	r2,32768
  809368:	10bfffc4 	addi	r2,r2,-1
  80936c:	8888703a 	and	r4,r17,r2
  809370:	202ad53a 	srli	r21,r4,20
  809374:	00800434 	movhi	r2,16
  809378:	10bfffc4 	addi	r2,r2,-1
  80937c:	8886703a 	and	r3,r17,r2
  809380:	a829003a 	cmpeq	r20,r21,zero
  809384:	800b883a 	mov	r5,r16
  809388:	d8c00115 	stw	r3,4(sp)
  80938c:	94000504 	addi	r16,r18,20
  809390:	a000021e 	bne	r20,zero,80939c <__d2b+0x80>
  809394:	18c00434 	orhi	r3,r3,16
  809398:	d8c00115 	stw	r3,4(sp)
  80939c:	28002726 	beq	r5,zero,80943c <__d2b+0x120>
  8093a0:	d809883a 	mov	r4,sp
  8093a4:	d9400015 	stw	r5,0(sp)
  8093a8:	0808d780 	call	808d78 <__lo0bits>
  8093ac:	100d883a 	mov	r6,r2
  8093b0:	10003526 	beq	r2,zero,809488 <__d2b+0x16c>
  8093b4:	d8c00117 	ldw	r3,4(sp)
  8093b8:	00800804 	movi	r2,32
  8093bc:	1185c83a 	sub	r2,r2,r6
  8093c0:	d9000017 	ldw	r4,0(sp)
  8093c4:	1886983a 	sll	r3,r3,r2
  8093c8:	1906b03a 	or	r3,r3,r4
  8093cc:	90c00515 	stw	r3,20(r18)
  8093d0:	d8c00117 	ldw	r3,4(sp)
  8093d4:	1986d83a 	srl	r3,r3,r6
  8093d8:	d8c00115 	stw	r3,4(sp)
  8093dc:	180b003a 	cmpeq	r5,r3,zero
  8093e0:	00800084 	movi	r2,2
  8093e4:	114bc83a 	sub	r5,r2,r5
  8093e8:	80c00115 	stw	r3,4(r16)
  8093ec:	91400415 	stw	r5,16(r18)
  8093f0:	a0001a1e 	bne	r20,zero,80945c <__d2b+0x140>
  8093f4:	3545883a 	add	r2,r6,r21
  8093f8:	10bef344 	addi	r2,r2,-1075
  8093fc:	00c00d44 	movi	r3,53
  809400:	b0800015 	stw	r2,0(r22)
  809404:	1987c83a 	sub	r3,r3,r6
  809408:	b8c00015 	stw	r3,0(r23)
  80940c:	9005883a 	mov	r2,r18
  809410:	dfc00a17 	ldw	ra,40(sp)
  809414:	ddc00917 	ldw	r23,36(sp)
  809418:	dd800817 	ldw	r22,32(sp)
  80941c:	dd400717 	ldw	r21,28(sp)
  809420:	dd000617 	ldw	r20,24(sp)
  809424:	dcc00517 	ldw	r19,20(sp)
  809428:	dc800417 	ldw	r18,16(sp)
  80942c:	dc400317 	ldw	r17,12(sp)
  809430:	dc000217 	ldw	r16,8(sp)
  809434:	dec00b04 	addi	sp,sp,44
  809438:	f800283a 	ret
  80943c:	d9000104 	addi	r4,sp,4
  809440:	0808d780 	call	808d78 <__lo0bits>
  809444:	11800804 	addi	r6,r2,32
  809448:	d8800117 	ldw	r2,4(sp)
  80944c:	94c00415 	stw	r19,16(r18)
  809450:	980b883a 	mov	r5,r19
  809454:	90800515 	stw	r2,20(r18)
  809458:	a03fe626 	beq	r20,zero,8093f4 <__d2b+0xd8>
  80945c:	2945883a 	add	r2,r5,r5
  809460:	1085883a 	add	r2,r2,r2
  809464:	1405883a 	add	r2,r2,r16
  809468:	113fff17 	ldw	r4,-4(r2)
  80946c:	30fef384 	addi	r3,r6,-1074
  809470:	2820917a 	slli	r16,r5,5
  809474:	b0c00015 	stw	r3,0(r22)
  809478:	0808d080 	call	808d08 <__hi0bits>
  80947c:	80a1c83a 	sub	r16,r16,r2
  809480:	bc000015 	stw	r16,0(r23)
  809484:	003fe106 	br	80940c <__d2b+0xf0>
  809488:	d8800017 	ldw	r2,0(sp)
  80948c:	90800515 	stw	r2,20(r18)
  809490:	d8c00117 	ldw	r3,4(sp)
  809494:	003fd106 	br	8093dc <__d2b+0xc0>

00809498 <__mdiff>:
  809498:	defffb04 	addi	sp,sp,-20
  80949c:	dc000015 	stw	r16,0(sp)
  8094a0:	2821883a 	mov	r16,r5
  8094a4:	dc800215 	stw	r18,8(sp)
  8094a8:	300b883a 	mov	r5,r6
  8094ac:	2025883a 	mov	r18,r4
  8094b0:	8009883a 	mov	r4,r16
  8094b4:	dc400115 	stw	r17,4(sp)
  8094b8:	dfc00415 	stw	ra,16(sp)
  8094bc:	dcc00315 	stw	r19,12(sp)
  8094c0:	3023883a 	mov	r17,r6
  8094c4:	0808e3c0 	call	808e3c <__mcmp>
  8094c8:	10004226 	beq	r2,zero,8095d4 <__mdiff+0x13c>
  8094cc:	10005016 	blt	r2,zero,809610 <__mdiff+0x178>
  8094d0:	0027883a 	mov	r19,zero
  8094d4:	81400117 	ldw	r5,4(r16)
  8094d8:	9009883a 	mov	r4,r18
  8094dc:	08092600 	call	809260 <_Balloc>
  8094e0:	1019883a 	mov	r12,r2
  8094e4:	82800417 	ldw	r10,16(r16)
  8094e8:	88800417 	ldw	r2,16(r17)
  8094ec:	81800504 	addi	r6,r16,20
  8094f0:	5287883a 	add	r3,r10,r10
  8094f4:	1085883a 	add	r2,r2,r2
  8094f8:	18c7883a 	add	r3,r3,r3
  8094fc:	1085883a 	add	r2,r2,r2
  809500:	8a000504 	addi	r8,r17,20
  809504:	64c00315 	stw	r19,12(r12)
  809508:	30db883a 	add	r13,r6,r3
  80950c:	4097883a 	add	r11,r8,r2
  809510:	61c00504 	addi	r7,r12,20
  809514:	0013883a 	mov	r9,zero
  809518:	31000017 	ldw	r4,0(r6)
  80951c:	41400017 	ldw	r5,0(r8)
  809520:	42000104 	addi	r8,r8,4
  809524:	20bfffcc 	andi	r2,r4,65535
  809528:	28ffffcc 	andi	r3,r5,65535
  80952c:	10c5c83a 	sub	r2,r2,r3
  809530:	1245883a 	add	r2,r2,r9
  809534:	2008d43a 	srli	r4,r4,16
  809538:	280ad43a 	srli	r5,r5,16
  80953c:	1007d43a 	srai	r3,r2,16
  809540:	3880000d 	sth	r2,0(r7)
  809544:	2149c83a 	sub	r4,r4,r5
  809548:	20c9883a 	add	r4,r4,r3
  80954c:	3900008d 	sth	r4,2(r7)
  809550:	31800104 	addi	r6,r6,4
  809554:	39c00104 	addi	r7,r7,4
  809558:	2013d43a 	srai	r9,r4,16
  80955c:	42ffee36 	bltu	r8,r11,809518 <__mdiff+0x80>
  809560:	33400c2e 	bgeu	r6,r13,809594 <__mdiff+0xfc>
  809564:	30800017 	ldw	r2,0(r6)
  809568:	31800104 	addi	r6,r6,4
  80956c:	10ffffcc 	andi	r3,r2,65535
  809570:	1a47883a 	add	r3,r3,r9
  809574:	1004d43a 	srli	r2,r2,16
  809578:	1809d43a 	srai	r4,r3,16
  80957c:	38c0000d 	sth	r3,0(r7)
  809580:	1105883a 	add	r2,r2,r4
  809584:	3880008d 	sth	r2,2(r7)
  809588:	1013d43a 	srai	r9,r2,16
  80958c:	39c00104 	addi	r7,r7,4
  809590:	337ff436 	bltu	r6,r13,809564 <__mdiff+0xcc>
  809594:	38bfff17 	ldw	r2,-4(r7)
  809598:	38ffff04 	addi	r3,r7,-4
  80959c:	1000041e 	bne	r2,zero,8095b0 <__mdiff+0x118>
  8095a0:	18ffff04 	addi	r3,r3,-4
  8095a4:	18800017 	ldw	r2,0(r3)
  8095a8:	52bfffc4 	addi	r10,r10,-1
  8095ac:	103ffc26 	beq	r2,zero,8095a0 <__mdiff+0x108>
  8095b0:	6005883a 	mov	r2,r12
  8095b4:	62800415 	stw	r10,16(r12)
  8095b8:	dfc00417 	ldw	ra,16(sp)
  8095bc:	dcc00317 	ldw	r19,12(sp)
  8095c0:	dc800217 	ldw	r18,8(sp)
  8095c4:	dc400117 	ldw	r17,4(sp)
  8095c8:	dc000017 	ldw	r16,0(sp)
  8095cc:	dec00504 	addi	sp,sp,20
  8095d0:	f800283a 	ret
  8095d4:	9009883a 	mov	r4,r18
  8095d8:	000b883a 	mov	r5,zero
  8095dc:	08092600 	call	809260 <_Balloc>
  8095e0:	1019883a 	mov	r12,r2
  8095e4:	00800044 	movi	r2,1
  8095e8:	60800415 	stw	r2,16(r12)
  8095ec:	6005883a 	mov	r2,r12
  8095f0:	60000515 	stw	zero,20(r12)
  8095f4:	dfc00417 	ldw	ra,16(sp)
  8095f8:	dcc00317 	ldw	r19,12(sp)
  8095fc:	dc800217 	ldw	r18,8(sp)
  809600:	dc400117 	ldw	r17,4(sp)
  809604:	dc000017 	ldw	r16,0(sp)
  809608:	dec00504 	addi	sp,sp,20
  80960c:	f800283a 	ret
  809610:	880d883a 	mov	r6,r17
  809614:	04c00044 	movi	r19,1
  809618:	8023883a 	mov	r17,r16
  80961c:	3021883a 	mov	r16,r6
  809620:	003fac06 	br	8094d4 <__mdiff+0x3c>

00809624 <__lshift>:
  809624:	defff904 	addi	sp,sp,-28
  809628:	28800417 	ldw	r2,16(r5)
  80962c:	dc000015 	stw	r16,0(sp)
  809630:	3021d17a 	srai	r16,r6,5
  809634:	28c00217 	ldw	r3,8(r5)
  809638:	10800044 	addi	r2,r2,1
  80963c:	dc400115 	stw	r17,4(sp)
  809640:	80a3883a 	add	r17,r16,r2
  809644:	dd400515 	stw	r21,20(sp)
  809648:	dd000415 	stw	r20,16(sp)
  80964c:	dc800215 	stw	r18,8(sp)
  809650:	dfc00615 	stw	ra,24(sp)
  809654:	2825883a 	mov	r18,r5
  809658:	dcc00315 	stw	r19,12(sp)
  80965c:	3029883a 	mov	r20,r6
  809660:	202b883a 	mov	r21,r4
  809664:	29400117 	ldw	r5,4(r5)
  809668:	1c40030e 	bge	r3,r17,809678 <__lshift+0x54>
  80966c:	18c7883a 	add	r3,r3,r3
  809670:	29400044 	addi	r5,r5,1
  809674:	1c7ffd16 	blt	r3,r17,80966c <__lshift+0x48>
  809678:	a809883a 	mov	r4,r21
  80967c:	08092600 	call	809260 <_Balloc>
  809680:	1027883a 	mov	r19,r2
  809684:	11400504 	addi	r5,r2,20
  809688:	0400090e 	bge	zero,r16,8096b0 <__lshift+0x8c>
  80968c:	2805883a 	mov	r2,r5
  809690:	0007883a 	mov	r3,zero
  809694:	18c00044 	addi	r3,r3,1
  809698:	10000015 	stw	zero,0(r2)
  80969c:	10800104 	addi	r2,r2,4
  8096a0:	80fffc1e 	bne	r16,r3,809694 <__lshift+0x70>
  8096a4:	8405883a 	add	r2,r16,r16
  8096a8:	1085883a 	add	r2,r2,r2
  8096ac:	288b883a 	add	r5,r5,r2
  8096b0:	90800417 	ldw	r2,16(r18)
  8096b4:	91000504 	addi	r4,r18,20
  8096b8:	a18007cc 	andi	r6,r20,31
  8096bc:	1085883a 	add	r2,r2,r2
  8096c0:	1085883a 	add	r2,r2,r2
  8096c4:	208f883a 	add	r7,r4,r2
  8096c8:	30001e26 	beq	r6,zero,809744 <__lshift+0x120>
  8096cc:	00800804 	movi	r2,32
  8096d0:	1191c83a 	sub	r8,r2,r6
  8096d4:	0007883a 	mov	r3,zero
  8096d8:	20800017 	ldw	r2,0(r4)
  8096dc:	1184983a 	sll	r2,r2,r6
  8096e0:	1884b03a 	or	r2,r3,r2
  8096e4:	28800015 	stw	r2,0(r5)
  8096e8:	20c00017 	ldw	r3,0(r4)
  8096ec:	21000104 	addi	r4,r4,4
  8096f0:	29400104 	addi	r5,r5,4
  8096f4:	1a06d83a 	srl	r3,r3,r8
  8096f8:	21fff736 	bltu	r4,r7,8096d8 <__lshift+0xb4>
  8096fc:	28c00015 	stw	r3,0(r5)
  809700:	18000126 	beq	r3,zero,809708 <__lshift+0xe4>
  809704:	8c400044 	addi	r17,r17,1
  809708:	88bfffc4 	addi	r2,r17,-1
  80970c:	98800415 	stw	r2,16(r19)
  809710:	a809883a 	mov	r4,r21
  809714:	900b883a 	mov	r5,r18
  809718:	0808ce00 	call	808ce0 <_Bfree>
  80971c:	9805883a 	mov	r2,r19
  809720:	dfc00617 	ldw	ra,24(sp)
  809724:	dd400517 	ldw	r21,20(sp)
  809728:	dd000417 	ldw	r20,16(sp)
  80972c:	dcc00317 	ldw	r19,12(sp)
  809730:	dc800217 	ldw	r18,8(sp)
  809734:	dc400117 	ldw	r17,4(sp)
  809738:	dc000017 	ldw	r16,0(sp)
  80973c:	dec00704 	addi	sp,sp,28
  809740:	f800283a 	ret
  809744:	20800017 	ldw	r2,0(r4)
  809748:	21000104 	addi	r4,r4,4
  80974c:	28800015 	stw	r2,0(r5)
  809750:	29400104 	addi	r5,r5,4
  809754:	21ffec2e 	bgeu	r4,r7,809708 <__lshift+0xe4>
  809758:	20800017 	ldw	r2,0(r4)
  80975c:	21000104 	addi	r4,r4,4
  809760:	28800015 	stw	r2,0(r5)
  809764:	29400104 	addi	r5,r5,4
  809768:	21fff636 	bltu	r4,r7,809744 <__lshift+0x120>
  80976c:	003fe606 	br	809708 <__lshift+0xe4>

00809770 <__multiply>:
  809770:	defff004 	addi	sp,sp,-64
  809774:	dc800815 	stw	r18,32(sp)
  809778:	dc400715 	stw	r17,28(sp)
  80977c:	2c800417 	ldw	r18,16(r5)
  809780:	34400417 	ldw	r17,16(r6)
  809784:	dcc00915 	stw	r19,36(sp)
  809788:	dc000615 	stw	r16,24(sp)
  80978c:	dfc00f15 	stw	ra,60(sp)
  809790:	df000e15 	stw	fp,56(sp)
  809794:	ddc00d15 	stw	r23,52(sp)
  809798:	dd800c15 	stw	r22,48(sp)
  80979c:	dd400b15 	stw	r21,44(sp)
  8097a0:	dd000a15 	stw	r20,40(sp)
  8097a4:	2821883a 	mov	r16,r5
  8097a8:	3027883a 	mov	r19,r6
  8097ac:	9440040e 	bge	r18,r17,8097c0 <__multiply+0x50>
  8097b0:	8825883a 	mov	r18,r17
  8097b4:	2c400417 	ldw	r17,16(r5)
  8097b8:	2827883a 	mov	r19,r5
  8097bc:	3021883a 	mov	r16,r6
  8097c0:	80800217 	ldw	r2,8(r16)
  8097c4:	9447883a 	add	r3,r18,r17
  8097c8:	d8c00415 	stw	r3,16(sp)
  8097cc:	81400117 	ldw	r5,4(r16)
  8097d0:	10c0010e 	bge	r2,r3,8097d8 <__multiply+0x68>
  8097d4:	29400044 	addi	r5,r5,1
  8097d8:	08092600 	call	809260 <_Balloc>
  8097dc:	d8800515 	stw	r2,20(sp)
  8097e0:	d9000417 	ldw	r4,16(sp)
  8097e4:	d8c00517 	ldw	r3,20(sp)
  8097e8:	2105883a 	add	r2,r4,r4
  8097ec:	1085883a 	add	r2,r2,r2
  8097f0:	19000504 	addi	r4,r3,20
  8097f4:	2085883a 	add	r2,r4,r2
  8097f8:	d8800315 	stw	r2,12(sp)
  8097fc:	2080052e 	bgeu	r4,r2,809814 <__multiply+0xa4>
  809800:	2005883a 	mov	r2,r4
  809804:	d8c00317 	ldw	r3,12(sp)
  809808:	10000015 	stw	zero,0(r2)
  80980c:	10800104 	addi	r2,r2,4
  809810:	10fffc36 	bltu	r2,r3,809804 <__multiply+0x94>
  809814:	8c45883a 	add	r2,r17,r17
  809818:	9487883a 	add	r3,r18,r18
  80981c:	9dc00504 	addi	r23,r19,20
  809820:	1085883a 	add	r2,r2,r2
  809824:	84000504 	addi	r16,r16,20
  809828:	18c7883a 	add	r3,r3,r3
  80982c:	b885883a 	add	r2,r23,r2
  809830:	dc000015 	stw	r16,0(sp)
  809834:	d8800215 	stw	r2,8(sp)
  809838:	80f9883a 	add	fp,r16,r3
  80983c:	b880432e 	bgeu	r23,r2,80994c <__multiply+0x1dc>
  809840:	d9000115 	stw	r4,4(sp)
  809844:	b9000017 	ldw	r4,0(r23)
  809848:	253fffcc 	andi	r20,r4,65535
  80984c:	a0001a26 	beq	r20,zero,8098b8 <__multiply+0x148>
  809850:	dcc00017 	ldw	r19,0(sp)
  809854:	dc800117 	ldw	r18,4(sp)
  809858:	002b883a 	mov	r21,zero
  80985c:	9c400017 	ldw	r17,0(r19)
  809860:	94000017 	ldw	r16,0(r18)
  809864:	a009883a 	mov	r4,r20
  809868:	897fffcc 	andi	r5,r17,65535
  80986c:	0802b980 	call	802b98 <__mulsi3>
  809870:	880ad43a 	srli	r5,r17,16
  809874:	80ffffcc 	andi	r3,r16,65535
  809878:	a8c7883a 	add	r3,r21,r3
  80987c:	a009883a 	mov	r4,r20
  809880:	10e3883a 	add	r17,r2,r3
  809884:	8020d43a 	srli	r16,r16,16
  809888:	0802b980 	call	802b98 <__mulsi3>
  80988c:	8806d43a 	srli	r3,r17,16
  809890:	1405883a 	add	r2,r2,r16
  809894:	9cc00104 	addi	r19,r19,4
  809898:	1887883a 	add	r3,r3,r2
  80989c:	90c0008d 	sth	r3,2(r18)
  8098a0:	9440000d 	sth	r17,0(r18)
  8098a4:	182ad43a 	srli	r21,r3,16
  8098a8:	94800104 	addi	r18,r18,4
  8098ac:	9f3feb36 	bltu	r19,fp,80985c <__multiply+0xec>
  8098b0:	95400015 	stw	r21,0(r18)
  8098b4:	b9000017 	ldw	r4,0(r23)
  8098b8:	202ad43a 	srli	r21,r4,16
  8098bc:	a8001c26 	beq	r21,zero,809930 <__multiply+0x1c0>
  8098c0:	d9000117 	ldw	r4,4(sp)
  8098c4:	dd000017 	ldw	r20,0(sp)
  8098c8:	002d883a 	mov	r22,zero
  8098cc:	24c00017 	ldw	r19,0(r4)
  8098d0:	2025883a 	mov	r18,r4
  8098d4:	9823883a 	mov	r17,r19
  8098d8:	a4000017 	ldw	r16,0(r20)
  8098dc:	a809883a 	mov	r4,r21
  8098e0:	a5000104 	addi	r20,r20,4
  8098e4:	817fffcc 	andi	r5,r16,65535
  8098e8:	0802b980 	call	802b98 <__mulsi3>
  8098ec:	8806d43a 	srli	r3,r17,16
  8098f0:	800ad43a 	srli	r5,r16,16
  8098f4:	94c0000d 	sth	r19,0(r18)
  8098f8:	b0c7883a 	add	r3,r22,r3
  8098fc:	10e1883a 	add	r16,r2,r3
  809900:	9400008d 	sth	r16,2(r18)
  809904:	a809883a 	mov	r4,r21
  809908:	94800104 	addi	r18,r18,4
  80990c:	0802b980 	call	802b98 <__mulsi3>
  809910:	94400017 	ldw	r17,0(r18)
  809914:	8020d43a 	srli	r16,r16,16
  809918:	88ffffcc 	andi	r3,r17,65535
  80991c:	10c5883a 	add	r2,r2,r3
  809920:	80a7883a 	add	r19,r16,r2
  809924:	982cd43a 	srli	r22,r19,16
  809928:	a73feb36 	bltu	r20,fp,8098d8 <__multiply+0x168>
  80992c:	94c00015 	stw	r19,0(r18)
  809930:	d8800217 	ldw	r2,8(sp)
  809934:	bdc00104 	addi	r23,r23,4
  809938:	b880042e 	bgeu	r23,r2,80994c <__multiply+0x1dc>
  80993c:	d8c00117 	ldw	r3,4(sp)
  809940:	18c00104 	addi	r3,r3,4
  809944:	d8c00115 	stw	r3,4(sp)
  809948:	003fbe06 	br	809844 <__multiply+0xd4>
  80994c:	d9000417 	ldw	r4,16(sp)
  809950:	01000c0e 	bge	zero,r4,809984 <__multiply+0x214>
  809954:	d8c00317 	ldw	r3,12(sp)
  809958:	18bfff17 	ldw	r2,-4(r3)
  80995c:	18ffff04 	addi	r3,r3,-4
  809960:	10000326 	beq	r2,zero,809970 <__multiply+0x200>
  809964:	00000706 	br	809984 <__multiply+0x214>
  809968:	18800017 	ldw	r2,0(r3)
  80996c:	1000051e 	bne	r2,zero,809984 <__multiply+0x214>
  809970:	d9000417 	ldw	r4,16(sp)
  809974:	18ffff04 	addi	r3,r3,-4
  809978:	213fffc4 	addi	r4,r4,-1
  80997c:	d9000415 	stw	r4,16(sp)
  809980:	203ff91e 	bne	r4,zero,809968 <__multiply+0x1f8>
  809984:	d8800417 	ldw	r2,16(sp)
  809988:	d8c00517 	ldw	r3,20(sp)
  80998c:	18800415 	stw	r2,16(r3)
  809990:	1805883a 	mov	r2,r3
  809994:	dfc00f17 	ldw	ra,60(sp)
  809998:	df000e17 	ldw	fp,56(sp)
  80999c:	ddc00d17 	ldw	r23,52(sp)
  8099a0:	dd800c17 	ldw	r22,48(sp)
  8099a4:	dd400b17 	ldw	r21,44(sp)
  8099a8:	dd000a17 	ldw	r20,40(sp)
  8099ac:	dcc00917 	ldw	r19,36(sp)
  8099b0:	dc800817 	ldw	r18,32(sp)
  8099b4:	dc400717 	ldw	r17,28(sp)
  8099b8:	dc000617 	ldw	r16,24(sp)
  8099bc:	dec01004 	addi	sp,sp,64
  8099c0:	f800283a 	ret

008099c4 <__i2b>:
  8099c4:	defffd04 	addi	sp,sp,-12
  8099c8:	dc000015 	stw	r16,0(sp)
  8099cc:	04000044 	movi	r16,1
  8099d0:	dc800115 	stw	r18,4(sp)
  8099d4:	2825883a 	mov	r18,r5
  8099d8:	800b883a 	mov	r5,r16
  8099dc:	dfc00215 	stw	ra,8(sp)
  8099e0:	08092600 	call	809260 <_Balloc>
  8099e4:	14000415 	stw	r16,16(r2)
  8099e8:	14800515 	stw	r18,20(r2)
  8099ec:	dfc00217 	ldw	ra,8(sp)
  8099f0:	dc800117 	ldw	r18,4(sp)
  8099f4:	dc000017 	ldw	r16,0(sp)
  8099f8:	dec00304 	addi	sp,sp,12
  8099fc:	f800283a 	ret

00809a00 <__multadd>:
  809a00:	defff604 	addi	sp,sp,-40
  809a04:	dd800615 	stw	r22,24(sp)
  809a08:	2d800417 	ldw	r22,16(r5)
  809a0c:	df000815 	stw	fp,32(sp)
  809a10:	ddc00715 	stw	r23,28(sp)
  809a14:	dd400515 	stw	r21,20(sp)
  809a18:	dd000415 	stw	r20,16(sp)
  809a1c:	dcc00315 	stw	r19,12(sp)
  809a20:	dc800215 	stw	r18,8(sp)
  809a24:	dfc00915 	stw	ra,36(sp)
  809a28:	dc400115 	stw	r17,4(sp)
  809a2c:	dc000015 	stw	r16,0(sp)
  809a30:	282f883a 	mov	r23,r5
  809a34:	2039883a 	mov	fp,r4
  809a38:	302b883a 	mov	r21,r6
  809a3c:	3829883a 	mov	r20,r7
  809a40:	2c800504 	addi	r18,r5,20
  809a44:	0027883a 	mov	r19,zero
  809a48:	94400017 	ldw	r17,0(r18)
  809a4c:	a80b883a 	mov	r5,r21
  809a50:	9cc00044 	addi	r19,r19,1
  809a54:	893fffcc 	andi	r4,r17,65535
  809a58:	0802b980 	call	802b98 <__mulsi3>
  809a5c:	8808d43a 	srli	r4,r17,16
  809a60:	1521883a 	add	r16,r2,r20
  809a64:	a80b883a 	mov	r5,r21
  809a68:	0802b980 	call	802b98 <__mulsi3>
  809a6c:	8008d43a 	srli	r4,r16,16
  809a70:	843fffcc 	andi	r16,r16,65535
  809a74:	1105883a 	add	r2,r2,r4
  809a78:	1006943a 	slli	r3,r2,16
  809a7c:	1028d43a 	srli	r20,r2,16
  809a80:	1c07883a 	add	r3,r3,r16
  809a84:	90c00015 	stw	r3,0(r18)
  809a88:	94800104 	addi	r18,r18,4
  809a8c:	9dbfee16 	blt	r19,r22,809a48 <__multadd+0x48>
  809a90:	a0000826 	beq	r20,zero,809ab4 <__multadd+0xb4>
  809a94:	b8800217 	ldw	r2,8(r23)
  809a98:	b080130e 	bge	r22,r2,809ae8 <__multadd+0xe8>
  809a9c:	b585883a 	add	r2,r22,r22
  809aa0:	1085883a 	add	r2,r2,r2
  809aa4:	15c5883a 	add	r2,r2,r23
  809aa8:	b0c00044 	addi	r3,r22,1
  809aac:	15000515 	stw	r20,20(r2)
  809ab0:	b8c00415 	stw	r3,16(r23)
  809ab4:	b805883a 	mov	r2,r23
  809ab8:	dfc00917 	ldw	ra,36(sp)
  809abc:	df000817 	ldw	fp,32(sp)
  809ac0:	ddc00717 	ldw	r23,28(sp)
  809ac4:	dd800617 	ldw	r22,24(sp)
  809ac8:	dd400517 	ldw	r21,20(sp)
  809acc:	dd000417 	ldw	r20,16(sp)
  809ad0:	dcc00317 	ldw	r19,12(sp)
  809ad4:	dc800217 	ldw	r18,8(sp)
  809ad8:	dc400117 	ldw	r17,4(sp)
  809adc:	dc000017 	ldw	r16,0(sp)
  809ae0:	dec00a04 	addi	sp,sp,40
  809ae4:	f800283a 	ret
  809ae8:	b9400117 	ldw	r5,4(r23)
  809aec:	e009883a 	mov	r4,fp
  809af0:	29400044 	addi	r5,r5,1
  809af4:	08092600 	call	809260 <_Balloc>
  809af8:	b9800417 	ldw	r6,16(r23)
  809afc:	b9400304 	addi	r5,r23,12
  809b00:	11000304 	addi	r4,r2,12
  809b04:	318d883a 	add	r6,r6,r6
  809b08:	318d883a 	add	r6,r6,r6
  809b0c:	31800204 	addi	r6,r6,8
  809b10:	1023883a 	mov	r17,r2
  809b14:	0808b600 	call	808b60 <memcpy>
  809b18:	b80b883a 	mov	r5,r23
  809b1c:	e009883a 	mov	r4,fp
  809b20:	0808ce00 	call	808ce0 <_Bfree>
  809b24:	882f883a 	mov	r23,r17
  809b28:	003fdc06 	br	809a9c <__multadd+0x9c>

00809b2c <__pow5mult>:
  809b2c:	defffa04 	addi	sp,sp,-24
  809b30:	308000cc 	andi	r2,r6,3
  809b34:	dd000415 	stw	r20,16(sp)
  809b38:	dcc00315 	stw	r19,12(sp)
  809b3c:	dc000015 	stw	r16,0(sp)
  809b40:	dfc00515 	stw	ra,20(sp)
  809b44:	dc800215 	stw	r18,8(sp)
  809b48:	dc400115 	stw	r17,4(sp)
  809b4c:	3021883a 	mov	r16,r6
  809b50:	2027883a 	mov	r19,r4
  809b54:	2829883a 	mov	r20,r5
  809b58:	10002b1e 	bne	r2,zero,809c08 <__pow5mult+0xdc>
  809b5c:	8025d0ba 	srai	r18,r16,2
  809b60:	90001b26 	beq	r18,zero,809bd0 <__pow5mult+0xa4>
  809b64:	9c001217 	ldw	r16,72(r19)
  809b68:	8000081e 	bne	r16,zero,809b8c <__pow5mult+0x60>
  809b6c:	00003006 	br	809c30 <__pow5mult+0x104>
  809b70:	800b883a 	mov	r5,r16
  809b74:	800d883a 	mov	r6,r16
  809b78:	9809883a 	mov	r4,r19
  809b7c:	90001426 	beq	r18,zero,809bd0 <__pow5mult+0xa4>
  809b80:	80800017 	ldw	r2,0(r16)
  809b84:	10001b26 	beq	r2,zero,809bf4 <__pow5mult+0xc8>
  809b88:	1021883a 	mov	r16,r2
  809b8c:	9080004c 	andi	r2,r18,1
  809b90:	1005003a 	cmpeq	r2,r2,zero
  809b94:	9025d07a 	srai	r18,r18,1
  809b98:	800d883a 	mov	r6,r16
  809b9c:	9809883a 	mov	r4,r19
  809ba0:	a00b883a 	mov	r5,r20
  809ba4:	103ff21e 	bne	r2,zero,809b70 <__pow5mult+0x44>
  809ba8:	08097700 	call	809770 <__multiply>
  809bac:	a00b883a 	mov	r5,r20
  809bb0:	9809883a 	mov	r4,r19
  809bb4:	1023883a 	mov	r17,r2
  809bb8:	0808ce00 	call	808ce0 <_Bfree>
  809bbc:	8829883a 	mov	r20,r17
  809bc0:	800b883a 	mov	r5,r16
  809bc4:	800d883a 	mov	r6,r16
  809bc8:	9809883a 	mov	r4,r19
  809bcc:	903fec1e 	bne	r18,zero,809b80 <__pow5mult+0x54>
  809bd0:	a005883a 	mov	r2,r20
  809bd4:	dfc00517 	ldw	ra,20(sp)
  809bd8:	dd000417 	ldw	r20,16(sp)
  809bdc:	dcc00317 	ldw	r19,12(sp)
  809be0:	dc800217 	ldw	r18,8(sp)
  809be4:	dc400117 	ldw	r17,4(sp)
  809be8:	dc000017 	ldw	r16,0(sp)
  809bec:	dec00604 	addi	sp,sp,24
  809bf0:	f800283a 	ret
  809bf4:	08097700 	call	809770 <__multiply>
  809bf8:	80800015 	stw	r2,0(r16)
  809bfc:	1021883a 	mov	r16,r2
  809c00:	10000015 	stw	zero,0(r2)
  809c04:	003fe106 	br	809b8c <__pow5mult+0x60>
  809c08:	1085883a 	add	r2,r2,r2
  809c0c:	00c02074 	movhi	r3,129
  809c10:	18d07c04 	addi	r3,r3,16880
  809c14:	1085883a 	add	r2,r2,r2
  809c18:	10c5883a 	add	r2,r2,r3
  809c1c:	11bfff17 	ldw	r6,-4(r2)
  809c20:	000f883a 	mov	r7,zero
  809c24:	0809a000 	call	809a00 <__multadd>
  809c28:	1029883a 	mov	r20,r2
  809c2c:	003fcb06 	br	809b5c <__pow5mult+0x30>
  809c30:	9809883a 	mov	r4,r19
  809c34:	01409c44 	movi	r5,625
  809c38:	08099c40 	call	8099c4 <__i2b>
  809c3c:	98801215 	stw	r2,72(r19)
  809c40:	1021883a 	mov	r16,r2
  809c44:	10000015 	stw	zero,0(r2)
  809c48:	003fd006 	br	809b8c <__pow5mult+0x60>

00809c4c <__s2b>:
  809c4c:	defff904 	addi	sp,sp,-28
  809c50:	dcc00315 	stw	r19,12(sp)
  809c54:	dc800215 	stw	r18,8(sp)
  809c58:	2827883a 	mov	r19,r5
  809c5c:	2025883a 	mov	r18,r4
  809c60:	01400244 	movi	r5,9
  809c64:	39000204 	addi	r4,r7,8
  809c68:	dd000415 	stw	r20,16(sp)
  809c6c:	dc400115 	stw	r17,4(sp)
  809c70:	dfc00615 	stw	ra,24(sp)
  809c74:	dd400515 	stw	r21,20(sp)
  809c78:	dc000015 	stw	r16,0(sp)
  809c7c:	3829883a 	mov	r20,r7
  809c80:	3023883a 	mov	r17,r6
  809c84:	080c2500 	call	80c250 <__divsi3>
  809c88:	00c00044 	movi	r3,1
  809c8c:	1880350e 	bge	r3,r2,809d64 <__s2b+0x118>
  809c90:	000b883a 	mov	r5,zero
  809c94:	18c7883a 	add	r3,r3,r3
  809c98:	29400044 	addi	r5,r5,1
  809c9c:	18bffd16 	blt	r3,r2,809c94 <__s2b+0x48>
  809ca0:	9009883a 	mov	r4,r18
  809ca4:	08092600 	call	809260 <_Balloc>
  809ca8:	1011883a 	mov	r8,r2
  809cac:	d8800717 	ldw	r2,28(sp)
  809cb0:	00c00044 	movi	r3,1
  809cb4:	01800244 	movi	r6,9
  809cb8:	40800515 	stw	r2,20(r8)
  809cbc:	40c00415 	stw	r3,16(r8)
  809cc0:	3440260e 	bge	r6,r17,809d5c <__s2b+0x110>
  809cc4:	3021883a 	mov	r16,r6
  809cc8:	99ab883a 	add	r21,r19,r6
  809ccc:	9c05883a 	add	r2,r19,r16
  809cd0:	11c00007 	ldb	r7,0(r2)
  809cd4:	400b883a 	mov	r5,r8
  809cd8:	9009883a 	mov	r4,r18
  809cdc:	39fff404 	addi	r7,r7,-48
  809ce0:	01800284 	movi	r6,10
  809ce4:	0809a000 	call	809a00 <__multadd>
  809ce8:	84000044 	addi	r16,r16,1
  809cec:	1011883a 	mov	r8,r2
  809cf0:	8c3ff61e 	bne	r17,r16,809ccc <__s2b+0x80>
  809cf4:	ac45883a 	add	r2,r21,r17
  809cf8:	117ffe04 	addi	r5,r2,-8
  809cfc:	880d883a 	mov	r6,r17
  809d00:	35000c0e 	bge	r6,r20,809d34 <__s2b+0xe8>
  809d04:	a185c83a 	sub	r2,r20,r6
  809d08:	2821883a 	mov	r16,r5
  809d0c:	28a3883a 	add	r17,r5,r2
  809d10:	81c00007 	ldb	r7,0(r16)
  809d14:	400b883a 	mov	r5,r8
  809d18:	9009883a 	mov	r4,r18
  809d1c:	39fff404 	addi	r7,r7,-48
  809d20:	01800284 	movi	r6,10
  809d24:	0809a000 	call	809a00 <__multadd>
  809d28:	84000044 	addi	r16,r16,1
  809d2c:	1011883a 	mov	r8,r2
  809d30:	847ff71e 	bne	r16,r17,809d10 <__s2b+0xc4>
  809d34:	4005883a 	mov	r2,r8
  809d38:	dfc00617 	ldw	ra,24(sp)
  809d3c:	dd400517 	ldw	r21,20(sp)
  809d40:	dd000417 	ldw	r20,16(sp)
  809d44:	dcc00317 	ldw	r19,12(sp)
  809d48:	dc800217 	ldw	r18,8(sp)
  809d4c:	dc400117 	ldw	r17,4(sp)
  809d50:	dc000017 	ldw	r16,0(sp)
  809d54:	dec00704 	addi	sp,sp,28
  809d58:	f800283a 	ret
  809d5c:	99400284 	addi	r5,r19,10
  809d60:	003fe706 	br	809d00 <__s2b+0xb4>
  809d64:	000b883a 	mov	r5,zero
  809d68:	003fcd06 	br	809ca0 <__s2b+0x54>

00809d6c <putc>:
  809d6c:	defffc04 	addi	sp,sp,-16
  809d70:	dc800215 	stw	r18,8(sp)
  809d74:	04802074 	movhi	r18,129
  809d78:	9497bd04 	addi	r18,r18,24308
  809d7c:	90c00017 	ldw	r3,0(r18)
  809d80:	dc400115 	stw	r17,4(sp)
  809d84:	dc000015 	stw	r16,0(sp)
  809d88:	dfc00315 	stw	ra,12(sp)
  809d8c:	2023883a 	mov	r17,r4
  809d90:	2821883a 	mov	r16,r5
  809d94:	18000226 	beq	r3,zero,809da0 <putc+0x34>
  809d98:	18800e17 	ldw	r2,56(r3)
  809d9c:	10001126 	beq	r2,zero,809de4 <putc+0x78>
  809da0:	80800217 	ldw	r2,8(r16)
  809da4:	10ffffc4 	addi	r3,r2,-1
  809da8:	80c00215 	stw	r3,8(r16)
  809dac:	18001316 	blt	r3,zero,809dfc <putc+0x90>
  809db0:	80800017 	ldw	r2,0(r16)
  809db4:	14400005 	stb	r17,0(r2)
  809db8:	80c00017 	ldw	r3,0(r16)
  809dbc:	18800044 	addi	r2,r3,1
  809dc0:	18c00003 	ldbu	r3,0(r3)
  809dc4:	80800015 	stw	r2,0(r16)
  809dc8:	1805883a 	mov	r2,r3
  809dcc:	dfc00317 	ldw	ra,12(sp)
  809dd0:	dc800217 	ldw	r18,8(sp)
  809dd4:	dc400117 	ldw	r17,4(sp)
  809dd8:	dc000017 	ldw	r16,0(sp)
  809ddc:	dec00404 	addi	sp,sp,16
  809de0:	f800283a 	ret
  809de4:	1809883a 	mov	r4,r3
  809de8:	0807b3c0 	call	807b3c <__sinit>
  809dec:	80800217 	ldw	r2,8(r16)
  809df0:	10ffffc4 	addi	r3,r2,-1
  809df4:	80c00215 	stw	r3,8(r16)
  809df8:	183fed0e 	bge	r3,zero,809db0 <putc+0x44>
  809dfc:	80800617 	ldw	r2,24(r16)
  809e00:	18800f16 	blt	r3,r2,809e40 <putc+0xd4>
  809e04:	80800017 	ldw	r2,0(r16)
  809e08:	14400005 	stb	r17,0(r2)
  809e0c:	81000017 	ldw	r4,0(r16)
  809e10:	00800284 	movi	r2,10
  809e14:	20c00003 	ldbu	r3,0(r4)
  809e18:	18801226 	beq	r3,r2,809e64 <putc+0xf8>
  809e1c:	20800044 	addi	r2,r4,1
  809e20:	80800015 	stw	r2,0(r16)
  809e24:	1805883a 	mov	r2,r3
  809e28:	dfc00317 	ldw	ra,12(sp)
  809e2c:	dc800217 	ldw	r18,8(sp)
  809e30:	dc400117 	ldw	r17,4(sp)
  809e34:	dc000017 	ldw	r16,0(sp)
  809e38:	dec00404 	addi	sp,sp,16
  809e3c:	f800283a 	ret
  809e40:	91000017 	ldw	r4,0(r18)
  809e44:	880b883a 	mov	r5,r17
  809e48:	800d883a 	mov	r6,r16
  809e4c:	dfc00317 	ldw	ra,12(sp)
  809e50:	dc800217 	ldw	r18,8(sp)
  809e54:	dc400117 	ldw	r17,4(sp)
  809e58:	dc000017 	ldw	r16,0(sp)
  809e5c:	dec00404 	addi	sp,sp,16
  809e60:	080a9a41 	jmpi	80a9a4 <__swbuf_r>
  809e64:	91000017 	ldw	r4,0(r18)
  809e68:	180b883a 	mov	r5,r3
  809e6c:	003ff606 	br	809e48 <putc+0xdc>

00809e70 <_putc_r>:
  809e70:	defffc04 	addi	sp,sp,-16
  809e74:	dc400215 	stw	r17,8(sp)
  809e78:	dc000115 	stw	r16,4(sp)
  809e7c:	dfc00315 	stw	ra,12(sp)
  809e80:	2021883a 	mov	r16,r4
  809e84:	2823883a 	mov	r17,r5
  809e88:	20000226 	beq	r4,zero,809e94 <_putc_r+0x24>
  809e8c:	20800e17 	ldw	r2,56(r4)
  809e90:	10001026 	beq	r2,zero,809ed4 <_putc_r+0x64>
  809e94:	30800217 	ldw	r2,8(r6)
  809e98:	10ffffc4 	addi	r3,r2,-1
  809e9c:	30c00215 	stw	r3,8(r6)
  809ea0:	18001316 	blt	r3,zero,809ef0 <_putc_r+0x80>
  809ea4:	30800017 	ldw	r2,0(r6)
  809ea8:	14400005 	stb	r17,0(r2)
  809eac:	30c00017 	ldw	r3,0(r6)
  809eb0:	18800044 	addi	r2,r3,1
  809eb4:	18c00003 	ldbu	r3,0(r3)
  809eb8:	30800015 	stw	r2,0(r6)
  809ebc:	1805883a 	mov	r2,r3
  809ec0:	dfc00317 	ldw	ra,12(sp)
  809ec4:	dc400217 	ldw	r17,8(sp)
  809ec8:	dc000117 	ldw	r16,4(sp)
  809ecc:	dec00404 	addi	sp,sp,16
  809ed0:	f800283a 	ret
  809ed4:	d9800015 	stw	r6,0(sp)
  809ed8:	0807b3c0 	call	807b3c <__sinit>
  809edc:	d9800017 	ldw	r6,0(sp)
  809ee0:	30800217 	ldw	r2,8(r6)
  809ee4:	10ffffc4 	addi	r3,r2,-1
  809ee8:	30c00215 	stw	r3,8(r6)
  809eec:	183fed0e 	bge	r3,zero,809ea4 <_putc_r+0x34>
  809ef0:	30800617 	ldw	r2,24(r6)
  809ef4:	18800e16 	blt	r3,r2,809f30 <_putc_r+0xc0>
  809ef8:	30800017 	ldw	r2,0(r6)
  809efc:	14400005 	stb	r17,0(r2)
  809f00:	31000017 	ldw	r4,0(r6)
  809f04:	00800284 	movi	r2,10
  809f08:	20c00003 	ldbu	r3,0(r4)
  809f0c:	18800f26 	beq	r3,r2,809f4c <_putc_r+0xdc>
  809f10:	20800044 	addi	r2,r4,1
  809f14:	30800015 	stw	r2,0(r6)
  809f18:	1805883a 	mov	r2,r3
  809f1c:	dfc00317 	ldw	ra,12(sp)
  809f20:	dc400217 	ldw	r17,8(sp)
  809f24:	dc000117 	ldw	r16,4(sp)
  809f28:	dec00404 	addi	sp,sp,16
  809f2c:	f800283a 	ret
  809f30:	8009883a 	mov	r4,r16
  809f34:	880b883a 	mov	r5,r17
  809f38:	dfc00317 	ldw	ra,12(sp)
  809f3c:	dc400217 	ldw	r17,8(sp)
  809f40:	dc000117 	ldw	r16,4(sp)
  809f44:	dec00404 	addi	sp,sp,16
  809f48:	080a9a41 	jmpi	80a9a4 <__swbuf_r>
  809f4c:	8009883a 	mov	r4,r16
  809f50:	180b883a 	mov	r5,r3
  809f54:	003ff806 	br	809f38 <_putc_r+0xc8>

00809f58 <_realloc_r>:
  809f58:	defff404 	addi	sp,sp,-48
  809f5c:	dd800815 	stw	r22,32(sp)
  809f60:	dc800415 	stw	r18,16(sp)
  809f64:	dc400315 	stw	r17,12(sp)
  809f68:	dfc00b15 	stw	ra,44(sp)
  809f6c:	df000a15 	stw	fp,40(sp)
  809f70:	ddc00915 	stw	r23,36(sp)
  809f74:	dd400715 	stw	r21,28(sp)
  809f78:	dd000615 	stw	r20,24(sp)
  809f7c:	dcc00515 	stw	r19,20(sp)
  809f80:	dc000215 	stw	r16,8(sp)
  809f84:	2825883a 	mov	r18,r5
  809f88:	3023883a 	mov	r17,r6
  809f8c:	202d883a 	mov	r22,r4
  809f90:	2800c926 	beq	r5,zero,80a2b8 <_realloc_r+0x360>
  809f94:	080c8100 	call	80c810 <__malloc_lock>
  809f98:	943ffe04 	addi	r16,r18,-8
  809f9c:	88c002c4 	addi	r3,r17,11
  809fa0:	00800584 	movi	r2,22
  809fa4:	82000117 	ldw	r8,4(r16)
  809fa8:	10c01b2e 	bgeu	r2,r3,80a018 <_realloc_r+0xc0>
  809fac:	00bffe04 	movi	r2,-8
  809fb0:	188e703a 	and	r7,r3,r2
  809fb4:	3839883a 	mov	fp,r7
  809fb8:	38001a16 	blt	r7,zero,80a024 <_realloc_r+0xcc>
  809fbc:	e4401936 	bltu	fp,r17,80a024 <_realloc_r+0xcc>
  809fc0:	013fff04 	movi	r4,-4
  809fc4:	4126703a 	and	r19,r8,r4
  809fc8:	99c02616 	blt	r19,r7,80a064 <_realloc_r+0x10c>
  809fcc:	802b883a 	mov	r21,r16
  809fd0:	9829883a 	mov	r20,r19
  809fd4:	84000204 	addi	r16,r16,8
  809fd8:	a80f883a 	mov	r7,r21
  809fdc:	a70dc83a 	sub	r6,r20,fp
  809fe0:	008003c4 	movi	r2,15
  809fe4:	1180c136 	bltu	r2,r6,80a2ec <_realloc_r+0x394>
  809fe8:	38800117 	ldw	r2,4(r7)
  809fec:	a549883a 	add	r4,r20,r21
  809ff0:	1080004c 	andi	r2,r2,1
  809ff4:	a084b03a 	or	r2,r20,r2
  809ff8:	38800115 	stw	r2,4(r7)
  809ffc:	20c00117 	ldw	r3,4(r4)
  80a000:	18c00054 	ori	r3,r3,1
  80a004:	20c00115 	stw	r3,4(r4)
  80a008:	b009883a 	mov	r4,r22
  80a00c:	080c8140 	call	80c814 <__malloc_unlock>
  80a010:	8023883a 	mov	r17,r16
  80a014:	00000606 	br	80a030 <_realloc_r+0xd8>
  80a018:	01c00404 	movi	r7,16
  80a01c:	3839883a 	mov	fp,r7
  80a020:	e47fe72e 	bgeu	fp,r17,809fc0 <_realloc_r+0x68>
  80a024:	00800304 	movi	r2,12
  80a028:	0023883a 	mov	r17,zero
  80a02c:	b0800015 	stw	r2,0(r22)
  80a030:	8805883a 	mov	r2,r17
  80a034:	dfc00b17 	ldw	ra,44(sp)
  80a038:	df000a17 	ldw	fp,40(sp)
  80a03c:	ddc00917 	ldw	r23,36(sp)
  80a040:	dd800817 	ldw	r22,32(sp)
  80a044:	dd400717 	ldw	r21,28(sp)
  80a048:	dd000617 	ldw	r20,24(sp)
  80a04c:	dcc00517 	ldw	r19,20(sp)
  80a050:	dc800417 	ldw	r18,16(sp)
  80a054:	dc400317 	ldw	r17,12(sp)
  80a058:	dc000217 	ldw	r16,8(sp)
  80a05c:	dec00c04 	addi	sp,sp,48
  80a060:	f800283a 	ret
  80a064:	00802074 	movhi	r2,129
  80a068:	10921604 	addi	r2,r2,18520
  80a06c:	12400217 	ldw	r9,8(r2)
  80a070:	84cd883a 	add	r6,r16,r19
  80a074:	802b883a 	mov	r21,r16
  80a078:	3240b926 	beq	r6,r9,80a360 <_realloc_r+0x408>
  80a07c:	31400117 	ldw	r5,4(r6)
  80a080:	00bfff84 	movi	r2,-2
  80a084:	2884703a 	and	r2,r5,r2
  80a088:	1185883a 	add	r2,r2,r6
  80a08c:	10c00117 	ldw	r3,4(r2)
  80a090:	18c0004c 	andi	r3,r3,1
  80a094:	1807003a 	cmpeq	r3,r3,zero
  80a098:	1800a326 	beq	r3,zero,80a328 <_realloc_r+0x3d0>
  80a09c:	2908703a 	and	r4,r5,r4
  80a0a0:	9929883a 	add	r20,r19,r4
  80a0a4:	a1c0a30e 	bge	r20,r7,80a334 <_realloc_r+0x3dc>
  80a0a8:	4080004c 	andi	r2,r8,1
  80a0ac:	1000551e 	bne	r2,zero,80a204 <_realloc_r+0x2ac>
  80a0b0:	80800017 	ldw	r2,0(r16)
  80a0b4:	80afc83a 	sub	r23,r16,r2
  80a0b8:	b8c00117 	ldw	r3,4(r23)
  80a0bc:	00bfff04 	movi	r2,-4
  80a0c0:	1884703a 	and	r2,r3,r2
  80a0c4:	30002e26 	beq	r6,zero,80a180 <_realloc_r+0x228>
  80a0c8:	3240b926 	beq	r6,r9,80a3b0 <_realloc_r+0x458>
  80a0cc:	98a9883a 	add	r20,r19,r2
  80a0d0:	2509883a 	add	r4,r4,r20
  80a0d4:	d9000015 	stw	r4,0(sp)
  80a0d8:	21c02a16 	blt	r4,r7,80a184 <_realloc_r+0x22c>
  80a0dc:	30800317 	ldw	r2,12(r6)
  80a0e0:	30c00217 	ldw	r3,8(r6)
  80a0e4:	01400904 	movi	r5,36
  80a0e8:	99bfff04 	addi	r6,r19,-4
  80a0ec:	18800315 	stw	r2,12(r3)
  80a0f0:	10c00215 	stw	r3,8(r2)
  80a0f4:	b9000317 	ldw	r4,12(r23)
  80a0f8:	b8800217 	ldw	r2,8(r23)
  80a0fc:	b82b883a 	mov	r21,r23
  80a100:	bc000204 	addi	r16,r23,8
  80a104:	20800215 	stw	r2,8(r4)
  80a108:	11000315 	stw	r4,12(r2)
  80a10c:	2980e436 	bltu	r5,r6,80a4a0 <_realloc_r+0x548>
  80a110:	008004c4 	movi	r2,19
  80a114:	9009883a 	mov	r4,r18
  80a118:	8011883a 	mov	r8,r16
  80a11c:	11800f2e 	bgeu	r2,r6,80a15c <_realloc_r+0x204>
  80a120:	90800017 	ldw	r2,0(r18)
  80a124:	ba000404 	addi	r8,r23,16
  80a128:	91000204 	addi	r4,r18,8
  80a12c:	b8800215 	stw	r2,8(r23)
  80a130:	90c00117 	ldw	r3,4(r18)
  80a134:	008006c4 	movi	r2,27
  80a138:	b8c00315 	stw	r3,12(r23)
  80a13c:	1180072e 	bgeu	r2,r6,80a15c <_realloc_r+0x204>
  80a140:	90c00217 	ldw	r3,8(r18)
  80a144:	ba000604 	addi	r8,r23,24
  80a148:	91000404 	addi	r4,r18,16
  80a14c:	b8c00415 	stw	r3,16(r23)
  80a150:	90800317 	ldw	r2,12(r18)
  80a154:	b8800515 	stw	r2,20(r23)
  80a158:	3140e726 	beq	r6,r5,80a4f8 <_realloc_r+0x5a0>
  80a15c:	20800017 	ldw	r2,0(r4)
  80a160:	dd000017 	ldw	r20,0(sp)
  80a164:	b80f883a 	mov	r7,r23
  80a168:	40800015 	stw	r2,0(r8)
  80a16c:	20c00117 	ldw	r3,4(r4)
  80a170:	40c00115 	stw	r3,4(r8)
  80a174:	20800217 	ldw	r2,8(r4)
  80a178:	40800215 	stw	r2,8(r8)
  80a17c:	003f9706 	br	809fdc <_realloc_r+0x84>
  80a180:	98a9883a 	add	r20,r19,r2
  80a184:	a1c01f16 	blt	r20,r7,80a204 <_realloc_r+0x2ac>
  80a188:	b8c00317 	ldw	r3,12(r23)
  80a18c:	b8800217 	ldw	r2,8(r23)
  80a190:	99bfff04 	addi	r6,r19,-4
  80a194:	01400904 	movi	r5,36
  80a198:	b82b883a 	mov	r21,r23
  80a19c:	18800215 	stw	r2,8(r3)
  80a1a0:	10c00315 	stw	r3,12(r2)
  80a1a4:	bc000204 	addi	r16,r23,8
  80a1a8:	2980c336 	bltu	r5,r6,80a4b8 <_realloc_r+0x560>
  80a1ac:	008004c4 	movi	r2,19
  80a1b0:	9009883a 	mov	r4,r18
  80a1b4:	8011883a 	mov	r8,r16
  80a1b8:	11800f2e 	bgeu	r2,r6,80a1f8 <_realloc_r+0x2a0>
  80a1bc:	90800017 	ldw	r2,0(r18)
  80a1c0:	ba000404 	addi	r8,r23,16
  80a1c4:	91000204 	addi	r4,r18,8
  80a1c8:	b8800215 	stw	r2,8(r23)
  80a1cc:	90c00117 	ldw	r3,4(r18)
  80a1d0:	008006c4 	movi	r2,27
  80a1d4:	b8c00315 	stw	r3,12(r23)
  80a1d8:	1180072e 	bgeu	r2,r6,80a1f8 <_realloc_r+0x2a0>
  80a1dc:	90c00217 	ldw	r3,8(r18)
  80a1e0:	ba000604 	addi	r8,r23,24
  80a1e4:	91000404 	addi	r4,r18,16
  80a1e8:	b8c00415 	stw	r3,16(r23)
  80a1ec:	90800317 	ldw	r2,12(r18)
  80a1f0:	b8800515 	stw	r2,20(r23)
  80a1f4:	3140c726 	beq	r6,r5,80a514 <_realloc_r+0x5bc>
  80a1f8:	20800017 	ldw	r2,0(r4)
  80a1fc:	b80f883a 	mov	r7,r23
  80a200:	003fd906 	br	80a168 <_realloc_r+0x210>
  80a204:	880b883a 	mov	r5,r17
  80a208:	b009883a 	mov	r4,r22
  80a20c:	08034100 	call	803410 <_malloc_r>
  80a210:	1023883a 	mov	r17,r2
  80a214:	10002526 	beq	r2,zero,80a2ac <_realloc_r+0x354>
  80a218:	80800117 	ldw	r2,4(r16)
  80a21c:	00ffff84 	movi	r3,-2
  80a220:	893ffe04 	addi	r4,r17,-8
  80a224:	10c4703a 	and	r2,r2,r3
  80a228:	8085883a 	add	r2,r16,r2
  80a22c:	20809526 	beq	r4,r2,80a484 <_realloc_r+0x52c>
  80a230:	99bfff04 	addi	r6,r19,-4
  80a234:	01c00904 	movi	r7,36
  80a238:	39804536 	bltu	r7,r6,80a350 <_realloc_r+0x3f8>
  80a23c:	008004c4 	movi	r2,19
  80a240:	9009883a 	mov	r4,r18
  80a244:	880b883a 	mov	r5,r17
  80a248:	11800f2e 	bgeu	r2,r6,80a288 <_realloc_r+0x330>
  80a24c:	90800017 	ldw	r2,0(r18)
  80a250:	89400204 	addi	r5,r17,8
  80a254:	91000204 	addi	r4,r18,8
  80a258:	88800015 	stw	r2,0(r17)
  80a25c:	90c00117 	ldw	r3,4(r18)
  80a260:	008006c4 	movi	r2,27
  80a264:	88c00115 	stw	r3,4(r17)
  80a268:	1180072e 	bgeu	r2,r6,80a288 <_realloc_r+0x330>
  80a26c:	90c00217 	ldw	r3,8(r18)
  80a270:	89400404 	addi	r5,r17,16
  80a274:	91000404 	addi	r4,r18,16
  80a278:	88c00215 	stw	r3,8(r17)
  80a27c:	90800317 	ldw	r2,12(r18)
  80a280:	88800315 	stw	r2,12(r17)
  80a284:	31c09126 	beq	r6,r7,80a4cc <_realloc_r+0x574>
  80a288:	20800017 	ldw	r2,0(r4)
  80a28c:	28800015 	stw	r2,0(r5)
  80a290:	20c00117 	ldw	r3,4(r4)
  80a294:	28c00115 	stw	r3,4(r5)
  80a298:	20800217 	ldw	r2,8(r4)
  80a29c:	28800215 	stw	r2,8(r5)
  80a2a0:	900b883a 	mov	r5,r18
  80a2a4:	b009883a 	mov	r4,r22
  80a2a8:	0807ef40 	call	807ef4 <_free_r>
  80a2ac:	b009883a 	mov	r4,r22
  80a2b0:	080c8140 	call	80c814 <__malloc_unlock>
  80a2b4:	003f5e06 	br	80a030 <_realloc_r+0xd8>
  80a2b8:	300b883a 	mov	r5,r6
  80a2bc:	dfc00b17 	ldw	ra,44(sp)
  80a2c0:	df000a17 	ldw	fp,40(sp)
  80a2c4:	ddc00917 	ldw	r23,36(sp)
  80a2c8:	dd800817 	ldw	r22,32(sp)
  80a2cc:	dd400717 	ldw	r21,28(sp)
  80a2d0:	dd000617 	ldw	r20,24(sp)
  80a2d4:	dcc00517 	ldw	r19,20(sp)
  80a2d8:	dc800417 	ldw	r18,16(sp)
  80a2dc:	dc400317 	ldw	r17,12(sp)
  80a2e0:	dc000217 	ldw	r16,8(sp)
  80a2e4:	dec00c04 	addi	sp,sp,48
  80a2e8:	08034101 	jmpi	803410 <_malloc_r>
  80a2ec:	38800117 	ldw	r2,4(r7)
  80a2f0:	e54b883a 	add	r5,fp,r21
  80a2f4:	31000054 	ori	r4,r6,1
  80a2f8:	1080004c 	andi	r2,r2,1
  80a2fc:	1704b03a 	or	r2,r2,fp
  80a300:	38800115 	stw	r2,4(r7)
  80a304:	29000115 	stw	r4,4(r5)
  80a308:	2987883a 	add	r3,r5,r6
  80a30c:	18800117 	ldw	r2,4(r3)
  80a310:	29400204 	addi	r5,r5,8
  80a314:	b009883a 	mov	r4,r22
  80a318:	10800054 	ori	r2,r2,1
  80a31c:	18800115 	stw	r2,4(r3)
  80a320:	0807ef40 	call	807ef4 <_free_r>
  80a324:	003f3806 	br	80a008 <_realloc_r+0xb0>
  80a328:	000d883a 	mov	r6,zero
  80a32c:	0009883a 	mov	r4,zero
  80a330:	003f5d06 	br	80a0a8 <_realloc_r+0x150>
  80a334:	30c00217 	ldw	r3,8(r6)
  80a338:	30800317 	ldw	r2,12(r6)
  80a33c:	800f883a 	mov	r7,r16
  80a340:	84000204 	addi	r16,r16,8
  80a344:	10c00215 	stw	r3,8(r2)
  80a348:	18800315 	stw	r2,12(r3)
  80a34c:	003f2306 	br	809fdc <_realloc_r+0x84>
  80a350:	8809883a 	mov	r4,r17
  80a354:	900b883a 	mov	r5,r18
  80a358:	0808c000 	call	808c00 <memmove>
  80a35c:	003fd006 	br	80a2a0 <_realloc_r+0x348>
  80a360:	30800117 	ldw	r2,4(r6)
  80a364:	e0c00404 	addi	r3,fp,16
  80a368:	1108703a 	and	r4,r2,r4
  80a36c:	9905883a 	add	r2,r19,r4
  80a370:	10ff4d16 	blt	r2,r3,80a0a8 <_realloc_r+0x150>
  80a374:	1705c83a 	sub	r2,r2,fp
  80a378:	870b883a 	add	r5,r16,fp
  80a37c:	10800054 	ori	r2,r2,1
  80a380:	28800115 	stw	r2,4(r5)
  80a384:	80c00117 	ldw	r3,4(r16)
  80a388:	00802074 	movhi	r2,129
  80a38c:	10921604 	addi	r2,r2,18520
  80a390:	b009883a 	mov	r4,r22
  80a394:	18c0004c 	andi	r3,r3,1
  80a398:	e0c6b03a 	or	r3,fp,r3
  80a39c:	11400215 	stw	r5,8(r2)
  80a3a0:	80c00115 	stw	r3,4(r16)
  80a3a4:	080c8140 	call	80c814 <__malloc_unlock>
  80a3a8:	84400204 	addi	r17,r16,8
  80a3ac:	003f2006 	br	80a030 <_realloc_r+0xd8>
  80a3b0:	98a9883a 	add	r20,r19,r2
  80a3b4:	2509883a 	add	r4,r4,r20
  80a3b8:	e0800404 	addi	r2,fp,16
  80a3bc:	d9000115 	stw	r4,4(sp)
  80a3c0:	20bf7016 	blt	r4,r2,80a184 <_realloc_r+0x22c>
  80a3c4:	b8c00317 	ldw	r3,12(r23)
  80a3c8:	b8800217 	ldw	r2,8(r23)
  80a3cc:	99bfff04 	addi	r6,r19,-4
  80a3d0:	01400904 	movi	r5,36
  80a3d4:	18800215 	stw	r2,8(r3)
  80a3d8:	10c00315 	stw	r3,12(r2)
  80a3dc:	bc400204 	addi	r17,r23,8
  80a3e0:	29804136 	bltu	r5,r6,80a4e8 <_realloc_r+0x590>
  80a3e4:	008004c4 	movi	r2,19
  80a3e8:	9009883a 	mov	r4,r18
  80a3ec:	880f883a 	mov	r7,r17
  80a3f0:	11800f2e 	bgeu	r2,r6,80a430 <_realloc_r+0x4d8>
  80a3f4:	90800017 	ldw	r2,0(r18)
  80a3f8:	b9c00404 	addi	r7,r23,16
  80a3fc:	91000204 	addi	r4,r18,8
  80a400:	b8800215 	stw	r2,8(r23)
  80a404:	90c00117 	ldw	r3,4(r18)
  80a408:	008006c4 	movi	r2,27
  80a40c:	b8c00315 	stw	r3,12(r23)
  80a410:	1180072e 	bgeu	r2,r6,80a430 <_realloc_r+0x4d8>
  80a414:	90c00217 	ldw	r3,8(r18)
  80a418:	b9c00604 	addi	r7,r23,24
  80a41c:	91000404 	addi	r4,r18,16
  80a420:	b8c00415 	stw	r3,16(r23)
  80a424:	90800317 	ldw	r2,12(r18)
  80a428:	b8800515 	stw	r2,20(r23)
  80a42c:	31404026 	beq	r6,r5,80a530 <_realloc_r+0x5d8>
  80a430:	20800017 	ldw	r2,0(r4)
  80a434:	38800015 	stw	r2,0(r7)
  80a438:	20c00117 	ldw	r3,4(r4)
  80a43c:	38c00115 	stw	r3,4(r7)
  80a440:	20800217 	ldw	r2,8(r4)
  80a444:	38800215 	stw	r2,8(r7)
  80a448:	d8c00117 	ldw	r3,4(sp)
  80a44c:	bf0b883a 	add	r5,r23,fp
  80a450:	b009883a 	mov	r4,r22
  80a454:	1f05c83a 	sub	r2,r3,fp
  80a458:	10800054 	ori	r2,r2,1
  80a45c:	28800115 	stw	r2,4(r5)
  80a460:	b8c00117 	ldw	r3,4(r23)
  80a464:	00802074 	movhi	r2,129
  80a468:	10921604 	addi	r2,r2,18520
  80a46c:	11400215 	stw	r5,8(r2)
  80a470:	18c0004c 	andi	r3,r3,1
  80a474:	e0c6b03a 	or	r3,fp,r3
  80a478:	b8c00115 	stw	r3,4(r23)
  80a47c:	080c8140 	call	80c814 <__malloc_unlock>
  80a480:	003eeb06 	br	80a030 <_realloc_r+0xd8>
  80a484:	20800117 	ldw	r2,4(r4)
  80a488:	00ffff04 	movi	r3,-4
  80a48c:	800f883a 	mov	r7,r16
  80a490:	10c4703a 	and	r2,r2,r3
  80a494:	98a9883a 	add	r20,r19,r2
  80a498:	84000204 	addi	r16,r16,8
  80a49c:	003ecf06 	br	809fdc <_realloc_r+0x84>
  80a4a0:	900b883a 	mov	r5,r18
  80a4a4:	8009883a 	mov	r4,r16
  80a4a8:	0808c000 	call	808c00 <memmove>
  80a4ac:	dd000017 	ldw	r20,0(sp)
  80a4b0:	b80f883a 	mov	r7,r23
  80a4b4:	003ec906 	br	809fdc <_realloc_r+0x84>
  80a4b8:	900b883a 	mov	r5,r18
  80a4bc:	8009883a 	mov	r4,r16
  80a4c0:	0808c000 	call	808c00 <memmove>
  80a4c4:	b80f883a 	mov	r7,r23
  80a4c8:	003ec406 	br	809fdc <_realloc_r+0x84>
  80a4cc:	90c00417 	ldw	r3,16(r18)
  80a4d0:	89400604 	addi	r5,r17,24
  80a4d4:	91000604 	addi	r4,r18,24
  80a4d8:	88c00415 	stw	r3,16(r17)
  80a4dc:	90800517 	ldw	r2,20(r18)
  80a4e0:	88800515 	stw	r2,20(r17)
  80a4e4:	003f6806 	br	80a288 <_realloc_r+0x330>
  80a4e8:	900b883a 	mov	r5,r18
  80a4ec:	8809883a 	mov	r4,r17
  80a4f0:	0808c000 	call	808c00 <memmove>
  80a4f4:	003fd406 	br	80a448 <_realloc_r+0x4f0>
  80a4f8:	90c00417 	ldw	r3,16(r18)
  80a4fc:	91000604 	addi	r4,r18,24
  80a500:	ba000804 	addi	r8,r23,32
  80a504:	b8c00615 	stw	r3,24(r23)
  80a508:	90800517 	ldw	r2,20(r18)
  80a50c:	b8800715 	stw	r2,28(r23)
  80a510:	003f1206 	br	80a15c <_realloc_r+0x204>
  80a514:	90c00417 	ldw	r3,16(r18)
  80a518:	91000604 	addi	r4,r18,24
  80a51c:	ba000804 	addi	r8,r23,32
  80a520:	b8c00615 	stw	r3,24(r23)
  80a524:	90800517 	ldw	r2,20(r18)
  80a528:	b8800715 	stw	r2,28(r23)
  80a52c:	003f3206 	br	80a1f8 <_realloc_r+0x2a0>
  80a530:	90c00417 	ldw	r3,16(r18)
  80a534:	91000604 	addi	r4,r18,24
  80a538:	b9c00804 	addi	r7,r23,32
  80a53c:	b8c00615 	stw	r3,24(r23)
  80a540:	90800517 	ldw	r2,20(r18)
  80a544:	b8800715 	stw	r2,28(r23)
  80a548:	003fb906 	br	80a430 <_realloc_r+0x4d8>

0080a54c <__srefill_r>:
  80a54c:	defffd04 	addi	sp,sp,-12
  80a550:	dc400115 	stw	r17,4(sp)
  80a554:	dc000015 	stw	r16,0(sp)
  80a558:	dfc00215 	stw	ra,8(sp)
  80a55c:	2023883a 	mov	r17,r4
  80a560:	2821883a 	mov	r16,r5
  80a564:	20000226 	beq	r4,zero,80a570 <__srefill_r+0x24>
  80a568:	20800e17 	ldw	r2,56(r4)
  80a56c:	10004126 	beq	r2,zero,80a674 <__srefill_r+0x128>
  80a570:	80c0030b 	ldhu	r3,12(r16)
  80a574:	80000115 	stw	zero,4(r16)
  80a578:	1880080c 	andi	r2,r3,32
  80a57c:	1000361e 	bne	r2,zero,80a658 <__srefill_r+0x10c>
  80a580:	1880010c 	andi	r2,r3,4
  80a584:	1000211e 	bne	r2,zero,80a60c <__srefill_r+0xc0>
  80a588:	1880040c 	andi	r2,r3,16
  80a58c:	10005026 	beq	r2,zero,80a6d0 <__srefill_r+0x184>
  80a590:	1880020c 	andi	r2,r3,8
  80a594:	1000541e 	bne	r2,zero,80a6e8 <__srefill_r+0x19c>
  80a598:	8080030b 	ldhu	r2,12(r16)
  80a59c:	10800114 	ori	r2,r2,4
  80a5a0:	8080030d 	sth	r2,12(r16)
  80a5a4:	80800417 	ldw	r2,16(r16)
  80a5a8:	10004526 	beq	r2,zero,80a6c0 <__srefill_r+0x174>
  80a5ac:	8080030b 	ldhu	r2,12(r16)
  80a5b0:	108000cc 	andi	r2,r2,3
  80a5b4:	1000361e 	bne	r2,zero,80a690 <__srefill_r+0x144>
  80a5b8:	81800417 	ldw	r6,16(r16)
  80a5bc:	80c00817 	ldw	r3,32(r16)
  80a5c0:	81400717 	ldw	r5,28(r16)
  80a5c4:	81c00517 	ldw	r7,20(r16)
  80a5c8:	8809883a 	mov	r4,r17
  80a5cc:	81800015 	stw	r6,0(r16)
  80a5d0:	183ee83a 	callr	r3
  80a5d4:	80c0030b 	ldhu	r3,12(r16)
  80a5d8:	1009883a 	mov	r4,r2
  80a5dc:	80800115 	stw	r2,4(r16)
  80a5e0:	00b7ffc4 	movi	r2,-8193
  80a5e4:	1884703a 	and	r2,r3,r2
  80a5e8:	8080030d 	sth	r2,12(r16)
  80a5ec:	0100230e 	bge	zero,r4,80a67c <__srefill_r+0x130>
  80a5f0:	0009883a 	mov	r4,zero
  80a5f4:	2005883a 	mov	r2,r4
  80a5f8:	dfc00217 	ldw	ra,8(sp)
  80a5fc:	dc400117 	ldw	r17,4(sp)
  80a600:	dc000017 	ldw	r16,0(sp)
  80a604:	dec00304 	addi	sp,sp,12
  80a608:	f800283a 	ret
  80a60c:	81400c17 	ldw	r5,48(r16)
  80a610:	283fe426 	beq	r5,zero,80a5a4 <__srefill_r+0x58>
  80a614:	80801004 	addi	r2,r16,64
  80a618:	28800226 	beq	r5,r2,80a624 <__srefill_r+0xd8>
  80a61c:	8809883a 	mov	r4,r17
  80a620:	0807ef40 	call	807ef4 <_free_r>
  80a624:	80800f17 	ldw	r2,60(r16)
  80a628:	80000c15 	stw	zero,48(r16)
  80a62c:	80800115 	stw	r2,4(r16)
  80a630:	103fdc26 	beq	r2,zero,80a5a4 <__srefill_r+0x58>
  80a634:	80800e17 	ldw	r2,56(r16)
  80a638:	0009883a 	mov	r4,zero
  80a63c:	80800015 	stw	r2,0(r16)
  80a640:	2005883a 	mov	r2,r4
  80a644:	dfc00217 	ldw	ra,8(sp)
  80a648:	dc400117 	ldw	r17,4(sp)
  80a64c:	dc000017 	ldw	r16,0(sp)
  80a650:	dec00304 	addi	sp,sp,12
  80a654:	f800283a 	ret
  80a658:	013fffc4 	movi	r4,-1
  80a65c:	2005883a 	mov	r2,r4
  80a660:	dfc00217 	ldw	ra,8(sp)
  80a664:	dc400117 	ldw	r17,4(sp)
  80a668:	dc000017 	ldw	r16,0(sp)
  80a66c:	dec00304 	addi	sp,sp,12
  80a670:	f800283a 	ret
  80a674:	0807b3c0 	call	807b3c <__sinit>
  80a678:	003fbd06 	br	80a570 <__srefill_r+0x24>
  80a67c:	20000b1e 	bne	r4,zero,80a6ac <__srefill_r+0x160>
  80a680:	10800814 	ori	r2,r2,32
  80a684:	013fffc4 	movi	r4,-1
  80a688:	8080030d 	sth	r2,12(r16)
  80a68c:	003fd906 	br	80a5f4 <__srefill_r+0xa8>
  80a690:	00802074 	movhi	r2,129
  80a694:	1097be04 	addi	r2,r2,24312
  80a698:	11000017 	ldw	r4,0(r2)
  80a69c:	01402074 	movhi	r5,129
  80a6a0:	2969c404 	addi	r5,r5,-22768
  80a6a4:	080876c0 	call	80876c <_fwalk>
  80a6a8:	003fc306 	br	80a5b8 <__srefill_r+0x6c>
  80a6ac:	10801014 	ori	r2,r2,64
  80a6b0:	013fffc4 	movi	r4,-1
  80a6b4:	8080030d 	sth	r2,12(r16)
  80a6b8:	80000115 	stw	zero,4(r16)
  80a6bc:	003fcd06 	br	80a5f4 <__srefill_r+0xa8>
  80a6c0:	8809883a 	mov	r4,r17
  80a6c4:	800b883a 	mov	r5,r16
  80a6c8:	08088e80 	call	8088e8 <__smakebuf_r>
  80a6cc:	003fb706 	br	80a5ac <__srefill_r+0x60>
  80a6d0:	18c01014 	ori	r3,r3,64
  80a6d4:	00800244 	movi	r2,9
  80a6d8:	013fffc4 	movi	r4,-1
  80a6dc:	88800015 	stw	r2,0(r17)
  80a6e0:	80c0030d 	sth	r3,12(r16)
  80a6e4:	003fc306 	br	80a5f4 <__srefill_r+0xa8>
  80a6e8:	8809883a 	mov	r4,r17
  80a6ec:	800b883a 	mov	r5,r16
  80a6f0:	08078a40 	call	8078a4 <_fflush_r>
  80a6f4:	103fd81e 	bne	r2,zero,80a658 <__srefill_r+0x10c>
  80a6f8:	8080030b 	ldhu	r2,12(r16)
  80a6fc:	80000215 	stw	zero,8(r16)
  80a700:	80000615 	stw	zero,24(r16)
  80a704:	10bffdcc 	andi	r2,r2,65527
  80a708:	8080030d 	sth	r2,12(r16)
  80a70c:	003fa206 	br	80a598 <__srefill_r+0x4c>

0080a710 <lflush>:
  80a710:	20c0030b 	ldhu	r3,12(r4)
  80a714:	01400244 	movi	r5,9
  80a718:	0005883a 	mov	r2,zero
  80a71c:	18c0024c 	andi	r3,r3,9
  80a720:	19400126 	beq	r3,r5,80a728 <lflush+0x18>
  80a724:	f800283a 	ret
  80a728:	0807aa01 	jmpi	807aa0 <fflush>

0080a72c <__isinfd>:
  80a72c:	200d883a 	mov	r6,r4
  80a730:	0109c83a 	sub	r4,zero,r4
  80a734:	2188b03a 	or	r4,r4,r6
  80a738:	2008d7fa 	srli	r4,r4,31
  80a73c:	00a00034 	movhi	r2,32768
  80a740:	10bfffc4 	addi	r2,r2,-1
  80a744:	1144703a 	and	r2,r2,r5
  80a748:	2088b03a 	or	r4,r4,r2
  80a74c:	009ffc34 	movhi	r2,32752
  80a750:	1105c83a 	sub	r2,r2,r4
  80a754:	0087c83a 	sub	r3,zero,r2
  80a758:	10c4b03a 	or	r2,r2,r3
  80a75c:	1004d7fa 	srli	r2,r2,31
  80a760:	00c00044 	movi	r3,1
  80a764:	1885c83a 	sub	r2,r3,r2
  80a768:	f800283a 	ret

0080a76c <__isnand>:
  80a76c:	200d883a 	mov	r6,r4
  80a770:	0109c83a 	sub	r4,zero,r4
  80a774:	2188b03a 	or	r4,r4,r6
  80a778:	2008d7fa 	srli	r4,r4,31
  80a77c:	00a00034 	movhi	r2,32768
  80a780:	10bfffc4 	addi	r2,r2,-1
  80a784:	1144703a 	and	r2,r2,r5
  80a788:	2088b03a 	or	r4,r4,r2
  80a78c:	009ffc34 	movhi	r2,32752
  80a790:	1105c83a 	sub	r2,r2,r4
  80a794:	1004d7fa 	srli	r2,r2,31
  80a798:	f800283a 	ret

0080a79c <__sclose>:
  80a79c:	2940038f 	ldh	r5,14(r5)
  80a7a0:	080ac301 	jmpi	80ac30 <_close_r>

0080a7a4 <__sseek>:
  80a7a4:	defffe04 	addi	sp,sp,-8
  80a7a8:	dc000015 	stw	r16,0(sp)
  80a7ac:	2821883a 	mov	r16,r5
  80a7b0:	2940038f 	ldh	r5,14(r5)
  80a7b4:	dfc00115 	stw	ra,4(sp)
  80a7b8:	080aea80 	call	80aea8 <_lseek_r>
  80a7bc:	1007883a 	mov	r3,r2
  80a7c0:	00bfffc4 	movi	r2,-1
  80a7c4:	18800926 	beq	r3,r2,80a7ec <__sseek+0x48>
  80a7c8:	8080030b 	ldhu	r2,12(r16)
  80a7cc:	80c01415 	stw	r3,80(r16)
  80a7d0:	10840014 	ori	r2,r2,4096
  80a7d4:	8080030d 	sth	r2,12(r16)
  80a7d8:	1805883a 	mov	r2,r3
  80a7dc:	dfc00117 	ldw	ra,4(sp)
  80a7e0:	dc000017 	ldw	r16,0(sp)
  80a7e4:	dec00204 	addi	sp,sp,8
  80a7e8:	f800283a 	ret
  80a7ec:	8080030b 	ldhu	r2,12(r16)
  80a7f0:	10bbffcc 	andi	r2,r2,61439
  80a7f4:	8080030d 	sth	r2,12(r16)
  80a7f8:	1805883a 	mov	r2,r3
  80a7fc:	dfc00117 	ldw	ra,4(sp)
  80a800:	dc000017 	ldw	r16,0(sp)
  80a804:	dec00204 	addi	sp,sp,8
  80a808:	f800283a 	ret

0080a80c <__swrite>:
  80a80c:	2880030b 	ldhu	r2,12(r5)
  80a810:	defffb04 	addi	sp,sp,-20
  80a814:	dcc00315 	stw	r19,12(sp)
  80a818:	1080400c 	andi	r2,r2,256
  80a81c:	dc800215 	stw	r18,8(sp)
  80a820:	dc400115 	stw	r17,4(sp)
  80a824:	dc000015 	stw	r16,0(sp)
  80a828:	3027883a 	mov	r19,r6
  80a82c:	3825883a 	mov	r18,r7
  80a830:	dfc00415 	stw	ra,16(sp)
  80a834:	2821883a 	mov	r16,r5
  80a838:	000d883a 	mov	r6,zero
  80a83c:	01c00084 	movi	r7,2
  80a840:	2023883a 	mov	r17,r4
  80a844:	10000226 	beq	r2,zero,80a850 <__swrite+0x44>
  80a848:	2940038f 	ldh	r5,14(r5)
  80a84c:	080aea80 	call	80aea8 <_lseek_r>
  80a850:	8080030b 	ldhu	r2,12(r16)
  80a854:	8140038f 	ldh	r5,14(r16)
  80a858:	8809883a 	mov	r4,r17
  80a85c:	10bbffcc 	andi	r2,r2,61439
  80a860:	980d883a 	mov	r6,r19
  80a864:	900f883a 	mov	r7,r18
  80a868:	8080030d 	sth	r2,12(r16)
  80a86c:	dfc00417 	ldw	ra,16(sp)
  80a870:	dcc00317 	ldw	r19,12(sp)
  80a874:	dc800217 	ldw	r18,8(sp)
  80a878:	dc400117 	ldw	r17,4(sp)
  80a87c:	dc000017 	ldw	r16,0(sp)
  80a880:	dec00504 	addi	sp,sp,20
  80a884:	080aaf01 	jmpi	80aaf0 <_write_r>

0080a888 <__sread>:
  80a888:	defffe04 	addi	sp,sp,-8
  80a88c:	dc000015 	stw	r16,0(sp)
  80a890:	2821883a 	mov	r16,r5
  80a894:	2940038f 	ldh	r5,14(r5)
  80a898:	dfc00115 	stw	ra,4(sp)
  80a89c:	080af200 	call	80af20 <_read_r>
  80a8a0:	1007883a 	mov	r3,r2
  80a8a4:	10000816 	blt	r2,zero,80a8c8 <__sread+0x40>
  80a8a8:	80801417 	ldw	r2,80(r16)
  80a8ac:	10c5883a 	add	r2,r2,r3
  80a8b0:	80801415 	stw	r2,80(r16)
  80a8b4:	1805883a 	mov	r2,r3
  80a8b8:	dfc00117 	ldw	ra,4(sp)
  80a8bc:	dc000017 	ldw	r16,0(sp)
  80a8c0:	dec00204 	addi	sp,sp,8
  80a8c4:	f800283a 	ret
  80a8c8:	8080030b 	ldhu	r2,12(r16)
  80a8cc:	10bbffcc 	andi	r2,r2,61439
  80a8d0:	8080030d 	sth	r2,12(r16)
  80a8d4:	1805883a 	mov	r2,r3
  80a8d8:	dfc00117 	ldw	ra,4(sp)
  80a8dc:	dc000017 	ldw	r16,0(sp)
  80a8e0:	dec00204 	addi	sp,sp,8
  80a8e4:	f800283a 	ret

0080a8e8 <strcmp>:
  80a8e8:	2144b03a 	or	r2,r4,r5
  80a8ec:	108000cc 	andi	r2,r2,3
  80a8f0:	10001d1e 	bne	r2,zero,80a968 <strcmp+0x80>
  80a8f4:	200f883a 	mov	r7,r4
  80a8f8:	28800017 	ldw	r2,0(r5)
  80a8fc:	21000017 	ldw	r4,0(r4)
  80a900:	280d883a 	mov	r6,r5
  80a904:	2080161e 	bne	r4,r2,80a960 <strcmp+0x78>
  80a908:	023fbff4 	movhi	r8,65279
  80a90c:	423fbfc4 	addi	r8,r8,-257
  80a910:	2207883a 	add	r3,r4,r8
  80a914:	01602074 	movhi	r5,32897
  80a918:	29602004 	addi	r5,r5,-32640
  80a91c:	1946703a 	and	r3,r3,r5
  80a920:	0104303a 	nor	r2,zero,r4
  80a924:	10c4703a 	and	r2,r2,r3
  80a928:	10001c1e 	bne	r2,zero,80a99c <strcmp+0xb4>
  80a92c:	4013883a 	mov	r9,r8
  80a930:	2811883a 	mov	r8,r5
  80a934:	00000106 	br	80a93c <strcmp+0x54>
  80a938:	1800181e 	bne	r3,zero,80a99c <strcmp+0xb4>
  80a93c:	39c00104 	addi	r7,r7,4
  80a940:	39000017 	ldw	r4,0(r7)
  80a944:	31800104 	addi	r6,r6,4
  80a948:	31400017 	ldw	r5,0(r6)
  80a94c:	2245883a 	add	r2,r4,r9
  80a950:	1204703a 	and	r2,r2,r8
  80a954:	0106303a 	nor	r3,zero,r4
  80a958:	1886703a 	and	r3,r3,r2
  80a95c:	217ff626 	beq	r4,r5,80a938 <strcmp+0x50>
  80a960:	3809883a 	mov	r4,r7
  80a964:	300b883a 	mov	r5,r6
  80a968:	20c00007 	ldb	r3,0(r4)
  80a96c:	1800051e 	bne	r3,zero,80a984 <strcmp+0x9c>
  80a970:	00000606 	br	80a98c <strcmp+0xa4>
  80a974:	21000044 	addi	r4,r4,1
  80a978:	20c00007 	ldb	r3,0(r4)
  80a97c:	29400044 	addi	r5,r5,1
  80a980:	18000226 	beq	r3,zero,80a98c <strcmp+0xa4>
  80a984:	28800007 	ldb	r2,0(r5)
  80a988:	18bffa26 	beq	r3,r2,80a974 <strcmp+0x8c>
  80a98c:	20c00003 	ldbu	r3,0(r4)
  80a990:	28800003 	ldbu	r2,0(r5)
  80a994:	1885c83a 	sub	r2,r3,r2
  80a998:	f800283a 	ret
  80a99c:	0005883a 	mov	r2,zero
  80a9a0:	f800283a 	ret

0080a9a4 <__swbuf_r>:
  80a9a4:	defffc04 	addi	sp,sp,-16
  80a9a8:	dc400215 	stw	r17,8(sp)
  80a9ac:	dc000115 	stw	r16,4(sp)
  80a9b0:	dfc00315 	stw	ra,12(sp)
  80a9b4:	2023883a 	mov	r17,r4
  80a9b8:	2821883a 	mov	r16,r5
  80a9bc:	20000226 	beq	r4,zero,80a9c8 <__swbuf_r+0x24>
  80a9c0:	20800e17 	ldw	r2,56(r4)
  80a9c4:	10002f26 	beq	r2,zero,80aa84 <__swbuf_r+0xe0>
  80a9c8:	3080030b 	ldhu	r2,12(r6)
  80a9cc:	30c00617 	ldw	r3,24(r6)
  80a9d0:	1080020c 	andi	r2,r2,8
  80a9d4:	30c00215 	stw	r3,8(r6)
  80a9d8:	10002226 	beq	r2,zero,80aa64 <__swbuf_r+0xc0>
  80a9dc:	30c00417 	ldw	r3,16(r6)
  80a9e0:	18002026 	beq	r3,zero,80aa64 <__swbuf_r+0xc0>
  80a9e4:	31000017 	ldw	r4,0(r6)
  80a9e8:	30800517 	ldw	r2,20(r6)
  80a9ec:	20c7c83a 	sub	r3,r4,r3
  80a9f0:	18802f0e 	bge	r3,r2,80aab0 <__swbuf_r+0x10c>
  80a9f4:	19400044 	addi	r5,r3,1
  80a9f8:	30800217 	ldw	r2,8(r6)
  80a9fc:	84003fcc 	andi	r16,r16,255
  80aa00:	20c00044 	addi	r3,r4,1
  80aa04:	10bfffc4 	addi	r2,r2,-1
  80aa08:	30800215 	stw	r2,8(r6)
  80aa0c:	24000005 	stb	r16,0(r4)
  80aa10:	30800517 	ldw	r2,20(r6)
  80aa14:	30c00015 	stw	r3,0(r6)
  80aa18:	11400c26 	beq	r2,r5,80aa4c <__swbuf_r+0xa8>
  80aa1c:	3080030b 	ldhu	r2,12(r6)
  80aa20:	1080004c 	andi	r2,r2,1
  80aa24:	1005003a 	cmpeq	r2,r2,zero
  80aa28:	10000626 	beq	r2,zero,80aa44 <__swbuf_r+0xa0>
  80aa2c:	8005883a 	mov	r2,r16
  80aa30:	dfc00317 	ldw	ra,12(sp)
  80aa34:	dc400217 	ldw	r17,8(sp)
  80aa38:	dc000117 	ldw	r16,4(sp)
  80aa3c:	dec00404 	addi	sp,sp,16
  80aa40:	f800283a 	ret
  80aa44:	00800284 	movi	r2,10
  80aa48:	80bff81e 	bne	r16,r2,80aa2c <__swbuf_r+0x88>
  80aa4c:	8809883a 	mov	r4,r17
  80aa50:	300b883a 	mov	r5,r6
  80aa54:	08078a40 	call	8078a4 <_fflush_r>
  80aa58:	103ff426 	beq	r2,zero,80aa2c <__swbuf_r+0x88>
  80aa5c:	043fffc4 	movi	r16,-1
  80aa60:	003ff206 	br	80aa2c <__swbuf_r+0x88>
  80aa64:	300b883a 	mov	r5,r6
  80aa68:	8809883a 	mov	r4,r17
  80aa6c:	d9800015 	stw	r6,0(sp)
  80aa70:	0805dbc0 	call	805dbc <__swsetup_r>
  80aa74:	d9800017 	ldw	r6,0(sp)
  80aa78:	1000061e 	bne	r2,zero,80aa94 <__swbuf_r+0xf0>
  80aa7c:	30c00417 	ldw	r3,16(r6)
  80aa80:	003fd806 	br	80a9e4 <__swbuf_r+0x40>
  80aa84:	d9800015 	stw	r6,0(sp)
  80aa88:	0807b3c0 	call	807b3c <__sinit>
  80aa8c:	d9800017 	ldw	r6,0(sp)
  80aa90:	003fcd06 	br	80a9c8 <__swbuf_r+0x24>
  80aa94:	3080030b 	ldhu	r2,12(r6)
  80aa98:	00c00244 	movi	r3,9
  80aa9c:	043fffc4 	movi	r16,-1
  80aaa0:	10801014 	ori	r2,r2,64
  80aaa4:	3080030d 	sth	r2,12(r6)
  80aaa8:	88c00015 	stw	r3,0(r17)
  80aaac:	003fdf06 	br	80aa2c <__swbuf_r+0x88>
  80aab0:	300b883a 	mov	r5,r6
  80aab4:	8809883a 	mov	r4,r17
  80aab8:	d9800015 	stw	r6,0(sp)
  80aabc:	08078a40 	call	8078a4 <_fflush_r>
  80aac0:	d9800017 	ldw	r6,0(sp)
  80aac4:	103fe51e 	bne	r2,zero,80aa5c <__swbuf_r+0xb8>
  80aac8:	31000017 	ldw	r4,0(r6)
  80aacc:	01400044 	movi	r5,1
  80aad0:	003fc906 	br	80a9f8 <__swbuf_r+0x54>

0080aad4 <__swbuf>:
  80aad4:	01802074 	movhi	r6,129
  80aad8:	3197bd04 	addi	r6,r6,24308
  80aadc:	2007883a 	mov	r3,r4
  80aae0:	31000017 	ldw	r4,0(r6)
  80aae4:	280d883a 	mov	r6,r5
  80aae8:	180b883a 	mov	r5,r3
  80aaec:	080a9a41 	jmpi	80a9a4 <__swbuf_r>

0080aaf0 <_write_r>:
  80aaf0:	defffd04 	addi	sp,sp,-12
  80aaf4:	dc000015 	stw	r16,0(sp)
  80aaf8:	04002074 	movhi	r16,129
  80aafc:	841f2604 	addi	r16,r16,31896
  80ab00:	dc400115 	stw	r17,4(sp)
  80ab04:	80000015 	stw	zero,0(r16)
  80ab08:	2023883a 	mov	r17,r4
  80ab0c:	2809883a 	mov	r4,r5
  80ab10:	300b883a 	mov	r5,r6
  80ab14:	380d883a 	mov	r6,r7
  80ab18:	dfc00215 	stw	ra,8(sp)
  80ab1c:	080ca080 	call	80ca08 <write>
  80ab20:	1007883a 	mov	r3,r2
  80ab24:	00bfffc4 	movi	r2,-1
  80ab28:	18800626 	beq	r3,r2,80ab44 <_write_r+0x54>
  80ab2c:	1805883a 	mov	r2,r3
  80ab30:	dfc00217 	ldw	ra,8(sp)
  80ab34:	dc400117 	ldw	r17,4(sp)
  80ab38:	dc000017 	ldw	r16,0(sp)
  80ab3c:	dec00304 	addi	sp,sp,12
  80ab40:	f800283a 	ret
  80ab44:	80800017 	ldw	r2,0(r16)
  80ab48:	103ff826 	beq	r2,zero,80ab2c <_write_r+0x3c>
  80ab4c:	88800015 	stw	r2,0(r17)
  80ab50:	1805883a 	mov	r2,r3
  80ab54:	dfc00217 	ldw	ra,8(sp)
  80ab58:	dc400117 	ldw	r17,4(sp)
  80ab5c:	dc000017 	ldw	r16,0(sp)
  80ab60:	dec00304 	addi	sp,sp,12
  80ab64:	f800283a 	ret

0080ab68 <_calloc_r>:
  80ab68:	defffe04 	addi	sp,sp,-8
  80ab6c:	dc400015 	stw	r17,0(sp)
  80ab70:	2023883a 	mov	r17,r4
  80ab74:	2809883a 	mov	r4,r5
  80ab78:	300b883a 	mov	r5,r6
  80ab7c:	dfc00115 	stw	ra,4(sp)
  80ab80:	0802b980 	call	802b98 <__mulsi3>
  80ab84:	100b883a 	mov	r5,r2
  80ab88:	8809883a 	mov	r4,r17
  80ab8c:	08034100 	call	803410 <_malloc_r>
  80ab90:	1023883a 	mov	r17,r2
  80ab94:	01c00904 	movi	r7,36
  80ab98:	10000d26 	beq	r2,zero,80abd0 <_calloc_r+0x68>
  80ab9c:	10ffff17 	ldw	r3,-4(r2)
  80aba0:	1009883a 	mov	r4,r2
  80aba4:	00bfff04 	movi	r2,-4
  80aba8:	1886703a 	and	r3,r3,r2
  80abac:	1887883a 	add	r3,r3,r2
  80abb0:	180d883a 	mov	r6,r3
  80abb4:	000b883a 	mov	r5,zero
  80abb8:	38c01736 	bltu	r7,r3,80ac18 <_calloc_r+0xb0>
  80abbc:	008004c4 	movi	r2,19
  80abc0:	10c00836 	bltu	r2,r3,80abe4 <_calloc_r+0x7c>
  80abc4:	20000215 	stw	zero,8(r4)
  80abc8:	20000015 	stw	zero,0(r4)
  80abcc:	20000115 	stw	zero,4(r4)
  80abd0:	8805883a 	mov	r2,r17
  80abd4:	dfc00117 	ldw	ra,4(sp)
  80abd8:	dc400017 	ldw	r17,0(sp)
  80abdc:	dec00204 	addi	sp,sp,8
  80abe0:	f800283a 	ret
  80abe4:	008006c4 	movi	r2,27
  80abe8:	88000015 	stw	zero,0(r17)
  80abec:	88000115 	stw	zero,4(r17)
  80abf0:	89000204 	addi	r4,r17,8
  80abf4:	10fff32e 	bgeu	r2,r3,80abc4 <_calloc_r+0x5c>
  80abf8:	88000215 	stw	zero,8(r17)
  80abfc:	88000315 	stw	zero,12(r17)
  80ac00:	89000404 	addi	r4,r17,16
  80ac04:	19ffef1e 	bne	r3,r7,80abc4 <_calloc_r+0x5c>
  80ac08:	89000604 	addi	r4,r17,24
  80ac0c:	88000415 	stw	zero,16(r17)
  80ac10:	88000515 	stw	zero,20(r17)
  80ac14:	003feb06 	br	80abc4 <_calloc_r+0x5c>
  80ac18:	0803b500 	call	803b50 <memset>
  80ac1c:	8805883a 	mov	r2,r17
  80ac20:	dfc00117 	ldw	ra,4(sp)
  80ac24:	dc400017 	ldw	r17,0(sp)
  80ac28:	dec00204 	addi	sp,sp,8
  80ac2c:	f800283a 	ret

0080ac30 <_close_r>:
  80ac30:	defffd04 	addi	sp,sp,-12
  80ac34:	dc000015 	stw	r16,0(sp)
  80ac38:	04002074 	movhi	r16,129
  80ac3c:	841f2604 	addi	r16,r16,31896
  80ac40:	dc400115 	stw	r17,4(sp)
  80ac44:	80000015 	stw	zero,0(r16)
  80ac48:	2023883a 	mov	r17,r4
  80ac4c:	2809883a 	mov	r4,r5
  80ac50:	dfc00215 	stw	ra,8(sp)
  80ac54:	080c3200 	call	80c320 <close>
  80ac58:	1007883a 	mov	r3,r2
  80ac5c:	00bfffc4 	movi	r2,-1
  80ac60:	18800626 	beq	r3,r2,80ac7c <_close_r+0x4c>
  80ac64:	1805883a 	mov	r2,r3
  80ac68:	dfc00217 	ldw	ra,8(sp)
  80ac6c:	dc400117 	ldw	r17,4(sp)
  80ac70:	dc000017 	ldw	r16,0(sp)
  80ac74:	dec00304 	addi	sp,sp,12
  80ac78:	f800283a 	ret
  80ac7c:	80800017 	ldw	r2,0(r16)
  80ac80:	103ff826 	beq	r2,zero,80ac64 <_close_r+0x34>
  80ac84:	88800015 	stw	r2,0(r17)
  80ac88:	1805883a 	mov	r2,r3
  80ac8c:	dfc00217 	ldw	ra,8(sp)
  80ac90:	dc400117 	ldw	r17,4(sp)
  80ac94:	dc000017 	ldw	r16,0(sp)
  80ac98:	dec00304 	addi	sp,sp,12
  80ac9c:	f800283a 	ret

0080aca0 <_fclose_r>:
  80aca0:	defffc04 	addi	sp,sp,-16
  80aca4:	dc400115 	stw	r17,4(sp)
  80aca8:	dc000015 	stw	r16,0(sp)
  80acac:	dfc00315 	stw	ra,12(sp)
  80acb0:	dc800215 	stw	r18,8(sp)
  80acb4:	2821883a 	mov	r16,r5
  80acb8:	2023883a 	mov	r17,r4
  80acbc:	28002926 	beq	r5,zero,80ad64 <_fclose_r+0xc4>
  80acc0:	0807b2c0 	call	807b2c <__sfp_lock_acquire>
  80acc4:	88000226 	beq	r17,zero,80acd0 <_fclose_r+0x30>
  80acc8:	88800e17 	ldw	r2,56(r17)
  80accc:	10002d26 	beq	r2,zero,80ad84 <_fclose_r+0xe4>
  80acd0:	8080030f 	ldh	r2,12(r16)
  80acd4:	10002226 	beq	r2,zero,80ad60 <_fclose_r+0xc0>
  80acd8:	8809883a 	mov	r4,r17
  80acdc:	800b883a 	mov	r5,r16
  80ace0:	08078a40 	call	8078a4 <_fflush_r>
  80ace4:	1025883a 	mov	r18,r2
  80ace8:	80800b17 	ldw	r2,44(r16)
  80acec:	10000426 	beq	r2,zero,80ad00 <_fclose_r+0x60>
  80acf0:	81400717 	ldw	r5,28(r16)
  80acf4:	8809883a 	mov	r4,r17
  80acf8:	103ee83a 	callr	r2
  80acfc:	10002a16 	blt	r2,zero,80ada8 <_fclose_r+0x108>
  80ad00:	8080030b 	ldhu	r2,12(r16)
  80ad04:	1080200c 	andi	r2,r2,128
  80ad08:	1000231e 	bne	r2,zero,80ad98 <_fclose_r+0xf8>
  80ad0c:	81400c17 	ldw	r5,48(r16)
  80ad10:	28000526 	beq	r5,zero,80ad28 <_fclose_r+0x88>
  80ad14:	80801004 	addi	r2,r16,64
  80ad18:	28800226 	beq	r5,r2,80ad24 <_fclose_r+0x84>
  80ad1c:	8809883a 	mov	r4,r17
  80ad20:	0807ef40 	call	807ef4 <_free_r>
  80ad24:	80000c15 	stw	zero,48(r16)
  80ad28:	81401117 	ldw	r5,68(r16)
  80ad2c:	28000326 	beq	r5,zero,80ad3c <_fclose_r+0x9c>
  80ad30:	8809883a 	mov	r4,r17
  80ad34:	0807ef40 	call	807ef4 <_free_r>
  80ad38:	80001115 	stw	zero,68(r16)
  80ad3c:	8000030d 	sth	zero,12(r16)
  80ad40:	0807b300 	call	807b30 <__sfp_lock_release>
  80ad44:	9005883a 	mov	r2,r18
  80ad48:	dfc00317 	ldw	ra,12(sp)
  80ad4c:	dc800217 	ldw	r18,8(sp)
  80ad50:	dc400117 	ldw	r17,4(sp)
  80ad54:	dc000017 	ldw	r16,0(sp)
  80ad58:	dec00404 	addi	sp,sp,16
  80ad5c:	f800283a 	ret
  80ad60:	0807b300 	call	807b30 <__sfp_lock_release>
  80ad64:	0025883a 	mov	r18,zero
  80ad68:	9005883a 	mov	r2,r18
  80ad6c:	dfc00317 	ldw	ra,12(sp)
  80ad70:	dc800217 	ldw	r18,8(sp)
  80ad74:	dc400117 	ldw	r17,4(sp)
  80ad78:	dc000017 	ldw	r16,0(sp)
  80ad7c:	dec00404 	addi	sp,sp,16
  80ad80:	f800283a 	ret
  80ad84:	8809883a 	mov	r4,r17
  80ad88:	0807b3c0 	call	807b3c <__sinit>
  80ad8c:	8080030f 	ldh	r2,12(r16)
  80ad90:	103fd11e 	bne	r2,zero,80acd8 <_fclose_r+0x38>
  80ad94:	003ff206 	br	80ad60 <_fclose_r+0xc0>
  80ad98:	81400417 	ldw	r5,16(r16)
  80ad9c:	8809883a 	mov	r4,r17
  80ada0:	0807ef40 	call	807ef4 <_free_r>
  80ada4:	003fd906 	br	80ad0c <_fclose_r+0x6c>
  80ada8:	04bfffc4 	movi	r18,-1
  80adac:	003fd406 	br	80ad00 <_fclose_r+0x60>

0080adb0 <fclose>:
  80adb0:	00802074 	movhi	r2,129
  80adb4:	1097bd04 	addi	r2,r2,24308
  80adb8:	200b883a 	mov	r5,r4
  80adbc:	11000017 	ldw	r4,0(r2)
  80adc0:	080aca01 	jmpi	80aca0 <_fclose_r>

0080adc4 <_fstat_r>:
  80adc4:	defffd04 	addi	sp,sp,-12
  80adc8:	dc000015 	stw	r16,0(sp)
  80adcc:	04002074 	movhi	r16,129
  80add0:	841f2604 	addi	r16,r16,31896
  80add4:	dc400115 	stw	r17,4(sp)
  80add8:	80000015 	stw	zero,0(r16)
  80addc:	2023883a 	mov	r17,r4
  80ade0:	2809883a 	mov	r4,r5
  80ade4:	300b883a 	mov	r5,r6
  80ade8:	dfc00215 	stw	ra,8(sp)
  80adec:	080c4300 	call	80c430 <fstat>
  80adf0:	1007883a 	mov	r3,r2
  80adf4:	00bfffc4 	movi	r2,-1
  80adf8:	18800626 	beq	r3,r2,80ae14 <_fstat_r+0x50>
  80adfc:	1805883a 	mov	r2,r3
  80ae00:	dfc00217 	ldw	ra,8(sp)
  80ae04:	dc400117 	ldw	r17,4(sp)
  80ae08:	dc000017 	ldw	r16,0(sp)
  80ae0c:	dec00304 	addi	sp,sp,12
  80ae10:	f800283a 	ret
  80ae14:	80800017 	ldw	r2,0(r16)
  80ae18:	103ff826 	beq	r2,zero,80adfc <_fstat_r+0x38>
  80ae1c:	88800015 	stw	r2,0(r17)
  80ae20:	1805883a 	mov	r2,r3
  80ae24:	dfc00217 	ldw	ra,8(sp)
  80ae28:	dc400117 	ldw	r17,4(sp)
  80ae2c:	dc000017 	ldw	r16,0(sp)
  80ae30:	dec00304 	addi	sp,sp,12
  80ae34:	f800283a 	ret

0080ae38 <_isatty_r>:
  80ae38:	defffd04 	addi	sp,sp,-12
  80ae3c:	dc000015 	stw	r16,0(sp)
  80ae40:	04002074 	movhi	r16,129
  80ae44:	841f2604 	addi	r16,r16,31896
  80ae48:	dc400115 	stw	r17,4(sp)
  80ae4c:	80000015 	stw	zero,0(r16)
  80ae50:	2023883a 	mov	r17,r4
  80ae54:	2809883a 	mov	r4,r5
  80ae58:	dfc00215 	stw	ra,8(sp)
  80ae5c:	080c59c0 	call	80c59c <isatty>
  80ae60:	1007883a 	mov	r3,r2
  80ae64:	00bfffc4 	movi	r2,-1
  80ae68:	18800626 	beq	r3,r2,80ae84 <_isatty_r+0x4c>
  80ae6c:	1805883a 	mov	r2,r3
  80ae70:	dfc00217 	ldw	ra,8(sp)
  80ae74:	dc400117 	ldw	r17,4(sp)
  80ae78:	dc000017 	ldw	r16,0(sp)
  80ae7c:	dec00304 	addi	sp,sp,12
  80ae80:	f800283a 	ret
  80ae84:	80800017 	ldw	r2,0(r16)
  80ae88:	103ff826 	beq	r2,zero,80ae6c <_isatty_r+0x34>
  80ae8c:	88800015 	stw	r2,0(r17)
  80ae90:	1805883a 	mov	r2,r3
  80ae94:	dfc00217 	ldw	ra,8(sp)
  80ae98:	dc400117 	ldw	r17,4(sp)
  80ae9c:	dc000017 	ldw	r16,0(sp)
  80aea0:	dec00304 	addi	sp,sp,12
  80aea4:	f800283a 	ret

0080aea8 <_lseek_r>:
  80aea8:	defffd04 	addi	sp,sp,-12
  80aeac:	dc000015 	stw	r16,0(sp)
  80aeb0:	04002074 	movhi	r16,129
  80aeb4:	841f2604 	addi	r16,r16,31896
  80aeb8:	dc400115 	stw	r17,4(sp)
  80aebc:	80000015 	stw	zero,0(r16)
  80aec0:	2023883a 	mov	r17,r4
  80aec4:	2809883a 	mov	r4,r5
  80aec8:	300b883a 	mov	r5,r6
  80aecc:	380d883a 	mov	r6,r7
  80aed0:	dfc00215 	stw	ra,8(sp)
  80aed4:	080c6f40 	call	80c6f4 <lseek>
  80aed8:	1007883a 	mov	r3,r2
  80aedc:	00bfffc4 	movi	r2,-1
  80aee0:	18800626 	beq	r3,r2,80aefc <_lseek_r+0x54>
  80aee4:	1805883a 	mov	r2,r3
  80aee8:	dfc00217 	ldw	ra,8(sp)
  80aeec:	dc400117 	ldw	r17,4(sp)
  80aef0:	dc000017 	ldw	r16,0(sp)
  80aef4:	dec00304 	addi	sp,sp,12
  80aef8:	f800283a 	ret
  80aefc:	80800017 	ldw	r2,0(r16)
  80af00:	103ff826 	beq	r2,zero,80aee4 <_lseek_r+0x3c>
  80af04:	88800015 	stw	r2,0(r17)
  80af08:	1805883a 	mov	r2,r3
  80af0c:	dfc00217 	ldw	ra,8(sp)
  80af10:	dc400117 	ldw	r17,4(sp)
  80af14:	dc000017 	ldw	r16,0(sp)
  80af18:	dec00304 	addi	sp,sp,12
  80af1c:	f800283a 	ret

0080af20 <_read_r>:
  80af20:	defffd04 	addi	sp,sp,-12
  80af24:	dc000015 	stw	r16,0(sp)
  80af28:	04002074 	movhi	r16,129
  80af2c:	841f2604 	addi	r16,r16,31896
  80af30:	dc400115 	stw	r17,4(sp)
  80af34:	80000015 	stw	zero,0(r16)
  80af38:	2023883a 	mov	r17,r4
  80af3c:	2809883a 	mov	r4,r5
  80af40:	300b883a 	mov	r5,r6
  80af44:	380d883a 	mov	r6,r7
  80af48:	dfc00215 	stw	ra,8(sp)
  80af4c:	080c8180 	call	80c818 <read>
  80af50:	1007883a 	mov	r3,r2
  80af54:	00bfffc4 	movi	r2,-1
  80af58:	18800626 	beq	r3,r2,80af74 <_read_r+0x54>
  80af5c:	1805883a 	mov	r2,r3
  80af60:	dfc00217 	ldw	ra,8(sp)
  80af64:	dc400117 	ldw	r17,4(sp)
  80af68:	dc000017 	ldw	r16,0(sp)
  80af6c:	dec00304 	addi	sp,sp,12
  80af70:	f800283a 	ret
  80af74:	80800017 	ldw	r2,0(r16)
  80af78:	103ff826 	beq	r2,zero,80af5c <_read_r+0x3c>
  80af7c:	88800015 	stw	r2,0(r17)
  80af80:	1805883a 	mov	r2,r3
  80af84:	dfc00217 	ldw	ra,8(sp)
  80af88:	dc400117 	ldw	r17,4(sp)
  80af8c:	dc000017 	ldw	r16,0(sp)
  80af90:	dec00304 	addi	sp,sp,12
  80af94:	f800283a 	ret

0080af98 <__udivdi3>:
  80af98:	defff104 	addi	sp,sp,-60
  80af9c:	0015883a 	mov	r10,zero
  80afa0:	2005883a 	mov	r2,r4
  80afa4:	3011883a 	mov	r8,r6
  80afa8:	df000d15 	stw	fp,52(sp)
  80afac:	dd400a15 	stw	r21,40(sp)
  80afb0:	dcc00815 	stw	r19,32(sp)
  80afb4:	dfc00e15 	stw	ra,56(sp)
  80afb8:	ddc00c15 	stw	r23,48(sp)
  80afbc:	dd800b15 	stw	r22,44(sp)
  80afc0:	dd000915 	stw	r20,36(sp)
  80afc4:	dc800715 	stw	r18,28(sp)
  80afc8:	dc400615 	stw	r17,24(sp)
  80afcc:	dc000515 	stw	r16,20(sp)
  80afd0:	da800315 	stw	r10,12(sp)
  80afd4:	4027883a 	mov	r19,r8
  80afd8:	1039883a 	mov	fp,r2
  80afdc:	282b883a 	mov	r21,r5
  80afe0:	da800415 	stw	r10,16(sp)
  80afe4:	3800401e 	bne	r7,zero,80b0e8 <__udivdi3+0x150>
  80afe8:	2a006536 	bltu	r5,r8,80b180 <__udivdi3+0x1e8>
  80afec:	4000b526 	beq	r8,zero,80b2c4 <__udivdi3+0x32c>
  80aff0:	00bfffd4 	movui	r2,65535
  80aff4:	14c0ad36 	bltu	r2,r19,80b2ac <__udivdi3+0x314>
  80aff8:	00803fc4 	movi	r2,255
  80affc:	14c15e36 	bltu	r2,r19,80b578 <__udivdi3+0x5e0>
  80b000:	000b883a 	mov	r5,zero
  80b004:	0005883a 	mov	r2,zero
  80b008:	9884d83a 	srl	r2,r19,r2
  80b00c:	01002074 	movhi	r4,129
  80b010:	210fc304 	addi	r4,r4,16140
  80b014:	01800804 	movi	r6,32
  80b018:	1105883a 	add	r2,r2,r4
  80b01c:	10c00003 	ldbu	r3,0(r2)
  80b020:	28c7883a 	add	r3,r5,r3
  80b024:	30e9c83a 	sub	r20,r6,r3
  80b028:	a0010a1e 	bne	r20,zero,80b454 <__udivdi3+0x4bc>
  80b02c:	982ed43a 	srli	r23,r19,16
  80b030:	acebc83a 	sub	r21,r21,r19
  80b034:	9dbfffcc 	andi	r22,r19,65535
  80b038:	05000044 	movi	r20,1
  80b03c:	a809883a 	mov	r4,r21
  80b040:	b80b883a 	mov	r5,r23
  80b044:	080c3100 	call	80c310 <__udivsi3>
  80b048:	100b883a 	mov	r5,r2
  80b04c:	b009883a 	mov	r4,r22
  80b050:	1021883a 	mov	r16,r2
  80b054:	0802b980 	call	802b98 <__mulsi3>
  80b058:	a809883a 	mov	r4,r21
  80b05c:	b80b883a 	mov	r5,r23
  80b060:	1023883a 	mov	r17,r2
  80b064:	080c3180 	call	80c318 <__umodsi3>
  80b068:	1004943a 	slli	r2,r2,16
  80b06c:	e006d43a 	srli	r3,fp,16
  80b070:	10c4b03a 	or	r2,r2,r3
  80b074:	1440042e 	bgeu	r2,r17,80b088 <__udivdi3+0xf0>
  80b078:	14c5883a 	add	r2,r2,r19
  80b07c:	843fffc4 	addi	r16,r16,-1
  80b080:	14c00136 	bltu	r2,r19,80b088 <__udivdi3+0xf0>
  80b084:	14415c36 	bltu	r2,r17,80b5f8 <__udivdi3+0x660>
  80b088:	1463c83a 	sub	r17,r2,r17
  80b08c:	8809883a 	mov	r4,r17
  80b090:	b80b883a 	mov	r5,r23
  80b094:	080c3100 	call	80c310 <__udivsi3>
  80b098:	100b883a 	mov	r5,r2
  80b09c:	b009883a 	mov	r4,r22
  80b0a0:	102b883a 	mov	r21,r2
  80b0a4:	0802b980 	call	802b98 <__mulsi3>
  80b0a8:	8809883a 	mov	r4,r17
  80b0ac:	b80b883a 	mov	r5,r23
  80b0b0:	1025883a 	mov	r18,r2
  80b0b4:	080c3180 	call	80c318 <__umodsi3>
  80b0b8:	1004943a 	slli	r2,r2,16
  80b0bc:	e0ffffcc 	andi	r3,fp,65535
  80b0c0:	10c4b03a 	or	r2,r2,r3
  80b0c4:	1480042e 	bgeu	r2,r18,80b0d8 <__udivdi3+0x140>
  80b0c8:	9885883a 	add	r2,r19,r2
  80b0cc:	ad7fffc4 	addi	r21,r21,-1
  80b0d0:	14c00136 	bltu	r2,r19,80b0d8 <__udivdi3+0x140>
  80b0d4:	14813c36 	bltu	r2,r18,80b5c8 <__udivdi3+0x630>
  80b0d8:	8004943a 	slli	r2,r16,16
  80b0dc:	a009883a 	mov	r4,r20
  80b0e0:	a884b03a 	or	r2,r21,r2
  80b0e4:	00001506 	br	80b13c <__udivdi3+0x1a4>
  80b0e8:	380d883a 	mov	r6,r7
  80b0ec:	29c06c36 	bltu	r5,r7,80b2a0 <__udivdi3+0x308>
  80b0f0:	00bfffd4 	movui	r2,65535
  80b0f4:	11c06436 	bltu	r2,r7,80b288 <__udivdi3+0x2f0>
  80b0f8:	00803fc4 	movi	r2,255
  80b0fc:	11c11836 	bltu	r2,r7,80b560 <__udivdi3+0x5c8>
  80b100:	000b883a 	mov	r5,zero
  80b104:	0005883a 	mov	r2,zero
  80b108:	3084d83a 	srl	r2,r6,r2
  80b10c:	01002074 	movhi	r4,129
  80b110:	210fc304 	addi	r4,r4,16140
  80b114:	01c00804 	movi	r7,32
  80b118:	1105883a 	add	r2,r2,r4
  80b11c:	10c00003 	ldbu	r3,0(r2)
  80b120:	28c7883a 	add	r3,r5,r3
  80b124:	38edc83a 	sub	r22,r7,r3
  80b128:	b000731e 	bne	r22,zero,80b2f8 <__udivdi3+0x360>
  80b12c:	35400136 	bltu	r6,r21,80b134 <__udivdi3+0x19c>
  80b130:	e4c05b36 	bltu	fp,r19,80b2a0 <__udivdi3+0x308>
  80b134:	00800044 	movi	r2,1
  80b138:	0009883a 	mov	r4,zero
  80b13c:	d8800315 	stw	r2,12(sp)
  80b140:	d9400317 	ldw	r5,12(sp)
  80b144:	d9000415 	stw	r4,16(sp)
  80b148:	2007883a 	mov	r3,r4
  80b14c:	2805883a 	mov	r2,r5
  80b150:	dfc00e17 	ldw	ra,56(sp)
  80b154:	df000d17 	ldw	fp,52(sp)
  80b158:	ddc00c17 	ldw	r23,48(sp)
  80b15c:	dd800b17 	ldw	r22,44(sp)
  80b160:	dd400a17 	ldw	r21,40(sp)
  80b164:	dd000917 	ldw	r20,36(sp)
  80b168:	dcc00817 	ldw	r19,32(sp)
  80b16c:	dc800717 	ldw	r18,28(sp)
  80b170:	dc400617 	ldw	r17,24(sp)
  80b174:	dc000517 	ldw	r16,20(sp)
  80b178:	dec00f04 	addi	sp,sp,60
  80b17c:	f800283a 	ret
  80b180:	00bfffd4 	movui	r2,65535
  80b184:	12005636 	bltu	r2,r8,80b2e0 <__udivdi3+0x348>
  80b188:	00803fc4 	movi	r2,255
  80b18c:	12010036 	bltu	r2,r8,80b590 <__udivdi3+0x5f8>
  80b190:	000b883a 	mov	r5,zero
  80b194:	0005883a 	mov	r2,zero
  80b198:	9884d83a 	srl	r2,r19,r2
  80b19c:	01002074 	movhi	r4,129
  80b1a0:	210fc304 	addi	r4,r4,16140
  80b1a4:	01800804 	movi	r6,32
  80b1a8:	1105883a 	add	r2,r2,r4
  80b1ac:	10c00003 	ldbu	r3,0(r2)
  80b1b0:	28c7883a 	add	r3,r5,r3
  80b1b4:	30cbc83a 	sub	r5,r6,r3
  80b1b8:	28000626 	beq	r5,zero,80b1d4 <__udivdi3+0x23c>
  80b1bc:	3145c83a 	sub	r2,r6,r5
  80b1c0:	e084d83a 	srl	r2,fp,r2
  80b1c4:	a946983a 	sll	r3,r21,r5
  80b1c8:	e178983a 	sll	fp,fp,r5
  80b1cc:	9966983a 	sll	r19,r19,r5
  80b1d0:	18aab03a 	or	r21,r3,r2
  80b1d4:	982ed43a 	srli	r23,r19,16
  80b1d8:	a809883a 	mov	r4,r21
  80b1dc:	9cbfffcc 	andi	r18,r19,65535
  80b1e0:	b80b883a 	mov	r5,r23
  80b1e4:	080c3100 	call	80c310 <__udivsi3>
  80b1e8:	100b883a 	mov	r5,r2
  80b1ec:	9009883a 	mov	r4,r18
  80b1f0:	1021883a 	mov	r16,r2
  80b1f4:	0802b980 	call	802b98 <__mulsi3>
  80b1f8:	a809883a 	mov	r4,r21
  80b1fc:	b80b883a 	mov	r5,r23
  80b200:	1023883a 	mov	r17,r2
  80b204:	080c3180 	call	80c318 <__umodsi3>
  80b208:	1004943a 	slli	r2,r2,16
  80b20c:	e006d43a 	srli	r3,fp,16
  80b210:	10c4b03a 	or	r2,r2,r3
  80b214:	1440042e 	bgeu	r2,r17,80b228 <__udivdi3+0x290>
  80b218:	14c5883a 	add	r2,r2,r19
  80b21c:	843fffc4 	addi	r16,r16,-1
  80b220:	14c00136 	bltu	r2,r19,80b228 <__udivdi3+0x290>
  80b224:	1440ea36 	bltu	r2,r17,80b5d0 <__udivdi3+0x638>
  80b228:	1463c83a 	sub	r17,r2,r17
  80b22c:	8809883a 	mov	r4,r17
  80b230:	b80b883a 	mov	r5,r23
  80b234:	080c3100 	call	80c310 <__udivsi3>
  80b238:	100b883a 	mov	r5,r2
  80b23c:	9009883a 	mov	r4,r18
  80b240:	102b883a 	mov	r21,r2
  80b244:	0802b980 	call	802b98 <__mulsi3>
  80b248:	8809883a 	mov	r4,r17
  80b24c:	b80b883a 	mov	r5,r23
  80b250:	1025883a 	mov	r18,r2
  80b254:	080c3180 	call	80c318 <__umodsi3>
  80b258:	1004943a 	slli	r2,r2,16
  80b25c:	e0ffffcc 	andi	r3,fp,65535
  80b260:	10c4b03a 	or	r2,r2,r3
  80b264:	1480042e 	bgeu	r2,r18,80b278 <__udivdi3+0x2e0>
  80b268:	9885883a 	add	r2,r19,r2
  80b26c:	ad7fffc4 	addi	r21,r21,-1
  80b270:	14c00136 	bltu	r2,r19,80b278 <__udivdi3+0x2e0>
  80b274:	1480d936 	bltu	r2,r18,80b5dc <__udivdi3+0x644>
  80b278:	8004943a 	slli	r2,r16,16
  80b27c:	0009883a 	mov	r4,zero
  80b280:	a884b03a 	or	r2,r21,r2
  80b284:	003fad06 	br	80b13c <__udivdi3+0x1a4>
  80b288:	00804034 	movhi	r2,256
  80b28c:	10bfffc4 	addi	r2,r2,-1
  80b290:	11c0b636 	bltu	r2,r7,80b56c <__udivdi3+0x5d4>
  80b294:	01400404 	movi	r5,16
  80b298:	2805883a 	mov	r2,r5
  80b29c:	003f9a06 	br	80b108 <__udivdi3+0x170>
  80b2a0:	0005883a 	mov	r2,zero
  80b2a4:	0009883a 	mov	r4,zero
  80b2a8:	003fa406 	br	80b13c <__udivdi3+0x1a4>
  80b2ac:	00804034 	movhi	r2,256
  80b2b0:	10bfffc4 	addi	r2,r2,-1
  80b2b4:	14c0b336 	bltu	r2,r19,80b584 <__udivdi3+0x5ec>
  80b2b8:	01400404 	movi	r5,16
  80b2bc:	2805883a 	mov	r2,r5
  80b2c0:	003f5106 	br	80b008 <__udivdi3+0x70>
  80b2c4:	01000044 	movi	r4,1
  80b2c8:	000b883a 	mov	r5,zero
  80b2cc:	080c3100 	call	80c310 <__udivsi3>
  80b2d0:	1027883a 	mov	r19,r2
  80b2d4:	00bfffd4 	movui	r2,65535
  80b2d8:	14fff436 	bltu	r2,r19,80b2ac <__udivdi3+0x314>
  80b2dc:	003f4606 	br	80aff8 <__udivdi3+0x60>
  80b2e0:	00804034 	movhi	r2,256
  80b2e4:	10bfffc4 	addi	r2,r2,-1
  80b2e8:	1200ac36 	bltu	r2,r8,80b59c <__udivdi3+0x604>
  80b2ec:	01400404 	movi	r5,16
  80b2f0:	2805883a 	mov	r2,r5
  80b2f4:	003fa806 	br	80b198 <__udivdi3+0x200>
  80b2f8:	3d85c83a 	sub	r2,r7,r22
  80b2fc:	3588983a 	sll	r4,r6,r22
  80b300:	9886d83a 	srl	r3,r19,r2
  80b304:	a8a2d83a 	srl	r17,r21,r2
  80b308:	e084d83a 	srl	r2,fp,r2
  80b30c:	20eeb03a 	or	r23,r4,r3
  80b310:	b824d43a 	srli	r18,r23,16
  80b314:	ad86983a 	sll	r3,r21,r22
  80b318:	8809883a 	mov	r4,r17
  80b31c:	900b883a 	mov	r5,r18
  80b320:	1886b03a 	or	r3,r3,r2
  80b324:	d8c00115 	stw	r3,4(sp)
  80b328:	bc3fffcc 	andi	r16,r23,65535
  80b32c:	080c3100 	call	80c310 <__udivsi3>
  80b330:	100b883a 	mov	r5,r2
  80b334:	8009883a 	mov	r4,r16
  80b338:	1029883a 	mov	r20,r2
  80b33c:	0802b980 	call	802b98 <__mulsi3>
  80b340:	900b883a 	mov	r5,r18
  80b344:	8809883a 	mov	r4,r17
  80b348:	102b883a 	mov	r21,r2
  80b34c:	080c3180 	call	80c318 <__umodsi3>
  80b350:	d9400117 	ldw	r5,4(sp)
  80b354:	1004943a 	slli	r2,r2,16
  80b358:	9da6983a 	sll	r19,r19,r22
  80b35c:	2806d43a 	srli	r3,r5,16
  80b360:	10c4b03a 	or	r2,r2,r3
  80b364:	1540032e 	bgeu	r2,r21,80b374 <__udivdi3+0x3dc>
  80b368:	15c5883a 	add	r2,r2,r23
  80b36c:	a53fffc4 	addi	r20,r20,-1
  80b370:	15c0912e 	bgeu	r2,r23,80b5b8 <__udivdi3+0x620>
  80b374:	1563c83a 	sub	r17,r2,r21
  80b378:	8809883a 	mov	r4,r17
  80b37c:	900b883a 	mov	r5,r18
  80b380:	080c3100 	call	80c310 <__udivsi3>
  80b384:	100b883a 	mov	r5,r2
  80b388:	8009883a 	mov	r4,r16
  80b38c:	102b883a 	mov	r21,r2
  80b390:	0802b980 	call	802b98 <__mulsi3>
  80b394:	8809883a 	mov	r4,r17
  80b398:	900b883a 	mov	r5,r18
  80b39c:	1021883a 	mov	r16,r2
  80b3a0:	080c3180 	call	80c318 <__umodsi3>
  80b3a4:	da800117 	ldw	r10,4(sp)
  80b3a8:	1004943a 	slli	r2,r2,16
  80b3ac:	50ffffcc 	andi	r3,r10,65535
  80b3b0:	10c6b03a 	or	r3,r2,r3
  80b3b4:	1c00032e 	bgeu	r3,r16,80b3c4 <__udivdi3+0x42c>
  80b3b8:	1dc7883a 	add	r3,r3,r23
  80b3bc:	ad7fffc4 	addi	r21,r21,-1
  80b3c0:	1dc0792e 	bgeu	r3,r23,80b5a8 <__udivdi3+0x610>
  80b3c4:	a004943a 	slli	r2,r20,16
  80b3c8:	982ed43a 	srli	r23,r19,16
  80b3cc:	9cffffcc 	andi	r19,r19,65535
  80b3d0:	a8a4b03a 	or	r18,r21,r2
  80b3d4:	947fffcc 	andi	r17,r18,65535
  80b3d8:	902ad43a 	srli	r21,r18,16
  80b3dc:	8809883a 	mov	r4,r17
  80b3e0:	980b883a 	mov	r5,r19
  80b3e4:	1c21c83a 	sub	r16,r3,r16
  80b3e8:	0802b980 	call	802b98 <__mulsi3>
  80b3ec:	8809883a 	mov	r4,r17
  80b3f0:	b80b883a 	mov	r5,r23
  80b3f4:	1029883a 	mov	r20,r2
  80b3f8:	0802b980 	call	802b98 <__mulsi3>
  80b3fc:	980b883a 	mov	r5,r19
  80b400:	a809883a 	mov	r4,r21
  80b404:	1023883a 	mov	r17,r2
  80b408:	0802b980 	call	802b98 <__mulsi3>
  80b40c:	a809883a 	mov	r4,r21
  80b410:	b80b883a 	mov	r5,r23
  80b414:	1027883a 	mov	r19,r2
  80b418:	0802b980 	call	802b98 <__mulsi3>
  80b41c:	1009883a 	mov	r4,r2
  80b420:	a004d43a 	srli	r2,r20,16
  80b424:	8ce3883a 	add	r17,r17,r19
  80b428:	1447883a 	add	r3,r2,r17
  80b42c:	1cc0022e 	bgeu	r3,r19,80b438 <__udivdi3+0x4a0>
  80b430:	00800074 	movhi	r2,1
  80b434:	2089883a 	add	r4,r4,r2
  80b438:	1804d43a 	srli	r2,r3,16
  80b43c:	2085883a 	add	r2,r4,r2
  80b440:	80804436 	bltu	r16,r2,80b554 <__udivdi3+0x5bc>
  80b444:	80803e26 	beq	r16,r2,80b540 <__udivdi3+0x5a8>
  80b448:	9005883a 	mov	r2,r18
  80b44c:	0009883a 	mov	r4,zero
  80b450:	003f3a06 	br	80b13c <__udivdi3+0x1a4>
  80b454:	9d26983a 	sll	r19,r19,r20
  80b458:	3505c83a 	sub	r2,r6,r20
  80b45c:	a8a2d83a 	srl	r17,r21,r2
  80b460:	982ed43a 	srli	r23,r19,16
  80b464:	e084d83a 	srl	r2,fp,r2
  80b468:	ad06983a 	sll	r3,r21,r20
  80b46c:	8809883a 	mov	r4,r17
  80b470:	b80b883a 	mov	r5,r23
  80b474:	1886b03a 	or	r3,r3,r2
  80b478:	d8c00015 	stw	r3,0(sp)
  80b47c:	9dbfffcc 	andi	r22,r19,65535
  80b480:	080c3100 	call	80c310 <__udivsi3>
  80b484:	100b883a 	mov	r5,r2
  80b488:	b009883a 	mov	r4,r22
  80b48c:	d8800215 	stw	r2,8(sp)
  80b490:	0802b980 	call	802b98 <__mulsi3>
  80b494:	8809883a 	mov	r4,r17
  80b498:	b80b883a 	mov	r5,r23
  80b49c:	102b883a 	mov	r21,r2
  80b4a0:	080c3180 	call	80c318 <__umodsi3>
  80b4a4:	d9000017 	ldw	r4,0(sp)
  80b4a8:	1004943a 	slli	r2,r2,16
  80b4ac:	2006d43a 	srli	r3,r4,16
  80b4b0:	10c4b03a 	or	r2,r2,r3
  80b4b4:	1540052e 	bgeu	r2,r21,80b4cc <__udivdi3+0x534>
  80b4b8:	d9400217 	ldw	r5,8(sp)
  80b4bc:	14c5883a 	add	r2,r2,r19
  80b4c0:	297fffc4 	addi	r5,r5,-1
  80b4c4:	d9400215 	stw	r5,8(sp)
  80b4c8:	14c0462e 	bgeu	r2,r19,80b5e4 <__udivdi3+0x64c>
  80b4cc:	1563c83a 	sub	r17,r2,r21
  80b4d0:	8809883a 	mov	r4,r17
  80b4d4:	b80b883a 	mov	r5,r23
  80b4d8:	080c3100 	call	80c310 <__udivsi3>
  80b4dc:	100b883a 	mov	r5,r2
  80b4e0:	b009883a 	mov	r4,r22
  80b4e4:	1025883a 	mov	r18,r2
  80b4e8:	0802b980 	call	802b98 <__mulsi3>
  80b4ec:	8809883a 	mov	r4,r17
  80b4f0:	b80b883a 	mov	r5,r23
  80b4f4:	1021883a 	mov	r16,r2
  80b4f8:	080c3180 	call	80c318 <__umodsi3>
  80b4fc:	da800017 	ldw	r10,0(sp)
  80b500:	1004943a 	slli	r2,r2,16
  80b504:	50ffffcc 	andi	r3,r10,65535
  80b508:	10c6b03a 	or	r3,r2,r3
  80b50c:	1c00062e 	bgeu	r3,r16,80b528 <__udivdi3+0x590>
  80b510:	1cc7883a 	add	r3,r3,r19
  80b514:	94bfffc4 	addi	r18,r18,-1
  80b518:	1cc00336 	bltu	r3,r19,80b528 <__udivdi3+0x590>
  80b51c:	1c00022e 	bgeu	r3,r16,80b528 <__udivdi3+0x590>
  80b520:	94bfffc4 	addi	r18,r18,-1
  80b524:	1cc7883a 	add	r3,r3,r19
  80b528:	d9000217 	ldw	r4,8(sp)
  80b52c:	e538983a 	sll	fp,fp,r20
  80b530:	1c2bc83a 	sub	r21,r3,r16
  80b534:	2004943a 	slli	r2,r4,16
  80b538:	90a8b03a 	or	r20,r18,r2
  80b53c:	003ebf06 	br	80b03c <__udivdi3+0xa4>
  80b540:	1804943a 	slli	r2,r3,16
  80b544:	e588983a 	sll	r4,fp,r22
  80b548:	a0ffffcc 	andi	r3,r20,65535
  80b54c:	10c5883a 	add	r2,r2,r3
  80b550:	20bfbd2e 	bgeu	r4,r2,80b448 <__udivdi3+0x4b0>
  80b554:	90bfffc4 	addi	r2,r18,-1
  80b558:	0009883a 	mov	r4,zero
  80b55c:	003ef706 	br	80b13c <__udivdi3+0x1a4>
  80b560:	01400204 	movi	r5,8
  80b564:	2805883a 	mov	r2,r5
  80b568:	003ee706 	br	80b108 <__udivdi3+0x170>
  80b56c:	01400604 	movi	r5,24
  80b570:	2805883a 	mov	r2,r5
  80b574:	003ee406 	br	80b108 <__udivdi3+0x170>
  80b578:	01400204 	movi	r5,8
  80b57c:	2805883a 	mov	r2,r5
  80b580:	003ea106 	br	80b008 <__udivdi3+0x70>
  80b584:	01400604 	movi	r5,24
  80b588:	2805883a 	mov	r2,r5
  80b58c:	003e9e06 	br	80b008 <__udivdi3+0x70>
  80b590:	01400204 	movi	r5,8
  80b594:	2805883a 	mov	r2,r5
  80b598:	003eff06 	br	80b198 <__udivdi3+0x200>
  80b59c:	01400604 	movi	r5,24
  80b5a0:	2805883a 	mov	r2,r5
  80b5a4:	003efc06 	br	80b198 <__udivdi3+0x200>
  80b5a8:	1c3f862e 	bgeu	r3,r16,80b3c4 <__udivdi3+0x42c>
  80b5ac:	1dc7883a 	add	r3,r3,r23
  80b5b0:	ad7fffc4 	addi	r21,r21,-1
  80b5b4:	003f8306 	br	80b3c4 <__udivdi3+0x42c>
  80b5b8:	157f6e2e 	bgeu	r2,r21,80b374 <__udivdi3+0x3dc>
  80b5bc:	a53fffc4 	addi	r20,r20,-1
  80b5c0:	15c5883a 	add	r2,r2,r23
  80b5c4:	003f6b06 	br	80b374 <__udivdi3+0x3dc>
  80b5c8:	ad7fffc4 	addi	r21,r21,-1
  80b5cc:	003ec206 	br	80b0d8 <__udivdi3+0x140>
  80b5d0:	843fffc4 	addi	r16,r16,-1
  80b5d4:	14c5883a 	add	r2,r2,r19
  80b5d8:	003f1306 	br	80b228 <__udivdi3+0x290>
  80b5dc:	ad7fffc4 	addi	r21,r21,-1
  80b5e0:	003f2506 	br	80b278 <__udivdi3+0x2e0>
  80b5e4:	157fb92e 	bgeu	r2,r21,80b4cc <__udivdi3+0x534>
  80b5e8:	297fffc4 	addi	r5,r5,-1
  80b5ec:	14c5883a 	add	r2,r2,r19
  80b5f0:	d9400215 	stw	r5,8(sp)
  80b5f4:	003fb506 	br	80b4cc <__udivdi3+0x534>
  80b5f8:	843fffc4 	addi	r16,r16,-1
  80b5fc:	14c5883a 	add	r2,r2,r19
  80b600:	003ea106 	br	80b088 <__udivdi3+0xf0>

0080b604 <__umoddi3>:
  80b604:	defff004 	addi	sp,sp,-64
  80b608:	3011883a 	mov	r8,r6
  80b60c:	000d883a 	mov	r6,zero
  80b610:	dd400b15 	stw	r21,44(sp)
  80b614:	dcc00915 	stw	r19,36(sp)
  80b618:	dc000615 	stw	r16,24(sp)
  80b61c:	dfc00f15 	stw	ra,60(sp)
  80b620:	df000e15 	stw	fp,56(sp)
  80b624:	ddc00d15 	stw	r23,52(sp)
  80b628:	dd800c15 	stw	r22,48(sp)
  80b62c:	dd000a15 	stw	r20,40(sp)
  80b630:	dc800815 	stw	r18,32(sp)
  80b634:	dc400715 	stw	r17,28(sp)
  80b638:	2817883a 	mov	r11,r5
  80b63c:	d9800415 	stw	r6,16(sp)
  80b640:	4027883a 	mov	r19,r8
  80b644:	d9800515 	stw	r6,20(sp)
  80b648:	2021883a 	mov	r16,r4
  80b64c:	282b883a 	mov	r21,r5
  80b650:	38002c1e 	bne	r7,zero,80b704 <__umoddi3+0x100>
  80b654:	2a005636 	bltu	r5,r8,80b7b0 <__umoddi3+0x1ac>
  80b658:	40009a26 	beq	r8,zero,80b8c4 <__umoddi3+0x2c0>
  80b65c:	00bfffd4 	movui	r2,65535
  80b660:	14c09236 	bltu	r2,r19,80b8ac <__umoddi3+0x2a8>
  80b664:	00803fc4 	movi	r2,255
  80b668:	14c15c36 	bltu	r2,r19,80bbdc <__umoddi3+0x5d8>
  80b66c:	000b883a 	mov	r5,zero
  80b670:	0005883a 	mov	r2,zero
  80b674:	9884d83a 	srl	r2,r19,r2
  80b678:	01002074 	movhi	r4,129
  80b67c:	210fc304 	addi	r4,r4,16140
  80b680:	01800804 	movi	r6,32
  80b684:	1105883a 	add	r2,r2,r4
  80b688:	10c00003 	ldbu	r3,0(r2)
  80b68c:	28c7883a 	add	r3,r5,r3
  80b690:	30e5c83a 	sub	r18,r6,r3
  80b694:	9000a41e 	bne	r18,zero,80b928 <__umoddi3+0x324>
  80b698:	982ed43a 	srli	r23,r19,16
  80b69c:	acebc83a 	sub	r21,r21,r19
  80b6a0:	9d3fffcc 	andi	r20,r19,65535
  80b6a4:	002d883a 	mov	r22,zero
  80b6a8:	a809883a 	mov	r4,r21
  80b6ac:	b80b883a 	mov	r5,r23
  80b6b0:	080c3100 	call	80c310 <__udivsi3>
  80b6b4:	100b883a 	mov	r5,r2
  80b6b8:	a009883a 	mov	r4,r20
  80b6bc:	0802b980 	call	802b98 <__mulsi3>
  80b6c0:	a809883a 	mov	r4,r21
  80b6c4:	b80b883a 	mov	r5,r23
  80b6c8:	1023883a 	mov	r17,r2
  80b6cc:	080c3180 	call	80c318 <__umodsi3>
  80b6d0:	1004943a 	slli	r2,r2,16
  80b6d4:	8006d43a 	srli	r3,r16,16
  80b6d8:	10c4b03a 	or	r2,r2,r3
  80b6dc:	1440032e 	bgeu	r2,r17,80b6ec <__umoddi3+0xe8>
  80b6e0:	14c5883a 	add	r2,r2,r19
  80b6e4:	14c00136 	bltu	r2,r19,80b6ec <__umoddi3+0xe8>
  80b6e8:	14415836 	bltu	r2,r17,80bc4c <__umoddi3+0x648>
  80b6ec:	1463c83a 	sub	r17,r2,r17
  80b6f0:	8809883a 	mov	r4,r17
  80b6f4:	b80b883a 	mov	r5,r23
  80b6f8:	080c3100 	call	80c310 <__udivsi3>
  80b6fc:	a009883a 	mov	r4,r20
  80b700:	00005306 	br	80b850 <__umoddi3+0x24c>
  80b704:	380d883a 	mov	r6,r7
  80b708:	29c0132e 	bgeu	r5,r7,80b758 <__umoddi3+0x154>
  80b70c:	d9000415 	stw	r4,16(sp)
  80b710:	d9400515 	stw	r5,20(sp)
  80b714:	d9400417 	ldw	r5,16(sp)
  80b718:	5813883a 	mov	r9,r11
  80b71c:	2811883a 	mov	r8,r5
  80b720:	4005883a 	mov	r2,r8
  80b724:	4807883a 	mov	r3,r9
  80b728:	dfc00f17 	ldw	ra,60(sp)
  80b72c:	df000e17 	ldw	fp,56(sp)
  80b730:	ddc00d17 	ldw	r23,52(sp)
  80b734:	dd800c17 	ldw	r22,48(sp)
  80b738:	dd400b17 	ldw	r21,44(sp)
  80b73c:	dd000a17 	ldw	r20,40(sp)
  80b740:	dcc00917 	ldw	r19,36(sp)
  80b744:	dc800817 	ldw	r18,32(sp)
  80b748:	dc400717 	ldw	r17,28(sp)
  80b74c:	dc000617 	ldw	r16,24(sp)
  80b750:	dec01004 	addi	sp,sp,64
  80b754:	f800283a 	ret
  80b758:	00bfffd4 	movui	r2,65535
  80b75c:	11c06636 	bltu	r2,r7,80b8f8 <__umoddi3+0x2f4>
  80b760:	00803fc4 	movi	r2,255
  80b764:	11c12036 	bltu	r2,r7,80bbe8 <__umoddi3+0x5e4>
  80b768:	000b883a 	mov	r5,zero
  80b76c:	0005883a 	mov	r2,zero
  80b770:	3084d83a 	srl	r2,r6,r2
  80b774:	01002074 	movhi	r4,129
  80b778:	210fc304 	addi	r4,r4,16140
  80b77c:	01c00804 	movi	r7,32
  80b780:	1105883a 	add	r2,r2,r4
  80b784:	10c00003 	ldbu	r3,0(r2)
  80b788:	28c7883a 	add	r3,r5,r3
  80b78c:	38e5c83a 	sub	r18,r7,r3
  80b790:	9000941e 	bne	r18,zero,80b9e4 <__umoddi3+0x3e0>
  80b794:	35405e36 	bltu	r6,r21,80b910 <__umoddi3+0x30c>
  80b798:	84c05d2e 	bgeu	r16,r19,80b910 <__umoddi3+0x30c>
  80b79c:	8011883a 	mov	r8,r16
  80b7a0:	a813883a 	mov	r9,r21
  80b7a4:	dc000415 	stw	r16,16(sp)
  80b7a8:	dd400515 	stw	r21,20(sp)
  80b7ac:	003fdc06 	br	80b720 <__umoddi3+0x11c>
  80b7b0:	00bfffd4 	movui	r2,65535
  80b7b4:	12004a36 	bltu	r2,r8,80b8e0 <__umoddi3+0x2dc>
  80b7b8:	00803fc4 	movi	r2,255
  80b7bc:	12010d36 	bltu	r2,r8,80bbf4 <__umoddi3+0x5f0>
  80b7c0:	000b883a 	mov	r5,zero
  80b7c4:	0005883a 	mov	r2,zero
  80b7c8:	9884d83a 	srl	r2,r19,r2
  80b7cc:	01002074 	movhi	r4,129
  80b7d0:	210fc304 	addi	r4,r4,16140
  80b7d4:	01800804 	movi	r6,32
  80b7d8:	1105883a 	add	r2,r2,r4
  80b7dc:	10c00003 	ldbu	r3,0(r2)
  80b7e0:	28c7883a 	add	r3,r5,r3
  80b7e4:	30c7c83a 	sub	r3,r6,r3
  80b7e8:	1800dc1e 	bne	r3,zero,80bb5c <__umoddi3+0x558>
  80b7ec:	002d883a 	mov	r22,zero
  80b7f0:	982ed43a 	srli	r23,r19,16
  80b7f4:	a809883a 	mov	r4,r21
  80b7f8:	9cbfffcc 	andi	r18,r19,65535
  80b7fc:	b80b883a 	mov	r5,r23
  80b800:	080c3100 	call	80c310 <__udivsi3>
  80b804:	100b883a 	mov	r5,r2
  80b808:	9009883a 	mov	r4,r18
  80b80c:	0802b980 	call	802b98 <__mulsi3>
  80b810:	a809883a 	mov	r4,r21
  80b814:	b80b883a 	mov	r5,r23
  80b818:	1023883a 	mov	r17,r2
  80b81c:	080c3180 	call	80c318 <__umodsi3>
  80b820:	1004943a 	slli	r2,r2,16
  80b824:	8006d43a 	srli	r3,r16,16
  80b828:	10c4b03a 	or	r2,r2,r3
  80b82c:	1440032e 	bgeu	r2,r17,80b83c <__umoddi3+0x238>
  80b830:	14c5883a 	add	r2,r2,r19
  80b834:	14c00136 	bltu	r2,r19,80b83c <__umoddi3+0x238>
  80b838:	14410236 	bltu	r2,r17,80bc44 <__umoddi3+0x640>
  80b83c:	1463c83a 	sub	r17,r2,r17
  80b840:	8809883a 	mov	r4,r17
  80b844:	b80b883a 	mov	r5,r23
  80b848:	080c3100 	call	80c310 <__udivsi3>
  80b84c:	9009883a 	mov	r4,r18
  80b850:	100b883a 	mov	r5,r2
  80b854:	0802b980 	call	802b98 <__mulsi3>
  80b858:	8809883a 	mov	r4,r17
  80b85c:	b80b883a 	mov	r5,r23
  80b860:	102b883a 	mov	r21,r2
  80b864:	080c3180 	call	80c318 <__umodsi3>
  80b868:	1004943a 	slli	r2,r2,16
  80b86c:	80ffffcc 	andi	r3,r16,65535
  80b870:	10c4b03a 	or	r2,r2,r3
  80b874:	1540042e 	bgeu	r2,r21,80b888 <__umoddi3+0x284>
  80b878:	14c5883a 	add	r2,r2,r19
  80b87c:	14c00236 	bltu	r2,r19,80b888 <__umoddi3+0x284>
  80b880:	1540012e 	bgeu	r2,r21,80b888 <__umoddi3+0x284>
  80b884:	14c5883a 	add	r2,r2,r19
  80b888:	1545c83a 	sub	r2,r2,r21
  80b88c:	1584d83a 	srl	r2,r2,r22
  80b890:	0013883a 	mov	r9,zero
  80b894:	d8800415 	stw	r2,16(sp)
  80b898:	d8c00417 	ldw	r3,16(sp)
  80b89c:	0005883a 	mov	r2,zero
  80b8a0:	d8800515 	stw	r2,20(sp)
  80b8a4:	1811883a 	mov	r8,r3
  80b8a8:	003f9d06 	br	80b720 <__umoddi3+0x11c>
  80b8ac:	00804034 	movhi	r2,256
  80b8b0:	10bfffc4 	addi	r2,r2,-1
  80b8b4:	14c0c636 	bltu	r2,r19,80bbd0 <__umoddi3+0x5cc>
  80b8b8:	01400404 	movi	r5,16
  80b8bc:	2805883a 	mov	r2,r5
  80b8c0:	003f6c06 	br	80b674 <__umoddi3+0x70>
  80b8c4:	01000044 	movi	r4,1
  80b8c8:	000b883a 	mov	r5,zero
  80b8cc:	080c3100 	call	80c310 <__udivsi3>
  80b8d0:	1027883a 	mov	r19,r2
  80b8d4:	00bfffd4 	movui	r2,65535
  80b8d8:	14fff436 	bltu	r2,r19,80b8ac <__umoddi3+0x2a8>
  80b8dc:	003f6106 	br	80b664 <__umoddi3+0x60>
  80b8e0:	00804034 	movhi	r2,256
  80b8e4:	10bfffc4 	addi	r2,r2,-1
  80b8e8:	1200c536 	bltu	r2,r8,80bc00 <__umoddi3+0x5fc>
  80b8ec:	01400404 	movi	r5,16
  80b8f0:	2805883a 	mov	r2,r5
  80b8f4:	003fb406 	br	80b7c8 <__umoddi3+0x1c4>
  80b8f8:	00804034 	movhi	r2,256
  80b8fc:	10bfffc4 	addi	r2,r2,-1
  80b900:	11c0c236 	bltu	r2,r7,80bc0c <__umoddi3+0x608>
  80b904:	01400404 	movi	r5,16
  80b908:	2805883a 	mov	r2,r5
  80b90c:	003f9806 	br	80b770 <__umoddi3+0x16c>
  80b910:	84c9c83a 	sub	r4,r16,r19
  80b914:	8105803a 	cmpltu	r2,r16,r4
  80b918:	a987c83a 	sub	r3,r21,r6
  80b91c:	18abc83a 	sub	r21,r3,r2
  80b920:	2021883a 	mov	r16,r4
  80b924:	003f9d06 	br	80b79c <__umoddi3+0x198>
  80b928:	9ca6983a 	sll	r19,r19,r18
  80b92c:	3485c83a 	sub	r2,r6,r18
  80b930:	a8a2d83a 	srl	r17,r21,r2
  80b934:	982ed43a 	srli	r23,r19,16
  80b938:	ac86983a 	sll	r3,r21,r18
  80b93c:	8084d83a 	srl	r2,r16,r2
  80b940:	8809883a 	mov	r4,r17
  80b944:	b80b883a 	mov	r5,r23
  80b948:	18b8b03a 	or	fp,r3,r2
  80b94c:	9d3fffcc 	andi	r20,r19,65535
  80b950:	080c3100 	call	80c310 <__udivsi3>
  80b954:	100b883a 	mov	r5,r2
  80b958:	a009883a 	mov	r4,r20
  80b95c:	0802b980 	call	802b98 <__mulsi3>
  80b960:	8809883a 	mov	r4,r17
  80b964:	b80b883a 	mov	r5,r23
  80b968:	102b883a 	mov	r21,r2
  80b96c:	080c3180 	call	80c318 <__umodsi3>
  80b970:	1004943a 	slli	r2,r2,16
  80b974:	e006d43a 	srli	r3,fp,16
  80b978:	902d883a 	mov	r22,r18
  80b97c:	10c4b03a 	or	r2,r2,r3
  80b980:	1540022e 	bgeu	r2,r21,80b98c <__umoddi3+0x388>
  80b984:	14c5883a 	add	r2,r2,r19
  80b988:	14c0ab2e 	bgeu	r2,r19,80bc38 <__umoddi3+0x634>
  80b98c:	1563c83a 	sub	r17,r2,r21
  80b990:	8809883a 	mov	r4,r17
  80b994:	b80b883a 	mov	r5,r23
  80b998:	080c3100 	call	80c310 <__udivsi3>
  80b99c:	100b883a 	mov	r5,r2
  80b9a0:	a009883a 	mov	r4,r20
  80b9a4:	0802b980 	call	802b98 <__mulsi3>
  80b9a8:	8809883a 	mov	r4,r17
  80b9ac:	b80b883a 	mov	r5,r23
  80b9b0:	102b883a 	mov	r21,r2
  80b9b4:	080c3180 	call	80c318 <__umodsi3>
  80b9b8:	1004943a 	slli	r2,r2,16
  80b9bc:	e0ffffcc 	andi	r3,fp,65535
  80b9c0:	10c4b03a 	or	r2,r2,r3
  80b9c4:	1540042e 	bgeu	r2,r21,80b9d8 <__umoddi3+0x3d4>
  80b9c8:	14c5883a 	add	r2,r2,r19
  80b9cc:	14c00236 	bltu	r2,r19,80b9d8 <__umoddi3+0x3d4>
  80b9d0:	1540012e 	bgeu	r2,r21,80b9d8 <__umoddi3+0x3d4>
  80b9d4:	14c5883a 	add	r2,r2,r19
  80b9d8:	84a0983a 	sll	r16,r16,r18
  80b9dc:	156bc83a 	sub	r21,r2,r21
  80b9e0:	003f3106 	br	80b6a8 <__umoddi3+0xa4>
  80b9e4:	3c8fc83a 	sub	r7,r7,r18
  80b9e8:	3486983a 	sll	r3,r6,r18
  80b9ec:	99c4d83a 	srl	r2,r19,r7
  80b9f0:	a9e2d83a 	srl	r17,r21,r7
  80b9f4:	ac8c983a 	sll	r6,r21,r18
  80b9f8:	18acb03a 	or	r22,r3,r2
  80b9fc:	b02ed43a 	srli	r23,r22,16
  80ba00:	81c4d83a 	srl	r2,r16,r7
  80ba04:	8809883a 	mov	r4,r17
  80ba08:	b80b883a 	mov	r5,r23
  80ba0c:	308cb03a 	or	r6,r6,r2
  80ba10:	d9c00315 	stw	r7,12(sp)
  80ba14:	d9800215 	stw	r6,8(sp)
  80ba18:	b53fffcc 	andi	r20,r22,65535
  80ba1c:	080c3100 	call	80c310 <__udivsi3>
  80ba20:	100b883a 	mov	r5,r2
  80ba24:	a009883a 	mov	r4,r20
  80ba28:	1039883a 	mov	fp,r2
  80ba2c:	0802b980 	call	802b98 <__mulsi3>
  80ba30:	8809883a 	mov	r4,r17
  80ba34:	b80b883a 	mov	r5,r23
  80ba38:	102b883a 	mov	r21,r2
  80ba3c:	080c3180 	call	80c318 <__umodsi3>
  80ba40:	d9000217 	ldw	r4,8(sp)
  80ba44:	1004943a 	slli	r2,r2,16
  80ba48:	9ca6983a 	sll	r19,r19,r18
  80ba4c:	2006d43a 	srli	r3,r4,16
  80ba50:	84a0983a 	sll	r16,r16,r18
  80ba54:	dcc00015 	stw	r19,0(sp)
  80ba58:	10c4b03a 	or	r2,r2,r3
  80ba5c:	dc000115 	stw	r16,4(sp)
  80ba60:	1540032e 	bgeu	r2,r21,80ba70 <__umoddi3+0x46c>
  80ba64:	1585883a 	add	r2,r2,r22
  80ba68:	e73fffc4 	addi	fp,fp,-1
  80ba6c:	15806e2e 	bgeu	r2,r22,80bc28 <__umoddi3+0x624>
  80ba70:	1563c83a 	sub	r17,r2,r21
  80ba74:	8809883a 	mov	r4,r17
  80ba78:	b80b883a 	mov	r5,r23
  80ba7c:	080c3100 	call	80c310 <__udivsi3>
  80ba80:	100b883a 	mov	r5,r2
  80ba84:	a009883a 	mov	r4,r20
  80ba88:	1021883a 	mov	r16,r2
  80ba8c:	0802b980 	call	802b98 <__mulsi3>
  80ba90:	b80b883a 	mov	r5,r23
  80ba94:	8809883a 	mov	r4,r17
  80ba98:	1029883a 	mov	r20,r2
  80ba9c:	080c3180 	call	80c318 <__umodsi3>
  80baa0:	d9400217 	ldw	r5,8(sp)
  80baa4:	1004943a 	slli	r2,r2,16
  80baa8:	28ffffcc 	andi	r3,r5,65535
  80baac:	10c4b03a 	or	r2,r2,r3
  80bab0:	1500032e 	bgeu	r2,r20,80bac0 <__umoddi3+0x4bc>
  80bab4:	1585883a 	add	r2,r2,r22
  80bab8:	843fffc4 	addi	r16,r16,-1
  80babc:	1580562e 	bgeu	r2,r22,80bc18 <__umoddi3+0x614>
  80bac0:	d9800017 	ldw	r6,0(sp)
  80bac4:	e022943a 	slli	r17,fp,16
  80bac8:	302ed43a 	srli	r23,r6,16
  80bacc:	8462b03a 	or	r17,r16,r17
  80bad0:	34ffffcc 	andi	r19,r6,65535
  80bad4:	882ad43a 	srli	r21,r17,16
  80bad8:	8c7fffcc 	andi	r17,r17,65535
  80badc:	8809883a 	mov	r4,r17
  80bae0:	980b883a 	mov	r5,r19
  80bae4:	1521c83a 	sub	r16,r2,r20
  80bae8:	0802b980 	call	802b98 <__mulsi3>
  80baec:	8809883a 	mov	r4,r17
  80baf0:	b80b883a 	mov	r5,r23
  80baf4:	1029883a 	mov	r20,r2
  80baf8:	0802b980 	call	802b98 <__mulsi3>
  80bafc:	980b883a 	mov	r5,r19
  80bb00:	a809883a 	mov	r4,r21
  80bb04:	1023883a 	mov	r17,r2
  80bb08:	0802b980 	call	802b98 <__mulsi3>
  80bb0c:	a809883a 	mov	r4,r21
  80bb10:	b80b883a 	mov	r5,r23
  80bb14:	1027883a 	mov	r19,r2
  80bb18:	0802b980 	call	802b98 <__mulsi3>
  80bb1c:	100b883a 	mov	r5,r2
  80bb20:	a004d43a 	srli	r2,r20,16
  80bb24:	8ce3883a 	add	r17,r17,r19
  80bb28:	1449883a 	add	r4,r2,r17
  80bb2c:	24c0022e 	bgeu	r4,r19,80bb38 <__umoddi3+0x534>
  80bb30:	00800074 	movhi	r2,1
  80bb34:	288b883a 	add	r5,r5,r2
  80bb38:	2004d43a 	srli	r2,r4,16
  80bb3c:	2008943a 	slli	r4,r4,16
  80bb40:	a0ffffcc 	andi	r3,r20,65535
  80bb44:	288d883a 	add	r6,r5,r2
  80bb48:	20c9883a 	add	r4,r4,r3
  80bb4c:	81800b36 	bltu	r16,r6,80bb7c <__umoddi3+0x578>
  80bb50:	81804026 	beq	r16,r6,80bc54 <__umoddi3+0x650>
  80bb54:	818dc83a 	sub	r6,r16,r6
  80bb58:	00000f06 	br	80bb98 <__umoddi3+0x594>
  80bb5c:	30c5c83a 	sub	r2,r6,r3
  80bb60:	182d883a 	mov	r22,r3
  80bb64:	8084d83a 	srl	r2,r16,r2
  80bb68:	a8c6983a 	sll	r3,r21,r3
  80bb6c:	9da6983a 	sll	r19,r19,r22
  80bb70:	85a0983a 	sll	r16,r16,r22
  80bb74:	18aab03a 	or	r21,r3,r2
  80bb78:	003f1d06 	br	80b7f0 <__umoddi3+0x1ec>
  80bb7c:	d8c00017 	ldw	r3,0(sp)
  80bb80:	20c5c83a 	sub	r2,r4,r3
  80bb84:	2089803a 	cmpltu	r4,r4,r2
  80bb88:	3587c83a 	sub	r3,r6,r22
  80bb8c:	1907c83a 	sub	r3,r3,r4
  80bb90:	80cdc83a 	sub	r6,r16,r3
  80bb94:	1009883a 	mov	r4,r2
  80bb98:	d9400117 	ldw	r5,4(sp)
  80bb9c:	2905c83a 	sub	r2,r5,r4
  80bba0:	2887803a 	cmpltu	r3,r5,r2
  80bba4:	30c7c83a 	sub	r3,r6,r3
  80bba8:	d9800317 	ldw	r6,12(sp)
  80bbac:	1484d83a 	srl	r2,r2,r18
  80bbb0:	1988983a 	sll	r4,r3,r6
  80bbb4:	1c86d83a 	srl	r3,r3,r18
  80bbb8:	2088b03a 	or	r4,r4,r2
  80bbbc:	2011883a 	mov	r8,r4
  80bbc0:	1813883a 	mov	r9,r3
  80bbc4:	d9000415 	stw	r4,16(sp)
  80bbc8:	d8c00515 	stw	r3,20(sp)
  80bbcc:	003ed406 	br	80b720 <__umoddi3+0x11c>
  80bbd0:	01400604 	movi	r5,24
  80bbd4:	2805883a 	mov	r2,r5
  80bbd8:	003ea606 	br	80b674 <__umoddi3+0x70>
  80bbdc:	01400204 	movi	r5,8
  80bbe0:	2805883a 	mov	r2,r5
  80bbe4:	003ea306 	br	80b674 <__umoddi3+0x70>
  80bbe8:	01400204 	movi	r5,8
  80bbec:	2805883a 	mov	r2,r5
  80bbf0:	003edf06 	br	80b770 <__umoddi3+0x16c>
  80bbf4:	01400204 	movi	r5,8
  80bbf8:	2805883a 	mov	r2,r5
  80bbfc:	003ef206 	br	80b7c8 <__umoddi3+0x1c4>
  80bc00:	01400604 	movi	r5,24
  80bc04:	2805883a 	mov	r2,r5
  80bc08:	003eef06 	br	80b7c8 <__umoddi3+0x1c4>
  80bc0c:	01400604 	movi	r5,24
  80bc10:	2805883a 	mov	r2,r5
  80bc14:	003ed606 	br	80b770 <__umoddi3+0x16c>
  80bc18:	153fa92e 	bgeu	r2,r20,80bac0 <__umoddi3+0x4bc>
  80bc1c:	843fffc4 	addi	r16,r16,-1
  80bc20:	1585883a 	add	r2,r2,r22
  80bc24:	003fa606 	br	80bac0 <__umoddi3+0x4bc>
  80bc28:	157f912e 	bgeu	r2,r21,80ba70 <__umoddi3+0x46c>
  80bc2c:	e73fffc4 	addi	fp,fp,-1
  80bc30:	1585883a 	add	r2,r2,r22
  80bc34:	003f8e06 	br	80ba70 <__umoddi3+0x46c>
  80bc38:	157f542e 	bgeu	r2,r21,80b98c <__umoddi3+0x388>
  80bc3c:	14c5883a 	add	r2,r2,r19
  80bc40:	003f5206 	br	80b98c <__umoddi3+0x388>
  80bc44:	14c5883a 	add	r2,r2,r19
  80bc48:	003efc06 	br	80b83c <__umoddi3+0x238>
  80bc4c:	14c5883a 	add	r2,r2,r19
  80bc50:	003ea606 	br	80b6ec <__umoddi3+0xe8>
  80bc54:	d8800117 	ldw	r2,4(sp)
  80bc58:	113fc836 	bltu	r2,r4,80bb7c <__umoddi3+0x578>
  80bc5c:	000d883a 	mov	r6,zero
  80bc60:	003fcd06 	br	80bb98 <__umoddi3+0x594>

0080bc64 <__divdf3>:
  80bc64:	deffed04 	addi	sp,sp,-76
  80bc68:	dcc01115 	stw	r19,68(sp)
  80bc6c:	dcc00404 	addi	r19,sp,16
  80bc70:	2011883a 	mov	r8,r4
  80bc74:	2813883a 	mov	r9,r5
  80bc78:	dc000e15 	stw	r16,56(sp)
  80bc7c:	d809883a 	mov	r4,sp
  80bc80:	980b883a 	mov	r5,r19
  80bc84:	dc000904 	addi	r16,sp,36
  80bc88:	dfc01215 	stw	ra,72(sp)
  80bc8c:	da400115 	stw	r9,4(sp)
  80bc90:	d9c00315 	stw	r7,12(sp)
  80bc94:	da000015 	stw	r8,0(sp)
  80bc98:	d9800215 	stw	r6,8(sp)
  80bc9c:	dc801015 	stw	r18,64(sp)
  80bca0:	dc400f15 	stw	r17,60(sp)
  80bca4:	08030880 	call	803088 <__unpack_d>
  80bca8:	d9000204 	addi	r4,sp,8
  80bcac:	800b883a 	mov	r5,r16
  80bcb0:	08030880 	call	803088 <__unpack_d>
  80bcb4:	d9000417 	ldw	r4,16(sp)
  80bcb8:	00800044 	movi	r2,1
  80bcbc:	11000b2e 	bgeu	r2,r4,80bcec <__divdf3+0x88>
  80bcc0:	d9400917 	ldw	r5,36(sp)
  80bcc4:	1140762e 	bgeu	r2,r5,80bea0 <__divdf3+0x23c>
  80bcc8:	d8800517 	ldw	r2,20(sp)
  80bccc:	d8c00a17 	ldw	r3,40(sp)
  80bcd0:	01800104 	movi	r6,4
  80bcd4:	10c4f03a 	xor	r2,r2,r3
  80bcd8:	d8800515 	stw	r2,20(sp)
  80bcdc:	21800226 	beq	r4,r6,80bce8 <__divdf3+0x84>
  80bce0:	00800084 	movi	r2,2
  80bce4:	2080141e 	bne	r4,r2,80bd38 <__divdf3+0xd4>
  80bce8:	29000926 	beq	r5,r4,80bd10 <__divdf3+0xac>
  80bcec:	9809883a 	mov	r4,r19
  80bcf0:	0802d740 	call	802d74 <__pack_d>
  80bcf4:	dfc01217 	ldw	ra,72(sp)
  80bcf8:	dcc01117 	ldw	r19,68(sp)
  80bcfc:	dc801017 	ldw	r18,64(sp)
  80bd00:	dc400f17 	ldw	r17,60(sp)
  80bd04:	dc000e17 	ldw	r16,56(sp)
  80bd08:	dec01304 	addi	sp,sp,76
  80bd0c:	f800283a 	ret
  80bd10:	01002074 	movhi	r4,129
  80bd14:	210fbe04 	addi	r4,r4,16120
  80bd18:	0802d740 	call	802d74 <__pack_d>
  80bd1c:	dfc01217 	ldw	ra,72(sp)
  80bd20:	dcc01117 	ldw	r19,68(sp)
  80bd24:	dc801017 	ldw	r18,64(sp)
  80bd28:	dc400f17 	ldw	r17,60(sp)
  80bd2c:	dc000e17 	ldw	r16,56(sp)
  80bd30:	dec01304 	addi	sp,sp,76
  80bd34:	f800283a 	ret
  80bd38:	29805b26 	beq	r5,r6,80bea8 <__divdf3+0x244>
  80bd3c:	28802d26 	beq	r5,r2,80bdf4 <__divdf3+0x190>
  80bd40:	d8c00617 	ldw	r3,24(sp)
  80bd44:	d8800b17 	ldw	r2,44(sp)
  80bd48:	d9c00817 	ldw	r7,32(sp)
  80bd4c:	dc400d17 	ldw	r17,52(sp)
  80bd50:	188bc83a 	sub	r5,r3,r2
  80bd54:	d9800717 	ldw	r6,28(sp)
  80bd58:	dc000c17 	ldw	r16,48(sp)
  80bd5c:	d9400615 	stw	r5,24(sp)
  80bd60:	3c403836 	bltu	r7,r17,80be44 <__divdf3+0x1e0>
  80bd64:	89c03626 	beq	r17,r7,80be40 <__divdf3+0x1dc>
  80bd68:	0015883a 	mov	r10,zero
  80bd6c:	001d883a 	mov	r14,zero
  80bd70:	02c40034 	movhi	r11,4096
  80bd74:	001f883a 	mov	r15,zero
  80bd78:	003f883a 	mov	ra,zero
  80bd7c:	04800f44 	movi	r18,61
  80bd80:	00000f06 	br	80bdc0 <__divdf3+0x15c>
  80bd84:	601d883a 	mov	r14,r12
  80bd88:	681f883a 	mov	r15,r13
  80bd8c:	400d883a 	mov	r6,r8
  80bd90:	100f883a 	mov	r7,r2
  80bd94:	3191883a 	add	r8,r6,r6
  80bd98:	5808d07a 	srli	r4,r11,1
  80bd9c:	4185803a 	cmpltu	r2,r8,r6
  80bda0:	39d3883a 	add	r9,r7,r7
  80bda4:	28c6b03a 	or	r3,r5,r3
  80bda8:	1245883a 	add	r2,r2,r9
  80bdac:	1815883a 	mov	r10,r3
  80bdb0:	2017883a 	mov	r11,r4
  80bdb4:	400d883a 	mov	r6,r8
  80bdb8:	100f883a 	mov	r7,r2
  80bdbc:	fc801726 	beq	ra,r18,80be1c <__divdf3+0x1b8>
  80bdc0:	580a97fa 	slli	r5,r11,31
  80bdc4:	5006d07a 	srli	r3,r10,1
  80bdc8:	ffc00044 	addi	ra,ra,1
  80bdcc:	3c7ff136 	bltu	r7,r17,80bd94 <__divdf3+0x130>
  80bdd0:	3411c83a 	sub	r8,r6,r16
  80bdd4:	3205803a 	cmpltu	r2,r6,r8
  80bdd8:	3c53c83a 	sub	r9,r7,r17
  80bddc:	7298b03a 	or	r12,r14,r10
  80bde0:	7adab03a 	or	r13,r15,r11
  80bde4:	4885c83a 	sub	r2,r9,r2
  80bde8:	89ffe61e 	bne	r17,r7,80bd84 <__divdf3+0x120>
  80bdec:	343fe936 	bltu	r6,r16,80bd94 <__divdf3+0x130>
  80bdf0:	003fe406 	br	80bd84 <__divdf3+0x120>
  80bdf4:	9809883a 	mov	r4,r19
  80bdf8:	d9800415 	stw	r6,16(sp)
  80bdfc:	0802d740 	call	802d74 <__pack_d>
  80be00:	dfc01217 	ldw	ra,72(sp)
  80be04:	dcc01117 	ldw	r19,68(sp)
  80be08:	dc801017 	ldw	r18,64(sp)
  80be0c:	dc400f17 	ldw	r17,60(sp)
  80be10:	dc000e17 	ldw	r16,56(sp)
  80be14:	dec01304 	addi	sp,sp,76
  80be18:	f800283a 	ret
  80be1c:	00803fc4 	movi	r2,255
  80be20:	7090703a 	and	r8,r14,r2
  80be24:	00802004 	movi	r2,128
  80be28:	0007883a 	mov	r3,zero
  80be2c:	0013883a 	mov	r9,zero
  80be30:	40800d26 	beq	r8,r2,80be68 <__divdf3+0x204>
  80be34:	dbc00815 	stw	r15,32(sp)
  80be38:	db800715 	stw	r14,28(sp)
  80be3c:	003fab06 	br	80bcec <__divdf3+0x88>
  80be40:	343fc92e 	bgeu	r6,r16,80bd68 <__divdf3+0x104>
  80be44:	3185883a 	add	r2,r6,r6
  80be48:	1189803a 	cmpltu	r4,r2,r6
  80be4c:	39c7883a 	add	r3,r7,r7
  80be50:	20c9883a 	add	r4,r4,r3
  80be54:	297fffc4 	addi	r5,r5,-1
  80be58:	100d883a 	mov	r6,r2
  80be5c:	200f883a 	mov	r7,r4
  80be60:	d9400615 	stw	r5,24(sp)
  80be64:	003fc006 	br	80bd68 <__divdf3+0x104>
  80be68:	483ff21e 	bne	r9,zero,80be34 <__divdf3+0x1d0>
  80be6c:	01004004 	movi	r4,256
  80be70:	7104703a 	and	r2,r14,r4
  80be74:	10c4b03a 	or	r2,r2,r3
  80be78:	103fee1e 	bne	r2,zero,80be34 <__divdf3+0x1d0>
  80be7c:	31c4b03a 	or	r2,r6,r7
  80be80:	103fec26 	beq	r2,zero,80be34 <__divdf3+0x1d0>
  80be84:	7205883a 	add	r2,r14,r8
  80be88:	1391803a 	cmpltu	r8,r2,r14
  80be8c:	43d1883a 	add	r8,r8,r15
  80be90:	013fc004 	movi	r4,-256
  80be94:	111c703a 	and	r14,r2,r4
  80be98:	401f883a 	mov	r15,r8
  80be9c:	003fe506 	br	80be34 <__divdf3+0x1d0>
  80bea0:	8009883a 	mov	r4,r16
  80bea4:	003f9206 	br	80bcf0 <__divdf3+0x8c>
  80bea8:	9809883a 	mov	r4,r19
  80beac:	d8000715 	stw	zero,28(sp)
  80beb0:	d8000815 	stw	zero,32(sp)
  80beb4:	d8000615 	stw	zero,24(sp)
  80beb8:	003f8d06 	br	80bcf0 <__divdf3+0x8c>

0080bebc <__eqdf2>:
  80bebc:	deffef04 	addi	sp,sp,-68
  80bec0:	dc400f15 	stw	r17,60(sp)
  80bec4:	dc400404 	addi	r17,sp,16
  80bec8:	2005883a 	mov	r2,r4
  80becc:	2807883a 	mov	r3,r5
  80bed0:	dc000e15 	stw	r16,56(sp)
  80bed4:	d809883a 	mov	r4,sp
  80bed8:	880b883a 	mov	r5,r17
  80bedc:	dc000904 	addi	r16,sp,36
  80bee0:	d8c00115 	stw	r3,4(sp)
  80bee4:	d8800015 	stw	r2,0(sp)
  80bee8:	d9800215 	stw	r6,8(sp)
  80beec:	dfc01015 	stw	ra,64(sp)
  80bef0:	d9c00315 	stw	r7,12(sp)
  80bef4:	08030880 	call	803088 <__unpack_d>
  80bef8:	d9000204 	addi	r4,sp,8
  80befc:	800b883a 	mov	r5,r16
  80bf00:	08030880 	call	803088 <__unpack_d>
  80bf04:	d8800417 	ldw	r2,16(sp)
  80bf08:	00c00044 	movi	r3,1
  80bf0c:	180d883a 	mov	r6,r3
  80bf10:	1880062e 	bgeu	r3,r2,80bf2c <__eqdf2+0x70>
  80bf14:	d8800917 	ldw	r2,36(sp)
  80bf18:	8809883a 	mov	r4,r17
  80bf1c:	800b883a 	mov	r5,r16
  80bf20:	1880022e 	bgeu	r3,r2,80bf2c <__eqdf2+0x70>
  80bf24:	08031c00 	call	8031c0 <__fpcmp_parts_d>
  80bf28:	100d883a 	mov	r6,r2
  80bf2c:	3005883a 	mov	r2,r6
  80bf30:	dfc01017 	ldw	ra,64(sp)
  80bf34:	dc400f17 	ldw	r17,60(sp)
  80bf38:	dc000e17 	ldw	r16,56(sp)
  80bf3c:	dec01104 	addi	sp,sp,68
  80bf40:	f800283a 	ret

0080bf44 <__nedf2>:
  80bf44:	deffef04 	addi	sp,sp,-68
  80bf48:	dc400f15 	stw	r17,60(sp)
  80bf4c:	dc400404 	addi	r17,sp,16
  80bf50:	2005883a 	mov	r2,r4
  80bf54:	2807883a 	mov	r3,r5
  80bf58:	dc000e15 	stw	r16,56(sp)
  80bf5c:	d809883a 	mov	r4,sp
  80bf60:	880b883a 	mov	r5,r17
  80bf64:	dc000904 	addi	r16,sp,36
  80bf68:	d8c00115 	stw	r3,4(sp)
  80bf6c:	d8800015 	stw	r2,0(sp)
  80bf70:	d9800215 	stw	r6,8(sp)
  80bf74:	dfc01015 	stw	ra,64(sp)
  80bf78:	d9c00315 	stw	r7,12(sp)
  80bf7c:	08030880 	call	803088 <__unpack_d>
  80bf80:	d9000204 	addi	r4,sp,8
  80bf84:	800b883a 	mov	r5,r16
  80bf88:	08030880 	call	803088 <__unpack_d>
  80bf8c:	d8800417 	ldw	r2,16(sp)
  80bf90:	00c00044 	movi	r3,1
  80bf94:	180d883a 	mov	r6,r3
  80bf98:	1880062e 	bgeu	r3,r2,80bfb4 <__nedf2+0x70>
  80bf9c:	d8800917 	ldw	r2,36(sp)
  80bfa0:	8809883a 	mov	r4,r17
  80bfa4:	800b883a 	mov	r5,r16
  80bfa8:	1880022e 	bgeu	r3,r2,80bfb4 <__nedf2+0x70>
  80bfac:	08031c00 	call	8031c0 <__fpcmp_parts_d>
  80bfb0:	100d883a 	mov	r6,r2
  80bfb4:	3005883a 	mov	r2,r6
  80bfb8:	dfc01017 	ldw	ra,64(sp)
  80bfbc:	dc400f17 	ldw	r17,60(sp)
  80bfc0:	dc000e17 	ldw	r16,56(sp)
  80bfc4:	dec01104 	addi	sp,sp,68
  80bfc8:	f800283a 	ret

0080bfcc <__gedf2>:
  80bfcc:	deffef04 	addi	sp,sp,-68
  80bfd0:	dc400f15 	stw	r17,60(sp)
  80bfd4:	dc400404 	addi	r17,sp,16
  80bfd8:	2005883a 	mov	r2,r4
  80bfdc:	2807883a 	mov	r3,r5
  80bfe0:	dc000e15 	stw	r16,56(sp)
  80bfe4:	d809883a 	mov	r4,sp
  80bfe8:	880b883a 	mov	r5,r17
  80bfec:	dc000904 	addi	r16,sp,36
  80bff0:	d8c00115 	stw	r3,4(sp)
  80bff4:	d8800015 	stw	r2,0(sp)
  80bff8:	d9800215 	stw	r6,8(sp)
  80bffc:	dfc01015 	stw	ra,64(sp)
  80c000:	d9c00315 	stw	r7,12(sp)
  80c004:	08030880 	call	803088 <__unpack_d>
  80c008:	d9000204 	addi	r4,sp,8
  80c00c:	800b883a 	mov	r5,r16
  80c010:	08030880 	call	803088 <__unpack_d>
  80c014:	d8800417 	ldw	r2,16(sp)
  80c018:	00c00044 	movi	r3,1
  80c01c:	01bfffc4 	movi	r6,-1
  80c020:	1880062e 	bgeu	r3,r2,80c03c <__gedf2+0x70>
  80c024:	d8800917 	ldw	r2,36(sp)
  80c028:	8809883a 	mov	r4,r17
  80c02c:	800b883a 	mov	r5,r16
  80c030:	1880022e 	bgeu	r3,r2,80c03c <__gedf2+0x70>
  80c034:	08031c00 	call	8031c0 <__fpcmp_parts_d>
  80c038:	100d883a 	mov	r6,r2
  80c03c:	3005883a 	mov	r2,r6
  80c040:	dfc01017 	ldw	ra,64(sp)
  80c044:	dc400f17 	ldw	r17,60(sp)
  80c048:	dc000e17 	ldw	r16,56(sp)
  80c04c:	dec01104 	addi	sp,sp,68
  80c050:	f800283a 	ret

0080c054 <__ltdf2>:
  80c054:	deffef04 	addi	sp,sp,-68
  80c058:	dc400f15 	stw	r17,60(sp)
  80c05c:	dc400404 	addi	r17,sp,16
  80c060:	2005883a 	mov	r2,r4
  80c064:	2807883a 	mov	r3,r5
  80c068:	dc000e15 	stw	r16,56(sp)
  80c06c:	d809883a 	mov	r4,sp
  80c070:	880b883a 	mov	r5,r17
  80c074:	dc000904 	addi	r16,sp,36
  80c078:	d8c00115 	stw	r3,4(sp)
  80c07c:	d8800015 	stw	r2,0(sp)
  80c080:	d9800215 	stw	r6,8(sp)
  80c084:	dfc01015 	stw	ra,64(sp)
  80c088:	d9c00315 	stw	r7,12(sp)
  80c08c:	08030880 	call	803088 <__unpack_d>
  80c090:	d9000204 	addi	r4,sp,8
  80c094:	800b883a 	mov	r5,r16
  80c098:	08030880 	call	803088 <__unpack_d>
  80c09c:	d8800417 	ldw	r2,16(sp)
  80c0a0:	00c00044 	movi	r3,1
  80c0a4:	180d883a 	mov	r6,r3
  80c0a8:	1880062e 	bgeu	r3,r2,80c0c4 <__ltdf2+0x70>
  80c0ac:	d8800917 	ldw	r2,36(sp)
  80c0b0:	8809883a 	mov	r4,r17
  80c0b4:	800b883a 	mov	r5,r16
  80c0b8:	1880022e 	bgeu	r3,r2,80c0c4 <__ltdf2+0x70>
  80c0bc:	08031c00 	call	8031c0 <__fpcmp_parts_d>
  80c0c0:	100d883a 	mov	r6,r2
  80c0c4:	3005883a 	mov	r2,r6
  80c0c8:	dfc01017 	ldw	ra,64(sp)
  80c0cc:	dc400f17 	ldw	r17,60(sp)
  80c0d0:	dc000e17 	ldw	r16,56(sp)
  80c0d4:	dec01104 	addi	sp,sp,68
  80c0d8:	f800283a 	ret

0080c0dc <__floatsidf>:
  80c0dc:	2006d7fa 	srli	r3,r4,31
  80c0e0:	defff604 	addi	sp,sp,-40
  80c0e4:	008000c4 	movi	r2,3
  80c0e8:	dfc00915 	stw	ra,36(sp)
  80c0ec:	dcc00815 	stw	r19,32(sp)
  80c0f0:	dc800715 	stw	r18,28(sp)
  80c0f4:	dc400615 	stw	r17,24(sp)
  80c0f8:	dc000515 	stw	r16,20(sp)
  80c0fc:	d8800015 	stw	r2,0(sp)
  80c100:	d8c00115 	stw	r3,4(sp)
  80c104:	20000f1e 	bne	r4,zero,80c144 <__floatsidf+0x68>
  80c108:	00800084 	movi	r2,2
  80c10c:	d8800015 	stw	r2,0(sp)
  80c110:	d809883a 	mov	r4,sp
  80c114:	0802d740 	call	802d74 <__pack_d>
  80c118:	1009883a 	mov	r4,r2
  80c11c:	180b883a 	mov	r5,r3
  80c120:	2005883a 	mov	r2,r4
  80c124:	2807883a 	mov	r3,r5
  80c128:	dfc00917 	ldw	ra,36(sp)
  80c12c:	dcc00817 	ldw	r19,32(sp)
  80c130:	dc800717 	ldw	r18,28(sp)
  80c134:	dc400617 	ldw	r17,24(sp)
  80c138:	dc000517 	ldw	r16,20(sp)
  80c13c:	dec00a04 	addi	sp,sp,40
  80c140:	f800283a 	ret
  80c144:	00800f04 	movi	r2,60
  80c148:	1807003a 	cmpeq	r3,r3,zero
  80c14c:	d8800215 	stw	r2,8(sp)
  80c150:	18001126 	beq	r3,zero,80c198 <__floatsidf+0xbc>
  80c154:	0027883a 	mov	r19,zero
  80c158:	2025883a 	mov	r18,r4
  80c15c:	d9000315 	stw	r4,12(sp)
  80c160:	dcc00415 	stw	r19,16(sp)
  80c164:	0802cf40 	call	802cf4 <__clzsi2>
  80c168:	11000744 	addi	r4,r2,29
  80c16c:	013fe80e 	bge	zero,r4,80c110 <__floatsidf+0x34>
  80c170:	10bfff44 	addi	r2,r2,-3
  80c174:	10000c16 	blt	r2,zero,80c1a8 <__floatsidf+0xcc>
  80c178:	90a2983a 	sll	r17,r18,r2
  80c17c:	0021883a 	mov	r16,zero
  80c180:	d8800217 	ldw	r2,8(sp)
  80c184:	dc400415 	stw	r17,16(sp)
  80c188:	dc000315 	stw	r16,12(sp)
  80c18c:	1105c83a 	sub	r2,r2,r4
  80c190:	d8800215 	stw	r2,8(sp)
  80c194:	003fde06 	br	80c110 <__floatsidf+0x34>
  80c198:	00a00034 	movhi	r2,32768
  80c19c:	20800a26 	beq	r4,r2,80c1c8 <__floatsidf+0xec>
  80c1a0:	0109c83a 	sub	r4,zero,r4
  80c1a4:	003feb06 	br	80c154 <__floatsidf+0x78>
  80c1a8:	9006d07a 	srli	r3,r18,1
  80c1ac:	008007c4 	movi	r2,31
  80c1b0:	1105c83a 	sub	r2,r2,r4
  80c1b4:	1886d83a 	srl	r3,r3,r2
  80c1b8:	9922983a 	sll	r17,r19,r4
  80c1bc:	9120983a 	sll	r16,r18,r4
  80c1c0:	1c62b03a 	or	r17,r3,r17
  80c1c4:	003fee06 	br	80c180 <__floatsidf+0xa4>
  80c1c8:	0009883a 	mov	r4,zero
  80c1cc:	01707834 	movhi	r5,49632
  80c1d0:	003fd306 	br	80c120 <__floatsidf+0x44>

0080c1d4 <udivmodsi4>:
  80c1d4:	29001b2e 	bgeu	r5,r4,80c244 <udivmodsi4+0x70>
  80c1d8:	28001a16 	blt	r5,zero,80c244 <udivmodsi4+0x70>
  80c1dc:	00800044 	movi	r2,1
  80c1e0:	0007883a 	mov	r3,zero
  80c1e4:	01c007c4 	movi	r7,31
  80c1e8:	00000306 	br	80c1f8 <udivmodsi4+0x24>
  80c1ec:	19c01326 	beq	r3,r7,80c23c <udivmodsi4+0x68>
  80c1f0:	18c00044 	addi	r3,r3,1
  80c1f4:	28000416 	blt	r5,zero,80c208 <udivmodsi4+0x34>
  80c1f8:	294b883a 	add	r5,r5,r5
  80c1fc:	1085883a 	add	r2,r2,r2
  80c200:	293ffa36 	bltu	r5,r4,80c1ec <udivmodsi4+0x18>
  80c204:	10000d26 	beq	r2,zero,80c23c <udivmodsi4+0x68>
  80c208:	0007883a 	mov	r3,zero
  80c20c:	21400236 	bltu	r4,r5,80c218 <udivmodsi4+0x44>
  80c210:	2149c83a 	sub	r4,r4,r5
  80c214:	1886b03a 	or	r3,r3,r2
  80c218:	1004d07a 	srli	r2,r2,1
  80c21c:	280ad07a 	srli	r5,r5,1
  80c220:	103ffa1e 	bne	r2,zero,80c20c <udivmodsi4+0x38>
  80c224:	30000226 	beq	r6,zero,80c230 <udivmodsi4+0x5c>
  80c228:	2005883a 	mov	r2,r4
  80c22c:	f800283a 	ret
  80c230:	1809883a 	mov	r4,r3
  80c234:	2005883a 	mov	r2,r4
  80c238:	f800283a 	ret
  80c23c:	0007883a 	mov	r3,zero
  80c240:	003ff806 	br	80c224 <udivmodsi4+0x50>
  80c244:	00800044 	movi	r2,1
  80c248:	0007883a 	mov	r3,zero
  80c24c:	003fef06 	br	80c20c <udivmodsi4+0x38>

0080c250 <__divsi3>:
  80c250:	defffe04 	addi	sp,sp,-8
  80c254:	dc000015 	stw	r16,0(sp)
  80c258:	dfc00115 	stw	ra,4(sp)
  80c25c:	0021883a 	mov	r16,zero
  80c260:	20000c16 	blt	r4,zero,80c294 <__divsi3+0x44>
  80c264:	000d883a 	mov	r6,zero
  80c268:	28000e16 	blt	r5,zero,80c2a4 <__divsi3+0x54>
  80c26c:	080c1d40 	call	80c1d4 <udivmodsi4>
  80c270:	1007883a 	mov	r3,r2
  80c274:	8005003a 	cmpeq	r2,r16,zero
  80c278:	1000011e 	bne	r2,zero,80c280 <__divsi3+0x30>
  80c27c:	00c7c83a 	sub	r3,zero,r3
  80c280:	1805883a 	mov	r2,r3
  80c284:	dfc00117 	ldw	ra,4(sp)
  80c288:	dc000017 	ldw	r16,0(sp)
  80c28c:	dec00204 	addi	sp,sp,8
  80c290:	f800283a 	ret
  80c294:	0109c83a 	sub	r4,zero,r4
  80c298:	04000044 	movi	r16,1
  80c29c:	000d883a 	mov	r6,zero
  80c2a0:	283ff20e 	bge	r5,zero,80c26c <__divsi3+0x1c>
  80c2a4:	014bc83a 	sub	r5,zero,r5
  80c2a8:	8021003a 	cmpeq	r16,r16,zero
  80c2ac:	003fef06 	br	80c26c <__divsi3+0x1c>

0080c2b0 <__modsi3>:
  80c2b0:	deffff04 	addi	sp,sp,-4
  80c2b4:	dfc00015 	stw	ra,0(sp)
  80c2b8:	01800044 	movi	r6,1
  80c2bc:	2807883a 	mov	r3,r5
  80c2c0:	20000416 	blt	r4,zero,80c2d4 <__modsi3+0x24>
  80c2c4:	28000c16 	blt	r5,zero,80c2f8 <__modsi3+0x48>
  80c2c8:	dfc00017 	ldw	ra,0(sp)
  80c2cc:	dec00104 	addi	sp,sp,4
  80c2d0:	080c1d41 	jmpi	80c1d4 <udivmodsi4>
  80c2d4:	0109c83a 	sub	r4,zero,r4
  80c2d8:	28000b16 	blt	r5,zero,80c308 <__modsi3+0x58>
  80c2dc:	180b883a 	mov	r5,r3
  80c2e0:	01800044 	movi	r6,1
  80c2e4:	080c1d40 	call	80c1d4 <udivmodsi4>
  80c2e8:	0085c83a 	sub	r2,zero,r2
  80c2ec:	dfc00017 	ldw	ra,0(sp)
  80c2f0:	dec00104 	addi	sp,sp,4
  80c2f4:	f800283a 	ret
  80c2f8:	014bc83a 	sub	r5,zero,r5
  80c2fc:	dfc00017 	ldw	ra,0(sp)
  80c300:	dec00104 	addi	sp,sp,4
  80c304:	080c1d41 	jmpi	80c1d4 <udivmodsi4>
  80c308:	0147c83a 	sub	r3,zero,r5
  80c30c:	003ff306 	br	80c2dc <__modsi3+0x2c>

0080c310 <__udivsi3>:
  80c310:	000d883a 	mov	r6,zero
  80c314:	080c1d41 	jmpi	80c1d4 <udivmodsi4>

0080c318 <__umodsi3>:
  80c318:	01800044 	movi	r6,1
  80c31c:	080c1d41 	jmpi	80c1d4 <udivmodsi4>

0080c320 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c320:	defffd04 	addi	sp,sp,-12
  80c324:	dc000015 	stw	r16,0(sp)
  80c328:	dfc00215 	stw	ra,8(sp)
  80c32c:	dc400115 	stw	r17,4(sp)
  80c330:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c334:	20001516 	blt	r4,zero,80c38c <close+0x6c>
  80c338:	01400304 	movi	r5,12
  80c33c:	0802b980 	call	802b98 <__mulsi3>
  80c340:	00c02074 	movhi	r3,129
  80c344:	18d32504 	addi	r3,r3,19604
  80c348:	10c9883a 	add	r4,r2,r3

  if (fd)
  80c34c:	20000f26 	beq	r4,zero,80c38c <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c350:	20800017 	ldw	r2,0(r4)
  80c354:	10800417 	ldw	r2,16(r2)
  80c358:	10001b26 	beq	r2,zero,80c3c8 <close+0xa8>
  80c35c:	103ee83a 	callr	r2
  80c360:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c364:	8009883a 	mov	r4,r16
  80c368:	080c9580 	call	80c958 <alt_release_fd>
    if (rval < 0)
  80c36c:	88001c16 	blt	r17,zero,80c3e0 <close+0xc0>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c370:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c374:	1805883a 	mov	r2,r3
  80c378:	dfc00217 	ldw	ra,8(sp)
  80c37c:	dc400117 	ldw	r17,4(sp)
  80c380:	dc000017 	ldw	r16,0(sp)
  80c384:	dec00304 	addi	sp,sp,12
  80c388:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  80c38c:	00802074 	movhi	r2,129
  80c390:	1097c804 	addi	r2,r2,24352
  80c394:	10800017 	ldw	r2,0(r2)
  80c398:	10000e26 	beq	r2,zero,80c3d4 <close+0xb4>
  80c39c:	103ee83a 	callr	r2
  80c3a0:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c3a4:	00ffffc4 	movi	r3,-1
  80c3a8:	00801444 	movi	r2,81
  80c3ac:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  80c3b0:	1805883a 	mov	r2,r3
  80c3b4:	dfc00217 	ldw	ra,8(sp)
  80c3b8:	dc400117 	ldw	r17,4(sp)
  80c3bc:	dc000017 	ldw	r16,0(sp)
  80c3c0:	dec00304 	addi	sp,sp,12
  80c3c4:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c3c8:	8009883a 	mov	r4,r16
  80c3cc:	080c9580 	call	80c958 <alt_release_fd>
  80c3d0:	003fe706 	br	80c370 <close+0x50>
  80c3d4:	01002074 	movhi	r4,129
  80c3d8:	211f2604 	addi	r4,r4,31896
  80c3dc:	003ff106 	br	80c3a4 <close+0x84>
  80c3e0:	00802074 	movhi	r2,129
  80c3e4:	1097c804 	addi	r2,r2,24352
  80c3e8:	10800017 	ldw	r2,0(r2)
  80c3ec:	10000626 	beq	r2,zero,80c408 <close+0xe8>
  80c3f0:	103ee83a 	callr	r2
  80c3f4:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  80c3f8:	0445c83a 	sub	r2,zero,r17
  80c3fc:	00ffffc4 	movi	r3,-1
  80c400:	20800015 	stw	r2,0(r4)
  80c404:	003fdb06 	br	80c374 <close+0x54>
  80c408:	01002074 	movhi	r4,129
  80c40c:	211f2604 	addi	r4,r4,31896
  80c410:	003ff906 	br	80c3f8 <close+0xd8>

0080c414 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  80c414:	3005883a 	mov	r2,r6
  80c418:	f800283a 	ret

0080c41c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c41c:	20000226 	beq	r4,zero,80c428 <_exit+0xc>
    ALT_SIM_FAIL();
  80c420:	002af070 	cmpltui	zero,zero,43969
  80c424:	003fff06 	br	80c424 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  80c428:	002af0b0 	cmpltui	zero,zero,43970
  80c42c:	003ffd06 	br	80c424 <_exit+0x8>

0080c430 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c430:	defffe04 	addi	sp,sp,-8
  80c434:	dc000015 	stw	r16,0(sp)
  80c438:	dfc00115 	stw	ra,4(sp)
  80c43c:	2821883a 	mov	r16,r5
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c440:	01400304 	movi	r5,12
  80c444:	20001516 	blt	r4,zero,80c49c <fstat+0x6c>
  80c448:	0802b980 	call	802b98 <__mulsi3>
  80c44c:	00c02074 	movhi	r3,129
  80c450:	18d32504 	addi	r3,r3,19604
  80c454:	10c9883a 	add	r4,r2,r3
  
  if (fd)
  80c458:	20001026 	beq	r4,zero,80c49c <fstat+0x6c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c45c:	20800017 	ldw	r2,0(r4)
    {
      return fd->dev->fstat(fd, st);
  80c460:	800b883a 	mov	r5,r16
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c464:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c468:	10800817 	ldw	r2,32(r2)
  80c46c:	10000426 	beq	r2,zero,80c480 <fstat+0x50>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c470:	dfc00117 	ldw	ra,4(sp)
  80c474:	dc000017 	ldw	r16,0(sp)
  80c478:	dec00204 	addi	sp,sp,8
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  80c47c:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c480:	00880004 	movi	r2,8192
  80c484:	80800115 	stw	r2,4(r16)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80c488:	1805883a 	mov	r2,r3
  80c48c:	dfc00117 	ldw	ra,4(sp)
  80c490:	dc000017 	ldw	r16,0(sp)
  80c494:	dec00204 	addi	sp,sp,8
  80c498:	f800283a 	ret
  80c49c:	00802074 	movhi	r2,129
  80c4a0:	1097c804 	addi	r2,r2,24352
  80c4a4:	10800017 	ldw	r2,0(r2)
  80c4a8:	00c02074 	movhi	r3,129
  80c4ac:	18df2604 	addi	r3,r3,31896
  80c4b0:	10000226 	beq	r2,zero,80c4bc <fstat+0x8c>
  80c4b4:	103ee83a 	callr	r2
  80c4b8:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c4bc:	00801444 	movi	r2,81
  80c4c0:	18800015 	stw	r2,0(r3)
  80c4c4:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  80c4c8:	1805883a 	mov	r2,r3
  80c4cc:	dfc00117 	ldw	ra,4(sp)
  80c4d0:	dc000017 	ldw	r16,0(sp)
  80c4d4:	dec00204 	addi	sp,sp,8
  80c4d8:	f800283a 	ret

0080c4dc <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c4dc:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80c4e0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c4e4:	00fffa84 	movi	r3,-22
  80c4e8:	1100022e 	bgeu	r2,r4,80c4f4 <alt_irq_register+0x18>
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  80c4ec:	1805883a 	mov	r2,r3
  80c4f0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4f4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4f8:	013fff84 	movi	r4,-2
  80c4fc:	4104703a 	and	r2,r8,r4
  80c500:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  80c504:	380690fa 	slli	r3,r7,3
  80c508:	008020b4 	movhi	r2,130
  80c50c:	10a0a304 	addi	r2,r2,-32116
  80c510:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = context;
  80c514:	19400115 	stw	r5,4(r3)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  80c518:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80c51c:	30001126 	beq	r6,zero,80c564 <alt_irq_register+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c520:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c524:	2904703a 	and	r2,r5,r4
  80c528:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  80c52c:	01002074 	movhi	r4,129
  80c530:	211f2a04 	addi	r4,r4,31912
  80c534:	00800044 	movi	r2,1
  80c538:	20c00017 	ldw	r3,0(r4)
  80c53c:	11c4983a 	sll	r2,r2,r7
  80c540:	10c4b03a 	or	r2,r2,r3
  80c544:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c548:	20c00017 	ldw	r3,0(r4)
  80c54c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c550:	2801703a 	wrctl	status,r5
  80c554:	4001703a 	wrctl	status,r8
  80c558:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
  80c55c:	1805883a 	mov	r2,r3
  80c560:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c564:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c568:	2904703a 	and	r2,r5,r4
  80c56c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  80c570:	01002074 	movhi	r4,129
  80c574:	211f2a04 	addi	r4,r4,31912
  80c578:	00bfff84 	movi	r2,-2
  80c57c:	20c00017 	ldw	r3,0(r4)
  80c580:	11c4183a 	rol	r2,r2,r7
  80c584:	10c4703a 	and	r2,r2,r3
  80c588:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c58c:	20c00017 	ldw	r3,0(r4)
  80c590:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c594:	2801703a 	wrctl	status,r5
  80c598:	003fee06 	br	80c554 <alt_irq_register+0x78>

0080c59c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c59c:	deffef04 	addi	sp,sp,-68
  80c5a0:	dc000f15 	stw	r16,60(sp)
  80c5a4:	dfc01015 	stw	ra,64(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c5a8:	01400304 	movi	r5,12
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c5ac:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c5b0:	20001316 	blt	r4,zero,80c600 <isatty+0x64>
  80c5b4:	0802b980 	call	802b98 <__mulsi3>
  80c5b8:	00c02074 	movhi	r3,129
  80c5bc:	18d32504 	addi	r3,r3,19604
  80c5c0:	10c5883a 	add	r2,r2,r3
  
  if (fd)
  80c5c4:	10000e26 	beq	r2,zero,80c600 <isatty+0x64>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c5c8:	10c00017 	ldw	r3,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c5cc:	8009883a 	mov	r4,r16
  80c5d0:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c5d4:	18800817 	ldw	r2,32(r3)
  80c5d8:	00c00044 	movi	r3,1
  80c5dc:	10000326 	beq	r2,zero,80c5ec <isatty+0x50>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c5e0:	080c4300 	call	80c430 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c5e4:	d8c00117 	ldw	r3,4(sp)
  80c5e8:	18c80020 	cmpeqi	r3,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  80c5ec:	1805883a 	mov	r2,r3
  80c5f0:	dfc01017 	ldw	ra,64(sp)
  80c5f4:	dc000f17 	ldw	r16,60(sp)
  80c5f8:	dec01104 	addi	sp,sp,68
  80c5fc:	f800283a 	ret
  80c600:	00802074 	movhi	r2,129
  80c604:	1097c804 	addi	r2,r2,24352
  80c608:	10800017 	ldw	r2,0(r2)
  80c60c:	00c02074 	movhi	r3,129
  80c610:	18df2604 	addi	r3,r3,31896
  80c614:	10000226 	beq	r2,zero,80c620 <isatty+0x84>
  80c618:	103ee83a 	callr	r2
  80c61c:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c620:	00801444 	movi	r2,81
  80c624:	18800015 	stw	r2,0(r3)
  80c628:	0007883a 	mov	r3,zero
    return 0;
  }
}
  80c62c:	1805883a 	mov	r2,r3
  80c630:	dfc01017 	ldw	ra,64(sp)
  80c634:	dc000f17 	ldw	r16,60(sp)
  80c638:	dec01104 	addi	sp,sp,68
  80c63c:	f800283a 	ret

0080c640 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c640:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c644:	01002074 	movhi	r4,129
  80c648:	2117cd04 	addi	r4,r4,24372
  80c64c:	00c02074 	movhi	r3,129
  80c650:	18d08704 	addi	r3,r3,16924
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c654:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80c658:	20c00826 	beq	r4,r3,80c67c <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c65c:	01402074 	movhi	r5,129
  80c660:	2957cd04 	addi	r5,r5,24372
  {
    while( to != end )
  80c664:	19400526 	beq	r3,r5,80c67c <alt_load+0x3c>
    {
      *to++ = *from++;
  80c668:	20800017 	ldw	r2,0(r4)
  80c66c:	21000104 	addi	r4,r4,4
  80c670:	18800015 	stw	r2,0(r3)
  80c674:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c678:	28fffb1e 	bne	r5,r3,80c668 <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80c67c:	01002034 	movhi	r4,128
  80c680:	21000804 	addi	r4,r4,32
  80c684:	00c02034 	movhi	r3,128
  80c688:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80c68c:	20c00826 	beq	r4,r3,80c6b0 <alt_load+0x70>
  80c690:	01402034 	movhi	r5,128
  80c694:	29406104 	addi	r5,r5,388
  {
    while( to != end )
  80c698:	19400526 	beq	r3,r5,80c6b0 <alt_load+0x70>
    {
      *to++ = *from++;
  80c69c:	20800017 	ldw	r2,0(r4)
  80c6a0:	21000104 	addi	r4,r4,4
  80c6a4:	18800015 	stw	r2,0(r3)
  80c6a8:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c6ac:	28fffb1e 	bne	r5,r3,80c69c <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80c6b0:	01002074 	movhi	r4,129
  80c6b4:	210ee204 	addi	r4,r4,15240
  80c6b8:	00c02074 	movhi	r3,129
  80c6bc:	18cee204 	addi	r3,r3,15240

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80c6c0:	20c00826 	beq	r4,r3,80c6e4 <alt_load+0xa4>
  80c6c4:	01402074 	movhi	r5,129
  80c6c8:	29508704 	addi	r5,r5,16924
  {
    while( to != end )
  80c6cc:	19400526 	beq	r3,r5,80c6e4 <alt_load+0xa4>
    {
      *to++ = *from++;
  80c6d0:	20800017 	ldw	r2,0(r4)
  80c6d4:	21000104 	addi	r4,r4,4
  80c6d8:	18800015 	stw	r2,0(r3)
  80c6dc:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c6e0:	28fffb1e 	bne	r5,r3,80c6d0 <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80c6e4:	08131280 	call	813128 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  80c6e8:	dfc00017 	ldw	ra,0(sp)
  80c6ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  80c6f0:	08132e81 	jmpi	8132e8 <alt_icache_flush_all>

0080c6f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c6f4:	defffd04 	addi	sp,sp,-12
  80c6f8:	dc400115 	stw	r17,4(sp)
  80c6fc:	dc000015 	stw	r16,0(sp)
  80c700:	dfc00215 	stw	ra,8(sp)
  80c704:	2821883a 	mov	r16,r5
  80c708:	3023883a 	mov	r17,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c70c:	20002416 	blt	r4,zero,80c7a0 <lseek+0xac>
  80c710:	01400304 	movi	r5,12
  80c714:	0802b980 	call	802b98 <__mulsi3>
  80c718:	00c02074 	movhi	r3,129
  80c71c:	18d32504 	addi	r3,r3,19604
  80c720:	10c9883a 	add	r4,r2,r3
  
  if (fd) 
  80c724:	20002026 	beq	r4,zero,80c7a8 <lseek+0xb4>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c728:	20800017 	ldw	r2,0(r4)
  80c72c:	10800717 	ldw	r2,28(r2)
  80c730:	10000926 	beq	r2,zero,80c758 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c734:	800b883a 	mov	r5,r16
  80c738:	880d883a 	mov	r6,r17
  80c73c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80c740:	10000616 	blt	r2,zero,80c75c <lseek+0x68>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  80c744:	dfc00217 	ldw	ra,8(sp)
  80c748:	dc400117 	ldw	r17,4(sp)
  80c74c:	dc000017 	ldw	r16,0(sp)
  80c750:	dec00304 	addi	sp,sp,12
  80c754:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c758:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80c75c:	00a1c83a 	sub	r16,zero,r2
  80c760:	00802074 	movhi	r2,129
  80c764:	1097c804 	addi	r2,r2,24352
  80c768:	10800017 	ldw	r2,0(r2)
  80c76c:	10000926 	beq	r2,zero,80c794 <lseek+0xa0>
  80c770:	103ee83a 	callr	r2
  80c774:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  80c778:	00bfffc4 	movi	r2,-1
  80c77c:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  80c780:	dfc00217 	ldw	ra,8(sp)
  80c784:	dc400117 	ldw	r17,4(sp)
  80c788:	dc000017 	ldw	r16,0(sp)
  80c78c:	dec00304 	addi	sp,sp,12
  80c790:	f800283a 	ret
  80c794:	00c02074 	movhi	r3,129
  80c798:	18df2604 	addi	r3,r3,31896
  80c79c:	003ff606 	br	80c778 <lseek+0x84>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c7a0:	04001444 	movi	r16,81
  80c7a4:	003fee06 	br	80c760 <lseek+0x6c>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  80c7a8:	00bfebc4 	movi	r2,-81
  80c7ac:	003feb06 	br	80c75c <lseek+0x68>

0080c7b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c7b0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c7b4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c7b8:	dfc00115 	stw	ra,4(sp)
  80c7bc:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c7c0:	080cb440 	call	80cb44 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c7c4:	080cb640 	call	80cb64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c7c8:	01002074 	movhi	r4,129
  80c7cc:	21108204 	addi	r4,r4,16904
  80c7d0:	200b883a 	mov	r5,r4
  80c7d4:	200d883a 	mov	r6,r4
  80c7d8:	08134180 	call	813418 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c7dc:	08131bc0 	call	8131bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c7e0:	01002074 	movhi	r4,129
  80c7e4:	210c8204 	addi	r4,r4,12808
  80c7e8:	081395c0 	call	81395c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c7ec:	d1276e17 	ldw	r4,-25160(gp)
  80c7f0:	d1676f17 	ldw	r5,-25156(gp)
  80c7f4:	d1a77017 	ldw	r6,-25152(gp)
  80c7f8:	08017500 	call	801750 <main>
  80c7fc:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  80c800:	01000044 	movi	r4,1
  80c804:	080c3200 	call	80c320 <close>
  exit (result);
  80c808:	8809883a 	mov	r4,r17
  80c80c:	08032880 	call	803288 <exit>

0080c810 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
  80c810:	f800283a 	ret

0080c814 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
  80c814:	f800283a 	ret

0080c818 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c818:	defffd04 	addi	sp,sp,-12
  80c81c:	dc400115 	stw	r17,4(sp)
  80c820:	dc000015 	stw	r16,0(sp)
  80c824:	dfc00215 	stw	ra,8(sp)
  80c828:	2821883a 	mov	r16,r5
  80c82c:	3023883a 	mov	r17,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c830:	20002a16 	blt	r4,zero,80c8dc <read+0xc4>
  80c834:	01400304 	movi	r5,12
  80c838:	0802b980 	call	802b98 <__mulsi3>
  80c83c:	00c02074 	movhi	r3,129
  80c840:	18d32504 	addi	r3,r3,19604
  80c844:	10c9883a 	add	r4,r2,r3
  
  if (fd)
  80c848:	20002426 	beq	r4,zero,80c8dc <read+0xc4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c84c:	20800217 	ldw	r2,8(r4)
  80c850:	00c00044 	movi	r3,1
  80c854:	108000cc 	andi	r2,r2,3
  80c858:	10c00e26 	beq	r2,r3,80c894 <read+0x7c>
  80c85c:	20800017 	ldw	r2,0(r4)
  80c860:	10800517 	ldw	r2,20(r2)
  80c864:	10000b26 	beq	r2,zero,80c894 <read+0x7c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c868:	800b883a 	mov	r5,r16
  80c86c:	880d883a 	mov	r6,r17
  80c870:	103ee83a 	callr	r2
  80c874:	1021883a 	mov	r16,r2
  80c878:	10002a16 	blt	r2,zero,80c924 <read+0x10c>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c87c:	8005883a 	mov	r2,r16
  80c880:	dfc00217 	ldw	ra,8(sp)
  80c884:	dc400117 	ldw	r17,4(sp)
  80c888:	dc000017 	ldw	r16,0(sp)
  80c88c:	dec00304 	addi	sp,sp,12
  80c890:	f800283a 	ret
  80c894:	00802074 	movhi	r2,129
  80c898:	1097c804 	addi	r2,r2,24352
  80c89c:	10800017 	ldw	r2,0(r2)
  80c8a0:	10000b26 	beq	r2,zero,80c8d0 <read+0xb8>
  80c8a4:	103ee83a 	callr	r2
  80c8a8:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c8ac:	043fffc4 	movi	r16,-1
  80c8b0:	00800344 	movi	r2,13
  80c8b4:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80c8b8:	8005883a 	mov	r2,r16
  80c8bc:	dfc00217 	ldw	ra,8(sp)
  80c8c0:	dc400117 	ldw	r17,4(sp)
  80c8c4:	dc000017 	ldw	r16,0(sp)
  80c8c8:	dec00304 	addi	sp,sp,12
  80c8cc:	f800283a 	ret
  80c8d0:	00c02074 	movhi	r3,129
  80c8d4:	18df2604 	addi	r3,r3,31896
  80c8d8:	003ff406 	br	80c8ac <read+0x94>
  80c8dc:	00802074 	movhi	r2,129
  80c8e0:	1097c804 	addi	r2,r2,24352
  80c8e4:	10800017 	ldw	r2,0(r2)
  80c8e8:	10000b26 	beq	r2,zero,80c918 <read+0x100>
  80c8ec:	103ee83a 	callr	r2
  80c8f0:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c8f4:	00801444 	movi	r2,81
  80c8f8:	043fffc4 	movi	r16,-1
  80c8fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80c900:	8005883a 	mov	r2,r16
  80c904:	dfc00217 	ldw	ra,8(sp)
  80c908:	dc400117 	ldw	r17,4(sp)
  80c90c:	dc000017 	ldw	r16,0(sp)
  80c910:	dec00304 	addi	sp,sp,12
  80c914:	f800283a 	ret
  80c918:	00c02074 	movhi	r3,129
  80c91c:	18df2604 	addi	r3,r3,31896
  80c920:	003ff406 	br	80c8f4 <read+0xdc>
  80c924:	00802074 	movhi	r2,129
  80c928:	1097c804 	addi	r2,r2,24352
  80c92c:	10800017 	ldw	r2,0(r2)
  80c930:	10000626 	beq	r2,zero,80c94c <read+0x134>
  80c934:	103ee83a 	callr	r2
  80c938:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  80c93c:	0405c83a 	sub	r2,zero,r16
  80c940:	043fffc4 	movi	r16,-1
  80c944:	18800015 	stw	r2,0(r3)
  80c948:	003fcc06 	br	80c87c <read+0x64>
  80c94c:	00c02074 	movhi	r3,129
  80c950:	18df2604 	addi	r3,r3,31896
  80c954:	003ff906 	br	80c93c <read+0x124>

0080c958 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c958:	defffd04 	addi	sp,sp,-12
  if (fd > 2)
  80c95c:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c960:	dc400115 	stw	r17,4(sp)
  80c964:	dc000015 	stw	r16,0(sp)
  80c968:	dfc00215 	stw	ra,8(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  80c96c:	01400304 	movi	r5,12
  80c970:	04402074 	movhi	r17,129
  80c974:	8c532504 	addi	r17,r17,19604
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c978:	2021883a 	mov	r16,r4
  if (fd > 2)
  80c97c:	1100080e 	bge	r2,r4,80c9a0 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c980:	0802b980 	call	802b98 <__mulsi3>
  80c984:	1445883a 	add	r2,r2,r17
    alt_fd_list[fd].dev      = 0;
  80c988:	8009883a 	mov	r4,r16
  80c98c:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  80c990:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
  80c994:	0802b980 	call	802b98 <__mulsi3>
  80c998:	1445883a 	add	r2,r2,r17
  80c99c:	10000015 	stw	zero,0(r2)
  }
}
  80c9a0:	dfc00217 	ldw	ra,8(sp)
  80c9a4:	dc400117 	ldw	r17,4(sp)
  80c9a8:	dc000017 	ldw	r16,0(sp)
  80c9ac:	dec00304 	addi	sp,sp,12
  80c9b0:	f800283a 	ret

0080c9b4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c9b4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c9b8:	00bfff84 	movi	r2,-2
  80c9bc:	2884703a 	and	r2,r5,r2
  80c9c0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c9c4:	d0e00d17 	ldw	r3,-32716(gp)
  80c9c8:	00bfff04 	movi	r2,-4
  80c9cc:	18c000c4 	addi	r3,r3,3
  80c9d0:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c9d4:	1909883a 	add	r4,r3,r4
  80c9d8:	00804034 	movhi	r2,256
  80c9dc:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c9e0:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c9e4:	1100042e 	bgeu	r2,r4,80c9f8 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c9e8:	2801703a 	wrctl	status,r5
  80c9ec:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80c9f0:	1805883a 	mov	r2,r3
  80c9f4:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  80c9f8:	d1200d15 	stw	r4,-32716(gp)
  80c9fc:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80ca00:	1805883a 	mov	r2,r3
  80ca04:	f800283a 	ret

0080ca08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ca08:	defffd04 	addi	sp,sp,-12
  80ca0c:	dc400115 	stw	r17,4(sp)
  80ca10:	dc000015 	stw	r16,0(sp)
  80ca14:	dfc00215 	stw	ra,8(sp)
  80ca18:	2821883a 	mov	r16,r5
  80ca1c:	3023883a 	mov	r17,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ca20:	20002916 	blt	r4,zero,80cac8 <write+0xc0>
  80ca24:	01400304 	movi	r5,12
  80ca28:	0802b980 	call	802b98 <__mulsi3>
  80ca2c:	00c02074 	movhi	r3,129
  80ca30:	18d32504 	addi	r3,r3,19604
  80ca34:	10c9883a 	add	r4,r2,r3
  
  if (fd)
  80ca38:	20002326 	beq	r4,zero,80cac8 <write+0xc0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ca3c:	20800217 	ldw	r2,8(r4)
  80ca40:	108000cc 	andi	r2,r2,3
  80ca44:	10000e26 	beq	r2,zero,80ca80 <write+0x78>
  80ca48:	20800017 	ldw	r2,0(r4)
  80ca4c:	10800617 	ldw	r2,24(r2)
  80ca50:	10000b26 	beq	r2,zero,80ca80 <write+0x78>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ca54:	800b883a 	mov	r5,r16
  80ca58:	880d883a 	mov	r6,r17
  80ca5c:	103ee83a 	callr	r2
  80ca60:	1021883a 	mov	r16,r2
  80ca64:	10002a16 	blt	r2,zero,80cb10 <write+0x108>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80ca68:	8005883a 	mov	r2,r16
  80ca6c:	dfc00217 	ldw	ra,8(sp)
  80ca70:	dc400117 	ldw	r17,4(sp)
  80ca74:	dc000017 	ldw	r16,0(sp)
  80ca78:	dec00304 	addi	sp,sp,12
  80ca7c:	f800283a 	ret
  80ca80:	00802074 	movhi	r2,129
  80ca84:	1097c804 	addi	r2,r2,24352
  80ca88:	10800017 	ldw	r2,0(r2)
  80ca8c:	10000b26 	beq	r2,zero,80cabc <write+0xb4>
  80ca90:	103ee83a 	callr	r2
  80ca94:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ca98:	043fffc4 	movi	r16,-1
  80ca9c:	00800344 	movi	r2,13
  80caa0:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80caa4:	8005883a 	mov	r2,r16
  80caa8:	dfc00217 	ldw	ra,8(sp)
  80caac:	dc400117 	ldw	r17,4(sp)
  80cab0:	dc000017 	ldw	r16,0(sp)
  80cab4:	dec00304 	addi	sp,sp,12
  80cab8:	f800283a 	ret
  80cabc:	00c02074 	movhi	r3,129
  80cac0:	18df2604 	addi	r3,r3,31896
  80cac4:	003ff406 	br	80ca98 <write+0x90>
  80cac8:	00802074 	movhi	r2,129
  80cacc:	1097c804 	addi	r2,r2,24352
  80cad0:	10800017 	ldw	r2,0(r2)
  80cad4:	10000b26 	beq	r2,zero,80cb04 <write+0xfc>
  80cad8:	103ee83a 	callr	r2
  80cadc:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80cae0:	00801444 	movi	r2,81
  80cae4:	043fffc4 	movi	r16,-1
  80cae8:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80caec:	8005883a 	mov	r2,r16
  80caf0:	dfc00217 	ldw	ra,8(sp)
  80caf4:	dc400117 	ldw	r17,4(sp)
  80caf8:	dc000017 	ldw	r16,0(sp)
  80cafc:	dec00304 	addi	sp,sp,12
  80cb00:	f800283a 	ret
  80cb04:	00c02074 	movhi	r3,129
  80cb08:	18df2604 	addi	r3,r3,31896
  80cb0c:	003ff406 	br	80cae0 <write+0xd8>
  80cb10:	00802074 	movhi	r2,129
  80cb14:	1097c804 	addi	r2,r2,24352
  80cb18:	10800017 	ldw	r2,0(r2)
  80cb1c:	10000626 	beq	r2,zero,80cb38 <write+0x130>
  80cb20:	103ee83a 	callr	r2
  80cb24:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  80cb28:	0405c83a 	sub	r2,zero,r16
  80cb2c:	043fffc4 	movi	r16,-1
  80cb30:	18800015 	stw	r2,0(r3)
  80cb34:	003fcc06 	br	80ca68 <write+0x60>
  80cb38:	00c02074 	movhi	r3,129
  80cb3c:	18df2604 	addi	r3,r3,31896
  80cb40:	003ff906 	br	80cb28 <write+0x120>

0080cb44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80cb44:	deffff04 	addi	sp,sp,-4
  80cb48:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80cb4c:	081380c0 	call	81380c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80cb50:	00800044 	movi	r2,1
  80cb54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80cb58:	dfc00017 	ldw	ra,0(sp)
  80cb5c:	dec00104 	addi	sp,sp,4
  80cb60:	f800283a 	ret

0080cb64 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80cb64:	00c04434 	movhi	r3,272
  80cb68:	18c50004 	addi	r3,r3,5120
  80cb6c:	00802074 	movhi	r2,129
  80cb70:	109f2e04 	addi	r2,r2,31928
  80cb74:	10c00015 	stw	r3,0(r2)
  80cb78:	01c0bef4 	movhi	r7,763
  80cb7c:	39fc2004 	addi	r7,r7,-3968
  80cb80:	00802074 	movhi	r2,129
  80cb84:	109f2f04 	addi	r2,r2,31932
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80cb88:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80cb8c:	000d883a 	mov	r6,zero
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80cb90:	11c00015 	stw	r7,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80cb94:	01002074 	movhi	r4,129
  80cb98:	21138f04 	addi	r4,r4,20028
  80cb9c:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80cba0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80cba4:	080cd7c0 	call	80cd7c <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80cba8:	01002074 	movhi	r4,129
  80cbac:	21138504 	addi	r4,r4,19988
  80cbb0:	01402074 	movhi	r5,129
  80cbb4:	2957c504 	addi	r5,r5,24340
  80cbb8:	08131400 	call	813140 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80cbbc:	02002074 	movhi	r8,129
  80cbc0:	42179d04 	addi	r8,r8,24180
  80cbc4:	41000a17 	ldw	r4,40(r8)
  80cbc8:	02400044 	movi	r9,1
  80cbcc:	01c00084 	movi	r7,2
  80cbd0:	20800017 	ldw	r2,0(r4)
  80cbd4:	40800b15 	stw	r2,44(r8)
  80cbd8:	20c00117 	ldw	r3,4(r4)
  80cbdc:	40c00c15 	stw	r3,48(r8)
  80cbe0:	2080020b 	ldhu	r2,8(r4)
  80cbe4:	40800f15 	stw	r2,60(r8)
  80cbe8:	20c0028b 	ldhu	r3,10(r4)
  80cbec:	40c01015 	stw	r3,64(r8)
  80cbf0:	20800317 	ldw	r2,12(r4)
  80cbf4:	1245d83a 	sra	r2,r2,r9
  80cbf8:	1244703a 	and	r2,r2,r9
  80cbfc:	40800d15 	stw	r2,52(r8)
  80cc00:	20c00317 	ldw	r3,12(r4)
  80cc04:	1807d13a 	srai	r3,r3,4
  80cc08:	18c003cc 	andi	r3,r3,15
  80cc0c:	40c00e15 	stw	r3,56(r8)
  80cc10:	21400317 	ldw	r5,12(r4)
  80cc14:	280cd43a 	srli	r6,r5,16
  80cc18:	1a401b26 	beq	r3,r9,80cc88 <alt_sys_init+0x124>
  80cc1c:	19c01d26 	beq	r3,r7,80cc94 <alt_sys_init+0x130>
  80cc20:	41c01115 	stw	r7,68(r8)
  80cc24:	3809883a 	mov	r4,r7
  80cc28:	280ad63a 	srli	r5,r5,24
  80cc2c:	31803fcc 	andi	r6,r6,255
  80cc30:	00800804 	movi	r2,32
  80cc34:	118fc83a 	sub	r7,r2,r6
  80cc38:	00ffffc4 	movi	r3,-1
  80cc3c:	1145c83a 	sub	r2,r2,r5
  80cc40:	1884d83a 	srl	r2,r3,r2
  80cc44:	19c6d83a 	srl	r3,r3,r7
  80cc48:	310d883a 	add	r6,r6,r4
  80cc4c:	01402074 	movhi	r5,129
  80cc50:	2957c504 	addi	r5,r5,24340
  80cc54:	01002074 	movhi	r4,129
  80cc58:	21179d04 	addi	r4,r4,24180
  80cc5c:	40801415 	stw	r2,80(r8)
  80cc60:	40c01215 	stw	r3,72(r8)
  80cc64:	41801315 	stw	r6,76(r8)
  80cc68:	08131400 	call	813140 <alt_dev_llist_insert>
  80cc6c:	01002074 	movhi	r4,129
  80cc70:	2117b204 	addi	r4,r4,24264
  80cc74:	01402074 	movhi	r5,129
  80cc78:	2957c504 	addi	r5,r5,24340
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
}
  80cc7c:	dfc00017 	ldw	ra,0(sp)
  80cc80:	dec00104 	addi	sp,sp,4
  80cc84:	08131401 	jmpi	813140 <alt_dev_llist_insert>
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80cc88:	40001115 	stw	zero,68(r8)
  80cc8c:	41001117 	ldw	r4,68(r8)
  80cc90:	003fe506 	br	80cc28 <alt_sys_init+0xc4>
  80cc94:	4809883a 	mov	r4,r9
  80cc98:	42401115 	stw	r9,68(r8)
  80cc9c:	003fe206 	br	80cc28 <alt_sys_init+0xc4>

0080cca0 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80cca0:	21000017 	ldw	r4,0(r4)
  80cca4:	21000a04 	addi	r4,r4,40
  80cca8:	080cf041 	jmpi	80cf04 <altera_avalon_jtag_uart_ioctl>

0080ccac <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80ccac:	20800017 	ldw	r2,0(r4)
  80ccb0:	21400217 	ldw	r5,8(r4)
  80ccb4:	11000a04 	addi	r4,r2,40
  80ccb8:	080ccdc1 	jmpi	80ccdc <altera_avalon_jtag_uart_close>

0080ccbc <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ccbc:	20800017 	ldw	r2,0(r4)
  80ccc0:	21c00217 	ldw	r7,8(r4)
  80ccc4:	11000a04 	addi	r4,r2,40
  80ccc8:	080d0f81 	jmpi	80d0f8 <altera_avalon_jtag_uart_write>

0080cccc <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80cccc:	20800017 	ldw	r2,0(r4)
  80ccd0:	21c00217 	ldw	r7,8(r4)
  80ccd4:	11000a04 	addi	r4,r2,40
  80ccd8:	080cf8c1 	jmpi	80cf8c <altera_avalon_jtag_uart_read>

0080ccdc <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ccdc:	2950000c 	andi	r5,r5,16384
  80cce0:	21800c17 	ldw	r6,48(r4)
  80cce4:	28000426 	beq	r5,zero,80ccf8 <altera_avalon_jtag_uart_close+0x1c>
  80cce8:	00000706 	br	80cd08 <altera_avalon_jtag_uart_close+0x2c>
  80ccec:	20c00917 	ldw	r3,36(r4)
  80ccf0:	20800117 	ldw	r2,4(r4)
  80ccf4:	1880022e 	bgeu	r3,r2,80cd00 <altera_avalon_jtag_uart_close+0x24>
  80ccf8:	20800d17 	ldw	r2,52(r4)
  80ccfc:	11bffb1e 	bne	r2,r6,80ccec <altera_avalon_jtag_uart_close+0x10>
  80cd00:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  80cd04:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80cd08:	20800d17 	ldw	r2,52(r4)
  80cd0c:	11bffc26 	beq	r2,r6,80cd00 <altera_avalon_jtag_uart_close+0x24>
  80cd10:	20c00117 	ldw	r3,4(r4)
  80cd14:	20800917 	ldw	r2,36(r4)
  80cd18:	10fff92e 	bgeu	r2,r3,80cd00 <altera_avalon_jtag_uart_close+0x24>
  80cd1c:	00bffd44 	movi	r2,-11
  80cd20:	f800283a 	ret

0080cd24 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80cd24:	20c00017 	ldw	r3,0(r4)
  80cd28:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80cd2c:	1081000c 	andi	r2,r2,1024
  80cd30:	10000a1e 	bne	r2,zero,80cd5c <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80cd34:	20c00917 	ldw	r3,36(r4)
  80cd38:	00a00034 	movhi	r2,32768
  80cd3c:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  80cd40:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80cd44:	10c00136 	bltu	r2,r3,80cd4c <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  80cd48:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80cd4c:	00c02074 	movhi	r3,129
  80cd50:	18df3d04 	addi	r3,r3,31988
  80cd54:	18800017 	ldw	r2,0(r3)
  80cd58:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80cd5c:	20800817 	ldw	r2,32(r4)
  80cd60:	10810014 	ori	r2,r2,1024
  80cd64:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80cd68:	00c02074 	movhi	r3,129
  80cd6c:	18df3d04 	addi	r3,r3,31988
  80cd70:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  80cd74:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80cd78:	f800283a 	ret

0080cd7c <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cd7c:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cd80:	defffd04 	addi	sp,sp,-12
  80cd84:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cd88:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cd8c:	2021883a 	mov	r16,r4
  80cd90:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cd94:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cd98:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80cd9c:	2809883a 	mov	r4,r5
  80cda0:	800f883a 	mov	r7,r16
  80cda4:	300b883a 	mov	r5,r6
  80cda8:	01802074 	movhi	r6,129
  80cdac:	31b37f04 	addi	r6,r6,-12804
  80cdb0:	d8000015 	stw	zero,0(sp)
  80cdb4:	081338c0 	call	81338c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cdb8:	00c02074 	movhi	r3,129
  80cdbc:	18df3d04 	addi	r3,r3,31988
  80cdc0:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80cdc4:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cdc8:	81000204 	addi	r4,r16,8
  80cdcc:	01802074 	movhi	r6,129
  80cdd0:	31b34904 	addi	r6,r6,-13020
  80cdd4:	800f883a 	mov	r7,r16
  80cdd8:	08130940 	call	813094 <alt_alarm_start>
  80cddc:	1000030e 	bge	r2,zero,80cdec <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80cde0:	00a00034 	movhi	r2,32768
  80cde4:	10bfffc4 	addi	r2,r2,-1
  80cde8:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80cdec:	dfc00217 	ldw	ra,8(sp)
  80cdf0:	dc000117 	ldw	r16,4(sp)
  80cdf4:	dec00304 	addi	sp,sp,12
  80cdf8:	f800283a 	ret

0080cdfc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80cdfc:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ce00:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80ce04:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ce08:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ce0c:	4880c00c 	andi	r2,r9,768
  80ce10:	10003426 	beq	r2,zero,80cee4 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ce14:	4880400c 	andi	r2,r9,256
  80ce18:	10001626 	beq	r2,zero,80ce74 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce1c:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  80ce20:	2a000b17 	ldw	r8,44(r5)
  80ce24:	10800044 	addi	r2,r2,1
  80ce28:	1081ffcc 	andi	r2,r2,2047
  80ce2c:	12000c1e 	bne	r2,r8,80ce60 <altera_avalon_jtag_uart_irq+0x64>
  80ce30:	00002d06 	br	80cee8 <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ce34:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce38:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ce3c:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce40:	18c00044 	addi	r3,r3,1
  80ce44:	18c1ffcc 	andi	r3,r3,2047
  80ce48:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce4c:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ce50:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  80ce54:	21000044 	addi	r4,r4,1
  80ce58:	2101ffcc 	andi	r4,r4,2047
  80ce5c:	22000326 	beq	r4,r8,80ce6c <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ce60:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ce64:	30a0000c 	andi	r2,r6,32768
  80ce68:	103ff21e 	bne	r2,zero,80ce34 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ce6c:	30bfffec 	andhi	r2,r6,65535
  80ce70:	10001d1e 	bne	r2,zero,80cee8 <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ce74:	4880800c 	andi	r2,r9,512
  80ce78:	103fe326 	beq	r2,zero,80ce08 <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ce7c:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ce80:	20000b1e 	bne	r4,zero,80ceb0 <altera_avalon_jtag_uart_irq+0xb4>
  80ce84:	003fe006 	br	80ce08 <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ce88:	28800d17 	ldw	r2,52(r5)
  80ce8c:	1145883a 	add	r2,r2,r5
  80ce90:	10c20e07 	ldb	r3,2104(r2)
  80ce94:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ce98:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ce9c:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cea0:	10800044 	addi	r2,r2,1
  80cea4:	1081ffcc 	andi	r2,r2,2047
  80cea8:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ceac:	203fd626 	beq	r4,zero,80ce08 <altera_avalon_jtag_uart_irq+0xc>
  80ceb0:	28c00d17 	ldw	r3,52(r5)
  80ceb4:	28800c17 	ldw	r2,48(r5)
  80ceb8:	18bff31e 	bne	r3,r2,80ce88 <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cebc:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cec0:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cec4:	00ffff44 	movi	r3,-3
  80cec8:	10c4703a 	and	r2,r2,r3
  80cecc:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ced0:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ced4:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ced8:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80cedc:	4880c00c 	andi	r2,r9,768
  80cee0:	103fcc1e 	bne	r2,zero,80ce14 <altera_avalon_jtag_uart_irq+0x18>
  80cee4:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cee8:	28800817 	ldw	r2,32(r5)
  80ceec:	00ffff84 	movi	r3,-2
  80cef0:	10c4703a 	and	r2,r2,r3
  80cef4:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80cef8:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cefc:	50c00037 	ldwio	r3,0(r10)
  80cf00:	003fdc06 	br	80ce74 <altera_avalon_jtag_uart_irq+0x78>

0080cf04 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  80cf04:	009a8044 	movi	r2,27137
  80cf08:	28800f26 	beq	r5,r2,80cf48 <altera_avalon_jtag_uart_ioctl+0x44>
  80cf0c:	009a8084 	movi	r2,27138
  80cf10:	28800326 	beq	r5,r2,80cf20 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80cf14:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  80cf18:	1805883a 	mov	r2,r3
  80cf1c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80cf20:	21400117 	ldw	r5,4(r4)
  80cf24:	00a00034 	movhi	r2,32768
  80cf28:	10bfffc4 	addi	r2,r2,-1
  80cf2c:	28bff926 	beq	r5,r2,80cf14 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80cf30:	20800917 	ldw	r2,36(r4)
  80cf34:	0007883a 	mov	r3,zero
  80cf38:	1145803a 	cmpltu	r2,r2,r5
  80cf3c:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  80cf40:	1805883a 	mov	r2,r3
  80cf44:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80cf48:	20c00117 	ldw	r3,4(r4)
  80cf4c:	00a00034 	movhi	r2,32768
  80cf50:	10bfffc4 	addi	r2,r2,-1
  80cf54:	18bfef26 	beq	r3,r2,80cf14 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cf58:	31800017 	ldw	r6,0(r6)
  80cf5c:	10bfff44 	addi	r2,r2,-3
  80cf60:	30ffff84 	addi	r3,r6,-2
  80cf64:	10c00436 	bltu	r2,r3,80cf78 <altera_avalon_jtag_uart_ioctl+0x74>
  80cf68:	0007883a 	mov	r3,zero
  80cf6c:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  80cf70:	1805883a 	mov	r2,r3
  80cf74:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cf78:	01a00034 	movhi	r6,32768
  80cf7c:	31bfff84 	addi	r6,r6,-2
  80cf80:	0007883a 	mov	r3,zero
  80cf84:	21800115 	stw	r6,4(r4)
  80cf88:	003ff906 	br	80cf70 <altera_avalon_jtag_uart_ioctl+0x6c>

0080cf8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80cf8c:	defff404 	addi	sp,sp,-48
  80cf90:	dd400715 	stw	r21,28(sp)
  80cf94:	dcc00515 	stw	r19,20(sp)
  80cf98:	dfc00b15 	stw	ra,44(sp)
  80cf9c:	df000a15 	stw	fp,40(sp)
  80cfa0:	ddc00915 	stw	r23,36(sp)
  80cfa4:	dd800815 	stw	r22,32(sp)
  80cfa8:	dd000615 	stw	r20,24(sp)
  80cfac:	dc800415 	stw	r18,16(sp)
  80cfb0:	dc400315 	stw	r17,12(sp)
  80cfb4:	dc000215 	stw	r16,8(sp)
  80cfb8:	302b883a 	mov	r21,r6
  80cfbc:	2027883a 	mov	r19,r4
  80cfc0:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cfc4:	0180480e 	bge	zero,r6,80d0e8 <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80cfc8:	39d0000c 	andi	r7,r7,16384
  80cfcc:	d9c00015 	stw	r7,0(sp)
  80cfd0:	dd000117 	ldw	r20,4(sp)
  80cfd4:	07020004 	movi	fp,2048
  80cfd8:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  80cfdc:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80cfe0:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80cfe4:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  80cfe8:	b4400136 	bltu	r22,r17,80cff0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80cfec:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80cff0:	a009883a 	mov	r4,r20
  80cff4:	bc4b883a 	add	r5,r23,r17
  80cff8:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  80cffc:	80000826 	beq	r16,zero,80d020 <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  80d000:	ac002036 	bltu	r21,r16,80d084 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80d004:	0808b600 	call	808b60 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d008:	8445883a 	add	r2,r16,r17
  80d00c:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80d010:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d014:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80d018:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  80d01c:	057fef16 	blt	zero,r21,80cfdc <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  80d020:	d8800117 	ldw	r2,4(sp)
  80d024:	a080231e 	bne	r20,r2,80d0b4 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80d028:	d8c00017 	ldw	r3,0(sp)
  80d02c:	1800301e 	bne	r3,zero,80d0f0 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80d030:	98800a17 	ldw	r2,40(r19)
  80d034:	b080031e 	bne	r22,r2,80d044 <altera_avalon_jtag_uart_read+0xb8>
  80d038:	98c00917 	ldw	r3,36(r19)
  80d03c:	98800117 	ldw	r2,4(r19)
  80d040:	18bffb36 	bltu	r3,r2,80d030 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80d044:	98800a17 	ldw	r2,40(r19)
  80d048:	b0800126 	beq	r22,r2,80d050 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d04c:	057fe016 	blt	zero,r21,80cfd0 <altera_avalon_jtag_uart_read+0x44>
  80d050:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  80d054:	dfc00b17 	ldw	ra,44(sp)
  80d058:	df000a17 	ldw	fp,40(sp)
  80d05c:	ddc00917 	ldw	r23,36(sp)
  80d060:	dd800817 	ldw	r22,32(sp)
  80d064:	dd400717 	ldw	r21,28(sp)
  80d068:	dd000617 	ldw	r20,24(sp)
  80d06c:	dcc00517 	ldw	r19,20(sp)
  80d070:	dc800417 	ldw	r18,16(sp)
  80d074:	dc400317 	ldw	r17,12(sp)
  80d078:	dc000217 	ldw	r16,8(sp)
  80d07c:	dec00c04 	addi	sp,sp,48
  80d080:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80d084:	99400e04 	addi	r5,r19,56
  80d088:	a009883a 	mov	r4,r20
  80d08c:	a80d883a 	mov	r6,r21
  80d090:	894b883a 	add	r5,r17,r5
  80d094:	0808b600 	call	808b60 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80d098:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d09c:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80d0a0:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d0a4:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80d0a8:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d0ac:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80d0b0:	a0bfdd26 	beq	r20,r2,80d028 <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d0b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d0b8:	00bfff84 	movi	r2,-2
  80d0bc:	2084703a 	and	r2,r4,r2
  80d0c0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d0c4:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d0c8:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d0cc:	18c00054 	ori	r3,r3,1
  80d0d0:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d0d4:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d0d8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  80d0dc:	d8c00117 	ldw	r3,4(sp)
  80d0e0:	a0c5c83a 	sub	r2,r20,r3
  80d0e4:	003fdb06 	br	80d054 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  80d0e8:	3890000c 	andi	r2,r7,16384
  80d0ec:	103fd826 	beq	r2,zero,80d050 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d0f0:	00bffd44 	movi	r2,-11
  80d0f4:	003fd706 	br	80d054 <altera_avalon_jtag_uart_read+0xc8>

0080d0f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d0f8:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d0fc:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d100:	ddc00715 	stw	r23,28(sp)
  80d104:	dd800615 	stw	r22,24(sp)
  80d108:	dcc00315 	stw	r19,12(sp)
  80d10c:	dc000015 	stw	r16,0(sp)
  80d110:	dfc00815 	stw	ra,32(sp)
  80d114:	dd400515 	stw	r21,20(sp)
  80d118:	dd000415 	stw	r20,16(sp)
  80d11c:	dc800215 	stw	r18,8(sp)
  80d120:	dc400115 	stw	r17,4(sp)
  80d124:	3027883a 	mov	r19,r6
  80d128:	2021883a 	mov	r16,r4
  80d12c:	282d883a 	mov	r22,r5
  80d130:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d134:	40004926 	beq	r8,zero,80d25c <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80d138:	3d50000c 	andi	r21,r7,16384
  80d13c:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d140:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  80d144:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  80d148:	91403d2e 	bgeu	r18,r5,80d240 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  80d14c:	2c85c83a 	sub	r2,r5,r18
  80d150:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  80d154:	30002626 	beq	r6,zero,80d1f0 <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  80d158:	3023883a 	mov	r17,r6
  80d15c:	9980012e 	bgeu	r19,r6,80d164 <altera_avalon_jtag_uart_write+0x6c>
  80d160:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  80d164:	81020e04 	addi	r4,r16,2104
  80d168:	a00b883a 	mov	r5,r20
  80d16c:	2489883a 	add	r4,r4,r18
  80d170:	880d883a 	mov	r6,r17
  80d174:	0808b600 	call	808b60 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d178:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  80d17c:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d180:	18c1ffcc 	andi	r3,r3,2047
  80d184:	9a000048 	cmpgei	r8,r19,1
  80d188:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  80d18c:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d190:	403feb1e 	bne	r8,zero,80d140 <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d194:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d198:	00bfff84 	movi	r2,-2
  80d19c:	2084703a 	and	r2,r4,r2
  80d1a0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d1a4:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d1a8:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d1ac:	18c00094 	ori	r3,r3,2
  80d1b0:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d1b4:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d1b8:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80d1bc:	b5002926 	beq	r22,r20,80d264 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  80d1c0:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
  80d1c4:	dfc00817 	ldw	ra,32(sp)
  80d1c8:	ddc00717 	ldw	r23,28(sp)
  80d1cc:	dd800617 	ldw	r22,24(sp)
  80d1d0:	dd400517 	ldw	r21,20(sp)
  80d1d4:	dd000417 	ldw	r20,16(sp)
  80d1d8:	dcc00317 	ldw	r19,12(sp)
  80d1dc:	dc800217 	ldw	r18,8(sp)
  80d1e0:	dc400117 	ldw	r17,4(sp)
  80d1e4:	dc000017 	ldw	r16,0(sp)
  80d1e8:	dec00904 	addi	sp,sp,36
  80d1ec:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d1f0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d1f4:	00bfff84 	movi	r2,-2
  80d1f8:	2084703a 	and	r2,r4,r2
  80d1fc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d200:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d204:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d208:	18c00094 	ori	r3,r3,2
  80d20c:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d210:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d214:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80d218:	a83fe81e 	bne	r21,zero,80d1bc <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d21c:	80800d17 	ldw	r2,52(r16)
  80d220:	1140031e 	bne	r2,r5,80d230 <altera_avalon_jtag_uart_write+0x138>
  80d224:	80c00917 	ldw	r3,36(r16)
  80d228:	80800117 	ldw	r2,4(r16)
  80d22c:	18bffb36 	bltu	r3,r2,80d21c <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80d230:	80800d17 	ldw	r2,52(r16)
  80d234:	117fe126 	beq	r2,r5,80d1bc <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d238:	403fc11e 	bne	r8,zero,80d140 <altera_avalon_jtag_uart_write+0x48>
  80d23c:	003fd506 	br	80d194 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  80d240:	28000326 	beq	r5,zero,80d250 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d244:	00820004 	movi	r2,2048
  80d248:	148dc83a 	sub	r6,r2,r18
  80d24c:	003fc106 	br	80d154 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d250:	0081ffc4 	movi	r2,2047
  80d254:	148dc83a 	sub	r6,r2,r18
  80d258:	003fbe06 	br	80d154 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d25c:	2829883a 	mov	r20,r5
  80d260:	003fcc06 	br	80d194 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  80d264:	b890000c 	andi	r2,r23,16384
  80d268:	1000021e 	bne	r2,zero,80d274 <altera_avalon_jtag_uart_write+0x17c>
  80d26c:	00bffec4 	movi	r2,-5
  80d270:	003fd406 	br	80d1c4 <altera_avalon_jtag_uart_write+0xcc>
  80d274:	00bffd44 	movi	r2,-11
  80d278:	003fd206 	br	80d1c4 <altera_avalon_jtag_uart_write+0xcc>

0080d27c <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  80d27c:	00c02074 	movhi	r3,129
  80d280:	18df2f04 	addi	r3,r3,31932
  80d284:	18800017 	ldw	r2,0(r3)
  80d288:	f800283a 	ret

0080d28c <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  80d28c:	00802074 	movhi	r2,129
  80d290:	109f2f04 	addi	r2,r2,31932
  80d294:	10c00017 	ldw	r3,0(r2)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  80d298:	00802074 	movhi	r2,129
  80d29c:	109f2e04 	addi	r2,r2,31928

  if (!altera_avalon_timer_ts_freq)
  80d2a0:	017fffc4 	movi	r5,-1
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  80d2a4:	11000017 	ldw	r4,0(r2)

  if (!altera_avalon_timer_ts_freq)
  80d2a8:	18000826 	beq	r3,zero,80d2cc <alt_timestamp_start+0x40>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  80d2ac:	00800204 	movi	r2,8
  80d2b0:	20800135 	stwio	r2,4(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  80d2b4:	00ffffd4 	movui	r3,65535
  80d2b8:	20c00235 	stwio	r3,8(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  80d2bc:	20c00335 	stwio	r3,12(r4)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  80d2c0:	00800104 	movi	r2,4
  80d2c4:	20800135 	stwio	r2,4(r4)
  80d2c8:	000b883a 	mov	r5,zero
    } 
  }
  return 0;
}
  80d2cc:	2805883a 	mov	r2,r5
  80d2d0:	f800283a 	ret

0080d2d4 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  80d2d4:	00802074 	movhi	r2,129
  80d2d8:	109f2f04 	addi	r2,r2,31932
  80d2dc:	10c00017 	ldw	r3,0(r2)
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  80d2e0:	00802074 	movhi	r2,129
  80d2e4:	109f2e04 	addi	r2,r2,31928

  if (!altera_avalon_timer_ts_freq)
  80d2e8:	013fffc4 	movi	r4,-1
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  80d2ec:	10800017 	ldw	r2,0(r2)

  if (!altera_avalon_timer_ts_freq)
  80d2f0:	18000826 	beq	r3,zero,80d314 <alt_timestamp+0x40>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  80d2f4:	11000404 	addi	r4,r2,16
  80d2f8:	10000435 	stwio	zero,16(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  80d2fc:	20c00037 	ldwio	r3,0(r4)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  80d300:	10800537 	ldwio	r2,20(r2)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  80d304:	1004943a 	slli	r2,r2,16
  80d308:	18ffffcc 	andi	r3,r3,65535
  80d30c:	1886b03a 	or	r3,r3,r2
  80d310:	00c8303a 	nor	r4,zero,r3
    }  
  }
}
  80d314:	2005883a 	mov	r2,r4
  80d318:	f800283a 	ret

0080d31c <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80d31c:	defffc04 	addi	sp,sp,-16
  80d320:	da000517 	ldw	r8,20(sp)
  80d324:	dc800215 	stw	r18,8(sp)
  80d328:	dc400115 	stw	r17,4(sp)
  80d32c:	dc000015 	stw	r16,0(sp)
  80d330:	2023883a 	mov	r17,r4
  80d334:	2807883a 	mov	r3,r5
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d338:	2809883a 	mov	r4,r5
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80d33c:	dfc00315 	stw	ra,12(sp)
  80d340:	3021883a 	mov	r16,r6
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d344:	380b883a 	mov	r5,r7
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80d348:	dc800417 	ldw	r18,16(sp)
	if (mode == 0)
  80d34c:	40001d26 	beq	r8,zero,80d3c4 <helper_plot_pixel+0xa8>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  80d350:	00800044 	movi	r2,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80d354:	1809883a 	mov	r4,r3
  80d358:	380b883a 	mov	r5,r7
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
  80d35c:	40800e26 	beq	r8,r2,80d398 <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80d360:	1809883a 	mov	r4,r3
  80d364:	380b883a 	mov	r5,r7
  80d368:	0802b980 	call	802b98 <__mulsi3>
  80d36c:	1405883a 	add	r2,r2,r16
  80d370:	1085883a 	add	r2,r2,r2
  80d374:	1085883a 	add	r2,r2,r2
  80d378:	1445883a 	add	r2,r2,r17
  80d37c:	14800035 	stwio	r18,0(r2)
}
  80d380:	dfc00317 	ldw	ra,12(sp)
  80d384:	dc800217 	ldw	r18,8(sp)
  80d388:	dc400117 	ldw	r17,4(sp)
  80d38c:	dc000017 	ldw	r16,0(sp)
  80d390:	dec00404 	addi	sp,sp,16
  80d394:	f800283a 	ret
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80d398:	0802b980 	call	802b98 <__mulsi3>
  80d39c:	8085883a 	add	r2,r16,r2
  80d3a0:	1085883a 	add	r2,r2,r2
  80d3a4:	1445883a 	add	r2,r2,r17
  80d3a8:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
  80d3ac:	dfc00317 	ldw	ra,12(sp)
  80d3b0:	dc800217 	ldw	r18,8(sp)
  80d3b4:	dc400117 	ldw	r17,4(sp)
  80d3b8:	dc000017 	ldw	r16,0(sp)
  80d3bc:	dec00404 	addi	sp,sp,16
  80d3c0:	f800283a 	ret
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80d3c4:	0802b980 	call	802b98 <__mulsi3>
  80d3c8:	8085883a 	add	r2,r16,r2
  80d3cc:	1445883a 	add	r2,r2,r17
  80d3d0:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
  80d3d4:	dfc00317 	ldw	ra,12(sp)
  80d3d8:	dc800217 	ldw	r18,8(sp)
  80d3dc:	dc400117 	ldw	r17,4(sp)
  80d3e0:	dc000017 	ldw	r16,0(sp)
  80d3e4:	dec00404 	addi	sp,sp,16
  80d3e8:	f800283a 	ret

0080d3ec <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80d3ec:	defff804 	addi	sp,sp,-32
  80d3f0:	dd400615 	stw	r21,24(sp)
  80d3f4:	dc800315 	stw	r18,12(sp)
  80d3f8:	dc400215 	stw	r17,8(sp)
  80d3fc:	dc000115 	stw	r16,4(sp)
  80d400:	dfc00715 	stw	ra,28(sp)
  80d404:	dd000515 	stw	r20,20(sp)
  80d408:	dcc00415 	stw	r19,16(sp)
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  80d40c:	3823883a 	mov	r17,r7


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80d410:	2825883a 	mov	r18,r5
  80d414:	dd400817 	ldw	r21,32(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d418:	24000f17 	ldw	r16,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d41c:	20801017 	ldw	r2,64(r4)
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
  80d420:	3980022e 	bgeu	r7,r6,80d42c <alt_up_pixel_buffer_dma_draw_vline+0x40>
  80d424:	3023883a 	mov	r17,r6
  80d428:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80d42c:	94001a2e 	bgeu	r18,r16,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
  80d430:	3080192e 	bgeu	r6,r2,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d434:	88800136 	bltu	r17,r2,80d43c <alt_up_pixel_buffer_dma_draw_vline+0x50>
	{
		b_y = limit_y - 1;
  80d438:	147fffc4 	addi	r17,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d43c:	d8c00917 	ldw	r3,36(sp)
  80d440:	00800044 	movi	r2,1
  80d444:	18804826 	beq	r3,r2,80d568 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d448:	25000b17 	ldw	r20,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d44c:	20800d17 	ldw	r2,52(r4)
  80d450:	10001a1e 	bne	r2,zero,80d4bc <alt_up_pixel_buffer_dma_draw_vline+0xd0>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d454:	21c01317 	ldw	r7,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d458:	21000e17 	ldw	r4,56(r4)
  80d45c:	02000044 	movi	r8,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d460:	31c4983a 	sll	r2,r6,r7
  80d464:	a087883a 	add	r3,r20,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d468:	22002a26 	beq	r4,r8,80d514 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d46c:	00800084 	movi	r2,2
  80d470:	20804e26 	beq	r4,r2,80d5ac <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d474:	89800836 	bltu	r17,r6,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d478:	9485883a 	add	r2,r18,r18
  80d47c:	41c8983a 	sll	r4,r8,r7
  80d480:	1085883a 	add	r2,r2,r2
  80d484:	10c5883a 	add	r2,r2,r3
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80d488:	15400035 	stwio	r21,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d48c:	31800044 	addi	r6,r6,1
  80d490:	1105883a 	add	r2,r2,r4
  80d494:	89bffc2e 	bgeu	r17,r6,80d488 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  80d498:	dfc00717 	ldw	ra,28(sp)
  80d49c:	dd400617 	ldw	r21,24(sp)
  80d4a0:	dd000517 	ldw	r20,20(sp)
  80d4a4:	dcc00417 	ldw	r19,16(sp)
  80d4a8:	dc800317 	ldw	r18,12(sp)
  80d4ac:	dc400217 	ldw	r17,8(sp)
  80d4b0:	dc000117 	ldw	r16,4(sp)
  80d4b4:	dec00804 	addi	sp,sp,32
  80d4b8:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d4bc:	21000e17 	ldw	r4,56(r4)
  80d4c0:	00800044 	movi	r2,1
  80d4c4:	20801b26 	beq	r4,r2,80d534 <alt_up_pixel_buffer_dma_draw_vline+0x148>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d4c8:	00800084 	movi	r2,2
  80d4cc:	20802826 	beq	r4,r2,80d570 <alt_up_pixel_buffer_dma_draw_vline+0x184>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d4d0:	89bff136 	bltu	r17,r6,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d4d4:	8405883a 	add	r2,r16,r16
  80d4d8:	10a7883a 	add	r19,r2,r2
  80d4dc:	3009883a 	mov	r4,r6
  80d4e0:	980b883a 	mov	r5,r19
  80d4e4:	d9800015 	stw	r6,0(sp)
  80d4e8:	94a1883a 	add	r16,r18,r18
  80d4ec:	0802b980 	call	802b98 <__mulsi3>
  80d4f0:	d9800017 	ldw	r6,0(sp)
  80d4f4:	8421883a 	add	r16,r16,r16
  80d4f8:	a085883a 	add	r2,r20,r2
  80d4fc:	8085883a 	add	r2,r16,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80d500:	15400035 	stwio	r21,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d504:	31800044 	addi	r6,r6,1
  80d508:	14c5883a 	add	r2,r2,r19
  80d50c:	89bffc2e 	bgeu	r17,r6,80d500 <alt_up_pixel_buffer_dma_draw_vline+0x114>
  80d510:	003fe106 	br	80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d514:	89bfe036 	bltu	r17,r6,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
  80d518:	41c8983a 	sll	r4,r8,r7
  80d51c:	1c85883a 	add	r2,r3,r18
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80d520:	15400025 	stbio	r21,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d524:	31800044 	addi	r6,r6,1
  80d528:	1105883a 	add	r2,r2,r4
  80d52c:	89bffc2e 	bgeu	r17,r6,80d520 <alt_up_pixel_buffer_dma_draw_vline+0x134>
  80d530:	003fd906 	br	80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d534:	89bfd836 	bltu	r17,r6,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
  80d538:	3009883a 	mov	r4,r6
  80d53c:	800b883a 	mov	r5,r16
  80d540:	d9800015 	stw	r6,0(sp)
  80d544:	0802b980 	call	802b98 <__mulsi3>
  80d548:	d9800017 	ldw	r6,0(sp)
  80d54c:	a085883a 	add	r2,r20,r2
  80d550:	9085883a 	add	r2,r18,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80d554:	15400025 	stbio	r21,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d558:	31800044 	addi	r6,r6,1
  80d55c:	1405883a 	add	r2,r2,r16
  80d560:	89bffc2e 	bgeu	r17,r6,80d554 <alt_up_pixel_buffer_dma_draw_vline+0x168>
  80d564:	003fcc06 	br	80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d568:	25000c17 	ldw	r20,48(r4)
  80d56c:	003fb706 	br	80d44c <alt_up_pixel_buffer_dma_draw_vline+0x60>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d570:	89bfc936 	bltu	r17,r6,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  80d574:	8427883a 	add	r19,r16,r16
  80d578:	3009883a 	mov	r4,r6
  80d57c:	980b883a 	mov	r5,r19
  80d580:	d9800015 	stw	r6,0(sp)
  80d584:	0802b980 	call	802b98 <__mulsi3>
  80d588:	d9800017 	ldw	r6,0(sp)
  80d58c:	a085883a 	add	r2,r20,r2
  80d590:	9487883a 	add	r3,r18,r18
  80d594:	1885883a 	add	r2,r3,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80d598:	1540002d 	sthio	r21,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d59c:	31800044 	addi	r6,r6,1
  80d5a0:	14c5883a 	add	r2,r2,r19
  80d5a4:	89bffc2e 	bgeu	r17,r6,80d598 <alt_up_pixel_buffer_dma_draw_vline+0x1ac>
  80d5a8:	003fbb06 	br	80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d5ac:	89bfba36 	bltu	r17,r6,80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d5b0:	41c8983a 	sll	r4,r8,r7
  80d5b4:	9485883a 	add	r2,r18,r18
  80d5b8:	10c5883a 	add	r2,r2,r3
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80d5bc:	1540002d 	sthio	r21,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d5c0:	31800044 	addi	r6,r6,1
  80d5c4:	1105883a 	add	r2,r2,r4
  80d5c8:	89bffc2e 	bgeu	r17,r6,80d5bc <alt_up_pixel_buffer_dma_draw_vline+0x1d0>
  80d5cc:	003fb206 	br	80d498 <alt_up_pixel_buffer_dma_draw_vline+0xac>

0080d5d0 <alt_up_pixel_buffer_dma_draw_hline>:
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80d5d0:	defffb04 	addi	sp,sp,-20
  80d5d4:	dc000015 	stw	r16,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d5d8:	2821883a 	mov	r16,r5
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80d5dc:	dc800215 	stw	r18,8(sp)
  80d5e0:	dc400115 	stw	r17,4(sp)
  80d5e4:	dfc00415 	stw	ra,16(sp)
  80d5e8:	dcc00315 	stw	r19,12(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
  80d5ec:	3023883a 	mov	r17,r6
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80d5f0:	dc800517 	ldw	r18,20(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d5f4:	21400f17 	ldw	r5,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d5f8:	20801017 	ldw	r2,64(r4)
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  80d5fc:	3400022e 	bgeu	r6,r16,80d608 <alt_up_pixel_buffer_dma_draw_hline+0x38>
  80d600:	8023883a 	mov	r17,r16
  80d604:	3021883a 	mov	r16,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80d608:	81401a2e 	bgeu	r16,r5,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
  80d60c:	3880192e 	bgeu	r7,r2,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d610:	89400136 	bltu	r17,r5,80d618 <alt_up_pixel_buffer_dma_draw_hline+0x48>
	{
		r_x = limit_x - 1;
  80d614:	2c7fffc4 	addi	r17,r5,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d618:	d8c00617 	ldw	r3,24(sp)
  80d61c:	00800044 	movi	r2,1
  80d620:	18804926 	beq	r3,r2,80d748 <alt_up_pixel_buffer_dma_draw_hline+0x178>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d624:	24c00b17 	ldw	r19,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d628:	20800d17 	ldw	r2,52(r4)
  80d62c:	1000181e 	bne	r2,zero,80d690 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  80d630:	20801317 	ldw	r2,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d634:	21000e17 	ldw	r4,56(r4)
  80d638:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
  80d63c:	3884983a 	sll	r2,r7,r2
  80d640:	988f883a 	add	r7,r19,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d644:	20c02c26 	beq	r4,r3,80d6f8 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d648:	00800084 	movi	r2,2
  80d64c:	20804c26 	beq	r4,r2,80d780 <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d650:	8c000836 	bltu	r17,r16,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
  80d654:	8405883a 	add	r2,r16,r16
  80d658:	1085883a 	add	r2,r2,r2
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d65c:	800b883a 	mov	r5,r16
  80d660:	11c5883a 	add	r2,r2,r7
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80d664:	14800035 	stwio	r18,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d668:	29400044 	addi	r5,r5,1
  80d66c:	10800104 	addi	r2,r2,4
  80d670:	897ffc2e 	bgeu	r17,r5,80d664 <alt_up_pixel_buffer_dma_draw_hline+0x94>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80d674:	dfc00417 	ldw	ra,16(sp)
  80d678:	dcc00317 	ldw	r19,12(sp)
  80d67c:	dc800217 	ldw	r18,8(sp)
  80d680:	dc400117 	ldw	r17,4(sp)
  80d684:	dc000017 	ldw	r16,0(sp)
  80d688:	dec00504 	addi	sp,sp,20
  80d68c:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d690:	21000e17 	ldw	r4,56(r4)
  80d694:	00800044 	movi	r2,1
  80d698:	20801f26 	beq	r4,r2,80d718 <alt_up_pixel_buffer_dma_draw_hline+0x148>
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d69c:	00800084 	movi	r2,2
  80d6a0:	20802b26 	beq	r4,r2,80d750 <alt_up_pixel_buffer_dma_draw_hline+0x180>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d6a4:	8c3ff336 	bltu	r17,r16,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
  80d6a8:	294b883a 	add	r5,r5,r5
  80d6ac:	294b883a 	add	r5,r5,r5
  80d6b0:	3809883a 	mov	r4,r7
  80d6b4:	0802b980 	call	802b98 <__mulsi3>
  80d6b8:	8407883a 	add	r3,r16,r16
  80d6bc:	9885883a 	add	r2,r19,r2
  80d6c0:	18c7883a 	add	r3,r3,r3
  80d6c4:	800b883a 	mov	r5,r16
  80d6c8:	1885883a 	add	r2,r3,r2
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80d6cc:	14800035 	stwio	r18,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d6d0:	29400044 	addi	r5,r5,1
  80d6d4:	10800104 	addi	r2,r2,4
  80d6d8:	897ffc2e 	bgeu	r17,r5,80d6cc <alt_up_pixel_buffer_dma_draw_hline+0xfc>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80d6dc:	dfc00417 	ldw	ra,16(sp)
  80d6e0:	dcc00317 	ldw	r19,12(sp)
  80d6e4:	dc800217 	ldw	r18,8(sp)
  80d6e8:	dc400117 	ldw	r17,4(sp)
  80d6ec:	dc000017 	ldw	r16,0(sp)
  80d6f0:	dec00504 	addi	sp,sp,20
  80d6f4:	f800283a 	ret
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d6f8:	8c3fde36 	bltu	r17,r16,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
  80d6fc:	81c5883a 	add	r2,r16,r7
  80d700:	800b883a 	mov	r5,r16
			{
				IOWR_8DIRECT(addr, x, local_color);
  80d704:	14800025 	stbio	r18,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d708:	29400044 	addi	r5,r5,1
  80d70c:	10800044 	addi	r2,r2,1
  80d710:	897ffc2e 	bgeu	r17,r5,80d704 <alt_up_pixel_buffer_dma_draw_hline+0x134>
  80d714:	003fd706 	br	80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d718:	8c3fd636 	bltu	r17,r16,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
  80d71c:	2809883a 	mov	r4,r5
  80d720:	380b883a 	mov	r5,r7
  80d724:	0802b980 	call	802b98 <__mulsi3>
  80d728:	9885883a 	add	r2,r19,r2
  80d72c:	8085883a 	add	r2,r16,r2
  80d730:	800b883a 	mov	r5,r16
			{
				IOWR_8DIRECT(addr, x, local_color);
  80d734:	14800025 	stbio	r18,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d738:	29400044 	addi	r5,r5,1
  80d73c:	10800044 	addi	r2,r2,1
  80d740:	897ffc2e 	bgeu	r17,r5,80d734 <alt_up_pixel_buffer_dma_draw_hline+0x164>
  80d744:	003fcb06 	br	80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
		r_x = limit_x - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80d748:	24c00c17 	ldw	r19,48(r4)
  80d74c:	003fb606 	br	80d628 <alt_up_pixel_buffer_dma_draw_hline+0x58>
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d750:	8c3fc836 	bltu	r17,r16,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
  80d754:	294b883a 	add	r5,r5,r5
  80d758:	3809883a 	mov	r4,r7
  80d75c:	0802b980 	call	802b98 <__mulsi3>
  80d760:	9887883a 	add	r3,r19,r2
  80d764:	800b883a 	mov	r5,r16
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80d768:	2945883a 	add	r2,r5,r5
  80d76c:	10c5883a 	add	r2,r2,r3
  80d770:	1480002d 	sthio	r18,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80d774:	29400044 	addi	r5,r5,1
  80d778:	897ffb2e 	bgeu	r17,r5,80d768 <alt_up_pixel_buffer_dma_draw_hline+0x198>
  80d77c:	003fbd06 	br	80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d780:	8c3fbc36 	bltu	r17,r16,80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80d784:	800b883a 	mov	r5,r16
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80d788:	2945883a 	add	r2,r5,r5
  80d78c:	11c5883a 	add	r2,r2,r7
  80d790:	1480002d 	sthio	r18,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80d794:	29400044 	addi	r5,r5,1
  80d798:	897ffb2e 	bgeu	r17,r5,80d788 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
  80d79c:	003fb506 	br	80d674 <alt_up_pixel_buffer_dma_draw_hline+0xa4>

0080d7a0 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d7a0:	defff604 	addi	sp,sp,-40
  80d7a4:	dd400715 	stw	r21,28(sp)
  80d7a8:	dd000615 	stw	r20,24(sp)
  80d7ac:	dd400c17 	ldw	r21,48(sp)
  80d7b0:	dd000b17 	ldw	r20,44(sp)
  80d7b4:	dc000215 	stw	r16,8(sp)
  80d7b8:	dc000a17 	ldw	r16,40(sp)
  80d7bc:	ddc00815 	stw	r23,32(sp)
  80d7c0:	302f883a 	mov	r23,r6
  80d7c4:	dcc00515 	stw	r19,20(sp)
  80d7c8:	dc800415 	stw	r18,16(sp)
  80d7cc:	3827883a 	mov	r19,r7
  80d7d0:	2825883a 	mov	r18,r5
  80d7d4:	dc400315 	stw	r17,12(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d7d8:	380d883a 	mov	r6,r7
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d7dc:	2023883a 	mov	r17,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d7e0:	b80f883a 	mov	r7,r23
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80d7e4:	dfc00915 	stw	ra,36(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80d7e8:	dd000015 	stw	r20,0(sp)
  80d7ec:	dd400115 	stw	r21,4(sp)
  80d7f0:	080d5d00 	call	80d5d0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80d7f4:	8809883a 	mov	r4,r17
  80d7f8:	900b883a 	mov	r5,r18
  80d7fc:	980d883a 	mov	r6,r19
  80d800:	800f883a 	mov	r7,r16
  80d804:	dd000015 	stw	r20,0(sp)
  80d808:	dd400115 	stw	r21,4(sp)
  80d80c:	080d5d00 	call	80d5d0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80d810:	900b883a 	mov	r5,r18
  80d814:	8809883a 	mov	r4,r17
  80d818:	b80d883a 	mov	r6,r23
  80d81c:	800f883a 	mov	r7,r16
  80d820:	dd000015 	stw	r20,0(sp)
  80d824:	dd400115 	stw	r21,4(sp)
  80d828:	080d3ec0 	call	80d3ec <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80d82c:	8809883a 	mov	r4,r17
  80d830:	980b883a 	mov	r5,r19
  80d834:	b80d883a 	mov	r6,r23
  80d838:	800f883a 	mov	r7,r16
  80d83c:	dd000a15 	stw	r20,40(sp)
  80d840:	dd400b15 	stw	r21,44(sp)
}
  80d844:	dfc00917 	ldw	ra,36(sp)
  80d848:	ddc00817 	ldw	r23,32(sp)
  80d84c:	dd400717 	ldw	r21,28(sp)
  80d850:	dd000617 	ldw	r20,24(sp)
  80d854:	dcc00517 	ldw	r19,20(sp)
  80d858:	dc800417 	ldw	r18,16(sp)
  80d85c:	dc400317 	ldw	r17,12(sp)
  80d860:	dc000217 	ldw	r16,8(sp)
  80d864:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80d868:	080d3ec1 	jmpi	80d3ec <alt_up_pixel_buffer_dma_draw_vline>

0080d86c <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d86c:	defff804 	addi	sp,sp,-32
  80d870:	d8c00817 	ldw	r3,32(sp)
  80d874:	dd000515 	stw	r20,20(sp)
  80d878:	dcc00415 	stw	r19,16(sp)
  80d87c:	dc800315 	stw	r18,12(sp)
  80d880:	dc400215 	stw	r17,8(sp)
  80d884:	dc000115 	stw	r16,4(sp)
  80d888:	dfc00715 	stw	ra,28(sp)
  80d88c:	dd400615 	stw	r21,24(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d890:	2823883a 	mov	r17,r5
	register unsigned int r_x = x1;
  80d894:	3821883a 	mov	r16,r7
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d898:	dc800917 	ldw	r18,36(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d89c:	25000f17 	ldw	r20,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d8a0:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
  80d8a4:	1827883a 	mov	r19,r3
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
  80d8a8:	3940022e 	bgeu	r7,r5,80d8b4 <alt_up_pixel_buffer_dma_draw_box+0x48>
  80d8ac:	2821883a 	mov	r16,r5
  80d8b0:	3823883a 	mov	r17,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
  80d8b4:	9980022e 	bgeu	r19,r6,80d8c0 <alt_up_pixel_buffer_dma_draw_box+0x54>
  80d8b8:	3027883a 	mov	r19,r6
  80d8bc:	180d883a 	mov	r6,r3
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80d8c0:	8d00232e 	bgeu	r17,r20,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
  80d8c4:	3080222e 	bgeu	r6,r2,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d8c8:	85000136 	bltu	r16,r20,80d8d0 <alt_up_pixel_buffer_dma_draw_box+0x64>
	{
		r_x = limit_x - 1;
  80d8cc:	a43fffc4 	addi	r16,r20,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d8d0:	98800136 	bltu	r19,r2,80d8d8 <alt_up_pixel_buffer_dma_draw_box+0x6c>
	{
		b_y = limit_y - 1;
  80d8d4:	14ffffc4 	addi	r19,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d8d8:	d8c00a17 	ldw	r3,40(sp)
  80d8dc:	00800044 	movi	r2,1
  80d8e0:	18805e26 	beq	r3,r2,80da5c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80d8e4:	25400b17 	ldw	r21,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d8e8:	20800d17 	ldw	r2,52(r4)
  80d8ec:	1000211e 	bne	r2,zero,80d974 <alt_up_pixel_buffer_dma_draw_box+0x108>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d8f0:	21c01317 	ldw	r7,76(r4)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d8f4:	21000e17 	ldw	r4,56(r4)
  80d8f8:	00c00044 	movi	r3,1
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
  80d8fc:	31c4983a 	sll	r2,r6,r7
  80d900:	a88b883a 	add	r5,r21,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d904:	20c01126 	beq	r4,r3,80d94c <alt_up_pixel_buffer_dma_draw_box+0xe0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d908:	00800084 	movi	r2,2
  80d90c:	20806826 	beq	r4,r2,80dab0 <alt_up_pixel_buffer_dma_draw_box+0x244>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d910:	99800f36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
  80d914:	84400736 	bltu	r16,r17,80d934 <alt_up_pixel_buffer_dma_draw_box+0xc8>
  80d918:	8807883a 	mov	r3,r17
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d91c:	18c5883a 	add	r2,r3,r3
  80d920:	1085883a 	add	r2,r2,r2
  80d924:	1145883a 	add	r2,r2,r5
  80d928:	14800035 	stwio	r18,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d92c:	18c00044 	addi	r3,r3,1
  80d930:	80fffa2e 	bgeu	r16,r3,80d91c <alt_up_pixel_buffer_dma_draw_box+0xb0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d934:	31800044 	addi	r6,r6,1
  80d938:	99800536 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80d93c:	00800044 	movi	r2,1
  80d940:	11c4983a 	sll	r2,r2,r7
  80d944:	288b883a 	add	r5,r5,r2
  80d948:	003ff206 	br	80d914 <alt_up_pixel_buffer_dma_draw_box+0xa8>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d94c:	9980282e 	bgeu	r19,r6,80d9f0 <alt_up_pixel_buffer_dma_draw_box+0x184>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80d950:	dfc00717 	ldw	ra,28(sp)
  80d954:	dd400617 	ldw	r21,24(sp)
  80d958:	dd000517 	ldw	r20,20(sp)
  80d95c:	dcc00417 	ldw	r19,16(sp)
  80d960:	dc800317 	ldw	r18,12(sp)
  80d964:	dc400217 	ldw	r17,8(sp)
  80d968:	dc000117 	ldw	r16,4(sp)
  80d96c:	dec00804 	addi	sp,sp,32
  80d970:	f800283a 	ret
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d974:	21000e17 	ldw	r4,56(r4)
  80d978:	00800044 	movi	r2,1
  80d97c:	20802426 	beq	r4,r2,80da10 <alt_up_pixel_buffer_dma_draw_box+0x1a4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d980:	00800084 	movi	r2,2
  80d984:	20803726 	beq	r4,r2,80da64 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d988:	99bff136 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d98c:	a505883a 	add	r2,r20,r20
  80d990:	10a9883a 	add	r20,r2,r2
			addr = addr + t_y * limit_x;
  80d994:	3009883a 	mov	r4,r6
  80d998:	a00b883a 	mov	r5,r20
  80d99c:	d9800015 	stw	r6,0(sp)
  80d9a0:	0802b980 	call	802b98 <__mulsi3>
  80d9a4:	d9800017 	ldw	r6,0(sp)
  80d9a8:	a889883a 	add	r4,r21,r2
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d9ac:	84400736 	bltu	r16,r17,80d9cc <alt_up_pixel_buffer_dma_draw_box+0x160>
  80d9b0:	8807883a 	mov	r3,r17
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d9b4:	18c5883a 	add	r2,r3,r3
  80d9b8:	1085883a 	add	r2,r2,r2
  80d9bc:	1105883a 	add	r2,r2,r4
  80d9c0:	14800035 	stwio	r18,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d9c4:	18c00044 	addi	r3,r3,1
  80d9c8:	80fffa2e 	bgeu	r16,r3,80d9b4 <alt_up_pixel_buffer_dma_draw_box+0x148>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d9cc:	31800044 	addi	r6,r6,1
  80d9d0:	99bfdf36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80d9d4:	2509883a 	add	r4,r4,r20
  80d9d8:	003ff406 	br	80d9ac <alt_up_pixel_buffer_dma_draw_box+0x140>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d9dc:	31800044 	addi	r6,r6,1
  80d9e0:	99bfdb36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80d9e4:	00800044 	movi	r2,1
  80d9e8:	11c4983a 	sll	r2,r2,r7
  80d9ec:	288b883a 	add	r5,r5,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d9f0:	847ffa36 	bltu	r16,r17,80d9dc <alt_up_pixel_buffer_dma_draw_box+0x170>
  80d9f4:	2c47883a 	add	r3,r5,r17
  80d9f8:	8805883a 	mov	r2,r17
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d9fc:	1c800025 	stbio	r18,0(r3)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80da00:	10800044 	addi	r2,r2,1
  80da04:	18c00044 	addi	r3,r3,1
  80da08:	80bffc2e 	bgeu	r16,r2,80d9fc <alt_up_pixel_buffer_dma_draw_box+0x190>
  80da0c:	003ff306 	br	80d9dc <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80da10:	99bfcf36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
  80da14:	3009883a 	mov	r4,r6
  80da18:	a00b883a 	mov	r5,r20
  80da1c:	d9800015 	stw	r6,0(sp)
  80da20:	0802b980 	call	802b98 <__mulsi3>
  80da24:	d9800017 	ldw	r6,0(sp)
  80da28:	a885883a 	add	r2,r21,r2
  80da2c:	8885883a 	add	r2,r17,r2
			{
				for (x = l_x; x <= r_x; x++)
  80da30:	84400636 	bltu	r16,r17,80da4c <alt_up_pixel_buffer_dma_draw_box+0x1e0>
  80da34:	1009883a 	mov	r4,r2
  80da38:	8807883a 	mov	r3,r17
				{
					IOWR_8DIRECT(addr, x, local_color);
  80da3c:	24800025 	stbio	r18,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80da40:	18c00044 	addi	r3,r3,1
  80da44:	21000044 	addi	r4,r4,1
  80da48:	80fffc2e 	bgeu	r16,r3,80da3c <alt_up_pixel_buffer_dma_draw_box+0x1d0>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80da4c:	31800044 	addi	r6,r6,1
  80da50:	1505883a 	add	r2,r2,r20
  80da54:	99bff62e 	bgeu	r19,r6,80da30 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
  80da58:	003fbd06 	br	80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
		b_y = limit_y - 1;
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80da5c:	25400c17 	ldw	r21,48(r4)
  80da60:	003fa106 	br	80d8e8 <alt_up_pixel_buffer_dma_draw_box+0x7c>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80da64:	99bfba36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
  80da68:	a529883a 	add	r20,r20,r20
			addr = addr + t_y * limit_x;
  80da6c:	3009883a 	mov	r4,r6
  80da70:	a00b883a 	mov	r5,r20
  80da74:	d9800015 	stw	r6,0(sp)
  80da78:	0802b980 	call	802b98 <__mulsi3>
  80da7c:	d9800017 	ldw	r6,0(sp)
  80da80:	a889883a 	add	r4,r21,r2
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80da84:	84400636 	bltu	r16,r17,80daa0 <alt_up_pixel_buffer_dma_draw_box+0x234>
  80da88:	8807883a 	mov	r3,r17
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80da8c:	18c5883a 	add	r2,r3,r3
  80da90:	1105883a 	add	r2,r2,r4
  80da94:	1480002d 	sthio	r18,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80da98:	18c00044 	addi	r3,r3,1
  80da9c:	80fffb2e 	bgeu	r16,r3,80da8c <alt_up_pixel_buffer_dma_draw_box+0x220>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80daa0:	31800044 	addi	r6,r6,1
  80daa4:	99bfaa36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80daa8:	2509883a 	add	r4,r4,r20
  80daac:	003ff506 	br	80da84 <alt_up_pixel_buffer_dma_draw_box+0x218>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80dab0:	99bfa736 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
  80dab4:	84400636 	bltu	r16,r17,80dad0 <alt_up_pixel_buffer_dma_draw_box+0x264>
  80dab8:	8807883a 	mov	r3,r17
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80dabc:	18c5883a 	add	r2,r3,r3
  80dac0:	2885883a 	add	r2,r5,r2
  80dac4:	1480002d 	sthio	r18,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dac8:	18c00044 	addi	r3,r3,1
  80dacc:	80fffb2e 	bgeu	r16,r3,80dabc <alt_up_pixel_buffer_dma_draw_box+0x250>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80dad0:	31800044 	addi	r6,r6,1
  80dad4:	99bf9e36 	bltu	r19,r6,80d950 <alt_up_pixel_buffer_dma_draw_box+0xe4>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80dad8:	00800044 	movi	r2,1
  80dadc:	11c4983a 	sll	r2,r2,r7
  80dae0:	288b883a 	add	r5,r5,r2
  80dae4:	003ff306 	br	80dab4 <alt_up_pixel_buffer_dma_draw_box+0x248>

0080dae8 <alt_up_pixel_buffer_dma_clear_screen>:
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
}

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80dae8:	defffe04 	addi	sp,sp,-8
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80daec:	00800044 	movi	r2,1
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
}

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80daf0:	dfc00115 	stw	ra,4(sp)
  80daf4:	dc000015 	stw	r16,0(sp)
  80daf8:	200d883a 	mov	r6,r4
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80dafc:	28802a26 	beq	r5,r2,80dba8 <alt_up_pixel_buffer_dma_clear_screen+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
  80db00:	24000b17 	ldw	r16,44(r4)
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80db04:	30c00e17 	ldw	r3,56(r6)
  80db08:	00800084 	movi	r2,2
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
  80db0c:	31000f17 	ldw	r4,60(r6)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80db10:	18802326 	beq	r3,r2,80dba0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
  80db14:	2105883a 	add	r2,r4,r4
  80db18:	1089883a 	add	r4,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80db1c:	30800d17 	ldw	r2,52(r6)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
  80db20:	31401017 	ldw	r5,64(r6)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80db24:	1000101e 	bne	r2,zero,80db68 <alt_up_pixel_buffer_dma_clear_screen+0x80>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80db28:	32001317 	ldw	r8,76(r6)

		for (y = 0; y < limit_y; y++)
  80db2c:	28001826 	beq	r5,zero,80db90 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
  80db30:	000d883a 	mov	r6,zero
  80db34:	200ec03a 	cmpne	r7,r4,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
  80db38:	38000526 	beq	r7,zero,80db50 <alt_up_pixel_buffer_dma_clear_screen+0x68>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80db3c:	0007883a 	mov	r3,zero
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
  80db40:	1c05883a 	add	r2,r3,r16
  80db44:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80db48:	18c00104 	addi	r3,r3,4
  80db4c:	193ffc36 	bltu	r3,r4,80db40 <alt_up_pixel_buffer_dma_clear_screen+0x58>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80db50:	31800044 	addi	r6,r6,1
  80db54:	29800e26 	beq	r5,r6,80db90 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80db58:	00800044 	movi	r2,1
  80db5c:	1204983a 	sll	r2,r2,r8
  80db60:	80a1883a 	add	r16,r16,r2
  80db64:	003ff406 	br	80db38 <alt_up_pixel_buffer_dma_clear_screen+0x50>
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80db68:	0802b980 	call	802b98 <__mulsi3>
  80db6c:	1009883a 	mov	r4,r2

		for (x = 0; x < limit_y; x = x + 4)
  80db70:	10000726 	beq	r2,zero,80db90 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
  80db74:	0007883a 	mov	r3,zero
  80db78:	0005883a 	mov	r2,zero
		{
			IOWR_32DIRECT(addr, x, 0);
  80db7c:	1405883a 	add	r2,r2,r16
  80db80:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80db84:	18800104 	addi	r2,r3,4
  80db88:	1007883a 	mov	r3,r2
  80db8c:	113ffb36 	bltu	r2,r4,80db7c <alt_up_pixel_buffer_dma_clear_screen+0x94>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80db90:	dfc00117 	ldw	ra,4(sp)
  80db94:	dc000017 	ldw	r16,0(sp)
  80db98:	dec00204 	addi	sp,sp,8
  80db9c:	f800283a 	ret
	else
		addr = pixel_buffer->buffer_start_address;
	limit_x = pixel_buffer->x_resolution;
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
  80dba0:	2109883a 	add	r4,r4,r4
  80dba4:	003fdd06 	br	80db1c <alt_up_pixel_buffer_dma_clear_screen+0x34>
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
		addr = pixel_buffer->back_buffer_start_address;
  80dba8:	24000c17 	ldw	r16,48(r4)
  80dbac:	003fd506 	br	80db04 <alt_up_pixel_buffer_dma_clear_screen+0x1c>

0080dbb0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80dbb0:	21800c17 	ldw	r6,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80dbb4:	20c00a17 	ldw	r3,40(r4)
  80dbb8:	00800044 	movi	r2,1
  80dbbc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80dbc0:	21400b17 	ldw	r5,44(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  80dbc4:	0005883a 	mov	r2,zero
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
	pixel_buffer->buffer_start_address = temp;
  80dbc8:	21800b15 	stw	r6,44(r4)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80dbcc:	21400c15 	stw	r5,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
  80dbd0:	f800283a 	ret

0080dbd4 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80dbd4:	defffb04 	addi	sp,sp,-20
  80dbd8:	dc800215 	stw	r18,8(sp)
  80dbdc:	2025883a 	mov	r18,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80dbe0:	21000f17 	ldw	r4,60(r4)
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80dbe4:	dcc00315 	stw	r19,12(sp)
  80dbe8:	dfc00415 	stw	ra,16(sp)
  80dbec:	dc400115 	stw	r17,4(sp)
  80dbf0:	dc000015 	stw	r16,0(sp)
  80dbf4:	2827883a 	mov	r19,r5
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80dbf8:	31000836 	bltu	r6,r4,80dc1c <alt_up_pixel_buffer_dma_draw+0x48>
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80dbfc:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
  80dc00:	dfc00417 	ldw	ra,16(sp)
  80dc04:	dcc00317 	ldw	r19,12(sp)
  80dc08:	dc800217 	ldw	r18,8(sp)
  80dc0c:	dc400117 	ldw	r17,4(sp)
  80dc10:	dc000017 	ldw	r16,0(sp)
  80dc14:	dec00504 	addi	sp,sp,20
  80dc18:	f800283a 	ret
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80dc1c:	90801017 	ldw	r2,64(r18)
  80dc20:	38bff62e 	bgeu	r7,r2,80dbfc <alt_up_pixel_buffer_dma_draw+0x28>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80dc24:	90800d17 	ldw	r2,52(r18)
  80dc28:	1000131e 	bne	r2,zero,80dc78 <alt_up_pixel_buffer_dma_draw+0xa4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80dc2c:	90c01217 	ldw	r3,72(r18)
  80dc30:	90801417 	ldw	r2,80(r18)
  80dc34:	91001117 	ldw	r4,68(r18)
  80dc38:	91401317 	ldw	r5,76(r18)
  80dc3c:	30c6703a 	and	r3,r6,r3
  80dc40:	3884703a 	and	r2,r7,r2
  80dc44:	1906983a 	sll	r3,r3,r4
  80dc48:	1144983a 	sll	r2,r2,r5
  80dc4c:	1886b03a 	or	r3,r3,r2
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80dc50:	91000e17 	ldw	r4,56(r18)
  80dc54:	00800044 	movi	r2,1
  80dc58:	20801626 	beq	r4,r2,80dcb4 <alt_up_pixel_buffer_dma_draw+0xe0>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80dc5c:	00800084 	movi	r2,2
  80dc60:	20800f26 	beq	r4,r2,80dca0 <alt_up_pixel_buffer_dma_draw+0xcc>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80dc64:	90800c17 	ldw	r2,48(r18)
  80dc68:	1885883a 	add	r2,r3,r2
  80dc6c:	14c00035 	stwio	r19,0(r2)
  80dc70:	0005883a 	mov	r2,zero
  80dc74:	003fe206 	br	80dc00 <alt_up_pixel_buffer_dma_draw+0x2c>
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80dc78:	91401417 	ldw	r5,80(r18)
  80dc7c:	94001217 	ldw	r16,72(r18)
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80dc80:	94401117 	ldw	r17,68(r18)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80dc84:	394a703a 	and	r5,r7,r5
  80dc88:	3420703a 	and	r16,r6,r16
  80dc8c:	0802b980 	call	802b98 <__mulsi3>
  80dc90:	8460983a 	sll	r16,r16,r17
  80dc94:	1444983a 	sll	r2,r2,r17
  80dc98:	8087883a 	add	r3,r16,r2
  80dc9c:	003fec06 	br	80dc50 <alt_up_pixel_buffer_dma_draw+0x7c>
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80dca0:	90800c17 	ldw	r2,48(r18)
  80dca4:	1885883a 	add	r2,r3,r2
  80dca8:	14c0002d 	sthio	r19,0(r2)
  80dcac:	0005883a 	mov	r2,zero
  80dcb0:	003fd306 	br	80dc00 <alt_up_pixel_buffer_dma_draw+0x2c>
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80dcb4:	90800c17 	ldw	r2,48(r18)
  80dcb8:	1885883a 	add	r2,r3,r2
  80dcbc:	14c00025 	stbio	r19,0(r2)
  80dcc0:	0005883a 	mov	r2,zero
  80dcc4:	003fce06 	br	80dc00 <alt_up_pixel_buffer_dma_draw+0x2c>

0080dcc8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80dcc8:	20c00a17 	ldw	r3,40(r4)
  80dccc:	18800337 	ldwio	r2,12(r3)
}
  80dcd0:	1080004c 	andi	r2,r2,1
  80dcd4:	f800283a 	ret

0080dcd8 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80dcd8:	20c00a17 	ldw	r3,40(r4)
  80dcdc:	01800104 	movi	r6,4
  80dce0:	1987883a 	add	r3,r3,r6
  80dce4:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80dce8:	20800a17 	ldw	r2,40(r4)
  80dcec:	1185883a 	add	r2,r2,r6
  80dcf0:	10c00037 	ldwio	r3,0(r2)
	return 0;
}
  80dcf4:	0005883a 	mov	r2,zero

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80dcf8:	20c00c15 	stw	r3,48(r4)
	return 0;
}
  80dcfc:	f800283a 	ret

0080dd00 <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80dd00:	01402074 	movhi	r5,129
  80dd04:	2957c504 	addi	r5,r5,24340
  80dd08:	08132541 	jmpi	813254 <alt_find_dev>

0080dd0c <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80dd0c:	defff404 	addi	sp,sp,-48
  80dd10:	da800c17 	ldw	r10,48(sp)
  80dd14:	dfc00b15 	stw	ra,44(sp)
  80dd18:	df000a15 	stw	fp,40(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80dd1c:	5187c83a 	sub	r3,r10,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80dd20:	ddc00915 	stw	r23,36(sp)
  80dd24:	dd800815 	stw	r22,32(sp)
  80dd28:	dd400715 	stw	r21,28(sp)
  80dd2c:	dd000615 	stw	r20,24(sp)
  80dd30:	dcc00515 	stw	r19,20(sp)
  80dd34:	dc800415 	stw	r18,16(sp)
  80dd38:	dc400315 	stw	r17,12(sp)
  80dd3c:	dc000215 	stw	r16,8(sp)
  80dd40:	3013883a 	mov	r9,r6
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80dd44:	1800a916 	blt	r3,zero,80dfec <alt_up_pixel_buffer_dma_draw_line+0x2e0>
  80dd48:	3945c83a 	sub	r2,r7,r5
  80dd4c:	1000a516 	blt	r2,zero,80dfe4 <alt_up_pixel_buffer_dma_draw_line+0x2d8>
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80dd50:	22000e17 	ldw	r8,56(r4)
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80dd54:	10c4803a 	cmplt	r2,r2,r3
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80dd58:	00c00044 	movi	r3,1
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80dd5c:	100d883a 	mov	r6,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80dd60:	40c09c26 	beq	r8,r3,80dfd4 <alt_up_pixel_buffer_dma_draw_line+0x2c8>
  80dd64:	42000098 	cmpnei	r8,r8,2
  80dd68:	40d1883a 	add	r8,r8,r3
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80dd6c:	20800d17 	ldw	r2,52(r4)
  80dd70:	10006e1e 	bne	r2,zero,80df2c <alt_up_pixel_buffer_dma_draw_line+0x220>
  80dd74:	20801317 	ldw	r2,76(r4)
  80dd78:	00c00044 	movi	r3,1
  80dd7c:	1205c83a 	sub	r2,r2,r8
  80dd80:	18ae983a 	sll	r23,r3,r2

	if (backbuffer == 1)
  80dd84:	d8c00e17 	ldw	r3,56(sp)
  80dd88:	00800044 	movi	r2,1
  80dd8c:	18806b26 	beq	r3,r2,80df3c <alt_up_pixel_buffer_dma_draw_line+0x230>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80dd90:	34003fcc 	andi	r16,r6,255
  80dd94:	8400201c 	xori	r16,r16,128
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;
  80dd98:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
  80dd9c:	843fe004 	addi	r16,r16,-128
  80dda0:	30006b26 	beq	r6,zero,80df50 <alt_up_pixel_buffer_dma_draw_line+0x244>
  80dda4:	480d883a 	mov	r6,r9
  80dda8:	2825883a 	mov	r18,r5
  80ddac:	5027883a 	mov	r19,r10
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
  80ddb0:	9980060e 	bge	r19,r6,80ddcc <alt_up_pixel_buffer_dma_draw_line+0xc0>
  80ddb4:	9805883a 	mov	r2,r19
  80ddb8:	3807883a 	mov	r3,r7
  80ddbc:	3027883a 	mov	r19,r6
  80ddc0:	900f883a 	mov	r7,r18
  80ddc4:	100d883a 	mov	r6,r2
  80ddc8:	1825883a 	mov	r18,r3
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  80ddcc:	3ca9c83a 	sub	r20,r7,r18
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  80ddd0:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
  80ddd4:	a0008116 	blt	r20,zero,80dfdc <alt_up_pixel_buffer_dma_draw_line+0x2d0>
	error = -(deltax / 2); 
  80ddd8:	a804d7fa 	srli	r2,r21,31
  80dddc:	1545883a 	add	r2,r2,r21
  80dde0:	1005d07a 	srai	r2,r2,1
  80dde4:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
  80dde8:	91c03216 	blt	r18,r7,80deb4 <alt_up_pixel_buffer_dma_draw_line+0x1a8>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80ddec:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  80ddf0:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80ddf4:	80803226 	beq	r16,r2,80dec0 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80ddf8:	99801316 	blt	r19,r6,80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80ddfc:	3021883a 	mov	r16,r6
  80de00:	40001e26 	beq	r8,zero,80de7c <alt_up_pixel_buffer_dma_draw_line+0x170>
  80de04:	00800044 	movi	r2,1
  80de08:	40805726 	beq	r8,r2,80df68 <alt_up_pixel_buffer_dma_draw_line+0x25c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80de0c:	b809883a 	mov	r4,r23
  80de10:	900b883a 	mov	r5,r18
  80de14:	0802b980 	call	802b98 <__mulsi3>
  80de18:	1405883a 	add	r2,r2,r16
  80de1c:	1085883a 	add	r2,r2,r2
  80de20:	d8c00d17 	ldw	r3,52(sp)
  80de24:	1085883a 	add	r2,r2,r2
  80de28:	1585883a 	add	r2,r2,r22
  80de2c:	10c00035 	stwio	r3,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80de30:	8d23883a 	add	r17,r17,r20
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80de34:	84000044 	addi	r16,r16,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80de38:	0440020e 	bge	zero,r17,80de44 <alt_up_pixel_buffer_dma_draw_line+0x138>
				y = y + ystep;
  80de3c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
  80de40:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80de44:	9c3ff10e 	bge	r19,r16,80de0c <alt_up_pixel_buffer_dma_draw_line+0x100>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80de48:	dfc00b17 	ldw	ra,44(sp)
  80de4c:	df000a17 	ldw	fp,40(sp)
  80de50:	ddc00917 	ldw	r23,36(sp)
  80de54:	dd800817 	ldw	r22,32(sp)
  80de58:	dd400717 	ldw	r21,28(sp)
  80de5c:	dd000617 	ldw	r20,24(sp)
  80de60:	dcc00517 	ldw	r19,20(sp)
  80de64:	dc800417 	ldw	r18,16(sp)
  80de68:	dc400317 	ldw	r17,12(sp)
  80de6c:	dc000217 	ldw	r16,8(sp)
  80de70:	dec00c04 	addi	sp,sp,48
  80de74:	f800283a 	ret
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80de78:	9c3ff316 	blt	r19,r16,80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80de7c:	b809883a 	mov	r4,r23
  80de80:	900b883a 	mov	r5,r18
  80de84:	0802b980 	call	802b98 <__mulsi3>
  80de88:	d8c00d17 	ldw	r3,52(sp)
  80de8c:	1405883a 	add	r2,r2,r16
  80de90:	1585883a 	add	r2,r2,r22
  80de94:	10c00025 	stbio	r3,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80de98:	8d23883a 	add	r17,r17,r20
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80de9c:	84000044 	addi	r16,r16,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dea0:	047ff50e 	bge	zero,r17,80de78 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
  80dea4:	9725883a 	add	r18,r18,fp
				error = error - deltax;
  80dea8:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80deac:	9c3ff30e 	bge	r19,r16,80de7c <alt_up_pixel_buffer_dma_draw_line+0x170>
  80deb0:	003fe506 	br	80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80deb4:	00800044 	movi	r2,1
	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
  80deb8:	07000044 	movi	fp,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80debc:	80bfce1e 	bne	r16,r2,80ddf8 <alt_up_pixel_buffer_dma_draw_line+0xec>
	{
		for (x=x_0; x <= x_1; x++) {
  80dec0:	99bfe116 	blt	r19,r6,80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80dec4:	300b883a 	mov	r5,r6
  80dec8:	b809883a 	mov	r4,r23
  80decc:	d9800015 	stw	r6,0(sp)
  80ded0:	da000115 	stw	r8,4(sp)
  80ded4:	0802b980 	call	802b98 <__mulsi3>
  80ded8:	d9800017 	ldw	r6,0(sp)
  80dedc:	da000117 	ldw	r8,4(sp)
  80dee0:	1009883a 	mov	r4,r2
  80dee4:	300b883a 	mov	r5,r6
  80dee8:	9007883a 	mov	r3,r18
  80deec:	40002d26 	beq	r8,zero,80dfa4 <alt_up_pixel_buffer_dma_draw_line+0x298>
  80def0:	44004026 	beq	r8,r16,80dff4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80def4:	20c5883a 	add	r2,r4,r3
  80def8:	1085883a 	add	r2,r2,r2
  80defc:	d9800d17 	ldw	r6,52(sp)
  80df00:	1085883a 	add	r2,r2,r2
  80df04:	1585883a 	add	r2,r2,r22
  80df08:	11800035 	stwio	r6,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80df0c:	8d23883a 	add	r17,r17,r20

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80df10:	29400044 	addi	r5,r5,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80df14:	0440020e 	bge	zero,r17,80df20 <alt_up_pixel_buffer_dma_draw_line+0x214>
				y = y + ystep;
  80df18:	1f07883a 	add	r3,r3,fp
				error = error - deltax;
  80df1c:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80df20:	25c9883a 	add	r4,r4,r23
  80df24:	997ff30e 	bge	r19,r5,80def4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
  80df28:	003fc706 	br	80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
  80df2c:	d8c00e17 	ldw	r3,56(sp)
  80df30:	00800044 	movi	r2,1
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80df34:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
  80df38:	18bf951e 	bne	r3,r2,80dd90 <alt_up_pixel_buffer_dma_draw_line+0x84>
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80df3c:	34003fcc 	andi	r16,r6,255
  80df40:	8400201c 	xori	r16,r16,128
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;

	if (backbuffer == 1)
		buffer_start = pixel_buffer->back_buffer_start_address;
  80df44:	25800c17 	ldw	r22,48(r4)
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
  80df48:	843fe004 	addi	r16,r16,-128
  80df4c:	303f951e 	bne	r6,zero,80dda4 <alt_up_pixel_buffer_dma_draw_line+0x98>
  80df50:	3827883a 	mov	r19,r7
  80df54:	280d883a 	mov	r6,r5
  80df58:	4825883a 	mov	r18,r9
  80df5c:	500f883a 	mov	r7,r10
  80df60:	003f9306 	br	80ddb0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80df64:	9c3fb816 	blt	r19,r16,80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80df68:	b809883a 	mov	r4,r23
  80df6c:	900b883a 	mov	r5,r18
  80df70:	0802b980 	call	802b98 <__mulsi3>
  80df74:	1405883a 	add	r2,r2,r16
  80df78:	d9800d17 	ldw	r6,52(sp)
  80df7c:	1085883a 	add	r2,r2,r2
  80df80:	1585883a 	add	r2,r2,r22
  80df84:	1180002d 	sthio	r6,0(r2)
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
  80df88:	8d23883a 	add	r17,r17,r20
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80df8c:	84000044 	addi	r16,r16,1
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80df90:	047ff40e 	bge	zero,r17,80df64 <alt_up_pixel_buffer_dma_draw_line+0x258>
				y = y + ystep;
  80df94:	9725883a 	add	r18,r18,fp
				error = error - deltax;
  80df98:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80df9c:	9c3ff20e 	bge	r19,r16,80df68 <alt_up_pixel_buffer_dma_draw_line+0x25c>
  80dfa0:	003fa906 	br	80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80dfa4:	d9800d17 	ldw	r6,52(sp)
  80dfa8:	20c5883a 	add	r2,r4,r3
  80dfac:	1585883a 	add	r2,r2,r22
  80dfb0:	11800025 	stbio	r6,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80dfb4:	8d23883a 	add	r17,r17,r20

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dfb8:	29400044 	addi	r5,r5,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80dfbc:	0440020e 	bge	zero,r17,80dfc8 <alt_up_pixel_buffer_dma_draw_line+0x2bc>
				y = y + ystep;
  80dfc0:	1f07883a 	add	r3,r3,fp
				error = error - deltax;
  80dfc4:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80dfc8:	25c9883a 	add	r4,r4,r23
  80dfcc:	997ff50e 	bge	r19,r5,80dfa4 <alt_up_pixel_buffer_dma_draw_line+0x298>
  80dfd0:	003f9d06 	br	80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80dfd4:	0011883a 	mov	r8,zero
  80dfd8:	003f6406 	br	80dd6c <alt_up_pixel_buffer_dma_draw_line+0x60>
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
  80dfdc:	0529c83a 	sub	r20,zero,r20
  80dfe0:	003f7d06 	br	80ddd8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
{
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80dfe4:	0085c83a 	sub	r2,zero,r2
  80dfe8:	003f5906 	br	80dd50 <alt_up_pixel_buffer_dma_draw_line+0x44>
  80dfec:	00c7c83a 	sub	r3,zero,r3
  80dff0:	003f5506 	br	80dd48 <alt_up_pixel_buffer_dma_draw_line+0x3c>
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80dff4:	20c5883a 	add	r2,r4,r3
  80dff8:	d9800d17 	ldw	r6,52(sp)
  80dffc:	1085883a 	add	r2,r2,r2
  80e000:	1585883a 	add	r2,r2,r22
  80e004:	1180002d 	sthio	r6,0(r2)
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
  80e008:	8d23883a 	add	r17,r17,r20

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80e00c:	29400044 	addi	r5,r5,1
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
			error = error + deltay;
			if (error > 0) {
  80e010:	0440020e 	bge	zero,r17,80e01c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
  80e014:	1f07883a 	add	r3,r3,fp
				error = error - deltax;
  80e018:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80e01c:	25c9883a 	add	r4,r4,r23
  80e020:	997ff40e 	bge	r19,r5,80dff4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
  80e024:	003f8806 	br	80de48 <alt_up_pixel_buffer_dma_draw_line+0x13c>

0080e028 <match_file_record_to_name_ext>:
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e028:	21c00003 	ldbu	r7,0(r4)
  80e02c:	00c00644 	movi	r3,25
  80e030:	38bfe7c4 	addi	r2,r7,-97
  80e034:	10803fcc 	andi	r2,r2,255
  80e038:	1880c12e 	bgeu	r3,r2,80e340 <match_file_record_to_name_ext+0x318>
  80e03c:	3a003fcc 	andi	r8,r7,255
  80e040:	4200201c 	xori	r8,r8,128
  80e044:	423fe004 	addi	r8,r8,-128
  80e048:	29c00003 	ldbu	r7,0(r5)
  80e04c:	00c00644 	movi	r3,25
  80e050:	38bfe7c4 	addi	r2,r7,-97
  80e054:	10803fcc 	andi	r2,r2,255
  80e058:	1880b42e 	bgeu	r3,r2,80e32c <match_file_record_to_name_ext+0x304>
  80e05c:	38803fcc 	andi	r2,r7,255
  80e060:	1080201c 	xori	r2,r2,128
  80e064:	10bfe004 	addi	r2,r2,-128
  80e068:	40811e1e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e06c:	21c00043 	ldbu	r7,1(r4)
  80e070:	00c00644 	movi	r3,25
  80e074:	38bfe7c4 	addi	r2,r7,-97
  80e078:	10803fcc 	andi	r2,r2,255
  80e07c:	1880b52e 	bgeu	r3,r2,80e354 <match_file_record_to_name_ext+0x32c>
  80e080:	3a003fcc 	andi	r8,r7,255
  80e084:	29c00043 	ldbu	r7,1(r5)
  80e088:	4200201c 	xori	r8,r8,128
  80e08c:	00c00644 	movi	r3,25
  80e090:	38bfe7c4 	addi	r2,r7,-97
  80e094:	10803fcc 	andi	r2,r2,255
  80e098:	423fe004 	addi	r8,r8,-128
  80e09c:	1880b62e 	bgeu	r3,r2,80e378 <match_file_record_to_name_ext+0x350>
  80e0a0:	38803fcc 	andi	r2,r7,255
  80e0a4:	1080201c 	xori	r2,r2,128
  80e0a8:	10bfe004 	addi	r2,r2,-128
  80e0ac:	40810d1e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e0b0:	21c00083 	ldbu	r7,2(r4)
  80e0b4:	00c00644 	movi	r3,25
  80e0b8:	38bfe7c4 	addi	r2,r7,-97
  80e0bc:	10803fcc 	andi	r2,r2,255
  80e0c0:	1880cb2e 	bgeu	r3,r2,80e3f0 <match_file_record_to_name_ext+0x3c8>
  80e0c4:	3a003fcc 	andi	r8,r7,255
  80e0c8:	4200201c 	xori	r8,r8,128
  80e0cc:	423fe004 	addi	r8,r8,-128
  80e0d0:	29c00083 	ldbu	r7,2(r5)
  80e0d4:	00c00644 	movi	r3,25
  80e0d8:	38bfe7c4 	addi	r2,r7,-97
  80e0dc:	10803fcc 	andi	r2,r2,255
  80e0e0:	1880be2e 	bgeu	r3,r2,80e3dc <match_file_record_to_name_ext+0x3b4>
  80e0e4:	38803fcc 	andi	r2,r7,255
  80e0e8:	1080201c 	xori	r2,r2,128
  80e0ec:	10bfe004 	addi	r2,r2,-128
  80e0f0:	4080fc1e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e0f4:	21c000c3 	ldbu	r7,3(r4)
  80e0f8:	00c00644 	movi	r3,25
  80e0fc:	38bfe7c4 	addi	r2,r7,-97
  80e100:	10803fcc 	andi	r2,r2,255
  80e104:	1880cc2e 	bgeu	r3,r2,80e438 <match_file_record_to_name_ext+0x410>
  80e108:	3a003fcc 	andi	r8,r7,255
  80e10c:	4200201c 	xori	r8,r8,128
  80e110:	423fe004 	addi	r8,r8,-128
  80e114:	29c000c3 	ldbu	r7,3(r5)
  80e118:	00c00644 	movi	r3,25
  80e11c:	38bfe7c4 	addi	r2,r7,-97
  80e120:	10803fcc 	andi	r2,r2,255
  80e124:	1880bf2e 	bgeu	r3,r2,80e424 <match_file_record_to_name_ext+0x3fc>
  80e128:	38803fcc 	andi	r2,r7,255
  80e12c:	1080201c 	xori	r2,r2,128
  80e130:	10bfe004 	addi	r2,r2,-128
  80e134:	4080eb1e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e138:	21c00103 	ldbu	r7,4(r4)
  80e13c:	00c00644 	movi	r3,25
  80e140:	38bfe7c4 	addi	r2,r7,-97
  80e144:	10803fcc 	andi	r2,r2,255
  80e148:	1880c52e 	bgeu	r3,r2,80e460 <match_file_record_to_name_ext+0x438>
  80e14c:	3a003fcc 	andi	r8,r7,255
  80e150:	4200201c 	xori	r8,r8,128
  80e154:	423fe004 	addi	r8,r8,-128
  80e158:	29c00103 	ldbu	r7,4(r5)
  80e15c:	00c00644 	movi	r3,25
  80e160:	38bfe7c4 	addi	r2,r7,-97
  80e164:	10803fcc 	andi	r2,r2,255
  80e168:	1880b82e 	bgeu	r3,r2,80e44c <match_file_record_to_name_ext+0x424>
  80e16c:	38803fcc 	andi	r2,r7,255
  80e170:	1080201c 	xori	r2,r2,128
  80e174:	10bfe004 	addi	r2,r2,-128
  80e178:	4080da1e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e17c:	21c00143 	ldbu	r7,5(r4)
  80e180:	00c00644 	movi	r3,25
  80e184:	38bfe7c4 	addi	r2,r7,-97
  80e188:	10803fcc 	andi	r2,r2,255
  80e18c:	1880be2e 	bgeu	r3,r2,80e488 <match_file_record_to_name_ext+0x460>
  80e190:	3a003fcc 	andi	r8,r7,255
  80e194:	4200201c 	xori	r8,r8,128
  80e198:	423fe004 	addi	r8,r8,-128
  80e19c:	29c00143 	ldbu	r7,5(r5)
  80e1a0:	00c00644 	movi	r3,25
  80e1a4:	38bfe7c4 	addi	r2,r7,-97
  80e1a8:	10803fcc 	andi	r2,r2,255
  80e1ac:	1880b12e 	bgeu	r3,r2,80e474 <match_file_record_to_name_ext+0x44c>
  80e1b0:	38803fcc 	andi	r2,r7,255
  80e1b4:	1080201c 	xori	r2,r2,128
  80e1b8:	10bfe004 	addi	r2,r2,-128
  80e1bc:	4080c91e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e1c0:	21c00183 	ldbu	r7,6(r4)
  80e1c4:	00c00644 	movi	r3,25
  80e1c8:	38bfe7c4 	addi	r2,r7,-97
  80e1cc:	10803fcc 	andi	r2,r2,255
  80e1d0:	1880b72e 	bgeu	r3,r2,80e4b0 <match_file_record_to_name_ext+0x488>
  80e1d4:	3a003fcc 	andi	r8,r7,255
  80e1d8:	4200201c 	xori	r8,r8,128
  80e1dc:	423fe004 	addi	r8,r8,-128
  80e1e0:	29c00183 	ldbu	r7,6(r5)
  80e1e4:	00c00644 	movi	r3,25
  80e1e8:	38bfe7c4 	addi	r2,r7,-97
  80e1ec:	10803fcc 	andi	r2,r2,255
  80e1f0:	1880aa2e 	bgeu	r3,r2,80e49c <match_file_record_to_name_ext+0x474>
  80e1f4:	38803fcc 	andi	r2,r7,255
  80e1f8:	1080201c 	xori	r2,r2,128
  80e1fc:	10bfe004 	addi	r2,r2,-128
  80e200:	4080b81e 	bne	r8,r2,80e4e4 <match_file_record_to_name_ext+0x4bc>
  80e204:	21c001c3 	ldbu	r7,7(r4)
  80e208:	00c00644 	movi	r3,25
  80e20c:	38bfe7c4 	addi	r2,r7,-97
  80e210:	10803fcc 	andi	r2,r2,255
  80e214:	1880af36 	bltu	r3,r2,80e4d4 <match_file_record_to_name_ext+0x4ac>
  80e218:	38bff804 	addi	r2,r7,-32
  80e21c:	11c03fcc 	andi	r7,r2,255
  80e220:	39c0201c 	xori	r7,r7,128
  80e224:	39ffe004 	addi	r7,r7,-128
  80e228:	294001c3 	ldbu	r5,7(r5)
  80e22c:	00c00644 	movi	r3,25
  80e230:	28bfe7c4 	addi	r2,r5,-97
  80e234:	10803fcc 	andi	r2,r2,255
  80e238:	1880a236 	bltu	r3,r2,80e4c4 <match_file_record_to_name_ext+0x49c>
  80e23c:	28bff804 	addi	r2,r5,-32
  80e240:	10803fcc 	andi	r2,r2,255
  80e244:	1080201c 	xori	r2,r2,128
  80e248:	10bfe004 	addi	r2,r2,-128
  80e24c:	3891003a 	cmpeq	r8,r7,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e250:	21400203 	ldbu	r5,8(r4)
  80e254:	00c00644 	movi	r3,25
  80e258:	28bfe7c4 	addi	r2,r5,-97
  80e25c:	10803fcc 	andi	r2,r2,255
  80e260:	18804f2e 	bgeu	r3,r2,80e3a0 <match_file_record_to_name_ext+0x378>
  80e264:	29c03fcc 	andi	r7,r5,255
  80e268:	39c0201c 	xori	r7,r7,128
  80e26c:	39ffe004 	addi	r7,r7,-128
  80e270:	31400003 	ldbu	r5,0(r6)
  80e274:	00c00644 	movi	r3,25
  80e278:	28bfe7c4 	addi	r2,r5,-97
  80e27c:	10803fcc 	andi	r2,r2,255
  80e280:	1880422e 	bgeu	r3,r2,80e38c <match_file_record_to_name_ext+0x364>
  80e284:	28803fcc 	andi	r2,r5,255
  80e288:	1080201c 	xori	r2,r2,128
  80e28c:	10bfe004 	addi	r2,r2,-128
  80e290:	3880961e 	bne	r7,r2,80e4ec <match_file_record_to_name_ext+0x4c4>
  80e294:	21400243 	ldbu	r5,9(r4)
  80e298:	00c00644 	movi	r3,25
  80e29c:	28bfe7c4 	addi	r2,r5,-97
  80e2a0:	10803fcc 	andi	r2,r2,255
  80e2a4:	1880482e 	bgeu	r3,r2,80e3c8 <match_file_record_to_name_ext+0x3a0>
  80e2a8:	29c03fcc 	andi	r7,r5,255
  80e2ac:	39c0201c 	xori	r7,r7,128
  80e2b0:	39ffe004 	addi	r7,r7,-128
  80e2b4:	31400043 	ldbu	r5,1(r6)
  80e2b8:	00c00644 	movi	r3,25
  80e2bc:	28bfe7c4 	addi	r2,r5,-97
  80e2c0:	10803fcc 	andi	r2,r2,255
  80e2c4:	18803b2e 	bgeu	r3,r2,80e3b4 <match_file_record_to_name_ext+0x38c>
  80e2c8:	28803fcc 	andi	r2,r5,255
  80e2cc:	1080201c 	xori	r2,r2,128
  80e2d0:	10bfe004 	addi	r2,r2,-128
  80e2d4:	3880851e 	bne	r7,r2,80e4ec <match_file_record_to_name_ext+0x4c4>
  80e2d8:	21000283 	ldbu	r4,10(r4)
  80e2dc:	00c00644 	movi	r3,25
  80e2e0:	20bfe7c4 	addi	r2,r4,-97
  80e2e4:	10803fcc 	andi	r2,r2,255
  80e2e8:	18804a36 	bltu	r3,r2,80e414 <match_file_record_to_name_ext+0x3ec>
  80e2ec:	20bff804 	addi	r2,r4,-32
  80e2f0:	11003fcc 	andi	r4,r2,255
  80e2f4:	2100201c 	xori	r4,r4,128
  80e2f8:	213fe004 	addi	r4,r4,-128
  80e2fc:	31800083 	ldbu	r6,2(r6)
  80e300:	00c00644 	movi	r3,25
  80e304:	30bfe7c4 	addi	r2,r6,-97
  80e308:	10803fcc 	andi	r2,r2,255
  80e30c:	18803d36 	bltu	r3,r2,80e404 <match_file_record_to_name_ext+0x3dc>
  80e310:	30bff804 	addi	r2,r6,-32
  80e314:	10803fcc 	andi	r2,r2,255
  80e318:	1080201c 	xori	r2,r2,128
  80e31c:	10bfe004 	addi	r2,r2,-128
  80e320:	2080721e 	bne	r4,r2,80e4ec <match_file_record_to_name_ext+0x4c4>
            match = false;
			break;
        }
    }
	return match;
}
  80e324:	4005883a 	mov	r2,r8
  80e328:	f800283a 	ret
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e32c:	38bff804 	addi	r2,r7,-32
  80e330:	10803fcc 	andi	r2,r2,255
  80e334:	1080201c 	xori	r2,r2,128
  80e338:	10bfe004 	addi	r2,r2,-128
  80e33c:	003f4a06 	br	80e068 <match_file_record_to_name_ext+0x40>
  80e340:	38bff804 	addi	r2,r7,-32
  80e344:	12003fcc 	andi	r8,r2,255
  80e348:	4200201c 	xori	r8,r8,128
  80e34c:	423fe004 	addi	r8,r8,-128
  80e350:	003f3d06 	br	80e048 <match_file_record_to_name_ext+0x20>
  80e354:	38bff804 	addi	r2,r7,-32
  80e358:	29c00043 	ldbu	r7,1(r5)
  80e35c:	12003fcc 	andi	r8,r2,255
  80e360:	4200201c 	xori	r8,r8,128
  80e364:	38bfe7c4 	addi	r2,r7,-97
  80e368:	10803fcc 	andi	r2,r2,255
  80e36c:	00c00644 	movi	r3,25
  80e370:	423fe004 	addi	r8,r8,-128
  80e374:	18bf4a36 	bltu	r3,r2,80e0a0 <match_file_record_to_name_ext+0x78>
  80e378:	38bff804 	addi	r2,r7,-32
  80e37c:	10803fcc 	andi	r2,r2,255
  80e380:	1080201c 	xori	r2,r2,128
  80e384:	10bfe004 	addi	r2,r2,-128
  80e388:	003f4806 	br	80e0ac <match_file_record_to_name_ext+0x84>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e38c:	28bff804 	addi	r2,r5,-32
  80e390:	10803fcc 	andi	r2,r2,255
  80e394:	1080201c 	xori	r2,r2,128
  80e398:	10bfe004 	addi	r2,r2,-128
  80e39c:	003fbc06 	br	80e290 <match_file_record_to_name_ext+0x268>
  80e3a0:	28bff804 	addi	r2,r5,-32
  80e3a4:	11c03fcc 	andi	r7,r2,255
  80e3a8:	39c0201c 	xori	r7,r7,128
  80e3ac:	39ffe004 	addi	r7,r7,-128
  80e3b0:	003faf06 	br	80e270 <match_file_record_to_name_ext+0x248>
  80e3b4:	28bff804 	addi	r2,r5,-32
  80e3b8:	10803fcc 	andi	r2,r2,255
  80e3bc:	1080201c 	xori	r2,r2,128
  80e3c0:	10bfe004 	addi	r2,r2,-128
  80e3c4:	003fc306 	br	80e2d4 <match_file_record_to_name_ext+0x2ac>
  80e3c8:	28bff804 	addi	r2,r5,-32
  80e3cc:	11c03fcc 	andi	r7,r2,255
  80e3d0:	39c0201c 	xori	r7,r7,128
  80e3d4:	39ffe004 	addi	r7,r7,-128
  80e3d8:	003fb606 	br	80e2b4 <match_file_record_to_name_ext+0x28c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e3dc:	38bff804 	addi	r2,r7,-32
  80e3e0:	10803fcc 	andi	r2,r2,255
  80e3e4:	1080201c 	xori	r2,r2,128
  80e3e8:	10bfe004 	addi	r2,r2,-128
  80e3ec:	003f4006 	br	80e0f0 <match_file_record_to_name_ext+0xc8>
  80e3f0:	38bff804 	addi	r2,r7,-32
  80e3f4:	12003fcc 	andi	r8,r2,255
  80e3f8:	4200201c 	xori	r8,r8,128
  80e3fc:	423fe004 	addi	r8,r8,-128
  80e400:	003f3306 	br	80e0d0 <match_file_record_to_name_ext+0xa8>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e404:	30803fcc 	andi	r2,r6,255
  80e408:	1080201c 	xori	r2,r2,128
  80e40c:	10bfe004 	addi	r2,r2,-128
  80e410:	003fc306 	br	80e320 <match_file_record_to_name_ext+0x2f8>
  80e414:	21003fcc 	andi	r4,r4,255
  80e418:	2100201c 	xori	r4,r4,128
  80e41c:	213fe004 	addi	r4,r4,-128
  80e420:	003fb606 	br	80e2fc <match_file_record_to_name_ext+0x2d4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80e424:	38bff804 	addi	r2,r7,-32
  80e428:	10803fcc 	andi	r2,r2,255
  80e42c:	1080201c 	xori	r2,r2,128
  80e430:	10bfe004 	addi	r2,r2,-128
  80e434:	003f3f06 	br	80e134 <match_file_record_to_name_ext+0x10c>
  80e438:	38bff804 	addi	r2,r7,-32
  80e43c:	12003fcc 	andi	r8,r2,255
  80e440:	4200201c 	xori	r8,r8,128
  80e444:	423fe004 	addi	r8,r8,-128
  80e448:	003f3206 	br	80e114 <match_file_record_to_name_ext+0xec>
  80e44c:	38bff804 	addi	r2,r7,-32
  80e450:	10803fcc 	andi	r2,r2,255
  80e454:	1080201c 	xori	r2,r2,128
  80e458:	10bfe004 	addi	r2,r2,-128
  80e45c:	003f4606 	br	80e178 <match_file_record_to_name_ext+0x150>
  80e460:	38bff804 	addi	r2,r7,-32
  80e464:	12003fcc 	andi	r8,r2,255
  80e468:	4200201c 	xori	r8,r8,128
  80e46c:	423fe004 	addi	r8,r8,-128
  80e470:	003f3906 	br	80e158 <match_file_record_to_name_ext+0x130>
  80e474:	38bff804 	addi	r2,r7,-32
  80e478:	10803fcc 	andi	r2,r2,255
  80e47c:	1080201c 	xori	r2,r2,128
  80e480:	10bfe004 	addi	r2,r2,-128
  80e484:	003f4d06 	br	80e1bc <match_file_record_to_name_ext+0x194>
  80e488:	38bff804 	addi	r2,r7,-32
  80e48c:	12003fcc 	andi	r8,r2,255
  80e490:	4200201c 	xori	r8,r8,128
  80e494:	423fe004 	addi	r8,r8,-128
  80e498:	003f4006 	br	80e19c <match_file_record_to_name_ext+0x174>
  80e49c:	38bff804 	addi	r2,r7,-32
  80e4a0:	10803fcc 	andi	r2,r2,255
  80e4a4:	1080201c 	xori	r2,r2,128
  80e4a8:	10bfe004 	addi	r2,r2,-128
  80e4ac:	003f5406 	br	80e200 <match_file_record_to_name_ext+0x1d8>
  80e4b0:	38bff804 	addi	r2,r7,-32
  80e4b4:	12003fcc 	andi	r8,r2,255
  80e4b8:	4200201c 	xori	r8,r8,128
  80e4bc:	423fe004 	addi	r8,r8,-128
  80e4c0:	003f4706 	br	80e1e0 <match_file_record_to_name_ext+0x1b8>
  80e4c4:	28803fcc 	andi	r2,r5,255
  80e4c8:	1080201c 	xori	r2,r2,128
  80e4cc:	10bfe004 	addi	r2,r2,-128
  80e4d0:	003f5e06 	br	80e24c <match_file_record_to_name_ext+0x224>
  80e4d4:	39c03fcc 	andi	r7,r7,255
  80e4d8:	39c0201c 	xori	r7,r7,128
  80e4dc:	39ffe004 	addi	r7,r7,-128
  80e4e0:	003f5106 	br	80e228 <match_file_record_to_name_ext+0x200>
  80e4e4:	0011883a 	mov	r8,zero
  80e4e8:	003f5906 	br	80e250 <match_file_record_to_name_ext+0x228>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80e4ec:	0011883a 	mov	r8,zero
            match = false;
			break;
        }
    }
	return match;
}
  80e4f0:	4005883a 	mov	r2,r8
  80e4f4:	f800283a 	ret

0080e4f8 <convert_filename_to_name_extension>:
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e4f8:	21c00003 	ldbu	r7,0(r4)
  80e4fc:	00800b84 	movi	r2,46
  80e500:	38c03fcc 	andi	r3,r7,255
  80e504:	18c0201c 	xori	r3,r3,128
  80e508:	18ffe004 	addi	r3,r3,-128
  80e50c:	1880ae26 	beq	r3,r2,80e7c8 <convert_filename_to_name_extension+0x2d0>
        {
            name[counter] = filename[local];
  80e510:	29c00005 	stb	r7,0(r5)
            if (filename[local] != 0) local++;
  80e514:	20800007 	ldb	r2,0(r4)
  80e518:	10006226 	beq	r2,zero,80e6a4 <convert_filename_to_name_extension+0x1ac>
  80e51c:	02400044 	movi	r9,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e520:	224f883a 	add	r7,r4,r9
  80e524:	3a000003 	ldbu	r8,0(r7)
  80e528:	00800b84 	movi	r2,46
  80e52c:	3815883a 	mov	r10,r7
  80e530:	40c03fcc 	andi	r3,r8,255
  80e534:	18c0201c 	xori	r3,r3,128
  80e538:	18ffe004 	addi	r3,r3,-128
  80e53c:	18809726 	beq	r3,r2,80e79c <convert_filename_to_name_extension+0x2a4>
        {
            name[counter] = filename[local];
  80e540:	2a000045 	stb	r8,1(r5)
            if (filename[local] != 0) local++;
  80e544:	50800007 	ldb	r2,0(r10)
  80e548:	10005c26 	beq	r2,zero,80e6bc <convert_filename_to_name_extension+0x1c4>
  80e54c:	4a400044 	addi	r9,r9,1
  80e550:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e554:	3a000003 	ldbu	r8,0(r7)
  80e558:	00800b84 	movi	r2,46
  80e55c:	40c03fcc 	andi	r3,r8,255
  80e560:	18c0201c 	xori	r3,r3,128
  80e564:	18ffe004 	addi	r3,r3,-128
  80e568:	18809426 	beq	r3,r2,80e7bc <convert_filename_to_name_extension+0x2c4>
        {
            name[counter] = filename[local];
  80e56c:	2a000085 	stb	r8,2(r5)
            if (filename[local] != 0) local++;
  80e570:	38800007 	ldb	r2,0(r7)
  80e574:	10005626 	beq	r2,zero,80e6d0 <convert_filename_to_name_extension+0x1d8>
  80e578:	4a400044 	addi	r9,r9,1
  80e57c:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e580:	3a000003 	ldbu	r8,0(r7)
  80e584:	00800b84 	movi	r2,46
  80e588:	40c03fcc 	andi	r3,r8,255
  80e58c:	18c0201c 	xori	r3,r3,128
  80e590:	18ffe004 	addi	r3,r3,-128
  80e594:	18807e26 	beq	r3,r2,80e790 <convert_filename_to_name_extension+0x298>
        {
            name[counter] = filename[local];
  80e598:	2a0000c5 	stb	r8,3(r5)
            if (filename[local] != 0) local++;
  80e59c:	38800007 	ldb	r2,0(r7)
  80e5a0:	10004f26 	beq	r2,zero,80e6e0 <convert_filename_to_name_extension+0x1e8>
  80e5a4:	4a400044 	addi	r9,r9,1
  80e5a8:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e5ac:	3a000003 	ldbu	r8,0(r7)
  80e5b0:	00800b84 	movi	r2,46
  80e5b4:	40c03fcc 	andi	r3,r8,255
  80e5b8:	18c0201c 	xori	r3,r3,128
  80e5bc:	18ffe004 	addi	r3,r3,-128
  80e5c0:	18807026 	beq	r3,r2,80e784 <convert_filename_to_name_extension+0x28c>
        {
            name[counter] = filename[local];
  80e5c4:	2a000105 	stb	r8,4(r5)
            if (filename[local] != 0) local++;
  80e5c8:	38800007 	ldb	r2,0(r7)
  80e5cc:	10004826 	beq	r2,zero,80e6f0 <convert_filename_to_name_extension+0x1f8>
  80e5d0:	4a400044 	addi	r9,r9,1
  80e5d4:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e5d8:	3a000003 	ldbu	r8,0(r7)
  80e5dc:	00800b84 	movi	r2,46
  80e5e0:	40c03fcc 	andi	r3,r8,255
  80e5e4:	18c0201c 	xori	r3,r3,128
  80e5e8:	18ffe004 	addi	r3,r3,-128
  80e5ec:	18805226 	beq	r3,r2,80e738 <convert_filename_to_name_extension+0x240>
        {
            name[counter] = filename[local];
  80e5f0:	2a000145 	stb	r8,5(r5)
            if (filename[local] != 0) local++;
  80e5f4:	38800007 	ldb	r2,0(r7)
  80e5f8:	10004126 	beq	r2,zero,80e700 <convert_filename_to_name_extension+0x208>
  80e5fc:	4a400044 	addi	r9,r9,1
  80e600:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e604:	3a000003 	ldbu	r8,0(r7)
  80e608:	00800b84 	movi	r2,46
  80e60c:	40c03fcc 	andi	r3,r8,255
  80e610:	18c0201c 	xori	r3,r3,128
  80e614:	18ffe004 	addi	r3,r3,-128
  80e618:	18804f26 	beq	r3,r2,80e758 <convert_filename_to_name_extension+0x260>
        {
            name[counter] = filename[local];
  80e61c:	2a000185 	stb	r8,6(r5)
            if (filename[local] != 0) local++;
  80e620:	38800007 	ldb	r2,0(r7)
  80e624:	10003a26 	beq	r2,zero,80e710 <convert_filename_to_name_extension+0x218>
  80e628:	4a400044 	addi	r9,r9,1
  80e62c:	224f883a 	add	r7,r4,r9
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e630:	3a000003 	ldbu	r8,0(r7)
  80e634:	00800b84 	movi	r2,46
  80e638:	40c03fcc 	andi	r3,r8,255
  80e63c:	18c0201c 	xori	r3,r3,128
  80e640:	18ffe004 	addi	r3,r3,-128
  80e644:	18804c26 	beq	r3,r2,80e778 <convert_filename_to_name_extension+0x280>
        {
            name[counter] = filename[local];
  80e648:	2a0001c5 	stb	r8,7(r5)
            if (filename[local] != 0) local++;
  80e64c:	38800007 	ldb	r2,0(r7)
  80e650:	10000726 	beq	r2,zero,80e670 <convert_filename_to_name_extension+0x178>
  80e654:	4a400044 	addi	r9,r9,1
  80e658:	490f883a 	add	r7,r9,r4
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  80e65c:	38c00007 	ldb	r3,0(r7)
  80e660:	00800b84 	movi	r2,46
  80e664:	1880021e 	bne	r3,r2,80e670 <convert_filename_to_name_extension+0x178>
  80e668:	4a400044 	addi	r9,r9,1
  80e66c:	224f883a 	add	r7,r4,r9
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e670:	38800003 	ldbu	r2,0(r7)
  80e674:	10002c1e 	bne	r2,zero,80e728 <convert_filename_to_name_extension+0x230>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e678:	00800804 	movi	r2,32
  80e67c:	30800005 	stb	r2,0(r6)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e680:	38800003 	ldbu	r2,0(r7)
  80e684:	1000241e 	bne	r2,zero,80e718 <convert_filename_to_name_extension+0x220>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e688:	00800804 	movi	r2,32
  80e68c:	30800045 	stb	r2,1(r6)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  80e690:	38800003 	ldbu	r2,0(r7)
  80e694:	1000011e 	bne	r2,zero,80e69c <convert_filename_to_name_extension+0x1a4>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  80e698:	00800804 	movi	r2,32
  80e69c:	30800085 	stb	r2,2(r6)
  80e6a0:	f800283a 	ret
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e6a4:	22000003 	ldbu	r8,0(r4)
  80e6a8:	2015883a 	mov	r10,r4
        {
            extension[counter] = ' ';
        }
    }

}
  80e6ac:	0013883a 	mov	r9,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
  80e6b0:	2a000045 	stb	r8,1(r5)
            if (filename[local] != 0) local++;
  80e6b4:	50800007 	ldb	r2,0(r10)
  80e6b8:	103fa41e 	bne	r2,zero,80e54c <convert_filename_to_name_extension+0x54>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e6bc:	224f883a 	add	r7,r4,r9
  80e6c0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e6c4:	2a000085 	stb	r8,2(r5)
            if (filename[local] != 0) local++;
  80e6c8:	38800007 	ldb	r2,0(r7)
  80e6cc:	103faa1e 	bne	r2,zero,80e578 <convert_filename_to_name_extension+0x80>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e6d0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e6d4:	2a0000c5 	stb	r8,3(r5)
            if (filename[local] != 0) local++;
  80e6d8:	38800007 	ldb	r2,0(r7)
  80e6dc:	103fb11e 	bne	r2,zero,80e5a4 <convert_filename_to_name_extension+0xac>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e6e0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e6e4:	2a000105 	stb	r8,4(r5)
            if (filename[local] != 0) local++;
  80e6e8:	38800007 	ldb	r2,0(r7)
  80e6ec:	103fb81e 	bne	r2,zero,80e5d0 <convert_filename_to_name_extension+0xd8>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e6f0:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e6f4:	2a000145 	stb	r8,5(r5)
            if (filename[local] != 0) local++;
  80e6f8:	38800007 	ldb	r2,0(r7)
  80e6fc:	103fbf1e 	bne	r2,zero,80e5fc <convert_filename_to_name_extension+0x104>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e700:	3a000003 	ldbu	r8,0(r7)
        {
            name[counter] = filename[local];
  80e704:	2a000185 	stb	r8,6(r5)
            if (filename[local] != 0) local++;
  80e708:	38800007 	ldb	r2,0(r7)
  80e70c:	103fc61e 	bne	r2,zero,80e628 <convert_filename_to_name_extension+0x130>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e710:	3a000003 	ldbu	r8,0(r7)
  80e714:	003fcc06 	br	80e648 <convert_filename_to_name_extension+0x150>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
  80e718:	4a400044 	addi	r9,r9,1
  80e71c:	224f883a 	add	r7,r4,r9
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  80e720:	30800045 	stb	r2,1(r6)
  80e724:	003fda06 	br	80e690 <convert_filename_to_name_extension+0x198>
            local++;
  80e728:	4a400044 	addi	r9,r9,1
  80e72c:	224f883a 	add	r7,r4,r9
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  80e730:	30800005 	stb	r2,0(r6)
  80e734:	003fd206 	br	80e680 <convert_filename_to_name_extension+0x188>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e738:	00800804 	movi	r2,32
  80e73c:	28800145 	stb	r2,5(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e740:	3a000003 	ldbu	r8,0(r7)
  80e744:	00800b84 	movi	r2,46
  80e748:	40c03fcc 	andi	r3,r8,255
  80e74c:	18c0201c 	xori	r3,r3,128
  80e750:	18ffe004 	addi	r3,r3,-128
  80e754:	18bfb11e 	bne	r3,r2,80e61c <convert_filename_to_name_extension+0x124>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e758:	00800804 	movi	r2,32
  80e75c:	28800185 	stb	r2,6(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e760:	3a000003 	ldbu	r8,0(r7)
  80e764:	00800b84 	movi	r2,46
  80e768:	40c03fcc 	andi	r3,r8,255
  80e76c:	18c0201c 	xori	r3,r3,128
  80e770:	18ffe004 	addi	r3,r3,-128
  80e774:	18bfb41e 	bne	r3,r2,80e648 <convert_filename_to_name_extension+0x150>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e778:	00800804 	movi	r2,32
  80e77c:	288001c5 	stb	r2,7(r5)
  80e780:	003fb606 	br	80e65c <convert_filename_to_name_extension+0x164>
  80e784:	00800804 	movi	r2,32
  80e788:	28800105 	stb	r2,4(r5)
  80e78c:	003f9206 	br	80e5d8 <convert_filename_to_name_extension+0xe0>
  80e790:	00800804 	movi	r2,32
  80e794:	288000c5 	stb	r2,3(r5)
  80e798:	003f8406 	br	80e5ac <convert_filename_to_name_extension+0xb4>
  80e79c:	00800804 	movi	r2,32
  80e7a0:	28800045 	stb	r2,1(r5)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  80e7a4:	3a000003 	ldbu	r8,0(r7)
  80e7a8:	00800b84 	movi	r2,46
  80e7ac:	40c03fcc 	andi	r3,r8,255
  80e7b0:	18c0201c 	xori	r3,r3,128
  80e7b4:	18ffe004 	addi	r3,r3,-128
  80e7b8:	18bf6c1e 	bne	r3,r2,80e56c <convert_filename_to_name_extension+0x74>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  80e7bc:	00800804 	movi	r2,32
  80e7c0:	28800085 	stb	r2,2(r5)
  80e7c4:	003f6e06 	br	80e580 <convert_filename_to_name_extension+0x88>
  80e7c8:	00800804 	movi	r2,32
  80e7cc:	0013883a 	mov	r9,zero
  80e7d0:	28800005 	stb	r2,0(r5)
  80e7d4:	003f5206 	br	80e520 <convert_filename_to_name_extension+0x28>

0080e7d8 <copy_file_record_name_to_string>:
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e7d8:	21800003 	ldbu	r6,0(r4)
  80e7dc:	00800804 	movi	r2,32
  80e7e0:	30c03fcc 	andi	r3,r6,255
  80e7e4:	18804826 	beq	r3,r2,80e908 <copy_file_record_name_to_string+0x130>
		{
			file_name[flength] = file_record->name[index];
  80e7e8:	29800005 	stb	r6,0(r5)
  80e7ec:	01800044 	movi	r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e7f0:	20c00043 	ldbu	r3,1(r4)
  80e7f4:	01c00804 	movi	r7,32
  80e7f8:	18803fcc 	andi	r2,r3,255
  80e7fc:	11c00326 	beq	r2,r7,80e80c <copy_file_record_name_to_string+0x34>
		{
			file_name[flength] = file_record->name[index];
  80e800:	2985883a 	add	r2,r5,r6
  80e804:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e808:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e80c:	20c00083 	ldbu	r3,2(r4)
  80e810:	18803fcc 	andi	r2,r3,255
  80e814:	11c00326 	beq	r2,r7,80e824 <copy_file_record_name_to_string+0x4c>
		{
			file_name[flength] = file_record->name[index];
  80e818:	2985883a 	add	r2,r5,r6
  80e81c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e820:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e824:	20c000c3 	ldbu	r3,3(r4)
  80e828:	18803fcc 	andi	r2,r3,255
  80e82c:	11c00326 	beq	r2,r7,80e83c <copy_file_record_name_to_string+0x64>
		{
			file_name[flength] = file_record->name[index];
  80e830:	2985883a 	add	r2,r5,r6
  80e834:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e838:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e83c:	20c00103 	ldbu	r3,4(r4)
  80e840:	18803fcc 	andi	r2,r3,255
  80e844:	11c00326 	beq	r2,r7,80e854 <copy_file_record_name_to_string+0x7c>
		{
			file_name[flength] = file_record->name[index];
  80e848:	2985883a 	add	r2,r5,r6
  80e84c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e850:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e854:	20c00143 	ldbu	r3,5(r4)
  80e858:	18803fcc 	andi	r2,r3,255
  80e85c:	11c00326 	beq	r2,r7,80e86c <copy_file_record_name_to_string+0x94>
		{
			file_name[flength] = file_record->name[index];
  80e860:	2985883a 	add	r2,r5,r6
  80e864:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e868:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e86c:	20c00183 	ldbu	r3,6(r4)
  80e870:	18803fcc 	andi	r2,r3,255
  80e874:	11c00326 	beq	r2,r7,80e884 <copy_file_record_name_to_string+0xac>
		{
			file_name[flength] = file_record->name[index];
  80e878:	2985883a 	add	r2,r5,r6
  80e87c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e880:	31800044 	addi	r6,r6,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e884:	20c001c3 	ldbu	r3,7(r4)
  80e888:	18803fcc 	andi	r2,r3,255
  80e88c:	11c00326 	beq	r2,r7,80e89c <copy_file_record_name_to_string+0xc4>
		{
			file_name[flength] = file_record->name[index];
  80e890:	2985883a 	add	r2,r5,r6
  80e894:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  80e898:	31800044 	addi	r6,r6,1
		}
	}
	if (file_record->extension[0] != ' ')
  80e89c:	20800203 	ldbu	r2,8(r4)
  80e8a0:	11c01626 	beq	r2,r7,80e8fc <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
  80e8a4:	2985883a 	add	r2,r5,r6
  80e8a8:	00c00b84 	movi	r3,46
  80e8ac:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e8b0:	20c00203 	ldbu	r3,8(r4)
		}
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
  80e8b4:	31800044 	addi	r6,r6,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e8b8:	18803fcc 	andi	r2,r3,255
  80e8bc:	11c00326 	beq	r2,r7,80e8cc <copy_file_record_name_to_string+0xf4>
			{
				file_name[flength] = file_record->extension[index];
  80e8c0:	2985883a 	add	r2,r5,r6
  80e8c4:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80e8c8:	31800044 	addi	r6,r6,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e8cc:	20c00243 	ldbu	r3,9(r4)
  80e8d0:	18803fcc 	andi	r2,r3,255
  80e8d4:	11c00326 	beq	r2,r7,80e8e4 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
  80e8d8:	2985883a 	add	r2,r5,r6
  80e8dc:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  80e8e0:	31800044 	addi	r6,r6,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  80e8e4:	21000283 	ldbu	r4,10(r4)
  80e8e8:	20803fcc 	andi	r2,r4,255
  80e8ec:	11c00326 	beq	r2,r7,80e8fc <copy_file_record_name_to_string+0x124>
			{
				file_name[flength] = file_record->extension[index];
  80e8f0:	2985883a 	add	r2,r5,r6
  80e8f4:	11000005 	stb	r4,0(r2)
				flength = flength + 1;
  80e8f8:	31800044 	addi	r6,r6,1
			}
		}
	}
	file_name[flength] = 0;
  80e8fc:	3145883a 	add	r2,r6,r5
  80e900:	10000005 	stb	zero,0(r2)
}
  80e904:	f800283a 	ret
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  80e908:	000d883a 	mov	r6,zero
  80e90c:	003fb806 	br	80e7f0 <copy_file_record_name_to_string+0x18>

0080e910 <alt_up_sd_card_set_attributes>:
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
  80e910:	20bfffcc 	andi	r2,r4,65535
  80e914:	10a0001c 	xori	r2,r2,32768
  80e918:	10a00004 	addi	r2,r2,-32768
  80e91c:	100491ba 	slli	r2,r2,6
  80e920:	00c02074 	movhi	r3,129
  80e924:	18df6304 	addi	r3,r3,32140

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e928:	213fffcc 	andi	r4,r4,65535
    {
        if (active_files[file_handle].in_use)
  80e92c:	10c7883a 	add	r3,r2,r3

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e930:	008004c4 	movi	r2,19
  80e934:	11000336 	bltu	r2,r4,80e944 <alt_up_sd_card_set_attributes+0x34>
    {
        if (active_files[file_handle].in_use)
  80e938:	18800f17 	ldw	r2,60(r3)
  80e93c:	10000126 	beq	r2,zero,80e944 <alt_up_sd_card_set_attributes+0x34>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  80e940:	194002c5 	stb	r5,11(r3)
  80e944:	f800283a 	ret

0080e948 <alt_up_sd_card_get_attributes>:
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
  80e948:	20bfffcc 	andi	r2,r4,65535
  80e94c:	10a0001c 	xori	r2,r2,32768
  80e950:	10a00004 	addi	r2,r2,-32768
  80e954:	100491ba 	slli	r2,r2,6
  80e958:	00c02074 	movhi	r3,129
  80e95c:	18df6304 	addi	r3,r3,32140
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e960:	213fffcc 	andi	r4,r4,65535
  80e964:	014004c4 	movi	r5,19
    {
        if (active_files[file_handle].in_use)
  80e968:	10c7883a 	add	r3,r2,r3
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e96c:	29000436 	bltu	r5,r4,80e980 <alt_up_sd_card_get_attributes+0x38>
    {
        if (active_files[file_handle].in_use)
  80e970:	18800f17 	ldw	r2,60(r3)
  80e974:	10000226 	beq	r2,zero,80e980 <alt_up_sd_card_get_attributes+0x38>
  80e978:	188002c3 	ldbu	r2,11(r3)
  80e97c:	f800283a 	ret
  80e980:	00bfffc4 	movi	r2,-1
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
		}
	}
	return result;
}
  80e984:	f800283a 	ret

0080e988 <alt_up_sd_card_is_Present>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e988:	d0a77d17 	ldw	r2,-25100(gp)
  80e98c:	10000426 	beq	r2,zero,80e9a0 <alt_up_sd_card_is_Present+0x18>
  80e990:	d0e77517 	ldw	r3,-25132(gp)
  80e994:	1880002b 	ldhuio	r2,0(r3)
  80e998:	1080008c 	andi	r2,r2,2
  80e99c:	1000131e 	bne	r2,zero,80e9ec <alt_up_sd_card_is_Present+0x64>
    {
        result = true;
    }
	else if (initialized == true)
  80e9a0:	d0e77317 	ldw	r3,-25140(gp)
  80e9a4:	00800044 	movi	r2,1
  80e9a8:	18800226 	beq	r3,r2,80e9b4 <alt_up_sd_card_is_Present+0x2c>

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e9ac:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
  80e9b0:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e9b4:	00802074 	movhi	r2,129
  80e9b8:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80e9bc:	00c02074 	movhi	r3,129
  80e9c0:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80e9c4:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80e9c8:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80e9cc:	d0277415 	stw	zero,-25136(gp)
  80e9d0:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80e9d4:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80e9d8:	183fff15 	stw	zero,-4(r3)
  80e9dc:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80e9e0:	18bffc1e 	bne	r3,r2,80e9d4 <alt_up_sd_card_is_Present+0x4c>
  80e9e4:	0005883a 	mov	r2,zero
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
  80e9e8:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80e9ec:	00800044 	movi	r2,1
  80e9f0:	f800283a 	ret

0080e9f4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80e9f4:	deffff04 	addi	sp,sp,-4
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80e9f8:	01402074 	movhi	r5,129
  80e9fc:	2957c504 	addi	r5,r5,24340
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80ea00:	dfc00015 	stw	ra,0(sp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80ea04:	08132540 	call	813254 <alt_find_dev>

	if (dev != NULL)
  80ea08:	10001226 	beq	r2,zero,80ea54 <alt_up_sd_card_open_dev+0x60>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80ea0c:	11000a17 	ldw	r4,40(r2)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
		search_data.valid = false;
  80ea10:	00c02074 	movhi	r3,129
  80ea14:	18df4904 	addi	r3,r3,32036
  80ea18:	18000415 	stw	zero,16(r3)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80ea1c:	21408d04 	addi	r5,r4,564
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80ea20:	20c08904 	addi	r3,r4,548
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80ea24:	21808404 	addi	r6,r4,528
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80ea28:	21c08c04 	addi	r7,r4,560
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80ea2c:	22008b04 	addi	r8,r4,556
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
  80ea30:	d0a77d15 	stw	r2,-25100(gp)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80ea34:	d1677515 	stw	r5,-25132(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80ea38:	d0e77615 	stw	r3,-25128(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80ea3c:	d1a77715 	stw	r6,-25124(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80ea40:	d1e77815 	stw	r7,-25120(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80ea44:	d2277915 	stw	r8,-25116(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  80ea48:	d1277a15 	stw	r4,-25112(gp)
		device_pointer = dev;
		initialized = false;
  80ea4c:	d0277315 	stw	zero,-25140(gp)
		is_sd_card_formated_as_FAT16 = false;
  80ea50:	d0277415 	stw	zero,-25136(gp)
		search_data.valid = false;
	}
	return dev;
}
  80ea54:	dfc00017 	ldw	ra,0(sp)
  80ea58:	dec00104 	addi	sp,sp,4
  80ea5c:	f800283a 	ret

0080ea60 <get_dir_divider_location>:
}


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  80ea60:	defffe04 	addi	sp,sp,-8
  80ea64:	dc000015 	stw	r16,0(sp)
  80ea68:	dfc00115 	stw	ra,4(sp)
  80ea6c:	2021883a 	mov	r16,r4
    int index = 0;
    int length = strlen(name);
  80ea70:	0803e080 	call	803e08 <strlen>
  80ea74:	1009883a 	mov	r4,r2
    
    for(index = 0; index < length; index++)
  80ea78:	0080160e 	bge	zero,r2,80ead4 <get_dir_divider_location+0x74>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80ea7c:	80800007 	ldb	r2,0(r16)
  80ea80:	01401704 	movi	r5,92
  80ea84:	11401126 	beq	r2,r5,80eacc <get_dir_divider_location+0x6c>
  80ea88:	00c00bc4 	movi	r3,47
  80ea8c:	10c00f26 	beq	r2,r3,80eacc <get_dir_divider_location+0x6c>
  80ea90:	280d883a 	mov	r6,r5
  80ea94:	0005883a 	mov	r2,zero
  80ea98:	180b883a 	mov	r5,r3
  80ea9c:	00000306 	br	80eaac <get_dir_divider_location+0x4c>
  80eaa0:	18c00007 	ldb	r3,0(r3)
  80eaa4:	19800526 	beq	r3,r6,80eabc <get_dir_divider_location+0x5c>
  80eaa8:	19400426 	beq	r3,r5,80eabc <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80eaac:	10800044 	addi	r2,r2,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80eab0:	8087883a 	add	r3,r16,r2
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80eab4:	20bffa1e 	bne	r4,r2,80eaa0 <get_dir_divider_location+0x40>
        {
            break;
        }
    }
    
    if (index == length)
  80eab8:	00bfffc4 	movi	r2,-1
    {
        index = -1;
    }
    
    return index;
}
  80eabc:	dfc00117 	ldw	ra,4(sp)
  80eac0:	dc000017 	ldw	r16,0(sp)
  80eac4:	dec00204 	addi	sp,sp,8
  80eac8:	f800283a 	ret
        {
            break;
        }
    }
    
    if (index == length)
  80eacc:	0005883a 	mov	r2,zero
  80ead0:	003ffa06 	br	80eabc <get_dir_divider_location+0x5c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  80ead4:	0005883a 	mov	r2,zero
        {
            break;
        }
    }
    
    if (index == length)
  80ead8:	203ff81e 	bne	r4,zero,80eabc <get_dir_divider_location+0x5c>
  80eadc:	003ff606 	br	80eab8 <get_dir_divider_location+0x58>

0080eae0 <check_file_name_for_FAT16_compliance>:
}


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  80eae0:	defffe04 	addi	sp,sp,-8
  80eae4:	dc000015 	stw	r16,0(sp)
  80eae8:	dfc00115 	stw	ra,4(sp)
  80eaec:	2021883a 	mov	r16,r4
    int length = strlen(file_name);
  80eaf0:	0803e080 	call	803e08 <strlen>
  80eaf4:	100f883a 	mov	r7,r2
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80eaf8:	00802e0e 	bge	zero,r2,80ebb4 <check_file_name_for_FAT16_compliance+0xd4>
    {
        if ((file_name[index] == ' ') ||
  80eafc:	80c00007 	ldb	r3,0(r16)
  80eb00:	00800804 	movi	r2,32
  80eb04:	18801826 	beq	r3,r2,80eb68 <check_file_name_for_FAT16_compliance+0x88>
  80eb08:	017fffc4 	movi	r5,-1
  80eb0c:	1017883a 	mov	r11,r2
  80eb10:	0009883a 	mov	r4,zero
  80eb14:	280d883a 	mov	r6,r5
  80eb18:	02001704 	movi	r8,92
  80eb1c:	02400bc4 	movi	r9,47
  80eb20:	02800244 	movi	r10,9
  80eb24:	03400b84 	movi	r13,46
  80eb28:	030000c4 	movi	r12,3
  80eb2c:	20bfffc4 	addi	r2,r4,-1
  80eb30:	11802b26 	beq	r2,r6,80ebe0 <check_file_name_for_FAT16_compliance+0x100>
  80eb34:	2145c83a 	sub	r2,r4,r5
  80eb38:	12801726 	beq	r2,r10,80eb98 <check_file_name_for_FAT16_compliance+0xb8>
  80eb3c:	29801826 	beq	r5,r6,80eba0 <check_file_name_for_FAT16_compliance+0xc0>
  80eb40:	6080170e 	bge	r12,r2,80eba0 <check_file_name_for_FAT16_compliance+0xc0>
  80eb44:	1a000126 	beq	r3,r8,80eb4c <check_file_name_for_FAT16_compliance+0x6c>
  80eb48:	1a40071e 	bne	r3,r9,80eb68 <check_file_name_for_FAT16_compliance+0x88>
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  80eb4c:	200d883a 	mov	r6,r4
  80eb50:	200b883a 	mov	r5,r4
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80eb54:	21000044 	addi	r4,r4,1
  80eb58:	39001626 	beq	r7,r4,80ebb4 <check_file_name_for_FAT16_compliance+0xd4>
    {
        if ((file_name[index] == ' ') ||
  80eb5c:	2405883a 	add	r2,r4,r16
  80eb60:	10c00007 	ldb	r3,0(r2)
  80eb64:	1afff11e 	bne	r3,r11,80eb2c <check_file_name_for_FAT16_compliance+0x4c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80eb68:	81c5883a 	add	r2,r16,r7
  80eb6c:	113fffc7 	ldb	r4,-1(r2)
  80eb70:	00c01704 	movi	r3,92
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80eb74:	000b883a 	mov	r5,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80eb78:	20c01326 	beq	r4,r3,80ebc8 <check_file_name_for_FAT16_compliance+0xe8>
  80eb7c:	00800bc4 	movi	r2,47
  80eb80:	20801126 	beq	r4,r2,80ebc8 <check_file_name_for_FAT16_compliance+0xe8>
    {
        result = false;
    }
    return result;
}
  80eb84:	2805883a 	mov	r2,r5
  80eb88:	dfc00117 	ldw	ra,4(sp)
  80eb8c:	dc000017 	ldw	r16,0(sp)
  80eb90:	dec00204 	addi	sp,sp,8
  80eb94:	f800283a 	ret
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  80eb98:	1b7ff31e 	bne	r3,r13,80eb68 <check_file_name_for_FAT16_compliance+0x88>
  80eb9c:	29bfe81e 	bne	r5,r6,80eb40 <check_file_name_for_FAT16_compliance+0x60>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  80eba0:	1a3fea26 	beq	r3,r8,80eb4c <check_file_name_for_FAT16_compliance+0x6c>
  80eba4:	1a7fe926 	beq	r3,r9,80eb4c <check_file_name_for_FAT16_compliance+0x6c>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  80eba8:	1b7fe926 	beq	r3,r13,80eb50 <check_file_name_for_FAT16_compliance+0x70>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80ebac:	21000044 	addi	r4,r4,1
  80ebb0:	393fea1e 	bne	r7,r4,80eb5c <check_file_name_for_FAT16_compliance+0x7c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80ebb4:	81c5883a 	add	r2,r16,r7
  80ebb8:	113fffc7 	ldb	r4,-1(r2)
  80ebbc:	00c01704 	movi	r3,92
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  80ebc0:	01400044 	movi	r5,1
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80ebc4:	20ffed1e 	bne	r4,r3,80eb7c <check_file_name_for_FAT16_compliance+0x9c>
  80ebc8:	000b883a 	mov	r5,zero
    {
        result = false;
    }
    return result;
}
  80ebcc:	2805883a 	mov	r2,r5
  80ebd0:	dfc00117 	ldw	ra,4(sp)
  80ebd4:	dc000017 	ldw	r16,0(sp)
  80ebd8:	dec00204 	addi	sp,sp,8
  80ebdc:	f800283a 	ret
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  80ebe0:	1a3fe126 	beq	r3,r8,80eb68 <check_file_name_for_FAT16_compliance+0x88>
  80ebe4:	1a7fd31e 	bne	r3,r9,80eb34 <check_file_name_for_FAT16_compliance+0x54>
  80ebe8:	003fdf06 	br	80eb68 <check_file_name_for_FAT16_compliance+0x88>

0080ebec <filename_to_upper_case>:
}
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  80ebec:	defffe04 	addi	sp,sp,-8
  80ebf0:	dc000015 	stw	r16,0(sp)
  80ebf4:	dfc00115 	stw	ra,4(sp)
  80ebf8:	2021883a 	mov	r16,r4
    int index;
    int length = strlen(file_name);
  80ebfc:	0803e080 	call	803e08 <strlen>
  80ec00:	100d883a 	mov	r6,r2
    
    for (index = 0; index < length; index++)
  80ec04:	00800c0e 	bge	zero,r2,80ec38 <filename_to_upper_case+0x4c>
  80ec08:	8009883a 	mov	r4,r16
  80ec0c:	000b883a 	mov	r5,zero
  80ec10:	01c00644 	movi	r7,25
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80ec14:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  80ec18:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80ec1c:	18bfe7c4 	addi	r2,r3,-97
  80ec20:	10803fcc 	andi	r2,r2,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80ec24:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80ec28:	38800136 	bltu	r7,r2,80ec30 <filename_to_upper_case+0x44>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80ec2c:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  80ec30:	21000044 	addi	r4,r4,1
  80ec34:	317ff71e 	bne	r6,r5,80ec14 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  80ec38:	dfc00117 	ldw	ra,4(sp)
  80ec3c:	dc000017 	ldw	r16,0(sp)
  80ec40:	dec00204 	addi	sp,sp,8
  80ec44:	f800283a 	ret

0080ec48 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ec48:	208007cc 	andi	r2,r4,31
}


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  80ec4c:	2013883a 	mov	r9,r4
  80ec50:	2815883a 	mov	r10,r5
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ec54:	1000751e 	bne	r2,zero,80ee2c <Write_File_Record_At_Offset+0x1e4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ec58:	d1277d17 	ldw	r4,-25100(gp)
  80ec5c:	20007026 	beq	r4,zero,80ee20 <Write_File_Record_At_Offset+0x1d8>
  80ec60:	d0e77517 	ldw	r3,-25132(gp)
  80ec64:	1880002b 	ldhuio	r2,0(r3)
  80ec68:	1080008c 	andi	r2,r2,2
  80ec6c:	10006c26 	beq	r2,zero,80ee20 <Write_File_Record_At_Offset+0x1d8>

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ec70:	d0a77417 	ldw	r2,-25136(gp)
  80ec74:	10006d26 	beq	r2,zero,80ee2c <Write_File_Record_At_Offset+0x1e4>
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ec78:	28800043 	ldbu	r2,1(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ec7c:	28c00003 	ldbu	r3,0(r5)
  80ec80:	21000a17 	ldw	r4,40(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ec84:	1004923a 	slli	r2,r2,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ec88:	4909883a 	add	r4,r9,r4
  80ec8c:	10c4b03a 	or	r2,r2,r3
  80ec90:	10bfffcc 	andi	r2,r2,65535
  80ec94:	10a0001c 	xori	r2,r2,32768
  80ec98:	10a00004 	addi	r2,r2,-32768
  80ec9c:	2080002d 	sthio	r2,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80eca0:	28c000c3 	ldbu	r3,3(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80eca4:	d0a77d17 	ldw	r2,-25100(gp)
  80eca8:	29400083 	ldbu	r5,2(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ecac:	1806923a 	slli	r3,r3,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ecb0:	11000a17 	ldw	r4,40(r2)
  80ecb4:	49c00084 	addi	r7,r9,2
  80ecb8:	1946b03a 	or	r3,r3,r5
  80ecbc:	18ffffcc 	andi	r3,r3,65535
  80ecc0:	18e0001c 	xori	r3,r3,32768
  80ecc4:	3909883a 	add	r4,r7,r4
  80ecc8:	18e00004 	addi	r3,r3,-32768
  80eccc:	20c0002d 	sthio	r3,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ecd0:	50800143 	ldbu	r2,5(r10)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ecd4:	51800103 	ldbu	r6,4(r10)
  80ecd8:	d0e77d17 	ldw	r3,-25100(gp)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ecdc:	1004923a 	slli	r2,r2,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ece0:	49000104 	addi	r4,r9,4
  80ece4:	19400a17 	ldw	r5,40(r3)
  80ece8:	1184b03a 	or	r2,r2,r6
  80ecec:	10bfffcc 	andi	r2,r2,65535
  80ecf0:	10a0001c 	xori	r2,r2,32768
  80ecf4:	2149883a 	add	r4,r4,r5
  80ecf8:	10a00004 	addi	r2,r2,-32768
  80ecfc:	2080002d 	sthio	r2,0(r4)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ed00:	50c001c3 	ldbu	r3,7(r10)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ed04:	51800183 	ldbu	r6,6(r10)
  80ed08:	d0a77d17 	ldw	r2,-25100(gp)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
  80ed0c:	1806923a 	slli	r3,r3,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80ed10:	49000184 	addi	r4,r9,6
  80ed14:	11400a17 	ldw	r5,40(r2)
  80ed18:	1986b03a 	or	r3,r3,r6
  80ed1c:	18ffffcc 	andi	r3,r3,65535
  80ed20:	18e0001c 	xori	r3,r3,32768
  80ed24:	2149883a 	add	r4,r4,r5
  80ed28:	18e00004 	addi	r3,r3,-32768
  80ed2c:	20c0002d 	sthio	r3,0(r4)
        }        
        for (counter = 0; counter < 3; counter++)
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  80ed30:	d0e77d17 	ldw	r3,-25100(gp)
  80ed34:	51400203 	ldbu	r5,8(r10)
  80ed38:	18800a17 	ldw	r2,40(r3)
  80ed3c:	4885883a 	add	r2,r9,r2
  80ed40:	11400225 	stbio	r5,8(r2)
  80ed44:	d0a77d17 	ldw	r2,-25100(gp)
  80ed48:	51800243 	ldbu	r6,9(r10)
  80ed4c:	48c00044 	addi	r3,r9,1
  80ed50:	11000a17 	ldw	r4,40(r2)
  80ed54:	02000044 	movi	r8,1
  80ed58:	1907883a 	add	r3,r3,r4
  80ed5c:	19800225 	stbio	r6,8(r3)
  80ed60:	d0a77d17 	ldw	r2,-25100(gp)
  80ed64:	51000283 	ldbu	r4,10(r10)
  80ed68:	10c00a17 	ldw	r3,40(r2)
  80ed6c:	38cf883a 	add	r7,r7,r3
  80ed70:	39000225 	stbio	r4,8(r7)
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  80ed74:	d0e77d17 	ldw	r3,-25100(gp)
  80ed78:	514002c3 	ldbu	r5,11(r10)
  80ed7c:	18800a17 	ldw	r2,40(r3)
  80ed80:	4885883a 	add	r2,r9,r2
  80ed84:	114002e5 	stbio	r5,11(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  80ed88:	d0e77d17 	ldw	r3,-25100(gp)
  80ed8c:	5100030b 	ldhu	r4,12(r10)
  80ed90:	18800a17 	ldw	r2,40(r3)
  80ed94:	4885883a 	add	r2,r9,r2
  80ed98:	110003ad 	sthio	r4,14(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  80ed9c:	d0e77d17 	ldw	r3,-25100(gp)
  80eda0:	5140038b 	ldhu	r5,14(r10)
  80eda4:	18800a17 	ldw	r2,40(r3)
  80eda8:	4885883a 	add	r2,r9,r2
  80edac:	1140042d 	sthio	r5,16(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  80edb0:	d0e77d17 	ldw	r3,-25100(gp)
  80edb4:	5100040b 	ldhu	r4,16(r10)
  80edb8:	18800a17 	ldw	r2,40(r3)
  80edbc:	4885883a 	add	r2,r9,r2
  80edc0:	110004ad 	sthio	r4,18(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  80edc4:	d0e77d17 	ldw	r3,-25100(gp)
  80edc8:	5140048b 	ldhu	r5,18(r10)
  80edcc:	18800a17 	ldw	r2,40(r3)
  80edd0:	4885883a 	add	r2,r9,r2
  80edd4:	114005ad 	sthio	r5,22(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  80edd8:	d0e77d17 	ldw	r3,-25100(gp)
  80eddc:	5100050b 	ldhu	r4,20(r10)
  80ede0:	18800a17 	ldw	r2,40(r3)
  80ede4:	4885883a 	add	r2,r9,r2
  80ede8:	1100062d 	sthio	r4,24(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  80edec:	d0e77d17 	ldw	r3,-25100(gp)
  80edf0:	5140058b 	ldhu	r5,22(r10)
  80edf4:	18800a17 	ldw	r2,40(r3)
  80edf8:	4885883a 	add	r2,r9,r2
  80edfc:	114006ad 	sthio	r5,26(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  80ee00:	d0e77d17 	ldw	r3,-25100(gp)
  80ee04:	51000617 	ldw	r4,24(r10)
  80ee08:	18800a17 	ldw	r2,40(r3)
  80ee0c:	4885883a 	add	r2,r9,r2
  80ee10:	11000735 	stwio	r4,28(r2)
        current_sector_modified = true;                  
  80ee14:	4005883a 	mov	r2,r8
  80ee18:	d2277e15 	stw	r8,-25096(gp)
  80ee1c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80ee20:	d0e77317 	ldw	r3,-25140(gp)
  80ee24:	00800044 	movi	r2,1
  80ee28:	18800226 	beq	r3,r2,80ee34 <Write_File_Record_At_Offset+0x1ec>
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
  80ee2c:	0005883a 	mov	r2,zero
        result = true;
    }
    return result;
}
  80ee30:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ee34:	00802074 	movhi	r2,129
  80ee38:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80ee3c:	00c02074 	movhi	r3,129
  80ee40:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ee44:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ee48:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ee4c:	d0277415 	stw	zero,-25136(gp)
  80ee50:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ee54:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ee58:	183fff15 	stw	zero,-4(r3)
  80ee5c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ee60:	18bffc1e 	bne	r3,r2,80ee54 <Write_File_Record_At_Offset+0x20c>
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
  80ee64:	0005883a 	mov	r2,zero
        result = true;
    }
    return result;
}
  80ee68:	f800283a 	ret

0080ee6c <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ee6c:	208007cc 	andi	r2,r4,31
}


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  80ee70:	2013883a 	mov	r9,r4
  80ee74:	2811883a 	mov	r8,r5
  80ee78:	3015883a 	mov	r10,r6
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ee7c:	1000631e 	bne	r2,zero,80f00c <Read_File_Record_At_Offset+0x1a0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80ee80:	d1277d17 	ldw	r4,-25100(gp)
  80ee84:	20005e26 	beq	r4,zero,80f000 <Read_File_Record_At_Offset+0x194>
  80ee88:	d0e77517 	ldw	r3,-25132(gp)
  80ee8c:	1880002b 	ldhuio	r2,0(r3)
  80ee90:	1080008c 	andi	r2,r2,2
  80ee94:	10005a26 	beq	r2,zero,80f000 <Read_File_Record_At_Offset+0x194>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ee98:	d0a77417 	ldw	r2,-25136(gp)
  80ee9c:	10005b26 	beq	r2,zero,80f00c <Read_File_Record_At_Offset+0x1a0>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  80eea0:	20800a17 	ldw	r2,40(r4)
  80eea4:	4885883a 	add	r2,r9,r2
  80eea8:	10c00023 	ldbuio	r3,0(r2)
  80eeac:	28c00005 	stb	r3,0(r5)
  80eeb0:	d0e77d17 	ldw	r3,-25100(gp)
  80eeb4:	49800044 	addi	r6,r9,1
  80eeb8:	18800a17 	ldw	r2,40(r3)
  80eebc:	3085883a 	add	r2,r6,r2
  80eec0:	10c00023 	ldbuio	r3,0(r2)
  80eec4:	28c00045 	stb	r3,1(r5)
  80eec8:	d0e77d17 	ldw	r3,-25100(gp)
  80eecc:	49400084 	addi	r5,r9,2
  80eed0:	18800a17 	ldw	r2,40(r3)
  80eed4:	2885883a 	add	r2,r5,r2
  80eed8:	10c00023 	ldbuio	r3,0(r2)
  80eedc:	40c00085 	stb	r3,2(r8)
  80eee0:	d0e77d17 	ldw	r3,-25100(gp)
  80eee4:	488000c4 	addi	r2,r9,3
  80eee8:	19000a17 	ldw	r4,40(r3)
  80eeec:	1105883a 	add	r2,r2,r4
  80eef0:	10c00023 	ldbuio	r3,0(r2)
  80eef4:	40c000c5 	stb	r3,3(r8)
  80eef8:	d0e77d17 	ldw	r3,-25100(gp)
  80eefc:	48800104 	addi	r2,r9,4
  80ef00:	19000a17 	ldw	r4,40(r3)
  80ef04:	1105883a 	add	r2,r2,r4
  80ef08:	10c00023 	ldbuio	r3,0(r2)
  80ef0c:	40c00105 	stb	r3,4(r8)
  80ef10:	d0e77d17 	ldw	r3,-25100(gp)
  80ef14:	48800144 	addi	r2,r9,5
  80ef18:	19000a17 	ldw	r4,40(r3)
  80ef1c:	1105883a 	add	r2,r2,r4
  80ef20:	10c00023 	ldbuio	r3,0(r2)
  80ef24:	40c00145 	stb	r3,5(r8)
  80ef28:	d0e77d17 	ldw	r3,-25100(gp)
  80ef2c:	48800184 	addi	r2,r9,6
  80ef30:	19000a17 	ldw	r4,40(r3)
  80ef34:	1105883a 	add	r2,r2,r4
  80ef38:	10c00023 	ldbuio	r3,0(r2)
  80ef3c:	40c00185 	stb	r3,6(r8)
  80ef40:	d0e77d17 	ldw	r3,-25100(gp)
  80ef44:	488001c4 	addi	r2,r9,7
  80ef48:	19000a17 	ldw	r4,40(r3)
  80ef4c:	1105883a 	add	r2,r2,r4
  80ef50:	10c00023 	ldbuio	r3,0(r2)
  80ef54:	40c001c5 	stb	r3,7(r8)
		}        
		for (counter = 0; counter < 3; counter++)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  80ef58:	d1277d17 	ldw	r4,-25100(gp)
  80ef5c:	20800a17 	ldw	r2,40(r4)
  80ef60:	4885883a 	add	r2,r9,r2
  80ef64:	10c00223 	ldbuio	r3,8(r2)
  80ef68:	40c00205 	stb	r3,8(r8)
  80ef6c:	d0a77d17 	ldw	r2,-25100(gp)
  80ef70:	10c00a17 	ldw	r3,40(r2)
  80ef74:	30cd883a 	add	r6,r6,r3
  80ef78:	30800223 	ldbuio	r2,8(r6)
  80ef7c:	40800245 	stb	r2,9(r8)
  80ef80:	d0e77d17 	ldw	r3,-25100(gp)
  80ef84:	18800a17 	ldw	r2,40(r3)
  80ef88:	288b883a 	add	r5,r5,r2
  80ef8c:	28c00223 	ldbuio	r3,8(r5)
  80ef90:	40c00285 	stb	r3,10(r8)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  80ef94:	d1277d17 	ldw	r4,-25100(gp)
  80ef98:	20800a17 	ldw	r2,40(r4)
  80ef9c:	4885883a 	add	r2,r9,r2
  80efa0:	10c002e3 	ldbuio	r3,11(r2)
  80efa4:	40c002c5 	stb	r3,11(r8)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  80efa8:	d1277d17 	ldw	r4,-25100(gp)
  80efac:	20800a17 	ldw	r2,40(r4)
  80efb0:	4885883a 	add	r2,r9,r2
  80efb4:	10c003ab 	ldhuio	r3,14(r2)
  80efb8:	40c0030d 	sth	r3,12(r8)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  80efbc:	1100042b 	ldhuio	r4,16(r2)
  80efc0:	4100038d 	sth	r4,14(r8)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  80efc4:	10c004ab 	ldhuio	r3,18(r2)
  80efc8:	40c0040d 	sth	r3,16(r8)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  80efcc:	110005ab 	ldhuio	r4,22(r2)
  80efd0:	4100048d 	sth	r4,18(r8)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  80efd4:	10c0062b 	ldhuio	r3,24(r2)
  80efd8:	40c0050d 	sth	r3,20(r8)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  80efdc:	110006ab 	ldhuio	r4,26(r2)
  80efe0:	4100058d 	sth	r4,22(r8)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80efe4:	10c00737 	ldwio	r3,28(r2)
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80efe8:	00800044 	movi	r2,1
  80efec:	42400c0d 	sth	r9,48(r8)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80eff0:	40c00615 	stw	r3,24(r8)
		record->file_record_cluster = cluster_index;
  80eff4:	42800a15 	stw	r10,40(r8)
		record->file_record_sector_in_cluster = sector_in_cluster;
  80eff8:	41c00b15 	stw	r7,44(r8)
  80effc:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f000:	d0e77317 	ldw	r3,-25140(gp)
  80f004:	00800044 	movi	r2,1
  80f008:	18800226 	beq	r3,r2,80f014 <Read_File_Record_At_Offset+0x1a8>
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80f00c:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  80f010:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f014:	00802074 	movhi	r2,129
  80f018:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80f01c:	00c02074 	movhi	r3,129
  80f020:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f024:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f028:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f02c:	d0277415 	stw	zero,-25136(gp)
  80f030:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f034:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f038:	183fff15 	stw	zero,-4(r3)
  80f03c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f040:	18bffc1e 	bne	r3,r2,80f034 <Read_File_Record_At_Offset+0x1c8>
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
  80f044:	0005883a 	mov	r2,zero
		result = true;
	}
	return result;
}
  80f048:	f800283a 	ret

0080f04c <Write_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f04c:	d0a77d17 	ldw	r2,-25100(gp)
  80f050:	10000426 	beq	r2,zero,80f064 <Write_Sector_Data+0x18>
  80f054:	d0e77517 	ldw	r3,-25132(gp)
  80f058:	1880002b 	ldhuio	r2,0(r3)
  80f05c:	1080008c 	andi	r2,r2,2
  80f060:	1000131e 	bne	r2,zero,80f0b0 <Write_Sector_Data+0x64>
    {
        result = true;
    }
	else if (initialized == true)
  80f064:	d0e77317 	ldw	r3,-25140(gp)
  80f068:	00800044 	movi	r2,1
  80f06c:	18800226 	beq	r3,r2,80f078 <Write_Sector_Data+0x2c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f070:	0005883a 	mov	r2,zero
        }
    }
    return result;
}
  80f074:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f078:	00802074 	movhi	r2,129
  80f07c:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80f080:	00c02074 	movhi	r3,129
  80f084:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f088:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f08c:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f090:	d0277415 	stw	zero,-25136(gp)
  80f094:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f098:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f09c:	183fff15 	stw	zero,-4(r3)
  80f0a0:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f0a4:	18bffc1e 	bne	r3,r2,80f098 <Write_Sector_Data+0x4c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f0a8:	0005883a 	mov	r2,zero
        }
    }
    return result;
}
  80f0ac:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80f0b0:	214b883a 	add	r5,r4,r5
  80f0b4:	2806927a 	slli	r3,r5,9
  80f0b8:	d0a77917 	ldw	r2,-25116(gp)
  80f0bc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80f0c0:	d0a77817 	ldw	r2,-25120(gp)
  80f0c4:	01000604 	movi	r4,24
  80f0c8:	1100002d 	sthio	r4,0(r2)
  80f0cc:	d1277517 	ldw	r4,-25132(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80f0d0:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80f0d4:	10bfffcc 	andi	r2,r2,65535
  80f0d8:	10c0010c 	andi	r3,r2,4
  80f0dc:	183ffc1e 	bne	r3,zero,80f0d0 <Write_Sector_Data+0x84>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80f0e0:	1080040c 	andi	r2,r2,16
  80f0e4:	103fe21e 	bne	r2,zero,80f070 <Write_Sector_Data+0x24>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f0e8:	00800044 	movi	r2,1
  80f0ec:	d1677f15 	stw	r5,-25092(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80f0f0:	d0277e15 	stw	zero,-25096(gp)
  80f0f4:	f800283a 	ret

0080f0f8 <Read_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f0f8:	d0a77d17 	ldw	r2,-25100(gp)
}


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  80f0fc:	200d883a 	mov	r6,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f100:	10000f26 	beq	r2,zero,80f140 <Read_Sector_Data+0x48>
  80f104:	d0e77517 	ldw	r3,-25132(gp)
  80f108:	1880002b 	ldhuio	r2,0(r3)
  80f10c:	1080008c 	andi	r2,r2,2
  80f110:	10000b26 	beq	r2,zero,80f140 <Read_Sector_Data+0x48>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  80f114:	d0a77e17 	ldw	r2,-25096(gp)
  80f118:	10002926 	beq	r2,zero,80f1c0 <Read_Sector_Data+0xc8>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  80f11c:	d1e77f17 	ldw	r7,-25092(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f120:	1880002b 	ldhuio	r2,0(r3)
  80f124:	1080008c 	andi	r2,r2,2
  80f128:	1000161e 	bne	r2,zero,80f184 <Read_Sector_Data+0x8c>
    {
        result = true;
    }
	else if (initialized == true)
  80f12c:	d0e77317 	ldw	r3,-25140(gp)
  80f130:	00800044 	movi	r2,1
  80f134:	18803426 	beq	r3,r2,80f208 <Read_Sector_Data+0x110>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f138:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  80f13c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f140:	d0e77317 	ldw	r3,-25140(gp)
  80f144:	00800044 	movi	r2,1
  80f148:	18bffb1e 	bne	r3,r2,80f138 <Read_Sector_Data+0x40>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f14c:	00802074 	movhi	r2,129
  80f150:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80f154:	00c02074 	movhi	r3,129
  80f158:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f15c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f160:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f164:	d0277415 	stw	zero,-25136(gp)
  80f168:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f16c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f170:	183fff15 	stw	zero,-4(r3)
  80f174:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f178:	18bffc1e 	bne	r3,r2,80f16c <Read_Sector_Data+0x74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f17c:	0005883a 	mov	r2,zero
		}
	}
	return result;
}
  80f180:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80f184:	3806927a 	slli	r3,r7,9
  80f188:	d0a77917 	ldw	r2,-25116(gp)
  80f18c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80f190:	d0a77817 	ldw	r2,-25120(gp)
  80f194:	01000604 	movi	r4,24
  80f198:	1100002d 	sthio	r4,0(r2)
  80f19c:	d1277517 	ldw	r4,-25132(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80f1a0:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80f1a4:	10bfffcc 	andi	r2,r2,65535
  80f1a8:	10c0010c 	andi	r3,r2,4
  80f1ac:	183ffc1e 	bne	r3,zero,80f1a0 <Read_Sector_Data+0xa8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80f1b0:	1080040c 	andi	r2,r2,16
  80f1b4:	103fe01e 	bne	r2,zero,80f138 <Read_Sector_Data+0x40>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f1b8:	d1e77f15 	stw	r7,-25092(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80f1bc:	d0277e15 	stw	zero,-25096(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80f1c0:	314b883a 	add	r5,r6,r5
  80f1c4:	2806927a 	slli	r3,r5,9
  80f1c8:	d0a77917 	ldw	r2,-25116(gp)
  80f1cc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  80f1d0:	d0a77817 	ldw	r2,-25120(gp)
  80f1d4:	01000444 	movi	r4,17
  80f1d8:	1100002d 	sthio	r4,0(r2)
  80f1dc:	d1277517 	ldw	r4,-25132(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80f1e0:	2080002b 	ldhuio	r2,0(r4)
		} while ((reg_state & 0x04)!=0);
  80f1e4:	10bfffcc 	andi	r2,r2,65535
  80f1e8:	10c0010c 	andi	r3,r2,4
  80f1ec:	183ffc1e 	bne	r3,zero,80f1e0 <Read_Sector_Data+0xe8>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  80f1f0:	1080040c 	andi	r2,r2,16
  80f1f4:	103fd01e 	bne	r2,zero,80f138 <Read_Sector_Data+0x40>
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80f1f8:	00800044 	movi	r2,1
  80f1fc:	d1677f15 	stw	r5,-25092(gp)
		} while ((reg_state & 0x04)!=0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
  80f200:	d0277e15 	stw	zero,-25096(gp)
  80f204:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f208:	00802074 	movhi	r2,129
  80f20c:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80f210:	00c02074 	movhi	r3,129
  80f214:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f218:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f21c:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f220:	d0277415 	stw	zero,-25136(gp)
  80f224:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f228:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f22c:	183fff15 	stw	zero,-4(r3)
  80f230:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f234:	18bffc1e 	bne	r3,r2,80f228 <Read_Sector_Data+0x130>
  80f238:	003fbf06 	br	80f138 <Read_Sector_Data+0x40>

0080f23c <alt_up_sd_card_fclose>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f23c:	d0a77d17 	ldw	r2,-25100(gp)
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  80f240:	defffb04 	addi	sp,sp,-20
  80f244:	dfc00415 	stw	ra,16(sp)
  80f248:	dcc00315 	stw	r19,12(sp)
  80f24c:	dc800215 	stw	r18,8(sp)
  80f250:	dc400115 	stw	r17,4(sp)
  80f254:	dc000015 	stw	r16,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80f258:	10003126 	beq	r2,zero,80f320 <alt_up_sd_card_fclose+0xe4>
  80f25c:	d0e77517 	ldw	r3,-25132(gp)
  80f260:	1880002b 	ldhuio	r2,0(r3)
  80f264:	1080008c 	andi	r2,r2,2
  80f268:	10002d26 	beq	r2,zero,80f320 <alt_up_sd_card_fclose+0xe4>

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80f26c:	d0a77417 	ldw	r2,-25136(gp)
  80f270:	10002e26 	beq	r2,zero,80f32c <alt_up_sd_card_fclose+0xf0>
    {
        if (active_files[file_handle].in_use) 
  80f274:	24ffffcc 	andi	r19,r4,65535
  80f278:	9ce0001c 	xori	r19,r19,32768
  80f27c:	9ce00004 	addi	r19,r19,-32768
  80f280:	982291ba 	slli	r17,r19,6
  80f284:	04802074 	movhi	r18,129
  80f288:	949f6304 	addi	r18,r18,32140
  80f28c:	8ca1883a 	add	r16,r17,r18
  80f290:	80800f17 	ldw	r2,60(r16)
  80f294:	10002526 	beq	r2,zero,80f32c <alt_up_sd_card_fclose+0xf0>
        {
			if (active_files[file_handle].modified)
  80f298:	80800e17 	ldw	r2,56(r16)
  80f29c:	10001526 	beq	r2,zero,80f2f4 <alt_up_sd_card_fclose+0xb8>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0)
  80f2a0:	81000a17 	ldw	r4,40(r16)
    {
        if (active_files[file_handle].in_use) 
        {
			if (active_files[file_handle].modified)
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  80f2a4:	81800b17 	ldw	r6,44(r16)
				if (active_files[file_handle].file_record_cluster == 0)
  80f2a8:	2000361e 	bne	r4,zero,80f384 <alt_up_sd_card_fclose+0x148>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  80f2ac:	00802074 	movhi	r2,129
  80f2b0:	109f4e04 	addi	r2,r2,32056
  80f2b4:	10c01317 	ldw	r3,76(r2)
  80f2b8:	30c9883a 	add	r4,r6,r3
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  80f2bc:	d1677b17 	ldw	r5,-25108(gp)
  80f2c0:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80f2c4:	10000b26 	beq	r2,zero,80f2f4 <alt_up_sd_card_fclose+0xb8>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  80f2c8:	980a91ba 	slli	r5,r19,6
  80f2cc:	8c85883a 	add	r2,r17,r18
  80f2d0:	11000c0f 	ldh	r4,48(r2)
  80f2d4:	2c8b883a 	add	r5,r5,r18
  80f2d8:	080ec480 	call	80ec48 <Write_File_Record_At_Offset>
  80f2dc:	10000526 	beq	r2,zero,80f2f4 <alt_up_sd_card_fclose+0xb8>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80f2e0:	d0a77e17 	ldw	r2,-25096(gp)
  80f2e4:	10000326 	beq	r2,zero,80f2f4 <alt_up_sd_card_fclose+0xb8>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80f2e8:	d1277f17 	ldw	r4,-25092(gp)
  80f2ec:	000b883a 	mov	r5,zero
  80f2f0:	080f04c0 	call	80f04c <Write_Sector_Data>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  80f2f4:	8c85883a 	add	r2,r17,r18
  80f2f8:	00c00044 	movi	r3,1
  80f2fc:	10000f15 	stw	zero,60(r2)
			result = true;
        }
    }
    
    return result;
}
  80f300:	1805883a 	mov	r2,r3
  80f304:	dfc00417 	ldw	ra,16(sp)
  80f308:	dcc00317 	ldw	r19,12(sp)
  80f30c:	dc800217 	ldw	r18,8(sp)
  80f310:	dc400117 	ldw	r17,4(sp)
  80f314:	dc000017 	ldw	r16,0(sp)
  80f318:	dec00504 	addi	sp,sp,20
  80f31c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80f320:	d0e77317 	ldw	r3,-25140(gp)
  80f324:	00800044 	movi	r2,1
  80f328:	18800926 	beq	r3,r2,80f350 <alt_up_sd_card_fclose+0x114>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
  80f32c:	0007883a 	mov	r3,zero
			result = true;
        }
    }
    
    return result;
}
  80f330:	1805883a 	mov	r2,r3
  80f334:	dfc00417 	ldw	ra,16(sp)
  80f338:	dcc00317 	ldw	r19,12(sp)
  80f33c:	dc800217 	ldw	r18,8(sp)
  80f340:	dc400117 	ldw	r17,4(sp)
  80f344:	dc000017 	ldw	r16,0(sp)
  80f348:	dec00504 	addi	sp,sp,20
  80f34c:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f350:	00802074 	movhi	r2,129
  80f354:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80f358:	00c02074 	movhi	r3,129
  80f35c:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80f360:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80f364:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80f368:	d0277415 	stw	zero,-25136(gp)
  80f36c:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80f370:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80f374:	183fff15 	stw	zero,-4(r3)
  80f378:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80f37c:	18bffc1e 	bne	r3,r2,80f370 <alt_up_sd_card_fclose+0x134>
  80f380:	003fea06 	br	80f32c <alt_up_sd_card_fclose+0xf0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  80f384:	00802074 	movhi	r2,129
  80f388:	109f4e04 	addi	r2,r2,32056
  80f38c:	14001417 	ldw	r16,80(r2)
  80f390:	11400383 	ldbu	r5,14(r2)
  80f394:	213fff84 	addi	r4,r4,-2
  80f398:	3421883a 	add	r16,r6,r16
  80f39c:	0802b980 	call	802b98 <__mulsi3>
  80f3a0:	8089883a 	add	r4,r16,r2
  80f3a4:	003fc506 	br	80f2bc <alt_up_sd_card_fclose+0x80>

0080f3a8 <find_first_empty_record_in_root_directory>:
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80f3a8:	defffc04 	addi	sp,sp,-16
  80f3ac:	dc400115 	stw	r17,4(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80f3b0:	04402074 	movhi	r17,129
  80f3b4:	8c5f4e04 	addi	r17,r17,32056
  80f3b8:	8880050b 	ldhu	r2,20(r17)
  80f3bc:	88c0030b 	ldhu	r3,12(r17)
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80f3c0:	dc800215 	stw	r18,8(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80f3c4:	1004917a 	slli	r2,r2,5
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80f3c8:	dfc00315 	stw	ra,12(sp)
  80f3cc:	dc000015 	stw	r16,0(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80f3d0:	10e5283a 	div	r18,r2,r3
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80f3d4:	90001726 	beq	r18,zero,80f434 <find_first_empty_record_in_root_directory+0x8c>
  80f3d8:	0021883a 	mov	r16,zero
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80f3dc:	89001317 	ldw	r4,76(r17)
  80f3e0:	d1677b17 	ldw	r5,-25108(gp)
  80f3e4:	8109883a 	add	r4,r16,r4
  80f3e8:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80f3ec:	10001126 	beq	r2,zero,80f434 <find_first_empty_record_in_root_directory+0x8c>
  80f3f0:	d0a77d17 	ldw	r2,-25100(gp)
  80f3f4:	8012913a 	slli	r9,r16,4
                }
            }
        }
        else
        {
            break;
  80f3f8:	000b883a 	mov	r5,zero
  80f3fc:	11800a17 	ldw	r6,40(r2)
  80f400:	0009883a 	mov	r4,zero
  80f404:	02003944 	movi	r8,229
  80f408:	01c00404 	movi	r7,16
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  80f40c:	2185883a 	add	r2,r4,r6
  80f410:	10c00023 	ldbuio	r3,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80f414:	18c03fcc 	andi	r3,r3,255
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  80f418:	21000804 	addi	r4,r4,32
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80f41c:	1a000726 	beq	r3,r8,80f43c <find_first_empty_record_in_root_directory+0x94>
  80f420:	18000626 	beq	r3,zero,80f43c <find_first_empty_record_in_root_directory+0x94>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  80f424:	29400044 	addi	r5,r5,1
  80f428:	29fff81e 	bne	r5,r7,80f40c <find_first_empty_record_in_root_directory+0x64>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80f42c:	84000044 	addi	r16,r16,1
  80f430:	943fea1e 	bne	r18,r16,80f3dc <find_first_empty_record_in_root_directory+0x34>
  80f434:	00bfffc4 	movi	r2,-1
  80f438:	00000206 	br	80f444 <find_first_empty_record_in_root_directory+0x9c>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
  80f43c:	4945883a 	add	r2,r9,r5
  80f440:	1004943a 	slli	r2,r2,16
        {
            break;
        }
    }
    return result;
}
  80f444:	dfc00317 	ldw	ra,12(sp)
  80f448:	dc800217 	ldw	r18,8(sp)
  80f44c:	dc400117 	ldw	r17,4(sp)
  80f450:	dc000017 	ldw	r16,0(sp)
  80f454:	dec00404 	addi	sp,sp,16
  80f458:	f800283a 	ret

0080f45c <find_first_empty_cluster>:
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80f45c:	defffa04 	addi	sp,sp,-24
  80f460:	dcc00315 	stw	r19,12(sp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80f464:	04c02074 	movhi	r19,129
  80f468:	9cdf4e04 	addi	r19,r19,32056
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80f46c:	dc800215 	stw	r18,8(sp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f470:	98801217 	ldw	r2,72(r19)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80f474:	9c801117 	ldw	r18,68(r19)
}


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80f478:	dd000415 	stw	r20,16(sp)
  80f47c:	dfc00515 	stw	ra,20(sp)
  80f480:	dc400115 	stw	r17,4(sp)
  80f484:	dc000015 	stw	r16,0(sp)
  80f488:	2029883a 	mov	r20,r4
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f48c:	90801926 	beq	r18,r2,80f4f4 <find_first_empty_cluster+0x98>
  80f490:	04400084 	movi	r17,2
  80f494:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  80f498:	d1677b17 	ldw	r5,-25108(gp)
  80f49c:	9009883a 	mov	r4,r18
  80f4a0:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80f4a4:	10001c26 	beq	r2,zero,80f518 <find_first_empty_cluster+0xbc>
  80f4a8:	d0a77d17 	ldw	r2,-25100(gp)
  80f4ac:	88c03fcc 	andi	r3,r17,255
  80f4b0:	11000a17 	ldw	r4,40(r2)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80f4b4:	18c5883a 	add	r2,r3,r3
  80f4b8:	1105883a 	add	r2,r2,r4
  80f4bc:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  80f4c0:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80f4c4:	1821883a 	mov	r16,r3
                if (cluster == 0)
  80f4c8:	10001726 	beq	r2,zero,80f528 <find_first_empty_cluster+0xcc>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  80f4cc:	8c400044 	addi	r17,r17,1
                } 
            } while ((cluster_index % 256) != 0);
  80f4d0:	88c03fcc 	andi	r3,r17,255
  80f4d4:	183ff71e 	bne	r3,zero,80f4b4 <find_first_empty_cluster+0x58>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f4d8:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  80f4dc:	94800044 	addi	r18,r18,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80f4e0:	14bfed1e 	bne	r2,r18,80f498 <find_first_empty_cluster+0x3c>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  80f4e4:	80bfffcc 	andi	r2,r16,65535
  80f4e8:	10a0001c 	xori	r2,r2,32768
  80f4ec:	10a00004 	addi	r2,r2,-32768
  80f4f0:	10000d26 	beq	r2,zero,80f528 <find_first_empty_cluster+0xcc>
    {
        *cluster_number = cluster_index;
  80f4f4:	0005883a 	mov	r2,zero
		result = true;
    }
    return result;
}
  80f4f8:	dfc00517 	ldw	ra,20(sp)
  80f4fc:	dd000417 	ldw	r20,16(sp)
  80f500:	dcc00317 	ldw	r19,12(sp)
  80f504:	dc800217 	ldw	r18,8(sp)
  80f508:	dc400117 	ldw	r17,4(sp)
  80f50c:	dc000017 	ldw	r16,0(sp)
  80f510:	dec00604 	addi	sp,sp,24
  80f514:	f800283a 	ret
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  80f518:	80bfffcc 	andi	r2,r16,65535
  80f51c:	10a0001c 	xori	r2,r2,32768
  80f520:	10a00004 	addi	r2,r2,-32768
  80f524:	103fec1e 	bne	r2,zero,80f4d8 <find_first_empty_cluster+0x7c>
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
  80f528:	00800044 	movi	r2,1
  80f52c:	a4400015 	stw	r17,0(r20)
		result = true;
    }
    return result;
}
  80f530:	dfc00517 	ldw	ra,20(sp)
  80f534:	dd000417 	ldw	r20,16(sp)
  80f538:	dcc00317 	ldw	r19,12(sp)
  80f53c:	dc800217 	ldw	r18,8(sp)
  80f540:	dc400117 	ldw	r17,4(sp)
  80f544:	dc000017 	ldw	r16,0(sp)
  80f548:	dec00604 	addi	sp,sp,24
  80f54c:	f800283a 	ret

0080f550 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80f550:	deffff04 	addi	sp,sp,-4
  80f554:	200b883a 	mov	r5,r4
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80f558:	0009883a 	mov	r4,zero
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80f55c:	dfc00015 	stw	ra,0(sp)
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80f560:	080f0f80 	call	80f0f8 <Read_Sector_Data>
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80f564:	d2677d17 	ldw	r9,-25100(gp)
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80f568:	1009883a 	mov	r4,r2
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80f56c:	49400a17 	ldw	r5,40(r9)
  80f570:	28807fab 	ldhuio	r2,510(r5)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80f574:	00ea9554 	movui	r3,43605
  80f578:	10bfffcc 	andi	r2,r2,65535
  80f57c:	10c00526 	beq	r2,r3,80f594 <Check_for_DOS_FAT+0x44>
  80f580:	0009883a 	mov	r4,zero
    else
    {
        result = false;
    }
	return result;
}
  80f584:	2005883a 	mov	r2,r4
  80f588:	dfc00017 	ldw	ra,0(sp)
  80f58c:	dec00104 	addi	sp,sp,4
  80f590:	f800283a 	ret
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80f594:	203ffb26 	beq	r4,zero,80f584 <Check_for_DOS_FAT+0x34>
	{
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  80f598:	28c00023 	ldbuio	r3,0(r5)
  80f59c:	02802074 	movhi	r10,129
  80f5a0:	529f4e04 	addi	r10,r10,32056
  80f5a4:	50c00005 	stb	r3,0(r10)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  80f5a8:	48800a17 	ldw	r2,40(r9)
  80f5ac:	10c00063 	ldbuio	r3,1(r2)
  80f5b0:	50c00045 	stb	r3,1(r10)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  80f5b4:	48800a17 	ldw	r2,40(r9)
  80f5b8:	10c000a3 	ldbuio	r3,2(r2)
  80f5bc:	50c00085 	stb	r3,2(r10)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  80f5c0:	48800a17 	ldw	r2,40(r9)
  80f5c4:	10c000e3 	ldbuio	r3,3(r2)
  80f5c8:	50c000c5 	stb	r3,3(r10)
  80f5cc:	48800a17 	ldw	r2,40(r9)
  80f5d0:	10c00123 	ldbuio	r3,4(r2)
  80f5d4:	50c00105 	stb	r3,4(r10)
  80f5d8:	48800a17 	ldw	r2,40(r9)
  80f5dc:	10c00163 	ldbuio	r3,5(r2)
  80f5e0:	50c00145 	stb	r3,5(r10)
  80f5e4:	48800a17 	ldw	r2,40(r9)
  80f5e8:	10c001a3 	ldbuio	r3,6(r2)
  80f5ec:	50c00185 	stb	r3,6(r10)
  80f5f0:	48800a17 	ldw	r2,40(r9)
  80f5f4:	10c001e3 	ldbuio	r3,7(r2)
  80f5f8:	50c001c5 	stb	r3,7(r10)
  80f5fc:	48800a17 	ldw	r2,40(r9)
  80f600:	10c00223 	ldbuio	r3,8(r2)
  80f604:	50c00205 	stb	r3,8(r10)
  80f608:	48800a17 	ldw	r2,40(r9)
  80f60c:	10c00263 	ldbuio	r3,9(r2)
  80f610:	50c00245 	stb	r3,9(r10)
  80f614:	48800a17 	ldw	r2,40(r9)
  80f618:	10c002a3 	ldbuio	r3,10(r2)
  80f61c:	50c00285 	stb	r3,10(r10)
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  80f620:	49000a17 	ldw	r4,40(r9)
  80f624:	20800323 	ldbuio	r2,12(r4)
  80f628:	20c002e3 	ldbuio	r3,11(r4)
  80f62c:	10803fcc 	andi	r2,r2,255
  80f630:	1004923a 	slli	r2,r2,8
  80f634:	18c03fcc 	andi	r3,r3,255
  80f638:	18c0201c 	xori	r3,r3,128
  80f63c:	18ffe004 	addi	r3,r3,-128
  80f640:	10c4b03a 	or	r2,r2,r3
  80f644:	5080030d 	sth	r2,12(r10)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  80f648:	20c00363 	ldbuio	r3,13(r4)
  80f64c:	50c00385 	stb	r3,14(r10)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  80f650:	49000a17 	ldw	r4,40(r9)
  80f654:	208003ab 	ldhuio	r2,14(r4)
  80f658:	5080040d 	sth	r2,16(r10)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  80f65c:	20c00423 	ldbuio	r3,16(r4)
  80f660:	50c00485 	stb	r3,18(r10)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  80f664:	49000a17 	ldw	r4,40(r9)
  80f668:	208004a3 	ldbuio	r2,18(r4)
  80f66c:	20c00463 	ldbuio	r3,17(r4)
  80f670:	10803fcc 	andi	r2,r2,255
  80f674:	1004923a 	slli	r2,r2,8
  80f678:	18c03fcc 	andi	r3,r3,255
  80f67c:	10c4b03a 	or	r2,r2,r3
  80f680:	5080050d 	sth	r2,20(r10)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  80f684:	21400523 	ldbuio	r5,20(r4)
  80f688:	208004e3 	ldbuio	r2,19(r4)
  80f68c:	29403fcc 	andi	r5,r5,255
  80f690:	280a923a 	slli	r5,r5,8
  80f694:	10803fcc 	andi	r2,r2,255
  80f698:	288ab03a 	or	r5,r5,r2
  80f69c:	5140058d 	sth	r5,22(r10)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  80f6a0:	20800563 	ldbuio	r2,21(r4)
  80f6a4:	50800605 	stb	r2,24(r10)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  80f6a8:	49000a17 	ldw	r4,40(r9)
  80f6ac:	208005ab 	ldhuio	r2,22(r4)
  80f6b0:	5080068d 	sth	r2,26(r10)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  80f6b4:	20c0062b 	ldhuio	r3,24(r4)
  80f6b8:	50c0070d 	sth	r3,28(r10)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  80f6bc:	208006ab 	ldhuio	r2,26(r4)
  80f6c0:	5080078d 	sth	r2,30(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  80f6c4:	20c00737 	ldwio	r3,28(r4)
  80f6c8:	50c00815 	stw	r3,32(r10)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  80f6cc:	48800a17 	ldw	r2,40(r9)
  80f6d0:	12c00837 	ldwio	r11,32(r2)
  80f6d4:	52c00915 	stw	r11,36(r10)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  80f6d8:	48800a17 	ldw	r2,40(r9)
  80f6dc:	10c00923 	ldbuio	r3,36(r2)
  80f6e0:	50c00a05 	stb	r3,40(r10)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  80f6e4:	48800a17 	ldw	r2,40(r9)
  80f6e8:	10c00963 	ldbuio	r3,37(r2)
  80f6ec:	50c00a45 	stb	r3,41(r10)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80f6f0:	49000a17 	ldw	r4,40(r9)
  80f6f4:	220009a3 	ldbuio	r8,38(r4)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f6f8:	5080050b 	ldhu	r2,20(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80f6fc:	51c0040b 	ldhu	r7,16(r10)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f700:	50c0068b 	ldhu	r3,26(r10)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f704:	1004917a 	slli	r2,r2,5
  80f708:	5100030b 	ldhu	r4,12(r10)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f70c:	38cd883a 	add	r6,r7,r3
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  80f710:	30c7883a 	add	r3,r6,r3
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f714:	1105283a 	div	r2,r2,r4
  80f718:	1885883a 	add	r2,r3,r2
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80f71c:	297fffcc 	andi	r5,r5,65535
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80f720:	52000a85 	stb	r8,42(r10)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  80f724:	50801415 	stw	r2,80(r10)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80f728:	51c01115 	stw	r7,68(r10)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80f72c:	51801215 	stw	r6,72(r10)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  80f730:	50c01315 	stw	r3,76(r10)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80f734:	28005626 	beq	r5,zero,80f890 <Check_for_DOS_FAT+0x340>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  80f738:	50800383 	ldbu	r2,14(r10)
  80f73c:	288b283a 	div	r5,r5,r2
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087)
  80f740:	0083fd84 	movi	r2,4086
  80f744:	11405616 	blt	r2,r5,80f8a0 <Check_for_DOS_FAT+0x350>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  80f748:	00800304 	movi	r2,12
  80f74c:	50801085 	stb	r2,66(r10)
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  80f750:	48800a17 	ldw	r2,40(r9)
  80f754:	10c009e3 	ldbuio	r3,39(r2)
  80f758:	50c00ac5 	stb	r3,43(r10)
  80f75c:	48800a17 	ldw	r2,40(r9)
  80f760:	10c00a23 	ldbuio	r3,40(r2)
  80f764:	50c00b05 	stb	r3,44(r10)
  80f768:	48800a17 	ldw	r2,40(r9)
  80f76c:	10c00a63 	ldbuio	r3,41(r2)
  80f770:	50c00b45 	stb	r3,45(r10)
  80f774:	48800a17 	ldw	r2,40(r9)
  80f778:	10c00aa3 	ldbuio	r3,42(r2)
  80f77c:	50c00b85 	stb	r3,46(r10)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  80f780:	48800a17 	ldw	r2,40(r9)
  80f784:	10c00ae3 	ldbuio	r3,43(r2)
  80f788:	50c00bc5 	stb	r3,47(r10)
  80f78c:	48800a17 	ldw	r2,40(r9)
  80f790:	10c00b23 	ldbuio	r3,44(r2)
  80f794:	50c00c05 	stb	r3,48(r10)
  80f798:	48800a17 	ldw	r2,40(r9)
  80f79c:	10c00b63 	ldbuio	r3,45(r2)
  80f7a0:	50c00c45 	stb	r3,49(r10)
  80f7a4:	48800a17 	ldw	r2,40(r9)
  80f7a8:	10c00ba3 	ldbuio	r3,46(r2)
  80f7ac:	50c00c85 	stb	r3,50(r10)
  80f7b0:	48800a17 	ldw	r2,40(r9)
  80f7b4:	10c00be3 	ldbuio	r3,47(r2)
  80f7b8:	50c00cc5 	stb	r3,51(r10)
  80f7bc:	48800a17 	ldw	r2,40(r9)
  80f7c0:	10c00c23 	ldbuio	r3,48(r2)
  80f7c4:	50c00d05 	stb	r3,52(r10)
  80f7c8:	48800a17 	ldw	r2,40(r9)
  80f7cc:	10c00c63 	ldbuio	r3,49(r2)
  80f7d0:	50c00d45 	stb	r3,53(r10)
  80f7d4:	48800a17 	ldw	r2,40(r9)
  80f7d8:	10c00ca3 	ldbuio	r3,50(r2)
  80f7dc:	50c00d85 	stb	r3,54(r10)
  80f7e0:	48800a17 	ldw	r2,40(r9)
  80f7e4:	10c00ce3 	ldbuio	r3,51(r2)
  80f7e8:	50c00dc5 	stb	r3,55(r10)
  80f7ec:	48800a17 	ldw	r2,40(r9)
  80f7f0:	10c00d23 	ldbuio	r3,52(r2)
  80f7f4:	50c00e05 	stb	r3,56(r10)
  80f7f8:	48800a17 	ldw	r2,40(r9)
  80f7fc:	10c00d63 	ldbuio	r3,53(r2)
  80f800:	50c00e45 	stb	r3,57(r10)
		}    
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  80f804:	48800a17 	ldw	r2,40(r9)
  80f808:	10c00da3 	ldbuio	r3,54(r2)
  80f80c:	50c00e85 	stb	r3,58(r10)
  80f810:	48800a17 	ldw	r2,40(r9)
  80f814:	10c00de3 	ldbuio	r3,55(r2)
  80f818:	50c00ec5 	stb	r3,59(r10)
  80f81c:	48800a17 	ldw	r2,40(r9)
  80f820:	10c00e23 	ldbuio	r3,56(r2)
  80f824:	50c00f05 	stb	r3,60(r10)
  80f828:	48800a17 	ldw	r2,40(r9)
  80f82c:	10c00e63 	ldbuio	r3,57(r2)
  80f830:	50c00f45 	stb	r3,61(r10)
  80f834:	48800a17 	ldw	r2,40(r9)
  80f838:	10c00ea3 	ldbuio	r3,58(r2)
  80f83c:	50c00f85 	stb	r3,62(r10)
  80f840:	48800a17 	ldw	r2,40(r9)
  80f844:	10c00ee3 	ldbuio	r3,59(r2)
  80f848:	50c00fc5 	stb	r3,63(r10)
  80f84c:	48800a17 	ldw	r2,40(r9)
  80f850:	10c00f23 	ldbuio	r3,60(r2)
  80f854:	50c01005 	stb	r3,64(r10)
  80f858:	48800a17 	ldw	r2,40(r9)
  80f85c:	10c00f63 	ldbuio	r3,61(r2)
  80f860:	00802074 	movhi	r2,129
  80f864:	109f7204 	addi	r2,r2,32200
  80f868:	50c01045 	stb	r3,65(r10)
  80f86c:	10c14004 	addi	r3,r2,1280
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
		{
			active_files[counter].in_use = false;
  80f870:	10000015 	stw	zero,0(r2)
  80f874:	10801004 	addi	r2,r2,64
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  80f878:	10fffd1e 	bne	r2,r3,80f870 <Check_for_DOS_FAT+0x320>
  80f87c:	01000044 	movi	r4,1
    else
    {
        result = false;
    }
	return result;
}
  80f880:	2005883a 	mov	r2,r4
  80f884:	dfc00017 	ldw	ra,0(sp)
  80f888:	dec00104 	addi	sp,sp,4
  80f88c:	f800283a 	ret
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  80f890:	50800383 	ldbu	r2,14(r10)
  80f894:	588b203a 	divu	r5,r11,r2
		}
		if (num_clusters < 4087)
  80f898:	0083fd84 	movi	r2,4086
  80f89c:	117faa0e 	bge	r2,r5,80f748 <Check_for_DOS_FAT+0x1f8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
		}
		else if (num_clusters <= 65517)
  80f8a0:	00bffb54 	movui	r2,65517
  80f8a4:	11400316 	blt	r2,r5,80f8b4 <Check_for_DOS_FAT+0x364>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  80f8a8:	00800404 	movi	r2,16
  80f8ac:	50801085 	stb	r2,66(r10)
  80f8b0:	003fa706 	br	80f750 <Check_for_DOS_FAT+0x200>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  80f8b4:	00800804 	movi	r2,32
  80f8b8:	50801085 	stb	r2,66(r10)
  80f8bc:	003fa406 	br	80f750 <Check_for_DOS_FAT+0x200>

0080f8c0 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80f8c0:	deffff04 	addi	sp,sp,-4
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80f8c4:	0009883a 	mov	r4,zero
  80f8c8:	000b883a 	mov	r5,zero

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80f8cc:	dfc00015 	stw	ra,0(sp)
	bool result = false;
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80f8d0:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80f8d4:	1000041e 	bne	r2,zero,80f8e8 <Check_for_Master_Boot_Record+0x28>
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
						break;
  80f8d8:	0005883a 	mov	r2,zero
			}
		}
	}

	return result;
}
  80f8dc:	dfc00017 	ldw	ra,0(sp)
  80f8e0:	dec00104 	addi	sp,sp,4
  80f8e4:	f800283a 	ret
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  80f8e8:	d1a77d17 	ldw	r6,-25100(gp)
  80f8ec:	31000a17 	ldw	r4,40(r6)
  80f8f0:	20807fab 	ldhuio	r2,510(r4)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  80f8f4:	00ea9554 	movui	r3,43605
  80f8f8:	10bfffcc 	andi	r2,r2,65535
  80f8fc:	10fff61e 	bne	r2,r3,80f8d8 <Check_for_Master_Boot_Record+0x18>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f900:	208070a3 	ldbuio	r2,450(r4)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f904:	00c00044 	movi	r3,1
  80f908:	11003fcc 	andi	r4,r2,255
  80f90c:	20c03726 	beq	r4,r3,80f9ec <Check_for_Master_Boot_Record+0x12c>
  80f910:	00800104 	movi	r2,4
  80f914:	20803526 	beq	r4,r2,80f9ec <Check_for_Master_Boot_Record+0x12c>
  80f918:	00800184 	movi	r2,6
  80f91c:	20803326 	beq	r4,r2,80f9ec <Check_for_Master_Boot_Record+0x12c>
  80f920:	00800384 	movi	r2,14
  80f924:	20803126 	beq	r4,r2,80f9ec <Check_for_Master_Boot_Record+0x12c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f928:	30800a17 	ldw	r2,40(r6)
  80f92c:	10c074a3 	ldbuio	r3,466(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f930:	00800044 	movi	r2,1
  80f934:	18c03fcc 	andi	r3,r3,255
  80f938:	18803926 	beq	r3,r2,80fa20 <Check_for_Master_Boot_Record+0x160>
  80f93c:	00800104 	movi	r2,4
  80f940:	18803726 	beq	r3,r2,80fa20 <Check_for_Master_Boot_Record+0x160>
  80f944:	00800184 	movi	r2,6
  80f948:	18803526 	beq	r3,r2,80fa20 <Check_for_Master_Boot_Record+0x160>
  80f94c:	00800384 	movi	r2,14
  80f950:	18803326 	beq	r3,r2,80fa20 <Check_for_Master_Boot_Record+0x160>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f954:	30800a17 	ldw	r2,40(r6)
  80f958:	10c078a3 	ldbuio	r3,482(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f95c:	00800044 	movi	r2,1
  80f960:	18c03fcc 	andi	r3,r3,255
  80f964:	18803b26 	beq	r3,r2,80fa54 <Check_for_Master_Boot_Record+0x194>
  80f968:	00800104 	movi	r2,4
  80f96c:	18803926 	beq	r3,r2,80fa54 <Check_for_Master_Boot_Record+0x194>
  80f970:	00800184 	movi	r2,6
  80f974:	18803726 	beq	r3,r2,80fa54 <Check_for_Master_Boot_Record+0x194>
  80f978:	00800384 	movi	r2,14
  80f97c:	18803526 	beq	r3,r2,80fa54 <Check_for_Master_Boot_Record+0x194>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80f980:	30800a17 	ldw	r2,40(r6)
  80f984:	10c07ca3 	ldbuio	r3,498(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80f988:	00800044 	movi	r2,1
  80f98c:	18c03fcc 	andi	r3,r3,255
  80f990:	18800626 	beq	r3,r2,80f9ac <Check_for_Master_Boot_Record+0xec>
  80f994:	00800104 	movi	r2,4
  80f998:	18800426 	beq	r3,r2,80f9ac <Check_for_Master_Boot_Record+0xec>
  80f99c:	00800184 	movi	r2,6
  80f9a0:	18800226 	beq	r3,r2,80f9ac <Check_for_Master_Boot_Record+0xec>
  80f9a4:	00800384 	movi	r2,14
  80f9a8:	18bfcb1e 	bne	r3,r2,80f8d8 <Check_for_Master_Boot_Record+0x18>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f9ac:	31400a17 	ldw	r5,40(r6)
  80f9b0:	28c07e2b 	ldhuio	r3,504(r5)
  80f9b4:	28807dab 	ldhuio	r2,502(r5)
  80f9b8:	1806943a 	slli	r3,r3,16
  80f9bc:	10bfffcc 	andi	r2,r2,65535
  80f9c0:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80f9c4:	29007f2b 	ldhuio	r4,508(r5)
  80f9c8:	28807eab 	ldhuio	r2,506(r5)
  80f9cc:	2008943a 	slli	r4,r4,16
  80f9d0:	10bfffcc 	andi	r2,r2,65535
  80f9d4:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80f9d8:	013fbf0e 	bge	zero,r4,80f8d8 <Check_for_Master_Boot_Record+0x18>
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
  80f9dc:	00800044 	movi	r2,1
		            
					// Check if the partition is valid
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
  80f9e0:	d1277c15 	stw	r4,-25104(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  80f9e4:	d0e77b15 	stw	r3,-25108(gp)
  80f9e8:	003fbc06 	br	80f8dc <Check_for_Master_Boot_Record+0x1c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80f9ec:	31400a17 	ldw	r5,40(r6)
  80f9f0:	28c0722b 	ldhuio	r3,456(r5)
  80f9f4:	288071ab 	ldhuio	r2,454(r5)
  80f9f8:	1806943a 	slli	r3,r3,16
  80f9fc:	10bfffcc 	andi	r2,r2,65535
  80fa00:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80fa04:	2900732b 	ldhuio	r4,460(r5)
  80fa08:	288072ab 	ldhuio	r2,458(r5)
  80fa0c:	2008943a 	slli	r4,r4,16
  80fa10:	10bfffcc 	andi	r2,r2,65535
  80fa14:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80fa18:	013fc30e 	bge	zero,r4,80f928 <Check_for_Master_Boot_Record+0x68>
  80fa1c:	003fef06 	br	80f9dc <Check_for_Master_Boot_Record+0x11c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80fa20:	31400a17 	ldw	r5,40(r6)
  80fa24:	28c0762b 	ldhuio	r3,472(r5)
  80fa28:	288075ab 	ldhuio	r2,470(r5)
  80fa2c:	1806943a 	slli	r3,r3,16
  80fa30:	10bfffcc 	andi	r2,r2,65535
  80fa34:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80fa38:	2900772b 	ldhuio	r4,476(r5)
  80fa3c:	288076ab 	ldhuio	r2,474(r5)
  80fa40:	2008943a 	slli	r4,r4,16
  80fa44:	10bfffcc 	andi	r2,r2,65535
  80fa48:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80fa4c:	013fc10e 	bge	zero,r4,80f954 <Check_for_Master_Boot_Record+0x94>
  80fa50:	003fe206 	br	80f9dc <Check_for_Master_Boot_Record+0x11c>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80fa54:	31400a17 	ldw	r5,40(r6)
  80fa58:	28c07a2b 	ldhuio	r3,488(r5)
  80fa5c:	288079ab 	ldhuio	r2,486(r5)
  80fa60:	1806943a 	slli	r3,r3,16
  80fa64:	10bfffcc 	andi	r2,r2,65535
  80fa68:	1886b03a 	or	r3,r3,r2
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80fa6c:	29007b2b 	ldhuio	r4,492(r5)
  80fa70:	28807aab 	ldhuio	r2,490(r5)
  80fa74:	2008943a 	slli	r4,r4,16
  80fa78:	10bfffcc 	andi	r2,r2,65535
  80fa7c:	2088b03a 	or	r4,r4,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
  80fa80:	013fbf0e 	bge	zero,r4,80f980 <Check_for_Master_Boot_Record+0xc0>
  80fa84:	003fd506 	br	80f9dc <Check_for_Master_Boot_Record+0x11c>

0080fa88 <Look_for_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fa88:	d0a77d17 	ldw	r2,-25100(gp)
}


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  80fa8c:	deffff04 	addi	sp,sp,-4
  80fa90:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fa94:	10001726 	beq	r2,zero,80faf4 <Look_for_FAT16+0x6c>
  80fa98:	d0e77517 	ldw	r3,-25132(gp)
  80fa9c:	1880002b 	ldhuio	r2,0(r3)
  80faa0:	1080008c 	andi	r2,r2,2
  80faa4:	10001326 	beq	r2,zero,80faf4 <Look_for_FAT16+0x6c>
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80faa8:	d0a77717 	ldw	r2,-25124(gp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  80faac:	d0277b15 	stw	zero,-25108(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  80fab0:	d0277c15 	stw	zero,-25104(gp)
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80fab4:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;              

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80fab8:	10ffffcc 	andi	r3,r2,65535
  80fabc:	18e0001c 	xori	r3,r3,32768
  80fac0:	18e00004 	addi	r3,r3,-32768
  80fac4:	18000616 	blt	r3,zero,80fae0 <Look_for_FAT16+0x58>
  80fac8:	10c3000c 	andi	r3,r2,3072
  80facc:	00830004 	movi	r2,3072
  80fad0:	18800326 	beq	r3,r2,80fae0 <Look_for_FAT16+0x58>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80fad4:	00810004 	movi	r2,1024
  80fad8:	18802526 	beq	r3,r2,80fb70 <Look_for_FAT16+0xe8>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80fadc:	18001526 	beq	r3,zero,80fb34 <Look_for_FAT16+0xac>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80fae0:	0009883a 	mov	r4,zero
				}
			}
		}
	}
	return result;
}
  80fae4:	2005883a 	mov	r2,r4
  80fae8:	dfc00017 	ldw	ra,0(sp)
  80faec:	dec00104 	addi	sp,sp,4
  80faf0:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80faf4:	d0e77317 	ldw	r3,-25140(gp)
  80faf8:	00800044 	movi	r2,1
  80fafc:	18bff81e 	bne	r3,r2,80fae0 <Look_for_FAT16+0x58>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fb00:	00802074 	movhi	r2,129
  80fb04:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80fb08:	00c02074 	movhi	r3,129
  80fb0c:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fb10:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80fb14:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80fb18:	d0277415 	stw	zero,-25136(gp)
  80fb1c:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80fb20:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80fb24:	183fff15 	stw	zero,-4(r3)
  80fb28:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80fb2c:	18bffc1e 	bne	r3,r2,80fb20 <Look_for_FAT16+0x98>
  80fb30:	003feb06 	br	80fae0 <Look_for_FAT16+0x58>
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80fb34:	080f8c00 	call	80f8c0 <Check_for_Master_Boot_Record>
  80fb38:	103fe926 	beq	r2,zero,80fae0 <Look_for_FAT16+0x58>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80fb3c:	d1277b17 	ldw	r4,-25108(gp)
  80fb40:	080f5500 	call	80f550 <Check_for_DOS_FAT>
  80fb44:	1009883a 	mov	r4,r2
				}                        
			}
			if (result == true)
  80fb48:	00800044 	movi	r2,1
  80fb4c:	20bfe51e 	bne	r4,r2,80fae4 <Look_for_FAT16+0x5c>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80fb50:	01402074 	movhi	r5,129
  80fb54:	295f4e04 	addi	r5,r5,32056
  80fb58:	28c01083 	ldbu	r3,66(r5)
  80fb5c:	00800404 	movi	r2,16
  80fb60:	18bfdf1e 	bne	r3,r2,80fae0 <Look_for_FAT16+0x58>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80fb64:	2880058b 	ldhu	r2,22(r5)
  80fb68:	d0a77c15 	stw	r2,-25104(gp)
  80fb6c:	003fdd06 	br	80fae4 <Look_for_FAT16+0x5c>
		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80fb70:	0009883a 	mov	r4,zero
  80fb74:	080f5500 	call	80f550 <Check_for_DOS_FAT>
  80fb78:	1009883a 	mov	r4,r2
  80fb7c:	003ff206 	br	80fb48 <Look_for_FAT16+0xc0>

0080fb80 <alt_up_sd_card_is_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fb80:	d0a77d17 	ldw	r2,-25100(gp)
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  80fb84:	deffff04 	addi	sp,sp,-4
  80fb88:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fb8c:	10002626 	beq	r2,zero,80fc28 <alt_up_sd_card_is_FAT16+0xa8>
  80fb90:	d0e77517 	ldw	r3,-25132(gp)
  80fb94:	1880002b 	ldhuio	r2,0(r3)
  80fb98:	1080008c 	andi	r2,r2,2
  80fb9c:	10002226 	beq	r2,zero,80fc28 <alt_up_sd_card_is_FAT16+0xa8>
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  80fba0:	d0a77317 	ldw	r2,-25140(gp)
  80fba4:	10002f1e 	bne	r2,zero,80fc64 <alt_up_sd_card_is_FAT16+0xe4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fba8:	1880002b 	ldhuio	r2,0(r3)
  80fbac:	1080008c 	andi	r2,r2,2
  80fbb0:	10002626 	beq	r2,zero,80fc4c <alt_up_sd_card_is_FAT16+0xcc>
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80fbb4:	d0a77717 	ldw	r2,-25124(gp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  80fbb8:	d0277b15 	stw	zero,-25108(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  80fbbc:	d0277c15 	stw	zero,-25104(gp)
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
  80fbc0:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
		fat_partition_size_in_512_byte_sectors = 0;              

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80fbc4:	10ffffcc 	andi	r3,r2,65535
  80fbc8:	18e0001c 	xori	r3,r3,32768
  80fbcc:	18e00004 	addi	r3,r3,-32768
  80fbd0:	18001e16 	blt	r3,zero,80fc4c <alt_up_sd_card_is_FAT16+0xcc>
  80fbd4:	10c3000c 	andi	r3,r2,3072
  80fbd8:	00830004 	movi	r2,3072
  80fbdc:	18801b26 	beq	r3,r2,80fc4c <alt_up_sd_card_is_FAT16+0xcc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80fbe0:	00810004 	movi	r2,1024
  80fbe4:	18803026 	beq	r3,r2,80fca8 <alt_up_sd_card_is_FAT16+0x128>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80fbe8:	1800181e 	bne	r3,zero,80fc4c <alt_up_sd_card_is_FAT16+0xcc>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80fbec:	080f8c00 	call	80f8c0 <Check_for_Master_Boot_Record>
  80fbf0:	10001626 	beq	r2,zero,80fc4c <alt_up_sd_card_is_FAT16+0xcc>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80fbf4:	d1277b17 	ldw	r4,-25108(gp)
  80fbf8:	080f5500 	call	80f550 <Check_for_DOS_FAT>
  80fbfc:	1009883a 	mov	r4,r2
				}                        
			}
			if (result == true)
  80fc00:	00800044 	movi	r2,1
  80fc04:	2080121e 	bne	r4,r2,80fc50 <alt_up_sd_card_is_FAT16+0xd0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80fc08:	01402074 	movhi	r5,129
  80fc0c:	295f4e04 	addi	r5,r5,32056
  80fc10:	28c01083 	ldbu	r3,66(r5)
  80fc14:	00800404 	movi	r2,16
  80fc18:	18800c1e 	bne	r3,r2,80fc4c <alt_up_sd_card_is_FAT16+0xcc>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80fc1c:	2880058b 	ldhu	r2,22(r5)
  80fc20:	d0a77c15 	stw	r2,-25104(gp)
  80fc24:	00000a06 	br	80fc50 <alt_up_sd_card_is_FAT16+0xd0>

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80fc28:	d0e77317 	ldw	r3,-25140(gp)
  80fc2c:	00800044 	movi	r2,1
  80fc30:	18801026 	beq	r3,r2,80fc74 <alt_up_sd_card_is_FAT16+0xf4>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
  80fc34:	0005883a 	mov	r2,zero
		result = is_sd_card_formated_as_FAT16;
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  80fc38:	d0277315 	stw	zero,-25140(gp)
		is_sd_card_formated_as_FAT16 = false;
  80fc3c:	d0277415 	stw	zero,-25136(gp)
	}

	return result;
}
  80fc40:	dfc00017 	ldw	ra,0(sp)
  80fc44:	dec00104 	addi	sp,sp,4
  80fc48:	f800283a 	ret
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80fc4c:	0009883a 	mov	r4,zero
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
  80fc50:	00802074 	movhi	r2,129
  80fc54:	109f4904 	addi	r2,r2,32036
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
  80fc58:	d1277315 	stw	r4,-25140(gp)
			search_data.valid = false;
  80fc5c:	10000415 	stw	zero,16(r2)
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  80fc60:	d1277415 	stw	r4,-25136(gp)
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
		}
		result = is_sd_card_formated_as_FAT16;
  80fc64:	d0a77417 	ldw	r2,-25136(gp)
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
  80fc68:	dfc00017 	ldw	ra,0(sp)
  80fc6c:	dec00104 	addi	sp,sp,4
  80fc70:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fc74:	00802074 	movhi	r2,129
  80fc78:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80fc7c:	00c02074 	movhi	r3,129
  80fc80:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fc84:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80fc88:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80fc8c:	d0277415 	stw	zero,-25136(gp)
  80fc90:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80fc94:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80fc98:	183fff15 	stw	zero,-4(r3)
  80fc9c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80fca0:	18bffc1e 	bne	r3,r2,80fc94 <alt_up_sd_card_is_FAT16+0x114>
  80fca4:	003fe306 	br	80fc34 <alt_up_sd_card_is_FAT16+0xb4>
		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80fca8:	0009883a 	mov	r4,zero
  80fcac:	080f5500 	call	80f550 <Check_for_DOS_FAT>
  80fcb0:	1009883a 	mov	r4,r2
  80fcb4:	003fd206 	br	80fc00 <alt_up_sd_card_is_FAT16+0x80>

0080fcb8 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80fcb8:	2006d23a 	srli	r3,r4,8
  80fcbc:	d0a77b17 	ldw	r2,-25108(gp)
}


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  80fcc0:	defffd04 	addi	sp,sp,-12
  80fcc4:	dc400115 	stw	r17,4(sp)
  80fcc8:	dc000015 	stw	r16,0(sp)
  80fccc:	dfc00215 	stw	ra,8(sp)
  80fcd0:	2021883a 	mov	r16,r4
  80fcd4:	2823883a 	mov	r17,r5
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80fcd8:	1889883a 	add	r4,r3,r2
    
    if (first_fat)
  80fcdc:	30001d26 	beq	r6,zero,80fd54 <mark_cluster+0x9c>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fce0:	00802074 	movhi	r2,129
  80fce4:	109f4e04 	addi	r2,r2,32056
  80fce8:	10c01117 	ldw	r3,68(r2)
  80fcec:	20c7883a 	add	r3,r4,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  80fcf0:	d0a77f17 	ldw	r2,-25092(gp)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fcf4:	1809883a 	mov	r4,r3
  80fcf8:	000b883a 	mov	r5,zero
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  80fcfc:	18800326 	beq	r3,r2,80fd0c <mark_cluster+0x54>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fd00:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80fd04:	0007883a 	mov	r3,zero
  80fd08:	10000c26 	beq	r2,zero,80fd3c <mark_cluster+0x84>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  80fd0c:	d0e77d17 	ldw	r3,-25100(gp)
  80fd10:	80803fcc 	andi	r2,r16,255
  80fd14:	897fffcc 	andi	r5,r17,65535
  80fd18:	19000a17 	ldw	r4,40(r3)
  80fd1c:	2960001c 	xori	r5,r5,32768
  80fd20:	1085883a 	add	r2,r2,r2
  80fd24:	29600004 	addi	r5,r5,-32768
  80fd28:	1105883a 	add	r2,r2,r4
  80fd2c:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  80fd30:	00800044 	movi	r2,1
  80fd34:	d0a77e15 	stw	r2,-25096(gp)
  80fd38:	1007883a 	mov	r3,r2
    return true;
}
  80fd3c:	1805883a 	mov	r2,r3
  80fd40:	dfc00217 	ldw	ra,8(sp)
  80fd44:	dc400117 	ldw	r17,4(sp)
  80fd48:	dc000017 	ldw	r16,0(sp)
  80fd4c:	dec00304 	addi	sp,sp,12
  80fd50:	f800283a 	ret
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  80fd54:	00802074 	movhi	r2,129
  80fd58:	109f4e04 	addi	r2,r2,32056
  80fd5c:	10c01217 	ldw	r3,72(r2)
  80fd60:	20c7883a 	add	r3,r4,r3
  80fd64:	003fe206 	br	80fcf0 <mark_cluster+0x38>

0080fd68 <get_cluster_flag>:
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fd68:	defffd04 	addi	sp,sp,-12
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fd6c:	00802074 	movhi	r2,129
  80fd70:	109f4e04 	addi	r2,r2,32056
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fd74:	dc000015 	stw	r16,0(sp)
  80fd78:	2021883a 	mov	r16,r4
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fd7c:	11001117 	ldw	r4,68(r2)
  80fd80:	d0a77b17 	ldw	r2,-25108(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fd84:	8006d23a 	srli	r3,r16,8
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fd88:	dc400115 	stw	r17,4(sp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80fd8c:	1105883a 	add	r2,r2,r4
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80fd90:	1887883a 	add	r3,r3,r2
     
    if (sector_index != current_sector_index)
  80fd94:	d0a77f17 	ldw	r2,-25092(gp)
}


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80fd98:	2823883a 	mov	r17,r5
  80fd9c:	dfc00215 	stw	ra,8(sp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fda0:	1809883a 	mov	r4,r3
  80fda4:	000b883a 	mov	r5,zero
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  80fda8:	18800326 	beq	r3,r2,80fdb8 <get_cluster_flag+0x50>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80fdac:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80fdb0:	0009883a 	mov	r4,zero
  80fdb4:	10000826 	beq	r2,zero,80fdd8 <get_cluster_flag+0x70>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  80fdb8:	d0e77d17 	ldw	r3,-25100(gp)
  80fdbc:	80803fcc 	andi	r2,r16,255
  80fdc0:	1085883a 	add	r2,r2,r2
  80fdc4:	19000a17 	ldw	r4,40(r3)
  80fdc8:	1105883a 	add	r2,r2,r4
  80fdcc:	10c0002b 	ldhuio	r3,0(r2)
  80fdd0:	01000044 	movi	r4,1
  80fdd4:	88c0000d 	sth	r3,0(r17)
    return true;
}
  80fdd8:	2005883a 	mov	r2,r4
  80fddc:	dfc00217 	ldw	ra,8(sp)
  80fde0:	dc400117 	ldw	r17,4(sp)
  80fde4:	dc000017 	ldw	r16,0(sp)
  80fde8:	dec00304 	addi	sp,sp,12
  80fdec:	f800283a 	ret

0080fdf0 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80fdf0:	d0a77e17 	ldw	r2,-25096(gp)
  80fdf4:	10000c26 	beq	r2,zero,80fe28 <Save_Modified_Sector+0x38>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fdf8:	d0a77d17 	ldw	r2,-25100(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80fdfc:	d1677f17 	ldw	r5,-25092(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fe00:	10000426 	beq	r2,zero,80fe14 <Save_Modified_Sector+0x24>
  80fe04:	d0e77517 	ldw	r3,-25132(gp)
  80fe08:	1880002b 	ldhuio	r2,0(r3)
  80fe0c:	1080008c 	andi	r2,r2,2
  80fe10:	1000151e 	bne	r2,zero,80fe68 <Save_Modified_Sector+0x78>
    {
        result = true;
    }
	else if (initialized == true)
  80fe14:	d0e77317 	ldw	r3,-25140(gp)
  80fe18:	00800044 	movi	r2,1
  80fe1c:	18800426 	beq	r3,r2,80fe30 <Save_Modified_Sector+0x40>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80fe20:	0005883a 	mov	r2,zero
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
}
  80fe24:	f800283a 	ret

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  80fe28:	00800044 	movi	r2,1
  80fe2c:	f800283a 	ret
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fe30:	00802074 	movhi	r2,129
  80fe34:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80fe38:	00c02074 	movhi	r3,129
  80fe3c:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80fe40:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80fe44:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80fe48:	d0277415 	stw	zero,-25136(gp)
  80fe4c:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80fe50:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80fe54:	183fff15 	stw	zero,-4(r3)
  80fe58:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80fe5c:	18bffc1e 	bne	r3,r2,80fe50 <Save_Modified_Sector+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80fe60:	0005883a 	mov	r2,zero
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
}
  80fe64:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80fe68:	2806927a 	slli	r3,r5,9
  80fe6c:	d0a77917 	ldw	r2,-25116(gp)
  80fe70:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80fe74:	d0a77817 	ldw	r2,-25120(gp)
  80fe78:	01000604 	movi	r4,24
  80fe7c:	1100002d 	sthio	r4,0(r2)
  80fe80:	d1277517 	ldw	r4,-25132(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80fe84:	2080002b 	ldhuio	r2,0(r4)
        } while ((reg_state & 0x04)!=0);
  80fe88:	10bfffcc 	andi	r2,r2,65535
  80fe8c:	10c0010c 	andi	r3,r2,4
  80fe90:	183ffc1e 	bne	r3,zero,80fe84 <Save_Modified_Sector+0x94>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80fe94:	1080040c 	andi	r2,r2,16
  80fe98:	103fe11e 	bne	r2,zero,80fe20 <Save_Modified_Sector+0x30>
        {
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
  80fe9c:	00800044 	movi	r2,1
  80fea0:	d1677f15 	stw	r5,-25092(gp)
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
            current_sector_modified = false;
  80fea4:	d0277e15 	stw	zero,-25096(gp)
  80fea8:	f800283a 	ret

0080feac <alt_up_sd_card_find_next>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80feac:	d0a77d17 	ldw	r2,-25100(gp)
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  80feb0:	deffe404 	addi	sp,sp,-112
  80feb4:	dd801815 	stw	r22,96(sp)
  80feb8:	dfc01b15 	stw	ra,108(sp)
  80febc:	df001a15 	stw	fp,104(sp)
  80fec0:	ddc01915 	stw	r23,100(sp)
  80fec4:	dd401715 	stw	r21,92(sp)
  80fec8:	dd001615 	stw	r20,88(sp)
  80fecc:	dcc01515 	stw	r19,84(sp)
  80fed0:	dc801415 	stw	r18,80(sp)
  80fed4:	dc401315 	stw	r17,76(sp)
  80fed8:	dc001215 	stw	r16,72(sp)
  80fedc:	202d883a 	mov	r22,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80fee0:	10001426 	beq	r2,zero,80ff34 <alt_up_sd_card_find_next+0x88>
  80fee4:	d0e77517 	ldw	r3,-25132(gp)
  80fee8:	1880002b 	ldhuio	r2,0(r3)
  80feec:	1080008c 	andi	r2,r2,2
  80fef0:	10001026 	beq	r2,zero,80ff34 <alt_up_sd_card_find_next+0x88>
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80fef4:	d0a77417 	ldw	r2,-25136(gp)
  80fef8:	10001e1e 	bne	r2,zero,80ff74 <alt_up_sd_card_find_next+0xc8>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  80fefc:	01400084 	movi	r5,2
			// Call Find_First first.
			result = 3;
		}
	}
	return result;
}
  80ff00:	2805883a 	mov	r2,r5
  80ff04:	dfc01b17 	ldw	ra,108(sp)
  80ff08:	df001a17 	ldw	fp,104(sp)
  80ff0c:	ddc01917 	ldw	r23,100(sp)
  80ff10:	dd801817 	ldw	r22,96(sp)
  80ff14:	dd401717 	ldw	r21,92(sp)
  80ff18:	dd001617 	ldw	r20,88(sp)
  80ff1c:	dcc01517 	ldw	r19,84(sp)
  80ff20:	dc801417 	ldw	r18,80(sp)
  80ff24:	dc401317 	ldw	r17,76(sp)
  80ff28:	dc001217 	ldw	r16,72(sp)
  80ff2c:	dec01c04 	addi	sp,sp,112
  80ff30:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  80ff34:	d0e77317 	ldw	r3,-25140(gp)
  80ff38:	00800044 	movi	r2,1
  80ff3c:	18bfef1e 	bne	r3,r2,80fefc <alt_up_sd_card_find_next+0x50>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ff40:	00802074 	movhi	r2,129
  80ff44:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  80ff48:	00c02074 	movhi	r3,129
  80ff4c:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  80ff50:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  80ff54:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  80ff58:	d0277415 	stw	zero,-25136(gp)
  80ff5c:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  80ff60:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  80ff64:	183fff15 	stw	zero,-4(r3)
  80ff68:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80ff6c:	18bffc1e 	bne	r3,r2,80ff60 <alt_up_sd_card_find_next+0xb4>
  80ff70:	003fe206 	br	80fefc <alt_up_sd_card_find_next+0x50>
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
  80ff74:	05c02074 	movhi	r23,129
  80ff78:	bddf4904 	addi	r23,r23,32036
  80ff7c:	b8800417 	ldw	r2,16(r23)
  80ff80:	1000021e 	bne	r2,zero,80ff8c <alt_up_sd_card_find_next+0xe0>
  80ff84:	014000c4 	movi	r5,3
  80ff88:	003fdd06 	br	80ff00 <alt_up_sd_card_find_next+0x54>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80ff8c:	b9800117 	ldw	r6,4(r23)

			if (cluster == 0)
  80ff90:	30003f26 	beq	r6,zero,810090 <alt_up_sd_card_find_next+0x1e4>
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80ff94:	b880030f 	ldh	r2,12(r23)
  80ff98:	00c00084 	movi	r3,2
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80ff9c:	3027883a 	mov	r19,r6
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80ffa0:	d8c0110d 	sth	r3,68(sp)
  80ffa4:	14400044 	addi	r17,r2,1
  80ffa8:	07002074 	movhi	fp,129
  80ffac:	e71f4e04 	addi	fp,fp,32056
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80ffb0:	e4000383 	ldbu	r16,14(fp)
  80ffb4:	993fff84 	addi	r4,r19,-2
  80ffb8:	800b883a 	mov	r5,r16
  80ffbc:	0802b980 	call	802b98 <__mulsi3>
  80ffc0:	e0c01417 	ldw	r3,80(fp)
					int sector_index = search_data.current_sector_in_cluster;
  80ffc4:	bc800217 	ldw	r18,8(r23)
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80ffc8:	10c5883a 	add	r2,r2,r3
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80ffcc:	94001d0e 	bge	r18,r16,810044 <alt_up_sd_card_find_next+0x198>
  80ffd0:	14ab883a 	add	r21,r2,r18
  80ffd4:	dd000104 	addi	r20,sp,4
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80ffd8:	d1677b17 	ldw	r5,-25108(gp)
  80ffdc:	a809883a 	mov	r4,r21
  80ffe0:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  80ffe4:	1000a626 	beq	r2,zero,810280 <alt_up_sd_card_find_next+0x3d4>
						{        
							for (; file_counter < 16; file_counter++)
  80ffe8:	008003c4 	movi	r2,15
  80ffec:	14401016 	blt	r2,r17,810030 <alt_up_sd_card_find_next+0x184>
  80fff0:	8820917a 	slli	r16,r17,5
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  80fff4:	8009883a 	mov	r4,r16
  80fff8:	a00b883a 	mov	r5,r20
  80fffc:	980d883a 	mov	r6,r19
  810000:	900f883a 	mov	r7,r18
  810004:	080ee6c0 	call	80ee6c <Read_File_Record_At_Offset>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  810008:	84000804 	addi	r16,r16,32
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  81000c:	10000526 	beq	r2,zero,810024 <alt_up_sd_card_find_next+0x178>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  810010:	d9000103 	ldbu	r4,4(sp)
  810014:	20c03fcc 	andi	r3,r4,255
  810018:	18000226 	beq	r3,zero,810024 <alt_up_sd_card_find_next+0x178>
  81001c:	00803944 	movi	r2,229
  810020:	1880451e 	bne	r3,r2,810138 <alt_up_sd_card_find_next+0x28c>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  810024:	8c400044 	addi	r17,r17,1
  810028:	00800404 	movi	r2,16
  81002c:	88bff11e 	bne	r17,r2,80fff4 <alt_up_sd_card_find_next+0x148>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  810030:	e0800383 	ldbu	r2,14(fp)
  810034:	94800044 	addi	r18,r18,1
  810038:	ad400044 	addi	r21,r21,1
  81003c:	0023883a 	mov	r17,zero
  810040:	90bfe516 	blt	r18,r2,80ffd8 <alt_up_sd_card_find_next+0x12c>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810044:	e0c01117 	ldw	r3,68(fp)
  810048:	d0a77b17 	ldw	r2,-25108(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  81004c:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810050:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  810054:	d0e77f17 	ldw	r3,-25092(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  810058:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  81005c:	20c08b26 	beq	r4,r3,81028c <alt_up_sd_card_find_next+0x3e0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  810060:	000b883a 	mov	r5,zero
  810064:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  810068:	1000881e 	bne	r2,zero,81028c <alt_up_sd_card_find_next+0x3e0>
						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
							{
								result = -1;
								search_data.valid = false;
  81006c:	00bfffc4 	movi	r2,-1
  810070:	d880110d 	sth	r2,68(sp)
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  810074:	00bffdd4 	movui	r2,65527
  810078:	14ffcd0e 	bge	r2,r19,80ffb0 <alt_up_sd_card_find_next+0x104>
  81007c:	d8c0110b 	ldhu	r3,68(sp)
  810080:	197fffcc 	andi	r5,r3,65535
  810084:	2960001c 	xori	r5,r5,32768
  810088:	29600004 	addi	r5,r5,-32768
  81008c:	003f9c06 	br	80ff00 <alt_up_sd_card_find_next+0x54>
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  810090:	07002074 	movhi	fp,129
  810094:	e71f4e04 	addi	fp,fp,32056
  810098:	e080050b 	ldhu	r2,20(fp)
  81009c:	e0c0030b 	ldhu	r3,12(fp)
				int sector_index = search_data.current_sector_in_cluster;
  8100a0:	bc800217 	ldw	r18,8(r23)
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8100a4:	1004917a 	slli	r2,r2,5
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
  8100a8:	b900030b 	ldhu	r4,12(r23)
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8100ac:	10e9283a 	div	r20,r2,r3
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  8100b0:	95001f0e 	bge	r18,r20,810130 <alt_up_sd_card_find_next+0x284>
			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
  8100b4:	20bfffcc 	andi	r2,r4,65535
  8100b8:	10a0001c 	xori	r2,r2,32768
  8100bc:	10a00004 	addi	r2,r2,-32768
  8100c0:	14400044 	addi	r17,r2,1
  8100c4:	dcc00104 	addi	r19,sp,4
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  8100c8:	e1001317 	ldw	r4,76(fp)
  8100cc:	d1677b17 	ldw	r5,-25108(gp)
  8100d0:	9109883a 	add	r4,r18,r4
  8100d4:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8100d8:	10001526 	beq	r2,zero,810130 <alt_up_sd_card_find_next+0x284>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  8100dc:	008003c4 	movi	r2,15
  8100e0:	14401016 	blt	r2,r17,810124 <alt_up_sd_card_find_next+0x278>
  8100e4:	8820917a 	slli	r16,r17,5
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  8100e8:	8009883a 	mov	r4,r16
  8100ec:	980b883a 	mov	r5,r19
  8100f0:	000d883a 	mov	r6,zero
  8100f4:	900f883a 	mov	r7,r18
  8100f8:	080ee6c0 	call	80ee6c <Read_File_Record_At_Offset>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  8100fc:	84000804 	addi	r16,r16,32
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  810100:	10000526 	beq	r2,zero,810118 <alt_up_sd_card_find_next+0x26c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  810104:	d9000103 	ldbu	r4,4(sp)
  810108:	20c03fcc 	andi	r3,r4,255
  81010c:	18000226 	beq	r3,zero,810118 <alt_up_sd_card_find_next+0x26c>
  810110:	00803944 	movi	r2,229
  810114:	1880541e 	bne	r3,r2,810268 <alt_up_sd_card_find_next+0x3bc>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  810118:	8c400044 	addi	r17,r17,1
  81011c:	00800404 	movi	r2,16
  810120:	88bff11e 	bne	r17,r2,8100e8 <alt_up_sd_card_find_next+0x23c>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  810124:	94800044 	addi	r18,r18,1
  810128:	0023883a 	mov	r17,zero
  81012c:	953fe61e 	bne	r18,r20,8100c8 <alt_up_sd_card_find_next+0x21c>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
  810130:	017fffc4 	movi	r5,-1
  810134:	003f7206 	br	80ff00 <alt_up_sd_card_find_next+0x54>
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810138:	00800804 	movi	r2,32
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
										search_data.file_index_in_sector = file_counter;
										search_data.current_sector_in_cluster = sector_index;
  81013c:	bc800215 	stw	r18,8(r23)
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  810140:	bcc00115 	stw	r19,4(r23)
										search_data.file_index_in_sector = file_counter;
  810144:	bc40030d 	sth	r17,12(r23)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810148:	18804b26 	beq	r3,r2,810278 <alt_up_sd_card_find_next+0x3cc>
		{
			file_name[flength] = file_record->name[index];
  81014c:	b1000005 	stb	r4,0(r22)
  810150:	01000044 	movi	r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810154:	d8c00143 	ldbu	r3,5(sp)
  810158:	01800804 	movi	r6,32
  81015c:	18803fcc 	andi	r2,r3,255
  810160:	11800326 	beq	r2,r6,810170 <alt_up_sd_card_find_next+0x2c4>
		{
			file_name[flength] = file_record->name[index];
  810164:	b105883a 	add	r2,r22,r4
  810168:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  81016c:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810170:	d8c00183 	ldbu	r3,6(sp)
  810174:	18803fcc 	andi	r2,r3,255
  810178:	11800326 	beq	r2,r6,810188 <alt_up_sd_card_find_next+0x2dc>
		{
			file_name[flength] = file_record->name[index];
  81017c:	b105883a 	add	r2,r22,r4
  810180:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  810184:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810188:	d8c001c3 	ldbu	r3,7(sp)
  81018c:	18803fcc 	andi	r2,r3,255
  810190:	11800326 	beq	r2,r6,8101a0 <alt_up_sd_card_find_next+0x2f4>
		{
			file_name[flength] = file_record->name[index];
  810194:	b105883a 	add	r2,r22,r4
  810198:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  81019c:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  8101a0:	d8c00203 	ldbu	r3,8(sp)
  8101a4:	18803fcc 	andi	r2,r3,255
  8101a8:	11800326 	beq	r2,r6,8101b8 <alt_up_sd_card_find_next+0x30c>
		{
			file_name[flength] = file_record->name[index];
  8101ac:	b105883a 	add	r2,r22,r4
  8101b0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  8101b4:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  8101b8:	d8c00243 	ldbu	r3,9(sp)
  8101bc:	18803fcc 	andi	r2,r3,255
  8101c0:	11800326 	beq	r2,r6,8101d0 <alt_up_sd_card_find_next+0x324>
		{
			file_name[flength] = file_record->name[index];
  8101c4:	b105883a 	add	r2,r22,r4
  8101c8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  8101cc:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  8101d0:	d8c00283 	ldbu	r3,10(sp)
  8101d4:	18803fcc 	andi	r2,r3,255
  8101d8:	11800326 	beq	r2,r6,8101e8 <alt_up_sd_card_find_next+0x33c>
		{
			file_name[flength] = file_record->name[index];
  8101dc:	b105883a 	add	r2,r22,r4
  8101e0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  8101e4:	21000044 	addi	r4,r4,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  8101e8:	d8c002c3 	ldbu	r3,11(sp)
  8101ec:	18803fcc 	andi	r2,r3,255
  8101f0:	11800326 	beq	r2,r6,810200 <alt_up_sd_card_find_next+0x354>
		{
			file_name[flength] = file_record->name[index];
  8101f4:	b105883a 	add	r2,r22,r4
  8101f8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
  8101fc:	21000044 	addi	r4,r4,1
		}
	}
	if (file_record->extension[0] != ' ')
  810200:	d9400303 	ldbu	r5,12(sp)
  810204:	29801426 	beq	r5,r6,810258 <alt_up_sd_card_find_next+0x3ac>
	{
		file_name[flength] = '.';
  810208:	b107883a 	add	r3,r22,r4
  81020c:	00800b84 	movi	r2,46
  810210:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  810214:	21000044 	addi	r4,r4,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  810218:	29800326 	beq	r5,r6,810228 <alt_up_sd_card_find_next+0x37c>
			{
				file_name[flength] = file_record->extension[index];
  81021c:	b105883a 	add	r2,r22,r4
  810220:	11400005 	stb	r5,0(r2)
				flength = flength + 1;
  810224:	21000044 	addi	r4,r4,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  810228:	d8c00343 	ldbu	r3,13(sp)
  81022c:	18803fcc 	andi	r2,r3,255
  810230:	11800326 	beq	r2,r6,810240 <alt_up_sd_card_find_next+0x394>
			{
				file_name[flength] = file_record->extension[index];
  810234:	b105883a 	add	r2,r22,r4
  810238:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  81023c:	21000044 	addi	r4,r4,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
  810240:	d8c00383 	ldbu	r3,14(sp)
  810244:	18803fcc 	andi	r2,r3,255
  810248:	11800326 	beq	r2,r6,810258 <alt_up_sd_card_find_next+0x3ac>
			{
				file_name[flength] = file_record->extension[index];
  81024c:	b105883a 	add	r2,r22,r4
  810250:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
  810254:	21000044 	addi	r4,r4,1
			}
		}
	}
	file_name[flength] = 0;
  810258:	b105883a 	add	r2,r22,r4
  81025c:	000b883a 	mov	r5,zero
  810260:	10000005 	stb	zero,0(r2)
  810264:	003f2606 	br	80ff00 <alt_up_sd_card_find_next+0x54>
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810268:	00800804 	movi	r2,32
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
									search_data.current_sector_in_cluster = sector_index;
  81026c:	bc800215 	stw	r18,8(r23)
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  810270:	bc40030d 	sth	r17,12(r23)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
  810274:	18bfb51e 	bne	r3,r2,81014c <alt_up_sd_card_find_next+0x2a0>
  810278:	0009883a 	mov	r4,zero
  81027c:	003fb506 	br	810154 <alt_up_sd_card_find_next+0x2a8>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  810280:	e0800383 	ldbu	r2,14(fp)
  810284:	90bf7b16 	blt	r18,r2,810074 <alt_up_sd_card_find_next+0x1c8>
  810288:	003f6e06 	br	810044 <alt_up_sd_card_find_next+0x198>
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  81028c:	d0e77d17 	ldw	r3,-25100(gp)
  810290:	98803fcc 	andi	r2,r19,255
  810294:	1085883a 	add	r2,r2,r2
  810298:	19000a17 	ldw	r4,40(r3)
  81029c:	1105883a 	add	r2,r2,r4
  8102a0:	10c0002b 	ldhuio	r3,0(r2)
  8102a4:	d8c0000d 	sth	r3,0(sp)
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  8102a8:	d880000f 	ldh	r2,0(sp)
  8102ac:	00fffe14 	movui	r3,65528
  8102b0:	14fffe0c 	andi	r19,r2,65528
  8102b4:	98ff6f1e 	bne	r19,r3,810074 <alt_up_sd_card_find_next+0x1c8>
							{
								result = -1;
								search_data.valid = false;
  8102b8:	017fffc4 	movi	r5,-1
  8102bc:	b8000415 	stw	zero,16(r23)
  8102c0:	003f0f06 	br	80ff00 <alt_up_sd_card_find_next+0x54>

008102c4 <find_file_in_directory>:
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  8102c4:	defff404 	addi	sp,sp,-48
  8102c8:	dd800915 	stw	r22,36(sp)
  8102cc:	dcc00615 	stw	r19,24(sp)
  8102d0:	dc400415 	stw	r17,16(sp)
  8102d4:	202d883a 	mov	r22,r4
  8102d8:	dfc00b15 	stw	ra,44(sp)
  8102dc:	ddc00a15 	stw	r23,40(sp)
  8102e0:	dd400815 	stw	r21,32(sp)
  8102e4:	dd000715 	stw	r20,28(sp)
  8102e8:	dc800515 	stw	r18,20(sp)
  8102ec:	dc000315 	stw	r16,12(sp)

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8102f0:	2809883a 	mov	r4,r5
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  8102f4:	2827883a 	mov	r19,r5
  8102f8:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8102fc:	0803e080 	call	803e08 <strlen>
    
    for(index = 0; index < length; index++)
  810300:	00810f0e 	bge	zero,r2,810740 <find_file_in_directory+0x47c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810304:	98c00007 	ldb	r3,0(r19)
  810308:	01401704 	movi	r5,92
  81030c:	19431026 	beq	r3,r5,810f50 <find_file_in_directory+0xc8c>
  810310:	01000bc4 	movi	r4,47
  810314:	19030e26 	beq	r3,r4,810f50 <find_file_in_directory+0xc8c>
  810318:	0021883a 	mov	r16,zero
  81031c:	00000306 	br	81032c <find_file_in_directory+0x68>
  810320:	18c00007 	ldb	r3,0(r3)
  810324:	19410826 	beq	r3,r5,810748 <find_file_in_directory+0x484>
  810328:	19010726 	beq	r3,r4,810748 <find_file_in_directory+0x484>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  81032c:	84000044 	addi	r16,r16,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810330:	9c07883a 	add	r3,r19,r16
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810334:	143ffa1e 	bne	r2,r16,810320 <find_file_in_directory+0x5c>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810338:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  81033c:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810340:	d88000c5 	stb	r2,3(sp)
  810344:	d8800105 	stb	r2,4(sp)
  810348:	d8800145 	stb	r2,5(sp)
  81034c:	d8800185 	stb	r2,6(sp)
  810350:	d88001c5 	stb	r2,7(sp)
  810354:	d8800205 	stb	r2,8(sp)
  810358:	d8800245 	stb	r2,9(sp)
  81035c:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810360:	d8800005 	stb	r2,0(sp)
  810364:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  810368:	9809883a 	mov	r4,r19
  81036c:	0803e080 	call	803e08 <strlen>
  810370:	102b883a 	mov	r21,r2
  810374:	000d883a 	mov	r6,zero
  810378:	0029883a 	mov	r20,zero
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  81037c:	35401a0e 	bge	r6,r21,8103e8 <find_file_in_directory+0x124>
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  810380:	3507c83a 	sub	r3,r6,r20
  810384:	d88000c4 	addi	r2,sp,3
  810388:	10cb883a 	add	r5,r2,r3
  81038c:	9989883a 	add	r4,r19,r6
  810390:	a811883a 	mov	r8,r21
  810394:	01ffffc4 	movi	r7,-1
  810398:	02400b84 	movi	r9,46
  81039c:	00000806 	br	8103c0 <find_file_in_directory+0xfc>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  8103a0:	31c5c83a 	sub	r2,r6,r7
  8103a4:	16c5883a 	add	r2,r2,sp
    {
        if (file_name[index] == '.')
        {
            ext_index = index;
        }
        else if (ext_index < 0)
  8103a8:	38010d16 	blt	r7,zero,8107e0 <find_file_in_directory+0x51c>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  8103ac:	10ffffc5 	stb	r3,-1(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  8103b0:	31800044 	addi	r6,r6,1
  8103b4:	21000044 	addi	r4,r4,1
  8103b8:	29400044 	addi	r5,r5,1
  8103bc:	32000a26 	beq	r6,r8,8103e8 <find_file_in_directory+0x124>
    {
        if (file_name[index] == '.')
  8103c0:	20c00003 	ldbu	r3,0(r4)
  8103c4:	18803fcc 	andi	r2,r3,255
  8103c8:	1080201c 	xori	r2,r2,128
  8103cc:	10bfe004 	addi	r2,r2,-128
  8103d0:	127ff31e 	bne	r2,r9,8103a0 <find_file_in_directory+0xdc>
  8103d4:	300f883a 	mov	r7,r6
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  8103d8:	31800044 	addi	r6,r6,1
  8103dc:	21000044 	addi	r4,r4,1
  8103e0:	29400044 	addi	r5,r5,1
  8103e4:	323ff61e 	bne	r6,r8,8103c0 <find_file_in_directory+0xfc>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  8103e8:	b001041e 	bne	r22,zero,8107fc <find_file_in_directory+0x538>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8103ec:	05c02074 	movhi	r23,129
  8103f0:	bddf4e04 	addi	r23,r23,32056
  8103f4:	b880050b 	ldhu	r2,20(r23)
  8103f8:	b8c0030b 	ldhu	r3,12(r23)
  8103fc:	1004917a 	slli	r2,r2,5
  810400:	10e9283a 	div	r20,r2,r3
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810404:	a000c126 	beq	r20,zero,81070c <find_file_in_directory+0x448>
  810408:	0027883a 	mov	r19,zero
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  81040c:	b9001317 	ldw	r4,76(r23)
  810410:	d1677b17 	ldw	r5,-25108(gp)
  810414:	9909883a 	add	r4,r19,r4
  810418:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81041c:	1000bb26 	beq	r2,zero,81070c <find_file_in_directory+0x448>
                    }
                }
            }
            else
            {
                break;
  810420:	0025883a 	mov	r18,zero
  810424:	04000644 	movi	r16,25
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  810428:	9009883a 	mov	r4,r18
  81042c:	880b883a 	mov	r5,r17
  810430:	000d883a 	mov	r6,zero
  810434:	980f883a 	mov	r7,r19
  810438:	080ee6c0 	call	80ee6c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81043c:	89000003 	ldbu	r4,0(r17)
  810440:	00803944 	movi	r2,229
  810444:	20c03fcc 	andi	r3,r4,255
  810448:	1880ab26 	beq	r3,r2,8106f8 <find_file_in_directory+0x434>
  81044c:	1800aa26 	beq	r3,zero,8106f8 <find_file_in_directory+0x434>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810450:	20bfe7c4 	addi	r2,r4,-97
  810454:	10803fcc 	andi	r2,r2,255
  810458:	8082462e 	bgeu	r16,r2,810d74 <find_file_in_directory+0xab0>
  81045c:	d8c000c3 	ldbu	r3,3(sp)
  810460:	21003fcc 	andi	r4,r4,255
  810464:	2100201c 	xori	r4,r4,128
  810468:	18bfe7c4 	addi	r2,r3,-97
  81046c:	10803fcc 	andi	r2,r2,255
  810470:	213fe004 	addi	r4,r4,-128
  810474:	8082472e 	bgeu	r16,r2,810d94 <find_file_in_directory+0xad0>
  810478:	18803fcc 	andi	r2,r3,255
  81047c:	1080201c 	xori	r2,r2,128
  810480:	10bfe004 	addi	r2,r2,-128
  810484:	2082481e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  810488:	88c00043 	ldbu	r3,1(r17)
  81048c:	18bfe7c4 	addi	r2,r3,-97
  810490:	10803fcc 	andi	r2,r2,255
  810494:	80825b2e 	bgeu	r16,r2,810e04 <find_file_in_directory+0xb40>
  810498:	19003fcc 	andi	r4,r3,255
  81049c:	2100201c 	xori	r4,r4,128
  8104a0:	213fe004 	addi	r4,r4,-128
  8104a4:	d8c00103 	ldbu	r3,4(sp)
  8104a8:	18bfe7c4 	addi	r2,r3,-97
  8104ac:	10803fcc 	andi	r2,r2,255
  8104b0:	80824f2e 	bgeu	r16,r2,810df0 <find_file_in_directory+0xb2c>
  8104b4:	18803fcc 	andi	r2,r3,255
  8104b8:	1080201c 	xori	r2,r2,128
  8104bc:	10bfe004 	addi	r2,r2,-128
  8104c0:	2082391e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  8104c4:	88c00083 	ldbu	r3,2(r17)
  8104c8:	18bfe7c4 	addi	r2,r3,-97
  8104cc:	10803fcc 	andi	r2,r2,255
  8104d0:	8082602e 	bgeu	r16,r2,810e54 <find_file_in_directory+0xb90>
  8104d4:	19003fcc 	andi	r4,r3,255
  8104d8:	2100201c 	xori	r4,r4,128
  8104dc:	213fe004 	addi	r4,r4,-128
  8104e0:	d8c00143 	ldbu	r3,5(sp)
  8104e4:	18bfe7c4 	addi	r2,r3,-97
  8104e8:	10803fcc 	andi	r2,r2,255
  8104ec:	8082542e 	bgeu	r16,r2,810e40 <find_file_in_directory+0xb7c>
  8104f0:	18803fcc 	andi	r2,r3,255
  8104f4:	1080201c 	xori	r2,r2,128
  8104f8:	10bfe004 	addi	r2,r2,-128
  8104fc:	20822a1e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  810500:	88c000c3 	ldbu	r3,3(r17)
  810504:	18bfe7c4 	addi	r2,r3,-97
  810508:	10803fcc 	andi	r2,r2,255
  81050c:	8082632e 	bgeu	r16,r2,810e9c <find_file_in_directory+0xbd8>
  810510:	19003fcc 	andi	r4,r3,255
  810514:	2100201c 	xori	r4,r4,128
  810518:	213fe004 	addi	r4,r4,-128
  81051c:	d8c00183 	ldbu	r3,6(sp)
  810520:	18bfe7c4 	addi	r2,r3,-97
  810524:	10803fcc 	andi	r2,r2,255
  810528:	8082572e 	bgeu	r16,r2,810e88 <find_file_in_directory+0xbc4>
  81052c:	18803fcc 	andi	r2,r3,255
  810530:	1080201c 	xori	r2,r2,128
  810534:	10bfe004 	addi	r2,r2,-128
  810538:	20821b1e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  81053c:	88c00103 	ldbu	r3,4(r17)
  810540:	18bfe7c4 	addi	r2,r3,-97
  810544:	10803fcc 	andi	r2,r2,255
  810548:	80825e2e 	bgeu	r16,r2,810ec4 <find_file_in_directory+0xc00>
  81054c:	19003fcc 	andi	r4,r3,255
  810550:	2100201c 	xori	r4,r4,128
  810554:	213fe004 	addi	r4,r4,-128
  810558:	d8c001c3 	ldbu	r3,7(sp)
  81055c:	18bfe7c4 	addi	r2,r3,-97
  810560:	10803fcc 	andi	r2,r2,255
  810564:	8082522e 	bgeu	r16,r2,810eb0 <find_file_in_directory+0xbec>
  810568:	18803fcc 	andi	r2,r3,255
  81056c:	1080201c 	xori	r2,r2,128
  810570:	10bfe004 	addi	r2,r2,-128
  810574:	20820c1e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  810578:	88c00143 	ldbu	r3,5(r17)
  81057c:	18bfe7c4 	addi	r2,r3,-97
  810580:	10803fcc 	andi	r2,r2,255
  810584:	8082592e 	bgeu	r16,r2,810eec <find_file_in_directory+0xc28>
  810588:	19003fcc 	andi	r4,r3,255
  81058c:	2100201c 	xori	r4,r4,128
  810590:	213fe004 	addi	r4,r4,-128
  810594:	d8c00203 	ldbu	r3,8(sp)
  810598:	18bfe7c4 	addi	r2,r3,-97
  81059c:	10803fcc 	andi	r2,r2,255
  8105a0:	80824d2e 	bgeu	r16,r2,810ed8 <find_file_in_directory+0xc14>
  8105a4:	18803fcc 	andi	r2,r3,255
  8105a8:	1080201c 	xori	r2,r2,128
  8105ac:	10bfe004 	addi	r2,r2,-128
  8105b0:	2081fd1e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  8105b4:	88c00183 	ldbu	r3,6(r17)
  8105b8:	18bfe7c4 	addi	r2,r3,-97
  8105bc:	10803fcc 	andi	r2,r2,255
  8105c0:	8082542e 	bgeu	r16,r2,810f14 <find_file_in_directory+0xc50>
  8105c4:	19003fcc 	andi	r4,r3,255
  8105c8:	2100201c 	xori	r4,r4,128
  8105cc:	213fe004 	addi	r4,r4,-128
  8105d0:	d8c00243 	ldbu	r3,9(sp)
  8105d4:	18bfe7c4 	addi	r2,r3,-97
  8105d8:	10803fcc 	andi	r2,r2,255
  8105dc:	8082482e 	bgeu	r16,r2,810f00 <find_file_in_directory+0xc3c>
  8105e0:	18803fcc 	andi	r2,r3,255
  8105e4:	1080201c 	xori	r2,r2,128
  8105e8:	10bfe004 	addi	r2,r2,-128
  8105ec:	2081ee1e 	bne	r4,r2,810da8 <find_file_in_directory+0xae4>
  8105f0:	88c001c3 	ldbu	r3,7(r17)
  8105f4:	18bfe7c4 	addi	r2,r3,-97
  8105f8:	10803fcc 	andi	r2,r2,255
  8105fc:	80824e36 	bltu	r16,r2,810f38 <find_file_in_directory+0xc74>
  810600:	18bff804 	addi	r2,r3,-32
  810604:	11003fcc 	andi	r4,r2,255
  810608:	2100201c 	xori	r4,r4,128
  81060c:	213fe004 	addi	r4,r4,-128
  810610:	d8c00283 	ldbu	r3,10(sp)
  810614:	18bfe7c4 	addi	r2,r3,-97
  810618:	10803fcc 	andi	r2,r2,255
  81061c:	80824236 	bltu	r16,r2,810f28 <find_file_in_directory+0xc64>
  810620:	18bff804 	addi	r2,r3,-32
  810624:	10803fcc 	andi	r2,r2,255
  810628:	1080201c 	xori	r2,r2,128
  81062c:	10bfe004 	addi	r2,r2,-128
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810630:	88c00203 	ldbu	r3,8(r17)
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810634:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810638:	18bfe7c4 	addi	r2,r3,-97
  81063c:	10803fcc 	andi	r2,r2,255
  810640:	8081de2e 	bgeu	r16,r2,810dbc <find_file_in_directory+0xaf8>
  810644:	19003fcc 	andi	r4,r3,255
  810648:	d8c00003 	ldbu	r3,0(sp)
  81064c:	2100201c 	xori	r4,r4,128
  810650:	213fe004 	addi	r4,r4,-128
  810654:	18bfe7c4 	addi	r2,r3,-97
  810658:	10803fcc 	andi	r2,r2,255
  81065c:	8081df2e 	bgeu	r16,r2,810ddc <find_file_in_directory+0xb18>
  810660:	18803fcc 	andi	r2,r3,255
  810664:	1080201c 	xori	r2,r2,128
  810668:	10bfe004 	addi	r2,r2,-128
  81066c:	1100221e 	bne	r2,r4,8106f8 <find_file_in_directory+0x434>
  810670:	88c00243 	ldbu	r3,9(r17)
  810674:	18bfe7c4 	addi	r2,r3,-97
  810678:	10803fcc 	andi	r2,r2,255
  81067c:	8081eb2e 	bgeu	r16,r2,810e2c <find_file_in_directory+0xb68>
  810680:	19003fcc 	andi	r4,r3,255
  810684:	2100201c 	xori	r4,r4,128
  810688:	213fe004 	addi	r4,r4,-128
  81068c:	d8c00043 	ldbu	r3,1(sp)
  810690:	18bfe7c4 	addi	r2,r3,-97
  810694:	10803fcc 	andi	r2,r2,255
  810698:	8081df2e 	bgeu	r16,r2,810e18 <find_file_in_directory+0xb54>
  81069c:	18803fcc 	andi	r2,r3,255
  8106a0:	1080201c 	xori	r2,r2,128
  8106a4:	10bfe004 	addi	r2,r2,-128
  8106a8:	1100131e 	bne	r2,r4,8106f8 <find_file_in_directory+0x434>
  8106ac:	88c00283 	ldbu	r3,10(r17)
  8106b0:	18bfe7c4 	addi	r2,r3,-97
  8106b4:	10803fcc 	andi	r2,r2,255
  8106b8:	8081ef36 	bltu	r16,r2,810e78 <find_file_in_directory+0xbb4>
  8106bc:	18bff804 	addi	r2,r3,-32
  8106c0:	11003fcc 	andi	r4,r2,255
  8106c4:	2100201c 	xori	r4,r4,128
  8106c8:	213fe004 	addi	r4,r4,-128
  8106cc:	d8c00083 	ldbu	r3,2(sp)
  8106d0:	18bfe7c4 	addi	r2,r3,-97
  8106d4:	10803fcc 	andi	r2,r2,255
  8106d8:	8081e336 	bltu	r16,r2,810e68 <find_file_in_directory+0xba4>
  8106dc:	18bff804 	addi	r2,r3,-32
  8106e0:	10803fcc 	andi	r2,r2,255
  8106e4:	1080201c 	xori	r2,r2,128
  8106e8:	10bfe004 	addi	r2,r2,-128
  8106ec:	1100021e 	bne	r2,r4,8106f8 <find_file_in_directory+0x434>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
  8106f0:	2805003a 	cmpeq	r2,r5,zero
  8106f4:	10021426 	beq	r2,zero,810f48 <find_file_in_directory+0xc84>
  8106f8:	94800804 	addi	r18,r18,32
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8106fc:	00808004 	movi	r2,512
  810700:	90bf491e 	bne	r18,r2,810428 <find_file_in_directory+0x164>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810704:	9cc00044 	addi	r19,r19,1
  810708:	a4ff401e 	bne	r20,r19,81040c <find_file_in_directory+0x148>
                {
                    // Directory path is invalid.                 
                    return false;
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  81070c:	002b883a 	mov	r21,zero
    }
    
    return result;   
}
  810710:	a805883a 	mov	r2,r21
  810714:	dfc00b17 	ldw	ra,44(sp)
  810718:	ddc00a17 	ldw	r23,40(sp)
  81071c:	dd800917 	ldw	r22,36(sp)
  810720:	dd400817 	ldw	r21,32(sp)
  810724:	dd000717 	ldw	r20,28(sp)
  810728:	dcc00617 	ldw	r19,24(sp)
  81072c:	dc800517 	ldw	r18,20(sp)
  810730:	dc400417 	ldw	r17,16(sp)
  810734:	dc000317 	ldw	r16,12(sp)
  810738:	dec00c04 	addi	sp,sp,48
  81073c:	f800283a 	ret
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  810740:	0021883a 	mov	r16,zero
        {
            break;
        }
    }
    
    if (index == length)
  810744:	103efc26 	beq	r2,zero,810338 <find_file_in_directory+0x74>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810748:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  81074c:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810750:	d88000c5 	stb	r2,3(sp)
  810754:	d8800105 	stb	r2,4(sp)
  810758:	d8800145 	stb	r2,5(sp)
  81075c:	d8800185 	stb	r2,6(sp)
  810760:	d88001c5 	stb	r2,7(sp)
  810764:	d8800205 	stb	r2,8(sp)
  810768:	d8800245 	stb	r2,9(sp)
  81076c:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810770:	d8800005 	stb	r2,0(sp)
  810774:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  810778:	9809883a 	mov	r4,r19
  81077c:	0803e080 	call	803e08 <strlen>
  810780:	102b883a 	mov	r21,r2
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  810784:	043efb0e 	bge	zero,r16,810374 <find_file_in_directory+0xb0>
  810788:	0029883a 	mov	r20,zero
    {
        last_dir_separator = last_dir_separator+location+1;
  81078c:	80800044 	addi	r2,r16,1
  810790:	a0a9883a 	add	r20,r20,r2
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  810794:	9d25883a 	add	r18,r19,r20

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  810798:	9009883a 	mov	r4,r18
  81079c:	0803e080 	call	803e08 <strlen>
    
    for(index = 0; index < length; index++)
  8107a0:	0080110e 	bge	zero,r2,8107e8 <find_file_in_directory+0x524>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8107a4:	90c00007 	ldb	r3,0(r18)
  8107a8:	01401704 	movi	r5,92
  8107ac:	19400a26 	beq	r3,r5,8107d8 <find_file_in_directory+0x514>
  8107b0:	01000bc4 	movi	r4,47
  8107b4:	19000826 	beq	r3,r4,8107d8 <find_file_in_directory+0x514>
  8107b8:	0021883a 	mov	r16,zero
  8107bc:	00000306 	br	8107cc <find_file_in_directory+0x508>
  8107c0:	18c00007 	ldb	r3,0(r3)
  8107c4:	19400a26 	beq	r3,r5,8107f0 <find_file_in_directory+0x52c>
  8107c8:	19000926 	beq	r3,r4,8107f0 <find_file_in_directory+0x52c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8107cc:	84000044 	addi	r16,r16,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8107d0:	9407883a 	add	r3,r18,r16
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8107d4:	143ffa1e 	bne	r2,r16,8107c0 <find_file_in_directory+0x4fc>
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  8107d8:	a00d883a 	mov	r6,r20
  8107dc:	003ee706 	br	81037c <find_file_in_directory+0xb8>
        {
            ext_index = index;
        }
        else if (ext_index < 0)
        {
            name[index-last_dir_separator] = file_name[index];
  8107e0:	28c00005 	stb	r3,0(r5)
  8107e4:	003ef206 	br	8103b0 <find_file_in_directory+0xec>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8107e8:	0021883a 	mov	r16,zero
        {
            break;
        }
    }
    
    if (index == length)
  8107ec:	103ffa26 	beq	r2,zero,8107d8 <find_file_in_directory+0x514>
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  8107f0:	043fe616 	blt	zero,r16,81078c <find_file_in_directory+0x4c8>
  8107f4:	a00d883a 	mov	r6,r20
  8107f8:	003ee006 	br	81037c <find_file_in_directory+0xb8>
  8107fc:	05c02074 	movhi	r23,129
  810800:	bddf4e04 	addi	r23,r23,32056
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  810804:	bc000383 	ldbu	r16,14(r23)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  810808:	b027883a 	mov	r19,r22
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81080c:	993fff84 	addi	r4,r19,-2
  810810:	800b883a 	mov	r5,r16
  810814:	0802b980 	call	802b98 <__mulsi3>
  810818:	b8c01417 	ldw	r3,80(r23)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  81081c:	002b883a 	mov	r21,zero
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  810820:	10ed883a 	add	r22,r2,r3
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  810824:	8000e226 	beq	r16,zero,810bb0 <find_file_in_directory+0x8ec>
  810828:	0029883a 	mov	r20,zero
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  81082c:	d1677b17 	ldw	r5,-25108(gp)
  810830:	b509883a 	add	r4,r22,r20
  810834:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  810838:	1000dd26 	beq	r2,zero,810bb0 <find_file_in_directory+0x8ec>
                        }
                    }
                }
                else
                {
                    break;
  81083c:	0025883a 	mov	r18,zero
  810840:	04000644 	movi	r16,25
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  810844:	9009883a 	mov	r4,r18
  810848:	880b883a 	mov	r5,r17
  81084c:	980d883a 	mov	r6,r19
  810850:	a00f883a 	mov	r7,r20
  810854:	080ee6c0 	call	80ee6c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  810858:	89000003 	ldbu	r4,0(r17)
  81085c:	00803944 	movi	r2,229
  810860:	20c03fcc 	andi	r3,r4,255
  810864:	1880ab26 	beq	r3,r2,810b14 <find_file_in_directory+0x850>
  810868:	1800aa26 	beq	r3,zero,810b14 <find_file_in_directory+0x850>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  81086c:	20bfe7c4 	addi	r2,r4,-97
  810870:	10803fcc 	andi	r2,r2,255
  810874:	8080e22e 	bgeu	r16,r2,810c00 <find_file_in_directory+0x93c>
  810878:	21003fcc 	andi	r4,r4,255
  81087c:	2100201c 	xori	r4,r4,128
  810880:	213fe004 	addi	r4,r4,-128
  810884:	d8c000c3 	ldbu	r3,3(sp)
  810888:	18bfe7c4 	addi	r2,r3,-97
  81088c:	10803fcc 	andi	r2,r2,255
  810890:	8080d42e 	bgeu	r16,r2,810be4 <find_file_in_directory+0x920>
  810894:	18803fcc 	andi	r2,r3,255
  810898:	1080201c 	xori	r2,r2,128
  81089c:	10bfe004 	addi	r2,r2,-128
  8108a0:	1100d51e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  8108a4:	88c00043 	ldbu	r3,1(r17)
  8108a8:	18bfe7c4 	addi	r2,r3,-97
  8108ac:	10803fcc 	andi	r2,r2,255
  8108b0:	8080e72e 	bgeu	r16,r2,810c50 <find_file_in_directory+0x98c>
  8108b4:	19003fcc 	andi	r4,r3,255
  8108b8:	2100201c 	xori	r4,r4,128
  8108bc:	213fe004 	addi	r4,r4,-128
  8108c0:	d8c00103 	ldbu	r3,4(sp)
  8108c4:	18bfe7c4 	addi	r2,r3,-97
  8108c8:	10803fcc 	andi	r2,r2,255
  8108cc:	8080db2e 	bgeu	r16,r2,810c3c <find_file_in_directory+0x978>
  8108d0:	18803fcc 	andi	r2,r3,255
  8108d4:	1080201c 	xori	r2,r2,128
  8108d8:	10bfe004 	addi	r2,r2,-128
  8108dc:	1100c61e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  8108e0:	88c00083 	ldbu	r3,2(r17)
  8108e4:	18bfe7c4 	addi	r2,r3,-97
  8108e8:	10803fcc 	andi	r2,r2,255
  8108ec:	8080ea2e 	bgeu	r16,r2,810c98 <find_file_in_directory+0x9d4>
  8108f0:	19003fcc 	andi	r4,r3,255
  8108f4:	2100201c 	xori	r4,r4,128
  8108f8:	213fe004 	addi	r4,r4,-128
  8108fc:	d8c00143 	ldbu	r3,5(sp)
  810900:	18bfe7c4 	addi	r2,r3,-97
  810904:	10803fcc 	andi	r2,r2,255
  810908:	8080de2e 	bgeu	r16,r2,810c84 <find_file_in_directory+0x9c0>
  81090c:	18803fcc 	andi	r2,r3,255
  810910:	1080201c 	xori	r2,r2,128
  810914:	10bfe004 	addi	r2,r2,-128
  810918:	1100b71e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  81091c:	88c000c3 	ldbu	r3,3(r17)
  810920:	18bfe7c4 	addi	r2,r3,-97
  810924:	10803fcc 	andi	r2,r2,255
  810928:	8080e52e 	bgeu	r16,r2,810cc0 <find_file_in_directory+0x9fc>
  81092c:	19003fcc 	andi	r4,r3,255
  810930:	2100201c 	xori	r4,r4,128
  810934:	213fe004 	addi	r4,r4,-128
  810938:	d8c00183 	ldbu	r3,6(sp)
  81093c:	18bfe7c4 	addi	r2,r3,-97
  810940:	10803fcc 	andi	r2,r2,255
  810944:	8080d92e 	bgeu	r16,r2,810cac <find_file_in_directory+0x9e8>
  810948:	18803fcc 	andi	r2,r3,255
  81094c:	1080201c 	xori	r2,r2,128
  810950:	10bfe004 	addi	r2,r2,-128
  810954:	1100a81e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  810958:	88c00103 	ldbu	r3,4(r17)
  81095c:	18bfe7c4 	addi	r2,r3,-97
  810960:	10803fcc 	andi	r2,r2,255
  810964:	8080e02e 	bgeu	r16,r2,810ce8 <find_file_in_directory+0xa24>
  810968:	19003fcc 	andi	r4,r3,255
  81096c:	2100201c 	xori	r4,r4,128
  810970:	213fe004 	addi	r4,r4,-128
  810974:	d8c001c3 	ldbu	r3,7(sp)
  810978:	18bfe7c4 	addi	r2,r3,-97
  81097c:	10803fcc 	andi	r2,r2,255
  810980:	8080d42e 	bgeu	r16,r2,810cd4 <find_file_in_directory+0xa10>
  810984:	18803fcc 	andi	r2,r3,255
  810988:	1080201c 	xori	r2,r2,128
  81098c:	10bfe004 	addi	r2,r2,-128
  810990:	1100991e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  810994:	88c00143 	ldbu	r3,5(r17)
  810998:	18bfe7c4 	addi	r2,r3,-97
  81099c:	10803fcc 	andi	r2,r2,255
  8109a0:	8080db2e 	bgeu	r16,r2,810d10 <find_file_in_directory+0xa4c>
  8109a4:	19003fcc 	andi	r4,r3,255
  8109a8:	2100201c 	xori	r4,r4,128
  8109ac:	213fe004 	addi	r4,r4,-128
  8109b0:	d8c00203 	ldbu	r3,8(sp)
  8109b4:	18bfe7c4 	addi	r2,r3,-97
  8109b8:	10803fcc 	andi	r2,r2,255
  8109bc:	8080cf2e 	bgeu	r16,r2,810cfc <find_file_in_directory+0xa38>
  8109c0:	18803fcc 	andi	r2,r3,255
  8109c4:	1080201c 	xori	r2,r2,128
  8109c8:	10bfe004 	addi	r2,r2,-128
  8109cc:	11008a1e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  8109d0:	88c00183 	ldbu	r3,6(r17)
  8109d4:	18bfe7c4 	addi	r2,r3,-97
  8109d8:	10803fcc 	andi	r2,r2,255
  8109dc:	8080d62e 	bgeu	r16,r2,810d38 <find_file_in_directory+0xa74>
  8109e0:	19003fcc 	andi	r4,r3,255
  8109e4:	2100201c 	xori	r4,r4,128
  8109e8:	213fe004 	addi	r4,r4,-128
  8109ec:	d8c00243 	ldbu	r3,9(sp)
  8109f0:	18bfe7c4 	addi	r2,r3,-97
  8109f4:	10803fcc 	andi	r2,r2,255
  8109f8:	8080ca2e 	bgeu	r16,r2,810d24 <find_file_in_directory+0xa60>
  8109fc:	18803fcc 	andi	r2,r3,255
  810a00:	1080201c 	xori	r2,r2,128
  810a04:	10bfe004 	addi	r2,r2,-128
  810a08:	11007b1e 	bne	r2,r4,810bf8 <find_file_in_directory+0x934>
  810a0c:	88c001c3 	ldbu	r3,7(r17)
  810a10:	18bfe7c4 	addi	r2,r3,-97
  810a14:	10803fcc 	andi	r2,r2,255
  810a18:	8080d036 	bltu	r16,r2,810d5c <find_file_in_directory+0xa98>
  810a1c:	18bff804 	addi	r2,r3,-32
  810a20:	11003fcc 	andi	r4,r2,255
  810a24:	2100201c 	xori	r4,r4,128
  810a28:	213fe004 	addi	r4,r4,-128
  810a2c:	d8c00283 	ldbu	r3,10(sp)
  810a30:	18bfe7c4 	addi	r2,r3,-97
  810a34:	10803fcc 	andi	r2,r2,255
  810a38:	8080c436 	bltu	r16,r2,810d4c <find_file_in_directory+0xa88>
  810a3c:	18bff804 	addi	r2,r3,-32
  810a40:	10803fcc 	andi	r2,r2,255
  810a44:	1080201c 	xori	r2,r2,128
  810a48:	10bfe004 	addi	r2,r2,-128
  810a4c:	110b003a 	cmpeq	r5,r2,r4
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810a50:	88c00203 	ldbu	r3,8(r17)
  810a54:	18bfe7c4 	addi	r2,r3,-97
  810a58:	10803fcc 	andi	r2,r2,255
  810a5c:	80805c2e 	bgeu	r16,r2,810bd0 <find_file_in_directory+0x90c>
  810a60:	19003fcc 	andi	r4,r3,255
  810a64:	2100201c 	xori	r4,r4,128
  810a68:	213fe004 	addi	r4,r4,-128
  810a6c:	d8c00003 	ldbu	r3,0(sp)
  810a70:	18bfe7c4 	addi	r2,r3,-97
  810a74:	10803fcc 	andi	r2,r2,255
  810a78:	8080502e 	bgeu	r16,r2,810bbc <find_file_in_directory+0x8f8>
  810a7c:	18803fcc 	andi	r2,r3,255
  810a80:	1080201c 	xori	r2,r2,128
  810a84:	10bfe004 	addi	r2,r2,-128
  810a88:	2080221e 	bne	r4,r2,810b14 <find_file_in_directory+0x850>
  810a8c:	88c00243 	ldbu	r3,9(r17)
  810a90:	18bfe7c4 	addi	r2,r3,-97
  810a94:	10803fcc 	andi	r2,r2,255
  810a98:	8080632e 	bgeu	r16,r2,810c28 <find_file_in_directory+0x964>
  810a9c:	19003fcc 	andi	r4,r3,255
  810aa0:	2100201c 	xori	r4,r4,128
  810aa4:	213fe004 	addi	r4,r4,-128
  810aa8:	d8c00043 	ldbu	r3,1(sp)
  810aac:	18bfe7c4 	addi	r2,r3,-97
  810ab0:	10803fcc 	andi	r2,r2,255
  810ab4:	8080572e 	bgeu	r16,r2,810c14 <find_file_in_directory+0x950>
  810ab8:	18803fcc 	andi	r2,r3,255
  810abc:	1080201c 	xori	r2,r2,128
  810ac0:	10bfe004 	addi	r2,r2,-128
  810ac4:	2080131e 	bne	r4,r2,810b14 <find_file_in_directory+0x850>
  810ac8:	88c00283 	ldbu	r3,10(r17)
  810acc:	18bfe7c4 	addi	r2,r3,-97
  810ad0:	10803fcc 	andi	r2,r2,255
  810ad4:	80806736 	bltu	r16,r2,810c74 <find_file_in_directory+0x9b0>
  810ad8:	18bff804 	addi	r2,r3,-32
  810adc:	11003fcc 	andi	r4,r2,255
  810ae0:	2100201c 	xori	r4,r4,128
  810ae4:	213fe004 	addi	r4,r4,-128
  810ae8:	d8c00083 	ldbu	r3,2(sp)
  810aec:	18bfe7c4 	addi	r2,r3,-97
  810af0:	10803fcc 	andi	r2,r2,255
  810af4:	80805b36 	bltu	r16,r2,810c64 <find_file_in_directory+0x9a0>
  810af8:	18bff804 	addi	r2,r3,-32
  810afc:	10803fcc 	andi	r2,r2,255
  810b00:	1080201c 	xori	r2,r2,128
  810b04:	10bfe004 	addi	r2,r2,-128
  810b08:	2080021e 	bne	r4,r2,810b14 <find_file_in_directory+0x850>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
  810b0c:	2805003a 	cmpeq	r2,r5,zero
  810b10:	10009626 	beq	r2,zero,810d6c <find_file_in_directory+0xaa8>
  810b14:	94800804 	addi	r18,r18,32
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  810b18:	00808004 	movi	r2,512
  810b1c:	90bf491e 	bne	r18,r2,810844 <find_file_in_directory+0x580>
                }
                else
                {
                    break;
                }
                if (result)
  810b20:	a804c03a 	cmpne	r2,r21,zero
  810b24:	1000171e 	bne	r2,zero,810b84 <find_file_in_directory+0x8c0>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  810b28:	b8800383 	ldbu	r2,14(r23)
  810b2c:	a5000044 	addi	r20,r20,1
  810b30:	a0bf3e16 	blt	r20,r2,81082c <find_file_in_directory+0x568>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810b34:	b8c01117 	ldw	r3,68(r23)
  810b38:	d0a77b17 	ldw	r2,-25108(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  810b3c:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  810b40:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  810b44:	d0e77f17 	ldw	r3,-25092(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  810b48:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  810b4c:	20c00326 	beq	r4,r3,810b5c <find_file_in_directory+0x898>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  810b50:	000b883a 	mov	r5,zero
  810b54:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  810b58:	103eec26 	beq	r2,zero,81070c <find_file_in_directory+0x448>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  810b5c:	d0e77d17 	ldw	r3,-25100(gp)
  810b60:	98803fcc 	andi	r2,r19,255
  810b64:	1085883a 	add	r2,r2,r2
  810b68:	19000a17 	ldw	r4,40(r3)
  810b6c:	1105883a 	add	r2,r2,r4
  810b70:	10c0002b 	ldhuio	r3,0(r2)
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  810b74:	00bffe14 	movui	r2,65528
  810b78:	1cfffe0c 	andi	r19,r3,65528
  810b7c:	98bee326 	beq	r19,r2,81070c <find_file_in_directory+0x448>
  810b80:	002b883a 	mov	r21,zero
                {
                    // Directory path is invalid.                 
                    return false;
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  810b84:	00bffdd4 	movui	r2,65527
  810b88:	14fee116 	blt	r2,r19,810710 <find_file_in_directory+0x44c>
  810b8c:	a805003a 	cmpeq	r2,r21,zero
  810b90:	103edf26 	beq	r2,zero,810710 <find_file_in_directory+0x44c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  810b94:	bc000383 	ldbu	r16,14(r23)
  810b98:	993fff84 	addi	r4,r19,-2
  810b9c:	800b883a 	mov	r5,r16
  810ba0:	0802b980 	call	802b98 <__mulsi3>
  810ba4:	b8c01417 	ldw	r3,80(r23)
  810ba8:	10ed883a 	add	r22,r2,r3
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  810bac:	803f1e1e 	bne	r16,zero,810828 <find_file_in_directory+0x564>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  810bb0:	a804c03a 	cmpne	r2,r21,zero
  810bb4:	103ff31e 	bne	r2,zero,810b84 <find_file_in_directory+0x8c0>
  810bb8:	003fde06 	br	810b34 <find_file_in_directory+0x870>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810bbc:	18bff804 	addi	r2,r3,-32
  810bc0:	10803fcc 	andi	r2,r2,255
  810bc4:	1080201c 	xori	r2,r2,128
  810bc8:	10bfe004 	addi	r2,r2,-128
  810bcc:	003fae06 	br	810a88 <find_file_in_directory+0x7c4>
  810bd0:	18bff804 	addi	r2,r3,-32
  810bd4:	11003fcc 	andi	r4,r2,255
  810bd8:	2100201c 	xori	r4,r4,128
  810bdc:	213fe004 	addi	r4,r4,-128
  810be0:	003fa206 	br	810a6c <find_file_in_directory+0x7a8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810be4:	18bff804 	addi	r2,r3,-32
  810be8:	10803fcc 	andi	r2,r2,255
  810bec:	1080201c 	xori	r2,r2,128
  810bf0:	10bfe004 	addi	r2,r2,-128
  810bf4:	113f2b26 	beq	r2,r4,8108a4 <find_file_in_directory+0x5e0>
  810bf8:	000b883a 	mov	r5,zero
  810bfc:	003f9406 	br	810a50 <find_file_in_directory+0x78c>
  810c00:	20bff804 	addi	r2,r4,-32
  810c04:	11003fcc 	andi	r4,r2,255
  810c08:	2100201c 	xori	r4,r4,128
  810c0c:	213fe004 	addi	r4,r4,-128
  810c10:	003f1c06 	br	810884 <find_file_in_directory+0x5c0>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810c14:	18bff804 	addi	r2,r3,-32
  810c18:	10803fcc 	andi	r2,r2,255
  810c1c:	1080201c 	xori	r2,r2,128
  810c20:	10bfe004 	addi	r2,r2,-128
  810c24:	003fa706 	br	810ac4 <find_file_in_directory+0x800>
  810c28:	18bff804 	addi	r2,r3,-32
  810c2c:	11003fcc 	andi	r4,r2,255
  810c30:	2100201c 	xori	r4,r4,128
  810c34:	213fe004 	addi	r4,r4,-128
  810c38:	003f9b06 	br	810aa8 <find_file_in_directory+0x7e4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810c3c:	18bff804 	addi	r2,r3,-32
  810c40:	10803fcc 	andi	r2,r2,255
  810c44:	1080201c 	xori	r2,r2,128
  810c48:	10bfe004 	addi	r2,r2,-128
  810c4c:	003f2306 	br	8108dc <find_file_in_directory+0x618>
  810c50:	18bff804 	addi	r2,r3,-32
  810c54:	11003fcc 	andi	r4,r2,255
  810c58:	2100201c 	xori	r4,r4,128
  810c5c:	213fe004 	addi	r4,r4,-128
  810c60:	003f1706 	br	8108c0 <find_file_in_directory+0x5fc>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810c64:	18803fcc 	andi	r2,r3,255
  810c68:	1080201c 	xori	r2,r2,128
  810c6c:	10bfe004 	addi	r2,r2,-128
  810c70:	003fa506 	br	810b08 <find_file_in_directory+0x844>
  810c74:	19003fcc 	andi	r4,r3,255
  810c78:	2100201c 	xori	r4,r4,128
  810c7c:	213fe004 	addi	r4,r4,-128
  810c80:	003f9906 	br	810ae8 <find_file_in_directory+0x824>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810c84:	18bff804 	addi	r2,r3,-32
  810c88:	10803fcc 	andi	r2,r2,255
  810c8c:	1080201c 	xori	r2,r2,128
  810c90:	10bfe004 	addi	r2,r2,-128
  810c94:	003f2006 	br	810918 <find_file_in_directory+0x654>
  810c98:	18bff804 	addi	r2,r3,-32
  810c9c:	11003fcc 	andi	r4,r2,255
  810ca0:	2100201c 	xori	r4,r4,128
  810ca4:	213fe004 	addi	r4,r4,-128
  810ca8:	003f1406 	br	8108fc <find_file_in_directory+0x638>
  810cac:	18bff804 	addi	r2,r3,-32
  810cb0:	10803fcc 	andi	r2,r2,255
  810cb4:	1080201c 	xori	r2,r2,128
  810cb8:	10bfe004 	addi	r2,r2,-128
  810cbc:	003f2506 	br	810954 <find_file_in_directory+0x690>
  810cc0:	18bff804 	addi	r2,r3,-32
  810cc4:	11003fcc 	andi	r4,r2,255
  810cc8:	2100201c 	xori	r4,r4,128
  810ccc:	213fe004 	addi	r4,r4,-128
  810cd0:	003f1906 	br	810938 <find_file_in_directory+0x674>
  810cd4:	18bff804 	addi	r2,r3,-32
  810cd8:	10803fcc 	andi	r2,r2,255
  810cdc:	1080201c 	xori	r2,r2,128
  810ce0:	10bfe004 	addi	r2,r2,-128
  810ce4:	003f2a06 	br	810990 <find_file_in_directory+0x6cc>
  810ce8:	18bff804 	addi	r2,r3,-32
  810cec:	11003fcc 	andi	r4,r2,255
  810cf0:	2100201c 	xori	r4,r4,128
  810cf4:	213fe004 	addi	r4,r4,-128
  810cf8:	003f1e06 	br	810974 <find_file_in_directory+0x6b0>
  810cfc:	18bff804 	addi	r2,r3,-32
  810d00:	10803fcc 	andi	r2,r2,255
  810d04:	1080201c 	xori	r2,r2,128
  810d08:	10bfe004 	addi	r2,r2,-128
  810d0c:	003f2f06 	br	8109cc <find_file_in_directory+0x708>
  810d10:	18bff804 	addi	r2,r3,-32
  810d14:	11003fcc 	andi	r4,r2,255
  810d18:	2100201c 	xori	r4,r4,128
  810d1c:	213fe004 	addi	r4,r4,-128
  810d20:	003f2306 	br	8109b0 <find_file_in_directory+0x6ec>
  810d24:	18bff804 	addi	r2,r3,-32
  810d28:	10803fcc 	andi	r2,r2,255
  810d2c:	1080201c 	xori	r2,r2,128
  810d30:	10bfe004 	addi	r2,r2,-128
  810d34:	003f3406 	br	810a08 <find_file_in_directory+0x744>
  810d38:	18bff804 	addi	r2,r3,-32
  810d3c:	11003fcc 	andi	r4,r2,255
  810d40:	2100201c 	xori	r4,r4,128
  810d44:	213fe004 	addi	r4,r4,-128
  810d48:	003f2806 	br	8109ec <find_file_in_directory+0x728>
  810d4c:	18803fcc 	andi	r2,r3,255
  810d50:	1080201c 	xori	r2,r2,128
  810d54:	10bfe004 	addi	r2,r2,-128
  810d58:	003f3c06 	br	810a4c <find_file_in_directory+0x788>
  810d5c:	19003fcc 	andi	r4,r3,255
  810d60:	2100201c 	xori	r4,r4,128
  810d64:	213fe004 	addi	r4,r4,-128
  810d68:	003f3006 	br	810a2c <find_file_in_directory+0x768>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
  810d6c:	05400044 	movi	r21,1
  810d70:	003f8406 	br	810b84 <find_file_in_directory+0x8c0>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810d74:	d8c000c3 	ldbu	r3,3(sp)
  810d78:	20bff804 	addi	r2,r4,-32
  810d7c:	11003fcc 	andi	r4,r2,255
  810d80:	18bfe7c4 	addi	r2,r3,-97
  810d84:	2100201c 	xori	r4,r4,128
  810d88:	10803fcc 	andi	r2,r2,255
  810d8c:	213fe004 	addi	r4,r4,-128
  810d90:	80bdb936 	bltu	r16,r2,810478 <find_file_in_directory+0x1b4>
  810d94:	18bff804 	addi	r2,r3,-32
  810d98:	10803fcc 	andi	r2,r2,255
  810d9c:	1080201c 	xori	r2,r2,128
  810da0:	10bfe004 	addi	r2,r2,-128
  810da4:	20bdb826 	beq	r4,r2,810488 <find_file_in_directory+0x1c4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810da8:	88c00203 	ldbu	r3,8(r17)
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810dac:	000b883a 	mov	r5,zero
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810db0:	18bfe7c4 	addi	r2,r3,-97
  810db4:	10803fcc 	andi	r2,r2,255
  810db8:	80be2236 	bltu	r16,r2,810644 <find_file_in_directory+0x380>
  810dbc:	18bff804 	addi	r2,r3,-32
  810dc0:	d8c00003 	ldbu	r3,0(sp)
  810dc4:	11003fcc 	andi	r4,r2,255
  810dc8:	2100201c 	xori	r4,r4,128
  810dcc:	18bfe7c4 	addi	r2,r3,-97
  810dd0:	10803fcc 	andi	r2,r2,255
  810dd4:	213fe004 	addi	r4,r4,-128
  810dd8:	80be2136 	bltu	r16,r2,810660 <find_file_in_directory+0x39c>
  810ddc:	18bff804 	addi	r2,r3,-32
  810de0:	10803fcc 	andi	r2,r2,255
  810de4:	1080201c 	xori	r2,r2,128
  810de8:	10bfe004 	addi	r2,r2,-128
  810dec:	003e1f06 	br	81066c <find_file_in_directory+0x3a8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810df0:	18bff804 	addi	r2,r3,-32
  810df4:	10803fcc 	andi	r2,r2,255
  810df8:	1080201c 	xori	r2,r2,128
  810dfc:	10bfe004 	addi	r2,r2,-128
  810e00:	003daf06 	br	8104c0 <find_file_in_directory+0x1fc>
  810e04:	18bff804 	addi	r2,r3,-32
  810e08:	11003fcc 	andi	r4,r2,255
  810e0c:	2100201c 	xori	r4,r4,128
  810e10:	213fe004 	addi	r4,r4,-128
  810e14:	003da306 	br	8104a4 <find_file_in_directory+0x1e0>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810e18:	18bff804 	addi	r2,r3,-32
  810e1c:	10803fcc 	andi	r2,r2,255
  810e20:	1080201c 	xori	r2,r2,128
  810e24:	10bfe004 	addi	r2,r2,-128
  810e28:	003e1f06 	br	8106a8 <find_file_in_directory+0x3e4>
  810e2c:	18bff804 	addi	r2,r3,-32
  810e30:	11003fcc 	andi	r4,r2,255
  810e34:	2100201c 	xori	r4,r4,128
  810e38:	213fe004 	addi	r4,r4,-128
  810e3c:	003e1306 	br	81068c <find_file_in_directory+0x3c8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810e40:	18bff804 	addi	r2,r3,-32
  810e44:	10803fcc 	andi	r2,r2,255
  810e48:	1080201c 	xori	r2,r2,128
  810e4c:	10bfe004 	addi	r2,r2,-128
  810e50:	003daa06 	br	8104fc <find_file_in_directory+0x238>
  810e54:	18bff804 	addi	r2,r3,-32
  810e58:	11003fcc 	andi	r4,r2,255
  810e5c:	2100201c 	xori	r4,r4,128
  810e60:	213fe004 	addi	r4,r4,-128
  810e64:	003d9e06 	br	8104e0 <find_file_in_directory+0x21c>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  810e68:	18803fcc 	andi	r2,r3,255
  810e6c:	1080201c 	xori	r2,r2,128
  810e70:	10bfe004 	addi	r2,r2,-128
  810e74:	003e1d06 	br	8106ec <find_file_in_directory+0x428>
  810e78:	19003fcc 	andi	r4,r3,255
  810e7c:	2100201c 	xori	r4,r4,128
  810e80:	213fe004 	addi	r4,r4,-128
  810e84:	003e1106 	br	8106cc <find_file_in_directory+0x408>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  810e88:	18bff804 	addi	r2,r3,-32
  810e8c:	10803fcc 	andi	r2,r2,255
  810e90:	1080201c 	xori	r2,r2,128
  810e94:	10bfe004 	addi	r2,r2,-128
  810e98:	003da706 	br	810538 <find_file_in_directory+0x274>
  810e9c:	18bff804 	addi	r2,r3,-32
  810ea0:	11003fcc 	andi	r4,r2,255
  810ea4:	2100201c 	xori	r4,r4,128
  810ea8:	213fe004 	addi	r4,r4,-128
  810eac:	003d9b06 	br	81051c <find_file_in_directory+0x258>
  810eb0:	18bff804 	addi	r2,r3,-32
  810eb4:	10803fcc 	andi	r2,r2,255
  810eb8:	1080201c 	xori	r2,r2,128
  810ebc:	10bfe004 	addi	r2,r2,-128
  810ec0:	003dac06 	br	810574 <find_file_in_directory+0x2b0>
  810ec4:	18bff804 	addi	r2,r3,-32
  810ec8:	11003fcc 	andi	r4,r2,255
  810ecc:	2100201c 	xori	r4,r4,128
  810ed0:	213fe004 	addi	r4,r4,-128
  810ed4:	003da006 	br	810558 <find_file_in_directory+0x294>
  810ed8:	18bff804 	addi	r2,r3,-32
  810edc:	10803fcc 	andi	r2,r2,255
  810ee0:	1080201c 	xori	r2,r2,128
  810ee4:	10bfe004 	addi	r2,r2,-128
  810ee8:	003db106 	br	8105b0 <find_file_in_directory+0x2ec>
  810eec:	18bff804 	addi	r2,r3,-32
  810ef0:	11003fcc 	andi	r4,r2,255
  810ef4:	2100201c 	xori	r4,r4,128
  810ef8:	213fe004 	addi	r4,r4,-128
  810efc:	003da506 	br	810594 <find_file_in_directory+0x2d0>
  810f00:	18bff804 	addi	r2,r3,-32
  810f04:	10803fcc 	andi	r2,r2,255
  810f08:	1080201c 	xori	r2,r2,128
  810f0c:	10bfe004 	addi	r2,r2,-128
  810f10:	003db606 	br	8105ec <find_file_in_directory+0x328>
  810f14:	18bff804 	addi	r2,r3,-32
  810f18:	11003fcc 	andi	r4,r2,255
  810f1c:	2100201c 	xori	r4,r4,128
  810f20:	213fe004 	addi	r4,r4,-128
  810f24:	003daa06 	br	8105d0 <find_file_in_directory+0x30c>
  810f28:	18803fcc 	andi	r2,r3,255
  810f2c:	1080201c 	xori	r2,r2,128
  810f30:	10bfe004 	addi	r2,r2,-128
  810f34:	003dbe06 	br	810630 <find_file_in_directory+0x36c>
  810f38:	19003fcc 	andi	r4,r3,255
  810f3c:	2100201c 	xori	r4,r4,128
  810f40:	213fe004 	addi	r4,r4,-128
  810f44:	003db206 	br	810610 <find_file_in_directory+0x34c>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
  810f48:	05400044 	movi	r21,1
  810f4c:	003df006 	br	810710 <find_file_in_directory+0x44c>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810f50:	00800804 	movi	r2,32
    char extension[3] = { ' ', ' ', ' ' };
  810f54:	d8800085 	stb	r2,2(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810f58:	d88000c5 	stb	r2,3(sp)
  810f5c:	d8800105 	stb	r2,4(sp)
  810f60:	d8800145 	stb	r2,5(sp)
  810f64:	d8800185 	stb	r2,6(sp)
  810f68:	d88001c5 	stb	r2,7(sp)
  810f6c:	d8800205 	stb	r2,8(sp)
  810f70:	d8800245 	stb	r2,9(sp)
  810f74:	d8800285 	stb	r2,10(sp)
    char extension[3] = { ' ', ' ', ' ' };
  810f78:	d8800005 	stb	r2,0(sp)
  810f7c:	d8800045 	stb	r2,1(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
  810f80:	9809883a 	mov	r4,r19
  810f84:	0803e080 	call	803e08 <strlen>
  810f88:	102b883a 	mov	r21,r2
  810f8c:	003cf906 	br	810374 <find_file_in_directory+0xb0>

00810f90 <get_home_directory_cluster_for_file>:
}


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  810f90:	deffee04 	addi	sp,sp,-72
  810f94:	dc400915 	stw	r17,36(sp)
  810f98:	dfc01115 	stw	ra,68(sp)
  810f9c:	df001015 	stw	fp,64(sp)
  810fa0:	ddc00f15 	stw	r23,60(sp)
  810fa4:	dd800e15 	stw	r22,56(sp)
  810fa8:	dd400d15 	stw	r21,52(sp)
  810fac:	dd000c15 	stw	r20,48(sp)
  810fb0:	dcc00b15 	stw	r19,44(sp)
  810fb4:	dc800a15 	stw	r18,40(sp)
  810fb8:	dc000815 	stw	r16,32(sp)
  810fbc:	d9400715 	stw	r5,28(sp)
  810fc0:	d9000615 	stw	r4,24(sp)
  810fc4:	3023883a 	mov	r17,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  810fc8:	0803e080 	call	803e08 <strlen>
    
    for(index = 0; index < length; index++)
  810fcc:	00831f0e 	bge	zero,r2,811c4c <get_home_directory_cluster_for_file+0xcbc>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  810fd0:	d9000617 	ldw	r4,24(sp)
  810fd4:	20c00007 	ldb	r3,0(r4)
  810fd8:	01001704 	movi	r4,92
  810fdc:	19031b26 	beq	r3,r4,811c4c <get_home_directory_cluster_for_file+0xcbc>
  810fe0:	01800bc4 	movi	r6,47
  810fe4:	19831926 	beq	r3,r6,811c4c <get_home_directory_cluster_for_file+0xcbc>
  810fe8:	200b883a 	mov	r5,r4
  810fec:	002d883a 	mov	r22,zero
  810ff0:	3009883a 	mov	r4,r6
  810ff4:	00000306 	br	811004 <get_home_directory_cluster_for_file+0x74>
  810ff8:	18c00007 	ldb	r3,0(r3)
  810ffc:	19400b26 	beq	r3,r5,81102c <get_home_directory_cluster_for_file+0x9c>
  811000:	19000a26 	beq	r3,r4,81102c <get_home_directory_cluster_for_file+0x9c>
  811004:	d9800617 	ldw	r6,24(sp)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811008:	b5800044 	addi	r22,r22,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  81100c:	3587883a 	add	r3,r6,r22
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811010:	15bff91e 	bne	r2,r22,810ff8 <get_home_directory_cluster_for_file+0x68>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  811014:	d9000717 	ldw	r4,28(sp)
  811018:	20000015 	stw	zero,0(r4)
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  81101c:	01000044 	movi	r4,1
  811020:	d9000515 	stw	r4,20(sp)
  811024:	88000a15 	stw	zero,40(r17)
  811028:	0000f106 	br	8113f0 <get_home_directory_cluster_for_file+0x460>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  81102c:	0583080e 	bge	zero,r22,811c50 <get_home_directory_cluster_for_file+0xcc0>
  811030:	dc000617 	ldw	r16,24(sp)
  811034:	d8000515 	stw	zero,20(sp)
  811038:	0027883a 	mov	r19,zero
  81103c:	d8000415 	stw	zero,16(sp)
  811040:	07002074 	movhi	fp,129
  811044:	e71f4e04 	addi	fp,fp,32056
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  811048:	00800804 	movi	r2,32
        char extension[3] = { ' ', ' ', ' ' };
  81104c:	8009883a 	mov	r4,r16
  811050:	000d883a 	mov	r6,zero
  811054:	01ffffc4 	movi	r7,-1
  811058:	02000b84 	movi	r8,46
  81105c:	da4000c4 	addi	r9,sp,3
  811060:	d8800085 	stb	r2,2(sp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  811064:	d88000c5 	stb	r2,3(sp)
  811068:	d8800105 	stb	r2,4(sp)
  81106c:	d8800145 	stb	r2,5(sp)
  811070:	d8800185 	stb	r2,6(sp)
  811074:	d88001c5 	stb	r2,7(sp)
  811078:	d8800205 	stb	r2,8(sp)
  81107c:	d8800245 	stb	r2,9(sp)
  811080:	d8800285 	stb	r2,10(sp)
        char extension[3] = { ' ', ' ', ' ' };
  811084:	d8800005 	stb	r2,0(sp)
  811088:	d8800045 	stb	r2,1(sp)
  81108c:	00000806 	br	8110b0 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  811090:	31c5c83a 	sub	r2,r6,r7
  811094:	d885883a 	add	r2,sp,r2
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
  811098:	498b883a 	add	r5,r9,r6
        {
            if (file_name[index+start_location] == '.')
            {
                ext_index = index;
            }
            else if (ext_index < 0)
  81109c:	3800e116 	blt	r7,zero,811424 <get_home_directory_cluster_for_file+0x494>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  8110a0:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  8110a4:	31800044 	addi	r6,r6,1
  8110a8:	21000044 	addi	r4,r4,1
  8110ac:	3580090e 	bge	r6,r22,8110d4 <get_home_directory_cluster_for_file+0x144>
        {
            if (file_name[index+start_location] == '.')
  8110b0:	20c00003 	ldbu	r3,0(r4)
  8110b4:	18803fcc 	andi	r2,r3,255
  8110b8:	1080201c 	xori	r2,r2,128
  8110bc:	10bfe004 	addi	r2,r2,-128
  8110c0:	123ff31e 	bne	r2,r8,811090 <get_home_directory_cluster_for_file+0x100>
  8110c4:	300f883a 	mov	r7,r6
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  8110c8:	31800044 	addi	r6,r6,1
  8110cc:	21000044 	addi	r4,r4,1
  8110d0:	35bff716 	blt	r6,r22,8110b0 <get_home_directory_cluster_for_file+0x120>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  8110d4:	98014c1e 	bne	r19,zero,811608 <get_home_directory_cluster_for_file+0x678>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8110d8:	e080050b 	ldhu	r2,20(fp)
  8110dc:	e0c0030b 	ldhu	r3,12(fp)
  8110e0:	1004917a 	slli	r2,r2,5
  8110e4:	10e9283a 	div	r20,r2,r3
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8110e8:	a000c026 	beq	r20,zero,8113ec <get_home_directory_cluster_for_file+0x45c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  8110ec:	e1001317 	ldw	r4,76(fp)
  8110f0:	d1677b17 	ldw	r5,-25108(gp)
  8110f4:	9909883a 	add	r4,r19,r4
  8110f8:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8110fc:	1000bb26 	beq	r2,zero,8113ec <get_home_directory_cluster_for_file+0x45c>
                        }
                    }
                }
                else
                {
                    break;
  811100:	0025883a 	mov	r18,zero
  811104:	04000644 	movi	r16,25
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  811108:	9009883a 	mov	r4,r18
  81110c:	880b883a 	mov	r5,r17
  811110:	000d883a 	mov	r6,zero
  811114:	980f883a 	mov	r7,r19
  811118:	080ee6c0 	call	80ee6c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81111c:	89000003 	ldbu	r4,0(r17)
  811120:	00803944 	movi	r2,229
  811124:	20c03fcc 	andi	r3,r4,255
  811128:	1880ab26 	beq	r3,r2,8113d8 <get_home_directory_cluster_for_file+0x448>
  81112c:	1800aa26 	beq	r3,zero,8113d8 <get_home_directory_cluster_for_file+0x448>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811130:	20bfe7c4 	addi	r2,r4,-97
  811134:	10803fcc 	andi	r2,r2,255
  811138:	8080cd2e 	bgeu	r16,r2,811470 <get_home_directory_cluster_for_file+0x4e0>
  81113c:	21003fcc 	andi	r4,r4,255
  811140:	2100201c 	xori	r4,r4,128
  811144:	213fe004 	addi	r4,r4,-128
  811148:	d8c000c3 	ldbu	r3,3(sp)
  81114c:	18bfe7c4 	addi	r2,r3,-97
  811150:	10803fcc 	andi	r2,r2,255
  811154:	8080bf2e 	bgeu	r16,r2,811454 <get_home_directory_cluster_for_file+0x4c4>
  811158:	18803fcc 	andi	r2,r3,255
  81115c:	1080201c 	xori	r2,r2,128
  811160:	10bfe004 	addi	r2,r2,-128
  811164:	2080c01e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  811168:	88c00043 	ldbu	r3,1(r17)
  81116c:	18bfe7c4 	addi	r2,r3,-97
  811170:	10803fcc 	andi	r2,r2,255
  811174:	8080c82e 	bgeu	r16,r2,811498 <get_home_directory_cluster_for_file+0x508>
  811178:	19003fcc 	andi	r4,r3,255
  81117c:	2100201c 	xori	r4,r4,128
  811180:	213fe004 	addi	r4,r4,-128
  811184:	d8c00103 	ldbu	r3,4(sp)
  811188:	18bfe7c4 	addi	r2,r3,-97
  81118c:	10803fcc 	andi	r2,r2,255
  811190:	8080bc2e 	bgeu	r16,r2,811484 <get_home_directory_cluster_for_file+0x4f4>
  811194:	18803fcc 	andi	r2,r3,255
  811198:	1080201c 	xori	r2,r2,128
  81119c:	10bfe004 	addi	r2,r2,-128
  8111a0:	2080b11e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  8111a4:	88c00083 	ldbu	r3,2(r17)
  8111a8:	18bfe7c4 	addi	r2,r3,-97
  8111ac:	10803fcc 	andi	r2,r2,255
  8111b0:	8080d52e 	bgeu	r16,r2,811508 <get_home_directory_cluster_for_file+0x578>
  8111b4:	19003fcc 	andi	r4,r3,255
  8111b8:	2100201c 	xori	r4,r4,128
  8111bc:	213fe004 	addi	r4,r4,-128
  8111c0:	d8c00143 	ldbu	r3,5(sp)
  8111c4:	18bfe7c4 	addi	r2,r3,-97
  8111c8:	10803fcc 	andi	r2,r2,255
  8111cc:	8080c92e 	bgeu	r16,r2,8114f4 <get_home_directory_cluster_for_file+0x564>
  8111d0:	18803fcc 	andi	r2,r3,255
  8111d4:	1080201c 	xori	r2,r2,128
  8111d8:	10bfe004 	addi	r2,r2,-128
  8111dc:	2080a21e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  8111e0:	88c000c3 	ldbu	r3,3(r17)
  8111e4:	18bfe7c4 	addi	r2,r3,-97
  8111e8:	10803fcc 	andi	r2,r2,255
  8111ec:	8080d02e 	bgeu	r16,r2,811530 <get_home_directory_cluster_for_file+0x5a0>
  8111f0:	19003fcc 	andi	r4,r3,255
  8111f4:	2100201c 	xori	r4,r4,128
  8111f8:	213fe004 	addi	r4,r4,-128
  8111fc:	d8c00183 	ldbu	r3,6(sp)
  811200:	18bfe7c4 	addi	r2,r3,-97
  811204:	10803fcc 	andi	r2,r2,255
  811208:	8080c42e 	bgeu	r16,r2,81151c <get_home_directory_cluster_for_file+0x58c>
  81120c:	18803fcc 	andi	r2,r3,255
  811210:	1080201c 	xori	r2,r2,128
  811214:	10bfe004 	addi	r2,r2,-128
  811218:	2080931e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  81121c:	88c00103 	ldbu	r3,4(r17)
  811220:	18bfe7c4 	addi	r2,r3,-97
  811224:	10803fcc 	andi	r2,r2,255
  811228:	8080cb2e 	bgeu	r16,r2,811558 <get_home_directory_cluster_for_file+0x5c8>
  81122c:	19003fcc 	andi	r4,r3,255
  811230:	2100201c 	xori	r4,r4,128
  811234:	213fe004 	addi	r4,r4,-128
  811238:	d8c001c3 	ldbu	r3,7(sp)
  81123c:	18bfe7c4 	addi	r2,r3,-97
  811240:	10803fcc 	andi	r2,r2,255
  811244:	8080bf2e 	bgeu	r16,r2,811544 <get_home_directory_cluster_for_file+0x5b4>
  811248:	18803fcc 	andi	r2,r3,255
  81124c:	1080201c 	xori	r2,r2,128
  811250:	10bfe004 	addi	r2,r2,-128
  811254:	2080841e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  811258:	88c00143 	ldbu	r3,5(r17)
  81125c:	18bfe7c4 	addi	r2,r3,-97
  811260:	10803fcc 	andi	r2,r2,255
  811264:	8080c62e 	bgeu	r16,r2,811580 <get_home_directory_cluster_for_file+0x5f0>
  811268:	19003fcc 	andi	r4,r3,255
  81126c:	2100201c 	xori	r4,r4,128
  811270:	213fe004 	addi	r4,r4,-128
  811274:	d8c00203 	ldbu	r3,8(sp)
  811278:	18bfe7c4 	addi	r2,r3,-97
  81127c:	10803fcc 	andi	r2,r2,255
  811280:	8080ba2e 	bgeu	r16,r2,81156c <get_home_directory_cluster_for_file+0x5dc>
  811284:	18803fcc 	andi	r2,r3,255
  811288:	1080201c 	xori	r2,r2,128
  81128c:	10bfe004 	addi	r2,r2,-128
  811290:	2080751e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  811294:	88c00183 	ldbu	r3,6(r17)
  811298:	18bfe7c4 	addi	r2,r3,-97
  81129c:	10803fcc 	andi	r2,r2,255
  8112a0:	8080c12e 	bgeu	r16,r2,8115a8 <get_home_directory_cluster_for_file+0x618>
  8112a4:	19003fcc 	andi	r4,r3,255
  8112a8:	2100201c 	xori	r4,r4,128
  8112ac:	213fe004 	addi	r4,r4,-128
  8112b0:	d8c00243 	ldbu	r3,9(sp)
  8112b4:	18bfe7c4 	addi	r2,r3,-97
  8112b8:	10803fcc 	andi	r2,r2,255
  8112bc:	8080b52e 	bgeu	r16,r2,811594 <get_home_directory_cluster_for_file+0x604>
  8112c0:	18803fcc 	andi	r2,r3,255
  8112c4:	1080201c 	xori	r2,r2,128
  8112c8:	10bfe004 	addi	r2,r2,-128
  8112cc:	2080661e 	bne	r4,r2,811468 <get_home_directory_cluster_for_file+0x4d8>
  8112d0:	88c001c3 	ldbu	r3,7(r17)
  8112d4:	18bfe7c4 	addi	r2,r3,-97
  8112d8:	10803fcc 	andi	r2,r2,255
  8112dc:	8080bb36 	bltu	r16,r2,8115cc <get_home_directory_cluster_for_file+0x63c>
  8112e0:	18bff804 	addi	r2,r3,-32
  8112e4:	11003fcc 	andi	r4,r2,255
  8112e8:	2100201c 	xori	r4,r4,128
  8112ec:	213fe004 	addi	r4,r4,-128
  8112f0:	d8c00283 	ldbu	r3,10(sp)
  8112f4:	18bfe7c4 	addi	r2,r3,-97
  8112f8:	10803fcc 	andi	r2,r2,255
  8112fc:	8080af36 	bltu	r16,r2,8115bc <get_home_directory_cluster_for_file+0x62c>
  811300:	18bff804 	addi	r2,r3,-32
  811304:	10803fcc 	andi	r2,r2,255
  811308:	1080201c 	xori	r2,r2,128
  81130c:	10bfe004 	addi	r2,r2,-128
  811310:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811314:	88c00203 	ldbu	r3,8(r17)
  811318:	18bfe7c4 	addi	r2,r3,-97
  81131c:	10803fcc 	andi	r2,r2,255
  811320:	8080472e 	bgeu	r16,r2,811440 <get_home_directory_cluster_for_file+0x4b0>
  811324:	19003fcc 	andi	r4,r3,255
  811328:	2100201c 	xori	r4,r4,128
  81132c:	213fe004 	addi	r4,r4,-128
  811330:	d8c00003 	ldbu	r3,0(sp)
  811334:	18bfe7c4 	addi	r2,r3,-97
  811338:	10803fcc 	andi	r2,r2,255
  81133c:	80803b2e 	bgeu	r16,r2,81142c <get_home_directory_cluster_for_file+0x49c>
  811340:	18803fcc 	andi	r2,r3,255
  811344:	1080201c 	xori	r2,r2,128
  811348:	10bfe004 	addi	r2,r2,-128
  81134c:	2080221e 	bne	r4,r2,8113d8 <get_home_directory_cluster_for_file+0x448>
  811350:	88c00243 	ldbu	r3,9(r17)
  811354:	18bfe7c4 	addi	r2,r3,-97
  811358:	10803fcc 	andi	r2,r2,255
  81135c:	8080582e 	bgeu	r16,r2,8114c0 <get_home_directory_cluster_for_file+0x530>
  811360:	19003fcc 	andi	r4,r3,255
  811364:	2100201c 	xori	r4,r4,128
  811368:	213fe004 	addi	r4,r4,-128
  81136c:	d8c00043 	ldbu	r3,1(sp)
  811370:	18bfe7c4 	addi	r2,r3,-97
  811374:	10803fcc 	andi	r2,r2,255
  811378:	80804c2e 	bgeu	r16,r2,8114ac <get_home_directory_cluster_for_file+0x51c>
  81137c:	18803fcc 	andi	r2,r3,255
  811380:	1080201c 	xori	r2,r2,128
  811384:	10bfe004 	addi	r2,r2,-128
  811388:	2080131e 	bne	r4,r2,8113d8 <get_home_directory_cluster_for_file+0x448>
  81138c:	88c00283 	ldbu	r3,10(r17)
  811390:	18bfe7c4 	addi	r2,r3,-97
  811394:	10803fcc 	andi	r2,r2,255
  811398:	80805236 	bltu	r16,r2,8114e4 <get_home_directory_cluster_for_file+0x554>
  81139c:	18bff804 	addi	r2,r3,-32
  8113a0:	11003fcc 	andi	r4,r2,255
  8113a4:	2100201c 	xori	r4,r4,128
  8113a8:	213fe004 	addi	r4,r4,-128
  8113ac:	d8c00083 	ldbu	r3,2(sp)
  8113b0:	18bfe7c4 	addi	r2,r3,-97
  8113b4:	10803fcc 	andi	r2,r2,255
  8113b8:	80804636 	bltu	r16,r2,8114d4 <get_home_directory_cluster_for_file+0x544>
  8113bc:	18bff804 	addi	r2,r3,-32
  8113c0:	10803fcc 	andi	r2,r2,255
  8113c4:	1080201c 	xori	r2,r2,128
  8113c8:	10bfe004 	addi	r2,r2,-128
  8113cc:	2080021e 	bne	r4,r2,8113d8 <get_home_directory_cluster_for_file+0x448>
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
  8113d0:	2805003a 	cmpeq	r2,r5,zero
  8113d4:	10008126 	beq	r2,zero,8115dc <get_home_directory_cluster_for_file+0x64c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  8113d8:	94800804 	addi	r18,r18,32
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  8113dc:	00808004 	movi	r2,512
  8113e0:	90bf491e 	bne	r18,r2,811108 <get_home_directory_cluster_for_file+0x178>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8113e4:	9cc00044 	addi	r19,r19,1
  8113e8:	a4ff401e 	bne	r20,r19,8110ec <get_home_directory_cluster_for_file+0x15c>
    }
    
    *home_directory_cluster = home_dir_cluster;
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  8113ec:	d8000515 	stw	zero,20(sp)
		result = true;
    }
    return result;
}
  8113f0:	d8800517 	ldw	r2,20(sp)
  8113f4:	dfc01117 	ldw	ra,68(sp)
  8113f8:	df001017 	ldw	fp,64(sp)
  8113fc:	ddc00f17 	ldw	r23,60(sp)
  811400:	dd800e17 	ldw	r22,56(sp)
  811404:	dd400d17 	ldw	r21,52(sp)
  811408:	dd000c17 	ldw	r20,48(sp)
  81140c:	dcc00b17 	ldw	r19,44(sp)
  811410:	dc800a17 	ldw	r18,40(sp)
  811414:	dc400917 	ldw	r17,36(sp)
  811418:	dc000817 	ldw	r16,32(sp)
  81141c:	dec01204 	addi	sp,sp,72
  811420:	f800283a 	ret
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
  811424:	28c00005 	stb	r3,0(r5)
  811428:	003f1e06 	br	8110a4 <get_home_directory_cluster_for_file+0x114>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  81142c:	18bff804 	addi	r2,r3,-32
  811430:	10803fcc 	andi	r2,r2,255
  811434:	1080201c 	xori	r2,r2,128
  811438:	10bfe004 	addi	r2,r2,-128
  81143c:	003fc306 	br	81134c <get_home_directory_cluster_for_file+0x3bc>
  811440:	18bff804 	addi	r2,r3,-32
  811444:	11003fcc 	andi	r4,r2,255
  811448:	2100201c 	xori	r4,r4,128
  81144c:	213fe004 	addi	r4,r4,-128
  811450:	003fb706 	br	811330 <get_home_directory_cluster_for_file+0x3a0>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811454:	18bff804 	addi	r2,r3,-32
  811458:	10803fcc 	andi	r2,r2,255
  81145c:	1080201c 	xori	r2,r2,128
  811460:	10bfe004 	addi	r2,r2,-128
  811464:	20bf4026 	beq	r4,r2,811168 <get_home_directory_cluster_for_file+0x1d8>
  811468:	000b883a 	mov	r5,zero
  81146c:	003fa906 	br	811314 <get_home_directory_cluster_for_file+0x384>
  811470:	20bff804 	addi	r2,r4,-32
  811474:	11003fcc 	andi	r4,r2,255
  811478:	2100201c 	xori	r4,r4,128
  81147c:	213fe004 	addi	r4,r4,-128
  811480:	003f3106 	br	811148 <get_home_directory_cluster_for_file+0x1b8>
  811484:	18bff804 	addi	r2,r3,-32
  811488:	10803fcc 	andi	r2,r2,255
  81148c:	1080201c 	xori	r2,r2,128
  811490:	10bfe004 	addi	r2,r2,-128
  811494:	003f4206 	br	8111a0 <get_home_directory_cluster_for_file+0x210>
  811498:	18bff804 	addi	r2,r3,-32
  81149c:	11003fcc 	andi	r4,r2,255
  8114a0:	2100201c 	xori	r4,r4,128
  8114a4:	213fe004 	addi	r4,r4,-128
  8114a8:	003f3606 	br	811184 <get_home_directory_cluster_for_file+0x1f4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  8114ac:	18bff804 	addi	r2,r3,-32
  8114b0:	10803fcc 	andi	r2,r2,255
  8114b4:	1080201c 	xori	r2,r2,128
  8114b8:	10bfe004 	addi	r2,r2,-128
  8114bc:	003fb206 	br	811388 <get_home_directory_cluster_for_file+0x3f8>
  8114c0:	18bff804 	addi	r2,r3,-32
  8114c4:	11003fcc 	andi	r4,r2,255
  8114c8:	2100201c 	xori	r4,r4,128
  8114cc:	213fe004 	addi	r4,r4,-128
  8114d0:	003fa606 	br	81136c <get_home_directory_cluster_for_file+0x3dc>
  8114d4:	18803fcc 	andi	r2,r3,255
  8114d8:	1080201c 	xori	r2,r2,128
  8114dc:	10bfe004 	addi	r2,r2,-128
  8114e0:	003fba06 	br	8113cc <get_home_directory_cluster_for_file+0x43c>
  8114e4:	19003fcc 	andi	r4,r3,255
  8114e8:	2100201c 	xori	r4,r4,128
  8114ec:	213fe004 	addi	r4,r4,-128
  8114f0:	003fae06 	br	8113ac <get_home_directory_cluster_for_file+0x41c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8114f4:	18bff804 	addi	r2,r3,-32
  8114f8:	10803fcc 	andi	r2,r2,255
  8114fc:	1080201c 	xori	r2,r2,128
  811500:	10bfe004 	addi	r2,r2,-128
  811504:	003f3506 	br	8111dc <get_home_directory_cluster_for_file+0x24c>
  811508:	18bff804 	addi	r2,r3,-32
  81150c:	11003fcc 	andi	r4,r2,255
  811510:	2100201c 	xori	r4,r4,128
  811514:	213fe004 	addi	r4,r4,-128
  811518:	003f2906 	br	8111c0 <get_home_directory_cluster_for_file+0x230>
  81151c:	18bff804 	addi	r2,r3,-32
  811520:	10803fcc 	andi	r2,r2,255
  811524:	1080201c 	xori	r2,r2,128
  811528:	10bfe004 	addi	r2,r2,-128
  81152c:	003f3a06 	br	811218 <get_home_directory_cluster_for_file+0x288>
  811530:	18bff804 	addi	r2,r3,-32
  811534:	11003fcc 	andi	r4,r2,255
  811538:	2100201c 	xori	r4,r4,128
  81153c:	213fe004 	addi	r4,r4,-128
  811540:	003f2e06 	br	8111fc <get_home_directory_cluster_for_file+0x26c>
  811544:	18bff804 	addi	r2,r3,-32
  811548:	10803fcc 	andi	r2,r2,255
  81154c:	1080201c 	xori	r2,r2,128
  811550:	10bfe004 	addi	r2,r2,-128
  811554:	003f3f06 	br	811254 <get_home_directory_cluster_for_file+0x2c4>
  811558:	18bff804 	addi	r2,r3,-32
  81155c:	11003fcc 	andi	r4,r2,255
  811560:	2100201c 	xori	r4,r4,128
  811564:	213fe004 	addi	r4,r4,-128
  811568:	003f3306 	br	811238 <get_home_directory_cluster_for_file+0x2a8>
  81156c:	18bff804 	addi	r2,r3,-32
  811570:	10803fcc 	andi	r2,r2,255
  811574:	1080201c 	xori	r2,r2,128
  811578:	10bfe004 	addi	r2,r2,-128
  81157c:	003f4406 	br	811290 <get_home_directory_cluster_for_file+0x300>
  811580:	18bff804 	addi	r2,r3,-32
  811584:	11003fcc 	andi	r4,r2,255
  811588:	2100201c 	xori	r4,r4,128
  81158c:	213fe004 	addi	r4,r4,-128
  811590:	003f3806 	br	811274 <get_home_directory_cluster_for_file+0x2e4>
  811594:	18bff804 	addi	r2,r3,-32
  811598:	10803fcc 	andi	r2,r2,255
  81159c:	1080201c 	xori	r2,r2,128
  8115a0:	10bfe004 	addi	r2,r2,-128
  8115a4:	003f4906 	br	8112cc <get_home_directory_cluster_for_file+0x33c>
  8115a8:	18bff804 	addi	r2,r3,-32
  8115ac:	11003fcc 	andi	r4,r2,255
  8115b0:	2100201c 	xori	r4,r4,128
  8115b4:	213fe004 	addi	r4,r4,-128
  8115b8:	003f3d06 	br	8112b0 <get_home_directory_cluster_for_file+0x320>
  8115bc:	18803fcc 	andi	r2,r3,255
  8115c0:	1080201c 	xori	r2,r2,128
  8115c4:	10bfe004 	addi	r2,r2,-128
  8115c8:	003f5106 	br	811310 <get_home_directory_cluster_for_file+0x380>
  8115cc:	19003fcc 	andi	r4,r3,255
  8115d0:	2100201c 	xori	r4,r4,128
  8115d4:	213fe004 	addi	r4,r4,-128
  8115d8:	003f4506 	br	8112f0 <get_home_directory_cluster_for_file+0x360>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
                            {
                                new_cluster = file_record->start_cluster_index;
  8115dc:	8980058b 	ldhu	r6,22(r17)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  8115e0:	00800044 	movi	r2,1
  8115e4:	88800a15 	stw	r2,40(r17)
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  8115e8:	303f7e26 	beq	r6,zero,8113e4 <get_home_directory_cluster_for_file+0x454>
            }
            if (new_cluster != home_dir_cluster)
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
  8115ec:	d8c00417 	ldw	r3,16(sp)
  8115f0:	b0800044 	addi	r2,r22,1
  8115f4:	3027883a 	mov	r19,r6
  8115f8:	1887883a 	add	r3,r3,r2
  8115fc:	180d883a 	mov	r6,r3
  811600:	d8c00415 	stw	r3,16(sp)
  811604:	0000f406 	br	8119d8 <get_home_directory_cluster_for_file+0xa48>
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811608:	e4000383 	ldbu	r16,14(fp)
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  81160c:	98bfff84 	addi	r2,r19,-2
  811610:	100b883a 	mov	r5,r2
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811614:	8009883a 	mov	r4,r16
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  811618:	d8800315 	stw	r2,12(sp)
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81161c:	0802b980 	call	802b98 <__mulsi3>
  811620:	e0c01417 	ldw	r3,80(fp)
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  811624:	982b883a 	mov	r21,r19
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811628:	10ef883a 	add	r23,r2,r3
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81162c:	8000e026 	beq	r16,zero,8119b0 <get_home_directory_cluster_for_file+0xa20>
  811630:	0029883a 	mov	r20,zero
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  811634:	d1677b17 	ldw	r5,-25108(gp)
  811638:	bd09883a 	add	r4,r23,r20
  81163c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  811640:	1000db26 	beq	r2,zero,8119b0 <get_home_directory_cluster_for_file+0xa20>
                            }
                        }
                    }
                    else
                    {
                        break;
  811644:	0025883a 	mov	r18,zero
  811648:	04000644 	movi	r16,25
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  81164c:	9009883a 	mov	r4,r18
  811650:	880b883a 	mov	r5,r17
  811654:	980d883a 	mov	r6,r19
  811658:	a00f883a 	mov	r7,r20
  81165c:	080ee6c0 	call	80ee6c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  811660:	89000003 	ldbu	r4,0(r17)
  811664:	00803944 	movi	r2,229
  811668:	20c03fcc 	andi	r3,r4,255
  81166c:	1880ab26 	beq	r3,r2,81191c <get_home_directory_cluster_for_file+0x98c>
  811670:	1800aa26 	beq	r3,zero,81191c <get_home_directory_cluster_for_file+0x98c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811674:	20bfe7c4 	addi	r2,r4,-97
  811678:	10803fcc 	andi	r2,r2,255
  81167c:	8081012e 	bgeu	r16,r2,811a84 <get_home_directory_cluster_for_file+0xaf4>
  811680:	21003fcc 	andi	r4,r4,255
  811684:	2100201c 	xori	r4,r4,128
  811688:	213fe004 	addi	r4,r4,-128
  81168c:	d8c000c3 	ldbu	r3,3(sp)
  811690:	18bfe7c4 	addi	r2,r3,-97
  811694:	10803fcc 	andi	r2,r2,255
  811698:	8080f32e 	bgeu	r16,r2,811a68 <get_home_directory_cluster_for_file+0xad8>
  81169c:	18803fcc 	andi	r2,r3,255
  8116a0:	1080201c 	xori	r2,r2,128
  8116a4:	10bfe004 	addi	r2,r2,-128
  8116a8:	2080f41e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  8116ac:	88c00043 	ldbu	r3,1(r17)
  8116b0:	18bfe7c4 	addi	r2,r3,-97
  8116b4:	10803fcc 	andi	r2,r2,255
  8116b8:	8080fc2e 	bgeu	r16,r2,811aac <get_home_directory_cluster_for_file+0xb1c>
  8116bc:	19003fcc 	andi	r4,r3,255
  8116c0:	2100201c 	xori	r4,r4,128
  8116c4:	213fe004 	addi	r4,r4,-128
  8116c8:	d8c00103 	ldbu	r3,4(sp)
  8116cc:	18bfe7c4 	addi	r2,r3,-97
  8116d0:	10803fcc 	andi	r2,r2,255
  8116d4:	8080f02e 	bgeu	r16,r2,811a98 <get_home_directory_cluster_for_file+0xb08>
  8116d8:	18803fcc 	andi	r2,r3,255
  8116dc:	1080201c 	xori	r2,r2,128
  8116e0:	10bfe004 	addi	r2,r2,-128
  8116e4:	2080e51e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  8116e8:	88c00083 	ldbu	r3,2(r17)
  8116ec:	18bfe7c4 	addi	r2,r3,-97
  8116f0:	10803fcc 	andi	r2,r2,255
  8116f4:	8081072e 	bgeu	r16,r2,811b14 <get_home_directory_cluster_for_file+0xb84>
  8116f8:	19003fcc 	andi	r4,r3,255
  8116fc:	d8c00143 	ldbu	r3,5(sp)
  811700:	2100201c 	xori	r4,r4,128
  811704:	213fe004 	addi	r4,r4,-128
  811708:	18bfe7c4 	addi	r2,r3,-97
  81170c:	10803fcc 	andi	r2,r2,255
  811710:	8081082e 	bgeu	r16,r2,811b34 <get_home_directory_cluster_for_file+0xba4>
  811714:	18803fcc 	andi	r2,r3,255
  811718:	1080201c 	xori	r2,r2,128
  81171c:	10bfe004 	addi	r2,r2,-128
  811720:	2080d61e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  811724:	88c000c3 	ldbu	r3,3(r17)
  811728:	18bfe7c4 	addi	r2,r3,-97
  81172c:	10803fcc 	andi	r2,r2,255
  811730:	8081052e 	bgeu	r16,r2,811b48 <get_home_directory_cluster_for_file+0xbb8>
  811734:	19003fcc 	andi	r4,r3,255
  811738:	d8c00183 	ldbu	r3,6(sp)
  81173c:	2100201c 	xori	r4,r4,128
  811740:	213fe004 	addi	r4,r4,-128
  811744:	18bfe7c4 	addi	r2,r3,-97
  811748:	10803fcc 	andi	r2,r2,255
  81174c:	8081062e 	bgeu	r16,r2,811b68 <get_home_directory_cluster_for_file+0xbd8>
  811750:	18803fcc 	andi	r2,r3,255
  811754:	1080201c 	xori	r2,r2,128
  811758:	10bfe004 	addi	r2,r2,-128
  81175c:	2080c71e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  811760:	88c00103 	ldbu	r3,4(r17)
  811764:	18bfe7c4 	addi	r2,r3,-97
  811768:	10803fcc 	andi	r2,r2,255
  81176c:	8081032e 	bgeu	r16,r2,811b7c <get_home_directory_cluster_for_file+0xbec>
  811770:	19003fcc 	andi	r4,r3,255
  811774:	d8c001c3 	ldbu	r3,7(sp)
  811778:	2100201c 	xori	r4,r4,128
  81177c:	213fe004 	addi	r4,r4,-128
  811780:	18bfe7c4 	addi	r2,r3,-97
  811784:	10803fcc 	andi	r2,r2,255
  811788:	8081042e 	bgeu	r16,r2,811b9c <get_home_directory_cluster_for_file+0xc0c>
  81178c:	18803fcc 	andi	r2,r3,255
  811790:	1080201c 	xori	r2,r2,128
  811794:	10bfe004 	addi	r2,r2,-128
  811798:	2080b81e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  81179c:	88c00143 	ldbu	r3,5(r17)
  8117a0:	18bfe7c4 	addi	r2,r3,-97
  8117a4:	10803fcc 	andi	r2,r2,255
  8117a8:	8081012e 	bgeu	r16,r2,811bb0 <get_home_directory_cluster_for_file+0xc20>
  8117ac:	19003fcc 	andi	r4,r3,255
  8117b0:	d8c00203 	ldbu	r3,8(sp)
  8117b4:	2100201c 	xori	r4,r4,128
  8117b8:	213fe004 	addi	r4,r4,-128
  8117bc:	18bfe7c4 	addi	r2,r3,-97
  8117c0:	10803fcc 	andi	r2,r2,255
  8117c4:	8081022e 	bgeu	r16,r2,811bd0 <get_home_directory_cluster_for_file+0xc40>
  8117c8:	18803fcc 	andi	r2,r3,255
  8117cc:	1080201c 	xori	r2,r2,128
  8117d0:	10bfe004 	addi	r2,r2,-128
  8117d4:	2080a91e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  8117d8:	88c00183 	ldbu	r3,6(r17)
  8117dc:	18bfe7c4 	addi	r2,r3,-97
  8117e0:	10803fcc 	andi	r2,r2,255
  8117e4:	8080ff2e 	bgeu	r16,r2,811be4 <get_home_directory_cluster_for_file+0xc54>
  8117e8:	19003fcc 	andi	r4,r3,255
  8117ec:	d8c00243 	ldbu	r3,9(sp)
  8117f0:	2100201c 	xori	r4,r4,128
  8117f4:	213fe004 	addi	r4,r4,-128
  8117f8:	18bfe7c4 	addi	r2,r3,-97
  8117fc:	10803fcc 	andi	r2,r2,255
  811800:	8081002e 	bgeu	r16,r2,811c04 <get_home_directory_cluster_for_file+0xc74>
  811804:	18803fcc 	andi	r2,r3,255
  811808:	1080201c 	xori	r2,r2,128
  81180c:	10bfe004 	addi	r2,r2,-128
  811810:	20809a1e 	bne	r4,r2,811a7c <get_home_directory_cluster_for_file+0xaec>
  811814:	88c001c3 	ldbu	r3,7(r17)
  811818:	18bfe7c4 	addi	r2,r3,-97
  81181c:	10803fcc 	andi	r2,r2,255
  811820:	80810136 	bltu	r16,r2,811c28 <get_home_directory_cluster_for_file+0xc98>
  811824:	18bff804 	addi	r2,r3,-32
  811828:	11003fcc 	andi	r4,r2,255
  81182c:	2100201c 	xori	r4,r4,128
  811830:	213fe004 	addi	r4,r4,-128
  811834:	d8c00283 	ldbu	r3,10(sp)
  811838:	18bfe7c4 	addi	r2,r3,-97
  81183c:	10803fcc 	andi	r2,r2,255
  811840:	8080f536 	bltu	r16,r2,811c18 <get_home_directory_cluster_for_file+0xc88>
  811844:	18bff804 	addi	r2,r3,-32
  811848:	10803fcc 	andi	r2,r2,255
  81184c:	1080201c 	xori	r2,r2,128
  811850:	10bfe004 	addi	r2,r2,-128
  811854:	208b003a 	cmpeq	r5,r4,r2
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811858:	88c00203 	ldbu	r3,8(r17)
  81185c:	18bfe7c4 	addi	r2,r3,-97
  811860:	10803fcc 	andi	r2,r2,255
  811864:	80807b2e 	bgeu	r16,r2,811a54 <get_home_directory_cluster_for_file+0xac4>
  811868:	19003fcc 	andi	r4,r3,255
  81186c:	2100201c 	xori	r4,r4,128
  811870:	213fe004 	addi	r4,r4,-128
  811874:	d8c00003 	ldbu	r3,0(sp)
  811878:	18bfe7c4 	addi	r2,r3,-97
  81187c:	10803fcc 	andi	r2,r2,255
  811880:	80806f2e 	bgeu	r16,r2,811a40 <get_home_directory_cluster_for_file+0xab0>
  811884:	18803fcc 	andi	r2,r3,255
  811888:	1080201c 	xori	r2,r2,128
  81188c:	10bfe004 	addi	r2,r2,-128
  811890:	2080221e 	bne	r4,r2,81191c <get_home_directory_cluster_for_file+0x98c>
  811894:	88c00243 	ldbu	r3,9(r17)
  811898:	18bfe7c4 	addi	r2,r3,-97
  81189c:	10803fcc 	andi	r2,r2,255
  8118a0:	80808c2e 	bgeu	r16,r2,811ad4 <get_home_directory_cluster_for_file+0xb44>
  8118a4:	19003fcc 	andi	r4,r3,255
  8118a8:	2100201c 	xori	r4,r4,128
  8118ac:	213fe004 	addi	r4,r4,-128
  8118b0:	d8c00043 	ldbu	r3,1(sp)
  8118b4:	18bfe7c4 	addi	r2,r3,-97
  8118b8:	10803fcc 	andi	r2,r2,255
  8118bc:	8080802e 	bgeu	r16,r2,811ac0 <get_home_directory_cluster_for_file+0xb30>
  8118c0:	18803fcc 	andi	r2,r3,255
  8118c4:	1080201c 	xori	r2,r2,128
  8118c8:	10bfe004 	addi	r2,r2,-128
  8118cc:	2080131e 	bne	r4,r2,81191c <get_home_directory_cluster_for_file+0x98c>
  8118d0:	88c00283 	ldbu	r3,10(r17)
  8118d4:	18bfe7c4 	addi	r2,r3,-97
  8118d8:	10803fcc 	andi	r2,r2,255
  8118dc:	80808236 	bltu	r16,r2,811ae8 <get_home_directory_cluster_for_file+0xb58>
  8118e0:	18bff804 	addi	r2,r3,-32
  8118e4:	d8c00083 	ldbu	r3,2(sp)
  8118e8:	11003fcc 	andi	r4,r2,255
  8118ec:	2100201c 	xori	r4,r4,128
  8118f0:	18bfe7c4 	addi	r2,r3,-97
  8118f4:	10803fcc 	andi	r2,r2,255
  8118f8:	213fe004 	addi	r4,r4,-128
  8118fc:	80808136 	bltu	r16,r2,811b04 <get_home_directory_cluster_for_file+0xb74>
  811900:	18bff804 	addi	r2,r3,-32
  811904:	10803fcc 	andi	r2,r2,255
  811908:	1080201c 	xori	r2,r2,128
  81190c:	10bfe004 	addi	r2,r2,-128
  811910:	2080021e 	bne	r4,r2,81191c <get_home_directory_cluster_for_file+0x98c>
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
  811914:	2805003a 	cmpeq	r2,r5,zero
  811918:	1000c726 	beq	r2,zero,811c38 <get_home_directory_cluster_for_file+0xca8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
                                    break;
  81191c:	94800804 	addi	r18,r18,32
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  811920:	00808004 	movi	r2,512
  811924:	90bf491e 	bne	r18,r2,81164c <get_home_directory_cluster_for_file+0x6bc>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  811928:	acc0171e 	bne	r21,r19,811988 <get_home_directory_cluster_for_file+0x9f8>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81192c:	e0800383 	ldbu	r2,14(fp)
  811930:	a5000044 	addi	r20,r20,1
  811934:	982b883a 	mov	r21,r19
  811938:	a0bf3e16 	blt	r20,r2,811634 <get_home_directory_cluster_for_file+0x6a4>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  81193c:	e0c01117 	ldw	r3,68(fp)
  811940:	d0a77b17 	ldw	r2,-25108(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811944:	9808d23a 	srli	r4,r19,8


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811948:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  81194c:	d0e77f17 	ldw	r3,-25092(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811950:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
  811954:	20c00326 	beq	r4,r3,811964 <get_home_directory_cluster_for_file+0x9d4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811958:	000b883a 	mov	r5,zero
  81195c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  811960:	103ea226 	beq	r2,zero,8113ec <get_home_directory_cluster_for_file+0x45c>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811964:	d0e77d17 	ldw	r3,-25100(gp)
  811968:	98803fcc 	andi	r2,r19,255
  81196c:	1085883a 	add	r2,r2,r2
  811970:	19000a17 	ldw	r4,40(r3)
  811974:	1105883a 	add	r2,r2,r4
  811978:	10c0002b 	ldhuio	r3,0(r2)
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  81197c:	00bffe14 	movui	r2,65528
  811980:	1d7ffe0c 	andi	r21,r3,65528
  811984:	a8be9926 	beq	r21,r2,8113ec <get_home_directory_cluster_for_file+0x45c>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  811988:	00bffdd4 	movui	r2,65527
  81198c:	14c00b16 	blt	r2,r19,8119bc <get_home_directory_cluster_for_file+0xa2c>
  811990:	acc00b1e 	bne	r21,r19,8119c0 <get_home_directory_cluster_for_file+0xa30>
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  811994:	e4000383 	ldbu	r16,14(fp)
  811998:	d9400317 	ldw	r5,12(sp)
  81199c:	8009883a 	mov	r4,r16
  8119a0:	0802b980 	call	802b98 <__mulsi3>
  8119a4:	e0c01417 	ldw	r3,80(fp)
  8119a8:	10ef883a 	add	r23,r2,r3
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8119ac:	803f201e 	bne	r16,zero,811630 <get_home_directory_cluster_for_file+0x6a0>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  8119b0:	acffe226 	beq	r21,r19,81193c <get_home_directory_cluster_for_file+0x9ac>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  8119b4:	00bffdd4 	movui	r2,65527
  8119b8:	14fff50e 	bge	r2,r19,811990 <get_home_directory_cluster_for_file+0xa00>
            if (new_cluster != home_dir_cluster)
  8119bc:	acfe8b26 	beq	r21,r19,8113ec <get_home_directory_cluster_for_file+0x45c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
  8119c0:	d8c00417 	ldw	r3,16(sp)
  8119c4:	b0800044 	addi	r2,r22,1
  8119c8:	a827883a 	mov	r19,r21
  8119cc:	1887883a 	add	r3,r3,r2
  8119d0:	d8c00415 	stw	r3,16(sp)
  8119d4:	180d883a 	mov	r6,r3
            {
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  8119d8:	d9000617 	ldw	r4,24(sp)
  8119dc:	21a1883a 	add	r16,r4,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  8119e0:	8009883a 	mov	r4,r16
  8119e4:	0803e080 	call	803e08 <strlen>
    
    for(index = 0; index < length; index++)
  8119e8:	00809c0e 	bge	zero,r2,811c5c <get_home_directory_cluster_for_file+0xccc>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  8119ec:	80c00007 	ldb	r3,0(r16)
  8119f0:	01001704 	movi	r4,92
  8119f4:	19009926 	beq	r3,r4,811c5c <get_home_directory_cluster_for_file+0xccc>
  8119f8:	01400bc4 	movi	r5,47
  8119fc:	19409726 	beq	r3,r5,811c5c <get_home_directory_cluster_for_file+0xccc>
  811a00:	002d883a 	mov	r22,zero
  811a04:	00000306 	br	811a14 <get_home_directory_cluster_for_file+0xa84>
  811a08:	18c00007 	ldb	r3,0(r3)
  811a0c:	19008c26 	beq	r3,r4,811c40 <get_home_directory_cluster_for_file+0xcb0>
  811a10:	19408b26 	beq	r3,r5,811c40 <get_home_directory_cluster_for_file+0xcb0>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811a14:	b5800044 	addi	r22,r22,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  811a18:	8587883a 	add	r3,r16,r22
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811a1c:	15bffa1e 	bne	r2,r22,811a08 <get_home_directory_cluster_for_file+0xa78>
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
  811a20:	05bfffc4 	movi	r22,-1
  811a24:	00800044 	movi	r2,1
  811a28:	d8800515 	stw	r2,20(sp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  811a2c:	05bd8616 	blt	zero,r22,811048 <get_home_directory_cluster_for_file+0xb8>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  811a30:	d8c00717 	ldw	r3,28(sp)
  811a34:	1cc00015 	stw	r19,0(r3)
    if (home_dir_cluster == 0)
  811a38:	983d7826 	beq	r19,zero,81101c <get_home_directory_cluster_for_file+0x8c>
  811a3c:	003e6c06 	br	8113f0 <get_home_directory_cluster_for_file+0x460>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811a40:	18bff804 	addi	r2,r3,-32
  811a44:	10803fcc 	andi	r2,r2,255
  811a48:	1080201c 	xori	r2,r2,128
  811a4c:	10bfe004 	addi	r2,r2,-128
  811a50:	003f8f06 	br	811890 <get_home_directory_cluster_for_file+0x900>
  811a54:	18bff804 	addi	r2,r3,-32
  811a58:	11003fcc 	andi	r4,r2,255
  811a5c:	2100201c 	xori	r4,r4,128
  811a60:	213fe004 	addi	r4,r4,-128
  811a64:	003f8306 	br	811874 <get_home_directory_cluster_for_file+0x8e4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811a68:	18bff804 	addi	r2,r3,-32
  811a6c:	10803fcc 	andi	r2,r2,255
  811a70:	1080201c 	xori	r2,r2,128
  811a74:	10bfe004 	addi	r2,r2,-128
  811a78:	20bf0c26 	beq	r4,r2,8116ac <get_home_directory_cluster_for_file+0x71c>
  811a7c:	000b883a 	mov	r5,zero
  811a80:	003f7506 	br	811858 <get_home_directory_cluster_for_file+0x8c8>
  811a84:	20bff804 	addi	r2,r4,-32
  811a88:	11003fcc 	andi	r4,r2,255
  811a8c:	2100201c 	xori	r4,r4,128
  811a90:	213fe004 	addi	r4,r4,-128
  811a94:	003efd06 	br	81168c <get_home_directory_cluster_for_file+0x6fc>
  811a98:	18bff804 	addi	r2,r3,-32
  811a9c:	10803fcc 	andi	r2,r2,255
  811aa0:	1080201c 	xori	r2,r2,128
  811aa4:	10bfe004 	addi	r2,r2,-128
  811aa8:	003f0e06 	br	8116e4 <get_home_directory_cluster_for_file+0x754>
  811aac:	18bff804 	addi	r2,r3,-32
  811ab0:	11003fcc 	andi	r4,r2,255
  811ab4:	2100201c 	xori	r4,r4,128
  811ab8:	213fe004 	addi	r4,r4,-128
  811abc:	003f0206 	br	8116c8 <get_home_directory_cluster_for_file+0x738>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  811ac0:	18bff804 	addi	r2,r3,-32
  811ac4:	10803fcc 	andi	r2,r2,255
  811ac8:	1080201c 	xori	r2,r2,128
  811acc:	10bfe004 	addi	r2,r2,-128
  811ad0:	003f7e06 	br	8118cc <get_home_directory_cluster_for_file+0x93c>
  811ad4:	18bff804 	addi	r2,r3,-32
  811ad8:	11003fcc 	andi	r4,r2,255
  811adc:	2100201c 	xori	r4,r4,128
  811ae0:	213fe004 	addi	r4,r4,-128
  811ae4:	003f7206 	br	8118b0 <get_home_directory_cluster_for_file+0x920>
  811ae8:	19003fcc 	andi	r4,r3,255
  811aec:	d8c00083 	ldbu	r3,2(sp)
  811af0:	2100201c 	xori	r4,r4,128
  811af4:	213fe004 	addi	r4,r4,-128
  811af8:	18bfe7c4 	addi	r2,r3,-97
  811afc:	10803fcc 	andi	r2,r2,255
  811b00:	80bf7f2e 	bgeu	r16,r2,811900 <get_home_directory_cluster_for_file+0x970>
  811b04:	18803fcc 	andi	r2,r3,255
  811b08:	1080201c 	xori	r2,r2,128
  811b0c:	10bfe004 	addi	r2,r2,-128
  811b10:	003f7f06 	br	811910 <get_home_directory_cluster_for_file+0x980>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  811b14:	18bff804 	addi	r2,r3,-32
  811b18:	d8c00143 	ldbu	r3,5(sp)
  811b1c:	11003fcc 	andi	r4,r2,255
  811b20:	2100201c 	xori	r4,r4,128
  811b24:	18bfe7c4 	addi	r2,r3,-97
  811b28:	10803fcc 	andi	r2,r2,255
  811b2c:	213fe004 	addi	r4,r4,-128
  811b30:	80bef836 	bltu	r16,r2,811714 <get_home_directory_cluster_for_file+0x784>
  811b34:	18bff804 	addi	r2,r3,-32
  811b38:	10803fcc 	andi	r2,r2,255
  811b3c:	1080201c 	xori	r2,r2,128
  811b40:	10bfe004 	addi	r2,r2,-128
  811b44:	003ef606 	br	811720 <get_home_directory_cluster_for_file+0x790>
  811b48:	18bff804 	addi	r2,r3,-32
  811b4c:	d8c00183 	ldbu	r3,6(sp)
  811b50:	11003fcc 	andi	r4,r2,255
  811b54:	2100201c 	xori	r4,r4,128
  811b58:	18bfe7c4 	addi	r2,r3,-97
  811b5c:	10803fcc 	andi	r2,r2,255
  811b60:	213fe004 	addi	r4,r4,-128
  811b64:	80befa36 	bltu	r16,r2,811750 <get_home_directory_cluster_for_file+0x7c0>
  811b68:	18bff804 	addi	r2,r3,-32
  811b6c:	10803fcc 	andi	r2,r2,255
  811b70:	1080201c 	xori	r2,r2,128
  811b74:	10bfe004 	addi	r2,r2,-128
  811b78:	003ef806 	br	81175c <get_home_directory_cluster_for_file+0x7cc>
  811b7c:	18bff804 	addi	r2,r3,-32
  811b80:	d8c001c3 	ldbu	r3,7(sp)
  811b84:	11003fcc 	andi	r4,r2,255
  811b88:	2100201c 	xori	r4,r4,128
  811b8c:	18bfe7c4 	addi	r2,r3,-97
  811b90:	10803fcc 	andi	r2,r2,255
  811b94:	213fe004 	addi	r4,r4,-128
  811b98:	80befc36 	bltu	r16,r2,81178c <get_home_directory_cluster_for_file+0x7fc>
  811b9c:	18bff804 	addi	r2,r3,-32
  811ba0:	10803fcc 	andi	r2,r2,255
  811ba4:	1080201c 	xori	r2,r2,128
  811ba8:	10bfe004 	addi	r2,r2,-128
  811bac:	003efa06 	br	811798 <get_home_directory_cluster_for_file+0x808>
  811bb0:	18bff804 	addi	r2,r3,-32
  811bb4:	d8c00203 	ldbu	r3,8(sp)
  811bb8:	11003fcc 	andi	r4,r2,255
  811bbc:	2100201c 	xori	r4,r4,128
  811bc0:	18bfe7c4 	addi	r2,r3,-97
  811bc4:	10803fcc 	andi	r2,r2,255
  811bc8:	213fe004 	addi	r4,r4,-128
  811bcc:	80befe36 	bltu	r16,r2,8117c8 <get_home_directory_cluster_for_file+0x838>
  811bd0:	18bff804 	addi	r2,r3,-32
  811bd4:	10803fcc 	andi	r2,r2,255
  811bd8:	1080201c 	xori	r2,r2,128
  811bdc:	10bfe004 	addi	r2,r2,-128
  811be0:	003efc06 	br	8117d4 <get_home_directory_cluster_for_file+0x844>
  811be4:	18bff804 	addi	r2,r3,-32
  811be8:	d8c00243 	ldbu	r3,9(sp)
  811bec:	11003fcc 	andi	r4,r2,255
  811bf0:	2100201c 	xori	r4,r4,128
  811bf4:	18bfe7c4 	addi	r2,r3,-97
  811bf8:	10803fcc 	andi	r2,r2,255
  811bfc:	213fe004 	addi	r4,r4,-128
  811c00:	80bf0036 	bltu	r16,r2,811804 <get_home_directory_cluster_for_file+0x874>
  811c04:	18bff804 	addi	r2,r3,-32
  811c08:	10803fcc 	andi	r2,r2,255
  811c0c:	1080201c 	xori	r2,r2,128
  811c10:	10bfe004 	addi	r2,r2,-128
  811c14:	003efe06 	br	811810 <get_home_directory_cluster_for_file+0x880>
  811c18:	18803fcc 	andi	r2,r3,255
  811c1c:	1080201c 	xori	r2,r2,128
  811c20:	10bfe004 	addi	r2,r2,-128
  811c24:	003f0b06 	br	811854 <get_home_directory_cluster_for_file+0x8c4>
  811c28:	19003fcc 	andi	r4,r3,255
  811c2c:	2100201c 	xori	r4,r4,128
  811c30:	213fe004 	addi	r4,r4,-128
  811c34:	003eff06 	br	811834 <get_home_directory_cluster_for_file+0x8a4>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  811c38:	8d40058b 	ldhu	r21,22(r17)
  811c3c:	003f3a06 	br	811928 <get_home_directory_cluster_for_file+0x998>
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
  811c40:	b03f7816 	blt	r22,zero,811a24 <get_home_directory_cluster_for_file+0xa94>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  811c44:	05bd0016 	blt	zero,r22,811048 <get_home_directory_cluster_for_file+0xb8>
  811c48:	003f7906 	br	811a30 <get_home_directory_cluster_for_file+0xaa0>
        {
            break;
        }
    }
    
    if (index == length)
  811c4c:	103cf126 	beq	r2,zero,811014 <get_home_directory_cluster_for_file+0x84>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  811c50:	d9800717 	ldw	r6,28(sp)
  811c54:	30000015 	stw	zero,0(r6)
  811c58:	003cf006 	br	81101c <get_home_directory_cluster_for_file+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  811c5c:	002d883a 	mov	r22,zero
        {
            break;
        }
    }
    
    if (index == length)
  811c60:	103f6f26 	beq	r2,zero,811a20 <get_home_directory_cluster_for_file+0xa90>
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  811c64:	05bcf816 	blt	zero,r22,811048 <get_home_directory_cluster_for_file+0xb8>
  811c68:	003f7106 	br	811a30 <get_home_directory_cluster_for_file+0xaa0>

00811c6c <alt_up_sd_card_find_first>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  811c6c:	d0a77d17 	ldw	r2,-25100(gp)
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  811c70:	deffed04 	addi	sp,sp,-76
  811c74:	dc001115 	stw	r16,68(sp)
  811c78:	dfc01215 	stw	ra,72(sp)
  811c7c:	2821883a 	mov	r16,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  811c80:	10000b26 	beq	r2,zero,811cb0 <alt_up_sd_card_find_first+0x44>
  811c84:	d0e77517 	ldw	r3,-25132(gp)
  811c88:	1880002b 	ldhuio	r2,0(r3)
  811c8c:	1080008c 	andi	r2,r2,2
  811c90:	10000726 	beq	r2,zero,811cb0 <alt_up_sd_card_find_first+0x44>
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  811c94:	d0a77417 	ldw	r2,-25136(gp)
  811c98:	1000151e 	bne	r2,zero,811cf0 <alt_up_sd_card_find_first+0x84>
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  811c9c:	00800084 	movi	r2,2
		{
			result = 1;
		}
	}
	return result;
}
  811ca0:	dfc01217 	ldw	ra,72(sp)
  811ca4:	dc001117 	ldw	r16,68(sp)
  811ca8:	dec01304 	addi	sp,sp,76
  811cac:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  811cb0:	d0e77317 	ldw	r3,-25140(gp)
  811cb4:	00800044 	movi	r2,1
  811cb8:	18bff81e 	bne	r3,r2,811c9c <alt_up_sd_card_find_first+0x30>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  811cbc:	00802074 	movhi	r2,129
  811cc0:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  811cc4:	00c02074 	movhi	r3,129
  811cc8:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  811ccc:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  811cd0:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  811cd4:	d0277415 	stw	zero,-25136(gp)
  811cd8:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  811cdc:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  811ce0:	183fff15 	stw	zero,-4(r3)
  811ce4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  811ce8:	18bffc1e 	bne	r3,r2,811cdc <alt_up_sd_card_find_first+0x70>
  811cec:	003feb06 	br	811c9c <alt_up_sd_card_find_first+0x30>
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  811cf0:	d80b883a 	mov	r5,sp
  811cf4:	d9800104 	addi	r6,sp,4
  811cf8:	0810f900 	call	810f90 <get_home_directory_cluster_for_file>
  811cfc:	1000021e 	bne	r2,zero,811d08 <alt_up_sd_card_find_first+0x9c>
  811d00:	00800044 	movi	r2,1
  811d04:	003fe606 	br	811ca0 <alt_up_sd_card_find_first+0x34>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  811d08:	d9400017 	ldw	r5,0(sp)
  811d0c:	00c02074 	movhi	r3,129
  811d10:	18df4904 	addi	r3,r3,32036
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
  811d14:	00800044 	movi	r2,1
  811d18:	18800415 	stw	r2,16(r3)
		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  811d1c:	00bfffc4 	movi	r2,-1
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  811d20:	8009883a 	mov	r4,r16
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
  811d24:	19400115 	stw	r5,4(r3)
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
  811d28:	1880030d 	sth	r2,12(r3)
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
  811d2c:	19400015 	stw	r5,0(r3)
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
  811d30:	18000215 	stw	zero,8(r3)
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
  811d34:	080feac0 	call	80feac <alt_up_sd_card_find_next>
  811d38:	10bfffcc 	andi	r2,r2,65535
  811d3c:	10a0001c 	xori	r2,r2,32768
  811d40:	10a00004 	addi	r2,r2,-32768
  811d44:	003fd606 	br	811ca0 <alt_up_sd_card_find_first+0x34>

00811d48 <alt_up_sd_card_read>:
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  811d48:	defff704 	addi	sp,sp,-36
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811d4c:	20ffffcc 	andi	r3,r4,65535
  811d50:	008004c4 	movi	r2,19
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  811d54:	dfc00815 	stw	ra,32(sp)
  811d58:	ddc00715 	stw	r23,28(sp)
  811d5c:	dd800615 	stw	r22,24(sp)
  811d60:	dd400515 	stw	r21,20(sp)
  811d64:	dd000415 	stw	r20,16(sp)
  811d68:	dcc00315 	stw	r19,12(sp)
  811d6c:	dc800215 	stw	r18,8(sp)
  811d70:	dc400115 	stw	r17,4(sp)
  811d74:	dc000015 	stw	r16,0(sp)
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811d78:	10c00936 	bltu	r2,r3,811da0 <alt_up_sd_card_read+0x58>
    {
        if (active_files[file_handle].in_use)
  811d7c:	20bfffcc 	andi	r2,r4,65535
  811d80:	10a0001c 	xori	r2,r2,32768
  811d84:	10a00004 	addi	r2,r2,-32768
  811d88:	102a91ba 	slli	r21,r2,6
  811d8c:	05c02074 	movhi	r23,129
  811d90:	bddf6304 	addi	r23,r23,32140
  811d94:	ade1883a 	add	r16,r21,r23
  811d98:	80800f17 	ldw	r2,60(r16)
  811d9c:	10000c1e 	bne	r2,zero,811dd0 <alt_up_sd_card_read+0x88>
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811da0:	00bfffc4 	movi	r2,-1
            }
        }
    }
    
    return ch;
}
  811da4:	dfc00817 	ldw	ra,32(sp)
  811da8:	ddc00717 	ldw	r23,28(sp)
  811dac:	dd800617 	ldw	r22,24(sp)
  811db0:	dd400517 	ldw	r21,20(sp)
  811db4:	dd000417 	ldw	r20,16(sp)
  811db8:	dcc00317 	ldw	r19,12(sp)
  811dbc:	dc800217 	ldw	r18,8(sp)
  811dc0:	dc400117 	ldw	r17,4(sp)
  811dc4:	dc000017 	ldw	r16,0(sp)
  811dc8:	dec00904 	addi	sp,sp,36
  811dcc:	f800283a 	ret
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  811dd0:	84400917 	ldw	r17,36(r16)
  811dd4:	80800617 	ldw	r2,24(r16)
  811dd8:	88bff12e 	bgeu	r17,r2,811da0 <alt_up_sd_card_read+0x58>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  811ddc:	05802074 	movhi	r22,129
  811de0:	b59f4e04 	addi	r22,r22,32056
  811de4:	85000717 	ldw	r20,28(r16)
  811de8:	b4c00383 	ldbu	r19,14(r22)
  811dec:	84800817 	ldw	r18,32(r16)
  811df0:	a13fff84 	addi	r4,r20,-2
  811df4:	980b883a 	mov	r5,r19
  811df8:	0802b980 	call	802b98 <__mulsi3>
  811dfc:	b0c01417 	ldw	r3,80(r22)
  811e00:	90c7883a 	add	r3,r18,r3
  811e04:	10c9883a 	add	r4,r2,r3
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  811e08:	88000226 	beq	r17,zero,811e14 <alt_up_sd_card_read+0xcc>
  811e0c:	88807fcc 	andi	r2,r17,511
  811e10:	10001026 	beq	r2,zero,811e54 <alt_up_sd_card_read+0x10c>
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
                        data_sector = data_sector + 1;
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  811e14:	d1677b17 	ldw	r5,-25108(gp)
  811e18:	d0a77f17 	ldw	r2,-25092(gp)
  811e1c:	2147883a 	add	r3,r4,r5
  811e20:	1880121e 	bne	r3,r2,811e6c <alt_up_sd_card_read+0x124>
                    {
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  811e24:	adcd883a 	add	r6,r21,r23
  811e28:	31000917 	ldw	r4,36(r6)
  811e2c:	d0e77a17 	ldw	r3,-25112(gp)
  811e30:	20807fcc 	andi	r2,r4,511
  811e34:	10c5883a 	add	r2,r2,r3
  811e38:	11400023 	ldbuio	r5,0(r2)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811e3c:	28803fcc 	andi	r2,r5,255
  811e40:	1080201c 	xori	r2,r2,128
  811e44:	21000044 	addi	r4,r4,1
  811e48:	10bfe004 	addi	r2,r2,-128
  811e4c:	31000915 	stw	r4,36(r6)
  811e50:	003fd406 	br	811da4 <alt_up_sd_card_read+0x5c>
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  811e54:	98bfffc4 	addi	r2,r19,-1
  811e58:	90800826 	beq	r18,r2,811e7c <alt_up_sd_card_read+0x134>
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811e5c:	90800044 	addi	r2,r18,1
                        data_sector = data_sector + 1;
  811e60:	21000044 	addi	r4,r4,1
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  811e64:	80800815 	stw	r2,32(r16)
  811e68:	003fea06 	br	811e14 <alt_up_sd_card_read+0xcc>
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  811e6c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  811e70:	103fec1e 	bne	r2,zero,811e24 <alt_up_sd_card_read+0xdc>
						return -2;
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811e74:	00bfff84 	movi	r2,-2
  811e78:	003fca06 	br	811da4 <alt_up_sd_card_read+0x5c>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811e7c:	b0c01117 	ldw	r3,68(r22)
  811e80:	a004d23a 	srli	r2,r20,8
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811e84:	d1277b17 	ldw	r4,-25108(gp)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  811e88:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  811e8c:	d0e77f17 	ldw	r3,-25092(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  811e90:	1109883a 	add	r4,r2,r4
     
    if (sector_index != current_sector_index)
  811e94:	20c00326 	beq	r4,r3,811ea4 <alt_up_sd_card_read+0x15c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  811e98:	000b883a 	mov	r5,zero
  811e9c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  811ea0:	103ff426 	beq	r2,zero,811e74 <alt_up_sd_card_read+0x12c>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  811ea4:	d0e77d17 	ldw	r3,-25100(gp)
  811ea8:	a0803fcc 	andi	r2,r20,255
  811eac:	1085883a 	add	r2,r2,r2
  811eb0:	19000a17 	ldw	r4,40(r3)
  811eb4:	1105883a 	add	r2,r2,r4
  811eb8:	10c0002b 	ldhuio	r3,0(r2)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  811ebc:	00bffe14 	movui	r2,65528
  811ec0:	18ffffcc 	andi	r3,r3,65535
  811ec4:	193ffe0c 	andi	r4,r3,65528
  811ec8:	20bfb526 	beq	r4,r2,811da0 <alt_up_sd_card_read+0x58>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811ecc:	b1400383 	ldbu	r5,14(r22)
  811ed0:	193fff84 	addi	r4,r3,-2
                                /* End of file */
                                return -1;
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  811ed4:	80c00715 	stw	r3,28(r16)
								active_files[file_handle].current_sector_in_cluster = 0;
  811ed8:	80000815 	stw	zero,32(r16)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  811edc:	0802b980 	call	802b98 <__mulsi3>
  811ee0:	b0c01417 	ldw	r3,80(r22)
  811ee4:	10c9883a 	add	r4,r2,r3
  811ee8:	003fca06 	br	811e14 <alt_up_sd_card_read+0xcc>

00811eec <alt_up_sd_card_write>:
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  811eec:	defff404 	addi	sp,sp,-48
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811ef0:	20ffffcc 	andi	r3,r4,65535
  811ef4:	008004c4 	movi	r2,19
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  811ef8:	dfc00b15 	stw	ra,44(sp)
  811efc:	df000a15 	stw	fp,40(sp)
  811f00:	ddc00915 	stw	r23,36(sp)
  811f04:	dd800815 	stw	r22,32(sp)
  811f08:	dd400715 	stw	r21,28(sp)
  811f0c:	dd000615 	stw	r20,24(sp)
  811f10:	dcc00515 	stw	r19,20(sp)
  811f14:	dc800415 	stw	r18,16(sp)
  811f18:	dc400315 	stw	r17,12(sp)
  811f1c:	dc000215 	stw	r16,8(sp)
  811f20:	d9400105 	stb	r5,4(sp)
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  811f24:	10c03d36 	bltu	r2,r3,81201c <alt_up_sd_card_write+0x130>
    {
        if (active_files[file_handle].in_use)
  811f28:	20bfffcc 	andi	r2,r4,65535
  811f2c:	10a0001c 	xori	r2,r2,32768
  811f30:	10a00004 	addi	r2,r2,-32768
  811f34:	103891ba 	slli	fp,r2,6
  811f38:	00802074 	movhi	r2,129
  811f3c:	109f6304 	addi	r2,r2,32140
  811f40:	e0a3883a 	add	r17,fp,r2
  811f44:	88800f17 	ldw	r2,60(r17)
  811f48:	10003426 	beq	r2,zero,81201c <alt_up_sd_card_write+0x130>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811f4c:	05c02074 	movhi	r23,129
  811f50:	bddf4e04 	addi	r23,r23,32056
  811f54:	8d400717 	ldw	r21,28(r17)
  811f58:	bc800383 	ldbu	r18,14(r23)
  811f5c:	8cc00817 	ldw	r19,32(r17)
  811f60:	a93fff84 	addi	r4,r21,-2
  811f64:	900b883a 	mov	r5,r18
  811f68:	0802b980 	call	802b98 <__mulsi3>
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811f6c:	8c000917 	ldw	r16,36(r17)
  811f70:	b940030b 	ldhu	r5,12(r23)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811f74:	b8c01417 	ldw	r3,80(r23)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811f78:	8169203a 	divu	r20,r16,r5
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811f7c:	98c7883a 	add	r3,r19,r3
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811f80:	a009883a 	mov	r4,r20
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  811f84:	10ed883a 	add	r22,r2,r3
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811f88:	0802b980 	call	802b98 <__mulsi3>

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  811f8c:	88c00617 	ldw	r3,24(r17)
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  811f90:	8085c83a 	sub	r2,r16,r2
  811f94:	d880000d 	sth	r2,0(sp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  811f98:	80c02d2e 	bgeu	r16,r3,812050 <alt_up_sd_card_write+0x164>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  811f9c:	8000491e 	bne	r16,zero,8120c4 <alt_up_sd_card_write+0x1d8>
  811fa0:	d4277b17 	ldw	r16,-25108(gp)
  811fa4:	d4a77f17 	ldw	r18,-25092(gp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  811fa8:	b405883a 	add	r2,r22,r16
  811fac:	14800426 	beq	r2,r18,811fc0 <alt_up_sd_card_write+0xd4>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  811fb0:	b009883a 	mov	r4,r22
  811fb4:	800b883a 	mov	r5,r16
  811fb8:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  811fbc:	10001726 	beq	r2,zero,81201c <alt_up_sd_card_write+0x130>
                {
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  811fc0:	d8c0000b 	ldhu	r3,0(sp)
  811fc4:	18bfffcc 	andi	r2,r3,65535
  811fc8:	d8c00103 	ldbu	r3,4(sp)
  811fcc:	10a0001c 	xori	r2,r2,32768
  811fd0:	10a00004 	addi	r2,r2,-32768
  811fd4:	19003fcc 	andi	r4,r3,255
  811fd8:	d0e77a17 	ldw	r3,-25112(gp)
  811fdc:	2100201c 	xori	r4,r4,128
  811fe0:	213fe004 	addi	r4,r4,-128
  811fe4:	10c5883a 	add	r2,r2,r3
  811fe8:	11000025 	stbio	r4,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  811fec:	00802074 	movhi	r2,129
  811ff0:	109f6304 	addi	r2,r2,32140
  811ff4:	e087883a 	add	r3,fp,r2
  811ff8:	18800917 	ldw	r2,36(r3)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  811ffc:	19000617 	ldw	r4,24(r3)
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  812000:	01400044 	movi	r5,1
  812004:	1145883a 	add	r2,r2,r5
  812008:	18800915 	stw	r2,36(r3)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  81200c:	1100272e 	bgeu	r2,r4,8120ac <alt_up_sd_card_write+0x1c0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  812010:	2805883a 	mov	r2,r5
  812014:	d1677e15 	stw	r5,-25096(gp)
  812018:	00000106 	br	812020 <alt_up_sd_card_write+0x134>
  81201c:	0005883a 	mov	r2,zero
			result = true;
		}
    }
    
    return result;
}
  812020:	dfc00b17 	ldw	ra,44(sp)
  812024:	df000a17 	ldw	fp,40(sp)
  812028:	ddc00917 	ldw	r23,36(sp)
  81202c:	dd800817 	ldw	r22,32(sp)
  812030:	dd400717 	ldw	r21,28(sp)
  812034:	dd000617 	ldw	r20,24(sp)
  812038:	dcc00517 	ldw	r19,20(sp)
  81203c:	dc800417 	ldw	r18,16(sp)
  812040:	dc400317 	ldw	r17,12(sp)
  812044:	dc000217 	ldw	r16,8(sp)
  812048:	dec00c04 	addi	sp,sp,48
  81204c:	f800283a 	ret
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  812050:	803fd326 	beq	r16,zero,811fa0 <alt_up_sd_card_write+0xb4>
  812054:	d8c0000b 	ldhu	r3,0(sp)
  812058:	18bfffcc 	andi	r2,r3,65535
  81205c:	10a0001c 	xori	r2,r2,32768
  812060:	10a00004 	addi	r2,r2,-32768
  812064:	103fce1e 	bne	r2,zero,811fa0 <alt_up_sd_card_write+0xb4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  812068:	90bfffc4 	addi	r2,r18,-1
  81206c:	98803f26 	beq	r19,r2,81216c <alt_up_sd_card_write+0x280>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  812070:	8d000815 	stw	r20,32(r17)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  812074:	00802074 	movhi	r2,129
  812078:	109f6304 	addi	r2,r2,32140
  81207c:	e0a1883a 	add	r16,fp,r2
  812080:	81000717 	ldw	r4,28(r16)
  812084:	b9400383 	ldbu	r5,14(r23)
  812088:	213fff84 	addi	r4,r4,-2
  81208c:	0802b980 	call	802b98 <__mulsi3>
  812090:	81000817 	ldw	r4,32(r16)
  812094:	b8c01417 	ldw	r3,80(r23)
  812098:	d4277b17 	ldw	r16,-25108(gp)
  81209c:	d4a77f17 	ldw	r18,-25092(gp)
  8120a0:	1907883a 	add	r3,r3,r4
  8120a4:	10ed883a 	add	r22,r2,r3
  8120a8:	003fbf06 	br	811fa8 <alt_up_sd_card_write+0xbc>
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  8120ac:	2145883a 	add	r2,r4,r5
  8120b0:	18800615 	stw	r2,24(r3)
				active_files[file_handle].modified = true;
  8120b4:	19400e15 	stw	r5,56(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  8120b8:	2805883a 	mov	r2,r5
  8120bc:	d1677e15 	stw	r5,-25096(gp)
  8120c0:	003fd706 	br	812020 <alt_up_sd_card_write+0x134>
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  8120c4:	10bfffcc 	andi	r2,r2,65535
  8120c8:	10bfffcc 	andi	r2,r2,65535
  8120cc:	10a0001c 	xori	r2,r2,32768
  8120d0:	10a00004 	addi	r2,r2,-32768
  8120d4:	103fb21e 	bne	r2,zero,811fa0 <alt_up_sd_card_write+0xb4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  8120d8:	90bfffc4 	addi	r2,r18,-1
  8120dc:	98800626 	beq	r19,r2,8120f8 <alt_up_sd_card_write+0x20c>
  8120e0:	d4277b17 	ldw	r16,-25108(gp)
  8120e4:	d4a77f17 	ldw	r18,-25092(gp)
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  8120e8:	98800044 	addi	r2,r19,1
                        data_sector = data_sector + 1;
  8120ec:	b5800044 	addi	r22,r22,1
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  8120f0:	88800815 	stw	r2,32(r17)
  8120f4:	003fac06 	br	811fa8 <alt_up_sd_card_write+0xbc>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  8120f8:	a804d23a 	srli	r2,r21,8
  8120fc:	b8c01117 	ldw	r3,68(r23)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812100:	d4277b17 	ldw	r16,-25108(gp)
     
    if (sector_index != current_sector_index)
  812104:	d4a77f17 	ldw	r18,-25092(gp)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  812108:	10c5883a 	add	r2,r2,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  81210c:	1409883a 	add	r4,r2,r16
     
    if (sector_index != current_sector_index)
  812110:	24800526 	beq	r4,r18,812128 <alt_up_sd_card_write+0x23c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812114:	000b883a 	mov	r5,zero
  812118:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81211c:	103fbf26 	beq	r2,zero,81201c <alt_up_sd_card_write+0x130>
  812120:	d4277b17 	ldw	r16,-25108(gp)
  812124:	d4a77f17 	ldw	r18,-25092(gp)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  812128:	d0e77d17 	ldw	r3,-25100(gp)
  81212c:	a8803fcc 	andi	r2,r21,255
  812130:	1085883a 	add	r2,r2,r2
  812134:	19000a17 	ldw	r4,40(r3)
  812138:	1105883a 	add	r2,r2,r4
  81213c:	10c0002b 	ldhuio	r3,0(r2)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
  812140:	00bffdd4 	movui	r2,65527
  812144:	18ffffcc 	andi	r3,r3,65535
  812148:	10ff9736 	bltu	r2,r3,811fa8 <alt_up_sd_card_write+0xbc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81214c:	b9400383 	ldbu	r5,14(r23)
  812150:	193fff84 	addi	r4,r3,-2
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  812154:	88c00715 	stw	r3,28(r17)
								active_files[file_handle].current_sector_in_cluster = 0;
  812158:	88000815 	stw	zero,32(r17)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81215c:	0802b980 	call	802b98 <__mulsi3>
  812160:	b8c01417 	ldw	r3,80(r23)
  812164:	10ed883a 	add	r22,r2,r3
  812168:	003f8f06 	br	811fa8 <alt_up_sd_card_write+0xbc>


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81216c:	bc401117 	ldw	r17,68(r23)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812170:	b8801217 	ldw	r2,72(r23)
  812174:	88bfa926 	beq	r17,r2,81201c <alt_up_sd_card_write+0x130>
  812178:	04800084 	movi	r18,2
  81217c:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  812180:	d1677b17 	ldw	r5,-25108(gp)
  812184:	8809883a 	mov	r4,r17
  812188:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81218c:	10007326 	beq	r2,zero,81235c <alt_up_sd_card_write+0x470>
  812190:	d0a77d17 	ldw	r2,-25100(gp)
  812194:	90c03fcc 	andi	r3,r18,255
  812198:	11000a17 	ldw	r4,40(r2)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  81219c:	18c5883a 	add	r2,r3,r3
  8121a0:	1105883a 	add	r2,r2,r4
  8121a4:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  8121a8:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  8121ac:	1821883a 	mov	r16,r3
                if (cluster == 0)
  8121b0:	10000a26 	beq	r2,zero,8121dc <alt_up_sd_card_write+0x2f0>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  8121b4:	94800044 	addi	r18,r18,1
                } 
            } while ((cluster_index % 256) != 0);
  8121b8:	90c03fcc 	andi	r3,r18,255
  8121bc:	183ff71e 	bne	r3,zero,81219c <alt_up_sd_card_write+0x2b0>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8121c0:	b8801217 	ldw	r2,72(r23)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  8121c4:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8121c8:	147fed1e 	bne	r2,r17,812180 <alt_up_sd_card_write+0x294>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  8121cc:	80bfffcc 	andi	r2,r16,65535
  8121d0:	10a0001c 	xori	r2,r2,32768
  8121d4:	10a00004 	addi	r2,r2,-32768
  8121d8:	103f901e 	bne	r2,zero,81201c <alt_up_sd_card_write+0x130>
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  8121dc:	00c02074 	movhi	r3,129
  8121e0:	18df6304 	addi	r3,r3,32140
  8121e4:	e0c5883a 	add	r2,fp,r3
  8121e8:	14000717 	ldw	r16,28(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8121ec:	b9001117 	ldw	r4,68(r23)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8121f0:	d0e77b17 	ldw	r3,-25108(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8121f4:	8004d23a 	srli	r2,r16,8
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  8121f8:	9027883a 	mov	r19,r18


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8121fc:	1105883a 	add	r2,r2,r4
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812200:	d1277f17 	ldw	r4,-25092(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812204:	10c5883a 	add	r2,r2,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812208:	20800426 	beq	r4,r2,81221c <alt_up_sd_card_write+0x330>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  81220c:	1009883a 	mov	r4,r2
  812210:	000b883a 	mov	r5,zero
  812214:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  812218:	10000b26 	beq	r2,zero,812248 <alt_up_sd_card_write+0x35c>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  81221c:	d0e77d17 	ldw	r3,-25100(gp)
  812220:	80803fcc 	andi	r2,r16,255
  812224:	997fffcc 	andi	r5,r19,65535
  812228:	19000a17 	ldw	r4,40(r3)
  81222c:	1085883a 	add	r2,r2,r2
  812230:	2960001c 	xori	r5,r5,32768
  812234:	29600004 	addi	r5,r5,-32768
  812238:	1105883a 	add	r2,r2,r4
  81223c:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  812240:	00c00044 	movi	r3,1
  812244:	d0e77e15 	stw	r3,-25096(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812248:	b8801117 	ldw	r2,68(r23)
  81224c:	d0e77b17 	ldw	r3,-25108(gp)
  812250:	9022d23a 	srli	r17,r18,8
  812254:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812258:	d0a77f17 	ldw	r2,-25092(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  81225c:	88c9883a 	add	r4,r17,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812260:	11000326 	beq	r2,r4,812270 <alt_up_sd_card_write+0x384>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812264:	000b883a 	mov	r5,zero
  812268:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81226c:	10000926 	beq	r2,zero,812294 <alt_up_sd_card_write+0x3a8>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812270:	d0e77d17 	ldw	r3,-25100(gp)
  812274:	90803fcc 	andi	r2,r18,255
  812278:	1085883a 	add	r2,r2,r2
  81227c:	19000a17 	ldw	r4,40(r3)
  812280:	00ffffc4 	movi	r3,-1
  812284:	1105883a 	add	r2,r2,r4
  812288:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  81228c:	01000044 	movi	r4,1
  812290:	d1277e15 	stw	r4,-25096(gp)
						if (find_first_empty_cluster(&cluster_number))
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  812294:	00c02074 	movhi	r3,129
  812298:	18df6304 	addi	r3,r3,32140
  81229c:	e0c5883a 	add	r2,fp,r3
  8122a0:	14000717 	ldw	r16,28(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8122a4:	b9001217 	ldw	r4,72(r23)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8122a8:	d0e77b17 	ldw	r3,-25108(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8122ac:	8004d23a 	srli	r2,r16,8
  8122b0:	1105883a 	add	r2,r2,r4
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8122b4:	d1277f17 	ldw	r4,-25092(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8122b8:	10c5883a 	add	r2,r2,r3
    }
     
    if (sector_index != current_sector_index)
  8122bc:	20800426 	beq	r4,r2,8122d0 <alt_up_sd_card_write+0x3e4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8122c0:	1009883a 	mov	r4,r2
  8122c4:	000b883a 	mov	r5,zero
  8122c8:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8122cc:	10000b26 	beq	r2,zero,8122fc <alt_up_sd_card_write+0x410>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8122d0:	d0e77d17 	ldw	r3,-25100(gp)
  8122d4:	80803fcc 	andi	r2,r16,255
  8122d8:	997fffcc 	andi	r5,r19,65535
  8122dc:	19000a17 	ldw	r4,40(r3)
  8122e0:	1085883a 	add	r2,r2,r2
  8122e4:	2960001c 	xori	r5,r5,32768
  8122e8:	29600004 	addi	r5,r5,-32768
  8122ec:	1105883a 	add	r2,r2,r4
  8122f0:	1140002d 	sthio	r5,0(r2)
    current_sector_modified = true;
  8122f4:	00c00044 	movi	r3,1
  8122f8:	d0e77e15 	stw	r3,-25096(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8122fc:	b8801217 	ldw	r2,72(r23)
  812300:	d0e77b17 	ldw	r3,-25108(gp)
  812304:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812308:	d0a77f17 	ldw	r2,-25092(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  81230c:	88c9883a 	add	r4,r17,r3
    }
     
    if (sector_index != current_sector_index)
  812310:	11000326 	beq	r2,r4,812320 <alt_up_sd_card_write+0x434>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812314:	000b883a 	mov	r5,zero
  812318:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81231c:	10000926 	beq	r2,zero,812344 <alt_up_sd_card_write+0x458>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812320:	d0e77d17 	ldw	r3,-25100(gp)
  812324:	90803fcc 	andi	r2,r18,255
  812328:	1085883a 	add	r2,r2,r2
  81232c:	19000a17 	ldw	r4,40(r3)
  812330:	00ffffc4 	movi	r3,-1
  812334:	1105883a 	add	r2,r2,r4
  812338:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  81233c:	01000044 	movi	r4,1
  812340:	d1277e15 	stw	r4,-25096(gp)
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  812344:	00c02074 	movhi	r3,129
  812348:	18df6304 	addi	r3,r3,32140
  81234c:	e0c5883a 	add	r2,fp,r3
  812350:	14800715 	stw	r18,28(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  812354:	10000815 	stw	zero,32(r2)
  812358:	003f4606 	br	812074 <alt_up_sd_card_write+0x188>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  81235c:	80bfffcc 	andi	r2,r16,65535
  812360:	10a0001c 	xori	r2,r2,32768
  812364:	10a00004 	addi	r2,r2,-32768
  812368:	103f951e 	bne	r2,zero,8121c0 <alt_up_sd_card_write+0x2d4>
  81236c:	003f9b06 	br	8121dc <alt_up_sd_card_write+0x2f0>

00812370 <find_first_empty_record_in_a_subdirectory>:
}


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  812370:	defff504 	addi	sp,sp,-44
  812374:	dd000515 	stw	r20,20(sp)
  812378:	dcc00415 	stw	r19,16(sp)
  81237c:	dc800315 	stw	r18,12(sp)
  812380:	dfc00a15 	stw	ra,40(sp)
  812384:	df000915 	stw	fp,36(sp)
  812388:	ddc00815 	stw	r23,32(sp)
  81238c:	dd800715 	stw	r22,28(sp)
  812390:	dd400615 	stw	r21,24(sp)
  812394:	dc400215 	stw	r17,8(sp)
  812398:	dc000115 	stw	r16,4(sp)
  81239c:	2025883a 	mov	r18,r4
  8123a0:	053fffc4 	movi	r20,-1
  8123a4:	04c02074 	movhi	r19,129
  8123a8:	9cdf4e04 	addi	r19,r19,32056
    int result = -1;
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8123ac:	9c000383 	ldbu	r16,14(r19)
  8123b0:	913fff84 	addi	r4,r18,-2
  8123b4:	800b883a 	mov	r5,r16
  8123b8:	0802b980 	call	802b98 <__mulsi3>
  8123bc:	98c01417 	ldw	r3,80(r19)
  8123c0:	10e3883a 	add	r17,r2,r3
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8123c4:	80001926 	beq	r16,zero,81242c <find_first_empty_record_in_a_subdirectory+0xbc>
  8123c8:	0021883a 	mov	r16,zero
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  8123cc:	d1677b17 	ldw	r5,-25108(gp)
  8123d0:	8c09883a 	add	r4,r17,r16
  8123d4:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8123d8:	10001426 	beq	r2,zero,81242c <find_first_empty_record_in_a_subdirectory+0xbc>
  8123dc:	d0e77d17 	ldw	r3,-25100(gp)
  8123e0:	8008953a 	slli	r4,r16,20
                    }
                }
            }
            else
            {
                break;
  8123e4:	000d883a 	mov	r6,zero
  8123e8:	19c00a17 	ldw	r7,40(r3)
  8123ec:	000b883a 	mov	r5,zero
  8123f0:	02803944 	movi	r10,229
  8123f4:	02400404 	movi	r9,16
  8123f8:	02000074 	movhi	r8,1
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  8123fc:	29c5883a 	add	r2,r5,r7
  812400:	10c00023 	ldbuio	r3,0(r2)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  812404:	18c03fcc 	andi	r3,r3,255
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  812408:	31800044 	addi	r6,r6,1
  81240c:	29400804 	addi	r5,r5,32
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  812410:	1a800c26 	beq	r3,r10,812444 <find_first_empty_record_in_a_subdirectory+0xd4>
  812414:	18000b26 	beq	r3,zero,812444 <find_first_empty_record_in_a_subdirectory+0xd4>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  812418:	2209883a 	add	r4,r4,r8
  81241c:	327ff71e 	bne	r6,r9,8123fc <find_first_empty_record_in_a_subdirectory+0x8c>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  812420:	98800383 	ldbu	r2,14(r19)
  812424:	84000044 	addi	r16,r16,1
  812428:	80bfe816 	blt	r16,r2,8123cc <find_first_empty_record_in_a_subdirectory+0x5c>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  81242c:	a0001316 	blt	r20,zero,81247c <find_first_empty_record_in_a_subdirectory+0x10c>
			{
				// Error encountered.                 
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  812430:	00bffdd4 	movui	r2,65527
  812434:	14800416 	blt	r2,r18,812448 <find_first_empty_record_in_a_subdirectory+0xd8>
  812438:	00bfffc4 	movi	r2,-1
  81243c:	a0bfdb26 	beq	r20,r2,8123ac <find_first_empty_record_in_a_subdirectory+0x3c>
  812440:	00000106 	br	812448 <find_first_empty_record_in_a_subdirectory+0xd8>
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  812444:	9128b03a 	or	r20,r18,r4
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
    return result; 
}
  812448:	a005883a 	mov	r2,r20
  81244c:	dfc00a17 	ldw	ra,40(sp)
  812450:	df000917 	ldw	fp,36(sp)
  812454:	ddc00817 	ldw	r23,32(sp)
  812458:	dd800717 	ldw	r22,28(sp)
  81245c:	dd400617 	ldw	r21,24(sp)
  812460:	dd000517 	ldw	r20,20(sp)
  812464:	dcc00417 	ldw	r19,16(sp)
  812468:	dc800317 	ldw	r18,12(sp)
  81246c:	dc400217 	ldw	r17,8(sp)
  812470:	dc000117 	ldw	r16,4(sp)
  812474:	dec00b04 	addi	sp,sp,44
  812478:	f800283a 	ret


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  81247c:	98801117 	ldw	r2,68(r19)
  812480:	d0e77b17 	ldw	r3,-25108(gp)
  812484:	902ed23a 	srli	r23,r18,8
  812488:	1887883a 	add	r3,r3,r2
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
     
    if (sector_index != current_sector_index)
  81248c:	d0a77f17 	ldw	r2,-25092(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812490:	b8c9883a 	add	r4,r23,r3
     
    if (sector_index != current_sector_index)
  812494:	20800526 	beq	r4,r2,8124ac <find_first_empty_record_in_a_subdirectory+0x13c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812498:	000b883a 	mov	r5,zero
  81249c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8124a0:	1000021e 	bne	r2,zero,8124ac <find_first_empty_record_in_a_subdirectory+0x13c>
  8124a4:	053fffc4 	movi	r20,-1
  8124a8:	003fe106 	br	812430 <find_first_empty_record_in_a_subdirectory+0xc0>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  8124ac:	d0e77d17 	ldw	r3,-25100(gp)
  8124b0:	90803fcc 	andi	r2,r18,255
  8124b4:	10ad883a 	add	r22,r2,r2
  8124b8:	18800a17 	ldw	r2,40(r3)
  8124bc:	b085883a 	add	r2,r22,r2
  8124c0:	10c0002b 	ldhuio	r3,0(r2)
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  8124c4:	00bffe14 	movui	r2,65528
  8124c8:	18fffe0c 	andi	r3,r3,65528
  8124cc:	18bfd81e 	bne	r3,r2,812430 <find_first_empty_record_in_a_subdirectory+0xc0>


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  8124d0:	9c401117 	ldw	r17,68(r19)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8124d4:	98801217 	ldw	r2,72(r19)
  8124d8:	88801926 	beq	r17,r2,812540 <find_first_empty_record_in_a_subdirectory+0x1d0>
  8124dc:	05400084 	movi	r21,2
  8124e0:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  8124e4:	d1677b17 	ldw	r5,-25108(gp)
  8124e8:	8809883a 	mov	r4,r17
  8124ec:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8124f0:	10001526 	beq	r2,zero,812548 <find_first_empty_record_in_a_subdirectory+0x1d8>
  8124f4:	d0e77d17 	ldw	r3,-25100(gp)
  8124f8:	a8803fcc 	andi	r2,r21,255
  8124fc:	19000a17 	ldw	r4,40(r3)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  812500:	1085883a 	add	r2,r2,r2
  812504:	1105883a 	add	r2,r2,r4
  812508:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  81250c:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  812510:	1821883a 	mov	r16,r3
                if (cluster == 0)
  812514:	10001026 	beq	r2,zero,812558 <find_first_empty_record_in_a_subdirectory+0x1e8>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  812518:	ad400044 	addi	r21,r21,1
                } 
            } while ((cluster_index % 256) != 0);
  81251c:	a8803fcc 	andi	r2,r21,255
  812520:	103ff71e 	bne	r2,zero,812500 <find_first_empty_record_in_a_subdirectory+0x190>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812524:	98801217 	ldw	r2,72(r19)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  812528:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  81252c:	147fed1e 	bne	r2,r17,8124e4 <find_first_empty_record_in_a_subdirectory+0x174>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  812530:	80bfffcc 	andi	r2,r16,65535
  812534:	10a0001c 	xori	r2,r2,32768
  812538:	10a00004 	addi	r2,r2,-32768
  81253c:	10000626 	beq	r2,zero,812558 <find_first_empty_record_in_a_subdirectory+0x1e8>
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812540:	04bffe14 	movui	r18,65528
  812544:	003fba06 	br	812430 <find_first_empty_record_in_a_subdirectory+0xc0>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  812548:	80bfffcc 	andi	r2,r16,65535
  81254c:	10a0001c 	xori	r2,r2,32768
  812550:	10a00004 	addi	r2,r2,-32768
  812554:	103ff31e 	bne	r2,zero,812524 <find_first_empty_record_in_a_subdirectory+0x1b4>


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812558:	98801117 	ldw	r2,68(r19)
  81255c:	d0e77b17 	ldw	r3,-25108(gp)
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
  812560:	dd400015 	stw	r21,0(sp)
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  812564:	04bffe14 	movui	r18,65528


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812568:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  81256c:	d0a77f17 	ldw	r2,-25092(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812570:	b8c9883a 	add	r4,r23,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812574:	11000326 	beq	r2,r4,812584 <find_first_empty_record_in_a_subdirectory+0x214>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812578:	000b883a 	mov	r5,zero
  81257c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  812580:	103fab26 	beq	r2,zero,812430 <find_first_empty_record_in_a_subdirectory+0xc0>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812584:	d0e77d17 	ldw	r3,-25100(gp)
  812588:	a93fffcc 	andi	r4,r21,65535
  81258c:	2120001c 	xori	r4,r4,32768
  812590:	18800a17 	ldw	r2,40(r3)
  812594:	21200004 	addi	r4,r4,-32768
  812598:	b085883a 	add	r2,r22,r2
  81259c:	1100002d 	sthio	r4,0(r2)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  8125a0:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8125a4:	98c01117 	ldw	r3,68(r19)
  8125a8:	d0a77b17 	ldw	r2,-25108(gp)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8125ac:	8008d23a 	srli	r4,r16,8
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  8125b0:	04400044 	movi	r17,1


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8125b4:	10c5883a 	add	r2,r2,r3
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8125b8:	2089883a 	add	r4,r4,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8125bc:	d0a77f17 	ldw	r2,-25092(gp)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  8125c0:	d4677e15 	stw	r17,-25096(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8125c4:	05402074 	movhi	r21,129
  8125c8:	ad5f4e04 	addi	r21,r21,32056
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  8125cc:	11000326 	beq	r2,r4,8125dc <find_first_empty_record_in_a_subdirectory+0x26c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8125d0:	000b883a 	mov	r5,zero
  8125d4:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8125d8:	103f9526 	beq	r2,zero,812430 <find_first_empty_record_in_a_subdirectory+0xc0>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8125dc:	d0e77d17 	ldw	r3,-25100(gp)
  8125e0:	80803fcc 	andi	r2,r16,255
  8125e4:	1085883a 	add	r2,r2,r2
  8125e8:	19000a17 	ldw	r4,40(r3)
  8125ec:	073fffc4 	movi	fp,-1
  8125f0:	1105883a 	add	r2,r2,r4
  8125f4:	1700002d 	sthio	fp,0(r2)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8125f8:	a8c01217 	ldw	r3,72(r21)
  8125fc:	d0a77b17 	ldw	r2,-25108(gp)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812600:	d4677e15 	stw	r17,-25096(gp)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  812604:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812608:	10c5883a 	add	r2,r2,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  81260c:	b889883a 	add	r4,r23,r2
    }
     
    if (sector_index != current_sector_index)
  812610:	d0a77f17 	ldw	r2,-25092(gp)
  812614:	11000326 	beq	r2,r4,812624 <find_first_empty_record_in_a_subdirectory+0x2b4>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812618:	000b883a 	mov	r5,zero
  81261c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  812620:	103f8326 	beq	r2,zero,812430 <find_first_empty_record_in_a_subdirectory+0xc0>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812624:	d0e77d17 	ldw	r3,-25100(gp)
  812628:	813fffcc 	andi	r4,r16,65535
  81262c:	2120001c 	xori	r4,r4,32768
  812630:	18800a17 	ldw	r2,40(r3)
  812634:	21200004 	addi	r4,r4,-32768
  812638:	b085883a 	add	r2,r22,r2
  81263c:	1100002d 	sthio	r4,0(r2)
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  812640:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812644:	a8c01217 	ldw	r3,72(r21)
  812648:	d0a77b17 	ldw	r2,-25108(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  81264c:	8008d23a 	srli	r4,r16,8
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812650:	d4677e15 	stw	r17,-25096(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812654:	10c5883a 	add	r2,r2,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  812658:	2089883a 	add	r4,r4,r2
    }
     
    if (sector_index != current_sector_index)
  81265c:	d0a77f17 	ldw	r2,-25092(gp)
  812660:	11000326 	beq	r2,r4,812670 <find_first_empty_record_in_a_subdirectory+0x300>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812664:	000b883a 	mov	r5,zero
  812668:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81266c:	103f7026 	beq	r2,zero,812430 <find_first_empty_record_in_a_subdirectory+0xc0>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812670:	d0e77d17 	ldw	r3,-25100(gp)
  812674:	80803fcc 	andi	r2,r16,255
  812678:	1085883a 	add	r2,r2,r2
  81267c:	19000a17 	ldw	r4,40(r3)
  812680:	1105883a 	add	r2,r2,r4
  812684:	1700002d 	sthio	fp,0(r2)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812688:	d1277f17 	ldw	r4,-25092(gp)
  81268c:	000b883a 	mov	r5,zero
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812690:	d4677e15 	stw	r17,-25096(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812694:	080f04c0 	call	80f04c <Write_Sector_Data>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  812698:	dd000017 	ldw	r20,0(sp)
  81269c:	003f6406 	br	812430 <find_first_empty_record_in_a_subdirectory+0xc0>

008126a0 <create_file>:

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  8126a0:	defff704 	addi	sp,sp,-36
  8126a4:	dd400515 	stw	r21,20(sp)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  8126a8:	05402074 	movhi	r21,129
  8126ac:	ad5f4e04 	addi	r21,r21,32056

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  8126b0:	dc400115 	stw	r17,4(sp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8126b4:	a8801217 	ldw	r2,72(r21)


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  8126b8:	ac401117 	ldw	r17,68(r21)

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  8126bc:	ddc00715 	stw	r23,28(sp)
  8126c0:	dcc00315 	stw	r19,12(sp)
  8126c4:	dc800215 	stw	r18,8(sp)
  8126c8:	dfc00815 	stw	ra,32(sp)
  8126cc:	dd800615 	stw	r22,24(sp)
  8126d0:	dd000415 	stw	r20,16(sp)
  8126d4:	dc000015 	stw	r16,0(sp)
  8126d8:	2027883a 	mov	r19,r4
  8126dc:	2825883a 	mov	r18,r5
  8126e0:	302f883a 	mov	r23,r6
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8126e4:	14403726 	beq	r2,r17,8127c4 <create_file+0x124>
  8126e8:	05000084 	movi	r20,2
  8126ec:	043fffc4 	movi	r16,-1
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  8126f0:	d1677b17 	ldw	r5,-25108(gp)
  8126f4:	8809883a 	mov	r4,r17
  8126f8:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  8126fc:	10003d26 	beq	r2,zero,8127f4 <create_file+0x154>
  812700:	d0e77d17 	ldw	r3,-25100(gp)
  812704:	a0803fcc 	andi	r2,r20,255
  812708:	19000a17 	ldw	r4,40(r3)
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  81270c:	1085883a 	add	r2,r2,r2
  812710:	1105883a 	add	r2,r2,r4
  812714:	10c0002b 	ldhuio	r3,0(r2)
                if (cluster == 0)
  812718:	18bfffcc 	andi	r2,r3,65535
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  81271c:	1821883a 	mov	r16,r3
                if (cluster == 0)
  812720:	10000a26 	beq	r2,zero,81274c <create_file+0xac>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  812724:	a5000044 	addi	r20,r20,1
                } 
            } while ((cluster_index % 256) != 0);
  812728:	a0803fcc 	andi	r2,r20,255
  81272c:	103ff71e 	bne	r2,zero,81270c <create_file+0x6c>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812730:	a8801217 	ldw	r2,72(r21)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  812734:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812738:	147fed1e 	bne	r2,r17,8126f0 <create_file+0x50>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  81273c:	80bfffcc 	andi	r2,r16,65535
  812740:	10a0001c 	xori	r2,r2,32768
  812744:	10a00004 	addi	r2,r2,-32768
  812748:	10001e1e 	bne	r2,zero,8127c4 <create_file+0x124>
    
    if (find_first_empty_cluster(&cluster_number))
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  81274c:	b8800a17 	ldw	r2,40(r23)
  812750:	1000301e 	bne	r2,zero,812814 <create_file+0x174>


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  812754:	a880050b 	ldhu	r2,20(r21)
  812758:	a8c0030b 	ldhu	r3,12(r21)
  81275c:	1004917a 	slli	r2,r2,5
  812760:	10e3283a 	div	r17,r2,r3
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  812764:	88001726 	beq	r17,zero,8127c4 <create_file+0x124>
  812768:	0021883a 	mov	r16,zero
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  81276c:	a9001317 	ldw	r4,76(r21)
  812770:	d1677b17 	ldw	r5,-25108(gp)
  812774:	8109883a 	add	r4,r16,r4
  812778:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  81277c:	10001126 	beq	r2,zero,8127c4 <create_file+0x124>
  812780:	d0e77d17 	ldw	r3,-25100(gp)
  812784:	8012913a 	slli	r9,r16,4
                }
            }
        }
        else
        {
            break;
  812788:	000b883a 	mov	r5,zero
  81278c:	19800a17 	ldw	r6,40(r3)
  812790:	0009883a 	mov	r4,zero
  812794:	02003944 	movi	r8,229
  812798:	01c00404 	movi	r7,16
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  81279c:	2185883a 	add	r2,r4,r6
  8127a0:	10c00023 	ldbuio	r3,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  8127a4:	18c03fcc 	andi	r3,r3,255
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  8127a8:	21000804 	addi	r4,r4,32
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
  8127ac:	1a00e826 	beq	r3,r8,812b50 <create_file+0x4b0>
  8127b0:	1800e726 	beq	r3,zero,812b50 <create_file+0x4b0>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  8127b4:	29400044 	addi	r5,r5,1
  8127b8:	29fff81e 	bne	r5,r7,81279c <create_file+0xfc>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8127bc:	84000044 	addi	r16,r16,1
  8127c0:	8c3fea1e 	bne	r17,r16,81276c <create_file+0xcc>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  8127c4:	0005883a 	mov	r2,zero
            }
        }

    }
    return result;           
}
  8127c8:	dfc00817 	ldw	ra,32(sp)
  8127cc:	ddc00717 	ldw	r23,28(sp)
  8127d0:	dd800617 	ldw	r22,24(sp)
  8127d4:	dd400517 	ldw	r21,20(sp)
  8127d8:	dd000417 	ldw	r20,16(sp)
  8127dc:	dcc00317 	ldw	r19,12(sp)
  8127e0:	dc800217 	ldw	r18,8(sp)
  8127e4:	dc400117 	ldw	r17,4(sp)
  8127e8:	dc000017 	ldw	r16,0(sp)
  8127ec:	dec00904 	addi	sp,sp,36
  8127f0:	f800283a 	ret
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
  8127f4:	80bfffcc 	andi	r2,r16,65535
  8127f8:	10a0001c 	xori	r2,r2,32768
  8127fc:	10a00004 	addi	r2,r2,-32768
  812800:	103fd226 	beq	r2,zero,81274c <create_file+0xac>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  812804:	a8801217 	ldw	r2,72(r21)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
  812808:	8c400044 	addi	r17,r17,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  81280c:	147fb81e 	bne	r2,r17,8126f0 <create_file+0x50>
  812810:	003fca06 	br	81273c <create_file+0x9c>
            record_index = find_first_empty_record_in_root_directory();
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  812814:	b900058b 	ldhu	r4,22(r23)
  812818:	08123700 	call	812370 <find_first_empty_record_in_a_subdirectory>
  81281c:	102d883a 	mov	r22,r2
        }
        if (record_index >= 0)
  812820:	b03fe816 	blt	r22,zero,8127c4 <create_file+0x124>

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  812824:	9809883a 	mov	r4,r19
  812828:	0803e080 	call	803e08 <strlen>
    
    for(index = 0; index < length; index++)
  81282c:	00815d0e 	bge	zero,r2,812da4 <create_file+0x704>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812830:	99c00003 	ldbu	r7,0(r19)
  812834:	01401704 	movi	r5,92
  812838:	38c03fcc 	andi	r3,r7,255
  81283c:	18c0201c 	xori	r3,r3,128
  812840:	18ffe004 	addi	r3,r3,-128
  812844:	19400c26 	beq	r3,r5,812878 <create_file+0x1d8>
  812848:	01000bc4 	movi	r4,47
  81284c:	19000a26 	beq	r3,r4,812878 <create_file+0x1d8>
  812850:	280d883a 	mov	r6,r5
  812854:	200b883a 	mov	r5,r4
  812858:	0009883a 	mov	r4,zero
  81285c:	00000306 	br	81286c <create_file+0x1cc>
  812860:	18c00007 	ldb	r3,0(r3)
  812864:	1980bd26 	beq	r3,r6,812b5c <create_file+0x4bc>
  812868:	1940bc26 	beq	r3,r5,812b5c <create_file+0x4bc>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  81286c:	21000044 	addi	r4,r4,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812870:	9907883a 	add	r3,r19,r4
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812874:	113ffa1e 	bne	r2,r4,812860 <create_file+0x1c0>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812878:	38c03fcc 	andi	r3,r7,255
  81287c:	18c0201c 	xori	r3,r3,128
  812880:	18ffe004 	addi	r3,r3,-128
  812884:	00800b84 	movi	r2,46
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  812888:	92000204 	addi	r8,r18,8
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81288c:	18810326 	beq	r3,r2,812c9c <create_file+0x5fc>
        {
            name[counter] = filename[local];
  812890:	91c00005 	stb	r7,0(r18)
            if (filename[local] != 0) local++;
  812894:	98800007 	ldb	r2,0(r19)
  812898:	1000e326 	beq	r2,zero,812c28 <create_file+0x588>
  81289c:	01c00044 	movi	r7,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128a0:	99c9883a 	add	r4,r19,r7
  8128a4:	21400003 	ldbu	r5,0(r4)
  8128a8:	00800b84 	movi	r2,46
  8128ac:	200d883a 	mov	r6,r4
  8128b0:	28c03fcc 	andi	r3,r5,255
  8128b4:	18c0201c 	xori	r3,r3,128
  8128b8:	18ffe004 	addi	r3,r3,-128
  8128bc:	18810226 	beq	r3,r2,812cc8 <create_file+0x628>
        {
            name[counter] = filename[local];
  8128c0:	91400045 	stb	r5,1(r18)
            if (filename[local] != 0) local++;
  8128c4:	30800007 	ldb	r2,0(r6)
  8128c8:	1000dd26 	beq	r2,zero,812c40 <create_file+0x5a0>
  8128cc:	39c00044 	addi	r7,r7,1
  8128d0:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8128d4:	21400003 	ldbu	r5,0(r4)
  8128d8:	00800b84 	movi	r2,46
  8128dc:	28c03fcc 	andi	r3,r5,255
  8128e0:	18c0201c 	xori	r3,r3,128
  8128e4:	18ffe004 	addi	r3,r3,-128
  8128e8:	1880ff26 	beq	r3,r2,812ce8 <create_file+0x648>
        {
            name[counter] = filename[local];
  8128ec:	91400085 	stb	r5,2(r18)
            if (filename[local] != 0) local++;
  8128f0:	20800007 	ldb	r2,0(r4)
  8128f4:	1000d726 	beq	r2,zero,812c54 <create_file+0x5b4>
  8128f8:	39c00044 	addi	r7,r7,1
  8128fc:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812900:	21400003 	ldbu	r5,0(r4)
  812904:	00800b84 	movi	r2,46
  812908:	28c03fcc 	andi	r3,r5,255
  81290c:	18c0201c 	xori	r3,r3,128
  812910:	18ffe004 	addi	r3,r3,-128
  812914:	1880fc26 	beq	r3,r2,812d08 <create_file+0x668>
        {
            name[counter] = filename[local];
  812918:	914000c5 	stb	r5,3(r18)
            if (filename[local] != 0) local++;
  81291c:	20800007 	ldb	r2,0(r4)
  812920:	1000d026 	beq	r2,zero,812c64 <create_file+0x5c4>
  812924:	39c00044 	addi	r7,r7,1
  812928:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  81292c:	21400003 	ldbu	r5,0(r4)
  812930:	00800b84 	movi	r2,46
  812934:	28c03fcc 	andi	r3,r5,255
  812938:	18c0201c 	xori	r3,r3,128
  81293c:	18ffe004 	addi	r3,r3,-128
  812940:	1880f926 	beq	r3,r2,812d28 <create_file+0x688>
        {
            name[counter] = filename[local];
  812944:	91400105 	stb	r5,4(r18)
            if (filename[local] != 0) local++;
  812948:	20800007 	ldb	r2,0(r4)
  81294c:	1000c926 	beq	r2,zero,812c74 <create_file+0x5d4>
  812950:	39c00044 	addi	r7,r7,1
  812954:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812958:	21400003 	ldbu	r5,0(r4)
  81295c:	00800b84 	movi	r2,46
  812960:	28c03fcc 	andi	r3,r5,255
  812964:	18c0201c 	xori	r3,r3,128
  812968:	18ffe004 	addi	r3,r3,-128
  81296c:	1880f626 	beq	r3,r2,812d48 <create_file+0x6a8>
        {
            name[counter] = filename[local];
  812970:	91400145 	stb	r5,5(r18)
            if (filename[local] != 0) local++;
  812974:	20800007 	ldb	r2,0(r4)
  812978:	1000c226 	beq	r2,zero,812c84 <create_file+0x5e4>
  81297c:	39c00044 	addi	r7,r7,1
  812980:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812984:	21400003 	ldbu	r5,0(r4)
  812988:	00800b84 	movi	r2,46
  81298c:	28c03fcc 	andi	r3,r5,255
  812990:	18c0201c 	xori	r3,r3,128
  812994:	18ffe004 	addi	r3,r3,-128
  812998:	1880f326 	beq	r3,r2,812d68 <create_file+0x6c8>
        {
            name[counter] = filename[local];
  81299c:	91400185 	stb	r5,6(r18)
            if (filename[local] != 0) local++;
  8129a0:	20800007 	ldb	r2,0(r4)
  8129a4:	1000bb26 	beq	r2,zero,812c94 <create_file+0x5f4>
  8129a8:	39c00044 	addi	r7,r7,1
  8129ac:	99c9883a 	add	r4,r19,r7
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  8129b0:	21400003 	ldbu	r5,0(r4)
  8129b4:	00800b84 	movi	r2,46
  8129b8:	28c03fcc 	andi	r3,r5,255
  8129bc:	18c0201c 	xori	r3,r3,128
  8129c0:	18ffe004 	addi	r3,r3,-128
  8129c4:	1880f026 	beq	r3,r2,812d88 <create_file+0x6e8>
        {
            name[counter] = filename[local];
  8129c8:	914001c5 	stb	r5,7(r18)
            if (filename[local] != 0) local++;
  8129cc:	20800007 	ldb	r2,0(r4)
  8129d0:	10000726 	beq	r2,zero,8129f0 <create_file+0x350>
  8129d4:	39c00044 	addi	r7,r7,1
  8129d8:	99c9883a 	add	r4,r19,r7
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  8129dc:	20c00007 	ldb	r3,0(r4)
  8129e0:	00800b84 	movi	r2,46
  8129e4:	1880021e 	bne	r3,r2,8129f0 <create_file+0x350>
  8129e8:	39c00044 	addi	r7,r7,1
  8129ec:	99c9883a 	add	r4,r19,r7
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  8129f0:	20800003 	ldbu	r2,0(r4)
  8129f4:	1000881e 	bne	r2,zero,812c18 <create_file+0x578>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  8129f8:	00800804 	movi	r2,32
  8129fc:	40800005 	stb	r2,0(r8)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  812a00:	20800003 	ldbu	r2,0(r4)
  812a04:	1000801e 	bne	r2,zero,812c08 <create_file+0x568>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  812a08:	00800804 	movi	r2,32
  812a0c:	40800045 	stb	r2,1(r8)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
  812a10:	20800003 	ldbu	r2,0(r4)
  812a14:	1000011e 	bne	r2,zero,812a1c <create_file+0x37c>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
  812a18:	00800804 	movi	r2,32
  812a1c:	40800085 	stb	r2,2(r8)
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  812a20:	b005d43a 	srai	r2,r22,16
            file_record->create_time = 0;
            file_record->create_date = 0;
            file_record->last_access_date = 0;
            file_record->last_modified_time = 0;
            file_record->last_modified_date = 0;
            file_record->start_cluster_index = cluster_number;
  812a24:	9500058d 	sth	r20,22(r18)
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  812a28:	b900058b 	ldhu	r4,22(r23)
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  812a2c:	10c003cc 	andi	r3,r2,15
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  812a30:	10bfffcc 	andi	r2,r2,65535
  812a34:	1021d13a 	srai	r16,r2,4
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  812a38:	1806917a 	slli	r3,r3,5
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
  812a3c:	00800044 	movi	r2,1
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
  812a40:	b1ffffcc 	andi	r7,r22,65535
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  812a44:	90c00c0d 	sth	r3,48(r18)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  812a48:	91000d15 	stw	r4,52(r18)
            file_record->in_use = true;
            file_record->modified = true;
  812a4c:	90800e15 	stw	r2,56(r18)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
                         
            file_record->attributes = 0;
  812a50:	900002c5 	stb	zero,11(r18)
            file_record->create_time = 0;
  812a54:	9000030d 	sth	zero,12(r18)
            file_record->create_date = 0;
  812a58:	9000038d 	sth	zero,14(r18)
            file_record->last_access_date = 0;
  812a5c:	9000040d 	sth	zero,16(r18)
            file_record->last_modified_time = 0;
  812a60:	9000048d 	sth	zero,18(r18)
            file_record->last_modified_date = 0;
  812a64:	9000050d 	sth	zero,20(r18)
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
  812a68:	90000615 	stw	zero,24(r18)
            file_record->current_cluster_index = cluster_number;
  812a6c:	95000715 	stw	r20,28(r18)
            file_record->current_sector_in_cluster = 0;
  812a70:	90000815 	stw	zero,32(r18)
            file_record->current_byte_position = 0;
  812a74:	90000915 	stw	zero,36(r18)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  812a78:	91c00a15 	stw	r7,40(r18)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  812a7c:	94000b15 	stw	r16,44(r18)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
  812a80:	90800f15 	stw	r2,60(r18)
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  812a84:	3800591e 	bne	r7,zero,812bec <create_file+0x54c>
  812a88:	a8801317 	ldw	r2,76(r21)
  812a8c:	1409883a 	add	r4,r2,r16
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  812a90:	d1677b17 	ldw	r5,-25108(gp)
  812a94:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  812a98:	103f4a26 	beq	r2,zero,8127c4 <create_file+0x124>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  812a9c:	91000c0f 	ldh	r4,48(r18)
  812aa0:	900b883a 	mov	r5,r18
  812aa4:	080ec480 	call	80ec48 <Write_File_Record_At_Offset>
  812aa8:	103f4626 	beq	r2,zero,8127c4 <create_file+0x124>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
  812aac:	d0a77e17 	ldw	r2,-25096(gp)
  812ab0:	1000b81e 	bne	r2,zero,812d94 <create_file+0x6f4>


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812ab4:	a8801117 	ldw	r2,68(r21)
  812ab8:	d0e77b17 	ldw	r3,-25108(gp)
  812abc:	a020d23a 	srli	r16,r20,8
  812ac0:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812ac4:	d0a77f17 	ldw	r2,-25092(gp)
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  812ac8:	80c9883a 	add	r4,r16,r3
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812acc:	11000326 	beq	r2,r4,812adc <create_file+0x43c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812ad0:	000b883a 	mov	r5,zero
  812ad4:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  812ad8:	10000926 	beq	r2,zero,812b00 <create_file+0x460>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812adc:	d0e77d17 	ldw	r3,-25100(gp)
  812ae0:	a0803fcc 	andi	r2,r20,255
  812ae4:	1085883a 	add	r2,r2,r2
  812ae8:	19000a17 	ldw	r4,40(r3)
  812aec:	00ffffc4 	movi	r3,-1
  812af0:	1105883a 	add	r2,r2,r4
  812af4:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  812af8:	01000044 	movi	r4,1
  812afc:	d1277e15 	stw	r4,-25096(gp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  812b00:	a8801217 	ldw	r2,72(r21)
  812b04:	d0e77b17 	ldw	r3,-25108(gp)
  812b08:	1887883a 	add	r3,r3,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
  812b0c:	d0a77f17 	ldw	r2,-25092(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  812b10:	80c9883a 	add	r4,r16,r3
    }
     
    if (sector_index != current_sector_index)
  812b14:	11000326 	beq	r2,r4,812b24 <create_file+0x484>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  812b18:	000b883a 	mov	r5,zero
  812b1c:	080f0f80 	call	80f0f8 <Read_Sector_Data>
  812b20:	103f2826 	beq	r2,zero,8127c4 <create_file+0x124>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812b24:	d0e77d17 	ldw	r3,-25100(gp)
  812b28:	a0803fcc 	andi	r2,r20,255
  812b2c:	1085883a 	add	r2,r2,r2
  812b30:	19000a17 	ldw	r4,40(r3)
  812b34:	00ffffc4 	movi	r3,-1
  812b38:	1105883a 	add	r2,r2,r4
  812b3c:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  812b40:	01000044 	movi	r4,1
  812b44:	2005883a 	mov	r2,r4
  812b48:	d1277e15 	stw	r4,-25096(gp)
  812b4c:	003f1e06 	br	8127c8 <create_file+0x128>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
  812b50:	2a45883a 	add	r2,r5,r9
  812b54:	102c943a 	slli	r22,r2,16
  812b58:	003f3106 	br	812820 <create_file+0x180>
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  812b5c:	0100910e 	bge	zero,r4,812da4 <create_file+0x704>
  812b60:	0023883a 	mov	r17,zero
            {
                last_dir_separator = last_dir_separator+location+1;
  812b64:	88800044 	addi	r2,r17,1
  812b68:	1123883a 	add	r17,r2,r4
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  812b6c:	9c61883a 	add	r16,r19,r17

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
  812b70:	8009883a 	mov	r4,r16
  812b74:	0803e080 	call	803e08 <strlen>
    
    for(index = 0; index < length; index++)
  812b78:	0080180e 	bge	zero,r2,812bdc <create_file+0x53c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812b7c:	80c00007 	ldb	r3,0(r16)
  812b80:	01401704 	movi	r5,92
  812b84:	19400c26 	beq	r3,r5,812bb8 <create_file+0x518>
  812b88:	01000bc4 	movi	r4,47
  812b8c:	19000a26 	beq	r3,r4,812bb8 <create_file+0x518>
  812b90:	280d883a 	mov	r6,r5
  812b94:	200b883a 	mov	r5,r4
  812b98:	0009883a 	mov	r4,zero
  812b9c:	00000306 	br	812bac <create_file+0x50c>
  812ba0:	18c00007 	ldb	r3,0(r3)
  812ba4:	19800f26 	beq	r3,r6,812be4 <create_file+0x544>
  812ba8:	19400e26 	beq	r3,r5,812be4 <create_file+0x544>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812bac:	21000044 	addi	r4,r4,1
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  812bb0:	8107883a 	add	r3,r16,r4
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812bb4:	113ffa1e 	bne	r2,r4,812ba0 <create_file+0x500>
  812bb8:	81c00003 	ldbu	r7,0(r16)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812bbc:	00800b84 	movi	r2,46
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  812bc0:	8027883a 	mov	r19,r16
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812bc4:	38c03fcc 	andi	r3,r7,255
  812bc8:	18c0201c 	xori	r3,r3,128
  812bcc:	18ffe004 	addi	r3,r3,-128
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  812bd0:	92000204 	addi	r8,r18,8
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812bd4:	18bf2e1e 	bne	r3,r2,812890 <create_file+0x1f0>
  812bd8:	00003006 	br	812c9c <create_file+0x5fc>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  812bdc:	0009883a 	mov	r4,zero
        {
            break;
        }
    }
    
    if (index == length)
  812be0:	103ff526 	beq	r2,zero,812bb8 <create_file+0x518>
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  812be4:	013fdf16 	blt	zero,r4,812b64 <create_file+0x4c4>
  812be8:	003ff306 	br	812bb8 <create_file+0x518>
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  812bec:	a9400383 	ldbu	r5,14(r21)
  812bf0:	393fff84 	addi	r4,r7,-2
  812bf4:	0802b980 	call	802b98 <__mulsi3>
  812bf8:	a8c01417 	ldw	r3,80(r21)
  812bfc:	1c07883a 	add	r3,r3,r16
  812c00:	10c9883a 	add	r4,r2,r3
  812c04:	003fa206 	br	812a90 <create_file+0x3f0>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
  812c08:	39c00044 	addi	r7,r7,1
  812c0c:	99c9883a 	add	r4,r19,r7
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  812c10:	40800045 	stb	r2,1(r8)
  812c14:	003f7e06 	br	812a10 <create_file+0x370>
            local++;
  812c18:	39c00044 	addi	r7,r7,1
  812c1c:	99c9883a 	add	r4,r19,r7
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
  812c20:	40800005 	stb	r2,0(r8)
  812c24:	003f7606 	br	812a00 <create_file+0x360>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c28:	99400003 	ldbu	r5,0(r19)
  812c2c:	980d883a 	mov	r6,r19
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    current_sector_modified = true;
  812c30:	000f883a 	mov	r7,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
  812c34:	91400045 	stb	r5,1(r18)
            if (filename[local] != 0) local++;
  812c38:	30800007 	ldb	r2,0(r6)
  812c3c:	103f231e 	bne	r2,zero,8128cc <create_file+0x22c>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c40:	99c9883a 	add	r4,r19,r7
  812c44:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  812c48:	91400085 	stb	r5,2(r18)
            if (filename[local] != 0) local++;
  812c4c:	20800007 	ldb	r2,0(r4)
  812c50:	103f291e 	bne	r2,zero,8128f8 <create_file+0x258>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c54:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  812c58:	914000c5 	stb	r5,3(r18)
            if (filename[local] != 0) local++;
  812c5c:	20800007 	ldb	r2,0(r4)
  812c60:	103f301e 	bne	r2,zero,812924 <create_file+0x284>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c64:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  812c68:	91400105 	stb	r5,4(r18)
            if (filename[local] != 0) local++;
  812c6c:	20800007 	ldb	r2,0(r4)
  812c70:	103f371e 	bne	r2,zero,812950 <create_file+0x2b0>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c74:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  812c78:	91400145 	stb	r5,5(r18)
            if (filename[local] != 0) local++;
  812c7c:	20800007 	ldb	r2,0(r4)
  812c80:	103f3e1e 	bne	r2,zero,81297c <create_file+0x2dc>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c84:	21400003 	ldbu	r5,0(r4)
        {
            name[counter] = filename[local];
  812c88:	91400185 	stb	r5,6(r18)
            if (filename[local] != 0) local++;
  812c8c:	20800007 	ldb	r2,0(r4)
  812c90:	103f451e 	bne	r2,zero,8129a8 <create_file+0x308>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812c94:	21400003 	ldbu	r5,0(r4)
  812c98:	003f4b06 	br	8129c8 <create_file+0x328>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812c9c:	00800804 	movi	r2,32
  812ca0:	000f883a 	mov	r7,zero
  812ca4:	90800005 	stb	r2,0(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812ca8:	99c9883a 	add	r4,r19,r7
  812cac:	21400003 	ldbu	r5,0(r4)
  812cb0:	00800b84 	movi	r2,46
  812cb4:	200d883a 	mov	r6,r4
  812cb8:	28c03fcc 	andi	r3,r5,255
  812cbc:	18c0201c 	xori	r3,r3,128
  812cc0:	18ffe004 	addi	r3,r3,-128
  812cc4:	18befe1e 	bne	r3,r2,8128c0 <create_file+0x220>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812cc8:	00800804 	movi	r2,32
  812ccc:	90800045 	stb	r2,1(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812cd0:	21400003 	ldbu	r5,0(r4)
  812cd4:	00800b84 	movi	r2,46
  812cd8:	28c03fcc 	andi	r3,r5,255
  812cdc:	18c0201c 	xori	r3,r3,128
  812ce0:	18ffe004 	addi	r3,r3,-128
  812ce4:	18bf011e 	bne	r3,r2,8128ec <create_file+0x24c>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812ce8:	00800804 	movi	r2,32
  812cec:	90800085 	stb	r2,2(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812cf0:	21400003 	ldbu	r5,0(r4)
  812cf4:	00800b84 	movi	r2,46
  812cf8:	28c03fcc 	andi	r3,r5,255
  812cfc:	18c0201c 	xori	r3,r3,128
  812d00:	18ffe004 	addi	r3,r3,-128
  812d04:	18bf041e 	bne	r3,r2,812918 <create_file+0x278>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812d08:	00800804 	movi	r2,32
  812d0c:	908000c5 	stb	r2,3(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812d10:	21400003 	ldbu	r5,0(r4)
  812d14:	00800b84 	movi	r2,46
  812d18:	28c03fcc 	andi	r3,r5,255
  812d1c:	18c0201c 	xori	r3,r3,128
  812d20:	18ffe004 	addi	r3,r3,-128
  812d24:	18bf071e 	bne	r3,r2,812944 <create_file+0x2a4>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812d28:	00800804 	movi	r2,32
  812d2c:	90800105 	stb	r2,4(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812d30:	21400003 	ldbu	r5,0(r4)
  812d34:	00800b84 	movi	r2,46
  812d38:	28c03fcc 	andi	r3,r5,255
  812d3c:	18c0201c 	xori	r3,r3,128
  812d40:	18ffe004 	addi	r3,r3,-128
  812d44:	18bf0a1e 	bne	r3,r2,812970 <create_file+0x2d0>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812d48:	00800804 	movi	r2,32
  812d4c:	90800145 	stb	r2,5(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812d50:	21400003 	ldbu	r5,0(r4)
  812d54:	00800b84 	movi	r2,46
  812d58:	28c03fcc 	andi	r3,r5,255
  812d5c:	18c0201c 	xori	r3,r3,128
  812d60:	18ffe004 	addi	r3,r3,-128
  812d64:	18bf0d1e 	bne	r3,r2,81299c <create_file+0x2fc>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812d68:	00800804 	movi	r2,32
  812d6c:	90800185 	stb	r2,6(r18)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
  812d70:	21400003 	ldbu	r5,0(r4)
  812d74:	00800b84 	movi	r2,46
  812d78:	28c03fcc 	andi	r3,r5,255
  812d7c:	18c0201c 	xori	r3,r3,128
  812d80:	18ffe004 	addi	r3,r3,-128
  812d84:	18bf101e 	bne	r3,r2,8129c8 <create_file+0x328>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
  812d88:	00800804 	movi	r2,32
  812d8c:	908001c5 	stb	r2,7(r18)
  812d90:	003f1206 	br	8129dc <create_file+0x33c>
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
  812d94:	d1277f17 	ldw	r4,-25092(gp)
  812d98:	000b883a 	mov	r5,zero
  812d9c:	080f04c0 	call	80f04c <Write_Sector_Data>
  812da0:	003f4406 	br	812ab4 <create_file+0x414>
  812da4:	99c00003 	ldbu	r7,0(r19)
  812da8:	003eb306 	br	812878 <create_file+0x1d8>

00812dac <alt_up_sd_card_fopen>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  812dac:	d0a77d17 	ldw	r2,-25100(gp)
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  812db0:	deffe804 	addi	sp,sp,-96
  812db4:	dc401215 	stw	r17,72(sp)
  812db8:	dc001115 	stw	r16,68(sp)
  812dbc:	dfc01715 	stw	ra,92(sp)
  812dc0:	dd401615 	stw	r21,88(sp)
  812dc4:	dd001515 	stw	r20,84(sp)
  812dc8:	dcc01415 	stw	r19,80(sp)
  812dcc:	dc801315 	stw	r18,76(sp)
  812dd0:	2823883a 	mov	r17,r5
  812dd4:	2021883a 	mov	r16,r4
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  812dd8:	10001126 	beq	r2,zero,812e20 <alt_up_sd_card_fopen+0x74>
  812ddc:	d0e77517 	ldw	r3,-25132(gp)
  812de0:	1880002b 	ldhuio	r2,0(r3)
  812de4:	1080008c 	andi	r2,r2,2
  812de8:	10000d26 	beq	r2,zero,812e20 <alt_up_sd_card_fopen+0x74>
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  812dec:	d0a77417 	ldw	r2,-25136(gp)
  812df0:	10001b1e 	bne	r2,zero,812e60 <alt_up_sd_card_fopen+0xb4>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
                    {
                        active_files[file_record_index].in_use = true;
    					active_files[file_record_index].modified = true;
  812df4:	013fffc4 	movi	r4,-1
    		}
        }
	}

	return file_record_index;
}
  812df8:	2005883a 	mov	r2,r4
  812dfc:	dfc01717 	ldw	ra,92(sp)
  812e00:	dd401617 	ldw	r21,88(sp)
  812e04:	dd001517 	ldw	r20,84(sp)
  812e08:	dcc01417 	ldw	r19,80(sp)
  812e0c:	dc801317 	ldw	r18,76(sp)
  812e10:	dc401217 	ldw	r17,72(sp)
  812e14:	dc001117 	ldw	r16,68(sp)
  812e18:	dec01804 	addi	sp,sp,96
  812e1c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
  812e20:	d0e77317 	ldw	r3,-25140(gp)
  812e24:	00800044 	movi	r2,1
  812e28:	18bff21e 	bne	r3,r2,812df4 <alt_up_sd_card_fopen+0x48>
	{
		int index;

		initialized = false;
		search_data.valid = false;
  812e2c:	00802074 	movhi	r2,129
  812e30:	109f4904 	addi	r2,r2,32036
		is_sd_card_formated_as_FAT16 = false;
  812e34:	00c02074 	movhi	r3,129
  812e38:	18df7204 	addi	r3,r3,32200
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
  812e3c:	10000415 	stw	zero,16(r2)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
  812e40:	d0277315 	stw	zero,-25140(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
  812e44:	d0277415 	stw	zero,-25136(gp)
  812e48:	18814004 	addi	r2,r3,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
  812e4c:	18000015 	stw	zero,0(r3)
			active_files[index].modified = false;
  812e50:	183fff15 	stw	zero,-4(r3)
  812e54:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  812e58:	18bffc1e 	bne	r3,r2,812e4c <alt_up_sd_card_fopen+0xa0>
  812e5c:	003fe506 	br	812df4 <alt_up_sd_card_fopen+0x48>
{
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
        unsigned int home_directory_cluster = 0;
  812e60:	d8000015 	stw	zero,0(sp)

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
  812e64:	0803e080 	call	803e08 <strlen>
  812e68:	100f883a 	mov	r7,r2
    
    for (index = 0; index < length; index++)
  812e6c:	0080650e 	bge	zero,r2,813004 <alt_up_sd_card_fopen+0x258>
  812e70:	8009883a 	mov	r4,r16
  812e74:	000b883a 	mov	r5,zero
  812e78:	01800644 	movi	r6,25
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812e7c:	20c00003 	ldbu	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  812e80:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812e84:	18bfe7c4 	addi	r2,r3,-97
  812e88:	10803fcc 	andi	r2,r2,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  812e8c:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  812e90:	30800136 	bltu	r6,r2,812e98 <alt_up_sd_card_fopen+0xec>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  812e94:	20c00005 	stb	r3,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  812e98:	21000044 	addi	r4,r4,1
  812e9c:	397ff71e 	bne	r7,r5,812e7c <alt_up_sd_card_fopen+0xd0>


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
    int length = strlen(file_name);
  812ea0:	8009883a 	mov	r4,r16
  812ea4:	0803e080 	call	803e08 <strlen>
  812ea8:	100f883a 	mov	r7,r2
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812eac:	0080550e 	bge	zero,r2,813004 <alt_up_sd_card_fopen+0x258>
    {
        if ((file_name[index] == ' ') ||
  812eb0:	80c00007 	ldb	r3,0(r16)
  812eb4:	00800804 	movi	r2,32
  812eb8:	18801826 	beq	r3,r2,812f1c <alt_up_sd_card_fopen+0x170>
  812ebc:	017fffc4 	movi	r5,-1
  812ec0:	1017883a 	mov	r11,r2
  812ec4:	0009883a 	mov	r4,zero
  812ec8:	280d883a 	mov	r6,r5
  812ecc:	02001704 	movi	r8,92
  812ed0:	02400bc4 	movi	r9,47
  812ed4:	02800244 	movi	r10,9
  812ed8:	03400b84 	movi	r13,46
  812edc:	030000c4 	movi	r12,3
  812ee0:	20bfffc4 	addi	r2,r4,-1
  812ee4:	11804426 	beq	r2,r6,812ff8 <alt_up_sd_card_fopen+0x24c>
  812ee8:	2145c83a 	sub	r2,r4,r5
  812eec:	12803c26 	beq	r2,r10,812fe0 <alt_up_sd_card_fopen+0x234>
  812ef0:	29803d26 	beq	r5,r6,812fe8 <alt_up_sd_card_fopen+0x23c>
  812ef4:	60803c0e 	bge	r12,r2,812fe8 <alt_up_sd_card_fopen+0x23c>
  812ef8:	1a000126 	beq	r3,r8,812f00 <alt_up_sd_card_fopen+0x154>
  812efc:	1a40071e 	bne	r3,r9,812f1c <alt_up_sd_card_fopen+0x170>
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  812f00:	200d883a 	mov	r6,r4
  812f04:	200b883a 	mov	r5,r4
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812f08:	21000044 	addi	r4,r4,1
  812f0c:	39003d26 	beq	r7,r4,813004 <alt_up_sd_card_fopen+0x258>
    {
        if ((file_name[index] == ' ') ||
  812f10:	2405883a 	add	r2,r4,r16
  812f14:	10c00007 	ldb	r3,0(r2)
  812f18:	1afff11e 	bne	r3,r11,812ee0 <alt_up_sd_card_fopen+0x134>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  812f1c:	000b883a 	mov	r5,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  812f20:	81c5883a 	add	r2,r16,r7
  812f24:	113fffc7 	ldb	r4,-1(r2)
  812f28:	00c01704 	movi	r3,92
  812f2c:	20ffb126 	beq	r4,r3,812df4 <alt_up_sd_card_fopen+0x48>
  812f30:	00800bc4 	movi	r2,47
  812f34:	20bfaf26 	beq	r4,r2,812df4 <alt_up_sd_card_fopen+0x48>
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
        if (check_file_name_for_FAT16_compliance(name))
  812f38:	2805003a 	cmpeq	r2,r5,zero
  812f3c:	103fad1e 	bne	r2,zero,812df4 <alt_up_sd_card_fopen+0x48>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  812f40:	dd400104 	addi	r21,sp,4
  812f44:	8009883a 	mov	r4,r16
  812f48:	d80b883a 	mov	r5,sp
  812f4c:	a80d883a 	mov	r6,r21
  812f50:	0810f900 	call	810f90 <get_home_directory_cluster_for_file>
  812f54:	103fa726 	beq	r2,zero,812df4 <alt_up_sd_card_fopen+0x48>
  812f58:	0007883a 	mov	r3,zero
  812f5c:	01002074 	movhi	r4,129
  812f60:	211f7204 	addi	r4,r4,32200
  812f64:	01400504 	movi	r5,20
  812f68:	00000206 	br	812f74 <alt_up_sd_card_fopen+0x1c8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  812f6c:	18c00044 	addi	r3,r3,1
  812f70:	197fa026 	beq	r3,r5,812df4 <alt_up_sd_card_fopen+0x48>
    		{
    			if (active_files[index].in_use == false)
  812f74:	20800017 	ldw	r2,0(r4)
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  812f78:	21001004 	addi	r4,r4,64
    		{
    			if (active_files[index].in_use == false)
  812f7c:	103ffb1e 	bne	r2,zero,812f6c <alt_up_sd_card_fopen+0x1c0>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  812f80:	1cffffcc 	andi	r19,r3,65535
  812f84:	9ce0001c 	xori	r19,r19,32768
  812f88:	9ce00004 	addi	r19,r19,-32768
  812f8c:	98003416 	blt	r19,zero,813060 <alt_up_sd_card_fopen+0x2b4>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  812f90:	980491ba 	slli	r2,r19,6
  812f94:	05002074 	movhi	r20,129
  812f98:	a51f6304 	addi	r20,r20,32140
  812f9c:	d9000017 	ldw	r4,0(sp)
  812fa0:	1525883a 	add	r18,r2,r20
  812fa4:	800b883a 	mov	r5,r16
  812fa8:	900d883a 	mov	r6,r18
  812fac:	08102c40 	call	8102c4 <find_file_in_directory>
  812fb0:	1000161e 	bne	r2,zero,81300c <alt_up_sd_card_fopen+0x260>
							}
						}
					}

                }
                else if (create)
  812fb4:	883f8f26 	beq	r17,zero,812df4 <alt_up_sd_card_fopen+0x48>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  812fb8:	8009883a 	mov	r4,r16
  812fbc:	a80d883a 	mov	r6,r21
  812fc0:	900b883a 	mov	r5,r18
  812fc4:	08126a00 	call	8126a0 <create_file>
  812fc8:	103f8a26 	beq	r2,zero,812df4 <alt_up_sd_card_fopen+0x48>
                    {
                        active_files[file_record_index].in_use = true;
  812fcc:	00800044 	movi	r2,1
  812fd0:	9809883a 	mov	r4,r19
    					active_files[file_record_index].modified = true;
  812fd4:	90800e15 	stw	r2,56(r18)
                else if (create)
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
                    {
                        active_files[file_record_index].in_use = true;
  812fd8:	90800f15 	stw	r2,60(r18)
  812fdc:	003f8606 	br	812df8 <alt_up_sd_card_fopen+0x4c>
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  812fe0:	1b7fce1e 	bne	r3,r13,812f1c <alt_up_sd_card_fopen+0x170>
  812fe4:	29bfc31e 	bne	r5,r6,812ef4 <alt_up_sd_card_fopen+0x148>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  812fe8:	1a3fc526 	beq	r3,r8,812f00 <alt_up_sd_card_fopen+0x154>
  812fec:	1a7fc426 	beq	r3,r9,812f00 <alt_up_sd_card_fopen+0x154>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
  812ff0:	1b7fc426 	beq	r3,r13,812f04 <alt_up_sd_card_fopen+0x158>
  812ff4:	003fc406 	br	812f08 <alt_up_sd_card_fopen+0x15c>
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
  812ff8:	1a3fc826 	beq	r3,r8,812f1c <alt_up_sd_card_fopen+0x170>
  812ffc:	1a7fba1e 	bne	r3,r9,812ee8 <alt_up_sd_card_fopen+0x13c>
  813000:	003fc606 	br	812f1c <alt_up_sd_card_fopen+0x170>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  813004:	01400044 	movi	r5,1
  813008:	003fc506 	br	812f20 <alt_up_sd_card_fopen+0x174>
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
                {
                    if (create)
  81300c:	883f791e 	bne	r17,zero,812df4 <alt_up_sd_card_fopen+0x48>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  813010:	9080058b 	ldhu	r2,22(r18)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
  813014:	00c00044 	movi	r3,1
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
                    active_files[file_record_index].current_sector_in_cluster = 0;
  813018:	90000815 	stw	zero,32(r18)
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  81301c:	90800715 	stw	r2,28(r18)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
  813020:	90000915 	stw	zero,36(r18)
                    active_files[file_record_index].in_use = true;
  813024:	90c00f15 	stw	r3,60(r18)
    				active_files[file_record_index].modified = false;
  813028:	90000e15 	stw	zero,56(r18)
  81302c:	a1800f04 	addi	r6,r20,60
  813030:	1811883a 	mov	r8,r3
  813034:	900b883a 	mov	r5,r18
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  813038:	9809883a 	mov	r4,r19
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;
  81303c:	000f883a 	mov	r7,zero
  813040:	02400504 	movi	r9,20

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  813044:	3cc00226 	beq	r7,r19,813050 <alt_up_sd_card_fopen+0x2a4>
  813048:	30800017 	ldw	r2,0(r6)
  81304c:	12000626 	beq	r2,r8,813068 <alt_up_sd_card_fopen+0x2bc>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  813050:	39c00044 	addi	r7,r7,1
  813054:	31801004 	addi	r6,r6,64
  813058:	3a7ffa1e 	bne	r7,r9,813044 <alt_up_sd_card_fopen+0x298>
  81305c:	003f6606 	br	812df8 <alt_up_sd_card_fopen+0x4c>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  813060:	9809883a 	mov	r4,r19
  813064:	003f6406 	br	812df8 <alt_up_sd_card_fopen+0x4c>
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  813068:	30fffb17 	ldw	r3,-20(r6)
  81306c:	28800a17 	ldw	r2,40(r5)
  813070:	10fff71e 	bne	r2,r3,813050 <alt_up_sd_card_fopen+0x2a4>
  813074:	30fffc17 	ldw	r3,-16(r6)
  813078:	28800b17 	ldw	r2,44(r5)
  81307c:	10fff41e 	bne	r2,r3,813050 <alt_up_sd_card_fopen+0x2a4>
  813080:	30fffd0f 	ldh	r3,-12(r6)
  813084:	28800c0f 	ldh	r2,48(r5)
  813088:	10fff11e 	bne	r2,r3,813050 <alt_up_sd_card_fopen+0x2a4>
  81308c:	013fff84 	movi	r4,-2
  813090:	003f5906 	br	812df8 <alt_up_sd_card_fopen+0x4c>

00813094 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  813094:	00802074 	movhi	r2,129
  813098:	109f3d04 	addi	r2,r2,31988
  81309c:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8130a0:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  8130a4:	00bfde84 	movi	r2,-134
  8130a8:	1800011e 	bne	r3,zero,8130b0 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  8130ac:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  8130b0:	00bffa84 	movi	r2,-22
  8130b4:	203ffd26 	beq	r4,zero,8130ac <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  8130b8:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  8130bc:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8130c0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8130c4:	00bfff84 	movi	r2,-2
  8130c8:	3084703a 	and	r2,r6,r2
  8130cc:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8130d0:	00c02074 	movhi	r3,129
  8130d4:	18df3e04 	addi	r3,r3,31992
  8130d8:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  8130dc:	20800044 	addi	r2,r4,1
  8130e0:	2885883a 	add	r2,r5,r2
  8130e4:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8130e8:	11000d2e 	bgeu	r2,r4,813120 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  8130ec:	00800044 	movi	r2,1
  8130f0:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8130f4:	00802074 	movhi	r2,129
  8130f8:	1097cb04 	addi	r2,r2,24364
  entry->next     = list->next;
  8130fc:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813100:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  813104:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  813108:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  81310c:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  813110:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813114:	3001703a 	wrctl	status,r6
  813118:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  81311c:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  813120:	40000405 	stb	zero,16(r8)
  813124:	003ff306 	br	8130f4 <alt_alarm_start+0x60>

00813128 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813128:	0005883a 	mov	r2,zero
  81312c:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813130:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813134:	10800804 	addi	r2,r2,32
  813138:	10fffd1e 	bne	r2,r3,813130 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81313c:	f800283a 	ret

00813140 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813140:	deffff04 	addi	sp,sp,-4
  813144:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813148:	20000d26 	beq	r4,zero,813180 <alt_dev_llist_insert+0x40>
  81314c:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
  813150:	000d883a 	mov	r6,zero
  813154:	10000a26 	beq	r2,zero,813180 <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  813158:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81315c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  813160:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  813164:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  813168:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  81316c:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  813170:	3005883a 	mov	r2,r6
  813174:	dfc00017 	ldw	ra,0(sp)
  813178:	dec00104 	addi	sp,sp,4
  81317c:	f800283a 	ret
  813180:	00802074 	movhi	r2,129
  813184:	1097c804 	addi	r2,r2,24352
  813188:	10800017 	ldw	r2,0(r2)
  81318c:	00c02074 	movhi	r3,129
  813190:	18df2604 	addi	r3,r3,31896
  813194:	10000226 	beq	r2,zero,8131a0 <alt_dev_llist_insert+0x60>
  813198:	103ee83a 	callr	r2
  81319c:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  8131a0:	01bffa84 	movi	r6,-22
  8131a4:	00800584 	movi	r2,22
  8131a8:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  8131ac:	3005883a 	mov	r2,r6
  8131b0:	dfc00017 	ldw	ra,0(sp)
  8131b4:	dec00104 	addi	sp,sp,4
  8131b8:	f800283a 	ret

008131bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8131bc:	defffd04 	addi	sp,sp,-12
  8131c0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8131c4:	00802074 	movhi	r2,129
  8131c8:	108ee104 	addi	r2,r2,15236
  8131cc:	04402074 	movhi	r17,129
  8131d0:	8c4ee104 	addi	r17,r17,15236
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8131d4:	dfc00215 	stw	ra,8(sp)
  8131d8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8131dc:	14400536 	bltu	r2,r17,8131f4 <_do_ctors+0x38>
  8131e0:	1021883a 	mov	r16,r2
        (*ctor) (); 
  8131e4:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8131e8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
  8131ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8131f0:	847ffc2e 	bgeu	r16,r17,8131e4 <_do_ctors+0x28>
        (*ctor) (); 
}
  8131f4:	dfc00217 	ldw	ra,8(sp)
  8131f8:	dc400117 	ldw	r17,4(sp)
  8131fc:	dc000017 	ldw	r16,0(sp)
  813200:	dec00304 	addi	sp,sp,12
  813204:	f800283a 	ret

00813208 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813208:	defffd04 	addi	sp,sp,-12
  81320c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813210:	00802074 	movhi	r2,129
  813214:	108ee104 	addi	r2,r2,15236
  813218:	04402074 	movhi	r17,129
  81321c:	8c4ee204 	addi	r17,r17,15240
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813220:	dfc00215 	stw	ra,8(sp)
  813224:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813228:	14400536 	bltu	r2,r17,813240 <_do_dtors+0x38>
  81322c:	1021883a 	mov	r16,r2
        (*dtor) (); 
  813230:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813234:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
  813238:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81323c:	847ffc2e 	bgeu	r16,r17,813230 <_do_dtors+0x28>
        (*dtor) (); 
}
  813240:	dfc00217 	ldw	ra,8(sp)
  813244:	dc400117 	ldw	r17,4(sp)
  813248:	dc000017 	ldw	r16,0(sp)
  81324c:	dec00304 	addi	sp,sp,12
  813250:	f800283a 	ret

00813254 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813254:	defffb04 	addi	sp,sp,-20
  813258:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  81325c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813260:	dcc00315 	stw	r19,12(sp)
  813264:	dc400115 	stw	r17,4(sp)
  813268:	dfc00415 	stw	ra,16(sp)
  81326c:	2823883a 	mov	r17,r5
  813270:	dc800215 	stw	r18,8(sp)
  813274:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  813278:	0803e080 	call	803e08 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81327c:	84401126 	beq	r16,r17,8132c4 <alt_find_dev+0x70>
  813280:	14800044 	addi	r18,r2,1
  813284:	00000206 	br	813290 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  813288:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81328c:	84400d26 	beq	r16,r17,8132c4 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813290:	81000217 	ldw	r4,8(r16)
  813294:	980b883a 	mov	r5,r19
  813298:	900d883a 	mov	r6,r18
  81329c:	08139700 	call	813970 <memcmp>
  8132a0:	103ff91e 	bne	r2,zero,813288 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  8132a4:	8005883a 	mov	r2,r16
  8132a8:	dfc00417 	ldw	ra,16(sp)
  8132ac:	dcc00317 	ldw	r19,12(sp)
  8132b0:	dc800217 	ldw	r18,8(sp)
  8132b4:	dc400117 	ldw	r17,4(sp)
  8132b8:	dc000017 	ldw	r16,0(sp)
  8132bc:	dec00504 	addi	sp,sp,20
  8132c0:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8132c4:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  8132c8:	8005883a 	mov	r2,r16
  8132cc:	dfc00417 	ldw	ra,16(sp)
  8132d0:	dcc00317 	ldw	r19,12(sp)
  8132d4:	dc800217 	ldw	r18,8(sp)
  8132d8:	dc400117 	ldw	r17,4(sp)
  8132dc:	dc000017 	ldw	r16,0(sp)
  8132e0:	dec00504 	addi	sp,sp,20
  8132e4:	f800283a 	ret

008132e8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8132e8:	0009883a 	mov	r4,zero
  8132ec:	01440004 	movi	r5,4096
  8132f0:	08139241 	jmpi	813924 <alt_icache_flush>

008132f4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8132f4:	000530fa 	rdctl	r2,ienable
  8132f8:	00c00044 	movi	r3,1
  8132fc:	1946983a 	sll	r3,r3,r5
  813300:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  813304:	1004c03a 	cmpne	r2,r2,zero
  813308:	f800283a 	ret

0081330c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81330c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813310:	00bfff84 	movi	r2,-2
  813314:	3084703a 	and	r2,r6,r2
  813318:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  81331c:	01002074 	movhi	r4,129
  813320:	211f2a04 	addi	r4,r4,31912
  813324:	00800044 	movi	r2,1
  813328:	20c00017 	ldw	r3,0(r4)
  81332c:	1144983a 	sll	r2,r2,r5
  813330:	10c4b03a 	or	r2,r2,r3
  813334:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813338:	20c00017 	ldw	r3,0(r4)
  81333c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813340:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  813344:	0005883a 	mov	r2,zero
  813348:	f800283a 	ret

0081334c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81334c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813350:	00bfff84 	movi	r2,-2
  813354:	3084703a 	and	r2,r6,r2
  813358:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  81335c:	01002074 	movhi	r4,129
  813360:	211f2a04 	addi	r4,r4,31912
  813364:	00bfff84 	movi	r2,-2
  813368:	20c00017 	ldw	r3,0(r4)
  81336c:	1144183a 	rol	r2,r2,r5
  813370:	10c4703a 	and	r2,r2,r3
  813374:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813378:	20c00017 	ldw	r3,0(r4)
  81337c:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813380:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  813384:	0005883a 	mov	r2,zero
  813388:	f800283a 	ret

0081338c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81338c:	08133901 	jmpi	813390 <alt_iic_isr_register>

00813390 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813390:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  813394:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813398:	dfc00115 	stw	ra,4(sp)
  81339c:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8133a0:	023ffa84 	movi	r8,-22
  8133a4:	1140050e 	bge	r2,r5,8133bc <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  8133a8:	4005883a 	mov	r2,r8
  8133ac:	dfc00117 	ldw	ra,4(sp)
  8133b0:	dc000017 	ldw	r16,0(sp)
  8133b4:	dec00204 	addi	sp,sp,8
  8133b8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133bc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133c0:	00bfff84 	movi	r2,-2
  8133c4:	8084703a 	and	r2,r16,r2
  8133c8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  8133cc:	280690fa 	slli	r3,r5,3
  8133d0:	008020b4 	movhi	r2,130
  8133d4:	10a0a304 	addi	r2,r2,-32116
  8133d8:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  8133dc:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  8133e0:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8133e4:	30000826 	beq	r6,zero,813408 <alt_iic_isr_register+0x78>
  8133e8:	081330c0 	call	81330c <alt_ic_irq_enable>
  8133ec:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133f0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  8133f4:	4005883a 	mov	r2,r8
  8133f8:	dfc00117 	ldw	ra,4(sp)
  8133fc:	dc000017 	ldw	r16,0(sp)
  813400:	dec00204 	addi	sp,sp,8
  813404:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  813408:	081334c0 	call	81334c <alt_ic_irq_disable>
  81340c:	1011883a 	mov	r8,r2
  813410:	8001703a 	wrctl	status,r16
  813414:	003ff706 	br	8133f4 <alt_iic_isr_register+0x64>

00813418 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813418:	defff904 	addi	sp,sp,-28
  81341c:	dd400515 	stw	r21,20(sp)
  813420:	dc800215 	stw	r18,8(sp)
  813424:	302b883a 	mov	r21,r6
  813428:	2825883a 	mov	r18,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  81342c:	01807fc4 	movi	r6,511
  813430:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813434:	dd000415 	stw	r20,16(sp)
  813438:	dcc00315 	stw	r19,12(sp)
  81343c:	dc000015 	stw	r16,0(sp)
  813440:	dfc00615 	stw	ra,24(sp)
  813444:	dc400115 	stw	r17,4(sp)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813448:	05002074 	movhi	r20,129
  81344c:	a5132504 	addi	r20,r20,19604

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  813450:	08135640 	call	813564 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813454:	a027883a 	mov	r19,r20

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  813458:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  81345c:	1009883a 	mov	r4,r2
  813460:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  813464:	10000a16 	blt	r2,zero,813490 <alt_io_redirect+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
  813468:	0802b980 	call	802b98 <__mulsi3>
  81346c:	1505883a 	add	r2,r2,r20
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813470:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813474:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813478:	11800117 	ldw	r6,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  81347c:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813480:	a0c00515 	stw	r3,20(r20)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813484:	a1400315 	stw	r5,12(r20)
    fd->priv     = alt_fd_list[old].priv;
  813488:	a1800415 	stw	r6,16(r20)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  81348c:	080c9580 	call	80c958 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  813490:	9009883a 	mov	r4,r18
  813494:	000b883a 	mov	r5,zero
  813498:	01807fc4 	movi	r6,511
  81349c:	08135640 	call	813564 <open>
  8134a0:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8134a4:	1009883a 	mov	r4,r2
  8134a8:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8134ac:	10000a16 	blt	r2,zero,8134d8 <alt_io_redirect+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8134b0:	0802b980 	call	802b98 <__mulsi3>
  8134b4:	14c5883a 	add	r2,r2,r19
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8134b8:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8134bc:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8134c0:	11800117 	ldw	r6,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8134c4:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8134c8:	98c00215 	stw	r3,8(r19)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8134cc:	99400015 	stw	r5,0(r19)
    fd->priv     = alt_fd_list[old].priv;
  8134d0:	99800115 	stw	r6,4(r19)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8134d4:	080c9580 	call	80c958 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  8134d8:	a809883a 	mov	r4,r21
  8134dc:	01400044 	movi	r5,1
  8134e0:	01807fc4 	movi	r6,511
  8134e4:	08135640 	call	813564 <open>
  8134e8:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8134ec:	1009883a 	mov	r4,r2
  8134f0:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8134f4:	10001216 	blt	r2,zero,813540 <alt_io_redirect+0x128>
  {
    fd->dev      = alt_fd_list[old].dev;
  8134f8:	0802b980 	call	802b98 <__mulsi3>
  8134fc:	1505883a 	add	r2,r2,r20
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813500:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813504:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813508:	11800117 	ldw	r6,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  81350c:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813510:	a0c00815 	stw	r3,32(r20)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  813514:	a1400615 	stw	r5,24(r20)
    fd->priv     = alt_fd_list[old].priv;
  813518:	a1800715 	stw	r6,28(r20)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  81351c:	dfc00617 	ldw	ra,24(sp)
  813520:	dd400517 	ldw	r21,20(sp)
  813524:	dd000417 	ldw	r20,16(sp)
  813528:	dcc00317 	ldw	r19,12(sp)
  81352c:	dc800217 	ldw	r18,8(sp)
  813530:	dc400117 	ldw	r17,4(sp)
  813534:	dc000017 	ldw	r16,0(sp)
  813538:	dec00704 	addi	sp,sp,28
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  81353c:	080c9581 	jmpi	80c958 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  813540:	dfc00617 	ldw	ra,24(sp)
  813544:	dd400517 	ldw	r21,20(sp)
  813548:	dd000417 	ldw	r20,16(sp)
  81354c:	dcc00317 	ldw	r19,12(sp)
  813550:	dc800217 	ldw	r18,8(sp)
  813554:	dc400117 	ldw	r17,4(sp)
  813558:	dc000017 	ldw	r16,0(sp)
  81355c:	dec00704 	addi	sp,sp,28
  813560:	f800283a 	ret

00813564 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813564:	defff904 	addi	sp,sp,-28
  813568:	dcc00315 	stw	r19,12(sp)
  81356c:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813570:	01402074 	movhi	r5,129
  813574:	2957c504 	addi	r5,r5,24340
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813578:	dd400515 	stw	r21,20(sp)
  81357c:	dd000415 	stw	r20,16(sp)
  813580:	dc400115 	stw	r17,4(sp)
  813584:	dfc00615 	stw	ra,24(sp)
  813588:	dc800215 	stw	r18,8(sp)
  81358c:	dc000015 	stw	r16,0(sp)
  813590:	302b883a 	mov	r21,r6
  813594:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813598:	08132540 	call	813254 <alt_find_dev>
  81359c:	1023883a 	mov	r17,r2
  8135a0:	10004a26 	beq	r2,zero,8136cc <open+0x168>
  8135a4:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  8135a8:	8809883a 	mov	r4,r17
  8135ac:	08138c40 	call	8138c4 <alt_get_fd>
  8135b0:	1021883a 	mov	r16,r2
  8135b4:	10003016 	blt	r2,zero,813678 <open+0x114>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  8135b8:	1009883a 	mov	r4,r2
  8135bc:	01400304 	movi	r5,12
  8135c0:	0802b980 	call	802b98 <__mulsi3>
  8135c4:	02002074 	movhi	r8,129
  8135c8:	42132504 	addi	r8,r8,19604
  8135cc:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8135d0:	00900034 	movhi	r2,16384
  8135d4:	10bfffc4 	addi	r2,r2,-1
  8135d8:	988a703a 	and	r5,r19,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8135dc:	9006c03a 	cmpne	r3,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8135e0:	21400215 	stw	r5,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8135e4:	1800131e 	bne	r3,zero,813634 <open+0xd0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8135e8:	00802074 	movhi	r2,129
  8135ec:	1097c704 	addi	r2,r2,24348
  8135f0:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8135f4:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8135f8:	28900034 	orhi	r2,r5,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8135fc:	0007883a 	mov	r3,zero
  813600:	400b883a 	mov	r5,r8

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813604:	20800215 	stw	r2,8(r4)
  813608:	00000206 	br	813614 <open+0xb0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81360c:	29400304 	addi	r5,r5,12
  813610:	38c00836 	bltu	r7,r3,813634 <open+0xd0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813614:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813618:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81361c:	11bffb1e 	bne	r2,r6,81360c <open+0xa8>
  813620:	28800217 	ldw	r2,8(r5)
  813624:	103ff90e 	bge	r2,zero,81360c <open+0xa8>
  813628:	293ff826 	beq	r5,r4,81360c <open+0xa8>
  81362c:	04400344 	movi	r17,13
  813630:	00001206 	br	81367c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813634:	88800317 	ldw	r2,12(r17)
  813638:	10000526 	beq	r2,zero,813650 <open+0xec>
  81363c:	a00b883a 	mov	r5,r20
  813640:	980d883a 	mov	r6,r19
  813644:	a80f883a 	mov	r7,r21
  813648:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81364c:	10001516 	blt	r2,zero,8136a4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
}
  813650:	8005883a 	mov	r2,r16
  813654:	dfc00617 	ldw	ra,24(sp)
  813658:	dd400517 	ldw	r21,20(sp)
  81365c:	dd000417 	ldw	r20,16(sp)
  813660:	dcc00317 	ldw	r19,12(sp)
  813664:	dc800217 	ldw	r18,8(sp)
  813668:	dc400117 	ldw	r17,4(sp)
  81366c:	dc000017 	ldw	r16,0(sp)
  813670:	dec00704 	addi	sp,sp,28
  813674:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  813678:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  81367c:	8009883a 	mov	r4,r16
  813680:	080c9580 	call	80c958 <alt_release_fd>
  813684:	00802074 	movhi	r2,129
  813688:	1097c804 	addi	r2,r2,24352
  81368c:	10800017 	ldw	r2,0(r2)
  813690:	10000b26 	beq	r2,zero,8136c0 <open+0x15c>
  813694:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  813698:	043fffc4 	movi	r16,-1
  81369c:	14400015 	stw	r17,0(r2)
  8136a0:	003feb06 	br	813650 <open+0xec>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  8136a4:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8136a8:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  8136ac:	080c9580 	call	80c958 <alt_release_fd>
  8136b0:	00802074 	movhi	r2,129
  8136b4:	1097c804 	addi	r2,r2,24352
  8136b8:	10800017 	ldw	r2,0(r2)
  8136bc:	103ff51e 	bne	r2,zero,813694 <open+0x130>
  8136c0:	00802074 	movhi	r2,129
  8136c4:	109f2604 	addi	r2,r2,31896
  8136c8:	003ff306 	br	813698 <open+0x134>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8136cc:	a009883a 	mov	r4,r20
  8136d0:	08138140 	call	813814 <alt_find_file>
  8136d4:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8136d8:	10000226 	beq	r2,zero,8136e4 <open+0x180>
  8136dc:	04800044 	movi	r18,1
  8136e0:	003fb106 	br	8135a8 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  8136e4:	043fffc4 	movi	r16,-1
  8136e8:	044004c4 	movi	r17,19
  8136ec:	003fe306 	br	81367c <open+0x118>

008136f0 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8136f0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8136f4:	00bfff84 	movi	r2,-2
  8136f8:	3084703a 	and	r2,r6,r2
  8136fc:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813700:	21400017 	ldw	r5,0(r4)
  813704:	20800117 	ldw	r2,4(r4)
  813708:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  81370c:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813710:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  813714:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  813718:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81371c:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  813720:	f800283a 	ret

00813724 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813724:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813728:	d0a78117 	ldw	r2,-25084(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81372c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  813730:	d4200e17 	ldw	r16,-32712(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813734:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813738:	10800044 	addi	r2,r2,1
  81373c:	d4a00e04 	addi	r18,gp,-32712
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  813740:	dfc00315 	stw	ra,12(sp)
  813744:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813748:	d0a78115 	stw	r2,-25084(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81374c:	84800d26 	beq	r16,r18,813784 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813750:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  813754:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813758:	10000326 	beq	r2,zero,813768 <alt_tick+0x44>
  81375c:	d0a78117 	ldw	r2,-25084(gp)
  813760:	1000011e 	bne	r2,zero,813768 <alt_tick+0x44>
    {
      alarm->rollover = 0;
  813764:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813768:	d0e78117 	ldw	r3,-25084(gp)
  81376c:	80800217 	ldw	r2,8(r16)
  813770:	18800236 	bltu	r3,r2,81377c <alt_tick+0x58>
  813774:	80800403 	ldbu	r2,16(r16)
  813778:	10000826 	beq	r2,zero,81379c <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  81377c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813780:	84bff31e 	bne	r16,r18,813750 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  813784:	dfc00317 	ldw	ra,12(sp)
  813788:	dc800217 	ldw	r18,8(sp)
  81378c:	dc400117 	ldw	r17,4(sp)
  813790:	dc000017 	ldw	r16,0(sp)
  813794:	dec00404 	addi	sp,sp,16
  813798:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  81379c:	81000517 	ldw	r4,20(r16)
  8137a0:	80c00317 	ldw	r3,12(r16)
  8137a4:	183ee83a 	callr	r3
  8137a8:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8137ac:	10000926 	beq	r2,zero,8137d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  8137b0:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8137b4:	d0e78117 	ldw	r3,-25084(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  8137b8:	2085883a 	add	r2,r4,r2
  8137bc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8137c0:	10ffee2e 	bgeu	r2,r3,81377c <alt_tick+0x58>
        {
          alarm->rollover = 1;
  8137c4:	00800044 	movi	r2,1
  8137c8:	80800405 	stb	r2,16(r16)
  8137cc:	8821883a 	mov	r16,r17
  8137d0:	003feb06 	br	813780 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137d8:	00bfff84 	movi	r2,-2
  8137dc:	2884703a 	and	r2,r5,r2
  8137e0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8137e4:	81000017 	ldw	r4,0(r16)
  8137e8:	80800117 	ldw	r2,4(r16)
  8137ec:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  8137f0:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8137f4:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  8137f8:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  8137fc:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813800:	2801703a 	wrctl	status,r5
  813804:	8821883a 	mov	r16,r17
  813808:	003fdd06 	br	813780 <alt_tick+0x5c>

0081380c <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  81380c:	000170fa 	wrctl	ienable,zero
}
  813810:	f800283a 	ret

00813814 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813814:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813818:	00802074 	movhi	r2,129
  81381c:	1097c304 	addi	r2,r2,24332
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813820:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813824:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813828:	dd000415 	stw	r20,16(sp)
  81382c:	dc800215 	stw	r18,8(sp)
  813830:	dfc00515 	stw	ra,20(sp)
  813834:	dcc00315 	stw	r19,12(sp)
  813838:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81383c:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813840:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813844:	80801526 	beq	r16,r2,81389c <alt_find_file+0x88>
  813848:	04c00bc4 	movi	r19,47
  81384c:	00000806 	br	813870 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813850:	3485883a 	add	r2,r6,r18
  813854:	10800007 	ldb	r2,0(r2)
  813858:	14c00126 	beq	r2,r19,813860 <alt_find_file+0x4c>
  81385c:	1000021e 	bne	r2,zero,813868 <alt_find_file+0x54>
  813860:	08139700 	call	813970 <memcmp>
  813864:	10000e26 	beq	r2,zero,8138a0 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  813868:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81386c:	85000b26 	beq	r16,r20,81389c <alt_find_file+0x88>
  {
    len = strlen(next->name);
  813870:	84400217 	ldw	r17,8(r16)
  813874:	8809883a 	mov	r4,r17
  813878:	0803e080 	call	803e08 <strlen>
  81387c:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  813880:	8885883a 	add	r2,r17,r2
  813884:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813888:	8809883a 	mov	r4,r17
  81388c:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  813890:	1cffef1e 	bne	r3,r19,813850 <alt_find_file+0x3c>
    {
      len -= 1;
  813894:	31bfffc4 	addi	r6,r6,-1
  813898:	003fed06 	br	813850 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81389c:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  8138a0:	8005883a 	mov	r2,r16
  8138a4:	dfc00517 	ldw	ra,20(sp)
  8138a8:	dd000417 	ldw	r20,16(sp)
  8138ac:	dcc00317 	ldw	r19,12(sp)
  8138b0:	dc800217 	ldw	r18,8(sp)
  8138b4:	dc400117 	ldw	r17,4(sp)
  8138b8:	dc000017 	ldw	r16,0(sp)
  8138bc:	dec00604 	addi	sp,sp,24
  8138c0:	f800283a 	ret

008138c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8138c4:	01402074 	movhi	r5,129
  8138c8:	29532504 	addi	r5,r5,19604
  8138cc:	0007883a 	mov	r3,zero
  8138d0:	01c00804 	movi	r7,32
  8138d4:	280d883a 	mov	r6,r5
  8138d8:	00000306 	br	8138e8 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8138dc:	18c00044 	addi	r3,r3,1
  8138e0:	31800304 	addi	r6,r6,12
  8138e4:	19c00d26 	beq	r3,r7,81391c <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  8138e8:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8138ec:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  8138f0:	103ffa1e 	bne	r2,zero,8138dc <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  8138f4:	01402074 	movhi	r5,129
  8138f8:	2957c704 	addi	r5,r5,24348
  8138fc:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  813900:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  813904:	10c0030e 	bge	r2,r3,813914 <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  813908:	1805883a 	mov	r2,r3
  81390c:	28c00015 	stw	r3,0(r5)
  813910:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  813914:	1805883a 	mov	r2,r3
  813918:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81391c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  813920:	f800283a 	ret

00813924 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  813924:	00840004 	movi	r2,4096
  813928:	2007883a 	mov	r3,r4
  81392c:	1140012e 	bgeu	r2,r5,813934 <alt_icache_flush+0x10>
  813930:	100b883a 	mov	r5,r2
  813934:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813938:	1940032e 	bgeu	r3,r5,813948 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81393c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813940:	18c00804 	addi	r3,r3,32
  813944:	197ffd36 	bltu	r3,r5,81393c <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813948:	208007cc 	andi	r2,r4,31
  81394c:	10000126 	beq	r2,zero,813954 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813950:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813954:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813958:	f800283a 	ret

0081395c <atexit>:
  81395c:	200b883a 	mov	r5,r4
  813960:	000d883a 	mov	r6,zero
  813964:	0009883a 	mov	r4,zero
  813968:	000f883a 	mov	r7,zero
  81396c:	08139e41 	jmpi	8139e4 <__register_exitproc>

00813970 <memcmp>:
  813970:	00c000c4 	movi	r3,3
  813974:	1980032e 	bgeu	r3,r6,813984 <memcmp+0x14>
  813978:	2144b03a 	or	r2,r4,r5
  81397c:	10c4703a 	and	r2,r2,r3
  813980:	10000f26 	beq	r2,zero,8139c0 <memcmp+0x50>
  813984:	31ffffc4 	addi	r7,r6,-1
  813988:	3000061e 	bne	r6,zero,8139a4 <memcmp+0x34>
  81398c:	00000a06 	br	8139b8 <memcmp+0x48>
  813990:	39ffffc4 	addi	r7,r7,-1
  813994:	00bfffc4 	movi	r2,-1
  813998:	21000044 	addi	r4,r4,1
  81399c:	29400044 	addi	r5,r5,1
  8139a0:	38800526 	beq	r7,r2,8139b8 <memcmp+0x48>
  8139a4:	20c00003 	ldbu	r3,0(r4)
  8139a8:	28800003 	ldbu	r2,0(r5)
  8139ac:	18bff826 	beq	r3,r2,813990 <memcmp+0x20>
  8139b0:	1885c83a 	sub	r2,r3,r2
  8139b4:	f800283a 	ret
  8139b8:	0005883a 	mov	r2,zero
  8139bc:	f800283a 	ret
  8139c0:	180f883a 	mov	r7,r3
  8139c4:	20c00017 	ldw	r3,0(r4)
  8139c8:	28800017 	ldw	r2,0(r5)
  8139cc:	18bfed1e 	bne	r3,r2,813984 <memcmp+0x14>
  8139d0:	31bfff04 	addi	r6,r6,-4
  8139d4:	21000104 	addi	r4,r4,4
  8139d8:	29400104 	addi	r5,r5,4
  8139dc:	39bff936 	bltu	r7,r6,8139c4 <memcmp+0x54>
  8139e0:	003fe806 	br	813984 <memcmp+0x14>

008139e4 <__register_exitproc>:
  8139e4:	defffa04 	addi	sp,sp,-24
  8139e8:	00802074 	movhi	r2,129
  8139ec:	1097be04 	addi	r2,r2,24312
  8139f0:	dc000015 	stw	r16,0(sp)
  8139f4:	14000017 	ldw	r16,0(r2)
  8139f8:	dd000415 	stw	r20,16(sp)
  8139fc:	2829883a 	mov	r20,r5
  813a00:	81405217 	ldw	r5,328(r16)
  813a04:	dcc00315 	stw	r19,12(sp)
  813a08:	dc800215 	stw	r18,8(sp)
  813a0c:	dc400115 	stw	r17,4(sp)
  813a10:	dfc00515 	stw	ra,20(sp)
  813a14:	2023883a 	mov	r17,r4
  813a18:	3027883a 	mov	r19,r6
  813a1c:	3825883a 	mov	r18,r7
  813a20:	28002526 	beq	r5,zero,813ab8 <__register_exitproc+0xd4>
  813a24:	29000117 	ldw	r4,4(r5)
  813a28:	008007c4 	movi	r2,31
  813a2c:	11002716 	blt	r2,r4,813acc <__register_exitproc+0xe8>
  813a30:	8800101e 	bne	r17,zero,813a74 <__register_exitproc+0x90>
  813a34:	2105883a 	add	r2,r4,r4
  813a38:	1085883a 	add	r2,r2,r2
  813a3c:	20c00044 	addi	r3,r4,1
  813a40:	1145883a 	add	r2,r2,r5
  813a44:	0009883a 	mov	r4,zero
  813a48:	15000215 	stw	r20,8(r2)
  813a4c:	28c00115 	stw	r3,4(r5)
  813a50:	2005883a 	mov	r2,r4
  813a54:	dfc00517 	ldw	ra,20(sp)
  813a58:	dd000417 	ldw	r20,16(sp)
  813a5c:	dcc00317 	ldw	r19,12(sp)
  813a60:	dc800217 	ldw	r18,8(sp)
  813a64:	dc400117 	ldw	r17,4(sp)
  813a68:	dc000017 	ldw	r16,0(sp)
  813a6c:	dec00604 	addi	sp,sp,24
  813a70:	f800283a 	ret
  813a74:	29802204 	addi	r6,r5,136
  813a78:	00800044 	movi	r2,1
  813a7c:	110e983a 	sll	r7,r2,r4
  813a80:	30c04017 	ldw	r3,256(r6)
  813a84:	2105883a 	add	r2,r4,r4
  813a88:	1085883a 	add	r2,r2,r2
  813a8c:	1185883a 	add	r2,r2,r6
  813a90:	19c6b03a 	or	r3,r3,r7
  813a94:	14802015 	stw	r18,128(r2)
  813a98:	14c00015 	stw	r19,0(r2)
  813a9c:	00800084 	movi	r2,2
  813aa0:	30c04015 	stw	r3,256(r6)
  813aa4:	88bfe31e 	bne	r17,r2,813a34 <__register_exitproc+0x50>
  813aa8:	30804117 	ldw	r2,260(r6)
  813aac:	11c4b03a 	or	r2,r2,r7
  813ab0:	30804115 	stw	r2,260(r6)
  813ab4:	003fdf06 	br	813a34 <__register_exitproc+0x50>
  813ab8:	008020b4 	movhi	r2,130
  813abc:	10a0e304 	addi	r2,r2,-31860
  813ac0:	100b883a 	mov	r5,r2
  813ac4:	80805215 	stw	r2,328(r16)
  813ac8:	003fd606 	br	813a24 <__register_exitproc+0x40>
  813acc:	00802034 	movhi	r2,128
  813ad0:	108cff04 	addi	r2,r2,13308
  813ad4:	1000021e 	bne	r2,zero,813ae0 <__register_exitproc+0xfc>
  813ad8:	013fffc4 	movi	r4,-1
  813adc:	003fdc06 	br	813a50 <__register_exitproc+0x6c>
  813ae0:	01006404 	movi	r4,400
  813ae4:	103ee83a 	callr	r2
  813ae8:	1007883a 	mov	r3,r2
  813aec:	103ffa26 	beq	r2,zero,813ad8 <__register_exitproc+0xf4>
  813af0:	80805217 	ldw	r2,328(r16)
  813af4:	180b883a 	mov	r5,r3
  813af8:	18000115 	stw	zero,4(r3)
  813afc:	18800015 	stw	r2,0(r3)
  813b00:	80c05215 	stw	r3,328(r16)
  813b04:	18006215 	stw	zero,392(r3)
  813b08:	18006315 	stw	zero,396(r3)
  813b0c:	0009883a 	mov	r4,zero
  813b10:	883fc826 	beq	r17,zero,813a34 <__register_exitproc+0x50>
  813b14:	003fd706 	br	813a74 <__register_exitproc+0x90>
  813b18:	00000010 	cmplti	zero,zero,0
  813b1c:	00000000 	call	0 <__reset-0x800000>
  813b20:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  813b24:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  813b28:	001b0c0b 	ldhu	zero,27696(zero)
  813b2c:	00000028 	cmpgeui	zero,zero,0
  813b30:	00000018 	cmpnei	zero,zero,0
  813b34:	0080af98 	cmpnei	r2,zero,702
  813b38:	0000066c 	andhi	zero,zero,25
  813b3c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  813b40:	910a9074 	orhi	r4,r18,10817
  813b44:	94089209 	0x94089209
  813b48:	97049606 	br	814da4 <alt_fd_list+0x110>
  813b4c:	93019f03 	ldbu	r12,1660(r18)
  813b50:	9c059507 	ldb	r16,5716(r19)
  813b54:	00000002 	0x2
  813b58:	00000028 	cmpgeui	zero,zero,0
  813b5c:	00000044 	movi	zero,1
  813b60:	0080b604 	movi	r2,728
  813b64:	00000660 	cmpeqi	zero,zero,25
  813b68:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  813b6c:	92099170 	cmpltui	r8,r18,9797
  813b70:	96069408 	cmpgei	et,r18,6736
  813b74:	9c039704 	addi	r16,r19,3676
  813b78:	90019f02 	0x90019f02
  813b7c:	9507930a 	0x9507930a
  813b80:	00000005 	stb	zero,0(zero)
  813b84:	00805ef8 	rdprs	r2,zero,379
