
multi_test_0.elf:     file format elf32-littlenios2
multi_test_0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008003b4

Program Header:
    LOAD off    0x00000000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000220 memsz 0x00000220 flags r-x
    LOAD off    0x00000220 vaddr 0x00800220 paddr 0x00800220 align 2**12
         filesz 0x0000fd08 memsz 0x0000fd08 flags r-x
    LOAD off    0x0000ff28 vaddr 0x0080ff28 paddr 0x00811c8c align 2**12
         filesz 0x00001d64 memsz 0x00001d64 flags rw-
    LOAD off    0x000129f0 vaddr 0x008139f0 paddr 0x008139f0 align 2**12
         filesz 0x00000000 memsz 0x00000308 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800200  00800200  00000200  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800220  00800220  00000220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f6d4  008003b4  008003b4  000003b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004a0  0080fa88  0080fa88  0000fa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d64  0080ff28  00811c8c  0000ff28  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  008139f0  008139f0  000129f0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011c8c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  00011cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001902  00000000  00000000  00012a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027f4e  00000000  00000000  0001436a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000880e  00000000  00000000  0003c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00017033  00000000  00000000  00044ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d90  00000000  00000000  0005bafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000278c  00000000  00000000  0005d88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cf80  00000000  00000000  00060018  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006cf98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b68  00000000  00000000  0006cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000713ae  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000713b1  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000713b6  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000713b7  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000713bb  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000713bf  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000713c3  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000713ce  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000713d9  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  000713e4  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  000713eb  2**0
                  CONTENTS, READONLY
 28 .jdi          000082e5  00000000  00000000  00071407  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800200 l    d  .entry	00000000 .entry
00800220 l    d  .exceptions	00000000 .exceptions
008003b4 l    d  .text	00000000 .text
0080fa88 l    d  .rodata	00000000 .rodata
0080ff28 l    d  .rwdata	00000000 .rwdata
008139f0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008003fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 hello_world.c
00801124 l     F .text	00000060 timer0_ISR
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00810128 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
00801500 l     F .text	00000058 __sprint_r
0080fb8e l     O .rodata	00000010 blanks.3452
0080fb7e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00803564 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00803718 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805114 l     F .text	00000058 std
00805220 l     F .text	00000008 __fp_lock
00805228 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00811c48 l     O .rwdata	00000004 charset
0080fbc0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080fd08 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00809760 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080a88c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080b100 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080b1a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080b1d0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0080b304 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080b5e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080b6c4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080b820 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ba4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811c70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080bce8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810ae4 l     O .rwdata	00001060 jtag_uart_0
00811b44 l     O .rwdata	0000003c mailbox_0
00811b80 l     O .rwdata	0000003c mailbox_1
00811bbc l     O .rwdata	00000054 video_pixel_buffer_dma_0
00811c10 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0080bff4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080c234 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080c45c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0080cc30 l     F .text	0000006c alt_avalon_mutex_reg
0080cc9c l     F .text	00000060 alt_get_errno
0080ce30 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0080d000 l     F .text	0000007c alt_mutex_trylock
0080d0d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d304 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080eb78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f030 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0080f16c l     F .text	000000dc alt_file_locked
0080f3d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
008014dc g     F .text	0000001c putchar
00806ed0 g     F .text	00000094 _mprec_log10
00806fbc g     F .text	00000088 __any_on
00808a74 g     F .text	00000070 _isatty_r
0080fce0 g     O .rodata	00000028 __mprec_tinytens
0080b880 g     F .text	0000006c alt_main
0080ce80 g     F .text	000000a8 altera_avalon_mailbox_pend
0080e070 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00813a68 g     O .bss	00000100 alt_irq
00808ae4 g     F .text	00000078 _lseek_r
00800f84 g     F .text	00000144 ycbcr_to_rgb
00811c8c g       *ABS*	00000000 __flash_rwdata_start
0080a280 g     F .text	00000088 __eqdf2
00813cf8 g       *ABS*	00000000 __alt_heap_start
0080cf28 g     F .text	000000d8 altera_avalon_mailbox_get
00801464 g     F .text	00000044 printf
0080ff28 g     O .rwdata	00000080 Yquant
00808380 g     F .text	00000068 __sseek
0080517c g     F .text	000000a4 __sinit
008085f4 g     F .text	00000130 __swbuf_r
00805e54 g     F .text	00000084 _setlocale_r
0080527c g     F .text	00000068 __sfmoreglue
0080b90c g     F .text	00000020 __malloc_unlock
0080694c g     F .text	000000e0 memmove
0080526c g     F .text	00000010 _cleanup
0080d194 g     F .text	00000040 altera_avalon_mutex_trylock
00807044 g     F .text	000000bc _Balloc
0080d444 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0080a390 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080d404 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00800200 g     F .entry	0000001c __reset
0080d230 g     F .text	0000007c altera_avalon_mutex_is_mine
00800220 g       *ABS*	00000000 __flash_exceptions_start
00808a00 g     F .text	00000074 _fstat_r
00813a0c g     O .bss	00000004 errno
00813a30 g     O .bss	00000004 alt_argv
00819c3c g       *ABS*	00000000 _gp
0080d5e4 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00810964 g     O .rwdata	00000180 alt_fd_list
008014f8 g     F .text	00000008 _putchar_r
0080eca0 g     F .text	00000094 alt_find_dev
008068ac g     F .text	000000a0 memcpy
00805260 g     F .text	0000000c _cleanup_r
0080a528 g     F .text	000000f8 __floatsidf
0080f0f4 g     F .text	00000078 alt_io_redirect
0080a4a0 g     F .text	00000088 __ltdf2
0080fa88 g       *ABS*	00000000 __DTOR_END__
0080f5d4 g     F .text	00000020 altera_nios2_irq_init
00806e20 g     F .text	000000b0 __ratio
0080cd74 g     F .text	000000bc altera_avalon_mailbox_post
0080d694 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080c674 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008014a8 g     F .text	00000034 _printf_r
00800b3c g     F .text	00000448 lossless_decode
0080a9c8 g     F .text	00000008 __udivsi3
0080b524 g     F .text	000000c0 isatty
0080fbf0 g     O .rodata	000000c8 __mprec_tens
0080cd54 g     F .text	00000020 altera_avalon_mailbox_close
0080dd20 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00805e30 g     F .text	00000008 __locale_charset
0080f7cc g     F .text	00000090 alt_icache_flush
00813a1c g     O .bss	00000004 __malloc_top_pad
008139f0 g     O .bss	00000004 flag
00811c44 g     O .rwdata	00000004 __mb_cur_max
00805e38 g     F .text	0000000c _localeconv_r
0080773c g     F .text	0000003c __i2b
00805814 g     F .text	0000049c __sfvwrite_r
00808308 g     F .text	00000070 _sbrk_r
0080e504 g     F .text	000000d0 helper_plot_pixel
00808b5c g     F .text	00000078 _read_r
00810528 g     O .rwdata	0000000c __lc_ctype
00811c64 g     O .rwdata	00000004 alt_max_fd
0080ae04 g     F .text	00000138 __unpack_d
008088dc g     F .text	00000110 _fclose_r
008050e0 g     F .text	00000034 fflush
00813a20 g     O .bss	00000004 __malloc_max_sbrked_mem
0080b364 g     F .text	000001c0 alt_irq_register
00809bf0 g     F .text	00000074 __adddf3
00806d00 g     F .text	00000120 __b2d
0080d6c8 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
008091b0 g     F .text	000005b0 __umoddi3
0080b730 g     F .text	000000f0 lseek
0080d2ac g     F .text	00000058 altera_avalon_mutex_first_lock
00800400 g     F .text	000000bc print_dct
00811c40 g     O .rwdata	00000004 _global_impure_ptr
00807ca4 g     F .text	000005f4 _realloc_r
00813cf8 g       *ABS*	00000000 __bss_end
0080ef38 g     F .text	000000f8 alt_iic_isr_register
0080d82c g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0080f4c8 g     F .text	0000010c alt_tick
00808bd4 g     F .text	000005dc __udivdi3
0080fcb8 g     O .rodata	00000028 __mprec_bigtens
00807998 g     F .text	00000120 __s2b
0080a6f8 g     F .text	00000194 __floatunsidf
00806c20 g     F .text	00000060 __mcmp
00805248 g     F .text	00000018 __fp_lock_all
0080eef0 g     F .text	00000048 alt_ic_irq_enabled
0080f430 g     F .text	00000098 alt_alarm_stop
00800ac0 g     F .text	0000007c input_AC
00813a28 g     O .bss	00000004 alt_irq_active
008002ec g     F .exceptions	000000c8 alt_irq_handler
0081093c g     O .rwdata	00000028 alt_dev_null
0080d07c g     F .text	00000058 altera_avalon_mutex_open
0080b160 g     F .text	00000044 alt_dcache_flush_all
00806aec g     F .text	00000070 __hi0bits
0080e440 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080a620 g     F .text	000000d8 __fixdfsi
00811c8c g       *ABS*	00000000 __ram_rwdata_end
00811c5c g     O .rwdata	00000008 alt_dev_list
0080bbc8 g     F .text	00000120 write
00807bbc g     F .text	000000e8 _putc_r
0080e5d4 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00811c7c g     O .rwdata	00000008 alt_mutex_list
0080ff28 g       *ABS*	00000000 __ram_rodata_end
0080b230 g     F .text	000000d4 fstat
008139f8 g     O .bss	00000004 playing
00807878 g     F .text	00000120 __pow5mult
00813a10 g     O .bss	00000004 __nlocale_changed
0080a9d0 g     F .text	00000008 __umodsi3
00813cf8 g       *ABS*	00000000 end
0080c174 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080fa84 g       *ABS*	00000000 __CTOR_LIST__
00820200 g       *ABS*	00000000 __alt_stack_pointer
0080d374 g     F .text	00000090 alt_avalon_timer_sc_init
0080aa70 g     F .text	00000080 __clzsi2
0080c898 g     F .text	00000240 altera_avalon_jtag_uart_write
0080cad8 g     F .text	00000158 alt_avalon_mailbox_init
0080516c g     F .text	00000004 __sfp_lock_acquire
008067c8 g     F .text	000000e4 memchr
00801558 g     F .text	00001eac ___vfprintf_internal_r
00805500 g     F .text	00000314 _free_r
00803568 g     F .text	000001b0 __call_exitprocs
00813a14 g     O .bss	00000004 __mlocale_changed
00811c50 g     O .rwdata	00000004 __malloc_sbrk_base
008003b4 g     F .text	0000004c _start
00813a38 g     O .bss	00000004 _alt_tick_rate
008004bc g     F .text	000000c4 print_block
00800580 g     F .text	00000108 print_bitstream
00807408 g     F .text	0000014c __lshift
00813a3c g     O .bss	00000004 _alt_nticks
0080b92c g     F .text	00000120 read
0080bd7c g     F .text	00000278 alt_sys_init
0080f8e4 g     F .text	00000134 __register_exitproc
0080d1d4 g     F .text	0000005c altera_avalon_mutex_unlock
00807554 g     F .text	000001e8 __multiply
0080c50c g     F .text	00000074 altera_avalon_jtag_uart_close
0080ff28 g       *ABS*	00000000 __ram_rwdata_start
0080fa88 g       *ABS*	00000000 __ram_rodata_start
00813a40 g     O .bss	00000028 __malloc_current_mallinfo
00807100 g     F .text	0000017c __d2b
0080c02c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080f714 g     F .text	000000b8 alt_get_fd
0080af3c g     F .text	000000c8 __fpcmp_parts_d
0080886c g     F .text	00000070 _close_r
0080f870 g     F .text	00000074 memcmp
0080c0dc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00813cf8 g       *ABS*	00000000 __alt_stack_base
0080c124 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008006a8 g     F .text	000002e8 idct
00803428 g     F .text	0000013c __swsetup_r
0080a028 g     F .text	00000258 __divdf3
008052e4 g     F .text	000000f0 __sfp
00806f64 g     F .text	00000058 __copybits
00810534 g     O .rwdata	00000408 __malloc_av_
00805178 g     F .text	00000004 __sinit_lock_release
00809c64 g     F .text	000003c4 __muldf3
00808464 g     F .text	00000060 __sread
008139f4 g     O .bss	00000004 counter
008139fc g     O .bss	00000004 backward
0080f5f4 g     F .text	00000120 alt_find_file
0080eac4 g     F .text	000000b4 alt_dev_llist_insert
0080b8ec g     F .text	00000020 __malloc_lock
0080bb0c g     F .text	000000bc sbrk
00804ee4 g     F .text	000001fc _fflush_r
008087b8 g     F .text	000000b4 _calloc_r
00800a4c g     F .text	00000074 input_DC
008139f0 g       *ABS*	00000000 __bss_start
00806a2c g     F .text	00000098 memset
008010c8 g     F .text	0000005c initTimer
00801184 g     F .text	000002a8 main
00813a34 g     O .bss	00000004 alt_envp
00813a24 g     O .bss	00000004 __malloc_max_total_mem
0080d63c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080c084 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00808724 g     F .text	0000001c __swbuf
00808378 g     F .text	00000008 __sclose
00820200 g       *ABS*	00000000 __alt_heap_limit
008089ec g     F .text	00000014 fclose
00813b68 g     O .bss	00000190 _atexit0
0080d154 g     F .text	00000040 altera_avalon_mutex_lock
00803930 g     F .text	000015b4 _dtoa_r
00806088 g     F .text	00000740 _malloc_r
00811c68 g     O .rwdata	00000004 alt_errno
00805d78 g     F .text	000000b8 _fwalk
00813a00 g     O .bss	00000004 fastForward
00807ab8 g     F .text	00000104 putc
0080a908 g     F .text	00000060 __divsi3
0080fd14 g     O .rodata	00000014 __thenan_df
008053d4 g     F .text	0000012c _malloc_trim_r
0080fa88 g       *ABS*	00000000 __CTOR_END__
008084c4 g     F .text	000000bc strcmp
0080fa88 g       *ABS*	00000000 __flash_rodata_start
0080fa88 g       *ABS*	00000000 __DTOR_LIST__
0080a308 g     F .text	00000088 __nedf2
0080bd48 g     F .text	00000034 alt_irq_init
0080baac g     F .text	00000060 alt_release_fd
0080fd28 g     O .rodata	00000100 __clz_tab
00813a18 g     O .bss	00000004 _PathLocale
0080f85c g     F .text	00000014 atexit
00808740 g     F .text	00000078 _write_r
00805ed8 g     F .text	0000001c setlocale
00811c3c g     O .rwdata	00000004 _impure_ptr
00813a2c g     O .bss	00000004 alt_argc
0080ec3c g     F .text	00000064 _do_dtors
00810028 g     O .rwdata	00000100 zigzag_table
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800220 g       .exceptions	00000000 alt_irq_entry
00800688 g     F .text	00000020 error_and_exit
00806c80 g     F .text	00000080 __ulp
00808298 g     F .text	00000040 __isinfd
00805230 g     F .text	00000018 __fp_unlock_all
00811c74 g     O .rwdata	00000008 alt_mailbox_list
00811c54 g     O .rwdata	00000008 alt_fs_list
00800220 g       *ABS*	00000000 __ram_exceptions_start
00805e44 g     F .text	00000010 localeconv
0080ed64 g     F .text	00000050 alt_ic_isr_register
00811c8c g       *ABS*	00000000 _edata
00800990 g     F .text	000000bc update_buffer
00813cf8 g       *ABS*	00000000 _end
008003b4 g       *ABS*	00000000 __ram_exceptions_end
0080c580 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00813a04 g     O .bss	00000004 getNextFile
0080ee50 g     F .text	000000a0 alt_ic_irq_disable
008083e8 g     F .text	0000007c __swrite
00811c4c g     O .rwdata	00000004 __malloc_trim_threshold
0080142c g     F .text	00000038 exit
00805cb0 g     F .text	000000c8 _fwalk_reent
0080727c g     F .text	0000018c __mdiff
0080a968 g     F .text	00000060 __modsi3
00820200 g       *ABS*	00000000 __alt_data_end
00800220 g     F .exceptions	00000000 alt_exception
00805170 g     F .text	00000004 __sfp_lock_release
0080ccfc g     F .text	00000058 altera_avalon_mailbox_open
008082d8 g     F .text	00000030 __isnand
0080b210 g     F .text	00000020 _exit
0080e970 g     F .text	00000154 alt_alarm_start
0080a9d8 g     F .text	00000098 __muldi3
00813a08 g     O .bss	00000004 pixel_buf_dev
00805ef4 g     F .text	00000194 __smakebuf_r
00808580 g     F .text	00000074 strlen
0080f248 g     F .text	00000188 open
0080a418 g     F .text	00000088 __gedf2
0080ed34 g     F .text	00000030 alt_icache_flush_all
00811c6c g     O .rwdata	00000004 alt_priority_mask
0080ffa8 g     O .rwdata	00000080 Cquant
0080edb4 g     F .text	0000009c alt_ic_irq_enable
00803404 g     F .text	00000024 __vfprintf_internal
0080d134 g     F .text	00000020 altera_avalon_mutex_close
00809b70 g     F .text	00000080 __subdf3
00806b5c g     F .text	000000c4 __lo0bits
00811c84 g     O .rwdata	00000008 alt_alarm_list
0080ebd8 g     F .text	00000064 _do_ctors
0080b004 g     F .text	000000fc close
0080b644 g     F .text	00000080 alt_load
0080aaf0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00805174 g     F .text	00000004 __sinit_lock_acquire
00807778 g     F .text	00000100 __multadd
00806ac4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800200 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800200:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800204:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800208:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80020c:	00bffd16 	blt	zero,r2,800204 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800210:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800214:	0840ed14 	ori	at,at,948
    jmp r1
  800218:	0800683a 	jmp	at
  80021c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800220 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800220:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800224:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800228:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80022c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800230:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800234:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800238:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80023c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800240:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800244:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800248:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80024c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800250:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800254:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800258:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80025c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800260:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800264:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800268:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80026c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800270:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800274:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800278:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80027c:	10000326 	beq	r2,zero,80028c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800280:	20000226 	beq	r4,zero,80028c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800284:	08002ec0 	call	8002ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800288:	00000306 	br	800298 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80028c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800290:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800294:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800298:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80029c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8002a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8002a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8002a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8002ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8002b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8002b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8002b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8002bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8002c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8002c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8002c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8002cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8002d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8002d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8002d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8002dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8002e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8002e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8002e8:	ef80083a 	eret

008002ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8002ec:	defff904 	addi	sp,sp,-28
  8002f0:	dfc00615 	stw	ra,24(sp)
  8002f4:	df000515 	stw	fp,20(sp)
  8002f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8002fc:	0005313a 	rdctl	r2,ipending
  800300:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800304:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800308:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80030c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800310:	00800044 	movi	r2,1
  800314:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800318:	e0ffff17 	ldw	r3,-4(fp)
  80031c:	e0bffe17 	ldw	r2,-8(fp)
  800320:	1884703a 	and	r2,r3,r2
  800324:	1005003a 	cmpeq	r2,r2,zero
  800328:	1000161e 	bne	r2,zero,800384 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80032c:	e0bffd17 	ldw	r2,-12(fp)
  800330:	00c02074 	movhi	r3,129
  800334:	18ce9a04 	addi	r3,r3,14952
  800338:	100490fa 	slli	r2,r2,3
  80033c:	10c5883a 	add	r2,r2,r3
  800340:	11400017 	ldw	r5,0(r2)
  800344:	e0bffd17 	ldw	r2,-12(fp)
  800348:	00c02074 	movhi	r3,129
  80034c:	18ce9a04 	addi	r3,r3,14952
  800350:	100490fa 	slli	r2,r2,3
  800354:	10c5883a 	add	r2,r2,r3
  800358:	10800104 	addi	r2,r2,4
  80035c:	11000017 	ldw	r4,0(r2)
  800360:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800364:	0005313a 	rdctl	r2,ipending
  800368:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80036c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800370:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	1004c03a 	cmpne	r2,r2,zero
  80037c:	103fe31e 	bne	r2,zero,80030c <alt_irq_handler+0x20>
  800380:	00000706 	br	8003a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800384:	e0bffe17 	ldw	r2,-8(fp)
  800388:	1085883a 	add	r2,r2,r2
  80038c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800390:	e0bffd17 	ldw	r2,-12(fp)
  800394:	10800044 	addi	r2,r2,1
  800398:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80039c:	003fde06 	br	800318 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8003a0:	e037883a 	mov	sp,fp
  8003a4:	dfc00117 	ldw	ra,4(sp)
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00204 	addi	sp,sp,8
  8003b0:	f800283a 	ret

Disassembly of section .text:

008003b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8003b4:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
  8003b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8003bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8003c0:	00bffd16 	blt	zero,r2,8003b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8003c4:	06c020b4 	movhi	sp,130
    ori sp, sp, %lo(__alt_stack_pointer)
  8003c8:	dec08014 	ori	sp,sp,512

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8003cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8003d0:	d6a70f14 	ori	gp,gp,39996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8003d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8003d8:	108e7c14 	ori	r2,r2,14832

    movhi r3, %hi(__bss_end)
  8003dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8003e0:	18cf3e14 	ori	r3,r3,15608

    beq r2, r3, 1f
  8003e4:	10c00326 	beq	r2,r3,8003f4 <_start+0x40>

0:
    stw zero, (r2)
  8003e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8003ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8003f0:	10fffd36 	bltu	r2,r3,8003e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8003f4:	080b6440 	call	80b644 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8003f8:	080b8800 	call	80b880 <alt_main>

008003fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8003fc:	003fff06 	br	8003fc <alt_after_alt_main>

00800400 <print_dct>:
            else printf("%u\n", b[row][column]);
        } 
}

void print_dct(pdct_block_t b)
{
  800400:	defffd04 	addi	sp,sp,-12
  800404:	dc400115 	stw	r17,4(sp)
  800408:	dc000015 	stw	r16,0(sp)
  80040c:	dfc00215 	stw	ra,8(sp)
  800410:	2021883a 	mov	r16,r4
  800414:	0023883a 	mov	r17,zero
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  800418:	8140000f 	ldh	r5,0(r16)
  80041c:	01002074 	movhi	r4,129
  800420:	213ea204 	addi	r4,r4,-1400
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800424:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  800428:	08014640 	call	801464 <printf>
  80042c:	8140008f 	ldh	r5,2(r16)
  800430:	01002074 	movhi	r4,129
  800434:	213ea204 	addi	r4,r4,-1400
  800438:	08014640 	call	801464 <printf>
  80043c:	8140010f 	ldh	r5,4(r16)
  800440:	01002074 	movhi	r4,129
  800444:	213ea204 	addi	r4,r4,-1400
  800448:	08014640 	call	801464 <printf>
  80044c:	8140018f 	ldh	r5,6(r16)
  800450:	01002074 	movhi	r4,129
  800454:	213ea204 	addi	r4,r4,-1400
  800458:	08014640 	call	801464 <printf>
  80045c:	8140020f 	ldh	r5,8(r16)
  800460:	01002074 	movhi	r4,129
  800464:	213ea204 	addi	r4,r4,-1400
  800468:	08014640 	call	801464 <printf>
  80046c:	8140028f 	ldh	r5,10(r16)
  800470:	01002074 	movhi	r4,129
  800474:	213ea204 	addi	r4,r4,-1400
  800478:	08014640 	call	801464 <printf>
  80047c:	8140030f 	ldh	r5,12(r16)
  800480:	01002074 	movhi	r4,129
  800484:	213ea204 	addi	r4,r4,-1400
  800488:	08014640 	call	801464 <printf>
            else printf("%d\n", b[row][column]);
  80048c:	8140038f 	ldh	r5,14(r16)
  800490:	01002074 	movhi	r4,129
  800494:	213ea304 	addi	r4,r4,-1396
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  800498:	84000404 	addi	r16,r16,16
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
  80049c:	08014640 	call	801464 <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
  8004a0:	00c00204 	movi	r3,8
  8004a4:	88ffdc1e 	bne	r17,r3,800418 <print_dct+0x18>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
  8004a8:	dfc00217 	ldw	ra,8(sp)
  8004ac:	dc400117 	ldw	r17,4(sp)
  8004b0:	dc000017 	ldw	r16,0(sp)
  8004b4:	dec00304 	addi	sp,sp,12
  8004b8:	f800283a 	ret

008004bc <print_block>:
    printf("Error: %s\n", str);
    exit(-1);
}

void print_block(pcolor_block_t b)
{
  8004bc:	defffc04 	addi	sp,sp,-16
  8004c0:	dc800215 	stw	r18,8(sp)
  8004c4:	dc400115 	stw	r17,4(sp)
  8004c8:	dc000015 	stw	r16,0(sp)
  8004cc:	dfc00315 	stw	ra,12(sp)
  8004d0:	2021883a 	mov	r16,r4
  8004d4:	0023883a 	mov	r17,zero
  8004d8:	04800204 	movi	r18,8
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8004dc:	81400003 	ldbu	r5,0(r16)
  8004e0:	01002074 	movhi	r4,129
  8004e4:	213ea204 	addi	r4,r4,-1400
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  8004e8:	8c400044 	addi	r17,r17,1
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
  8004ec:	08014640 	call	801464 <printf>
  8004f0:	81400043 	ldbu	r5,1(r16)
  8004f4:	01002074 	movhi	r4,129
  8004f8:	213ea204 	addi	r4,r4,-1400
  8004fc:	08014640 	call	801464 <printf>
  800500:	81400083 	ldbu	r5,2(r16)
  800504:	01002074 	movhi	r4,129
  800508:	213ea204 	addi	r4,r4,-1400
  80050c:	08014640 	call	801464 <printf>
  800510:	814000c3 	ldbu	r5,3(r16)
  800514:	01002074 	movhi	r4,129
  800518:	213ea204 	addi	r4,r4,-1400
  80051c:	08014640 	call	801464 <printf>
  800520:	81400103 	ldbu	r5,4(r16)
  800524:	01002074 	movhi	r4,129
  800528:	213ea204 	addi	r4,r4,-1400
  80052c:	08014640 	call	801464 <printf>
  800530:	81400143 	ldbu	r5,5(r16)
  800534:	01002074 	movhi	r4,129
  800538:	213ea204 	addi	r4,r4,-1400
  80053c:	08014640 	call	801464 <printf>
  800540:	81400183 	ldbu	r5,6(r16)
  800544:	01002074 	movhi	r4,129
  800548:	213ea204 	addi	r4,r4,-1400
  80054c:	08014640 	call	801464 <printf>
            else printf("%u\n", b[row][column]);
  800550:	814001c3 	ldbu	r5,7(r16)
  800554:	01002074 	movhi	r4,129
  800558:	213ea404 	addi	r4,r4,-1392
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  80055c:	84000204 	addi	r16,r16,8
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
  800560:	08014640 	call	801464 <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
  800564:	8cbfdd1e 	bne	r17,r18,8004dc <print_block+0x20>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
  800568:	dfc00317 	ldw	ra,12(sp)
  80056c:	dc800217 	ldw	r18,8(sp)
  800570:	dc400117 	ldw	r17,4(sp)
  800574:	dc000017 	ldw	r16,0(sp)
  800578:	dec00404 	addi	sp,sp,16
  80057c:	f800283a 	ret

00800580 <print_bitstream>:
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
  800580:	defffd04 	addi	sp,sp,-12
  800584:	dfc00215 	stw	ra,8(sp)
  800588:	dc400115 	stw	r17,4(sp)
  80058c:	dc000015 	stw	r16,0(sp)
    for (int index = 0; index < num_bytes; index++)
  800590:	0100370e 	bge	zero,r4,800670 <print_bitstream+0xf0>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800594:	2821883a 	mov	r16,r5
  800598:	2923883a 	add	r17,r5,r4

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
  80059c:	81400003 	ldbu	r5,0(r16)
  8005a0:	01002074 	movhi	r4,129
  8005a4:	213ea504 	addi	r4,r4,-1388
  8005a8:	280ad1fa 	srli	r5,r5,7
  8005ac:	08014640 	call	801464 <printf>
  8005b0:	81400003 	ldbu	r5,0(r16)
  8005b4:	01002074 	movhi	r4,129
  8005b8:	213ea504 	addi	r4,r4,-1388
  8005bc:	294b883a 	add	r5,r5,r5
  8005c0:	29403fcc 	andi	r5,r5,255
  8005c4:	280ad1fa 	srli	r5,r5,7
  8005c8:	08014640 	call	801464 <printf>
  8005cc:	81400003 	ldbu	r5,0(r16)
  8005d0:	01002074 	movhi	r4,129
  8005d4:	213ea504 	addi	r4,r4,-1388
  8005d8:	294b883a 	add	r5,r5,r5
  8005dc:	294b883a 	add	r5,r5,r5
  8005e0:	29403fcc 	andi	r5,r5,255
  8005e4:	280ad1fa 	srli	r5,r5,7
  8005e8:	08014640 	call	801464 <printf>
  8005ec:	81400003 	ldbu	r5,0(r16)
  8005f0:	01002074 	movhi	r4,129
  8005f4:	213ea504 	addi	r4,r4,-1388
  8005f8:	280ad13a 	srli	r5,r5,4
  8005fc:	2940004c 	andi	r5,r5,1
  800600:	08014640 	call	801464 <printf>
  800604:	81400003 	ldbu	r5,0(r16)
  800608:	01002074 	movhi	r4,129
  80060c:	213ea504 	addi	r4,r4,-1388
  800610:	280ad0fa 	srli	r5,r5,3
  800614:	2940004c 	andi	r5,r5,1
  800618:	08014640 	call	801464 <printf>
  80061c:	81400003 	ldbu	r5,0(r16)
  800620:	01002074 	movhi	r4,129
  800624:	213ea504 	addi	r4,r4,-1388
  800628:	280ad0ba 	srli	r5,r5,2
  80062c:	2940004c 	andi	r5,r5,1
  800630:	08014640 	call	801464 <printf>
  800634:	81400003 	ldbu	r5,0(r16)
  800638:	01002074 	movhi	r4,129
  80063c:	213ea504 	addi	r4,r4,-1388
  800640:	280ad07a 	srli	r5,r5,1
  800644:	2940004c 	andi	r5,r5,1
  800648:	08014640 	call	801464 <printf>
  80064c:	81400003 	ldbu	r5,0(r16)
  800650:	01002074 	movhi	r4,129
  800654:	213ea504 	addi	r4,r4,-1388
  800658:	84000044 	addi	r16,r16,1
  80065c:	280a91fa 	slli	r5,r5,7
  800660:	29403fcc 	andi	r5,r5,255
  800664:	280ac03a 	cmpne	r5,r5,zero
  800668:	08014640 	call	801464 <printf>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
  80066c:	8c3fcb1e 	bne	r17,r16,80059c <print_bitstream+0x1c>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800670:	01000284 	movi	r4,10
}
  800674:	dfc00217 	ldw	ra,8(sp)
  800678:	dc400117 	ldw	r17,4(sp)
  80067c:	dc000017 	ldw	r16,0(sp)
  800680:	dec00304 	addi	sp,sp,12
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
  800684:	08014dc1 	jmpi	8014dc <putchar>

00800688 <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800688:	deffff04 	addi	sp,sp,-4
  80068c:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
  800690:	01002074 	movhi	r4,129
  800694:	213ea604 	addi	r4,r4,-1384

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
  800698:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
  80069c:	08014640 	call	801464 <printf>
    exit(-1);
  8006a0:	013fffc4 	movi	r4,-1
  8006a4:	080142c0 	call	80142c <exit>

008006a8 <idct>:
	 int scratchpad_input1,scratchpad_input2;
	 int scratchpad_output;

	 scratchpad_input1 = input[0];
	 scratchpad_input2 = input[1];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0,scratchpad_input1,scratchpad_input2);
  8006a8:	21800017 	ldw	r6,0(r4)
  8006ac:	20800117 	ldw	r2,4(r4)
  8006b0:	308dc032 	custom	0,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[2];
	 scratchpad_input2 = input[3];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST( 0x10 ,scratchpad_input1,scratchpad_input2);
  8006b4:	20c00217 	ldw	r3,8(r4)
  8006b8:	20800317 	ldw	r2,12(r4)
  8006bc:	1887c432 	custom	16,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[4];
	 scratchpad_input2 = input[5];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST( 0x2 ,scratchpad_input1,scratchpad_input2);
  8006c0:	21800417 	ldw	r6,16(r4)
  8006c4:	20800517 	ldw	r2,20(r4)
  8006c8:	308dc0b2 	custom	2,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[6];
	 scratchpad_input2 = input[7];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x12,scratchpad_input1,scratchpad_input2);
  8006cc:	20c00617 	ldw	r3,24(r4)
  8006d0:	20800717 	ldw	r2,28(r4)
  8006d4:	1887c4b2 	custom	18,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[8];
	 scratchpad_input2 = input[9];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x4,scratchpad_input1,scratchpad_input2);
  8006d8:	21800817 	ldw	r6,32(r4)
  8006dc:	20800917 	ldw	r2,36(r4)
  8006e0:	308dc132 	custom	4,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[10];
	 scratchpad_input2 = input[11];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x14,scratchpad_input1,scratchpad_input2);
  8006e4:	20c00a17 	ldw	r3,40(r4)
  8006e8:	20800b17 	ldw	r2,44(r4)
  8006ec:	1887c532 	custom	20,r3,r3,r2
	 //printf("2 %d\n",scratchpad_input2);
	 ////printf("%d\n",scratchpad_output);

	 scratchpad_input1 = input[12];
	 scratchpad_input2 = input[13];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x6,scratchpad_input1,scratchpad_input2);
  8006f0:	21800c17 	ldw	r6,48(r4)
  8006f4:	20800d17 	ldw	r2,52(r4)
  8006f8:	308dc1b2 	custom	6,r6,r6,r2
	 //printf("2 %d\n",scratchpad_input2);
	 ////printf("%d\n",scratchpad_output);

	 scratchpad_input1 = input[14];
	 scratchpad_input2 = input[15];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x16,scratchpad_input1,scratchpad_input2);
  8006fc:	20c00e17 	ldw	r3,56(r4)
  800700:	20800f17 	ldw	r2,60(r4)
  800704:	1887c5b2 	custom	22,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[16];
	 scratchpad_input2 = input[17];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x08,scratchpad_input1,scratchpad_input2);
  800708:	21801017 	ldw	r6,64(r4)
  80070c:	20801117 	ldw	r2,68(r4)
  800710:	308dc232 	custom	8,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[18];
	 scratchpad_input2 = input[19];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x18,scratchpad_input1,scratchpad_input2);
  800714:	20c01217 	ldw	r3,72(r4)
  800718:	20801317 	ldw	r2,76(r4)
  80071c:	1887c632 	custom	24,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[20];
	 scratchpad_input2 = input[21];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0a,scratchpad_input1,scratchpad_input2);
  800720:	21801417 	ldw	r6,80(r4)
  800724:	20801517 	ldw	r2,84(r4)
  800728:	308dc2b2 	custom	10,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[22];
	 scratchpad_input2 = input[23];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1a,scratchpad_input1,scratchpad_input2);
  80072c:	20c01617 	ldw	r3,88(r4)
  800730:	20801717 	ldw	r2,92(r4)
  800734:	1887c6b2 	custom	26,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[24];
	 scratchpad_input2 = input[25];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0c,scratchpad_input1,scratchpad_input2);
  800738:	21801817 	ldw	r6,96(r4)
  80073c:	20801917 	ldw	r2,100(r4)
  800740:	308dc332 	custom	12,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[26];
	 scratchpad_input2 = input[27];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1c,scratchpad_input1,scratchpad_input2);
  800744:	20c01a17 	ldw	r3,104(r4)
  800748:	20801b17 	ldw	r2,108(r4)
  80074c:	1887c732 	custom	28,r3,r3,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[28];
	 scratchpad_input2 = input[29];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0e,scratchpad_input1,scratchpad_input2);
  800750:	21801c17 	ldw	r6,112(r4)
  800754:	20801d17 	ldw	r2,116(r4)
  800758:	308dc3b2 	custom	14,r6,r6,r2
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[30];
	 scratchpad_input2 = input[31];
  80075c:	21c01f17 	ldw	r7,124(r4)
	 scratchpad_input2 = input[29];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x0e,scratchpad_input1,scratchpad_input2);
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 scratchpad_input1 = input[30];
  800760:	20801e17 	ldw	r2,120(r4)
	 scratchpad_input2 = input[31];
	 scratchpad_output= ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
  800764:	11c7c7b2 	custom	30,r3,r2,r7
	 //printf("1 %d\n",scratchpad_input1);
	 //printf("2 %d\n",scratchpad_input2);

	 ALT_CI_2D_INTERFACE25_INST(0x1e,scratchpad_input1,scratchpad_input2);
  800768:	11c5c7b2 	custom	30,r2,r2,r7
	 ////printf("1 %d\n",scratchpad_input1);
	 ////printf("2 %d\n",scratchpad_input2);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x01,0,0);
  80076c:	0007883a 	mov	r3,zero
  800770:	18c9c072 	custom	1,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 0, scratchpad_output & 0xffff);
	 block[0][0] = scratchpad_output >> 16;
  800774:	2005d43a 	srai	r2,r4,16
	 block[1][0] = scratchpad_output & 0xffff;
  800778:	2b400204 	addi	r13,r5,8
	 ////printf("2 %d\n",scratchpad_input2);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x01,0,0);
	 //IOWR_8DIRECT(block, (0 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 0, scratchpad_output & 0xffff);
	 block[0][0] = scratchpad_output >> 16;
  80077c:	28800005 	stb	r2,0(r5)
	 block[1][0] = scratchpad_output & 0xffff;
  800780:	69000005 	stb	r4,0(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x11,0,0);
  800784:	18cdc472 	custom	17,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 0, scratchpad_output & 0xffff);
	 block[2][0] = scratchpad_output >> 16;
  800788:	3005d43a 	srai	r2,r6,16
  80078c:	2ac00404 	addi	r11,r5,16
	 block[3][0] = scratchpad_output & 0xffff;
  800790:	2b000604 	addi	r12,r5,24
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x11,0,0);
	 //IOWR_8DIRECT(block, (2 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 0, scratchpad_output & 0xffff);
	 block[2][0] = scratchpad_output >> 16;
  800794:	58800005 	stb	r2,0(r11)
	 block[3][0] = scratchpad_output & 0xffff;
  800798:	61800005 	stb	r6,0(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x21,0,0);
  80079c:	18c9c872 	custom	33,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 0, scratchpad_output & 0xffff);
	 block[4][0] = scratchpad_output >> 16;
  8007a0:	2005d43a 	srai	r2,r4,16
  8007a4:	2a400804 	addi	r9,r5,32
	 block[5][0] = scratchpad_output & 0xffff;
  8007a8:	2a800a04 	addi	r10,r5,40
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x21,0,0);
	 //IOWR_8DIRECT(block, (4 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 0, scratchpad_output & 0xffff);
	 block[4][0] = scratchpad_output >> 16;
  8007ac:	48800005 	stb	r2,0(r9)
	 block[5][0] = scratchpad_output & 0xffff;
  8007b0:	51000005 	stb	r4,0(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x31,0,0);
  8007b4:	18cdcc72 	custom	49,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 0, scratchpad_output & 0xffff);
	 block[6][0] = scratchpad_output >> 16;
  8007b8:	3005d43a 	srai	r2,r6,16
  8007bc:	29c00c04 	addi	r7,r5,48
	 block[7][0] = scratchpad_output & 0xffff;
  8007c0:	2a000e04 	addi	r8,r5,56
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x31,0,0);
	 //IOWR_8DIRECT(block, (6 << 3) + 0, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 0, scratchpad_output & 0xffff);
	 block[6][0] = scratchpad_output >> 16;
  8007c4:	38800005 	stb	r2,0(r7)
	 block[7][0] = scratchpad_output & 0xffff;
  8007c8:	41800005 	stb	r6,0(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x03,0,0);
  8007cc:	18c9c0f2 	custom	3,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 1, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 1, scratchpad_output & 0xffff);
	 block[0][1] = scratchpad_output >> 16;
  8007d0:	2005d43a 	srai	r2,r4,16
  8007d4:	28800045 	stb	r2,1(r5)
	 block[1][1] = scratchpad_output & 0xffff;
  8007d8:	69000045 	stb	r4,1(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x13,0,0);
  8007dc:	18cdc4f2 	custom	19,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 1, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 1, scratchpad_output & 0xffff);
	 block[2][1] = scratchpad_output >> 16;
  8007e0:	3005d43a 	srai	r2,r6,16
  8007e4:	58800045 	stb	r2,1(r11)
	 block[3][1] = scratchpad_output & 0xffff;
  8007e8:	61800045 	stb	r6,1(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x23,0,0);
  8007ec:	18c9c8f2 	custom	35,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 1, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 1, scratchpad_output & 0xffff);
	 block[4][1] = scratchpad_output >> 16;
  8007f0:	2005d43a 	srai	r2,r4,16
  8007f4:	48800045 	stb	r2,1(r9)
	 block[5][1] = scratchpad_output & 0xffff;
  8007f8:	51000045 	stb	r4,1(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x33,0,0);
  8007fc:	18cdccf2 	custom	51,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 1, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 1, scratchpad_output & 0xffff);
	 block[6][1] = scratchpad_output >> 16;
  800800:	3005d43a 	srai	r2,r6,16
  800804:	38800045 	stb	r2,1(r7)
	 block[7][1] = scratchpad_output & 0xffff;
  800808:	41800045 	stb	r6,1(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x05,0,0);
  80080c:	18c9c172 	custom	5,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 2, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 2, scratchpad_output & 0xffff);
	 block[0][2] = scratchpad_output >> 16;
  800810:	2005d43a 	srai	r2,r4,16
  800814:	28800085 	stb	r2,2(r5)
	 block[1][2] = scratchpad_output & 0xffff;
  800818:	69000085 	stb	r4,2(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x15,0,0);
  80081c:	18cdc572 	custom	21,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 2, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 2, scratchpad_output & 0xffff);
	 block[2][2] = scratchpad_output >> 16;
  800820:	3005d43a 	srai	r2,r6,16
  800824:	58800085 	stb	r2,2(r11)
	 block[3][2] = scratchpad_output & 0xffff;
  800828:	61800085 	stb	r6,2(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x25,0,0);
  80082c:	18c9c972 	custom	37,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 2, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 2, scratchpad_output & 0xffff);
	 block[4][2] = scratchpad_output >> 16;
  800830:	2005d43a 	srai	r2,r4,16
  800834:	48800085 	stb	r2,2(r9)
	 block[5][2] = scratchpad_output & 0xffff;
  800838:	51000085 	stb	r4,2(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x35,0,0);
  80083c:	18cdcd72 	custom	53,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 2, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 2, scratchpad_output & 0xffff);
	 block[6][2] = scratchpad_output >> 16;
  800840:	3005d43a 	srai	r2,r6,16
  800844:	38800085 	stb	r2,2(r7)
	 block[7][2] = scratchpad_output & 0xffff;
  800848:	41800085 	stb	r6,2(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x07,0,0);
  80084c:	18c9c1f2 	custom	7,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 3, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 3, scratchpad_output & 0xffff);
	 block[0][3] = scratchpad_output >> 16;
  800850:	2005d43a 	srai	r2,r4,16
  800854:	288000c5 	stb	r2,3(r5)
	 block[1][3] = scratchpad_output & 0xffff;
  800858:	690000c5 	stb	r4,3(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x17,0,0);
  80085c:	18cdc5f2 	custom	23,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 3, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 3, scratchpad_output & 0xffff);
	 block[2][3] = scratchpad_output >> 16;
  800860:	3005d43a 	srai	r2,r6,16
  800864:	588000c5 	stb	r2,3(r11)
	 block[3][3] = scratchpad_output & 0xffff;
  800868:	618000c5 	stb	r6,3(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x27,0,0);
  80086c:	18c9c9f2 	custom	39,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 3, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 3, scratchpad_output & 0xffff);
	 block[4][3] = scratchpad_output >> 16;
  800870:	2005d43a 	srai	r2,r4,16
  800874:	488000c5 	stb	r2,3(r9)
	 block[5][3] = scratchpad_output & 0xffff;
  800878:	510000c5 	stb	r4,3(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x37,0,0);
  80087c:	18cdcdf2 	custom	55,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 3, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 3, scratchpad_output & 0xffff);
	 block[6][3] = scratchpad_output >> 16;
  800880:	3005d43a 	srai	r2,r6,16
  800884:	388000c5 	stb	r2,3(r7)
	 block[7][3] = scratchpad_output & 0xffff;
  800888:	418000c5 	stb	r6,3(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x09,0,0);
  80088c:	18c9c272 	custom	9,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 4, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 4, scratchpad_output & 0xffff);
	 block[0][4] = scratchpad_output >> 16;
  800890:	2005d43a 	srai	r2,r4,16
  800894:	28800105 	stb	r2,4(r5)
	 block[1][4] = scratchpad_output & 0xffff;
  800898:	69000105 	stb	r4,4(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x19,0,0);
  80089c:	18cdc672 	custom	25,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 4, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 4, scratchpad_output & 0xffff);
	 block[2][4] = scratchpad_output >> 16;
  8008a0:	3005d43a 	srai	r2,r6,16
  8008a4:	58800105 	stb	r2,4(r11)
	 block[3][4] = scratchpad_output & 0xffff;
  8008a8:	61800105 	stb	r6,4(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x29,0,0);
  8008ac:	18c9ca72 	custom	41,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 4, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 4, scratchpad_output & 0xffff);
	 block[4][4] = scratchpad_output >> 16;
  8008b0:	2005d43a 	srai	r2,r4,16
  8008b4:	48800105 	stb	r2,4(r9)
	 block[5][4] = scratchpad_output & 0xffff;
  8008b8:	51000105 	stb	r4,4(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x39,0,0);
  8008bc:	18cdce72 	custom	57,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 4, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 4, scratchpad_output & 0xffff);
	 block[6][4] = scratchpad_output >> 16;
  8008c0:	3005d43a 	srai	r2,r6,16
  8008c4:	38800105 	stb	r2,4(r7)
	 block[7][4] = scratchpad_output & 0xffff;
  8008c8:	41800105 	stb	r6,4(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0b,0,0);
  8008cc:	18c9c2f2 	custom	11,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 5, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 5, scratchpad_output & 0xffff);
	 block[0][5] = scratchpad_output >> 16;
  8008d0:	2005d43a 	srai	r2,r4,16
  8008d4:	28800145 	stb	r2,5(r5)
	 block[1][5] = scratchpad_output & 0xffff;
  8008d8:	69000145 	stb	r4,5(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1b,0,0);
  8008dc:	18cdc6f2 	custom	27,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 5, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 5, scratchpad_output & 0xffff);
	 block[2][5] = scratchpad_output >> 16;
  8008e0:	3005d43a 	srai	r2,r6,16
  8008e4:	58800145 	stb	r2,5(r11)
	 block[3][5] = scratchpad_output & 0xffff;
  8008e8:	61800145 	stb	r6,5(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2b,0,0);
  8008ec:	18c9caf2 	custom	43,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 5, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 5, scratchpad_output & 0xffff);
	 block[4][5] = scratchpad_output >> 16;
  8008f0:	2005d43a 	srai	r2,r4,16
  8008f4:	48800145 	stb	r2,5(r9)
	 block[5][5] = scratchpad_output & 0xffff;
  8008f8:	51000145 	stb	r4,5(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3b,0,0);
  8008fc:	18cdcef2 	custom	59,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 5, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 5, scratchpad_output & 0xffff);
	 block[6][5] = scratchpad_output >> 16;
  800900:	3005d43a 	srai	r2,r6,16
  800904:	38800145 	stb	r2,5(r7)
	 block[7][5] = scratchpad_output & 0xffff;
  800908:	41800145 	stb	r6,5(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0d,0,0);
  80090c:	18c9c372 	custom	13,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 6, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 6, scratchpad_output & 0xffff);
	 block[0][6] = scratchpad_output >> 16;
  800910:	2005d43a 	srai	r2,r4,16
  800914:	28800185 	stb	r2,6(r5)
	 block[1][6] = scratchpad_output & 0xffff;
  800918:	69000185 	stb	r4,6(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1d,0,0);
  80091c:	18cdc772 	custom	29,r6,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 6, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 6, scratchpad_output & 0xffff);
	 block[2][6] = scratchpad_output >> 16;
  800920:	3005d43a 	srai	r2,r6,16
  800924:	58800185 	stb	r2,6(r11)
	 block[3][6] = scratchpad_output & 0xffff;
  800928:	61800185 	stb	r6,6(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2d,0,0);
  80092c:	18c9cb72 	custom	45,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 6, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 6, scratchpad_output & 0xffff);
	 block[4][6] = scratchpad_output >> 16;
  800930:	2005d43a 	srai	r2,r4,16
  800934:	48800185 	stb	r2,6(r9)
	 block[5][6] = scratchpad_output & 0xffff;
  800938:	51000185 	stb	r4,6(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3d,0,0);
  80093c:	18cdcf72 	custom	61,r6,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 6, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 6, scratchpad_output & 0xffff);
	 block[6][6] = scratchpad_output >> 16;
  800940:	3005d43a 	srai	r2,r6,16
  800944:	38800185 	stb	r2,6(r7)
	 block[7][6] = scratchpad_output & 0xffff;
  800948:	41800185 	stb	r6,6(r8)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x0f,0,0);
  80094c:	18c9c3f2 	custom	15,r4,r3,r3
	 //IOWR_8DIRECT(block, (0 << 3) + 7, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (1 << 3) + 7, scratchpad_output & 0xffff);
	 block[0][7] = scratchpad_output >> 16;
  800950:	2005d43a 	srai	r2,r4,16
  800954:	288001c5 	stb	r2,7(r5)
	 block[1][7] = scratchpad_output & 0xffff;
  800958:	690001c5 	stb	r4,7(r13)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x1f,0,0);
  80095c:	18cbc7f2 	custom	31,r5,r3,r3
	 //IOWR_8DIRECT(block, (2 << 3) + 7, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (3 << 3) + 7, scratchpad_output & 0xffff);
	 block[2][7] = scratchpad_output >> 16;
  800960:	2805d43a 	srai	r2,r5,16
  800964:	588001c5 	stb	r2,7(r11)
	 block[3][7] = scratchpad_output & 0xffff;
  800968:	614001c5 	stb	r5,7(r12)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x2f,0,0);
  80096c:	18c9cbf2 	custom	47,r4,r3,r3
	 //IOWR_8DIRECT(block, (4 << 3) + 7, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (5 << 3) + 7, scratchpad_output & 0xffff);
	 block[4][7] = scratchpad_output >> 16;
  800970:	2005d43a 	srai	r2,r4,16
  800974:	488001c5 	stb	r2,7(r9)
	 block[5][7] = scratchpad_output & 0xffff;
  800978:	510001c5 	stb	r4,7(r10)
	 //printf("**** %d\n",scratchpad_output);

	 scratchpad_output = ALT_CI_2D_INTERFACE25_INST(0x3f,0,0);
  80097c:	18c7cff2 	custom	63,r3,r3,r3
	 //IOWR_8DIRECT(block, (6 << 3) + 7, scratchpad_output >> 16);
	 //IOWR_8DIRECT(block, (7 << 3) + 7, scratchpad_output & 0xffff);
	 block[6][7] = scratchpad_output >> 16;
  800980:	1805d43a 	srai	r2,r3,16
  800984:	388001c5 	stb	r2,7(r7)
	 block[7][7] = scratchpad_output & 0xffff;
  800988:	40c001c5 	stb	r3,7(r8)
	 //printf("**** %d\n",scratchpad_output);

	 alt_dcache_flush_all();
  80098c:	080b1601 	jmpi	80b160 <alt_dcache_flush_all>

00800990 <update_buffer>:
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800990:	20c00017 	ldw	r3,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  800994:	30800017 	ldw	r2,0(r6)
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800998:	39c03fcc 	andi	r7,r7,255
  80099c:	19d2983a 	sll	r9,r3,r7
    //total number of bits to be shifted in
    *pbitcount += size;
  8009a0:	388f883a 	add	r7,r7,r2
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8009a4:	008001c4 	movi	r2,7
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009a8:	3abffe04 	addi	r10,r7,-8
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  8009ac:	3b4001cc 	andi	r13,r7,7
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  8009b0:	22400015 	stw	r9,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
  8009b4:	31c00015 	stw	r7,0(r6)
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  8009b8:	11c01c0e 	bge	r2,r7,800a2c <update_buffer+0x9c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009bc:	2a000017 	ldw	r8,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009c0:	3b3ffc04 	addi	r12,r7,-16
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009c4:	40800003 	ldbu	r2,0(r8)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8009c8:	40c00044 	addi	r3,r8,1
  8009cc:	28c00015 	stw	r3,0(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009d0:	1284983a 	sll	r2,r2,r10
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8009d4:	42c00084 	addi	r11,r8,2
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009d8:	4886b03a 	or	r3,r9,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8009dc:	008003c4 	movi	r2,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  8009e0:	20c00015 	stw	r3,0(r4)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  8009e4:	11c0110e 	bge	r2,r7,800a2c <update_buffer+0x9c>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009e8:	40800043 	ldbu	r2,1(r8)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  8009ec:	3abffa04 	addi	r10,r7,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8009f0:	424000c4 	addi	r9,r8,3
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009f4:	1304983a 	sll	r2,r2,r12
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  8009f8:	2ac00015 	stw	r11,0(r5)
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  8009fc:	1886b03a 	or	r3,r3,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800a00:	008005c4 	movi	r2,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800a04:	20c00015 	stw	r3,0(r4)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800a08:	11c0080e 	bge	r2,r7,800a2c <update_buffer+0x9c>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a0c:	40800083 	ldbu	r2,2(r8)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a10:	42c00104 	addi	r11,r8,4
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a14:	2a400015 	stw	r9,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a18:	1284983a 	sll	r2,r2,r10
  800a1c:	1886b03a 	or	r3,r3,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800a20:	00800804 	movi	r2,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800a24:	20c00015 	stw	r3,0(r4)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800a28:	38800226 	beq	r7,r2,800a34 <update_buffer+0xa4>
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800a2c:	33400015 	stw	r13,0(r6)
}
  800a30:	f800283a 	ret
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a34:	408000c3 	ldbu	r2,3(r8)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800a38:	2ac00015 	stw	r11,0(r5)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800a3c:	33400015 	stw	r13,0(r6)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800a40:	1884b03a 	or	r2,r3,r2
  800a44:	20800015 	stw	r2,0(r4)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
}
  800a48:	f800283a 	ret

00800a4c <input_DC>:
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a4c:	2006913a 	slli	r3,r4,4

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  800a50:	2008d73a 	srli	r4,r4,28
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a54:	00800804 	movi	r2,32
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
  800a58:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800a5c:	21403fcc 	andi	r5,r4,255
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a60:	1145c83a 	sub	r2,r2,r5
  800a64:	188cd83a 	srl	r6,r3,r2
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800a68:	02000104 	movi	r8,4
  800a6c:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a70:	28bfffc4 	addi	r2,r5,-1
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
  800a74:	28000626 	beq	r5,zero,800a90 <input_DC+0x44>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800a78:	3086d83a 	srl	r3,r6,r2
  800a7c:	00bfffc4 	movi	r2,-1
  800a80:	300f883a 	mov	r7,r6
  800a84:	1144983a 	sll	r2,r2,r5
  800a88:	18000a26 	beq	r3,zero,800ab4 <input_DC+0x68>
        ib.bits = size + 4;
  800a8c:	22000104 	addi	r8,r4,4
    }
    return ib;
  800a90:	d8800045 	stb	r2,1(sp)
  800a94:	da000005 	stb	r8,0(sp)
  800a98:	38bfffcc 	andi	r2,r7,65535
  800a9c:	d8c0000b 	ldhu	r3,0(sp)
  800aa0:	1004943a 	slli	r2,r2,16
  800aa4:	d9c0008d 	sth	r7,2(sp)
}
  800aa8:	1884b03a 	or	r2,r3,r2
  800aac:	dec00104 	addi	sp,sp,4
  800ab0:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800ab4:	10800044 	addi	r2,r2,1
  800ab8:	308f883a 	add	r7,r6,r2
  800abc:	003ff306 	br	800a8c <input_DC+0x40>

00800ac0 <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800ac0:	2004913a 	slli	r2,r4,4
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800ac4:	2006923a 	slli	r3,r4,8
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
  800ac8:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800acc:	1010d73a 	srli	r8,r2,28
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800ad0:	00800804 	movi	r2,32
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  800ad4:	02400204 	movi	r9,8
  800ad8:	41403fcc 	andi	r5,r8,255
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800adc:	1145c83a 	sub	r2,r2,r5
  800ae0:	188cd83a 	srl	r6,r3,r2
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  800ae4:	000f883a 	mov	r7,zero
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800ae8:	28ffffc4 	addi	r3,r5,-1
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
  800aec:	28000726 	beq	r5,zero,800b0c <input_AC+0x4c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800af0:	00bfffc4 	movi	r2,-1
  800af4:	1144983a 	sll	r2,r2,r5
  800af8:	30c6d83a 	srl	r3,r6,r3
  800afc:	300f883a 	mov	r7,r6
  800b00:	10800044 	addi	r2,r2,1
  800b04:	18000b26 	beq	r3,zero,800b34 <input_AC+0x74>
        ib.bits = size + 8;
  800b08:	42400204 	addi	r9,r8,8
    }
    return ib;
  800b0c:	2004d73a 	srli	r2,r4,28
  800b10:	38ffffcc 	andi	r3,r7,65535
  800b14:	da400005 	stb	r9,0(sp)
  800b18:	d8800045 	stb	r2,1(sp)
  800b1c:	1806943a 	slli	r3,r3,16
  800b20:	d880000b 	ldhu	r2,0(sp)
  800b24:	d9c0008d 	sth	r7,2(sp)
}
  800b28:	10c4b03a 	or	r2,r2,r3
  800b2c:	dec00104 	addi	sp,sp,4
  800b30:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800b34:	308f883a 	add	r7,r6,r2
  800b38:	003ff306 	br	800b08 <input_AC+0x48>

00800b3c <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800b3c:	defffa04 	addi	sp,sp,-24
  800b40:	dd400515 	stw	r21,20(sp)
  800b44:	dd000415 	stw	r20,16(sp)
  800b48:	dcc00315 	stw	r19,12(sp)
  800b4c:	dc800215 	stw	r18,8(sp)
  800b50:	dc400115 	stw	r17,4(sp)
  800b54:	dc000015 	stw	r16,0(sp)
  800b58:	2029883a 	mov	r20,r4
  800b5c:	2811883a 	mov	r8,r5
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800b60:	29000003 	ldbu	r4,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b64:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b68:	28800083 	ldbu	r2,2(r5)
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
  800b6c:	dd400617 	ldw	r21,24(sp)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800b70:	294000c3 	ldbu	r5,3(r5)
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800b74:	0500b70e 	bge	zero,r20,800e54 <lossless_decode+0x318>
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b78:	18c03fcc 	andi	r3,r3,255
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800b7c:	2008963a 	slli	r4,r4,24
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b80:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b84:	10803fcc 	andi	r2,r2,255
  800b88:	1004923a 	slli	r2,r2,8
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800b8c:	20c8b03a 	or	r4,r4,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800b90:	29403fcc 	andi	r5,r5,255
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800b94:	2088b03a 	or	r4,r4,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800b98:	214ab03a 	or	r5,r4,r5
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800b9c:	43000104 	addi	r12,r8,4
  800ba0:	0027883a 	mov	r19,zero
  800ba4:	0025883a 	mov	r18,zero
  800ba8:	001d883a 	mov	r14,zero
  800bac:	a81f003a 	cmpeq	r15,r21,zero

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
  800bb0:	2812d73a 	srli	r9,r5,28
    if(size == 0){
  800bb4:	4a003fcc 	andi	r8,r9,255
  800bb8:	4000d41e 	bne	r8,zero,800f0c <lossless_decode+0x3d0>
  800bbc:	0009883a 	mov	r4,zero
  800bc0:	00800104 	movi	r2,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800bc4:	1391883a 	add	r8,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800bc8:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800bcc:	008001c4 	movi	r2,7
  800bd0:	1200160e 	bge	r2,r8,800c2c <lossless_decode+0xf0>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800bd4:	60800003 	ldbu	r2,0(r12)
  800bd8:	40fffe04 	addi	r3,r8,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800bdc:	62400044 	addi	r9,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800be0:	10c4983a 	sll	r2,r2,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800be4:	00c003c4 	movi	r3,15
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800be8:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800bec:	1a000e0e 	bge	r3,r8,800c28 <lossless_decode+0xec>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800bf0:	60800043 	ldbu	r2,1(r12)
  800bf4:	40fffc04 	addi	r3,r8,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800bf8:	62400084 	addi	r9,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800bfc:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800c00:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800c04:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800c08:	1a00070e 	bge	r3,r8,800c28 <lossless_decode+0xec>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800c0c:	60800083 	ldbu	r2,2(r12)
  800c10:	40fffa04 	addi	r3,r8,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800c14:	624000c4 	addi	r9,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800c18:	10c4983a 	sll	r2,r2,r3
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800c1c:	00c00804 	movi	r3,32
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800c20:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800c24:	40c0d326 	beq	r8,r3,800f74 <lossless_decode+0x438>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800c28:	4819883a 	mov	r12,r9
        
        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
  800c2c:	7800c91e 	bne	r15,zero,800f54 <lossless_decode+0x418>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
  800c30:	3880000b 	ldhu	r2,0(r7)
  800c34:	30c0000b 	ldhu	r3,0(r6)
  800c38:	2085383a 	mul	r2,r4,r2
  800c3c:	10c5883a 	add	r2,r2,r3
  800c40:	3080000d 	sth	r2,0(r6)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800c44:	438001cc 	andi	r14,r8,7
  800c48:	02400044 	movi	r9,1
  800c4c:	04400804 	movi	r17,32
  800c50:	040003c4 	movi	r16,15
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800c54:	2804913a 	slli	r2,r5,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800c58:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800c5c:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  800c60:	52003fcc 	andi	r8,r10,255
  800c64:	4000281e 	bne	r8,zero,800d08 <lossless_decode+0x1cc>
  800c68:	001b883a 	mov	r13,zero
  800c6c:	00800204 	movi	r2,8
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
  800c70:	1389883a 	add	r4,r2,r14
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
  800c74:	288a983a 	sll	r5,r5,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
  800c78:	008001c4 	movi	r2,7
  800c7c:	1100140e 	bge	r2,r4,800cd0 <lossless_decode+0x194>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800c80:	60800003 	ldbu	r2,0(r12)
  800c84:	20fffe04 	addi	r3,r4,-8
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800c88:	62000044 	addi	r8,r12,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
  800c8c:	10c4983a 	sll	r2,r2,r3
  800c90:	288ab03a 	or	r5,r5,r2
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
  800c94:	81000d0e 	bge	r16,r4,800ccc <lossless_decode+0x190>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800c98:	60800043 	ldbu	r2,1(r12)
  800c9c:	20fffc04 	addi	r3,r4,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ca0:	62000084 	addi	r8,r12,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800ca4:	10c4983a 	sll	r2,r2,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800ca8:	00c005c4 	movi	r3,23
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
  800cac:	288ab03a 	or	r5,r5,r2
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
  800cb0:	1900060e 	bge	r3,r4,800ccc <lossless_decode+0x190>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800cb4:	60800083 	ldbu	r2,2(r12)
  800cb8:	20fffa04 	addi	r3,r4,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800cbc:	620000c4 	addi	r8,r12,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
  800cc0:	10c4983a 	sll	r2,r2,r3
  800cc4:	288ab03a 	or	r5,r5,r2
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
  800cc8:	24401c26 	beq	r4,r17,800d3c <lossless_decode+0x200>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800ccc:	4019883a 	mov	r12,r8
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800cd0:	68bfffcc 	andi	r2,r13,65535
  800cd4:	10a0001c 	xori	r2,r2,32768
  800cd8:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800cdc:	238001cc 	andi	r14,r4,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800ce0:	10001e1e 	bne	r2,zero,800d5c <lossless_decode+0x220>
                if(ib.runlength == 15){
  800ce4:	58803fcc 	andi	r2,r11,255
  800ce8:	1400731e 	bne	r2,r16,800eb8 <lossless_decode+0x37c>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
  800cec:	7800611e 	bne	r15,zero,800e74 <lossless_decode+0x338>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
  800cf0:	2804913a 	slli	r2,r5,4
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
  800cf4:	4a400404 	addi	r9,r9,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
  800cf8:	2816d73a 	srli	r11,r5,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
  800cfc:	1014d73a 	srli	r10,r2,28
    if(size == 0) {
  800d00:	52003fcc 	andi	r8,r10,255
  800d04:	403fd826 	beq	r8,zero,800c68 <lossless_decode+0x12c>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800d08:	2808923a 	slli	r4,r5,8
  800d0c:	8a07c83a 	sub	r3,r17,r8
  800d10:	40bfffc4 	addi	r2,r8,-1
  800d14:	20c8d83a 	srl	r4,r4,r3
  800d18:	2084d83a 	srl	r2,r4,r2
  800d1c:	1000241e 	bne	r2,zero,800db0 <lossless_decode+0x274>
  800d20:	00bfffc4 	movi	r2,-1
  800d24:	1204983a 	sll	r2,r2,r8
  800d28:	10800044 	addi	r2,r2,1
  800d2c:	209b883a 	add	r13,r4,r2
  800d30:	50800204 	addi	r2,r10,8
  800d34:	10803fcc 	andi	r2,r2,255
  800d38:	003fcd06 	br	800c70 <lossless_decode+0x134>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800d3c:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
  800d40:	238001cc 	andi	r14,r4,7
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800d44:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800d48:	288ab03a 	or	r5,r5,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
  800d4c:	68bfffcc 	andi	r2,r13,65535
  800d50:	10a0001c 	xori	r2,r2,32768
  800d54:	10a00004 	addi	r2,r2,-32768
  800d58:	103fe226 	beq	r2,zero,800ce4 <lossless_decode+0x1a8>
                    //if P == 1, then don't change the values
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
  800d5c:	7800161e 	bne	r15,zero,800db8 <lossless_decode+0x27c>
                    index += ib.runlength;
  800d60:	4ad3883a 	add	r9,r9,r11
                        pe[zigzag_table[index]] = 0;
                }
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800d64:	4a003fcc 	andi	r8,r9,255
  800d68:	4205883a 	add	r2,r8,r8
  800d6c:	1085883a 	add	r2,r2,r2
  800d70:	02c02074 	movhi	r11,129
  800d74:	5ac00a04 	addi	r11,r11,40
  800d78:	12c5883a 	add	r2,r2,r11
  800d7c:	10c00017 	ldw	r3,0(r2)
  800d80:	18c7883a 	add	r3,r3,r3
  800d84:	19c9883a 	add	r4,r3,r7
  800d88:	2080000b 	ldhu	r2,0(r4)
  800d8c:	30c7883a 	add	r3,r6,r3
  800d90:	1900000b 	ldhu	r4,0(r3)
  800d94:	6885383a 	mul	r2,r13,r2
  800d98:	1105883a 	add	r2,r2,r4
  800d9c:	1880000d 	sth	r2,0(r3)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800da0:	00800f84 	movi	r2,62
  800da4:	12002836 	bltu	r2,r8,800e48 <lossless_decode+0x30c>
                index++;
  800da8:	4a400044 	addi	r9,r9,1
  800dac:	003fa906 	br	800c54 <lossless_decode+0x118>
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800db0:	201b883a 	mov	r13,r4
  800db4:	003fde06 	br	800d30 <lossless_decode+0x1f4>
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
  800db8:	4ac7883a 	add	r3,r9,r11
                    for(; index < terminal; index++)
  800dbc:	4a003fcc 	andi	r8,r9,255
  800dc0:	18803fcc 	andi	r2,r3,255
  800dc4:	40805f2e 	bgeu	r8,r2,800f44 <lossless_decode+0x408>
  800dc8:	4005883a 	mov	r2,r8
  800dcc:	1815883a 	mov	r10,r3
  800dd0:	4809883a 	mov	r4,r9
  800dd4:	02c02074 	movhi	r11,129
  800dd8:	5ac00a04 	addi	r11,r11,40
  800ddc:	1a003fcc 	andi	r8,r3,255
                        pe[zigzag_table[index]] = 0;
  800de0:	1085883a 	add	r2,r2,r2
  800de4:	1085883a 	add	r2,r2,r2
  800de8:	12c5883a 	add	r2,r2,r11
  800dec:	10c00017 	ldw	r3,0(r2)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800df0:	21000044 	addi	r4,r4,1
  800df4:	20803fcc 	andi	r2,r4,255
                        pe[zigzag_table[index]] = 0;
  800df8:	18c7883a 	add	r3,r3,r3
  800dfc:	1987883a 	add	r3,r3,r6
  800e00:	1800000d 	sth	zero,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
  800e04:	123ff61e 	bne	r2,r8,800de0 <lossless_decode+0x2a4>
  800e08:	5005883a 	mov	r2,r10
  800e0c:	5013883a 	mov	r9,r10
  800e10:	52003fcc 	andi	r8,r10,255
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	1085883a 	add	r2,r2,r2
  800e1c:	1085883a 	add	r2,r2,r2
  800e20:	12c5883a 	add	r2,r2,r11
  800e24:	10c00017 	ldw	r3,0(r2)
  800e28:	18c7883a 	add	r3,r3,r3
  800e2c:	19c9883a 	add	r4,r3,r7
  800e30:	2080000b 	ldhu	r2,0(r4)
  800e34:	30c7883a 	add	r3,r6,r3
  800e38:	6885383a 	mul	r2,r13,r2
  800e3c:	1880000d 	sth	r2,0(r3)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
  800e40:	00800f84 	movi	r2,62
  800e44:	123fd82e 	bgeu	r2,r8,800da8 <lossless_decode+0x26c>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800e48:	94800044 	addi	r18,r18,1
  800e4c:	31802004 	addi	r6,r6,128
  800e50:	a4bf571e 	bne	r20,r18,800bb0 <lossless_decode+0x74>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800e54:	dd400517 	ldw	r21,20(sp)
  800e58:	dd000417 	ldw	r20,16(sp)
  800e5c:	dcc00317 	ldw	r19,12(sp)
  800e60:	dc800217 	ldw	r18,8(sp)
  800e64:	dc400117 	ldw	r17,4(sp)
  800e68:	dc000017 	ldw	r16,0(sp)
  800e6c:	dec00604 	addi	sp,sp,24
  800e70:	f800283a 	ret
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
  800e74:	48800404 	addi	r2,r9,16
                        for(; index < terminal; index++)
  800e78:	11003fcc 	andi	r4,r2,255
  800e7c:	4a003fcc 	andi	r8,r9,255
  800e80:	413f742e 	bgeu	r8,r4,800c54 <lossless_decode+0x118>
  800e84:	02c02074 	movhi	r11,129
  800e88:	5ac00a04 	addi	r11,r11,40
                            pe[zigzag_table[index]] = 0;
  800e8c:	4205883a 	add	r2,r8,r8
  800e90:	1085883a 	add	r2,r2,r2
  800e94:	12c5883a 	add	r2,r2,r11
  800e98:	10c00017 	ldw	r3,0(r2)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800e9c:	4a400044 	addi	r9,r9,1
  800ea0:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  800ea4:	18c7883a 	add	r3,r3,r3
  800ea8:	1987883a 	add	r3,r3,r6
  800eac:	1800000d 	sth	zero,0(r3)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
  800eb0:	413ff636 	bltu	r8,r4,800e8c <lossless_decode+0x350>
  800eb4:	003f6706 	br	800c54 <lossless_decode+0x118>
                            pe[zigzag_table[index]] = 0;
                    }
                }
                else {
                    //END
                    if(P == 0){
  800eb8:	a83fe31e 	bne	r21,zero,800e48 <lossless_decode+0x30c>
                        //output all zeros
                        for(; index < 64; index++)
  800ebc:	4a003fcc 	andi	r8,r9,255
  800ec0:	00800fc4 	movi	r2,63
  800ec4:	123fe036 	bltu	r2,r8,800e48 <lossless_decode+0x30c>
  800ec8:	02c02074 	movhi	r11,129
  800ecc:	5ac00a04 	addi	r11,r11,40
  800ed0:	01001004 	movi	r4,64
                            pe[zigzag_table[index]] = 0;
  800ed4:	4205883a 	add	r2,r8,r8
  800ed8:	1085883a 	add	r2,r2,r2
  800edc:	12c5883a 	add	r2,r2,r11
  800ee0:	10c00017 	ldw	r3,0(r2)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800ee4:	4a400044 	addi	r9,r9,1
  800ee8:	4a003fcc 	andi	r8,r9,255
                            pe[zigzag_table[index]] = 0;
  800eec:	18c7883a 	add	r3,r3,r3
  800ef0:	1987883a 	add	r3,r3,r6
  800ef4:	1800000d 	sth	zero,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
  800ef8:	413ff61e 	bne	r8,r4,800ed4 <lossless_decode+0x398>
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
  800efc:	94800044 	addi	r18,r18,1
  800f00:	31802004 	addi	r6,r6,128
  800f04:	a4bf2a1e 	bne	r20,r18,800bb0 <lossless_decode+0x74>
  800f08:	003fd206 	br	800e54 <lossless_decode+0x318>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800f0c:	2804913a 	slli	r2,r5,4
  800f10:	00c00804 	movi	r3,32
  800f14:	1a07c83a 	sub	r3,r3,r8
  800f18:	10c6d83a 	srl	r3,r2,r3
  800f1c:	413fffc4 	addi	r4,r8,-1
  800f20:	1908d83a 	srl	r4,r3,r4
  800f24:	2000111e 	bne	r4,zero,800f6c <lossless_decode+0x430>
  800f28:	00bfffc4 	movi	r2,-1
  800f2c:	1204983a 	sll	r2,r2,r8
  800f30:	10800044 	addi	r2,r2,1
  800f34:	1889883a 	add	r4,r3,r2
  800f38:	48800104 	addi	r2,r9,4
  800f3c:	10803fcc 	andi	r2,r2,255
  800f40:	003f2006 	br	800bc4 <lossless_decode+0x88>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
  800f44:	4805883a 	mov	r2,r9
  800f48:	02c02074 	movhi	r11,129
  800f4c:	5ac00a04 	addi	r11,r11,40
  800f50:	003fb006 	br	800e14 <lossless_decode+0x2d8>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800f54:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
  800f58:	9905883a 	add	r2,r19,r4
  800f5c:	1027883a 	mov	r19,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
  800f60:	10c5383a 	mul	r2,r2,r3
  800f64:	3080000d 	sth	r2,0(r6)
  800f68:	003f3606 	br	800c44 <lossless_decode+0x108>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
  800f6c:	1809883a 	mov	r4,r3
  800f70:	003ff106 	br	800f38 <lossless_decode+0x3fc>
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800f74:	608000c3 	ldbu	r2,3(r12)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
  800f78:	63000104 	addi	r12,r12,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
  800f7c:	288ab03a 	or	r5,r5,r2
  800f80:	003f2a06 	br	800c2c <lossless_decode+0xf0>

00800f84 <ycbcr_to_rgb>:
//(1 bit sign, 14 bits scaling, 8 bit original sample + 1 additional bit since the
//result can overflow due to imprecisions added in the quantizaton)


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
  800f84:	3109383a 	mul	r4,r6,r4
  800f88:	db800017 	ldw	r14,0(sp)
  800f8c:	db400117 	ldw	r13,4(sp)
  800f90:	290b883a 	add	r5,r5,r4
  800f94:	d8800217 	ldw	r2,8(sp)
  800f98:	294b883a 	add	r5,r5,r5
  800f9c:	294b883a 	add	r5,r5,r5
  800fa0:	318d883a 	add	r6,r6,r6
  800fa4:	1151883a 	add	r8,r2,r5
  800fa8:	318d883a 	add	r6,r6,r6
  800fac:	6817883a 	mov	r11,r13
  800fb0:	7015883a 	mov	r10,r14
  800fb4:	3813883a 	mov	r9,r7
  800fb8:	0019883a 	mov	r12,zero
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  800fbc:	6345883a 	add	r2,r12,r13
  800fc0:	11000003 	ldbu	r4,0(r2)
  800fc4:	6387883a 	add	r3,r12,r14
  800fc8:	19400003 	ldbu	r5,0(r3)
  800fcc:	2008923a 	slli	r4,r4,8
  800fd0:	61c7883a 	add	r3,r12,r7
  800fd4:	18800003 	ldbu	r2,0(r3)
  800fd8:	2148b03a 	or	r4,r4,r5
  800fdc:	1105d032 	custom	64,r2,r2,r4
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  800fe0:	40800035 	stwio	r2,0(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  800fe4:	58c00043 	ldbu	r3,1(r11)
  800fe8:	50800043 	ldbu	r2,1(r10)
  800fec:	49000043 	ldbu	r4,1(r9)
  800ff0:	1806923a 	slli	r3,r3,8
  800ff4:	1886b03a 	or	r3,r3,r2
  800ff8:	20c9d032 	custom	64,r4,r4,r3
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  800ffc:	41000135 	stwio	r4,4(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801000:	58800083 	ldbu	r2,2(r11)
  801004:	51000083 	ldbu	r4,2(r10)
  801008:	48c00083 	ldbu	r3,2(r9)
  80100c:	1004923a 	slli	r2,r2,8
  801010:	1104b03a 	or	r2,r2,r4
  801014:	1887d032 	custom	64,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801018:	40c00235 	stwio	r3,8(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  80101c:	588000c3 	ldbu	r2,3(r11)
  801020:	510000c3 	ldbu	r4,3(r10)
  801024:	48c000c3 	ldbu	r3,3(r9)
  801028:	1004923a 	slli	r2,r2,8
  80102c:	1104b03a 	or	r2,r2,r4
  801030:	1887d032 	custom	64,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801034:	40c00335 	stwio	r3,12(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801038:	58800103 	ldbu	r2,4(r11)
  80103c:	51000103 	ldbu	r4,4(r10)
  801040:	48c00103 	ldbu	r3,4(r9)
  801044:	1004923a 	slli	r2,r2,8
  801048:	1104b03a 	or	r2,r2,r4
  80104c:	1887d032 	custom	64,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801050:	40c00435 	stwio	r3,16(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801054:	58800143 	ldbu	r2,5(r11)
  801058:	51000143 	ldbu	r4,5(r10)
  80105c:	48c00143 	ldbu	r3,5(r9)
  801060:	1004923a 	slli	r2,r2,8
  801064:	1104b03a 	or	r2,r2,r4
  801068:	1887d032 	custom	64,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  80106c:	40c00535 	stwio	r3,20(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  801070:	58800183 	ldbu	r2,6(r11)
  801074:	51000183 	ldbu	r4,6(r10)
  801078:	48c00183 	ldbu	r3,6(r9)
  80107c:	1004923a 	slli	r2,r2,8
  801080:	1104b03a 	or	r2,r2,r4
  801084:	1887d032 	custom	64,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  801088:	40c00635 	stwio	r3,24(r8)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
        	uint32_t Cbr = Cr[y][x] << 8 | Cb[y][x];
        	rgb_pixel_t pixel;
        	uint32_t rawPixel;
        	rawPixel = ALT_CI_YCBCR_TO_RGB2_INST(Y[y][x],Cbr);
  80108c:	588001c3 	ldbu	r2,7(r11)
  801090:	510001c3 	ldbu	r4,7(r10)
  801094:	48c001c3 	ldbu	r3,7(r9)
  801098:	1004923a 	slli	r2,r2,8
  80109c:	1104b03a 	or	r2,r2,r4
  8010a0:	1887d032 	custom	64,r3,r3,r2
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  8010a4:	40c00735 	stwio	r3,28(r8)
  8010a8:	63000204 	addi	r12,r12,8


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  8010ac:	00801004 	movi	r2,64
            //pixel.alpha = 0;
            //pixel.blue = rawPixel;
            //pixel.green = rawPixel >> 8;
            //pixel.red = rawPixel >> 16;
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
  8010b0:	4191883a 	add	r8,r8,r6
  8010b4:	5ac00204 	addi	r11,r11,8
  8010b8:	52800204 	addi	r10,r10,8
  8010bc:	4a400204 	addi	r9,r9,8


void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
  8010c0:	60bfbe1e 	bne	r12,r2,800fbc <ycbcr_to_rgb+0x38>
            //rgbblock[index] = pixel;
            IOWR_32DIRECT(rgbblock, index*4, rawPixel);
            index++;
        }
    }
}
  8010c4:	f800283a 	ret

008010c8 <initTimer>:
	}

}

//Timer initalization function
void initTimer() {
  8010c8:	deffff04 	addi	sp,sp,-4

	//set the timer period to 1400/50 million seconds
	int timerPeriod = 2900000;

	// initialize timer interrupt vector
	alt_irq_register(TIMER_0_IRQ, (void*) 0, timer0_ISR);
  8010cc:	01000044 	movi	r4,1
  8010d0:	000b883a 	mov	r5,zero
  8010d4:	01802034 	movhi	r6,128
  8010d8:	31844904 	addi	r6,r6,4388
	}

}

//Timer initalization function
void initTimer() {
  8010dc:	dfc00015 	stw	ra,0(sp)

	//set the timer period to 1400/50 million seconds
	int timerPeriod = 2900000;

	// initialize timer interrupt vector
	alt_irq_register(TIMER_0_IRQ, (void*) 0, timer0_ISR);
  8010e0:	080b3640 	call	80b364 <alt_irq_register>

	// initialize timer period
	IOWR(TIMER_0_BASE, 2, (alt_u16)timerPeriod);
  8010e4:	00d00804 	movi	r3,16416
  8010e8:	00804434 	movhi	r2,272
  8010ec:	10850204 	addi	r2,r2,5128
  8010f0:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 3, (alt_u16)(timerPeriod >> 16));
  8010f4:	01000b04 	movi	r4,44
  8010f8:	10800104 	addi	r2,r2,4
  8010fc:	11000035 	stwio	r4,0(r2)

	// clear timer interrupt bit in status register
	IOWR(TIMER_0_BASE, 0, 0x0);
  801100:	00c04434 	movhi	r3,272
  801104:	18c50004 	addi	r3,r3,5120
  801108:	18000035 	stwio	zero,0(r3)

	// initialize timer control - start timer, run continuously, enable interrupts
	IOWR(TIMER_0_BASE, 1, 0x7);
  80110c:	010001c4 	movi	r4,7
  801110:	10bffe04 	addi	r2,r2,-8
  801114:	11000035 	stwio	r4,0(r2)
}
  801118:	dfc00017 	ldw	ra,0(sp)
  80111c:	dec00104 	addi	sp,sp,4
  801120:	f800283a 	ret

00801124 <timer0_ISR>:
int counter =0;
alt_up_pixel_buffer_dma_dev * pixel_buf_dev;

void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock);

static void timer0_ISR(void* context, alt_u32 id) {
  801124:	deffff04 	addi	sp,sp,-4
	// acknowledge the interrupt by clearing the TO bit in the status register
	IOWR(TIMER_0_BASE, 0, 0x0);
  801128:	00804434 	movhi	r2,272
  80112c:	10850004 	addi	r2,r2,5120
int counter =0;
alt_up_pixel_buffer_dma_dev * pixel_buf_dev;

void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock);

static void timer0_ISR(void* context, alt_u32 id) {
  801130:	dfc00015 	stw	ra,0(sp)
	// acknowledge the interrupt by clearing the TO bit in the status register
	IOWR(TIMER_0_BASE, 0, 0x0);
  801134:	10000035 	stwio	zero,0(r2)
	if(pixel_buf_dev != NULL && *playing && flag){
  801138:	d1277317 	ldw	r4,-25140(gp)
  80113c:	20000e26 	beq	r4,zero,801178 <timer0_ISR+0x54>
  801140:	d0a76f17 	ldw	r2,-25156(gp)
  801144:	10c00017 	ldw	r3,0(r2)
  801148:	18000b26 	beq	r3,zero,801178 <timer0_ISR+0x54>
  80114c:	d0a76d17 	ldw	r2,-25164(gp)
  801150:	10000926 	beq	r2,zero,801178 <timer0_ISR+0x54>
		flag = 0;
  801154:	d0276d15 	stw	zero,-25164(gp)
  801158:	00000106 	br	801160 <timer0_ISR+0x3c>
  80115c:	d1277317 	ldw	r4,-25140(gp)
		while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
  801160:	080d6940 	call	80d694 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  801164:	103ffd1e 	bne	r2,zero,80115c <timer0_ISR+0x38>
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  801168:	d1277317 	ldw	r4,-25140(gp)
	}

}
  80116c:	dfc00017 	ldw	ra,0(sp)
  801170:	dec00104 	addi	sp,sp,4
	// acknowledge the interrupt by clearing the TO bit in the status register
	IOWR(TIMER_0_BASE, 0, 0x0);
	if(pixel_buf_dev != NULL && *playing && flag){
		flag = 0;
		while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dev));
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  801174:	080d63c1 	jmpi	80d63c <alt_up_pixel_buffer_dma_swap_buffers>
	}

}
  801178:	dfc00017 	ldw	ra,0(sp)
  80117c:	dec00104 	addi	sp,sp,4
  801180:	f800283a 	ret

00801184 <main>:
	// initialize timer control - start timer, run continuously, enable interrupts
	IOWR(TIMER_0_BASE, 1, 0x7);
}

int main()
{
  801184:	deffed04 	addi	sp,sp,-76

	  color_block_t** Yblock;
	  color_block_t** Cbblock;
	  color_block_t** Crblock;
	  alt_u32 receiveMessage = 0;
	  recv_dev = altera_avalon_mailbox_open("/dev/mailbox_0");
  801188:	01002074 	movhi	r4,129
  80118c:	213ea904 	addi	r4,r4,-1372
	// initialize timer control - start timer, run continuously, enable interrupts
	IOWR(TIMER_0_BASE, 1, 0x7);
}

int main()
{
  801190:	dfc01215 	stw	ra,72(sp)
  801194:	dd800f15 	stw	r22,60(sp)
  801198:	dc000915 	stw	r16,36(sp)
  80119c:	df001115 	stw	fp,68(sp)
  8011a0:	ddc01015 	stw	r23,64(sp)
  8011a4:	dd400e15 	stw	r21,56(sp)
  8011a8:	dd000d15 	stw	r20,52(sp)
  8011ac:	dcc00c15 	stw	r19,48(sp)
  8011b0:	dc800b15 	stw	r18,44(sp)
  8011b4:	dc400a15 	stw	r17,40(sp)

	  color_block_t** Yblock;
	  color_block_t** Cbblock;
	  color_block_t** Crblock;
	  alt_u32 receiveMessage = 0;
	  recv_dev = altera_avalon_mailbox_open("/dev/mailbox_0");
  8011b8:	080ccfc0 	call	80ccfc <altera_avalon_mailbox_open>
	  send_dev = altera_avalon_mailbox_open("/dev/mailbox_1");
  8011bc:	01002074 	movhi	r4,129
  8011c0:	213ead04 	addi	r4,r4,-1356

	  color_block_t** Yblock;
	  color_block_t** Cbblock;
	  color_block_t** Crblock;
	  alt_u32 receiveMessage = 0;
	  recv_dev = altera_avalon_mailbox_open("/dev/mailbox_0");
  8011c4:	102d883a 	mov	r22,r2
	  send_dev = altera_avalon_mailbox_open("/dev/mailbox_1");
  8011c8:	080ccfc0 	call	80ccfc <altera_avalon_mailbox_open>
  8011cc:	d8800815 	stw	r2,32(sp)
  8011d0:	04002074 	movhi	r16,129
  8011d4:	840e8304 	addi	r16,r16,14860

	  while( altera_avalon_mailbox_get(recv_dev, errno) );
  8011d8:	81400017 	ldw	r5,0(r16)
  8011dc:	b009883a 	mov	r4,r22
  8011e0:	080cf280 	call	80cf28 <altera_avalon_mailbox_get>
  8011e4:	103ffc1e 	bne	r2,zero,8011d8 <main+0x54>

	//set the timer period to 1400/50 million seconds
	int timerPeriod = 2900000;

	// initialize timer interrupt vector
	alt_irq_register(TIMER_0_IRQ, (void*) 0, timer0_ISR);
  8011e8:	01000044 	movi	r4,1
  8011ec:	000b883a 	mov	r5,zero
  8011f0:	01802034 	movhi	r6,128
  8011f4:	31844904 	addi	r6,r6,4388
  8011f8:	080b3640 	call	80b364 <alt_irq_register>

	// initialize timer period
	IOWR(TIMER_0_BASE, 2, (alt_u16)timerPeriod);
  8011fc:	00d00804 	movi	r3,16416
  801200:	00804434 	movhi	r2,272
  801204:	10850204 	addi	r2,r2,5128
  801208:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 3, (alt_u16)(timerPeriod >> 16));
  80120c:	01000b04 	movi	r4,44
  801210:	10800104 	addi	r2,r2,4
  801214:	11000035 	stwio	r4,0(r2)

	// clear timer interrupt bit in status register
	IOWR(TIMER_0_BASE, 0, 0x0);
  801218:	00c04434 	movhi	r3,272
  80121c:	18c50004 	addi	r3,r3,5120
  801220:	18000035 	stwio	zero,0(r3)

	// initialize timer control - start timer, run continuously, enable interrupts
	IOWR(TIMER_0_BASE, 1, 0x7);
  801224:	010001c4 	movi	r4,7
  801228:	10bffe04 	addi	r2,r2,-8
  80122c:	11000035 	stwio	r4,0(r2)

	  while( altera_avalon_mailbox_get(recv_dev, errno) );
	  //file streams
	  FILE* file_in;
	  initTimer();
	  pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
  801230:	01002074 	movhi	r4,129
  801234:	213eb104 	addi	r4,r4,-1340
  801238:	080d4040 	call	80d404 <alt_up_pixel_buffer_dma_open_dev>
  80123c:	d0a77315 	stw	r2,-25140(gp)
	  if ( pixel_buf_dev == NULL){
  801240:	1000031e 	bne	r2,zero,801250 <main+0xcc>
		  error_and_exit ("Error: could not open pixel buffer device \n");
  801244:	01002074 	movhi	r4,129
  801248:	213eb904 	addi	r4,r4,-1308
  80124c:	08006880 	call	800688 <error_and_exit>
	  }


	  YDCAC = altera_avalon_mailbox_pend(recv_dev);
  801250:	b009883a 	mov	r4,r22
  801254:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
  801258:	b009883a 	mov	r4,r22
	  if ( pixel_buf_dev == NULL){
		  error_and_exit ("Error: could not open pixel buffer device \n");
	  }


	  YDCAC = altera_avalon_mailbox_pend(recv_dev);
  80125c:	d8800715 	stw	r2,28(sp)
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
  801260:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  CrDCAC = altera_avalon_mailbox_pend(recv_dev);
  801264:	b009883a 	mov	r4,r22
		  error_and_exit ("Error: could not open pixel buffer device \n");
	  }


	  YDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
  801268:	d8800615 	stw	r2,24(sp)
	  CrDCAC = altera_avalon_mailbox_pend(recv_dev);
  80126c:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>

	  Yblock = altera_avalon_mailbox_pend(recv_dev);
  801270:	b009883a 	mov	r4,r22
	  }


	  YDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CrDCAC = altera_avalon_mailbox_pend(recv_dev);
  801274:	d8800515 	stw	r2,20(sp)

	  Yblock = altera_avalon_mailbox_pend(recv_dev);
  801278:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
  80127c:	b009883a 	mov	r4,r22

	  YDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CrDCAC = altera_avalon_mailbox_pend(recv_dev);

	  Yblock = altera_avalon_mailbox_pend(recv_dev);
  801280:	d8800415 	stw	r2,16(sp)
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
  801284:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  Crblock = altera_avalon_mailbox_pend(recv_dev);
  801288:	b009883a 	mov	r4,r22
	  YDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CrDCAC = altera_avalon_mailbox_pend(recv_dev);

	  Yblock = altera_avalon_mailbox_pend(recv_dev);
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
  80128c:	d8800315 	stw	r2,12(sp)
	  Crblock = altera_avalon_mailbox_pend(recv_dev);
  801290:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>

	  playing = altera_avalon_mailbox_pend(recv_dev);
  801294:	b009883a 	mov	r4,r22
	  CbDCAC = altera_avalon_mailbox_pend(recv_dev);
	  CrDCAC = altera_avalon_mailbox_pend(recv_dev);

	  Yblock = altera_avalon_mailbox_pend(recv_dev);
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
	  Crblock = altera_avalon_mailbox_pend(recv_dev);
  801298:	1039883a 	mov	fp,r2

	  playing = altera_avalon_mailbox_pend(recv_dev);
  80129c:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
  8012a0:	b009883a 	mov	r4,r22

	  Yblock = altera_avalon_mailbox_pend(recv_dev);
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
	  Crblock = altera_avalon_mailbox_pend(recv_dev);

	  playing = altera_avalon_mailbox_pend(recv_dev);
  8012a4:	d0a76f15 	stw	r2,-25156(gp)
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
  8012a8:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  fastForward = altera_avalon_mailbox_pend(recv_dev);
  8012ac:	b009883a 	mov	r4,r22
	  Yblock = altera_avalon_mailbox_pend(recv_dev);
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
	  Crblock = altera_avalon_mailbox_pend(recv_dev);

	  playing = altera_avalon_mailbox_pend(recv_dev);
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
  8012b0:	d0a77215 	stw	r2,-25144(gp)
	  fastForward = altera_avalon_mailbox_pend(recv_dev);
  8012b4:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  backward = altera_avalon_mailbox_pend(recv_dev);
  8012b8:	b009883a 	mov	r4,r22
	  Cbblock = altera_avalon_mailbox_pend(recv_dev);
	  Crblock = altera_avalon_mailbox_pend(recv_dev);

	  playing = altera_avalon_mailbox_pend(recv_dev);
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
	  fastForward = altera_avalon_mailbox_pend(recv_dev);
  8012bc:	d0a77115 	stw	r2,-25148(gp)
	  backward = altera_avalon_mailbox_pend(recv_dev);
  8012c0:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>

	  int h_size = altera_avalon_mailbox_pend(recv_dev);
  8012c4:	b009883a 	mov	r4,r22
	  Crblock = altera_avalon_mailbox_pend(recv_dev);

	  playing = altera_avalon_mailbox_pend(recv_dev);
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
	  fastForward = altera_avalon_mailbox_pend(recv_dev);
	  backward = altera_avalon_mailbox_pend(recv_dev);
  8012c8:	d0a77015 	stw	r2,-25152(gp)

	  int h_size = altera_avalon_mailbox_pend(recv_dev);
  8012cc:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
	  int w_size = altera_avalon_mailbox_pend(recv_dev);
  8012d0:	b009883a 	mov	r4,r22
	  playing = altera_avalon_mailbox_pend(recv_dev);
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
	  fastForward = altera_avalon_mailbox_pend(recv_dev);
	  backward = altera_avalon_mailbox_pend(recv_dev);

	  int h_size = altera_avalon_mailbox_pend(recv_dev);
  8012d4:	1021883a 	mov	r16,r2
	  int w_size = altera_avalon_mailbox_pend(recv_dev);
  8012d8:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>


	  printf("YDCAC[%d] = %x\n", 0, YDCAC);
  8012dc:	d9800717 	ldw	r6,28(sp)
  8012e0:	01002074 	movhi	r4,129
  8012e4:	213ec404 	addi	r4,r4,-1264
  8012e8:	000b883a 	mov	r5,zero
	  getNextFile = altera_avalon_mailbox_pend(recv_dev);
	  fastForward = altera_avalon_mailbox_pend(recv_dev);
	  backward = altera_avalon_mailbox_pend(recv_dev);

	  int h_size = altera_avalon_mailbox_pend(recv_dev);
	  int w_size = altera_avalon_mailbox_pend(recv_dev);
  8012ec:	102f883a 	mov	r23,r2


	  printf("YDCAC[%d] = %x\n", 0, YDCAC);
  8012f0:	08014640 	call	801464 <printf>

	  int hCb_size = h_size/8;           //number of chrominance blocks
	  int wCb_size = w_size/8;
  8012f4:	b807883a 	mov	r3,r23
  8012f8:	b800010e 	bge	r23,zero,801300 <main+0x17c>
  8012fc:	b8c001c4 	addi	r3,r23,7
  801300:	8005883a 	mov	r2,r16
  801304:	1829d0fa 	srai	r20,r3,3
  801308:	8000010e 	bge	r16,zero,801310 <main+0x18c>
  80130c:	808001c4 	addi	r2,r16,7
  801310:	1005d0fa 	srai	r2,r2,3
  801314:	152b383a 	mul	r21,r2,r20
	  int hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
	  int wYb_size = w_size/8;

	  while(1){

		  receiveMessage = altera_avalon_mailbox_pend(recv_dev);
  801318:	b009883a 	mov	r4,r22
  80131c:	080ce800 	call	80ce80 <altera_avalon_mailbox_pend>
			  if( (receiveMessage >= 0 && receiveMessage < 15 ) || receiveMessage == 100){
				  break;
			  }
			  receiveMessage = altera_avalon_mailbox_pend(recv_dev);
		  }*/
		  counter = receiveMessage;
  801320:	0025883a 	mov	r18,zero
  801324:	0027883a 	mov	r19,zero
  801328:	d0a76e15 	stw	r2,-25160(gp)
		  for(int i = 0; i< 10; i++){
			  for(int b = 0; b < hYb_size*wYb_size; b++){
  80132c:	95401316 	blt	r18,r21,80137c <main+0x1f8>
				  ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, ((color_block_t*)(Yblock[0]))[b], ((color_block_t*)(Cbblock[0]))[b], ((color_block_t*)(Crblock[0]))[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));

			  }
			  /*for(int b = 0; b < hCb_size*wCb_size; b++)
				  ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, ((color_block_t*)(Yblock[0]))[b], ((color_block_t*)(Cbblock[0]))[b], ((color_block_t*)(Crblock[0]))[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));*/
			  flag = 1;
  801330:	00800044 	movi	r2,1
  801334:	d0a76d15 	stw	r2,-25164(gp)
			  while(flag);
  801338:	d0a76d17 	ldw	r2,-25164(gp)
  80133c:	103ffe1e 	bne	r2,zero,801338 <main+0x1b4>
			  counter = (counter +1 ) % 10;
  801340:	d0a76e17 	ldw	r2,-25160(gp)
  801344:	00c00284 	movi	r3,10
			  altera_avalon_mailbox_post(send_dev, 1);
  801348:	d9000817 	ldw	r4,32(sp)
			  }
			  /*for(int b = 0; b < hCb_size*wCb_size; b++)
				  ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, ((color_block_t*)(Yblock[0]))[b], ((color_block_t*)(Cbblock[0]))[b], ((color_block_t*)(Crblock[0]))[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));*/
			  flag = 1;
			  while(flag);
			  counter = (counter +1 ) % 10;
  80134c:	10800044 	addi	r2,r2,1
  801350:	10c7283a 	div	r3,r2,r3
  801354:	18c002a4 	muli	r3,r3,10
			  altera_avalon_mailbox_post(send_dev, 1);
  801358:	01400044 	movi	r5,1
				  break;
			  }
			  receiveMessage = altera_avalon_mailbox_pend(recv_dev);
		  }*/
		  counter = receiveMessage;
		  for(int i = 0; i< 10; i++){
  80135c:	9967883a 	add	r19,r19,r5
			  }
			  /*for(int b = 0; b < hCb_size*wCb_size; b++)
				  ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, ((color_block_t*)(Yblock[0]))[b], ((color_block_t*)(Cbblock[0]))[b], ((color_block_t*)(Crblock[0]))[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));*/
			  flag = 1;
			  while(flag);
			  counter = (counter +1 ) % 10;
  801360:	10c5c83a 	sub	r2,r2,r3
  801364:	d0a76e15 	stw	r2,-25160(gp)
			  altera_avalon_mailbox_post(send_dev, 1);
  801368:	080cd740 	call	80cd74 <altera_avalon_mailbox_post>
				  break;
			  }
			  receiveMessage = altera_avalon_mailbox_pend(recv_dev);
		  }*/
		  counter = receiveMessage;
		  for(int i = 0; i< 10; i++){
  80136c:	00c00244 	movi	r3,9
  801370:	1cffe916 	blt	r3,r19,801318 <main+0x194>
  801374:	0025883a 	mov	r18,zero
			  for(int b = 0; b < hYb_size*wYb_size; b++){
  801378:	957fed0e 	bge	r18,r21,801330 <main+0x1ac>
				  idct(((dct_block_t*)(YDCAC[0]))[b], ((color_block_t*)(Yblock[0]))[b]);
  80137c:	d8800717 	ldw	r2,28(sp)
  801380:	902291ba 	slli	r17,r18,6
  801384:	902091fa 	slli	r16,r18,7
  801388:	11000017 	ldw	r4,0(r2)
  80138c:	d8800417 	ldw	r2,16(sp)
  801390:	8109883a 	add	r4,r16,r4
  801394:	11400017 	ldw	r5,0(r2)
  801398:	894b883a 	add	r5,r17,r5
  80139c:	08006a80 	call	8006a8 <idct>
				  idct(((dct_block_t*)(CbDCAC[0]))[b], ((color_block_t*)(Cbblock[0]))[b]);
  8013a0:	d8800617 	ldw	r2,24(sp)
  8013a4:	11000017 	ldw	r4,0(r2)
  8013a8:	d8800317 	ldw	r2,12(sp)
  8013ac:	8109883a 	add	r4,r16,r4
  8013b0:	11400017 	ldw	r5,0(r2)
  8013b4:	894b883a 	add	r5,r17,r5
  8013b8:	08006a80 	call	8006a8 <idct>
				  idct(((dct_block_t*)(CrDCAC[0]))[b], ((color_block_t*)(Crblock[0]))[b]);
  8013bc:	d8800517 	ldw	r2,20(sp)
  8013c0:	e1400017 	ldw	r5,0(fp)
  8013c4:	11000017 	ldw	r4,0(r2)
  8013c8:	894b883a 	add	r5,r17,r5
  8013cc:	8109883a 	add	r4,r16,r4
  8013d0:	08006a80 	call	8006a8 <idct>
				  ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, ((color_block_t*)(Yblock[0]))[b], ((color_block_t*)(Cbblock[0]))[b], ((color_block_t*)(Crblock[0]))[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  8013d4:	d8800317 	ldw	r2,12(sp)
  8013d8:	9509283a 	div	r4,r18,r20
  8013dc:	250b383a 	mul	r5,r4,r20
  8013e0:	10c00017 	ldw	r3,0(r2)
  8013e4:	d8800417 	ldw	r2,16(sp)
  8013e8:	914bc83a 	sub	r5,r18,r5
  8013ec:	88c7883a 	add	r3,r17,r3
  8013f0:	11c00017 	ldw	r7,0(r2)
  8013f4:	d8c00015 	stw	r3,0(sp)
  8013f8:	e0800017 	ldw	r2,0(fp)
  8013fc:	200890fa 	slli	r4,r4,3
  801400:	280a90fa 	slli	r5,r5,3
  801404:	8885883a 	add	r2,r17,r2
  801408:	d8800115 	stw	r2,4(sp)
  80140c:	d0a77317 	ldw	r2,-25140(gp)
  801410:	89cf883a 	add	r7,r17,r7
  801414:	b80d883a 	mov	r6,r23
  801418:	10c00c17 	ldw	r3,48(r2)
			  }
			  receiveMessage = altera_avalon_mailbox_pend(recv_dev);
		  }*/
		  counter = receiveMessage;
		  for(int i = 0; i< 10; i++){
			  for(int b = 0; b < hYb_size*wYb_size; b++){
  80141c:	94800044 	addi	r18,r18,1
				  idct(((dct_block_t*)(YDCAC[0]))[b], ((color_block_t*)(Yblock[0]))[b]);
				  idct(((dct_block_t*)(CbDCAC[0]))[b], ((color_block_t*)(Cbblock[0]))[b]);
				  idct(((dct_block_t*)(CrDCAC[0]))[b], ((color_block_t*)(Crblock[0]))[b]);
				  ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, ((color_block_t*)(Yblock[0]))[b], ((color_block_t*)(Cbblock[0]))[b], ((color_block_t*)(Crblock[0]))[b], (rgb_pixel_t*)(pixel_buf_dev->back_buffer_start_address));
  801420:	d8c00215 	stw	r3,8(sp)
  801424:	0800f840 	call	800f84 <ycbcr_to_rgb>
  801428:	003fc006 	br	80132c <main+0x1a8>

0080142c <exit>:
  80142c:	defffe04 	addi	sp,sp,-8
  801430:	000b883a 	mov	r5,zero
  801434:	dc000015 	stw	r16,0(sp)
  801438:	dfc00115 	stw	ra,4(sp)
  80143c:	2021883a 	mov	r16,r4
  801440:	08035680 	call	803568 <__call_exitprocs>
  801444:	00802074 	movhi	r2,129
  801448:	10871004 	addi	r2,r2,7232
  80144c:	11000017 	ldw	r4,0(r2)
  801450:	20800f17 	ldw	r2,60(r4)
  801454:	10000126 	beq	r2,zero,80145c <exit+0x30>
  801458:	103ee83a 	callr	r2
  80145c:	8009883a 	mov	r4,r16
  801460:	080b2100 	call	80b210 <_exit>

00801464 <printf>:
  801464:	defffb04 	addi	sp,sp,-20
  801468:	dfc00115 	stw	ra,4(sp)
  80146c:	d9400215 	stw	r5,8(sp)
  801470:	d9800315 	stw	r6,12(sp)
  801474:	d9c00415 	stw	r7,16(sp)
  801478:	00802074 	movhi	r2,129
  80147c:	10870f04 	addi	r2,r2,7228
  801480:	10c00017 	ldw	r3,0(r2)
  801484:	200b883a 	mov	r5,r4
  801488:	d8800204 	addi	r2,sp,8
  80148c:	19000217 	ldw	r4,8(r3)
  801490:	100d883a 	mov	r6,r2
  801494:	d8800015 	stw	r2,0(sp)
  801498:	08034040 	call	803404 <__vfprintf_internal>
  80149c:	dfc00117 	ldw	ra,4(sp)
  8014a0:	dec00504 	addi	sp,sp,20
  8014a4:	f800283a 	ret

008014a8 <_printf_r>:
  8014a8:	defffc04 	addi	sp,sp,-16
  8014ac:	dfc00115 	stw	ra,4(sp)
  8014b0:	d9800215 	stw	r6,8(sp)
  8014b4:	d9c00315 	stw	r7,12(sp)
  8014b8:	280d883a 	mov	r6,r5
  8014bc:	21400217 	ldw	r5,8(r4)
  8014c0:	d8c00204 	addi	r3,sp,8
  8014c4:	180f883a 	mov	r7,r3
  8014c8:	d8c00015 	stw	r3,0(sp)
  8014cc:	08015580 	call	801558 <___vfprintf_internal_r>
  8014d0:	dfc00117 	ldw	ra,4(sp)
  8014d4:	dec00404 	addi	sp,sp,16
  8014d8:	f800283a 	ret

008014dc <putchar>:
  8014dc:	00802074 	movhi	r2,129
  8014e0:	10870f04 	addi	r2,r2,7228
  8014e4:	11800017 	ldw	r6,0(r2)
  8014e8:	200b883a 	mov	r5,r4
  8014ec:	3009883a 	mov	r4,r6
  8014f0:	31800217 	ldw	r6,8(r6)
  8014f4:	0807bbc1 	jmpi	807bbc <_putc_r>

008014f8 <_putchar_r>:
  8014f8:	21800217 	ldw	r6,8(r4)
  8014fc:	0807bbc1 	jmpi	807bbc <_putc_r>

00801500 <__sprint_r>:
  801500:	30800217 	ldw	r2,8(r6)
  801504:	defffe04 	addi	sp,sp,-8
  801508:	dc000015 	stw	r16,0(sp)
  80150c:	dfc00115 	stw	ra,4(sp)
  801510:	3021883a 	mov	r16,r6
  801514:	0007883a 	mov	r3,zero
  801518:	1000061e 	bne	r2,zero,801534 <__sprint_r+0x34>
  80151c:	1805883a 	mov	r2,r3
  801520:	30000115 	stw	zero,4(r6)
  801524:	dfc00117 	ldw	ra,4(sp)
  801528:	dc000017 	ldw	r16,0(sp)
  80152c:	dec00204 	addi	sp,sp,8
  801530:	f800283a 	ret
  801534:	08058140 	call	805814 <__sfvwrite_r>
  801538:	1007883a 	mov	r3,r2
  80153c:	1805883a 	mov	r2,r3
  801540:	80000115 	stw	zero,4(r16)
  801544:	80000215 	stw	zero,8(r16)
  801548:	dfc00117 	ldw	ra,4(sp)
  80154c:	dc000017 	ldw	r16,0(sp)
  801550:	dec00204 	addi	sp,sp,8
  801554:	f800283a 	ret

00801558 <___vfprintf_internal_r>:
  801558:	defea404 	addi	sp,sp,-1392
  80155c:	dd815815 	stw	r22,1376(sp)
  801560:	dc015215 	stw	r16,1352(sp)
  801564:	d9c15115 	stw	r7,1348(sp)
  801568:	dfc15b15 	stw	ra,1388(sp)
  80156c:	df015a15 	stw	fp,1384(sp)
  801570:	ddc15915 	stw	r23,1380(sp)
  801574:	dd415715 	stw	r21,1372(sp)
  801578:	dd015615 	stw	r20,1368(sp)
  80157c:	dcc15515 	stw	r19,1364(sp)
  801580:	dc815415 	stw	r18,1360(sp)
  801584:	dc415315 	stw	r17,1356(sp)
  801588:	282d883a 	mov	r22,r5
  80158c:	3021883a 	mov	r16,r6
  801590:	d9014f15 	stw	r4,1340(sp)
  801594:	0805e380 	call	805e38 <_localeconv_r>
  801598:	10800017 	ldw	r2,0(r2)
  80159c:	d9c15117 	ldw	r7,1348(sp)
  8015a0:	d8814915 	stw	r2,1316(sp)
  8015a4:	d8814f17 	ldw	r2,1340(sp)
  8015a8:	10000226 	beq	r2,zero,8015b4 <___vfprintf_internal_r+0x5c>
  8015ac:	10800e17 	ldw	r2,56(r2)
  8015b0:	10020d26 	beq	r2,zero,801de8 <___vfprintf_internal_r+0x890>
  8015b4:	b080030b 	ldhu	r2,12(r22)
  8015b8:	1080020c 	andi	r2,r2,8
  8015bc:	10020e26 	beq	r2,zero,801df8 <___vfprintf_internal_r+0x8a0>
  8015c0:	b0800417 	ldw	r2,16(r22)
  8015c4:	10020c26 	beq	r2,zero,801df8 <___vfprintf_internal_r+0x8a0>
  8015c8:	b200030b 	ldhu	r8,12(r22)
  8015cc:	00800284 	movi	r2,10
  8015d0:	40c0068c 	andi	r3,r8,26
  8015d4:	18802f1e 	bne	r3,r2,801694 <___vfprintf_internal_r+0x13c>
  8015d8:	b080038f 	ldh	r2,14(r22)
  8015dc:	10002d16 	blt	r2,zero,801694 <___vfprintf_internal_r+0x13c>
  8015e0:	b240038b 	ldhu	r9,14(r22)
  8015e4:	b2800717 	ldw	r10,28(r22)
  8015e8:	b2c00917 	ldw	r11,36(r22)
  8015ec:	d9014f17 	ldw	r4,1340(sp)
  8015f0:	dc402904 	addi	r17,sp,164
  8015f4:	d8804004 	addi	r2,sp,256
  8015f8:	00c10004 	movi	r3,1024
  8015fc:	423fff4c 	andi	r8,r8,65533
  801600:	800d883a 	mov	r6,r16
  801604:	880b883a 	mov	r5,r17
  801608:	da002c0d 	sth	r8,176(sp)
  80160c:	da402c8d 	sth	r9,178(sp)
  801610:	da803015 	stw	r10,192(sp)
  801614:	dac03215 	stw	r11,200(sp)
  801618:	d8802d15 	stw	r2,180(sp)
  80161c:	d8c02e15 	stw	r3,184(sp)
  801620:	d8802915 	stw	r2,164(sp)
  801624:	d8c02b15 	stw	r3,172(sp)
  801628:	d8002f15 	stw	zero,188(sp)
  80162c:	08015580 	call	801558 <___vfprintf_internal_r>
  801630:	d8814b15 	stw	r2,1324(sp)
  801634:	10000416 	blt	r2,zero,801648 <___vfprintf_internal_r+0xf0>
  801638:	d9014f17 	ldw	r4,1340(sp)
  80163c:	880b883a 	mov	r5,r17
  801640:	0804ee40 	call	804ee4 <_fflush_r>
  801644:	1002321e 	bne	r2,zero,801f10 <___vfprintf_internal_r+0x9b8>
  801648:	d8802c0b 	ldhu	r2,176(sp)
  80164c:	1080100c 	andi	r2,r2,64
  801650:	10000326 	beq	r2,zero,801660 <___vfprintf_internal_r+0x108>
  801654:	b080030b 	ldhu	r2,12(r22)
  801658:	10801014 	ori	r2,r2,64
  80165c:	b080030d 	sth	r2,12(r22)
  801660:	d8814b17 	ldw	r2,1324(sp)
  801664:	dfc15b17 	ldw	ra,1388(sp)
  801668:	df015a17 	ldw	fp,1384(sp)
  80166c:	ddc15917 	ldw	r23,1380(sp)
  801670:	dd815817 	ldw	r22,1376(sp)
  801674:	dd415717 	ldw	r21,1372(sp)
  801678:	dd015617 	ldw	r20,1368(sp)
  80167c:	dcc15517 	ldw	r19,1364(sp)
  801680:	dc815417 	ldw	r18,1360(sp)
  801684:	dc415317 	ldw	r17,1356(sp)
  801688:	dc015217 	ldw	r16,1352(sp)
  80168c:	dec15c04 	addi	sp,sp,1392
  801690:	f800283a 	ret
  801694:	0005883a 	mov	r2,zero
  801698:	0007883a 	mov	r3,zero
  80169c:	dd401904 	addi	r21,sp,100
  8016a0:	d8814215 	stw	r2,1288(sp)
  8016a4:	802f883a 	mov	r23,r16
  8016a8:	d8c14315 	stw	r3,1292(sp)
  8016ac:	d8014b15 	stw	zero,1324(sp)
  8016b0:	d8014815 	stw	zero,1312(sp)
  8016b4:	d8014415 	stw	zero,1296(sp)
  8016b8:	d8014715 	stw	zero,1308(sp)
  8016bc:	dd400c15 	stw	r21,48(sp)
  8016c0:	d8000e15 	stw	zero,56(sp)
  8016c4:	d8000d15 	stw	zero,52(sp)
  8016c8:	b8800007 	ldb	r2,0(r23)
  8016cc:	10001926 	beq	r2,zero,801734 <___vfprintf_internal_r+0x1dc>
  8016d0:	00c00944 	movi	r3,37
  8016d4:	10c01726 	beq	r2,r3,801734 <___vfprintf_internal_r+0x1dc>
  8016d8:	b821883a 	mov	r16,r23
  8016dc:	00000106 	br	8016e4 <___vfprintf_internal_r+0x18c>
  8016e0:	10c00326 	beq	r2,r3,8016f0 <___vfprintf_internal_r+0x198>
  8016e4:	84000044 	addi	r16,r16,1
  8016e8:	80800007 	ldb	r2,0(r16)
  8016ec:	103ffc1e 	bne	r2,zero,8016e0 <___vfprintf_internal_r+0x188>
  8016f0:	85e7c83a 	sub	r19,r16,r23
  8016f4:	98000e26 	beq	r19,zero,801730 <___vfprintf_internal_r+0x1d8>
  8016f8:	dc800e17 	ldw	r18,56(sp)
  8016fc:	dc400d17 	ldw	r17,52(sp)
  801700:	008001c4 	movi	r2,7
  801704:	94e5883a 	add	r18,r18,r19
  801708:	8c400044 	addi	r17,r17,1
  80170c:	adc00015 	stw	r23,0(r21)
  801710:	dc800e15 	stw	r18,56(sp)
  801714:	acc00115 	stw	r19,4(r21)
  801718:	dc400d15 	stw	r17,52(sp)
  80171c:	14428b16 	blt	r2,r17,80214c <___vfprintf_internal_r+0xbf4>
  801720:	ad400204 	addi	r21,r21,8
  801724:	d9014b17 	ldw	r4,1324(sp)
  801728:	24c9883a 	add	r4,r4,r19
  80172c:	d9014b15 	stw	r4,1324(sp)
  801730:	802f883a 	mov	r23,r16
  801734:	b8800007 	ldb	r2,0(r23)
  801738:	10013c26 	beq	r2,zero,801c2c <___vfprintf_internal_r+0x6d4>
  80173c:	bdc00044 	addi	r23,r23,1
  801740:	d8000405 	stb	zero,16(sp)
  801744:	b8c00007 	ldb	r3,0(r23)
  801748:	04ffffc4 	movi	r19,-1
  80174c:	d8014c15 	stw	zero,1328(sp)
  801750:	d8014a15 	stw	zero,1320(sp)
  801754:	d8c14d15 	stw	r3,1332(sp)
  801758:	bdc00044 	addi	r23,r23,1
  80175c:	d9414d17 	ldw	r5,1332(sp)
  801760:	00801604 	movi	r2,88
  801764:	28fff804 	addi	r3,r5,-32
  801768:	10c06036 	bltu	r2,r3,8018ec <___vfprintf_internal_r+0x394>
  80176c:	18c5883a 	add	r2,r3,r3
  801770:	1085883a 	add	r2,r2,r2
  801774:	00c02034 	movhi	r3,128
  801778:	18c5e204 	addi	r3,r3,6024
  80177c:	10c5883a 	add	r2,r2,r3
  801780:	11000017 	ldw	r4,0(r2)
  801784:	2000683a 	jmp	r4
  801788:	008026fc 	xorhi	r2,zero,155
  80178c:	008018ec 	andhi	r2,zero,99
  801790:	008018ec 	andhi	r2,zero,99
  801794:	008026e8 	cmpgeui	r2,zero,155
  801798:	008018ec 	andhi	r2,zero,99
  80179c:	008018ec 	andhi	r2,zero,99
  8017a0:	008018ec 	andhi	r2,zero,99
  8017a4:	008018ec 	andhi	r2,zero,99
  8017a8:	008018ec 	andhi	r2,zero,99
  8017ac:	008018ec 	andhi	r2,zero,99
  8017b0:	008024c8 	cmpgei	r2,zero,147
  8017b4:	008026d8 	cmpnei	r2,zero,155
  8017b8:	008018ec 	andhi	r2,zero,99
  8017bc:	008024e0 	cmpeqi	r2,zero,147
  8017c0:	00802774 	movhi	r2,157
  8017c4:	008018ec 	andhi	r2,zero,99
  8017c8:	00802760 	cmpeqi	r2,zero,157
  8017cc:	00802728 	cmpgeui	r2,zero,156
  8017d0:	00802728 	cmpgeui	r2,zero,156
  8017d4:	00802728 	cmpgeui	r2,zero,156
  8017d8:	00802728 	cmpgeui	r2,zero,156
  8017dc:	00802728 	cmpgeui	r2,zero,156
  8017e0:	00802728 	cmpgeui	r2,zero,156
  8017e4:	00802728 	cmpgeui	r2,zero,156
  8017e8:	00802728 	cmpgeui	r2,zero,156
  8017ec:	00802728 	cmpgeui	r2,zero,156
  8017f0:	008018ec 	andhi	r2,zero,99
  8017f4:	008018ec 	andhi	r2,zero,99
  8017f8:	008018ec 	andhi	r2,zero,99
  8017fc:	008018ec 	andhi	r2,zero,99
  801800:	008018ec 	andhi	r2,zero,99
  801804:	008018ec 	andhi	r2,zero,99
  801808:	008018ec 	andhi	r2,zero,99
  80180c:	008018ec 	andhi	r2,zero,99
  801810:	008018ec 	andhi	r2,zero,99
  801814:	008018ec 	andhi	r2,zero,99
  801818:	00801f44 	movi	r2,125
  80181c:	008025b0 	cmpltui	r2,zero,150
  801820:	008018ec 	andhi	r2,zero,99
  801824:	008025b0 	cmpltui	r2,zero,150
  801828:	008018ec 	andhi	r2,zero,99
  80182c:	008018ec 	andhi	r2,zero,99
  801830:	008018ec 	andhi	r2,zero,99
  801834:	008018ec 	andhi	r2,zero,99
  801838:	00802714 	movui	r2,156
  80183c:	008018ec 	andhi	r2,zero,99
  801840:	008018ec 	andhi	r2,zero,99
  801844:	00801ff8 	rdprs	r2,zero,127
  801848:	008018ec 	andhi	r2,zero,99
  80184c:	008018ec 	andhi	r2,zero,99
  801850:	008018ec 	andhi	r2,zero,99
  801854:	008018ec 	andhi	r2,zero,99
  801858:	008018ec 	andhi	r2,zero,99
  80185c:	00802044 	movi	r2,129
  801860:	008018ec 	andhi	r2,zero,99
  801864:	008018ec 	andhi	r2,zero,99
  801868:	00802664 	muli	r2,zero,153
  80186c:	008018ec 	andhi	r2,zero,99
  801870:	008018ec 	andhi	r2,zero,99
  801874:	008018ec 	andhi	r2,zero,99
  801878:	008018ec 	andhi	r2,zero,99
  80187c:	008018ec 	andhi	r2,zero,99
  801880:	008018ec 	andhi	r2,zero,99
  801884:	008018ec 	andhi	r2,zero,99
  801888:	008018ec 	andhi	r2,zero,99
  80188c:	008018ec 	andhi	r2,zero,99
  801890:	008018ec 	andhi	r2,zero,99
  801894:	00802638 	rdprs	r2,zero,152
  801898:	00801f50 	cmplti	r2,zero,125
  80189c:	008025b0 	cmpltui	r2,zero,150
  8018a0:	008025b0 	cmpltui	r2,zero,150
  8018a4:	008025b0 	cmpltui	r2,zero,150
  8018a8:	0080259c 	xori	r2,zero,150
  8018ac:	00801f50 	cmplti	r2,zero,125
  8018b0:	008018ec 	andhi	r2,zero,99
  8018b4:	008018ec 	andhi	r2,zero,99
  8018b8:	00802524 	muli	r2,zero,148
  8018bc:	008018ec 	andhi	r2,zero,99
  8018c0:	008024f4 	movhi	r2,147
  8018c4:	00802004 	movi	r2,128
  8018c8:	00802554 	movui	r2,149
  8018cc:	00802540 	call	80254 <__alt_mem_sdram_0-0x77fdac>
  8018d0:	008018ec 	andhi	r2,zero,99
  8018d4:	008027d0 	cmplti	r2,zero,159
  8018d8:	008018ec 	andhi	r2,zero,99
  8018dc:	00802050 	cmplti	r2,zero,129
  8018e0:	008018ec 	andhi	r2,zero,99
  8018e4:	008018ec 	andhi	r2,zero,99
  8018e8:	008026c8 	cmpgei	r2,zero,155
  8018ec:	d9014d17 	ldw	r4,1332(sp)
  8018f0:	2000ce26 	beq	r4,zero,801c2c <___vfprintf_internal_r+0x6d4>
  8018f4:	01400044 	movi	r5,1
  8018f8:	d9800f04 	addi	r6,sp,60
  8018fc:	d9c14015 	stw	r7,1280(sp)
  801900:	d9414515 	stw	r5,1300(sp)
  801904:	d9814115 	stw	r6,1284(sp)
  801908:	280f883a 	mov	r7,r5
  80190c:	d9000f05 	stb	r4,60(sp)
  801910:	d8000405 	stb	zero,16(sp)
  801914:	d8014615 	stw	zero,1304(sp)
  801918:	d8c14c17 	ldw	r3,1328(sp)
  80191c:	1880008c 	andi	r2,r3,2
  801920:	1005003a 	cmpeq	r2,r2,zero
  801924:	d8815015 	stw	r2,1344(sp)
  801928:	1000031e 	bne	r2,zero,801938 <___vfprintf_internal_r+0x3e0>
  80192c:	d9014517 	ldw	r4,1300(sp)
  801930:	21000084 	addi	r4,r4,2
  801934:	d9014515 	stw	r4,1300(sp)
  801938:	d9414c17 	ldw	r5,1328(sp)
  80193c:	2940210c 	andi	r5,r5,132
  801940:	d9414e15 	stw	r5,1336(sp)
  801944:	28002d1e 	bne	r5,zero,8019fc <___vfprintf_internal_r+0x4a4>
  801948:	d9814a17 	ldw	r6,1320(sp)
  80194c:	d8814517 	ldw	r2,1300(sp)
  801950:	30a1c83a 	sub	r16,r6,r2
  801954:	0400290e 	bge	zero,r16,8019fc <___vfprintf_internal_r+0x4a4>
  801958:	00800404 	movi	r2,16
  80195c:	1404580e 	bge	r2,r16,802ac0 <___vfprintf_internal_r+0x1568>
  801960:	dc800e17 	ldw	r18,56(sp)
  801964:	dc400d17 	ldw	r17,52(sp)
  801968:	1027883a 	mov	r19,r2
  80196c:	07002074 	movhi	fp,129
  801970:	e73ee384 	addi	fp,fp,-1138
  801974:	050001c4 	movi	r20,7
  801978:	00000306 	br	801988 <___vfprintf_internal_r+0x430>
  80197c:	843ffc04 	addi	r16,r16,-16
  801980:	ad400204 	addi	r21,r21,8
  801984:	9c00130e 	bge	r19,r16,8019d4 <___vfprintf_internal_r+0x47c>
  801988:	94800404 	addi	r18,r18,16
  80198c:	8c400044 	addi	r17,r17,1
  801990:	af000015 	stw	fp,0(r21)
  801994:	acc00115 	stw	r19,4(r21)
  801998:	dc800e15 	stw	r18,56(sp)
  80199c:	dc400d15 	stw	r17,52(sp)
  8019a0:	a47ff60e 	bge	r20,r17,80197c <___vfprintf_internal_r+0x424>
  8019a4:	d9014f17 	ldw	r4,1340(sp)
  8019a8:	b00b883a 	mov	r5,r22
  8019ac:	d9800c04 	addi	r6,sp,48
  8019b0:	d9c15115 	stw	r7,1348(sp)
  8019b4:	08015000 	call	801500 <__sprint_r>
  8019b8:	d9c15117 	ldw	r7,1348(sp)
  8019bc:	10009e1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8019c0:	843ffc04 	addi	r16,r16,-16
  8019c4:	dc800e17 	ldw	r18,56(sp)
  8019c8:	dc400d17 	ldw	r17,52(sp)
  8019cc:	dd401904 	addi	r21,sp,100
  8019d0:	9c3fed16 	blt	r19,r16,801988 <___vfprintf_internal_r+0x430>
  8019d4:	9425883a 	add	r18,r18,r16
  8019d8:	8c400044 	addi	r17,r17,1
  8019dc:	008001c4 	movi	r2,7
  8019e0:	af000015 	stw	fp,0(r21)
  8019e4:	ac000115 	stw	r16,4(r21)
  8019e8:	dc800e15 	stw	r18,56(sp)
  8019ec:	dc400d15 	stw	r17,52(sp)
  8019f0:	1441f516 	blt	r2,r17,8021c8 <___vfprintf_internal_r+0xc70>
  8019f4:	ad400204 	addi	r21,r21,8
  8019f8:	00000206 	br	801a04 <___vfprintf_internal_r+0x4ac>
  8019fc:	dc800e17 	ldw	r18,56(sp)
  801a00:	dc400d17 	ldw	r17,52(sp)
  801a04:	d8800407 	ldb	r2,16(sp)
  801a08:	10000b26 	beq	r2,zero,801a38 <___vfprintf_internal_r+0x4e0>
  801a0c:	00800044 	movi	r2,1
  801a10:	94800044 	addi	r18,r18,1
  801a14:	8c400044 	addi	r17,r17,1
  801a18:	a8800115 	stw	r2,4(r21)
  801a1c:	d8c00404 	addi	r3,sp,16
  801a20:	008001c4 	movi	r2,7
  801a24:	a8c00015 	stw	r3,0(r21)
  801a28:	dc800e15 	stw	r18,56(sp)
  801a2c:	dc400d15 	stw	r17,52(sp)
  801a30:	1441da16 	blt	r2,r17,80219c <___vfprintf_internal_r+0xc44>
  801a34:	ad400204 	addi	r21,r21,8
  801a38:	d9015017 	ldw	r4,1344(sp)
  801a3c:	20000b1e 	bne	r4,zero,801a6c <___vfprintf_internal_r+0x514>
  801a40:	d8800444 	addi	r2,sp,17
  801a44:	94800084 	addi	r18,r18,2
  801a48:	8c400044 	addi	r17,r17,1
  801a4c:	a8800015 	stw	r2,0(r21)
  801a50:	00c00084 	movi	r3,2
  801a54:	008001c4 	movi	r2,7
  801a58:	a8c00115 	stw	r3,4(r21)
  801a5c:	dc800e15 	stw	r18,56(sp)
  801a60:	dc400d15 	stw	r17,52(sp)
  801a64:	1441c216 	blt	r2,r17,802170 <___vfprintf_internal_r+0xc18>
  801a68:	ad400204 	addi	r21,r21,8
  801a6c:	d9414e17 	ldw	r5,1336(sp)
  801a70:	00802004 	movi	r2,128
  801a74:	2880b126 	beq	r5,r2,801d3c <___vfprintf_internal_r+0x7e4>
  801a78:	d8c14617 	ldw	r3,1304(sp)
  801a7c:	19e1c83a 	sub	r16,r3,r7
  801a80:	0400260e 	bge	zero,r16,801b1c <___vfprintf_internal_r+0x5c4>
  801a84:	00800404 	movi	r2,16
  801a88:	1403c90e 	bge	r2,r16,8029b0 <___vfprintf_internal_r+0x1458>
  801a8c:	1027883a 	mov	r19,r2
  801a90:	07002074 	movhi	fp,129
  801a94:	e73edf84 	addi	fp,fp,-1154
  801a98:	050001c4 	movi	r20,7
  801a9c:	00000306 	br	801aac <___vfprintf_internal_r+0x554>
  801aa0:	843ffc04 	addi	r16,r16,-16
  801aa4:	ad400204 	addi	r21,r21,8
  801aa8:	9c00130e 	bge	r19,r16,801af8 <___vfprintf_internal_r+0x5a0>
  801aac:	94800404 	addi	r18,r18,16
  801ab0:	8c400044 	addi	r17,r17,1
  801ab4:	af000015 	stw	fp,0(r21)
  801ab8:	acc00115 	stw	r19,4(r21)
  801abc:	dc800e15 	stw	r18,56(sp)
  801ac0:	dc400d15 	stw	r17,52(sp)
  801ac4:	a47ff60e 	bge	r20,r17,801aa0 <___vfprintf_internal_r+0x548>
  801ac8:	d9014f17 	ldw	r4,1340(sp)
  801acc:	b00b883a 	mov	r5,r22
  801ad0:	d9800c04 	addi	r6,sp,48
  801ad4:	d9c15115 	stw	r7,1348(sp)
  801ad8:	08015000 	call	801500 <__sprint_r>
  801adc:	d9c15117 	ldw	r7,1348(sp)
  801ae0:	1000551e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  801ae4:	843ffc04 	addi	r16,r16,-16
  801ae8:	dc800e17 	ldw	r18,56(sp)
  801aec:	dc400d17 	ldw	r17,52(sp)
  801af0:	dd401904 	addi	r21,sp,100
  801af4:	9c3fed16 	blt	r19,r16,801aac <___vfprintf_internal_r+0x554>
  801af8:	9425883a 	add	r18,r18,r16
  801afc:	8c400044 	addi	r17,r17,1
  801b00:	008001c4 	movi	r2,7
  801b04:	af000015 	stw	fp,0(r21)
  801b08:	ac000115 	stw	r16,4(r21)
  801b0c:	dc800e15 	stw	r18,56(sp)
  801b10:	dc400d15 	stw	r17,52(sp)
  801b14:	14418216 	blt	r2,r17,802120 <___vfprintf_internal_r+0xbc8>
  801b18:	ad400204 	addi	r21,r21,8
  801b1c:	d9014c17 	ldw	r4,1328(sp)
  801b20:	2080400c 	andi	r2,r4,256
  801b24:	10004a1e 	bne	r2,zero,801c50 <___vfprintf_internal_r+0x6f8>
  801b28:	d9414117 	ldw	r5,1284(sp)
  801b2c:	91e5883a 	add	r18,r18,r7
  801b30:	8c400044 	addi	r17,r17,1
  801b34:	008001c4 	movi	r2,7
  801b38:	a9400015 	stw	r5,0(r21)
  801b3c:	a9c00115 	stw	r7,4(r21)
  801b40:	dc800e15 	stw	r18,56(sp)
  801b44:	dc400d15 	stw	r17,52(sp)
  801b48:	14416716 	blt	r2,r17,8020e8 <___vfprintf_internal_r+0xb90>
  801b4c:	a8c00204 	addi	r3,r21,8
  801b50:	d9814c17 	ldw	r6,1328(sp)
  801b54:	3080010c 	andi	r2,r6,4
  801b58:	10002826 	beq	r2,zero,801bfc <___vfprintf_internal_r+0x6a4>
  801b5c:	d8814a17 	ldw	r2,1320(sp)
  801b60:	d9014517 	ldw	r4,1300(sp)
  801b64:	1121c83a 	sub	r16,r2,r4
  801b68:	0400240e 	bge	zero,r16,801bfc <___vfprintf_internal_r+0x6a4>
  801b6c:	00800404 	movi	r2,16
  801b70:	14044f0e 	bge	r2,r16,802cb0 <___vfprintf_internal_r+0x1758>
  801b74:	dc400d17 	ldw	r17,52(sp)
  801b78:	1027883a 	mov	r19,r2
  801b7c:	07002074 	movhi	fp,129
  801b80:	e73ee384 	addi	fp,fp,-1138
  801b84:	050001c4 	movi	r20,7
  801b88:	00000306 	br	801b98 <___vfprintf_internal_r+0x640>
  801b8c:	843ffc04 	addi	r16,r16,-16
  801b90:	18c00204 	addi	r3,r3,8
  801b94:	9c00110e 	bge	r19,r16,801bdc <___vfprintf_internal_r+0x684>
  801b98:	94800404 	addi	r18,r18,16
  801b9c:	8c400044 	addi	r17,r17,1
  801ba0:	1f000015 	stw	fp,0(r3)
  801ba4:	1cc00115 	stw	r19,4(r3)
  801ba8:	dc800e15 	stw	r18,56(sp)
  801bac:	dc400d15 	stw	r17,52(sp)
  801bb0:	a47ff60e 	bge	r20,r17,801b8c <___vfprintf_internal_r+0x634>
  801bb4:	d9014f17 	ldw	r4,1340(sp)
  801bb8:	b00b883a 	mov	r5,r22
  801bbc:	d9800c04 	addi	r6,sp,48
  801bc0:	08015000 	call	801500 <__sprint_r>
  801bc4:	10001c1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  801bc8:	843ffc04 	addi	r16,r16,-16
  801bcc:	dc800e17 	ldw	r18,56(sp)
  801bd0:	dc400d17 	ldw	r17,52(sp)
  801bd4:	d8c01904 	addi	r3,sp,100
  801bd8:	9c3fef16 	blt	r19,r16,801b98 <___vfprintf_internal_r+0x640>
  801bdc:	9425883a 	add	r18,r18,r16
  801be0:	8c400044 	addi	r17,r17,1
  801be4:	008001c4 	movi	r2,7
  801be8:	1f000015 	stw	fp,0(r3)
  801bec:	1c000115 	stw	r16,4(r3)
  801bf0:	dc800e15 	stw	r18,56(sp)
  801bf4:	dc400d15 	stw	r17,52(sp)
  801bf8:	1440cb16 	blt	r2,r17,801f28 <___vfprintf_internal_r+0x9d0>
  801bfc:	d8814a17 	ldw	r2,1320(sp)
  801c00:	d9414517 	ldw	r5,1300(sp)
  801c04:	1140010e 	bge	r2,r5,801c0c <___vfprintf_internal_r+0x6b4>
  801c08:	2805883a 	mov	r2,r5
  801c0c:	d9814b17 	ldw	r6,1324(sp)
  801c10:	308d883a 	add	r6,r6,r2
  801c14:	d9814b15 	stw	r6,1324(sp)
  801c18:	90013b1e 	bne	r18,zero,802108 <___vfprintf_internal_r+0xbb0>
  801c1c:	d9c14017 	ldw	r7,1280(sp)
  801c20:	dd401904 	addi	r21,sp,100
  801c24:	d8000d15 	stw	zero,52(sp)
  801c28:	003ea706 	br	8016c8 <___vfprintf_internal_r+0x170>
  801c2c:	d8800e17 	ldw	r2,56(sp)
  801c30:	10053f1e 	bne	r2,zero,803130 <___vfprintf_internal_r+0x1bd8>
  801c34:	d8000d15 	stw	zero,52(sp)
  801c38:	b080030b 	ldhu	r2,12(r22)
  801c3c:	1080100c 	andi	r2,r2,64
  801c40:	103e8726 	beq	r2,zero,801660 <___vfprintf_internal_r+0x108>
  801c44:	00bfffc4 	movi	r2,-1
  801c48:	d8814b15 	stw	r2,1324(sp)
  801c4c:	003e8406 	br	801660 <___vfprintf_internal_r+0x108>
  801c50:	d9814d17 	ldw	r6,1332(sp)
  801c54:	00801944 	movi	r2,101
  801c58:	11806e16 	blt	r2,r6,801e14 <___vfprintf_internal_r+0x8bc>
  801c5c:	d9414717 	ldw	r5,1308(sp)
  801c60:	00c00044 	movi	r3,1
  801c64:	1943430e 	bge	r3,r5,802974 <___vfprintf_internal_r+0x141c>
  801c68:	d8814117 	ldw	r2,1284(sp)
  801c6c:	94800044 	addi	r18,r18,1
  801c70:	8c400044 	addi	r17,r17,1
  801c74:	a8800015 	stw	r2,0(r21)
  801c78:	008001c4 	movi	r2,7
  801c7c:	a8c00115 	stw	r3,4(r21)
  801c80:	dc800e15 	stw	r18,56(sp)
  801c84:	dc400d15 	stw	r17,52(sp)
  801c88:	1441ca16 	blt	r2,r17,8023b4 <___vfprintf_internal_r+0xe5c>
  801c8c:	a8c00204 	addi	r3,r21,8
  801c90:	d9014917 	ldw	r4,1316(sp)
  801c94:	00800044 	movi	r2,1
  801c98:	94800044 	addi	r18,r18,1
  801c9c:	8c400044 	addi	r17,r17,1
  801ca0:	18800115 	stw	r2,4(r3)
  801ca4:	008001c4 	movi	r2,7
  801ca8:	19000015 	stw	r4,0(r3)
  801cac:	dc800e15 	stw	r18,56(sp)
  801cb0:	dc400d15 	stw	r17,52(sp)
  801cb4:	1441b616 	blt	r2,r17,802390 <___vfprintf_internal_r+0xe38>
  801cb8:	1cc00204 	addi	r19,r3,8
  801cbc:	d9014217 	ldw	r4,1288(sp)
  801cc0:	d9414317 	ldw	r5,1292(sp)
  801cc4:	000d883a 	mov	r6,zero
  801cc8:	000f883a 	mov	r7,zero
  801ccc:	080a3080 	call	80a308 <__nedf2>
  801cd0:	10017426 	beq	r2,zero,8022a4 <___vfprintf_internal_r+0xd4c>
  801cd4:	d9414717 	ldw	r5,1308(sp)
  801cd8:	d9814117 	ldw	r6,1284(sp)
  801cdc:	8c400044 	addi	r17,r17,1
  801ce0:	2c85883a 	add	r2,r5,r18
  801ce4:	14bfffc4 	addi	r18,r2,-1
  801ce8:	28bfffc4 	addi	r2,r5,-1
  801cec:	30c00044 	addi	r3,r6,1
  801cf0:	98800115 	stw	r2,4(r19)
  801cf4:	008001c4 	movi	r2,7
  801cf8:	98c00015 	stw	r3,0(r19)
  801cfc:	dc800e15 	stw	r18,56(sp)
  801d00:	dc400d15 	stw	r17,52(sp)
  801d04:	14418e16 	blt	r2,r17,802340 <___vfprintf_internal_r+0xde8>
  801d08:	9cc00204 	addi	r19,r19,8
  801d0c:	d9414817 	ldw	r5,1312(sp)
  801d10:	d8800804 	addi	r2,sp,32
  801d14:	8c400044 	addi	r17,r17,1
  801d18:	9165883a 	add	r18,r18,r5
  801d1c:	98800015 	stw	r2,0(r19)
  801d20:	008001c4 	movi	r2,7
  801d24:	99400115 	stw	r5,4(r19)
  801d28:	dc800e15 	stw	r18,56(sp)
  801d2c:	dc400d15 	stw	r17,52(sp)
  801d30:	1440ed16 	blt	r2,r17,8020e8 <___vfprintf_internal_r+0xb90>
  801d34:	98c00204 	addi	r3,r19,8
  801d38:	003f8506 	br	801b50 <___vfprintf_internal_r+0x5f8>
  801d3c:	d9814a17 	ldw	r6,1320(sp)
  801d40:	d8814517 	ldw	r2,1300(sp)
  801d44:	30a1c83a 	sub	r16,r6,r2
  801d48:	043f4b0e 	bge	zero,r16,801a78 <___vfprintf_internal_r+0x520>
  801d4c:	00800404 	movi	r2,16
  801d50:	1404340e 	bge	r2,r16,802e24 <___vfprintf_internal_r+0x18cc>
  801d54:	1027883a 	mov	r19,r2
  801d58:	07002074 	movhi	fp,129
  801d5c:	e73edf84 	addi	fp,fp,-1154
  801d60:	050001c4 	movi	r20,7
  801d64:	00000306 	br	801d74 <___vfprintf_internal_r+0x81c>
  801d68:	843ffc04 	addi	r16,r16,-16
  801d6c:	ad400204 	addi	r21,r21,8
  801d70:	9c00130e 	bge	r19,r16,801dc0 <___vfprintf_internal_r+0x868>
  801d74:	94800404 	addi	r18,r18,16
  801d78:	8c400044 	addi	r17,r17,1
  801d7c:	af000015 	stw	fp,0(r21)
  801d80:	acc00115 	stw	r19,4(r21)
  801d84:	dc800e15 	stw	r18,56(sp)
  801d88:	dc400d15 	stw	r17,52(sp)
  801d8c:	a47ff60e 	bge	r20,r17,801d68 <___vfprintf_internal_r+0x810>
  801d90:	d9014f17 	ldw	r4,1340(sp)
  801d94:	b00b883a 	mov	r5,r22
  801d98:	d9800c04 	addi	r6,sp,48
  801d9c:	d9c15115 	stw	r7,1348(sp)
  801da0:	08015000 	call	801500 <__sprint_r>
  801da4:	d9c15117 	ldw	r7,1348(sp)
  801da8:	103fa31e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  801dac:	843ffc04 	addi	r16,r16,-16
  801db0:	dc800e17 	ldw	r18,56(sp)
  801db4:	dc400d17 	ldw	r17,52(sp)
  801db8:	dd401904 	addi	r21,sp,100
  801dbc:	9c3fed16 	blt	r19,r16,801d74 <___vfprintf_internal_r+0x81c>
  801dc0:	9425883a 	add	r18,r18,r16
  801dc4:	8c400044 	addi	r17,r17,1
  801dc8:	008001c4 	movi	r2,7
  801dcc:	af000015 	stw	fp,0(r21)
  801dd0:	ac000115 	stw	r16,4(r21)
  801dd4:	dc800e15 	stw	r18,56(sp)
  801dd8:	dc400d15 	stw	r17,52(sp)
  801ddc:	14416116 	blt	r2,r17,802364 <___vfprintf_internal_r+0xe0c>
  801de0:	ad400204 	addi	r21,r21,8
  801de4:	003f2406 	br	801a78 <___vfprintf_internal_r+0x520>
  801de8:	d9014f17 	ldw	r4,1340(sp)
  801dec:	080517c0 	call	80517c <__sinit>
  801df0:	d9c15117 	ldw	r7,1348(sp)
  801df4:	003def06 	br	8015b4 <___vfprintf_internal_r+0x5c>
  801df8:	d9014f17 	ldw	r4,1340(sp)
  801dfc:	b00b883a 	mov	r5,r22
  801e00:	d9c15115 	stw	r7,1348(sp)
  801e04:	08034280 	call	803428 <__swsetup_r>
  801e08:	d9c15117 	ldw	r7,1348(sp)
  801e0c:	103dee26 	beq	r2,zero,8015c8 <___vfprintf_internal_r+0x70>
  801e10:	003f8c06 	br	801c44 <___vfprintf_internal_r+0x6ec>
  801e14:	d9014217 	ldw	r4,1288(sp)
  801e18:	d9414317 	ldw	r5,1292(sp)
  801e1c:	000d883a 	mov	r6,zero
  801e20:	000f883a 	mov	r7,zero
  801e24:	080a2800 	call	80a280 <__eqdf2>
  801e28:	1000f21e 	bne	r2,zero,8021f4 <___vfprintf_internal_r+0xc9c>
  801e2c:	00802074 	movhi	r2,129
  801e30:	10beb804 	addi	r2,r2,-1312
  801e34:	94800044 	addi	r18,r18,1
  801e38:	8c400044 	addi	r17,r17,1
  801e3c:	a8800015 	stw	r2,0(r21)
  801e40:	00c00044 	movi	r3,1
  801e44:	008001c4 	movi	r2,7
  801e48:	a8c00115 	stw	r3,4(r21)
  801e4c:	dc800e15 	stw	r18,56(sp)
  801e50:	dc400d15 	stw	r17,52(sp)
  801e54:	1442fa16 	blt	r2,r17,802a40 <___vfprintf_internal_r+0x14e8>
  801e58:	a8c00204 	addi	r3,r21,8
  801e5c:	d8800517 	ldw	r2,20(sp)
  801e60:	d9014717 	ldw	r4,1308(sp)
  801e64:	11015c0e 	bge	r2,r4,8023d8 <___vfprintf_internal_r+0xe80>
  801e68:	dc400d17 	ldw	r17,52(sp)
  801e6c:	d9814917 	ldw	r6,1316(sp)
  801e70:	00800044 	movi	r2,1
  801e74:	94800044 	addi	r18,r18,1
  801e78:	8c400044 	addi	r17,r17,1
  801e7c:	18800115 	stw	r2,4(r3)
  801e80:	008001c4 	movi	r2,7
  801e84:	19800015 	stw	r6,0(r3)
  801e88:	dc800e15 	stw	r18,56(sp)
  801e8c:	dc400d15 	stw	r17,52(sp)
  801e90:	14431016 	blt	r2,r17,802ad4 <___vfprintf_internal_r+0x157c>
  801e94:	18c00204 	addi	r3,r3,8
  801e98:	d8814717 	ldw	r2,1308(sp)
  801e9c:	143fffc4 	addi	r16,r2,-1
  801ea0:	043f2b0e 	bge	zero,r16,801b50 <___vfprintf_internal_r+0x5f8>
  801ea4:	00800404 	movi	r2,16
  801ea8:	1402a20e 	bge	r2,r16,802934 <___vfprintf_internal_r+0x13dc>
  801eac:	dc400d17 	ldw	r17,52(sp)
  801eb0:	1027883a 	mov	r19,r2
  801eb4:	07002074 	movhi	fp,129
  801eb8:	e73edf84 	addi	fp,fp,-1154
  801ebc:	050001c4 	movi	r20,7
  801ec0:	00000306 	br	801ed0 <___vfprintf_internal_r+0x978>
  801ec4:	18c00204 	addi	r3,r3,8
  801ec8:	843ffc04 	addi	r16,r16,-16
  801ecc:	9c029c0e 	bge	r19,r16,802940 <___vfprintf_internal_r+0x13e8>
  801ed0:	94800404 	addi	r18,r18,16
  801ed4:	8c400044 	addi	r17,r17,1
  801ed8:	1f000015 	stw	fp,0(r3)
  801edc:	1cc00115 	stw	r19,4(r3)
  801ee0:	dc800e15 	stw	r18,56(sp)
  801ee4:	dc400d15 	stw	r17,52(sp)
  801ee8:	a47ff60e 	bge	r20,r17,801ec4 <___vfprintf_internal_r+0x96c>
  801eec:	d9014f17 	ldw	r4,1340(sp)
  801ef0:	b00b883a 	mov	r5,r22
  801ef4:	d9800c04 	addi	r6,sp,48
  801ef8:	08015000 	call	801500 <__sprint_r>
  801efc:	103f4e1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  801f00:	dc800e17 	ldw	r18,56(sp)
  801f04:	dc400d17 	ldw	r17,52(sp)
  801f08:	d8c01904 	addi	r3,sp,100
  801f0c:	003fee06 	br	801ec8 <___vfprintf_internal_r+0x970>
  801f10:	d8802c0b 	ldhu	r2,176(sp)
  801f14:	00ffffc4 	movi	r3,-1
  801f18:	d8c14b15 	stw	r3,1324(sp)
  801f1c:	1080100c 	andi	r2,r2,64
  801f20:	103dcc1e 	bne	r2,zero,801654 <___vfprintf_internal_r+0xfc>
  801f24:	003dce06 	br	801660 <___vfprintf_internal_r+0x108>
  801f28:	d9014f17 	ldw	r4,1340(sp)
  801f2c:	b00b883a 	mov	r5,r22
  801f30:	d9800c04 	addi	r6,sp,48
  801f34:	08015000 	call	801500 <__sprint_r>
  801f38:	103f3f1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  801f3c:	dc800e17 	ldw	r18,56(sp)
  801f40:	003f2e06 	br	801bfc <___vfprintf_internal_r+0x6a4>
  801f44:	d9414c17 	ldw	r5,1328(sp)
  801f48:	29400414 	ori	r5,r5,16
  801f4c:	d9414c15 	stw	r5,1328(sp)
  801f50:	d9814c17 	ldw	r6,1328(sp)
  801f54:	3080080c 	andi	r2,r6,32
  801f58:	10014f1e 	bne	r2,zero,802498 <___vfprintf_internal_r+0xf40>
  801f5c:	d8c14c17 	ldw	r3,1328(sp)
  801f60:	1880040c 	andi	r2,r3,16
  801f64:	1002ea1e 	bne	r2,zero,802b10 <___vfprintf_internal_r+0x15b8>
  801f68:	d9014c17 	ldw	r4,1328(sp)
  801f6c:	2080100c 	andi	r2,r4,64
  801f70:	1002e726 	beq	r2,zero,802b10 <___vfprintf_internal_r+0x15b8>
  801f74:	3880000f 	ldh	r2,0(r7)
  801f78:	39c00104 	addi	r7,r7,4
  801f7c:	d9c14015 	stw	r7,1280(sp)
  801f80:	1023d7fa 	srai	r17,r2,31
  801f84:	1021883a 	mov	r16,r2
  801f88:	88037216 	blt	r17,zero,802d54 <___vfprintf_internal_r+0x17fc>
  801f8c:	01000044 	movi	r4,1
  801f90:	98000416 	blt	r19,zero,801fa4 <___vfprintf_internal_r+0xa4c>
  801f94:	d8c14c17 	ldw	r3,1328(sp)
  801f98:	00bfdfc4 	movi	r2,-129
  801f9c:	1886703a 	and	r3,r3,r2
  801fa0:	d8c14c15 	stw	r3,1328(sp)
  801fa4:	8444b03a 	or	r2,r16,r17
  801fa8:	1002261e 	bne	r2,zero,802844 <___vfprintf_internal_r+0x12ec>
  801fac:	9802251e 	bne	r19,zero,802844 <___vfprintf_internal_r+0x12ec>
  801fb0:	20803fcc 	andi	r2,r4,255
  801fb4:	10029b26 	beq	r2,zero,802a24 <___vfprintf_internal_r+0x14cc>
  801fb8:	d8c01904 	addi	r3,sp,100
  801fbc:	dd000f04 	addi	r20,sp,60
  801fc0:	d8c14115 	stw	r3,1284(sp)
  801fc4:	d8c14117 	ldw	r3,1284(sp)
  801fc8:	dcc14515 	stw	r19,1300(sp)
  801fcc:	a0c5c83a 	sub	r2,r20,r3
  801fd0:	11c00a04 	addi	r7,r2,40
  801fd4:	99c0010e 	bge	r19,r7,801fdc <___vfprintf_internal_r+0xa84>
  801fd8:	d9c14515 	stw	r7,1300(sp)
  801fdc:	dcc14615 	stw	r19,1304(sp)
  801fe0:	d8800407 	ldb	r2,16(sp)
  801fe4:	103e4c26 	beq	r2,zero,801918 <___vfprintf_internal_r+0x3c0>
  801fe8:	d8814517 	ldw	r2,1300(sp)
  801fec:	10800044 	addi	r2,r2,1
  801ff0:	d8814515 	stw	r2,1300(sp)
  801ff4:	003e4806 	br	801918 <___vfprintf_internal_r+0x3c0>
  801ff8:	d9814c17 	ldw	r6,1328(sp)
  801ffc:	31800414 	ori	r6,r6,16
  802000:	d9814c15 	stw	r6,1328(sp)
  802004:	d8c14c17 	ldw	r3,1328(sp)
  802008:	1880080c 	andi	r2,r3,32
  80200c:	1001271e 	bne	r2,zero,8024ac <___vfprintf_internal_r+0xf54>
  802010:	d9414c17 	ldw	r5,1328(sp)
  802014:	2880040c 	andi	r2,r5,16
  802018:	1002b61e 	bne	r2,zero,802af4 <___vfprintf_internal_r+0x159c>
  80201c:	d9814c17 	ldw	r6,1328(sp)
  802020:	3080100c 	andi	r2,r6,64
  802024:	1002b326 	beq	r2,zero,802af4 <___vfprintf_internal_r+0x159c>
  802028:	3c00000b 	ldhu	r16,0(r7)
  80202c:	0009883a 	mov	r4,zero
  802030:	39c00104 	addi	r7,r7,4
  802034:	0023883a 	mov	r17,zero
  802038:	d9c14015 	stw	r7,1280(sp)
  80203c:	d8000405 	stb	zero,16(sp)
  802040:	003fd306 	br	801f90 <___vfprintf_internal_r+0xa38>
  802044:	d9014c17 	ldw	r4,1328(sp)
  802048:	21000414 	ori	r4,r4,16
  80204c:	d9014c15 	stw	r4,1328(sp)
  802050:	d9414c17 	ldw	r5,1328(sp)
  802054:	2880080c 	andi	r2,r5,32
  802058:	1001081e 	bne	r2,zero,80247c <___vfprintf_internal_r+0xf24>
  80205c:	d8c14c17 	ldw	r3,1328(sp)
  802060:	1880040c 	andi	r2,r3,16
  802064:	1002b01e 	bne	r2,zero,802b28 <___vfprintf_internal_r+0x15d0>
  802068:	d9014c17 	ldw	r4,1328(sp)
  80206c:	2080100c 	andi	r2,r4,64
  802070:	1002ad26 	beq	r2,zero,802b28 <___vfprintf_internal_r+0x15d0>
  802074:	3c00000b 	ldhu	r16,0(r7)
  802078:	01000044 	movi	r4,1
  80207c:	39c00104 	addi	r7,r7,4
  802080:	0023883a 	mov	r17,zero
  802084:	d9c14015 	stw	r7,1280(sp)
  802088:	d8000405 	stb	zero,16(sp)
  80208c:	003fc006 	br	801f90 <___vfprintf_internal_r+0xa38>
  802090:	d9014f17 	ldw	r4,1340(sp)
  802094:	b00b883a 	mov	r5,r22
  802098:	d9800c04 	addi	r6,sp,48
  80209c:	08015000 	call	801500 <__sprint_r>
  8020a0:	103ee51e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8020a4:	dc800e17 	ldw	r18,56(sp)
  8020a8:	d8c01904 	addi	r3,sp,100
  8020ac:	d9814c17 	ldw	r6,1328(sp)
  8020b0:	3080004c 	andi	r2,r6,1
  8020b4:	1005003a 	cmpeq	r2,r2,zero
  8020b8:	103ea51e 	bne	r2,zero,801b50 <___vfprintf_internal_r+0x5f8>
  8020bc:	00800044 	movi	r2,1
  8020c0:	dc400d17 	ldw	r17,52(sp)
  8020c4:	18800115 	stw	r2,4(r3)
  8020c8:	d8814917 	ldw	r2,1316(sp)
  8020cc:	94800044 	addi	r18,r18,1
  8020d0:	8c400044 	addi	r17,r17,1
  8020d4:	18800015 	stw	r2,0(r3)
  8020d8:	008001c4 	movi	r2,7
  8020dc:	dc800e15 	stw	r18,56(sp)
  8020e0:	dc400d15 	stw	r17,52(sp)
  8020e4:	14421e0e 	bge	r2,r17,802960 <___vfprintf_internal_r+0x1408>
  8020e8:	d9014f17 	ldw	r4,1340(sp)
  8020ec:	b00b883a 	mov	r5,r22
  8020f0:	d9800c04 	addi	r6,sp,48
  8020f4:	08015000 	call	801500 <__sprint_r>
  8020f8:	103ecf1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8020fc:	dc800e17 	ldw	r18,56(sp)
  802100:	d8c01904 	addi	r3,sp,100
  802104:	003e9206 	br	801b50 <___vfprintf_internal_r+0x5f8>
  802108:	d9014f17 	ldw	r4,1340(sp)
  80210c:	b00b883a 	mov	r5,r22
  802110:	d9800c04 	addi	r6,sp,48
  802114:	08015000 	call	801500 <__sprint_r>
  802118:	103ec026 	beq	r2,zero,801c1c <___vfprintf_internal_r+0x6c4>
  80211c:	003ec606 	br	801c38 <___vfprintf_internal_r+0x6e0>
  802120:	d9014f17 	ldw	r4,1340(sp)
  802124:	b00b883a 	mov	r5,r22
  802128:	d9800c04 	addi	r6,sp,48
  80212c:	d9c15115 	stw	r7,1348(sp)
  802130:	08015000 	call	801500 <__sprint_r>
  802134:	d9c15117 	ldw	r7,1348(sp)
  802138:	103ebf1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  80213c:	dc800e17 	ldw	r18,56(sp)
  802140:	dc400d17 	ldw	r17,52(sp)
  802144:	dd401904 	addi	r21,sp,100
  802148:	003e7406 	br	801b1c <___vfprintf_internal_r+0x5c4>
  80214c:	d9014f17 	ldw	r4,1340(sp)
  802150:	b00b883a 	mov	r5,r22
  802154:	d9800c04 	addi	r6,sp,48
  802158:	d9c15115 	stw	r7,1348(sp)
  80215c:	08015000 	call	801500 <__sprint_r>
  802160:	d9c15117 	ldw	r7,1348(sp)
  802164:	103eb41e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802168:	dd401904 	addi	r21,sp,100
  80216c:	003d6d06 	br	801724 <___vfprintf_internal_r+0x1cc>
  802170:	d9014f17 	ldw	r4,1340(sp)
  802174:	b00b883a 	mov	r5,r22
  802178:	d9800c04 	addi	r6,sp,48
  80217c:	d9c15115 	stw	r7,1348(sp)
  802180:	08015000 	call	801500 <__sprint_r>
  802184:	d9c15117 	ldw	r7,1348(sp)
  802188:	103eab1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  80218c:	dc800e17 	ldw	r18,56(sp)
  802190:	dc400d17 	ldw	r17,52(sp)
  802194:	dd401904 	addi	r21,sp,100
  802198:	003e3406 	br	801a6c <___vfprintf_internal_r+0x514>
  80219c:	d9014f17 	ldw	r4,1340(sp)
  8021a0:	b00b883a 	mov	r5,r22
  8021a4:	d9800c04 	addi	r6,sp,48
  8021a8:	d9c15115 	stw	r7,1348(sp)
  8021ac:	08015000 	call	801500 <__sprint_r>
  8021b0:	d9c15117 	ldw	r7,1348(sp)
  8021b4:	103ea01e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8021b8:	dc800e17 	ldw	r18,56(sp)
  8021bc:	dc400d17 	ldw	r17,52(sp)
  8021c0:	dd401904 	addi	r21,sp,100
  8021c4:	003e1c06 	br	801a38 <___vfprintf_internal_r+0x4e0>
  8021c8:	d9014f17 	ldw	r4,1340(sp)
  8021cc:	b00b883a 	mov	r5,r22
  8021d0:	d9800c04 	addi	r6,sp,48
  8021d4:	d9c15115 	stw	r7,1348(sp)
  8021d8:	08015000 	call	801500 <__sprint_r>
  8021dc:	d9c15117 	ldw	r7,1348(sp)
  8021e0:	103e951e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8021e4:	dc800e17 	ldw	r18,56(sp)
  8021e8:	dc400d17 	ldw	r17,52(sp)
  8021ec:	dd401904 	addi	r21,sp,100
  8021f0:	003e0406 	br	801a04 <___vfprintf_internal_r+0x4ac>
  8021f4:	d9000517 	ldw	r4,20(sp)
  8021f8:	0102520e 	bge	zero,r4,802b44 <___vfprintf_internal_r+0x15ec>
  8021fc:	d9814717 	ldw	r6,1308(sp)
  802200:	21807a16 	blt	r4,r6,8023ec <___vfprintf_internal_r+0xe94>
  802204:	d8814117 	ldw	r2,1284(sp)
  802208:	91a5883a 	add	r18,r18,r6
  80220c:	8c400044 	addi	r17,r17,1
  802210:	a8800015 	stw	r2,0(r21)
  802214:	008001c4 	movi	r2,7
  802218:	a9800115 	stw	r6,4(r21)
  80221c:	dc800e15 	stw	r18,56(sp)
  802220:	dc400d15 	stw	r17,52(sp)
  802224:	1442f616 	blt	r2,r17,802e00 <___vfprintf_internal_r+0x18a8>
  802228:	a8c00204 	addi	r3,r21,8
  80222c:	d9414717 	ldw	r5,1308(sp)
  802230:	2161c83a 	sub	r16,r4,r5
  802234:	043f9d0e 	bge	zero,r16,8020ac <___vfprintf_internal_r+0xb54>
  802238:	00800404 	movi	r2,16
  80223c:	1402130e 	bge	r2,r16,802a8c <___vfprintf_internal_r+0x1534>
  802240:	dc400d17 	ldw	r17,52(sp)
  802244:	1027883a 	mov	r19,r2
  802248:	07002074 	movhi	fp,129
  80224c:	e73edf84 	addi	fp,fp,-1154
  802250:	050001c4 	movi	r20,7
  802254:	00000306 	br	802264 <___vfprintf_internal_r+0xd0c>
  802258:	18c00204 	addi	r3,r3,8
  80225c:	843ffc04 	addi	r16,r16,-16
  802260:	9c020d0e 	bge	r19,r16,802a98 <___vfprintf_internal_r+0x1540>
  802264:	94800404 	addi	r18,r18,16
  802268:	8c400044 	addi	r17,r17,1
  80226c:	1f000015 	stw	fp,0(r3)
  802270:	1cc00115 	stw	r19,4(r3)
  802274:	dc800e15 	stw	r18,56(sp)
  802278:	dc400d15 	stw	r17,52(sp)
  80227c:	a47ff60e 	bge	r20,r17,802258 <___vfprintf_internal_r+0xd00>
  802280:	d9014f17 	ldw	r4,1340(sp)
  802284:	b00b883a 	mov	r5,r22
  802288:	d9800c04 	addi	r6,sp,48
  80228c:	08015000 	call	801500 <__sprint_r>
  802290:	103e691e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802294:	dc800e17 	ldw	r18,56(sp)
  802298:	dc400d17 	ldw	r17,52(sp)
  80229c:	d8c01904 	addi	r3,sp,100
  8022a0:	003fee06 	br	80225c <___vfprintf_internal_r+0xd04>
  8022a4:	d8814717 	ldw	r2,1308(sp)
  8022a8:	143fffc4 	addi	r16,r2,-1
  8022ac:	043e970e 	bge	zero,r16,801d0c <___vfprintf_internal_r+0x7b4>
  8022b0:	00800404 	movi	r2,16
  8022b4:	1400180e 	bge	r2,r16,802318 <___vfprintf_internal_r+0xdc0>
  8022b8:	1029883a 	mov	r20,r2
  8022bc:	07002074 	movhi	fp,129
  8022c0:	e73edf84 	addi	fp,fp,-1154
  8022c4:	054001c4 	movi	r21,7
  8022c8:	00000306 	br	8022d8 <___vfprintf_internal_r+0xd80>
  8022cc:	9cc00204 	addi	r19,r19,8
  8022d0:	843ffc04 	addi	r16,r16,-16
  8022d4:	a400120e 	bge	r20,r16,802320 <___vfprintf_internal_r+0xdc8>
  8022d8:	94800404 	addi	r18,r18,16
  8022dc:	8c400044 	addi	r17,r17,1
  8022e0:	9f000015 	stw	fp,0(r19)
  8022e4:	9d000115 	stw	r20,4(r19)
  8022e8:	dc800e15 	stw	r18,56(sp)
  8022ec:	dc400d15 	stw	r17,52(sp)
  8022f0:	ac7ff60e 	bge	r21,r17,8022cc <___vfprintf_internal_r+0xd74>
  8022f4:	d9014f17 	ldw	r4,1340(sp)
  8022f8:	b00b883a 	mov	r5,r22
  8022fc:	d9800c04 	addi	r6,sp,48
  802300:	08015000 	call	801500 <__sprint_r>
  802304:	103e4c1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802308:	dc800e17 	ldw	r18,56(sp)
  80230c:	dc400d17 	ldw	r17,52(sp)
  802310:	dcc01904 	addi	r19,sp,100
  802314:	003fee06 	br	8022d0 <___vfprintf_internal_r+0xd78>
  802318:	07002074 	movhi	fp,129
  80231c:	e73edf84 	addi	fp,fp,-1154
  802320:	9425883a 	add	r18,r18,r16
  802324:	8c400044 	addi	r17,r17,1
  802328:	008001c4 	movi	r2,7
  80232c:	9f000015 	stw	fp,0(r19)
  802330:	9c000115 	stw	r16,4(r19)
  802334:	dc800e15 	stw	r18,56(sp)
  802338:	dc400d15 	stw	r17,52(sp)
  80233c:	147e720e 	bge	r2,r17,801d08 <___vfprintf_internal_r+0x7b0>
  802340:	d9014f17 	ldw	r4,1340(sp)
  802344:	b00b883a 	mov	r5,r22
  802348:	d9800c04 	addi	r6,sp,48
  80234c:	08015000 	call	801500 <__sprint_r>
  802350:	103e391e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802354:	dc800e17 	ldw	r18,56(sp)
  802358:	dc400d17 	ldw	r17,52(sp)
  80235c:	dcc01904 	addi	r19,sp,100
  802360:	003e6a06 	br	801d0c <___vfprintf_internal_r+0x7b4>
  802364:	d9014f17 	ldw	r4,1340(sp)
  802368:	b00b883a 	mov	r5,r22
  80236c:	d9800c04 	addi	r6,sp,48
  802370:	d9c15115 	stw	r7,1348(sp)
  802374:	08015000 	call	801500 <__sprint_r>
  802378:	d9c15117 	ldw	r7,1348(sp)
  80237c:	103e2e1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802380:	dc800e17 	ldw	r18,56(sp)
  802384:	dc400d17 	ldw	r17,52(sp)
  802388:	dd401904 	addi	r21,sp,100
  80238c:	003dba06 	br	801a78 <___vfprintf_internal_r+0x520>
  802390:	d9014f17 	ldw	r4,1340(sp)
  802394:	b00b883a 	mov	r5,r22
  802398:	d9800c04 	addi	r6,sp,48
  80239c:	08015000 	call	801500 <__sprint_r>
  8023a0:	103e251e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8023a4:	dc800e17 	ldw	r18,56(sp)
  8023a8:	dc400d17 	ldw	r17,52(sp)
  8023ac:	dcc01904 	addi	r19,sp,100
  8023b0:	003e4206 	br	801cbc <___vfprintf_internal_r+0x764>
  8023b4:	d9014f17 	ldw	r4,1340(sp)
  8023b8:	b00b883a 	mov	r5,r22
  8023bc:	d9800c04 	addi	r6,sp,48
  8023c0:	08015000 	call	801500 <__sprint_r>
  8023c4:	103e1c1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  8023c8:	dc800e17 	ldw	r18,56(sp)
  8023cc:	dc400d17 	ldw	r17,52(sp)
  8023d0:	d8c01904 	addi	r3,sp,100
  8023d4:	003e2e06 	br	801c90 <___vfprintf_internal_r+0x738>
  8023d8:	d9414c17 	ldw	r5,1328(sp)
  8023dc:	2880004c 	andi	r2,r5,1
  8023e0:	1005003a 	cmpeq	r2,r2,zero
  8023e4:	103dda1e 	bne	r2,zero,801b50 <___vfprintf_internal_r+0x5f8>
  8023e8:	003e9f06 	br	801e68 <___vfprintf_internal_r+0x910>
  8023ec:	d8c14117 	ldw	r3,1284(sp)
  8023f0:	9125883a 	add	r18,r18,r4
  8023f4:	8c400044 	addi	r17,r17,1
  8023f8:	008001c4 	movi	r2,7
  8023fc:	a8c00015 	stw	r3,0(r21)
  802400:	a9000115 	stw	r4,4(r21)
  802404:	dc800e15 	stw	r18,56(sp)
  802408:	dc400d15 	stw	r17,52(sp)
  80240c:	14426616 	blt	r2,r17,802da8 <___vfprintf_internal_r+0x1850>
  802410:	a8c00204 	addi	r3,r21,8
  802414:	d9414917 	ldw	r5,1316(sp)
  802418:	00800044 	movi	r2,1
  80241c:	94800044 	addi	r18,r18,1
  802420:	8c400044 	addi	r17,r17,1
  802424:	18800115 	stw	r2,4(r3)
  802428:	008001c4 	movi	r2,7
  80242c:	19400015 	stw	r5,0(r3)
  802430:	dc800e15 	stw	r18,56(sp)
  802434:	dc400d15 	stw	r17,52(sp)
  802438:	2021883a 	mov	r16,r4
  80243c:	14425016 	blt	r2,r17,802d80 <___vfprintf_internal_r+0x1828>
  802440:	19400204 	addi	r5,r3,8
  802444:	d9814717 	ldw	r6,1308(sp)
  802448:	8c400044 	addi	r17,r17,1
  80244c:	dc400d15 	stw	r17,52(sp)
  802450:	3107c83a 	sub	r3,r6,r4
  802454:	d9014117 	ldw	r4,1284(sp)
  802458:	90e5883a 	add	r18,r18,r3
  80245c:	28c00115 	stw	r3,4(r5)
  802460:	8105883a 	add	r2,r16,r4
  802464:	28800015 	stw	r2,0(r5)
  802468:	008001c4 	movi	r2,7
  80246c:	dc800e15 	stw	r18,56(sp)
  802470:	147f1d16 	blt	r2,r17,8020e8 <___vfprintf_internal_r+0xb90>
  802474:	28c00204 	addi	r3,r5,8
  802478:	003db506 	br	801b50 <___vfprintf_internal_r+0x5f8>
  80247c:	3c000017 	ldw	r16,0(r7)
  802480:	3c400117 	ldw	r17,4(r7)
  802484:	39800204 	addi	r6,r7,8
  802488:	01000044 	movi	r4,1
  80248c:	d9814015 	stw	r6,1280(sp)
  802490:	d8000405 	stb	zero,16(sp)
  802494:	003ebe06 	br	801f90 <___vfprintf_internal_r+0xa38>
  802498:	3c000017 	ldw	r16,0(r7)
  80249c:	3c400117 	ldw	r17,4(r7)
  8024a0:	38800204 	addi	r2,r7,8
  8024a4:	d8814015 	stw	r2,1280(sp)
  8024a8:	003eb706 	br	801f88 <___vfprintf_internal_r+0xa30>
  8024ac:	3c000017 	ldw	r16,0(r7)
  8024b0:	3c400117 	ldw	r17,4(r7)
  8024b4:	39000204 	addi	r4,r7,8
  8024b8:	d9014015 	stw	r4,1280(sp)
  8024bc:	0009883a 	mov	r4,zero
  8024c0:	d8000405 	stb	zero,16(sp)
  8024c4:	003eb206 	br	801f90 <___vfprintf_internal_r+0xa38>
  8024c8:	38c00017 	ldw	r3,0(r7)
  8024cc:	39c00104 	addi	r7,r7,4
  8024d0:	d8c14a15 	stw	r3,1320(sp)
  8024d4:	1800d10e 	bge	r3,zero,80281c <___vfprintf_internal_r+0x12c4>
  8024d8:	00c7c83a 	sub	r3,zero,r3
  8024dc:	d8c14a15 	stw	r3,1320(sp)
  8024e0:	d9014c17 	ldw	r4,1328(sp)
  8024e4:	b8c00007 	ldb	r3,0(r23)
  8024e8:	21000114 	ori	r4,r4,4
  8024ec:	d9014c15 	stw	r4,1328(sp)
  8024f0:	003c9806 	br	801754 <___vfprintf_internal_r+0x1fc>
  8024f4:	d9814c17 	ldw	r6,1328(sp)
  8024f8:	3080080c 	andi	r2,r6,32
  8024fc:	1001f026 	beq	r2,zero,802cc0 <___vfprintf_internal_r+0x1768>
  802500:	d9014b17 	ldw	r4,1324(sp)
  802504:	38800017 	ldw	r2,0(r7)
  802508:	39c00104 	addi	r7,r7,4
  80250c:	d9c14015 	stw	r7,1280(sp)
  802510:	2007d7fa 	srai	r3,r4,31
  802514:	d9c14017 	ldw	r7,1280(sp)
  802518:	11000015 	stw	r4,0(r2)
  80251c:	10c00115 	stw	r3,4(r2)
  802520:	003c6906 	br	8016c8 <___vfprintf_internal_r+0x170>
  802524:	b8c00007 	ldb	r3,0(r23)
  802528:	00801b04 	movi	r2,108
  80252c:	18824f26 	beq	r3,r2,802e6c <___vfprintf_internal_r+0x1914>
  802530:	d9414c17 	ldw	r5,1328(sp)
  802534:	29400414 	ori	r5,r5,16
  802538:	d9414c15 	stw	r5,1328(sp)
  80253c:	003c8506 	br	801754 <___vfprintf_internal_r+0x1fc>
  802540:	d9814c17 	ldw	r6,1328(sp)
  802544:	b8c00007 	ldb	r3,0(r23)
  802548:	31800814 	ori	r6,r6,32
  80254c:	d9814c15 	stw	r6,1328(sp)
  802550:	003c8006 	br	801754 <___vfprintf_internal_r+0x1fc>
  802554:	d8814c17 	ldw	r2,1328(sp)
  802558:	3c000017 	ldw	r16,0(r7)
  80255c:	00c01e04 	movi	r3,120
  802560:	10800094 	ori	r2,r2,2
  802564:	d8814c15 	stw	r2,1328(sp)
  802568:	39c00104 	addi	r7,r7,4
  80256c:	01402074 	movhi	r5,129
  802570:	297ec904 	addi	r5,r5,-1244
  802574:	00800c04 	movi	r2,48
  802578:	0023883a 	mov	r17,zero
  80257c:	01000084 	movi	r4,2
  802580:	d9c14015 	stw	r7,1280(sp)
  802584:	d8c14d15 	stw	r3,1332(sp)
  802588:	d9414415 	stw	r5,1296(sp)
  80258c:	d8800445 	stb	r2,17(sp)
  802590:	d8c00485 	stb	r3,18(sp)
  802594:	d8000405 	stb	zero,16(sp)
  802598:	003e7d06 	br	801f90 <___vfprintf_internal_r+0xa38>
  80259c:	d8814c17 	ldw	r2,1328(sp)
  8025a0:	b8c00007 	ldb	r3,0(r23)
  8025a4:	10801014 	ori	r2,r2,64
  8025a8:	d8814c15 	stw	r2,1328(sp)
  8025ac:	003c6906 	br	801754 <___vfprintf_internal_r+0x1fc>
  8025b0:	d9414c17 	ldw	r5,1328(sp)
  8025b4:	2880020c 	andi	r2,r5,8
  8025b8:	1001df26 	beq	r2,zero,802d38 <___vfprintf_internal_r+0x17e0>
  8025bc:	39800017 	ldw	r6,0(r7)
  8025c0:	38800204 	addi	r2,r7,8
  8025c4:	d8814015 	stw	r2,1280(sp)
  8025c8:	d9814215 	stw	r6,1288(sp)
  8025cc:	39c00117 	ldw	r7,4(r7)
  8025d0:	d9c14315 	stw	r7,1292(sp)
  8025d4:	d9014217 	ldw	r4,1288(sp)
  8025d8:	d9414317 	ldw	r5,1292(sp)
  8025dc:	08082980 	call	808298 <__isinfd>
  8025e0:	10021726 	beq	r2,zero,802e40 <___vfprintf_internal_r+0x18e8>
  8025e4:	d9014217 	ldw	r4,1288(sp)
  8025e8:	d9414317 	ldw	r5,1292(sp)
  8025ec:	000d883a 	mov	r6,zero
  8025f0:	000f883a 	mov	r7,zero
  8025f4:	080a4a00 	call	80a4a0 <__ltdf2>
  8025f8:	1002ca16 	blt	r2,zero,803124 <___vfprintf_internal_r+0x1bcc>
  8025fc:	d9414d17 	ldw	r5,1332(sp)
  802600:	008011c4 	movi	r2,71
  802604:	11420a16 	blt	r2,r5,802e30 <___vfprintf_internal_r+0x18d8>
  802608:	01802074 	movhi	r6,129
  80260c:	31bece04 	addi	r6,r6,-1224
  802610:	d9814115 	stw	r6,1284(sp)
  802614:	d9014c17 	ldw	r4,1328(sp)
  802618:	00c000c4 	movi	r3,3
  80261c:	00bfdfc4 	movi	r2,-129
  802620:	2088703a 	and	r4,r4,r2
  802624:	180f883a 	mov	r7,r3
  802628:	d8c14515 	stw	r3,1300(sp)
  80262c:	d9014c15 	stw	r4,1328(sp)
  802630:	d8014615 	stw	zero,1304(sp)
  802634:	003e6a06 	br	801fe0 <___vfprintf_internal_r+0xa88>
  802638:	38800017 	ldw	r2,0(r7)
  80263c:	00c00044 	movi	r3,1
  802640:	39c00104 	addi	r7,r7,4
  802644:	d9c14015 	stw	r7,1280(sp)
  802648:	d9000f04 	addi	r4,sp,60
  80264c:	180f883a 	mov	r7,r3
  802650:	d8c14515 	stw	r3,1300(sp)
  802654:	d9014115 	stw	r4,1284(sp)
  802658:	d8800f05 	stb	r2,60(sp)
  80265c:	d8000405 	stb	zero,16(sp)
  802660:	003cac06 	br	801914 <___vfprintf_internal_r+0x3bc>
  802664:	01402074 	movhi	r5,129
  802668:	297ed404 	addi	r5,r5,-1200
  80266c:	d9414415 	stw	r5,1296(sp)
  802670:	d9814c17 	ldw	r6,1328(sp)
  802674:	3080080c 	andi	r2,r6,32
  802678:	1000f926 	beq	r2,zero,802a60 <___vfprintf_internal_r+0x1508>
  80267c:	3c000017 	ldw	r16,0(r7)
  802680:	3c400117 	ldw	r17,4(r7)
  802684:	38800204 	addi	r2,r7,8
  802688:	d8814015 	stw	r2,1280(sp)
  80268c:	d9414c17 	ldw	r5,1328(sp)
  802690:	2880004c 	andi	r2,r5,1
  802694:	1005003a 	cmpeq	r2,r2,zero
  802698:	1000b31e 	bne	r2,zero,802968 <___vfprintf_internal_r+0x1410>
  80269c:	8444b03a 	or	r2,r16,r17
  8026a0:	1000b126 	beq	r2,zero,802968 <___vfprintf_internal_r+0x1410>
  8026a4:	d9814d17 	ldw	r6,1332(sp)
  8026a8:	29400094 	ori	r5,r5,2
  8026ac:	00800c04 	movi	r2,48
  8026b0:	01000084 	movi	r4,2
  8026b4:	d9414c15 	stw	r5,1328(sp)
  8026b8:	d8800445 	stb	r2,17(sp)
  8026bc:	d9800485 	stb	r6,18(sp)
  8026c0:	d8000405 	stb	zero,16(sp)
  8026c4:	003e3206 	br	801f90 <___vfprintf_internal_r+0xa38>
  8026c8:	01802074 	movhi	r6,129
  8026cc:	31bec904 	addi	r6,r6,-1244
  8026d0:	d9814415 	stw	r6,1296(sp)
  8026d4:	003fe606 	br	802670 <___vfprintf_internal_r+0x1118>
  8026d8:	00800ac4 	movi	r2,43
  8026dc:	d8800405 	stb	r2,16(sp)
  8026e0:	b8c00007 	ldb	r3,0(r23)
  8026e4:	003c1b06 	br	801754 <___vfprintf_internal_r+0x1fc>
  8026e8:	d8814c17 	ldw	r2,1328(sp)
  8026ec:	b8c00007 	ldb	r3,0(r23)
  8026f0:	10800054 	ori	r2,r2,1
  8026f4:	d8814c15 	stw	r2,1328(sp)
  8026f8:	003c1606 	br	801754 <___vfprintf_internal_r+0x1fc>
  8026fc:	d8800407 	ldb	r2,16(sp)
  802700:	1000461e 	bne	r2,zero,80281c <___vfprintf_internal_r+0x12c4>
  802704:	00800804 	movi	r2,32
  802708:	d8800405 	stb	r2,16(sp)
  80270c:	b8c00007 	ldb	r3,0(r23)
  802710:	003c1006 	br	801754 <___vfprintf_internal_r+0x1fc>
  802714:	d9814c17 	ldw	r6,1328(sp)
  802718:	b8c00007 	ldb	r3,0(r23)
  80271c:	31800214 	ori	r6,r6,8
  802720:	d9814c15 	stw	r6,1328(sp)
  802724:	003c0b06 	br	801754 <___vfprintf_internal_r+0x1fc>
  802728:	0007883a 	mov	r3,zero
  80272c:	01000244 	movi	r4,9
  802730:	188002a4 	muli	r2,r3,10
  802734:	b8c00007 	ldb	r3,0(r23)
  802738:	d9814d17 	ldw	r6,1332(sp)
  80273c:	bdc00044 	addi	r23,r23,1
  802740:	d8c14d15 	stw	r3,1332(sp)
  802744:	d9414d17 	ldw	r5,1332(sp)
  802748:	3085883a 	add	r2,r6,r2
  80274c:	10fff404 	addi	r3,r2,-48
  802750:	28bff404 	addi	r2,r5,-48
  802754:	20bff62e 	bgeu	r4,r2,802730 <___vfprintf_internal_r+0x11d8>
  802758:	d8c14a15 	stw	r3,1320(sp)
  80275c:	003bff06 	br	80175c <___vfprintf_internal_r+0x204>
  802760:	d9414c17 	ldw	r5,1328(sp)
  802764:	b8c00007 	ldb	r3,0(r23)
  802768:	29402014 	ori	r5,r5,128
  80276c:	d9414c15 	stw	r5,1328(sp)
  802770:	003bf806 	br	801754 <___vfprintf_internal_r+0x1fc>
  802774:	b8c00007 	ldb	r3,0(r23)
  802778:	00800a84 	movi	r2,42
  80277c:	bdc00044 	addi	r23,r23,1
  802780:	18831526 	beq	r3,r2,8033d8 <___vfprintf_internal_r+0x1e80>
  802784:	d8c14d15 	stw	r3,1332(sp)
  802788:	18bff404 	addi	r2,r3,-48
  80278c:	00c00244 	movi	r3,9
  802790:	18827836 	bltu	r3,r2,803174 <___vfprintf_internal_r+0x1c1c>
  802794:	000d883a 	mov	r6,zero
  802798:	308002a4 	muli	r2,r6,10
  80279c:	b9800007 	ldb	r6,0(r23)
  8027a0:	d9414d17 	ldw	r5,1332(sp)
  8027a4:	bdc00044 	addi	r23,r23,1
  8027a8:	d9814d15 	stw	r6,1332(sp)
  8027ac:	d9014d17 	ldw	r4,1332(sp)
  8027b0:	1145883a 	add	r2,r2,r5
  8027b4:	11bff404 	addi	r6,r2,-48
  8027b8:	20bff404 	addi	r2,r4,-48
  8027bc:	18bff62e 	bgeu	r3,r2,802798 <___vfprintf_internal_r+0x1240>
  8027c0:	3027883a 	mov	r19,r6
  8027c4:	303be50e 	bge	r6,zero,80175c <___vfprintf_internal_r+0x204>
  8027c8:	04ffffc4 	movi	r19,-1
  8027cc:	003be306 	br	80175c <___vfprintf_internal_r+0x204>
  8027d0:	d8000405 	stb	zero,16(sp)
  8027d4:	39800017 	ldw	r6,0(r7)
  8027d8:	39c00104 	addi	r7,r7,4
  8027dc:	d9c14015 	stw	r7,1280(sp)
  8027e0:	d9814115 	stw	r6,1284(sp)
  8027e4:	3001c926 	beq	r6,zero,802f0c <___vfprintf_internal_r+0x19b4>
  8027e8:	98000e16 	blt	r19,zero,802824 <___vfprintf_internal_r+0x12cc>
  8027ec:	d9014117 	ldw	r4,1284(sp)
  8027f0:	000b883a 	mov	r5,zero
  8027f4:	980d883a 	mov	r6,r19
  8027f8:	08067c80 	call	8067c8 <memchr>
  8027fc:	10025926 	beq	r2,zero,803164 <___vfprintf_internal_r+0x1c0c>
  802800:	d8c14117 	ldw	r3,1284(sp)
  802804:	10cfc83a 	sub	r7,r2,r3
  802808:	99c19e16 	blt	r19,r7,802e84 <___vfprintf_internal_r+0x192c>
  80280c:	d9c14515 	stw	r7,1300(sp)
  802810:	38000916 	blt	r7,zero,802838 <___vfprintf_internal_r+0x12e0>
  802814:	d8014615 	stw	zero,1304(sp)
  802818:	003df106 	br	801fe0 <___vfprintf_internal_r+0xa88>
  80281c:	b8c00007 	ldb	r3,0(r23)
  802820:	003bcc06 	br	801754 <___vfprintf_internal_r+0x1fc>
  802824:	d9014117 	ldw	r4,1284(sp)
  802828:	08085800 	call	808580 <strlen>
  80282c:	d8814515 	stw	r2,1300(sp)
  802830:	100f883a 	mov	r7,r2
  802834:	103ff70e 	bge	r2,zero,802814 <___vfprintf_internal_r+0x12bc>
  802838:	d8014515 	stw	zero,1300(sp)
  80283c:	d8014615 	stw	zero,1304(sp)
  802840:	003de706 	br	801fe0 <___vfprintf_internal_r+0xa88>
  802844:	20c03fcc 	andi	r3,r4,255
  802848:	00800044 	movi	r2,1
  80284c:	18802d26 	beq	r3,r2,802904 <___vfprintf_internal_r+0x13ac>
  802850:	18800e36 	bltu	r3,r2,80288c <___vfprintf_internal_r+0x1334>
  802854:	00800084 	movi	r2,2
  802858:	1880fa26 	beq	r3,r2,802c44 <___vfprintf_internal_r+0x16ec>
  80285c:	01002074 	movhi	r4,129
  802860:	213ed904 	addi	r4,r4,-1180
  802864:	08085800 	call	808580 <strlen>
  802868:	100f883a 	mov	r7,r2
  80286c:	dcc14515 	stw	r19,1300(sp)
  802870:	9880010e 	bge	r19,r2,802878 <___vfprintf_internal_r+0x1320>
  802874:	d8814515 	stw	r2,1300(sp)
  802878:	00802074 	movhi	r2,129
  80287c:	10bed904 	addi	r2,r2,-1180
  802880:	dcc14615 	stw	r19,1304(sp)
  802884:	d8814115 	stw	r2,1284(sp)
  802888:	003dd506 	br	801fe0 <___vfprintf_internal_r+0xa88>
  80288c:	d9401904 	addi	r5,sp,100
  802890:	dd000f04 	addi	r20,sp,60
  802894:	d9414115 	stw	r5,1284(sp)
  802898:	880a977a 	slli	r5,r17,29
  80289c:	d9814117 	ldw	r6,1284(sp)
  8028a0:	8004d0fa 	srli	r2,r16,3
  8028a4:	8806d0fa 	srli	r3,r17,3
  8028a8:	810001cc 	andi	r4,r16,7
  8028ac:	2884b03a 	or	r2,r5,r2
  8028b0:	31bfffc4 	addi	r6,r6,-1
  8028b4:	21000c04 	addi	r4,r4,48
  8028b8:	d9814115 	stw	r6,1284(sp)
  8028bc:	10cab03a 	or	r5,r2,r3
  8028c0:	31000005 	stb	r4,0(r6)
  8028c4:	1021883a 	mov	r16,r2
  8028c8:	1823883a 	mov	r17,r3
  8028cc:	283ff21e 	bne	r5,zero,802898 <___vfprintf_internal_r+0x1340>
  8028d0:	d8c14c17 	ldw	r3,1328(sp)
  8028d4:	1880004c 	andi	r2,r3,1
  8028d8:	1005003a 	cmpeq	r2,r2,zero
  8028dc:	103db91e 	bne	r2,zero,801fc4 <___vfprintf_internal_r+0xa6c>
  8028e0:	20803fcc 	andi	r2,r4,255
  8028e4:	1080201c 	xori	r2,r2,128
  8028e8:	10bfe004 	addi	r2,r2,-128
  8028ec:	00c00c04 	movi	r3,48
  8028f0:	10fdb426 	beq	r2,r3,801fc4 <___vfprintf_internal_r+0xa6c>
  8028f4:	31bfffc4 	addi	r6,r6,-1
  8028f8:	d9814115 	stw	r6,1284(sp)
  8028fc:	30c00005 	stb	r3,0(r6)
  802900:	003db006 	br	801fc4 <___vfprintf_internal_r+0xa6c>
  802904:	88800068 	cmpgeui	r2,r17,1
  802908:	10002c1e 	bne	r2,zero,8029bc <___vfprintf_internal_r+0x1464>
  80290c:	8800021e 	bne	r17,zero,802918 <___vfprintf_internal_r+0x13c0>
  802910:	00800244 	movi	r2,9
  802914:	14002936 	bltu	r2,r16,8029bc <___vfprintf_internal_r+0x1464>
  802918:	d90018c4 	addi	r4,sp,99
  80291c:	dd000f04 	addi	r20,sp,60
  802920:	d9014115 	stw	r4,1284(sp)
  802924:	d9014117 	ldw	r4,1284(sp)
  802928:	80800c04 	addi	r2,r16,48
  80292c:	20800005 	stb	r2,0(r4)
  802930:	003da406 	br	801fc4 <___vfprintf_internal_r+0xa6c>
  802934:	dc400d17 	ldw	r17,52(sp)
  802938:	07002074 	movhi	fp,129
  80293c:	e73edf84 	addi	fp,fp,-1154
  802940:	9425883a 	add	r18,r18,r16
  802944:	8c400044 	addi	r17,r17,1
  802948:	008001c4 	movi	r2,7
  80294c:	1f000015 	stw	fp,0(r3)
  802950:	1c000115 	stw	r16,4(r3)
  802954:	dc800e15 	stw	r18,56(sp)
  802958:	dc400d15 	stw	r17,52(sp)
  80295c:	147de216 	blt	r2,r17,8020e8 <___vfprintf_internal_r+0xb90>
  802960:	18c00204 	addi	r3,r3,8
  802964:	003c7a06 	br	801b50 <___vfprintf_internal_r+0x5f8>
  802968:	01000084 	movi	r4,2
  80296c:	d8000405 	stb	zero,16(sp)
  802970:	003d8706 	br	801f90 <___vfprintf_internal_r+0xa38>
  802974:	d9814c17 	ldw	r6,1328(sp)
  802978:	30c4703a 	and	r2,r6,r3
  80297c:	1005003a 	cmpeq	r2,r2,zero
  802980:	103cb926 	beq	r2,zero,801c68 <___vfprintf_internal_r+0x710>
  802984:	d9014117 	ldw	r4,1284(sp)
  802988:	94800044 	addi	r18,r18,1
  80298c:	8c400044 	addi	r17,r17,1
  802990:	008001c4 	movi	r2,7
  802994:	a9000015 	stw	r4,0(r21)
  802998:	a8c00115 	stw	r3,4(r21)
  80299c:	dc800e15 	stw	r18,56(sp)
  8029a0:	dc400d15 	stw	r17,52(sp)
  8029a4:	147e6616 	blt	r2,r17,802340 <___vfprintf_internal_r+0xde8>
  8029a8:	acc00204 	addi	r19,r21,8
  8029ac:	003cd706 	br	801d0c <___vfprintf_internal_r+0x7b4>
  8029b0:	07002074 	movhi	fp,129
  8029b4:	e73edf84 	addi	fp,fp,-1154
  8029b8:	003c4f06 	br	801af8 <___vfprintf_internal_r+0x5a0>
  8029bc:	dd000f04 	addi	r20,sp,60
  8029c0:	dc801904 	addi	r18,sp,100
  8029c4:	8009883a 	mov	r4,r16
  8029c8:	880b883a 	mov	r5,r17
  8029cc:	01800284 	movi	r6,10
  8029d0:	000f883a 	mov	r7,zero
  8029d4:	08091b00 	call	8091b0 <__umoddi3>
  8029d8:	12000c04 	addi	r8,r2,48
  8029dc:	94bfffc4 	addi	r18,r18,-1
  8029e0:	8009883a 	mov	r4,r16
  8029e4:	880b883a 	mov	r5,r17
  8029e8:	01800284 	movi	r6,10
  8029ec:	000f883a 	mov	r7,zero
  8029f0:	92000005 	stb	r8,0(r18)
  8029f4:	0808bd40 	call	808bd4 <__udivdi3>
  8029f8:	1009883a 	mov	r4,r2
  8029fc:	1021883a 	mov	r16,r2
  802a00:	18800068 	cmpgeui	r2,r3,1
  802a04:	1823883a 	mov	r17,r3
  802a08:	103fee1e 	bne	r2,zero,8029c4 <___vfprintf_internal_r+0x146c>
  802a0c:	1800021e 	bne	r3,zero,802a18 <___vfprintf_internal_r+0x14c0>
  802a10:	00800244 	movi	r2,9
  802a14:	113feb36 	bltu	r2,r4,8029c4 <___vfprintf_internal_r+0x146c>
  802a18:	94bfffc4 	addi	r18,r18,-1
  802a1c:	dc814115 	stw	r18,1284(sp)
  802a20:	003fc006 	br	802924 <___vfprintf_internal_r+0x13cc>
  802a24:	d9014c17 	ldw	r4,1328(sp)
  802a28:	2080004c 	andi	r2,r4,1
  802a2c:	10009a1e 	bne	r2,zero,802c98 <___vfprintf_internal_r+0x1740>
  802a30:	d9401904 	addi	r5,sp,100
  802a34:	dd000f04 	addi	r20,sp,60
  802a38:	d9414115 	stw	r5,1284(sp)
  802a3c:	003d6106 	br	801fc4 <___vfprintf_internal_r+0xa6c>
  802a40:	d9014f17 	ldw	r4,1340(sp)
  802a44:	b00b883a 	mov	r5,r22
  802a48:	d9800c04 	addi	r6,sp,48
  802a4c:	08015000 	call	801500 <__sprint_r>
  802a50:	103c791e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802a54:	dc800e17 	ldw	r18,56(sp)
  802a58:	d8c01904 	addi	r3,sp,100
  802a5c:	003cff06 	br	801e5c <___vfprintf_internal_r+0x904>
  802a60:	d8c14c17 	ldw	r3,1328(sp)
  802a64:	1880040c 	andi	r2,r3,16
  802a68:	1000711e 	bne	r2,zero,802c30 <___vfprintf_internal_r+0x16d8>
  802a6c:	d9014c17 	ldw	r4,1328(sp)
  802a70:	2080100c 	andi	r2,r4,64
  802a74:	10006e26 	beq	r2,zero,802c30 <___vfprintf_internal_r+0x16d8>
  802a78:	3c00000b 	ldhu	r16,0(r7)
  802a7c:	0023883a 	mov	r17,zero
  802a80:	39c00104 	addi	r7,r7,4
  802a84:	d9c14015 	stw	r7,1280(sp)
  802a88:	003f0006 	br	80268c <___vfprintf_internal_r+0x1134>
  802a8c:	dc400d17 	ldw	r17,52(sp)
  802a90:	07002074 	movhi	fp,129
  802a94:	e73edf84 	addi	fp,fp,-1154
  802a98:	9425883a 	add	r18,r18,r16
  802a9c:	8c400044 	addi	r17,r17,1
  802aa0:	008001c4 	movi	r2,7
  802aa4:	1f000015 	stw	fp,0(r3)
  802aa8:	1c000115 	stw	r16,4(r3)
  802aac:	dc800e15 	stw	r18,56(sp)
  802ab0:	dc400d15 	stw	r17,52(sp)
  802ab4:	147d7616 	blt	r2,r17,802090 <___vfprintf_internal_r+0xb38>
  802ab8:	18c00204 	addi	r3,r3,8
  802abc:	003d7b06 	br	8020ac <___vfprintf_internal_r+0xb54>
  802ac0:	dc800e17 	ldw	r18,56(sp)
  802ac4:	dc400d17 	ldw	r17,52(sp)
  802ac8:	07002074 	movhi	fp,129
  802acc:	e73ee384 	addi	fp,fp,-1138
  802ad0:	003bc006 	br	8019d4 <___vfprintf_internal_r+0x47c>
  802ad4:	d9014f17 	ldw	r4,1340(sp)
  802ad8:	b00b883a 	mov	r5,r22
  802adc:	d9800c04 	addi	r6,sp,48
  802ae0:	08015000 	call	801500 <__sprint_r>
  802ae4:	103c541e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802ae8:	dc800e17 	ldw	r18,56(sp)
  802aec:	d8c01904 	addi	r3,sp,100
  802af0:	003ce906 	br	801e98 <___vfprintf_internal_r+0x940>
  802af4:	3c000017 	ldw	r16,0(r7)
  802af8:	0009883a 	mov	r4,zero
  802afc:	39c00104 	addi	r7,r7,4
  802b00:	0023883a 	mov	r17,zero
  802b04:	d9c14015 	stw	r7,1280(sp)
  802b08:	d8000405 	stb	zero,16(sp)
  802b0c:	003d2006 	br	801f90 <___vfprintf_internal_r+0xa38>
  802b10:	38800017 	ldw	r2,0(r7)
  802b14:	39c00104 	addi	r7,r7,4
  802b18:	d9c14015 	stw	r7,1280(sp)
  802b1c:	1023d7fa 	srai	r17,r2,31
  802b20:	1021883a 	mov	r16,r2
  802b24:	003d1806 	br	801f88 <___vfprintf_internal_r+0xa30>
  802b28:	3c000017 	ldw	r16,0(r7)
  802b2c:	01000044 	movi	r4,1
  802b30:	39c00104 	addi	r7,r7,4
  802b34:	0023883a 	mov	r17,zero
  802b38:	d9c14015 	stw	r7,1280(sp)
  802b3c:	d8000405 	stb	zero,16(sp)
  802b40:	003d1306 	br	801f90 <___vfprintf_internal_r+0xa38>
  802b44:	00802074 	movhi	r2,129
  802b48:	10beb804 	addi	r2,r2,-1312
  802b4c:	94800044 	addi	r18,r18,1
  802b50:	8c400044 	addi	r17,r17,1
  802b54:	a8800015 	stw	r2,0(r21)
  802b58:	00c00044 	movi	r3,1
  802b5c:	008001c4 	movi	r2,7
  802b60:	a8c00115 	stw	r3,4(r21)
  802b64:	dc800e15 	stw	r18,56(sp)
  802b68:	dc400d15 	stw	r17,52(sp)
  802b6c:	1440ca16 	blt	r2,r17,802e98 <___vfprintf_internal_r+0x1940>
  802b70:	a8c00204 	addi	r3,r21,8
  802b74:	2000061e 	bne	r4,zero,802b90 <___vfprintf_internal_r+0x1638>
  802b78:	d9414717 	ldw	r5,1308(sp)
  802b7c:	2800041e 	bne	r5,zero,802b90 <___vfprintf_internal_r+0x1638>
  802b80:	d9814c17 	ldw	r6,1328(sp)
  802b84:	3080004c 	andi	r2,r6,1
  802b88:	1005003a 	cmpeq	r2,r2,zero
  802b8c:	103bf01e 	bne	r2,zero,801b50 <___vfprintf_internal_r+0x5f8>
  802b90:	00800044 	movi	r2,1
  802b94:	dc400d17 	ldw	r17,52(sp)
  802b98:	18800115 	stw	r2,4(r3)
  802b9c:	d8814917 	ldw	r2,1316(sp)
  802ba0:	94800044 	addi	r18,r18,1
  802ba4:	8c400044 	addi	r17,r17,1
  802ba8:	18800015 	stw	r2,0(r3)
  802bac:	008001c4 	movi	r2,7
  802bb0:	dc800e15 	stw	r18,56(sp)
  802bb4:	dc400d15 	stw	r17,52(sp)
  802bb8:	1440ca16 	blt	r2,r17,802ee4 <___vfprintf_internal_r+0x198c>
  802bbc:	18c00204 	addi	r3,r3,8
  802bc0:	0121c83a 	sub	r16,zero,r4
  802bc4:	0400500e 	bge	zero,r16,802d08 <___vfprintf_internal_r+0x17b0>
  802bc8:	00800404 	movi	r2,16
  802bcc:	1400800e 	bge	r2,r16,802dd0 <___vfprintf_internal_r+0x1878>
  802bd0:	1027883a 	mov	r19,r2
  802bd4:	07002074 	movhi	fp,129
  802bd8:	e73edf84 	addi	fp,fp,-1154
  802bdc:	050001c4 	movi	r20,7
  802be0:	00000306 	br	802bf0 <___vfprintf_internal_r+0x1698>
  802be4:	18c00204 	addi	r3,r3,8
  802be8:	843ffc04 	addi	r16,r16,-16
  802bec:	9c007a0e 	bge	r19,r16,802dd8 <___vfprintf_internal_r+0x1880>
  802bf0:	94800404 	addi	r18,r18,16
  802bf4:	8c400044 	addi	r17,r17,1
  802bf8:	1f000015 	stw	fp,0(r3)
  802bfc:	1cc00115 	stw	r19,4(r3)
  802c00:	dc800e15 	stw	r18,56(sp)
  802c04:	dc400d15 	stw	r17,52(sp)
  802c08:	a47ff60e 	bge	r20,r17,802be4 <___vfprintf_internal_r+0x168c>
  802c0c:	d9014f17 	ldw	r4,1340(sp)
  802c10:	b00b883a 	mov	r5,r22
  802c14:	d9800c04 	addi	r6,sp,48
  802c18:	08015000 	call	801500 <__sprint_r>
  802c1c:	103c061e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802c20:	dc800e17 	ldw	r18,56(sp)
  802c24:	dc400d17 	ldw	r17,52(sp)
  802c28:	d8c01904 	addi	r3,sp,100
  802c2c:	003fee06 	br	802be8 <___vfprintf_internal_r+0x1690>
  802c30:	3c000017 	ldw	r16,0(r7)
  802c34:	0023883a 	mov	r17,zero
  802c38:	39c00104 	addi	r7,r7,4
  802c3c:	d9c14015 	stw	r7,1280(sp)
  802c40:	003e9206 	br	80268c <___vfprintf_internal_r+0x1134>
  802c44:	d9401904 	addi	r5,sp,100
  802c48:	dd000f04 	addi	r20,sp,60
  802c4c:	d9414115 	stw	r5,1284(sp)
  802c50:	d9814417 	ldw	r6,1296(sp)
  802c54:	880a973a 	slli	r5,r17,28
  802c58:	8004d13a 	srli	r2,r16,4
  802c5c:	810003cc 	andi	r4,r16,15
  802c60:	3109883a 	add	r4,r6,r4
  802c64:	2884b03a 	or	r2,r5,r2
  802c68:	21400003 	ldbu	r5,0(r4)
  802c6c:	d9014117 	ldw	r4,1284(sp)
  802c70:	8806d13a 	srli	r3,r17,4
  802c74:	1021883a 	mov	r16,r2
  802c78:	213fffc4 	addi	r4,r4,-1
  802c7c:	d9014115 	stw	r4,1284(sp)
  802c80:	d9814117 	ldw	r6,1284(sp)
  802c84:	10c8b03a 	or	r4,r2,r3
  802c88:	1823883a 	mov	r17,r3
  802c8c:	31400005 	stb	r5,0(r6)
  802c90:	203fef1e 	bne	r4,zero,802c50 <___vfprintf_internal_r+0x16f8>
  802c94:	003ccb06 	br	801fc4 <___vfprintf_internal_r+0xa6c>
  802c98:	00800c04 	movi	r2,48
  802c9c:	d98018c4 	addi	r6,sp,99
  802ca0:	dd000f04 	addi	r20,sp,60
  802ca4:	d88018c5 	stb	r2,99(sp)
  802ca8:	d9814115 	stw	r6,1284(sp)
  802cac:	003cc506 	br	801fc4 <___vfprintf_internal_r+0xa6c>
  802cb0:	dc400d17 	ldw	r17,52(sp)
  802cb4:	07002074 	movhi	fp,129
  802cb8:	e73ee384 	addi	fp,fp,-1138
  802cbc:	003bc706 	br	801bdc <___vfprintf_internal_r+0x684>
  802cc0:	d9414c17 	ldw	r5,1328(sp)
  802cc4:	2880040c 	andi	r2,r5,16
  802cc8:	10007c26 	beq	r2,zero,802ebc <___vfprintf_internal_r+0x1964>
  802ccc:	38800017 	ldw	r2,0(r7)
  802cd0:	39c00104 	addi	r7,r7,4
  802cd4:	d9c14015 	stw	r7,1280(sp)
  802cd8:	d9814b17 	ldw	r6,1324(sp)
  802cdc:	d9c14017 	ldw	r7,1280(sp)
  802ce0:	11800015 	stw	r6,0(r2)
  802ce4:	003a7806 	br	8016c8 <___vfprintf_internal_r+0x170>
  802ce8:	d9014f17 	ldw	r4,1340(sp)
  802cec:	b00b883a 	mov	r5,r22
  802cf0:	d9800c04 	addi	r6,sp,48
  802cf4:	08015000 	call	801500 <__sprint_r>
  802cf8:	103bcf1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802cfc:	dc800e17 	ldw	r18,56(sp)
  802d00:	dc400d17 	ldw	r17,52(sp)
  802d04:	d8c01904 	addi	r3,sp,100
  802d08:	d9014717 	ldw	r4,1308(sp)
  802d0c:	d9414117 	ldw	r5,1284(sp)
  802d10:	8c400044 	addi	r17,r17,1
  802d14:	9125883a 	add	r18,r18,r4
  802d18:	008001c4 	movi	r2,7
  802d1c:	19400015 	stw	r5,0(r3)
  802d20:	19000115 	stw	r4,4(r3)
  802d24:	dc800e15 	stw	r18,56(sp)
  802d28:	dc400d15 	stw	r17,52(sp)
  802d2c:	147cee16 	blt	r2,r17,8020e8 <___vfprintf_internal_r+0xb90>
  802d30:	18c00204 	addi	r3,r3,8
  802d34:	003b8606 	br	801b50 <___vfprintf_internal_r+0x5f8>
  802d38:	38c00017 	ldw	r3,0(r7)
  802d3c:	39000204 	addi	r4,r7,8
  802d40:	d9014015 	stw	r4,1280(sp)
  802d44:	d8c14215 	stw	r3,1288(sp)
  802d48:	39c00117 	ldw	r7,4(r7)
  802d4c:	d9c14315 	stw	r7,1292(sp)
  802d50:	003e2006 	br	8025d4 <___vfprintf_internal_r+0x107c>
  802d54:	0005883a 	mov	r2,zero
  802d58:	1409c83a 	sub	r4,r2,r16
  802d5c:	1105803a 	cmpltu	r2,r2,r4
  802d60:	044bc83a 	sub	r5,zero,r17
  802d64:	2885c83a 	sub	r2,r5,r2
  802d68:	2021883a 	mov	r16,r4
  802d6c:	1023883a 	mov	r17,r2
  802d70:	01000044 	movi	r4,1
  802d74:	00800b44 	movi	r2,45
  802d78:	d8800405 	stb	r2,16(sp)
  802d7c:	003c8406 	br	801f90 <___vfprintf_internal_r+0xa38>
  802d80:	d9014f17 	ldw	r4,1340(sp)
  802d84:	b00b883a 	mov	r5,r22
  802d88:	d9800c04 	addi	r6,sp,48
  802d8c:	08015000 	call	801500 <__sprint_r>
  802d90:	103ba91e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802d94:	dc800e17 	ldw	r18,56(sp)
  802d98:	dc400d17 	ldw	r17,52(sp)
  802d9c:	d9000517 	ldw	r4,20(sp)
  802da0:	d9401904 	addi	r5,sp,100
  802da4:	003da706 	br	802444 <___vfprintf_internal_r+0xeec>
  802da8:	d9014f17 	ldw	r4,1340(sp)
  802dac:	b00b883a 	mov	r5,r22
  802db0:	d9800c04 	addi	r6,sp,48
  802db4:	08015000 	call	801500 <__sprint_r>
  802db8:	103b9f1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802dbc:	dc800e17 	ldw	r18,56(sp)
  802dc0:	dc400d17 	ldw	r17,52(sp)
  802dc4:	d9000517 	ldw	r4,20(sp)
  802dc8:	d8c01904 	addi	r3,sp,100
  802dcc:	003d9106 	br	802414 <___vfprintf_internal_r+0xebc>
  802dd0:	07002074 	movhi	fp,129
  802dd4:	e73edf84 	addi	fp,fp,-1154
  802dd8:	9425883a 	add	r18,r18,r16
  802ddc:	8c400044 	addi	r17,r17,1
  802de0:	008001c4 	movi	r2,7
  802de4:	1f000015 	stw	fp,0(r3)
  802de8:	1c000115 	stw	r16,4(r3)
  802dec:	dc800e15 	stw	r18,56(sp)
  802df0:	dc400d15 	stw	r17,52(sp)
  802df4:	147fbc16 	blt	r2,r17,802ce8 <___vfprintf_internal_r+0x1790>
  802df8:	18c00204 	addi	r3,r3,8
  802dfc:	003fc206 	br	802d08 <___vfprintf_internal_r+0x17b0>
  802e00:	d9014f17 	ldw	r4,1340(sp)
  802e04:	b00b883a 	mov	r5,r22
  802e08:	d9800c04 	addi	r6,sp,48
  802e0c:	08015000 	call	801500 <__sprint_r>
  802e10:	103b891e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802e14:	dc800e17 	ldw	r18,56(sp)
  802e18:	d9000517 	ldw	r4,20(sp)
  802e1c:	d8c01904 	addi	r3,sp,100
  802e20:	003d0206 	br	80222c <___vfprintf_internal_r+0xcd4>
  802e24:	07002074 	movhi	fp,129
  802e28:	e73edf84 	addi	fp,fp,-1154
  802e2c:	003be406 	br	801dc0 <___vfprintf_internal_r+0x868>
  802e30:	00802074 	movhi	r2,129
  802e34:	10becf04 	addi	r2,r2,-1220
  802e38:	d8814115 	stw	r2,1284(sp)
  802e3c:	003df506 	br	802614 <___vfprintf_internal_r+0x10bc>
  802e40:	d9014217 	ldw	r4,1288(sp)
  802e44:	d9414317 	ldw	r5,1292(sp)
  802e48:	08082d80 	call	8082d8 <__isnand>
  802e4c:	10003926 	beq	r2,zero,802f34 <___vfprintf_internal_r+0x19dc>
  802e50:	d9414d17 	ldw	r5,1332(sp)
  802e54:	008011c4 	movi	r2,71
  802e58:	1140ce16 	blt	r2,r5,803194 <___vfprintf_internal_r+0x1c3c>
  802e5c:	01802074 	movhi	r6,129
  802e60:	31bed004 	addi	r6,r6,-1216
  802e64:	d9814115 	stw	r6,1284(sp)
  802e68:	003dea06 	br	802614 <___vfprintf_internal_r+0x10bc>
  802e6c:	d9014c17 	ldw	r4,1328(sp)
  802e70:	bdc00044 	addi	r23,r23,1
  802e74:	b8c00007 	ldb	r3,0(r23)
  802e78:	21000814 	ori	r4,r4,32
  802e7c:	d9014c15 	stw	r4,1328(sp)
  802e80:	003a3406 	br	801754 <___vfprintf_internal_r+0x1fc>
  802e84:	dcc14515 	stw	r19,1300(sp)
  802e88:	98011016 	blt	r19,zero,8032cc <___vfprintf_internal_r+0x1d74>
  802e8c:	980f883a 	mov	r7,r19
  802e90:	d8014615 	stw	zero,1304(sp)
  802e94:	003c5206 	br	801fe0 <___vfprintf_internal_r+0xa88>
  802e98:	d9014f17 	ldw	r4,1340(sp)
  802e9c:	b00b883a 	mov	r5,r22
  802ea0:	d9800c04 	addi	r6,sp,48
  802ea4:	08015000 	call	801500 <__sprint_r>
  802ea8:	103b631e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802eac:	dc800e17 	ldw	r18,56(sp)
  802eb0:	d9000517 	ldw	r4,20(sp)
  802eb4:	d8c01904 	addi	r3,sp,100
  802eb8:	003f2e06 	br	802b74 <___vfprintf_internal_r+0x161c>
  802ebc:	d8c14c17 	ldw	r3,1328(sp)
  802ec0:	1880100c 	andi	r2,r3,64
  802ec4:	1000a026 	beq	r2,zero,803148 <___vfprintf_internal_r+0x1bf0>
  802ec8:	38800017 	ldw	r2,0(r7)
  802ecc:	39c00104 	addi	r7,r7,4
  802ed0:	d9c14015 	stw	r7,1280(sp)
  802ed4:	d9014b17 	ldw	r4,1324(sp)
  802ed8:	d9c14017 	ldw	r7,1280(sp)
  802edc:	1100000d 	sth	r4,0(r2)
  802ee0:	0039f906 	br	8016c8 <___vfprintf_internal_r+0x170>
  802ee4:	d9014f17 	ldw	r4,1340(sp)
  802ee8:	b00b883a 	mov	r5,r22
  802eec:	d9800c04 	addi	r6,sp,48
  802ef0:	08015000 	call	801500 <__sprint_r>
  802ef4:	103b501e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  802ef8:	dc800e17 	ldw	r18,56(sp)
  802efc:	dc400d17 	ldw	r17,52(sp)
  802f00:	d9000517 	ldw	r4,20(sp)
  802f04:	d8c01904 	addi	r3,sp,100
  802f08:	003f2d06 	br	802bc0 <___vfprintf_internal_r+0x1668>
  802f0c:	00800184 	movi	r2,6
  802f10:	14c09a36 	bltu	r2,r19,80317c <___vfprintf_internal_r+0x1c24>
  802f14:	dcc14515 	stw	r19,1300(sp)
  802f18:	9800010e 	bge	r19,zero,802f20 <___vfprintf_internal_r+0x19c8>
  802f1c:	d8014515 	stw	zero,1300(sp)
  802f20:	00802074 	movhi	r2,129
  802f24:	10bed204 	addi	r2,r2,-1208
  802f28:	980f883a 	mov	r7,r19
  802f2c:	d8814115 	stw	r2,1284(sp)
  802f30:	003a7806 	br	801914 <___vfprintf_internal_r+0x3bc>
  802f34:	00bfffc4 	movi	r2,-1
  802f38:	9880e226 	beq	r19,r2,8032c4 <___vfprintf_internal_r+0x1d6c>
  802f3c:	d9414d17 	ldw	r5,1332(sp)
  802f40:	008019c4 	movi	r2,103
  802f44:	2880dc26 	beq	r5,r2,8032b8 <___vfprintf_internal_r+0x1d60>
  802f48:	008011c4 	movi	r2,71
  802f4c:	2880da26 	beq	r5,r2,8032b8 <___vfprintf_internal_r+0x1d60>
  802f50:	d9414c17 	ldw	r5,1328(sp)
  802f54:	d9014317 	ldw	r4,1292(sp)
  802f58:	d9814217 	ldw	r6,1288(sp)
  802f5c:	29404014 	ori	r5,r5,256
  802f60:	d9414c15 	stw	r5,1328(sp)
  802f64:	2000cc16 	blt	r4,zero,803298 <___vfprintf_internal_r+0x1d40>
  802f68:	3021883a 	mov	r16,r6
  802f6c:	2023883a 	mov	r17,r4
  802f70:	0039883a 	mov	fp,zero
  802f74:	d9414d17 	ldw	r5,1332(sp)
  802f78:	00801984 	movi	r2,102
  802f7c:	2880b726 	beq	r5,r2,80325c <___vfprintf_internal_r+0x1d04>
  802f80:	00801184 	movi	r2,70
  802f84:	2880b526 	beq	r5,r2,80325c <___vfprintf_internal_r+0x1d04>
  802f88:	00801944 	movi	r2,101
  802f8c:	2880c826 	beq	r5,r2,8032b0 <___vfprintf_internal_r+0x1d58>
  802f90:	00801144 	movi	r2,69
  802f94:	2880c626 	beq	r5,r2,8032b0 <___vfprintf_internal_r+0x1d58>
  802f98:	9829883a 	mov	r20,r19
  802f9c:	d9014f17 	ldw	r4,1340(sp)
  802fa0:	d8800504 	addi	r2,sp,20
  802fa4:	880d883a 	mov	r6,r17
  802fa8:	d8800115 	stw	r2,4(sp)
  802fac:	d8c00604 	addi	r3,sp,24
  802fb0:	d8800704 	addi	r2,sp,28
  802fb4:	800b883a 	mov	r5,r16
  802fb8:	01c00084 	movi	r7,2
  802fbc:	d8c00215 	stw	r3,8(sp)
  802fc0:	d8800315 	stw	r2,12(sp)
  802fc4:	dd000015 	stw	r20,0(sp)
  802fc8:	08039300 	call	803930 <_dtoa_r>
  802fcc:	d9814d17 	ldw	r6,1332(sp)
  802fd0:	d8814115 	stw	r2,1284(sp)
  802fd4:	008019c4 	movi	r2,103
  802fd8:	30809526 	beq	r6,r2,803230 <___vfprintf_internal_r+0x1cd8>
  802fdc:	d8c14d17 	ldw	r3,1332(sp)
  802fe0:	008011c4 	movi	r2,71
  802fe4:	18809226 	beq	r3,r2,803230 <___vfprintf_internal_r+0x1cd8>
  802fe8:	d9414117 	ldw	r5,1284(sp)
  802fec:	d9814d17 	ldw	r6,1332(sp)
  802ff0:	00801984 	movi	r2,102
  802ff4:	2d25883a 	add	r18,r5,r20
  802ff8:	30808626 	beq	r6,r2,803214 <___vfprintf_internal_r+0x1cbc>
  802ffc:	00801184 	movi	r2,70
  803000:	30808426 	beq	r6,r2,803214 <___vfprintf_internal_r+0x1cbc>
  803004:	000d883a 	mov	r6,zero
  803008:	000f883a 	mov	r7,zero
  80300c:	880b883a 	mov	r5,r17
  803010:	8009883a 	mov	r4,r16
  803014:	080a2800 	call	80a280 <__eqdf2>
  803018:	1000751e 	bne	r2,zero,8031f0 <___vfprintf_internal_r+0x1c98>
  80301c:	9005883a 	mov	r2,r18
  803020:	dc800715 	stw	r18,28(sp)
  803024:	d9014117 	ldw	r4,1284(sp)
  803028:	d9414d17 	ldw	r5,1332(sp)
  80302c:	00c019c4 	movi	r3,103
  803030:	1125c83a 	sub	r18,r2,r4
  803034:	28c06826 	beq	r5,r3,8031d8 <___vfprintf_internal_r+0x1c80>
  803038:	008011c4 	movi	r2,71
  80303c:	28806626 	beq	r5,r2,8031d8 <___vfprintf_internal_r+0x1c80>
  803040:	d9000517 	ldw	r4,20(sp)
  803044:	d8c14d17 	ldw	r3,1332(sp)
  803048:	00801944 	movi	r2,101
  80304c:	10c05516 	blt	r2,r3,8031a4 <___vfprintf_internal_r+0x1c4c>
  803050:	213fffc4 	addi	r4,r4,-1
  803054:	d9000515 	stw	r4,20(sp)
  803058:	d8c00805 	stb	r3,32(sp)
  80305c:	2021883a 	mov	r16,r4
  803060:	2000c116 	blt	r4,zero,803368 <___vfprintf_internal_r+0x1e10>
  803064:	00800ac4 	movi	r2,43
  803068:	d8800845 	stb	r2,33(sp)
  80306c:	00800244 	movi	r2,9
  803070:	1400af0e 	bge	r2,r16,803330 <___vfprintf_internal_r+0x1dd8>
  803074:	1027883a 	mov	r19,r2
  803078:	dc400b84 	addi	r17,sp,46
  80307c:	8009883a 	mov	r4,r16
  803080:	01400284 	movi	r5,10
  803084:	080a9680 	call	80a968 <__modsi3>
  803088:	10800c04 	addi	r2,r2,48
  80308c:	8c7fffc4 	addi	r17,r17,-1
  803090:	8009883a 	mov	r4,r16
  803094:	01400284 	movi	r5,10
  803098:	88800005 	stb	r2,0(r17)
  80309c:	080a9080 	call	80a908 <__divsi3>
  8030a0:	1021883a 	mov	r16,r2
  8030a4:	98bff516 	blt	r19,r2,80307c <___vfprintf_internal_r+0x1b24>
  8030a8:	10c00c04 	addi	r3,r2,48
  8030ac:	d88009c4 	addi	r2,sp,39
  8030b0:	108001c4 	addi	r2,r2,7
  8030b4:	897fffc4 	addi	r5,r17,-1
  8030b8:	88ffffc5 	stb	r3,-1(r17)
  8030bc:	2880a72e 	bgeu	r5,r2,80335c <___vfprintf_internal_r+0x1e04>
  8030c0:	1009883a 	mov	r4,r2
  8030c4:	d9800804 	addi	r6,sp,32
  8030c8:	d8c00884 	addi	r3,sp,34
  8030cc:	28800003 	ldbu	r2,0(r5)
  8030d0:	29400044 	addi	r5,r5,1
  8030d4:	18800005 	stb	r2,0(r3)
  8030d8:	18c00044 	addi	r3,r3,1
  8030dc:	293ffb36 	bltu	r5,r4,8030cc <___vfprintf_internal_r+0x1b74>
  8030e0:	1987c83a 	sub	r3,r3,r6
  8030e4:	00800044 	movi	r2,1
  8030e8:	d8c14815 	stw	r3,1312(sp)
  8030ec:	90cf883a 	add	r7,r18,r3
  8030f0:	1480960e 	bge	r2,r18,80334c <___vfprintf_internal_r+0x1df4>
  8030f4:	39c00044 	addi	r7,r7,1
  8030f8:	d9c14515 	stw	r7,1300(sp)
  8030fc:	38003416 	blt	r7,zero,8031d0 <___vfprintf_internal_r+0x1c78>
  803100:	e0803fcc 	andi	r2,fp,255
  803104:	1080201c 	xori	r2,r2,128
  803108:	10bfe004 	addi	r2,r2,-128
  80310c:	10004e26 	beq	r2,zero,803248 <___vfprintf_internal_r+0x1cf0>
  803110:	00800b44 	movi	r2,45
  803114:	dc814715 	stw	r18,1308(sp)
  803118:	d8014615 	stw	zero,1304(sp)
  80311c:	d8800405 	stb	r2,16(sp)
  803120:	003bb106 	br	801fe8 <___vfprintf_internal_r+0xa90>
  803124:	00800b44 	movi	r2,45
  803128:	d8800405 	stb	r2,16(sp)
  80312c:	003d3306 	br	8025fc <___vfprintf_internal_r+0x10a4>
  803130:	d9014f17 	ldw	r4,1340(sp)
  803134:	b00b883a 	mov	r5,r22
  803138:	d9800c04 	addi	r6,sp,48
  80313c:	08015000 	call	801500 <__sprint_r>
  803140:	103abd1e 	bne	r2,zero,801c38 <___vfprintf_internal_r+0x6e0>
  803144:	003abb06 	br	801c34 <___vfprintf_internal_r+0x6dc>
  803148:	38800017 	ldw	r2,0(r7)
  80314c:	39c00104 	addi	r7,r7,4
  803150:	d9c14015 	stw	r7,1280(sp)
  803154:	d9414b17 	ldw	r5,1324(sp)
  803158:	d9c14017 	ldw	r7,1280(sp)
  80315c:	11400015 	stw	r5,0(r2)
  803160:	00395906 	br	8016c8 <___vfprintf_internal_r+0x170>
  803164:	980f883a 	mov	r7,r19
  803168:	dcc14515 	stw	r19,1300(sp)
  80316c:	d8014615 	stw	zero,1304(sp)
  803170:	003b9b06 	br	801fe0 <___vfprintf_internal_r+0xa88>
  803174:	0027883a 	mov	r19,zero
  803178:	00397806 	br	80175c <___vfprintf_internal_r+0x204>
  80317c:	00c02074 	movhi	r3,129
  803180:	18fed204 	addi	r3,r3,-1208
  803184:	100f883a 	mov	r7,r2
  803188:	d8814515 	stw	r2,1300(sp)
  80318c:	d8c14115 	stw	r3,1284(sp)
  803190:	0039e006 	br	801914 <___vfprintf_internal_r+0x3bc>
  803194:	00802074 	movhi	r2,129
  803198:	10bed104 	addi	r2,r2,-1212
  80319c:	d8814115 	stw	r2,1284(sp)
  8031a0:	003d1c06 	br	802614 <___vfprintf_internal_r+0x10bc>
  8031a4:	d9414d17 	ldw	r5,1332(sp)
  8031a8:	00801984 	movi	r2,102
  8031ac:	28804926 	beq	r5,r2,8032d4 <___vfprintf_internal_r+0x1d7c>
  8031b0:	200f883a 	mov	r7,r4
  8031b4:	24805716 	blt	r4,r18,803314 <___vfprintf_internal_r+0x1dbc>
  8031b8:	d9414c17 	ldw	r5,1328(sp)
  8031bc:	2880004c 	andi	r2,r5,1
  8031c0:	10000126 	beq	r2,zero,8031c8 <___vfprintf_internal_r+0x1c70>
  8031c4:	21c00044 	addi	r7,r4,1
  8031c8:	d9c14515 	stw	r7,1300(sp)
  8031cc:	383fcc0e 	bge	r7,zero,803100 <___vfprintf_internal_r+0x1ba8>
  8031d0:	d8014515 	stw	zero,1300(sp)
  8031d4:	003fca06 	br	803100 <___vfprintf_internal_r+0x1ba8>
  8031d8:	d9000517 	ldw	r4,20(sp)
  8031dc:	00bfff04 	movi	r2,-4
  8031e0:	1100480e 	bge	r2,r4,803304 <___vfprintf_internal_r+0x1dac>
  8031e4:	99004716 	blt	r19,r4,803304 <___vfprintf_internal_r+0x1dac>
  8031e8:	d8c14d15 	stw	r3,1332(sp)
  8031ec:	003ff006 	br	8031b0 <___vfprintf_internal_r+0x1c58>
  8031f0:	d8800717 	ldw	r2,28(sp)
  8031f4:	14bf8b2e 	bgeu	r2,r18,803024 <___vfprintf_internal_r+0x1acc>
  8031f8:	9007883a 	mov	r3,r18
  8031fc:	01000c04 	movi	r4,48
  803200:	11000005 	stb	r4,0(r2)
  803204:	10800044 	addi	r2,r2,1
  803208:	d8800715 	stw	r2,28(sp)
  80320c:	18bffc1e 	bne	r3,r2,803200 <___vfprintf_internal_r+0x1ca8>
  803210:	003f8406 	br	803024 <___vfprintf_internal_r+0x1acc>
  803214:	d8814117 	ldw	r2,1284(sp)
  803218:	10c00007 	ldb	r3,0(r2)
  80321c:	00800c04 	movi	r2,48
  803220:	18805b26 	beq	r3,r2,803390 <___vfprintf_internal_r+0x1e38>
  803224:	d9000517 	ldw	r4,20(sp)
  803228:	9125883a 	add	r18,r18,r4
  80322c:	003f7506 	br	803004 <___vfprintf_internal_r+0x1aac>
  803230:	d9014c17 	ldw	r4,1328(sp)
  803234:	2080004c 	andi	r2,r4,1
  803238:	1005003a 	cmpeq	r2,r2,zero
  80323c:	103f6a26 	beq	r2,zero,802fe8 <___vfprintf_internal_r+0x1a90>
  803240:	d8800717 	ldw	r2,28(sp)
  803244:	003f7706 	br	803024 <___vfprintf_internal_r+0x1acc>
  803248:	d9c14515 	stw	r7,1300(sp)
  80324c:	38004d16 	blt	r7,zero,803384 <___vfprintf_internal_r+0x1e2c>
  803250:	dc814715 	stw	r18,1308(sp)
  803254:	d8014615 	stw	zero,1304(sp)
  803258:	003b6106 	br	801fe0 <___vfprintf_internal_r+0xa88>
  80325c:	d9014f17 	ldw	r4,1340(sp)
  803260:	d8800504 	addi	r2,sp,20
  803264:	d8800115 	stw	r2,4(sp)
  803268:	d8c00604 	addi	r3,sp,24
  80326c:	d8800704 	addi	r2,sp,28
  803270:	800b883a 	mov	r5,r16
  803274:	880d883a 	mov	r6,r17
  803278:	01c000c4 	movi	r7,3
  80327c:	d8c00215 	stw	r3,8(sp)
  803280:	d8800315 	stw	r2,12(sp)
  803284:	dcc00015 	stw	r19,0(sp)
  803288:	9829883a 	mov	r20,r19
  80328c:	08039300 	call	803930 <_dtoa_r>
  803290:	d8814115 	stw	r2,1284(sp)
  803294:	003f5106 	br	802fdc <___vfprintf_internal_r+0x1a84>
  803298:	d8c14217 	ldw	r3,1288(sp)
  80329c:	d9014317 	ldw	r4,1292(sp)
  8032a0:	07000b44 	movi	fp,45
  8032a4:	1821883a 	mov	r16,r3
  8032a8:	2460003c 	xorhi	r17,r4,32768
  8032ac:	003f3106 	br	802f74 <___vfprintf_internal_r+0x1a1c>
  8032b0:	9d000044 	addi	r20,r19,1
  8032b4:	003f3906 	br	802f9c <___vfprintf_internal_r+0x1a44>
  8032b8:	983f251e 	bne	r19,zero,802f50 <___vfprintf_internal_r+0x19f8>
  8032bc:	04c00044 	movi	r19,1
  8032c0:	003f2306 	br	802f50 <___vfprintf_internal_r+0x19f8>
  8032c4:	04c00184 	movi	r19,6
  8032c8:	003f2106 	br	802f50 <___vfprintf_internal_r+0x19f8>
  8032cc:	d8014515 	stw	zero,1300(sp)
  8032d0:	003eee06 	br	802e8c <___vfprintf_internal_r+0x1934>
  8032d4:	200f883a 	mov	r7,r4
  8032d8:	0100370e 	bge	zero,r4,8033b8 <___vfprintf_internal_r+0x1e60>
  8032dc:	9800031e 	bne	r19,zero,8032ec <___vfprintf_internal_r+0x1d94>
  8032e0:	d9814c17 	ldw	r6,1328(sp)
  8032e4:	3080004c 	andi	r2,r6,1
  8032e8:	103fb726 	beq	r2,zero,8031c8 <___vfprintf_internal_r+0x1c70>
  8032ec:	20800044 	addi	r2,r4,1
  8032f0:	98a7883a 	add	r19,r19,r2
  8032f4:	dcc14515 	stw	r19,1300(sp)
  8032f8:	980f883a 	mov	r7,r19
  8032fc:	983f800e 	bge	r19,zero,803100 <___vfprintf_internal_r+0x1ba8>
  803300:	003fb306 	br	8031d0 <___vfprintf_internal_r+0x1c78>
  803304:	d9814d17 	ldw	r6,1332(sp)
  803308:	31bfff84 	addi	r6,r6,-2
  80330c:	d9814d15 	stw	r6,1332(sp)
  803310:	003f4c06 	br	803044 <___vfprintf_internal_r+0x1aec>
  803314:	0100180e 	bge	zero,r4,803378 <___vfprintf_internal_r+0x1e20>
  803318:	00800044 	movi	r2,1
  80331c:	1485883a 	add	r2,r2,r18
  803320:	d8814515 	stw	r2,1300(sp)
  803324:	100f883a 	mov	r7,r2
  803328:	103f750e 	bge	r2,zero,803100 <___vfprintf_internal_r+0x1ba8>
  80332c:	003fa806 	br	8031d0 <___vfprintf_internal_r+0x1c78>
  803330:	80c00c04 	addi	r3,r16,48
  803334:	00800c04 	movi	r2,48
  803338:	d8c008c5 	stb	r3,35(sp)
  80333c:	d9800804 	addi	r6,sp,32
  803340:	d8c00904 	addi	r3,sp,36
  803344:	d8800885 	stb	r2,34(sp)
  803348:	003f6506 	br	8030e0 <___vfprintf_internal_r+0x1b88>
  80334c:	d9014c17 	ldw	r4,1328(sp)
  803350:	2084703a 	and	r2,r4,r2
  803354:	103f9c26 	beq	r2,zero,8031c8 <___vfprintf_internal_r+0x1c70>
  803358:	003f6606 	br	8030f4 <___vfprintf_internal_r+0x1b9c>
  80335c:	d9800804 	addi	r6,sp,32
  803360:	d8c00884 	addi	r3,sp,34
  803364:	003f5e06 	br	8030e0 <___vfprintf_internal_r+0x1b88>
  803368:	00800b44 	movi	r2,45
  80336c:	0121c83a 	sub	r16,zero,r4
  803370:	d8800845 	stb	r2,33(sp)
  803374:	003f3d06 	br	80306c <___vfprintf_internal_r+0x1b14>
  803378:	00800084 	movi	r2,2
  80337c:	1105c83a 	sub	r2,r2,r4
  803380:	003fe606 	br	80331c <___vfprintf_internal_r+0x1dc4>
  803384:	d8014515 	stw	zero,1300(sp)
  803388:	dc814715 	stw	r18,1308(sp)
  80338c:	003fb106 	br	803254 <___vfprintf_internal_r+0x1cfc>
  803390:	000d883a 	mov	r6,zero
  803394:	000f883a 	mov	r7,zero
  803398:	8009883a 	mov	r4,r16
  80339c:	880b883a 	mov	r5,r17
  8033a0:	080a3080 	call	80a308 <__nedf2>
  8033a4:	103f9f26 	beq	r2,zero,803224 <___vfprintf_internal_r+0x1ccc>
  8033a8:	00800044 	movi	r2,1
  8033ac:	1509c83a 	sub	r4,r2,r20
  8033b0:	d9000515 	stw	r4,20(sp)
  8033b4:	003f9b06 	br	803224 <___vfprintf_internal_r+0x1ccc>
  8033b8:	98000d1e 	bne	r19,zero,8033f0 <___vfprintf_internal_r+0x1e98>
  8033bc:	d8c14c17 	ldw	r3,1328(sp)
  8033c0:	1880004c 	andi	r2,r3,1
  8033c4:	10000a1e 	bne	r2,zero,8033f0 <___vfprintf_internal_r+0x1e98>
  8033c8:	01000044 	movi	r4,1
  8033cc:	200f883a 	mov	r7,r4
  8033d0:	d9014515 	stw	r4,1300(sp)
  8033d4:	003f4a06 	br	803100 <___vfprintf_internal_r+0x1ba8>
  8033d8:	3cc00017 	ldw	r19,0(r7)
  8033dc:	39c00104 	addi	r7,r7,4
  8033e0:	983d0e0e 	bge	r19,zero,80281c <___vfprintf_internal_r+0x12c4>
  8033e4:	b8c00007 	ldb	r3,0(r23)
  8033e8:	04ffffc4 	movi	r19,-1
  8033ec:	0038d906 	br	801754 <___vfprintf_internal_r+0x1fc>
  8033f0:	9cc00084 	addi	r19,r19,2
  8033f4:	dcc14515 	stw	r19,1300(sp)
  8033f8:	980f883a 	mov	r7,r19
  8033fc:	983f400e 	bge	r19,zero,803100 <___vfprintf_internal_r+0x1ba8>
  803400:	003f7306 	br	8031d0 <___vfprintf_internal_r+0x1c78>

00803404 <__vfprintf_internal>:
  803404:	00802074 	movhi	r2,129
  803408:	10870f04 	addi	r2,r2,7228
  80340c:	2013883a 	mov	r9,r4
  803410:	11000017 	ldw	r4,0(r2)
  803414:	2805883a 	mov	r2,r5
  803418:	300f883a 	mov	r7,r6
  80341c:	480b883a 	mov	r5,r9
  803420:	100d883a 	mov	r6,r2
  803424:	08015581 	jmpi	801558 <___vfprintf_internal_r>

00803428 <__swsetup_r>:
  803428:	00802074 	movhi	r2,129
  80342c:	10870f04 	addi	r2,r2,7228
  803430:	10c00017 	ldw	r3,0(r2)
  803434:	defffd04 	addi	sp,sp,-12
  803438:	dc400115 	stw	r17,4(sp)
  80343c:	dc000015 	stw	r16,0(sp)
  803440:	dfc00215 	stw	ra,8(sp)
  803444:	2023883a 	mov	r17,r4
  803448:	2821883a 	mov	r16,r5
  80344c:	18000226 	beq	r3,zero,803458 <__swsetup_r+0x30>
  803450:	18800e17 	ldw	r2,56(r3)
  803454:	10001f26 	beq	r2,zero,8034d4 <__swsetup_r+0xac>
  803458:	8100030b 	ldhu	r4,12(r16)
  80345c:	2080020c 	andi	r2,r4,8
  803460:	10002826 	beq	r2,zero,803504 <__swsetup_r+0xdc>
  803464:	81400417 	ldw	r5,16(r16)
  803468:	28001d26 	beq	r5,zero,8034e0 <__swsetup_r+0xb8>
  80346c:	2080004c 	andi	r2,r4,1
  803470:	1005003a 	cmpeq	r2,r2,zero
  803474:	10000b26 	beq	r2,zero,8034a4 <__swsetup_r+0x7c>
  803478:	2080008c 	andi	r2,r4,2
  80347c:	10001226 	beq	r2,zero,8034c8 <__swsetup_r+0xa0>
  803480:	0005883a 	mov	r2,zero
  803484:	80800215 	stw	r2,8(r16)
  803488:	28000b26 	beq	r5,zero,8034b8 <__swsetup_r+0x90>
  80348c:	0005883a 	mov	r2,zero
  803490:	dfc00217 	ldw	ra,8(sp)
  803494:	dc400117 	ldw	r17,4(sp)
  803498:	dc000017 	ldw	r16,0(sp)
  80349c:	dec00304 	addi	sp,sp,12
  8034a0:	f800283a 	ret
  8034a4:	80800517 	ldw	r2,20(r16)
  8034a8:	80000215 	stw	zero,8(r16)
  8034ac:	0085c83a 	sub	r2,zero,r2
  8034b0:	80800615 	stw	r2,24(r16)
  8034b4:	283ff51e 	bne	r5,zero,80348c <__swsetup_r+0x64>
  8034b8:	2080200c 	andi	r2,r4,128
  8034bc:	103ff326 	beq	r2,zero,80348c <__swsetup_r+0x64>
  8034c0:	00bfffc4 	movi	r2,-1
  8034c4:	003ff206 	br	803490 <__swsetup_r+0x68>
  8034c8:	80800517 	ldw	r2,20(r16)
  8034cc:	80800215 	stw	r2,8(r16)
  8034d0:	003fed06 	br	803488 <__swsetup_r+0x60>
  8034d4:	1809883a 	mov	r4,r3
  8034d8:	080517c0 	call	80517c <__sinit>
  8034dc:	003fde06 	br	803458 <__swsetup_r+0x30>
  8034e0:	20c0a00c 	andi	r3,r4,640
  8034e4:	00808004 	movi	r2,512
  8034e8:	18bfe026 	beq	r3,r2,80346c <__swsetup_r+0x44>
  8034ec:	8809883a 	mov	r4,r17
  8034f0:	800b883a 	mov	r5,r16
  8034f4:	0805ef40 	call	805ef4 <__smakebuf_r>
  8034f8:	8100030b 	ldhu	r4,12(r16)
  8034fc:	81400417 	ldw	r5,16(r16)
  803500:	003fda06 	br	80346c <__swsetup_r+0x44>
  803504:	2080040c 	andi	r2,r4,16
  803508:	103fed26 	beq	r2,zero,8034c0 <__swsetup_r+0x98>
  80350c:	2080010c 	andi	r2,r4,4
  803510:	10001226 	beq	r2,zero,80355c <__swsetup_r+0x134>
  803514:	81400c17 	ldw	r5,48(r16)
  803518:	28000526 	beq	r5,zero,803530 <__swsetup_r+0x108>
  80351c:	80801004 	addi	r2,r16,64
  803520:	28800226 	beq	r5,r2,80352c <__swsetup_r+0x104>
  803524:	8809883a 	mov	r4,r17
  803528:	08055000 	call	805500 <_free_r>
  80352c:	80000c15 	stw	zero,48(r16)
  803530:	8080030b 	ldhu	r2,12(r16)
  803534:	81400417 	ldw	r5,16(r16)
  803538:	80000115 	stw	zero,4(r16)
  80353c:	10bff6cc 	andi	r2,r2,65499
  803540:	8080030d 	sth	r2,12(r16)
  803544:	81400015 	stw	r5,0(r16)
  803548:	8080030b 	ldhu	r2,12(r16)
  80354c:	10800214 	ori	r2,r2,8
  803550:	113fffcc 	andi	r4,r2,65535
  803554:	8080030d 	sth	r2,12(r16)
  803558:	003fc306 	br	803468 <__swsetup_r+0x40>
  80355c:	81400417 	ldw	r5,16(r16)
  803560:	003ff906 	br	803548 <__swsetup_r+0x120>

00803564 <register_fini>:
  803564:	f800283a 	ret

00803568 <__call_exitprocs>:
  803568:	00802074 	movhi	r2,129
  80356c:	10871004 	addi	r2,r2,7232
  803570:	10800017 	ldw	r2,0(r2)
  803574:	defff304 	addi	sp,sp,-52
  803578:	df000b15 	stw	fp,44(sp)
  80357c:	d8800115 	stw	r2,4(sp)
  803580:	00800034 	movhi	r2,0
  803584:	10800004 	addi	r2,r2,0
  803588:	1005003a 	cmpeq	r2,r2,zero
  80358c:	d8800215 	stw	r2,8(sp)
  803590:	d8800117 	ldw	r2,4(sp)
  803594:	dd400815 	stw	r21,32(sp)
  803598:	dd000715 	stw	r20,28(sp)
  80359c:	10805204 	addi	r2,r2,328
  8035a0:	dfc00c15 	stw	ra,48(sp)
  8035a4:	ddc00a15 	stw	r23,40(sp)
  8035a8:	dd800915 	stw	r22,36(sp)
  8035ac:	dcc00615 	stw	r19,24(sp)
  8035b0:	dc800515 	stw	r18,20(sp)
  8035b4:	dc400415 	stw	r17,16(sp)
  8035b8:	dc000315 	stw	r16,12(sp)
  8035bc:	282b883a 	mov	r21,r5
  8035c0:	2039883a 	mov	fp,r4
  8035c4:	d8800015 	stw	r2,0(sp)
  8035c8:	2829003a 	cmpeq	r20,r5,zero
  8035cc:	d8800117 	ldw	r2,4(sp)
  8035d0:	14405217 	ldw	r17,328(r2)
  8035d4:	88001026 	beq	r17,zero,803618 <__call_exitprocs+0xb0>
  8035d8:	ddc00017 	ldw	r23,0(sp)
  8035dc:	88800117 	ldw	r2,4(r17)
  8035e0:	8c802204 	addi	r18,r17,136
  8035e4:	143fffc4 	addi	r16,r2,-1
  8035e8:	80000916 	blt	r16,zero,803610 <__call_exitprocs+0xa8>
  8035ec:	05bfffc4 	movi	r22,-1
  8035f0:	a000151e 	bne	r20,zero,803648 <__call_exitprocs+0xe0>
  8035f4:	8409883a 	add	r4,r16,r16
  8035f8:	2105883a 	add	r2,r4,r4
  8035fc:	1485883a 	add	r2,r2,r18
  803600:	10c02017 	ldw	r3,128(r2)
  803604:	a8c01126 	beq	r21,r3,80364c <__call_exitprocs+0xe4>
  803608:	843fffc4 	addi	r16,r16,-1
  80360c:	85bff81e 	bne	r16,r22,8035f0 <__call_exitprocs+0x88>
  803610:	d8800217 	ldw	r2,8(sp)
  803614:	10003126 	beq	r2,zero,8036dc <__call_exitprocs+0x174>
  803618:	dfc00c17 	ldw	ra,48(sp)
  80361c:	df000b17 	ldw	fp,44(sp)
  803620:	ddc00a17 	ldw	r23,40(sp)
  803624:	dd800917 	ldw	r22,36(sp)
  803628:	dd400817 	ldw	r21,32(sp)
  80362c:	dd000717 	ldw	r20,28(sp)
  803630:	dcc00617 	ldw	r19,24(sp)
  803634:	dc800517 	ldw	r18,20(sp)
  803638:	dc400417 	ldw	r17,16(sp)
  80363c:	dc000317 	ldw	r16,12(sp)
  803640:	dec00d04 	addi	sp,sp,52
  803644:	f800283a 	ret
  803648:	8409883a 	add	r4,r16,r16
  80364c:	88c00117 	ldw	r3,4(r17)
  803650:	2105883a 	add	r2,r4,r4
  803654:	1445883a 	add	r2,r2,r17
  803658:	18ffffc4 	addi	r3,r3,-1
  80365c:	11800217 	ldw	r6,8(r2)
  803660:	1c001526 	beq	r3,r16,8036b8 <__call_exitprocs+0x150>
  803664:	10000215 	stw	zero,8(r2)
  803668:	303fe726 	beq	r6,zero,803608 <__call_exitprocs+0xa0>
  80366c:	00c00044 	movi	r3,1
  803670:	1c06983a 	sll	r3,r3,r16
  803674:	90804017 	ldw	r2,256(r18)
  803678:	8cc00117 	ldw	r19,4(r17)
  80367c:	1884703a 	and	r2,r3,r2
  803680:	10001426 	beq	r2,zero,8036d4 <__call_exitprocs+0x16c>
  803684:	90804117 	ldw	r2,260(r18)
  803688:	1884703a 	and	r2,r3,r2
  80368c:	10000c1e 	bne	r2,zero,8036c0 <__call_exitprocs+0x158>
  803690:	2105883a 	add	r2,r4,r4
  803694:	1485883a 	add	r2,r2,r18
  803698:	11400017 	ldw	r5,0(r2)
  80369c:	e009883a 	mov	r4,fp
  8036a0:	303ee83a 	callr	r6
  8036a4:	88800117 	ldw	r2,4(r17)
  8036a8:	98bfc81e 	bne	r19,r2,8035cc <__call_exitprocs+0x64>
  8036ac:	b8800017 	ldw	r2,0(r23)
  8036b0:	147fd526 	beq	r2,r17,803608 <__call_exitprocs+0xa0>
  8036b4:	003fc506 	br	8035cc <__call_exitprocs+0x64>
  8036b8:	8c000115 	stw	r16,4(r17)
  8036bc:	003fea06 	br	803668 <__call_exitprocs+0x100>
  8036c0:	2105883a 	add	r2,r4,r4
  8036c4:	1485883a 	add	r2,r2,r18
  8036c8:	11000017 	ldw	r4,0(r2)
  8036cc:	303ee83a 	callr	r6
  8036d0:	003ff406 	br	8036a4 <__call_exitprocs+0x13c>
  8036d4:	303ee83a 	callr	r6
  8036d8:	003ff206 	br	8036a4 <__call_exitprocs+0x13c>
  8036dc:	88800117 	ldw	r2,4(r17)
  8036e0:	1000081e 	bne	r2,zero,803704 <__call_exitprocs+0x19c>
  8036e4:	89000017 	ldw	r4,0(r17)
  8036e8:	20000726 	beq	r4,zero,803708 <__call_exitprocs+0x1a0>
  8036ec:	b9000015 	stw	r4,0(r23)
  8036f0:	8809883a 	mov	r4,r17
  8036f4:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  8036f8:	bc400017 	ldw	r17,0(r23)
  8036fc:	883fb71e 	bne	r17,zero,8035dc <__call_exitprocs+0x74>
  803700:	003fc506 	br	803618 <__call_exitprocs+0xb0>
  803704:	89000017 	ldw	r4,0(r17)
  803708:	882f883a 	mov	r23,r17
  80370c:	2023883a 	mov	r17,r4
  803710:	883fb21e 	bne	r17,zero,8035dc <__call_exitprocs+0x74>
  803714:	003fc006 	br	803618 <__call_exitprocs+0xb0>

00803718 <quorem>:
  803718:	28c00417 	ldw	r3,16(r5)
  80371c:	20800417 	ldw	r2,16(r4)
  803720:	defff604 	addi	sp,sp,-40
  803724:	ddc00715 	stw	r23,28(sp)
  803728:	dd400515 	stw	r21,20(sp)
  80372c:	dfc00915 	stw	ra,36(sp)
  803730:	df000815 	stw	fp,32(sp)
  803734:	dd800615 	stw	r22,24(sp)
  803738:	dd000415 	stw	r20,16(sp)
  80373c:	dcc00315 	stw	r19,12(sp)
  803740:	dc800215 	stw	r18,8(sp)
  803744:	dc400115 	stw	r17,4(sp)
  803748:	dc000015 	stw	r16,0(sp)
  80374c:	202f883a 	mov	r23,r4
  803750:	282b883a 	mov	r21,r5
  803754:	10c07416 	blt	r2,r3,803928 <quorem+0x210>
  803758:	1c7fffc4 	addi	r17,r3,-1
  80375c:	8c45883a 	add	r2,r17,r17
  803760:	1085883a 	add	r2,r2,r2
  803764:	2c000504 	addi	r16,r5,20
  803768:	24c00504 	addi	r19,r4,20
  80376c:	14ed883a 	add	r22,r2,r19
  803770:	80a5883a 	add	r18,r16,r2
  803774:	b7000017 	ldw	fp,0(r22)
  803778:	91400017 	ldw	r5,0(r18)
  80377c:	e009883a 	mov	r4,fp
  803780:	29400044 	addi	r5,r5,1
  803784:	080a9c80 	call	80a9c8 <__udivsi3>
  803788:	1029883a 	mov	r20,r2
  80378c:	10003c1e 	bne	r2,zero,803880 <quorem+0x168>
  803790:	a80b883a 	mov	r5,r21
  803794:	b809883a 	mov	r4,r23
  803798:	0806c200 	call	806c20 <__mcmp>
  80379c:	10002b16 	blt	r2,zero,80384c <quorem+0x134>
  8037a0:	a5000044 	addi	r20,r20,1
  8037a4:	980f883a 	mov	r7,r19
  8037a8:	0011883a 	mov	r8,zero
  8037ac:	0009883a 	mov	r4,zero
  8037b0:	81400017 	ldw	r5,0(r16)
  8037b4:	38c00017 	ldw	r3,0(r7)
  8037b8:	84000104 	addi	r16,r16,4
  8037bc:	28bfffcc 	andi	r2,r5,65535
  8037c0:	2085883a 	add	r2,r4,r2
  8037c4:	11bfffcc 	andi	r6,r2,65535
  8037c8:	193fffcc 	andi	r4,r3,65535
  8037cc:	1004d43a 	srli	r2,r2,16
  8037d0:	280ad43a 	srli	r5,r5,16
  8037d4:	2189c83a 	sub	r4,r4,r6
  8037d8:	2209883a 	add	r4,r4,r8
  8037dc:	1806d43a 	srli	r3,r3,16
  8037e0:	288b883a 	add	r5,r5,r2
  8037e4:	200dd43a 	srai	r6,r4,16
  8037e8:	28bfffcc 	andi	r2,r5,65535
  8037ec:	1887c83a 	sub	r3,r3,r2
  8037f0:	1987883a 	add	r3,r3,r6
  8037f4:	3900000d 	sth	r4,0(r7)
  8037f8:	38c0008d 	sth	r3,2(r7)
  8037fc:	2808d43a 	srli	r4,r5,16
  803800:	39c00104 	addi	r7,r7,4
  803804:	1811d43a 	srai	r8,r3,16
  803808:	943fe92e 	bgeu	r18,r16,8037b0 <quorem+0x98>
  80380c:	8c45883a 	add	r2,r17,r17
  803810:	1085883a 	add	r2,r2,r2
  803814:	9885883a 	add	r2,r19,r2
  803818:	10c00017 	ldw	r3,0(r2)
  80381c:	18000b1e 	bne	r3,zero,80384c <quorem+0x134>
  803820:	113fff04 	addi	r4,r2,-4
  803824:	9900082e 	bgeu	r19,r4,803848 <quorem+0x130>
  803828:	10bfff17 	ldw	r2,-4(r2)
  80382c:	10000326 	beq	r2,zero,80383c <quorem+0x124>
  803830:	00000506 	br	803848 <quorem+0x130>
  803834:	20800017 	ldw	r2,0(r4)
  803838:	1000031e 	bne	r2,zero,803848 <quorem+0x130>
  80383c:	213fff04 	addi	r4,r4,-4
  803840:	8c7fffc4 	addi	r17,r17,-1
  803844:	993ffb36 	bltu	r19,r4,803834 <quorem+0x11c>
  803848:	bc400415 	stw	r17,16(r23)
  80384c:	a005883a 	mov	r2,r20
  803850:	dfc00917 	ldw	ra,36(sp)
  803854:	df000817 	ldw	fp,32(sp)
  803858:	ddc00717 	ldw	r23,28(sp)
  80385c:	dd800617 	ldw	r22,24(sp)
  803860:	dd400517 	ldw	r21,20(sp)
  803864:	dd000417 	ldw	r20,16(sp)
  803868:	dcc00317 	ldw	r19,12(sp)
  80386c:	dc800217 	ldw	r18,8(sp)
  803870:	dc400117 	ldw	r17,4(sp)
  803874:	dc000017 	ldw	r16,0(sp)
  803878:	dec00a04 	addi	sp,sp,40
  80387c:	f800283a 	ret
  803880:	980f883a 	mov	r7,r19
  803884:	8011883a 	mov	r8,r16
  803888:	0013883a 	mov	r9,zero
  80388c:	000d883a 	mov	r6,zero
  803890:	40c00017 	ldw	r3,0(r8)
  803894:	39000017 	ldw	r4,0(r7)
  803898:	42000104 	addi	r8,r8,4
  80389c:	18bfffcc 	andi	r2,r3,65535
  8038a0:	a085383a 	mul	r2,r20,r2
  8038a4:	1806d43a 	srli	r3,r3,16
  8038a8:	217fffcc 	andi	r5,r4,65535
  8038ac:	3085883a 	add	r2,r6,r2
  8038b0:	11bfffcc 	andi	r6,r2,65535
  8038b4:	a0c7383a 	mul	r3,r20,r3
  8038b8:	1004d43a 	srli	r2,r2,16
  8038bc:	298bc83a 	sub	r5,r5,r6
  8038c0:	2a4b883a 	add	r5,r5,r9
  8038c4:	2008d43a 	srli	r4,r4,16
  8038c8:	1887883a 	add	r3,r3,r2
  8038cc:	280dd43a 	srai	r6,r5,16
  8038d0:	18bfffcc 	andi	r2,r3,65535
  8038d4:	2089c83a 	sub	r4,r4,r2
  8038d8:	2189883a 	add	r4,r4,r6
  8038dc:	3900008d 	sth	r4,2(r7)
  8038e0:	3940000d 	sth	r5,0(r7)
  8038e4:	180cd43a 	srli	r6,r3,16
  8038e8:	39c00104 	addi	r7,r7,4
  8038ec:	2013d43a 	srai	r9,r4,16
  8038f0:	923fe72e 	bgeu	r18,r8,803890 <quorem+0x178>
  8038f4:	e03fa61e 	bne	fp,zero,803790 <quorem+0x78>
  8038f8:	b0ffff04 	addi	r3,r22,-4
  8038fc:	98c0082e 	bgeu	r19,r3,803920 <quorem+0x208>
  803900:	b0bfff17 	ldw	r2,-4(r22)
  803904:	10000326 	beq	r2,zero,803914 <quorem+0x1fc>
  803908:	00000506 	br	803920 <quorem+0x208>
  80390c:	18800017 	ldw	r2,0(r3)
  803910:	1000031e 	bne	r2,zero,803920 <quorem+0x208>
  803914:	18ffff04 	addi	r3,r3,-4
  803918:	8c7fffc4 	addi	r17,r17,-1
  80391c:	98fffb36 	bltu	r19,r3,80390c <quorem+0x1f4>
  803920:	bc400415 	stw	r17,16(r23)
  803924:	003f9a06 	br	803790 <quorem+0x78>
  803928:	0005883a 	mov	r2,zero
  80392c:	003fc806 	br	803850 <quorem+0x138>

00803930 <_dtoa_r>:
  803930:	22001017 	ldw	r8,64(r4)
  803934:	deffda04 	addi	sp,sp,-152
  803938:	dd402115 	stw	r21,132(sp)
  80393c:	dd002015 	stw	r20,128(sp)
  803940:	dc801e15 	stw	r18,120(sp)
  803944:	dc401d15 	stw	r17,116(sp)
  803948:	dfc02515 	stw	ra,148(sp)
  80394c:	df002415 	stw	fp,144(sp)
  803950:	ddc02315 	stw	r23,140(sp)
  803954:	dd802215 	stw	r22,136(sp)
  803958:	dcc01f15 	stw	r19,124(sp)
  80395c:	dc001c15 	stw	r16,112(sp)
  803960:	d9001615 	stw	r4,88(sp)
  803964:	3023883a 	mov	r17,r6
  803968:	2829883a 	mov	r20,r5
  80396c:	d9c01715 	stw	r7,92(sp)
  803970:	dc802817 	ldw	r18,160(sp)
  803974:	302b883a 	mov	r21,r6
  803978:	40000a26 	beq	r8,zero,8039a4 <_dtoa_r+0x74>
  80397c:	20801117 	ldw	r2,68(r4)
  803980:	400b883a 	mov	r5,r8
  803984:	40800115 	stw	r2,4(r8)
  803988:	20c01117 	ldw	r3,68(r4)
  80398c:	00800044 	movi	r2,1
  803990:	10c4983a 	sll	r2,r2,r3
  803994:	40800215 	stw	r2,8(r8)
  803998:	0806ac40 	call	806ac4 <_Bfree>
  80399c:	d8c01617 	ldw	r3,88(sp)
  8039a0:	18001015 	stw	zero,64(r3)
  8039a4:	8800a316 	blt	r17,zero,803c34 <_dtoa_r+0x304>
  8039a8:	90000015 	stw	zero,0(r18)
  8039ac:	a8dffc2c 	andhi	r3,r21,32752
  8039b0:	009ffc34 	movhi	r2,32752
  8039b4:	18809126 	beq	r3,r2,803bfc <_dtoa_r+0x2cc>
  8039b8:	000d883a 	mov	r6,zero
  8039bc:	000f883a 	mov	r7,zero
  8039c0:	a009883a 	mov	r4,r20
  8039c4:	a80b883a 	mov	r5,r21
  8039c8:	dd001215 	stw	r20,72(sp)
  8039cc:	dd401315 	stw	r21,76(sp)
  8039d0:	080a3080 	call	80a308 <__nedf2>
  8039d4:	1000171e 	bne	r2,zero,803a34 <_dtoa_r+0x104>
  8039d8:	d9802717 	ldw	r6,156(sp)
  8039dc:	00800044 	movi	r2,1
  8039e0:	30800015 	stw	r2,0(r6)
  8039e4:	d8802917 	ldw	r2,164(sp)
  8039e8:	10029b26 	beq	r2,zero,804458 <_dtoa_r+0xb28>
  8039ec:	d9002917 	ldw	r4,164(sp)
  8039f0:	00802074 	movhi	r2,129
  8039f4:	10beb844 	addi	r2,r2,-1311
  8039f8:	10ffffc4 	addi	r3,r2,-1
  8039fc:	20800015 	stw	r2,0(r4)
  803a00:	1805883a 	mov	r2,r3
  803a04:	dfc02517 	ldw	ra,148(sp)
  803a08:	df002417 	ldw	fp,144(sp)
  803a0c:	ddc02317 	ldw	r23,140(sp)
  803a10:	dd802217 	ldw	r22,136(sp)
  803a14:	dd402117 	ldw	r21,132(sp)
  803a18:	dd002017 	ldw	r20,128(sp)
  803a1c:	dcc01f17 	ldw	r19,124(sp)
  803a20:	dc801e17 	ldw	r18,120(sp)
  803a24:	dc401d17 	ldw	r17,116(sp)
  803a28:	dc001c17 	ldw	r16,112(sp)
  803a2c:	dec02604 	addi	sp,sp,152
  803a30:	f800283a 	ret
  803a34:	d9001617 	ldw	r4,88(sp)
  803a38:	d9401217 	ldw	r5,72(sp)
  803a3c:	d8800104 	addi	r2,sp,4
  803a40:	a80d883a 	mov	r6,r21
  803a44:	d9c00204 	addi	r7,sp,8
  803a48:	d8800015 	stw	r2,0(sp)
  803a4c:	08071000 	call	807100 <__d2b>
  803a50:	d8800715 	stw	r2,28(sp)
  803a54:	a804d53a 	srli	r2,r21,20
  803a58:	1101ffcc 	andi	r4,r2,2047
  803a5c:	20008626 	beq	r4,zero,803c78 <_dtoa_r+0x348>
  803a60:	d8c01217 	ldw	r3,72(sp)
  803a64:	00800434 	movhi	r2,16
  803a68:	10bfffc4 	addi	r2,r2,-1
  803a6c:	ddc00117 	ldw	r23,4(sp)
  803a70:	a884703a 	and	r2,r21,r2
  803a74:	1811883a 	mov	r8,r3
  803a78:	124ffc34 	orhi	r9,r2,16368
  803a7c:	25bf0044 	addi	r22,r4,-1023
  803a80:	d8000815 	stw	zero,32(sp)
  803a84:	0005883a 	mov	r2,zero
  803a88:	00cffe34 	movhi	r3,16376
  803a8c:	480b883a 	mov	r5,r9
  803a90:	4009883a 	mov	r4,r8
  803a94:	180f883a 	mov	r7,r3
  803a98:	100d883a 	mov	r6,r2
  803a9c:	0809b700 	call	809b70 <__subdf3>
  803aa0:	0218dbf4 	movhi	r8,25455
  803aa4:	4210d844 	addi	r8,r8,17249
  803aa8:	024ff4f4 	movhi	r9,16339
  803aac:	4a61e9c4 	addi	r9,r9,-30809
  803ab0:	480f883a 	mov	r7,r9
  803ab4:	400d883a 	mov	r6,r8
  803ab8:	180b883a 	mov	r5,r3
  803abc:	1009883a 	mov	r4,r2
  803ac0:	0809c640 	call	809c64 <__muldf3>
  803ac4:	0222d874 	movhi	r8,35681
  803ac8:	42322cc4 	addi	r8,r8,-14157
  803acc:	024ff1f4 	movhi	r9,16327
  803ad0:	4a628a04 	addi	r9,r9,-30168
  803ad4:	480f883a 	mov	r7,r9
  803ad8:	400d883a 	mov	r6,r8
  803adc:	180b883a 	mov	r5,r3
  803ae0:	1009883a 	mov	r4,r2
  803ae4:	0809bf00 	call	809bf0 <__adddf3>
  803ae8:	b009883a 	mov	r4,r22
  803aec:	1021883a 	mov	r16,r2
  803af0:	1823883a 	mov	r17,r3
  803af4:	080a5280 	call	80a528 <__floatsidf>
  803af8:	021427f4 	movhi	r8,20639
  803afc:	421e7ec4 	addi	r8,r8,31227
  803b00:	024ff4f4 	movhi	r9,16339
  803b04:	4a5104c4 	addi	r9,r9,17427
  803b08:	480f883a 	mov	r7,r9
  803b0c:	400d883a 	mov	r6,r8
  803b10:	180b883a 	mov	r5,r3
  803b14:	1009883a 	mov	r4,r2
  803b18:	0809c640 	call	809c64 <__muldf3>
  803b1c:	180f883a 	mov	r7,r3
  803b20:	880b883a 	mov	r5,r17
  803b24:	100d883a 	mov	r6,r2
  803b28:	8009883a 	mov	r4,r16
  803b2c:	0809bf00 	call	809bf0 <__adddf3>
  803b30:	1009883a 	mov	r4,r2
  803b34:	180b883a 	mov	r5,r3
  803b38:	1021883a 	mov	r16,r2
  803b3c:	1823883a 	mov	r17,r3
  803b40:	080a6200 	call	80a620 <__fixdfsi>
  803b44:	000d883a 	mov	r6,zero
  803b48:	000f883a 	mov	r7,zero
  803b4c:	8009883a 	mov	r4,r16
  803b50:	880b883a 	mov	r5,r17
  803b54:	d8800d15 	stw	r2,52(sp)
  803b58:	080a4a00 	call	80a4a0 <__ltdf2>
  803b5c:	10031716 	blt	r2,zero,8047bc <_dtoa_r+0xe8c>
  803b60:	d8c00d17 	ldw	r3,52(sp)
  803b64:	00800584 	movi	r2,22
  803b68:	10c1482e 	bgeu	r2,r3,80408c <_dtoa_r+0x75c>
  803b6c:	01000044 	movi	r4,1
  803b70:	d9000c15 	stw	r4,48(sp)
  803b74:	bd85c83a 	sub	r2,r23,r22
  803b78:	11bfffc4 	addi	r6,r2,-1
  803b7c:	30030b16 	blt	r6,zero,8047ac <_dtoa_r+0xe7c>
  803b80:	d9800a15 	stw	r6,40(sp)
  803b84:	d8001115 	stw	zero,68(sp)
  803b88:	d8c00d17 	ldw	r3,52(sp)
  803b8c:	1802ff16 	blt	r3,zero,80478c <_dtoa_r+0xe5c>
  803b90:	d9000a17 	ldw	r4,40(sp)
  803b94:	d8c00915 	stw	r3,36(sp)
  803b98:	d8001015 	stw	zero,64(sp)
  803b9c:	20c9883a 	add	r4,r4,r3
  803ba0:	d9000a15 	stw	r4,40(sp)
  803ba4:	d9001717 	ldw	r4,92(sp)
  803ba8:	00800244 	movi	r2,9
  803bac:	11004636 	bltu	r2,r4,803cc8 <_dtoa_r+0x398>
  803bb0:	00800144 	movi	r2,5
  803bb4:	11020416 	blt	r2,r4,8043c8 <_dtoa_r+0xa98>
  803bb8:	04400044 	movi	r17,1
  803bbc:	d8c01717 	ldw	r3,92(sp)
  803bc0:	00800144 	movi	r2,5
  803bc4:	10c1ed36 	bltu	r2,r3,80437c <_dtoa_r+0xa4c>
  803bc8:	18c5883a 	add	r2,r3,r3
  803bcc:	1085883a 	add	r2,r2,r2
  803bd0:	00c02034 	movhi	r3,128
  803bd4:	18cef904 	addi	r3,r3,15332
  803bd8:	10c5883a 	add	r2,r2,r3
  803bdc:	11000017 	ldw	r4,0(r2)
  803be0:	2000683a 	jmp	r4
  803be4:	00803cd0 	cmplti	r2,zero,243
  803be8:	00803cd0 	cmplti	r2,zero,243
  803bec:	008046d0 	cmplti	r2,zero,283
  803bf0:	008046a8 	cmpgeui	r2,zero,282
  803bf4:	008046ec 	andhi	r2,zero,283
  803bf8:	008046f8 	rdprs	r2,zero,283
  803bfc:	d9002717 	ldw	r4,156(sp)
  803c00:	0089c3c4 	movi	r2,9999
  803c04:	20800015 	stw	r2,0(r4)
  803c08:	a0001026 	beq	r20,zero,803c4c <_dtoa_r+0x31c>
  803c0c:	00c02074 	movhi	r3,129
  803c10:	18feeb04 	addi	r3,r3,-1108
  803c14:	d9802917 	ldw	r6,164(sp)
  803c18:	303f7926 	beq	r6,zero,803a00 <_dtoa_r+0xd0>
  803c1c:	188000c7 	ldb	r2,3(r3)
  803c20:	190000c4 	addi	r4,r3,3
  803c24:	1000101e 	bne	r2,zero,803c68 <_dtoa_r+0x338>
  803c28:	d8802917 	ldw	r2,164(sp)
  803c2c:	11000015 	stw	r4,0(r2)
  803c30:	003f7306 	br	803a00 <_dtoa_r+0xd0>
  803c34:	00a00034 	movhi	r2,32768
  803c38:	10bfffc4 	addi	r2,r2,-1
  803c3c:	00c00044 	movi	r3,1
  803c40:	88aa703a 	and	r21,r17,r2
  803c44:	90c00015 	stw	r3,0(r18)
  803c48:	003f5806 	br	8039ac <_dtoa_r+0x7c>
  803c4c:	00800434 	movhi	r2,16
  803c50:	10bfffc4 	addi	r2,r2,-1
  803c54:	a884703a 	and	r2,r21,r2
  803c58:	103fec1e 	bne	r2,zero,803c0c <_dtoa_r+0x2dc>
  803c5c:	00c02074 	movhi	r3,129
  803c60:	18fee804 	addi	r3,r3,-1120
  803c64:	003feb06 	br	803c14 <_dtoa_r+0x2e4>
  803c68:	d8802917 	ldw	r2,164(sp)
  803c6c:	19000204 	addi	r4,r3,8
  803c70:	11000015 	stw	r4,0(r2)
  803c74:	003f6206 	br	803a00 <_dtoa_r+0xd0>
  803c78:	ddc00117 	ldw	r23,4(sp)
  803c7c:	d8800217 	ldw	r2,8(sp)
  803c80:	01000804 	movi	r4,32
  803c84:	b8c10c84 	addi	r3,r23,1074
  803c88:	18a3883a 	add	r17,r3,r2
  803c8c:	2441b80e 	bge	r4,r17,804370 <_dtoa_r+0xa40>
  803c90:	00c01004 	movi	r3,64
  803c94:	1c47c83a 	sub	r3,r3,r17
  803c98:	88bff804 	addi	r2,r17,-32
  803c9c:	a8c6983a 	sll	r3,r21,r3
  803ca0:	a084d83a 	srl	r2,r20,r2
  803ca4:	1888b03a 	or	r4,r3,r2
  803ca8:	080a6f80 	call	80a6f8 <__floatunsidf>
  803cac:	1011883a 	mov	r8,r2
  803cb0:	00bf8434 	movhi	r2,65040
  803cb4:	01000044 	movi	r4,1
  803cb8:	10d3883a 	add	r9,r2,r3
  803cbc:	8dbef344 	addi	r22,r17,-1075
  803cc0:	d9000815 	stw	r4,32(sp)
  803cc4:	003f6f06 	br	803a84 <_dtoa_r+0x154>
  803cc8:	d8001715 	stw	zero,92(sp)
  803ccc:	04400044 	movi	r17,1
  803cd0:	00bfffc4 	movi	r2,-1
  803cd4:	00c00044 	movi	r3,1
  803cd8:	d8800e15 	stw	r2,56(sp)
  803cdc:	d8002615 	stw	zero,152(sp)
  803ce0:	d8800f15 	stw	r2,60(sp)
  803ce4:	d8c00b15 	stw	r3,44(sp)
  803ce8:	1021883a 	mov	r16,r2
  803cec:	d8801617 	ldw	r2,88(sp)
  803cf0:	10001115 	stw	zero,68(r2)
  803cf4:	d8801617 	ldw	r2,88(sp)
  803cf8:	11401117 	ldw	r5,68(r2)
  803cfc:	1009883a 	mov	r4,r2
  803d00:	08070440 	call	807044 <_Balloc>
  803d04:	d8c01617 	ldw	r3,88(sp)
  803d08:	d8800515 	stw	r2,20(sp)
  803d0c:	18801015 	stw	r2,64(r3)
  803d10:	00800384 	movi	r2,14
  803d14:	14006836 	bltu	r2,r16,803eb8 <_dtoa_r+0x588>
  803d18:	8805003a 	cmpeq	r2,r17,zero
  803d1c:	1000661e 	bne	r2,zero,803eb8 <_dtoa_r+0x588>
  803d20:	d9000d17 	ldw	r4,52(sp)
  803d24:	0102300e 	bge	zero,r4,8045e8 <_dtoa_r+0xcb8>
  803d28:	208003cc 	andi	r2,r4,15
  803d2c:	100490fa 	slli	r2,r2,3
  803d30:	2025d13a 	srai	r18,r4,4
  803d34:	00c02074 	movhi	r3,129
  803d38:	18fefc04 	addi	r3,r3,-1040
  803d3c:	10c5883a 	add	r2,r2,r3
  803d40:	90c0040c 	andi	r3,r18,16
  803d44:	14000017 	ldw	r16,0(r2)
  803d48:	14400117 	ldw	r17,4(r2)
  803d4c:	18036a1e 	bne	r3,zero,804af8 <_dtoa_r+0x11c8>
  803d50:	05800084 	movi	r22,2
  803d54:	90001026 	beq	r18,zero,803d98 <_dtoa_r+0x468>
  803d58:	04c02074 	movhi	r19,129
  803d5c:	9cff2e04 	addi	r19,r19,-840
  803d60:	9080004c 	andi	r2,r18,1
  803d64:	1005003a 	cmpeq	r2,r2,zero
  803d68:	1000081e 	bne	r2,zero,803d8c <_dtoa_r+0x45c>
  803d6c:	99800017 	ldw	r6,0(r19)
  803d70:	99c00117 	ldw	r7,4(r19)
  803d74:	880b883a 	mov	r5,r17
  803d78:	8009883a 	mov	r4,r16
  803d7c:	0809c640 	call	809c64 <__muldf3>
  803d80:	1021883a 	mov	r16,r2
  803d84:	b5800044 	addi	r22,r22,1
  803d88:	1823883a 	mov	r17,r3
  803d8c:	9025d07a 	srai	r18,r18,1
  803d90:	9cc00204 	addi	r19,r19,8
  803d94:	903ff21e 	bne	r18,zero,803d60 <_dtoa_r+0x430>
  803d98:	a80b883a 	mov	r5,r21
  803d9c:	a009883a 	mov	r4,r20
  803da0:	880f883a 	mov	r7,r17
  803da4:	800d883a 	mov	r6,r16
  803da8:	080a0280 	call	80a028 <__divdf3>
  803dac:	1029883a 	mov	r20,r2
  803db0:	182b883a 	mov	r21,r3
  803db4:	d8c00c17 	ldw	r3,48(sp)
  803db8:	1805003a 	cmpeq	r2,r3,zero
  803dbc:	1000081e 	bne	r2,zero,803de0 <_dtoa_r+0x4b0>
  803dc0:	0005883a 	mov	r2,zero
  803dc4:	00cffc34 	movhi	r3,16368
  803dc8:	180f883a 	mov	r7,r3
  803dcc:	a009883a 	mov	r4,r20
  803dd0:	a80b883a 	mov	r5,r21
  803dd4:	100d883a 	mov	r6,r2
  803dd8:	080a4a00 	call	80a4a0 <__ltdf2>
  803ddc:	1003fe16 	blt	r2,zero,804dd8 <_dtoa_r+0x14a8>
  803de0:	b009883a 	mov	r4,r22
  803de4:	080a5280 	call	80a528 <__floatsidf>
  803de8:	180b883a 	mov	r5,r3
  803dec:	1009883a 	mov	r4,r2
  803df0:	a00d883a 	mov	r6,r20
  803df4:	a80f883a 	mov	r7,r21
  803df8:	0809c640 	call	809c64 <__muldf3>
  803dfc:	0011883a 	mov	r8,zero
  803e00:	02500734 	movhi	r9,16412
  803e04:	1009883a 	mov	r4,r2
  803e08:	180b883a 	mov	r5,r3
  803e0c:	480f883a 	mov	r7,r9
  803e10:	400d883a 	mov	r6,r8
  803e14:	0809bf00 	call	809bf0 <__adddf3>
  803e18:	d9000f17 	ldw	r4,60(sp)
  803e1c:	102d883a 	mov	r22,r2
  803e20:	00bf3034 	movhi	r2,64704
  803e24:	18b9883a 	add	fp,r3,r2
  803e28:	e02f883a 	mov	r23,fp
  803e2c:	20028f1e 	bne	r4,zero,80486c <_dtoa_r+0xf3c>
  803e30:	0005883a 	mov	r2,zero
  803e34:	00d00534 	movhi	r3,16404
  803e38:	a009883a 	mov	r4,r20
  803e3c:	a80b883a 	mov	r5,r21
  803e40:	180f883a 	mov	r7,r3
  803e44:	100d883a 	mov	r6,r2
  803e48:	0809b700 	call	809b70 <__subdf3>
  803e4c:	1009883a 	mov	r4,r2
  803e50:	e00f883a 	mov	r7,fp
  803e54:	180b883a 	mov	r5,r3
  803e58:	b00d883a 	mov	r6,r22
  803e5c:	1025883a 	mov	r18,r2
  803e60:	1827883a 	mov	r19,r3
  803e64:	080a3900 	call	80a390 <__gtdf2>
  803e68:	00834f16 	blt	zero,r2,804ba8 <_dtoa_r+0x1278>
  803e6c:	e0e0003c 	xorhi	r3,fp,32768
  803e70:	9009883a 	mov	r4,r18
  803e74:	980b883a 	mov	r5,r19
  803e78:	180f883a 	mov	r7,r3
  803e7c:	b00d883a 	mov	r6,r22
  803e80:	080a4a00 	call	80a4a0 <__ltdf2>
  803e84:	1000080e 	bge	r2,zero,803ea8 <_dtoa_r+0x578>
  803e88:	0027883a 	mov	r19,zero
  803e8c:	0025883a 	mov	r18,zero
  803e90:	d8802617 	ldw	r2,152(sp)
  803e94:	df000517 	ldw	fp,20(sp)
  803e98:	d8000615 	stw	zero,24(sp)
  803e9c:	0084303a 	nor	r2,zero,r2
  803ea0:	d8800d15 	stw	r2,52(sp)
  803ea4:	00019b06 	br	804514 <_dtoa_r+0xbe4>
  803ea8:	d9801217 	ldw	r6,72(sp)
  803eac:	d8801317 	ldw	r2,76(sp)
  803eb0:	3029883a 	mov	r20,r6
  803eb4:	102b883a 	mov	r21,r2
  803eb8:	d8c00217 	ldw	r3,8(sp)
  803ebc:	18008516 	blt	r3,zero,8040d4 <_dtoa_r+0x7a4>
  803ec0:	d9000d17 	ldw	r4,52(sp)
  803ec4:	00800384 	movi	r2,14
  803ec8:	11008216 	blt	r2,r4,8040d4 <_dtoa_r+0x7a4>
  803ecc:	200490fa 	slli	r2,r4,3
  803ed0:	d9802617 	ldw	r6,152(sp)
  803ed4:	00c02074 	movhi	r3,129
  803ed8:	18fefc04 	addi	r3,r3,-1040
  803edc:	10c5883a 	add	r2,r2,r3
  803ee0:	14800017 	ldw	r18,0(r2)
  803ee4:	14c00117 	ldw	r19,4(r2)
  803ee8:	30031e16 	blt	r6,zero,804b64 <_dtoa_r+0x1234>
  803eec:	d9000517 	ldw	r4,20(sp)
  803ef0:	d8c00f17 	ldw	r3,60(sp)
  803ef4:	a823883a 	mov	r17,r21
  803ef8:	a021883a 	mov	r16,r20
  803efc:	192b883a 	add	r21,r3,r4
  803f00:	2039883a 	mov	fp,r4
  803f04:	00000f06 	br	803f44 <_dtoa_r+0x614>
  803f08:	0005883a 	mov	r2,zero
  803f0c:	00d00934 	movhi	r3,16420
  803f10:	5009883a 	mov	r4,r10
  803f14:	580b883a 	mov	r5,r11
  803f18:	180f883a 	mov	r7,r3
  803f1c:	100d883a 	mov	r6,r2
  803f20:	0809c640 	call	809c64 <__muldf3>
  803f24:	180b883a 	mov	r5,r3
  803f28:	000d883a 	mov	r6,zero
  803f2c:	000f883a 	mov	r7,zero
  803f30:	1009883a 	mov	r4,r2
  803f34:	1021883a 	mov	r16,r2
  803f38:	1823883a 	mov	r17,r3
  803f3c:	080a3080 	call	80a308 <__nedf2>
  803f40:	10004526 	beq	r2,zero,804058 <_dtoa_r+0x728>
  803f44:	900d883a 	mov	r6,r18
  803f48:	980f883a 	mov	r7,r19
  803f4c:	8009883a 	mov	r4,r16
  803f50:	880b883a 	mov	r5,r17
  803f54:	080a0280 	call	80a028 <__divdf3>
  803f58:	180b883a 	mov	r5,r3
  803f5c:	1009883a 	mov	r4,r2
  803f60:	080a6200 	call	80a620 <__fixdfsi>
  803f64:	1009883a 	mov	r4,r2
  803f68:	1029883a 	mov	r20,r2
  803f6c:	080a5280 	call	80a528 <__floatsidf>
  803f70:	180f883a 	mov	r7,r3
  803f74:	9009883a 	mov	r4,r18
  803f78:	980b883a 	mov	r5,r19
  803f7c:	100d883a 	mov	r6,r2
  803f80:	0809c640 	call	809c64 <__muldf3>
  803f84:	180f883a 	mov	r7,r3
  803f88:	880b883a 	mov	r5,r17
  803f8c:	8009883a 	mov	r4,r16
  803f90:	100d883a 	mov	r6,r2
  803f94:	0809b700 	call	809b70 <__subdf3>
  803f98:	1015883a 	mov	r10,r2
  803f9c:	a0800c04 	addi	r2,r20,48
  803fa0:	e0800005 	stb	r2,0(fp)
  803fa4:	e7000044 	addi	fp,fp,1
  803fa8:	1817883a 	mov	r11,r3
  803fac:	e57fd61e 	bne	fp,r21,803f08 <_dtoa_r+0x5d8>
  803fb0:	500d883a 	mov	r6,r10
  803fb4:	180f883a 	mov	r7,r3
  803fb8:	5009883a 	mov	r4,r10
  803fbc:	180b883a 	mov	r5,r3
  803fc0:	0809bf00 	call	809bf0 <__adddf3>
  803fc4:	100d883a 	mov	r6,r2
  803fc8:	9009883a 	mov	r4,r18
  803fcc:	980b883a 	mov	r5,r19
  803fd0:	180f883a 	mov	r7,r3
  803fd4:	1021883a 	mov	r16,r2
  803fd8:	1823883a 	mov	r17,r3
  803fdc:	080a4a00 	call	80a4a0 <__ltdf2>
  803fe0:	10000816 	blt	r2,zero,804004 <_dtoa_r+0x6d4>
  803fe4:	980b883a 	mov	r5,r19
  803fe8:	800d883a 	mov	r6,r16
  803fec:	880f883a 	mov	r7,r17
  803ff0:	9009883a 	mov	r4,r18
  803ff4:	080a2800 	call	80a280 <__eqdf2>
  803ff8:	1000171e 	bne	r2,zero,804058 <_dtoa_r+0x728>
  803ffc:	a080004c 	andi	r2,r20,1
  804000:	10001526 	beq	r2,zero,804058 <_dtoa_r+0x728>
  804004:	d8800d17 	ldw	r2,52(sp)
  804008:	d8800415 	stw	r2,16(sp)
  80400c:	e009883a 	mov	r4,fp
  804010:	213fffc4 	addi	r4,r4,-1
  804014:	20c00007 	ldb	r3,0(r4)
  804018:	00800e44 	movi	r2,57
  80401c:	1880081e 	bne	r3,r2,804040 <_dtoa_r+0x710>
  804020:	d8800517 	ldw	r2,20(sp)
  804024:	113ffa1e 	bne	r2,r4,804010 <_dtoa_r+0x6e0>
  804028:	d8c00417 	ldw	r3,16(sp)
  80402c:	d9800517 	ldw	r6,20(sp)
  804030:	00800c04 	movi	r2,48
  804034:	18c00044 	addi	r3,r3,1
  804038:	d8c00415 	stw	r3,16(sp)
  80403c:	30800005 	stb	r2,0(r6)
  804040:	20800003 	ldbu	r2,0(r4)
  804044:	d8c00417 	ldw	r3,16(sp)
  804048:	27000044 	addi	fp,r4,1
  80404c:	10800044 	addi	r2,r2,1
  804050:	d8c00d15 	stw	r3,52(sp)
  804054:	20800005 	stb	r2,0(r4)
  804058:	d9001617 	ldw	r4,88(sp)
  80405c:	d9400717 	ldw	r5,28(sp)
  804060:	0806ac40 	call	806ac4 <_Bfree>
  804064:	e0000005 	stb	zero,0(fp)
  804068:	d9800d17 	ldw	r6,52(sp)
  80406c:	d8c02717 	ldw	r3,156(sp)
  804070:	d9002917 	ldw	r4,164(sp)
  804074:	30800044 	addi	r2,r6,1
  804078:	18800015 	stw	r2,0(r3)
  80407c:	20029c26 	beq	r4,zero,804af0 <_dtoa_r+0x11c0>
  804080:	d8c00517 	ldw	r3,20(sp)
  804084:	27000015 	stw	fp,0(r4)
  804088:	003e5d06 	br	803a00 <_dtoa_r+0xd0>
  80408c:	d9800d17 	ldw	r6,52(sp)
  804090:	00c02074 	movhi	r3,129
  804094:	18fefc04 	addi	r3,r3,-1040
  804098:	d9001217 	ldw	r4,72(sp)
  80409c:	300490fa 	slli	r2,r6,3
  8040a0:	d9401317 	ldw	r5,76(sp)
  8040a4:	10c5883a 	add	r2,r2,r3
  8040a8:	12000017 	ldw	r8,0(r2)
  8040ac:	12400117 	ldw	r9,4(r2)
  8040b0:	400d883a 	mov	r6,r8
  8040b4:	480f883a 	mov	r7,r9
  8040b8:	080a4a00 	call	80a4a0 <__ltdf2>
  8040bc:	1000030e 	bge	r2,zero,8040cc <_dtoa_r+0x79c>
  8040c0:	d8800d17 	ldw	r2,52(sp)
  8040c4:	10bfffc4 	addi	r2,r2,-1
  8040c8:	d8800d15 	stw	r2,52(sp)
  8040cc:	d8000c15 	stw	zero,48(sp)
  8040d0:	003ea806 	br	803b74 <_dtoa_r+0x244>
  8040d4:	d9000b17 	ldw	r4,44(sp)
  8040d8:	202cc03a 	cmpne	r22,r4,zero
  8040dc:	b000c71e 	bne	r22,zero,8043fc <_dtoa_r+0xacc>
  8040e0:	dc001117 	ldw	r16,68(sp)
  8040e4:	dc801017 	ldw	r18,64(sp)
  8040e8:	0027883a 	mov	r19,zero
  8040ec:	04000b0e 	bge	zero,r16,80411c <_dtoa_r+0x7ec>
  8040f0:	d8c00a17 	ldw	r3,40(sp)
  8040f4:	00c0090e 	bge	zero,r3,80411c <_dtoa_r+0x7ec>
  8040f8:	8005883a 	mov	r2,r16
  8040fc:	1c011316 	blt	r3,r16,80454c <_dtoa_r+0xc1c>
  804100:	d9000a17 	ldw	r4,40(sp)
  804104:	d9801117 	ldw	r6,68(sp)
  804108:	80a1c83a 	sub	r16,r16,r2
  80410c:	2089c83a 	sub	r4,r4,r2
  804110:	308dc83a 	sub	r6,r6,r2
  804114:	d9000a15 	stw	r4,40(sp)
  804118:	d9801115 	stw	r6,68(sp)
  80411c:	d8801017 	ldw	r2,64(sp)
  804120:	0080150e 	bge	zero,r2,804178 <_dtoa_r+0x848>
  804124:	d8c00b17 	ldw	r3,44(sp)
  804128:	1805003a 	cmpeq	r2,r3,zero
  80412c:	1001c91e 	bne	r2,zero,804854 <_dtoa_r+0xf24>
  804130:	04800e0e 	bge	zero,r18,80416c <_dtoa_r+0x83c>
  804134:	d9001617 	ldw	r4,88(sp)
  804138:	980b883a 	mov	r5,r19
  80413c:	900d883a 	mov	r6,r18
  804140:	08078780 	call	807878 <__pow5mult>
  804144:	d9001617 	ldw	r4,88(sp)
  804148:	d9800717 	ldw	r6,28(sp)
  80414c:	100b883a 	mov	r5,r2
  804150:	1027883a 	mov	r19,r2
  804154:	08075540 	call	807554 <__multiply>
  804158:	d9001617 	ldw	r4,88(sp)
  80415c:	d9400717 	ldw	r5,28(sp)
  804160:	1023883a 	mov	r17,r2
  804164:	0806ac40 	call	806ac4 <_Bfree>
  804168:	dc400715 	stw	r17,28(sp)
  80416c:	d9001017 	ldw	r4,64(sp)
  804170:	248dc83a 	sub	r6,r4,r18
  804174:	30010e1e 	bne	r6,zero,8045b0 <_dtoa_r+0xc80>
  804178:	d9001617 	ldw	r4,88(sp)
  80417c:	04400044 	movi	r17,1
  804180:	880b883a 	mov	r5,r17
  804184:	080773c0 	call	80773c <__i2b>
  804188:	d9800917 	ldw	r6,36(sp)
  80418c:	1025883a 	mov	r18,r2
  804190:	0180040e 	bge	zero,r6,8041a4 <_dtoa_r+0x874>
  804194:	d9001617 	ldw	r4,88(sp)
  804198:	100b883a 	mov	r5,r2
  80419c:	08078780 	call	807878 <__pow5mult>
  8041a0:	1025883a 	mov	r18,r2
  8041a4:	d8801717 	ldw	r2,92(sp)
  8041a8:	8880f30e 	bge	r17,r2,804578 <_dtoa_r+0xc48>
  8041ac:	0023883a 	mov	r17,zero
  8041b0:	d9800917 	ldw	r6,36(sp)
  8041b4:	30019e1e 	bne	r6,zero,804830 <_dtoa_r+0xf00>
  8041b8:	00c00044 	movi	r3,1
  8041bc:	d9000a17 	ldw	r4,40(sp)
  8041c0:	20c5883a 	add	r2,r4,r3
  8041c4:	10c007cc 	andi	r3,r2,31
  8041c8:	1800841e 	bne	r3,zero,8043dc <_dtoa_r+0xaac>
  8041cc:	00800704 	movi	r2,28
  8041d0:	d9000a17 	ldw	r4,40(sp)
  8041d4:	d9801117 	ldw	r6,68(sp)
  8041d8:	80a1883a 	add	r16,r16,r2
  8041dc:	2089883a 	add	r4,r4,r2
  8041e0:	308d883a 	add	r6,r6,r2
  8041e4:	d9000a15 	stw	r4,40(sp)
  8041e8:	d9801115 	stw	r6,68(sp)
  8041ec:	d8801117 	ldw	r2,68(sp)
  8041f0:	0080050e 	bge	zero,r2,804208 <_dtoa_r+0x8d8>
  8041f4:	d9400717 	ldw	r5,28(sp)
  8041f8:	d9001617 	ldw	r4,88(sp)
  8041fc:	100d883a 	mov	r6,r2
  804200:	08074080 	call	807408 <__lshift>
  804204:	d8800715 	stw	r2,28(sp)
  804208:	d8c00a17 	ldw	r3,40(sp)
  80420c:	00c0050e 	bge	zero,r3,804224 <_dtoa_r+0x8f4>
  804210:	d9001617 	ldw	r4,88(sp)
  804214:	900b883a 	mov	r5,r18
  804218:	180d883a 	mov	r6,r3
  80421c:	08074080 	call	807408 <__lshift>
  804220:	1025883a 	mov	r18,r2
  804224:	d9000c17 	ldw	r4,48(sp)
  804228:	2005003a 	cmpeq	r2,r4,zero
  80422c:	10016f26 	beq	r2,zero,8047ec <_dtoa_r+0xebc>
  804230:	d9000f17 	ldw	r4,60(sp)
  804234:	0102170e 	bge	zero,r4,804a94 <_dtoa_r+0x1164>
  804238:	d9800b17 	ldw	r6,44(sp)
  80423c:	3005003a 	cmpeq	r2,r6,zero
  804240:	1000881e 	bne	r2,zero,804464 <_dtoa_r+0xb34>
  804244:	0400050e 	bge	zero,r16,80425c <_dtoa_r+0x92c>
  804248:	d9001617 	ldw	r4,88(sp)
  80424c:	980b883a 	mov	r5,r19
  804250:	800d883a 	mov	r6,r16
  804254:	08074080 	call	807408 <__lshift>
  804258:	1027883a 	mov	r19,r2
  80425c:	8804c03a 	cmpne	r2,r17,zero
  804260:	1002541e 	bne	r2,zero,804bb4 <_dtoa_r+0x1284>
  804264:	980b883a 	mov	r5,r19
  804268:	dd800517 	ldw	r22,20(sp)
  80426c:	dcc00615 	stw	r19,24(sp)
  804270:	a700004c 	andi	fp,r20,1
  804274:	2827883a 	mov	r19,r5
  804278:	d9000717 	ldw	r4,28(sp)
  80427c:	900b883a 	mov	r5,r18
  804280:	08037180 	call	803718 <quorem>
  804284:	d9000717 	ldw	r4,28(sp)
  804288:	d9400617 	ldw	r5,24(sp)
  80428c:	1023883a 	mov	r17,r2
  804290:	8dc00c04 	addi	r23,r17,48
  804294:	0806c200 	call	806c20 <__mcmp>
  804298:	d9001617 	ldw	r4,88(sp)
  80429c:	900b883a 	mov	r5,r18
  8042a0:	980d883a 	mov	r6,r19
  8042a4:	1029883a 	mov	r20,r2
  8042a8:	080727c0 	call	80727c <__mdiff>
  8042ac:	102b883a 	mov	r21,r2
  8042b0:	10800317 	ldw	r2,12(r2)
  8042b4:	1001281e 	bne	r2,zero,804758 <_dtoa_r+0xe28>
  8042b8:	d9000717 	ldw	r4,28(sp)
  8042bc:	a80b883a 	mov	r5,r21
  8042c0:	0806c200 	call	806c20 <__mcmp>
  8042c4:	d9001617 	ldw	r4,88(sp)
  8042c8:	1021883a 	mov	r16,r2
  8042cc:	a80b883a 	mov	r5,r21
  8042d0:	0806ac40 	call	806ac4 <_Bfree>
  8042d4:	8000041e 	bne	r16,zero,8042e8 <_dtoa_r+0x9b8>
  8042d8:	d8801717 	ldw	r2,92(sp)
  8042dc:	1000021e 	bne	r2,zero,8042e8 <_dtoa_r+0x9b8>
  8042e0:	e004c03a 	cmpne	r2,fp,zero
  8042e4:	10011726 	beq	r2,zero,804744 <_dtoa_r+0xe14>
  8042e8:	a0010616 	blt	r20,zero,804704 <_dtoa_r+0xdd4>
  8042ec:	a000041e 	bne	r20,zero,804300 <_dtoa_r+0x9d0>
  8042f0:	d8c01717 	ldw	r3,92(sp)
  8042f4:	1800021e 	bne	r3,zero,804300 <_dtoa_r+0x9d0>
  8042f8:	e004c03a 	cmpne	r2,fp,zero
  8042fc:	10010126 	beq	r2,zero,804704 <_dtoa_r+0xdd4>
  804300:	04023d16 	blt	zero,r16,804bf8 <_dtoa_r+0x12c8>
  804304:	b5c00005 	stb	r23,0(r22)
  804308:	d9800517 	ldw	r6,20(sp)
  80430c:	d9000f17 	ldw	r4,60(sp)
  804310:	b5800044 	addi	r22,r22,1
  804314:	3105883a 	add	r2,r6,r4
  804318:	b0806526 	beq	r22,r2,8044b0 <_dtoa_r+0xb80>
  80431c:	d9400717 	ldw	r5,28(sp)
  804320:	d9001617 	ldw	r4,88(sp)
  804324:	01800284 	movi	r6,10
  804328:	000f883a 	mov	r7,zero
  80432c:	08077780 	call	807778 <__multadd>
  804330:	d8800715 	stw	r2,28(sp)
  804334:	d8800617 	ldw	r2,24(sp)
  804338:	14c10c26 	beq	r2,r19,80476c <_dtoa_r+0xe3c>
  80433c:	d9400617 	ldw	r5,24(sp)
  804340:	d9001617 	ldw	r4,88(sp)
  804344:	01800284 	movi	r6,10
  804348:	000f883a 	mov	r7,zero
  80434c:	08077780 	call	807778 <__multadd>
  804350:	d9001617 	ldw	r4,88(sp)
  804354:	980b883a 	mov	r5,r19
  804358:	01800284 	movi	r6,10
  80435c:	000f883a 	mov	r7,zero
  804360:	d8800615 	stw	r2,24(sp)
  804364:	08077780 	call	807778 <__multadd>
  804368:	1027883a 	mov	r19,r2
  80436c:	003fc206 	br	804278 <_dtoa_r+0x948>
  804370:	2445c83a 	sub	r2,r4,r17
  804374:	a088983a 	sll	r4,r20,r2
  804378:	003e4b06 	br	803ca8 <_dtoa_r+0x378>
  80437c:	01bfffc4 	movi	r6,-1
  804380:	00800044 	movi	r2,1
  804384:	d9800e15 	stw	r6,56(sp)
  804388:	d9800f15 	stw	r6,60(sp)
  80438c:	d8800b15 	stw	r2,44(sp)
  804390:	d8c01617 	ldw	r3,88(sp)
  804394:	008005c4 	movi	r2,23
  804398:	18001115 	stw	zero,68(r3)
  80439c:	1580082e 	bgeu	r2,r22,8043c0 <_dtoa_r+0xa90>
  8043a0:	00c00104 	movi	r3,4
  8043a4:	0009883a 	mov	r4,zero
  8043a8:	18c7883a 	add	r3,r3,r3
  8043ac:	18800504 	addi	r2,r3,20
  8043b0:	21000044 	addi	r4,r4,1
  8043b4:	b0bffc2e 	bgeu	r22,r2,8043a8 <_dtoa_r+0xa78>
  8043b8:	d9801617 	ldw	r6,88(sp)
  8043bc:	31001115 	stw	r4,68(r6)
  8043c0:	dc000f17 	ldw	r16,60(sp)
  8043c4:	003e4b06 	br	803cf4 <_dtoa_r+0x3c4>
  8043c8:	d9801717 	ldw	r6,92(sp)
  8043cc:	0023883a 	mov	r17,zero
  8043d0:	31bfff04 	addi	r6,r6,-4
  8043d4:	d9801715 	stw	r6,92(sp)
  8043d8:	003df806 	br	803bbc <_dtoa_r+0x28c>
  8043dc:	00800804 	movi	r2,32
  8043e0:	10c9c83a 	sub	r4,r2,r3
  8043e4:	00c00104 	movi	r3,4
  8043e8:	19005a16 	blt	r3,r4,804554 <_dtoa_r+0xc24>
  8043ec:	008000c4 	movi	r2,3
  8043f0:	113f7e16 	blt	r2,r4,8041ec <_dtoa_r+0x8bc>
  8043f4:	20800704 	addi	r2,r4,28
  8043f8:	003f7506 	br	8041d0 <_dtoa_r+0x8a0>
  8043fc:	d9801717 	ldw	r6,92(sp)
  804400:	00800044 	movi	r2,1
  804404:	1180a10e 	bge	r2,r6,80468c <_dtoa_r+0xd5c>
  804408:	d9800f17 	ldw	r6,60(sp)
  80440c:	d8c01017 	ldw	r3,64(sp)
  804410:	30bfffc4 	addi	r2,r6,-1
  804414:	1881c616 	blt	r3,r2,804b30 <_dtoa_r+0x1200>
  804418:	18a5c83a 	sub	r18,r3,r2
  80441c:	d8800f17 	ldw	r2,60(sp)
  804420:	10026216 	blt	r2,zero,804dac <_dtoa_r+0x147c>
  804424:	dc001117 	ldw	r16,68(sp)
  804428:	1007883a 	mov	r3,r2
  80442c:	d9800a17 	ldw	r6,40(sp)
  804430:	d8801117 	ldw	r2,68(sp)
  804434:	d9001617 	ldw	r4,88(sp)
  804438:	30cd883a 	add	r6,r6,r3
  80443c:	10c5883a 	add	r2,r2,r3
  804440:	01400044 	movi	r5,1
  804444:	d9800a15 	stw	r6,40(sp)
  804448:	d8801115 	stw	r2,68(sp)
  80444c:	080773c0 	call	80773c <__i2b>
  804450:	1027883a 	mov	r19,r2
  804454:	003f2506 	br	8040ec <_dtoa_r+0x7bc>
  804458:	00c02074 	movhi	r3,129
  80445c:	18feb804 	addi	r3,r3,-1312
  804460:	003d6706 	br	803a00 <_dtoa_r+0xd0>
  804464:	dd800517 	ldw	r22,20(sp)
  804468:	04000044 	movi	r16,1
  80446c:	00000706 	br	80448c <_dtoa_r+0xb5c>
  804470:	d9400717 	ldw	r5,28(sp)
  804474:	d9001617 	ldw	r4,88(sp)
  804478:	01800284 	movi	r6,10
  80447c:	000f883a 	mov	r7,zero
  804480:	08077780 	call	807778 <__multadd>
  804484:	d8800715 	stw	r2,28(sp)
  804488:	84000044 	addi	r16,r16,1
  80448c:	d9000717 	ldw	r4,28(sp)
  804490:	900b883a 	mov	r5,r18
  804494:	08037180 	call	803718 <quorem>
  804498:	15c00c04 	addi	r23,r2,48
  80449c:	b5c00005 	stb	r23,0(r22)
  8044a0:	d8c00f17 	ldw	r3,60(sp)
  8044a4:	b5800044 	addi	r22,r22,1
  8044a8:	80fff116 	blt	r16,r3,804470 <_dtoa_r+0xb40>
  8044ac:	d8000615 	stw	zero,24(sp)
  8044b0:	d9400717 	ldw	r5,28(sp)
  8044b4:	d9001617 	ldw	r4,88(sp)
  8044b8:	01800044 	movi	r6,1
  8044bc:	08074080 	call	807408 <__lshift>
  8044c0:	1009883a 	mov	r4,r2
  8044c4:	900b883a 	mov	r5,r18
  8044c8:	d8800715 	stw	r2,28(sp)
  8044cc:	0806c200 	call	806c20 <__mcmp>
  8044d0:	00803c0e 	bge	zero,r2,8045c4 <_dtoa_r+0xc94>
  8044d4:	b009883a 	mov	r4,r22
  8044d8:	213fffc4 	addi	r4,r4,-1
  8044dc:	21400003 	ldbu	r5,0(r4)
  8044e0:	00800e44 	movi	r2,57
  8044e4:	28c03fcc 	andi	r3,r5,255
  8044e8:	18c0201c 	xori	r3,r3,128
  8044ec:	18ffe004 	addi	r3,r3,-128
  8044f0:	1881981e 	bne	r3,r2,804b54 <_dtoa_r+0x1224>
  8044f4:	d9800517 	ldw	r6,20(sp)
  8044f8:	21bff71e 	bne	r4,r6,8044d8 <_dtoa_r+0xba8>
  8044fc:	d8800d17 	ldw	r2,52(sp)
  804500:	37000044 	addi	fp,r6,1
  804504:	10800044 	addi	r2,r2,1
  804508:	d8800d15 	stw	r2,52(sp)
  80450c:	00800c44 	movi	r2,49
  804510:	30800005 	stb	r2,0(r6)
  804514:	d9001617 	ldw	r4,88(sp)
  804518:	900b883a 	mov	r5,r18
  80451c:	0806ac40 	call	806ac4 <_Bfree>
  804520:	983ecd26 	beq	r19,zero,804058 <_dtoa_r+0x728>
  804524:	d8c00617 	ldw	r3,24(sp)
  804528:	18000426 	beq	r3,zero,80453c <_dtoa_r+0xc0c>
  80452c:	1cc00326 	beq	r3,r19,80453c <_dtoa_r+0xc0c>
  804530:	d9001617 	ldw	r4,88(sp)
  804534:	180b883a 	mov	r5,r3
  804538:	0806ac40 	call	806ac4 <_Bfree>
  80453c:	d9001617 	ldw	r4,88(sp)
  804540:	980b883a 	mov	r5,r19
  804544:	0806ac40 	call	806ac4 <_Bfree>
  804548:	003ec306 	br	804058 <_dtoa_r+0x728>
  80454c:	1805883a 	mov	r2,r3
  804550:	003eeb06 	br	804100 <_dtoa_r+0x7d0>
  804554:	d9800a17 	ldw	r6,40(sp)
  804558:	d8c01117 	ldw	r3,68(sp)
  80455c:	20bfff04 	addi	r2,r4,-4
  804560:	308d883a 	add	r6,r6,r2
  804564:	1887883a 	add	r3,r3,r2
  804568:	80a1883a 	add	r16,r16,r2
  80456c:	d9800a15 	stw	r6,40(sp)
  804570:	d8c01115 	stw	r3,68(sp)
  804574:	003f1d06 	br	8041ec <_dtoa_r+0x8bc>
  804578:	a03f0c1e 	bne	r20,zero,8041ac <_dtoa_r+0x87c>
  80457c:	00800434 	movhi	r2,16
  804580:	10bfffc4 	addi	r2,r2,-1
  804584:	a884703a 	and	r2,r21,r2
  804588:	103f081e 	bne	r2,zero,8041ac <_dtoa_r+0x87c>
  80458c:	a89ffc2c 	andhi	r2,r21,32752
  804590:	103f0626 	beq	r2,zero,8041ac <_dtoa_r+0x87c>
  804594:	d8c01117 	ldw	r3,68(sp)
  804598:	d9000a17 	ldw	r4,40(sp)
  80459c:	18c00044 	addi	r3,r3,1
  8045a0:	21000044 	addi	r4,r4,1
  8045a4:	d8c01115 	stw	r3,68(sp)
  8045a8:	d9000a15 	stw	r4,40(sp)
  8045ac:	003f0006 	br	8041b0 <_dtoa_r+0x880>
  8045b0:	d9400717 	ldw	r5,28(sp)
  8045b4:	d9001617 	ldw	r4,88(sp)
  8045b8:	08078780 	call	807878 <__pow5mult>
  8045bc:	d8800715 	stw	r2,28(sp)
  8045c0:	003eed06 	br	804178 <_dtoa_r+0x848>
  8045c4:	1000021e 	bne	r2,zero,8045d0 <_dtoa_r+0xca0>
  8045c8:	b880004c 	andi	r2,r23,1
  8045cc:	103fc11e 	bne	r2,zero,8044d4 <_dtoa_r+0xba4>
  8045d0:	b5bfffc4 	addi	r22,r22,-1
  8045d4:	b0c00007 	ldb	r3,0(r22)
  8045d8:	00800c04 	movi	r2,48
  8045dc:	18bffc26 	beq	r3,r2,8045d0 <_dtoa_r+0xca0>
  8045e0:	b7000044 	addi	fp,r22,1
  8045e4:	003fcb06 	br	804514 <_dtoa_r+0xbe4>
  8045e8:	d9800d17 	ldw	r6,52(sp)
  8045ec:	018fc83a 	sub	r7,zero,r6
  8045f0:	3801f726 	beq	r7,zero,804dd0 <_dtoa_r+0x14a0>
  8045f4:	398003cc 	andi	r6,r7,15
  8045f8:	300c90fa 	slli	r6,r6,3
  8045fc:	01402074 	movhi	r5,129
  804600:	297efc04 	addi	r5,r5,-1040
  804604:	d9001217 	ldw	r4,72(sp)
  804608:	314d883a 	add	r6,r6,r5
  80460c:	30c00117 	ldw	r3,4(r6)
  804610:	30800017 	ldw	r2,0(r6)
  804614:	d9401317 	ldw	r5,76(sp)
  804618:	3821d13a 	srai	r16,r7,4
  80461c:	100d883a 	mov	r6,r2
  804620:	180f883a 	mov	r7,r3
  804624:	0809c640 	call	809c64 <__muldf3>
  804628:	1011883a 	mov	r8,r2
  80462c:	1813883a 	mov	r9,r3
  804630:	1029883a 	mov	r20,r2
  804634:	182b883a 	mov	r21,r3
  804638:	8001e526 	beq	r16,zero,804dd0 <_dtoa_r+0x14a0>
  80463c:	05800084 	movi	r22,2
  804640:	04402074 	movhi	r17,129
  804644:	8c7f2e04 	addi	r17,r17,-840
  804648:	8080004c 	andi	r2,r16,1
  80464c:	1005003a 	cmpeq	r2,r2,zero
  804650:	1000081e 	bne	r2,zero,804674 <_dtoa_r+0xd44>
  804654:	89800017 	ldw	r6,0(r17)
  804658:	89c00117 	ldw	r7,4(r17)
  80465c:	480b883a 	mov	r5,r9
  804660:	4009883a 	mov	r4,r8
  804664:	0809c640 	call	809c64 <__muldf3>
  804668:	1011883a 	mov	r8,r2
  80466c:	b5800044 	addi	r22,r22,1
  804670:	1813883a 	mov	r9,r3
  804674:	8021d07a 	srai	r16,r16,1
  804678:	8c400204 	addi	r17,r17,8
  80467c:	803ff21e 	bne	r16,zero,804648 <_dtoa_r+0xd18>
  804680:	4029883a 	mov	r20,r8
  804684:	482b883a 	mov	r21,r9
  804688:	003dca06 	br	803db4 <_dtoa_r+0x484>
  80468c:	d9000817 	ldw	r4,32(sp)
  804690:	2005003a 	cmpeq	r2,r4,zero
  804694:	1001f61e 	bne	r2,zero,804e70 <_dtoa_r+0x1540>
  804698:	dc001117 	ldw	r16,68(sp)
  80469c:	dc801017 	ldw	r18,64(sp)
  8046a0:	18c10cc4 	addi	r3,r3,1075
  8046a4:	003f6106 	br	80442c <_dtoa_r+0xafc>
  8046a8:	d8000b15 	stw	zero,44(sp)
  8046ac:	d9802617 	ldw	r6,152(sp)
  8046b0:	d8c00d17 	ldw	r3,52(sp)
  8046b4:	30800044 	addi	r2,r6,1
  8046b8:	18ad883a 	add	r22,r3,r2
  8046bc:	b13fffc4 	addi	r4,r22,-1
  8046c0:	d9000e15 	stw	r4,56(sp)
  8046c4:	0581f60e 	bge	zero,r22,804ea0 <_dtoa_r+0x1570>
  8046c8:	dd800f15 	stw	r22,60(sp)
  8046cc:	003f3006 	br	804390 <_dtoa_r+0xa60>
  8046d0:	d8000b15 	stw	zero,44(sp)
  8046d4:	d9002617 	ldw	r4,152(sp)
  8046d8:	0101eb0e 	bge	zero,r4,804e88 <_dtoa_r+0x1558>
  8046dc:	202d883a 	mov	r22,r4
  8046e0:	d9000e15 	stw	r4,56(sp)
  8046e4:	d9000f15 	stw	r4,60(sp)
  8046e8:	003f2906 	br	804390 <_dtoa_r+0xa60>
  8046ec:	01800044 	movi	r6,1
  8046f0:	d9800b15 	stw	r6,44(sp)
  8046f4:	003ff706 	br	8046d4 <_dtoa_r+0xda4>
  8046f8:	01000044 	movi	r4,1
  8046fc:	d9000b15 	stw	r4,44(sp)
  804700:	003fea06 	br	8046ac <_dtoa_r+0xd7c>
  804704:	04000c0e 	bge	zero,r16,804738 <_dtoa_r+0xe08>
  804708:	d9400717 	ldw	r5,28(sp)
  80470c:	d9001617 	ldw	r4,88(sp)
  804710:	01800044 	movi	r6,1
  804714:	08074080 	call	807408 <__lshift>
  804718:	1009883a 	mov	r4,r2
  80471c:	900b883a 	mov	r5,r18
  804720:	d8800715 	stw	r2,28(sp)
  804724:	0806c200 	call	806c20 <__mcmp>
  804728:	0081e00e 	bge	zero,r2,804eac <_dtoa_r+0x157c>
  80472c:	bdc00044 	addi	r23,r23,1
  804730:	00800e84 	movi	r2,58
  804734:	b881a226 	beq	r23,r2,804dc0 <_dtoa_r+0x1490>
  804738:	b7000044 	addi	fp,r22,1
  80473c:	b5c00005 	stb	r23,0(r22)
  804740:	003f7406 	br	804514 <_dtoa_r+0xbe4>
  804744:	00800e44 	movi	r2,57
  804748:	b8819d26 	beq	r23,r2,804dc0 <_dtoa_r+0x1490>
  80474c:	053ffa0e 	bge	zero,r20,804738 <_dtoa_r+0xe08>
  804750:	8dc00c44 	addi	r23,r17,49
  804754:	003ff806 	br	804738 <_dtoa_r+0xe08>
  804758:	d9001617 	ldw	r4,88(sp)
  80475c:	a80b883a 	mov	r5,r21
  804760:	04000044 	movi	r16,1
  804764:	0806ac40 	call	806ac4 <_Bfree>
  804768:	003edf06 	br	8042e8 <_dtoa_r+0x9b8>
  80476c:	d9001617 	ldw	r4,88(sp)
  804770:	980b883a 	mov	r5,r19
  804774:	01800284 	movi	r6,10
  804778:	000f883a 	mov	r7,zero
  80477c:	08077780 	call	807778 <__multadd>
  804780:	1027883a 	mov	r19,r2
  804784:	d8800615 	stw	r2,24(sp)
  804788:	003ebb06 	br	804278 <_dtoa_r+0x948>
  80478c:	d9801117 	ldw	r6,68(sp)
  804790:	d8800d17 	ldw	r2,52(sp)
  804794:	d8000915 	stw	zero,36(sp)
  804798:	308dc83a 	sub	r6,r6,r2
  80479c:	0087c83a 	sub	r3,zero,r2
  8047a0:	d9801115 	stw	r6,68(sp)
  8047a4:	d8c01015 	stw	r3,64(sp)
  8047a8:	003cfe06 	br	803ba4 <_dtoa_r+0x274>
  8047ac:	018dc83a 	sub	r6,zero,r6
  8047b0:	d9801115 	stw	r6,68(sp)
  8047b4:	d8000a15 	stw	zero,40(sp)
  8047b8:	003cf306 	br	803b88 <_dtoa_r+0x258>
  8047bc:	d9000d17 	ldw	r4,52(sp)
  8047c0:	080a5280 	call	80a528 <__floatsidf>
  8047c4:	880b883a 	mov	r5,r17
  8047c8:	8009883a 	mov	r4,r16
  8047cc:	180f883a 	mov	r7,r3
  8047d0:	100d883a 	mov	r6,r2
  8047d4:	080a3080 	call	80a308 <__nedf2>
  8047d8:	103ce126 	beq	r2,zero,803b60 <_dtoa_r+0x230>
  8047dc:	d9800d17 	ldw	r6,52(sp)
  8047e0:	31bfffc4 	addi	r6,r6,-1
  8047e4:	d9800d15 	stw	r6,52(sp)
  8047e8:	003cdd06 	br	803b60 <_dtoa_r+0x230>
  8047ec:	d9000717 	ldw	r4,28(sp)
  8047f0:	900b883a 	mov	r5,r18
  8047f4:	0806c200 	call	806c20 <__mcmp>
  8047f8:	103e8d0e 	bge	r2,zero,804230 <_dtoa_r+0x900>
  8047fc:	d9400717 	ldw	r5,28(sp)
  804800:	d9001617 	ldw	r4,88(sp)
  804804:	01800284 	movi	r6,10
  804808:	000f883a 	mov	r7,zero
  80480c:	08077780 	call	807778 <__multadd>
  804810:	d9800d17 	ldw	r6,52(sp)
  804814:	d8800715 	stw	r2,28(sp)
  804818:	31bfffc4 	addi	r6,r6,-1
  80481c:	d9800d15 	stw	r6,52(sp)
  804820:	b001a71e 	bne	r22,zero,804ec0 <_dtoa_r+0x1590>
  804824:	d8800e17 	ldw	r2,56(sp)
  804828:	d8800f15 	stw	r2,60(sp)
  80482c:	003e8006 	br	804230 <_dtoa_r+0x900>
  804830:	90800417 	ldw	r2,16(r18)
  804834:	1085883a 	add	r2,r2,r2
  804838:	1085883a 	add	r2,r2,r2
  80483c:	1485883a 	add	r2,r2,r18
  804840:	11000417 	ldw	r4,16(r2)
  804844:	0806aec0 	call	806aec <__hi0bits>
  804848:	00c00804 	movi	r3,32
  80484c:	1887c83a 	sub	r3,r3,r2
  804850:	003e5a06 	br	8041bc <_dtoa_r+0x88c>
  804854:	d9400717 	ldw	r5,28(sp)
  804858:	d9801017 	ldw	r6,64(sp)
  80485c:	d9001617 	ldw	r4,88(sp)
  804860:	08078780 	call	807878 <__pow5mult>
  804864:	d8800715 	stw	r2,28(sp)
  804868:	003e4306 	br	804178 <_dtoa_r+0x848>
  80486c:	d9800f17 	ldw	r6,60(sp)
  804870:	d8800d17 	ldw	r2,52(sp)
  804874:	d9800315 	stw	r6,12(sp)
  804878:	d8800415 	stw	r2,16(sp)
  80487c:	d8c00b17 	ldw	r3,44(sp)
  804880:	1805003a 	cmpeq	r2,r3,zero
  804884:	1000e21e 	bne	r2,zero,804c10 <_dtoa_r+0x12e0>
  804888:	d9000317 	ldw	r4,12(sp)
  80488c:	0005883a 	mov	r2,zero
  804890:	00cff834 	movhi	r3,16352
  804894:	200c90fa 	slli	r6,r4,3
  804898:	01002074 	movhi	r4,129
  80489c:	213efc04 	addi	r4,r4,-1040
  8048a0:	180b883a 	mov	r5,r3
  8048a4:	310d883a 	add	r6,r6,r4
  8048a8:	327fff17 	ldw	r9,-4(r6)
  8048ac:	323ffe17 	ldw	r8,-8(r6)
  8048b0:	1009883a 	mov	r4,r2
  8048b4:	480f883a 	mov	r7,r9
  8048b8:	400d883a 	mov	r6,r8
  8048bc:	080a0280 	call	80a028 <__divdf3>
  8048c0:	180b883a 	mov	r5,r3
  8048c4:	b00d883a 	mov	r6,r22
  8048c8:	b80f883a 	mov	r7,r23
  8048cc:	1009883a 	mov	r4,r2
  8048d0:	0809b700 	call	809b70 <__subdf3>
  8048d4:	a80b883a 	mov	r5,r21
  8048d8:	a009883a 	mov	r4,r20
  8048dc:	d8c01915 	stw	r3,100(sp)
  8048e0:	d8801815 	stw	r2,96(sp)
  8048e4:	080a6200 	call	80a620 <__fixdfsi>
  8048e8:	1009883a 	mov	r4,r2
  8048ec:	1027883a 	mov	r19,r2
  8048f0:	080a5280 	call	80a528 <__floatsidf>
  8048f4:	a80b883a 	mov	r5,r21
  8048f8:	a009883a 	mov	r4,r20
  8048fc:	180f883a 	mov	r7,r3
  804900:	100d883a 	mov	r6,r2
  804904:	0809b700 	call	809b70 <__subdf3>
  804908:	d9801817 	ldw	r6,96(sp)
  80490c:	1823883a 	mov	r17,r3
  804910:	d8801415 	stw	r2,80(sp)
  804914:	302d883a 	mov	r22,r6
  804918:	d9800517 	ldw	r6,20(sp)
  80491c:	9cc00c04 	addi	r19,r19,48
  804920:	dc401515 	stw	r17,84(sp)
  804924:	d8c01917 	ldw	r3,100(sp)
  804928:	34c00005 	stb	r19,0(r6)
  80492c:	d8800517 	ldw	r2,20(sp)
  804930:	d9401917 	ldw	r5,100(sp)
  804934:	d9801417 	ldw	r6,80(sp)
  804938:	b009883a 	mov	r4,r22
  80493c:	880f883a 	mov	r7,r17
  804940:	182f883a 	mov	r23,r3
  804944:	17000044 	addi	fp,r2,1
  804948:	080a3900 	call	80a390 <__gtdf2>
  80494c:	00804e16 	blt	zero,r2,804a88 <_dtoa_r+0x1158>
  804950:	d9801417 	ldw	r6,80(sp)
  804954:	0005883a 	mov	r2,zero
  804958:	00cffc34 	movhi	r3,16368
  80495c:	180b883a 	mov	r5,r3
  804960:	880f883a 	mov	r7,r17
  804964:	1009883a 	mov	r4,r2
  804968:	0809b700 	call	809b70 <__subdf3>
  80496c:	d9401917 	ldw	r5,100(sp)
  804970:	180f883a 	mov	r7,r3
  804974:	b009883a 	mov	r4,r22
  804978:	100d883a 	mov	r6,r2
  80497c:	080a3900 	call	80a390 <__gtdf2>
  804980:	00bda216 	blt	zero,r2,80400c <_dtoa_r+0x6dc>
  804984:	d8c00317 	ldw	r3,12(sp)
  804988:	00800044 	movi	r2,1
  80498c:	10c01216 	blt	r2,r3,8049d8 <_dtoa_r+0x10a8>
  804990:	003d4506 	br	803ea8 <_dtoa_r+0x578>
  804994:	d9801417 	ldw	r6,80(sp)
  804998:	0005883a 	mov	r2,zero
  80499c:	00cffc34 	movhi	r3,16368
  8049a0:	180b883a 	mov	r5,r3
  8049a4:	880f883a 	mov	r7,r17
  8049a8:	1009883a 	mov	r4,r2
  8049ac:	0809b700 	call	809b70 <__subdf3>
  8049b0:	d9c01b17 	ldw	r7,108(sp)
  8049b4:	180b883a 	mov	r5,r3
  8049b8:	1009883a 	mov	r4,r2
  8049bc:	b00d883a 	mov	r6,r22
  8049c0:	080a4a00 	call	80a4a0 <__ltdf2>
  8049c4:	103d9116 	blt	r2,zero,80400c <_dtoa_r+0x6dc>
  8049c8:	d9800517 	ldw	r6,20(sp)
  8049cc:	d9000317 	ldw	r4,12(sp)
  8049d0:	3105883a 	add	r2,r6,r4
  8049d4:	e0bd3426 	beq	fp,r2,803ea8 <_dtoa_r+0x578>
  8049d8:	04500934 	movhi	r17,16420
  8049dc:	0021883a 	mov	r16,zero
  8049e0:	b80b883a 	mov	r5,r23
  8049e4:	b009883a 	mov	r4,r22
  8049e8:	800d883a 	mov	r6,r16
  8049ec:	880f883a 	mov	r7,r17
  8049f0:	0809c640 	call	809c64 <__muldf3>
  8049f4:	d9401517 	ldw	r5,84(sp)
  8049f8:	d9001417 	ldw	r4,80(sp)
  8049fc:	880f883a 	mov	r7,r17
  804a00:	000d883a 	mov	r6,zero
  804a04:	d8801a15 	stw	r2,104(sp)
  804a08:	d8c01b15 	stw	r3,108(sp)
  804a0c:	0809c640 	call	809c64 <__muldf3>
  804a10:	180b883a 	mov	r5,r3
  804a14:	1009883a 	mov	r4,r2
  804a18:	1823883a 	mov	r17,r3
  804a1c:	1021883a 	mov	r16,r2
  804a20:	080a6200 	call	80a620 <__fixdfsi>
  804a24:	1009883a 	mov	r4,r2
  804a28:	102b883a 	mov	r21,r2
  804a2c:	080a5280 	call	80a528 <__floatsidf>
  804a30:	880b883a 	mov	r5,r17
  804a34:	8009883a 	mov	r4,r16
  804a38:	180f883a 	mov	r7,r3
  804a3c:	100d883a 	mov	r6,r2
  804a40:	0809b700 	call	809b70 <__subdf3>
  804a44:	1021883a 	mov	r16,r2
  804a48:	d9001b17 	ldw	r4,108(sp)
  804a4c:	1823883a 	mov	r17,r3
  804a50:	dc001415 	stw	r16,80(sp)
  804a54:	ad400c04 	addi	r21,r21,48
  804a58:	dc401515 	stw	r17,84(sp)
  804a5c:	d8801a17 	ldw	r2,104(sp)
  804a60:	e5400005 	stb	r21,0(fp)
  804a64:	202f883a 	mov	r23,r4
  804a68:	d9c01b17 	ldw	r7,108(sp)
  804a6c:	d9001417 	ldw	r4,80(sp)
  804a70:	880b883a 	mov	r5,r17
  804a74:	100d883a 	mov	r6,r2
  804a78:	102d883a 	mov	r22,r2
  804a7c:	e7000044 	addi	fp,fp,1
  804a80:	080a4a00 	call	80a4a0 <__ltdf2>
  804a84:	103fc30e 	bge	r2,zero,804994 <_dtoa_r+0x1064>
  804a88:	d9000417 	ldw	r4,16(sp)
  804a8c:	d9000d15 	stw	r4,52(sp)
  804a90:	003d7106 	br	804058 <_dtoa_r+0x728>
  804a94:	d9801717 	ldw	r6,92(sp)
  804a98:	00800084 	movi	r2,2
  804a9c:	11bde60e 	bge	r2,r6,804238 <_dtoa_r+0x908>
  804aa0:	203cfb1e 	bne	r4,zero,803e90 <_dtoa_r+0x560>
  804aa4:	d9001617 	ldw	r4,88(sp)
  804aa8:	900b883a 	mov	r5,r18
  804aac:	01800144 	movi	r6,5
  804ab0:	000f883a 	mov	r7,zero
  804ab4:	08077780 	call	807778 <__multadd>
  804ab8:	d9000717 	ldw	r4,28(sp)
  804abc:	100b883a 	mov	r5,r2
  804ac0:	1025883a 	mov	r18,r2
  804ac4:	0806c200 	call	806c20 <__mcmp>
  804ac8:	00bcf10e 	bge	zero,r2,803e90 <_dtoa_r+0x560>
  804acc:	d8c00d17 	ldw	r3,52(sp)
  804ad0:	d9000517 	ldw	r4,20(sp)
  804ad4:	d8000615 	stw	zero,24(sp)
  804ad8:	18c00044 	addi	r3,r3,1
  804adc:	d8c00d15 	stw	r3,52(sp)
  804ae0:	00800c44 	movi	r2,49
  804ae4:	27000044 	addi	fp,r4,1
  804ae8:	20800005 	stb	r2,0(r4)
  804aec:	003e8906 	br	804514 <_dtoa_r+0xbe4>
  804af0:	d8c00517 	ldw	r3,20(sp)
  804af4:	003bc206 	br	803a00 <_dtoa_r+0xd0>
  804af8:	01802074 	movhi	r6,129
  804afc:	31bf2e04 	addi	r6,r6,-840
  804b00:	30c00917 	ldw	r3,36(r6)
  804b04:	30800817 	ldw	r2,32(r6)
  804b08:	d9001217 	ldw	r4,72(sp)
  804b0c:	d9401317 	ldw	r5,76(sp)
  804b10:	180f883a 	mov	r7,r3
  804b14:	100d883a 	mov	r6,r2
  804b18:	080a0280 	call	80a028 <__divdf3>
  804b1c:	948003cc 	andi	r18,r18,15
  804b20:	058000c4 	movi	r22,3
  804b24:	1029883a 	mov	r20,r2
  804b28:	182b883a 	mov	r21,r3
  804b2c:	003c8906 	br	803d54 <_dtoa_r+0x424>
  804b30:	d9001017 	ldw	r4,64(sp)
  804b34:	d9800917 	ldw	r6,36(sp)
  804b38:	0025883a 	mov	r18,zero
  804b3c:	1105c83a 	sub	r2,r2,r4
  804b40:	2089883a 	add	r4,r4,r2
  804b44:	308d883a 	add	r6,r6,r2
  804b48:	d9001015 	stw	r4,64(sp)
  804b4c:	d9800915 	stw	r6,36(sp)
  804b50:	003e3206 	br	80441c <_dtoa_r+0xaec>
  804b54:	28800044 	addi	r2,r5,1
  804b58:	27000044 	addi	fp,r4,1
  804b5c:	20800005 	stb	r2,0(r4)
  804b60:	003e6c06 	br	804514 <_dtoa_r+0xbe4>
  804b64:	d8800f17 	ldw	r2,60(sp)
  804b68:	00bce016 	blt	zero,r2,803eec <_dtoa_r+0x5bc>
  804b6c:	d9800f17 	ldw	r6,60(sp)
  804b70:	303cc51e 	bne	r6,zero,803e88 <_dtoa_r+0x558>
  804b74:	0005883a 	mov	r2,zero
  804b78:	00d00534 	movhi	r3,16404
  804b7c:	980b883a 	mov	r5,r19
  804b80:	180f883a 	mov	r7,r3
  804b84:	9009883a 	mov	r4,r18
  804b88:	100d883a 	mov	r6,r2
  804b8c:	0809c640 	call	809c64 <__muldf3>
  804b90:	180b883a 	mov	r5,r3
  804b94:	a80f883a 	mov	r7,r21
  804b98:	1009883a 	mov	r4,r2
  804b9c:	a00d883a 	mov	r6,r20
  804ba0:	080a4180 	call	80a418 <__gedf2>
  804ba4:	103cb80e 	bge	r2,zero,803e88 <_dtoa_r+0x558>
  804ba8:	0027883a 	mov	r19,zero
  804bac:	0025883a 	mov	r18,zero
  804bb0:	003fc606 	br	804acc <_dtoa_r+0x119c>
  804bb4:	99400117 	ldw	r5,4(r19)
  804bb8:	d9001617 	ldw	r4,88(sp)
  804bbc:	08070440 	call	807044 <_Balloc>
  804bc0:	99800417 	ldw	r6,16(r19)
  804bc4:	11000304 	addi	r4,r2,12
  804bc8:	99400304 	addi	r5,r19,12
  804bcc:	318d883a 	add	r6,r6,r6
  804bd0:	318d883a 	add	r6,r6,r6
  804bd4:	31800204 	addi	r6,r6,8
  804bd8:	1023883a 	mov	r17,r2
  804bdc:	08068ac0 	call	8068ac <memcpy>
  804be0:	d9001617 	ldw	r4,88(sp)
  804be4:	880b883a 	mov	r5,r17
  804be8:	01800044 	movi	r6,1
  804bec:	08074080 	call	807408 <__lshift>
  804bf0:	100b883a 	mov	r5,r2
  804bf4:	003d9c06 	br	804268 <_dtoa_r+0x938>
  804bf8:	00800e44 	movi	r2,57
  804bfc:	b8807026 	beq	r23,r2,804dc0 <_dtoa_r+0x1490>
  804c00:	b8800044 	addi	r2,r23,1
  804c04:	b7000044 	addi	fp,r22,1
  804c08:	b0800005 	stb	r2,0(r22)
  804c0c:	003e4106 	br	804514 <_dtoa_r+0xbe4>
  804c10:	d8800317 	ldw	r2,12(sp)
  804c14:	01802074 	movhi	r6,129
  804c18:	31befc04 	addi	r6,r6,-1040
  804c1c:	b009883a 	mov	r4,r22
  804c20:	100e90fa 	slli	r7,r2,3
  804c24:	b80b883a 	mov	r5,r23
  804c28:	398f883a 	add	r7,r7,r6
  804c2c:	38bffe17 	ldw	r2,-8(r7)
  804c30:	d9800517 	ldw	r6,20(sp)
  804c34:	38ffff17 	ldw	r3,-4(r7)
  804c38:	37000044 	addi	fp,r6,1
  804c3c:	180f883a 	mov	r7,r3
  804c40:	100d883a 	mov	r6,r2
  804c44:	0809c640 	call	809c64 <__muldf3>
  804c48:	a80b883a 	mov	r5,r21
  804c4c:	a009883a 	mov	r4,r20
  804c50:	182f883a 	mov	r23,r3
  804c54:	102d883a 	mov	r22,r2
  804c58:	080a6200 	call	80a620 <__fixdfsi>
  804c5c:	1009883a 	mov	r4,r2
  804c60:	1027883a 	mov	r19,r2
  804c64:	080a5280 	call	80a528 <__floatsidf>
  804c68:	a80b883a 	mov	r5,r21
  804c6c:	a009883a 	mov	r4,r20
  804c70:	180f883a 	mov	r7,r3
  804c74:	100d883a 	mov	r6,r2
  804c78:	0809b700 	call	809b70 <__subdf3>
  804c7c:	180b883a 	mov	r5,r3
  804c80:	d8c00517 	ldw	r3,20(sp)
  804c84:	9cc00c04 	addi	r19,r19,48
  804c88:	1009883a 	mov	r4,r2
  804c8c:	1cc00005 	stb	r19,0(r3)
  804c90:	2021883a 	mov	r16,r4
  804c94:	d9000317 	ldw	r4,12(sp)
  804c98:	00800044 	movi	r2,1
  804c9c:	2823883a 	mov	r17,r5
  804ca0:	20802226 	beq	r4,r2,804d2c <_dtoa_r+0x13fc>
  804ca4:	1029883a 	mov	r20,r2
  804ca8:	0005883a 	mov	r2,zero
  804cac:	00d00934 	movhi	r3,16420
  804cb0:	180f883a 	mov	r7,r3
  804cb4:	100d883a 	mov	r6,r2
  804cb8:	880b883a 	mov	r5,r17
  804cbc:	8009883a 	mov	r4,r16
  804cc0:	0809c640 	call	809c64 <__muldf3>
  804cc4:	180b883a 	mov	r5,r3
  804cc8:	1009883a 	mov	r4,r2
  804ccc:	1823883a 	mov	r17,r3
  804cd0:	1021883a 	mov	r16,r2
  804cd4:	080a6200 	call	80a620 <__fixdfsi>
  804cd8:	1009883a 	mov	r4,r2
  804cdc:	102b883a 	mov	r21,r2
  804ce0:	080a5280 	call	80a528 <__floatsidf>
  804ce4:	880b883a 	mov	r5,r17
  804ce8:	8009883a 	mov	r4,r16
  804cec:	180f883a 	mov	r7,r3
  804cf0:	100d883a 	mov	r6,r2
  804cf4:	0809b700 	call	809b70 <__subdf3>
  804cf8:	180b883a 	mov	r5,r3
  804cfc:	d8c00517 	ldw	r3,20(sp)
  804d00:	1009883a 	mov	r4,r2
  804d04:	ad400c04 	addi	r21,r21,48
  804d08:	1d05883a 	add	r2,r3,r20
  804d0c:	15400005 	stb	r21,0(r2)
  804d10:	2021883a 	mov	r16,r4
  804d14:	d9000317 	ldw	r4,12(sp)
  804d18:	a5000044 	addi	r20,r20,1
  804d1c:	2823883a 	mov	r17,r5
  804d20:	a13fe11e 	bne	r20,r4,804ca8 <_dtoa_r+0x1378>
  804d24:	e505883a 	add	r2,fp,r20
  804d28:	173fffc4 	addi	fp,r2,-1
  804d2c:	0025883a 	mov	r18,zero
  804d30:	04cff834 	movhi	r19,16352
  804d34:	b009883a 	mov	r4,r22
  804d38:	b80b883a 	mov	r5,r23
  804d3c:	900d883a 	mov	r6,r18
  804d40:	980f883a 	mov	r7,r19
  804d44:	0809bf00 	call	809bf0 <__adddf3>
  804d48:	180b883a 	mov	r5,r3
  804d4c:	1009883a 	mov	r4,r2
  804d50:	800d883a 	mov	r6,r16
  804d54:	880f883a 	mov	r7,r17
  804d58:	080a4a00 	call	80a4a0 <__ltdf2>
  804d5c:	103cab16 	blt	r2,zero,80400c <_dtoa_r+0x6dc>
  804d60:	0009883a 	mov	r4,zero
  804d64:	980b883a 	mov	r5,r19
  804d68:	b80f883a 	mov	r7,r23
  804d6c:	b00d883a 	mov	r6,r22
  804d70:	0809b700 	call	809b70 <__subdf3>
  804d74:	180b883a 	mov	r5,r3
  804d78:	880f883a 	mov	r7,r17
  804d7c:	1009883a 	mov	r4,r2
  804d80:	800d883a 	mov	r6,r16
  804d84:	080a3900 	call	80a390 <__gtdf2>
  804d88:	00bc470e 	bge	zero,r2,803ea8 <_dtoa_r+0x578>
  804d8c:	00c00c04 	movi	r3,48
  804d90:	e73fffc4 	addi	fp,fp,-1
  804d94:	e0800007 	ldb	r2,0(fp)
  804d98:	10fffd26 	beq	r2,r3,804d90 <_dtoa_r+0x1460>
  804d9c:	d9800417 	ldw	r6,16(sp)
  804da0:	e7000044 	addi	fp,fp,1
  804da4:	d9800d15 	stw	r6,52(sp)
  804da8:	003cab06 	br	804058 <_dtoa_r+0x728>
  804dac:	d8c00f17 	ldw	r3,60(sp)
  804db0:	d9001117 	ldw	r4,68(sp)
  804db4:	20e1c83a 	sub	r16,r4,r3
  804db8:	0007883a 	mov	r3,zero
  804dbc:	003d9b06 	br	80442c <_dtoa_r+0xafc>
  804dc0:	00800e44 	movi	r2,57
  804dc4:	b0800005 	stb	r2,0(r22)
  804dc8:	b5800044 	addi	r22,r22,1
  804dcc:	003dc106 	br	8044d4 <_dtoa_r+0xba4>
  804dd0:	05800084 	movi	r22,2
  804dd4:	003bf706 	br	803db4 <_dtoa_r+0x484>
  804dd8:	d9000f17 	ldw	r4,60(sp)
  804ddc:	013c000e 	bge	zero,r4,803de0 <_dtoa_r+0x4b0>
  804de0:	d9800e17 	ldw	r6,56(sp)
  804de4:	01bc300e 	bge	zero,r6,803ea8 <_dtoa_r+0x578>
  804de8:	0005883a 	mov	r2,zero
  804dec:	00d00934 	movhi	r3,16420
  804df0:	a80b883a 	mov	r5,r21
  804df4:	180f883a 	mov	r7,r3
  804df8:	a009883a 	mov	r4,r20
  804dfc:	100d883a 	mov	r6,r2
  804e00:	0809c640 	call	809c64 <__muldf3>
  804e04:	b1000044 	addi	r4,r22,1
  804e08:	1021883a 	mov	r16,r2
  804e0c:	1823883a 	mov	r17,r3
  804e10:	080a5280 	call	80a528 <__floatsidf>
  804e14:	880b883a 	mov	r5,r17
  804e18:	8009883a 	mov	r4,r16
  804e1c:	180f883a 	mov	r7,r3
  804e20:	100d883a 	mov	r6,r2
  804e24:	0809c640 	call	809c64 <__muldf3>
  804e28:	0011883a 	mov	r8,zero
  804e2c:	02500734 	movhi	r9,16412
  804e30:	180b883a 	mov	r5,r3
  804e34:	480f883a 	mov	r7,r9
  804e38:	1009883a 	mov	r4,r2
  804e3c:	400d883a 	mov	r6,r8
  804e40:	0809bf00 	call	809bf0 <__adddf3>
  804e44:	102d883a 	mov	r22,r2
  804e48:	00bf3034 	movhi	r2,64704
  804e4c:	10ef883a 	add	r23,r2,r3
  804e50:	d8800d17 	ldw	r2,52(sp)
  804e54:	d8c00e17 	ldw	r3,56(sp)
  804e58:	8029883a 	mov	r20,r16
  804e5c:	10bfffc4 	addi	r2,r2,-1
  804e60:	882b883a 	mov	r21,r17
  804e64:	d8800415 	stw	r2,16(sp)
  804e68:	d8c00315 	stw	r3,12(sp)
  804e6c:	003e8306 	br	80487c <_dtoa_r+0xf4c>
  804e70:	d8800117 	ldw	r2,4(sp)
  804e74:	dc001117 	ldw	r16,68(sp)
  804e78:	dc801017 	ldw	r18,64(sp)
  804e7c:	00c00d84 	movi	r3,54
  804e80:	1887c83a 	sub	r3,r3,r2
  804e84:	003d6906 	br	80442c <_dtoa_r+0xafc>
  804e88:	01800044 	movi	r6,1
  804e8c:	3021883a 	mov	r16,r6
  804e90:	d9800f15 	stw	r6,60(sp)
  804e94:	d9802615 	stw	r6,152(sp)
  804e98:	d9800e15 	stw	r6,56(sp)
  804e9c:	003b9306 	br	803cec <_dtoa_r+0x3bc>
  804ea0:	b021883a 	mov	r16,r22
  804ea4:	dd800f15 	stw	r22,60(sp)
  804ea8:	003b9006 	br	803cec <_dtoa_r+0x3bc>
  804eac:	103e221e 	bne	r2,zero,804738 <_dtoa_r+0xe08>
  804eb0:	b880004c 	andi	r2,r23,1
  804eb4:	1005003a 	cmpeq	r2,r2,zero
  804eb8:	103e1f1e 	bne	r2,zero,804738 <_dtoa_r+0xe08>
  804ebc:	003e1b06 	br	80472c <_dtoa_r+0xdfc>
  804ec0:	d9001617 	ldw	r4,88(sp)
  804ec4:	980b883a 	mov	r5,r19
  804ec8:	01800284 	movi	r6,10
  804ecc:	000f883a 	mov	r7,zero
  804ed0:	08077780 	call	807778 <__multadd>
  804ed4:	d8c00e17 	ldw	r3,56(sp)
  804ed8:	1027883a 	mov	r19,r2
  804edc:	d8c00f15 	stw	r3,60(sp)
  804ee0:	003cd306 	br	804230 <_dtoa_r+0x900>

00804ee4 <_fflush_r>:
  804ee4:	defffb04 	addi	sp,sp,-20
  804ee8:	dcc00315 	stw	r19,12(sp)
  804eec:	dc800215 	stw	r18,8(sp)
  804ef0:	dfc00415 	stw	ra,16(sp)
  804ef4:	dc400115 	stw	r17,4(sp)
  804ef8:	dc000015 	stw	r16,0(sp)
  804efc:	2027883a 	mov	r19,r4
  804f00:	2825883a 	mov	r18,r5
  804f04:	20000226 	beq	r4,zero,804f10 <_fflush_r+0x2c>
  804f08:	20800e17 	ldw	r2,56(r4)
  804f0c:	10005626 	beq	r2,zero,805068 <_fflush_r+0x184>
  804f10:	9100030b 	ldhu	r4,12(r18)
  804f14:	20ffffcc 	andi	r3,r4,65535
  804f18:	18e0001c 	xori	r3,r3,32768
  804f1c:	18e00004 	addi	r3,r3,-32768
  804f20:	1880020c 	andi	r2,r3,8
  804f24:	1000261e 	bne	r2,zero,804fc0 <_fflush_r+0xdc>
  804f28:	90c00117 	ldw	r3,4(r18)
  804f2c:	20820014 	ori	r2,r4,2048
  804f30:	9080030d 	sth	r2,12(r18)
  804f34:	1009883a 	mov	r4,r2
  804f38:	00c0400e 	bge	zero,r3,80503c <_fflush_r+0x158>
  804f3c:	92000a17 	ldw	r8,40(r18)
  804f40:	40004026 	beq	r8,zero,805044 <_fflush_r+0x160>
  804f44:	2084000c 	andi	r2,r4,4096
  804f48:	10005326 	beq	r2,zero,805098 <_fflush_r+0x1b4>
  804f4c:	94001417 	ldw	r16,80(r18)
  804f50:	9080030b 	ldhu	r2,12(r18)
  804f54:	1080010c 	andi	r2,r2,4
  804f58:	1000481e 	bne	r2,zero,80507c <_fflush_r+0x198>
  804f5c:	91400717 	ldw	r5,28(r18)
  804f60:	9809883a 	mov	r4,r19
  804f64:	800d883a 	mov	r6,r16
  804f68:	000f883a 	mov	r7,zero
  804f6c:	403ee83a 	callr	r8
  804f70:	8080261e 	bne	r16,r2,80500c <_fflush_r+0x128>
  804f74:	9080030b 	ldhu	r2,12(r18)
  804f78:	91000417 	ldw	r4,16(r18)
  804f7c:	90000115 	stw	zero,4(r18)
  804f80:	10bdffcc 	andi	r2,r2,63487
  804f84:	10ffffcc 	andi	r3,r2,65535
  804f88:	18c4000c 	andi	r3,r3,4096
  804f8c:	9080030d 	sth	r2,12(r18)
  804f90:	91000015 	stw	r4,0(r18)
  804f94:	18002b26 	beq	r3,zero,805044 <_fflush_r+0x160>
  804f98:	0007883a 	mov	r3,zero
  804f9c:	1805883a 	mov	r2,r3
  804fa0:	94001415 	stw	r16,80(r18)
  804fa4:	dfc00417 	ldw	ra,16(sp)
  804fa8:	dcc00317 	ldw	r19,12(sp)
  804fac:	dc800217 	ldw	r18,8(sp)
  804fb0:	dc400117 	ldw	r17,4(sp)
  804fb4:	dc000017 	ldw	r16,0(sp)
  804fb8:	dec00504 	addi	sp,sp,20
  804fbc:	f800283a 	ret
  804fc0:	94400417 	ldw	r17,16(r18)
  804fc4:	88001f26 	beq	r17,zero,805044 <_fflush_r+0x160>
  804fc8:	90800017 	ldw	r2,0(r18)
  804fcc:	18c000cc 	andi	r3,r3,3
  804fd0:	94400015 	stw	r17,0(r18)
  804fd4:	1461c83a 	sub	r16,r2,r17
  804fd8:	18002526 	beq	r3,zero,805070 <_fflush_r+0x18c>
  804fdc:	0005883a 	mov	r2,zero
  804fe0:	90800215 	stw	r2,8(r18)
  804fe4:	0400170e 	bge	zero,r16,805044 <_fflush_r+0x160>
  804fe8:	90c00917 	ldw	r3,36(r18)
  804fec:	91400717 	ldw	r5,28(r18)
  804ff0:	880d883a 	mov	r6,r17
  804ff4:	800f883a 	mov	r7,r16
  804ff8:	9809883a 	mov	r4,r19
  804ffc:	183ee83a 	callr	r3
  805000:	88a3883a 	add	r17,r17,r2
  805004:	80a1c83a 	sub	r16,r16,r2
  805008:	00bff616 	blt	zero,r2,804fe4 <_fflush_r+0x100>
  80500c:	9080030b 	ldhu	r2,12(r18)
  805010:	00ffffc4 	movi	r3,-1
  805014:	10801014 	ori	r2,r2,64
  805018:	9080030d 	sth	r2,12(r18)
  80501c:	1805883a 	mov	r2,r3
  805020:	dfc00417 	ldw	ra,16(sp)
  805024:	dcc00317 	ldw	r19,12(sp)
  805028:	dc800217 	ldw	r18,8(sp)
  80502c:	dc400117 	ldw	r17,4(sp)
  805030:	dc000017 	ldw	r16,0(sp)
  805034:	dec00504 	addi	sp,sp,20
  805038:	f800283a 	ret
  80503c:	90800f17 	ldw	r2,60(r18)
  805040:	00bfbe16 	blt	zero,r2,804f3c <_fflush_r+0x58>
  805044:	0007883a 	mov	r3,zero
  805048:	1805883a 	mov	r2,r3
  80504c:	dfc00417 	ldw	ra,16(sp)
  805050:	dcc00317 	ldw	r19,12(sp)
  805054:	dc800217 	ldw	r18,8(sp)
  805058:	dc400117 	ldw	r17,4(sp)
  80505c:	dc000017 	ldw	r16,0(sp)
  805060:	dec00504 	addi	sp,sp,20
  805064:	f800283a 	ret
  805068:	080517c0 	call	80517c <__sinit>
  80506c:	003fa806 	br	804f10 <_fflush_r+0x2c>
  805070:	90800517 	ldw	r2,20(r18)
  805074:	90800215 	stw	r2,8(r18)
  805078:	003fda06 	br	804fe4 <_fflush_r+0x100>
  80507c:	90800117 	ldw	r2,4(r18)
  805080:	90c00c17 	ldw	r3,48(r18)
  805084:	80a1c83a 	sub	r16,r16,r2
  805088:	183fb426 	beq	r3,zero,804f5c <_fflush_r+0x78>
  80508c:	90800f17 	ldw	r2,60(r18)
  805090:	80a1c83a 	sub	r16,r16,r2
  805094:	003fb106 	br	804f5c <_fflush_r+0x78>
  805098:	91400717 	ldw	r5,28(r18)
  80509c:	9809883a 	mov	r4,r19
  8050a0:	000d883a 	mov	r6,zero
  8050a4:	01c00044 	movi	r7,1
  8050a8:	403ee83a 	callr	r8
  8050ac:	1021883a 	mov	r16,r2
  8050b0:	00bfffc4 	movi	r2,-1
  8050b4:	80800226 	beq	r16,r2,8050c0 <_fflush_r+0x1dc>
  8050b8:	92000a17 	ldw	r8,40(r18)
  8050bc:	003fa406 	br	804f50 <_fflush_r+0x6c>
  8050c0:	98c00017 	ldw	r3,0(r19)
  8050c4:	00800744 	movi	r2,29
  8050c8:	18bfde26 	beq	r3,r2,805044 <_fflush_r+0x160>
  8050cc:	9080030b 	ldhu	r2,12(r18)
  8050d0:	8007883a 	mov	r3,r16
  8050d4:	10801014 	ori	r2,r2,64
  8050d8:	9080030d 	sth	r2,12(r18)
  8050dc:	003fcf06 	br	80501c <_fflush_r+0x138>

008050e0 <fflush>:
  8050e0:	01402034 	movhi	r5,128
  8050e4:	2953b904 	addi	r5,r5,20196
  8050e8:	2007883a 	mov	r3,r4
  8050ec:	20000526 	beq	r4,zero,805104 <fflush+0x24>
  8050f0:	00802074 	movhi	r2,129
  8050f4:	10870f04 	addi	r2,r2,7228
  8050f8:	11000017 	ldw	r4,0(r2)
  8050fc:	180b883a 	mov	r5,r3
  805100:	0804ee41 	jmpi	804ee4 <_fflush_r>
  805104:	00802074 	movhi	r2,129
  805108:	10871004 	addi	r2,r2,7232
  80510c:	11000017 	ldw	r4,0(r2)
  805110:	0805cb01 	jmpi	805cb0 <_fwalk_reent>

00805114 <std>:
  805114:	00802074 	movhi	r2,129
  805118:	10a0de04 	addi	r2,r2,-31880
  80511c:	20800b15 	stw	r2,44(r4)
  805120:	00802074 	movhi	r2,129
  805124:	10a11904 	addi	r2,r2,-31644
  805128:	20800815 	stw	r2,32(r4)
  80512c:	00c02074 	movhi	r3,129
  805130:	18e0fa04 	addi	r3,r3,-31768
  805134:	00802074 	movhi	r2,129
  805138:	10a0e004 	addi	r2,r2,-31872
  80513c:	2140030d 	sth	r5,12(r4)
  805140:	2180038d 	sth	r6,14(r4)
  805144:	20c00915 	stw	r3,36(r4)
  805148:	20800a15 	stw	r2,40(r4)
  80514c:	20000015 	stw	zero,0(r4)
  805150:	20000115 	stw	zero,4(r4)
  805154:	20000215 	stw	zero,8(r4)
  805158:	20000415 	stw	zero,16(r4)
  80515c:	20000515 	stw	zero,20(r4)
  805160:	20000615 	stw	zero,24(r4)
  805164:	21000715 	stw	r4,28(r4)
  805168:	f800283a 	ret

0080516c <__sfp_lock_acquire>:
  80516c:	f800283a 	ret

00805170 <__sfp_lock_release>:
  805170:	f800283a 	ret

00805174 <__sinit_lock_acquire>:
  805174:	f800283a 	ret

00805178 <__sinit_lock_release>:
  805178:	f800283a 	ret

0080517c <__sinit>:
  80517c:	20800e17 	ldw	r2,56(r4)
  805180:	defffd04 	addi	sp,sp,-12
  805184:	dc400115 	stw	r17,4(sp)
  805188:	dc000015 	stw	r16,0(sp)
  80518c:	dfc00215 	stw	ra,8(sp)
  805190:	04400044 	movi	r17,1
  805194:	01400104 	movi	r5,4
  805198:	000d883a 	mov	r6,zero
  80519c:	2021883a 	mov	r16,r4
  8051a0:	2200bb04 	addi	r8,r4,748
  8051a4:	200f883a 	mov	r7,r4
  8051a8:	10000526 	beq	r2,zero,8051c0 <__sinit+0x44>
  8051ac:	dfc00217 	ldw	ra,8(sp)
  8051b0:	dc400117 	ldw	r17,4(sp)
  8051b4:	dc000017 	ldw	r16,0(sp)
  8051b8:	dec00304 	addi	sp,sp,12
  8051bc:	f800283a 	ret
  8051c0:	21000117 	ldw	r4,4(r4)
  8051c4:	00802034 	movhi	r2,128
  8051c8:	10949804 	addi	r2,r2,21088
  8051cc:	00c000c4 	movi	r3,3
  8051d0:	80800f15 	stw	r2,60(r16)
  8051d4:	80c0b915 	stw	r3,740(r16)
  8051d8:	8200ba15 	stw	r8,744(r16)
  8051dc:	84400e15 	stw	r17,56(r16)
  8051e0:	8000b815 	stw	zero,736(r16)
  8051e4:	08051140 	call	805114 <std>
  8051e8:	81000217 	ldw	r4,8(r16)
  8051ec:	880d883a 	mov	r6,r17
  8051f0:	800f883a 	mov	r7,r16
  8051f4:	01400284 	movi	r5,10
  8051f8:	08051140 	call	805114 <std>
  8051fc:	81000317 	ldw	r4,12(r16)
  805200:	800f883a 	mov	r7,r16
  805204:	01400484 	movi	r5,18
  805208:	01800084 	movi	r6,2
  80520c:	dfc00217 	ldw	ra,8(sp)
  805210:	dc400117 	ldw	r17,4(sp)
  805214:	dc000017 	ldw	r16,0(sp)
  805218:	dec00304 	addi	sp,sp,12
  80521c:	08051141 	jmpi	805114 <std>

00805220 <__fp_lock>:
  805220:	0005883a 	mov	r2,zero
  805224:	f800283a 	ret

00805228 <__fp_unlock>:
  805228:	0005883a 	mov	r2,zero
  80522c:	f800283a 	ret

00805230 <__fp_unlock_all>:
  805230:	00802074 	movhi	r2,129
  805234:	10870f04 	addi	r2,r2,7228
  805238:	11000017 	ldw	r4,0(r2)
  80523c:	01402034 	movhi	r5,128
  805240:	29548a04 	addi	r5,r5,21032
  805244:	0805d781 	jmpi	805d78 <_fwalk>

00805248 <__fp_lock_all>:
  805248:	00802074 	movhi	r2,129
  80524c:	10870f04 	addi	r2,r2,7228
  805250:	11000017 	ldw	r4,0(r2)
  805254:	01402034 	movhi	r5,128
  805258:	29548804 	addi	r5,r5,21024
  80525c:	0805d781 	jmpi	805d78 <_fwalk>

00805260 <_cleanup_r>:
  805260:	01402074 	movhi	r5,129
  805264:	29627b04 	addi	r5,r5,-30228
  805268:	0805d781 	jmpi	805d78 <_fwalk>

0080526c <_cleanup>:
  80526c:	00802074 	movhi	r2,129
  805270:	10871004 	addi	r2,r2,7232
  805274:	11000017 	ldw	r4,0(r2)
  805278:	08052601 	jmpi	805260 <_cleanup_r>

0080527c <__sfmoreglue>:
  80527c:	defffc04 	addi	sp,sp,-16
  805280:	dc400115 	stw	r17,4(sp)
  805284:	2c401724 	muli	r17,r5,92
  805288:	dc800215 	stw	r18,8(sp)
  80528c:	2825883a 	mov	r18,r5
  805290:	89400304 	addi	r5,r17,12
  805294:	dc000015 	stw	r16,0(sp)
  805298:	dfc00315 	stw	ra,12(sp)
  80529c:	08060880 	call	806088 <_malloc_r>
  8052a0:	0021883a 	mov	r16,zero
  8052a4:	880d883a 	mov	r6,r17
  8052a8:	000b883a 	mov	r5,zero
  8052ac:	10000626 	beq	r2,zero,8052c8 <__sfmoreglue+0x4c>
  8052b0:	11000304 	addi	r4,r2,12
  8052b4:	14800115 	stw	r18,4(r2)
  8052b8:	10000015 	stw	zero,0(r2)
  8052bc:	11000215 	stw	r4,8(r2)
  8052c0:	1021883a 	mov	r16,r2
  8052c4:	0806a2c0 	call	806a2c <memset>
  8052c8:	8005883a 	mov	r2,r16
  8052cc:	dfc00317 	ldw	ra,12(sp)
  8052d0:	dc800217 	ldw	r18,8(sp)
  8052d4:	dc400117 	ldw	r17,4(sp)
  8052d8:	dc000017 	ldw	r16,0(sp)
  8052dc:	dec00404 	addi	sp,sp,16
  8052e0:	f800283a 	ret

008052e4 <__sfp>:
  8052e4:	defffd04 	addi	sp,sp,-12
  8052e8:	00802074 	movhi	r2,129
  8052ec:	10871004 	addi	r2,r2,7232
  8052f0:	dc000015 	stw	r16,0(sp)
  8052f4:	14000017 	ldw	r16,0(r2)
  8052f8:	dc400115 	stw	r17,4(sp)
  8052fc:	dfc00215 	stw	ra,8(sp)
  805300:	80800e17 	ldw	r2,56(r16)
  805304:	2023883a 	mov	r17,r4
  805308:	10002626 	beq	r2,zero,8053a4 <__sfp+0xc0>
  80530c:	8400b804 	addi	r16,r16,736
  805310:	80800117 	ldw	r2,4(r16)
  805314:	81000217 	ldw	r4,8(r16)
  805318:	10ffffc4 	addi	r3,r2,-1
  80531c:	18000916 	blt	r3,zero,805344 <__sfp+0x60>
  805320:	2080030f 	ldh	r2,12(r4)
  805324:	10000b26 	beq	r2,zero,805354 <__sfp+0x70>
  805328:	017fffc4 	movi	r5,-1
  80532c:	00000206 	br	805338 <__sfp+0x54>
  805330:	2080030f 	ldh	r2,12(r4)
  805334:	10000726 	beq	r2,zero,805354 <__sfp+0x70>
  805338:	18ffffc4 	addi	r3,r3,-1
  80533c:	21001704 	addi	r4,r4,92
  805340:	197ffb1e 	bne	r3,r5,805330 <__sfp+0x4c>
  805344:	80800017 	ldw	r2,0(r16)
  805348:	10001926 	beq	r2,zero,8053b0 <__sfp+0xcc>
  80534c:	1021883a 	mov	r16,r2
  805350:	003fef06 	br	805310 <__sfp+0x2c>
  805354:	00bfffc4 	movi	r2,-1
  805358:	00c00044 	movi	r3,1
  80535c:	2080038d 	sth	r2,14(r4)
  805360:	20c0030d 	sth	r3,12(r4)
  805364:	20000015 	stw	zero,0(r4)
  805368:	20000215 	stw	zero,8(r4)
  80536c:	20000115 	stw	zero,4(r4)
  805370:	20000415 	stw	zero,16(r4)
  805374:	20000515 	stw	zero,20(r4)
  805378:	20000615 	stw	zero,24(r4)
  80537c:	20000c15 	stw	zero,48(r4)
  805380:	20000d15 	stw	zero,52(r4)
  805384:	20001115 	stw	zero,68(r4)
  805388:	20001215 	stw	zero,72(r4)
  80538c:	2005883a 	mov	r2,r4
  805390:	dfc00217 	ldw	ra,8(sp)
  805394:	dc400117 	ldw	r17,4(sp)
  805398:	dc000017 	ldw	r16,0(sp)
  80539c:	dec00304 	addi	sp,sp,12
  8053a0:	f800283a 	ret
  8053a4:	8009883a 	mov	r4,r16
  8053a8:	080517c0 	call	80517c <__sinit>
  8053ac:	003fd706 	br	80530c <__sfp+0x28>
  8053b0:	8809883a 	mov	r4,r17
  8053b4:	01400104 	movi	r5,4
  8053b8:	080527c0 	call	80527c <__sfmoreglue>
  8053bc:	80800015 	stw	r2,0(r16)
  8053c0:	103fe21e 	bne	r2,zero,80534c <__sfp+0x68>
  8053c4:	00800304 	movi	r2,12
  8053c8:	0009883a 	mov	r4,zero
  8053cc:	88800015 	stw	r2,0(r17)
  8053d0:	003fee06 	br	80538c <__sfp+0xa8>

008053d4 <_malloc_trim_r>:
  8053d4:	defffb04 	addi	sp,sp,-20
  8053d8:	dcc00315 	stw	r19,12(sp)
  8053dc:	04c02074 	movhi	r19,129
  8053e0:	9cc14d04 	addi	r19,r19,1332
  8053e4:	dc800215 	stw	r18,8(sp)
  8053e8:	dc400115 	stw	r17,4(sp)
  8053ec:	dc000015 	stw	r16,0(sp)
  8053f0:	2823883a 	mov	r17,r5
  8053f4:	2025883a 	mov	r18,r4
  8053f8:	dfc00415 	stw	ra,16(sp)
  8053fc:	080b8ec0 	call	80b8ec <__malloc_lock>
  805400:	98800217 	ldw	r2,8(r19)
  805404:	9009883a 	mov	r4,r18
  805408:	000b883a 	mov	r5,zero
  80540c:	10c00117 	ldw	r3,4(r2)
  805410:	00bfff04 	movi	r2,-4
  805414:	18a0703a 	and	r16,r3,r2
  805418:	8463c83a 	sub	r17,r16,r17
  80541c:	8c43fbc4 	addi	r17,r17,4079
  805420:	8822d33a 	srli	r17,r17,12
  805424:	0083ffc4 	movi	r2,4095
  805428:	8c7fffc4 	addi	r17,r17,-1
  80542c:	8822933a 	slli	r17,r17,12
  805430:	1440060e 	bge	r2,r17,80544c <_malloc_trim_r+0x78>
  805434:	08083080 	call	808308 <_sbrk_r>
  805438:	98c00217 	ldw	r3,8(r19)
  80543c:	9009883a 	mov	r4,r18
  805440:	044bc83a 	sub	r5,zero,r17
  805444:	80c7883a 	add	r3,r16,r3
  805448:	10c00926 	beq	r2,r3,805470 <_malloc_trim_r+0x9c>
  80544c:	080b90c0 	call	80b90c <__malloc_unlock>
  805450:	0005883a 	mov	r2,zero
  805454:	dfc00417 	ldw	ra,16(sp)
  805458:	dcc00317 	ldw	r19,12(sp)
  80545c:	dc800217 	ldw	r18,8(sp)
  805460:	dc400117 	ldw	r17,4(sp)
  805464:	dc000017 	ldw	r16,0(sp)
  805468:	dec00504 	addi	sp,sp,20
  80546c:	f800283a 	ret
  805470:	9009883a 	mov	r4,r18
  805474:	08083080 	call	808308 <_sbrk_r>
  805478:	844dc83a 	sub	r6,r16,r17
  80547c:	00ffffc4 	movi	r3,-1
  805480:	9009883a 	mov	r4,r18
  805484:	000b883a 	mov	r5,zero
  805488:	01c02074 	movhi	r7,129
  80548c:	39ce9004 	addi	r7,r7,14912
  805490:	31800054 	ori	r6,r6,1
  805494:	10c00926 	beq	r2,r3,8054bc <_malloc_trim_r+0xe8>
  805498:	38800017 	ldw	r2,0(r7)
  80549c:	98c00217 	ldw	r3,8(r19)
  8054a0:	9009883a 	mov	r4,r18
  8054a4:	1445c83a 	sub	r2,r2,r17
  8054a8:	38800015 	stw	r2,0(r7)
  8054ac:	19800115 	stw	r6,4(r3)
  8054b0:	080b90c0 	call	80b90c <__malloc_unlock>
  8054b4:	00800044 	movi	r2,1
  8054b8:	003fe606 	br	805454 <_malloc_trim_r+0x80>
  8054bc:	08083080 	call	808308 <_sbrk_r>
  8054c0:	99800217 	ldw	r6,8(r19)
  8054c4:	100f883a 	mov	r7,r2
  8054c8:	9009883a 	mov	r4,r18
  8054cc:	1187c83a 	sub	r3,r2,r6
  8054d0:	008003c4 	movi	r2,15
  8054d4:	19400054 	ori	r5,r3,1
  8054d8:	10ffdc0e 	bge	r2,r3,80544c <_malloc_trim_r+0x78>
  8054dc:	00802074 	movhi	r2,129
  8054e0:	10871404 	addi	r2,r2,7248
  8054e4:	10c00017 	ldw	r3,0(r2)
  8054e8:	00802074 	movhi	r2,129
  8054ec:	108e9004 	addi	r2,r2,14912
  8054f0:	31400115 	stw	r5,4(r6)
  8054f4:	38c7c83a 	sub	r3,r7,r3
  8054f8:	10c00015 	stw	r3,0(r2)
  8054fc:	003fd306 	br	80544c <_malloc_trim_r+0x78>

00805500 <_free_r>:
  805500:	defffd04 	addi	sp,sp,-12
  805504:	dc400115 	stw	r17,4(sp)
  805508:	dc000015 	stw	r16,0(sp)
  80550c:	dfc00215 	stw	ra,8(sp)
  805510:	2821883a 	mov	r16,r5
  805514:	2023883a 	mov	r17,r4
  805518:	28005a26 	beq	r5,zero,805684 <_free_r+0x184>
  80551c:	080b8ec0 	call	80b8ec <__malloc_lock>
  805520:	823ffe04 	addi	r8,r16,-8
  805524:	41400117 	ldw	r5,4(r8)
  805528:	00bfff84 	movi	r2,-2
  80552c:	02802074 	movhi	r10,129
  805530:	52814d04 	addi	r10,r10,1332
  805534:	288e703a 	and	r7,r5,r2
  805538:	41cd883a 	add	r6,r8,r7
  80553c:	30c00117 	ldw	r3,4(r6)
  805540:	51000217 	ldw	r4,8(r10)
  805544:	00bfff04 	movi	r2,-4
  805548:	1892703a 	and	r9,r3,r2
  80554c:	5017883a 	mov	r11,r10
  805550:	31006726 	beq	r6,r4,8056f0 <_free_r+0x1f0>
  805554:	2880004c 	andi	r2,r5,1
  805558:	1005003a 	cmpeq	r2,r2,zero
  80555c:	32400115 	stw	r9,4(r6)
  805560:	10001a1e 	bne	r2,zero,8055cc <_free_r+0xcc>
  805564:	000b883a 	mov	r5,zero
  805568:	3247883a 	add	r3,r6,r9
  80556c:	18800117 	ldw	r2,4(r3)
  805570:	1080004c 	andi	r2,r2,1
  805574:	1000231e 	bne	r2,zero,805604 <_free_r+0x104>
  805578:	280ac03a 	cmpne	r5,r5,zero
  80557c:	3a4f883a 	add	r7,r7,r9
  805580:	2800451e 	bne	r5,zero,805698 <_free_r+0x198>
  805584:	31000217 	ldw	r4,8(r6)
  805588:	00802074 	movhi	r2,129
  80558c:	10814f04 	addi	r2,r2,1340
  805590:	20807b26 	beq	r4,r2,805780 <_free_r+0x280>
  805594:	30800317 	ldw	r2,12(r6)
  805598:	3a07883a 	add	r3,r7,r8
  80559c:	19c00015 	stw	r7,0(r3)
  8055a0:	11000215 	stw	r4,8(r2)
  8055a4:	20800315 	stw	r2,12(r4)
  8055a8:	38800054 	ori	r2,r7,1
  8055ac:	40800115 	stw	r2,4(r8)
  8055b0:	28001a26 	beq	r5,zero,80561c <_free_r+0x11c>
  8055b4:	8809883a 	mov	r4,r17
  8055b8:	dfc00217 	ldw	ra,8(sp)
  8055bc:	dc400117 	ldw	r17,4(sp)
  8055c0:	dc000017 	ldw	r16,0(sp)
  8055c4:	dec00304 	addi	sp,sp,12
  8055c8:	080b90c1 	jmpi	80b90c <__malloc_unlock>
  8055cc:	80bffe17 	ldw	r2,-8(r16)
  8055d0:	50c00204 	addi	r3,r10,8
  8055d4:	4091c83a 	sub	r8,r8,r2
  8055d8:	41000217 	ldw	r4,8(r8)
  8055dc:	388f883a 	add	r7,r7,r2
  8055e0:	20c06126 	beq	r4,r3,805768 <_free_r+0x268>
  8055e4:	40800317 	ldw	r2,12(r8)
  8055e8:	3247883a 	add	r3,r6,r9
  8055ec:	000b883a 	mov	r5,zero
  8055f0:	11000215 	stw	r4,8(r2)
  8055f4:	20800315 	stw	r2,12(r4)
  8055f8:	18800117 	ldw	r2,4(r3)
  8055fc:	1080004c 	andi	r2,r2,1
  805600:	103fdd26 	beq	r2,zero,805578 <_free_r+0x78>
  805604:	38800054 	ori	r2,r7,1
  805608:	3a07883a 	add	r3,r7,r8
  80560c:	280ac03a 	cmpne	r5,r5,zero
  805610:	40800115 	stw	r2,4(r8)
  805614:	19c00015 	stw	r7,0(r3)
  805618:	283fe61e 	bne	r5,zero,8055b4 <_free_r+0xb4>
  80561c:	00807fc4 	movi	r2,511
  805620:	11c01f2e 	bgeu	r2,r7,8056a0 <_free_r+0x1a0>
  805624:	3806d27a 	srli	r3,r7,9
  805628:	1800481e 	bne	r3,zero,80574c <_free_r+0x24c>
  80562c:	3804d0fa 	srli	r2,r7,3
  805630:	100690fa 	slli	r3,r2,3
  805634:	1acd883a 	add	r6,r3,r11
  805638:	31400217 	ldw	r5,8(r6)
  80563c:	31405926 	beq	r6,r5,8057a4 <_free_r+0x2a4>
  805640:	28800117 	ldw	r2,4(r5)
  805644:	00ffff04 	movi	r3,-4
  805648:	10c4703a 	and	r2,r2,r3
  80564c:	3880022e 	bgeu	r7,r2,805658 <_free_r+0x158>
  805650:	29400217 	ldw	r5,8(r5)
  805654:	317ffa1e 	bne	r6,r5,805640 <_free_r+0x140>
  805658:	29800317 	ldw	r6,12(r5)
  80565c:	41800315 	stw	r6,12(r8)
  805660:	41400215 	stw	r5,8(r8)
  805664:	8809883a 	mov	r4,r17
  805668:	2a000315 	stw	r8,12(r5)
  80566c:	32000215 	stw	r8,8(r6)
  805670:	dfc00217 	ldw	ra,8(sp)
  805674:	dc400117 	ldw	r17,4(sp)
  805678:	dc000017 	ldw	r16,0(sp)
  80567c:	dec00304 	addi	sp,sp,12
  805680:	080b90c1 	jmpi	80b90c <__malloc_unlock>
  805684:	dfc00217 	ldw	ra,8(sp)
  805688:	dc400117 	ldw	r17,4(sp)
  80568c:	dc000017 	ldw	r16,0(sp)
  805690:	dec00304 	addi	sp,sp,12
  805694:	f800283a 	ret
  805698:	31000217 	ldw	r4,8(r6)
  80569c:	003fbd06 	br	805594 <_free_r+0x94>
  8056a0:	3806d0fa 	srli	r3,r7,3
  8056a4:	00800044 	movi	r2,1
  8056a8:	51400117 	ldw	r5,4(r10)
  8056ac:	180890fa 	slli	r4,r3,3
  8056b0:	1807d0ba 	srai	r3,r3,2
  8056b4:	22c9883a 	add	r4,r4,r11
  8056b8:	21800217 	ldw	r6,8(r4)
  8056bc:	10c4983a 	sll	r2,r2,r3
  8056c0:	41000315 	stw	r4,12(r8)
  8056c4:	41800215 	stw	r6,8(r8)
  8056c8:	288ab03a 	or	r5,r5,r2
  8056cc:	22000215 	stw	r8,8(r4)
  8056d0:	8809883a 	mov	r4,r17
  8056d4:	51400115 	stw	r5,4(r10)
  8056d8:	32000315 	stw	r8,12(r6)
  8056dc:	dfc00217 	ldw	ra,8(sp)
  8056e0:	dc400117 	ldw	r17,4(sp)
  8056e4:	dc000017 	ldw	r16,0(sp)
  8056e8:	dec00304 	addi	sp,sp,12
  8056ec:	080b90c1 	jmpi	80b90c <__malloc_unlock>
  8056f0:	2880004c 	andi	r2,r5,1
  8056f4:	3a4d883a 	add	r6,r7,r9
  8056f8:	1000071e 	bne	r2,zero,805718 <_free_r+0x218>
  8056fc:	80bffe17 	ldw	r2,-8(r16)
  805700:	4091c83a 	sub	r8,r8,r2
  805704:	41000317 	ldw	r4,12(r8)
  805708:	40c00217 	ldw	r3,8(r8)
  80570c:	308d883a 	add	r6,r6,r2
  805710:	20c00215 	stw	r3,8(r4)
  805714:	19000315 	stw	r4,12(r3)
  805718:	00802074 	movhi	r2,129
  80571c:	10871304 	addi	r2,r2,7244
  805720:	11000017 	ldw	r4,0(r2)
  805724:	30c00054 	ori	r3,r6,1
  805728:	52000215 	stw	r8,8(r10)
  80572c:	40c00115 	stw	r3,4(r8)
  805730:	313fa036 	bltu	r6,r4,8055b4 <_free_r+0xb4>
  805734:	00802074 	movhi	r2,129
  805738:	108e8704 	addi	r2,r2,14876
  80573c:	11400017 	ldw	r5,0(r2)
  805740:	8809883a 	mov	r4,r17
  805744:	08053d40 	call	8053d4 <_malloc_trim_r>
  805748:	003f9a06 	br	8055b4 <_free_r+0xb4>
  80574c:	00800104 	movi	r2,4
  805750:	10c0072e 	bgeu	r2,r3,805770 <_free_r+0x270>
  805754:	00800504 	movi	r2,20
  805758:	10c01936 	bltu	r2,r3,8057c0 <_free_r+0x2c0>
  80575c:	188016c4 	addi	r2,r3,91
  805760:	100690fa 	slli	r3,r2,3
  805764:	003fb306 	br	805634 <_free_r+0x134>
  805768:	01400044 	movi	r5,1
  80576c:	003f7e06 	br	805568 <_free_r+0x68>
  805770:	3804d1ba 	srli	r2,r7,6
  805774:	10800e04 	addi	r2,r2,56
  805778:	100690fa 	slli	r3,r2,3
  80577c:	003fad06 	br	805634 <_free_r+0x134>
  805780:	22000315 	stw	r8,12(r4)
  805784:	22000215 	stw	r8,8(r4)
  805788:	3a05883a 	add	r2,r7,r8
  80578c:	38c00054 	ori	r3,r7,1
  805790:	11c00015 	stw	r7,0(r2)
  805794:	41000215 	stw	r4,8(r8)
  805798:	40c00115 	stw	r3,4(r8)
  80579c:	41000315 	stw	r4,12(r8)
  8057a0:	003f8406 	br	8055b4 <_free_r+0xb4>
  8057a4:	1005d0ba 	srai	r2,r2,2
  8057a8:	00c00044 	movi	r3,1
  8057ac:	51000117 	ldw	r4,4(r10)
  8057b0:	1886983a 	sll	r3,r3,r2
  8057b4:	20c8b03a 	or	r4,r4,r3
  8057b8:	51000115 	stw	r4,4(r10)
  8057bc:	003fa706 	br	80565c <_free_r+0x15c>
  8057c0:	00801504 	movi	r2,84
  8057c4:	10c00436 	bltu	r2,r3,8057d8 <_free_r+0x2d8>
  8057c8:	3804d33a 	srli	r2,r7,12
  8057cc:	10801b84 	addi	r2,r2,110
  8057d0:	100690fa 	slli	r3,r2,3
  8057d4:	003f9706 	br	805634 <_free_r+0x134>
  8057d8:	00805504 	movi	r2,340
  8057dc:	10c00436 	bltu	r2,r3,8057f0 <_free_r+0x2f0>
  8057e0:	3804d3fa 	srli	r2,r7,15
  8057e4:	10801dc4 	addi	r2,r2,119
  8057e8:	100690fa 	slli	r3,r2,3
  8057ec:	003f9106 	br	805634 <_free_r+0x134>
  8057f0:	00815504 	movi	r2,1364
  8057f4:	10c0032e 	bgeu	r2,r3,805804 <_free_r+0x304>
  8057f8:	00801f84 	movi	r2,126
  8057fc:	00c0fc04 	movi	r3,1008
  805800:	003f8c06 	br	805634 <_free_r+0x134>
  805804:	3804d4ba 	srli	r2,r7,18
  805808:	10801f04 	addi	r2,r2,124
  80580c:	100690fa 	slli	r3,r2,3
  805810:	003f8806 	br	805634 <_free_r+0x134>

00805814 <__sfvwrite_r>:
  805814:	30800217 	ldw	r2,8(r6)
  805818:	defff504 	addi	sp,sp,-44
  80581c:	df000915 	stw	fp,36(sp)
  805820:	dd800715 	stw	r22,28(sp)
  805824:	dc800315 	stw	r18,12(sp)
  805828:	dfc00a15 	stw	ra,40(sp)
  80582c:	ddc00815 	stw	r23,32(sp)
  805830:	dd400615 	stw	r21,24(sp)
  805834:	dd000515 	stw	r20,20(sp)
  805838:	dcc00415 	stw	r19,16(sp)
  80583c:	dc400215 	stw	r17,8(sp)
  805840:	dc000115 	stw	r16,4(sp)
  805844:	302d883a 	mov	r22,r6
  805848:	2039883a 	mov	fp,r4
  80584c:	2825883a 	mov	r18,r5
  805850:	10001c26 	beq	r2,zero,8058c4 <__sfvwrite_r+0xb0>
  805854:	29c0030b 	ldhu	r7,12(r5)
  805858:	3880020c 	andi	r2,r7,8
  80585c:	10002726 	beq	r2,zero,8058fc <__sfvwrite_r+0xe8>
  805860:	28800417 	ldw	r2,16(r5)
  805864:	10002526 	beq	r2,zero,8058fc <__sfvwrite_r+0xe8>
  805868:	3880008c 	andi	r2,r7,2
  80586c:	b5400017 	ldw	r21,0(r22)
  805870:	10002826 	beq	r2,zero,805914 <__sfvwrite_r+0x100>
  805874:	0021883a 	mov	r16,zero
  805878:	0023883a 	mov	r17,zero
  80587c:	880d883a 	mov	r6,r17
  805880:	e009883a 	mov	r4,fp
  805884:	00810004 	movi	r2,1024
  805888:	80006e26 	beq	r16,zero,805a44 <__sfvwrite_r+0x230>
  80588c:	800f883a 	mov	r7,r16
  805890:	91400717 	ldw	r5,28(r18)
  805894:	1400012e 	bgeu	r2,r16,80589c <__sfvwrite_r+0x88>
  805898:	100f883a 	mov	r7,r2
  80589c:	90c00917 	ldw	r3,36(r18)
  8058a0:	183ee83a 	callr	r3
  8058a4:	1007883a 	mov	r3,r2
  8058a8:	80a1c83a 	sub	r16,r16,r2
  8058ac:	88a3883a 	add	r17,r17,r2
  8058b0:	00806d0e 	bge	zero,r2,805a68 <__sfvwrite_r+0x254>
  8058b4:	b0800217 	ldw	r2,8(r22)
  8058b8:	10c5c83a 	sub	r2,r2,r3
  8058bc:	b0800215 	stw	r2,8(r22)
  8058c0:	103fee1e 	bne	r2,zero,80587c <__sfvwrite_r+0x68>
  8058c4:	0009883a 	mov	r4,zero
  8058c8:	2005883a 	mov	r2,r4
  8058cc:	dfc00a17 	ldw	ra,40(sp)
  8058d0:	df000917 	ldw	fp,36(sp)
  8058d4:	ddc00817 	ldw	r23,32(sp)
  8058d8:	dd800717 	ldw	r22,28(sp)
  8058dc:	dd400617 	ldw	r21,24(sp)
  8058e0:	dd000517 	ldw	r20,20(sp)
  8058e4:	dcc00417 	ldw	r19,16(sp)
  8058e8:	dc800317 	ldw	r18,12(sp)
  8058ec:	dc400217 	ldw	r17,8(sp)
  8058f0:	dc000117 	ldw	r16,4(sp)
  8058f4:	dec00b04 	addi	sp,sp,44
  8058f8:	f800283a 	ret
  8058fc:	08034280 	call	803428 <__swsetup_r>
  805900:	1000e41e 	bne	r2,zero,805c94 <__sfvwrite_r+0x480>
  805904:	91c0030b 	ldhu	r7,12(r18)
  805908:	b5400017 	ldw	r21,0(r22)
  80590c:	3880008c 	andi	r2,r7,2
  805910:	103fd81e 	bne	r2,zero,805874 <__sfvwrite_r+0x60>
  805914:	3880004c 	andi	r2,r7,1
  805918:	1005003a 	cmpeq	r2,r2,zero
  80591c:	10005726 	beq	r2,zero,805a7c <__sfvwrite_r+0x268>
  805920:	0029883a 	mov	r20,zero
  805924:	002f883a 	mov	r23,zero
  805928:	a0004226 	beq	r20,zero,805a34 <__sfvwrite_r+0x220>
  80592c:	3880800c 	andi	r2,r7,512
  805930:	94000217 	ldw	r16,8(r18)
  805934:	10008b26 	beq	r2,zero,805b64 <__sfvwrite_r+0x350>
  805938:	800d883a 	mov	r6,r16
  80593c:	a400a536 	bltu	r20,r16,805bd4 <__sfvwrite_r+0x3c0>
  805940:	3881200c 	andi	r2,r7,1152
  805944:	10002726 	beq	r2,zero,8059e4 <__sfvwrite_r+0x1d0>
  805948:	90800517 	ldw	r2,20(r18)
  80594c:	92000417 	ldw	r8,16(r18)
  805950:	91400017 	ldw	r5,0(r18)
  805954:	1087883a 	add	r3,r2,r2
  805958:	1887883a 	add	r3,r3,r2
  80595c:	1808d7fa 	srli	r4,r3,31
  805960:	2a21c83a 	sub	r16,r5,r8
  805964:	80800044 	addi	r2,r16,1
  805968:	20c9883a 	add	r4,r4,r3
  80596c:	2027d07a 	srai	r19,r4,1
  805970:	a085883a 	add	r2,r20,r2
  805974:	980d883a 	mov	r6,r19
  805978:	9880022e 	bgeu	r19,r2,805984 <__sfvwrite_r+0x170>
  80597c:	1027883a 	mov	r19,r2
  805980:	100d883a 	mov	r6,r2
  805984:	3881000c 	andi	r2,r7,1024
  805988:	1000b826 	beq	r2,zero,805c6c <__sfvwrite_r+0x458>
  80598c:	300b883a 	mov	r5,r6
  805990:	e009883a 	mov	r4,fp
  805994:	08060880 	call	806088 <_malloc_r>
  805998:	10003126 	beq	r2,zero,805a60 <__sfvwrite_r+0x24c>
  80599c:	91400417 	ldw	r5,16(r18)
  8059a0:	1009883a 	mov	r4,r2
  8059a4:	800d883a 	mov	r6,r16
  8059a8:	1023883a 	mov	r17,r2
  8059ac:	08068ac0 	call	8068ac <memcpy>
  8059b0:	90c0030b 	ldhu	r3,12(r18)
  8059b4:	00beffc4 	movi	r2,-1025
  8059b8:	1886703a 	and	r3,r3,r2
  8059bc:	18c02014 	ori	r3,r3,128
  8059c0:	90c0030d 	sth	r3,12(r18)
  8059c4:	9c07c83a 	sub	r3,r19,r16
  8059c8:	8c05883a 	add	r2,r17,r16
  8059cc:	a00d883a 	mov	r6,r20
  8059d0:	a021883a 	mov	r16,r20
  8059d4:	90800015 	stw	r2,0(r18)
  8059d8:	90c00215 	stw	r3,8(r18)
  8059dc:	94400415 	stw	r17,16(r18)
  8059e0:	94c00515 	stw	r19,20(r18)
  8059e4:	91000017 	ldw	r4,0(r18)
  8059e8:	b80b883a 	mov	r5,r23
  8059ec:	a023883a 	mov	r17,r20
  8059f0:	080694c0 	call	80694c <memmove>
  8059f4:	90c00217 	ldw	r3,8(r18)
  8059f8:	90800017 	ldw	r2,0(r18)
  8059fc:	a027883a 	mov	r19,r20
  805a00:	1c07c83a 	sub	r3,r3,r16
  805a04:	1405883a 	add	r2,r2,r16
  805a08:	90c00215 	stw	r3,8(r18)
  805a0c:	a021883a 	mov	r16,r20
  805a10:	90800015 	stw	r2,0(r18)
  805a14:	b0800217 	ldw	r2,8(r22)
  805a18:	1405c83a 	sub	r2,r2,r16
  805a1c:	b0800215 	stw	r2,8(r22)
  805a20:	103fa826 	beq	r2,zero,8058c4 <__sfvwrite_r+0xb0>
  805a24:	a469c83a 	sub	r20,r20,r17
  805a28:	91c0030b 	ldhu	r7,12(r18)
  805a2c:	bcef883a 	add	r23,r23,r19
  805a30:	a03fbe1e 	bne	r20,zero,80592c <__sfvwrite_r+0x118>
  805a34:	adc00017 	ldw	r23,0(r21)
  805a38:	ad000117 	ldw	r20,4(r21)
  805a3c:	ad400204 	addi	r21,r21,8
  805a40:	003fb906 	br	805928 <__sfvwrite_r+0x114>
  805a44:	ac400017 	ldw	r17,0(r21)
  805a48:	ac000117 	ldw	r16,4(r21)
  805a4c:	ad400204 	addi	r21,r21,8
  805a50:	003f8a06 	br	80587c <__sfvwrite_r+0x68>
  805a54:	91400417 	ldw	r5,16(r18)
  805a58:	e009883a 	mov	r4,fp
  805a5c:	08055000 	call	805500 <_free_r>
  805a60:	00800304 	movi	r2,12
  805a64:	e0800015 	stw	r2,0(fp)
  805a68:	9080030b 	ldhu	r2,12(r18)
  805a6c:	013fffc4 	movi	r4,-1
  805a70:	10801014 	ori	r2,r2,64
  805a74:	9080030d 	sth	r2,12(r18)
  805a78:	003f9306 	br	8058c8 <__sfvwrite_r+0xb4>
  805a7c:	0027883a 	mov	r19,zero
  805a80:	002f883a 	mov	r23,zero
  805a84:	d8000015 	stw	zero,0(sp)
  805a88:	0029883a 	mov	r20,zero
  805a8c:	98001e26 	beq	r19,zero,805b08 <__sfvwrite_r+0x2f4>
  805a90:	d8c00017 	ldw	r3,0(sp)
  805a94:	1804c03a 	cmpne	r2,r3,zero
  805a98:	10005e26 	beq	r2,zero,805c14 <__sfvwrite_r+0x400>
  805a9c:	9821883a 	mov	r16,r19
  805aa0:	a4c0012e 	bgeu	r20,r19,805aa8 <__sfvwrite_r+0x294>
  805aa4:	a021883a 	mov	r16,r20
  805aa8:	91000017 	ldw	r4,0(r18)
  805aac:	90800417 	ldw	r2,16(r18)
  805ab0:	91800217 	ldw	r6,8(r18)
  805ab4:	91c00517 	ldw	r7,20(r18)
  805ab8:	1100022e 	bgeu	r2,r4,805ac4 <__sfvwrite_r+0x2b0>
  805abc:	31e3883a 	add	r17,r6,r7
  805ac0:	8c001616 	blt	r17,r16,805b1c <__sfvwrite_r+0x308>
  805ac4:	81c03816 	blt	r16,r7,805ba8 <__sfvwrite_r+0x394>
  805ac8:	90c00917 	ldw	r3,36(r18)
  805acc:	91400717 	ldw	r5,28(r18)
  805ad0:	e009883a 	mov	r4,fp
  805ad4:	b80d883a 	mov	r6,r23
  805ad8:	183ee83a 	callr	r3
  805adc:	1023883a 	mov	r17,r2
  805ae0:	00bfe10e 	bge	zero,r2,805a68 <__sfvwrite_r+0x254>
  805ae4:	a469c83a 	sub	r20,r20,r17
  805ae8:	a0001826 	beq	r20,zero,805b4c <__sfvwrite_r+0x338>
  805aec:	b0800217 	ldw	r2,8(r22)
  805af0:	1445c83a 	sub	r2,r2,r17
  805af4:	b0800215 	stw	r2,8(r22)
  805af8:	103f7226 	beq	r2,zero,8058c4 <__sfvwrite_r+0xb0>
  805afc:	9c67c83a 	sub	r19,r19,r17
  805b00:	bc6f883a 	add	r23,r23,r17
  805b04:	983fe21e 	bne	r19,zero,805a90 <__sfvwrite_r+0x27c>
  805b08:	adc00017 	ldw	r23,0(r21)
  805b0c:	acc00117 	ldw	r19,4(r21)
  805b10:	ad400204 	addi	r21,r21,8
  805b14:	d8000015 	stw	zero,0(sp)
  805b18:	003fdc06 	br	805a8c <__sfvwrite_r+0x278>
  805b1c:	b80b883a 	mov	r5,r23
  805b20:	880d883a 	mov	r6,r17
  805b24:	080694c0 	call	80694c <memmove>
  805b28:	90c00017 	ldw	r3,0(r18)
  805b2c:	e009883a 	mov	r4,fp
  805b30:	900b883a 	mov	r5,r18
  805b34:	1c47883a 	add	r3,r3,r17
  805b38:	90c00015 	stw	r3,0(r18)
  805b3c:	0804ee40 	call	804ee4 <_fflush_r>
  805b40:	103fc91e 	bne	r2,zero,805a68 <__sfvwrite_r+0x254>
  805b44:	a469c83a 	sub	r20,r20,r17
  805b48:	a03fe81e 	bne	r20,zero,805aec <__sfvwrite_r+0x2d8>
  805b4c:	e009883a 	mov	r4,fp
  805b50:	900b883a 	mov	r5,r18
  805b54:	0804ee40 	call	804ee4 <_fflush_r>
  805b58:	103fc31e 	bne	r2,zero,805a68 <__sfvwrite_r+0x254>
  805b5c:	d8000015 	stw	zero,0(sp)
  805b60:	003fe206 	br	805aec <__sfvwrite_r+0x2d8>
  805b64:	91000017 	ldw	r4,0(r18)
  805b68:	90800417 	ldw	r2,16(r18)
  805b6c:	1100022e 	bgeu	r2,r4,805b78 <__sfvwrite_r+0x364>
  805b70:	8023883a 	mov	r17,r16
  805b74:	85003136 	bltu	r16,r20,805c3c <__sfvwrite_r+0x428>
  805b78:	91c00517 	ldw	r7,20(r18)
  805b7c:	a1c01836 	bltu	r20,r7,805be0 <__sfvwrite_r+0x3cc>
  805b80:	90c00917 	ldw	r3,36(r18)
  805b84:	91400717 	ldw	r5,28(r18)
  805b88:	e009883a 	mov	r4,fp
  805b8c:	b80d883a 	mov	r6,r23
  805b90:	183ee83a 	callr	r3
  805b94:	1021883a 	mov	r16,r2
  805b98:	00bfb30e 	bge	zero,r2,805a68 <__sfvwrite_r+0x254>
  805b9c:	1023883a 	mov	r17,r2
  805ba0:	1027883a 	mov	r19,r2
  805ba4:	003f9b06 	br	805a14 <__sfvwrite_r+0x200>
  805ba8:	b80b883a 	mov	r5,r23
  805bac:	800d883a 	mov	r6,r16
  805bb0:	080694c0 	call	80694c <memmove>
  805bb4:	90c00217 	ldw	r3,8(r18)
  805bb8:	90800017 	ldw	r2,0(r18)
  805bbc:	8023883a 	mov	r17,r16
  805bc0:	1c07c83a 	sub	r3,r3,r16
  805bc4:	1405883a 	add	r2,r2,r16
  805bc8:	90c00215 	stw	r3,8(r18)
  805bcc:	90800015 	stw	r2,0(r18)
  805bd0:	003fc406 	br	805ae4 <__sfvwrite_r+0x2d0>
  805bd4:	a00d883a 	mov	r6,r20
  805bd8:	a021883a 	mov	r16,r20
  805bdc:	003f8106 	br	8059e4 <__sfvwrite_r+0x1d0>
  805be0:	b80b883a 	mov	r5,r23
  805be4:	a00d883a 	mov	r6,r20
  805be8:	080694c0 	call	80694c <memmove>
  805bec:	90c00217 	ldw	r3,8(r18)
  805bf0:	90800017 	ldw	r2,0(r18)
  805bf4:	a021883a 	mov	r16,r20
  805bf8:	1d07c83a 	sub	r3,r3,r20
  805bfc:	1505883a 	add	r2,r2,r20
  805c00:	a023883a 	mov	r17,r20
  805c04:	a027883a 	mov	r19,r20
  805c08:	90c00215 	stw	r3,8(r18)
  805c0c:	90800015 	stw	r2,0(r18)
  805c10:	003f8006 	br	805a14 <__sfvwrite_r+0x200>
  805c14:	b809883a 	mov	r4,r23
  805c18:	01400284 	movi	r5,10
  805c1c:	980d883a 	mov	r6,r19
  805c20:	08067c80 	call	8067c8 <memchr>
  805c24:	10001726 	beq	r2,zero,805c84 <__sfvwrite_r+0x470>
  805c28:	15c5c83a 	sub	r2,r2,r23
  805c2c:	15000044 	addi	r20,r2,1
  805c30:	00800044 	movi	r2,1
  805c34:	d8800015 	stw	r2,0(sp)
  805c38:	003f9806 	br	805a9c <__sfvwrite_r+0x288>
  805c3c:	b80b883a 	mov	r5,r23
  805c40:	800d883a 	mov	r6,r16
  805c44:	080694c0 	call	80694c <memmove>
  805c48:	90c00017 	ldw	r3,0(r18)
  805c4c:	e009883a 	mov	r4,fp
  805c50:	900b883a 	mov	r5,r18
  805c54:	1c07883a 	add	r3,r3,r16
  805c58:	90c00015 	stw	r3,0(r18)
  805c5c:	8027883a 	mov	r19,r16
  805c60:	0804ee40 	call	804ee4 <_fflush_r>
  805c64:	103f6b26 	beq	r2,zero,805a14 <__sfvwrite_r+0x200>
  805c68:	003f7f06 	br	805a68 <__sfvwrite_r+0x254>
  805c6c:	400b883a 	mov	r5,r8
  805c70:	e009883a 	mov	r4,fp
  805c74:	0807ca40 	call	807ca4 <_realloc_r>
  805c78:	103f7626 	beq	r2,zero,805a54 <__sfvwrite_r+0x240>
  805c7c:	1023883a 	mov	r17,r2
  805c80:	003f5006 	br	8059c4 <__sfvwrite_r+0x1b0>
  805c84:	00c00044 	movi	r3,1
  805c88:	9d000044 	addi	r20,r19,1
  805c8c:	d8c00015 	stw	r3,0(sp)
  805c90:	003f8206 	br	805a9c <__sfvwrite_r+0x288>
  805c94:	9080030b 	ldhu	r2,12(r18)
  805c98:	00c00244 	movi	r3,9
  805c9c:	013fffc4 	movi	r4,-1
  805ca0:	10801014 	ori	r2,r2,64
  805ca4:	9080030d 	sth	r2,12(r18)
  805ca8:	e0c00015 	stw	r3,0(fp)
  805cac:	003f0606 	br	8058c8 <__sfvwrite_r+0xb4>

00805cb0 <_fwalk_reent>:
  805cb0:	defff704 	addi	sp,sp,-36
  805cb4:	dcc00315 	stw	r19,12(sp)
  805cb8:	24c0b804 	addi	r19,r4,736
  805cbc:	dd800615 	stw	r22,24(sp)
  805cc0:	dd400515 	stw	r21,20(sp)
  805cc4:	dfc00815 	stw	ra,32(sp)
  805cc8:	ddc00715 	stw	r23,28(sp)
  805ccc:	dd000415 	stw	r20,16(sp)
  805cd0:	dc800215 	stw	r18,8(sp)
  805cd4:	dc400115 	stw	r17,4(sp)
  805cd8:	dc000015 	stw	r16,0(sp)
  805cdc:	202b883a 	mov	r21,r4
  805ce0:	282d883a 	mov	r22,r5
  805ce4:	080516c0 	call	80516c <__sfp_lock_acquire>
  805ce8:	98002126 	beq	r19,zero,805d70 <_fwalk_reent+0xc0>
  805cec:	002f883a 	mov	r23,zero
  805cf0:	9c800117 	ldw	r18,4(r19)
  805cf4:	9c000217 	ldw	r16,8(r19)
  805cf8:	90bfffc4 	addi	r2,r18,-1
  805cfc:	10000d16 	blt	r2,zero,805d34 <_fwalk_reent+0x84>
  805d00:	0023883a 	mov	r17,zero
  805d04:	053fffc4 	movi	r20,-1
  805d08:	8080030f 	ldh	r2,12(r16)
  805d0c:	8c400044 	addi	r17,r17,1
  805d10:	10000626 	beq	r2,zero,805d2c <_fwalk_reent+0x7c>
  805d14:	8080038f 	ldh	r2,14(r16)
  805d18:	800b883a 	mov	r5,r16
  805d1c:	a809883a 	mov	r4,r21
  805d20:	15000226 	beq	r2,r20,805d2c <_fwalk_reent+0x7c>
  805d24:	b03ee83a 	callr	r22
  805d28:	b8aeb03a 	or	r23,r23,r2
  805d2c:	84001704 	addi	r16,r16,92
  805d30:	947ff51e 	bne	r18,r17,805d08 <_fwalk_reent+0x58>
  805d34:	9cc00017 	ldw	r19,0(r19)
  805d38:	983fed1e 	bne	r19,zero,805cf0 <_fwalk_reent+0x40>
  805d3c:	08051700 	call	805170 <__sfp_lock_release>
  805d40:	b805883a 	mov	r2,r23
  805d44:	dfc00817 	ldw	ra,32(sp)
  805d48:	ddc00717 	ldw	r23,28(sp)
  805d4c:	dd800617 	ldw	r22,24(sp)
  805d50:	dd400517 	ldw	r21,20(sp)
  805d54:	dd000417 	ldw	r20,16(sp)
  805d58:	dcc00317 	ldw	r19,12(sp)
  805d5c:	dc800217 	ldw	r18,8(sp)
  805d60:	dc400117 	ldw	r17,4(sp)
  805d64:	dc000017 	ldw	r16,0(sp)
  805d68:	dec00904 	addi	sp,sp,36
  805d6c:	f800283a 	ret
  805d70:	002f883a 	mov	r23,zero
  805d74:	003ff106 	br	805d3c <_fwalk_reent+0x8c>

00805d78 <_fwalk>:
  805d78:	defff804 	addi	sp,sp,-32
  805d7c:	dcc00315 	stw	r19,12(sp)
  805d80:	24c0b804 	addi	r19,r4,736
  805d84:	dd400515 	stw	r21,20(sp)
  805d88:	dfc00715 	stw	ra,28(sp)
  805d8c:	dd800615 	stw	r22,24(sp)
  805d90:	dd000415 	stw	r20,16(sp)
  805d94:	dc800215 	stw	r18,8(sp)
  805d98:	dc400115 	stw	r17,4(sp)
  805d9c:	dc000015 	stw	r16,0(sp)
  805da0:	282b883a 	mov	r21,r5
  805da4:	080516c0 	call	80516c <__sfp_lock_acquire>
  805da8:	98001f26 	beq	r19,zero,805e28 <_fwalk+0xb0>
  805dac:	002d883a 	mov	r22,zero
  805db0:	9c800117 	ldw	r18,4(r19)
  805db4:	9c000217 	ldw	r16,8(r19)
  805db8:	90bfffc4 	addi	r2,r18,-1
  805dbc:	10000c16 	blt	r2,zero,805df0 <_fwalk+0x78>
  805dc0:	0023883a 	mov	r17,zero
  805dc4:	053fffc4 	movi	r20,-1
  805dc8:	8080030f 	ldh	r2,12(r16)
  805dcc:	8c400044 	addi	r17,r17,1
  805dd0:	10000526 	beq	r2,zero,805de8 <_fwalk+0x70>
  805dd4:	8080038f 	ldh	r2,14(r16)
  805dd8:	8009883a 	mov	r4,r16
  805ddc:	15000226 	beq	r2,r20,805de8 <_fwalk+0x70>
  805de0:	a83ee83a 	callr	r21
  805de4:	b0acb03a 	or	r22,r22,r2
  805de8:	84001704 	addi	r16,r16,92
  805dec:	947ff61e 	bne	r18,r17,805dc8 <_fwalk+0x50>
  805df0:	9cc00017 	ldw	r19,0(r19)
  805df4:	983fee1e 	bne	r19,zero,805db0 <_fwalk+0x38>
  805df8:	08051700 	call	805170 <__sfp_lock_release>
  805dfc:	b005883a 	mov	r2,r22
  805e00:	dfc00717 	ldw	ra,28(sp)
  805e04:	dd800617 	ldw	r22,24(sp)
  805e08:	dd400517 	ldw	r21,20(sp)
  805e0c:	dd000417 	ldw	r20,16(sp)
  805e10:	dcc00317 	ldw	r19,12(sp)
  805e14:	dc800217 	ldw	r18,8(sp)
  805e18:	dc400117 	ldw	r17,4(sp)
  805e1c:	dc000017 	ldw	r16,0(sp)
  805e20:	dec00804 	addi	sp,sp,32
  805e24:	f800283a 	ret
  805e28:	002d883a 	mov	r22,zero
  805e2c:	003ff206 	br	805df8 <_fwalk+0x80>

00805e30 <__locale_charset>:
  805e30:	d0a00317 	ldw	r2,-32756(gp)
  805e34:	f800283a 	ret

00805e38 <_localeconv_r>:
  805e38:	00802074 	movhi	r2,129
  805e3c:	10bef004 	addi	r2,r2,-1088
  805e40:	f800283a 	ret

00805e44 <localeconv>:
  805e44:	00802074 	movhi	r2,129
  805e48:	10870f04 	addi	r2,r2,7228
  805e4c:	11000017 	ldw	r4,0(r2)
  805e50:	0805e381 	jmpi	805e38 <_localeconv_r>

00805e54 <_setlocale_r>:
  805e54:	defffc04 	addi	sp,sp,-16
  805e58:	00c02074 	movhi	r3,129
  805e5c:	18fec804 	addi	r3,r3,-1248
  805e60:	dc800215 	stw	r18,8(sp)
  805e64:	dc400115 	stw	r17,4(sp)
  805e68:	dc000015 	stw	r16,0(sp)
  805e6c:	2023883a 	mov	r17,r4
  805e70:	2825883a 	mov	r18,r5
  805e74:	dfc00315 	stw	ra,12(sp)
  805e78:	3021883a 	mov	r16,r6
  805e7c:	3009883a 	mov	r4,r6
  805e80:	180b883a 	mov	r5,r3
  805e84:	30000926 	beq	r6,zero,805eac <_setlocale_r+0x58>
  805e88:	08084c40 	call	8084c4 <strcmp>
  805e8c:	8009883a 	mov	r4,r16
  805e90:	01402074 	movhi	r5,129
  805e94:	297ed804 	addi	r5,r5,-1184
  805e98:	10000b1e 	bne	r2,zero,805ec8 <_setlocale_r+0x74>
  805e9c:	8c000d15 	stw	r16,52(r17)
  805ea0:	8c800c15 	stw	r18,48(r17)
  805ea4:	00c02074 	movhi	r3,129
  805ea8:	18fec804 	addi	r3,r3,-1248
  805eac:	1805883a 	mov	r2,r3
  805eb0:	dfc00317 	ldw	ra,12(sp)
  805eb4:	dc800217 	ldw	r18,8(sp)
  805eb8:	dc400117 	ldw	r17,4(sp)
  805ebc:	dc000017 	ldw	r16,0(sp)
  805ec0:	dec00404 	addi	sp,sp,16
  805ec4:	f800283a 	ret
  805ec8:	08084c40 	call	8084c4 <strcmp>
  805ecc:	0007883a 	mov	r3,zero
  805ed0:	103ff226 	beq	r2,zero,805e9c <_setlocale_r+0x48>
  805ed4:	003ff506 	br	805eac <_setlocale_r+0x58>

00805ed8 <setlocale>:
  805ed8:	01802074 	movhi	r6,129
  805edc:	31870f04 	addi	r6,r6,7228
  805ee0:	2007883a 	mov	r3,r4
  805ee4:	31000017 	ldw	r4,0(r6)
  805ee8:	280d883a 	mov	r6,r5
  805eec:	180b883a 	mov	r5,r3
  805ef0:	0805e541 	jmpi	805e54 <_setlocale_r>

00805ef4 <__smakebuf_r>:
  805ef4:	2880030b 	ldhu	r2,12(r5)
  805ef8:	deffed04 	addi	sp,sp,-76
  805efc:	dc401015 	stw	r17,64(sp)
  805f00:	1080008c 	andi	r2,r2,2
  805f04:	dc000f15 	stw	r16,60(sp)
  805f08:	dfc01215 	stw	ra,72(sp)
  805f0c:	dc801115 	stw	r18,68(sp)
  805f10:	2821883a 	mov	r16,r5
  805f14:	2023883a 	mov	r17,r4
  805f18:	10000b26 	beq	r2,zero,805f48 <__smakebuf_r+0x54>
  805f1c:	28c010c4 	addi	r3,r5,67
  805f20:	00800044 	movi	r2,1
  805f24:	28800515 	stw	r2,20(r5)
  805f28:	28c00415 	stw	r3,16(r5)
  805f2c:	28c00015 	stw	r3,0(r5)
  805f30:	dfc01217 	ldw	ra,72(sp)
  805f34:	dc801117 	ldw	r18,68(sp)
  805f38:	dc401017 	ldw	r17,64(sp)
  805f3c:	dc000f17 	ldw	r16,60(sp)
  805f40:	dec01304 	addi	sp,sp,76
  805f44:	f800283a 	ret
  805f48:	2940038f 	ldh	r5,14(r5)
  805f4c:	28002116 	blt	r5,zero,805fd4 <__smakebuf_r+0xe0>
  805f50:	d80d883a 	mov	r6,sp
  805f54:	0808a000 	call	808a00 <_fstat_r>
  805f58:	10001e16 	blt	r2,zero,805fd4 <__smakebuf_r+0xe0>
  805f5c:	d8800117 	ldw	r2,4(sp)
  805f60:	00e00014 	movui	r3,32768
  805f64:	113c000c 	andi	r4,r2,61440
  805f68:	20c03126 	beq	r4,r3,806030 <__smakebuf_r+0x13c>
  805f6c:	8080030b 	ldhu	r2,12(r16)
  805f70:	00c80004 	movi	r3,8192
  805f74:	10820014 	ori	r2,r2,2048
  805f78:	8080030d 	sth	r2,12(r16)
  805f7c:	20c01e26 	beq	r4,r3,805ff8 <__smakebuf_r+0x104>
  805f80:	04810004 	movi	r18,1024
  805f84:	8809883a 	mov	r4,r17
  805f88:	900b883a 	mov	r5,r18
  805f8c:	08060880 	call	806088 <_malloc_r>
  805f90:	1009883a 	mov	r4,r2
  805f94:	10003126 	beq	r2,zero,80605c <__smakebuf_r+0x168>
  805f98:	80c0030b 	ldhu	r3,12(r16)
  805f9c:	00802034 	movhi	r2,128
  805fa0:	10949804 	addi	r2,r2,21088
  805fa4:	88800f15 	stw	r2,60(r17)
  805fa8:	18c02014 	ori	r3,r3,128
  805fac:	84800515 	stw	r18,20(r16)
  805fb0:	80c0030d 	sth	r3,12(r16)
  805fb4:	81000415 	stw	r4,16(r16)
  805fb8:	81000015 	stw	r4,0(r16)
  805fbc:	dfc01217 	ldw	ra,72(sp)
  805fc0:	dc801117 	ldw	r18,68(sp)
  805fc4:	dc401017 	ldw	r17,64(sp)
  805fc8:	dc000f17 	ldw	r16,60(sp)
  805fcc:	dec01304 	addi	sp,sp,76
  805fd0:	f800283a 	ret
  805fd4:	80c0030b 	ldhu	r3,12(r16)
  805fd8:	1880200c 	andi	r2,r3,128
  805fdc:	10000426 	beq	r2,zero,805ff0 <__smakebuf_r+0xfc>
  805fe0:	04801004 	movi	r18,64
  805fe4:	18820014 	ori	r2,r3,2048
  805fe8:	8080030d 	sth	r2,12(r16)
  805fec:	003fe506 	br	805f84 <__smakebuf_r+0x90>
  805ff0:	04810004 	movi	r18,1024
  805ff4:	003ffb06 	br	805fe4 <__smakebuf_r+0xf0>
  805ff8:	8140038f 	ldh	r5,14(r16)
  805ffc:	8809883a 	mov	r4,r17
  806000:	0808a740 	call	808a74 <_isatty_r>
  806004:	103fde26 	beq	r2,zero,805f80 <__smakebuf_r+0x8c>
  806008:	8080030b 	ldhu	r2,12(r16)
  80600c:	80c010c4 	addi	r3,r16,67
  806010:	04810004 	movi	r18,1024
  806014:	10800054 	ori	r2,r2,1
  806018:	8080030d 	sth	r2,12(r16)
  80601c:	00800044 	movi	r2,1
  806020:	80c00415 	stw	r3,16(r16)
  806024:	80800515 	stw	r2,20(r16)
  806028:	80c00015 	stw	r3,0(r16)
  80602c:	003fd506 	br	805f84 <__smakebuf_r+0x90>
  806030:	80c00a17 	ldw	r3,40(r16)
  806034:	00802074 	movhi	r2,129
  806038:	10a0e004 	addi	r2,r2,-31872
  80603c:	18bfcb1e 	bne	r3,r2,805f6c <__smakebuf_r+0x78>
  806040:	8080030b 	ldhu	r2,12(r16)
  806044:	00c10004 	movi	r3,1024
  806048:	1825883a 	mov	r18,r3
  80604c:	10c4b03a 	or	r2,r2,r3
  806050:	8080030d 	sth	r2,12(r16)
  806054:	80c01315 	stw	r3,76(r16)
  806058:	003fca06 	br	805f84 <__smakebuf_r+0x90>
  80605c:	8100030b 	ldhu	r4,12(r16)
  806060:	2080800c 	andi	r2,r4,512
  806064:	103fb21e 	bne	r2,zero,805f30 <__smakebuf_r+0x3c>
  806068:	80c010c4 	addi	r3,r16,67
  80606c:	21000094 	ori	r4,r4,2
  806070:	00800044 	movi	r2,1
  806074:	80800515 	stw	r2,20(r16)
  806078:	8100030d 	sth	r4,12(r16)
  80607c:	80c00415 	stw	r3,16(r16)
  806080:	80c00015 	stw	r3,0(r16)
  806084:	003faa06 	br	805f30 <__smakebuf_r+0x3c>

00806088 <_malloc_r>:
  806088:	defff604 	addi	sp,sp,-40
  80608c:	28c002c4 	addi	r3,r5,11
  806090:	00800584 	movi	r2,22
  806094:	dc800215 	stw	r18,8(sp)
  806098:	dfc00915 	stw	ra,36(sp)
  80609c:	df000815 	stw	fp,32(sp)
  8060a0:	ddc00715 	stw	r23,28(sp)
  8060a4:	dd800615 	stw	r22,24(sp)
  8060a8:	dd400515 	stw	r21,20(sp)
  8060ac:	dd000415 	stw	r20,16(sp)
  8060b0:	dcc00315 	stw	r19,12(sp)
  8060b4:	dc400115 	stw	r17,4(sp)
  8060b8:	dc000015 	stw	r16,0(sp)
  8060bc:	2025883a 	mov	r18,r4
  8060c0:	10c01236 	bltu	r2,r3,80610c <_malloc_r+0x84>
  8060c4:	04400404 	movi	r17,16
  8060c8:	8940142e 	bgeu	r17,r5,80611c <_malloc_r+0x94>
  8060cc:	00800304 	movi	r2,12
  8060d0:	0007883a 	mov	r3,zero
  8060d4:	90800015 	stw	r2,0(r18)
  8060d8:	1805883a 	mov	r2,r3
  8060dc:	dfc00917 	ldw	ra,36(sp)
  8060e0:	df000817 	ldw	fp,32(sp)
  8060e4:	ddc00717 	ldw	r23,28(sp)
  8060e8:	dd800617 	ldw	r22,24(sp)
  8060ec:	dd400517 	ldw	r21,20(sp)
  8060f0:	dd000417 	ldw	r20,16(sp)
  8060f4:	dcc00317 	ldw	r19,12(sp)
  8060f8:	dc800217 	ldw	r18,8(sp)
  8060fc:	dc400117 	ldw	r17,4(sp)
  806100:	dc000017 	ldw	r16,0(sp)
  806104:	dec00a04 	addi	sp,sp,40
  806108:	f800283a 	ret
  80610c:	00bffe04 	movi	r2,-8
  806110:	18a2703a 	and	r17,r3,r2
  806114:	883fed16 	blt	r17,zero,8060cc <_malloc_r+0x44>
  806118:	897fec36 	bltu	r17,r5,8060cc <_malloc_r+0x44>
  80611c:	9009883a 	mov	r4,r18
  806120:	080b8ec0 	call	80b8ec <__malloc_lock>
  806124:	00807dc4 	movi	r2,503
  806128:	14402b2e 	bgeu	r2,r17,8061d8 <_malloc_r+0x150>
  80612c:	8806d27a 	srli	r3,r17,9
  806130:	18003f1e 	bne	r3,zero,806230 <_malloc_r+0x1a8>
  806134:	880cd0fa 	srli	r6,r17,3
  806138:	300490fa 	slli	r2,r6,3
  80613c:	02c02074 	movhi	r11,129
  806140:	5ac14d04 	addi	r11,r11,1332
  806144:	12cb883a 	add	r5,r2,r11
  806148:	2c000317 	ldw	r16,12(r5)
  80614c:	580f883a 	mov	r7,r11
  806150:	2c00041e 	bne	r5,r16,806164 <_malloc_r+0xdc>
  806154:	00000a06 	br	806180 <_malloc_r+0xf8>
  806158:	1800860e 	bge	r3,zero,806374 <_malloc_r+0x2ec>
  80615c:	84000317 	ldw	r16,12(r16)
  806160:	2c000726 	beq	r5,r16,806180 <_malloc_r+0xf8>
  806164:	80800117 	ldw	r2,4(r16)
  806168:	00ffff04 	movi	r3,-4
  80616c:	10c8703a 	and	r4,r2,r3
  806170:	2447c83a 	sub	r3,r4,r17
  806174:	008003c4 	movi	r2,15
  806178:	10fff70e 	bge	r2,r3,806158 <_malloc_r+0xd0>
  80617c:	31bfffc4 	addi	r6,r6,-1
  806180:	32400044 	addi	r9,r6,1
  806184:	02802074 	movhi	r10,129
  806188:	52814f04 	addi	r10,r10,1340
  80618c:	54000217 	ldw	r16,8(r10)
  806190:	8280a026 	beq	r16,r10,806414 <_malloc_r+0x38c>
  806194:	80800117 	ldw	r2,4(r16)
  806198:	00ffff04 	movi	r3,-4
  80619c:	10ca703a 	and	r5,r2,r3
  8061a0:	2c4dc83a 	sub	r6,r5,r17
  8061a4:	008003c4 	movi	r2,15
  8061a8:	11808316 	blt	r2,r6,8063b8 <_malloc_r+0x330>
  8061ac:	52800315 	stw	r10,12(r10)
  8061b0:	52800215 	stw	r10,8(r10)
  8061b4:	30002916 	blt	r6,zero,80625c <_malloc_r+0x1d4>
  8061b8:	8147883a 	add	r3,r16,r5
  8061bc:	18800117 	ldw	r2,4(r3)
  8061c0:	9009883a 	mov	r4,r18
  8061c4:	10800054 	ori	r2,r2,1
  8061c8:	18800115 	stw	r2,4(r3)
  8061cc:	080b90c0 	call	80b90c <__malloc_unlock>
  8061d0:	80c00204 	addi	r3,r16,8
  8061d4:	003fc006 	br	8060d8 <_malloc_r+0x50>
  8061d8:	02c02074 	movhi	r11,129
  8061dc:	5ac14d04 	addi	r11,r11,1332
  8061e0:	8ac5883a 	add	r2,r17,r11
  8061e4:	14000317 	ldw	r16,12(r2)
  8061e8:	580f883a 	mov	r7,r11
  8061ec:	8806d0fa 	srli	r3,r17,3
  8061f0:	14006c26 	beq	r2,r16,8063a4 <_malloc_r+0x31c>
  8061f4:	80c00117 	ldw	r3,4(r16)
  8061f8:	00bfff04 	movi	r2,-4
  8061fc:	81800317 	ldw	r6,12(r16)
  806200:	1886703a 	and	r3,r3,r2
  806204:	80c7883a 	add	r3,r16,r3
  806208:	18800117 	ldw	r2,4(r3)
  80620c:	81400217 	ldw	r5,8(r16)
  806210:	9009883a 	mov	r4,r18
  806214:	10800054 	ori	r2,r2,1
  806218:	18800115 	stw	r2,4(r3)
  80621c:	31400215 	stw	r5,8(r6)
  806220:	29800315 	stw	r6,12(r5)
  806224:	080b90c0 	call	80b90c <__malloc_unlock>
  806228:	80c00204 	addi	r3,r16,8
  80622c:	003faa06 	br	8060d8 <_malloc_r+0x50>
  806230:	00800104 	movi	r2,4
  806234:	10c0052e 	bgeu	r2,r3,80624c <_malloc_r+0x1c4>
  806238:	00800504 	movi	r2,20
  80623c:	10c07836 	bltu	r2,r3,806420 <_malloc_r+0x398>
  806240:	198016c4 	addi	r6,r3,91
  806244:	300490fa 	slli	r2,r6,3
  806248:	003fbc06 	br	80613c <_malloc_r+0xb4>
  80624c:	8804d1ba 	srli	r2,r17,6
  806250:	11800e04 	addi	r6,r2,56
  806254:	300490fa 	slli	r2,r6,3
  806258:	003fb806 	br	80613c <_malloc_r+0xb4>
  80625c:	00807fc4 	movi	r2,511
  806260:	1140bb36 	bltu	r2,r5,806550 <_malloc_r+0x4c8>
  806264:	2806d0fa 	srli	r3,r5,3
  806268:	573ffe04 	addi	fp,r10,-8
  80626c:	00800044 	movi	r2,1
  806270:	180890fa 	slli	r4,r3,3
  806274:	1807d0ba 	srai	r3,r3,2
  806278:	e1c00117 	ldw	r7,4(fp)
  80627c:	5909883a 	add	r4,r11,r4
  806280:	21400217 	ldw	r5,8(r4)
  806284:	10c4983a 	sll	r2,r2,r3
  806288:	81000315 	stw	r4,12(r16)
  80628c:	81400215 	stw	r5,8(r16)
  806290:	388eb03a 	or	r7,r7,r2
  806294:	2c000315 	stw	r16,12(r5)
  806298:	24000215 	stw	r16,8(r4)
  80629c:	e1c00115 	stw	r7,4(fp)
  8062a0:	4807883a 	mov	r3,r9
  8062a4:	4800cd16 	blt	r9,zero,8065dc <_malloc_r+0x554>
  8062a8:	1807d0ba 	srai	r3,r3,2
  8062ac:	00800044 	movi	r2,1
  8062b0:	10c8983a 	sll	r4,r2,r3
  8062b4:	39004436 	bltu	r7,r4,8063c8 <_malloc_r+0x340>
  8062b8:	21c4703a 	and	r2,r4,r7
  8062bc:	10000a1e 	bne	r2,zero,8062e8 <_malloc_r+0x260>
  8062c0:	2109883a 	add	r4,r4,r4
  8062c4:	00bfff04 	movi	r2,-4
  8062c8:	4884703a 	and	r2,r9,r2
  8062cc:	3906703a 	and	r3,r7,r4
  8062d0:	12400104 	addi	r9,r2,4
  8062d4:	1800041e 	bne	r3,zero,8062e8 <_malloc_r+0x260>
  8062d8:	2109883a 	add	r4,r4,r4
  8062dc:	3904703a 	and	r2,r7,r4
  8062e0:	4a400104 	addi	r9,r9,4
  8062e4:	103ffc26 	beq	r2,zero,8062d8 <_malloc_r+0x250>
  8062e8:	480490fa 	slli	r2,r9,3
  8062ec:	4819883a 	mov	r12,r9
  8062f0:	023fff04 	movi	r8,-4
  8062f4:	589b883a 	add	r13,r11,r2
  8062f8:	6807883a 	mov	r3,r13
  8062fc:	014003c4 	movi	r5,15
  806300:	1c000317 	ldw	r16,12(r3)
  806304:	1c00041e 	bne	r3,r16,806318 <_malloc_r+0x290>
  806308:	0000a706 	br	8065a8 <_malloc_r+0x520>
  80630c:	3000ab0e 	bge	r6,zero,8065bc <_malloc_r+0x534>
  806310:	84000317 	ldw	r16,12(r16)
  806314:	1c00a426 	beq	r3,r16,8065a8 <_malloc_r+0x520>
  806318:	80800117 	ldw	r2,4(r16)
  80631c:	1204703a 	and	r2,r2,r8
  806320:	144dc83a 	sub	r6,r2,r17
  806324:	29bff90e 	bge	r5,r6,80630c <_malloc_r+0x284>
  806328:	81000317 	ldw	r4,12(r16)
  80632c:	80c00217 	ldw	r3,8(r16)
  806330:	89400054 	ori	r5,r17,1
  806334:	8445883a 	add	r2,r16,r17
  806338:	20c00215 	stw	r3,8(r4)
  80633c:	19000315 	stw	r4,12(r3)
  806340:	81400115 	stw	r5,4(r16)
  806344:	1187883a 	add	r3,r2,r6
  806348:	31000054 	ori	r4,r6,1
  80634c:	50800315 	stw	r2,12(r10)
  806350:	50800215 	stw	r2,8(r10)
  806354:	19800015 	stw	r6,0(r3)
  806358:	11000115 	stw	r4,4(r2)
  80635c:	12800215 	stw	r10,8(r2)
  806360:	12800315 	stw	r10,12(r2)
  806364:	9009883a 	mov	r4,r18
  806368:	080b90c0 	call	80b90c <__malloc_unlock>
  80636c:	80c00204 	addi	r3,r16,8
  806370:	003f5906 	br	8060d8 <_malloc_r+0x50>
  806374:	8109883a 	add	r4,r16,r4
  806378:	20800117 	ldw	r2,4(r4)
  80637c:	80c00217 	ldw	r3,8(r16)
  806380:	81400317 	ldw	r5,12(r16)
  806384:	10800054 	ori	r2,r2,1
  806388:	20800115 	stw	r2,4(r4)
  80638c:	28c00215 	stw	r3,8(r5)
  806390:	19400315 	stw	r5,12(r3)
  806394:	9009883a 	mov	r4,r18
  806398:	080b90c0 	call	80b90c <__malloc_unlock>
  80639c:	80c00204 	addi	r3,r16,8
  8063a0:	003f4d06 	br	8060d8 <_malloc_r+0x50>
  8063a4:	80800204 	addi	r2,r16,8
  8063a8:	14000317 	ldw	r16,12(r2)
  8063ac:	143f911e 	bne	r2,r16,8061f4 <_malloc_r+0x16c>
  8063b0:	1a400084 	addi	r9,r3,2
  8063b4:	003f7306 	br	806184 <_malloc_r+0xfc>
  8063b8:	88c00054 	ori	r3,r17,1
  8063bc:	8445883a 	add	r2,r16,r17
  8063c0:	80c00115 	stw	r3,4(r16)
  8063c4:	003fdf06 	br	806344 <_malloc_r+0x2bc>
  8063c8:	e4000217 	ldw	r16,8(fp)
  8063cc:	00bfff04 	movi	r2,-4
  8063d0:	80c00117 	ldw	r3,4(r16)
  8063d4:	802d883a 	mov	r22,r16
  8063d8:	18aa703a 	and	r21,r3,r2
  8063dc:	ac401636 	bltu	r21,r17,806438 <_malloc_r+0x3b0>
  8063e0:	ac49c83a 	sub	r4,r21,r17
  8063e4:	008003c4 	movi	r2,15
  8063e8:	1100130e 	bge	r2,r4,806438 <_malloc_r+0x3b0>
  8063ec:	88800054 	ori	r2,r17,1
  8063f0:	8447883a 	add	r3,r16,r17
  8063f4:	80800115 	stw	r2,4(r16)
  8063f8:	20800054 	ori	r2,r4,1
  8063fc:	18800115 	stw	r2,4(r3)
  806400:	e0c00215 	stw	r3,8(fp)
  806404:	9009883a 	mov	r4,r18
  806408:	080b90c0 	call	80b90c <__malloc_unlock>
  80640c:	80c00204 	addi	r3,r16,8
  806410:	003f3106 	br	8060d8 <_malloc_r+0x50>
  806414:	39c00117 	ldw	r7,4(r7)
  806418:	573ffe04 	addi	fp,r10,-8
  80641c:	003fa006 	br	8062a0 <_malloc_r+0x218>
  806420:	00801504 	movi	r2,84
  806424:	10c06736 	bltu	r2,r3,8065c4 <_malloc_r+0x53c>
  806428:	8804d33a 	srli	r2,r17,12
  80642c:	11801b84 	addi	r6,r2,110
  806430:	300490fa 	slli	r2,r6,3
  806434:	003f4106 	br	80613c <_malloc_r+0xb4>
  806438:	d0a77817 	ldw	r2,-25120(gp)
  80643c:	d0e00517 	ldw	r3,-32748(gp)
  806440:	053fffc4 	movi	r20,-1
  806444:	10800404 	addi	r2,r2,16
  806448:	88a7883a 	add	r19,r17,r2
  80644c:	1d000326 	beq	r3,r20,80645c <_malloc_r+0x3d4>
  806450:	98c3ffc4 	addi	r3,r19,4095
  806454:	00bc0004 	movi	r2,-4096
  806458:	18a6703a 	and	r19,r3,r2
  80645c:	9009883a 	mov	r4,r18
  806460:	980b883a 	mov	r5,r19
  806464:	08083080 	call	808308 <_sbrk_r>
  806468:	1009883a 	mov	r4,r2
  80646c:	15000426 	beq	r2,r20,806480 <_malloc_r+0x3f8>
  806470:	854b883a 	add	r5,r16,r21
  806474:	1029883a 	mov	r20,r2
  806478:	11405a2e 	bgeu	r2,r5,8065e4 <_malloc_r+0x55c>
  80647c:	87000c26 	beq	r16,fp,8064b0 <_malloc_r+0x428>
  806480:	e4000217 	ldw	r16,8(fp)
  806484:	80c00117 	ldw	r3,4(r16)
  806488:	00bfff04 	movi	r2,-4
  80648c:	1884703a 	and	r2,r3,r2
  806490:	14400336 	bltu	r2,r17,8064a0 <_malloc_r+0x418>
  806494:	1449c83a 	sub	r4,r2,r17
  806498:	008003c4 	movi	r2,15
  80649c:	113fd316 	blt	r2,r4,8063ec <_malloc_r+0x364>
  8064a0:	9009883a 	mov	r4,r18
  8064a4:	080b90c0 	call	80b90c <__malloc_unlock>
  8064a8:	0007883a 	mov	r3,zero
  8064ac:	003f0a06 	br	8060d8 <_malloc_r+0x50>
  8064b0:	05c02074 	movhi	r23,129
  8064b4:	bdce9004 	addi	r23,r23,14912
  8064b8:	b8800017 	ldw	r2,0(r23)
  8064bc:	988d883a 	add	r6,r19,r2
  8064c0:	b9800015 	stw	r6,0(r23)
  8064c4:	d0e00517 	ldw	r3,-32748(gp)
  8064c8:	00bfffc4 	movi	r2,-1
  8064cc:	18808e26 	beq	r3,r2,806708 <_malloc_r+0x680>
  8064d0:	2145c83a 	sub	r2,r4,r5
  8064d4:	3085883a 	add	r2,r6,r2
  8064d8:	b8800015 	stw	r2,0(r23)
  8064dc:	20c001cc 	andi	r3,r4,7
  8064e0:	18005f1e 	bne	r3,zero,806660 <_malloc_r+0x5d8>
  8064e4:	000b883a 	mov	r5,zero
  8064e8:	a4c5883a 	add	r2,r20,r19
  8064ec:	1083ffcc 	andi	r2,r2,4095
  8064f0:	00c40004 	movi	r3,4096
  8064f4:	1887c83a 	sub	r3,r3,r2
  8064f8:	28e7883a 	add	r19,r5,r3
  8064fc:	9009883a 	mov	r4,r18
  806500:	980b883a 	mov	r5,r19
  806504:	08083080 	call	808308 <_sbrk_r>
  806508:	1007883a 	mov	r3,r2
  80650c:	00bfffc4 	movi	r2,-1
  806510:	18807a26 	beq	r3,r2,8066fc <_malloc_r+0x674>
  806514:	1d05c83a 	sub	r2,r3,r20
  806518:	9885883a 	add	r2,r19,r2
  80651c:	10c00054 	ori	r3,r2,1
  806520:	b8800017 	ldw	r2,0(r23)
  806524:	a021883a 	mov	r16,r20
  806528:	a0c00115 	stw	r3,4(r20)
  80652c:	9885883a 	add	r2,r19,r2
  806530:	b8800015 	stw	r2,0(r23)
  806534:	e5000215 	stw	r20,8(fp)
  806538:	b7003626 	beq	r22,fp,806614 <_malloc_r+0x58c>
  80653c:	018003c4 	movi	r6,15
  806540:	35404b36 	bltu	r6,r21,806670 <_malloc_r+0x5e8>
  806544:	00800044 	movi	r2,1
  806548:	a0800115 	stw	r2,4(r20)
  80654c:	003fcd06 	br	806484 <_malloc_r+0x3fc>
  806550:	2808d27a 	srli	r4,r5,9
  806554:	2000371e 	bne	r4,zero,806634 <_malloc_r+0x5ac>
  806558:	2808d0fa 	srli	r4,r5,3
  80655c:	200690fa 	slli	r3,r4,3
  806560:	1ad1883a 	add	r8,r3,r11
  806564:	41800217 	ldw	r6,8(r8)
  806568:	41805b26 	beq	r8,r6,8066d8 <_malloc_r+0x650>
  80656c:	30800117 	ldw	r2,4(r6)
  806570:	00ffff04 	movi	r3,-4
  806574:	10c4703a 	and	r2,r2,r3
  806578:	2880022e 	bgeu	r5,r2,806584 <_malloc_r+0x4fc>
  80657c:	31800217 	ldw	r6,8(r6)
  806580:	41bffa1e 	bne	r8,r6,80656c <_malloc_r+0x4e4>
  806584:	32000317 	ldw	r8,12(r6)
  806588:	39c00117 	ldw	r7,4(r7)
  80658c:	82000315 	stw	r8,12(r16)
  806590:	81800215 	stw	r6,8(r16)
  806594:	07002074 	movhi	fp,129
  806598:	e7014d04 	addi	fp,fp,1332
  80659c:	34000315 	stw	r16,12(r6)
  8065a0:	44000215 	stw	r16,8(r8)
  8065a4:	003f3e06 	br	8062a0 <_malloc_r+0x218>
  8065a8:	63000044 	addi	r12,r12,1
  8065ac:	608000cc 	andi	r2,r12,3
  8065b0:	10005d26 	beq	r2,zero,806728 <_malloc_r+0x6a0>
  8065b4:	18c00204 	addi	r3,r3,8
  8065b8:	003f5106 	br	806300 <_malloc_r+0x278>
  8065bc:	8089883a 	add	r4,r16,r2
  8065c0:	003f6d06 	br	806378 <_malloc_r+0x2f0>
  8065c4:	00805504 	movi	r2,340
  8065c8:	10c02036 	bltu	r2,r3,80664c <_malloc_r+0x5c4>
  8065cc:	8804d3fa 	srli	r2,r17,15
  8065d0:	11801dc4 	addi	r6,r2,119
  8065d4:	300490fa 	slli	r2,r6,3
  8065d8:	003ed806 	br	80613c <_malloc_r+0xb4>
  8065dc:	48c000c4 	addi	r3,r9,3
  8065e0:	003f3106 	br	8062a8 <_malloc_r+0x220>
  8065e4:	05c02074 	movhi	r23,129
  8065e8:	bdce9004 	addi	r23,r23,14912
  8065ec:	b8800017 	ldw	r2,0(r23)
  8065f0:	988d883a 	add	r6,r19,r2
  8065f4:	b9800015 	stw	r6,0(r23)
  8065f8:	293fb21e 	bne	r5,r4,8064c4 <_malloc_r+0x43c>
  8065fc:	2083ffcc 	andi	r2,r4,4095
  806600:	103fb01e 	bne	r2,zero,8064c4 <_malloc_r+0x43c>
  806604:	e4000217 	ldw	r16,8(fp)
  806608:	9d45883a 	add	r2,r19,r21
  80660c:	10800054 	ori	r2,r2,1
  806610:	80800115 	stw	r2,4(r16)
  806614:	b8c00017 	ldw	r3,0(r23)
  806618:	d0a77917 	ldw	r2,-25116(gp)
  80661c:	10c0012e 	bgeu	r2,r3,806624 <_malloc_r+0x59c>
  806620:	d0e77915 	stw	r3,-25116(gp)
  806624:	d0a77a17 	ldw	r2,-25112(gp)
  806628:	10ff962e 	bgeu	r2,r3,806484 <_malloc_r+0x3fc>
  80662c:	d0e77a15 	stw	r3,-25112(gp)
  806630:	003f9406 	br	806484 <_malloc_r+0x3fc>
  806634:	00800104 	movi	r2,4
  806638:	11001e36 	bltu	r2,r4,8066b4 <_malloc_r+0x62c>
  80663c:	2804d1ba 	srli	r2,r5,6
  806640:	11000e04 	addi	r4,r2,56
  806644:	200690fa 	slli	r3,r4,3
  806648:	003fc506 	br	806560 <_malloc_r+0x4d8>
  80664c:	00815504 	movi	r2,1364
  806650:	10c01d2e 	bgeu	r2,r3,8066c8 <_malloc_r+0x640>
  806654:	01801f84 	movi	r6,126
  806658:	0080fc04 	movi	r2,1008
  80665c:	003eb706 	br	80613c <_malloc_r+0xb4>
  806660:	00800204 	movi	r2,8
  806664:	10cbc83a 	sub	r5,r2,r3
  806668:	2169883a 	add	r20,r4,r5
  80666c:	003f9e06 	br	8064e8 <_malloc_r+0x460>
  806670:	00bffe04 	movi	r2,-8
  806674:	a93ffd04 	addi	r4,r21,-12
  806678:	2088703a 	and	r4,r4,r2
  80667c:	b10b883a 	add	r5,r22,r4
  806680:	00c00144 	movi	r3,5
  806684:	28c00215 	stw	r3,8(r5)
  806688:	28c00115 	stw	r3,4(r5)
  80668c:	b0800117 	ldw	r2,4(r22)
  806690:	1080004c 	andi	r2,r2,1
  806694:	2084b03a 	or	r2,r4,r2
  806698:	b0800115 	stw	r2,4(r22)
  80669c:	313fdd2e 	bgeu	r6,r4,806614 <_malloc_r+0x58c>
  8066a0:	b1400204 	addi	r5,r22,8
  8066a4:	9009883a 	mov	r4,r18
  8066a8:	08055000 	call	805500 <_free_r>
  8066ac:	e4000217 	ldw	r16,8(fp)
  8066b0:	003fd806 	br	806614 <_malloc_r+0x58c>
  8066b4:	00800504 	movi	r2,20
  8066b8:	11001536 	bltu	r2,r4,806710 <_malloc_r+0x688>
  8066bc:	210016c4 	addi	r4,r4,91
  8066c0:	200690fa 	slli	r3,r4,3
  8066c4:	003fa606 	br	806560 <_malloc_r+0x4d8>
  8066c8:	8804d4ba 	srli	r2,r17,18
  8066cc:	11801f04 	addi	r6,r2,124
  8066d0:	300490fa 	slli	r2,r6,3
  8066d4:	003e9906 	br	80613c <_malloc_r+0xb4>
  8066d8:	2009d0ba 	srai	r4,r4,2
  8066dc:	01402074 	movhi	r5,129
  8066e0:	29414d04 	addi	r5,r5,1332
  8066e4:	00c00044 	movi	r3,1
  8066e8:	28800117 	ldw	r2,4(r5)
  8066ec:	1906983a 	sll	r3,r3,r4
  8066f0:	10c4b03a 	or	r2,r2,r3
  8066f4:	28800115 	stw	r2,4(r5)
  8066f8:	003fa306 	br	806588 <_malloc_r+0x500>
  8066fc:	0027883a 	mov	r19,zero
  806700:	00c00044 	movi	r3,1
  806704:	003f8606 	br	806520 <_malloc_r+0x498>
  806708:	d1200515 	stw	r4,-32748(gp)
  80670c:	003f7306 	br	8064dc <_malloc_r+0x454>
  806710:	00801504 	movi	r2,84
  806714:	11001936 	bltu	r2,r4,80677c <_malloc_r+0x6f4>
  806718:	2804d33a 	srli	r2,r5,12
  80671c:	11001b84 	addi	r4,r2,110
  806720:	200690fa 	slli	r3,r4,3
  806724:	003f8e06 	br	806560 <_malloc_r+0x4d8>
  806728:	480b883a 	mov	r5,r9
  80672c:	6807883a 	mov	r3,r13
  806730:	288000cc 	andi	r2,r5,3
  806734:	18fffe04 	addi	r3,r3,-8
  806738:	297fffc4 	addi	r5,r5,-1
  80673c:	10001526 	beq	r2,zero,806794 <_malloc_r+0x70c>
  806740:	18800217 	ldw	r2,8(r3)
  806744:	10fffa26 	beq	r2,r3,806730 <_malloc_r+0x6a8>
  806748:	2109883a 	add	r4,r4,r4
  80674c:	393f1e36 	bltu	r7,r4,8063c8 <_malloc_r+0x340>
  806750:	203f1d26 	beq	r4,zero,8063c8 <_malloc_r+0x340>
  806754:	21c4703a 	and	r2,r4,r7
  806758:	10000226 	beq	r2,zero,806764 <_malloc_r+0x6dc>
  80675c:	6013883a 	mov	r9,r12
  806760:	003ee106 	br	8062e8 <_malloc_r+0x260>
  806764:	2109883a 	add	r4,r4,r4
  806768:	3904703a 	and	r2,r7,r4
  80676c:	63000104 	addi	r12,r12,4
  806770:	103ffc26 	beq	r2,zero,806764 <_malloc_r+0x6dc>
  806774:	6013883a 	mov	r9,r12
  806778:	003edb06 	br	8062e8 <_malloc_r+0x260>
  80677c:	00805504 	movi	r2,340
  806780:	11000836 	bltu	r2,r4,8067a4 <_malloc_r+0x71c>
  806784:	2804d3fa 	srli	r2,r5,15
  806788:	11001dc4 	addi	r4,r2,119
  80678c:	200690fa 	slli	r3,r4,3
  806790:	003f7306 	br	806560 <_malloc_r+0x4d8>
  806794:	0104303a 	nor	r2,zero,r4
  806798:	388e703a 	and	r7,r7,r2
  80679c:	e1c00115 	stw	r7,4(fp)
  8067a0:	003fe906 	br	806748 <_malloc_r+0x6c0>
  8067a4:	00815504 	movi	r2,1364
  8067a8:	1100032e 	bgeu	r2,r4,8067b8 <_malloc_r+0x730>
  8067ac:	01001f84 	movi	r4,126
  8067b0:	00c0fc04 	movi	r3,1008
  8067b4:	003f6a06 	br	806560 <_malloc_r+0x4d8>
  8067b8:	2804d4ba 	srli	r2,r5,18
  8067bc:	11001f04 	addi	r4,r2,124
  8067c0:	200690fa 	slli	r3,r4,3
  8067c4:	003f6606 	br	806560 <_malloc_r+0x4d8>

008067c8 <memchr>:
  8067c8:	008000c4 	movi	r2,3
  8067cc:	29403fcc 	andi	r5,r5,255
  8067d0:	2007883a 	mov	r3,r4
  8067d4:	1180022e 	bgeu	r2,r6,8067e0 <memchr+0x18>
  8067d8:	2084703a 	and	r2,r4,r2
  8067dc:	10000b26 	beq	r2,zero,80680c <memchr+0x44>
  8067e0:	313fffc4 	addi	r4,r6,-1
  8067e4:	3000051e 	bne	r6,zero,8067fc <memchr+0x34>
  8067e8:	00002c06 	br	80689c <memchr+0xd4>
  8067ec:	213fffc4 	addi	r4,r4,-1
  8067f0:	00bfffc4 	movi	r2,-1
  8067f4:	18c00044 	addi	r3,r3,1
  8067f8:	20802826 	beq	r4,r2,80689c <memchr+0xd4>
  8067fc:	18800003 	ldbu	r2,0(r3)
  806800:	28bffa1e 	bne	r5,r2,8067ec <memchr+0x24>
  806804:	1805883a 	mov	r2,r3
  806808:	f800283a 	ret
  80680c:	0011883a 	mov	r8,zero
  806810:	0007883a 	mov	r3,zero
  806814:	01c00104 	movi	r7,4
  806818:	4004923a 	slli	r2,r8,8
  80681c:	18c00044 	addi	r3,r3,1
  806820:	1151883a 	add	r8,r2,r5
  806824:	19fffc1e 	bne	r3,r7,806818 <memchr+0x50>
  806828:	02bfbff4 	movhi	r10,65279
  80682c:	52bfbfc4 	addi	r10,r10,-257
  806830:	02602074 	movhi	r9,32897
  806834:	4a602004 	addi	r9,r9,-32640
  806838:	02c000c4 	movi	r11,3
  80683c:	20800017 	ldw	r2,0(r4)
  806840:	31bfff04 	addi	r6,r6,-4
  806844:	200f883a 	mov	r7,r4
  806848:	1204f03a 	xor	r2,r2,r8
  80684c:	1287883a 	add	r3,r2,r10
  806850:	1a46703a 	and	r3,r3,r9
  806854:	0084303a 	nor	r2,zero,r2
  806858:	10c4703a 	and	r2,r2,r3
  80685c:	10000b26 	beq	r2,zero,80688c <memchr+0xc4>
  806860:	20800003 	ldbu	r2,0(r4)
  806864:	28800f26 	beq	r5,r2,8068a4 <memchr+0xdc>
  806868:	20800043 	ldbu	r2,1(r4)
  80686c:	21c00044 	addi	r7,r4,1
  806870:	28800c26 	beq	r5,r2,8068a4 <memchr+0xdc>
  806874:	20800083 	ldbu	r2,2(r4)
  806878:	21c00084 	addi	r7,r4,2
  80687c:	28800926 	beq	r5,r2,8068a4 <memchr+0xdc>
  806880:	208000c3 	ldbu	r2,3(r4)
  806884:	21c000c4 	addi	r7,r4,3
  806888:	28800626 	beq	r5,r2,8068a4 <memchr+0xdc>
  80688c:	21000104 	addi	r4,r4,4
  806890:	59bfea36 	bltu	r11,r6,80683c <memchr+0x74>
  806894:	2007883a 	mov	r3,r4
  806898:	003fd106 	br	8067e0 <memchr+0x18>
  80689c:	0005883a 	mov	r2,zero
  8068a0:	f800283a 	ret
  8068a4:	3805883a 	mov	r2,r7
  8068a8:	f800283a 	ret

008068ac <memcpy>:
  8068ac:	01c003c4 	movi	r7,15
  8068b0:	2007883a 	mov	r3,r4
  8068b4:	3980032e 	bgeu	r7,r6,8068c4 <memcpy+0x18>
  8068b8:	2904b03a 	or	r2,r5,r4
  8068bc:	108000cc 	andi	r2,r2,3
  8068c0:	10000926 	beq	r2,zero,8068e8 <memcpy+0x3c>
  8068c4:	30000626 	beq	r6,zero,8068e0 <memcpy+0x34>
  8068c8:	30cd883a 	add	r6,r6,r3
  8068cc:	28800003 	ldbu	r2,0(r5)
  8068d0:	29400044 	addi	r5,r5,1
  8068d4:	18800005 	stb	r2,0(r3)
  8068d8:	18c00044 	addi	r3,r3,1
  8068dc:	30fffb1e 	bne	r6,r3,8068cc <memcpy+0x20>
  8068e0:	2005883a 	mov	r2,r4
  8068e4:	f800283a 	ret
  8068e8:	3811883a 	mov	r8,r7
  8068ec:	200f883a 	mov	r7,r4
  8068f0:	28c00017 	ldw	r3,0(r5)
  8068f4:	31bffc04 	addi	r6,r6,-16
  8068f8:	38c00015 	stw	r3,0(r7)
  8068fc:	28800117 	ldw	r2,4(r5)
  806900:	38800115 	stw	r2,4(r7)
  806904:	28c00217 	ldw	r3,8(r5)
  806908:	38c00215 	stw	r3,8(r7)
  80690c:	28800317 	ldw	r2,12(r5)
  806910:	29400404 	addi	r5,r5,16
  806914:	38800315 	stw	r2,12(r7)
  806918:	39c00404 	addi	r7,r7,16
  80691c:	41bff436 	bltu	r8,r6,8068f0 <memcpy+0x44>
  806920:	008000c4 	movi	r2,3
  806924:	1180072e 	bgeu	r2,r6,806944 <memcpy+0x98>
  806928:	1007883a 	mov	r3,r2
  80692c:	28800017 	ldw	r2,0(r5)
  806930:	31bfff04 	addi	r6,r6,-4
  806934:	29400104 	addi	r5,r5,4
  806938:	38800015 	stw	r2,0(r7)
  80693c:	39c00104 	addi	r7,r7,4
  806940:	19bffa36 	bltu	r3,r6,80692c <memcpy+0x80>
  806944:	3807883a 	mov	r3,r7
  806948:	003fde06 	br	8068c4 <memcpy+0x18>

0080694c <memmove>:
  80694c:	2807883a 	mov	r3,r5
  806950:	2011883a 	mov	r8,r4
  806954:	29000c2e 	bgeu	r5,r4,806988 <memmove+0x3c>
  806958:	298f883a 	add	r7,r5,r6
  80695c:	21c00a2e 	bgeu	r4,r7,806988 <memmove+0x3c>
  806960:	30000726 	beq	r6,zero,806980 <memmove+0x34>
  806964:	2187883a 	add	r3,r4,r6
  806968:	198dc83a 	sub	r6,r3,r6
  80696c:	39ffffc4 	addi	r7,r7,-1
  806970:	38800003 	ldbu	r2,0(r7)
  806974:	18ffffc4 	addi	r3,r3,-1
  806978:	18800005 	stb	r2,0(r3)
  80697c:	19bffb1e 	bne	r3,r6,80696c <memmove+0x20>
  806980:	2005883a 	mov	r2,r4
  806984:	f800283a 	ret
  806988:	01c003c4 	movi	r7,15
  80698c:	39800a36 	bltu	r7,r6,8069b8 <memmove+0x6c>
  806990:	303ffb26 	beq	r6,zero,806980 <memmove+0x34>
  806994:	400f883a 	mov	r7,r8
  806998:	320d883a 	add	r6,r6,r8
  80699c:	28800003 	ldbu	r2,0(r5)
  8069a0:	29400044 	addi	r5,r5,1
  8069a4:	38800005 	stb	r2,0(r7)
  8069a8:	39c00044 	addi	r7,r7,1
  8069ac:	39bffb1e 	bne	r7,r6,80699c <memmove+0x50>
  8069b0:	2005883a 	mov	r2,r4
  8069b4:	f800283a 	ret
  8069b8:	1904b03a 	or	r2,r3,r4
  8069bc:	108000cc 	andi	r2,r2,3
  8069c0:	103ff31e 	bne	r2,zero,806990 <memmove+0x44>
  8069c4:	3811883a 	mov	r8,r7
  8069c8:	180b883a 	mov	r5,r3
  8069cc:	200f883a 	mov	r7,r4
  8069d0:	28c00017 	ldw	r3,0(r5)
  8069d4:	31bffc04 	addi	r6,r6,-16
  8069d8:	38c00015 	stw	r3,0(r7)
  8069dc:	28800117 	ldw	r2,4(r5)
  8069e0:	38800115 	stw	r2,4(r7)
  8069e4:	28c00217 	ldw	r3,8(r5)
  8069e8:	38c00215 	stw	r3,8(r7)
  8069ec:	28800317 	ldw	r2,12(r5)
  8069f0:	29400404 	addi	r5,r5,16
  8069f4:	38800315 	stw	r2,12(r7)
  8069f8:	39c00404 	addi	r7,r7,16
  8069fc:	41bff436 	bltu	r8,r6,8069d0 <memmove+0x84>
  806a00:	008000c4 	movi	r2,3
  806a04:	1180072e 	bgeu	r2,r6,806a24 <memmove+0xd8>
  806a08:	1007883a 	mov	r3,r2
  806a0c:	28800017 	ldw	r2,0(r5)
  806a10:	31bfff04 	addi	r6,r6,-4
  806a14:	29400104 	addi	r5,r5,4
  806a18:	38800015 	stw	r2,0(r7)
  806a1c:	39c00104 	addi	r7,r7,4
  806a20:	19bffa36 	bltu	r3,r6,806a0c <memmove+0xc0>
  806a24:	3811883a 	mov	r8,r7
  806a28:	003fd906 	br	806990 <memmove+0x44>

00806a2c <memset>:
  806a2c:	008000c4 	movi	r2,3
  806a30:	29403fcc 	andi	r5,r5,255
  806a34:	2007883a 	mov	r3,r4
  806a38:	1180022e 	bgeu	r2,r6,806a44 <memset+0x18>
  806a3c:	2084703a 	and	r2,r4,r2
  806a40:	10000826 	beq	r2,zero,806a64 <memset+0x38>
  806a44:	30000526 	beq	r6,zero,806a5c <memset+0x30>
  806a48:	2805883a 	mov	r2,r5
  806a4c:	30cd883a 	add	r6,r6,r3
  806a50:	18800005 	stb	r2,0(r3)
  806a54:	18c00044 	addi	r3,r3,1
  806a58:	19bffd1e 	bne	r3,r6,806a50 <memset+0x24>
  806a5c:	2005883a 	mov	r2,r4
  806a60:	f800283a 	ret
  806a64:	2804923a 	slli	r2,r5,8
  806a68:	020003c4 	movi	r8,15
  806a6c:	200f883a 	mov	r7,r4
  806a70:	2884b03a 	or	r2,r5,r2
  806a74:	1006943a 	slli	r3,r2,16
  806a78:	10c6b03a 	or	r3,r2,r3
  806a7c:	41800a2e 	bgeu	r8,r6,806aa8 <memset+0x7c>
  806a80:	4005883a 	mov	r2,r8
  806a84:	31bffc04 	addi	r6,r6,-16
  806a88:	38c00015 	stw	r3,0(r7)
  806a8c:	38c00115 	stw	r3,4(r7)
  806a90:	38c00215 	stw	r3,8(r7)
  806a94:	38c00315 	stw	r3,12(r7)
  806a98:	39c00404 	addi	r7,r7,16
  806a9c:	11bff936 	bltu	r2,r6,806a84 <memset+0x58>
  806aa0:	008000c4 	movi	r2,3
  806aa4:	1180052e 	bgeu	r2,r6,806abc <memset+0x90>
  806aa8:	31bfff04 	addi	r6,r6,-4
  806aac:	008000c4 	movi	r2,3
  806ab0:	38c00015 	stw	r3,0(r7)
  806ab4:	39c00104 	addi	r7,r7,4
  806ab8:	11bffb36 	bltu	r2,r6,806aa8 <memset+0x7c>
  806abc:	3807883a 	mov	r3,r7
  806ac0:	003fe006 	br	806a44 <memset+0x18>

00806ac4 <_Bfree>:
  806ac4:	28000826 	beq	r5,zero,806ae8 <_Bfree+0x24>
  806ac8:	28800117 	ldw	r2,4(r5)
  806acc:	21001317 	ldw	r4,76(r4)
  806ad0:	1085883a 	add	r2,r2,r2
  806ad4:	1085883a 	add	r2,r2,r2
  806ad8:	1105883a 	add	r2,r2,r4
  806adc:	10c00017 	ldw	r3,0(r2)
  806ae0:	28c00015 	stw	r3,0(r5)
  806ae4:	11400015 	stw	r5,0(r2)
  806ae8:	f800283a 	ret

00806aec <__hi0bits>:
  806aec:	20bfffec 	andhi	r2,r4,65535
  806af0:	10001426 	beq	r2,zero,806b44 <__hi0bits+0x58>
  806af4:	0007883a 	mov	r3,zero
  806af8:	20bfc02c 	andhi	r2,r4,65280
  806afc:	1000021e 	bne	r2,zero,806b08 <__hi0bits+0x1c>
  806b00:	2008923a 	slli	r4,r4,8
  806b04:	18c00204 	addi	r3,r3,8
  806b08:	20bc002c 	andhi	r2,r4,61440
  806b0c:	1000021e 	bne	r2,zero,806b18 <__hi0bits+0x2c>
  806b10:	2008913a 	slli	r4,r4,4
  806b14:	18c00104 	addi	r3,r3,4
  806b18:	20b0002c 	andhi	r2,r4,49152
  806b1c:	1000031e 	bne	r2,zero,806b2c <__hi0bits+0x40>
  806b20:	2105883a 	add	r2,r4,r4
  806b24:	18c00084 	addi	r3,r3,2
  806b28:	1089883a 	add	r4,r2,r2
  806b2c:	20000316 	blt	r4,zero,806b3c <__hi0bits+0x50>
  806b30:	2090002c 	andhi	r2,r4,16384
  806b34:	10000626 	beq	r2,zero,806b50 <__hi0bits+0x64>
  806b38:	18c00044 	addi	r3,r3,1
  806b3c:	1805883a 	mov	r2,r3
  806b40:	f800283a 	ret
  806b44:	2008943a 	slli	r4,r4,16
  806b48:	00c00404 	movi	r3,16
  806b4c:	003fea06 	br	806af8 <__hi0bits+0xc>
  806b50:	00c00804 	movi	r3,32
  806b54:	1805883a 	mov	r2,r3
  806b58:	f800283a 	ret

00806b5c <__lo0bits>:
  806b5c:	20c00017 	ldw	r3,0(r4)
  806b60:	188001cc 	andi	r2,r3,7
  806b64:	10000a26 	beq	r2,zero,806b90 <__lo0bits+0x34>
  806b68:	1880004c 	andi	r2,r3,1
  806b6c:	1005003a 	cmpeq	r2,r2,zero
  806b70:	10002126 	beq	r2,zero,806bf8 <__lo0bits+0x9c>
  806b74:	1880008c 	andi	r2,r3,2
  806b78:	1000251e 	bne	r2,zero,806c10 <__lo0bits+0xb4>
  806b7c:	1804d0ba 	srli	r2,r3,2
  806b80:	01400084 	movi	r5,2
  806b84:	20800015 	stw	r2,0(r4)
  806b88:	2805883a 	mov	r2,r5
  806b8c:	f800283a 	ret
  806b90:	18bfffcc 	andi	r2,r3,65535
  806b94:	10001526 	beq	r2,zero,806bec <__lo0bits+0x90>
  806b98:	000b883a 	mov	r5,zero
  806b9c:	18803fcc 	andi	r2,r3,255
  806ba0:	1000021e 	bne	r2,zero,806bac <__lo0bits+0x50>
  806ba4:	1806d23a 	srli	r3,r3,8
  806ba8:	29400204 	addi	r5,r5,8
  806bac:	188003cc 	andi	r2,r3,15
  806bb0:	1000021e 	bne	r2,zero,806bbc <__lo0bits+0x60>
  806bb4:	1806d13a 	srli	r3,r3,4
  806bb8:	29400104 	addi	r5,r5,4
  806bbc:	188000cc 	andi	r2,r3,3
  806bc0:	1000021e 	bne	r2,zero,806bcc <__lo0bits+0x70>
  806bc4:	1806d0ba 	srli	r3,r3,2
  806bc8:	29400084 	addi	r5,r5,2
  806bcc:	1880004c 	andi	r2,r3,1
  806bd0:	1000031e 	bne	r2,zero,806be0 <__lo0bits+0x84>
  806bd4:	1806d07a 	srli	r3,r3,1
  806bd8:	18000a26 	beq	r3,zero,806c04 <__lo0bits+0xa8>
  806bdc:	29400044 	addi	r5,r5,1
  806be0:	2805883a 	mov	r2,r5
  806be4:	20c00015 	stw	r3,0(r4)
  806be8:	f800283a 	ret
  806bec:	1806d43a 	srli	r3,r3,16
  806bf0:	01400404 	movi	r5,16
  806bf4:	003fe906 	br	806b9c <__lo0bits+0x40>
  806bf8:	000b883a 	mov	r5,zero
  806bfc:	2805883a 	mov	r2,r5
  806c00:	f800283a 	ret
  806c04:	01400804 	movi	r5,32
  806c08:	2805883a 	mov	r2,r5
  806c0c:	f800283a 	ret
  806c10:	1804d07a 	srli	r2,r3,1
  806c14:	01400044 	movi	r5,1
  806c18:	20800015 	stw	r2,0(r4)
  806c1c:	003fda06 	br	806b88 <__lo0bits+0x2c>

00806c20 <__mcmp>:
  806c20:	20800417 	ldw	r2,16(r4)
  806c24:	28c00417 	ldw	r3,16(r5)
  806c28:	10cfc83a 	sub	r7,r2,r3
  806c2c:	38000c1e 	bne	r7,zero,806c60 <__mcmp+0x40>
  806c30:	18c5883a 	add	r2,r3,r3
  806c34:	1085883a 	add	r2,r2,r2
  806c38:	10c00504 	addi	r3,r2,20
  806c3c:	21000504 	addi	r4,r4,20
  806c40:	28cb883a 	add	r5,r5,r3
  806c44:	2085883a 	add	r2,r4,r2
  806c48:	10bfff04 	addi	r2,r2,-4
  806c4c:	297fff04 	addi	r5,r5,-4
  806c50:	11800017 	ldw	r6,0(r2)
  806c54:	28c00017 	ldw	r3,0(r5)
  806c58:	30c0031e 	bne	r6,r3,806c68 <__mcmp+0x48>
  806c5c:	20bffa36 	bltu	r4,r2,806c48 <__mcmp+0x28>
  806c60:	3805883a 	mov	r2,r7
  806c64:	f800283a 	ret
  806c68:	30c00336 	bltu	r6,r3,806c78 <__mcmp+0x58>
  806c6c:	01c00044 	movi	r7,1
  806c70:	3805883a 	mov	r2,r7
  806c74:	f800283a 	ret
  806c78:	01ffffc4 	movi	r7,-1
  806c7c:	003ff806 	br	806c60 <__mcmp+0x40>

00806c80 <__ulp>:
  806c80:	295ffc2c 	andhi	r5,r5,32752
  806c84:	013f3034 	movhi	r4,64704
  806c88:	290b883a 	add	r5,r5,r4
  806c8c:	0145c83a 	sub	r2,zero,r5
  806c90:	1007d53a 	srai	r3,r2,20
  806c94:	000d883a 	mov	r6,zero
  806c98:	0140040e 	bge	zero,r5,806cac <__ulp+0x2c>
  806c9c:	280f883a 	mov	r7,r5
  806ca0:	3807883a 	mov	r3,r7
  806ca4:	3005883a 	mov	r2,r6
  806ca8:	f800283a 	ret
  806cac:	008004c4 	movi	r2,19
  806cb0:	193ffb04 	addi	r4,r3,-20
  806cb4:	10c00c0e 	bge	r2,r3,806ce8 <__ulp+0x68>
  806cb8:	008007c4 	movi	r2,31
  806cbc:	1107c83a 	sub	r3,r2,r4
  806cc0:	00800784 	movi	r2,30
  806cc4:	01400044 	movi	r5,1
  806cc8:	11000216 	blt	r2,r4,806cd4 <__ulp+0x54>
  806ccc:	00800044 	movi	r2,1
  806cd0:	10ca983a 	sll	r5,r2,r3
  806cd4:	000f883a 	mov	r7,zero
  806cd8:	280d883a 	mov	r6,r5
  806cdc:	3807883a 	mov	r3,r7
  806ce0:	3005883a 	mov	r2,r6
  806ce4:	f800283a 	ret
  806ce8:	00800234 	movhi	r2,8
  806cec:	10cfd83a 	sra	r7,r2,r3
  806cf0:	000d883a 	mov	r6,zero
  806cf4:	3005883a 	mov	r2,r6
  806cf8:	3807883a 	mov	r3,r7
  806cfc:	f800283a 	ret

00806d00 <__b2d>:
  806d00:	20800417 	ldw	r2,16(r4)
  806d04:	defff904 	addi	sp,sp,-28
  806d08:	dd000415 	stw	r20,16(sp)
  806d0c:	1085883a 	add	r2,r2,r2
  806d10:	25000504 	addi	r20,r4,20
  806d14:	1085883a 	add	r2,r2,r2
  806d18:	dc000015 	stw	r16,0(sp)
  806d1c:	a0a1883a 	add	r16,r20,r2
  806d20:	dd400515 	stw	r21,20(sp)
  806d24:	857fff17 	ldw	r21,-4(r16)
  806d28:	dc400115 	stw	r17,4(sp)
  806d2c:	dfc00615 	stw	ra,24(sp)
  806d30:	a809883a 	mov	r4,r21
  806d34:	2823883a 	mov	r17,r5
  806d38:	dcc00315 	stw	r19,12(sp)
  806d3c:	dc800215 	stw	r18,8(sp)
  806d40:	0806aec0 	call	806aec <__hi0bits>
  806d44:	100b883a 	mov	r5,r2
  806d48:	00800804 	movi	r2,32
  806d4c:	1145c83a 	sub	r2,r2,r5
  806d50:	88800015 	stw	r2,0(r17)
  806d54:	00800284 	movi	r2,10
  806d58:	80ffff04 	addi	r3,r16,-4
  806d5c:	11401416 	blt	r2,r5,806db0 <__b2d+0xb0>
  806d60:	008002c4 	movi	r2,11
  806d64:	1149c83a 	sub	r4,r2,r5
  806d68:	a0c02736 	bltu	r20,r3,806e08 <__b2d+0x108>
  806d6c:	000d883a 	mov	r6,zero
  806d70:	28800544 	addi	r2,r5,21
  806d74:	a906d83a 	srl	r3,r21,r4
  806d78:	a884983a 	sll	r2,r21,r2
  806d7c:	1ccffc34 	orhi	r19,r3,16368
  806d80:	11a4b03a 	or	r18,r2,r6
  806d84:	9005883a 	mov	r2,r18
  806d88:	9807883a 	mov	r3,r19
  806d8c:	dfc00617 	ldw	ra,24(sp)
  806d90:	dd400517 	ldw	r21,20(sp)
  806d94:	dd000417 	ldw	r20,16(sp)
  806d98:	dcc00317 	ldw	r19,12(sp)
  806d9c:	dc800217 	ldw	r18,8(sp)
  806da0:	dc400117 	ldw	r17,4(sp)
  806da4:	dc000017 	ldw	r16,0(sp)
  806da8:	dec00704 	addi	sp,sp,28
  806dac:	f800283a 	ret
  806db0:	a0c00e36 	bltu	r20,r3,806dec <__b2d+0xec>
  806db4:	293ffd44 	addi	r4,r5,-11
  806db8:	000d883a 	mov	r6,zero
  806dbc:	20000f26 	beq	r4,zero,806dfc <__b2d+0xfc>
  806dc0:	00800804 	movi	r2,32
  806dc4:	110bc83a 	sub	r5,r2,r4
  806dc8:	a0c01236 	bltu	r20,r3,806e14 <__b2d+0x114>
  806dcc:	000f883a 	mov	r7,zero
  806dd0:	a904983a 	sll	r2,r21,r4
  806dd4:	3146d83a 	srl	r3,r6,r5
  806dd8:	3108983a 	sll	r4,r6,r4
  806ddc:	108ffc34 	orhi	r2,r2,16368
  806de0:	18a6b03a 	or	r19,r3,r2
  806de4:	3924b03a 	or	r18,r7,r4
  806de8:	003fe606 	br	806d84 <__b2d+0x84>
  806dec:	293ffd44 	addi	r4,r5,-11
  806df0:	81bffe17 	ldw	r6,-8(r16)
  806df4:	80fffe04 	addi	r3,r16,-8
  806df8:	203ff11e 	bne	r4,zero,806dc0 <__b2d+0xc0>
  806dfc:	accffc34 	orhi	r19,r21,16368
  806e00:	3025883a 	mov	r18,r6
  806e04:	003fdf06 	br	806d84 <__b2d+0x84>
  806e08:	18bfff17 	ldw	r2,-4(r3)
  806e0c:	110cd83a 	srl	r6,r2,r4
  806e10:	003fd706 	br	806d70 <__b2d+0x70>
  806e14:	18bfff17 	ldw	r2,-4(r3)
  806e18:	114ed83a 	srl	r7,r2,r5
  806e1c:	003fec06 	br	806dd0 <__b2d+0xd0>

00806e20 <__ratio>:
  806e20:	defff904 	addi	sp,sp,-28
  806e24:	dc400215 	stw	r17,8(sp)
  806e28:	2823883a 	mov	r17,r5
  806e2c:	d80b883a 	mov	r5,sp
  806e30:	dfc00615 	stw	ra,24(sp)
  806e34:	dd000515 	stw	r20,20(sp)
  806e38:	dcc00415 	stw	r19,16(sp)
  806e3c:	dc800315 	stw	r18,12(sp)
  806e40:	2025883a 	mov	r18,r4
  806e44:	0806d000 	call	806d00 <__b2d>
  806e48:	8809883a 	mov	r4,r17
  806e4c:	d9400104 	addi	r5,sp,4
  806e50:	1027883a 	mov	r19,r2
  806e54:	1829883a 	mov	r20,r3
  806e58:	0806d000 	call	806d00 <__b2d>
  806e5c:	89000417 	ldw	r4,16(r17)
  806e60:	91c00417 	ldw	r7,16(r18)
  806e64:	d9800117 	ldw	r6,4(sp)
  806e68:	180b883a 	mov	r5,r3
  806e6c:	390fc83a 	sub	r7,r7,r4
  806e70:	1009883a 	mov	r4,r2
  806e74:	d8800017 	ldw	r2,0(sp)
  806e78:	380e917a 	slli	r7,r7,5
  806e7c:	2011883a 	mov	r8,r4
  806e80:	1185c83a 	sub	r2,r2,r6
  806e84:	11c5883a 	add	r2,r2,r7
  806e88:	1006953a 	slli	r3,r2,20
  806e8c:	2813883a 	mov	r9,r5
  806e90:	00800d0e 	bge	zero,r2,806ec8 <__ratio+0xa8>
  806e94:	1d29883a 	add	r20,r3,r20
  806e98:	a00b883a 	mov	r5,r20
  806e9c:	480f883a 	mov	r7,r9
  806ea0:	9809883a 	mov	r4,r19
  806ea4:	400d883a 	mov	r6,r8
  806ea8:	080a0280 	call	80a028 <__divdf3>
  806eac:	dfc00617 	ldw	ra,24(sp)
  806eb0:	dd000517 	ldw	r20,20(sp)
  806eb4:	dcc00417 	ldw	r19,16(sp)
  806eb8:	dc800317 	ldw	r18,12(sp)
  806ebc:	dc400217 	ldw	r17,8(sp)
  806ec0:	dec00704 	addi	sp,sp,28
  806ec4:	f800283a 	ret
  806ec8:	28d3c83a 	sub	r9,r5,r3
  806ecc:	003ff206 	br	806e98 <__ratio+0x78>

00806ed0 <_mprec_log10>:
  806ed0:	defffe04 	addi	sp,sp,-8
  806ed4:	008005c4 	movi	r2,23
  806ed8:	dc000015 	stw	r16,0(sp)
  806edc:	dfc00115 	stw	ra,4(sp)
  806ee0:	2021883a 	mov	r16,r4
  806ee4:	11000c16 	blt	r2,r4,806f18 <_mprec_log10+0x48>
  806ee8:	200490fa 	slli	r2,r4,3
  806eec:	00c02074 	movhi	r3,129
  806ef0:	18fefc04 	addi	r3,r3,-1040
  806ef4:	10c5883a 	add	r2,r2,r3
  806ef8:	12400117 	ldw	r9,4(r2)
  806efc:	12000017 	ldw	r8,0(r2)
  806f00:	4807883a 	mov	r3,r9
  806f04:	4005883a 	mov	r2,r8
  806f08:	dfc00117 	ldw	ra,4(sp)
  806f0c:	dc000017 	ldw	r16,0(sp)
  806f10:	dec00204 	addi	sp,sp,8
  806f14:	f800283a 	ret
  806f18:	0011883a 	mov	r8,zero
  806f1c:	024ffc34 	movhi	r9,16368
  806f20:	0005883a 	mov	r2,zero
  806f24:	00d00934 	movhi	r3,16420
  806f28:	480b883a 	mov	r5,r9
  806f2c:	4009883a 	mov	r4,r8
  806f30:	180f883a 	mov	r7,r3
  806f34:	100d883a 	mov	r6,r2
  806f38:	0809c640 	call	809c64 <__muldf3>
  806f3c:	843fffc4 	addi	r16,r16,-1
  806f40:	1011883a 	mov	r8,r2
  806f44:	1813883a 	mov	r9,r3
  806f48:	803ff51e 	bne	r16,zero,806f20 <_mprec_log10+0x50>
  806f4c:	4005883a 	mov	r2,r8
  806f50:	4807883a 	mov	r3,r9
  806f54:	dfc00117 	ldw	ra,4(sp)
  806f58:	dc000017 	ldw	r16,0(sp)
  806f5c:	dec00204 	addi	sp,sp,8
  806f60:	f800283a 	ret

00806f64 <__copybits>:
  806f64:	297fffc4 	addi	r5,r5,-1
  806f68:	30800417 	ldw	r2,16(r6)
  806f6c:	280bd17a 	srai	r5,r5,5
  806f70:	31800504 	addi	r6,r6,20
  806f74:	1085883a 	add	r2,r2,r2
  806f78:	294b883a 	add	r5,r5,r5
  806f7c:	294b883a 	add	r5,r5,r5
  806f80:	1085883a 	add	r2,r2,r2
  806f84:	290b883a 	add	r5,r5,r4
  806f88:	3087883a 	add	r3,r6,r2
  806f8c:	29400104 	addi	r5,r5,4
  806f90:	30c0052e 	bgeu	r6,r3,806fa8 <__copybits+0x44>
  806f94:	30800017 	ldw	r2,0(r6)
  806f98:	31800104 	addi	r6,r6,4
  806f9c:	20800015 	stw	r2,0(r4)
  806fa0:	21000104 	addi	r4,r4,4
  806fa4:	30fffb36 	bltu	r6,r3,806f94 <__copybits+0x30>
  806fa8:	2140032e 	bgeu	r4,r5,806fb8 <__copybits+0x54>
  806fac:	20000015 	stw	zero,0(r4)
  806fb0:	21000104 	addi	r4,r4,4
  806fb4:	217ffd36 	bltu	r4,r5,806fac <__copybits+0x48>
  806fb8:	f800283a 	ret

00806fbc <__any_on>:
  806fbc:	20800417 	ldw	r2,16(r4)
  806fc0:	2807d17a 	srai	r3,r5,5
  806fc4:	21000504 	addi	r4,r4,20
  806fc8:	10c00d0e 	bge	r2,r3,807000 <__any_on+0x44>
  806fcc:	1085883a 	add	r2,r2,r2
  806fd0:	1085883a 	add	r2,r2,r2
  806fd4:	208d883a 	add	r6,r4,r2
  806fd8:	2180182e 	bgeu	r4,r6,80703c <__any_on+0x80>
  806fdc:	30bfff17 	ldw	r2,-4(r6)
  806fe0:	30ffff04 	addi	r3,r6,-4
  806fe4:	1000041e 	bne	r2,zero,806ff8 <__any_on+0x3c>
  806fe8:	20c0142e 	bgeu	r4,r3,80703c <__any_on+0x80>
  806fec:	18ffff04 	addi	r3,r3,-4
  806ff0:	18800017 	ldw	r2,0(r3)
  806ff4:	103ffc26 	beq	r2,zero,806fe8 <__any_on+0x2c>
  806ff8:	00800044 	movi	r2,1
  806ffc:	f800283a 	ret
  807000:	18800a0e 	bge	r3,r2,80702c <__any_on+0x70>
  807004:	294007cc 	andi	r5,r5,31
  807008:	28000826 	beq	r5,zero,80702c <__any_on+0x70>
  80700c:	18c5883a 	add	r2,r3,r3
  807010:	1085883a 	add	r2,r2,r2
  807014:	208d883a 	add	r6,r4,r2
  807018:	30c00017 	ldw	r3,0(r6)
  80701c:	1944d83a 	srl	r2,r3,r5
  807020:	1144983a 	sll	r2,r2,r5
  807024:	18bff41e 	bne	r3,r2,806ff8 <__any_on+0x3c>
  807028:	003feb06 	br	806fd8 <__any_on+0x1c>
  80702c:	18c5883a 	add	r2,r3,r3
  807030:	1085883a 	add	r2,r2,r2
  807034:	208d883a 	add	r6,r4,r2
  807038:	003fe706 	br	806fd8 <__any_on+0x1c>
  80703c:	0005883a 	mov	r2,zero
  807040:	f800283a 	ret

00807044 <_Balloc>:
  807044:	20c01317 	ldw	r3,76(r4)
  807048:	defffb04 	addi	sp,sp,-20
  80704c:	dcc00315 	stw	r19,12(sp)
  807050:	dc800215 	stw	r18,8(sp)
  807054:	dfc00415 	stw	ra,16(sp)
  807058:	2825883a 	mov	r18,r5
  80705c:	dc400115 	stw	r17,4(sp)
  807060:	dc000015 	stw	r16,0(sp)
  807064:	2027883a 	mov	r19,r4
  807068:	01800404 	movi	r6,16
  80706c:	01400104 	movi	r5,4
  807070:	18001726 	beq	r3,zero,8070d0 <_Balloc+0x8c>
  807074:	01400044 	movi	r5,1
  807078:	9485883a 	add	r2,r18,r18
  80707c:	2ca2983a 	sll	r17,r5,r18
  807080:	1085883a 	add	r2,r2,r2
  807084:	10c7883a 	add	r3,r2,r3
  807088:	1c000017 	ldw	r16,0(r3)
  80708c:	8c4d883a 	add	r6,r17,r17
  807090:	318d883a 	add	r6,r6,r6
  807094:	9809883a 	mov	r4,r19
  807098:	31800504 	addi	r6,r6,20
  80709c:	80001226 	beq	r16,zero,8070e8 <_Balloc+0xa4>
  8070a0:	80800017 	ldw	r2,0(r16)
  8070a4:	18800015 	stw	r2,0(r3)
  8070a8:	80000415 	stw	zero,16(r16)
  8070ac:	80000315 	stw	zero,12(r16)
  8070b0:	8005883a 	mov	r2,r16
  8070b4:	dfc00417 	ldw	ra,16(sp)
  8070b8:	dcc00317 	ldw	r19,12(sp)
  8070bc:	dc800217 	ldw	r18,8(sp)
  8070c0:	dc400117 	ldw	r17,4(sp)
  8070c4:	dc000017 	ldw	r16,0(sp)
  8070c8:	dec00504 	addi	sp,sp,20
  8070cc:	f800283a 	ret
  8070d0:	08087b80 	call	8087b8 <_calloc_r>
  8070d4:	1007883a 	mov	r3,r2
  8070d8:	0021883a 	mov	r16,zero
  8070dc:	98801315 	stw	r2,76(r19)
  8070e0:	103fe41e 	bne	r2,zero,807074 <_Balloc+0x30>
  8070e4:	003ff206 	br	8070b0 <_Balloc+0x6c>
  8070e8:	08087b80 	call	8087b8 <_calloc_r>
  8070ec:	103ff026 	beq	r2,zero,8070b0 <_Balloc+0x6c>
  8070f0:	1021883a 	mov	r16,r2
  8070f4:	14800115 	stw	r18,4(r2)
  8070f8:	14400215 	stw	r17,8(r2)
  8070fc:	003fea06 	br	8070a8 <_Balloc+0x64>

00807100 <__d2b>:
  807100:	defff504 	addi	sp,sp,-44
  807104:	dcc00515 	stw	r19,20(sp)
  807108:	04c00044 	movi	r19,1
  80710c:	dc000215 	stw	r16,8(sp)
  807110:	2821883a 	mov	r16,r5
  807114:	980b883a 	mov	r5,r19
  807118:	ddc00915 	stw	r23,36(sp)
  80711c:	dd800815 	stw	r22,32(sp)
  807120:	dd400715 	stw	r21,28(sp)
  807124:	dd000615 	stw	r20,24(sp)
  807128:	dc800415 	stw	r18,16(sp)
  80712c:	dc400315 	stw	r17,12(sp)
  807130:	dfc00a15 	stw	ra,40(sp)
  807134:	3023883a 	mov	r17,r6
  807138:	382d883a 	mov	r22,r7
  80713c:	ddc00b17 	ldw	r23,44(sp)
  807140:	08070440 	call	807044 <_Balloc>
  807144:	1025883a 	mov	r18,r2
  807148:	00a00034 	movhi	r2,32768
  80714c:	10bfffc4 	addi	r2,r2,-1
  807150:	8888703a 	and	r4,r17,r2
  807154:	202ad53a 	srli	r21,r4,20
  807158:	00800434 	movhi	r2,16
  80715c:	10bfffc4 	addi	r2,r2,-1
  807160:	8886703a 	and	r3,r17,r2
  807164:	a829003a 	cmpeq	r20,r21,zero
  807168:	800b883a 	mov	r5,r16
  80716c:	d8c00115 	stw	r3,4(sp)
  807170:	94000504 	addi	r16,r18,20
  807174:	a000021e 	bne	r20,zero,807180 <__d2b+0x80>
  807178:	18c00434 	orhi	r3,r3,16
  80717c:	d8c00115 	stw	r3,4(sp)
  807180:	28002726 	beq	r5,zero,807220 <__d2b+0x120>
  807184:	d809883a 	mov	r4,sp
  807188:	d9400015 	stw	r5,0(sp)
  80718c:	0806b5c0 	call	806b5c <__lo0bits>
  807190:	100d883a 	mov	r6,r2
  807194:	10003526 	beq	r2,zero,80726c <__d2b+0x16c>
  807198:	d8c00117 	ldw	r3,4(sp)
  80719c:	00800804 	movi	r2,32
  8071a0:	1185c83a 	sub	r2,r2,r6
  8071a4:	d9000017 	ldw	r4,0(sp)
  8071a8:	1886983a 	sll	r3,r3,r2
  8071ac:	1906b03a 	or	r3,r3,r4
  8071b0:	90c00515 	stw	r3,20(r18)
  8071b4:	d8c00117 	ldw	r3,4(sp)
  8071b8:	1986d83a 	srl	r3,r3,r6
  8071bc:	d8c00115 	stw	r3,4(sp)
  8071c0:	180b003a 	cmpeq	r5,r3,zero
  8071c4:	00800084 	movi	r2,2
  8071c8:	114bc83a 	sub	r5,r2,r5
  8071cc:	80c00115 	stw	r3,4(r16)
  8071d0:	91400415 	stw	r5,16(r18)
  8071d4:	a0001a1e 	bne	r20,zero,807240 <__d2b+0x140>
  8071d8:	3545883a 	add	r2,r6,r21
  8071dc:	10bef344 	addi	r2,r2,-1075
  8071e0:	00c00d44 	movi	r3,53
  8071e4:	b0800015 	stw	r2,0(r22)
  8071e8:	1987c83a 	sub	r3,r3,r6
  8071ec:	b8c00015 	stw	r3,0(r23)
  8071f0:	9005883a 	mov	r2,r18
  8071f4:	dfc00a17 	ldw	ra,40(sp)
  8071f8:	ddc00917 	ldw	r23,36(sp)
  8071fc:	dd800817 	ldw	r22,32(sp)
  807200:	dd400717 	ldw	r21,28(sp)
  807204:	dd000617 	ldw	r20,24(sp)
  807208:	dcc00517 	ldw	r19,20(sp)
  80720c:	dc800417 	ldw	r18,16(sp)
  807210:	dc400317 	ldw	r17,12(sp)
  807214:	dc000217 	ldw	r16,8(sp)
  807218:	dec00b04 	addi	sp,sp,44
  80721c:	f800283a 	ret
  807220:	d9000104 	addi	r4,sp,4
  807224:	0806b5c0 	call	806b5c <__lo0bits>
  807228:	11800804 	addi	r6,r2,32
  80722c:	d8800117 	ldw	r2,4(sp)
  807230:	94c00415 	stw	r19,16(r18)
  807234:	980b883a 	mov	r5,r19
  807238:	90800515 	stw	r2,20(r18)
  80723c:	a03fe626 	beq	r20,zero,8071d8 <__d2b+0xd8>
  807240:	2945883a 	add	r2,r5,r5
  807244:	1085883a 	add	r2,r2,r2
  807248:	1405883a 	add	r2,r2,r16
  80724c:	113fff17 	ldw	r4,-4(r2)
  807250:	30fef384 	addi	r3,r6,-1074
  807254:	2820917a 	slli	r16,r5,5
  807258:	b0c00015 	stw	r3,0(r22)
  80725c:	0806aec0 	call	806aec <__hi0bits>
  807260:	80a1c83a 	sub	r16,r16,r2
  807264:	bc000015 	stw	r16,0(r23)
  807268:	003fe106 	br	8071f0 <__d2b+0xf0>
  80726c:	d8800017 	ldw	r2,0(sp)
  807270:	90800515 	stw	r2,20(r18)
  807274:	d8c00117 	ldw	r3,4(sp)
  807278:	003fd106 	br	8071c0 <__d2b+0xc0>

0080727c <__mdiff>:
  80727c:	defffb04 	addi	sp,sp,-20
  807280:	dc000015 	stw	r16,0(sp)
  807284:	2821883a 	mov	r16,r5
  807288:	dc800215 	stw	r18,8(sp)
  80728c:	300b883a 	mov	r5,r6
  807290:	2025883a 	mov	r18,r4
  807294:	8009883a 	mov	r4,r16
  807298:	dc400115 	stw	r17,4(sp)
  80729c:	dfc00415 	stw	ra,16(sp)
  8072a0:	dcc00315 	stw	r19,12(sp)
  8072a4:	3023883a 	mov	r17,r6
  8072a8:	0806c200 	call	806c20 <__mcmp>
  8072ac:	10004226 	beq	r2,zero,8073b8 <__mdiff+0x13c>
  8072b0:	10005016 	blt	r2,zero,8073f4 <__mdiff+0x178>
  8072b4:	0027883a 	mov	r19,zero
  8072b8:	81400117 	ldw	r5,4(r16)
  8072bc:	9009883a 	mov	r4,r18
  8072c0:	08070440 	call	807044 <_Balloc>
  8072c4:	1019883a 	mov	r12,r2
  8072c8:	82800417 	ldw	r10,16(r16)
  8072cc:	88800417 	ldw	r2,16(r17)
  8072d0:	81800504 	addi	r6,r16,20
  8072d4:	5287883a 	add	r3,r10,r10
  8072d8:	1085883a 	add	r2,r2,r2
  8072dc:	18c7883a 	add	r3,r3,r3
  8072e0:	1085883a 	add	r2,r2,r2
  8072e4:	8a000504 	addi	r8,r17,20
  8072e8:	64c00315 	stw	r19,12(r12)
  8072ec:	30db883a 	add	r13,r6,r3
  8072f0:	4097883a 	add	r11,r8,r2
  8072f4:	61c00504 	addi	r7,r12,20
  8072f8:	0013883a 	mov	r9,zero
  8072fc:	31000017 	ldw	r4,0(r6)
  807300:	41400017 	ldw	r5,0(r8)
  807304:	42000104 	addi	r8,r8,4
  807308:	20bfffcc 	andi	r2,r4,65535
  80730c:	28ffffcc 	andi	r3,r5,65535
  807310:	10c5c83a 	sub	r2,r2,r3
  807314:	1245883a 	add	r2,r2,r9
  807318:	2008d43a 	srli	r4,r4,16
  80731c:	280ad43a 	srli	r5,r5,16
  807320:	1007d43a 	srai	r3,r2,16
  807324:	3880000d 	sth	r2,0(r7)
  807328:	2149c83a 	sub	r4,r4,r5
  80732c:	20c9883a 	add	r4,r4,r3
  807330:	3900008d 	sth	r4,2(r7)
  807334:	31800104 	addi	r6,r6,4
  807338:	39c00104 	addi	r7,r7,4
  80733c:	2013d43a 	srai	r9,r4,16
  807340:	42ffee36 	bltu	r8,r11,8072fc <__mdiff+0x80>
  807344:	33400c2e 	bgeu	r6,r13,807378 <__mdiff+0xfc>
  807348:	30800017 	ldw	r2,0(r6)
  80734c:	31800104 	addi	r6,r6,4
  807350:	10ffffcc 	andi	r3,r2,65535
  807354:	1a47883a 	add	r3,r3,r9
  807358:	1004d43a 	srli	r2,r2,16
  80735c:	1809d43a 	srai	r4,r3,16
  807360:	38c0000d 	sth	r3,0(r7)
  807364:	1105883a 	add	r2,r2,r4
  807368:	3880008d 	sth	r2,2(r7)
  80736c:	1013d43a 	srai	r9,r2,16
  807370:	39c00104 	addi	r7,r7,4
  807374:	337ff436 	bltu	r6,r13,807348 <__mdiff+0xcc>
  807378:	38bfff17 	ldw	r2,-4(r7)
  80737c:	38ffff04 	addi	r3,r7,-4
  807380:	1000041e 	bne	r2,zero,807394 <__mdiff+0x118>
  807384:	18ffff04 	addi	r3,r3,-4
  807388:	18800017 	ldw	r2,0(r3)
  80738c:	52bfffc4 	addi	r10,r10,-1
  807390:	103ffc26 	beq	r2,zero,807384 <__mdiff+0x108>
  807394:	6005883a 	mov	r2,r12
  807398:	62800415 	stw	r10,16(r12)
  80739c:	dfc00417 	ldw	ra,16(sp)
  8073a0:	dcc00317 	ldw	r19,12(sp)
  8073a4:	dc800217 	ldw	r18,8(sp)
  8073a8:	dc400117 	ldw	r17,4(sp)
  8073ac:	dc000017 	ldw	r16,0(sp)
  8073b0:	dec00504 	addi	sp,sp,20
  8073b4:	f800283a 	ret
  8073b8:	9009883a 	mov	r4,r18
  8073bc:	000b883a 	mov	r5,zero
  8073c0:	08070440 	call	807044 <_Balloc>
  8073c4:	1019883a 	mov	r12,r2
  8073c8:	00800044 	movi	r2,1
  8073cc:	60800415 	stw	r2,16(r12)
  8073d0:	6005883a 	mov	r2,r12
  8073d4:	60000515 	stw	zero,20(r12)
  8073d8:	dfc00417 	ldw	ra,16(sp)
  8073dc:	dcc00317 	ldw	r19,12(sp)
  8073e0:	dc800217 	ldw	r18,8(sp)
  8073e4:	dc400117 	ldw	r17,4(sp)
  8073e8:	dc000017 	ldw	r16,0(sp)
  8073ec:	dec00504 	addi	sp,sp,20
  8073f0:	f800283a 	ret
  8073f4:	880d883a 	mov	r6,r17
  8073f8:	04c00044 	movi	r19,1
  8073fc:	8023883a 	mov	r17,r16
  807400:	3021883a 	mov	r16,r6
  807404:	003fac06 	br	8072b8 <__mdiff+0x3c>

00807408 <__lshift>:
  807408:	defff904 	addi	sp,sp,-28
  80740c:	28800417 	ldw	r2,16(r5)
  807410:	dc000015 	stw	r16,0(sp)
  807414:	3021d17a 	srai	r16,r6,5
  807418:	28c00217 	ldw	r3,8(r5)
  80741c:	10800044 	addi	r2,r2,1
  807420:	dc400115 	stw	r17,4(sp)
  807424:	80a3883a 	add	r17,r16,r2
  807428:	dd400515 	stw	r21,20(sp)
  80742c:	dd000415 	stw	r20,16(sp)
  807430:	dc800215 	stw	r18,8(sp)
  807434:	dfc00615 	stw	ra,24(sp)
  807438:	2825883a 	mov	r18,r5
  80743c:	dcc00315 	stw	r19,12(sp)
  807440:	3029883a 	mov	r20,r6
  807444:	202b883a 	mov	r21,r4
  807448:	29400117 	ldw	r5,4(r5)
  80744c:	1c40030e 	bge	r3,r17,80745c <__lshift+0x54>
  807450:	18c7883a 	add	r3,r3,r3
  807454:	29400044 	addi	r5,r5,1
  807458:	1c7ffd16 	blt	r3,r17,807450 <__lshift+0x48>
  80745c:	a809883a 	mov	r4,r21
  807460:	08070440 	call	807044 <_Balloc>
  807464:	1027883a 	mov	r19,r2
  807468:	11400504 	addi	r5,r2,20
  80746c:	0400090e 	bge	zero,r16,807494 <__lshift+0x8c>
  807470:	2805883a 	mov	r2,r5
  807474:	0007883a 	mov	r3,zero
  807478:	18c00044 	addi	r3,r3,1
  80747c:	10000015 	stw	zero,0(r2)
  807480:	10800104 	addi	r2,r2,4
  807484:	80fffc1e 	bne	r16,r3,807478 <__lshift+0x70>
  807488:	8405883a 	add	r2,r16,r16
  80748c:	1085883a 	add	r2,r2,r2
  807490:	288b883a 	add	r5,r5,r2
  807494:	90800417 	ldw	r2,16(r18)
  807498:	91000504 	addi	r4,r18,20
  80749c:	a18007cc 	andi	r6,r20,31
  8074a0:	1085883a 	add	r2,r2,r2
  8074a4:	1085883a 	add	r2,r2,r2
  8074a8:	208f883a 	add	r7,r4,r2
  8074ac:	30001e26 	beq	r6,zero,807528 <__lshift+0x120>
  8074b0:	00800804 	movi	r2,32
  8074b4:	1191c83a 	sub	r8,r2,r6
  8074b8:	0007883a 	mov	r3,zero
  8074bc:	20800017 	ldw	r2,0(r4)
  8074c0:	1184983a 	sll	r2,r2,r6
  8074c4:	1884b03a 	or	r2,r3,r2
  8074c8:	28800015 	stw	r2,0(r5)
  8074cc:	20c00017 	ldw	r3,0(r4)
  8074d0:	21000104 	addi	r4,r4,4
  8074d4:	29400104 	addi	r5,r5,4
  8074d8:	1a06d83a 	srl	r3,r3,r8
  8074dc:	21fff736 	bltu	r4,r7,8074bc <__lshift+0xb4>
  8074e0:	28c00015 	stw	r3,0(r5)
  8074e4:	18000126 	beq	r3,zero,8074ec <__lshift+0xe4>
  8074e8:	8c400044 	addi	r17,r17,1
  8074ec:	88bfffc4 	addi	r2,r17,-1
  8074f0:	98800415 	stw	r2,16(r19)
  8074f4:	a809883a 	mov	r4,r21
  8074f8:	900b883a 	mov	r5,r18
  8074fc:	0806ac40 	call	806ac4 <_Bfree>
  807500:	9805883a 	mov	r2,r19
  807504:	dfc00617 	ldw	ra,24(sp)
  807508:	dd400517 	ldw	r21,20(sp)
  80750c:	dd000417 	ldw	r20,16(sp)
  807510:	dcc00317 	ldw	r19,12(sp)
  807514:	dc800217 	ldw	r18,8(sp)
  807518:	dc400117 	ldw	r17,4(sp)
  80751c:	dc000017 	ldw	r16,0(sp)
  807520:	dec00704 	addi	sp,sp,28
  807524:	f800283a 	ret
  807528:	20800017 	ldw	r2,0(r4)
  80752c:	21000104 	addi	r4,r4,4
  807530:	28800015 	stw	r2,0(r5)
  807534:	29400104 	addi	r5,r5,4
  807538:	21ffec2e 	bgeu	r4,r7,8074ec <__lshift+0xe4>
  80753c:	20800017 	ldw	r2,0(r4)
  807540:	21000104 	addi	r4,r4,4
  807544:	28800015 	stw	r2,0(r5)
  807548:	29400104 	addi	r5,r5,4
  80754c:	21fff636 	bltu	r4,r7,807528 <__lshift+0x120>
  807550:	003fe606 	br	8074ec <__lshift+0xe4>

00807554 <__multiply>:
  807554:	defff904 	addi	sp,sp,-28
  807558:	dcc00315 	stw	r19,12(sp)
  80755c:	dc800215 	stw	r18,8(sp)
  807560:	2cc00417 	ldw	r19,16(r5)
  807564:	34800417 	ldw	r18,16(r6)
  807568:	dd000415 	stw	r20,16(sp)
  80756c:	dc400115 	stw	r17,4(sp)
  807570:	dfc00615 	stw	ra,24(sp)
  807574:	dd400515 	stw	r21,20(sp)
  807578:	dc000015 	stw	r16,0(sp)
  80757c:	2823883a 	mov	r17,r5
  807580:	3029883a 	mov	r20,r6
  807584:	9c80040e 	bge	r19,r18,807598 <__multiply+0x44>
  807588:	9027883a 	mov	r19,r18
  80758c:	2c800417 	ldw	r18,16(r5)
  807590:	2829883a 	mov	r20,r5
  807594:	3023883a 	mov	r17,r6
  807598:	88800217 	ldw	r2,8(r17)
  80759c:	9ca1883a 	add	r16,r19,r18
  8075a0:	89400117 	ldw	r5,4(r17)
  8075a4:	1400010e 	bge	r2,r16,8075ac <__multiply+0x58>
  8075a8:	29400044 	addi	r5,r5,1
  8075ac:	08070440 	call	807044 <_Balloc>
  8075b0:	102b883a 	mov	r21,r2
  8075b4:	8405883a 	add	r2,r16,r16
  8075b8:	1085883a 	add	r2,r2,r2
  8075bc:	a9000504 	addi	r4,r21,20
  8075c0:	209d883a 	add	r14,r4,r2
  8075c4:	2380042e 	bgeu	r4,r14,8075d8 <__multiply+0x84>
  8075c8:	2005883a 	mov	r2,r4
  8075cc:	10000015 	stw	zero,0(r2)
  8075d0:	10800104 	addi	r2,r2,4
  8075d4:	13bffd36 	bltu	r2,r14,8075cc <__multiply+0x78>
  8075d8:	9485883a 	add	r2,r18,r18
  8075dc:	9cc7883a 	add	r3,r19,r19
  8075e0:	a1800504 	addi	r6,r20,20
  8075e4:	1085883a 	add	r2,r2,r2
  8075e8:	8b400504 	addi	r13,r17,20
  8075ec:	18c7883a 	add	r3,r3,r3
  8075f0:	309f883a 	add	r15,r6,r2
  8075f4:	68d7883a 	add	r11,r13,r3
  8075f8:	33c03b2e 	bgeu	r6,r15,8076e8 <__multiply+0x194>
  8075fc:	2019883a 	mov	r12,r4
  807600:	30800017 	ldw	r2,0(r6)
  807604:	127fffcc 	andi	r9,r2,65535
  807608:	48001826 	beq	r9,zero,80766c <__multiply+0x118>
  80760c:	6811883a 	mov	r8,r13
  807610:	600f883a 	mov	r7,r12
  807614:	0015883a 	mov	r10,zero
  807618:	40c00017 	ldw	r3,0(r8)
  80761c:	39400017 	ldw	r5,0(r7)
  807620:	42000104 	addi	r8,r8,4
  807624:	193fffcc 	andi	r4,r3,65535
  807628:	4909383a 	mul	r4,r9,r4
  80762c:	1806d43a 	srli	r3,r3,16
  807630:	28bfffcc 	andi	r2,r5,65535
  807634:	5085883a 	add	r2,r10,r2
  807638:	2089883a 	add	r4,r4,r2
  80763c:	48c7383a 	mul	r3,r9,r3
  807640:	280ad43a 	srli	r5,r5,16
  807644:	2004d43a 	srli	r2,r4,16
  807648:	3900000d 	sth	r4,0(r7)
  80764c:	1947883a 	add	r3,r3,r5
  807650:	10c5883a 	add	r2,r2,r3
  807654:	3880008d 	sth	r2,2(r7)
  807658:	1014d43a 	srli	r10,r2,16
  80765c:	39c00104 	addi	r7,r7,4
  807660:	42ffed36 	bltu	r8,r11,807618 <__multiply+0xc4>
  807664:	3a800015 	stw	r10,0(r7)
  807668:	30800017 	ldw	r2,0(r6)
  80766c:	1012d43a 	srli	r9,r2,16
  807670:	48001926 	beq	r9,zero,8076d8 <__multiply+0x184>
  807674:	60800017 	ldw	r2,0(r12)
  807678:	6811883a 	mov	r8,r13
  80767c:	600f883a 	mov	r7,r12
  807680:	0015883a 	mov	r10,zero
  807684:	100b883a 	mov	r5,r2
  807688:	41000017 	ldw	r4,0(r8)
  80768c:	2806d43a 	srli	r3,r5,16
  807690:	3880000d 	sth	r2,0(r7)
  807694:	20bfffcc 	andi	r2,r4,65535
  807698:	4885383a 	mul	r2,r9,r2
  80769c:	50c7883a 	add	r3,r10,r3
  8076a0:	2008d43a 	srli	r4,r4,16
  8076a4:	10c5883a 	add	r2,r2,r3
  8076a8:	3880008d 	sth	r2,2(r7)
  8076ac:	39c00104 	addi	r7,r7,4
  8076b0:	39400017 	ldw	r5,0(r7)
  8076b4:	4909383a 	mul	r4,r9,r4
  8076b8:	1004d43a 	srli	r2,r2,16
  8076bc:	28ffffcc 	andi	r3,r5,65535
  8076c0:	20c9883a 	add	r4,r4,r3
  8076c4:	1105883a 	add	r2,r2,r4
  8076c8:	42000104 	addi	r8,r8,4
  8076cc:	1014d43a 	srli	r10,r2,16
  8076d0:	42ffed36 	bltu	r8,r11,807688 <__multiply+0x134>
  8076d4:	38800015 	stw	r2,0(r7)
  8076d8:	31800104 	addi	r6,r6,4
  8076dc:	33c0022e 	bgeu	r6,r15,8076e8 <__multiply+0x194>
  8076e0:	63000104 	addi	r12,r12,4
  8076e4:	003fc606 	br	807600 <__multiply+0xac>
  8076e8:	0400090e 	bge	zero,r16,807710 <__multiply+0x1bc>
  8076ec:	70bfff17 	ldw	r2,-4(r14)
  8076f0:	70ffff04 	addi	r3,r14,-4
  8076f4:	10000326 	beq	r2,zero,807704 <__multiply+0x1b0>
  8076f8:	00000506 	br	807710 <__multiply+0x1bc>
  8076fc:	18800017 	ldw	r2,0(r3)
  807700:	1000031e 	bne	r2,zero,807710 <__multiply+0x1bc>
  807704:	843fffc4 	addi	r16,r16,-1
  807708:	18ffff04 	addi	r3,r3,-4
  80770c:	803ffb1e 	bne	r16,zero,8076fc <__multiply+0x1a8>
  807710:	a805883a 	mov	r2,r21
  807714:	ac000415 	stw	r16,16(r21)
  807718:	dfc00617 	ldw	ra,24(sp)
  80771c:	dd400517 	ldw	r21,20(sp)
  807720:	dd000417 	ldw	r20,16(sp)
  807724:	dcc00317 	ldw	r19,12(sp)
  807728:	dc800217 	ldw	r18,8(sp)
  80772c:	dc400117 	ldw	r17,4(sp)
  807730:	dc000017 	ldw	r16,0(sp)
  807734:	dec00704 	addi	sp,sp,28
  807738:	f800283a 	ret

0080773c <__i2b>:
  80773c:	defffd04 	addi	sp,sp,-12
  807740:	dc000015 	stw	r16,0(sp)
  807744:	04000044 	movi	r16,1
  807748:	dc800115 	stw	r18,4(sp)
  80774c:	2825883a 	mov	r18,r5
  807750:	800b883a 	mov	r5,r16
  807754:	dfc00215 	stw	ra,8(sp)
  807758:	08070440 	call	807044 <_Balloc>
  80775c:	14000415 	stw	r16,16(r2)
  807760:	14800515 	stw	r18,20(r2)
  807764:	dfc00217 	ldw	ra,8(sp)
  807768:	dc800117 	ldw	r18,4(sp)
  80776c:	dc000017 	ldw	r16,0(sp)
  807770:	dec00304 	addi	sp,sp,12
  807774:	f800283a 	ret

00807778 <__multadd>:
  807778:	defffa04 	addi	sp,sp,-24
  80777c:	dc800215 	stw	r18,8(sp)
  807780:	2c800417 	ldw	r18,16(r5)
  807784:	dd000415 	stw	r20,16(sp)
  807788:	dcc00315 	stw	r19,12(sp)
  80778c:	dc000015 	stw	r16,0(sp)
  807790:	dfc00515 	stw	ra,20(sp)
  807794:	3821883a 	mov	r16,r7
  807798:	dc400115 	stw	r17,4(sp)
  80779c:	2827883a 	mov	r19,r5
  8077a0:	2029883a 	mov	r20,r4
  8077a4:	2a000504 	addi	r8,r5,20
  8077a8:	000f883a 	mov	r7,zero
  8077ac:	40800017 	ldw	r2,0(r8)
  8077b0:	39c00044 	addi	r7,r7,1
  8077b4:	10ffffcc 	andi	r3,r2,65535
  8077b8:	1987383a 	mul	r3,r3,r6
  8077bc:	1004d43a 	srli	r2,r2,16
  8077c0:	1c07883a 	add	r3,r3,r16
  8077c4:	180ad43a 	srli	r5,r3,16
  8077c8:	1185383a 	mul	r2,r2,r6
  8077cc:	18ffffcc 	andi	r3,r3,65535
  8077d0:	1145883a 	add	r2,r2,r5
  8077d4:	1008943a 	slli	r4,r2,16
  8077d8:	1020d43a 	srli	r16,r2,16
  8077dc:	20c9883a 	add	r4,r4,r3
  8077e0:	41000015 	stw	r4,0(r8)
  8077e4:	42000104 	addi	r8,r8,4
  8077e8:	3cbff016 	blt	r7,r18,8077ac <__multadd+0x34>
  8077ec:	80000826 	beq	r16,zero,807810 <__multadd+0x98>
  8077f0:	98800217 	ldw	r2,8(r19)
  8077f4:	90800f0e 	bge	r18,r2,807834 <__multadd+0xbc>
  8077f8:	9485883a 	add	r2,r18,r18
  8077fc:	1085883a 	add	r2,r2,r2
  807800:	14c5883a 	add	r2,r2,r19
  807804:	90c00044 	addi	r3,r18,1
  807808:	14000515 	stw	r16,20(r2)
  80780c:	98c00415 	stw	r3,16(r19)
  807810:	9805883a 	mov	r2,r19
  807814:	dfc00517 	ldw	ra,20(sp)
  807818:	dd000417 	ldw	r20,16(sp)
  80781c:	dcc00317 	ldw	r19,12(sp)
  807820:	dc800217 	ldw	r18,8(sp)
  807824:	dc400117 	ldw	r17,4(sp)
  807828:	dc000017 	ldw	r16,0(sp)
  80782c:	dec00604 	addi	sp,sp,24
  807830:	f800283a 	ret
  807834:	99400117 	ldw	r5,4(r19)
  807838:	a009883a 	mov	r4,r20
  80783c:	29400044 	addi	r5,r5,1
  807840:	08070440 	call	807044 <_Balloc>
  807844:	99800417 	ldw	r6,16(r19)
  807848:	99400304 	addi	r5,r19,12
  80784c:	11000304 	addi	r4,r2,12
  807850:	318d883a 	add	r6,r6,r6
  807854:	318d883a 	add	r6,r6,r6
  807858:	31800204 	addi	r6,r6,8
  80785c:	1023883a 	mov	r17,r2
  807860:	08068ac0 	call	8068ac <memcpy>
  807864:	980b883a 	mov	r5,r19
  807868:	a009883a 	mov	r4,r20
  80786c:	0806ac40 	call	806ac4 <_Bfree>
  807870:	8827883a 	mov	r19,r17
  807874:	003fe006 	br	8077f8 <__multadd+0x80>

00807878 <__pow5mult>:
  807878:	defffa04 	addi	sp,sp,-24
  80787c:	308000cc 	andi	r2,r6,3
  807880:	dd000415 	stw	r20,16(sp)
  807884:	dcc00315 	stw	r19,12(sp)
  807888:	dc000015 	stw	r16,0(sp)
  80788c:	dfc00515 	stw	ra,20(sp)
  807890:	dc800215 	stw	r18,8(sp)
  807894:	dc400115 	stw	r17,4(sp)
  807898:	3021883a 	mov	r16,r6
  80789c:	2027883a 	mov	r19,r4
  8078a0:	2829883a 	mov	r20,r5
  8078a4:	10002b1e 	bne	r2,zero,807954 <__pow5mult+0xdc>
  8078a8:	8025d0ba 	srai	r18,r16,2
  8078ac:	90001b26 	beq	r18,zero,80791c <__pow5mult+0xa4>
  8078b0:	9c001217 	ldw	r16,72(r19)
  8078b4:	8000081e 	bne	r16,zero,8078d8 <__pow5mult+0x60>
  8078b8:	00003006 	br	80797c <__pow5mult+0x104>
  8078bc:	800b883a 	mov	r5,r16
  8078c0:	800d883a 	mov	r6,r16
  8078c4:	9809883a 	mov	r4,r19
  8078c8:	90001426 	beq	r18,zero,80791c <__pow5mult+0xa4>
  8078cc:	80800017 	ldw	r2,0(r16)
  8078d0:	10001b26 	beq	r2,zero,807940 <__pow5mult+0xc8>
  8078d4:	1021883a 	mov	r16,r2
  8078d8:	9080004c 	andi	r2,r18,1
  8078dc:	1005003a 	cmpeq	r2,r2,zero
  8078e0:	9025d07a 	srai	r18,r18,1
  8078e4:	800d883a 	mov	r6,r16
  8078e8:	9809883a 	mov	r4,r19
  8078ec:	a00b883a 	mov	r5,r20
  8078f0:	103ff21e 	bne	r2,zero,8078bc <__pow5mult+0x44>
  8078f4:	08075540 	call	807554 <__multiply>
  8078f8:	a00b883a 	mov	r5,r20
  8078fc:	9809883a 	mov	r4,r19
  807900:	1023883a 	mov	r17,r2
  807904:	0806ac40 	call	806ac4 <_Bfree>
  807908:	8829883a 	mov	r20,r17
  80790c:	800b883a 	mov	r5,r16
  807910:	800d883a 	mov	r6,r16
  807914:	9809883a 	mov	r4,r19
  807918:	903fec1e 	bne	r18,zero,8078cc <__pow5mult+0x54>
  80791c:	a005883a 	mov	r2,r20
  807920:	dfc00517 	ldw	ra,20(sp)
  807924:	dd000417 	ldw	r20,16(sp)
  807928:	dcc00317 	ldw	r19,12(sp)
  80792c:	dc800217 	ldw	r18,8(sp)
  807930:	dc400117 	ldw	r17,4(sp)
  807934:	dc000017 	ldw	r16,0(sp)
  807938:	dec00604 	addi	sp,sp,24
  80793c:	f800283a 	ret
  807940:	08075540 	call	807554 <__multiply>
  807944:	80800015 	stw	r2,0(r16)
  807948:	1021883a 	mov	r16,r2
  80794c:	10000015 	stw	zero,0(r2)
  807950:	003fe106 	br	8078d8 <__pow5mult+0x60>
  807954:	1085883a 	add	r2,r2,r2
  807958:	00c02074 	movhi	r3,129
  80795c:	18ff4204 	addi	r3,r3,-760
  807960:	1085883a 	add	r2,r2,r2
  807964:	10c5883a 	add	r2,r2,r3
  807968:	11bfff17 	ldw	r6,-4(r2)
  80796c:	000f883a 	mov	r7,zero
  807970:	08077780 	call	807778 <__multadd>
  807974:	1029883a 	mov	r20,r2
  807978:	003fcb06 	br	8078a8 <__pow5mult+0x30>
  80797c:	9809883a 	mov	r4,r19
  807980:	01409c44 	movi	r5,625
  807984:	080773c0 	call	80773c <__i2b>
  807988:	98801215 	stw	r2,72(r19)
  80798c:	1021883a 	mov	r16,r2
  807990:	10000015 	stw	zero,0(r2)
  807994:	003fd006 	br	8078d8 <__pow5mult+0x60>

00807998 <__s2b>:
  807998:	defff904 	addi	sp,sp,-28
  80799c:	dcc00315 	stw	r19,12(sp)
  8079a0:	dc800215 	stw	r18,8(sp)
  8079a4:	2827883a 	mov	r19,r5
  8079a8:	2025883a 	mov	r18,r4
  8079ac:	01400244 	movi	r5,9
  8079b0:	39000204 	addi	r4,r7,8
  8079b4:	dd000415 	stw	r20,16(sp)
  8079b8:	dc400115 	stw	r17,4(sp)
  8079bc:	dfc00615 	stw	ra,24(sp)
  8079c0:	dd400515 	stw	r21,20(sp)
  8079c4:	dc000015 	stw	r16,0(sp)
  8079c8:	3829883a 	mov	r20,r7
  8079cc:	3023883a 	mov	r17,r6
  8079d0:	080a9080 	call	80a908 <__divsi3>
  8079d4:	00c00044 	movi	r3,1
  8079d8:	1880350e 	bge	r3,r2,807ab0 <__s2b+0x118>
  8079dc:	000b883a 	mov	r5,zero
  8079e0:	18c7883a 	add	r3,r3,r3
  8079e4:	29400044 	addi	r5,r5,1
  8079e8:	18bffd16 	blt	r3,r2,8079e0 <__s2b+0x48>
  8079ec:	9009883a 	mov	r4,r18
  8079f0:	08070440 	call	807044 <_Balloc>
  8079f4:	1011883a 	mov	r8,r2
  8079f8:	d8800717 	ldw	r2,28(sp)
  8079fc:	00c00044 	movi	r3,1
  807a00:	01800244 	movi	r6,9
  807a04:	40800515 	stw	r2,20(r8)
  807a08:	40c00415 	stw	r3,16(r8)
  807a0c:	3440260e 	bge	r6,r17,807aa8 <__s2b+0x110>
  807a10:	3021883a 	mov	r16,r6
  807a14:	99ab883a 	add	r21,r19,r6
  807a18:	9c05883a 	add	r2,r19,r16
  807a1c:	11c00007 	ldb	r7,0(r2)
  807a20:	400b883a 	mov	r5,r8
  807a24:	9009883a 	mov	r4,r18
  807a28:	39fff404 	addi	r7,r7,-48
  807a2c:	01800284 	movi	r6,10
  807a30:	08077780 	call	807778 <__multadd>
  807a34:	84000044 	addi	r16,r16,1
  807a38:	1011883a 	mov	r8,r2
  807a3c:	8c3ff61e 	bne	r17,r16,807a18 <__s2b+0x80>
  807a40:	ac45883a 	add	r2,r21,r17
  807a44:	117ffe04 	addi	r5,r2,-8
  807a48:	880d883a 	mov	r6,r17
  807a4c:	35000c0e 	bge	r6,r20,807a80 <__s2b+0xe8>
  807a50:	a185c83a 	sub	r2,r20,r6
  807a54:	2821883a 	mov	r16,r5
  807a58:	28a3883a 	add	r17,r5,r2
  807a5c:	81c00007 	ldb	r7,0(r16)
  807a60:	400b883a 	mov	r5,r8
  807a64:	9009883a 	mov	r4,r18
  807a68:	39fff404 	addi	r7,r7,-48
  807a6c:	01800284 	movi	r6,10
  807a70:	08077780 	call	807778 <__multadd>
  807a74:	84000044 	addi	r16,r16,1
  807a78:	1011883a 	mov	r8,r2
  807a7c:	847ff71e 	bne	r16,r17,807a5c <__s2b+0xc4>
  807a80:	4005883a 	mov	r2,r8
  807a84:	dfc00617 	ldw	ra,24(sp)
  807a88:	dd400517 	ldw	r21,20(sp)
  807a8c:	dd000417 	ldw	r20,16(sp)
  807a90:	dcc00317 	ldw	r19,12(sp)
  807a94:	dc800217 	ldw	r18,8(sp)
  807a98:	dc400117 	ldw	r17,4(sp)
  807a9c:	dc000017 	ldw	r16,0(sp)
  807aa0:	dec00704 	addi	sp,sp,28
  807aa4:	f800283a 	ret
  807aa8:	99400284 	addi	r5,r19,10
  807aac:	003fe706 	br	807a4c <__s2b+0xb4>
  807ab0:	000b883a 	mov	r5,zero
  807ab4:	003fcd06 	br	8079ec <__s2b+0x54>

00807ab8 <putc>:
  807ab8:	defffc04 	addi	sp,sp,-16
  807abc:	dc800215 	stw	r18,8(sp)
  807ac0:	04802074 	movhi	r18,129
  807ac4:	94870f04 	addi	r18,r18,7228
  807ac8:	90c00017 	ldw	r3,0(r18)
  807acc:	dc400115 	stw	r17,4(sp)
  807ad0:	dc000015 	stw	r16,0(sp)
  807ad4:	dfc00315 	stw	ra,12(sp)
  807ad8:	2023883a 	mov	r17,r4
  807adc:	2821883a 	mov	r16,r5
  807ae0:	18000226 	beq	r3,zero,807aec <putc+0x34>
  807ae4:	18800e17 	ldw	r2,56(r3)
  807ae8:	10001126 	beq	r2,zero,807b30 <putc+0x78>
  807aec:	80800217 	ldw	r2,8(r16)
  807af0:	10ffffc4 	addi	r3,r2,-1
  807af4:	80c00215 	stw	r3,8(r16)
  807af8:	18001316 	blt	r3,zero,807b48 <putc+0x90>
  807afc:	80800017 	ldw	r2,0(r16)
  807b00:	14400005 	stb	r17,0(r2)
  807b04:	80c00017 	ldw	r3,0(r16)
  807b08:	18800044 	addi	r2,r3,1
  807b0c:	18c00003 	ldbu	r3,0(r3)
  807b10:	80800015 	stw	r2,0(r16)
  807b14:	1805883a 	mov	r2,r3
  807b18:	dfc00317 	ldw	ra,12(sp)
  807b1c:	dc800217 	ldw	r18,8(sp)
  807b20:	dc400117 	ldw	r17,4(sp)
  807b24:	dc000017 	ldw	r16,0(sp)
  807b28:	dec00404 	addi	sp,sp,16
  807b2c:	f800283a 	ret
  807b30:	1809883a 	mov	r4,r3
  807b34:	080517c0 	call	80517c <__sinit>
  807b38:	80800217 	ldw	r2,8(r16)
  807b3c:	10ffffc4 	addi	r3,r2,-1
  807b40:	80c00215 	stw	r3,8(r16)
  807b44:	183fed0e 	bge	r3,zero,807afc <putc+0x44>
  807b48:	80800617 	ldw	r2,24(r16)
  807b4c:	18800f16 	blt	r3,r2,807b8c <putc+0xd4>
  807b50:	80800017 	ldw	r2,0(r16)
  807b54:	14400005 	stb	r17,0(r2)
  807b58:	81000017 	ldw	r4,0(r16)
  807b5c:	00800284 	movi	r2,10
  807b60:	20c00003 	ldbu	r3,0(r4)
  807b64:	18801226 	beq	r3,r2,807bb0 <putc+0xf8>
  807b68:	20800044 	addi	r2,r4,1
  807b6c:	80800015 	stw	r2,0(r16)
  807b70:	1805883a 	mov	r2,r3
  807b74:	dfc00317 	ldw	ra,12(sp)
  807b78:	dc800217 	ldw	r18,8(sp)
  807b7c:	dc400117 	ldw	r17,4(sp)
  807b80:	dc000017 	ldw	r16,0(sp)
  807b84:	dec00404 	addi	sp,sp,16
  807b88:	f800283a 	ret
  807b8c:	91000017 	ldw	r4,0(r18)
  807b90:	880b883a 	mov	r5,r17
  807b94:	800d883a 	mov	r6,r16
  807b98:	dfc00317 	ldw	ra,12(sp)
  807b9c:	dc800217 	ldw	r18,8(sp)
  807ba0:	dc400117 	ldw	r17,4(sp)
  807ba4:	dc000017 	ldw	r16,0(sp)
  807ba8:	dec00404 	addi	sp,sp,16
  807bac:	08085f41 	jmpi	8085f4 <__swbuf_r>
  807bb0:	91000017 	ldw	r4,0(r18)
  807bb4:	180b883a 	mov	r5,r3
  807bb8:	003ff606 	br	807b94 <putc+0xdc>

00807bbc <_putc_r>:
  807bbc:	defffc04 	addi	sp,sp,-16
  807bc0:	dc400215 	stw	r17,8(sp)
  807bc4:	dc000115 	stw	r16,4(sp)
  807bc8:	dfc00315 	stw	ra,12(sp)
  807bcc:	2021883a 	mov	r16,r4
  807bd0:	2823883a 	mov	r17,r5
  807bd4:	20000226 	beq	r4,zero,807be0 <_putc_r+0x24>
  807bd8:	20800e17 	ldw	r2,56(r4)
  807bdc:	10001026 	beq	r2,zero,807c20 <_putc_r+0x64>
  807be0:	30800217 	ldw	r2,8(r6)
  807be4:	10ffffc4 	addi	r3,r2,-1
  807be8:	30c00215 	stw	r3,8(r6)
  807bec:	18001316 	blt	r3,zero,807c3c <_putc_r+0x80>
  807bf0:	30800017 	ldw	r2,0(r6)
  807bf4:	14400005 	stb	r17,0(r2)
  807bf8:	30c00017 	ldw	r3,0(r6)
  807bfc:	18800044 	addi	r2,r3,1
  807c00:	18c00003 	ldbu	r3,0(r3)
  807c04:	30800015 	stw	r2,0(r6)
  807c08:	1805883a 	mov	r2,r3
  807c0c:	dfc00317 	ldw	ra,12(sp)
  807c10:	dc400217 	ldw	r17,8(sp)
  807c14:	dc000117 	ldw	r16,4(sp)
  807c18:	dec00404 	addi	sp,sp,16
  807c1c:	f800283a 	ret
  807c20:	d9800015 	stw	r6,0(sp)
  807c24:	080517c0 	call	80517c <__sinit>
  807c28:	d9800017 	ldw	r6,0(sp)
  807c2c:	30800217 	ldw	r2,8(r6)
  807c30:	10ffffc4 	addi	r3,r2,-1
  807c34:	30c00215 	stw	r3,8(r6)
  807c38:	183fed0e 	bge	r3,zero,807bf0 <_putc_r+0x34>
  807c3c:	30800617 	ldw	r2,24(r6)
  807c40:	18800e16 	blt	r3,r2,807c7c <_putc_r+0xc0>
  807c44:	30800017 	ldw	r2,0(r6)
  807c48:	14400005 	stb	r17,0(r2)
  807c4c:	31000017 	ldw	r4,0(r6)
  807c50:	00800284 	movi	r2,10
  807c54:	20c00003 	ldbu	r3,0(r4)
  807c58:	18800f26 	beq	r3,r2,807c98 <_putc_r+0xdc>
  807c5c:	20800044 	addi	r2,r4,1
  807c60:	30800015 	stw	r2,0(r6)
  807c64:	1805883a 	mov	r2,r3
  807c68:	dfc00317 	ldw	ra,12(sp)
  807c6c:	dc400217 	ldw	r17,8(sp)
  807c70:	dc000117 	ldw	r16,4(sp)
  807c74:	dec00404 	addi	sp,sp,16
  807c78:	f800283a 	ret
  807c7c:	8009883a 	mov	r4,r16
  807c80:	880b883a 	mov	r5,r17
  807c84:	dfc00317 	ldw	ra,12(sp)
  807c88:	dc400217 	ldw	r17,8(sp)
  807c8c:	dc000117 	ldw	r16,4(sp)
  807c90:	dec00404 	addi	sp,sp,16
  807c94:	08085f41 	jmpi	8085f4 <__swbuf_r>
  807c98:	8009883a 	mov	r4,r16
  807c9c:	180b883a 	mov	r5,r3
  807ca0:	003ff806 	br	807c84 <_putc_r+0xc8>

00807ca4 <_realloc_r>:
  807ca4:	defff404 	addi	sp,sp,-48
  807ca8:	dd800815 	stw	r22,32(sp)
  807cac:	dc800415 	stw	r18,16(sp)
  807cb0:	dc400315 	stw	r17,12(sp)
  807cb4:	dfc00b15 	stw	ra,44(sp)
  807cb8:	df000a15 	stw	fp,40(sp)
  807cbc:	ddc00915 	stw	r23,36(sp)
  807cc0:	dd400715 	stw	r21,28(sp)
  807cc4:	dd000615 	stw	r20,24(sp)
  807cc8:	dcc00515 	stw	r19,20(sp)
  807ccc:	dc000215 	stw	r16,8(sp)
  807cd0:	2825883a 	mov	r18,r5
  807cd4:	3023883a 	mov	r17,r6
  807cd8:	202d883a 	mov	r22,r4
  807cdc:	2800c926 	beq	r5,zero,808004 <_realloc_r+0x360>
  807ce0:	080b8ec0 	call	80b8ec <__malloc_lock>
  807ce4:	943ffe04 	addi	r16,r18,-8
  807ce8:	88c002c4 	addi	r3,r17,11
  807cec:	00800584 	movi	r2,22
  807cf0:	82000117 	ldw	r8,4(r16)
  807cf4:	10c01b2e 	bgeu	r2,r3,807d64 <_realloc_r+0xc0>
  807cf8:	00bffe04 	movi	r2,-8
  807cfc:	188e703a 	and	r7,r3,r2
  807d00:	3839883a 	mov	fp,r7
  807d04:	38001a16 	blt	r7,zero,807d70 <_realloc_r+0xcc>
  807d08:	e4401936 	bltu	fp,r17,807d70 <_realloc_r+0xcc>
  807d0c:	013fff04 	movi	r4,-4
  807d10:	4126703a 	and	r19,r8,r4
  807d14:	99c02616 	blt	r19,r7,807db0 <_realloc_r+0x10c>
  807d18:	802b883a 	mov	r21,r16
  807d1c:	9829883a 	mov	r20,r19
  807d20:	84000204 	addi	r16,r16,8
  807d24:	a80f883a 	mov	r7,r21
  807d28:	a70dc83a 	sub	r6,r20,fp
  807d2c:	008003c4 	movi	r2,15
  807d30:	1180c136 	bltu	r2,r6,808038 <_realloc_r+0x394>
  807d34:	38800117 	ldw	r2,4(r7)
  807d38:	a549883a 	add	r4,r20,r21
  807d3c:	1080004c 	andi	r2,r2,1
  807d40:	a084b03a 	or	r2,r20,r2
  807d44:	38800115 	stw	r2,4(r7)
  807d48:	20c00117 	ldw	r3,4(r4)
  807d4c:	18c00054 	ori	r3,r3,1
  807d50:	20c00115 	stw	r3,4(r4)
  807d54:	b009883a 	mov	r4,r22
  807d58:	080b90c0 	call	80b90c <__malloc_unlock>
  807d5c:	8023883a 	mov	r17,r16
  807d60:	00000606 	br	807d7c <_realloc_r+0xd8>
  807d64:	01c00404 	movi	r7,16
  807d68:	3839883a 	mov	fp,r7
  807d6c:	e47fe72e 	bgeu	fp,r17,807d0c <_realloc_r+0x68>
  807d70:	00800304 	movi	r2,12
  807d74:	0023883a 	mov	r17,zero
  807d78:	b0800015 	stw	r2,0(r22)
  807d7c:	8805883a 	mov	r2,r17
  807d80:	dfc00b17 	ldw	ra,44(sp)
  807d84:	df000a17 	ldw	fp,40(sp)
  807d88:	ddc00917 	ldw	r23,36(sp)
  807d8c:	dd800817 	ldw	r22,32(sp)
  807d90:	dd400717 	ldw	r21,28(sp)
  807d94:	dd000617 	ldw	r20,24(sp)
  807d98:	dcc00517 	ldw	r19,20(sp)
  807d9c:	dc800417 	ldw	r18,16(sp)
  807da0:	dc400317 	ldw	r17,12(sp)
  807da4:	dc000217 	ldw	r16,8(sp)
  807da8:	dec00c04 	addi	sp,sp,48
  807dac:	f800283a 	ret
  807db0:	00802074 	movhi	r2,129
  807db4:	10814d04 	addi	r2,r2,1332
  807db8:	12400217 	ldw	r9,8(r2)
  807dbc:	84cd883a 	add	r6,r16,r19
  807dc0:	802b883a 	mov	r21,r16
  807dc4:	3240b926 	beq	r6,r9,8080ac <_realloc_r+0x408>
  807dc8:	31400117 	ldw	r5,4(r6)
  807dcc:	00bfff84 	movi	r2,-2
  807dd0:	2884703a 	and	r2,r5,r2
  807dd4:	1185883a 	add	r2,r2,r6
  807dd8:	10c00117 	ldw	r3,4(r2)
  807ddc:	18c0004c 	andi	r3,r3,1
  807de0:	1807003a 	cmpeq	r3,r3,zero
  807de4:	1800a326 	beq	r3,zero,808074 <_realloc_r+0x3d0>
  807de8:	2908703a 	and	r4,r5,r4
  807dec:	9929883a 	add	r20,r19,r4
  807df0:	a1c0a30e 	bge	r20,r7,808080 <_realloc_r+0x3dc>
  807df4:	4080004c 	andi	r2,r8,1
  807df8:	1000551e 	bne	r2,zero,807f50 <_realloc_r+0x2ac>
  807dfc:	80800017 	ldw	r2,0(r16)
  807e00:	80afc83a 	sub	r23,r16,r2
  807e04:	b8c00117 	ldw	r3,4(r23)
  807e08:	00bfff04 	movi	r2,-4
  807e0c:	1884703a 	and	r2,r3,r2
  807e10:	30002e26 	beq	r6,zero,807ecc <_realloc_r+0x228>
  807e14:	3240b926 	beq	r6,r9,8080fc <_realloc_r+0x458>
  807e18:	98a9883a 	add	r20,r19,r2
  807e1c:	2509883a 	add	r4,r4,r20
  807e20:	d9000015 	stw	r4,0(sp)
  807e24:	21c02a16 	blt	r4,r7,807ed0 <_realloc_r+0x22c>
  807e28:	30800317 	ldw	r2,12(r6)
  807e2c:	30c00217 	ldw	r3,8(r6)
  807e30:	01400904 	movi	r5,36
  807e34:	99bfff04 	addi	r6,r19,-4
  807e38:	18800315 	stw	r2,12(r3)
  807e3c:	10c00215 	stw	r3,8(r2)
  807e40:	b9000317 	ldw	r4,12(r23)
  807e44:	b8800217 	ldw	r2,8(r23)
  807e48:	b82b883a 	mov	r21,r23
  807e4c:	bc000204 	addi	r16,r23,8
  807e50:	20800215 	stw	r2,8(r4)
  807e54:	11000315 	stw	r4,12(r2)
  807e58:	2980e436 	bltu	r5,r6,8081ec <_realloc_r+0x548>
  807e5c:	008004c4 	movi	r2,19
  807e60:	9009883a 	mov	r4,r18
  807e64:	8011883a 	mov	r8,r16
  807e68:	11800f2e 	bgeu	r2,r6,807ea8 <_realloc_r+0x204>
  807e6c:	90800017 	ldw	r2,0(r18)
  807e70:	ba000404 	addi	r8,r23,16
  807e74:	91000204 	addi	r4,r18,8
  807e78:	b8800215 	stw	r2,8(r23)
  807e7c:	90c00117 	ldw	r3,4(r18)
  807e80:	008006c4 	movi	r2,27
  807e84:	b8c00315 	stw	r3,12(r23)
  807e88:	1180072e 	bgeu	r2,r6,807ea8 <_realloc_r+0x204>
  807e8c:	90c00217 	ldw	r3,8(r18)
  807e90:	ba000604 	addi	r8,r23,24
  807e94:	91000404 	addi	r4,r18,16
  807e98:	b8c00415 	stw	r3,16(r23)
  807e9c:	90800317 	ldw	r2,12(r18)
  807ea0:	b8800515 	stw	r2,20(r23)
  807ea4:	3140e726 	beq	r6,r5,808244 <_realloc_r+0x5a0>
  807ea8:	20800017 	ldw	r2,0(r4)
  807eac:	dd000017 	ldw	r20,0(sp)
  807eb0:	b80f883a 	mov	r7,r23
  807eb4:	40800015 	stw	r2,0(r8)
  807eb8:	20c00117 	ldw	r3,4(r4)
  807ebc:	40c00115 	stw	r3,4(r8)
  807ec0:	20800217 	ldw	r2,8(r4)
  807ec4:	40800215 	stw	r2,8(r8)
  807ec8:	003f9706 	br	807d28 <_realloc_r+0x84>
  807ecc:	98a9883a 	add	r20,r19,r2
  807ed0:	a1c01f16 	blt	r20,r7,807f50 <_realloc_r+0x2ac>
  807ed4:	b8c00317 	ldw	r3,12(r23)
  807ed8:	b8800217 	ldw	r2,8(r23)
  807edc:	99bfff04 	addi	r6,r19,-4
  807ee0:	01400904 	movi	r5,36
  807ee4:	b82b883a 	mov	r21,r23
  807ee8:	18800215 	stw	r2,8(r3)
  807eec:	10c00315 	stw	r3,12(r2)
  807ef0:	bc000204 	addi	r16,r23,8
  807ef4:	2980c336 	bltu	r5,r6,808204 <_realloc_r+0x560>
  807ef8:	008004c4 	movi	r2,19
  807efc:	9009883a 	mov	r4,r18
  807f00:	8011883a 	mov	r8,r16
  807f04:	11800f2e 	bgeu	r2,r6,807f44 <_realloc_r+0x2a0>
  807f08:	90800017 	ldw	r2,0(r18)
  807f0c:	ba000404 	addi	r8,r23,16
  807f10:	91000204 	addi	r4,r18,8
  807f14:	b8800215 	stw	r2,8(r23)
  807f18:	90c00117 	ldw	r3,4(r18)
  807f1c:	008006c4 	movi	r2,27
  807f20:	b8c00315 	stw	r3,12(r23)
  807f24:	1180072e 	bgeu	r2,r6,807f44 <_realloc_r+0x2a0>
  807f28:	90c00217 	ldw	r3,8(r18)
  807f2c:	ba000604 	addi	r8,r23,24
  807f30:	91000404 	addi	r4,r18,16
  807f34:	b8c00415 	stw	r3,16(r23)
  807f38:	90800317 	ldw	r2,12(r18)
  807f3c:	b8800515 	stw	r2,20(r23)
  807f40:	3140c726 	beq	r6,r5,808260 <_realloc_r+0x5bc>
  807f44:	20800017 	ldw	r2,0(r4)
  807f48:	b80f883a 	mov	r7,r23
  807f4c:	003fd906 	br	807eb4 <_realloc_r+0x210>
  807f50:	880b883a 	mov	r5,r17
  807f54:	b009883a 	mov	r4,r22
  807f58:	08060880 	call	806088 <_malloc_r>
  807f5c:	1023883a 	mov	r17,r2
  807f60:	10002526 	beq	r2,zero,807ff8 <_realloc_r+0x354>
  807f64:	80800117 	ldw	r2,4(r16)
  807f68:	00ffff84 	movi	r3,-2
  807f6c:	893ffe04 	addi	r4,r17,-8
  807f70:	10c4703a 	and	r2,r2,r3
  807f74:	8085883a 	add	r2,r16,r2
  807f78:	20809526 	beq	r4,r2,8081d0 <_realloc_r+0x52c>
  807f7c:	99bfff04 	addi	r6,r19,-4
  807f80:	01c00904 	movi	r7,36
  807f84:	39804536 	bltu	r7,r6,80809c <_realloc_r+0x3f8>
  807f88:	008004c4 	movi	r2,19
  807f8c:	9009883a 	mov	r4,r18
  807f90:	880b883a 	mov	r5,r17
  807f94:	11800f2e 	bgeu	r2,r6,807fd4 <_realloc_r+0x330>
  807f98:	90800017 	ldw	r2,0(r18)
  807f9c:	89400204 	addi	r5,r17,8
  807fa0:	91000204 	addi	r4,r18,8
  807fa4:	88800015 	stw	r2,0(r17)
  807fa8:	90c00117 	ldw	r3,4(r18)
  807fac:	008006c4 	movi	r2,27
  807fb0:	88c00115 	stw	r3,4(r17)
  807fb4:	1180072e 	bgeu	r2,r6,807fd4 <_realloc_r+0x330>
  807fb8:	90c00217 	ldw	r3,8(r18)
  807fbc:	89400404 	addi	r5,r17,16
  807fc0:	91000404 	addi	r4,r18,16
  807fc4:	88c00215 	stw	r3,8(r17)
  807fc8:	90800317 	ldw	r2,12(r18)
  807fcc:	88800315 	stw	r2,12(r17)
  807fd0:	31c09126 	beq	r6,r7,808218 <_realloc_r+0x574>
  807fd4:	20800017 	ldw	r2,0(r4)
  807fd8:	28800015 	stw	r2,0(r5)
  807fdc:	20c00117 	ldw	r3,4(r4)
  807fe0:	28c00115 	stw	r3,4(r5)
  807fe4:	20800217 	ldw	r2,8(r4)
  807fe8:	28800215 	stw	r2,8(r5)
  807fec:	900b883a 	mov	r5,r18
  807ff0:	b009883a 	mov	r4,r22
  807ff4:	08055000 	call	805500 <_free_r>
  807ff8:	b009883a 	mov	r4,r22
  807ffc:	080b90c0 	call	80b90c <__malloc_unlock>
  808000:	003f5e06 	br	807d7c <_realloc_r+0xd8>
  808004:	300b883a 	mov	r5,r6
  808008:	dfc00b17 	ldw	ra,44(sp)
  80800c:	df000a17 	ldw	fp,40(sp)
  808010:	ddc00917 	ldw	r23,36(sp)
  808014:	dd800817 	ldw	r22,32(sp)
  808018:	dd400717 	ldw	r21,28(sp)
  80801c:	dd000617 	ldw	r20,24(sp)
  808020:	dcc00517 	ldw	r19,20(sp)
  808024:	dc800417 	ldw	r18,16(sp)
  808028:	dc400317 	ldw	r17,12(sp)
  80802c:	dc000217 	ldw	r16,8(sp)
  808030:	dec00c04 	addi	sp,sp,48
  808034:	08060881 	jmpi	806088 <_malloc_r>
  808038:	38800117 	ldw	r2,4(r7)
  80803c:	e54b883a 	add	r5,fp,r21
  808040:	31000054 	ori	r4,r6,1
  808044:	1080004c 	andi	r2,r2,1
  808048:	1704b03a 	or	r2,r2,fp
  80804c:	38800115 	stw	r2,4(r7)
  808050:	29000115 	stw	r4,4(r5)
  808054:	2987883a 	add	r3,r5,r6
  808058:	18800117 	ldw	r2,4(r3)
  80805c:	29400204 	addi	r5,r5,8
  808060:	b009883a 	mov	r4,r22
  808064:	10800054 	ori	r2,r2,1
  808068:	18800115 	stw	r2,4(r3)
  80806c:	08055000 	call	805500 <_free_r>
  808070:	003f3806 	br	807d54 <_realloc_r+0xb0>
  808074:	000d883a 	mov	r6,zero
  808078:	0009883a 	mov	r4,zero
  80807c:	003f5d06 	br	807df4 <_realloc_r+0x150>
  808080:	30c00217 	ldw	r3,8(r6)
  808084:	30800317 	ldw	r2,12(r6)
  808088:	800f883a 	mov	r7,r16
  80808c:	84000204 	addi	r16,r16,8
  808090:	10c00215 	stw	r3,8(r2)
  808094:	18800315 	stw	r2,12(r3)
  808098:	003f2306 	br	807d28 <_realloc_r+0x84>
  80809c:	8809883a 	mov	r4,r17
  8080a0:	900b883a 	mov	r5,r18
  8080a4:	080694c0 	call	80694c <memmove>
  8080a8:	003fd006 	br	807fec <_realloc_r+0x348>
  8080ac:	30800117 	ldw	r2,4(r6)
  8080b0:	e0c00404 	addi	r3,fp,16
  8080b4:	1108703a 	and	r4,r2,r4
  8080b8:	9905883a 	add	r2,r19,r4
  8080bc:	10ff4d16 	blt	r2,r3,807df4 <_realloc_r+0x150>
  8080c0:	1705c83a 	sub	r2,r2,fp
  8080c4:	870b883a 	add	r5,r16,fp
  8080c8:	10800054 	ori	r2,r2,1
  8080cc:	28800115 	stw	r2,4(r5)
  8080d0:	80c00117 	ldw	r3,4(r16)
  8080d4:	00802074 	movhi	r2,129
  8080d8:	10814d04 	addi	r2,r2,1332
  8080dc:	b009883a 	mov	r4,r22
  8080e0:	18c0004c 	andi	r3,r3,1
  8080e4:	e0c6b03a 	or	r3,fp,r3
  8080e8:	11400215 	stw	r5,8(r2)
  8080ec:	80c00115 	stw	r3,4(r16)
  8080f0:	080b90c0 	call	80b90c <__malloc_unlock>
  8080f4:	84400204 	addi	r17,r16,8
  8080f8:	003f2006 	br	807d7c <_realloc_r+0xd8>
  8080fc:	98a9883a 	add	r20,r19,r2
  808100:	2509883a 	add	r4,r4,r20
  808104:	e0800404 	addi	r2,fp,16
  808108:	d9000115 	stw	r4,4(sp)
  80810c:	20bf7016 	blt	r4,r2,807ed0 <_realloc_r+0x22c>
  808110:	b8c00317 	ldw	r3,12(r23)
  808114:	b8800217 	ldw	r2,8(r23)
  808118:	99bfff04 	addi	r6,r19,-4
  80811c:	01400904 	movi	r5,36
  808120:	18800215 	stw	r2,8(r3)
  808124:	10c00315 	stw	r3,12(r2)
  808128:	bc400204 	addi	r17,r23,8
  80812c:	29804136 	bltu	r5,r6,808234 <_realloc_r+0x590>
  808130:	008004c4 	movi	r2,19
  808134:	9009883a 	mov	r4,r18
  808138:	880f883a 	mov	r7,r17
  80813c:	11800f2e 	bgeu	r2,r6,80817c <_realloc_r+0x4d8>
  808140:	90800017 	ldw	r2,0(r18)
  808144:	b9c00404 	addi	r7,r23,16
  808148:	91000204 	addi	r4,r18,8
  80814c:	b8800215 	stw	r2,8(r23)
  808150:	90c00117 	ldw	r3,4(r18)
  808154:	008006c4 	movi	r2,27
  808158:	b8c00315 	stw	r3,12(r23)
  80815c:	1180072e 	bgeu	r2,r6,80817c <_realloc_r+0x4d8>
  808160:	90c00217 	ldw	r3,8(r18)
  808164:	b9c00604 	addi	r7,r23,24
  808168:	91000404 	addi	r4,r18,16
  80816c:	b8c00415 	stw	r3,16(r23)
  808170:	90800317 	ldw	r2,12(r18)
  808174:	b8800515 	stw	r2,20(r23)
  808178:	31404026 	beq	r6,r5,80827c <_realloc_r+0x5d8>
  80817c:	20800017 	ldw	r2,0(r4)
  808180:	38800015 	stw	r2,0(r7)
  808184:	20c00117 	ldw	r3,4(r4)
  808188:	38c00115 	stw	r3,4(r7)
  80818c:	20800217 	ldw	r2,8(r4)
  808190:	38800215 	stw	r2,8(r7)
  808194:	d8c00117 	ldw	r3,4(sp)
  808198:	bf0b883a 	add	r5,r23,fp
  80819c:	b009883a 	mov	r4,r22
  8081a0:	1f05c83a 	sub	r2,r3,fp
  8081a4:	10800054 	ori	r2,r2,1
  8081a8:	28800115 	stw	r2,4(r5)
  8081ac:	b8c00117 	ldw	r3,4(r23)
  8081b0:	00802074 	movhi	r2,129
  8081b4:	10814d04 	addi	r2,r2,1332
  8081b8:	11400215 	stw	r5,8(r2)
  8081bc:	18c0004c 	andi	r3,r3,1
  8081c0:	e0c6b03a 	or	r3,fp,r3
  8081c4:	b8c00115 	stw	r3,4(r23)
  8081c8:	080b90c0 	call	80b90c <__malloc_unlock>
  8081cc:	003eeb06 	br	807d7c <_realloc_r+0xd8>
  8081d0:	20800117 	ldw	r2,4(r4)
  8081d4:	00ffff04 	movi	r3,-4
  8081d8:	800f883a 	mov	r7,r16
  8081dc:	10c4703a 	and	r2,r2,r3
  8081e0:	98a9883a 	add	r20,r19,r2
  8081e4:	84000204 	addi	r16,r16,8
  8081e8:	003ecf06 	br	807d28 <_realloc_r+0x84>
  8081ec:	900b883a 	mov	r5,r18
  8081f0:	8009883a 	mov	r4,r16
  8081f4:	080694c0 	call	80694c <memmove>
  8081f8:	dd000017 	ldw	r20,0(sp)
  8081fc:	b80f883a 	mov	r7,r23
  808200:	003ec906 	br	807d28 <_realloc_r+0x84>
  808204:	900b883a 	mov	r5,r18
  808208:	8009883a 	mov	r4,r16
  80820c:	080694c0 	call	80694c <memmove>
  808210:	b80f883a 	mov	r7,r23
  808214:	003ec406 	br	807d28 <_realloc_r+0x84>
  808218:	90c00417 	ldw	r3,16(r18)
  80821c:	89400604 	addi	r5,r17,24
  808220:	91000604 	addi	r4,r18,24
  808224:	88c00415 	stw	r3,16(r17)
  808228:	90800517 	ldw	r2,20(r18)
  80822c:	88800515 	stw	r2,20(r17)
  808230:	003f6806 	br	807fd4 <_realloc_r+0x330>
  808234:	900b883a 	mov	r5,r18
  808238:	8809883a 	mov	r4,r17
  80823c:	080694c0 	call	80694c <memmove>
  808240:	003fd406 	br	808194 <_realloc_r+0x4f0>
  808244:	90c00417 	ldw	r3,16(r18)
  808248:	91000604 	addi	r4,r18,24
  80824c:	ba000804 	addi	r8,r23,32
  808250:	b8c00615 	stw	r3,24(r23)
  808254:	90800517 	ldw	r2,20(r18)
  808258:	b8800715 	stw	r2,28(r23)
  80825c:	003f1206 	br	807ea8 <_realloc_r+0x204>
  808260:	90c00417 	ldw	r3,16(r18)
  808264:	91000604 	addi	r4,r18,24
  808268:	ba000804 	addi	r8,r23,32
  80826c:	b8c00615 	stw	r3,24(r23)
  808270:	90800517 	ldw	r2,20(r18)
  808274:	b8800715 	stw	r2,28(r23)
  808278:	003f3206 	br	807f44 <_realloc_r+0x2a0>
  80827c:	90c00417 	ldw	r3,16(r18)
  808280:	91000604 	addi	r4,r18,24
  808284:	b9c00804 	addi	r7,r23,32
  808288:	b8c00615 	stw	r3,24(r23)
  80828c:	90800517 	ldw	r2,20(r18)
  808290:	b8800715 	stw	r2,28(r23)
  808294:	003fb906 	br	80817c <_realloc_r+0x4d8>

00808298 <__isinfd>:
  808298:	200d883a 	mov	r6,r4
  80829c:	0109c83a 	sub	r4,zero,r4
  8082a0:	2188b03a 	or	r4,r4,r6
  8082a4:	2008d7fa 	srli	r4,r4,31
  8082a8:	00a00034 	movhi	r2,32768
  8082ac:	10bfffc4 	addi	r2,r2,-1
  8082b0:	1144703a 	and	r2,r2,r5
  8082b4:	2088b03a 	or	r4,r4,r2
  8082b8:	009ffc34 	movhi	r2,32752
  8082bc:	1105c83a 	sub	r2,r2,r4
  8082c0:	0087c83a 	sub	r3,zero,r2
  8082c4:	10c4b03a 	or	r2,r2,r3
  8082c8:	1004d7fa 	srli	r2,r2,31
  8082cc:	00c00044 	movi	r3,1
  8082d0:	1885c83a 	sub	r2,r3,r2
  8082d4:	f800283a 	ret

008082d8 <__isnand>:
  8082d8:	200d883a 	mov	r6,r4
  8082dc:	0109c83a 	sub	r4,zero,r4
  8082e0:	2188b03a 	or	r4,r4,r6
  8082e4:	2008d7fa 	srli	r4,r4,31
  8082e8:	00a00034 	movhi	r2,32768
  8082ec:	10bfffc4 	addi	r2,r2,-1
  8082f0:	1144703a 	and	r2,r2,r5
  8082f4:	2088b03a 	or	r4,r4,r2
  8082f8:	009ffc34 	movhi	r2,32752
  8082fc:	1105c83a 	sub	r2,r2,r4
  808300:	1004d7fa 	srli	r2,r2,31
  808304:	f800283a 	ret

00808308 <_sbrk_r>:
  808308:	defffd04 	addi	sp,sp,-12
  80830c:	dc000015 	stw	r16,0(sp)
  808310:	04002074 	movhi	r16,129
  808314:	840e8304 	addi	r16,r16,14860
  808318:	dc400115 	stw	r17,4(sp)
  80831c:	80000015 	stw	zero,0(r16)
  808320:	2023883a 	mov	r17,r4
  808324:	2809883a 	mov	r4,r5
  808328:	dfc00215 	stw	ra,8(sp)
  80832c:	080bb0c0 	call	80bb0c <sbrk>
  808330:	1007883a 	mov	r3,r2
  808334:	00bfffc4 	movi	r2,-1
  808338:	18800626 	beq	r3,r2,808354 <_sbrk_r+0x4c>
  80833c:	1805883a 	mov	r2,r3
  808340:	dfc00217 	ldw	ra,8(sp)
  808344:	dc400117 	ldw	r17,4(sp)
  808348:	dc000017 	ldw	r16,0(sp)
  80834c:	dec00304 	addi	sp,sp,12
  808350:	f800283a 	ret
  808354:	80800017 	ldw	r2,0(r16)
  808358:	103ff826 	beq	r2,zero,80833c <_sbrk_r+0x34>
  80835c:	88800015 	stw	r2,0(r17)
  808360:	1805883a 	mov	r2,r3
  808364:	dfc00217 	ldw	ra,8(sp)
  808368:	dc400117 	ldw	r17,4(sp)
  80836c:	dc000017 	ldw	r16,0(sp)
  808370:	dec00304 	addi	sp,sp,12
  808374:	f800283a 	ret

00808378 <__sclose>:
  808378:	2940038f 	ldh	r5,14(r5)
  80837c:	080886c1 	jmpi	80886c <_close_r>

00808380 <__sseek>:
  808380:	defffe04 	addi	sp,sp,-8
  808384:	dc000015 	stw	r16,0(sp)
  808388:	2821883a 	mov	r16,r5
  80838c:	2940038f 	ldh	r5,14(r5)
  808390:	dfc00115 	stw	ra,4(sp)
  808394:	0808ae40 	call	808ae4 <_lseek_r>
  808398:	1007883a 	mov	r3,r2
  80839c:	00bfffc4 	movi	r2,-1
  8083a0:	18800926 	beq	r3,r2,8083c8 <__sseek+0x48>
  8083a4:	8080030b 	ldhu	r2,12(r16)
  8083a8:	80c01415 	stw	r3,80(r16)
  8083ac:	10840014 	ori	r2,r2,4096
  8083b0:	8080030d 	sth	r2,12(r16)
  8083b4:	1805883a 	mov	r2,r3
  8083b8:	dfc00117 	ldw	ra,4(sp)
  8083bc:	dc000017 	ldw	r16,0(sp)
  8083c0:	dec00204 	addi	sp,sp,8
  8083c4:	f800283a 	ret
  8083c8:	8080030b 	ldhu	r2,12(r16)
  8083cc:	10bbffcc 	andi	r2,r2,61439
  8083d0:	8080030d 	sth	r2,12(r16)
  8083d4:	1805883a 	mov	r2,r3
  8083d8:	dfc00117 	ldw	ra,4(sp)
  8083dc:	dc000017 	ldw	r16,0(sp)
  8083e0:	dec00204 	addi	sp,sp,8
  8083e4:	f800283a 	ret

008083e8 <__swrite>:
  8083e8:	2880030b 	ldhu	r2,12(r5)
  8083ec:	defffb04 	addi	sp,sp,-20
  8083f0:	dcc00315 	stw	r19,12(sp)
  8083f4:	1080400c 	andi	r2,r2,256
  8083f8:	dc800215 	stw	r18,8(sp)
  8083fc:	dc400115 	stw	r17,4(sp)
  808400:	dc000015 	stw	r16,0(sp)
  808404:	3027883a 	mov	r19,r6
  808408:	3825883a 	mov	r18,r7
  80840c:	dfc00415 	stw	ra,16(sp)
  808410:	2821883a 	mov	r16,r5
  808414:	000d883a 	mov	r6,zero
  808418:	01c00084 	movi	r7,2
  80841c:	2023883a 	mov	r17,r4
  808420:	10000226 	beq	r2,zero,80842c <__swrite+0x44>
  808424:	2940038f 	ldh	r5,14(r5)
  808428:	0808ae40 	call	808ae4 <_lseek_r>
  80842c:	8080030b 	ldhu	r2,12(r16)
  808430:	8140038f 	ldh	r5,14(r16)
  808434:	8809883a 	mov	r4,r17
  808438:	10bbffcc 	andi	r2,r2,61439
  80843c:	980d883a 	mov	r6,r19
  808440:	900f883a 	mov	r7,r18
  808444:	8080030d 	sth	r2,12(r16)
  808448:	dfc00417 	ldw	ra,16(sp)
  80844c:	dcc00317 	ldw	r19,12(sp)
  808450:	dc800217 	ldw	r18,8(sp)
  808454:	dc400117 	ldw	r17,4(sp)
  808458:	dc000017 	ldw	r16,0(sp)
  80845c:	dec00504 	addi	sp,sp,20
  808460:	08087401 	jmpi	808740 <_write_r>

00808464 <__sread>:
  808464:	defffe04 	addi	sp,sp,-8
  808468:	dc000015 	stw	r16,0(sp)
  80846c:	2821883a 	mov	r16,r5
  808470:	2940038f 	ldh	r5,14(r5)
  808474:	dfc00115 	stw	ra,4(sp)
  808478:	0808b5c0 	call	808b5c <_read_r>
  80847c:	1007883a 	mov	r3,r2
  808480:	10000816 	blt	r2,zero,8084a4 <__sread+0x40>
  808484:	80801417 	ldw	r2,80(r16)
  808488:	10c5883a 	add	r2,r2,r3
  80848c:	80801415 	stw	r2,80(r16)
  808490:	1805883a 	mov	r2,r3
  808494:	dfc00117 	ldw	ra,4(sp)
  808498:	dc000017 	ldw	r16,0(sp)
  80849c:	dec00204 	addi	sp,sp,8
  8084a0:	f800283a 	ret
  8084a4:	8080030b 	ldhu	r2,12(r16)
  8084a8:	10bbffcc 	andi	r2,r2,61439
  8084ac:	8080030d 	sth	r2,12(r16)
  8084b0:	1805883a 	mov	r2,r3
  8084b4:	dfc00117 	ldw	ra,4(sp)
  8084b8:	dc000017 	ldw	r16,0(sp)
  8084bc:	dec00204 	addi	sp,sp,8
  8084c0:	f800283a 	ret

008084c4 <strcmp>:
  8084c4:	2144b03a 	or	r2,r4,r5
  8084c8:	108000cc 	andi	r2,r2,3
  8084cc:	10001d1e 	bne	r2,zero,808544 <strcmp+0x80>
  8084d0:	200f883a 	mov	r7,r4
  8084d4:	28800017 	ldw	r2,0(r5)
  8084d8:	21000017 	ldw	r4,0(r4)
  8084dc:	280d883a 	mov	r6,r5
  8084e0:	2080161e 	bne	r4,r2,80853c <strcmp+0x78>
  8084e4:	023fbff4 	movhi	r8,65279
  8084e8:	423fbfc4 	addi	r8,r8,-257
  8084ec:	2207883a 	add	r3,r4,r8
  8084f0:	01602074 	movhi	r5,32897
  8084f4:	29602004 	addi	r5,r5,-32640
  8084f8:	1946703a 	and	r3,r3,r5
  8084fc:	0104303a 	nor	r2,zero,r4
  808500:	10c4703a 	and	r2,r2,r3
  808504:	10001c1e 	bne	r2,zero,808578 <strcmp+0xb4>
  808508:	4013883a 	mov	r9,r8
  80850c:	2811883a 	mov	r8,r5
  808510:	00000106 	br	808518 <strcmp+0x54>
  808514:	1800181e 	bne	r3,zero,808578 <strcmp+0xb4>
  808518:	39c00104 	addi	r7,r7,4
  80851c:	39000017 	ldw	r4,0(r7)
  808520:	31800104 	addi	r6,r6,4
  808524:	31400017 	ldw	r5,0(r6)
  808528:	2245883a 	add	r2,r4,r9
  80852c:	1204703a 	and	r2,r2,r8
  808530:	0106303a 	nor	r3,zero,r4
  808534:	1886703a 	and	r3,r3,r2
  808538:	217ff626 	beq	r4,r5,808514 <strcmp+0x50>
  80853c:	3809883a 	mov	r4,r7
  808540:	300b883a 	mov	r5,r6
  808544:	20c00007 	ldb	r3,0(r4)
  808548:	1800051e 	bne	r3,zero,808560 <strcmp+0x9c>
  80854c:	00000606 	br	808568 <strcmp+0xa4>
  808550:	21000044 	addi	r4,r4,1
  808554:	20c00007 	ldb	r3,0(r4)
  808558:	29400044 	addi	r5,r5,1
  80855c:	18000226 	beq	r3,zero,808568 <strcmp+0xa4>
  808560:	28800007 	ldb	r2,0(r5)
  808564:	18bffa26 	beq	r3,r2,808550 <strcmp+0x8c>
  808568:	20c00003 	ldbu	r3,0(r4)
  80856c:	28800003 	ldbu	r2,0(r5)
  808570:	1885c83a 	sub	r2,r3,r2
  808574:	f800283a 	ret
  808578:	0005883a 	mov	r2,zero
  80857c:	f800283a 	ret

00808580 <strlen>:
  808580:	208000cc 	andi	r2,r4,3
  808584:	2011883a 	mov	r8,r4
  808588:	1000161e 	bne	r2,zero,8085e4 <strlen+0x64>
  80858c:	20c00017 	ldw	r3,0(r4)
  808590:	017fbff4 	movhi	r5,65279
  808594:	297fbfc4 	addi	r5,r5,-257
  808598:	01e02074 	movhi	r7,32897
  80859c:	39e02004 	addi	r7,r7,-32640
  8085a0:	1945883a 	add	r2,r3,r5
  8085a4:	11c4703a 	and	r2,r2,r7
  8085a8:	00c6303a 	nor	r3,zero,r3
  8085ac:	1886703a 	and	r3,r3,r2
  8085b0:	18000c1e 	bne	r3,zero,8085e4 <strlen+0x64>
  8085b4:	280d883a 	mov	r6,r5
  8085b8:	380b883a 	mov	r5,r7
  8085bc:	21000104 	addi	r4,r4,4
  8085c0:	20800017 	ldw	r2,0(r4)
  8085c4:	1187883a 	add	r3,r2,r6
  8085c8:	1946703a 	and	r3,r3,r5
  8085cc:	0084303a 	nor	r2,zero,r2
  8085d0:	10c4703a 	and	r2,r2,r3
  8085d4:	103ff926 	beq	r2,zero,8085bc <strlen+0x3c>
  8085d8:	20800007 	ldb	r2,0(r4)
  8085dc:	10000326 	beq	r2,zero,8085ec <strlen+0x6c>
  8085e0:	21000044 	addi	r4,r4,1
  8085e4:	20800007 	ldb	r2,0(r4)
  8085e8:	103ffd1e 	bne	r2,zero,8085e0 <strlen+0x60>
  8085ec:	2205c83a 	sub	r2,r4,r8
  8085f0:	f800283a 	ret

008085f4 <__swbuf_r>:
  8085f4:	defffc04 	addi	sp,sp,-16
  8085f8:	dc400215 	stw	r17,8(sp)
  8085fc:	dc000115 	stw	r16,4(sp)
  808600:	dfc00315 	stw	ra,12(sp)
  808604:	2023883a 	mov	r17,r4
  808608:	2821883a 	mov	r16,r5
  80860c:	20000226 	beq	r4,zero,808618 <__swbuf_r+0x24>
  808610:	20800e17 	ldw	r2,56(r4)
  808614:	10002f26 	beq	r2,zero,8086d4 <__swbuf_r+0xe0>
  808618:	3080030b 	ldhu	r2,12(r6)
  80861c:	30c00617 	ldw	r3,24(r6)
  808620:	1080020c 	andi	r2,r2,8
  808624:	30c00215 	stw	r3,8(r6)
  808628:	10002226 	beq	r2,zero,8086b4 <__swbuf_r+0xc0>
  80862c:	30c00417 	ldw	r3,16(r6)
  808630:	18002026 	beq	r3,zero,8086b4 <__swbuf_r+0xc0>
  808634:	31000017 	ldw	r4,0(r6)
  808638:	30800517 	ldw	r2,20(r6)
  80863c:	20c7c83a 	sub	r3,r4,r3
  808640:	18802f0e 	bge	r3,r2,808700 <__swbuf_r+0x10c>
  808644:	19400044 	addi	r5,r3,1
  808648:	30800217 	ldw	r2,8(r6)
  80864c:	84003fcc 	andi	r16,r16,255
  808650:	20c00044 	addi	r3,r4,1
  808654:	10bfffc4 	addi	r2,r2,-1
  808658:	30800215 	stw	r2,8(r6)
  80865c:	24000005 	stb	r16,0(r4)
  808660:	30800517 	ldw	r2,20(r6)
  808664:	30c00015 	stw	r3,0(r6)
  808668:	11400c26 	beq	r2,r5,80869c <__swbuf_r+0xa8>
  80866c:	3080030b 	ldhu	r2,12(r6)
  808670:	1080004c 	andi	r2,r2,1
  808674:	1005003a 	cmpeq	r2,r2,zero
  808678:	10000626 	beq	r2,zero,808694 <__swbuf_r+0xa0>
  80867c:	8005883a 	mov	r2,r16
  808680:	dfc00317 	ldw	ra,12(sp)
  808684:	dc400217 	ldw	r17,8(sp)
  808688:	dc000117 	ldw	r16,4(sp)
  80868c:	dec00404 	addi	sp,sp,16
  808690:	f800283a 	ret
  808694:	00800284 	movi	r2,10
  808698:	80bff81e 	bne	r16,r2,80867c <__swbuf_r+0x88>
  80869c:	8809883a 	mov	r4,r17
  8086a0:	300b883a 	mov	r5,r6
  8086a4:	0804ee40 	call	804ee4 <_fflush_r>
  8086a8:	103ff426 	beq	r2,zero,80867c <__swbuf_r+0x88>
  8086ac:	043fffc4 	movi	r16,-1
  8086b0:	003ff206 	br	80867c <__swbuf_r+0x88>
  8086b4:	300b883a 	mov	r5,r6
  8086b8:	8809883a 	mov	r4,r17
  8086bc:	d9800015 	stw	r6,0(sp)
  8086c0:	08034280 	call	803428 <__swsetup_r>
  8086c4:	d9800017 	ldw	r6,0(sp)
  8086c8:	1000061e 	bne	r2,zero,8086e4 <__swbuf_r+0xf0>
  8086cc:	30c00417 	ldw	r3,16(r6)
  8086d0:	003fd806 	br	808634 <__swbuf_r+0x40>
  8086d4:	d9800015 	stw	r6,0(sp)
  8086d8:	080517c0 	call	80517c <__sinit>
  8086dc:	d9800017 	ldw	r6,0(sp)
  8086e0:	003fcd06 	br	808618 <__swbuf_r+0x24>
  8086e4:	3080030b 	ldhu	r2,12(r6)
  8086e8:	00c00244 	movi	r3,9
  8086ec:	043fffc4 	movi	r16,-1
  8086f0:	10801014 	ori	r2,r2,64
  8086f4:	3080030d 	sth	r2,12(r6)
  8086f8:	88c00015 	stw	r3,0(r17)
  8086fc:	003fdf06 	br	80867c <__swbuf_r+0x88>
  808700:	300b883a 	mov	r5,r6
  808704:	8809883a 	mov	r4,r17
  808708:	d9800015 	stw	r6,0(sp)
  80870c:	0804ee40 	call	804ee4 <_fflush_r>
  808710:	d9800017 	ldw	r6,0(sp)
  808714:	103fe51e 	bne	r2,zero,8086ac <__swbuf_r+0xb8>
  808718:	31000017 	ldw	r4,0(r6)
  80871c:	01400044 	movi	r5,1
  808720:	003fc906 	br	808648 <__swbuf_r+0x54>

00808724 <__swbuf>:
  808724:	01802074 	movhi	r6,129
  808728:	31870f04 	addi	r6,r6,7228
  80872c:	2007883a 	mov	r3,r4
  808730:	31000017 	ldw	r4,0(r6)
  808734:	280d883a 	mov	r6,r5
  808738:	180b883a 	mov	r5,r3
  80873c:	08085f41 	jmpi	8085f4 <__swbuf_r>

00808740 <_write_r>:
  808740:	defffd04 	addi	sp,sp,-12
  808744:	dc000015 	stw	r16,0(sp)
  808748:	04002074 	movhi	r16,129
  80874c:	840e8304 	addi	r16,r16,14860
  808750:	dc400115 	stw	r17,4(sp)
  808754:	80000015 	stw	zero,0(r16)
  808758:	2023883a 	mov	r17,r4
  80875c:	2809883a 	mov	r4,r5
  808760:	300b883a 	mov	r5,r6
  808764:	380d883a 	mov	r6,r7
  808768:	dfc00215 	stw	ra,8(sp)
  80876c:	080bbc80 	call	80bbc8 <write>
  808770:	1007883a 	mov	r3,r2
  808774:	00bfffc4 	movi	r2,-1
  808778:	18800626 	beq	r3,r2,808794 <_write_r+0x54>
  80877c:	1805883a 	mov	r2,r3
  808780:	dfc00217 	ldw	ra,8(sp)
  808784:	dc400117 	ldw	r17,4(sp)
  808788:	dc000017 	ldw	r16,0(sp)
  80878c:	dec00304 	addi	sp,sp,12
  808790:	f800283a 	ret
  808794:	80800017 	ldw	r2,0(r16)
  808798:	103ff826 	beq	r2,zero,80877c <_write_r+0x3c>
  80879c:	88800015 	stw	r2,0(r17)
  8087a0:	1805883a 	mov	r2,r3
  8087a4:	dfc00217 	ldw	ra,8(sp)
  8087a8:	dc400117 	ldw	r17,4(sp)
  8087ac:	dc000017 	ldw	r16,0(sp)
  8087b0:	dec00304 	addi	sp,sp,12
  8087b4:	f800283a 	ret

008087b8 <_calloc_r>:
  8087b8:	298b383a 	mul	r5,r5,r6
  8087bc:	defffe04 	addi	sp,sp,-8
  8087c0:	dc000015 	stw	r16,0(sp)
  8087c4:	dfc00115 	stw	ra,4(sp)
  8087c8:	08060880 	call	806088 <_malloc_r>
  8087cc:	1021883a 	mov	r16,r2
  8087d0:	01c00904 	movi	r7,36
  8087d4:	10000d26 	beq	r2,zero,80880c <_calloc_r+0x54>
  8087d8:	10ffff17 	ldw	r3,-4(r2)
  8087dc:	1009883a 	mov	r4,r2
  8087e0:	00bfff04 	movi	r2,-4
  8087e4:	1886703a 	and	r3,r3,r2
  8087e8:	1887883a 	add	r3,r3,r2
  8087ec:	180d883a 	mov	r6,r3
  8087f0:	000b883a 	mov	r5,zero
  8087f4:	38c01736 	bltu	r7,r3,808854 <_calloc_r+0x9c>
  8087f8:	008004c4 	movi	r2,19
  8087fc:	10c00836 	bltu	r2,r3,808820 <_calloc_r+0x68>
  808800:	20000215 	stw	zero,8(r4)
  808804:	20000015 	stw	zero,0(r4)
  808808:	20000115 	stw	zero,4(r4)
  80880c:	8005883a 	mov	r2,r16
  808810:	dfc00117 	ldw	ra,4(sp)
  808814:	dc000017 	ldw	r16,0(sp)
  808818:	dec00204 	addi	sp,sp,8
  80881c:	f800283a 	ret
  808820:	008006c4 	movi	r2,27
  808824:	80000015 	stw	zero,0(r16)
  808828:	80000115 	stw	zero,4(r16)
  80882c:	81000204 	addi	r4,r16,8
  808830:	10fff32e 	bgeu	r2,r3,808800 <_calloc_r+0x48>
  808834:	80000215 	stw	zero,8(r16)
  808838:	80000315 	stw	zero,12(r16)
  80883c:	81000404 	addi	r4,r16,16
  808840:	19ffef1e 	bne	r3,r7,808800 <_calloc_r+0x48>
  808844:	81000604 	addi	r4,r16,24
  808848:	80000415 	stw	zero,16(r16)
  80884c:	80000515 	stw	zero,20(r16)
  808850:	003feb06 	br	808800 <_calloc_r+0x48>
  808854:	0806a2c0 	call	806a2c <memset>
  808858:	8005883a 	mov	r2,r16
  80885c:	dfc00117 	ldw	ra,4(sp)
  808860:	dc000017 	ldw	r16,0(sp)
  808864:	dec00204 	addi	sp,sp,8
  808868:	f800283a 	ret

0080886c <_close_r>:
  80886c:	defffd04 	addi	sp,sp,-12
  808870:	dc000015 	stw	r16,0(sp)
  808874:	04002074 	movhi	r16,129
  808878:	840e8304 	addi	r16,r16,14860
  80887c:	dc400115 	stw	r17,4(sp)
  808880:	80000015 	stw	zero,0(r16)
  808884:	2023883a 	mov	r17,r4
  808888:	2809883a 	mov	r4,r5
  80888c:	dfc00215 	stw	ra,8(sp)
  808890:	080b0040 	call	80b004 <close>
  808894:	1007883a 	mov	r3,r2
  808898:	00bfffc4 	movi	r2,-1
  80889c:	18800626 	beq	r3,r2,8088b8 <_close_r+0x4c>
  8088a0:	1805883a 	mov	r2,r3
  8088a4:	dfc00217 	ldw	ra,8(sp)
  8088a8:	dc400117 	ldw	r17,4(sp)
  8088ac:	dc000017 	ldw	r16,0(sp)
  8088b0:	dec00304 	addi	sp,sp,12
  8088b4:	f800283a 	ret
  8088b8:	80800017 	ldw	r2,0(r16)
  8088bc:	103ff826 	beq	r2,zero,8088a0 <_close_r+0x34>
  8088c0:	88800015 	stw	r2,0(r17)
  8088c4:	1805883a 	mov	r2,r3
  8088c8:	dfc00217 	ldw	ra,8(sp)
  8088cc:	dc400117 	ldw	r17,4(sp)
  8088d0:	dc000017 	ldw	r16,0(sp)
  8088d4:	dec00304 	addi	sp,sp,12
  8088d8:	f800283a 	ret

008088dc <_fclose_r>:
  8088dc:	defffc04 	addi	sp,sp,-16
  8088e0:	dc400115 	stw	r17,4(sp)
  8088e4:	dc000015 	stw	r16,0(sp)
  8088e8:	dfc00315 	stw	ra,12(sp)
  8088ec:	dc800215 	stw	r18,8(sp)
  8088f0:	2821883a 	mov	r16,r5
  8088f4:	2023883a 	mov	r17,r4
  8088f8:	28002926 	beq	r5,zero,8089a0 <_fclose_r+0xc4>
  8088fc:	080516c0 	call	80516c <__sfp_lock_acquire>
  808900:	88000226 	beq	r17,zero,80890c <_fclose_r+0x30>
  808904:	88800e17 	ldw	r2,56(r17)
  808908:	10002d26 	beq	r2,zero,8089c0 <_fclose_r+0xe4>
  80890c:	8080030f 	ldh	r2,12(r16)
  808910:	10002226 	beq	r2,zero,80899c <_fclose_r+0xc0>
  808914:	8809883a 	mov	r4,r17
  808918:	800b883a 	mov	r5,r16
  80891c:	0804ee40 	call	804ee4 <_fflush_r>
  808920:	1025883a 	mov	r18,r2
  808924:	80800b17 	ldw	r2,44(r16)
  808928:	10000426 	beq	r2,zero,80893c <_fclose_r+0x60>
  80892c:	81400717 	ldw	r5,28(r16)
  808930:	8809883a 	mov	r4,r17
  808934:	103ee83a 	callr	r2
  808938:	10002a16 	blt	r2,zero,8089e4 <_fclose_r+0x108>
  80893c:	8080030b 	ldhu	r2,12(r16)
  808940:	1080200c 	andi	r2,r2,128
  808944:	1000231e 	bne	r2,zero,8089d4 <_fclose_r+0xf8>
  808948:	81400c17 	ldw	r5,48(r16)
  80894c:	28000526 	beq	r5,zero,808964 <_fclose_r+0x88>
  808950:	80801004 	addi	r2,r16,64
  808954:	28800226 	beq	r5,r2,808960 <_fclose_r+0x84>
  808958:	8809883a 	mov	r4,r17
  80895c:	08055000 	call	805500 <_free_r>
  808960:	80000c15 	stw	zero,48(r16)
  808964:	81401117 	ldw	r5,68(r16)
  808968:	28000326 	beq	r5,zero,808978 <_fclose_r+0x9c>
  80896c:	8809883a 	mov	r4,r17
  808970:	08055000 	call	805500 <_free_r>
  808974:	80001115 	stw	zero,68(r16)
  808978:	8000030d 	sth	zero,12(r16)
  80897c:	08051700 	call	805170 <__sfp_lock_release>
  808980:	9005883a 	mov	r2,r18
  808984:	dfc00317 	ldw	ra,12(sp)
  808988:	dc800217 	ldw	r18,8(sp)
  80898c:	dc400117 	ldw	r17,4(sp)
  808990:	dc000017 	ldw	r16,0(sp)
  808994:	dec00404 	addi	sp,sp,16
  808998:	f800283a 	ret
  80899c:	08051700 	call	805170 <__sfp_lock_release>
  8089a0:	0025883a 	mov	r18,zero
  8089a4:	9005883a 	mov	r2,r18
  8089a8:	dfc00317 	ldw	ra,12(sp)
  8089ac:	dc800217 	ldw	r18,8(sp)
  8089b0:	dc400117 	ldw	r17,4(sp)
  8089b4:	dc000017 	ldw	r16,0(sp)
  8089b8:	dec00404 	addi	sp,sp,16
  8089bc:	f800283a 	ret
  8089c0:	8809883a 	mov	r4,r17
  8089c4:	080517c0 	call	80517c <__sinit>
  8089c8:	8080030f 	ldh	r2,12(r16)
  8089cc:	103fd11e 	bne	r2,zero,808914 <_fclose_r+0x38>
  8089d0:	003ff206 	br	80899c <_fclose_r+0xc0>
  8089d4:	81400417 	ldw	r5,16(r16)
  8089d8:	8809883a 	mov	r4,r17
  8089dc:	08055000 	call	805500 <_free_r>
  8089e0:	003fd906 	br	808948 <_fclose_r+0x6c>
  8089e4:	04bfffc4 	movi	r18,-1
  8089e8:	003fd406 	br	80893c <_fclose_r+0x60>

008089ec <fclose>:
  8089ec:	00802074 	movhi	r2,129
  8089f0:	10870f04 	addi	r2,r2,7228
  8089f4:	200b883a 	mov	r5,r4
  8089f8:	11000017 	ldw	r4,0(r2)
  8089fc:	08088dc1 	jmpi	8088dc <_fclose_r>

00808a00 <_fstat_r>:
  808a00:	defffd04 	addi	sp,sp,-12
  808a04:	dc000015 	stw	r16,0(sp)
  808a08:	04002074 	movhi	r16,129
  808a0c:	840e8304 	addi	r16,r16,14860
  808a10:	dc400115 	stw	r17,4(sp)
  808a14:	80000015 	stw	zero,0(r16)
  808a18:	2023883a 	mov	r17,r4
  808a1c:	2809883a 	mov	r4,r5
  808a20:	300b883a 	mov	r5,r6
  808a24:	dfc00215 	stw	ra,8(sp)
  808a28:	080b2300 	call	80b230 <fstat>
  808a2c:	1007883a 	mov	r3,r2
  808a30:	00bfffc4 	movi	r2,-1
  808a34:	18800626 	beq	r3,r2,808a50 <_fstat_r+0x50>
  808a38:	1805883a 	mov	r2,r3
  808a3c:	dfc00217 	ldw	ra,8(sp)
  808a40:	dc400117 	ldw	r17,4(sp)
  808a44:	dc000017 	ldw	r16,0(sp)
  808a48:	dec00304 	addi	sp,sp,12
  808a4c:	f800283a 	ret
  808a50:	80800017 	ldw	r2,0(r16)
  808a54:	103ff826 	beq	r2,zero,808a38 <_fstat_r+0x38>
  808a58:	88800015 	stw	r2,0(r17)
  808a5c:	1805883a 	mov	r2,r3
  808a60:	dfc00217 	ldw	ra,8(sp)
  808a64:	dc400117 	ldw	r17,4(sp)
  808a68:	dc000017 	ldw	r16,0(sp)
  808a6c:	dec00304 	addi	sp,sp,12
  808a70:	f800283a 	ret

00808a74 <_isatty_r>:
  808a74:	defffd04 	addi	sp,sp,-12
  808a78:	dc000015 	stw	r16,0(sp)
  808a7c:	04002074 	movhi	r16,129
  808a80:	840e8304 	addi	r16,r16,14860
  808a84:	dc400115 	stw	r17,4(sp)
  808a88:	80000015 	stw	zero,0(r16)
  808a8c:	2023883a 	mov	r17,r4
  808a90:	2809883a 	mov	r4,r5
  808a94:	dfc00215 	stw	ra,8(sp)
  808a98:	080b5240 	call	80b524 <isatty>
  808a9c:	1007883a 	mov	r3,r2
  808aa0:	00bfffc4 	movi	r2,-1
  808aa4:	18800626 	beq	r3,r2,808ac0 <_isatty_r+0x4c>
  808aa8:	1805883a 	mov	r2,r3
  808aac:	dfc00217 	ldw	ra,8(sp)
  808ab0:	dc400117 	ldw	r17,4(sp)
  808ab4:	dc000017 	ldw	r16,0(sp)
  808ab8:	dec00304 	addi	sp,sp,12
  808abc:	f800283a 	ret
  808ac0:	80800017 	ldw	r2,0(r16)
  808ac4:	103ff826 	beq	r2,zero,808aa8 <_isatty_r+0x34>
  808ac8:	88800015 	stw	r2,0(r17)
  808acc:	1805883a 	mov	r2,r3
  808ad0:	dfc00217 	ldw	ra,8(sp)
  808ad4:	dc400117 	ldw	r17,4(sp)
  808ad8:	dc000017 	ldw	r16,0(sp)
  808adc:	dec00304 	addi	sp,sp,12
  808ae0:	f800283a 	ret

00808ae4 <_lseek_r>:
  808ae4:	defffd04 	addi	sp,sp,-12
  808ae8:	dc000015 	stw	r16,0(sp)
  808aec:	04002074 	movhi	r16,129
  808af0:	840e8304 	addi	r16,r16,14860
  808af4:	dc400115 	stw	r17,4(sp)
  808af8:	80000015 	stw	zero,0(r16)
  808afc:	2023883a 	mov	r17,r4
  808b00:	2809883a 	mov	r4,r5
  808b04:	300b883a 	mov	r5,r6
  808b08:	380d883a 	mov	r6,r7
  808b0c:	dfc00215 	stw	ra,8(sp)
  808b10:	080b7300 	call	80b730 <lseek>
  808b14:	1007883a 	mov	r3,r2
  808b18:	00bfffc4 	movi	r2,-1
  808b1c:	18800626 	beq	r3,r2,808b38 <_lseek_r+0x54>
  808b20:	1805883a 	mov	r2,r3
  808b24:	dfc00217 	ldw	ra,8(sp)
  808b28:	dc400117 	ldw	r17,4(sp)
  808b2c:	dc000017 	ldw	r16,0(sp)
  808b30:	dec00304 	addi	sp,sp,12
  808b34:	f800283a 	ret
  808b38:	80800017 	ldw	r2,0(r16)
  808b3c:	103ff826 	beq	r2,zero,808b20 <_lseek_r+0x3c>
  808b40:	88800015 	stw	r2,0(r17)
  808b44:	1805883a 	mov	r2,r3
  808b48:	dfc00217 	ldw	ra,8(sp)
  808b4c:	dc400117 	ldw	r17,4(sp)
  808b50:	dc000017 	ldw	r16,0(sp)
  808b54:	dec00304 	addi	sp,sp,12
  808b58:	f800283a 	ret

00808b5c <_read_r>:
  808b5c:	defffd04 	addi	sp,sp,-12
  808b60:	dc000015 	stw	r16,0(sp)
  808b64:	04002074 	movhi	r16,129
  808b68:	840e8304 	addi	r16,r16,14860
  808b6c:	dc400115 	stw	r17,4(sp)
  808b70:	80000015 	stw	zero,0(r16)
  808b74:	2023883a 	mov	r17,r4
  808b78:	2809883a 	mov	r4,r5
  808b7c:	300b883a 	mov	r5,r6
  808b80:	380d883a 	mov	r6,r7
  808b84:	dfc00215 	stw	ra,8(sp)
  808b88:	080b92c0 	call	80b92c <read>
  808b8c:	1007883a 	mov	r3,r2
  808b90:	00bfffc4 	movi	r2,-1
  808b94:	18800626 	beq	r3,r2,808bb0 <_read_r+0x54>
  808b98:	1805883a 	mov	r2,r3
  808b9c:	dfc00217 	ldw	ra,8(sp)
  808ba0:	dc400117 	ldw	r17,4(sp)
  808ba4:	dc000017 	ldw	r16,0(sp)
  808ba8:	dec00304 	addi	sp,sp,12
  808bac:	f800283a 	ret
  808bb0:	80800017 	ldw	r2,0(r16)
  808bb4:	103ff826 	beq	r2,zero,808b98 <_read_r+0x3c>
  808bb8:	88800015 	stw	r2,0(r17)
  808bbc:	1805883a 	mov	r2,r3
  808bc0:	dfc00217 	ldw	ra,8(sp)
  808bc4:	dc400117 	ldw	r17,4(sp)
  808bc8:	dc000017 	ldw	r16,0(sp)
  808bcc:	dec00304 	addi	sp,sp,12
  808bd0:	f800283a 	ret

00808bd4 <__udivdi3>:
  808bd4:	defff004 	addi	sp,sp,-64
  808bd8:	2005883a 	mov	r2,r4
  808bdc:	3011883a 	mov	r8,r6
  808be0:	df000e15 	stw	fp,56(sp)
  808be4:	dd000a15 	stw	r20,40(sp)
  808be8:	dc000615 	stw	r16,24(sp)
  808bec:	dfc00f15 	stw	ra,60(sp)
  808bf0:	ddc00d15 	stw	r23,52(sp)
  808bf4:	dd800c15 	stw	r22,48(sp)
  808bf8:	dd400b15 	stw	r21,44(sp)
  808bfc:	dcc00915 	stw	r19,36(sp)
  808c00:	dc800815 	stw	r18,32(sp)
  808c04:	dc400715 	stw	r17,28(sp)
  808c08:	4021883a 	mov	r16,r8
  808c0c:	1039883a 	mov	fp,r2
  808c10:	2829883a 	mov	r20,r5
  808c14:	38003b1e 	bne	r7,zero,808d04 <__udivdi3+0x130>
  808c18:	2a005c36 	bltu	r5,r8,808d8c <__udivdi3+0x1b8>
  808c1c:	4000a626 	beq	r8,zero,808eb8 <__udivdi3+0x2e4>
  808c20:	00bfffd4 	movui	r2,65535
  808c24:	14009e36 	bltu	r2,r16,808ea0 <__udivdi3+0x2cc>
  808c28:	00803fc4 	movi	r2,255
  808c2c:	14013d36 	bltu	r2,r16,809124 <__udivdi3+0x550>
  808c30:	000b883a 	mov	r5,zero
  808c34:	0005883a 	mov	r2,zero
  808c38:	8084d83a 	srl	r2,r16,r2
  808c3c:	01002074 	movhi	r4,129
  808c40:	213f4a04 	addi	r4,r4,-728
  808c44:	01800804 	movi	r6,32
  808c48:	1105883a 	add	r2,r2,r4
  808c4c:	10c00003 	ldbu	r3,0(r2)
  808c50:	28c7883a 	add	r3,r5,r3
  808c54:	30edc83a 	sub	r22,r6,r3
  808c58:	b000ee1e 	bne	r22,zero,809014 <__udivdi3+0x440>
  808c5c:	802ad43a 	srli	r21,r16,16
  808c60:	00800044 	movi	r2,1
  808c64:	a423c83a 	sub	r17,r20,r16
  808c68:	85ffffcc 	andi	r23,r16,65535
  808c6c:	d8800315 	stw	r2,12(sp)
  808c70:	8809883a 	mov	r4,r17
  808c74:	a80b883a 	mov	r5,r21
  808c78:	080a9c80 	call	80a9c8 <__udivsi3>
  808c7c:	8809883a 	mov	r4,r17
  808c80:	a80b883a 	mov	r5,r21
  808c84:	102d883a 	mov	r22,r2
  808c88:	080a9d00 	call	80a9d0 <__umodsi3>
  808c8c:	1004943a 	slli	r2,r2,16
  808c90:	e006d43a 	srli	r3,fp,16
  808c94:	bda3383a 	mul	r17,r23,r22
  808c98:	10c4b03a 	or	r2,r2,r3
  808c9c:	1440042e 	bgeu	r2,r17,808cb0 <__udivdi3+0xdc>
  808ca0:	1405883a 	add	r2,r2,r16
  808ca4:	b5bfffc4 	addi	r22,r22,-1
  808ca8:	14000136 	bltu	r2,r16,808cb0 <__udivdi3+0xdc>
  808cac:	14413d36 	bltu	r2,r17,8091a4 <__udivdi3+0x5d0>
  808cb0:	1463c83a 	sub	r17,r2,r17
  808cb4:	8809883a 	mov	r4,r17
  808cb8:	a80b883a 	mov	r5,r21
  808cbc:	080a9c80 	call	80a9c8 <__udivsi3>
  808cc0:	8809883a 	mov	r4,r17
  808cc4:	a80b883a 	mov	r5,r21
  808cc8:	1029883a 	mov	r20,r2
  808ccc:	080a9d00 	call	80a9d0 <__umodsi3>
  808cd0:	1004943a 	slli	r2,r2,16
  808cd4:	bd09383a 	mul	r4,r23,r20
  808cd8:	e0ffffcc 	andi	r3,fp,65535
  808cdc:	10c4b03a 	or	r2,r2,r3
  808ce0:	1100042e 	bgeu	r2,r4,808cf4 <__udivdi3+0x120>
  808ce4:	8085883a 	add	r2,r16,r2
  808ce8:	a53fffc4 	addi	r20,r20,-1
  808cec:	14000136 	bltu	r2,r16,808cf4 <__udivdi3+0x120>
  808cf0:	11012036 	bltu	r2,r4,809174 <__udivdi3+0x5a0>
  808cf4:	b004943a 	slli	r2,r22,16
  808cf8:	d9000317 	ldw	r4,12(sp)
  808cfc:	a084b03a 	or	r2,r20,r2
  808d00:	00001506 	br	808d58 <__udivdi3+0x184>
  808d04:	380d883a 	mov	r6,r7
  808d08:	29c06236 	bltu	r5,r7,808e94 <__udivdi3+0x2c0>
  808d0c:	00bfffd4 	movui	r2,65535
  808d10:	11c05a36 	bltu	r2,r7,808e7c <__udivdi3+0x2a8>
  808d14:	00803fc4 	movi	r2,255
  808d18:	11c0fc36 	bltu	r2,r7,80910c <__udivdi3+0x538>
  808d1c:	000b883a 	mov	r5,zero
  808d20:	0005883a 	mov	r2,zero
  808d24:	3084d83a 	srl	r2,r6,r2
  808d28:	01002074 	movhi	r4,129
  808d2c:	213f4a04 	addi	r4,r4,-728
  808d30:	01c00804 	movi	r7,32
  808d34:	1105883a 	add	r2,r2,r4
  808d38:	10c00003 	ldbu	r3,0(r2)
  808d3c:	28c7883a 	add	r3,r5,r3
  808d40:	38efc83a 	sub	r23,r7,r3
  808d44:	b800691e 	bne	r23,zero,808eec <__udivdi3+0x318>
  808d48:	35000136 	bltu	r6,r20,808d50 <__udivdi3+0x17c>
  808d4c:	e4005136 	bltu	fp,r16,808e94 <__udivdi3+0x2c0>
  808d50:	00800044 	movi	r2,1
  808d54:	0009883a 	mov	r4,zero
  808d58:	2007883a 	mov	r3,r4
  808d5c:	dfc00f17 	ldw	ra,60(sp)
  808d60:	df000e17 	ldw	fp,56(sp)
  808d64:	ddc00d17 	ldw	r23,52(sp)
  808d68:	dd800c17 	ldw	r22,48(sp)
  808d6c:	dd400b17 	ldw	r21,44(sp)
  808d70:	dd000a17 	ldw	r20,40(sp)
  808d74:	dcc00917 	ldw	r19,36(sp)
  808d78:	dc800817 	ldw	r18,32(sp)
  808d7c:	dc400717 	ldw	r17,28(sp)
  808d80:	dc000617 	ldw	r16,24(sp)
  808d84:	dec01004 	addi	sp,sp,64
  808d88:	f800283a 	ret
  808d8c:	00bfffd4 	movui	r2,65535
  808d90:	12005036 	bltu	r2,r8,808ed4 <__udivdi3+0x300>
  808d94:	00803fc4 	movi	r2,255
  808d98:	1200e836 	bltu	r2,r8,80913c <__udivdi3+0x568>
  808d9c:	000b883a 	mov	r5,zero
  808da0:	0005883a 	mov	r2,zero
  808da4:	8084d83a 	srl	r2,r16,r2
  808da8:	01002074 	movhi	r4,129
  808dac:	213f4a04 	addi	r4,r4,-728
  808db0:	01800804 	movi	r6,32
  808db4:	1105883a 	add	r2,r2,r4
  808db8:	10c00003 	ldbu	r3,0(r2)
  808dbc:	28c7883a 	add	r3,r5,r3
  808dc0:	30cbc83a 	sub	r5,r6,r3
  808dc4:	28000626 	beq	r5,zero,808de0 <__udivdi3+0x20c>
  808dc8:	3145c83a 	sub	r2,r6,r5
  808dcc:	e084d83a 	srl	r2,fp,r2
  808dd0:	a146983a 	sll	r3,r20,r5
  808dd4:	e178983a 	sll	fp,fp,r5
  808dd8:	8160983a 	sll	r16,r16,r5
  808ddc:	18a8b03a 	or	r20,r3,r2
  808de0:	802ad43a 	srli	r21,r16,16
  808de4:	a009883a 	mov	r4,r20
  808de8:	85ffffcc 	andi	r23,r16,65535
  808dec:	a80b883a 	mov	r5,r21
  808df0:	080a9c80 	call	80a9c8 <__udivsi3>
  808df4:	a009883a 	mov	r4,r20
  808df8:	a80b883a 	mov	r5,r21
  808dfc:	102d883a 	mov	r22,r2
  808e00:	080a9d00 	call	80a9d0 <__umodsi3>
  808e04:	1004943a 	slli	r2,r2,16
  808e08:	e006d43a 	srli	r3,fp,16
  808e0c:	bda3383a 	mul	r17,r23,r22
  808e10:	10c4b03a 	or	r2,r2,r3
  808e14:	1440042e 	bgeu	r2,r17,808e28 <__udivdi3+0x254>
  808e18:	1405883a 	add	r2,r2,r16
  808e1c:	b5bfffc4 	addi	r22,r22,-1
  808e20:	14000136 	bltu	r2,r16,808e28 <__udivdi3+0x254>
  808e24:	1440d536 	bltu	r2,r17,80917c <__udivdi3+0x5a8>
  808e28:	1463c83a 	sub	r17,r2,r17
  808e2c:	8809883a 	mov	r4,r17
  808e30:	a80b883a 	mov	r5,r21
  808e34:	080a9c80 	call	80a9c8 <__udivsi3>
  808e38:	8809883a 	mov	r4,r17
  808e3c:	a80b883a 	mov	r5,r21
  808e40:	1029883a 	mov	r20,r2
  808e44:	080a9d00 	call	80a9d0 <__umodsi3>
  808e48:	1004943a 	slli	r2,r2,16
  808e4c:	bd09383a 	mul	r4,r23,r20
  808e50:	e0ffffcc 	andi	r3,fp,65535
  808e54:	10c4b03a 	or	r2,r2,r3
  808e58:	1100042e 	bgeu	r2,r4,808e6c <__udivdi3+0x298>
  808e5c:	8085883a 	add	r2,r16,r2
  808e60:	a53fffc4 	addi	r20,r20,-1
  808e64:	14000136 	bltu	r2,r16,808e6c <__udivdi3+0x298>
  808e68:	1100c736 	bltu	r2,r4,809188 <__udivdi3+0x5b4>
  808e6c:	b004943a 	slli	r2,r22,16
  808e70:	0009883a 	mov	r4,zero
  808e74:	a084b03a 	or	r2,r20,r2
  808e78:	003fb706 	br	808d58 <__udivdi3+0x184>
  808e7c:	00804034 	movhi	r2,256
  808e80:	10bfffc4 	addi	r2,r2,-1
  808e84:	11c0a436 	bltu	r2,r7,809118 <__udivdi3+0x544>
  808e88:	01400404 	movi	r5,16
  808e8c:	2805883a 	mov	r2,r5
  808e90:	003fa406 	br	808d24 <__udivdi3+0x150>
  808e94:	0005883a 	mov	r2,zero
  808e98:	0009883a 	mov	r4,zero
  808e9c:	003fae06 	br	808d58 <__udivdi3+0x184>
  808ea0:	00804034 	movhi	r2,256
  808ea4:	10bfffc4 	addi	r2,r2,-1
  808ea8:	1400a136 	bltu	r2,r16,809130 <__udivdi3+0x55c>
  808eac:	01400404 	movi	r5,16
  808eb0:	2805883a 	mov	r2,r5
  808eb4:	003f6006 	br	808c38 <__udivdi3+0x64>
  808eb8:	01000044 	movi	r4,1
  808ebc:	000b883a 	mov	r5,zero
  808ec0:	080a9c80 	call	80a9c8 <__udivsi3>
  808ec4:	1021883a 	mov	r16,r2
  808ec8:	00bfffd4 	movui	r2,65535
  808ecc:	143ff436 	bltu	r2,r16,808ea0 <__udivdi3+0x2cc>
  808ed0:	003f5506 	br	808c28 <__udivdi3+0x54>
  808ed4:	00804034 	movhi	r2,256
  808ed8:	10bfffc4 	addi	r2,r2,-1
  808edc:	12009a36 	bltu	r2,r8,809148 <__udivdi3+0x574>
  808ee0:	01400404 	movi	r5,16
  808ee4:	2805883a 	mov	r2,r5
  808ee8:	003fae06 	br	808da4 <__udivdi3+0x1d0>
  808eec:	3dc5c83a 	sub	r2,r7,r23
  808ef0:	35c8983a 	sll	r4,r6,r23
  808ef4:	8086d83a 	srl	r3,r16,r2
  808ef8:	a0a2d83a 	srl	r17,r20,r2
  808efc:	e084d83a 	srl	r2,fp,r2
  808f00:	20eab03a 	or	r21,r4,r3
  808f04:	a82cd43a 	srli	r22,r21,16
  808f08:	a5c6983a 	sll	r3,r20,r23
  808f0c:	8809883a 	mov	r4,r17
  808f10:	b00b883a 	mov	r5,r22
  808f14:	1886b03a 	or	r3,r3,r2
  808f18:	d8c00215 	stw	r3,8(sp)
  808f1c:	080a9c80 	call	80a9c8 <__udivsi3>
  808f20:	8809883a 	mov	r4,r17
  808f24:	b00b883a 	mov	r5,r22
  808f28:	1029883a 	mov	r20,r2
  808f2c:	080a9d00 	call	80a9d0 <__umodsi3>
  808f30:	a8ffffcc 	andi	r3,r21,65535
  808f34:	d8c00515 	stw	r3,20(sp)
  808f38:	d9000217 	ldw	r4,8(sp)
  808f3c:	d9400517 	ldw	r5,20(sp)
  808f40:	1004943a 	slli	r2,r2,16
  808f44:	2006d43a 	srli	r3,r4,16
  808f48:	85e0983a 	sll	r16,r16,r23
  808f4c:	2d23383a 	mul	r17,r5,r20
  808f50:	10c4b03a 	or	r2,r2,r3
  808f54:	dc000015 	stw	r16,0(sp)
  808f58:	1440032e 	bgeu	r2,r17,808f68 <__udivdi3+0x394>
  808f5c:	1545883a 	add	r2,r2,r21
  808f60:	a53fffc4 	addi	r20,r20,-1
  808f64:	15407f2e 	bgeu	r2,r21,809164 <__udivdi3+0x590>
  808f68:	1463c83a 	sub	r17,r2,r17
  808f6c:	8809883a 	mov	r4,r17
  808f70:	b00b883a 	mov	r5,r22
  808f74:	080a9c80 	call	80a9c8 <__udivsi3>
  808f78:	8809883a 	mov	r4,r17
  808f7c:	b00b883a 	mov	r5,r22
  808f80:	1021883a 	mov	r16,r2
  808f84:	080a9d00 	call	80a9d0 <__umodsi3>
  808f88:	d8c00517 	ldw	r3,20(sp)
  808f8c:	d9000217 	ldw	r4,8(sp)
  808f90:	1004943a 	slli	r2,r2,16
  808f94:	1c0f383a 	mul	r7,r3,r16
  808f98:	20ffffcc 	andi	r3,r4,65535
  808f9c:	10e2b03a 	or	r17,r2,r3
  808fa0:	89c0032e 	bgeu	r17,r7,808fb0 <__udivdi3+0x3dc>
  808fa4:	8d63883a 	add	r17,r17,r21
  808fa8:	843fffc4 	addi	r16,r16,-1
  808fac:	8d40692e 	bgeu	r17,r21,809154 <__udivdi3+0x580>
  808fb0:	a008943a 	slli	r4,r20,16
  808fb4:	d9400017 	ldw	r5,0(sp)
  808fb8:	89e3c83a 	sub	r17,r17,r7
  808fbc:	8110b03a 	or	r8,r16,r4
  808fc0:	280cd43a 	srli	r6,r5,16
  808fc4:	28ffffcc 	andi	r3,r5,65535
  808fc8:	40bfffcc 	andi	r2,r8,65535
  808fcc:	400ad43a 	srli	r5,r8,16
  808fd0:	10d3383a 	mul	r9,r2,r3
  808fd4:	1185383a 	mul	r2,r2,r6
  808fd8:	28c7383a 	mul	r3,r5,r3
  808fdc:	4808d43a 	srli	r4,r9,16
  808fe0:	298b383a 	mul	r5,r5,r6
  808fe4:	10c5883a 	add	r2,r2,r3
  808fe8:	2089883a 	add	r4,r4,r2
  808fec:	20c0022e 	bgeu	r4,r3,808ff8 <__udivdi3+0x424>
  808ff0:	00800074 	movhi	r2,1
  808ff4:	288b883a 	add	r5,r5,r2
  808ff8:	2004d43a 	srli	r2,r4,16
  808ffc:	288b883a 	add	r5,r5,r2
  809000:	89403f36 	bltu	r17,r5,809100 <__udivdi3+0x52c>
  809004:	89403926 	beq	r17,r5,8090ec <__udivdi3+0x518>
  809008:	4005883a 	mov	r2,r8
  80900c:	0009883a 	mov	r4,zero
  809010:	003f5106 	br	808d58 <__udivdi3+0x184>
  809014:	85a0983a 	sll	r16,r16,r22
  809018:	3585c83a 	sub	r2,r6,r22
  80901c:	a0a2d83a 	srl	r17,r20,r2
  809020:	802ad43a 	srli	r21,r16,16
  809024:	e084d83a 	srl	r2,fp,r2
  809028:	a586983a 	sll	r3,r20,r22
  80902c:	8809883a 	mov	r4,r17
  809030:	a80b883a 	mov	r5,r21
  809034:	1886b03a 	or	r3,r3,r2
  809038:	d8c00115 	stw	r3,4(sp)
  80903c:	080a9c80 	call	80a9c8 <__udivsi3>
  809040:	8809883a 	mov	r4,r17
  809044:	a80b883a 	mov	r5,r21
  809048:	d8800415 	stw	r2,16(sp)
  80904c:	080a9d00 	call	80a9d0 <__umodsi3>
  809050:	d9000117 	ldw	r4,4(sp)
  809054:	d9400417 	ldw	r5,16(sp)
  809058:	1004943a 	slli	r2,r2,16
  80905c:	85ffffcc 	andi	r23,r16,65535
  809060:	2006d43a 	srli	r3,r4,16
  809064:	b963383a 	mul	r17,r23,r5
  809068:	10c4b03a 	or	r2,r2,r3
  80906c:	1440042e 	bgeu	r2,r17,809080 <__udivdi3+0x4ac>
  809070:	297fffc4 	addi	r5,r5,-1
  809074:	1405883a 	add	r2,r2,r16
  809078:	d9400415 	stw	r5,16(sp)
  80907c:	1400442e 	bgeu	r2,r16,809190 <__udivdi3+0x5bc>
  809080:	1463c83a 	sub	r17,r2,r17
  809084:	8809883a 	mov	r4,r17
  809088:	a80b883a 	mov	r5,r21
  80908c:	080a9c80 	call	80a9c8 <__udivsi3>
  809090:	8809883a 	mov	r4,r17
  809094:	a80b883a 	mov	r5,r21
  809098:	1029883a 	mov	r20,r2
  80909c:	080a9d00 	call	80a9d0 <__umodsi3>
  8090a0:	d9400117 	ldw	r5,4(sp)
  8090a4:	1004943a 	slli	r2,r2,16
  8090a8:	bd09383a 	mul	r4,r23,r20
  8090ac:	28ffffcc 	andi	r3,r5,65535
  8090b0:	10c6b03a 	or	r3,r2,r3
  8090b4:	1900062e 	bgeu	r3,r4,8090d0 <__udivdi3+0x4fc>
  8090b8:	1c07883a 	add	r3,r3,r16
  8090bc:	a53fffc4 	addi	r20,r20,-1
  8090c0:	1c000336 	bltu	r3,r16,8090d0 <__udivdi3+0x4fc>
  8090c4:	1900022e 	bgeu	r3,r4,8090d0 <__udivdi3+0x4fc>
  8090c8:	a53fffc4 	addi	r20,r20,-1
  8090cc:	1c07883a 	add	r3,r3,r16
  8090d0:	d9400417 	ldw	r5,16(sp)
  8090d4:	e5b8983a 	sll	fp,fp,r22
  8090d8:	1923c83a 	sub	r17,r3,r4
  8090dc:	2804943a 	slli	r2,r5,16
  8090e0:	a0a8b03a 	or	r20,r20,r2
  8090e4:	dd000315 	stw	r20,12(sp)
  8090e8:	003ee106 	br	808c70 <__udivdi3+0x9c>
  8090ec:	2004943a 	slli	r2,r4,16
  8090f0:	e5c8983a 	sll	r4,fp,r23
  8090f4:	48ffffcc 	andi	r3,r9,65535
  8090f8:	10c5883a 	add	r2,r2,r3
  8090fc:	20bfc22e 	bgeu	r4,r2,809008 <__udivdi3+0x434>
  809100:	40bfffc4 	addi	r2,r8,-1
  809104:	0009883a 	mov	r4,zero
  809108:	003f1306 	br	808d58 <__udivdi3+0x184>
  80910c:	01400204 	movi	r5,8
  809110:	2805883a 	mov	r2,r5
  809114:	003f0306 	br	808d24 <__udivdi3+0x150>
  809118:	01400604 	movi	r5,24
  80911c:	2805883a 	mov	r2,r5
  809120:	003f0006 	br	808d24 <__udivdi3+0x150>
  809124:	01400204 	movi	r5,8
  809128:	2805883a 	mov	r2,r5
  80912c:	003ec206 	br	808c38 <__udivdi3+0x64>
  809130:	01400604 	movi	r5,24
  809134:	2805883a 	mov	r2,r5
  809138:	003ebf06 	br	808c38 <__udivdi3+0x64>
  80913c:	01400204 	movi	r5,8
  809140:	2805883a 	mov	r2,r5
  809144:	003f1706 	br	808da4 <__udivdi3+0x1d0>
  809148:	01400604 	movi	r5,24
  80914c:	2805883a 	mov	r2,r5
  809150:	003f1406 	br	808da4 <__udivdi3+0x1d0>
  809154:	89ff962e 	bgeu	r17,r7,808fb0 <__udivdi3+0x3dc>
  809158:	8d63883a 	add	r17,r17,r21
  80915c:	843fffc4 	addi	r16,r16,-1
  809160:	003f9306 	br	808fb0 <__udivdi3+0x3dc>
  809164:	147f802e 	bgeu	r2,r17,808f68 <__udivdi3+0x394>
  809168:	a53fffc4 	addi	r20,r20,-1
  80916c:	1545883a 	add	r2,r2,r21
  809170:	003f7d06 	br	808f68 <__udivdi3+0x394>
  809174:	a53fffc4 	addi	r20,r20,-1
  809178:	003ede06 	br	808cf4 <__udivdi3+0x120>
  80917c:	b5bfffc4 	addi	r22,r22,-1
  809180:	1405883a 	add	r2,r2,r16
  809184:	003f2806 	br	808e28 <__udivdi3+0x254>
  809188:	a53fffc4 	addi	r20,r20,-1
  80918c:	003f3706 	br	808e6c <__udivdi3+0x298>
  809190:	147fbb2e 	bgeu	r2,r17,809080 <__udivdi3+0x4ac>
  809194:	297fffc4 	addi	r5,r5,-1
  809198:	1405883a 	add	r2,r2,r16
  80919c:	d9400415 	stw	r5,16(sp)
  8091a0:	003fb706 	br	809080 <__udivdi3+0x4ac>
  8091a4:	b5bfffc4 	addi	r22,r22,-1
  8091a8:	1405883a 	add	r2,r2,r16
  8091ac:	003ec006 	br	808cb0 <__udivdi3+0xdc>

008091b0 <__umoddi3>:
  8091b0:	defff104 	addi	sp,sp,-60
  8091b4:	dd800b15 	stw	r22,44(sp)
  8091b8:	dd000915 	stw	r20,36(sp)
  8091bc:	dc000515 	stw	r16,20(sp)
  8091c0:	dfc00e15 	stw	ra,56(sp)
  8091c4:	df000d15 	stw	fp,52(sp)
  8091c8:	ddc00c15 	stw	r23,48(sp)
  8091cc:	dd400a15 	stw	r21,40(sp)
  8091d0:	dcc00815 	stw	r19,32(sp)
  8091d4:	dc800715 	stw	r18,28(sp)
  8091d8:	dc400615 	stw	r17,24(sp)
  8091dc:	3021883a 	mov	r16,r6
  8091e0:	202d883a 	mov	r22,r4
  8091e4:	2829883a 	mov	r20,r5
  8091e8:	38002b1e 	bne	r7,zero,809298 <__umoddi3+0xe8>
  8091ec:	29805036 	bltu	r5,r6,809330 <__umoddi3+0x180>
  8091f0:	30008a26 	beq	r6,zero,80941c <__umoddi3+0x26c>
  8091f4:	00bfffd4 	movui	r2,65535
  8091f8:	14008236 	bltu	r2,r16,809404 <__umoddi3+0x254>
  8091fc:	00803fc4 	movi	r2,255
  809200:	14013636 	bltu	r2,r16,8096dc <__umoddi3+0x52c>
  809204:	000b883a 	mov	r5,zero
  809208:	0005883a 	mov	r2,zero
  80920c:	8084d83a 	srl	r2,r16,r2
  809210:	01002074 	movhi	r4,129
  809214:	213f4a04 	addi	r4,r4,-728
  809218:	01800804 	movi	r6,32
  80921c:	1105883a 	add	r2,r2,r4
  809220:	10c00003 	ldbu	r3,0(r2)
  809224:	28c7883a 	add	r3,r5,r3
  809228:	30efc83a 	sub	r23,r6,r3
  80922c:	b800941e 	bne	r23,zero,809480 <__umoddi3+0x2d0>
  809230:	802ad43a 	srli	r21,r16,16
  809234:	a423c83a 	sub	r17,r20,r16
  809238:	0039883a 	mov	fp,zero
  80923c:	853fffcc 	andi	r20,r16,65535
  809240:	8809883a 	mov	r4,r17
  809244:	a80b883a 	mov	r5,r21
  809248:	080a9c80 	call	80a9c8 <__udivsi3>
  80924c:	8809883a 	mov	r4,r17
  809250:	a80b883a 	mov	r5,r21
  809254:	a0a3383a 	mul	r17,r20,r2
  809258:	080a9d00 	call	80a9d0 <__umodsi3>
  80925c:	1004943a 	slli	r2,r2,16
  809260:	b006d43a 	srli	r3,r22,16
  809264:	10c4b03a 	or	r2,r2,r3
  809268:	1440032e 	bgeu	r2,r17,809278 <__umoddi3+0xc8>
  80926c:	1405883a 	add	r2,r2,r16
  809270:	14000136 	bltu	r2,r16,809278 <__umoddi3+0xc8>
  809274:	14413536 	bltu	r2,r17,80974c <__umoddi3+0x59c>
  809278:	1463c83a 	sub	r17,r2,r17
  80927c:	8809883a 	mov	r4,r17
  809280:	a80b883a 	mov	r5,r21
  809284:	080a9c80 	call	80a9c8 <__udivsi3>
  809288:	8809883a 	mov	r4,r17
  80928c:	a0a3383a 	mul	r17,r20,r2
  809290:	a80b883a 	mov	r5,r21
  809294:	00004d06 	br	8093cc <__umoddi3+0x21c>
  809298:	380d883a 	mov	r6,r7
  80929c:	29c0102e 	bgeu	r5,r7,8092e0 <__umoddi3+0x130>
  8092a0:	2011883a 	mov	r8,r4
  8092a4:	2813883a 	mov	r9,r5
  8092a8:	4005883a 	mov	r2,r8
  8092ac:	4807883a 	mov	r3,r9
  8092b0:	dfc00e17 	ldw	ra,56(sp)
  8092b4:	df000d17 	ldw	fp,52(sp)
  8092b8:	ddc00c17 	ldw	r23,48(sp)
  8092bc:	dd800b17 	ldw	r22,44(sp)
  8092c0:	dd400a17 	ldw	r21,40(sp)
  8092c4:	dd000917 	ldw	r20,36(sp)
  8092c8:	dcc00817 	ldw	r19,32(sp)
  8092cc:	dc800717 	ldw	r18,28(sp)
  8092d0:	dc400617 	ldw	r17,24(sp)
  8092d4:	dc000517 	ldw	r16,20(sp)
  8092d8:	dec00f04 	addi	sp,sp,60
  8092dc:	f800283a 	ret
  8092e0:	00bfffd4 	movui	r2,65535
  8092e4:	11c05a36 	bltu	r2,r7,809450 <__umoddi3+0x2a0>
  8092e8:	00803fc4 	movi	r2,255
  8092ec:	11c0fe36 	bltu	r2,r7,8096e8 <__umoddi3+0x538>
  8092f0:	000b883a 	mov	r5,zero
  8092f4:	0005883a 	mov	r2,zero
  8092f8:	3084d83a 	srl	r2,r6,r2
  8092fc:	01002074 	movhi	r4,129
  809300:	213f4a04 	addi	r4,r4,-728
  809304:	01c00804 	movi	r7,32
  809308:	1105883a 	add	r2,r2,r4
  80930c:	10c00003 	ldbu	r3,0(r2)
  809310:	28c7883a 	add	r3,r5,r3
  809314:	38ebc83a 	sub	r21,r7,r3
  809318:	a800851e 	bne	r21,zero,809530 <__umoddi3+0x380>
  80931c:	35005236 	bltu	r6,r20,809468 <__umoddi3+0x2b8>
  809320:	b400512e 	bgeu	r22,r16,809468 <__umoddi3+0x2b8>
  809324:	b011883a 	mov	r8,r22
  809328:	a013883a 	mov	r9,r20
  80932c:	003fde06 	br	8092a8 <__umoddi3+0xf8>
  809330:	00bfffd4 	movui	r2,65535
  809334:	11804036 	bltu	r2,r6,809438 <__umoddi3+0x288>
  809338:	00803fc4 	movi	r2,255
  80933c:	1180ed36 	bltu	r2,r6,8096f4 <__umoddi3+0x544>
  809340:	000b883a 	mov	r5,zero
  809344:	0005883a 	mov	r2,zero
  809348:	8084d83a 	srl	r2,r16,r2
  80934c:	01002074 	movhi	r4,129
  809350:	213f4a04 	addi	r4,r4,-728
  809354:	01800804 	movi	r6,32
  809358:	1105883a 	add	r2,r2,r4
  80935c:	10c00003 	ldbu	r3,0(r2)
  809360:	28c7883a 	add	r3,r5,r3
  809364:	30c7c83a 	sub	r3,r6,r3
  809368:	1800bf1e 	bne	r3,zero,809668 <__umoddi3+0x4b8>
  80936c:	0039883a 	mov	fp,zero
  809370:	802ad43a 	srli	r21,r16,16
  809374:	a009883a 	mov	r4,r20
  809378:	85ffffcc 	andi	r23,r16,65535
  80937c:	a80b883a 	mov	r5,r21
  809380:	080a9c80 	call	80a9c8 <__udivsi3>
  809384:	a009883a 	mov	r4,r20
  809388:	a80b883a 	mov	r5,r21
  80938c:	b8a3383a 	mul	r17,r23,r2
  809390:	080a9d00 	call	80a9d0 <__umodsi3>
  809394:	1004943a 	slli	r2,r2,16
  809398:	b006d43a 	srli	r3,r22,16
  80939c:	10c4b03a 	or	r2,r2,r3
  8093a0:	1440032e 	bgeu	r2,r17,8093b0 <__umoddi3+0x200>
  8093a4:	1405883a 	add	r2,r2,r16
  8093a8:	14000136 	bltu	r2,r16,8093b0 <__umoddi3+0x200>
  8093ac:	1440e536 	bltu	r2,r17,809744 <__umoddi3+0x594>
  8093b0:	1463c83a 	sub	r17,r2,r17
  8093b4:	8809883a 	mov	r4,r17
  8093b8:	a80b883a 	mov	r5,r21
  8093bc:	080a9c80 	call	80a9c8 <__udivsi3>
  8093c0:	8809883a 	mov	r4,r17
  8093c4:	b8a3383a 	mul	r17,r23,r2
  8093c8:	a80b883a 	mov	r5,r21
  8093cc:	080a9d00 	call	80a9d0 <__umodsi3>
  8093d0:	1004943a 	slli	r2,r2,16
  8093d4:	b0ffffcc 	andi	r3,r22,65535
  8093d8:	10c4b03a 	or	r2,r2,r3
  8093dc:	1440042e 	bgeu	r2,r17,8093f0 <__umoddi3+0x240>
  8093e0:	1405883a 	add	r2,r2,r16
  8093e4:	14000236 	bltu	r2,r16,8093f0 <__umoddi3+0x240>
  8093e8:	1440012e 	bgeu	r2,r17,8093f0 <__umoddi3+0x240>
  8093ec:	1405883a 	add	r2,r2,r16
  8093f0:	1445c83a 	sub	r2,r2,r17
  8093f4:	1724d83a 	srl	r18,r2,fp
  8093f8:	0013883a 	mov	r9,zero
  8093fc:	9011883a 	mov	r8,r18
  809400:	003fa906 	br	8092a8 <__umoddi3+0xf8>
  809404:	00804034 	movhi	r2,256
  809408:	10bfffc4 	addi	r2,r2,-1
  80940c:	1400b036 	bltu	r2,r16,8096d0 <__umoddi3+0x520>
  809410:	01400404 	movi	r5,16
  809414:	2805883a 	mov	r2,r5
  809418:	003f7c06 	br	80920c <__umoddi3+0x5c>
  80941c:	01000044 	movi	r4,1
  809420:	000b883a 	mov	r5,zero
  809424:	080a9c80 	call	80a9c8 <__udivsi3>
  809428:	1021883a 	mov	r16,r2
  80942c:	00bfffd4 	movui	r2,65535
  809430:	143ff436 	bltu	r2,r16,809404 <__umoddi3+0x254>
  809434:	003f7106 	br	8091fc <__umoddi3+0x4c>
  809438:	00804034 	movhi	r2,256
  80943c:	10bfffc4 	addi	r2,r2,-1
  809440:	1180af36 	bltu	r2,r6,809700 <__umoddi3+0x550>
  809444:	01400404 	movi	r5,16
  809448:	2805883a 	mov	r2,r5
  80944c:	003fbe06 	br	809348 <__umoddi3+0x198>
  809450:	00804034 	movhi	r2,256
  809454:	10bfffc4 	addi	r2,r2,-1
  809458:	11c0ac36 	bltu	r2,r7,80970c <__umoddi3+0x55c>
  80945c:	01400404 	movi	r5,16
  809460:	2805883a 	mov	r2,r5
  809464:	003fa406 	br	8092f8 <__umoddi3+0x148>
  809468:	b409c83a 	sub	r4,r22,r16
  80946c:	b105803a 	cmpltu	r2,r22,r4
  809470:	a187c83a 	sub	r3,r20,r6
  809474:	18a9c83a 	sub	r20,r3,r2
  809478:	202d883a 	mov	r22,r4
  80947c:	003fa906 	br	809324 <__umoddi3+0x174>
  809480:	85e0983a 	sll	r16,r16,r23
  809484:	35c5c83a 	sub	r2,r6,r23
  809488:	a0a2d83a 	srl	r17,r20,r2
  80948c:	802ad43a 	srli	r21,r16,16
  809490:	b084d83a 	srl	r2,r22,r2
  809494:	a5c6983a 	sll	r3,r20,r23
  809498:	8809883a 	mov	r4,r17
  80949c:	a80b883a 	mov	r5,r21
  8094a0:	1886b03a 	or	r3,r3,r2
  8094a4:	d8c00115 	stw	r3,4(sp)
  8094a8:	853fffcc 	andi	r20,r16,65535
  8094ac:	080a9c80 	call	80a9c8 <__udivsi3>
  8094b0:	8809883a 	mov	r4,r17
  8094b4:	a80b883a 	mov	r5,r21
  8094b8:	a0a3383a 	mul	r17,r20,r2
  8094bc:	080a9d00 	call	80a9d0 <__umodsi3>
  8094c0:	d9000117 	ldw	r4,4(sp)
  8094c4:	1004943a 	slli	r2,r2,16
  8094c8:	b839883a 	mov	fp,r23
  8094cc:	2006d43a 	srli	r3,r4,16
  8094d0:	10c4b03a 	or	r2,r2,r3
  8094d4:	1440022e 	bgeu	r2,r17,8094e0 <__umoddi3+0x330>
  8094d8:	1405883a 	add	r2,r2,r16
  8094dc:	1400962e 	bgeu	r2,r16,809738 <__umoddi3+0x588>
  8094e0:	1463c83a 	sub	r17,r2,r17
  8094e4:	8809883a 	mov	r4,r17
  8094e8:	a80b883a 	mov	r5,r21
  8094ec:	080a9c80 	call	80a9c8 <__udivsi3>
  8094f0:	8809883a 	mov	r4,r17
  8094f4:	a80b883a 	mov	r5,r21
  8094f8:	a0a3383a 	mul	r17,r20,r2
  8094fc:	080a9d00 	call	80a9d0 <__umodsi3>
  809500:	d9400117 	ldw	r5,4(sp)
  809504:	1004943a 	slli	r2,r2,16
  809508:	28ffffcc 	andi	r3,r5,65535
  80950c:	10c4b03a 	or	r2,r2,r3
  809510:	1440042e 	bgeu	r2,r17,809524 <__umoddi3+0x374>
  809514:	1405883a 	add	r2,r2,r16
  809518:	14000236 	bltu	r2,r16,809524 <__umoddi3+0x374>
  80951c:	1440012e 	bgeu	r2,r17,809524 <__umoddi3+0x374>
  809520:	1405883a 	add	r2,r2,r16
  809524:	b5ec983a 	sll	r22,r22,r23
  809528:	1463c83a 	sub	r17,r2,r17
  80952c:	003f4406 	br	809240 <__umoddi3+0x90>
  809530:	3d4fc83a 	sub	r7,r7,r21
  809534:	3546983a 	sll	r3,r6,r21
  809538:	81c4d83a 	srl	r2,r16,r7
  80953c:	a1e2d83a 	srl	r17,r20,r7
  809540:	a54c983a 	sll	r6,r20,r21
  809544:	18aeb03a 	or	r23,r3,r2
  809548:	b828d43a 	srli	r20,r23,16
  80954c:	b1c4d83a 	srl	r2,r22,r7
  809550:	8809883a 	mov	r4,r17
  809554:	a00b883a 	mov	r5,r20
  809558:	308cb03a 	or	r6,r6,r2
  80955c:	d9c00315 	stw	r7,12(sp)
  809560:	d9800215 	stw	r6,8(sp)
  809564:	080a9c80 	call	80a9c8 <__udivsi3>
  809568:	8809883a 	mov	r4,r17
  80956c:	a00b883a 	mov	r5,r20
  809570:	1039883a 	mov	fp,r2
  809574:	080a9d00 	call	80a9d0 <__umodsi3>
  809578:	b8ffffcc 	andi	r3,r23,65535
  80957c:	d8c00415 	stw	r3,16(sp)
  809580:	d9000217 	ldw	r4,8(sp)
  809584:	d9400417 	ldw	r5,16(sp)
  809588:	1004943a 	slli	r2,r2,16
  80958c:	2006d43a 	srli	r3,r4,16
  809590:	8560983a 	sll	r16,r16,r21
  809594:	2f23383a 	mul	r17,r5,fp
  809598:	10c4b03a 	or	r2,r2,r3
  80959c:	dc000015 	stw	r16,0(sp)
  8095a0:	b56c983a 	sll	r22,r22,r21
  8095a4:	1440032e 	bgeu	r2,r17,8095b4 <__umoddi3+0x404>
  8095a8:	15c5883a 	add	r2,r2,r23
  8095ac:	e73fffc4 	addi	fp,fp,-1
  8095b0:	15c05d2e 	bgeu	r2,r23,809728 <__umoddi3+0x578>
  8095b4:	1463c83a 	sub	r17,r2,r17
  8095b8:	8809883a 	mov	r4,r17
  8095bc:	a00b883a 	mov	r5,r20
  8095c0:	080a9c80 	call	80a9c8 <__udivsi3>
  8095c4:	8809883a 	mov	r4,r17
  8095c8:	a00b883a 	mov	r5,r20
  8095cc:	1021883a 	mov	r16,r2
  8095d0:	080a9d00 	call	80a9d0 <__umodsi3>
  8095d4:	d8c00417 	ldw	r3,16(sp)
  8095d8:	d9000217 	ldw	r4,8(sp)
  8095dc:	1004943a 	slli	r2,r2,16
  8095e0:	1c23383a 	mul	r17,r3,r16
  8095e4:	20ffffcc 	andi	r3,r4,65535
  8095e8:	10ceb03a 	or	r7,r2,r3
  8095ec:	3c40032e 	bgeu	r7,r17,8095fc <__umoddi3+0x44c>
  8095f0:	3dcf883a 	add	r7,r7,r23
  8095f4:	843fffc4 	addi	r16,r16,-1
  8095f8:	3dc0472e 	bgeu	r7,r23,809718 <__umoddi3+0x568>
  8095fc:	e004943a 	slli	r2,fp,16
  809600:	d9400017 	ldw	r5,0(sp)
  809604:	3c4fc83a 	sub	r7,r7,r17
  809608:	8084b03a 	or	r2,r16,r2
  80960c:	28ffffcc 	andi	r3,r5,65535
  809610:	280cd43a 	srli	r6,r5,16
  809614:	100ad43a 	srli	r5,r2,16
  809618:	10bfffcc 	andi	r2,r2,65535
  80961c:	10d1383a 	mul	r8,r2,r3
  809620:	28c7383a 	mul	r3,r5,r3
  809624:	1185383a 	mul	r2,r2,r6
  809628:	4008d43a 	srli	r4,r8,16
  80962c:	298b383a 	mul	r5,r5,r6
  809630:	10c5883a 	add	r2,r2,r3
  809634:	2089883a 	add	r4,r4,r2
  809638:	20c0022e 	bgeu	r4,r3,809644 <__umoddi3+0x494>
  80963c:	00800074 	movhi	r2,1
  809640:	288b883a 	add	r5,r5,r2
  809644:	2004d43a 	srli	r2,r4,16
  809648:	2008943a 	slli	r4,r4,16
  80964c:	40ffffcc 	andi	r3,r8,65535
  809650:	288b883a 	add	r5,r5,r2
  809654:	20c9883a 	add	r4,r4,r3
  809658:	39400b36 	bltu	r7,r5,809688 <__umoddi3+0x4d8>
  80965c:	39403d26 	beq	r7,r5,809754 <__umoddi3+0x5a4>
  809660:	394bc83a 	sub	r5,r7,r5
  809664:	00000f06 	br	8096a4 <__umoddi3+0x4f4>
  809668:	30c5c83a 	sub	r2,r6,r3
  80966c:	1839883a 	mov	fp,r3
  809670:	b084d83a 	srl	r2,r22,r2
  809674:	a0c6983a 	sll	r3,r20,r3
  809678:	8720983a 	sll	r16,r16,fp
  80967c:	b72c983a 	sll	r22,r22,fp
  809680:	18a8b03a 	or	r20,r3,r2
  809684:	003f3a06 	br	809370 <__umoddi3+0x1c0>
  809688:	d8c00017 	ldw	r3,0(sp)
  80968c:	20c5c83a 	sub	r2,r4,r3
  809690:	2089803a 	cmpltu	r4,r4,r2
  809694:	2dc7c83a 	sub	r3,r5,r23
  809698:	1907c83a 	sub	r3,r3,r4
  80969c:	38cbc83a 	sub	r5,r7,r3
  8096a0:	1009883a 	mov	r4,r2
  8096a4:	b105c83a 	sub	r2,r22,r4
  8096a8:	b087803a 	cmpltu	r3,r22,r2
  8096ac:	28c7c83a 	sub	r3,r5,r3
  8096b0:	d9400317 	ldw	r5,12(sp)
  8096b4:	1544d83a 	srl	r2,r2,r21
  8096b8:	1948983a 	sll	r4,r3,r5
  8096bc:	1d46d83a 	srl	r3,r3,r21
  8096c0:	20a4b03a 	or	r18,r4,r2
  8096c4:	9011883a 	mov	r8,r18
  8096c8:	1813883a 	mov	r9,r3
  8096cc:	003ef606 	br	8092a8 <__umoddi3+0xf8>
  8096d0:	01400604 	movi	r5,24
  8096d4:	2805883a 	mov	r2,r5
  8096d8:	003ecc06 	br	80920c <__umoddi3+0x5c>
  8096dc:	01400204 	movi	r5,8
  8096e0:	2805883a 	mov	r2,r5
  8096e4:	003ec906 	br	80920c <__umoddi3+0x5c>
  8096e8:	01400204 	movi	r5,8
  8096ec:	2805883a 	mov	r2,r5
  8096f0:	003f0106 	br	8092f8 <__umoddi3+0x148>
  8096f4:	01400204 	movi	r5,8
  8096f8:	2805883a 	mov	r2,r5
  8096fc:	003f1206 	br	809348 <__umoddi3+0x198>
  809700:	01400604 	movi	r5,24
  809704:	2805883a 	mov	r2,r5
  809708:	003f0f06 	br	809348 <__umoddi3+0x198>
  80970c:	01400604 	movi	r5,24
  809710:	2805883a 	mov	r2,r5
  809714:	003ef806 	br	8092f8 <__umoddi3+0x148>
  809718:	3c7fb82e 	bgeu	r7,r17,8095fc <__umoddi3+0x44c>
  80971c:	843fffc4 	addi	r16,r16,-1
  809720:	3dcf883a 	add	r7,r7,r23
  809724:	003fb506 	br	8095fc <__umoddi3+0x44c>
  809728:	147fa22e 	bgeu	r2,r17,8095b4 <__umoddi3+0x404>
  80972c:	e73fffc4 	addi	fp,fp,-1
  809730:	15c5883a 	add	r2,r2,r23
  809734:	003f9f06 	br	8095b4 <__umoddi3+0x404>
  809738:	147f692e 	bgeu	r2,r17,8094e0 <__umoddi3+0x330>
  80973c:	1405883a 	add	r2,r2,r16
  809740:	003f6706 	br	8094e0 <__umoddi3+0x330>
  809744:	1405883a 	add	r2,r2,r16
  809748:	003f1906 	br	8093b0 <__umoddi3+0x200>
  80974c:	1405883a 	add	r2,r2,r16
  809750:	003ec906 	br	809278 <__umoddi3+0xc8>
  809754:	b13fcc36 	bltu	r22,r4,809688 <__umoddi3+0x4d8>
  809758:	000b883a 	mov	r5,zero
  80975c:	003fd106 	br	8096a4 <__umoddi3+0x4f4>

00809760 <_fpadd_parts>:
  809760:	defff804 	addi	sp,sp,-32
  809764:	dcc00315 	stw	r19,12(sp)
  809768:	2027883a 	mov	r19,r4
  80976c:	21000017 	ldw	r4,0(r4)
  809770:	00c00044 	movi	r3,1
  809774:	dd400515 	stw	r21,20(sp)
  809778:	dd000415 	stw	r20,16(sp)
  80977c:	ddc00715 	stw	r23,28(sp)
  809780:	dd800615 	stw	r22,24(sp)
  809784:	dc800215 	stw	r18,8(sp)
  809788:	dc400115 	stw	r17,4(sp)
  80978c:	dc000015 	stw	r16,0(sp)
  809790:	282b883a 	mov	r21,r5
  809794:	3029883a 	mov	r20,r6
  809798:	1900632e 	bgeu	r3,r4,809928 <_fpadd_parts+0x1c8>
  80979c:	28800017 	ldw	r2,0(r5)
  8097a0:	1880812e 	bgeu	r3,r2,8099a8 <_fpadd_parts+0x248>
  8097a4:	00c00104 	movi	r3,4
  8097a8:	20c0dc26 	beq	r4,r3,809b1c <_fpadd_parts+0x3bc>
  8097ac:	10c07e26 	beq	r2,r3,8099a8 <_fpadd_parts+0x248>
  8097b0:	00c00084 	movi	r3,2
  8097b4:	10c06726 	beq	r2,r3,809954 <_fpadd_parts+0x1f4>
  8097b8:	20c07b26 	beq	r4,r3,8099a8 <_fpadd_parts+0x248>
  8097bc:	9dc00217 	ldw	r23,8(r19)
  8097c0:	28c00217 	ldw	r3,8(r5)
  8097c4:	9c400317 	ldw	r17,12(r19)
  8097c8:	2bc00317 	ldw	r15,12(r5)
  8097cc:	b8cdc83a 	sub	r6,r23,r3
  8097d0:	9c800417 	ldw	r18,16(r19)
  8097d4:	2c000417 	ldw	r16,16(r5)
  8097d8:	3009883a 	mov	r4,r6
  8097dc:	30009716 	blt	r6,zero,809a3c <_fpadd_parts+0x2dc>
  8097e0:	00800fc4 	movi	r2,63
  8097e4:	11806b16 	blt	r2,r6,809994 <_fpadd_parts+0x234>
  8097e8:	0100a40e 	bge	zero,r4,809a7c <_fpadd_parts+0x31c>
  8097ec:	35bff804 	addi	r22,r6,-32
  8097f0:	b000bc16 	blt	r22,zero,809ae4 <_fpadd_parts+0x384>
  8097f4:	8596d83a 	srl	r11,r16,r22
  8097f8:	0019883a 	mov	r12,zero
  8097fc:	0013883a 	mov	r9,zero
  809800:	01000044 	movi	r4,1
  809804:	0015883a 	mov	r10,zero
  809808:	b000be16 	blt	r22,zero,809b04 <_fpadd_parts+0x3a4>
  80980c:	2590983a 	sll	r8,r4,r22
  809810:	000f883a 	mov	r7,zero
  809814:	00bfffc4 	movi	r2,-1
  809818:	3889883a 	add	r4,r7,r2
  80981c:	408b883a 	add	r5,r8,r2
  809820:	21cd803a 	cmpltu	r6,r4,r7
  809824:	314b883a 	add	r5,r6,r5
  809828:	7904703a 	and	r2,r15,r4
  80982c:	8146703a 	and	r3,r16,r5
  809830:	10c4b03a 	or	r2,r2,r3
  809834:	10000226 	beq	r2,zero,809840 <_fpadd_parts+0xe0>
  809838:	02400044 	movi	r9,1
  80983c:	0015883a 	mov	r10,zero
  809840:	5a5eb03a 	or	r15,r11,r9
  809844:	62a0b03a 	or	r16,r12,r10
  809848:	99400117 	ldw	r5,4(r19)
  80984c:	a8800117 	ldw	r2,4(r21)
  809850:	28806e26 	beq	r5,r2,809a0c <_fpadd_parts+0x2ac>
  809854:	28006626 	beq	r5,zero,8099f0 <_fpadd_parts+0x290>
  809858:	7c45c83a 	sub	r2,r15,r17
  80985c:	7889803a 	cmpltu	r4,r15,r2
  809860:	8487c83a 	sub	r3,r16,r18
  809864:	1909c83a 	sub	r4,r3,r4
  809868:	100d883a 	mov	r6,r2
  80986c:	200f883a 	mov	r7,r4
  809870:	38007716 	blt	r7,zero,809a50 <_fpadd_parts+0x2f0>
  809874:	a5c00215 	stw	r23,8(r20)
  809878:	a1c00415 	stw	r7,16(r20)
  80987c:	a0000115 	stw	zero,4(r20)
  809880:	a1800315 	stw	r6,12(r20)
  809884:	a2000317 	ldw	r8,12(r20)
  809888:	a2400417 	ldw	r9,16(r20)
  80988c:	00bfffc4 	movi	r2,-1
  809890:	408b883a 	add	r5,r8,r2
  809894:	2a09803a 	cmpltu	r4,r5,r8
  809898:	488d883a 	add	r6,r9,r2
  80989c:	01c40034 	movhi	r7,4096
  8098a0:	39ffffc4 	addi	r7,r7,-1
  8098a4:	218d883a 	add	r6,r4,r6
  8098a8:	39801736 	bltu	r7,r6,809908 <_fpadd_parts+0x1a8>
  8098ac:	31c06526 	beq	r6,r7,809a44 <_fpadd_parts+0x2e4>
  8098b0:	a3000217 	ldw	r12,8(r20)
  8098b4:	4209883a 	add	r4,r8,r8
  8098b8:	00bfffc4 	movi	r2,-1
  8098bc:	220f803a 	cmpltu	r7,r4,r8
  8098c0:	4a4b883a 	add	r5,r9,r9
  8098c4:	394f883a 	add	r7,r7,r5
  8098c8:	2095883a 	add	r10,r4,r2
  8098cc:	3897883a 	add	r11,r7,r2
  8098d0:	510d803a 	cmpltu	r6,r10,r4
  8098d4:	6099883a 	add	r12,r12,r2
  8098d8:	32d7883a 	add	r11,r6,r11
  8098dc:	00840034 	movhi	r2,4096
  8098e0:	10bfffc4 	addi	r2,r2,-1
  8098e4:	2011883a 	mov	r8,r4
  8098e8:	3813883a 	mov	r9,r7
  8098ec:	a1000315 	stw	r4,12(r20)
  8098f0:	a1c00415 	stw	r7,16(r20)
  8098f4:	a3000215 	stw	r12,8(r20)
  8098f8:	12c00336 	bltu	r2,r11,809908 <_fpadd_parts+0x1a8>
  8098fc:	58bfed1e 	bne	r11,r2,8098b4 <_fpadd_parts+0x154>
  809900:	00bfff84 	movi	r2,-2
  809904:	12bfeb2e 	bgeu	r2,r10,8098b4 <_fpadd_parts+0x154>
  809908:	a2800417 	ldw	r10,16(r20)
  80990c:	008000c4 	movi	r2,3
  809910:	00c80034 	movhi	r3,8192
  809914:	18ffffc4 	addi	r3,r3,-1
  809918:	a2400317 	ldw	r9,12(r20)
  80991c:	a0800015 	stw	r2,0(r20)
  809920:	1a802336 	bltu	r3,r10,8099b0 <_fpadd_parts+0x250>
  809924:	a027883a 	mov	r19,r20
  809928:	9805883a 	mov	r2,r19
  80992c:	ddc00717 	ldw	r23,28(sp)
  809930:	dd800617 	ldw	r22,24(sp)
  809934:	dd400517 	ldw	r21,20(sp)
  809938:	dd000417 	ldw	r20,16(sp)
  80993c:	dcc00317 	ldw	r19,12(sp)
  809940:	dc800217 	ldw	r18,8(sp)
  809944:	dc400117 	ldw	r17,4(sp)
  809948:	dc000017 	ldw	r16,0(sp)
  80994c:	dec00804 	addi	sp,sp,32
  809950:	f800283a 	ret
  809954:	20fff41e 	bne	r4,r3,809928 <_fpadd_parts+0x1c8>
  809958:	31000015 	stw	r4,0(r6)
  80995c:	98800117 	ldw	r2,4(r19)
  809960:	30800115 	stw	r2,4(r6)
  809964:	98c00217 	ldw	r3,8(r19)
  809968:	30c00215 	stw	r3,8(r6)
  80996c:	98800317 	ldw	r2,12(r19)
  809970:	30800315 	stw	r2,12(r6)
  809974:	98c00417 	ldw	r3,16(r19)
  809978:	30c00415 	stw	r3,16(r6)
  80997c:	98800117 	ldw	r2,4(r19)
  809980:	28c00117 	ldw	r3,4(r5)
  809984:	3027883a 	mov	r19,r6
  809988:	10c4703a 	and	r2,r2,r3
  80998c:	30800115 	stw	r2,4(r6)
  809990:	003fe506 	br	809928 <_fpadd_parts+0x1c8>
  809994:	1dc02616 	blt	r3,r23,809a30 <_fpadd_parts+0x2d0>
  809998:	0023883a 	mov	r17,zero
  80999c:	182f883a 	mov	r23,r3
  8099a0:	0025883a 	mov	r18,zero
  8099a4:	003fa806 	br	809848 <_fpadd_parts+0xe8>
  8099a8:	a827883a 	mov	r19,r21
  8099ac:	003fde06 	br	809928 <_fpadd_parts+0x1c8>
  8099b0:	01800044 	movi	r6,1
  8099b4:	500497fa 	slli	r2,r10,31
  8099b8:	4808d07a 	srli	r4,r9,1
  8099bc:	518ad83a 	srl	r5,r10,r6
  8099c0:	a2000217 	ldw	r8,8(r20)
  8099c4:	1108b03a 	or	r4,r2,r4
  8099c8:	0007883a 	mov	r3,zero
  8099cc:	4984703a 	and	r2,r9,r6
  8099d0:	208cb03a 	or	r6,r4,r2
  8099d4:	28ceb03a 	or	r7,r5,r3
  8099d8:	42000044 	addi	r8,r8,1
  8099dc:	a027883a 	mov	r19,r20
  8099e0:	a1c00415 	stw	r7,16(r20)
  8099e4:	a2000215 	stw	r8,8(r20)
  8099e8:	a1800315 	stw	r6,12(r20)
  8099ec:	003fce06 	br	809928 <_fpadd_parts+0x1c8>
  8099f0:	8bc5c83a 	sub	r2,r17,r15
  8099f4:	8889803a 	cmpltu	r4,r17,r2
  8099f8:	9407c83a 	sub	r3,r18,r16
  8099fc:	1909c83a 	sub	r4,r3,r4
  809a00:	100d883a 	mov	r6,r2
  809a04:	200f883a 	mov	r7,r4
  809a08:	003f9906 	br	809870 <_fpadd_parts+0x110>
  809a0c:	8bc5883a 	add	r2,r17,r15
  809a10:	1449803a 	cmpltu	r4,r2,r17
  809a14:	9407883a 	add	r3,r18,r16
  809a18:	20c9883a 	add	r4,r4,r3
  809a1c:	a1400115 	stw	r5,4(r20)
  809a20:	a5c00215 	stw	r23,8(r20)
  809a24:	a0800315 	stw	r2,12(r20)
  809a28:	a1000415 	stw	r4,16(r20)
  809a2c:	003fb606 	br	809908 <_fpadd_parts+0x1a8>
  809a30:	001f883a 	mov	r15,zero
  809a34:	0021883a 	mov	r16,zero
  809a38:	003f8306 	br	809848 <_fpadd_parts+0xe8>
  809a3c:	018dc83a 	sub	r6,zero,r6
  809a40:	003f6706 	br	8097e0 <_fpadd_parts+0x80>
  809a44:	00bfff84 	movi	r2,-2
  809a48:	117faf36 	bltu	r2,r5,809908 <_fpadd_parts+0x1a8>
  809a4c:	003f9806 	br	8098b0 <_fpadd_parts+0x150>
  809a50:	0005883a 	mov	r2,zero
  809a54:	1189c83a 	sub	r4,r2,r6
  809a58:	1105803a 	cmpltu	r2,r2,r4
  809a5c:	01cbc83a 	sub	r5,zero,r7
  809a60:	2885c83a 	sub	r2,r5,r2
  809a64:	01800044 	movi	r6,1
  809a68:	a1800115 	stw	r6,4(r20)
  809a6c:	a5c00215 	stw	r23,8(r20)
  809a70:	a1000315 	stw	r4,12(r20)
  809a74:	a0800415 	stw	r2,16(r20)
  809a78:	003f8206 	br	809884 <_fpadd_parts+0x124>
  809a7c:	203f7226 	beq	r4,zero,809848 <_fpadd_parts+0xe8>
  809a80:	35bff804 	addi	r22,r6,-32
  809a84:	b9af883a 	add	r23,r23,r6
  809a88:	b0003116 	blt	r22,zero,809b50 <_fpadd_parts+0x3f0>
  809a8c:	959ad83a 	srl	r13,r18,r22
  809a90:	001d883a 	mov	r14,zero
  809a94:	000f883a 	mov	r7,zero
  809a98:	01000044 	movi	r4,1
  809a9c:	0011883a 	mov	r8,zero
  809aa0:	b0002516 	blt	r22,zero,809b38 <_fpadd_parts+0x3d8>
  809aa4:	2594983a 	sll	r10,r4,r22
  809aa8:	0013883a 	mov	r9,zero
  809aac:	00bfffc4 	movi	r2,-1
  809ab0:	4889883a 	add	r4,r9,r2
  809ab4:	508b883a 	add	r5,r10,r2
  809ab8:	224d803a 	cmpltu	r6,r4,r9
  809abc:	314b883a 	add	r5,r6,r5
  809ac0:	8904703a 	and	r2,r17,r4
  809ac4:	9146703a 	and	r3,r18,r5
  809ac8:	10c4b03a 	or	r2,r2,r3
  809acc:	10000226 	beq	r2,zero,809ad8 <_fpadd_parts+0x378>
  809ad0:	01c00044 	movi	r7,1
  809ad4:	0011883a 	mov	r8,zero
  809ad8:	69e2b03a 	or	r17,r13,r7
  809adc:	7224b03a 	or	r18,r14,r8
  809ae0:	003f5906 	br	809848 <_fpadd_parts+0xe8>
  809ae4:	8407883a 	add	r3,r16,r16
  809ae8:	008007c4 	movi	r2,31
  809aec:	1185c83a 	sub	r2,r2,r6
  809af0:	1886983a 	sll	r3,r3,r2
  809af4:	7996d83a 	srl	r11,r15,r6
  809af8:	8198d83a 	srl	r12,r16,r6
  809afc:	1ad6b03a 	or	r11,r3,r11
  809b00:	003f3e06 	br	8097fc <_fpadd_parts+0x9c>
  809b04:	2006d07a 	srli	r3,r4,1
  809b08:	008007c4 	movi	r2,31
  809b0c:	1185c83a 	sub	r2,r2,r6
  809b10:	1890d83a 	srl	r8,r3,r2
  809b14:	218e983a 	sll	r7,r4,r6
  809b18:	003f3e06 	br	809814 <_fpadd_parts+0xb4>
  809b1c:	113f821e 	bne	r2,r4,809928 <_fpadd_parts+0x1c8>
  809b20:	28c00117 	ldw	r3,4(r5)
  809b24:	98800117 	ldw	r2,4(r19)
  809b28:	10ff7f26 	beq	r2,r3,809928 <_fpadd_parts+0x1c8>
  809b2c:	04c02074 	movhi	r19,129
  809b30:	9cff4504 	addi	r19,r19,-748
  809b34:	003f7c06 	br	809928 <_fpadd_parts+0x1c8>
  809b38:	2006d07a 	srli	r3,r4,1
  809b3c:	008007c4 	movi	r2,31
  809b40:	1185c83a 	sub	r2,r2,r6
  809b44:	1894d83a 	srl	r10,r3,r2
  809b48:	2192983a 	sll	r9,r4,r6
  809b4c:	003fd706 	br	809aac <_fpadd_parts+0x34c>
  809b50:	9487883a 	add	r3,r18,r18
  809b54:	008007c4 	movi	r2,31
  809b58:	1185c83a 	sub	r2,r2,r6
  809b5c:	1886983a 	sll	r3,r3,r2
  809b60:	899ad83a 	srl	r13,r17,r6
  809b64:	919cd83a 	srl	r14,r18,r6
  809b68:	1b5ab03a 	or	r13,r3,r13
  809b6c:	003fc906 	br	809a94 <_fpadd_parts+0x334>

00809b70 <__subdf3>:
  809b70:	deffea04 	addi	sp,sp,-88
  809b74:	dcc01415 	stw	r19,80(sp)
  809b78:	dcc00404 	addi	r19,sp,16
  809b7c:	2011883a 	mov	r8,r4
  809b80:	2813883a 	mov	r9,r5
  809b84:	dc401315 	stw	r17,76(sp)
  809b88:	d809883a 	mov	r4,sp
  809b8c:	980b883a 	mov	r5,r19
  809b90:	dc400904 	addi	r17,sp,36
  809b94:	dfc01515 	stw	ra,84(sp)
  809b98:	da400115 	stw	r9,4(sp)
  809b9c:	d9c00315 	stw	r7,12(sp)
  809ba0:	da000015 	stw	r8,0(sp)
  809ba4:	d9800215 	stw	r6,8(sp)
  809ba8:	080ae040 	call	80ae04 <__unpack_d>
  809bac:	d9000204 	addi	r4,sp,8
  809bb0:	880b883a 	mov	r5,r17
  809bb4:	080ae040 	call	80ae04 <__unpack_d>
  809bb8:	d8800a17 	ldw	r2,40(sp)
  809bbc:	880b883a 	mov	r5,r17
  809bc0:	9809883a 	mov	r4,r19
  809bc4:	d9800e04 	addi	r6,sp,56
  809bc8:	1080005c 	xori	r2,r2,1
  809bcc:	d8800a15 	stw	r2,40(sp)
  809bd0:	08097600 	call	809760 <_fpadd_parts>
  809bd4:	1009883a 	mov	r4,r2
  809bd8:	080aaf00 	call	80aaf0 <__pack_d>
  809bdc:	dfc01517 	ldw	ra,84(sp)
  809be0:	dcc01417 	ldw	r19,80(sp)
  809be4:	dc401317 	ldw	r17,76(sp)
  809be8:	dec01604 	addi	sp,sp,88
  809bec:	f800283a 	ret

00809bf0 <__adddf3>:
  809bf0:	deffea04 	addi	sp,sp,-88
  809bf4:	dcc01415 	stw	r19,80(sp)
  809bf8:	dcc00404 	addi	r19,sp,16
  809bfc:	2011883a 	mov	r8,r4
  809c00:	2813883a 	mov	r9,r5
  809c04:	dc401315 	stw	r17,76(sp)
  809c08:	d809883a 	mov	r4,sp
  809c0c:	980b883a 	mov	r5,r19
  809c10:	dc400904 	addi	r17,sp,36
  809c14:	dfc01515 	stw	ra,84(sp)
  809c18:	da400115 	stw	r9,4(sp)
  809c1c:	d9c00315 	stw	r7,12(sp)
  809c20:	da000015 	stw	r8,0(sp)
  809c24:	d9800215 	stw	r6,8(sp)
  809c28:	080ae040 	call	80ae04 <__unpack_d>
  809c2c:	d9000204 	addi	r4,sp,8
  809c30:	880b883a 	mov	r5,r17
  809c34:	080ae040 	call	80ae04 <__unpack_d>
  809c38:	d9800e04 	addi	r6,sp,56
  809c3c:	9809883a 	mov	r4,r19
  809c40:	880b883a 	mov	r5,r17
  809c44:	08097600 	call	809760 <_fpadd_parts>
  809c48:	1009883a 	mov	r4,r2
  809c4c:	080aaf00 	call	80aaf0 <__pack_d>
  809c50:	dfc01517 	ldw	ra,84(sp)
  809c54:	dcc01417 	ldw	r19,80(sp)
  809c58:	dc401317 	ldw	r17,76(sp)
  809c5c:	dec01604 	addi	sp,sp,88
  809c60:	f800283a 	ret

00809c64 <__muldf3>:
  809c64:	deffe004 	addi	sp,sp,-128
  809c68:	dc401815 	stw	r17,96(sp)
  809c6c:	dc400404 	addi	r17,sp,16
  809c70:	2011883a 	mov	r8,r4
  809c74:	2813883a 	mov	r9,r5
  809c78:	dc001715 	stw	r16,92(sp)
  809c7c:	d809883a 	mov	r4,sp
  809c80:	880b883a 	mov	r5,r17
  809c84:	dc000904 	addi	r16,sp,36
  809c88:	dfc01f15 	stw	ra,124(sp)
  809c8c:	da400115 	stw	r9,4(sp)
  809c90:	d9c00315 	stw	r7,12(sp)
  809c94:	da000015 	stw	r8,0(sp)
  809c98:	d9800215 	stw	r6,8(sp)
  809c9c:	ddc01e15 	stw	r23,120(sp)
  809ca0:	dd801d15 	stw	r22,116(sp)
  809ca4:	dd401c15 	stw	r21,112(sp)
  809ca8:	dd001b15 	stw	r20,108(sp)
  809cac:	dcc01a15 	stw	r19,104(sp)
  809cb0:	dc801915 	stw	r18,100(sp)
  809cb4:	080ae040 	call	80ae04 <__unpack_d>
  809cb8:	d9000204 	addi	r4,sp,8
  809cbc:	800b883a 	mov	r5,r16
  809cc0:	080ae040 	call	80ae04 <__unpack_d>
  809cc4:	d9000417 	ldw	r4,16(sp)
  809cc8:	00800044 	movi	r2,1
  809ccc:	1100102e 	bgeu	r2,r4,809d10 <__muldf3+0xac>
  809cd0:	d8c00917 	ldw	r3,36(sp)
  809cd4:	10c0062e 	bgeu	r2,r3,809cf0 <__muldf3+0x8c>
  809cd8:	00800104 	movi	r2,4
  809cdc:	20800a26 	beq	r4,r2,809d08 <__muldf3+0xa4>
  809ce0:	1880cc26 	beq	r3,r2,80a014 <__muldf3+0x3b0>
  809ce4:	00800084 	movi	r2,2
  809ce8:	20800926 	beq	r4,r2,809d10 <__muldf3+0xac>
  809cec:	1880191e 	bne	r3,r2,809d54 <__muldf3+0xf0>
  809cf0:	d8c00a17 	ldw	r3,40(sp)
  809cf4:	d8800517 	ldw	r2,20(sp)
  809cf8:	8009883a 	mov	r4,r16
  809cfc:	10c4c03a 	cmpne	r2,r2,r3
  809d00:	d8800a15 	stw	r2,40(sp)
  809d04:	00000706 	br	809d24 <__muldf3+0xc0>
  809d08:	00800084 	movi	r2,2
  809d0c:	1880c326 	beq	r3,r2,80a01c <__muldf3+0x3b8>
  809d10:	d8800517 	ldw	r2,20(sp)
  809d14:	d8c00a17 	ldw	r3,40(sp)
  809d18:	8809883a 	mov	r4,r17
  809d1c:	10c4c03a 	cmpne	r2,r2,r3
  809d20:	d8800515 	stw	r2,20(sp)
  809d24:	080aaf00 	call	80aaf0 <__pack_d>
  809d28:	dfc01f17 	ldw	ra,124(sp)
  809d2c:	ddc01e17 	ldw	r23,120(sp)
  809d30:	dd801d17 	ldw	r22,116(sp)
  809d34:	dd401c17 	ldw	r21,112(sp)
  809d38:	dd001b17 	ldw	r20,108(sp)
  809d3c:	dcc01a17 	ldw	r19,104(sp)
  809d40:	dc801917 	ldw	r18,100(sp)
  809d44:	dc401817 	ldw	r17,96(sp)
  809d48:	dc001717 	ldw	r16,92(sp)
  809d4c:	dec02004 	addi	sp,sp,128
  809d50:	f800283a 	ret
  809d54:	dd800717 	ldw	r22,28(sp)
  809d58:	dc800c17 	ldw	r18,48(sp)
  809d5c:	002b883a 	mov	r21,zero
  809d60:	0023883a 	mov	r17,zero
  809d64:	a80b883a 	mov	r5,r21
  809d68:	b00d883a 	mov	r6,r22
  809d6c:	880f883a 	mov	r7,r17
  809d70:	ddc00817 	ldw	r23,32(sp)
  809d74:	dcc00d17 	ldw	r19,52(sp)
  809d78:	9009883a 	mov	r4,r18
  809d7c:	080a9d80 	call	80a9d8 <__muldi3>
  809d80:	001b883a 	mov	r13,zero
  809d84:	680f883a 	mov	r7,r13
  809d88:	b009883a 	mov	r4,r22
  809d8c:	000b883a 	mov	r5,zero
  809d90:	980d883a 	mov	r6,r19
  809d94:	b82d883a 	mov	r22,r23
  809d98:	002f883a 	mov	r23,zero
  809d9c:	db401615 	stw	r13,88(sp)
  809da0:	d8801315 	stw	r2,76(sp)
  809da4:	d8c01415 	stw	r3,80(sp)
  809da8:	dcc01515 	stw	r19,84(sp)
  809dac:	080a9d80 	call	80a9d8 <__muldi3>
  809db0:	b00d883a 	mov	r6,r22
  809db4:	000b883a 	mov	r5,zero
  809db8:	9009883a 	mov	r4,r18
  809dbc:	b80f883a 	mov	r7,r23
  809dc0:	1021883a 	mov	r16,r2
  809dc4:	1823883a 	mov	r17,r3
  809dc8:	080a9d80 	call	80a9d8 <__muldi3>
  809dcc:	8085883a 	add	r2,r16,r2
  809dd0:	140d803a 	cmpltu	r6,r2,r16
  809dd4:	88c7883a 	add	r3,r17,r3
  809dd8:	30cd883a 	add	r6,r6,r3
  809ddc:	1029883a 	mov	r20,r2
  809de0:	302b883a 	mov	r21,r6
  809de4:	da801317 	ldw	r10,76(sp)
  809de8:	dac01417 	ldw	r11,80(sp)
  809dec:	db001517 	ldw	r12,84(sp)
  809df0:	db401617 	ldw	r13,88(sp)
  809df4:	3440612e 	bgeu	r6,r17,809f7c <__muldf3+0x318>
  809df8:	0009883a 	mov	r4,zero
  809dfc:	5105883a 	add	r2,r10,r4
  809e00:	128d803a 	cmpltu	r6,r2,r10
  809e04:	5d07883a 	add	r3,r11,r20
  809e08:	30cd883a 	add	r6,r6,r3
  809e0c:	0021883a 	mov	r16,zero
  809e10:	04400044 	movi	r17,1
  809e14:	1025883a 	mov	r18,r2
  809e18:	3027883a 	mov	r19,r6
  809e1c:	32c06236 	bltu	r6,r11,809fa8 <__muldf3+0x344>
  809e20:	59807a26 	beq	r11,r6,80a00c <__muldf3+0x3a8>
  809e24:	680b883a 	mov	r5,r13
  809e28:	b80f883a 	mov	r7,r23
  809e2c:	6009883a 	mov	r4,r12
  809e30:	b00d883a 	mov	r6,r22
  809e34:	080a9d80 	call	80a9d8 <__muldi3>
  809e38:	1009883a 	mov	r4,r2
  809e3c:	000f883a 	mov	r7,zero
  809e40:	1545883a 	add	r2,r2,r21
  809e44:	1111803a 	cmpltu	r8,r2,r4
  809e48:	19c7883a 	add	r3,r3,r7
  809e4c:	40c7883a 	add	r3,r8,r3
  809e50:	88cb883a 	add	r5,r17,r3
  809e54:	d8c00617 	ldw	r3,24(sp)
  809e58:	8089883a 	add	r4,r16,r2
  809e5c:	d8800b17 	ldw	r2,44(sp)
  809e60:	18c00104 	addi	r3,r3,4
  809e64:	240d803a 	cmpltu	r6,r4,r16
  809e68:	10c7883a 	add	r3,r2,r3
  809e6c:	2013883a 	mov	r9,r4
  809e70:	d8800a17 	ldw	r2,40(sp)
  809e74:	d9000517 	ldw	r4,20(sp)
  809e78:	314d883a 	add	r6,r6,r5
  809e7c:	3015883a 	mov	r10,r6
  809e80:	2088c03a 	cmpne	r4,r4,r2
  809e84:	00880034 	movhi	r2,8192
  809e88:	10bfffc4 	addi	r2,r2,-1
  809e8c:	d9000f15 	stw	r4,60(sp)
  809e90:	d8c01015 	stw	r3,64(sp)
  809e94:	1180162e 	bgeu	r2,r6,809ef0 <__muldf3+0x28c>
  809e98:	1811883a 	mov	r8,r3
  809e9c:	101f883a 	mov	r15,r2
  809ea0:	980497fa 	slli	r2,r19,31
  809ea4:	9016d07a 	srli	r11,r18,1
  809ea8:	500697fa 	slli	r3,r10,31
  809eac:	480cd07a 	srli	r6,r9,1
  809eb0:	500ed07a 	srli	r7,r10,1
  809eb4:	12d6b03a 	or	r11,r2,r11
  809eb8:	00800044 	movi	r2,1
  809ebc:	198cb03a 	or	r6,r3,r6
  809ec0:	4888703a 	and	r4,r9,r2
  809ec4:	9818d07a 	srli	r12,r19,1
  809ec8:	001b883a 	mov	r13,zero
  809ecc:	03a00034 	movhi	r14,32768
  809ed0:	3013883a 	mov	r9,r6
  809ed4:	3815883a 	mov	r10,r7
  809ed8:	4091883a 	add	r8,r8,r2
  809edc:	20000226 	beq	r4,zero,809ee8 <__muldf3+0x284>
  809ee0:	5b64b03a 	or	r18,r11,r13
  809ee4:	63a6b03a 	or	r19,r12,r14
  809ee8:	7abfed36 	bltu	r15,r10,809ea0 <__muldf3+0x23c>
  809eec:	da001015 	stw	r8,64(sp)
  809ef0:	00840034 	movhi	r2,4096
  809ef4:	10bfffc4 	addi	r2,r2,-1
  809ef8:	12801436 	bltu	r2,r10,809f4c <__muldf3+0x2e8>
  809efc:	da001017 	ldw	r8,64(sp)
  809f00:	101f883a 	mov	r15,r2
  809f04:	4a45883a 	add	r2,r9,r9
  809f08:	124d803a 	cmpltu	r6,r2,r9
  809f0c:	5287883a 	add	r3,r10,r10
  809f10:	9497883a 	add	r11,r18,r18
  809f14:	5c8f803a 	cmpltu	r7,r11,r18
  809f18:	9cd9883a 	add	r12,r19,r19
  809f1c:	01000044 	movi	r4,1
  809f20:	30cd883a 	add	r6,r6,r3
  809f24:	3b0f883a 	add	r7,r7,r12
  809f28:	423fffc4 	addi	r8,r8,-1
  809f2c:	1013883a 	mov	r9,r2
  809f30:	3015883a 	mov	r10,r6
  809f34:	111ab03a 	or	r13,r2,r4
  809f38:	98003016 	blt	r19,zero,809ffc <__muldf3+0x398>
  809f3c:	5825883a 	mov	r18,r11
  809f40:	3827883a 	mov	r19,r7
  809f44:	7abfef2e 	bgeu	r15,r10,809f04 <__muldf3+0x2a0>
  809f48:	da001015 	stw	r8,64(sp)
  809f4c:	00803fc4 	movi	r2,255
  809f50:	488e703a 	and	r7,r9,r2
  809f54:	00802004 	movi	r2,128
  809f58:	0007883a 	mov	r3,zero
  809f5c:	0011883a 	mov	r8,zero
  809f60:	38801826 	beq	r7,r2,809fc4 <__muldf3+0x360>
  809f64:	008000c4 	movi	r2,3
  809f68:	d9000e04 	addi	r4,sp,56
  809f6c:	da801215 	stw	r10,72(sp)
  809f70:	d8800e15 	stw	r2,56(sp)
  809f74:	da401115 	stw	r9,68(sp)
  809f78:	003f6a06 	br	809d24 <__muldf3+0xc0>
  809f7c:	89802126 	beq	r17,r6,80a004 <__muldf3+0x3a0>
  809f80:	0009883a 	mov	r4,zero
  809f84:	5105883a 	add	r2,r10,r4
  809f88:	128d803a 	cmpltu	r6,r2,r10
  809f8c:	5d07883a 	add	r3,r11,r20
  809f90:	30cd883a 	add	r6,r6,r3
  809f94:	0021883a 	mov	r16,zero
  809f98:	0023883a 	mov	r17,zero
  809f9c:	1025883a 	mov	r18,r2
  809fa0:	3027883a 	mov	r19,r6
  809fa4:	32ff9e2e 	bgeu	r6,r11,809e20 <__muldf3+0x1bc>
  809fa8:	00800044 	movi	r2,1
  809fac:	8089883a 	add	r4,r16,r2
  809fb0:	240d803a 	cmpltu	r6,r4,r16
  809fb4:	344d883a 	add	r6,r6,r17
  809fb8:	2021883a 	mov	r16,r4
  809fbc:	3023883a 	mov	r17,r6
  809fc0:	003f9806 	br	809e24 <__muldf3+0x1c0>
  809fc4:	403fe71e 	bne	r8,zero,809f64 <__muldf3+0x300>
  809fc8:	01004004 	movi	r4,256
  809fcc:	4904703a 	and	r2,r9,r4
  809fd0:	10c4b03a 	or	r2,r2,r3
  809fd4:	103fe31e 	bne	r2,zero,809f64 <__muldf3+0x300>
  809fd8:	94c4b03a 	or	r2,r18,r19
  809fdc:	103fe126 	beq	r2,zero,809f64 <__muldf3+0x300>
  809fe0:	49c5883a 	add	r2,r9,r7
  809fe4:	1251803a 	cmpltu	r8,r2,r9
  809fe8:	4291883a 	add	r8,r8,r10
  809fec:	013fc004 	movi	r4,-256
  809ff0:	1112703a 	and	r9,r2,r4
  809ff4:	4015883a 	mov	r10,r8
  809ff8:	003fda06 	br	809f64 <__muldf3+0x300>
  809ffc:	6813883a 	mov	r9,r13
  80a000:	003fce06 	br	809f3c <__muldf3+0x2d8>
  80a004:	143f7c36 	bltu	r2,r16,809df8 <__muldf3+0x194>
  80a008:	003fdd06 	br	809f80 <__muldf3+0x31c>
  80a00c:	12bf852e 	bgeu	r2,r10,809e24 <__muldf3+0x1c0>
  80a010:	003fe506 	br	809fa8 <__muldf3+0x344>
  80a014:	00800084 	movi	r2,2
  80a018:	20bf351e 	bne	r4,r2,809cf0 <__muldf3+0x8c>
  80a01c:	01002074 	movhi	r4,129
  80a020:	213f4504 	addi	r4,r4,-748
  80a024:	003f3f06 	br	809d24 <__muldf3+0xc0>

0080a028 <__divdf3>:
  80a028:	deffed04 	addi	sp,sp,-76
  80a02c:	dcc01115 	stw	r19,68(sp)
  80a030:	dcc00404 	addi	r19,sp,16
  80a034:	2011883a 	mov	r8,r4
  80a038:	2813883a 	mov	r9,r5
  80a03c:	dc000e15 	stw	r16,56(sp)
  80a040:	d809883a 	mov	r4,sp
  80a044:	980b883a 	mov	r5,r19
  80a048:	dc000904 	addi	r16,sp,36
  80a04c:	dfc01215 	stw	ra,72(sp)
  80a050:	da400115 	stw	r9,4(sp)
  80a054:	d9c00315 	stw	r7,12(sp)
  80a058:	da000015 	stw	r8,0(sp)
  80a05c:	d9800215 	stw	r6,8(sp)
  80a060:	dc801015 	stw	r18,64(sp)
  80a064:	dc400f15 	stw	r17,60(sp)
  80a068:	080ae040 	call	80ae04 <__unpack_d>
  80a06c:	d9000204 	addi	r4,sp,8
  80a070:	800b883a 	mov	r5,r16
  80a074:	080ae040 	call	80ae04 <__unpack_d>
  80a078:	d9000417 	ldw	r4,16(sp)
  80a07c:	00800044 	movi	r2,1
  80a080:	11000b2e 	bgeu	r2,r4,80a0b0 <__divdf3+0x88>
  80a084:	d9400917 	ldw	r5,36(sp)
  80a088:	1140762e 	bgeu	r2,r5,80a264 <__divdf3+0x23c>
  80a08c:	d8800517 	ldw	r2,20(sp)
  80a090:	d8c00a17 	ldw	r3,40(sp)
  80a094:	01800104 	movi	r6,4
  80a098:	10c4f03a 	xor	r2,r2,r3
  80a09c:	d8800515 	stw	r2,20(sp)
  80a0a0:	21800226 	beq	r4,r6,80a0ac <__divdf3+0x84>
  80a0a4:	00800084 	movi	r2,2
  80a0a8:	2080141e 	bne	r4,r2,80a0fc <__divdf3+0xd4>
  80a0ac:	29000926 	beq	r5,r4,80a0d4 <__divdf3+0xac>
  80a0b0:	9809883a 	mov	r4,r19
  80a0b4:	080aaf00 	call	80aaf0 <__pack_d>
  80a0b8:	dfc01217 	ldw	ra,72(sp)
  80a0bc:	dcc01117 	ldw	r19,68(sp)
  80a0c0:	dc801017 	ldw	r18,64(sp)
  80a0c4:	dc400f17 	ldw	r17,60(sp)
  80a0c8:	dc000e17 	ldw	r16,56(sp)
  80a0cc:	dec01304 	addi	sp,sp,76
  80a0d0:	f800283a 	ret
  80a0d4:	01002074 	movhi	r4,129
  80a0d8:	213f4504 	addi	r4,r4,-748
  80a0dc:	080aaf00 	call	80aaf0 <__pack_d>
  80a0e0:	dfc01217 	ldw	ra,72(sp)
  80a0e4:	dcc01117 	ldw	r19,68(sp)
  80a0e8:	dc801017 	ldw	r18,64(sp)
  80a0ec:	dc400f17 	ldw	r17,60(sp)
  80a0f0:	dc000e17 	ldw	r16,56(sp)
  80a0f4:	dec01304 	addi	sp,sp,76
  80a0f8:	f800283a 	ret
  80a0fc:	29805b26 	beq	r5,r6,80a26c <__divdf3+0x244>
  80a100:	28802d26 	beq	r5,r2,80a1b8 <__divdf3+0x190>
  80a104:	d8c00617 	ldw	r3,24(sp)
  80a108:	d8800b17 	ldw	r2,44(sp)
  80a10c:	d9c00817 	ldw	r7,32(sp)
  80a110:	dc400d17 	ldw	r17,52(sp)
  80a114:	188bc83a 	sub	r5,r3,r2
  80a118:	d9800717 	ldw	r6,28(sp)
  80a11c:	dc000c17 	ldw	r16,48(sp)
  80a120:	d9400615 	stw	r5,24(sp)
  80a124:	3c403836 	bltu	r7,r17,80a208 <__divdf3+0x1e0>
  80a128:	89c03626 	beq	r17,r7,80a204 <__divdf3+0x1dc>
  80a12c:	0015883a 	mov	r10,zero
  80a130:	001d883a 	mov	r14,zero
  80a134:	02c40034 	movhi	r11,4096
  80a138:	001f883a 	mov	r15,zero
  80a13c:	003f883a 	mov	ra,zero
  80a140:	04800f44 	movi	r18,61
  80a144:	00000f06 	br	80a184 <__divdf3+0x15c>
  80a148:	601d883a 	mov	r14,r12
  80a14c:	681f883a 	mov	r15,r13
  80a150:	400d883a 	mov	r6,r8
  80a154:	100f883a 	mov	r7,r2
  80a158:	3191883a 	add	r8,r6,r6
  80a15c:	5808d07a 	srli	r4,r11,1
  80a160:	4185803a 	cmpltu	r2,r8,r6
  80a164:	39d3883a 	add	r9,r7,r7
  80a168:	28c6b03a 	or	r3,r5,r3
  80a16c:	1245883a 	add	r2,r2,r9
  80a170:	1815883a 	mov	r10,r3
  80a174:	2017883a 	mov	r11,r4
  80a178:	400d883a 	mov	r6,r8
  80a17c:	100f883a 	mov	r7,r2
  80a180:	fc801726 	beq	ra,r18,80a1e0 <__divdf3+0x1b8>
  80a184:	580a97fa 	slli	r5,r11,31
  80a188:	5006d07a 	srli	r3,r10,1
  80a18c:	ffc00044 	addi	ra,ra,1
  80a190:	3c7ff136 	bltu	r7,r17,80a158 <__divdf3+0x130>
  80a194:	3411c83a 	sub	r8,r6,r16
  80a198:	3205803a 	cmpltu	r2,r6,r8
  80a19c:	3c53c83a 	sub	r9,r7,r17
  80a1a0:	7298b03a 	or	r12,r14,r10
  80a1a4:	7adab03a 	or	r13,r15,r11
  80a1a8:	4885c83a 	sub	r2,r9,r2
  80a1ac:	89ffe61e 	bne	r17,r7,80a148 <__divdf3+0x120>
  80a1b0:	343fe936 	bltu	r6,r16,80a158 <__divdf3+0x130>
  80a1b4:	003fe406 	br	80a148 <__divdf3+0x120>
  80a1b8:	9809883a 	mov	r4,r19
  80a1bc:	d9800415 	stw	r6,16(sp)
  80a1c0:	080aaf00 	call	80aaf0 <__pack_d>
  80a1c4:	dfc01217 	ldw	ra,72(sp)
  80a1c8:	dcc01117 	ldw	r19,68(sp)
  80a1cc:	dc801017 	ldw	r18,64(sp)
  80a1d0:	dc400f17 	ldw	r17,60(sp)
  80a1d4:	dc000e17 	ldw	r16,56(sp)
  80a1d8:	dec01304 	addi	sp,sp,76
  80a1dc:	f800283a 	ret
  80a1e0:	00803fc4 	movi	r2,255
  80a1e4:	7090703a 	and	r8,r14,r2
  80a1e8:	00802004 	movi	r2,128
  80a1ec:	0007883a 	mov	r3,zero
  80a1f0:	0013883a 	mov	r9,zero
  80a1f4:	40800d26 	beq	r8,r2,80a22c <__divdf3+0x204>
  80a1f8:	dbc00815 	stw	r15,32(sp)
  80a1fc:	db800715 	stw	r14,28(sp)
  80a200:	003fab06 	br	80a0b0 <__divdf3+0x88>
  80a204:	343fc92e 	bgeu	r6,r16,80a12c <__divdf3+0x104>
  80a208:	3185883a 	add	r2,r6,r6
  80a20c:	1189803a 	cmpltu	r4,r2,r6
  80a210:	39c7883a 	add	r3,r7,r7
  80a214:	20c9883a 	add	r4,r4,r3
  80a218:	297fffc4 	addi	r5,r5,-1
  80a21c:	100d883a 	mov	r6,r2
  80a220:	200f883a 	mov	r7,r4
  80a224:	d9400615 	stw	r5,24(sp)
  80a228:	003fc006 	br	80a12c <__divdf3+0x104>
  80a22c:	483ff21e 	bne	r9,zero,80a1f8 <__divdf3+0x1d0>
  80a230:	01004004 	movi	r4,256
  80a234:	7104703a 	and	r2,r14,r4
  80a238:	10c4b03a 	or	r2,r2,r3
  80a23c:	103fee1e 	bne	r2,zero,80a1f8 <__divdf3+0x1d0>
  80a240:	31c4b03a 	or	r2,r6,r7
  80a244:	103fec26 	beq	r2,zero,80a1f8 <__divdf3+0x1d0>
  80a248:	7205883a 	add	r2,r14,r8
  80a24c:	1391803a 	cmpltu	r8,r2,r14
  80a250:	43d1883a 	add	r8,r8,r15
  80a254:	013fc004 	movi	r4,-256
  80a258:	111c703a 	and	r14,r2,r4
  80a25c:	401f883a 	mov	r15,r8
  80a260:	003fe506 	br	80a1f8 <__divdf3+0x1d0>
  80a264:	8009883a 	mov	r4,r16
  80a268:	003f9206 	br	80a0b4 <__divdf3+0x8c>
  80a26c:	9809883a 	mov	r4,r19
  80a270:	d8000715 	stw	zero,28(sp)
  80a274:	d8000815 	stw	zero,32(sp)
  80a278:	d8000615 	stw	zero,24(sp)
  80a27c:	003f8d06 	br	80a0b4 <__divdf3+0x8c>

0080a280 <__eqdf2>:
  80a280:	deffef04 	addi	sp,sp,-68
  80a284:	dc400f15 	stw	r17,60(sp)
  80a288:	dc400404 	addi	r17,sp,16
  80a28c:	2005883a 	mov	r2,r4
  80a290:	2807883a 	mov	r3,r5
  80a294:	dc000e15 	stw	r16,56(sp)
  80a298:	d809883a 	mov	r4,sp
  80a29c:	880b883a 	mov	r5,r17
  80a2a0:	dc000904 	addi	r16,sp,36
  80a2a4:	d8c00115 	stw	r3,4(sp)
  80a2a8:	d8800015 	stw	r2,0(sp)
  80a2ac:	d9800215 	stw	r6,8(sp)
  80a2b0:	dfc01015 	stw	ra,64(sp)
  80a2b4:	d9c00315 	stw	r7,12(sp)
  80a2b8:	080ae040 	call	80ae04 <__unpack_d>
  80a2bc:	d9000204 	addi	r4,sp,8
  80a2c0:	800b883a 	mov	r5,r16
  80a2c4:	080ae040 	call	80ae04 <__unpack_d>
  80a2c8:	d8800417 	ldw	r2,16(sp)
  80a2cc:	00c00044 	movi	r3,1
  80a2d0:	180d883a 	mov	r6,r3
  80a2d4:	1880062e 	bgeu	r3,r2,80a2f0 <__eqdf2+0x70>
  80a2d8:	d8800917 	ldw	r2,36(sp)
  80a2dc:	8809883a 	mov	r4,r17
  80a2e0:	800b883a 	mov	r5,r16
  80a2e4:	1880022e 	bgeu	r3,r2,80a2f0 <__eqdf2+0x70>
  80a2e8:	080af3c0 	call	80af3c <__fpcmp_parts_d>
  80a2ec:	100d883a 	mov	r6,r2
  80a2f0:	3005883a 	mov	r2,r6
  80a2f4:	dfc01017 	ldw	ra,64(sp)
  80a2f8:	dc400f17 	ldw	r17,60(sp)
  80a2fc:	dc000e17 	ldw	r16,56(sp)
  80a300:	dec01104 	addi	sp,sp,68
  80a304:	f800283a 	ret

0080a308 <__nedf2>:
  80a308:	deffef04 	addi	sp,sp,-68
  80a30c:	dc400f15 	stw	r17,60(sp)
  80a310:	dc400404 	addi	r17,sp,16
  80a314:	2005883a 	mov	r2,r4
  80a318:	2807883a 	mov	r3,r5
  80a31c:	dc000e15 	stw	r16,56(sp)
  80a320:	d809883a 	mov	r4,sp
  80a324:	880b883a 	mov	r5,r17
  80a328:	dc000904 	addi	r16,sp,36
  80a32c:	d8c00115 	stw	r3,4(sp)
  80a330:	d8800015 	stw	r2,0(sp)
  80a334:	d9800215 	stw	r6,8(sp)
  80a338:	dfc01015 	stw	ra,64(sp)
  80a33c:	d9c00315 	stw	r7,12(sp)
  80a340:	080ae040 	call	80ae04 <__unpack_d>
  80a344:	d9000204 	addi	r4,sp,8
  80a348:	800b883a 	mov	r5,r16
  80a34c:	080ae040 	call	80ae04 <__unpack_d>
  80a350:	d8800417 	ldw	r2,16(sp)
  80a354:	00c00044 	movi	r3,1
  80a358:	180d883a 	mov	r6,r3
  80a35c:	1880062e 	bgeu	r3,r2,80a378 <__nedf2+0x70>
  80a360:	d8800917 	ldw	r2,36(sp)
  80a364:	8809883a 	mov	r4,r17
  80a368:	800b883a 	mov	r5,r16
  80a36c:	1880022e 	bgeu	r3,r2,80a378 <__nedf2+0x70>
  80a370:	080af3c0 	call	80af3c <__fpcmp_parts_d>
  80a374:	100d883a 	mov	r6,r2
  80a378:	3005883a 	mov	r2,r6
  80a37c:	dfc01017 	ldw	ra,64(sp)
  80a380:	dc400f17 	ldw	r17,60(sp)
  80a384:	dc000e17 	ldw	r16,56(sp)
  80a388:	dec01104 	addi	sp,sp,68
  80a38c:	f800283a 	ret

0080a390 <__gtdf2>:
  80a390:	deffef04 	addi	sp,sp,-68
  80a394:	dc400f15 	stw	r17,60(sp)
  80a398:	dc400404 	addi	r17,sp,16
  80a39c:	2005883a 	mov	r2,r4
  80a3a0:	2807883a 	mov	r3,r5
  80a3a4:	dc000e15 	stw	r16,56(sp)
  80a3a8:	d809883a 	mov	r4,sp
  80a3ac:	880b883a 	mov	r5,r17
  80a3b0:	dc000904 	addi	r16,sp,36
  80a3b4:	d8c00115 	stw	r3,4(sp)
  80a3b8:	d8800015 	stw	r2,0(sp)
  80a3bc:	d9800215 	stw	r6,8(sp)
  80a3c0:	dfc01015 	stw	ra,64(sp)
  80a3c4:	d9c00315 	stw	r7,12(sp)
  80a3c8:	080ae040 	call	80ae04 <__unpack_d>
  80a3cc:	d9000204 	addi	r4,sp,8
  80a3d0:	800b883a 	mov	r5,r16
  80a3d4:	080ae040 	call	80ae04 <__unpack_d>
  80a3d8:	d8800417 	ldw	r2,16(sp)
  80a3dc:	00c00044 	movi	r3,1
  80a3e0:	01bfffc4 	movi	r6,-1
  80a3e4:	1880062e 	bgeu	r3,r2,80a400 <__gtdf2+0x70>
  80a3e8:	d8800917 	ldw	r2,36(sp)
  80a3ec:	8809883a 	mov	r4,r17
  80a3f0:	800b883a 	mov	r5,r16
  80a3f4:	1880022e 	bgeu	r3,r2,80a400 <__gtdf2+0x70>
  80a3f8:	080af3c0 	call	80af3c <__fpcmp_parts_d>
  80a3fc:	100d883a 	mov	r6,r2
  80a400:	3005883a 	mov	r2,r6
  80a404:	dfc01017 	ldw	ra,64(sp)
  80a408:	dc400f17 	ldw	r17,60(sp)
  80a40c:	dc000e17 	ldw	r16,56(sp)
  80a410:	dec01104 	addi	sp,sp,68
  80a414:	f800283a 	ret

0080a418 <__gedf2>:
  80a418:	deffef04 	addi	sp,sp,-68
  80a41c:	dc400f15 	stw	r17,60(sp)
  80a420:	dc400404 	addi	r17,sp,16
  80a424:	2005883a 	mov	r2,r4
  80a428:	2807883a 	mov	r3,r5
  80a42c:	dc000e15 	stw	r16,56(sp)
  80a430:	d809883a 	mov	r4,sp
  80a434:	880b883a 	mov	r5,r17
  80a438:	dc000904 	addi	r16,sp,36
  80a43c:	d8c00115 	stw	r3,4(sp)
  80a440:	d8800015 	stw	r2,0(sp)
  80a444:	d9800215 	stw	r6,8(sp)
  80a448:	dfc01015 	stw	ra,64(sp)
  80a44c:	d9c00315 	stw	r7,12(sp)
  80a450:	080ae040 	call	80ae04 <__unpack_d>
  80a454:	d9000204 	addi	r4,sp,8
  80a458:	800b883a 	mov	r5,r16
  80a45c:	080ae040 	call	80ae04 <__unpack_d>
  80a460:	d8800417 	ldw	r2,16(sp)
  80a464:	00c00044 	movi	r3,1
  80a468:	01bfffc4 	movi	r6,-1
  80a46c:	1880062e 	bgeu	r3,r2,80a488 <__gedf2+0x70>
  80a470:	d8800917 	ldw	r2,36(sp)
  80a474:	8809883a 	mov	r4,r17
  80a478:	800b883a 	mov	r5,r16
  80a47c:	1880022e 	bgeu	r3,r2,80a488 <__gedf2+0x70>
  80a480:	080af3c0 	call	80af3c <__fpcmp_parts_d>
  80a484:	100d883a 	mov	r6,r2
  80a488:	3005883a 	mov	r2,r6
  80a48c:	dfc01017 	ldw	ra,64(sp)
  80a490:	dc400f17 	ldw	r17,60(sp)
  80a494:	dc000e17 	ldw	r16,56(sp)
  80a498:	dec01104 	addi	sp,sp,68
  80a49c:	f800283a 	ret

0080a4a0 <__ltdf2>:
  80a4a0:	deffef04 	addi	sp,sp,-68
  80a4a4:	dc400f15 	stw	r17,60(sp)
  80a4a8:	dc400404 	addi	r17,sp,16
  80a4ac:	2005883a 	mov	r2,r4
  80a4b0:	2807883a 	mov	r3,r5
  80a4b4:	dc000e15 	stw	r16,56(sp)
  80a4b8:	d809883a 	mov	r4,sp
  80a4bc:	880b883a 	mov	r5,r17
  80a4c0:	dc000904 	addi	r16,sp,36
  80a4c4:	d8c00115 	stw	r3,4(sp)
  80a4c8:	d8800015 	stw	r2,0(sp)
  80a4cc:	d9800215 	stw	r6,8(sp)
  80a4d0:	dfc01015 	stw	ra,64(sp)
  80a4d4:	d9c00315 	stw	r7,12(sp)
  80a4d8:	080ae040 	call	80ae04 <__unpack_d>
  80a4dc:	d9000204 	addi	r4,sp,8
  80a4e0:	800b883a 	mov	r5,r16
  80a4e4:	080ae040 	call	80ae04 <__unpack_d>
  80a4e8:	d8800417 	ldw	r2,16(sp)
  80a4ec:	00c00044 	movi	r3,1
  80a4f0:	180d883a 	mov	r6,r3
  80a4f4:	1880062e 	bgeu	r3,r2,80a510 <__ltdf2+0x70>
  80a4f8:	d8800917 	ldw	r2,36(sp)
  80a4fc:	8809883a 	mov	r4,r17
  80a500:	800b883a 	mov	r5,r16
  80a504:	1880022e 	bgeu	r3,r2,80a510 <__ltdf2+0x70>
  80a508:	080af3c0 	call	80af3c <__fpcmp_parts_d>
  80a50c:	100d883a 	mov	r6,r2
  80a510:	3005883a 	mov	r2,r6
  80a514:	dfc01017 	ldw	ra,64(sp)
  80a518:	dc400f17 	ldw	r17,60(sp)
  80a51c:	dc000e17 	ldw	r16,56(sp)
  80a520:	dec01104 	addi	sp,sp,68
  80a524:	f800283a 	ret

0080a528 <__floatsidf>:
  80a528:	2006d7fa 	srli	r3,r4,31
  80a52c:	defff604 	addi	sp,sp,-40
  80a530:	008000c4 	movi	r2,3
  80a534:	dfc00915 	stw	ra,36(sp)
  80a538:	dcc00815 	stw	r19,32(sp)
  80a53c:	dc800715 	stw	r18,28(sp)
  80a540:	dc400615 	stw	r17,24(sp)
  80a544:	dc000515 	stw	r16,20(sp)
  80a548:	d8800015 	stw	r2,0(sp)
  80a54c:	d8c00115 	stw	r3,4(sp)
  80a550:	20000f1e 	bne	r4,zero,80a590 <__floatsidf+0x68>
  80a554:	00800084 	movi	r2,2
  80a558:	d8800015 	stw	r2,0(sp)
  80a55c:	d809883a 	mov	r4,sp
  80a560:	080aaf00 	call	80aaf0 <__pack_d>
  80a564:	1009883a 	mov	r4,r2
  80a568:	180b883a 	mov	r5,r3
  80a56c:	2005883a 	mov	r2,r4
  80a570:	2807883a 	mov	r3,r5
  80a574:	dfc00917 	ldw	ra,36(sp)
  80a578:	dcc00817 	ldw	r19,32(sp)
  80a57c:	dc800717 	ldw	r18,28(sp)
  80a580:	dc400617 	ldw	r17,24(sp)
  80a584:	dc000517 	ldw	r16,20(sp)
  80a588:	dec00a04 	addi	sp,sp,40
  80a58c:	f800283a 	ret
  80a590:	00800f04 	movi	r2,60
  80a594:	1807003a 	cmpeq	r3,r3,zero
  80a598:	d8800215 	stw	r2,8(sp)
  80a59c:	18001126 	beq	r3,zero,80a5e4 <__floatsidf+0xbc>
  80a5a0:	0027883a 	mov	r19,zero
  80a5a4:	2025883a 	mov	r18,r4
  80a5a8:	d9000315 	stw	r4,12(sp)
  80a5ac:	dcc00415 	stw	r19,16(sp)
  80a5b0:	080aa700 	call	80aa70 <__clzsi2>
  80a5b4:	11000744 	addi	r4,r2,29
  80a5b8:	013fe80e 	bge	zero,r4,80a55c <__floatsidf+0x34>
  80a5bc:	10bfff44 	addi	r2,r2,-3
  80a5c0:	10000c16 	blt	r2,zero,80a5f4 <__floatsidf+0xcc>
  80a5c4:	90a2983a 	sll	r17,r18,r2
  80a5c8:	0021883a 	mov	r16,zero
  80a5cc:	d8800217 	ldw	r2,8(sp)
  80a5d0:	dc400415 	stw	r17,16(sp)
  80a5d4:	dc000315 	stw	r16,12(sp)
  80a5d8:	1105c83a 	sub	r2,r2,r4
  80a5dc:	d8800215 	stw	r2,8(sp)
  80a5e0:	003fde06 	br	80a55c <__floatsidf+0x34>
  80a5e4:	00a00034 	movhi	r2,32768
  80a5e8:	20800a26 	beq	r4,r2,80a614 <__floatsidf+0xec>
  80a5ec:	0109c83a 	sub	r4,zero,r4
  80a5f0:	003feb06 	br	80a5a0 <__floatsidf+0x78>
  80a5f4:	9006d07a 	srli	r3,r18,1
  80a5f8:	008007c4 	movi	r2,31
  80a5fc:	1105c83a 	sub	r2,r2,r4
  80a600:	1886d83a 	srl	r3,r3,r2
  80a604:	9922983a 	sll	r17,r19,r4
  80a608:	9120983a 	sll	r16,r18,r4
  80a60c:	1c62b03a 	or	r17,r3,r17
  80a610:	003fee06 	br	80a5cc <__floatsidf+0xa4>
  80a614:	0009883a 	mov	r4,zero
  80a618:	01707834 	movhi	r5,49632
  80a61c:	003fd306 	br	80a56c <__floatsidf+0x44>

0080a620 <__fixdfsi>:
  80a620:	defff804 	addi	sp,sp,-32
  80a624:	2005883a 	mov	r2,r4
  80a628:	2807883a 	mov	r3,r5
  80a62c:	d809883a 	mov	r4,sp
  80a630:	d9400204 	addi	r5,sp,8
  80a634:	d8c00115 	stw	r3,4(sp)
  80a638:	d8800015 	stw	r2,0(sp)
  80a63c:	dfc00715 	stw	ra,28(sp)
  80a640:	080ae040 	call	80ae04 <__unpack_d>
  80a644:	d8c00217 	ldw	r3,8(sp)
  80a648:	00800084 	movi	r2,2
  80a64c:	1880051e 	bne	r3,r2,80a664 <__fixdfsi+0x44>
  80a650:	0007883a 	mov	r3,zero
  80a654:	1805883a 	mov	r2,r3
  80a658:	dfc00717 	ldw	ra,28(sp)
  80a65c:	dec00804 	addi	sp,sp,32
  80a660:	f800283a 	ret
  80a664:	00800044 	movi	r2,1
  80a668:	10fff92e 	bgeu	r2,r3,80a650 <__fixdfsi+0x30>
  80a66c:	00800104 	movi	r2,4
  80a670:	18800426 	beq	r3,r2,80a684 <__fixdfsi+0x64>
  80a674:	d8c00417 	ldw	r3,16(sp)
  80a678:	183ff516 	blt	r3,zero,80a650 <__fixdfsi+0x30>
  80a67c:	00800784 	movi	r2,30
  80a680:	10c0080e 	bge	r2,r3,80a6a4 <__fixdfsi+0x84>
  80a684:	d8800317 	ldw	r2,12(sp)
  80a688:	1000121e 	bne	r2,zero,80a6d4 <__fixdfsi+0xb4>
  80a68c:	00e00034 	movhi	r3,32768
  80a690:	18ffffc4 	addi	r3,r3,-1
  80a694:	1805883a 	mov	r2,r3
  80a698:	dfc00717 	ldw	ra,28(sp)
  80a69c:	dec00804 	addi	sp,sp,32
  80a6a0:	f800283a 	ret
  80a6a4:	00800f04 	movi	r2,60
  80a6a8:	10d1c83a 	sub	r8,r2,r3
  80a6ac:	40bff804 	addi	r2,r8,-32
  80a6b0:	d9800517 	ldw	r6,20(sp)
  80a6b4:	d9c00617 	ldw	r7,24(sp)
  80a6b8:	10000816 	blt	r2,zero,80a6dc <__fixdfsi+0xbc>
  80a6bc:	3888d83a 	srl	r4,r7,r2
  80a6c0:	d8800317 	ldw	r2,12(sp)
  80a6c4:	2007883a 	mov	r3,r4
  80a6c8:	103fe226 	beq	r2,zero,80a654 <__fixdfsi+0x34>
  80a6cc:	0107c83a 	sub	r3,zero,r4
  80a6d0:	003fe006 	br	80a654 <__fixdfsi+0x34>
  80a6d4:	00e00034 	movhi	r3,32768
  80a6d8:	003fde06 	br	80a654 <__fixdfsi+0x34>
  80a6dc:	39c7883a 	add	r3,r7,r7
  80a6e0:	008007c4 	movi	r2,31
  80a6e4:	1205c83a 	sub	r2,r2,r8
  80a6e8:	1886983a 	sll	r3,r3,r2
  80a6ec:	3208d83a 	srl	r4,r6,r8
  80a6f0:	1908b03a 	or	r4,r3,r4
  80a6f4:	003ff206 	br	80a6c0 <__fixdfsi+0xa0>

0080a6f8 <__floatunsidf>:
  80a6f8:	defff204 	addi	sp,sp,-56
  80a6fc:	dfc00d15 	stw	ra,52(sp)
  80a700:	ddc00c15 	stw	r23,48(sp)
  80a704:	dd800b15 	stw	r22,44(sp)
  80a708:	dd400a15 	stw	r21,40(sp)
  80a70c:	dd000915 	stw	r20,36(sp)
  80a710:	dcc00815 	stw	r19,32(sp)
  80a714:	dc800715 	stw	r18,28(sp)
  80a718:	dc400615 	stw	r17,24(sp)
  80a71c:	dc000515 	stw	r16,20(sp)
  80a720:	d8000115 	stw	zero,4(sp)
  80a724:	20000f1e 	bne	r4,zero,80a764 <__floatunsidf+0x6c>
  80a728:	00800084 	movi	r2,2
  80a72c:	d8800015 	stw	r2,0(sp)
  80a730:	d809883a 	mov	r4,sp
  80a734:	080aaf00 	call	80aaf0 <__pack_d>
  80a738:	dfc00d17 	ldw	ra,52(sp)
  80a73c:	ddc00c17 	ldw	r23,48(sp)
  80a740:	dd800b17 	ldw	r22,44(sp)
  80a744:	dd400a17 	ldw	r21,40(sp)
  80a748:	dd000917 	ldw	r20,36(sp)
  80a74c:	dcc00817 	ldw	r19,32(sp)
  80a750:	dc800717 	ldw	r18,28(sp)
  80a754:	dc400617 	ldw	r17,24(sp)
  80a758:	dc000517 	ldw	r16,20(sp)
  80a75c:	dec00e04 	addi	sp,sp,56
  80a760:	f800283a 	ret
  80a764:	008000c4 	movi	r2,3
  80a768:	00c00f04 	movi	r3,60
  80a76c:	002f883a 	mov	r23,zero
  80a770:	202d883a 	mov	r22,r4
  80a774:	d8800015 	stw	r2,0(sp)
  80a778:	d8c00215 	stw	r3,8(sp)
  80a77c:	d9000315 	stw	r4,12(sp)
  80a780:	ddc00415 	stw	r23,16(sp)
  80a784:	080aa700 	call	80aa70 <__clzsi2>
  80a788:	12400744 	addi	r9,r2,29
  80a78c:	48000b16 	blt	r9,zero,80a7bc <__floatunsidf+0xc4>
  80a790:	483fe726 	beq	r9,zero,80a730 <__floatunsidf+0x38>
  80a794:	10bfff44 	addi	r2,r2,-3
  80a798:	10002e16 	blt	r2,zero,80a854 <__floatunsidf+0x15c>
  80a79c:	b0a2983a 	sll	r17,r22,r2
  80a7a0:	0021883a 	mov	r16,zero
  80a7a4:	d8800217 	ldw	r2,8(sp)
  80a7a8:	dc400415 	stw	r17,16(sp)
  80a7ac:	dc000315 	stw	r16,12(sp)
  80a7b0:	1245c83a 	sub	r2,r2,r9
  80a7b4:	d8800215 	stw	r2,8(sp)
  80a7b8:	003fdd06 	br	80a730 <__floatunsidf+0x38>
  80a7bc:	0255c83a 	sub	r10,zero,r9
  80a7c0:	51bff804 	addi	r6,r10,-32
  80a7c4:	30001b16 	blt	r6,zero,80a834 <__floatunsidf+0x13c>
  80a7c8:	b9a8d83a 	srl	r20,r23,r6
  80a7cc:	002b883a 	mov	r21,zero
  80a7d0:	000f883a 	mov	r7,zero
  80a7d4:	01000044 	movi	r4,1
  80a7d8:	0011883a 	mov	r8,zero
  80a7dc:	30002516 	blt	r6,zero,80a874 <__floatunsidf+0x17c>
  80a7e0:	21a6983a 	sll	r19,r4,r6
  80a7e4:	0025883a 	mov	r18,zero
  80a7e8:	00bfffc4 	movi	r2,-1
  80a7ec:	9089883a 	add	r4,r18,r2
  80a7f0:	988b883a 	add	r5,r19,r2
  80a7f4:	248d803a 	cmpltu	r6,r4,r18
  80a7f8:	314b883a 	add	r5,r6,r5
  80a7fc:	b104703a 	and	r2,r22,r4
  80a800:	b946703a 	and	r3,r23,r5
  80a804:	10c4b03a 	or	r2,r2,r3
  80a808:	10000226 	beq	r2,zero,80a814 <__floatunsidf+0x11c>
  80a80c:	01c00044 	movi	r7,1
  80a810:	0011883a 	mov	r8,zero
  80a814:	d9000217 	ldw	r4,8(sp)
  80a818:	a1c4b03a 	or	r2,r20,r7
  80a81c:	aa06b03a 	or	r3,r21,r8
  80a820:	2249c83a 	sub	r4,r4,r9
  80a824:	d8c00415 	stw	r3,16(sp)
  80a828:	d9000215 	stw	r4,8(sp)
  80a82c:	d8800315 	stw	r2,12(sp)
  80a830:	003fbf06 	br	80a730 <__floatunsidf+0x38>
  80a834:	bdc7883a 	add	r3,r23,r23
  80a838:	008007c4 	movi	r2,31
  80a83c:	1285c83a 	sub	r2,r2,r10
  80a840:	1886983a 	sll	r3,r3,r2
  80a844:	b2a8d83a 	srl	r20,r22,r10
  80a848:	baaad83a 	srl	r21,r23,r10
  80a84c:	1d28b03a 	or	r20,r3,r20
  80a850:	003fdf06 	br	80a7d0 <__floatunsidf+0xd8>
  80a854:	b006d07a 	srli	r3,r22,1
  80a858:	008007c4 	movi	r2,31
  80a85c:	1245c83a 	sub	r2,r2,r9
  80a860:	1886d83a 	srl	r3,r3,r2
  80a864:	ba62983a 	sll	r17,r23,r9
  80a868:	b260983a 	sll	r16,r22,r9
  80a86c:	1c62b03a 	or	r17,r3,r17
  80a870:	003fcc06 	br	80a7a4 <__floatunsidf+0xac>
  80a874:	2006d07a 	srli	r3,r4,1
  80a878:	008007c4 	movi	r2,31
  80a87c:	1285c83a 	sub	r2,r2,r10
  80a880:	18a6d83a 	srl	r19,r3,r2
  80a884:	22a4983a 	sll	r18,r4,r10
  80a888:	003fd706 	br	80a7e8 <__floatunsidf+0xf0>

0080a88c <udivmodsi4>:
  80a88c:	29001b2e 	bgeu	r5,r4,80a8fc <udivmodsi4+0x70>
  80a890:	28001a16 	blt	r5,zero,80a8fc <udivmodsi4+0x70>
  80a894:	00800044 	movi	r2,1
  80a898:	0007883a 	mov	r3,zero
  80a89c:	01c007c4 	movi	r7,31
  80a8a0:	00000306 	br	80a8b0 <udivmodsi4+0x24>
  80a8a4:	19c01326 	beq	r3,r7,80a8f4 <udivmodsi4+0x68>
  80a8a8:	18c00044 	addi	r3,r3,1
  80a8ac:	28000416 	blt	r5,zero,80a8c0 <udivmodsi4+0x34>
  80a8b0:	294b883a 	add	r5,r5,r5
  80a8b4:	1085883a 	add	r2,r2,r2
  80a8b8:	293ffa36 	bltu	r5,r4,80a8a4 <udivmodsi4+0x18>
  80a8bc:	10000d26 	beq	r2,zero,80a8f4 <udivmodsi4+0x68>
  80a8c0:	0007883a 	mov	r3,zero
  80a8c4:	21400236 	bltu	r4,r5,80a8d0 <udivmodsi4+0x44>
  80a8c8:	2149c83a 	sub	r4,r4,r5
  80a8cc:	1886b03a 	or	r3,r3,r2
  80a8d0:	1004d07a 	srli	r2,r2,1
  80a8d4:	280ad07a 	srli	r5,r5,1
  80a8d8:	103ffa1e 	bne	r2,zero,80a8c4 <udivmodsi4+0x38>
  80a8dc:	30000226 	beq	r6,zero,80a8e8 <udivmodsi4+0x5c>
  80a8e0:	2005883a 	mov	r2,r4
  80a8e4:	f800283a 	ret
  80a8e8:	1809883a 	mov	r4,r3
  80a8ec:	2005883a 	mov	r2,r4
  80a8f0:	f800283a 	ret
  80a8f4:	0007883a 	mov	r3,zero
  80a8f8:	003ff806 	br	80a8dc <udivmodsi4+0x50>
  80a8fc:	00800044 	movi	r2,1
  80a900:	0007883a 	mov	r3,zero
  80a904:	003fef06 	br	80a8c4 <udivmodsi4+0x38>

0080a908 <__divsi3>:
  80a908:	defffe04 	addi	sp,sp,-8
  80a90c:	dc000015 	stw	r16,0(sp)
  80a910:	dfc00115 	stw	ra,4(sp)
  80a914:	0021883a 	mov	r16,zero
  80a918:	20000c16 	blt	r4,zero,80a94c <__divsi3+0x44>
  80a91c:	000d883a 	mov	r6,zero
  80a920:	28000e16 	blt	r5,zero,80a95c <__divsi3+0x54>
  80a924:	080a88c0 	call	80a88c <udivmodsi4>
  80a928:	1007883a 	mov	r3,r2
  80a92c:	8005003a 	cmpeq	r2,r16,zero
  80a930:	1000011e 	bne	r2,zero,80a938 <__divsi3+0x30>
  80a934:	00c7c83a 	sub	r3,zero,r3
  80a938:	1805883a 	mov	r2,r3
  80a93c:	dfc00117 	ldw	ra,4(sp)
  80a940:	dc000017 	ldw	r16,0(sp)
  80a944:	dec00204 	addi	sp,sp,8
  80a948:	f800283a 	ret
  80a94c:	0109c83a 	sub	r4,zero,r4
  80a950:	04000044 	movi	r16,1
  80a954:	000d883a 	mov	r6,zero
  80a958:	283ff20e 	bge	r5,zero,80a924 <__divsi3+0x1c>
  80a95c:	014bc83a 	sub	r5,zero,r5
  80a960:	8021003a 	cmpeq	r16,r16,zero
  80a964:	003fef06 	br	80a924 <__divsi3+0x1c>

0080a968 <__modsi3>:
  80a968:	deffff04 	addi	sp,sp,-4
  80a96c:	dfc00015 	stw	ra,0(sp)
  80a970:	01800044 	movi	r6,1
  80a974:	2807883a 	mov	r3,r5
  80a978:	20000416 	blt	r4,zero,80a98c <__modsi3+0x24>
  80a97c:	28000c16 	blt	r5,zero,80a9b0 <__modsi3+0x48>
  80a980:	dfc00017 	ldw	ra,0(sp)
  80a984:	dec00104 	addi	sp,sp,4
  80a988:	080a88c1 	jmpi	80a88c <udivmodsi4>
  80a98c:	0109c83a 	sub	r4,zero,r4
  80a990:	28000b16 	blt	r5,zero,80a9c0 <__modsi3+0x58>
  80a994:	180b883a 	mov	r5,r3
  80a998:	01800044 	movi	r6,1
  80a99c:	080a88c0 	call	80a88c <udivmodsi4>
  80a9a0:	0085c83a 	sub	r2,zero,r2
  80a9a4:	dfc00017 	ldw	ra,0(sp)
  80a9a8:	dec00104 	addi	sp,sp,4
  80a9ac:	f800283a 	ret
  80a9b0:	014bc83a 	sub	r5,zero,r5
  80a9b4:	dfc00017 	ldw	ra,0(sp)
  80a9b8:	dec00104 	addi	sp,sp,4
  80a9bc:	080a88c1 	jmpi	80a88c <udivmodsi4>
  80a9c0:	0147c83a 	sub	r3,zero,r5
  80a9c4:	003ff306 	br	80a994 <__modsi3+0x2c>

0080a9c8 <__udivsi3>:
  80a9c8:	000d883a 	mov	r6,zero
  80a9cc:	080a88c1 	jmpi	80a88c <udivmodsi4>

0080a9d0 <__umodsi3>:
  80a9d0:	01800044 	movi	r6,1
  80a9d4:	080a88c1 	jmpi	80a88c <udivmodsi4>

0080a9d8 <__muldi3>:
  80a9d8:	2011883a 	mov	r8,r4
  80a9dc:	427fffcc 	andi	r9,r8,65535
  80a9e0:	4018d43a 	srli	r12,r8,16
  80a9e4:	32bfffcc 	andi	r10,r6,65535
  80a9e8:	3016d43a 	srli	r11,r6,16
  80a9ec:	4a85383a 	mul	r2,r9,r10
  80a9f0:	6295383a 	mul	r10,r12,r10
  80a9f4:	4ad3383a 	mul	r9,r9,r11
  80a9f8:	113fffcc 	andi	r4,r2,65535
  80a9fc:	1004d43a 	srli	r2,r2,16
  80aa00:	4a93883a 	add	r9,r9,r10
  80aa04:	3807883a 	mov	r3,r7
  80aa08:	1245883a 	add	r2,r2,r9
  80aa0c:	280f883a 	mov	r7,r5
  80aa10:	180b883a 	mov	r5,r3
  80aa14:	1006943a 	slli	r3,r2,16
  80aa18:	defffd04 	addi	sp,sp,-12
  80aa1c:	dc800215 	stw	r18,8(sp)
  80aa20:	1907883a 	add	r3,r3,r4
  80aa24:	dc400115 	stw	r17,4(sp)
  80aa28:	dc000015 	stw	r16,0(sp)
  80aa2c:	4165383a 	mul	r18,r8,r5
  80aa30:	31e3383a 	mul	r17,r6,r7
  80aa34:	1012d43a 	srli	r9,r2,16
  80aa38:	62d9383a 	mul	r12,r12,r11
  80aa3c:	181f883a 	mov	r15,r3
  80aa40:	1280022e 	bgeu	r2,r10,80aa4c <__muldi3+0x74>
  80aa44:	00800074 	movhi	r2,1
  80aa48:	6099883a 	add	r12,r12,r2
  80aa4c:	624d883a 	add	r6,r12,r9
  80aa50:	9187883a 	add	r3,r18,r6
  80aa54:	88c7883a 	add	r3,r17,r3
  80aa58:	7805883a 	mov	r2,r15
  80aa5c:	dc800217 	ldw	r18,8(sp)
  80aa60:	dc400117 	ldw	r17,4(sp)
  80aa64:	dc000017 	ldw	r16,0(sp)
  80aa68:	dec00304 	addi	sp,sp,12
  80aa6c:	f800283a 	ret

0080aa70 <__clzsi2>:
  80aa70:	00bfffd4 	movui	r2,65535
  80aa74:	11000e36 	bltu	r2,r4,80aab0 <__clzsi2+0x40>
  80aa78:	00803fc4 	movi	r2,255
  80aa7c:	01400204 	movi	r5,8
  80aa80:	0007883a 	mov	r3,zero
  80aa84:	11001036 	bltu	r2,r4,80aac8 <__clzsi2+0x58>
  80aa88:	000b883a 	mov	r5,zero
  80aa8c:	20c6d83a 	srl	r3,r4,r3
  80aa90:	00802074 	movhi	r2,129
  80aa94:	10bf4a04 	addi	r2,r2,-728
  80aa98:	1887883a 	add	r3,r3,r2
  80aa9c:	18800003 	ldbu	r2,0(r3)
  80aaa0:	00c00804 	movi	r3,32
  80aaa4:	2885883a 	add	r2,r5,r2
  80aaa8:	1885c83a 	sub	r2,r3,r2
  80aaac:	f800283a 	ret
  80aab0:	01400404 	movi	r5,16
  80aab4:	00804034 	movhi	r2,256
  80aab8:	10bfffc4 	addi	r2,r2,-1
  80aabc:	2807883a 	mov	r3,r5
  80aac0:	113ff22e 	bgeu	r2,r4,80aa8c <__clzsi2+0x1c>
  80aac4:	01400604 	movi	r5,24
  80aac8:	2807883a 	mov	r3,r5
  80aacc:	20c6d83a 	srl	r3,r4,r3
  80aad0:	00802074 	movhi	r2,129
  80aad4:	10bf4a04 	addi	r2,r2,-728
  80aad8:	1887883a 	add	r3,r3,r2
  80aadc:	18800003 	ldbu	r2,0(r3)
  80aae0:	00c00804 	movi	r3,32
  80aae4:	2885883a 	add	r2,r5,r2
  80aae8:	1885c83a 	sub	r2,r3,r2
  80aaec:	f800283a 	ret

0080aaf0 <__pack_d>:
  80aaf0:	20c00017 	ldw	r3,0(r4)
  80aaf4:	defffd04 	addi	sp,sp,-12
  80aaf8:	dc000015 	stw	r16,0(sp)
  80aafc:	dc800215 	stw	r18,8(sp)
  80ab00:	dc400115 	stw	r17,4(sp)
  80ab04:	00800044 	movi	r2,1
  80ab08:	22000317 	ldw	r8,12(r4)
  80ab0c:	001f883a 	mov	r15,zero
  80ab10:	22400417 	ldw	r9,16(r4)
  80ab14:	24000117 	ldw	r16,4(r4)
  80ab18:	10c0552e 	bgeu	r2,r3,80ac70 <__pack_d+0x180>
  80ab1c:	00800104 	movi	r2,4
  80ab20:	18804f26 	beq	r3,r2,80ac60 <__pack_d+0x170>
  80ab24:	00800084 	movi	r2,2
  80ab28:	18800226 	beq	r3,r2,80ab34 <__pack_d+0x44>
  80ab2c:	4244b03a 	or	r2,r8,r9
  80ab30:	10001a1e 	bne	r2,zero,80ab9c <__pack_d+0xac>
  80ab34:	000d883a 	mov	r6,zero
  80ab38:	000f883a 	mov	r7,zero
  80ab3c:	0011883a 	mov	r8,zero
  80ab40:	00800434 	movhi	r2,16
  80ab44:	10bfffc4 	addi	r2,r2,-1
  80ab48:	301d883a 	mov	r14,r6
  80ab4c:	3884703a 	and	r2,r7,r2
  80ab50:	400a953a 	slli	r5,r8,20
  80ab54:	79bffc2c 	andhi	r6,r15,65520
  80ab58:	308cb03a 	or	r6,r6,r2
  80ab5c:	00e00434 	movhi	r3,32784
  80ab60:	18ffffc4 	addi	r3,r3,-1
  80ab64:	800497fa 	slli	r2,r16,31
  80ab68:	30c6703a 	and	r3,r6,r3
  80ab6c:	1946b03a 	or	r3,r3,r5
  80ab70:	01600034 	movhi	r5,32768
  80ab74:	297fffc4 	addi	r5,r5,-1
  80ab78:	194a703a 	and	r5,r3,r5
  80ab7c:	288ab03a 	or	r5,r5,r2
  80ab80:	2807883a 	mov	r3,r5
  80ab84:	7005883a 	mov	r2,r14
  80ab88:	dc800217 	ldw	r18,8(sp)
  80ab8c:	dc400117 	ldw	r17,4(sp)
  80ab90:	dc000017 	ldw	r16,0(sp)
  80ab94:	dec00304 	addi	sp,sp,12
  80ab98:	f800283a 	ret
  80ab9c:	21000217 	ldw	r4,8(r4)
  80aba0:	00bf0084 	movi	r2,-1022
  80aba4:	20803f16 	blt	r4,r2,80aca4 <__pack_d+0x1b4>
  80aba8:	0080ffc4 	movi	r2,1023
  80abac:	11002c16 	blt	r2,r4,80ac60 <__pack_d+0x170>
  80abb0:	00803fc4 	movi	r2,255
  80abb4:	408c703a 	and	r6,r8,r2
  80abb8:	00802004 	movi	r2,128
  80abbc:	0007883a 	mov	r3,zero
  80abc0:	000f883a 	mov	r7,zero
  80abc4:	2280ffc4 	addi	r10,r4,1023
  80abc8:	30801e26 	beq	r6,r2,80ac44 <__pack_d+0x154>
  80abcc:	00801fc4 	movi	r2,127
  80abd0:	4089883a 	add	r4,r8,r2
  80abd4:	220d803a 	cmpltu	r6,r4,r8
  80abd8:	324d883a 	add	r6,r6,r9
  80abdc:	2011883a 	mov	r8,r4
  80abe0:	3013883a 	mov	r9,r6
  80abe4:	00880034 	movhi	r2,8192
  80abe8:	10bfffc4 	addi	r2,r2,-1
  80abec:	12400d36 	bltu	r2,r9,80ac24 <__pack_d+0x134>
  80abf0:	4804963a 	slli	r2,r9,24
  80abf4:	400cd23a 	srli	r6,r8,8
  80abf8:	480ed23a 	srli	r7,r9,8
  80abfc:	013fffc4 	movi	r4,-1
  80ac00:	118cb03a 	or	r6,r2,r6
  80ac04:	01400434 	movhi	r5,16
  80ac08:	297fffc4 	addi	r5,r5,-1
  80ac0c:	3104703a 	and	r2,r6,r4
  80ac10:	3946703a 	and	r3,r7,r5
  80ac14:	5201ffcc 	andi	r8,r10,2047
  80ac18:	100d883a 	mov	r6,r2
  80ac1c:	180f883a 	mov	r7,r3
  80ac20:	003fc706 	br	80ab40 <__pack_d+0x50>
  80ac24:	480897fa 	slli	r4,r9,31
  80ac28:	4004d07a 	srli	r2,r8,1
  80ac2c:	4806d07a 	srli	r3,r9,1
  80ac30:	52800044 	addi	r10,r10,1
  80ac34:	2084b03a 	or	r2,r4,r2
  80ac38:	1011883a 	mov	r8,r2
  80ac3c:	1813883a 	mov	r9,r3
  80ac40:	003feb06 	br	80abf0 <__pack_d+0x100>
  80ac44:	383fe11e 	bne	r7,zero,80abcc <__pack_d+0xdc>
  80ac48:	01004004 	movi	r4,256
  80ac4c:	4104703a 	and	r2,r8,r4
  80ac50:	10c4b03a 	or	r2,r2,r3
  80ac54:	103fe326 	beq	r2,zero,80abe4 <__pack_d+0xf4>
  80ac58:	3005883a 	mov	r2,r6
  80ac5c:	003fdc06 	br	80abd0 <__pack_d+0xe0>
  80ac60:	000d883a 	mov	r6,zero
  80ac64:	000f883a 	mov	r7,zero
  80ac68:	0201ffc4 	movi	r8,2047
  80ac6c:	003fb406 	br	80ab40 <__pack_d+0x50>
  80ac70:	0005883a 	mov	r2,zero
  80ac74:	00c00234 	movhi	r3,8
  80ac78:	408cb03a 	or	r6,r8,r2
  80ac7c:	48ceb03a 	or	r7,r9,r3
  80ac80:	013fffc4 	movi	r4,-1
  80ac84:	01400434 	movhi	r5,16
  80ac88:	297fffc4 	addi	r5,r5,-1
  80ac8c:	3104703a 	and	r2,r6,r4
  80ac90:	3946703a 	and	r3,r7,r5
  80ac94:	100d883a 	mov	r6,r2
  80ac98:	180f883a 	mov	r7,r3
  80ac9c:	0201ffc4 	movi	r8,2047
  80aca0:	003fa706 	br	80ab40 <__pack_d+0x50>
  80aca4:	1109c83a 	sub	r4,r2,r4
  80aca8:	00800e04 	movi	r2,56
  80acac:	11004316 	blt	r2,r4,80adbc <__pack_d+0x2cc>
  80acb0:	21fff804 	addi	r7,r4,-32
  80acb4:	38004516 	blt	r7,zero,80adcc <__pack_d+0x2dc>
  80acb8:	49d8d83a 	srl	r12,r9,r7
  80acbc:	001b883a 	mov	r13,zero
  80acc0:	0023883a 	mov	r17,zero
  80acc4:	01400044 	movi	r5,1
  80acc8:	0025883a 	mov	r18,zero
  80accc:	38004716 	blt	r7,zero,80adec <__pack_d+0x2fc>
  80acd0:	29d6983a 	sll	r11,r5,r7
  80acd4:	0015883a 	mov	r10,zero
  80acd8:	00bfffc4 	movi	r2,-1
  80acdc:	5089883a 	add	r4,r10,r2
  80ace0:	588b883a 	add	r5,r11,r2
  80ace4:	228d803a 	cmpltu	r6,r4,r10
  80ace8:	314b883a 	add	r5,r6,r5
  80acec:	4104703a 	and	r2,r8,r4
  80acf0:	4946703a 	and	r3,r9,r5
  80acf4:	10c4b03a 	or	r2,r2,r3
  80acf8:	10000226 	beq	r2,zero,80ad04 <__pack_d+0x214>
  80acfc:	04400044 	movi	r17,1
  80ad00:	0025883a 	mov	r18,zero
  80ad04:	00803fc4 	movi	r2,255
  80ad08:	644eb03a 	or	r7,r12,r17
  80ad0c:	3892703a 	and	r9,r7,r2
  80ad10:	00802004 	movi	r2,128
  80ad14:	6c90b03a 	or	r8,r13,r18
  80ad18:	0015883a 	mov	r10,zero
  80ad1c:	48801626 	beq	r9,r2,80ad78 <__pack_d+0x288>
  80ad20:	01001fc4 	movi	r4,127
  80ad24:	3905883a 	add	r2,r7,r4
  80ad28:	11cd803a 	cmpltu	r6,r2,r7
  80ad2c:	320d883a 	add	r6,r6,r8
  80ad30:	100f883a 	mov	r7,r2
  80ad34:	00840034 	movhi	r2,4096
  80ad38:	10bfffc4 	addi	r2,r2,-1
  80ad3c:	3011883a 	mov	r8,r6
  80ad40:	0007883a 	mov	r3,zero
  80ad44:	11801b36 	bltu	r2,r6,80adb4 <__pack_d+0x2c4>
  80ad48:	4004963a 	slli	r2,r8,24
  80ad4c:	3808d23a 	srli	r4,r7,8
  80ad50:	400ad23a 	srli	r5,r8,8
  80ad54:	1813883a 	mov	r9,r3
  80ad58:	1108b03a 	or	r4,r2,r4
  80ad5c:	00bfffc4 	movi	r2,-1
  80ad60:	00c00434 	movhi	r3,16
  80ad64:	18ffffc4 	addi	r3,r3,-1
  80ad68:	208c703a 	and	r6,r4,r2
  80ad6c:	28ce703a 	and	r7,r5,r3
  80ad70:	4a01ffcc 	andi	r8,r9,2047
  80ad74:	003f7206 	br	80ab40 <__pack_d+0x50>
  80ad78:	503fe91e 	bne	r10,zero,80ad20 <__pack_d+0x230>
  80ad7c:	01004004 	movi	r4,256
  80ad80:	3904703a 	and	r2,r7,r4
  80ad84:	0007883a 	mov	r3,zero
  80ad88:	10c4b03a 	or	r2,r2,r3
  80ad8c:	10000626 	beq	r2,zero,80ada8 <__pack_d+0x2b8>
  80ad90:	3a45883a 	add	r2,r7,r9
  80ad94:	11cd803a 	cmpltu	r6,r2,r7
  80ad98:	320d883a 	add	r6,r6,r8
  80ad9c:	100f883a 	mov	r7,r2
  80ada0:	3011883a 	mov	r8,r6
  80ada4:	0007883a 	mov	r3,zero
  80ada8:	00840034 	movhi	r2,4096
  80adac:	10bfffc4 	addi	r2,r2,-1
  80adb0:	123fe52e 	bgeu	r2,r8,80ad48 <__pack_d+0x258>
  80adb4:	00c00044 	movi	r3,1
  80adb8:	003fe306 	br	80ad48 <__pack_d+0x258>
  80adbc:	0009883a 	mov	r4,zero
  80adc0:	0013883a 	mov	r9,zero
  80adc4:	000b883a 	mov	r5,zero
  80adc8:	003fe406 	br	80ad5c <__pack_d+0x26c>
  80adcc:	4a47883a 	add	r3,r9,r9
  80add0:	008007c4 	movi	r2,31
  80add4:	1105c83a 	sub	r2,r2,r4
  80add8:	1886983a 	sll	r3,r3,r2
  80addc:	4118d83a 	srl	r12,r8,r4
  80ade0:	491ad83a 	srl	r13,r9,r4
  80ade4:	1b18b03a 	or	r12,r3,r12
  80ade8:	003fb506 	br	80acc0 <__pack_d+0x1d0>
  80adec:	2806d07a 	srli	r3,r5,1
  80adf0:	008007c4 	movi	r2,31
  80adf4:	1105c83a 	sub	r2,r2,r4
  80adf8:	1896d83a 	srl	r11,r3,r2
  80adfc:	2914983a 	sll	r10,r5,r4
  80ae00:	003fb506 	br	80acd8 <__pack_d+0x1e8>

0080ae04 <__unpack_d>:
  80ae04:	20c00117 	ldw	r3,4(r4)
  80ae08:	22400017 	ldw	r9,0(r4)
  80ae0c:	00800434 	movhi	r2,16
  80ae10:	10bfffc4 	addi	r2,r2,-1
  80ae14:	1808d53a 	srli	r4,r3,20
  80ae18:	180cd7fa 	srli	r6,r3,31
  80ae1c:	1894703a 	and	r10,r3,r2
  80ae20:	2201ffcc 	andi	r8,r4,2047
  80ae24:	281b883a 	mov	r13,r5
  80ae28:	4817883a 	mov	r11,r9
  80ae2c:	29800115 	stw	r6,4(r5)
  80ae30:	5019883a 	mov	r12,r10
  80ae34:	40001e1e 	bne	r8,zero,80aeb0 <__unpack_d+0xac>
  80ae38:	4a84b03a 	or	r2,r9,r10
  80ae3c:	10001926 	beq	r2,zero,80aea4 <__unpack_d+0xa0>
  80ae40:	4804d63a 	srli	r2,r9,24
  80ae44:	500c923a 	slli	r6,r10,8
  80ae48:	013f0084 	movi	r4,-1022
  80ae4c:	00c40034 	movhi	r3,4096
  80ae50:	18ffffc4 	addi	r3,r3,-1
  80ae54:	118cb03a 	or	r6,r2,r6
  80ae58:	008000c4 	movi	r2,3
  80ae5c:	480a923a 	slli	r5,r9,8
  80ae60:	68800015 	stw	r2,0(r13)
  80ae64:	69000215 	stw	r4,8(r13)
  80ae68:	19800b36 	bltu	r3,r6,80ae98 <__unpack_d+0x94>
  80ae6c:	200f883a 	mov	r7,r4
  80ae70:	1811883a 	mov	r8,r3
  80ae74:	2945883a 	add	r2,r5,r5
  80ae78:	1149803a 	cmpltu	r4,r2,r5
  80ae7c:	3187883a 	add	r3,r6,r6
  80ae80:	20c9883a 	add	r4,r4,r3
  80ae84:	100b883a 	mov	r5,r2
  80ae88:	200d883a 	mov	r6,r4
  80ae8c:	39ffffc4 	addi	r7,r7,-1
  80ae90:	413ff82e 	bgeu	r8,r4,80ae74 <__unpack_d+0x70>
  80ae94:	69c00215 	stw	r7,8(r13)
  80ae98:	69800415 	stw	r6,16(r13)
  80ae9c:	69400315 	stw	r5,12(r13)
  80aea0:	f800283a 	ret
  80aea4:	00800084 	movi	r2,2
  80aea8:	28800015 	stw	r2,0(r5)
  80aeac:	f800283a 	ret
  80aeb0:	0081ffc4 	movi	r2,2047
  80aeb4:	40800f26 	beq	r8,r2,80aef4 <__unpack_d+0xf0>
  80aeb8:	480cd63a 	srli	r6,r9,24
  80aebc:	5006923a 	slli	r3,r10,8
  80aec0:	4804923a 	slli	r2,r9,8
  80aec4:	0009883a 	mov	r4,zero
  80aec8:	30c6b03a 	or	r3,r6,r3
  80aecc:	01440034 	movhi	r5,4096
  80aed0:	110cb03a 	or	r6,r2,r4
  80aed4:	423f0044 	addi	r8,r8,-1023
  80aed8:	194eb03a 	or	r7,r3,r5
  80aedc:	008000c4 	movi	r2,3
  80aee0:	69c00415 	stw	r7,16(r13)
  80aee4:	6a000215 	stw	r8,8(r13)
  80aee8:	68800015 	stw	r2,0(r13)
  80aeec:	69800315 	stw	r6,12(r13)
  80aef0:	f800283a 	ret
  80aef4:	4a84b03a 	or	r2,r9,r10
  80aef8:	1000031e 	bne	r2,zero,80af08 <__unpack_d+0x104>
  80aefc:	00800104 	movi	r2,4
  80af00:	28800015 	stw	r2,0(r5)
  80af04:	f800283a 	ret
  80af08:	0009883a 	mov	r4,zero
  80af0c:	01400234 	movhi	r5,8
  80af10:	4904703a 	and	r2,r9,r4
  80af14:	5146703a 	and	r3,r10,r5
  80af18:	10c4b03a 	or	r2,r2,r3
  80af1c:	10000526 	beq	r2,zero,80af34 <__unpack_d+0x130>
  80af20:	00800044 	movi	r2,1
  80af24:	68800015 	stw	r2,0(r13)
  80af28:	6b000415 	stw	r12,16(r13)
  80af2c:	6ac00315 	stw	r11,12(r13)
  80af30:	f800283a 	ret
  80af34:	68000015 	stw	zero,0(r13)
  80af38:	003ffb06 	br	80af28 <__unpack_d+0x124>

0080af3c <__fpcmp_parts_d>:
  80af3c:	21800017 	ldw	r6,0(r4)
  80af40:	00c00044 	movi	r3,1
  80af44:	19800a2e 	bgeu	r3,r6,80af70 <__fpcmp_parts_d+0x34>
  80af48:	28800017 	ldw	r2,0(r5)
  80af4c:	1880082e 	bgeu	r3,r2,80af70 <__fpcmp_parts_d+0x34>
  80af50:	00c00104 	movi	r3,4
  80af54:	30c02626 	beq	r6,r3,80aff0 <__fpcmp_parts_d+0xb4>
  80af58:	10c02226 	beq	r2,r3,80afe4 <__fpcmp_parts_d+0xa8>
  80af5c:	00c00084 	movi	r3,2
  80af60:	30c00526 	beq	r6,r3,80af78 <__fpcmp_parts_d+0x3c>
  80af64:	10c0071e 	bne	r2,r3,80af84 <__fpcmp_parts_d+0x48>
  80af68:	20800117 	ldw	r2,4(r4)
  80af6c:	1000091e 	bne	r2,zero,80af94 <__fpcmp_parts_d+0x58>
  80af70:	00800044 	movi	r2,1
  80af74:	f800283a 	ret
  80af78:	10c01a1e 	bne	r2,r3,80afe4 <__fpcmp_parts_d+0xa8>
  80af7c:	0005883a 	mov	r2,zero
  80af80:	f800283a 	ret
  80af84:	22000117 	ldw	r8,4(r4)
  80af88:	28800117 	ldw	r2,4(r5)
  80af8c:	40800326 	beq	r8,r2,80af9c <__fpcmp_parts_d+0x60>
  80af90:	403ff726 	beq	r8,zero,80af70 <__fpcmp_parts_d+0x34>
  80af94:	00bfffc4 	movi	r2,-1
  80af98:	f800283a 	ret
  80af9c:	20c00217 	ldw	r3,8(r4)
  80afa0:	28800217 	ldw	r2,8(r5)
  80afa4:	10fffa16 	blt	r2,r3,80af90 <__fpcmp_parts_d+0x54>
  80afa8:	18800916 	blt	r3,r2,80afd0 <__fpcmp_parts_d+0x94>
  80afac:	21c00417 	ldw	r7,16(r4)
  80afb0:	28c00417 	ldw	r3,16(r5)
  80afb4:	21800317 	ldw	r6,12(r4)
  80afb8:	28800317 	ldw	r2,12(r5)
  80afbc:	19fff436 	bltu	r3,r7,80af90 <__fpcmp_parts_d+0x54>
  80afc0:	38c00526 	beq	r7,r3,80afd8 <__fpcmp_parts_d+0x9c>
  80afc4:	38c00236 	bltu	r7,r3,80afd0 <__fpcmp_parts_d+0x94>
  80afc8:	19ffec1e 	bne	r3,r7,80af7c <__fpcmp_parts_d+0x40>
  80afcc:	30bfeb2e 	bgeu	r6,r2,80af7c <__fpcmp_parts_d+0x40>
  80afd0:	403fe71e 	bne	r8,zero,80af70 <__fpcmp_parts_d+0x34>
  80afd4:	003fef06 	br	80af94 <__fpcmp_parts_d+0x58>
  80afd8:	11bffa2e 	bgeu	r2,r6,80afc4 <__fpcmp_parts_d+0x88>
  80afdc:	403fe426 	beq	r8,zero,80af70 <__fpcmp_parts_d+0x34>
  80afe0:	003fec06 	br	80af94 <__fpcmp_parts_d+0x58>
  80afe4:	28800117 	ldw	r2,4(r5)
  80afe8:	103fe11e 	bne	r2,zero,80af70 <__fpcmp_parts_d+0x34>
  80afec:	003fe906 	br	80af94 <__fpcmp_parts_d+0x58>
  80aff0:	11bfdd1e 	bne	r2,r6,80af68 <__fpcmp_parts_d+0x2c>
  80aff4:	28c00117 	ldw	r3,4(r5)
  80aff8:	20800117 	ldw	r2,4(r4)
  80affc:	1885c83a 	sub	r2,r3,r2
  80b000:	f800283a 	ret

0080b004 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80b004:	defff804 	addi	sp,sp,-32
  80b008:	dfc00715 	stw	ra,28(sp)
  80b00c:	df000615 	stw	fp,24(sp)
  80b010:	df000604 	addi	fp,sp,24
  80b014:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80b018:	e0bffc17 	ldw	r2,-16(fp)
  80b01c:	1004803a 	cmplt	r2,r2,zero
  80b020:	1000081e 	bne	r2,zero,80b044 <close+0x40>
  80b024:	e0bffc17 	ldw	r2,-16(fp)
  80b028:	10800324 	muli	r2,r2,12
  80b02c:	1007883a 	mov	r3,r2
  80b030:	00802074 	movhi	r2,129
  80b034:	10825904 	addi	r2,r2,2404
  80b038:	1887883a 	add	r3,r3,r2
  80b03c:	e0ffff15 	stw	r3,-4(fp)
  80b040:	00000106 	br	80b048 <close+0x44>
  80b044:	e03fff15 	stw	zero,-4(fp)
  80b048:	e0bfff17 	ldw	r2,-4(fp)
  80b04c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80b050:	e0bffb17 	ldw	r2,-20(fp)
  80b054:	1005003a 	cmpeq	r2,r2,zero
  80b058:	10001d1e 	bne	r2,zero,80b0d0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80b05c:	e0bffb17 	ldw	r2,-20(fp)
  80b060:	10800017 	ldw	r2,0(r2)
  80b064:	10800417 	ldw	r2,16(r2)
  80b068:	1005003a 	cmpeq	r2,r2,zero
  80b06c:	1000071e 	bne	r2,zero,80b08c <close+0x88>
  80b070:	e0bffb17 	ldw	r2,-20(fp)
  80b074:	10800017 	ldw	r2,0(r2)
  80b078:	10800417 	ldw	r2,16(r2)
  80b07c:	e13ffb17 	ldw	r4,-20(fp)
  80b080:	103ee83a 	callr	r2
  80b084:	e0bffe15 	stw	r2,-8(fp)
  80b088:	00000106 	br	80b090 <close+0x8c>
  80b08c:	e03ffe15 	stw	zero,-8(fp)
  80b090:	e0bffe17 	ldw	r2,-8(fp)
  80b094:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80b098:	e13ffc17 	ldw	r4,-16(fp)
  80b09c:	080baac0 	call	80baac <alt_release_fd>
    if (rval < 0)
  80b0a0:	e0bffa17 	ldw	r2,-24(fp)
  80b0a4:	1004403a 	cmpge	r2,r2,zero
  80b0a8:	1000071e 	bne	r2,zero,80b0c8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80b0ac:	080b1000 	call	80b100 <alt_get_errno>
  80b0b0:	e0fffa17 	ldw	r3,-24(fp)
  80b0b4:	00c7c83a 	sub	r3,zero,r3
  80b0b8:	10c00015 	stw	r3,0(r2)
      return -1;
  80b0bc:	00bfffc4 	movi	r2,-1
  80b0c0:	e0bffd15 	stw	r2,-12(fp)
  80b0c4:	00000806 	br	80b0e8 <close+0xe4>
    }
    return 0;
  80b0c8:	e03ffd15 	stw	zero,-12(fp)
  80b0cc:	00000606 	br	80b0e8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b0d0:	080b1000 	call	80b100 <alt_get_errno>
  80b0d4:	1007883a 	mov	r3,r2
  80b0d8:	00801444 	movi	r2,81
  80b0dc:	18800015 	stw	r2,0(r3)
    return -1;
  80b0e0:	00bfffc4 	movi	r2,-1
  80b0e4:	e0bffd15 	stw	r2,-12(fp)
  80b0e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80b0ec:	e037883a 	mov	sp,fp
  80b0f0:	dfc00117 	ldw	ra,4(sp)
  80b0f4:	df000017 	ldw	fp,0(sp)
  80b0f8:	dec00204 	addi	sp,sp,8
  80b0fc:	f800283a 	ret

0080b100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b100:	defffd04 	addi	sp,sp,-12
  80b104:	dfc00215 	stw	ra,8(sp)
  80b108:	df000115 	stw	fp,4(sp)
  80b10c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b110:	00802074 	movhi	r2,129
  80b114:	10871a04 	addi	r2,r2,7272
  80b118:	10800017 	ldw	r2,0(r2)
  80b11c:	1005003a 	cmpeq	r2,r2,zero
  80b120:	1000061e 	bne	r2,zero,80b13c <alt_get_errno+0x3c>
  80b124:	00802074 	movhi	r2,129
  80b128:	10871a04 	addi	r2,r2,7272
  80b12c:	10800017 	ldw	r2,0(r2)
  80b130:	103ee83a 	callr	r2
  80b134:	e0bfff15 	stw	r2,-4(fp)
  80b138:	00000306 	br	80b148 <alt_get_errno+0x48>
  80b13c:	00802074 	movhi	r2,129
  80b140:	108e8304 	addi	r2,r2,14860
  80b144:	e0bfff15 	stw	r2,-4(fp)
  80b148:	e0bfff17 	ldw	r2,-4(fp)
}
  80b14c:	e037883a 	mov	sp,fp
  80b150:	dfc00117 	ldw	ra,4(sp)
  80b154:	df000017 	ldw	fp,0(sp)
  80b158:	dec00204 	addi	sp,sp,8
  80b15c:	f800283a 	ret

0080b160 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80b160:	defffe04 	addi	sp,sp,-8
  80b164:	df000115 	stw	fp,4(sp)
  80b168:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80b16c:	e03fff15 	stw	zero,-4(fp)
  80b170:	00000506 	br	80b188 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80b174:	e0bfff17 	ldw	r2,-4(fp)
  80b178:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80b17c:	e0bfff17 	ldw	r2,-4(fp)
  80b180:	10800804 	addi	r2,r2,32
  80b184:	e0bfff15 	stw	r2,-4(fp)
  80b188:	e0bfff17 	ldw	r2,-4(fp)
  80b18c:	10840030 	cmpltui	r2,r2,4096
  80b190:	103ff81e 	bne	r2,zero,80b174 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80b194:	e037883a 	mov	sp,fp
  80b198:	df000017 	ldw	fp,0(sp)
  80b19c:	dec00104 	addi	sp,sp,4
  80b1a0:	f800283a 	ret

0080b1a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80b1a4:	defffc04 	addi	sp,sp,-16
  80b1a8:	df000315 	stw	fp,12(sp)
  80b1ac:	df000304 	addi	fp,sp,12
  80b1b0:	e13ffd15 	stw	r4,-12(fp)
  80b1b4:	e17ffe15 	stw	r5,-8(fp)
  80b1b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80b1bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80b1c0:	e037883a 	mov	sp,fp
  80b1c4:	df000017 	ldw	fp,0(sp)
  80b1c8:	dec00104 	addi	sp,sp,4
  80b1cc:	f800283a 	ret

0080b1d0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80b1d0:	defffd04 	addi	sp,sp,-12
  80b1d4:	df000215 	stw	fp,8(sp)
  80b1d8:	df000204 	addi	fp,sp,8
  80b1dc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80b1e0:	e0bfff17 	ldw	r2,-4(fp)
  80b1e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80b1e8:	e0bffe17 	ldw	r2,-8(fp)
  80b1ec:	1005003a 	cmpeq	r2,r2,zero
  80b1f0:	1000021e 	bne	r2,zero,80b1fc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80b1f4:	002af070 	cmpltui	zero,zero,43969
  80b1f8:	00000106 	br	80b200 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80b1fc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80b200:	e037883a 	mov	sp,fp
  80b204:	df000017 	ldw	fp,0(sp)
  80b208:	dec00104 	addi	sp,sp,4
  80b20c:	f800283a 	ret

0080b210 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80b210:	defffd04 	addi	sp,sp,-12
  80b214:	dfc00215 	stw	ra,8(sp)
  80b218:	df000115 	stw	fp,4(sp)
  80b21c:	df000104 	addi	fp,sp,4
  80b220:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80b224:	e13fff17 	ldw	r4,-4(fp)
  80b228:	080b1d00 	call	80b1d0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80b22c:	003fff06 	br	80b22c <_exit+0x1c>

0080b230 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80b230:	defff904 	addi	sp,sp,-28
  80b234:	dfc00615 	stw	ra,24(sp)
  80b238:	df000515 	stw	fp,20(sp)
  80b23c:	df000504 	addi	fp,sp,20
  80b240:	e13ffc15 	stw	r4,-16(fp)
  80b244:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b248:	e0bffc17 	ldw	r2,-16(fp)
  80b24c:	1004803a 	cmplt	r2,r2,zero
  80b250:	1000081e 	bne	r2,zero,80b274 <fstat+0x44>
  80b254:	e0bffc17 	ldw	r2,-16(fp)
  80b258:	10800324 	muli	r2,r2,12
  80b25c:	1007883a 	mov	r3,r2
  80b260:	00802074 	movhi	r2,129
  80b264:	10825904 	addi	r2,r2,2404
  80b268:	1887883a 	add	r3,r3,r2
  80b26c:	e0ffff15 	stw	r3,-4(fp)
  80b270:	00000106 	br	80b278 <fstat+0x48>
  80b274:	e03fff15 	stw	zero,-4(fp)
  80b278:	e0bfff17 	ldw	r2,-4(fp)
  80b27c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80b280:	e0bffb17 	ldw	r2,-20(fp)
  80b284:	1005003a 	cmpeq	r2,r2,zero
  80b288:	1000121e 	bne	r2,zero,80b2d4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80b28c:	e0bffb17 	ldw	r2,-20(fp)
  80b290:	10800017 	ldw	r2,0(r2)
  80b294:	10800817 	ldw	r2,32(r2)
  80b298:	1005003a 	cmpeq	r2,r2,zero
  80b29c:	1000081e 	bne	r2,zero,80b2c0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80b2a0:	e0bffb17 	ldw	r2,-20(fp)
  80b2a4:	10800017 	ldw	r2,0(r2)
  80b2a8:	10800817 	ldw	r2,32(r2)
  80b2ac:	e13ffb17 	ldw	r4,-20(fp)
  80b2b0:	e17ffd17 	ldw	r5,-12(fp)
  80b2b4:	103ee83a 	callr	r2
  80b2b8:	e0bffe15 	stw	r2,-8(fp)
  80b2bc:	00000b06 	br	80b2ec <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80b2c0:	e0fffd17 	ldw	r3,-12(fp)
  80b2c4:	00880004 	movi	r2,8192
  80b2c8:	18800115 	stw	r2,4(r3)
      return 0;
  80b2cc:	e03ffe15 	stw	zero,-8(fp)
  80b2d0:	00000606 	br	80b2ec <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b2d4:	080b3040 	call	80b304 <alt_get_errno>
  80b2d8:	1007883a 	mov	r3,r2
  80b2dc:	00801444 	movi	r2,81
  80b2e0:	18800015 	stw	r2,0(r3)
    return -1;
  80b2e4:	00bfffc4 	movi	r2,-1
  80b2e8:	e0bffe15 	stw	r2,-8(fp)
  80b2ec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80b2f0:	e037883a 	mov	sp,fp
  80b2f4:	dfc00117 	ldw	ra,4(sp)
  80b2f8:	df000017 	ldw	fp,0(sp)
  80b2fc:	dec00204 	addi	sp,sp,8
  80b300:	f800283a 	ret

0080b304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b304:	defffd04 	addi	sp,sp,-12
  80b308:	dfc00215 	stw	ra,8(sp)
  80b30c:	df000115 	stw	fp,4(sp)
  80b310:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b314:	00802074 	movhi	r2,129
  80b318:	10871a04 	addi	r2,r2,7272
  80b31c:	10800017 	ldw	r2,0(r2)
  80b320:	1005003a 	cmpeq	r2,r2,zero
  80b324:	1000061e 	bne	r2,zero,80b340 <alt_get_errno+0x3c>
  80b328:	00802074 	movhi	r2,129
  80b32c:	10871a04 	addi	r2,r2,7272
  80b330:	10800017 	ldw	r2,0(r2)
  80b334:	103ee83a 	callr	r2
  80b338:	e0bfff15 	stw	r2,-4(fp)
  80b33c:	00000306 	br	80b34c <alt_get_errno+0x48>
  80b340:	00802074 	movhi	r2,129
  80b344:	108e8304 	addi	r2,r2,14860
  80b348:	e0bfff15 	stw	r2,-4(fp)
  80b34c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b350:	e037883a 	mov	sp,fp
  80b354:	dfc00117 	ldw	ra,4(sp)
  80b358:	df000017 	ldw	fp,0(sp)
  80b35c:	dec00204 	addi	sp,sp,8
  80b360:	f800283a 	ret

0080b364 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80b364:	deffef04 	addi	sp,sp,-68
  80b368:	df001015 	stw	fp,64(sp)
  80b36c:	df001004 	addi	fp,sp,64
  80b370:	e13ffc15 	stw	r4,-16(fp)
  80b374:	e17ffd15 	stw	r5,-12(fp)
  80b378:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80b37c:	00bffa84 	movi	r2,-22
  80b380:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80b384:	e0bffc17 	ldw	r2,-16(fp)
  80b388:	10800828 	cmpgeui	r2,r2,32
  80b38c:	1000601e 	bne	r2,zero,80b510 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b390:	0005303a 	rdctl	r2,status
  80b394:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b398:	e0fff917 	ldw	r3,-28(fp)
  80b39c:	00bfff84 	movi	r2,-2
  80b3a0:	1884703a 	and	r2,r3,r2
  80b3a4:	1001703a 	wrctl	status,r2
  
  return context;
  80b3a8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80b3ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80b3b0:	e0bffc17 	ldw	r2,-16(fp)
  80b3b4:	00c02074 	movhi	r3,129
  80b3b8:	18ce9a04 	addi	r3,r3,14952
  80b3bc:	100490fa 	slli	r2,r2,3
  80b3c0:	10c7883a 	add	r3,r2,r3
  80b3c4:	e0bffe17 	ldw	r2,-8(fp)
  80b3c8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80b3cc:	e0bffc17 	ldw	r2,-16(fp)
  80b3d0:	00c02074 	movhi	r3,129
  80b3d4:	18ce9a04 	addi	r3,r3,14952
  80b3d8:	100490fa 	slli	r2,r2,3
  80b3dc:	10c5883a 	add	r2,r2,r3
  80b3e0:	10c00104 	addi	r3,r2,4
  80b3e4:	e0bffd17 	ldw	r2,-12(fp)
  80b3e8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80b3ec:	e0bffe17 	ldw	r2,-8(fp)
  80b3f0:	1005003a 	cmpeq	r2,r2,zero
  80b3f4:	1000201e 	bne	r2,zero,80b478 <alt_irq_register+0x114>
  80b3f8:	e0bffc17 	ldw	r2,-16(fp)
  80b3fc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b400:	0005303a 	rdctl	r2,status
  80b404:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b408:	e0fff617 	ldw	r3,-40(fp)
  80b40c:	00bfff84 	movi	r2,-2
  80b410:	1884703a 	and	r2,r3,r2
  80b414:	1001703a 	wrctl	status,r2
  
  return context;
  80b418:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b41c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80b420:	e0fff717 	ldw	r3,-36(fp)
  80b424:	00800044 	movi	r2,1
  80b428:	10c4983a 	sll	r2,r2,r3
  80b42c:	1007883a 	mov	r3,r2
  80b430:	00802074 	movhi	r2,129
  80b434:	108e8a04 	addi	r2,r2,14888
  80b438:	10800017 	ldw	r2,0(r2)
  80b43c:	1886b03a 	or	r3,r3,r2
  80b440:	00802074 	movhi	r2,129
  80b444:	108e8a04 	addi	r2,r2,14888
  80b448:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b44c:	00802074 	movhi	r2,129
  80b450:	108e8a04 	addi	r2,r2,14888
  80b454:	10800017 	ldw	r2,0(r2)
  80b458:	100170fa 	wrctl	ienable,r2
  80b45c:	e0bff817 	ldw	r2,-32(fp)
  80b460:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b464:	e0bff517 	ldw	r2,-44(fp)
  80b468:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b46c:	0005883a 	mov	r2,zero
  80b470:	e0bfff15 	stw	r2,-4(fp)
  80b474:	00002006 	br	80b4f8 <alt_irq_register+0x194>
  80b478:	e0bffc17 	ldw	r2,-16(fp)
  80b47c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b480:	0005303a 	rdctl	r2,status
  80b484:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b488:	e0fff217 	ldw	r3,-56(fp)
  80b48c:	00bfff84 	movi	r2,-2
  80b490:	1884703a 	and	r2,r3,r2
  80b494:	1001703a 	wrctl	status,r2
  
  return context;
  80b498:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b49c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80b4a0:	e0fff317 	ldw	r3,-52(fp)
  80b4a4:	00800044 	movi	r2,1
  80b4a8:	10c4983a 	sll	r2,r2,r3
  80b4ac:	0084303a 	nor	r2,zero,r2
  80b4b0:	1007883a 	mov	r3,r2
  80b4b4:	00802074 	movhi	r2,129
  80b4b8:	108e8a04 	addi	r2,r2,14888
  80b4bc:	10800017 	ldw	r2,0(r2)
  80b4c0:	1886703a 	and	r3,r3,r2
  80b4c4:	00802074 	movhi	r2,129
  80b4c8:	108e8a04 	addi	r2,r2,14888
  80b4cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b4d0:	00802074 	movhi	r2,129
  80b4d4:	108e8a04 	addi	r2,r2,14888
  80b4d8:	10800017 	ldw	r2,0(r2)
  80b4dc:	100170fa 	wrctl	ienable,r2
  80b4e0:	e0bff417 	ldw	r2,-48(fp)
  80b4e4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4e8:	e0bff117 	ldw	r2,-60(fp)
  80b4ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b4f0:	0005883a 	mov	r2,zero
  80b4f4:	e0bfff15 	stw	r2,-4(fp)
  80b4f8:	e0bfff17 	ldw	r2,-4(fp)
  80b4fc:	e0bffb15 	stw	r2,-20(fp)
  80b500:	e0bffa17 	ldw	r2,-24(fp)
  80b504:	e0bff015 	stw	r2,-64(fp)
  80b508:	e0bff017 	ldw	r2,-64(fp)
  80b50c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80b510:	e0bffb17 	ldw	r2,-20(fp)
}
  80b514:	e037883a 	mov	sp,fp
  80b518:	df000017 	ldw	fp,0(sp)
  80b51c:	dec00104 	addi	sp,sp,4
  80b520:	f800283a 	ret

0080b524 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80b524:	deffeb04 	addi	sp,sp,-84
  80b528:	dfc01415 	stw	ra,80(sp)
  80b52c:	df001315 	stw	fp,76(sp)
  80b530:	df001304 	addi	fp,sp,76
  80b534:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b538:	e0bffd17 	ldw	r2,-12(fp)
  80b53c:	1004803a 	cmplt	r2,r2,zero
  80b540:	1000081e 	bne	r2,zero,80b564 <isatty+0x40>
  80b544:	e0bffd17 	ldw	r2,-12(fp)
  80b548:	10800324 	muli	r2,r2,12
  80b54c:	1007883a 	mov	r3,r2
  80b550:	00802074 	movhi	r2,129
  80b554:	10825904 	addi	r2,r2,2404
  80b558:	1887883a 	add	r3,r3,r2
  80b55c:	e0ffff15 	stw	r3,-4(fp)
  80b560:	00000106 	br	80b568 <isatty+0x44>
  80b564:	e03fff15 	stw	zero,-4(fp)
  80b568:	e0bfff17 	ldw	r2,-4(fp)
  80b56c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80b570:	e0bfed17 	ldw	r2,-76(fp)
  80b574:	1005003a 	cmpeq	r2,r2,zero
  80b578:	10000f1e 	bne	r2,zero,80b5b8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80b57c:	e0bfed17 	ldw	r2,-76(fp)
  80b580:	10800017 	ldw	r2,0(r2)
  80b584:	10800817 	ldw	r2,32(r2)
  80b588:	1004c03a 	cmpne	r2,r2,zero
  80b58c:	1000031e 	bne	r2,zero,80b59c <isatty+0x78>
    {
      return 1;
  80b590:	00800044 	movi	r2,1
  80b594:	e0bffe15 	stw	r2,-8(fp)
  80b598:	00000c06 	br	80b5cc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80b59c:	e17fee04 	addi	r5,fp,-72
  80b5a0:	e13ffd17 	ldw	r4,-12(fp)
  80b5a4:	080b2300 	call	80b230 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80b5a8:	e0bfef17 	ldw	r2,-68(fp)
  80b5ac:	10880020 	cmpeqi	r2,r2,8192
  80b5b0:	e0bffe15 	stw	r2,-8(fp)
  80b5b4:	00000506 	br	80b5cc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b5b8:	080b5e40 	call	80b5e4 <alt_get_errno>
  80b5bc:	1007883a 	mov	r3,r2
  80b5c0:	00801444 	movi	r2,81
  80b5c4:	18800015 	stw	r2,0(r3)
    return 0;
  80b5c8:	e03ffe15 	stw	zero,-8(fp)
  80b5cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80b5d0:	e037883a 	mov	sp,fp
  80b5d4:	dfc00117 	ldw	ra,4(sp)
  80b5d8:	df000017 	ldw	fp,0(sp)
  80b5dc:	dec00204 	addi	sp,sp,8
  80b5e0:	f800283a 	ret

0080b5e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b5e4:	defffd04 	addi	sp,sp,-12
  80b5e8:	dfc00215 	stw	ra,8(sp)
  80b5ec:	df000115 	stw	fp,4(sp)
  80b5f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b5f4:	00802074 	movhi	r2,129
  80b5f8:	10871a04 	addi	r2,r2,7272
  80b5fc:	10800017 	ldw	r2,0(r2)
  80b600:	1005003a 	cmpeq	r2,r2,zero
  80b604:	1000061e 	bne	r2,zero,80b620 <alt_get_errno+0x3c>
  80b608:	00802074 	movhi	r2,129
  80b60c:	10871a04 	addi	r2,r2,7272
  80b610:	10800017 	ldw	r2,0(r2)
  80b614:	103ee83a 	callr	r2
  80b618:	e0bfff15 	stw	r2,-4(fp)
  80b61c:	00000306 	br	80b62c <alt_get_errno+0x48>
  80b620:	00802074 	movhi	r2,129
  80b624:	108e8304 	addi	r2,r2,14860
  80b628:	e0bfff15 	stw	r2,-4(fp)
  80b62c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b630:	e037883a 	mov	sp,fp
  80b634:	dfc00117 	ldw	ra,4(sp)
  80b638:	df000017 	ldw	fp,0(sp)
  80b63c:	dec00204 	addi	sp,sp,8
  80b640:	f800283a 	ret

0080b644 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80b644:	defffe04 	addi	sp,sp,-8
  80b648:	dfc00115 	stw	ra,4(sp)
  80b64c:	df000015 	stw	fp,0(sp)
  80b650:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80b654:	01002074 	movhi	r4,129
  80b658:	21072304 	addi	r4,r4,7308
  80b65c:	01402074 	movhi	r5,129
  80b660:	297fca04 	addi	r5,r5,-216
  80b664:	01802074 	movhi	r6,129
  80b668:	31872304 	addi	r6,r6,7308
  80b66c:	080b6c40 	call	80b6c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80b670:	01002034 	movhi	r4,128
  80b674:	21008804 	addi	r4,r4,544
  80b678:	01402034 	movhi	r5,128
  80b67c:	29408804 	addi	r5,r5,544
  80b680:	01802034 	movhi	r6,128
  80b684:	3180ed04 	addi	r6,r6,948
  80b688:	080b6c40 	call	80b6c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80b68c:	01002074 	movhi	r4,129
  80b690:	213ea204 	addi	r4,r4,-1400
  80b694:	01402074 	movhi	r5,129
  80b698:	297ea204 	addi	r5,r5,-1400
  80b69c:	01802074 	movhi	r6,129
  80b6a0:	31bfca04 	addi	r6,r6,-216
  80b6a4:	080b6c40 	call	80b6c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80b6a8:	080b1600 	call	80b160 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80b6ac:	080ed340 	call	80ed34 <alt_icache_flush_all>
}
  80b6b0:	e037883a 	mov	sp,fp
  80b6b4:	dfc00117 	ldw	ra,4(sp)
  80b6b8:	df000017 	ldw	fp,0(sp)
  80b6bc:	dec00204 	addi	sp,sp,8
  80b6c0:	f800283a 	ret

0080b6c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80b6c4:	defffc04 	addi	sp,sp,-16
  80b6c8:	df000315 	stw	fp,12(sp)
  80b6cc:	df000304 	addi	fp,sp,12
  80b6d0:	e13ffd15 	stw	r4,-12(fp)
  80b6d4:	e17ffe15 	stw	r5,-8(fp)
  80b6d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80b6dc:	e0fffe17 	ldw	r3,-8(fp)
  80b6e0:	e0bffd17 	ldw	r2,-12(fp)
  80b6e4:	18800e26 	beq	r3,r2,80b720 <alt_load_section+0x5c>
  {
    while( to != end )
  80b6e8:	00000a06 	br	80b714 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80b6ec:	e0bffd17 	ldw	r2,-12(fp)
  80b6f0:	10c00017 	ldw	r3,0(r2)
  80b6f4:	e0bffe17 	ldw	r2,-8(fp)
  80b6f8:	10c00015 	stw	r3,0(r2)
  80b6fc:	e0bffe17 	ldw	r2,-8(fp)
  80b700:	10800104 	addi	r2,r2,4
  80b704:	e0bffe15 	stw	r2,-8(fp)
  80b708:	e0bffd17 	ldw	r2,-12(fp)
  80b70c:	10800104 	addi	r2,r2,4
  80b710:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80b714:	e0fffe17 	ldw	r3,-8(fp)
  80b718:	e0bfff17 	ldw	r2,-4(fp)
  80b71c:	18bff31e 	bne	r3,r2,80b6ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80b720:	e037883a 	mov	sp,fp
  80b724:	df000017 	ldw	fp,0(sp)
  80b728:	dec00104 	addi	sp,sp,4
  80b72c:	f800283a 	ret

0080b730 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80b730:	defff804 	addi	sp,sp,-32
  80b734:	dfc00715 	stw	ra,28(sp)
  80b738:	df000615 	stw	fp,24(sp)
  80b73c:	df000604 	addi	fp,sp,24
  80b740:	e13ffc15 	stw	r4,-16(fp)
  80b744:	e17ffd15 	stw	r5,-12(fp)
  80b748:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80b74c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b750:	e0bffc17 	ldw	r2,-16(fp)
  80b754:	1004803a 	cmplt	r2,r2,zero
  80b758:	1000081e 	bne	r2,zero,80b77c <lseek+0x4c>
  80b75c:	e0bffc17 	ldw	r2,-16(fp)
  80b760:	10800324 	muli	r2,r2,12
  80b764:	1007883a 	mov	r3,r2
  80b768:	00802074 	movhi	r2,129
  80b76c:	10825904 	addi	r2,r2,2404
  80b770:	1887883a 	add	r3,r3,r2
  80b774:	e0ffff15 	stw	r3,-4(fp)
  80b778:	00000106 	br	80b780 <lseek+0x50>
  80b77c:	e03fff15 	stw	zero,-4(fp)
  80b780:	e0bfff17 	ldw	r2,-4(fp)
  80b784:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80b788:	e0bffb17 	ldw	r2,-20(fp)
  80b78c:	1005003a 	cmpeq	r2,r2,zero
  80b790:	1000111e 	bne	r2,zero,80b7d8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b794:	e0bffb17 	ldw	r2,-20(fp)
  80b798:	10800017 	ldw	r2,0(r2)
  80b79c:	10800717 	ldw	r2,28(r2)
  80b7a0:	1005003a 	cmpeq	r2,r2,zero
  80b7a4:	1000091e 	bne	r2,zero,80b7cc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80b7a8:	e0bffb17 	ldw	r2,-20(fp)
  80b7ac:	10800017 	ldw	r2,0(r2)
  80b7b0:	10800717 	ldw	r2,28(r2)
  80b7b4:	e13ffb17 	ldw	r4,-20(fp)
  80b7b8:	e17ffd17 	ldw	r5,-12(fp)
  80b7bc:	e1bffe17 	ldw	r6,-8(fp)
  80b7c0:	103ee83a 	callr	r2
  80b7c4:	e0bffa15 	stw	r2,-24(fp)
  80b7c8:	00000506 	br	80b7e0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80b7cc:	00bfde84 	movi	r2,-134
  80b7d0:	e0bffa15 	stw	r2,-24(fp)
  80b7d4:	00000206 	br	80b7e0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80b7d8:	00bfebc4 	movi	r2,-81
  80b7dc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80b7e0:	e0bffa17 	ldw	r2,-24(fp)
  80b7e4:	1004403a 	cmpge	r2,r2,zero
  80b7e8:	1000071e 	bne	r2,zero,80b808 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80b7ec:	080b8200 	call	80b820 <alt_get_errno>
  80b7f0:	1007883a 	mov	r3,r2
  80b7f4:	e0bffa17 	ldw	r2,-24(fp)
  80b7f8:	0085c83a 	sub	r2,zero,r2
  80b7fc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80b800:	00bfffc4 	movi	r2,-1
  80b804:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80b808:	e0bffa17 	ldw	r2,-24(fp)
}
  80b80c:	e037883a 	mov	sp,fp
  80b810:	dfc00117 	ldw	ra,4(sp)
  80b814:	df000017 	ldw	fp,0(sp)
  80b818:	dec00204 	addi	sp,sp,8
  80b81c:	f800283a 	ret

0080b820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b820:	defffd04 	addi	sp,sp,-12
  80b824:	dfc00215 	stw	ra,8(sp)
  80b828:	df000115 	stw	fp,4(sp)
  80b82c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b830:	00802074 	movhi	r2,129
  80b834:	10871a04 	addi	r2,r2,7272
  80b838:	10800017 	ldw	r2,0(r2)
  80b83c:	1005003a 	cmpeq	r2,r2,zero
  80b840:	1000061e 	bne	r2,zero,80b85c <alt_get_errno+0x3c>
  80b844:	00802074 	movhi	r2,129
  80b848:	10871a04 	addi	r2,r2,7272
  80b84c:	10800017 	ldw	r2,0(r2)
  80b850:	103ee83a 	callr	r2
  80b854:	e0bfff15 	stw	r2,-4(fp)
  80b858:	00000306 	br	80b868 <alt_get_errno+0x48>
  80b85c:	00802074 	movhi	r2,129
  80b860:	108e8304 	addi	r2,r2,14860
  80b864:	e0bfff15 	stw	r2,-4(fp)
  80b868:	e0bfff17 	ldw	r2,-4(fp)
}
  80b86c:	e037883a 	mov	sp,fp
  80b870:	dfc00117 	ldw	ra,4(sp)
  80b874:	df000017 	ldw	fp,0(sp)
  80b878:	dec00204 	addi	sp,sp,8
  80b87c:	f800283a 	ret

0080b880 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b880:	defffd04 	addi	sp,sp,-12
  80b884:	dfc00215 	stw	ra,8(sp)
  80b888:	df000115 	stw	fp,4(sp)
  80b88c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b890:	0009883a 	mov	r4,zero
  80b894:	080bd480 	call	80bd48 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b898:	080bd7c0 	call	80bd7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b89c:	01002074 	movhi	r4,129
  80b8a0:	213f8d04 	addi	r4,r4,-460
  80b8a4:	01402074 	movhi	r5,129
  80b8a8:	297f8d04 	addi	r5,r5,-460
  80b8ac:	01802074 	movhi	r6,129
  80b8b0:	31bf8d04 	addi	r6,r6,-460
  80b8b4:	080f0f40 	call	80f0f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b8b8:	080ebd80 	call	80ebd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b8bc:	01002074 	movhi	r4,129
  80b8c0:	213b0f04 	addi	r4,r4,-5060
  80b8c4:	080f85c0 	call	80f85c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b8c8:	d1277c17 	ldw	r4,-25104(gp)
  80b8cc:	d1677d17 	ldw	r5,-25100(gp)
  80b8d0:	d1a77e17 	ldw	r6,-25096(gp)
  80b8d4:	08011840 	call	801184 <main>
  80b8d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b8dc:	01000044 	movi	r4,1
  80b8e0:	080b0040 	call	80b004 <close>
  exit (result);
  80b8e4:	e13fff17 	ldw	r4,-4(fp)
  80b8e8:	080142c0 	call	80142c <exit>

0080b8ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b8ec:	defffe04 	addi	sp,sp,-8
  80b8f0:	df000115 	stw	fp,4(sp)
  80b8f4:	df000104 	addi	fp,sp,4
  80b8f8:	e13fff15 	stw	r4,-4(fp)
}
  80b8fc:	e037883a 	mov	sp,fp
  80b900:	df000017 	ldw	fp,0(sp)
  80b904:	dec00104 	addi	sp,sp,4
  80b908:	f800283a 	ret

0080b90c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b90c:	defffe04 	addi	sp,sp,-8
  80b910:	df000115 	stw	fp,4(sp)
  80b914:	df000104 	addi	fp,sp,4
  80b918:	e13fff15 	stw	r4,-4(fp)
}
  80b91c:	e037883a 	mov	sp,fp
  80b920:	df000017 	ldw	fp,0(sp)
  80b924:	dec00104 	addi	sp,sp,4
  80b928:	f800283a 	ret

0080b92c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b92c:	defff704 	addi	sp,sp,-36
  80b930:	dfc00815 	stw	ra,32(sp)
  80b934:	df000715 	stw	fp,28(sp)
  80b938:	df000704 	addi	fp,sp,28
  80b93c:	e13ffb15 	stw	r4,-20(fp)
  80b940:	e17ffc15 	stw	r5,-16(fp)
  80b944:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b948:	e0bffb17 	ldw	r2,-20(fp)
  80b94c:	1004803a 	cmplt	r2,r2,zero
  80b950:	1000081e 	bne	r2,zero,80b974 <read+0x48>
  80b954:	e0bffb17 	ldw	r2,-20(fp)
  80b958:	10800324 	muli	r2,r2,12
  80b95c:	1007883a 	mov	r3,r2
  80b960:	00802074 	movhi	r2,129
  80b964:	10825904 	addi	r2,r2,2404
  80b968:	1887883a 	add	r3,r3,r2
  80b96c:	e0ffff15 	stw	r3,-4(fp)
  80b970:	00000106 	br	80b978 <read+0x4c>
  80b974:	e03fff15 	stw	zero,-4(fp)
  80b978:	e0bfff17 	ldw	r2,-4(fp)
  80b97c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b980:	e0bffa17 	ldw	r2,-24(fp)
  80b984:	1005003a 	cmpeq	r2,r2,zero
  80b988:	1000241e 	bne	r2,zero,80ba1c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b98c:	e0bffa17 	ldw	r2,-24(fp)
  80b990:	10800217 	ldw	r2,8(r2)
  80b994:	108000cc 	andi	r2,r2,3
  80b998:	10800060 	cmpeqi	r2,r2,1
  80b99c:	10001a1e 	bne	r2,zero,80ba08 <read+0xdc>
  80b9a0:	e0bffa17 	ldw	r2,-24(fp)
  80b9a4:	10800017 	ldw	r2,0(r2)
  80b9a8:	10800517 	ldw	r2,20(r2)
  80b9ac:	1005003a 	cmpeq	r2,r2,zero
  80b9b0:	1000151e 	bne	r2,zero,80ba08 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b9b4:	e0bffa17 	ldw	r2,-24(fp)
  80b9b8:	10800017 	ldw	r2,0(r2)
  80b9bc:	10800517 	ldw	r2,20(r2)
  80b9c0:	e17ffc17 	ldw	r5,-16(fp)
  80b9c4:	e1bffd17 	ldw	r6,-12(fp)
  80b9c8:	e13ffa17 	ldw	r4,-24(fp)
  80b9cc:	103ee83a 	callr	r2
  80b9d0:	e0bff915 	stw	r2,-28(fp)
  80b9d4:	e0bff917 	ldw	r2,-28(fp)
  80b9d8:	1004403a 	cmpge	r2,r2,zero
  80b9dc:	1000071e 	bne	r2,zero,80b9fc <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80b9e0:	080ba4c0 	call	80ba4c <alt_get_errno>
  80b9e4:	e0fff917 	ldw	r3,-28(fp)
  80b9e8:	00c7c83a 	sub	r3,zero,r3
  80b9ec:	10c00015 	stw	r3,0(r2)
          return -1;
  80b9f0:	00bfffc4 	movi	r2,-1
  80b9f4:	e0bffe15 	stw	r2,-8(fp)
  80b9f8:	00000e06 	br	80ba34 <read+0x108>
        }
        return rval;
  80b9fc:	e0bff917 	ldw	r2,-28(fp)
  80ba00:	e0bffe15 	stw	r2,-8(fp)
  80ba04:	00000b06 	br	80ba34 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ba08:	080ba4c0 	call	80ba4c <alt_get_errno>
  80ba0c:	1007883a 	mov	r3,r2
  80ba10:	00800344 	movi	r2,13
  80ba14:	18800015 	stw	r2,0(r3)
  80ba18:	00000406 	br	80ba2c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ba1c:	080ba4c0 	call	80ba4c <alt_get_errno>
  80ba20:	1007883a 	mov	r3,r2
  80ba24:	00801444 	movi	r2,81
  80ba28:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ba2c:	00bfffc4 	movi	r2,-1
  80ba30:	e0bffe15 	stw	r2,-8(fp)
  80ba34:	e0bffe17 	ldw	r2,-8(fp)
}
  80ba38:	e037883a 	mov	sp,fp
  80ba3c:	dfc00117 	ldw	ra,4(sp)
  80ba40:	df000017 	ldw	fp,0(sp)
  80ba44:	dec00204 	addi	sp,sp,8
  80ba48:	f800283a 	ret

0080ba4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ba4c:	defffd04 	addi	sp,sp,-12
  80ba50:	dfc00215 	stw	ra,8(sp)
  80ba54:	df000115 	stw	fp,4(sp)
  80ba58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ba5c:	00802074 	movhi	r2,129
  80ba60:	10871a04 	addi	r2,r2,7272
  80ba64:	10800017 	ldw	r2,0(r2)
  80ba68:	1005003a 	cmpeq	r2,r2,zero
  80ba6c:	1000061e 	bne	r2,zero,80ba88 <alt_get_errno+0x3c>
  80ba70:	00802074 	movhi	r2,129
  80ba74:	10871a04 	addi	r2,r2,7272
  80ba78:	10800017 	ldw	r2,0(r2)
  80ba7c:	103ee83a 	callr	r2
  80ba80:	e0bfff15 	stw	r2,-4(fp)
  80ba84:	00000306 	br	80ba94 <alt_get_errno+0x48>
  80ba88:	00802074 	movhi	r2,129
  80ba8c:	108e8304 	addi	r2,r2,14860
  80ba90:	e0bfff15 	stw	r2,-4(fp)
  80ba94:	e0bfff17 	ldw	r2,-4(fp)
}
  80ba98:	e037883a 	mov	sp,fp
  80ba9c:	dfc00117 	ldw	ra,4(sp)
  80baa0:	df000017 	ldw	fp,0(sp)
  80baa4:	dec00204 	addi	sp,sp,8
  80baa8:	f800283a 	ret

0080baac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80baac:	defffe04 	addi	sp,sp,-8
  80bab0:	df000115 	stw	fp,4(sp)
  80bab4:	df000104 	addi	fp,sp,4
  80bab8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80babc:	e0bfff17 	ldw	r2,-4(fp)
  80bac0:	108000d0 	cmplti	r2,r2,3
  80bac4:	10000d1e 	bne	r2,zero,80bafc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80bac8:	e0bfff17 	ldw	r2,-4(fp)
  80bacc:	00c02074 	movhi	r3,129
  80bad0:	18c25904 	addi	r3,r3,2404
  80bad4:	10800324 	muli	r2,r2,12
  80bad8:	10c5883a 	add	r2,r2,r3
  80badc:	10800204 	addi	r2,r2,8
  80bae0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80bae4:	e0bfff17 	ldw	r2,-4(fp)
  80bae8:	00c02074 	movhi	r3,129
  80baec:	18c25904 	addi	r3,r3,2404
  80baf0:	10800324 	muli	r2,r2,12
  80baf4:	10c5883a 	add	r2,r2,r3
  80baf8:	10000015 	stw	zero,0(r2)
  }
}
  80bafc:	e037883a 	mov	sp,fp
  80bb00:	df000017 	ldw	fp,0(sp)
  80bb04:	dec00104 	addi	sp,sp,4
  80bb08:	f800283a 	ret

0080bb0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80bb0c:	defff804 	addi	sp,sp,-32
  80bb10:	df000715 	stw	fp,28(sp)
  80bb14:	df000704 	addi	fp,sp,28
  80bb18:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb1c:	0005303a 	rdctl	r2,status
  80bb20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb24:	e0fffb17 	ldw	r3,-20(fp)
  80bb28:	00bfff84 	movi	r2,-2
  80bb2c:	1884703a 	and	r2,r3,r2
  80bb30:	1001703a 	wrctl	status,r2
  
  return context;
  80bb34:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80bb38:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80bb3c:	d0a00d17 	ldw	r2,-32716(gp)
  80bb40:	10c000c4 	addi	r3,r2,3
  80bb44:	00bfff04 	movi	r2,-4
  80bb48:	1884703a 	and	r2,r3,r2
  80bb4c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80bb50:	d0e00d17 	ldw	r3,-32716(gp)
  80bb54:	e0bffe17 	ldw	r2,-8(fp)
  80bb58:	1887883a 	add	r3,r3,r2
  80bb5c:	008020b4 	movhi	r2,130
  80bb60:	10808004 	addi	r2,r2,512
  80bb64:	10c0072e 	bgeu	r2,r3,80bb84 <sbrk+0x78>
  80bb68:	e0bffd17 	ldw	r2,-12(fp)
  80bb6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb70:	e0bffa17 	ldw	r2,-24(fp)
  80bb74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80bb78:	00bfffc4 	movi	r2,-1
  80bb7c:	e0bfff15 	stw	r2,-4(fp)
  80bb80:	00000c06 	br	80bbb4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80bb84:	d0a00d17 	ldw	r2,-32716(gp)
  80bb88:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80bb8c:	d0e00d17 	ldw	r3,-32716(gp)
  80bb90:	e0bffe17 	ldw	r2,-8(fp)
  80bb94:	1885883a 	add	r2,r3,r2
  80bb98:	d0a00d15 	stw	r2,-32716(gp)
  80bb9c:	e0bffd17 	ldw	r2,-12(fp)
  80bba0:	e0bff915 	stw	r2,-28(fp)
  80bba4:	e0bff917 	ldw	r2,-28(fp)
  80bba8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80bbac:	e0bffc17 	ldw	r2,-16(fp)
  80bbb0:	e0bfff15 	stw	r2,-4(fp)
  80bbb4:	e0bfff17 	ldw	r2,-4(fp)
} 
  80bbb8:	e037883a 	mov	sp,fp
  80bbbc:	df000017 	ldw	fp,0(sp)
  80bbc0:	dec00104 	addi	sp,sp,4
  80bbc4:	f800283a 	ret

0080bbc8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80bbc8:	defff704 	addi	sp,sp,-36
  80bbcc:	dfc00815 	stw	ra,32(sp)
  80bbd0:	df000715 	stw	fp,28(sp)
  80bbd4:	df000704 	addi	fp,sp,28
  80bbd8:	e13ffb15 	stw	r4,-20(fp)
  80bbdc:	e17ffc15 	stw	r5,-16(fp)
  80bbe0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bbe4:	e0bffb17 	ldw	r2,-20(fp)
  80bbe8:	1004803a 	cmplt	r2,r2,zero
  80bbec:	1000081e 	bne	r2,zero,80bc10 <write+0x48>
  80bbf0:	e0bffb17 	ldw	r2,-20(fp)
  80bbf4:	10800324 	muli	r2,r2,12
  80bbf8:	1007883a 	mov	r3,r2
  80bbfc:	00802074 	movhi	r2,129
  80bc00:	10825904 	addi	r2,r2,2404
  80bc04:	1887883a 	add	r3,r3,r2
  80bc08:	e0ffff15 	stw	r3,-4(fp)
  80bc0c:	00000106 	br	80bc14 <write+0x4c>
  80bc10:	e03fff15 	stw	zero,-4(fp)
  80bc14:	e0bfff17 	ldw	r2,-4(fp)
  80bc18:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80bc1c:	e0bffa17 	ldw	r2,-24(fp)
  80bc20:	1005003a 	cmpeq	r2,r2,zero
  80bc24:	1000241e 	bne	r2,zero,80bcb8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80bc28:	e0bffa17 	ldw	r2,-24(fp)
  80bc2c:	10800217 	ldw	r2,8(r2)
  80bc30:	108000cc 	andi	r2,r2,3
  80bc34:	1005003a 	cmpeq	r2,r2,zero
  80bc38:	10001a1e 	bne	r2,zero,80bca4 <write+0xdc>
  80bc3c:	e0bffa17 	ldw	r2,-24(fp)
  80bc40:	10800017 	ldw	r2,0(r2)
  80bc44:	10800617 	ldw	r2,24(r2)
  80bc48:	1005003a 	cmpeq	r2,r2,zero
  80bc4c:	1000151e 	bne	r2,zero,80bca4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80bc50:	e0bffa17 	ldw	r2,-24(fp)
  80bc54:	10800017 	ldw	r2,0(r2)
  80bc58:	10800617 	ldw	r2,24(r2)
  80bc5c:	e17ffc17 	ldw	r5,-16(fp)
  80bc60:	e1bffd17 	ldw	r6,-12(fp)
  80bc64:	e13ffa17 	ldw	r4,-24(fp)
  80bc68:	103ee83a 	callr	r2
  80bc6c:	e0bff915 	stw	r2,-28(fp)
  80bc70:	e0bff917 	ldw	r2,-28(fp)
  80bc74:	1004403a 	cmpge	r2,r2,zero
  80bc78:	1000071e 	bne	r2,zero,80bc98 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80bc7c:	080bce80 	call	80bce8 <alt_get_errno>
  80bc80:	e0fff917 	ldw	r3,-28(fp)
  80bc84:	00c7c83a 	sub	r3,zero,r3
  80bc88:	10c00015 	stw	r3,0(r2)
        return -1;
  80bc8c:	00bfffc4 	movi	r2,-1
  80bc90:	e0bffe15 	stw	r2,-8(fp)
  80bc94:	00000e06 	br	80bcd0 <write+0x108>
      }
      return rval;
  80bc98:	e0bff917 	ldw	r2,-28(fp)
  80bc9c:	e0bffe15 	stw	r2,-8(fp)
  80bca0:	00000b06 	br	80bcd0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80bca4:	080bce80 	call	80bce8 <alt_get_errno>
  80bca8:	1007883a 	mov	r3,r2
  80bcac:	00800344 	movi	r2,13
  80bcb0:	18800015 	stw	r2,0(r3)
  80bcb4:	00000406 	br	80bcc8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80bcb8:	080bce80 	call	80bce8 <alt_get_errno>
  80bcbc:	1007883a 	mov	r3,r2
  80bcc0:	00801444 	movi	r2,81
  80bcc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80bcc8:	00bfffc4 	movi	r2,-1
  80bccc:	e0bffe15 	stw	r2,-8(fp)
  80bcd0:	e0bffe17 	ldw	r2,-8(fp)
}
  80bcd4:	e037883a 	mov	sp,fp
  80bcd8:	dfc00117 	ldw	ra,4(sp)
  80bcdc:	df000017 	ldw	fp,0(sp)
  80bce0:	dec00204 	addi	sp,sp,8
  80bce4:	f800283a 	ret

0080bce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bce8:	defffd04 	addi	sp,sp,-12
  80bcec:	dfc00215 	stw	ra,8(sp)
  80bcf0:	df000115 	stw	fp,4(sp)
  80bcf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bcf8:	00802074 	movhi	r2,129
  80bcfc:	10871a04 	addi	r2,r2,7272
  80bd00:	10800017 	ldw	r2,0(r2)
  80bd04:	1005003a 	cmpeq	r2,r2,zero
  80bd08:	1000061e 	bne	r2,zero,80bd24 <alt_get_errno+0x3c>
  80bd0c:	00802074 	movhi	r2,129
  80bd10:	10871a04 	addi	r2,r2,7272
  80bd14:	10800017 	ldw	r2,0(r2)
  80bd18:	103ee83a 	callr	r2
  80bd1c:	e0bfff15 	stw	r2,-4(fp)
  80bd20:	00000306 	br	80bd30 <alt_get_errno+0x48>
  80bd24:	00802074 	movhi	r2,129
  80bd28:	108e8304 	addi	r2,r2,14860
  80bd2c:	e0bfff15 	stw	r2,-4(fp)
  80bd30:	e0bfff17 	ldw	r2,-4(fp)
}
  80bd34:	e037883a 	mov	sp,fp
  80bd38:	dfc00117 	ldw	ra,4(sp)
  80bd3c:	df000017 	ldw	fp,0(sp)
  80bd40:	dec00204 	addi	sp,sp,8
  80bd44:	f800283a 	ret

0080bd48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bd48:	defffd04 	addi	sp,sp,-12
  80bd4c:	dfc00215 	stw	ra,8(sp)
  80bd50:	df000115 	stw	fp,4(sp)
  80bd54:	df000104 	addi	fp,sp,4
  80bd58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80bd5c:	080f5d40 	call	80f5d4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bd60:	00800044 	movi	r2,1
  80bd64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bd68:	e037883a 	mov	sp,fp
  80bd6c:	dfc00117 	ldw	ra,4(sp)
  80bd70:	df000017 	ldw	fp,0(sp)
  80bd74:	dec00204 	addi	sp,sp,8
  80bd78:	f800283a 	ret

0080bd7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bd7c:	defffd04 	addi	sp,sp,-12
  80bd80:	dfc00215 	stw	ra,8(sp)
  80bd84:	df000115 	stw	fp,4(sp)
  80bd88:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80bd8c:	01004434 	movhi	r4,272
  80bd90:	21050004 	addi	r4,r4,5120
  80bd94:	000b883a 	mov	r5,zero
  80bd98:	01800044 	movi	r6,1
  80bd9c:	01c0fa04 	movi	r7,1000
  80bda0:	080d3740 	call	80d374 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80bda4:	01002074 	movhi	r4,129
  80bda8:	2102c304 	addi	r4,r4,2828
  80bdac:	000b883a 	mov	r5,zero
  80bdb0:	000d883a 	mov	r6,zero
  80bdb4:	080c1740 	call	80c174 <altera_avalon_jtag_uart_init>
  80bdb8:	01002074 	movhi	r4,129
  80bdbc:	2102b904 	addi	r4,r4,2788
  80bdc0:	080bff40 	call	80bff4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  80bdc4:	01002074 	movhi	r4,129
  80bdc8:	2106d104 	addi	r4,r4,6980
  80bdcc:	080cad80 	call	80cad8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  80bdd0:	01002074 	movhi	r4,129
  80bdd4:	2106e004 	addi	r4,r4,7040
  80bdd8:	080cad80 	call	80cad8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80bddc:	00802074 	movhi	r2,129
  80bde0:	1086ef04 	addi	r2,r2,7100
  80bde4:	10800a17 	ldw	r2,40(r2)
  80bde8:	10800017 	ldw	r2,0(r2)
  80bdec:	1007883a 	mov	r3,r2
  80bdf0:	00802074 	movhi	r2,129
  80bdf4:	1086ef04 	addi	r2,r2,7100
  80bdf8:	10c00b15 	stw	r3,44(r2)
  80bdfc:	00802074 	movhi	r2,129
  80be00:	1086ef04 	addi	r2,r2,7100
  80be04:	10800a17 	ldw	r2,40(r2)
  80be08:	10800104 	addi	r2,r2,4
  80be0c:	10800017 	ldw	r2,0(r2)
  80be10:	1007883a 	mov	r3,r2
  80be14:	00802074 	movhi	r2,129
  80be18:	1086ef04 	addi	r2,r2,7100
  80be1c:	10c00c15 	stw	r3,48(r2)
  80be20:	00802074 	movhi	r2,129
  80be24:	1086ef04 	addi	r2,r2,7100
  80be28:	10800a17 	ldw	r2,40(r2)
  80be2c:	10800204 	addi	r2,r2,8
  80be30:	10800017 	ldw	r2,0(r2)
  80be34:	10ffffcc 	andi	r3,r2,65535
  80be38:	00802074 	movhi	r2,129
  80be3c:	1086ef04 	addi	r2,r2,7100
  80be40:	10c00f15 	stw	r3,60(r2)
  80be44:	00802074 	movhi	r2,129
  80be48:	1086ef04 	addi	r2,r2,7100
  80be4c:	10800a17 	ldw	r2,40(r2)
  80be50:	10800204 	addi	r2,r2,8
  80be54:	10800017 	ldw	r2,0(r2)
  80be58:	1005d43a 	srai	r2,r2,16
  80be5c:	10ffffcc 	andi	r3,r2,65535
  80be60:	00802074 	movhi	r2,129
  80be64:	1086ef04 	addi	r2,r2,7100
  80be68:	10c01015 	stw	r3,64(r2)
  80be6c:	00802074 	movhi	r2,129
  80be70:	1086ef04 	addi	r2,r2,7100
  80be74:	10800a17 	ldw	r2,40(r2)
  80be78:	10800304 	addi	r2,r2,12
  80be7c:	10800017 	ldw	r2,0(r2)
  80be80:	1005d07a 	srai	r2,r2,1
  80be84:	10c0004c 	andi	r3,r2,1
  80be88:	00802074 	movhi	r2,129
  80be8c:	1086ef04 	addi	r2,r2,7100
  80be90:	10c00d15 	stw	r3,52(r2)
  80be94:	00802074 	movhi	r2,129
  80be98:	1086ef04 	addi	r2,r2,7100
  80be9c:	10800a17 	ldw	r2,40(r2)
  80bea0:	10800304 	addi	r2,r2,12
  80bea4:	10800017 	ldw	r2,0(r2)
  80bea8:	1005d13a 	srai	r2,r2,4
  80beac:	10c003cc 	andi	r3,r2,15
  80beb0:	00802074 	movhi	r2,129
  80beb4:	1086ef04 	addi	r2,r2,7100
  80beb8:	10c00e15 	stw	r3,56(r2)
  80bebc:	00802074 	movhi	r2,129
  80bec0:	1086ef04 	addi	r2,r2,7100
  80bec4:	10800a17 	ldw	r2,40(r2)
  80bec8:	10800304 	addi	r2,r2,12
  80becc:	10800017 	ldw	r2,0(r2)
  80bed0:	1005d43a 	srai	r2,r2,16
  80bed4:	1007883a 	mov	r3,r2
  80bed8:	00bfffc4 	movi	r2,-1
  80bedc:	1884703a 	and	r2,r3,r2
  80bee0:	e0bfff45 	stb	r2,-3(fp)
  80bee4:	00802074 	movhi	r2,129
  80bee8:	1086ef04 	addi	r2,r2,7100
  80beec:	10800a17 	ldw	r2,40(r2)
  80bef0:	10800304 	addi	r2,r2,12
  80bef4:	10800017 	ldw	r2,0(r2)
  80bef8:	1005d63a 	srai	r2,r2,24
  80befc:	1007883a 	mov	r3,r2
  80bf00:	00bfffc4 	movi	r2,-1
  80bf04:	1884703a 	and	r2,r3,r2
  80bf08:	e0bfff05 	stb	r2,-4(fp)
  80bf0c:	00802074 	movhi	r2,129
  80bf10:	1086ef04 	addi	r2,r2,7100
  80bf14:	10800e17 	ldw	r2,56(r2)
  80bf18:	10800058 	cmpnei	r2,r2,1
  80bf1c:	1000041e 	bne	r2,zero,80bf30 <alt_sys_init+0x1b4>
  80bf20:	00802074 	movhi	r2,129
  80bf24:	1086ef04 	addi	r2,r2,7100
  80bf28:	10001115 	stw	zero,68(r2)
  80bf2c:	00000e06 	br	80bf68 <alt_sys_init+0x1ec>
  80bf30:	00802074 	movhi	r2,129
  80bf34:	1086ef04 	addi	r2,r2,7100
  80bf38:	10800e17 	ldw	r2,56(r2)
  80bf3c:	10800098 	cmpnei	r2,r2,2
  80bf40:	1000051e 	bne	r2,zero,80bf58 <alt_sys_init+0x1dc>
  80bf44:	00c02074 	movhi	r3,129
  80bf48:	18c6ef04 	addi	r3,r3,7100
  80bf4c:	00800044 	movi	r2,1
  80bf50:	18801115 	stw	r2,68(r3)
  80bf54:	00000406 	br	80bf68 <alt_sys_init+0x1ec>
  80bf58:	00c02074 	movhi	r3,129
  80bf5c:	18c6ef04 	addi	r3,r3,7100
  80bf60:	00800084 	movi	r2,2
  80bf64:	18801115 	stw	r2,68(r3)
  80bf68:	e0ffff43 	ldbu	r3,-3(fp)
  80bf6c:	00800804 	movi	r2,32
  80bf70:	10c7c83a 	sub	r3,r2,r3
  80bf74:	00bfffc4 	movi	r2,-1
  80bf78:	10c6d83a 	srl	r3,r2,r3
  80bf7c:	00802074 	movhi	r2,129
  80bf80:	1086ef04 	addi	r2,r2,7100
  80bf84:	10c01215 	stw	r3,72(r2)
  80bf88:	e0ffff43 	ldbu	r3,-3(fp)
  80bf8c:	00802074 	movhi	r2,129
  80bf90:	1086ef04 	addi	r2,r2,7100
  80bf94:	10801117 	ldw	r2,68(r2)
  80bf98:	1887883a 	add	r3,r3,r2
  80bf9c:	00802074 	movhi	r2,129
  80bfa0:	1086ef04 	addi	r2,r2,7100
  80bfa4:	10c01315 	stw	r3,76(r2)
  80bfa8:	e0ffff03 	ldbu	r3,-4(fp)
  80bfac:	00800804 	movi	r2,32
  80bfb0:	10c7c83a 	sub	r3,r2,r3
  80bfb4:	00bfffc4 	movi	r2,-1
  80bfb8:	10c6d83a 	srl	r3,r2,r3
  80bfbc:	00802074 	movhi	r2,129
  80bfc0:	1086ef04 	addi	r2,r2,7100
  80bfc4:	10c01415 	stw	r3,80(r2)
  80bfc8:	01002074 	movhi	r4,129
  80bfcc:	2106ef04 	addi	r4,r4,7100
  80bfd0:	080bff40 	call	80bff4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  80bfd4:	01002074 	movhi	r4,129
  80bfd8:	21070404 	addi	r4,r4,7184
  80bfdc:	080bff40 	call	80bff4 <alt_dev_reg>
}
  80bfe0:	e037883a 	mov	sp,fp
  80bfe4:	dfc00117 	ldw	ra,4(sp)
  80bfe8:	df000017 	ldw	fp,0(sp)
  80bfec:	dec00204 	addi	sp,sp,8
  80bff0:	f800283a 	ret

0080bff4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80bff4:	defffd04 	addi	sp,sp,-12
  80bff8:	dfc00215 	stw	ra,8(sp)
  80bffc:	df000115 	stw	fp,4(sp)
  80c000:	df000104 	addi	fp,sp,4
  80c004:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80c008:	e13fff17 	ldw	r4,-4(fp)
  80c00c:	01402074 	movhi	r5,129
  80c010:	29471704 	addi	r5,r5,7260
  80c014:	080eac40 	call	80eac4 <alt_dev_llist_insert>
}
  80c018:	e037883a 	mov	sp,fp
  80c01c:	dfc00117 	ldw	ra,4(sp)
  80c020:	df000017 	ldw	fp,0(sp)
  80c024:	dec00204 	addi	sp,sp,8
  80c028:	f800283a 	ret

0080c02c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c02c:	defffa04 	addi	sp,sp,-24
  80c030:	dfc00515 	stw	ra,20(sp)
  80c034:	df000415 	stw	fp,16(sp)
  80c038:	df000404 	addi	fp,sp,16
  80c03c:	e13ffd15 	stw	r4,-12(fp)
  80c040:	e17ffe15 	stw	r5,-8(fp)
  80c044:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c048:	e0bffd17 	ldw	r2,-12(fp)
  80c04c:	10800017 	ldw	r2,0(r2)
  80c050:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80c054:	e0bffc17 	ldw	r2,-16(fp)
  80c058:	11000a04 	addi	r4,r2,40
  80c05c:	e0bffd17 	ldw	r2,-12(fp)
  80c060:	11c00217 	ldw	r7,8(r2)
  80c064:	e17ffe17 	ldw	r5,-8(fp)
  80c068:	e1bfff17 	ldw	r6,-4(fp)
  80c06c:	080c6740 	call	80c674 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80c070:	e037883a 	mov	sp,fp
  80c074:	dfc00117 	ldw	ra,4(sp)
  80c078:	df000017 	ldw	fp,0(sp)
  80c07c:	dec00204 	addi	sp,sp,8
  80c080:	f800283a 	ret

0080c084 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c084:	defffa04 	addi	sp,sp,-24
  80c088:	dfc00515 	stw	ra,20(sp)
  80c08c:	df000415 	stw	fp,16(sp)
  80c090:	df000404 	addi	fp,sp,16
  80c094:	e13ffd15 	stw	r4,-12(fp)
  80c098:	e17ffe15 	stw	r5,-8(fp)
  80c09c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c0a0:	e0bffd17 	ldw	r2,-12(fp)
  80c0a4:	10800017 	ldw	r2,0(r2)
  80c0a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80c0ac:	e0bffc17 	ldw	r2,-16(fp)
  80c0b0:	11000a04 	addi	r4,r2,40
  80c0b4:	e0bffd17 	ldw	r2,-12(fp)
  80c0b8:	11c00217 	ldw	r7,8(r2)
  80c0bc:	e17ffe17 	ldw	r5,-8(fp)
  80c0c0:	e1bfff17 	ldw	r6,-4(fp)
  80c0c4:	080c8980 	call	80c898 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80c0c8:	e037883a 	mov	sp,fp
  80c0cc:	dfc00117 	ldw	ra,4(sp)
  80c0d0:	df000017 	ldw	fp,0(sp)
  80c0d4:	dec00204 	addi	sp,sp,8
  80c0d8:	f800283a 	ret

0080c0dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80c0dc:	defffc04 	addi	sp,sp,-16
  80c0e0:	dfc00315 	stw	ra,12(sp)
  80c0e4:	df000215 	stw	fp,8(sp)
  80c0e8:	df000204 	addi	fp,sp,8
  80c0ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c0f0:	e0bfff17 	ldw	r2,-4(fp)
  80c0f4:	10800017 	ldw	r2,0(r2)
  80c0f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80c0fc:	e0bffe17 	ldw	r2,-8(fp)
  80c100:	11000a04 	addi	r4,r2,40
  80c104:	e0bfff17 	ldw	r2,-4(fp)
  80c108:	11400217 	ldw	r5,8(r2)
  80c10c:	080c50c0 	call	80c50c <altera_avalon_jtag_uart_close>
}
  80c110:	e037883a 	mov	sp,fp
  80c114:	dfc00117 	ldw	ra,4(sp)
  80c118:	df000017 	ldw	fp,0(sp)
  80c11c:	dec00204 	addi	sp,sp,8
  80c120:	f800283a 	ret

0080c124 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80c124:	defffa04 	addi	sp,sp,-24
  80c128:	dfc00515 	stw	ra,20(sp)
  80c12c:	df000415 	stw	fp,16(sp)
  80c130:	df000404 	addi	fp,sp,16
  80c134:	e13ffd15 	stw	r4,-12(fp)
  80c138:	e17ffe15 	stw	r5,-8(fp)
  80c13c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80c140:	e0bffd17 	ldw	r2,-12(fp)
  80c144:	10800017 	ldw	r2,0(r2)
  80c148:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80c14c:	e0bffc17 	ldw	r2,-16(fp)
  80c150:	11000a04 	addi	r4,r2,40
  80c154:	e17ffe17 	ldw	r5,-8(fp)
  80c158:	e1bfff17 	ldw	r6,-4(fp)
  80c15c:	080c5800 	call	80c580 <altera_avalon_jtag_uart_ioctl>
}
  80c160:	e037883a 	mov	sp,fp
  80c164:	dfc00117 	ldw	ra,4(sp)
  80c168:	df000017 	ldw	fp,0(sp)
  80c16c:	dec00204 	addi	sp,sp,8
  80c170:	f800283a 	ret

0080c174 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80c174:	defffa04 	addi	sp,sp,-24
  80c178:	dfc00515 	stw	ra,20(sp)
  80c17c:	df000415 	stw	fp,16(sp)
  80c180:	df000404 	addi	fp,sp,16
  80c184:	e13ffd15 	stw	r4,-12(fp)
  80c188:	e17ffe15 	stw	r5,-8(fp)
  80c18c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c190:	e0fffd17 	ldw	r3,-12(fp)
  80c194:	00800044 	movi	r2,1
  80c198:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c19c:	e0bffd17 	ldw	r2,-12(fp)
  80c1a0:	10800017 	ldw	r2,0(r2)
  80c1a4:	11000104 	addi	r4,r2,4
  80c1a8:	e0bffd17 	ldw	r2,-12(fp)
  80c1ac:	10800817 	ldw	r2,32(r2)
  80c1b0:	1007883a 	mov	r3,r2
  80c1b4:	2005883a 	mov	r2,r4
  80c1b8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80c1bc:	e13ffe17 	ldw	r4,-8(fp)
  80c1c0:	e17fff17 	ldw	r5,-4(fp)
  80c1c4:	d8000015 	stw	zero,0(sp)
  80c1c8:	01802074 	movhi	r6,129
  80c1cc:	31b08d04 	addi	r6,r6,-15820
  80c1d0:	e1fffd17 	ldw	r7,-12(fp)
  80c1d4:	080ed640 	call	80ed64 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80c1d8:	e0bffd17 	ldw	r2,-12(fp)
  80c1dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80c1e0:	e0bffd17 	ldw	r2,-12(fp)
  80c1e4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c1e8:	00802074 	movhi	r2,129
  80c1ec:	108e8e04 	addi	r2,r2,14904
  80c1f0:	10800017 	ldw	r2,0(r2)
  80c1f4:	100b883a 	mov	r5,r2
  80c1f8:	01802074 	movhi	r6,129
  80c1fc:	31b11704 	addi	r6,r6,-15268
  80c200:	e1fffd17 	ldw	r7,-12(fp)
  80c204:	080e9700 	call	80e970 <alt_alarm_start>
  80c208:	1004403a 	cmpge	r2,r2,zero
  80c20c:	1000041e 	bne	r2,zero,80c220 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80c210:	e0fffd17 	ldw	r3,-12(fp)
  80c214:	00a00034 	movhi	r2,32768
  80c218:	10bfffc4 	addi	r2,r2,-1
  80c21c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80c220:	e037883a 	mov	sp,fp
  80c224:	dfc00117 	ldw	ra,4(sp)
  80c228:	df000017 	ldw	fp,0(sp)
  80c22c:	dec00204 	addi	sp,sp,8
  80c230:	f800283a 	ret

0080c234 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80c234:	defff804 	addi	sp,sp,-32
  80c238:	df000715 	stw	fp,28(sp)
  80c23c:	df000704 	addi	fp,sp,28
  80c240:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80c244:	e0bfff17 	ldw	r2,-4(fp)
  80c248:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80c24c:	e0bffe17 	ldw	r2,-8(fp)
  80c250:	10800017 	ldw	r2,0(r2)
  80c254:	e0bffd15 	stw	r2,-12(fp)
  80c258:	00000006 	br	80c25c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c25c:	e0bffd17 	ldw	r2,-12(fp)
  80c260:	10800104 	addi	r2,r2,4
  80c264:	10800037 	ldwio	r2,0(r2)
  80c268:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80c26c:	e0bffc17 	ldw	r2,-16(fp)
  80c270:	1080c00c 	andi	r2,r2,768
  80c274:	1005003a 	cmpeq	r2,r2,zero
  80c278:	1000741e 	bne	r2,zero,80c44c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80c27c:	e0bffc17 	ldw	r2,-16(fp)
  80c280:	1080400c 	andi	r2,r2,256
  80c284:	1005003a 	cmpeq	r2,r2,zero
  80c288:	1000351e 	bne	r2,zero,80c360 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80c28c:	00800074 	movhi	r2,1
  80c290:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c294:	e0bffe17 	ldw	r2,-8(fp)
  80c298:	10800a17 	ldw	r2,40(r2)
  80c29c:	10800044 	addi	r2,r2,1
  80c2a0:	1081ffcc 	andi	r2,r2,2047
  80c2a4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80c2a8:	e0bffe17 	ldw	r2,-8(fp)
  80c2ac:	10c00b17 	ldw	r3,44(r2)
  80c2b0:	e0bffa17 	ldw	r2,-24(fp)
  80c2b4:	18801626 	beq	r3,r2,80c310 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80c2b8:	e0bffd17 	ldw	r2,-12(fp)
  80c2bc:	10800037 	ldwio	r2,0(r2)
  80c2c0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80c2c4:	e0bffb17 	ldw	r2,-20(fp)
  80c2c8:	10a0000c 	andi	r2,r2,32768
  80c2cc:	1005003a 	cmpeq	r2,r2,zero
  80c2d0:	10000f1e 	bne	r2,zero,80c310 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80c2d4:	e0bffe17 	ldw	r2,-8(fp)
  80c2d8:	10c00a17 	ldw	r3,40(r2)
  80c2dc:	e0bffb17 	ldw	r2,-20(fp)
  80c2e0:	1009883a 	mov	r4,r2
  80c2e4:	e0bffe17 	ldw	r2,-8(fp)
  80c2e8:	1885883a 	add	r2,r3,r2
  80c2ec:	10800e04 	addi	r2,r2,56
  80c2f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c2f4:	e0bffe17 	ldw	r2,-8(fp)
  80c2f8:	10800a17 	ldw	r2,40(r2)
  80c2fc:	10800044 	addi	r2,r2,1
  80c300:	10c1ffcc 	andi	r3,r2,2047
  80c304:	e0bffe17 	ldw	r2,-8(fp)
  80c308:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80c30c:	003fe106 	br	80c294 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c310:	e0bffb17 	ldw	r2,-20(fp)
  80c314:	10bfffec 	andhi	r2,r2,65535
  80c318:	1005003a 	cmpeq	r2,r2,zero
  80c31c:	1000101e 	bne	r2,zero,80c360 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c320:	e0bffe17 	ldw	r2,-8(fp)
  80c324:	10c00817 	ldw	r3,32(r2)
  80c328:	00bfff84 	movi	r2,-2
  80c32c:	1886703a 	and	r3,r3,r2
  80c330:	e0bffe17 	ldw	r2,-8(fp)
  80c334:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c338:	e0bffd17 	ldw	r2,-12(fp)
  80c33c:	11000104 	addi	r4,r2,4
  80c340:	e0bffe17 	ldw	r2,-8(fp)
  80c344:	10800817 	ldw	r2,32(r2)
  80c348:	1007883a 	mov	r3,r2
  80c34c:	2005883a 	mov	r2,r4
  80c350:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c354:	e0bffd17 	ldw	r2,-12(fp)
  80c358:	10800104 	addi	r2,r2,4
  80c35c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c360:	e0bffc17 	ldw	r2,-16(fp)
  80c364:	1080800c 	andi	r2,r2,512
  80c368:	1005003a 	cmpeq	r2,r2,zero
  80c36c:	103fbb1e 	bne	r2,zero,80c25c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c370:	e0bffc17 	ldw	r2,-16(fp)
  80c374:	10bfffec 	andhi	r2,r2,65535
  80c378:	1004d43a 	srli	r2,r2,16
  80c37c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c380:	00001506 	br	80c3d8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c384:	e13ffd17 	ldw	r4,-12(fp)
  80c388:	e0bffe17 	ldw	r2,-8(fp)
  80c38c:	10c00d17 	ldw	r3,52(r2)
  80c390:	e0bffe17 	ldw	r2,-8(fp)
  80c394:	1885883a 	add	r2,r3,r2
  80c398:	10820e04 	addi	r2,r2,2104
  80c39c:	10800003 	ldbu	r2,0(r2)
  80c3a0:	10c03fcc 	andi	r3,r2,255
  80c3a4:	18c0201c 	xori	r3,r3,128
  80c3a8:	18ffe004 	addi	r3,r3,-128
  80c3ac:	2005883a 	mov	r2,r4
  80c3b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c3b4:	e0bffe17 	ldw	r2,-8(fp)
  80c3b8:	10800d17 	ldw	r2,52(r2)
  80c3bc:	10800044 	addi	r2,r2,1
  80c3c0:	10c1ffcc 	andi	r3,r2,2047
  80c3c4:	e0bffe17 	ldw	r2,-8(fp)
  80c3c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80c3cc:	e0bff917 	ldw	r2,-28(fp)
  80c3d0:	10bfffc4 	addi	r2,r2,-1
  80c3d4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c3d8:	e0bff917 	ldw	r2,-28(fp)
  80c3dc:	1005003a 	cmpeq	r2,r2,zero
  80c3e0:	1000051e 	bne	r2,zero,80c3f8 <altera_avalon_jtag_uart_irq+0x1c4>
  80c3e4:	e0bffe17 	ldw	r2,-8(fp)
  80c3e8:	10c00d17 	ldw	r3,52(r2)
  80c3ec:	e0bffe17 	ldw	r2,-8(fp)
  80c3f0:	10800c17 	ldw	r2,48(r2)
  80c3f4:	18bfe31e 	bne	r3,r2,80c384 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c3f8:	e0bff917 	ldw	r2,-28(fp)
  80c3fc:	1005003a 	cmpeq	r2,r2,zero
  80c400:	103f961e 	bne	r2,zero,80c25c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c404:	e0bffe17 	ldw	r2,-8(fp)
  80c408:	10c00817 	ldw	r3,32(r2)
  80c40c:	00bfff44 	movi	r2,-3
  80c410:	1886703a 	and	r3,r3,r2
  80c414:	e0bffe17 	ldw	r2,-8(fp)
  80c418:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c41c:	e0bffe17 	ldw	r2,-8(fp)
  80c420:	10800017 	ldw	r2,0(r2)
  80c424:	11000104 	addi	r4,r2,4
  80c428:	e0bffe17 	ldw	r2,-8(fp)
  80c42c:	10800817 	ldw	r2,32(r2)
  80c430:	1007883a 	mov	r3,r2
  80c434:	2005883a 	mov	r2,r4
  80c438:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c43c:	e0bffd17 	ldw	r2,-12(fp)
  80c440:	10800104 	addi	r2,r2,4
  80c444:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c448:	003f8406 	br	80c25c <altera_avalon_jtag_uart_irq+0x28>
}
  80c44c:	e037883a 	mov	sp,fp
  80c450:	df000017 	ldw	fp,0(sp)
  80c454:	dec00104 	addi	sp,sp,4
  80c458:	f800283a 	ret

0080c45c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c45c:	defffc04 	addi	sp,sp,-16
  80c460:	df000315 	stw	fp,12(sp)
  80c464:	df000304 	addi	fp,sp,12
  80c468:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c46c:	e0bfff17 	ldw	r2,-4(fp)
  80c470:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c474:	e0bffe17 	ldw	r2,-8(fp)
  80c478:	10800017 	ldw	r2,0(r2)
  80c47c:	10800104 	addi	r2,r2,4
  80c480:	10800037 	ldwio	r2,0(r2)
  80c484:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c488:	e0bffd17 	ldw	r2,-12(fp)
  80c48c:	1081000c 	andi	r2,r2,1024
  80c490:	1005003a 	cmpeq	r2,r2,zero
  80c494:	10000c1e 	bne	r2,zero,80c4c8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c498:	e0bffe17 	ldw	r2,-8(fp)
  80c49c:	10800017 	ldw	r2,0(r2)
  80c4a0:	11000104 	addi	r4,r2,4
  80c4a4:	e0bffe17 	ldw	r2,-8(fp)
  80c4a8:	10800817 	ldw	r2,32(r2)
  80c4ac:	10810014 	ori	r2,r2,1024
  80c4b0:	1007883a 	mov	r3,r2
  80c4b4:	2005883a 	mov	r2,r4
  80c4b8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80c4bc:	e0bffe17 	ldw	r2,-8(fp)
  80c4c0:	10000915 	stw	zero,36(r2)
  80c4c4:	00000a06 	br	80c4f0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c4c8:	e0bffe17 	ldw	r2,-8(fp)
  80c4cc:	10c00917 	ldw	r3,36(r2)
  80c4d0:	00a00034 	movhi	r2,32768
  80c4d4:	10bfff04 	addi	r2,r2,-4
  80c4d8:	10c00536 	bltu	r2,r3,80c4f0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80c4dc:	e0bffe17 	ldw	r2,-8(fp)
  80c4e0:	10800917 	ldw	r2,36(r2)
  80c4e4:	10c00044 	addi	r3,r2,1
  80c4e8:	e0bffe17 	ldw	r2,-8(fp)
  80c4ec:	10c00915 	stw	r3,36(r2)
  80c4f0:	00802074 	movhi	r2,129
  80c4f4:	108e8e04 	addi	r2,r2,14904
  80c4f8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80c4fc:	e037883a 	mov	sp,fp
  80c500:	df000017 	ldw	fp,0(sp)
  80c504:	dec00104 	addi	sp,sp,4
  80c508:	f800283a 	ret

0080c50c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c50c:	defffc04 	addi	sp,sp,-16
  80c510:	df000315 	stw	fp,12(sp)
  80c514:	df000304 	addi	fp,sp,12
  80c518:	e13ffd15 	stw	r4,-12(fp)
  80c51c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c520:	00000706 	br	80c540 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80c524:	e0bffe17 	ldw	r2,-8(fp)
  80c528:	1090000c 	andi	r2,r2,16384
  80c52c:	1005003a 	cmpeq	r2,r2,zero
  80c530:	1000031e 	bne	r2,zero,80c540 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80c534:	00bffd44 	movi	r2,-11
  80c538:	e0bfff15 	stw	r2,-4(fp)
  80c53c:	00000b06 	br	80c56c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c540:	e0bffd17 	ldw	r2,-12(fp)
  80c544:	10c00d17 	ldw	r3,52(r2)
  80c548:	e0bffd17 	ldw	r2,-12(fp)
  80c54c:	10800c17 	ldw	r2,48(r2)
  80c550:	18800526 	beq	r3,r2,80c568 <altera_avalon_jtag_uart_close+0x5c>
  80c554:	e0bffd17 	ldw	r2,-12(fp)
  80c558:	10c00917 	ldw	r3,36(r2)
  80c55c:	e0bffd17 	ldw	r2,-12(fp)
  80c560:	10800117 	ldw	r2,4(r2)
  80c564:	18bfef36 	bltu	r3,r2,80c524 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c568:	e03fff15 	stw	zero,-4(fp)
  80c56c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c570:	e037883a 	mov	sp,fp
  80c574:	df000017 	ldw	fp,0(sp)
  80c578:	dec00104 	addi	sp,sp,4
  80c57c:	f800283a 	ret

0080c580 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c580:	defff804 	addi	sp,sp,-32
  80c584:	df000715 	stw	fp,28(sp)
  80c588:	df000704 	addi	fp,sp,28
  80c58c:	e13ffb15 	stw	r4,-20(fp)
  80c590:	e17ffc15 	stw	r5,-16(fp)
  80c594:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80c598:	00bff9c4 	movi	r2,-25
  80c59c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80c5a0:	e0bffc17 	ldw	r2,-16(fp)
  80c5a4:	e0bfff15 	stw	r2,-4(fp)
  80c5a8:	e0ffff17 	ldw	r3,-4(fp)
  80c5ac:	189a8060 	cmpeqi	r2,r3,27137
  80c5b0:	1000041e 	bne	r2,zero,80c5c4 <altera_avalon_jtag_uart_ioctl+0x44>
  80c5b4:	e0ffff17 	ldw	r3,-4(fp)
  80c5b8:	189a80a0 	cmpeqi	r2,r3,27138
  80c5bc:	10001b1e 	bne	r2,zero,80c62c <altera_avalon_jtag_uart_ioctl+0xac>
  80c5c0:	00002706 	br	80c660 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c5c4:	e0bffb17 	ldw	r2,-20(fp)
  80c5c8:	10c00117 	ldw	r3,4(r2)
  80c5cc:	00a00034 	movhi	r2,32768
  80c5d0:	10bfffc4 	addi	r2,r2,-1
  80c5d4:	18802226 	beq	r3,r2,80c660 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80c5d8:	e0bffd17 	ldw	r2,-12(fp)
  80c5dc:	10800017 	ldw	r2,0(r2)
  80c5e0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c5e4:	e0bff917 	ldw	r2,-28(fp)
  80c5e8:	10800090 	cmplti	r2,r2,2
  80c5ec:	1000071e 	bne	r2,zero,80c60c <altera_avalon_jtag_uart_ioctl+0x8c>
  80c5f0:	e0fff917 	ldw	r3,-28(fp)
  80c5f4:	00a00034 	movhi	r2,32768
  80c5f8:	10bfffc4 	addi	r2,r2,-1
  80c5fc:	18800326 	beq	r3,r2,80c60c <altera_avalon_jtag_uart_ioctl+0x8c>
  80c600:	e0bff917 	ldw	r2,-28(fp)
  80c604:	e0bffe15 	stw	r2,-8(fp)
  80c608:	00000306 	br	80c618 <altera_avalon_jtag_uart_ioctl+0x98>
  80c60c:	00e00034 	movhi	r3,32768
  80c610:	18ffff84 	addi	r3,r3,-2
  80c614:	e0fffe15 	stw	r3,-8(fp)
  80c618:	e0bffb17 	ldw	r2,-20(fp)
  80c61c:	e0fffe17 	ldw	r3,-8(fp)
  80c620:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80c624:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80c628:	00000d06 	br	80c660 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c62c:	e0bffb17 	ldw	r2,-20(fp)
  80c630:	10c00117 	ldw	r3,4(r2)
  80c634:	00a00034 	movhi	r2,32768
  80c638:	10bfffc4 	addi	r2,r2,-1
  80c63c:	18800826 	beq	r3,r2,80c660 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c640:	e13ffd17 	ldw	r4,-12(fp)
  80c644:	e0bffb17 	ldw	r2,-20(fp)
  80c648:	10c00917 	ldw	r3,36(r2)
  80c64c:	e0bffb17 	ldw	r2,-20(fp)
  80c650:	10800117 	ldw	r2,4(r2)
  80c654:	1885803a 	cmpltu	r2,r3,r2
  80c658:	20800015 	stw	r2,0(r4)
      rc = 0;
  80c65c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80c660:	e0bffa17 	ldw	r2,-24(fp)
}
  80c664:	e037883a 	mov	sp,fp
  80c668:	df000017 	ldw	fp,0(sp)
  80c66c:	dec00104 	addi	sp,sp,4
  80c670:	f800283a 	ret

0080c674 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c674:	defff204 	addi	sp,sp,-56
  80c678:	dfc00d15 	stw	ra,52(sp)
  80c67c:	df000c15 	stw	fp,48(sp)
  80c680:	df000c04 	addi	fp,sp,48
  80c684:	e13ffb15 	stw	r4,-20(fp)
  80c688:	e17ffc15 	stw	r5,-16(fp)
  80c68c:	e1bffd15 	stw	r6,-12(fp)
  80c690:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80c694:	e0bffc17 	ldw	r2,-16(fp)
  80c698:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c69c:	00004806 	br	80c7c0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c6a0:	e0bffb17 	ldw	r2,-20(fp)
  80c6a4:	10800a17 	ldw	r2,40(r2)
  80c6a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c6ac:	e0bffb17 	ldw	r2,-20(fp)
  80c6b0:	10800b17 	ldw	r2,44(r2)
  80c6b4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80c6b8:	e0fff717 	ldw	r3,-36(fp)
  80c6bc:	e0bff617 	ldw	r2,-40(fp)
  80c6c0:	18800536 	bltu	r3,r2,80c6d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c6c4:	e0bff717 	ldw	r2,-36(fp)
  80c6c8:	e0fff617 	ldw	r3,-40(fp)
  80c6cc:	10c5c83a 	sub	r2,r2,r3
  80c6d0:	e0bff815 	stw	r2,-32(fp)
  80c6d4:	00000406 	br	80c6e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c6d8:	00820004 	movi	r2,2048
  80c6dc:	e0fff617 	ldw	r3,-40(fp)
  80c6e0:	10c5c83a 	sub	r2,r2,r3
  80c6e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c6e8:	e0bff817 	ldw	r2,-32(fp)
  80c6ec:	1005003a 	cmpeq	r2,r2,zero
  80c6f0:	10001f1e 	bne	r2,zero,80c770 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80c6f4:	e0fffd17 	ldw	r3,-12(fp)
  80c6f8:	e0bff817 	ldw	r2,-32(fp)
  80c6fc:	1880022e 	bgeu	r3,r2,80c708 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80c700:	e0bffd17 	ldw	r2,-12(fp)
  80c704:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c708:	e0bffb17 	ldw	r2,-20(fp)
  80c70c:	10c00e04 	addi	r3,r2,56
  80c710:	e0bff617 	ldw	r2,-40(fp)
  80c714:	1887883a 	add	r3,r3,r2
  80c718:	e0bffa17 	ldw	r2,-24(fp)
  80c71c:	1009883a 	mov	r4,r2
  80c720:	180b883a 	mov	r5,r3
  80c724:	e1bff817 	ldw	r6,-32(fp)
  80c728:	08068ac0 	call	8068ac <memcpy>
      ptr   += n;
  80c72c:	e0fff817 	ldw	r3,-32(fp)
  80c730:	e0bffa17 	ldw	r2,-24(fp)
  80c734:	10c5883a 	add	r2,r2,r3
  80c738:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80c73c:	e0fffd17 	ldw	r3,-12(fp)
  80c740:	e0bff817 	ldw	r2,-32(fp)
  80c744:	1885c83a 	sub	r2,r3,r2
  80c748:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c74c:	e0fff617 	ldw	r3,-40(fp)
  80c750:	e0bff817 	ldw	r2,-32(fp)
  80c754:	1885883a 	add	r2,r3,r2
  80c758:	10c1ffcc 	andi	r3,r2,2047
  80c75c:	e0bffb17 	ldw	r2,-20(fp)
  80c760:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c764:	e0bffd17 	ldw	r2,-12(fp)
  80c768:	10800048 	cmpgei	r2,r2,1
  80c76c:	103fcc1e 	bne	r2,zero,80c6a0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80c770:	e0fffa17 	ldw	r3,-24(fp)
  80c774:	e0bffc17 	ldw	r2,-16(fp)
  80c778:	1880141e 	bne	r3,r2,80c7cc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c77c:	e0bffe17 	ldw	r2,-8(fp)
  80c780:	1090000c 	andi	r2,r2,16384
  80c784:	1004c03a 	cmpne	r2,r2,zero
  80c788:	1000101e 	bne	r2,zero,80c7cc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c78c:	e0bffb17 	ldw	r2,-20(fp)
  80c790:	10c00a17 	ldw	r3,40(r2)
  80c794:	e0bff717 	ldw	r2,-36(fp)
  80c798:	1880051e 	bne	r3,r2,80c7b0 <altera_avalon_jtag_uart_read+0x13c>
  80c79c:	e0bffb17 	ldw	r2,-20(fp)
  80c7a0:	10c00917 	ldw	r3,36(r2)
  80c7a4:	e0bffb17 	ldw	r2,-20(fp)
  80c7a8:	10800117 	ldw	r2,4(r2)
  80c7ac:	18bff736 	bltu	r3,r2,80c78c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c7b0:	e0bffb17 	ldw	r2,-20(fp)
  80c7b4:	10c00a17 	ldw	r3,40(r2)
  80c7b8:	e0bff717 	ldw	r2,-36(fp)
  80c7bc:	18800326 	beq	r3,r2,80c7cc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c7c0:	e0bffd17 	ldw	r2,-12(fp)
  80c7c4:	10800048 	cmpgei	r2,r2,1
  80c7c8:	103fb51e 	bne	r2,zero,80c6a0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c7cc:	e0fffa17 	ldw	r3,-24(fp)
  80c7d0:	e0bffc17 	ldw	r2,-16(fp)
  80c7d4:	18801926 	beq	r3,r2,80c83c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c7d8:	0005303a 	rdctl	r2,status
  80c7dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c7e0:	e0fff517 	ldw	r3,-44(fp)
  80c7e4:	00bfff84 	movi	r2,-2
  80c7e8:	1884703a 	and	r2,r3,r2
  80c7ec:	1001703a 	wrctl	status,r2
  
  return context;
  80c7f0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c7f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c7f8:	e0bffb17 	ldw	r2,-20(fp)
  80c7fc:	10800817 	ldw	r2,32(r2)
  80c800:	10c00054 	ori	r3,r2,1
  80c804:	e0bffb17 	ldw	r2,-20(fp)
  80c808:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c80c:	e0bffb17 	ldw	r2,-20(fp)
  80c810:	10800017 	ldw	r2,0(r2)
  80c814:	11000104 	addi	r4,r2,4
  80c818:	e0bffb17 	ldw	r2,-20(fp)
  80c81c:	10800817 	ldw	r2,32(r2)
  80c820:	1007883a 	mov	r3,r2
  80c824:	2005883a 	mov	r2,r4
  80c828:	10c00035 	stwio	r3,0(r2)
  80c82c:	e0bff917 	ldw	r2,-28(fp)
  80c830:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c834:	e0bff417 	ldw	r2,-48(fp)
  80c838:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c83c:	e0fffa17 	ldw	r3,-24(fp)
  80c840:	e0bffc17 	ldw	r2,-16(fp)
  80c844:	18800526 	beq	r3,r2,80c85c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80c848:	e0fffa17 	ldw	r3,-24(fp)
  80c84c:	e0bffc17 	ldw	r2,-16(fp)
  80c850:	1887c83a 	sub	r3,r3,r2
  80c854:	e0ffff15 	stw	r3,-4(fp)
  80c858:	00000906 	br	80c880 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80c85c:	e0bffe17 	ldw	r2,-8(fp)
  80c860:	1090000c 	andi	r2,r2,16384
  80c864:	1005003a 	cmpeq	r2,r2,zero
  80c868:	1000031e 	bne	r2,zero,80c878 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c86c:	00bffd44 	movi	r2,-11
  80c870:	e0bfff15 	stw	r2,-4(fp)
  80c874:	00000206 	br	80c880 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80c878:	00bffec4 	movi	r2,-5
  80c87c:	e0bfff15 	stw	r2,-4(fp)
  80c880:	e0bfff17 	ldw	r2,-4(fp)
}
  80c884:	e037883a 	mov	sp,fp
  80c888:	dfc00117 	ldw	ra,4(sp)
  80c88c:	df000017 	ldw	fp,0(sp)
  80c890:	dec00204 	addi	sp,sp,8
  80c894:	f800283a 	ret

0080c898 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c898:	defff204 	addi	sp,sp,-56
  80c89c:	dfc00d15 	stw	ra,52(sp)
  80c8a0:	df000c15 	stw	fp,48(sp)
  80c8a4:	df000c04 	addi	fp,sp,48
  80c8a8:	e13ffb15 	stw	r4,-20(fp)
  80c8ac:	e17ffc15 	stw	r5,-16(fp)
  80c8b0:	e1bffd15 	stw	r6,-12(fp)
  80c8b4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c8b8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c8bc:	e0bffc17 	ldw	r2,-16(fp)
  80c8c0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c8c4:	00003a06 	br	80c9b0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c8c8:	e0bffb17 	ldw	r2,-20(fp)
  80c8cc:	10800c17 	ldw	r2,48(r2)
  80c8d0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80c8d4:	e0bffb17 	ldw	r2,-20(fp)
  80c8d8:	10800d17 	ldw	r2,52(r2)
  80c8dc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80c8e0:	e0fffa17 	ldw	r3,-24(fp)
  80c8e4:	e0bff917 	ldw	r2,-28(fp)
  80c8e8:	1880062e 	bgeu	r3,r2,80c904 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c8ec:	e0fff917 	ldw	r3,-28(fp)
  80c8f0:	e0bffa17 	ldw	r2,-24(fp)
  80c8f4:	1885c83a 	sub	r2,r3,r2
  80c8f8:	10bfffc4 	addi	r2,r2,-1
  80c8fc:	e0bff815 	stw	r2,-32(fp)
  80c900:	00000c06 	br	80c934 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80c904:	e0bff917 	ldw	r2,-28(fp)
  80c908:	1005003a 	cmpeq	r2,r2,zero
  80c90c:	1000051e 	bne	r2,zero,80c924 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c910:	00820004 	movi	r2,2048
  80c914:	e0fffa17 	ldw	r3,-24(fp)
  80c918:	10c5c83a 	sub	r2,r2,r3
  80c91c:	e0bff815 	stw	r2,-32(fp)
  80c920:	00000406 	br	80c934 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c924:	0081ffc4 	movi	r2,2047
  80c928:	e0fffa17 	ldw	r3,-24(fp)
  80c92c:	10c5c83a 	sub	r2,r2,r3
  80c930:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c934:	e0bff817 	ldw	r2,-32(fp)
  80c938:	1005003a 	cmpeq	r2,r2,zero
  80c93c:	10001f1e 	bne	r2,zero,80c9bc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80c940:	e0fffd17 	ldw	r3,-12(fp)
  80c944:	e0bff817 	ldw	r2,-32(fp)
  80c948:	1880022e 	bgeu	r3,r2,80c954 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80c94c:	e0bffd17 	ldw	r2,-12(fp)
  80c950:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c954:	e0bffb17 	ldw	r2,-20(fp)
  80c958:	10c20e04 	addi	r3,r2,2104
  80c95c:	e0bffa17 	ldw	r2,-24(fp)
  80c960:	1885883a 	add	r2,r3,r2
  80c964:	e0fffc17 	ldw	r3,-16(fp)
  80c968:	1009883a 	mov	r4,r2
  80c96c:	180b883a 	mov	r5,r3
  80c970:	e1bff817 	ldw	r6,-32(fp)
  80c974:	08068ac0 	call	8068ac <memcpy>
      ptr   += n;
  80c978:	e0fff817 	ldw	r3,-32(fp)
  80c97c:	e0bffc17 	ldw	r2,-16(fp)
  80c980:	10c5883a 	add	r2,r2,r3
  80c984:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80c988:	e0fffd17 	ldw	r3,-12(fp)
  80c98c:	e0bff817 	ldw	r2,-32(fp)
  80c990:	1885c83a 	sub	r2,r3,r2
  80c994:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c998:	e0fffa17 	ldw	r3,-24(fp)
  80c99c:	e0bff817 	ldw	r2,-32(fp)
  80c9a0:	1885883a 	add	r2,r3,r2
  80c9a4:	10c1ffcc 	andi	r3,r2,2047
  80c9a8:	e0bffb17 	ldw	r2,-20(fp)
  80c9ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c9b0:	e0bffd17 	ldw	r2,-12(fp)
  80c9b4:	10800048 	cmpgei	r2,r2,1
  80c9b8:	103fc31e 	bne	r2,zero,80c8c8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c9bc:	0005303a 	rdctl	r2,status
  80c9c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c9c4:	e0fff517 	ldw	r3,-44(fp)
  80c9c8:	00bfff84 	movi	r2,-2
  80c9cc:	1884703a 	and	r2,r3,r2
  80c9d0:	1001703a 	wrctl	status,r2
  
  return context;
  80c9d4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c9d8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c9dc:	e0bffb17 	ldw	r2,-20(fp)
  80c9e0:	10800817 	ldw	r2,32(r2)
  80c9e4:	10c00094 	ori	r3,r2,2
  80c9e8:	e0bffb17 	ldw	r2,-20(fp)
  80c9ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c9f0:	e0bffb17 	ldw	r2,-20(fp)
  80c9f4:	10800017 	ldw	r2,0(r2)
  80c9f8:	11000104 	addi	r4,r2,4
  80c9fc:	e0bffb17 	ldw	r2,-20(fp)
  80ca00:	10800817 	ldw	r2,32(r2)
  80ca04:	1007883a 	mov	r3,r2
  80ca08:	2005883a 	mov	r2,r4
  80ca0c:	10c00035 	stwio	r3,0(r2)
  80ca10:	e0bff717 	ldw	r2,-36(fp)
  80ca14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ca18:	e0bff417 	ldw	r2,-48(fp)
  80ca1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80ca20:	e0bffd17 	ldw	r2,-12(fp)
  80ca24:	10800050 	cmplti	r2,r2,1
  80ca28:	1000111e 	bne	r2,zero,80ca70 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80ca2c:	e0bffe17 	ldw	r2,-8(fp)
  80ca30:	1090000c 	andi	r2,r2,16384
  80ca34:	1004c03a 	cmpne	r2,r2,zero
  80ca38:	1000101e 	bne	r2,zero,80ca7c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80ca3c:	e0bffb17 	ldw	r2,-20(fp)
  80ca40:	10c00d17 	ldw	r3,52(r2)
  80ca44:	e0bff917 	ldw	r2,-28(fp)
  80ca48:	1880051e 	bne	r3,r2,80ca60 <altera_avalon_jtag_uart_write+0x1c8>
  80ca4c:	e0bffb17 	ldw	r2,-20(fp)
  80ca50:	10c00917 	ldw	r3,36(r2)
  80ca54:	e0bffb17 	ldw	r2,-20(fp)
  80ca58:	10800117 	ldw	r2,4(r2)
  80ca5c:	18bff736 	bltu	r3,r2,80ca3c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80ca60:	e0bffb17 	ldw	r2,-20(fp)
  80ca64:	10c00d17 	ldw	r3,52(r2)
  80ca68:	e0bff917 	ldw	r2,-28(fp)
  80ca6c:	18800326 	beq	r3,r2,80ca7c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80ca70:	e0bffd17 	ldw	r2,-12(fp)
  80ca74:	10800048 	cmpgei	r2,r2,1
  80ca78:	103fcd1e 	bne	r2,zero,80c9b0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ca7c:	e0fffc17 	ldw	r3,-16(fp)
  80ca80:	e0bff617 	ldw	r2,-40(fp)
  80ca84:	18800526 	beq	r3,r2,80ca9c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80ca88:	e0fffc17 	ldw	r3,-16(fp)
  80ca8c:	e0bff617 	ldw	r2,-40(fp)
  80ca90:	1887c83a 	sub	r3,r3,r2
  80ca94:	e0ffff15 	stw	r3,-4(fp)
  80ca98:	00000906 	br	80cac0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80ca9c:	e0bffe17 	ldw	r2,-8(fp)
  80caa0:	1090000c 	andi	r2,r2,16384
  80caa4:	1005003a 	cmpeq	r2,r2,zero
  80caa8:	1000031e 	bne	r2,zero,80cab8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80caac:	00bffd44 	movi	r2,-11
  80cab0:	e0bfff15 	stw	r2,-4(fp)
  80cab4:	00000206 	br	80cac0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80cab8:	00bffec4 	movi	r2,-5
  80cabc:	e0bfff15 	stw	r2,-4(fp)
  80cac0:	e0bfff17 	ldw	r2,-4(fp)
}
  80cac4:	e037883a 	mov	sp,fp
  80cac8:	dfc00117 	ldw	ra,4(sp)
  80cacc:	df000017 	ldw	fp,0(sp)
  80cad0:	dec00204 	addi	sp,sp,8
  80cad4:	f800283a 	ret

0080cad8 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  80cad8:	defffa04 	addi	sp,sp,-24
  80cadc:	dfc00515 	stw	ra,20(sp)
  80cae0:	df000415 	stw	fp,16(sp)
  80cae4:	df000404 	addi	fp,sp,16
  80cae8:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  80caec:	e0bfff17 	ldw	r2,-4(fp)
  80caf0:	11000704 	addi	r4,r2,28
  80caf4:	080cc300 	call	80cc30 <alt_avalon_mutex_reg>
  80caf8:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  80cafc:	e0bffe17 	ldw	r2,-8(fp)
  80cb00:	1004c03a 	cmpne	r2,r2,zero
  80cb04:	1000041e 	bne	r2,zero,80cb18 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  80cb08:	e0bfff17 	ldw	r2,-4(fp)
  80cb0c:	11000b04 	addi	r4,r2,44
  80cb10:	080cc300 	call	80cc30 <alt_avalon_mutex_reg>
  80cb14:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80cb18:	e0bffe17 	ldw	r2,-8(fp)
  80cb1c:	1004c03a 	cmpne	r2,r2,zero
  80cb20:	1000041e 	bne	r2,zero,80cb34 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  80cb24:	e13fff17 	ldw	r4,-4(fp)
  80cb28:	d1600e04 	addi	r5,gp,-32712
  80cb2c:	080eac40 	call	80eac4 <alt_dev_llist_insert>
  80cb30:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80cb34:	e0bffe17 	ldw	r2,-8(fp)
  80cb38:	1004c03a 	cmpne	r2,r2,zero
  80cb3c:	1000361e 	bne	r2,zero,80cc18 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  80cb40:	e0bfff17 	ldw	r2,-4(fp)
  80cb44:	11000917 	ldw	r4,36(r2)
  80cb48:	080d07c0 	call	80d07c <altera_avalon_mutex_open>
  80cb4c:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  80cb50:	e0bffd17 	ldw	r2,-12(fp)
  80cb54:	1005003a 	cmpeq	r2,r2,zero
  80cb58:	10002f1e 	bne	r2,zero,80cc18 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  80cb5c:	e0bfff17 	ldw	r2,-4(fp)
  80cb60:	11000d17 	ldw	r4,52(r2)
  80cb64:	080d07c0 	call	80d07c <altera_avalon_mutex_open>
  80cb68:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  80cb6c:	e0bffc17 	ldw	r2,-16(fp)
  80cb70:	1005003a 	cmpeq	r2,r2,zero
  80cb74:	1000281e 	bne	r2,zero,80cc18 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80cb78:	00000f06 	br	80cbb8 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  80cb7c:	e13ffd17 	ldw	r4,-12(fp)
  80cb80:	01400044 	movi	r5,1
  80cb84:	080d1940 	call	80d194 <altera_avalon_mutex_trylock>
  80cb88:	1004c03a 	cmpne	r2,r2,zero
  80cb8c:	10000a1e 	bne	r2,zero,80cbb8 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  80cb90:	e0bfff17 	ldw	r2,-4(fp)
  80cb94:	10800317 	ldw	r2,12(r2)
  80cb98:	1009883a 	mov	r4,r2
  80cb9c:	e0bfff17 	ldw	r2,-4(fp)
  80cba0:	10800517 	ldw	r2,20(r2)
  80cba4:	1007883a 	mov	r3,r2
  80cba8:	2005883a 	mov	r2,r4
  80cbac:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  80cbb0:	e13ffd17 	ldw	r4,-12(fp)
  80cbb4:	080d1d40 	call	80d1d4 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80cbb8:	e13ffd17 	ldw	r4,-12(fp)
  80cbbc:	080d2ac0 	call	80d2ac <altera_avalon_mutex_first_lock>
  80cbc0:	1004c03a 	cmpne	r2,r2,zero
  80cbc4:	103fed1e 	bne	r2,zero,80cb7c <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80cbc8:	00000f06 	br	80cc08 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  80cbcc:	e13ffc17 	ldw	r4,-16(fp)
  80cbd0:	01400044 	movi	r5,1
  80cbd4:	080d1940 	call	80d194 <altera_avalon_mutex_trylock>
  80cbd8:	1004c03a 	cmpne	r2,r2,zero
  80cbdc:	10000a1e 	bne	r2,zero,80cc08 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  80cbe0:	e0bfff17 	ldw	r2,-4(fp)
  80cbe4:	10800417 	ldw	r2,16(r2)
  80cbe8:	1009883a 	mov	r4,r2
  80cbec:	e0bfff17 	ldw	r2,-4(fp)
  80cbf0:	10800517 	ldw	r2,20(r2)
  80cbf4:	1007883a 	mov	r3,r2
  80cbf8:	2005883a 	mov	r2,r4
  80cbfc:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  80cc00:	e13ffc17 	ldw	r4,-16(fp)
  80cc04:	080d1d40 	call	80d1d4 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80cc08:	e13ffc17 	ldw	r4,-16(fp)
  80cc0c:	080d2ac0 	call	80d2ac <altera_avalon_mutex_first_lock>
  80cc10:	1004c03a 	cmpne	r2,r2,zero
  80cc14:	103fed1e 	bne	r2,zero,80cbcc <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  80cc18:	e0bffe17 	ldw	r2,-8(fp)
}
  80cc1c:	e037883a 	mov	sp,fp
  80cc20:	dfc00117 	ldw	ra,4(sp)
  80cc24:	df000017 	ldw	fp,0(sp)
  80cc28:	dec00204 	addi	sp,sp,8
  80cc2c:	f800283a 	ret

0080cc30 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  80cc30:	defffc04 	addi	sp,sp,-16
  80cc34:	dfc00315 	stw	ra,12(sp)
  80cc38:	df000215 	stw	fp,8(sp)
  80cc3c:	df000204 	addi	fp,sp,8
  80cc40:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80cc44:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  80cc48:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  80cc4c:	e0bffe17 	ldw	r2,-8(fp)
  80cc50:	1004c03a 	cmpne	r2,r2,zero
  80cc54:	1000061e 	bne	r2,zero,80cc70 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  80cc58:	e13fff17 	ldw	r4,-4(fp)
  80cc5c:	01402074 	movhi	r5,129
  80cc60:	29471f04 	addi	r5,r5,7292
  80cc64:	080eac40 	call	80eac4 <alt_dev_llist_insert>
  80cc68:	e0bffe15 	stw	r2,-8(fp)
  80cc6c:	00000506 	br	80cc84 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  80cc70:	080cc9c0 	call	80cc9c <alt_get_errno>
  80cc74:	00c00304 	movi	r3,12
  80cc78:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  80cc7c:	00bffd04 	movi	r2,-12
  80cc80:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  80cc84:	e0bffe17 	ldw	r2,-8(fp)
}
  80cc88:	e037883a 	mov	sp,fp
  80cc8c:	dfc00117 	ldw	ra,4(sp)
  80cc90:	df000017 	ldw	fp,0(sp)
  80cc94:	dec00204 	addi	sp,sp,8
  80cc98:	f800283a 	ret

0080cc9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cc9c:	defffd04 	addi	sp,sp,-12
  80cca0:	dfc00215 	stw	ra,8(sp)
  80cca4:	df000115 	stw	fp,4(sp)
  80cca8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ccac:	00802074 	movhi	r2,129
  80ccb0:	10871a04 	addi	r2,r2,7272
  80ccb4:	10800017 	ldw	r2,0(r2)
  80ccb8:	1005003a 	cmpeq	r2,r2,zero
  80ccbc:	1000061e 	bne	r2,zero,80ccd8 <alt_get_errno+0x3c>
  80ccc0:	00802074 	movhi	r2,129
  80ccc4:	10871a04 	addi	r2,r2,7272
  80ccc8:	10800017 	ldw	r2,0(r2)
  80cccc:	103ee83a 	callr	r2
  80ccd0:	e0bfff15 	stw	r2,-4(fp)
  80ccd4:	00000306 	br	80cce4 <alt_get_errno+0x48>
  80ccd8:	00802074 	movhi	r2,129
  80ccdc:	108e8304 	addi	r2,r2,14860
  80cce0:	e0bfff15 	stw	r2,-4(fp)
  80cce4:	e0bfff17 	ldw	r2,-4(fp)
}
  80cce8:	e037883a 	mov	sp,fp
  80ccec:	dfc00117 	ldw	ra,4(sp)
  80ccf0:	df000017 	ldw	fp,0(sp)
  80ccf4:	dec00204 	addi	sp,sp,8
  80ccf8:	f800283a 	ret

0080ccfc <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  80ccfc:	defffc04 	addi	sp,sp,-16
  80cd00:	dfc00315 	stw	ra,12(sp)
  80cd04:	df000215 	stw	fp,8(sp)
  80cd08:	df000204 	addi	fp,sp,8
  80cd0c:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  80cd10:	e13fff17 	ldw	r4,-4(fp)
  80cd14:	d1600e04 	addi	r5,gp,-32712
  80cd18:	080eca00 	call	80eca0 <alt_find_dev>
  80cd1c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80cd20:	e0bffe17 	ldw	r2,-8(fp)
  80cd24:	1004c03a 	cmpne	r2,r2,zero
  80cd28:	1000041e 	bne	r2,zero,80cd3c <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80cd2c:	080cc9c0 	call	80cc9c <alt_get_errno>
  80cd30:	1007883a 	mov	r3,r2
  80cd34:	008004c4 	movi	r2,19
  80cd38:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80cd3c:	e0bffe17 	ldw	r2,-8(fp)

}
  80cd40:	e037883a 	mov	sp,fp
  80cd44:	dfc00117 	ldw	ra,4(sp)
  80cd48:	df000017 	ldw	fp,0(sp)
  80cd4c:	dec00204 	addi	sp,sp,8
  80cd50:	f800283a 	ret

0080cd54 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  80cd54:	defffe04 	addi	sp,sp,-8
  80cd58:	df000115 	stw	fp,4(sp)
  80cd5c:	df000104 	addi	fp,sp,4
  80cd60:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80cd64:	e037883a 	mov	sp,fp
  80cd68:	df000017 	ldw	fp,0(sp)
  80cd6c:	dec00104 	addi	sp,sp,4
  80cd70:	f800283a 	ret

0080cd74 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  80cd74:	defff904 	addi	sp,sp,-28
  80cd78:	dfc00615 	stw	ra,24(sp)
  80cd7c:	df000515 	stw	fp,20(sp)
  80cd80:	df000504 	addi	fp,sp,20
  80cd84:	e13ffe15 	stw	r4,-8(fp)
  80cd88:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80cd8c:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  80cd90:	e0bffe17 	ldw	r2,-8(fp)
  80cd94:	11000704 	addi	r4,r2,28
  80cd98:	01400044 	movi	r5,1
  80cd9c:	080d1540 	call	80d154 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  80cda0:	e0bffe17 	ldw	r2,-8(fp)
  80cda4:	10800317 	ldw	r2,12(r2)
  80cda8:	10800037 	ldwio	r2,0(r2)
  80cdac:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  80cdb0:	e13ffe17 	ldw	r4,-8(fp)
  80cdb4:	e17ffc17 	ldw	r5,-16(fp)
  80cdb8:	080ce300 	call	80ce30 <alt_mailbox_increment_ptr>
  80cdbc:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  80cdc0:	e0bffe17 	ldw	r2,-8(fp)
  80cdc4:	10800417 	ldw	r2,16(r2)
  80cdc8:	10800037 	ldwio	r2,0(r2)
  80cdcc:	1007883a 	mov	r3,r2
  80cdd0:	e0bffb17 	ldw	r2,-20(fp)
  80cdd4:	1880061e 	bne	r3,r2,80cdf0 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  80cdd8:	080cc9c0 	call	80cc9c <alt_get_errno>
  80cddc:	00c002c4 	movi	r3,11
  80cde0:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  80cde4:	00bffd44 	movi	r2,-11
  80cde8:	e0bffd15 	stw	r2,-12(fp)
  80cdec:	00000706 	br	80ce0c <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  80cdf0:	e0bffc17 	ldw	r2,-16(fp)
  80cdf4:	e0ffff17 	ldw	r3,-4(fp)
  80cdf8:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  80cdfc:	e0bffe17 	ldw	r2,-8(fp)
  80ce00:	10800317 	ldw	r2,12(r2)
  80ce04:	e0fffb17 	ldw	r3,-20(fp)
  80ce08:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  80ce0c:	e0bffe17 	ldw	r2,-8(fp)
  80ce10:	11000704 	addi	r4,r2,28
  80ce14:	080d1d40 	call	80d1d4 <altera_avalon_mutex_unlock>

  return ret_code;
  80ce18:	e0bffd17 	ldw	r2,-12(fp)

}
  80ce1c:	e037883a 	mov	sp,fp
  80ce20:	dfc00117 	ldw	ra,4(sp)
  80ce24:	df000017 	ldw	fp,0(sp)
  80ce28:	dec00204 	addi	sp,sp,8
  80ce2c:	f800283a 	ret

0080ce30 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  80ce30:	defffd04 	addi	sp,sp,-12
  80ce34:	df000215 	stw	fp,8(sp)
  80ce38:	df000204 	addi	fp,sp,8
  80ce3c:	e13ffe15 	stw	r4,-8(fp)
  80ce40:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  80ce44:	e0bfff17 	ldw	r2,-4(fp)
  80ce48:	10800104 	addi	r2,r2,4
  80ce4c:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  80ce50:	e0bffe17 	ldw	r2,-8(fp)
  80ce54:	10c00617 	ldw	r3,24(r2)
  80ce58:	e0bfff17 	ldw	r2,-4(fp)
  80ce5c:	1880032e 	bgeu	r3,r2,80ce6c <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  80ce60:	e0bffe17 	ldw	r2,-8(fp)
  80ce64:	10800517 	ldw	r2,20(r2)
  80ce68:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  80ce6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce70:	e037883a 	mov	sp,fp
  80ce74:	df000017 	ldw	fp,0(sp)
  80ce78:	dec00104 	addi	sp,sp,4
  80ce7c:	f800283a 	ret

0080ce80 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  80ce80:	defffa04 	addi	sp,sp,-24
  80ce84:	dfc00515 	stw	ra,20(sp)
  80ce88:	df000415 	stw	fp,16(sp)
  80ce8c:	dc000315 	stw	r16,12(sp)
  80ce90:	df000304 	addi	fp,sp,12
  80ce94:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80ce98:	e0bfff17 	ldw	r2,-4(fp)
  80ce9c:	11000b04 	addi	r4,r2,44
  80cea0:	01400044 	movi	r5,1
  80cea4:	080d1540 	call	80d154 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80cea8:	e0bfff17 	ldw	r2,-4(fp)
  80ceac:	10800417 	ldw	r2,16(r2)
  80ceb0:	10800037 	ldwio	r2,0(r2)
  80ceb4:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  80ceb8:	e0bfff17 	ldw	r2,-4(fp)
  80cebc:	10800317 	ldw	r2,12(r2)
  80cec0:	10800037 	ldwio	r2,0(r2)
  80cec4:	1007883a 	mov	r3,r2
  80cec8:	e0bffd17 	ldw	r2,-12(fp)
  80cecc:	18bffa26 	beq	r3,r2,80ceb8 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  80ced0:	e0bffd17 	ldw	r2,-12(fp)
  80ced4:	10800037 	ldwio	r2,0(r2)
  80ced8:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  80cedc:	e0bfff17 	ldw	r2,-4(fp)
  80cee0:	10800417 	ldw	r2,16(r2)
  80cee4:	1021883a 	mov	r16,r2
  80cee8:	e13fff17 	ldw	r4,-4(fp)
  80ceec:	e17ffd17 	ldw	r5,-12(fp)
  80cef0:	080ce300 	call	80ce30 <alt_mailbox_increment_ptr>
  80cef4:	1007883a 	mov	r3,r2
  80cef8:	8005883a 	mov	r2,r16
  80cefc:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80cf00:	e0bfff17 	ldw	r2,-4(fp)
  80cf04:	11000b04 	addi	r4,r2,44
  80cf08:	080d1d40 	call	80d1d4 <altera_avalon_mutex_unlock>

  return msg;
  80cf0c:	e0bffe17 	ldw	r2,-8(fp)

}
  80cf10:	e037883a 	mov	sp,fp
  80cf14:	dfc00217 	ldw	ra,8(sp)
  80cf18:	df000117 	ldw	fp,4(sp)
  80cf1c:	dc000017 	ldw	r16,0(sp)
  80cf20:	dec00304 	addi	sp,sp,12
  80cf24:	f800283a 	ret

0080cf28 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  80cf28:	defff904 	addi	sp,sp,-28
  80cf2c:	dfc00615 	stw	ra,24(sp)
  80cf30:	df000515 	stw	fp,20(sp)
  80cf34:	dc000415 	stw	r16,16(sp)
  80cf38:	df000404 	addi	fp,sp,16
  80cf3c:	e13ffe15 	stw	r4,-8(fp)
  80cf40:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  80cf44:	e0bfff17 	ldw	r2,-4(fp)
  80cf48:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80cf4c:	e0bffe17 	ldw	r2,-8(fp)
  80cf50:	11000b04 	addi	r4,r2,44
  80cf54:	01400044 	movi	r5,1
  80cf58:	080d1540 	call	80d154 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80cf5c:	e0bffe17 	ldw	r2,-8(fp)
  80cf60:	10800417 	ldw	r2,16(r2)
  80cf64:	10800037 	ldwio	r2,0(r2)
  80cf68:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  80cf6c:	e0bffe17 	ldw	r2,-8(fp)
  80cf70:	10800317 	ldw	r2,12(r2)
  80cf74:	10800037 	ldwio	r2,0(r2)
  80cf78:	1007883a 	mov	r3,r2
  80cf7c:	e0bffc17 	ldw	r2,-16(fp)
  80cf80:	1880091e 	bne	r3,r2,80cfa8 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  80cf84:	e0ffff17 	ldw	r3,-4(fp)
  80cf88:	00bffd44 	movi	r2,-11
  80cf8c:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  80cf90:	080cc9c0 	call	80cc9c <alt_get_errno>
  80cf94:	1007883a 	mov	r3,r2
  80cf98:	008002c4 	movi	r2,11
  80cf9c:	18800015 	stw	r2,0(r3)
    msg = 0;
  80cfa0:	e03ffd15 	stw	zero,-12(fp)
  80cfa4:	00000c06 	br	80cfd8 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  80cfa8:	e0bffc17 	ldw	r2,-16(fp)
  80cfac:	10800037 	ldwio	r2,0(r2)
  80cfb0:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  80cfb4:	e0bffe17 	ldw	r2,-8(fp)
  80cfb8:	10800417 	ldw	r2,16(r2)
  80cfbc:	1021883a 	mov	r16,r2
  80cfc0:	e13ffe17 	ldw	r4,-8(fp)
  80cfc4:	e17ffc17 	ldw	r5,-16(fp)
  80cfc8:	080ce300 	call	80ce30 <alt_mailbox_increment_ptr>
  80cfcc:	1007883a 	mov	r3,r2
  80cfd0:	8005883a 	mov	r2,r16
  80cfd4:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80cfd8:	e0bffe17 	ldw	r2,-8(fp)
  80cfdc:	11000b04 	addi	r4,r2,44
  80cfe0:	080d1d40 	call	80d1d4 <altera_avalon_mutex_unlock>

  return msg;
  80cfe4:	e0bffd17 	ldw	r2,-12(fp)

}
  80cfe8:	e037883a 	mov	sp,fp
  80cfec:	dfc00217 	ldw	ra,8(sp)
  80cff0:	df000117 	ldw	fp,4(sp)
  80cff4:	dc000017 	ldw	r16,0(sp)
  80cff8:	dec00304 	addi	sp,sp,12
  80cffc:	f800283a 	ret

0080d000 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80d000:	defff904 	addi	sp,sp,-28
  80d004:	df000615 	stw	fp,24(sp)
  80d008:	df000604 	addi	fp,sp,24
  80d00c:	e13ffe15 	stw	r4,-8(fp)
  80d010:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  80d014:	00bfffc4 	movi	r2,-1
  80d018:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  80d01c:	0005317a 	rdctl	r2,cpuid
  80d020:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  80d024:	e0bffd17 	ldw	r2,-12(fp)
  80d028:	1006943a 	slli	r3,r2,16
  80d02c:	e0bfff17 	ldw	r2,-4(fp)
  80d030:	1884b03a 	or	r2,r3,r2
  80d034:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  80d038:	e0bffe17 	ldw	r2,-8(fp)
  80d03c:	10800317 	ldw	r2,12(r2)
  80d040:	e0fffc17 	ldw	r3,-16(fp)
  80d044:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80d048:	e0bffe17 	ldw	r2,-8(fp)
  80d04c:	10800317 	ldw	r2,12(r2)
  80d050:	10800037 	ldwio	r2,0(r2)
  80d054:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  80d058:	e0fffb17 	ldw	r3,-20(fp)
  80d05c:	e0bffc17 	ldw	r2,-16(fp)
  80d060:	1880011e 	bne	r3,r2,80d068 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  80d064:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  80d068:	e0bffa17 	ldw	r2,-24(fp)
}
  80d06c:	e037883a 	mov	sp,fp
  80d070:	df000017 	ldw	fp,0(sp)
  80d074:	dec00104 	addi	sp,sp,4
  80d078:	f800283a 	ret

0080d07c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  80d07c:	defffc04 	addi	sp,sp,-16
  80d080:	dfc00315 	stw	ra,12(sp)
  80d084:	df000215 	stw	fp,8(sp)
  80d088:	df000204 	addi	fp,sp,8
  80d08c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  80d090:	e13fff17 	ldw	r4,-4(fp)
  80d094:	d1601004 	addi	r5,gp,-32704
  80d098:	080eca00 	call	80eca0 <alt_find_dev>
  80d09c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80d0a0:	e0bffe17 	ldw	r2,-8(fp)
  80d0a4:	1004c03a 	cmpne	r2,r2,zero
  80d0a8:	1000041e 	bne	r2,zero,80d0bc <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80d0ac:	080d0d40 	call	80d0d4 <alt_get_errno>
  80d0b0:	1007883a 	mov	r3,r2
  80d0b4:	008004c4 	movi	r2,19
  80d0b8:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80d0bc:	e0bffe17 	ldw	r2,-8(fp)
}
  80d0c0:	e037883a 	mov	sp,fp
  80d0c4:	dfc00117 	ldw	ra,4(sp)
  80d0c8:	df000017 	ldw	fp,0(sp)
  80d0cc:	dec00204 	addi	sp,sp,8
  80d0d0:	f800283a 	ret

0080d0d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0d4:	defffd04 	addi	sp,sp,-12
  80d0d8:	dfc00215 	stw	ra,8(sp)
  80d0dc:	df000115 	stw	fp,4(sp)
  80d0e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d0e4:	00802074 	movhi	r2,129
  80d0e8:	10871a04 	addi	r2,r2,7272
  80d0ec:	10800017 	ldw	r2,0(r2)
  80d0f0:	1005003a 	cmpeq	r2,r2,zero
  80d0f4:	1000061e 	bne	r2,zero,80d110 <alt_get_errno+0x3c>
  80d0f8:	00802074 	movhi	r2,129
  80d0fc:	10871a04 	addi	r2,r2,7272
  80d100:	10800017 	ldw	r2,0(r2)
  80d104:	103ee83a 	callr	r2
  80d108:	e0bfff15 	stw	r2,-4(fp)
  80d10c:	00000306 	br	80d11c <alt_get_errno+0x48>
  80d110:	00802074 	movhi	r2,129
  80d114:	108e8304 	addi	r2,r2,14860
  80d118:	e0bfff15 	stw	r2,-4(fp)
  80d11c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d120:	e037883a 	mov	sp,fp
  80d124:	dfc00117 	ldw	ra,4(sp)
  80d128:	df000017 	ldw	fp,0(sp)
  80d12c:	dec00204 	addi	sp,sp,8
  80d130:	f800283a 	ret

0080d134 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  80d134:	defffe04 	addi	sp,sp,-8
  80d138:	df000115 	stw	fp,4(sp)
  80d13c:	df000104 	addi	fp,sp,4
  80d140:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80d144:	e037883a 	mov	sp,fp
  80d148:	df000017 	ldw	fp,0(sp)
  80d14c:	dec00104 	addi	sp,sp,4
  80d150:	f800283a 	ret

0080d154 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  80d154:	defffc04 	addi	sp,sp,-16
  80d158:	dfc00315 	stw	ra,12(sp)
  80d15c:	df000215 	stw	fp,8(sp)
  80d160:	df000204 	addi	fp,sp,8
  80d164:	e13ffe15 	stw	r4,-8(fp)
  80d168:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  80d16c:	e13ffe17 	ldw	r4,-8(fp)
  80d170:	e17fff17 	ldw	r5,-4(fp)
  80d174:	080d0000 	call	80d000 <alt_mutex_trylock>
  80d178:	1004c03a 	cmpne	r2,r2,zero
  80d17c:	103ffb1e 	bne	r2,zero,80d16c <altera_avalon_mutex_lock+0x18>
}
  80d180:	e037883a 	mov	sp,fp
  80d184:	dfc00117 	ldw	ra,4(sp)
  80d188:	df000017 	ldw	fp,0(sp)
  80d18c:	dec00204 	addi	sp,sp,8
  80d190:	f800283a 	ret

0080d194 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80d194:	defffb04 	addi	sp,sp,-20
  80d198:	dfc00415 	stw	ra,16(sp)
  80d19c:	df000315 	stw	fp,12(sp)
  80d1a0:	df000304 	addi	fp,sp,12
  80d1a4:	e13ffe15 	stw	r4,-8(fp)
  80d1a8:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  80d1ac:	e13ffe17 	ldw	r4,-8(fp)
  80d1b0:	e17fff17 	ldw	r5,-4(fp)
  80d1b4:	080d0000 	call	80d000 <alt_mutex_trylock>
  80d1b8:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  80d1bc:	e0bffd17 	ldw	r2,-12(fp)
}
  80d1c0:	e037883a 	mov	sp,fp
  80d1c4:	dfc00117 	ldw	ra,4(sp)
  80d1c8:	df000017 	ldw	fp,0(sp)
  80d1cc:	dec00204 	addi	sp,sp,8
  80d1d0:	f800283a 	ret

0080d1d4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  80d1d4:	defffd04 	addi	sp,sp,-12
  80d1d8:	df000215 	stw	fp,8(sp)
  80d1dc:	df000204 	addi	fp,sp,8
  80d1e0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  80d1e4:	0005317a 	rdctl	r2,cpuid
  80d1e8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  80d1ec:	e0bfff17 	ldw	r2,-4(fp)
  80d1f0:	10800317 	ldw	r2,12(r2)
  80d1f4:	10800104 	addi	r2,r2,4
  80d1f8:	1007883a 	mov	r3,r2
  80d1fc:	00800044 	movi	r2,1
  80d200:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  80d204:	e0bfff17 	ldw	r2,-4(fp)
  80d208:	11000317 	ldw	r4,12(r2)
  80d20c:	e0bffe17 	ldw	r2,-8(fp)
  80d210:	1004943a 	slli	r2,r2,16
  80d214:	1007883a 	mov	r3,r2
  80d218:	2005883a 	mov	r2,r4
  80d21c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  80d220:	e037883a 	mov	sp,fp
  80d224:	df000017 	ldw	fp,0(sp)
  80d228:	dec00104 	addi	sp,sp,4
  80d22c:	f800283a 	ret

0080d230 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  80d230:	defff904 	addi	sp,sp,-28
  80d234:	df000615 	stw	fp,24(sp)
  80d238:	df000604 	addi	fp,sp,24
  80d23c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  80d240:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  80d244:	0005317a 	rdctl	r2,cpuid
  80d248:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80d24c:	e0bfff17 	ldw	r2,-4(fp)
  80d250:	10800317 	ldw	r2,12(r2)
  80d254:	10800037 	ldwio	r2,0(r2)
  80d258:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  80d25c:	e0bffd17 	ldw	r2,-12(fp)
  80d260:	10bfffec 	andhi	r2,r2,65535
  80d264:	1004d43a 	srli	r2,r2,16
  80d268:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  80d26c:	e0fffc17 	ldw	r3,-16(fp)
  80d270:	e0bffe17 	ldw	r2,-8(fp)
  80d274:	1880081e 	bne	r3,r2,80d298 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  80d278:	e0bffd17 	ldw	r2,-12(fp)
  80d27c:	10bfffcc 	andi	r2,r2,65535
  80d280:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  80d284:	e0bffb17 	ldw	r2,-20(fp)
  80d288:	1005003a 	cmpeq	r2,r2,zero
  80d28c:	1000021e 	bne	r2,zero,80d298 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  80d290:	00800044 	movi	r2,1
  80d294:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  80d298:	e0bffa17 	ldw	r2,-24(fp)
}
  80d29c:	e037883a 	mov	sp,fp
  80d2a0:	df000017 	ldw	fp,0(sp)
  80d2a4:	dec00104 	addi	sp,sp,4
  80d2a8:	f800283a 	ret

0080d2ac <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  80d2ac:	defffc04 	addi	sp,sp,-16
  80d2b0:	df000315 	stw	fp,12(sp)
  80d2b4:	df000304 	addi	fp,sp,12
  80d2b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  80d2bc:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  80d2c0:	e0bfff17 	ldw	r2,-4(fp)
  80d2c4:	10800317 	ldw	r2,12(r2)
  80d2c8:	10800104 	addi	r2,r2,4
  80d2cc:	10800037 	ldwio	r2,0(r2)
  80d2d0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  80d2d4:	e0bffe17 	ldw	r2,-8(fp)
  80d2d8:	1080004c 	andi	r2,r2,1
  80d2dc:	10803fcc 	andi	r2,r2,255
  80d2e0:	1005003a 	cmpeq	r2,r2,zero
  80d2e4:	1000021e 	bne	r2,zero,80d2f0 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  80d2e8:	00800044 	movi	r2,1
  80d2ec:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  80d2f0:	e0bffd17 	ldw	r2,-12(fp)
}
  80d2f4:	e037883a 	mov	sp,fp
  80d2f8:	df000017 	ldw	fp,0(sp)
  80d2fc:	dec00104 	addi	sp,sp,4
  80d300:	f800283a 	ret

0080d304 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d304:	defffa04 	addi	sp,sp,-24
  80d308:	dfc00515 	stw	ra,20(sp)
  80d30c:	df000415 	stw	fp,16(sp)
  80d310:	df000404 	addi	fp,sp,16
  80d314:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80d318:	e0bfff17 	ldw	r2,-4(fp)
  80d31c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80d320:	e0bfff17 	ldw	r2,-4(fp)
  80d324:	10800104 	addi	r2,r2,4
  80d328:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d32c:	0005303a 	rdctl	r2,status
  80d330:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d334:	e0fffd17 	ldw	r3,-12(fp)
  80d338:	00bfff84 	movi	r2,-2
  80d33c:	1884703a 	and	r2,r3,r2
  80d340:	1001703a 	wrctl	status,r2
  
  return context;
  80d344:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80d348:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80d34c:	080f4c80 	call	80f4c8 <alt_tick>
  80d350:	e0bffe17 	ldw	r2,-8(fp)
  80d354:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d358:	e0bffc17 	ldw	r2,-16(fp)
  80d35c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80d360:	e037883a 	mov	sp,fp
  80d364:	dfc00117 	ldw	ra,4(sp)
  80d368:	df000017 	ldw	fp,0(sp)
  80d36c:	dec00204 	addi	sp,sp,8
  80d370:	f800283a 	ret

0080d374 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80d374:	defff804 	addi	sp,sp,-32
  80d378:	dfc00715 	stw	ra,28(sp)
  80d37c:	df000615 	stw	fp,24(sp)
  80d380:	df000604 	addi	fp,sp,24
  80d384:	e13ffc15 	stw	r4,-16(fp)
  80d388:	e17ffd15 	stw	r5,-12(fp)
  80d38c:	e1bffe15 	stw	r6,-8(fp)
  80d390:	e1ffff15 	stw	r7,-4(fp)
  80d394:	e0bfff17 	ldw	r2,-4(fp)
  80d398:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80d39c:	00802074 	movhi	r2,129
  80d3a0:	108e8e04 	addi	r2,r2,14904
  80d3a4:	10800017 	ldw	r2,0(r2)
  80d3a8:	1004c03a 	cmpne	r2,r2,zero
  80d3ac:	1000041e 	bne	r2,zero,80d3c0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80d3b0:	00c02074 	movhi	r3,129
  80d3b4:	18ce8e04 	addi	r3,r3,14904
  80d3b8:	e0bffb17 	ldw	r2,-20(fp)
  80d3bc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80d3c0:	e0bffc17 	ldw	r2,-16(fp)
  80d3c4:	10800104 	addi	r2,r2,4
  80d3c8:	1007883a 	mov	r3,r2
  80d3cc:	008001c4 	movi	r2,7
  80d3d0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80d3d4:	d8000015 	stw	zero,0(sp)
  80d3d8:	e13ffd17 	ldw	r4,-12(fp)
  80d3dc:	e17ffe17 	ldw	r5,-8(fp)
  80d3e0:	01802074 	movhi	r6,129
  80d3e4:	31b4c104 	addi	r6,r6,-11516
  80d3e8:	e1fffc17 	ldw	r7,-16(fp)
  80d3ec:	080ed640 	call	80ed64 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80d3f0:	e037883a 	mov	sp,fp
  80d3f4:	dfc00117 	ldw	ra,4(sp)
  80d3f8:	df000017 	ldw	fp,0(sp)
  80d3fc:	dec00204 	addi	sp,sp,8
  80d400:	f800283a 	ret

0080d404 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  80d404:	defffc04 	addi	sp,sp,-16
  80d408:	dfc00315 	stw	ra,12(sp)
  80d40c:	df000215 	stw	fp,8(sp)
  80d410:	df000204 	addi	fp,sp,8
  80d414:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80d418:	e13fff17 	ldw	r4,-4(fp)
  80d41c:	01402074 	movhi	r5,129
  80d420:	29471704 	addi	r5,r5,7260
  80d424:	080eca00 	call	80eca0 <alt_find_dev>
  80d428:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80d42c:	e0bffe17 	ldw	r2,-8(fp)
}
  80d430:	e037883a 	mov	sp,fp
  80d434:	dfc00117 	ldw	ra,4(sp)
  80d438:	df000017 	ldw	fp,0(sp)
  80d43c:	dec00204 	addi	sp,sp,8
  80d440:	f800283a 	ret

0080d444 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80d444:	defff904 	addi	sp,sp,-28
  80d448:	df000615 	stw	fp,24(sp)
  80d44c:	df000604 	addi	fp,sp,24
  80d450:	e13ffb15 	stw	r4,-20(fp)
  80d454:	e17ffc15 	stw	r5,-16(fp)
  80d458:	e1bffd15 	stw	r6,-12(fp)
  80d45c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d460:	e0bffb17 	ldw	r2,-20(fp)
  80d464:	10c00f17 	ldw	r3,60(r2)
  80d468:	e0bffd17 	ldw	r2,-12(fp)
  80d46c:	10c0042e 	bgeu	r2,r3,80d480 <alt_up_pixel_buffer_dma_draw+0x3c>
  80d470:	e0bffb17 	ldw	r2,-20(fp)
  80d474:	10c01017 	ldw	r3,64(r2)
  80d478:	e0bffe17 	ldw	r2,-8(fp)
  80d47c:	10c00336 	bltu	r2,r3,80d48c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  80d480:	00bfffc4 	movi	r2,-1
  80d484:	e0bfff15 	stw	r2,-4(fp)
  80d488:	00005106 	br	80d5d0 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  80d48c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d490:	e0bffb17 	ldw	r2,-20(fp)
  80d494:	10800d17 	ldw	r2,52(r2)
  80d498:	1004c03a 	cmpne	r2,r2,zero
  80d49c:	1000151e 	bne	r2,zero,80d4f4 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d4a0:	e0bffb17 	ldw	r2,-20(fp)
  80d4a4:	10c01217 	ldw	r3,72(r2)
  80d4a8:	e0bffd17 	ldw	r2,-12(fp)
  80d4ac:	1886703a 	and	r3,r3,r2
  80d4b0:	e0bffb17 	ldw	r2,-20(fp)
  80d4b4:	10801117 	ldw	r2,68(r2)
  80d4b8:	1886983a 	sll	r3,r3,r2
  80d4bc:	e0bffa17 	ldw	r2,-24(fp)
  80d4c0:	10c4b03a 	or	r2,r2,r3
  80d4c4:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80d4c8:	e0bffb17 	ldw	r2,-20(fp)
  80d4cc:	10c01417 	ldw	r3,80(r2)
  80d4d0:	e0bffe17 	ldw	r2,-8(fp)
  80d4d4:	1886703a 	and	r3,r3,r2
  80d4d8:	e0bffb17 	ldw	r2,-20(fp)
  80d4dc:	10801317 	ldw	r2,76(r2)
  80d4e0:	1886983a 	sll	r3,r3,r2
  80d4e4:	e0bffa17 	ldw	r2,-24(fp)
  80d4e8:	10c4b03a 	or	r2,r2,r3
  80d4ec:	e0bffa15 	stw	r2,-24(fp)
  80d4f0:	00001706 	br	80d550 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d4f4:	e0bffb17 	ldw	r2,-20(fp)
  80d4f8:	10c01217 	ldw	r3,72(r2)
  80d4fc:	e0bffd17 	ldw	r2,-12(fp)
  80d500:	1886703a 	and	r3,r3,r2
  80d504:	e0bffb17 	ldw	r2,-20(fp)
  80d508:	10801117 	ldw	r2,68(r2)
  80d50c:	1886983a 	sll	r3,r3,r2
  80d510:	e0bffa17 	ldw	r2,-24(fp)
  80d514:	10c5883a 	add	r2,r2,r3
  80d518:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d51c:	e0bffb17 	ldw	r2,-20(fp)
  80d520:	10c01417 	ldw	r3,80(r2)
  80d524:	e0bffe17 	ldw	r2,-8(fp)
  80d528:	1886703a 	and	r3,r3,r2
  80d52c:	e0bffb17 	ldw	r2,-20(fp)
  80d530:	10800f17 	ldw	r2,60(r2)
  80d534:	1887383a 	mul	r3,r3,r2
  80d538:	e0bffb17 	ldw	r2,-20(fp)
  80d53c:	10801117 	ldw	r2,68(r2)
  80d540:	1886983a 	sll	r3,r3,r2
  80d544:	e0bffa17 	ldw	r2,-24(fp)
  80d548:	10c5883a 	add	r2,r2,r3
  80d54c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d550:	e0bffb17 	ldw	r2,-20(fp)
  80d554:	10800e17 	ldw	r2,56(r2)
  80d558:	10800058 	cmpnei	r2,r2,1
  80d55c:	1000081e 	bne	r2,zero,80d580 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d560:	e0bffb17 	ldw	r2,-20(fp)
  80d564:	10800c17 	ldw	r2,48(r2)
  80d568:	1007883a 	mov	r3,r2
  80d56c:	e0bffa17 	ldw	r2,-24(fp)
  80d570:	1885883a 	add	r2,r3,r2
  80d574:	e0fffc17 	ldw	r3,-16(fp)
  80d578:	10c00025 	stbio	r3,0(r2)
  80d57c:	00001306 	br	80d5cc <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d580:	e0bffb17 	ldw	r2,-20(fp)
  80d584:	10800e17 	ldw	r2,56(r2)
  80d588:	10800098 	cmpnei	r2,r2,2
  80d58c:	1000081e 	bne	r2,zero,80d5b0 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d590:	e0bffb17 	ldw	r2,-20(fp)
  80d594:	10800c17 	ldw	r2,48(r2)
  80d598:	1007883a 	mov	r3,r2
  80d59c:	e0bffa17 	ldw	r2,-24(fp)
  80d5a0:	1885883a 	add	r2,r3,r2
  80d5a4:	e0fffc17 	ldw	r3,-16(fp)
  80d5a8:	10c0002d 	sthio	r3,0(r2)
  80d5ac:	00000706 	br	80d5cc <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d5b0:	e0bffb17 	ldw	r2,-20(fp)
  80d5b4:	10800c17 	ldw	r2,48(r2)
  80d5b8:	1007883a 	mov	r3,r2
  80d5bc:	e0bffa17 	ldw	r2,-24(fp)
  80d5c0:	1885883a 	add	r2,r3,r2
  80d5c4:	e0fffc17 	ldw	r3,-16(fp)
  80d5c8:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  80d5cc:	e03fff15 	stw	zero,-4(fp)
  80d5d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d5d4:	e037883a 	mov	sp,fp
  80d5d8:	df000017 	ldw	fp,0(sp)
  80d5dc:	dec00104 	addi	sp,sp,4
  80d5e0:	f800283a 	ret

0080d5e4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  80d5e4:	defffd04 	addi	sp,sp,-12
  80d5e8:	df000215 	stw	fp,8(sp)
  80d5ec:	df000204 	addi	fp,sp,8
  80d5f0:	e13ffe15 	stw	r4,-8(fp)
  80d5f4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80d5f8:	e0bffe17 	ldw	r2,-8(fp)
  80d5fc:	10800a17 	ldw	r2,40(r2)
  80d600:	10800104 	addi	r2,r2,4
  80d604:	e0ffff17 	ldw	r3,-4(fp)
  80d608:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80d60c:	e0bffe17 	ldw	r2,-8(fp)
  80d610:	10800a17 	ldw	r2,40(r2)
  80d614:	10800104 	addi	r2,r2,4
  80d618:	10800037 	ldwio	r2,0(r2)
  80d61c:	1007883a 	mov	r3,r2
  80d620:	e0bffe17 	ldw	r2,-8(fp)
  80d624:	10c00c15 	stw	r3,48(r2)
	return 0;
  80d628:	0005883a 	mov	r2,zero
}
  80d62c:	e037883a 	mov	sp,fp
  80d630:	df000017 	ldw	fp,0(sp)
  80d634:	dec00104 	addi	sp,sp,4
  80d638:	f800283a 	ret

0080d63c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  80d63c:	defffe04 	addi	sp,sp,-8
  80d640:	df000115 	stw	fp,4(sp)
  80d644:	df000104 	addi	fp,sp,4
  80d648:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80d64c:	e0bfff17 	ldw	r2,-4(fp)
  80d650:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80d654:	e0bfff17 	ldw	r2,-4(fp)
  80d658:	10800a17 	ldw	r2,40(r2)
  80d65c:	1007883a 	mov	r3,r2
  80d660:	00800044 	movi	r2,1
  80d664:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d668:	e0bfff17 	ldw	r2,-4(fp)
  80d66c:	10c00b17 	ldw	r3,44(r2)
  80d670:	e0bfff17 	ldw	r2,-4(fp)
  80d674:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  80d678:	e0bfff17 	ldw	r2,-4(fp)
  80d67c:	11000b15 	stw	r4,44(r2)
	return 0;
  80d680:	0005883a 	mov	r2,zero
}
  80d684:	e037883a 	mov	sp,fp
  80d688:	df000017 	ldw	fp,0(sp)
  80d68c:	dec00104 	addi	sp,sp,4
  80d690:	f800283a 	ret

0080d694 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  80d694:	defffe04 	addi	sp,sp,-8
  80d698:	df000115 	stw	fp,4(sp)
  80d69c:	df000104 	addi	fp,sp,4
  80d6a0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80d6a4:	e0bfff17 	ldw	r2,-4(fp)
  80d6a8:	10800a17 	ldw	r2,40(r2)
  80d6ac:	10800304 	addi	r2,r2,12
  80d6b0:	10800037 	ldwio	r2,0(r2)
  80d6b4:	1080004c 	andi	r2,r2,1
}
  80d6b8:	e037883a 	mov	sp,fp
  80d6bc:	df000017 	ldw	fp,0(sp)
  80d6c0:	dec00104 	addi	sp,sp,4
  80d6c4:	f800283a 	ret

0080d6c8 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80d6c8:	defff604 	addi	sp,sp,-40
  80d6cc:	df000915 	stw	fp,36(sp)
  80d6d0:	df000904 	addi	fp,sp,36
  80d6d4:	e13ff715 	stw	r4,-36(fp)
  80d6d8:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d6dc:	e0bff817 	ldw	r2,-32(fp)
  80d6e0:	10800058 	cmpnei	r2,r2,1
  80d6e4:	1000041e 	bne	r2,zero,80d6f8 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  80d6e8:	e0bff717 	ldw	r2,-36(fp)
  80d6ec:	10800c17 	ldw	r2,48(r2)
  80d6f0:	e0bfff15 	stw	r2,-4(fp)
  80d6f4:	00000306 	br	80d704 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  80d6f8:	e0bff717 	ldw	r2,-36(fp)
  80d6fc:	10800b17 	ldw	r2,44(r2)
  80d700:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  80d704:	e0bff717 	ldw	r2,-36(fp)
  80d708:	10800f17 	ldw	r2,60(r2)
  80d70c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d710:	e0bff717 	ldw	r2,-36(fp)
  80d714:	10800e17 	ldw	r2,56(r2)
  80d718:	10800098 	cmpnei	r2,r2,2
  80d71c:	1000051e 	bne	r2,zero,80d734 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  80d720:	e0fffe17 	ldw	r3,-8(fp)
  80d724:	e0fffe17 	ldw	r3,-8(fp)
  80d728:	18c5883a 	add	r2,r3,r3
  80d72c:	e0bffe15 	stw	r2,-8(fp)
  80d730:	00000506 	br	80d748 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  80d734:	e13ffe17 	ldw	r4,-8(fp)
  80d738:	e13ffe17 	ldw	r4,-8(fp)
  80d73c:	2105883a 	add	r2,r4,r4
  80d740:	1085883a 	add	r2,r2,r2
  80d744:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  80d748:	e0bff717 	ldw	r2,-36(fp)
  80d74c:	10801017 	ldw	r2,64(r2)
  80d750:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d754:	e0bff717 	ldw	r2,-36(fp)
  80d758:	10800d17 	ldw	r2,52(r2)
  80d75c:	1004c03a 	cmpne	r2,r2,zero
  80d760:	10001e1e 	bne	r2,zero,80d7dc <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80d764:	e0bff717 	ldw	r2,-36(fp)
  80d768:	10801317 	ldw	r2,76(r2)
  80d76c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  80d770:	e03ffb15 	stw	zero,-20(fp)
  80d774:	00001506 	br	80d7cc <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d778:	e03ffc15 	stw	zero,-16(fp)
  80d77c:	00000706 	br	80d79c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  80d780:	e0ffff17 	ldw	r3,-4(fp)
  80d784:	e0bffc17 	ldw	r2,-16(fp)
  80d788:	1885883a 	add	r2,r3,r2
  80d78c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d790:	e0bffc17 	ldw	r2,-16(fp)
  80d794:	10800104 	addi	r2,r2,4
  80d798:	e0bffc15 	stw	r2,-16(fp)
  80d79c:	e0fffc17 	ldw	r3,-16(fp)
  80d7a0:	e13ffe17 	ldw	r4,-8(fp)
  80d7a4:	193ff636 	bltu	r3,r4,80d780 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80d7a8:	e0fffa17 	ldw	r3,-24(fp)
  80d7ac:	00800044 	movi	r2,1
  80d7b0:	10c4983a 	sll	r2,r2,r3
  80d7b4:	e0ffff17 	ldw	r3,-4(fp)
  80d7b8:	1887883a 	add	r3,r3,r2
  80d7bc:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80d7c0:	e13ffb17 	ldw	r4,-20(fp)
  80d7c4:	21000044 	addi	r4,r4,1
  80d7c8:	e13ffb15 	stw	r4,-20(fp)
  80d7cc:	e0bffb17 	ldw	r2,-20(fp)
  80d7d0:	e0fffd17 	ldw	r3,-12(fp)
  80d7d4:	10ffe836 	bltu	r2,r3,80d778 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  80d7d8:	00001006 	br	80d81c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80d7dc:	e13ffd17 	ldw	r4,-12(fp)
  80d7e0:	e0bffe17 	ldw	r2,-8(fp)
  80d7e4:	2089383a 	mul	r4,r4,r2
  80d7e8:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  80d7ec:	e03ff915 	stw	zero,-28(fp)
  80d7f0:	00000706 	br	80d810 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  80d7f4:	e0ffff17 	ldw	r3,-4(fp)
  80d7f8:	e0bff917 	ldw	r2,-28(fp)
  80d7fc:	1885883a 	add	r2,r3,r2
  80d800:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80d804:	e0fff917 	ldw	r3,-28(fp)
  80d808:	18c00104 	addi	r3,r3,4
  80d80c:	e0fff915 	stw	r3,-28(fp)
  80d810:	e0bff917 	ldw	r2,-28(fp)
  80d814:	e13ffd17 	ldw	r4,-12(fp)
  80d818:	113ff636 	bltu	r2,r4,80d7f4 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80d81c:	e037883a 	mov	sp,fp
  80d820:	df000017 	ldw	fp,0(sp)
  80d824:	dec00104 	addi	sp,sp,4
  80d828:	f800283a 	ret

0080d82c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d82c:	deffed04 	addi	sp,sp,-76
  80d830:	df001215 	stw	fp,72(sp)
  80d834:	df001204 	addi	fp,sp,72
  80d838:	e13fee15 	stw	r4,-72(fp)
  80d83c:	e17fef15 	stw	r5,-68(fp)
  80d840:	e1bff015 	stw	r6,-64(fp)
  80d844:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d848:	e0bfee17 	ldw	r2,-72(fp)
  80d84c:	10800f17 	ldw	r2,60(r2)
  80d850:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d854:	e0bfee17 	ldw	r2,-72(fp)
  80d858:	10801017 	ldw	r2,64(r2)
  80d85c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d860:	e0bfef17 	ldw	r2,-68(fp)
  80d864:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  80d868:	e0fff117 	ldw	r3,-60(fp)
  80d86c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  80d870:	e13ff017 	ldw	r4,-64(fp)
  80d874:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  80d878:	e0800117 	ldw	r2,4(fp)
  80d87c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  80d880:	e0c00217 	ldw	r3,8(fp)
  80d884:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80d888:	e13ffa17 	ldw	r4,-24(fp)
  80d88c:	e0bffb17 	ldw	r2,-20(fp)
  80d890:	2080062e 	bgeu	r4,r2,80d8ac <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  80d894:	e0fffb17 	ldw	r3,-20(fp)
  80d898:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  80d89c:	e13ffa17 	ldw	r4,-24(fp)
  80d8a0:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  80d8a4:	e0bffc17 	ldw	r2,-16(fp)
  80d8a8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  80d8ac:	e0fff817 	ldw	r3,-32(fp)
  80d8b0:	e13ff917 	ldw	r4,-28(fp)
  80d8b4:	1900062e 	bgeu	r3,r4,80d8d0 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  80d8b8:	e0bff917 	ldw	r2,-28(fp)
  80d8bc:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  80d8c0:	e0fff817 	ldw	r3,-32(fp)
  80d8c4:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  80d8c8:	e13ffc17 	ldw	r4,-16(fp)
  80d8cc:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80d8d0:	e0bffb17 	ldw	r2,-20(fp)
  80d8d4:	e0fffe17 	ldw	r3,-8(fp)
  80d8d8:	10c10d2e 	bgeu	r2,r3,80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  80d8dc:	e13ff917 	ldw	r4,-28(fp)
  80d8e0:	e0bffd17 	ldw	r2,-12(fp)
  80d8e4:	20800136 	bltu	r4,r2,80d8ec <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80d8e8:	00010906 	br	80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d8ec:	e0fffa17 	ldw	r3,-24(fp)
  80d8f0:	e13ffe17 	ldw	r4,-8(fp)
  80d8f4:	19000336 	bltu	r3,r4,80d904 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  80d8f8:	e0bffe17 	ldw	r2,-8(fp)
  80d8fc:	10bfffc4 	addi	r2,r2,-1
  80d900:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d904:	e0fff817 	ldw	r3,-32(fp)
  80d908:	e13ffd17 	ldw	r4,-12(fp)
  80d90c:	19000336 	bltu	r3,r4,80d91c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  80d910:	e0bffd17 	ldw	r2,-12(fp)
  80d914:	10bfffc4 	addi	r2,r2,-1
  80d918:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d91c:	e0800317 	ldw	r2,12(fp)
  80d920:	10800058 	cmpnei	r2,r2,1
  80d924:	1000041e 	bne	r2,zero,80d938 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  80d928:	e0bfee17 	ldw	r2,-72(fp)
  80d92c:	10800c17 	ldw	r2,48(r2)
  80d930:	e0bfff15 	stw	r2,-4(fp)
  80d934:	00000306 	br	80d944 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  80d938:	e0bfee17 	ldw	r2,-72(fp)
  80d93c:	10800b17 	ldw	r2,44(r2)
  80d940:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d944:	e0bfee17 	ldw	r2,-72(fp)
  80d948:	10800d17 	ldw	r2,52(r2)
  80d94c:	1004c03a 	cmpne	r2,r2,zero
  80d950:	1000721e 	bne	r2,zero,80db1c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80d954:	e0bfee17 	ldw	r2,-72(fp)
  80d958:	10801317 	ldw	r2,76(r2)
  80d95c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  80d960:	e0bff417 	ldw	r2,-48(fp)
  80d964:	e0fff917 	ldw	r3,-28(fp)
  80d968:	1884983a 	sll	r2,r3,r2
  80d96c:	e13fff17 	ldw	r4,-4(fp)
  80d970:	2089883a 	add	r4,r4,r2
  80d974:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d978:	e0bfee17 	ldw	r2,-72(fp)
  80d97c:	10800e17 	ldw	r2,56(r2)
  80d980:	10800058 	cmpnei	r2,r2,1
  80d984:	10001e1e 	bne	r2,zero,80da00 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80d988:	e0bff917 	ldw	r2,-28(fp)
  80d98c:	e0bff515 	stw	r2,-44(fp)
  80d990:	00001706 	br	80d9f0 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  80d994:	e0fffb17 	ldw	r3,-20(fp)
  80d998:	e0fff615 	stw	r3,-40(fp)
  80d99c:	00000806 	br	80d9c0 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d9a0:	e0ffff17 	ldw	r3,-4(fp)
  80d9a4:	e0bff617 	ldw	r2,-40(fp)
  80d9a8:	1885883a 	add	r2,r3,r2
  80d9ac:	e0fff717 	ldw	r3,-36(fp)
  80d9b0:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d9b4:	e13ff617 	ldw	r4,-40(fp)
  80d9b8:	21000044 	addi	r4,r4,1
  80d9bc:	e13ff615 	stw	r4,-40(fp)
  80d9c0:	e0bffa17 	ldw	r2,-24(fp)
  80d9c4:	e0fff617 	ldw	r3,-40(fp)
  80d9c8:	10fff52e 	bgeu	r2,r3,80d9a0 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80d9cc:	e0fff417 	ldw	r3,-48(fp)
  80d9d0:	00800044 	movi	r2,1
  80d9d4:	10c4983a 	sll	r2,r2,r3
  80d9d8:	e13fff17 	ldw	r4,-4(fp)
  80d9dc:	2089883a 	add	r4,r4,r2
  80d9e0:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d9e4:	e0bff517 	ldw	r2,-44(fp)
  80d9e8:	10800044 	addi	r2,r2,1
  80d9ec:	e0bff515 	stw	r2,-44(fp)
  80d9f0:	e0fff817 	ldw	r3,-32(fp)
  80d9f4:	e13ff517 	ldw	r4,-44(fp)
  80d9f8:	193fe62e 	bgeu	r3,r4,80d994 <alt_up_pixel_buffer_dma_draw_box+0x168>
  80d9fc:	0000c406 	br	80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80da00:	e0bfee17 	ldw	r2,-72(fp)
  80da04:	10800e17 	ldw	r2,56(r2)
  80da08:	10800098 	cmpnei	r2,r2,2
  80da0c:	1000211e 	bne	r2,zero,80da94 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  80da10:	e0bff917 	ldw	r2,-28(fp)
  80da14:	e0bff515 	stw	r2,-44(fp)
  80da18:	00001a06 	br	80da84 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  80da1c:	e0fffb17 	ldw	r3,-20(fp)
  80da20:	e0fff615 	stw	r3,-40(fp)
  80da24:	00000b06 	br	80da54 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80da28:	e13ff617 	ldw	r4,-40(fp)
  80da2c:	e13ff617 	ldw	r4,-40(fp)
  80da30:	2105883a 	add	r2,r4,r4
  80da34:	1007883a 	mov	r3,r2
  80da38:	e0bfff17 	ldw	r2,-4(fp)
  80da3c:	1885883a 	add	r2,r3,r2
  80da40:	e0fff717 	ldw	r3,-36(fp)
  80da44:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80da48:	e0bff617 	ldw	r2,-40(fp)
  80da4c:	10800044 	addi	r2,r2,1
  80da50:	e0bff615 	stw	r2,-40(fp)
  80da54:	e0fffa17 	ldw	r3,-24(fp)
  80da58:	e13ff617 	ldw	r4,-40(fp)
  80da5c:	193ff22e 	bgeu	r3,r4,80da28 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80da60:	e0fff417 	ldw	r3,-48(fp)
  80da64:	00800044 	movi	r2,1
  80da68:	10c4983a 	sll	r2,r2,r3
  80da6c:	e0ffff17 	ldw	r3,-4(fp)
  80da70:	1887883a 	add	r3,r3,r2
  80da74:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80da78:	e13ff517 	ldw	r4,-44(fp)
  80da7c:	21000044 	addi	r4,r4,1
  80da80:	e13ff515 	stw	r4,-44(fp)
  80da84:	e0bff817 	ldw	r2,-32(fp)
  80da88:	e0fff517 	ldw	r3,-44(fp)
  80da8c:	10ffe32e 	bgeu	r2,r3,80da1c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  80da90:	00009f06 	br	80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80da94:	e13ff917 	ldw	r4,-28(fp)
  80da98:	e13ff515 	stw	r4,-44(fp)
  80da9c:	00001b06 	br	80db0c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  80daa0:	e0bffb17 	ldw	r2,-20(fp)
  80daa4:	e0bff615 	stw	r2,-40(fp)
  80daa8:	00000c06 	br	80dadc <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80daac:	e0fff617 	ldw	r3,-40(fp)
  80dab0:	e0fff617 	ldw	r3,-40(fp)
  80dab4:	18c5883a 	add	r2,r3,r3
  80dab8:	1085883a 	add	r2,r2,r2
  80dabc:	1007883a 	mov	r3,r2
  80dac0:	e0bfff17 	ldw	r2,-4(fp)
  80dac4:	1885883a 	add	r2,r3,r2
  80dac8:	e0fff717 	ldw	r3,-36(fp)
  80dacc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dad0:	e13ff617 	ldw	r4,-40(fp)
  80dad4:	21000044 	addi	r4,r4,1
  80dad8:	e13ff615 	stw	r4,-40(fp)
  80dadc:	e0bffa17 	ldw	r2,-24(fp)
  80dae0:	e0fff617 	ldw	r3,-40(fp)
  80dae4:	10fff12e 	bgeu	r2,r3,80daac <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80dae8:	e0fff417 	ldw	r3,-48(fp)
  80daec:	00800044 	movi	r2,1
  80daf0:	10c4983a 	sll	r2,r2,r3
  80daf4:	e13fff17 	ldw	r4,-4(fp)
  80daf8:	2089883a 	add	r4,r4,r2
  80dafc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80db00:	e0bff517 	ldw	r2,-44(fp)
  80db04:	10800044 	addi	r2,r2,1
  80db08:	e0bff515 	stw	r2,-44(fp)
  80db0c:	e0fff817 	ldw	r3,-32(fp)
  80db10:	e13ff517 	ldw	r4,-44(fp)
  80db14:	193fe22e 	bgeu	r3,r4,80daa0 <alt_up_pixel_buffer_dma_draw_box+0x274>
  80db18:	00007d06 	br	80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80db1c:	e0bfee17 	ldw	r2,-72(fp)
  80db20:	10800e17 	ldw	r2,56(r2)
  80db24:	10800058 	cmpnei	r2,r2,1
  80db28:	1000221e 	bne	r2,zero,80dbb4 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  80db2c:	e0fff917 	ldw	r3,-28(fp)
  80db30:	e13ffe17 	ldw	r4,-8(fp)
  80db34:	1905383a 	mul	r2,r3,r4
  80db38:	e0ffff17 	ldw	r3,-4(fp)
  80db3c:	1887883a 	add	r3,r3,r2
  80db40:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80db44:	e13ff917 	ldw	r4,-28(fp)
  80db48:	e13ff215 	stw	r4,-56(fp)
  80db4c:	00001506 	br	80dba4 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  80db50:	e0bffb17 	ldw	r2,-20(fp)
  80db54:	e0bff315 	stw	r2,-52(fp)
  80db58:	00000806 	br	80db7c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80db5c:	e0ffff17 	ldw	r3,-4(fp)
  80db60:	e0bff317 	ldw	r2,-52(fp)
  80db64:	1885883a 	add	r2,r3,r2
  80db68:	e0fff717 	ldw	r3,-36(fp)
  80db6c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80db70:	e0fff317 	ldw	r3,-52(fp)
  80db74:	18c00044 	addi	r3,r3,1
  80db78:	e0fff315 	stw	r3,-52(fp)
  80db7c:	e13ffa17 	ldw	r4,-24(fp)
  80db80:	e0bff317 	ldw	r2,-52(fp)
  80db84:	20bff52e 	bgeu	r4,r2,80db5c <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  80db88:	e0ffff17 	ldw	r3,-4(fp)
  80db8c:	e13ffe17 	ldw	r4,-8(fp)
  80db90:	1907883a 	add	r3,r3,r4
  80db94:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80db98:	e0bff217 	ldw	r2,-56(fp)
  80db9c:	10800044 	addi	r2,r2,1
  80dba0:	e0bff215 	stw	r2,-56(fp)
  80dba4:	e0fff817 	ldw	r3,-32(fp)
  80dba8:	e13ff217 	ldw	r4,-56(fp)
  80dbac:	193fe82e 	bgeu	r3,r4,80db50 <alt_up_pixel_buffer_dma_draw_box+0x324>
  80dbb0:	00005706 	br	80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80dbb4:	e0bfee17 	ldw	r2,-72(fp)
  80dbb8:	10800e17 	ldw	r2,56(r2)
  80dbbc:	10800098 	cmpnei	r2,r2,2
  80dbc0:	1000291e 	bne	r2,zero,80dc68 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  80dbc4:	e0fffe17 	ldw	r3,-8(fp)
  80dbc8:	e0fffe17 	ldw	r3,-8(fp)
  80dbcc:	18c5883a 	add	r2,r3,r3
  80dbd0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80dbd4:	e13ff917 	ldw	r4,-28(fp)
  80dbd8:	e0fffe17 	ldw	r3,-8(fp)
  80dbdc:	20c5383a 	mul	r2,r4,r3
  80dbe0:	e13fff17 	ldw	r4,-4(fp)
  80dbe4:	2089883a 	add	r4,r4,r2
  80dbe8:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80dbec:	e0bff917 	ldw	r2,-28(fp)
  80dbf0:	e0bff215 	stw	r2,-56(fp)
  80dbf4:	00001806 	br	80dc58 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  80dbf8:	e0fffb17 	ldw	r3,-20(fp)
  80dbfc:	e0fff315 	stw	r3,-52(fp)
  80dc00:	00000b06 	br	80dc30 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80dc04:	e13ff317 	ldw	r4,-52(fp)
  80dc08:	e13ff317 	ldw	r4,-52(fp)
  80dc0c:	2105883a 	add	r2,r4,r4
  80dc10:	1007883a 	mov	r3,r2
  80dc14:	e0bfff17 	ldw	r2,-4(fp)
  80dc18:	1885883a 	add	r2,r3,r2
  80dc1c:	e0fff717 	ldw	r3,-36(fp)
  80dc20:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dc24:	e0bff317 	ldw	r2,-52(fp)
  80dc28:	10800044 	addi	r2,r2,1
  80dc2c:	e0bff315 	stw	r2,-52(fp)
  80dc30:	e0fffa17 	ldw	r3,-24(fp)
  80dc34:	e13ff317 	ldw	r4,-52(fp)
  80dc38:	193ff22e 	bgeu	r3,r4,80dc04 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80dc3c:	e0bfff17 	ldw	r2,-4(fp)
  80dc40:	e0fffe17 	ldw	r3,-8(fp)
  80dc44:	10c5883a 	add	r2,r2,r3
  80dc48:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80dc4c:	e13ff217 	ldw	r4,-56(fp)
  80dc50:	21000044 	addi	r4,r4,1
  80dc54:	e13ff215 	stw	r4,-56(fp)
  80dc58:	e0bff817 	ldw	r2,-32(fp)
  80dc5c:	e0fff217 	ldw	r3,-56(fp)
  80dc60:	10ffe52e 	bgeu	r2,r3,80dbf8 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  80dc64:	00002a06 	br	80dd10 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80dc68:	e13ffe17 	ldw	r4,-8(fp)
  80dc6c:	e13ffe17 	ldw	r4,-8(fp)
  80dc70:	2105883a 	add	r2,r4,r4
  80dc74:	1085883a 	add	r2,r2,r2
  80dc78:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80dc7c:	e0fff917 	ldw	r3,-28(fp)
  80dc80:	e13ffe17 	ldw	r4,-8(fp)
  80dc84:	1905383a 	mul	r2,r3,r4
  80dc88:	e0ffff17 	ldw	r3,-4(fp)
  80dc8c:	1887883a 	add	r3,r3,r2
  80dc90:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80dc94:	e13ff917 	ldw	r4,-28(fp)
  80dc98:	e13ff215 	stw	r4,-56(fp)
  80dc9c:	00001906 	br	80dd04 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  80dca0:	e0bffb17 	ldw	r2,-20(fp)
  80dca4:	e0bff315 	stw	r2,-52(fp)
  80dca8:	00000c06 	br	80dcdc <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80dcac:	e0fff317 	ldw	r3,-52(fp)
  80dcb0:	e0fff317 	ldw	r3,-52(fp)
  80dcb4:	18c5883a 	add	r2,r3,r3
  80dcb8:	1085883a 	add	r2,r2,r2
  80dcbc:	1007883a 	mov	r3,r2
  80dcc0:	e0bfff17 	ldw	r2,-4(fp)
  80dcc4:	1885883a 	add	r2,r3,r2
  80dcc8:	e0fff717 	ldw	r3,-36(fp)
  80dccc:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dcd0:	e13ff317 	ldw	r4,-52(fp)
  80dcd4:	21000044 	addi	r4,r4,1
  80dcd8:	e13ff315 	stw	r4,-52(fp)
  80dcdc:	e0bffa17 	ldw	r2,-24(fp)
  80dce0:	e0fff317 	ldw	r3,-52(fp)
  80dce4:	10fff12e 	bgeu	r2,r3,80dcac <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80dce8:	e13fff17 	ldw	r4,-4(fp)
  80dcec:	e0bffe17 	ldw	r2,-8(fp)
  80dcf0:	2089883a 	add	r4,r4,r2
  80dcf4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80dcf8:	e0fff217 	ldw	r3,-56(fp)
  80dcfc:	18c00044 	addi	r3,r3,1
  80dd00:	e0fff215 	stw	r3,-56(fp)
  80dd04:	e13ff817 	ldw	r4,-32(fp)
  80dd08:	e0bff217 	ldw	r2,-56(fp)
  80dd0c:	20bfe42e 	bgeu	r4,r2,80dca0 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80dd10:	e037883a 	mov	sp,fp
  80dd14:	df000017 	ldw	fp,0(sp)
  80dd18:	dec00104 	addi	sp,sp,4
  80dd1c:	f800283a 	ret

0080dd20 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80dd20:	defff204 	addi	sp,sp,-56
  80dd24:	df000d15 	stw	fp,52(sp)
  80dd28:	df000d04 	addi	fp,sp,52
  80dd2c:	e13ff315 	stw	r4,-52(fp)
  80dd30:	e17ff415 	stw	r5,-48(fp)
  80dd34:	e1bff515 	stw	r6,-44(fp)
  80dd38:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80dd3c:	e0bff317 	ldw	r2,-52(fp)
  80dd40:	10800f17 	ldw	r2,60(r2)
  80dd44:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80dd48:	e0bff317 	ldw	r2,-52(fp)
  80dd4c:	10801017 	ldw	r2,64(r2)
  80dd50:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80dd54:	e0bff417 	ldw	r2,-48(fp)
  80dd58:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  80dd5c:	e0fff517 	ldw	r3,-44(fp)
  80dd60:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  80dd64:	e13ff617 	ldw	r4,-40(fp)
  80dd68:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80dd6c:	e0800117 	ldw	r2,4(fp)
  80dd70:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80dd74:	e0fffb17 	ldw	r3,-20(fp)
  80dd78:	e13ffc17 	ldw	r4,-16(fp)
  80dd7c:	1900042e 	bgeu	r3,r4,80dd90 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  80dd80:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  80dd84:	e0fffb17 	ldw	r3,-20(fp)
  80dd88:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  80dd8c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80dd90:	e13ffc17 	ldw	r4,-16(fp)
  80dd94:	e0bffe17 	ldw	r2,-8(fp)
  80dd98:	2080b12e 	bgeu	r4,r2,80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  80dd9c:	e0fffa17 	ldw	r3,-24(fp)
  80dda0:	e13ffd17 	ldw	r4,-12(fp)
  80dda4:	19000136 	bltu	r3,r4,80ddac <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80dda8:	0000ad06 	br	80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80ddac:	e0bffb17 	ldw	r2,-20(fp)
  80ddb0:	e0fffe17 	ldw	r3,-8(fp)
  80ddb4:	10c00336 	bltu	r2,r3,80ddc4 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  80ddb8:	e13ffe17 	ldw	r4,-8(fp)
  80ddbc:	213fffc4 	addi	r4,r4,-1
  80ddc0:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80ddc4:	e0800217 	ldw	r2,8(fp)
  80ddc8:	10800058 	cmpnei	r2,r2,1
  80ddcc:	1000041e 	bne	r2,zero,80dde0 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80ddd0:	e0bff317 	ldw	r2,-52(fp)
  80ddd4:	10800c17 	ldw	r2,48(r2)
  80ddd8:	e0bfff15 	stw	r2,-4(fp)
  80dddc:	00000306 	br	80ddec <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80dde0:	e0bff317 	ldw	r2,-52(fp)
  80dde4:	10800b17 	ldw	r2,44(r2)
  80dde8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80ddec:	e0bff317 	ldw	r2,-52(fp)
  80ddf0:	10800d17 	ldw	r2,52(r2)
  80ddf4:	1004c03a 	cmpne	r2,r2,zero
  80ddf8:	1000431e 	bne	r2,zero,80df08 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80ddfc:	e0bff317 	ldw	r2,-52(fp)
  80de00:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  80de04:	e0fffa17 	ldw	r3,-24(fp)
  80de08:	1884983a 	sll	r2,r3,r2
  80de0c:	e13fff17 	ldw	r4,-4(fp)
  80de10:	2089883a 	add	r4,r4,r2
  80de14:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80de18:	e0bff317 	ldw	r2,-52(fp)
  80de1c:	10800e17 	ldw	r2,56(r2)
  80de20:	10800058 	cmpnei	r2,r2,1
  80de24:	10000f1e 	bne	r2,zero,80de64 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  80de28:	e0bffc17 	ldw	r2,-16(fp)
  80de2c:	e0bff815 	stw	r2,-32(fp)
  80de30:	00000806 	br	80de54 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80de34:	e0ffff17 	ldw	r3,-4(fp)
  80de38:	e0bff817 	ldw	r2,-32(fp)
  80de3c:	1885883a 	add	r2,r3,r2
  80de40:	e0fff917 	ldw	r3,-28(fp)
  80de44:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80de48:	e0fff817 	ldw	r3,-32(fp)
  80de4c:	18c00044 	addi	r3,r3,1
  80de50:	e0fff815 	stw	r3,-32(fp)
  80de54:	e13ffb17 	ldw	r4,-20(fp)
  80de58:	e0bff817 	ldw	r2,-32(fp)
  80de5c:	20bff52e 	bgeu	r4,r2,80de34 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  80de60:	00007f06 	br	80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80de64:	e0bff317 	ldw	r2,-52(fp)
  80de68:	10800e17 	ldw	r2,56(r2)
  80de6c:	10800098 	cmpnei	r2,r2,2
  80de70:	1000121e 	bne	r2,zero,80debc <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  80de74:	e0fffc17 	ldw	r3,-16(fp)
  80de78:	e0fff815 	stw	r3,-32(fp)
  80de7c:	00000b06 	br	80deac <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80de80:	e13ff817 	ldw	r4,-32(fp)
  80de84:	e13ff817 	ldw	r4,-32(fp)
  80de88:	2105883a 	add	r2,r4,r4
  80de8c:	1007883a 	mov	r3,r2
  80de90:	e0bfff17 	ldw	r2,-4(fp)
  80de94:	1885883a 	add	r2,r3,r2
  80de98:	e0fff917 	ldw	r3,-28(fp)
  80de9c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80dea0:	e0bff817 	ldw	r2,-32(fp)
  80dea4:	10800044 	addi	r2,r2,1
  80dea8:	e0bff815 	stw	r2,-32(fp)
  80deac:	e0fffb17 	ldw	r3,-20(fp)
  80deb0:	e13ff817 	ldw	r4,-32(fp)
  80deb4:	193ff22e 	bgeu	r3,r4,80de80 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80deb8:	00006906 	br	80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80debc:	e0bffc17 	ldw	r2,-16(fp)
  80dec0:	e0bff815 	stw	r2,-32(fp)
  80dec4:	00000c06 	br	80def8 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80dec8:	e0fff817 	ldw	r3,-32(fp)
  80decc:	e0fff817 	ldw	r3,-32(fp)
  80ded0:	18c5883a 	add	r2,r3,r3
  80ded4:	1085883a 	add	r2,r2,r2
  80ded8:	1007883a 	mov	r3,r2
  80dedc:	e0bfff17 	ldw	r2,-4(fp)
  80dee0:	1885883a 	add	r2,r3,r2
  80dee4:	e0fff917 	ldw	r3,-28(fp)
  80dee8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80deec:	e13ff817 	ldw	r4,-32(fp)
  80def0:	21000044 	addi	r4,r4,1
  80def4:	e13ff815 	stw	r4,-32(fp)
  80def8:	e0bffb17 	ldw	r2,-20(fp)
  80defc:	e0fff817 	ldw	r3,-32(fp)
  80df00:	10fff12e 	bgeu	r2,r3,80dec8 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  80df04:	00005606 	br	80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80df08:	e0bff317 	ldw	r2,-52(fp)
  80df0c:	10800e17 	ldw	r2,56(r2)
  80df10:	10800058 	cmpnei	r2,r2,1
  80df14:	1000151e 	bne	r2,zero,80df6c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  80df18:	e13ffa17 	ldw	r4,-24(fp)
  80df1c:	e0fffe17 	ldw	r3,-8(fp)
  80df20:	20c5383a 	mul	r2,r4,r3
  80df24:	e13fff17 	ldw	r4,-4(fp)
  80df28:	2089883a 	add	r4,r4,r2
  80df2c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80df30:	e0bffc17 	ldw	r2,-16(fp)
  80df34:	e0bff715 	stw	r2,-36(fp)
  80df38:	00000806 	br	80df5c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80df3c:	e0ffff17 	ldw	r3,-4(fp)
  80df40:	e0bff717 	ldw	r2,-36(fp)
  80df44:	1885883a 	add	r2,r3,r2
  80df48:	e0fff917 	ldw	r3,-28(fp)
  80df4c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80df50:	e0fff717 	ldw	r3,-36(fp)
  80df54:	18c00044 	addi	r3,r3,1
  80df58:	e0fff715 	stw	r3,-36(fp)
  80df5c:	e13ffb17 	ldw	r4,-20(fp)
  80df60:	e0bff717 	ldw	r2,-36(fp)
  80df64:	20bff52e 	bgeu	r4,r2,80df3c <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  80df68:	00003d06 	br	80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80df6c:	e0bff317 	ldw	r2,-52(fp)
  80df70:	10800e17 	ldw	r2,56(r2)
  80df74:	10800098 	cmpnei	r2,r2,2
  80df78:	10001c1e 	bne	r2,zero,80dfec <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  80df7c:	e0fffe17 	ldw	r3,-8(fp)
  80df80:	e0fffe17 	ldw	r3,-8(fp)
  80df84:	18c5883a 	add	r2,r3,r3
  80df88:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80df8c:	e13ffa17 	ldw	r4,-24(fp)
  80df90:	e0fffe17 	ldw	r3,-8(fp)
  80df94:	20c5383a 	mul	r2,r4,r3
  80df98:	e13fff17 	ldw	r4,-4(fp)
  80df9c:	2089883a 	add	r4,r4,r2
  80dfa0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80dfa4:	e0bffc17 	ldw	r2,-16(fp)
  80dfa8:	e0bff715 	stw	r2,-36(fp)
  80dfac:	00000b06 	br	80dfdc <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80dfb0:	e0fff717 	ldw	r3,-36(fp)
  80dfb4:	e0fff717 	ldw	r3,-36(fp)
  80dfb8:	18c5883a 	add	r2,r3,r3
  80dfbc:	1007883a 	mov	r3,r2
  80dfc0:	e0bfff17 	ldw	r2,-4(fp)
  80dfc4:	1885883a 	add	r2,r3,r2
  80dfc8:	e0fff917 	ldw	r3,-28(fp)
  80dfcc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80dfd0:	e13ff717 	ldw	r4,-36(fp)
  80dfd4:	21000044 	addi	r4,r4,1
  80dfd8:	e13ff715 	stw	r4,-36(fp)
  80dfdc:	e0bffb17 	ldw	r2,-20(fp)
  80dfe0:	e0fff717 	ldw	r3,-36(fp)
  80dfe4:	10fff22e 	bgeu	r2,r3,80dfb0 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  80dfe8:	00001d06 	br	80e060 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80dfec:	e13ffe17 	ldw	r4,-8(fp)
  80dff0:	e13ffe17 	ldw	r4,-8(fp)
  80dff4:	2105883a 	add	r2,r4,r4
  80dff8:	1085883a 	add	r2,r2,r2
  80dffc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80e000:	e0fffa17 	ldw	r3,-24(fp)
  80e004:	e13ffe17 	ldw	r4,-8(fp)
  80e008:	1905383a 	mul	r2,r3,r4
  80e00c:	e0ffff17 	ldw	r3,-4(fp)
  80e010:	1887883a 	add	r3,r3,r2
  80e014:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80e018:	e13ffc17 	ldw	r4,-16(fp)
  80e01c:	e13ff715 	stw	r4,-36(fp)
  80e020:	00000c06 	br	80e054 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80e024:	e0fff717 	ldw	r3,-36(fp)
  80e028:	e0fff717 	ldw	r3,-36(fp)
  80e02c:	18c5883a 	add	r2,r3,r3
  80e030:	1085883a 	add	r2,r2,r2
  80e034:	1007883a 	mov	r3,r2
  80e038:	e0bfff17 	ldw	r2,-4(fp)
  80e03c:	1885883a 	add	r2,r3,r2
  80e040:	e0fff917 	ldw	r3,-28(fp)
  80e044:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80e048:	e13ff717 	ldw	r4,-36(fp)
  80e04c:	21000044 	addi	r4,r4,1
  80e050:	e13ff715 	stw	r4,-36(fp)
  80e054:	e0bffb17 	ldw	r2,-20(fp)
  80e058:	e0fff717 	ldw	r3,-36(fp)
  80e05c:	10fff12e 	bgeu	r2,r3,80e024 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80e060:	e037883a 	mov	sp,fp
  80e064:	df000017 	ldw	fp,0(sp)
  80e068:	dec00104 	addi	sp,sp,4
  80e06c:	f800283a 	ret

0080e070 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80e070:	defff104 	addi	sp,sp,-60
  80e074:	df000e15 	stw	fp,56(sp)
  80e078:	df000e04 	addi	fp,sp,56
  80e07c:	e13ff215 	stw	r4,-56(fp)
  80e080:	e17ff315 	stw	r5,-52(fp)
  80e084:	e1bff415 	stw	r6,-48(fp)
  80e088:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80e08c:	e0bff217 	ldw	r2,-56(fp)
  80e090:	10800f17 	ldw	r2,60(r2)
  80e094:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80e098:	e0bff217 	ldw	r2,-56(fp)
  80e09c:	10801017 	ldw	r2,64(r2)
  80e0a0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  80e0a4:	e0bff317 	ldw	r2,-52(fp)
  80e0a8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  80e0ac:	e0fff417 	ldw	r3,-48(fp)
  80e0b0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  80e0b4:	e13ff517 	ldw	r4,-44(fp)
  80e0b8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80e0bc:	e0800117 	ldw	r2,4(fp)
  80e0c0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  80e0c4:	e0fffa17 	ldw	r3,-24(fp)
  80e0c8:	e13ffb17 	ldw	r4,-20(fp)
  80e0cc:	1900042e 	bgeu	r3,r4,80e0e0 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  80e0d0:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  80e0d4:	e0fffa17 	ldw	r3,-24(fp)
  80e0d8:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  80e0dc:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80e0e0:	e13ffc17 	ldw	r4,-16(fp)
  80e0e4:	e0bffe17 	ldw	r2,-8(fp)
  80e0e8:	2080d12e 	bgeu	r4,r2,80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  80e0ec:	e0fffb17 	ldw	r3,-20(fp)
  80e0f0:	e13ffd17 	ldw	r4,-12(fp)
  80e0f4:	19000136 	bltu	r3,r4,80e0fc <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80e0f8:	0000cd06 	br	80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80e0fc:	e0bffa17 	ldw	r2,-24(fp)
  80e100:	e0fffd17 	ldw	r3,-12(fp)
  80e104:	10c00336 	bltu	r2,r3,80e114 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  80e108:	e13ffd17 	ldw	r4,-12(fp)
  80e10c:	213fffc4 	addi	r4,r4,-1
  80e110:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80e114:	e0800217 	ldw	r2,8(fp)
  80e118:	10800058 	cmpnei	r2,r2,1
  80e11c:	1000041e 	bne	r2,zero,80e130 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80e120:	e0bff217 	ldw	r2,-56(fp)
  80e124:	10800c17 	ldw	r2,48(r2)
  80e128:	e0bfff15 	stw	r2,-4(fp)
  80e12c:	00000306 	br	80e13c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80e130:	e0bff217 	ldw	r2,-56(fp)
  80e134:	10800b17 	ldw	r2,44(r2)
  80e138:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80e13c:	e0bff217 	ldw	r2,-56(fp)
  80e140:	10800d17 	ldw	r2,52(r2)
  80e144:	1004c03a 	cmpne	r2,r2,zero
  80e148:	1000571e 	bne	r2,zero,80e2a8 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80e14c:	e0bff217 	ldw	r2,-56(fp)
  80e150:	10801317 	ldw	r2,76(r2)
  80e154:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  80e158:	e0bff717 	ldw	r2,-36(fp)
  80e15c:	e0fffb17 	ldw	r3,-20(fp)
  80e160:	1884983a 	sll	r2,r3,r2
  80e164:	e13fff17 	ldw	r4,-4(fp)
  80e168:	2089883a 	add	r4,r4,r2
  80e16c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80e170:	e0bff217 	ldw	r2,-56(fp)
  80e174:	10800e17 	ldw	r2,56(r2)
  80e178:	10800058 	cmpnei	r2,r2,1
  80e17c:	1000151e 	bne	r2,zero,80e1d4 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  80e180:	e0bffb17 	ldw	r2,-20(fp)
  80e184:	e0bff815 	stw	r2,-32(fp)
  80e188:	00000e06 	br	80e1c4 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80e18c:	e0ffff17 	ldw	r3,-4(fp)
  80e190:	e0bffc17 	ldw	r2,-16(fp)
  80e194:	1885883a 	add	r2,r3,r2
  80e198:	e0fff917 	ldw	r3,-28(fp)
  80e19c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80e1a0:	e0fff717 	ldw	r3,-36(fp)
  80e1a4:	00800044 	movi	r2,1
  80e1a8:	10c4983a 	sll	r2,r2,r3
  80e1ac:	e0ffff17 	ldw	r3,-4(fp)
  80e1b0:	1887883a 	add	r3,r3,r2
  80e1b4:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80e1b8:	e13ff817 	ldw	r4,-32(fp)
  80e1bc:	21000044 	addi	r4,r4,1
  80e1c0:	e13ff815 	stw	r4,-32(fp)
  80e1c4:	e0bffa17 	ldw	r2,-24(fp)
  80e1c8:	e0fff817 	ldw	r3,-32(fp)
  80e1cc:	10ffef2e 	bgeu	r2,r3,80e18c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  80e1d0:	00009706 	br	80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80e1d4:	e0bff217 	ldw	r2,-56(fp)
  80e1d8:	10800e17 	ldw	r2,56(r2)
  80e1dc:	10800098 	cmpnei	r2,r2,2
  80e1e0:	1000181e 	bne	r2,zero,80e244 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80e1e4:	e13ffb17 	ldw	r4,-20(fp)
  80e1e8:	e13ff815 	stw	r4,-32(fp)
  80e1ec:	00001106 	br	80e234 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80e1f0:	e0fffc17 	ldw	r3,-16(fp)
  80e1f4:	e0fffc17 	ldw	r3,-16(fp)
  80e1f8:	18c5883a 	add	r2,r3,r3
  80e1fc:	1007883a 	mov	r3,r2
  80e200:	e0bfff17 	ldw	r2,-4(fp)
  80e204:	1885883a 	add	r2,r3,r2
  80e208:	e0fff917 	ldw	r3,-28(fp)
  80e20c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80e210:	e0fff717 	ldw	r3,-36(fp)
  80e214:	00800044 	movi	r2,1
  80e218:	10c4983a 	sll	r2,r2,r3
  80e21c:	e13fff17 	ldw	r4,-4(fp)
  80e220:	2089883a 	add	r4,r4,r2
  80e224:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80e228:	e0bff817 	ldw	r2,-32(fp)
  80e22c:	10800044 	addi	r2,r2,1
  80e230:	e0bff815 	stw	r2,-32(fp)
  80e234:	e0fffa17 	ldw	r3,-24(fp)
  80e238:	e13ff817 	ldw	r4,-32(fp)
  80e23c:	193fec2e 	bgeu	r3,r4,80e1f0 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  80e240:	00007b06 	br	80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80e244:	e0bffb17 	ldw	r2,-20(fp)
  80e248:	e0bff815 	stw	r2,-32(fp)
  80e24c:	00001206 	br	80e298 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80e250:	e0fffc17 	ldw	r3,-16(fp)
  80e254:	e0fffc17 	ldw	r3,-16(fp)
  80e258:	18c5883a 	add	r2,r3,r3
  80e25c:	1085883a 	add	r2,r2,r2
  80e260:	1007883a 	mov	r3,r2
  80e264:	e0bfff17 	ldw	r2,-4(fp)
  80e268:	1885883a 	add	r2,r3,r2
  80e26c:	e0fff917 	ldw	r3,-28(fp)
  80e270:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80e274:	e0fff717 	ldw	r3,-36(fp)
  80e278:	00800044 	movi	r2,1
  80e27c:	10c4983a 	sll	r2,r2,r3
  80e280:	e13fff17 	ldw	r4,-4(fp)
  80e284:	2089883a 	add	r4,r4,r2
  80e288:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80e28c:	e0bff817 	ldw	r2,-32(fp)
  80e290:	10800044 	addi	r2,r2,1
  80e294:	e0bff815 	stw	r2,-32(fp)
  80e298:	e0fffa17 	ldw	r3,-24(fp)
  80e29c:	e13ff817 	ldw	r4,-32(fp)
  80e2a0:	193feb2e 	bgeu	r3,r4,80e250 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  80e2a4:	00006206 	br	80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80e2a8:	e0bff217 	ldw	r2,-56(fp)
  80e2ac:	10800e17 	ldw	r2,56(r2)
  80e2b0:	10800058 	cmpnei	r2,r2,1
  80e2b4:	1000191e 	bne	r2,zero,80e31c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  80e2b8:	e0fffb17 	ldw	r3,-20(fp)
  80e2bc:	e13ffe17 	ldw	r4,-8(fp)
  80e2c0:	1905383a 	mul	r2,r3,r4
  80e2c4:	e0ffff17 	ldw	r3,-4(fp)
  80e2c8:	1887883a 	add	r3,r3,r2
  80e2cc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e2d0:	e13ffb17 	ldw	r4,-20(fp)
  80e2d4:	e13ff615 	stw	r4,-40(fp)
  80e2d8:	00000c06 	br	80e30c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80e2dc:	e0ffff17 	ldw	r3,-4(fp)
  80e2e0:	e0bffc17 	ldw	r2,-16(fp)
  80e2e4:	1885883a 	add	r2,r3,r2
  80e2e8:	e0fff917 	ldw	r3,-28(fp)
  80e2ec:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  80e2f0:	e0bfff17 	ldw	r2,-4(fp)
  80e2f4:	e0fffe17 	ldw	r3,-8(fp)
  80e2f8:	10c5883a 	add	r2,r2,r3
  80e2fc:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e300:	e13ff617 	ldw	r4,-40(fp)
  80e304:	21000044 	addi	r4,r4,1
  80e308:	e13ff615 	stw	r4,-40(fp)
  80e30c:	e0bffa17 	ldw	r2,-24(fp)
  80e310:	e0fff617 	ldw	r3,-40(fp)
  80e314:	10fff12e 	bgeu	r2,r3,80e2dc <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  80e318:	00004506 	br	80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80e31c:	e0bff217 	ldw	r2,-56(fp)
  80e320:	10800e17 	ldw	r2,56(r2)
  80e324:	10800098 	cmpnei	r2,r2,2
  80e328:	1000201e 	bne	r2,zero,80e3ac <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  80e32c:	e13ffe17 	ldw	r4,-8(fp)
  80e330:	e13ffe17 	ldw	r4,-8(fp)
  80e334:	2105883a 	add	r2,r4,r4
  80e338:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80e33c:	e0fffb17 	ldw	r3,-20(fp)
  80e340:	e13ffe17 	ldw	r4,-8(fp)
  80e344:	1905383a 	mul	r2,r3,r4
  80e348:	e0ffff17 	ldw	r3,-4(fp)
  80e34c:	1887883a 	add	r3,r3,r2
  80e350:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e354:	e13ffb17 	ldw	r4,-20(fp)
  80e358:	e13ff615 	stw	r4,-40(fp)
  80e35c:	00000f06 	br	80e39c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80e360:	e0fffc17 	ldw	r3,-16(fp)
  80e364:	e0fffc17 	ldw	r3,-16(fp)
  80e368:	18c5883a 	add	r2,r3,r3
  80e36c:	1007883a 	mov	r3,r2
  80e370:	e0bfff17 	ldw	r2,-4(fp)
  80e374:	1885883a 	add	r2,r3,r2
  80e378:	e0fff917 	ldw	r3,-28(fp)
  80e37c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  80e380:	e13fff17 	ldw	r4,-4(fp)
  80e384:	e0bffe17 	ldw	r2,-8(fp)
  80e388:	2089883a 	add	r4,r4,r2
  80e38c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e390:	e0fff617 	ldw	r3,-40(fp)
  80e394:	18c00044 	addi	r3,r3,1
  80e398:	e0fff615 	stw	r3,-40(fp)
  80e39c:	e13ffa17 	ldw	r4,-24(fp)
  80e3a0:	e0bff617 	ldw	r2,-40(fp)
  80e3a4:	20bfee2e 	bgeu	r4,r2,80e360 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  80e3a8:	00002106 	br	80e430 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80e3ac:	e0fffe17 	ldw	r3,-8(fp)
  80e3b0:	e0fffe17 	ldw	r3,-8(fp)
  80e3b4:	18c5883a 	add	r2,r3,r3
  80e3b8:	1085883a 	add	r2,r2,r2
  80e3bc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80e3c0:	e13ffb17 	ldw	r4,-20(fp)
  80e3c4:	e0fffe17 	ldw	r3,-8(fp)
  80e3c8:	20c5383a 	mul	r2,r4,r3
  80e3cc:	e13fff17 	ldw	r4,-4(fp)
  80e3d0:	2089883a 	add	r4,r4,r2
  80e3d4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e3d8:	e0bffb17 	ldw	r2,-20(fp)
  80e3dc:	e0bff615 	stw	r2,-40(fp)
  80e3e0:	00001006 	br	80e424 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80e3e4:	e0fffc17 	ldw	r3,-16(fp)
  80e3e8:	e0fffc17 	ldw	r3,-16(fp)
  80e3ec:	18c5883a 	add	r2,r3,r3
  80e3f0:	1085883a 	add	r2,r2,r2
  80e3f4:	1007883a 	mov	r3,r2
  80e3f8:	e0bfff17 	ldw	r2,-4(fp)
  80e3fc:	1885883a 	add	r2,r3,r2
  80e400:	e0fff917 	ldw	r3,-28(fp)
  80e404:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  80e408:	e13fff17 	ldw	r4,-4(fp)
  80e40c:	e0bffe17 	ldw	r2,-8(fp)
  80e410:	2089883a 	add	r4,r4,r2
  80e414:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e418:	e0fff617 	ldw	r3,-40(fp)
  80e41c:	18c00044 	addi	r3,r3,1
  80e420:	e0fff615 	stw	r3,-40(fp)
  80e424:	e13ffa17 	ldw	r4,-24(fp)
  80e428:	e0bff617 	ldw	r2,-40(fp)
  80e42c:	20bfed2e 	bgeu	r4,r2,80e3e4 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  80e430:	e037883a 	mov	sp,fp
  80e434:	df000017 	ldw	fp,0(sp)
  80e438:	dec00104 	addi	sp,sp,4
  80e43c:	f800283a 	ret

0080e440 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80e440:	defff804 	addi	sp,sp,-32
  80e444:	dfc00715 	stw	ra,28(sp)
  80e448:	df000615 	stw	fp,24(sp)
  80e44c:	df000604 	addi	fp,sp,24
  80e450:	e13ffc15 	stw	r4,-16(fp)
  80e454:	e17ffd15 	stw	r5,-12(fp)
  80e458:	e1bffe15 	stw	r6,-8(fp)
  80e45c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80e460:	e0800317 	ldw	r2,12(fp)
  80e464:	d8800015 	stw	r2,0(sp)
  80e468:	e0800417 	ldw	r2,16(fp)
  80e46c:	d8800115 	stw	r2,4(sp)
  80e470:	e13ffc17 	ldw	r4,-16(fp)
  80e474:	e17ffd17 	ldw	r5,-12(fp)
  80e478:	e1bfff17 	ldw	r6,-4(fp)
  80e47c:	e1fffe17 	ldw	r7,-8(fp)
  80e480:	080dd200 	call	80dd20 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80e484:	e0800317 	ldw	r2,12(fp)
  80e488:	d8800015 	stw	r2,0(sp)
  80e48c:	e0800417 	ldw	r2,16(fp)
  80e490:	d8800115 	stw	r2,4(sp)
  80e494:	e13ffc17 	ldw	r4,-16(fp)
  80e498:	e17ffd17 	ldw	r5,-12(fp)
  80e49c:	e1bfff17 	ldw	r6,-4(fp)
  80e4a0:	e1c00217 	ldw	r7,8(fp)
  80e4a4:	080dd200 	call	80dd20 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80e4a8:	e0800317 	ldw	r2,12(fp)
  80e4ac:	d8800015 	stw	r2,0(sp)
  80e4b0:	e0800417 	ldw	r2,16(fp)
  80e4b4:	d8800115 	stw	r2,4(sp)
  80e4b8:	e13ffc17 	ldw	r4,-16(fp)
  80e4bc:	e17ffd17 	ldw	r5,-12(fp)
  80e4c0:	e1bffe17 	ldw	r6,-8(fp)
  80e4c4:	e1c00217 	ldw	r7,8(fp)
  80e4c8:	080e0700 	call	80e070 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80e4cc:	e0800317 	ldw	r2,12(fp)
  80e4d0:	d8800015 	stw	r2,0(sp)
  80e4d4:	e0800417 	ldw	r2,16(fp)
  80e4d8:	d8800115 	stw	r2,4(sp)
  80e4dc:	e13ffc17 	ldw	r4,-16(fp)
  80e4e0:	e17fff17 	ldw	r5,-4(fp)
  80e4e4:	e1bffe17 	ldw	r6,-8(fp)
  80e4e8:	e1c00217 	ldw	r7,8(fp)
  80e4ec:	080e0700 	call	80e070 <alt_up_pixel_buffer_dma_draw_vline>
}
  80e4f0:	e037883a 	mov	sp,fp
  80e4f4:	dfc00117 	ldw	ra,4(sp)
  80e4f8:	df000017 	ldw	fp,0(sp)
  80e4fc:	dec00204 	addi	sp,sp,8
  80e500:	f800283a 	ret

0080e504 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80e504:	defffb04 	addi	sp,sp,-20
  80e508:	df000415 	stw	fp,16(sp)
  80e50c:	df000404 	addi	fp,sp,16
  80e510:	e13ffc15 	stw	r4,-16(fp)
  80e514:	e17ffd15 	stw	r5,-12(fp)
  80e518:	e1bffe15 	stw	r6,-8(fp)
  80e51c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  80e520:	e0c00217 	ldw	r3,8(fp)
  80e524:	1804c03a 	cmpne	r2,r3,zero
  80e528:	10000b1e 	bne	r2,zero,80e558 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80e52c:	e13ffd17 	ldw	r4,-12(fp)
  80e530:	e0ffff17 	ldw	r3,-4(fp)
  80e534:	20c5383a 	mul	r2,r4,r3
  80e538:	e13ffe17 	ldw	r4,-8(fp)
  80e53c:	1105883a 	add	r2,r2,r4
  80e540:	1007883a 	mov	r3,r2
  80e544:	e0bffc17 	ldw	r2,-16(fp)
  80e548:	1885883a 	add	r2,r3,r2
  80e54c:	e0c00117 	ldw	r3,4(fp)
  80e550:	10c00025 	stbio	r3,0(r2)
  80e554:	00001b06 	br	80e5c4 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  80e558:	e1000217 	ldw	r4,8(fp)
  80e55c:	20800058 	cmpnei	r2,r4,1
  80e560:	10000c1e 	bne	r2,zero,80e594 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80e564:	e0fffd17 	ldw	r3,-12(fp)
  80e568:	e13fff17 	ldw	r4,-4(fp)
  80e56c:	1905383a 	mul	r2,r3,r4
  80e570:	e0fffe17 	ldw	r3,-8(fp)
  80e574:	10c5883a 	add	r2,r2,r3
  80e578:	1085883a 	add	r2,r2,r2
  80e57c:	1007883a 	mov	r3,r2
  80e580:	e0bffc17 	ldw	r2,-16(fp)
  80e584:	1885883a 	add	r2,r3,r2
  80e588:	e1000117 	ldw	r4,4(fp)
  80e58c:	1100002d 	sthio	r4,0(r2)
  80e590:	00000c06 	br	80e5c4 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80e594:	e0fffd17 	ldw	r3,-12(fp)
  80e598:	e13fff17 	ldw	r4,-4(fp)
  80e59c:	1905383a 	mul	r2,r3,r4
  80e5a0:	e0fffe17 	ldw	r3,-8(fp)
  80e5a4:	10c5883a 	add	r2,r2,r3
  80e5a8:	1085883a 	add	r2,r2,r2
  80e5ac:	1085883a 	add	r2,r2,r2
  80e5b0:	1007883a 	mov	r3,r2
  80e5b4:	e0bffc17 	ldw	r2,-16(fp)
  80e5b8:	1885883a 	add	r2,r3,r2
  80e5bc:	e1000117 	ldw	r4,4(fp)
  80e5c0:	11000035 	stwio	r4,0(r2)
}
  80e5c4:	e037883a 	mov	sp,fp
  80e5c8:	df000017 	ldw	fp,0(sp)
  80e5cc:	dec00104 	addi	sp,sp,4
  80e5d0:	f800283a 	ret

0080e5d4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80e5d4:	deffe404 	addi	sp,sp,-112
  80e5d8:	dfc01b15 	stw	ra,108(sp)
  80e5dc:	df001a15 	stw	fp,104(sp)
  80e5e0:	df001a04 	addi	fp,sp,104
  80e5e4:	e13fe815 	stw	r4,-96(fp)
  80e5e8:	e17fe915 	stw	r5,-92(fp)
  80e5ec:	e1bfea15 	stw	r6,-88(fp)
  80e5f0:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  80e5f4:	e0bfe917 	ldw	r2,-92(fp)
  80e5f8:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  80e5fc:	e0ffea17 	ldw	r3,-88(fp)
  80e600:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  80e604:	e13feb17 	ldw	r4,-84(fp)
  80e608:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  80e60c:	e0800217 	ldw	r2,8(fp)
  80e610:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80e614:	e0fff717 	ldw	r3,-36(fp)
  80e618:	e13ff917 	ldw	r4,-28(fp)
  80e61c:	1905c83a 	sub	r2,r3,r4
  80e620:	e0bfff15 	stw	r2,-4(fp)
  80e624:	e0ffff17 	ldw	r3,-4(fp)
  80e628:	1804403a 	cmpge	r2,r3,zero
  80e62c:	1000031e 	bne	r2,zero,80e63c <alt_up_pixel_buffer_dma_draw_line+0x68>
  80e630:	e13fff17 	ldw	r4,-4(fp)
  80e634:	0109c83a 	sub	r4,zero,r4
  80e638:	e13fff15 	stw	r4,-4(fp)
  80e63c:	e0fff817 	ldw	r3,-32(fp)
  80e640:	e13ffa17 	ldw	r4,-24(fp)
  80e644:	1905c83a 	sub	r2,r3,r4
  80e648:	e0bffe15 	stw	r2,-8(fp)
  80e64c:	e0fffe17 	ldw	r3,-8(fp)
  80e650:	1804403a 	cmpge	r2,r3,zero
  80e654:	1000031e 	bne	r2,zero,80e664 <alt_up_pixel_buffer_dma_draw_line+0x90>
  80e658:	e13ffe17 	ldw	r4,-8(fp)
  80e65c:	0109c83a 	sub	r4,zero,r4
  80e660:	e13ffe15 	stw	r4,-8(fp)
  80e664:	e0fffe17 	ldw	r3,-8(fp)
  80e668:	e13fff17 	ldw	r4,-4(fp)
  80e66c:	1904803a 	cmplt	r2,r3,r4
  80e670:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80e674:	e0bfe817 	ldw	r2,-96(fp)
  80e678:	10800e17 	ldw	r2,56(r2)
  80e67c:	10800060 	cmpeqi	r2,r2,1
  80e680:	10000c1e 	bne	r2,zero,80e6b4 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  80e684:	e0bfe817 	ldw	r2,-96(fp)
  80e688:	10800e17 	ldw	r2,56(r2)
  80e68c:	10800098 	cmpnei	r2,r2,2
  80e690:	1000031e 	bne	r2,zero,80e6a0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  80e694:	00800044 	movi	r2,1
  80e698:	e0bffc15 	stw	r2,-16(fp)
  80e69c:	00000206 	br	80e6a8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  80e6a0:	00c00084 	movi	r3,2
  80e6a4:	e0fffc15 	stw	r3,-16(fp)
  80e6a8:	e13ffc17 	ldw	r4,-16(fp)
  80e6ac:	e13ffd15 	stw	r4,-12(fp)
  80e6b0:	00000106 	br	80e6b8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  80e6b4:	e03ffd15 	stw	zero,-12(fp)
  80e6b8:	e0bffd17 	ldw	r2,-12(fp)
  80e6bc:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  80e6c0:	e0c00317 	ldw	r3,12(fp)
  80e6c4:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80e6c8:	e0bfe817 	ldw	r2,-96(fp)
  80e6cc:	10800d17 	ldw	r2,52(r2)
  80e6d0:	1004c03a 	cmpne	r2,r2,zero
  80e6d4:	1000091e 	bne	r2,zero,80e6fc <alt_up_pixel_buffer_dma_draw_line+0x128>
  80e6d8:	e0bfe817 	ldw	r2,-96(fp)
  80e6dc:	10c01317 	ldw	r3,76(r2)
  80e6e0:	e0bfef17 	ldw	r2,-68(fp)
  80e6e4:	1885c83a 	sub	r2,r3,r2
  80e6e8:	1007883a 	mov	r3,r2
  80e6ec:	00800044 	movi	r2,1
  80e6f0:	10c4983a 	sll	r2,r2,r3
  80e6f4:	e0bffb15 	stw	r2,-20(fp)
  80e6f8:	00000306 	br	80e708 <alt_up_pixel_buffer_dma_draw_line+0x134>
  80e6fc:	e0bfe817 	ldw	r2,-96(fp)
  80e700:	10800f17 	ldw	r2,60(r2)
  80e704:	e0bffb15 	stw	r2,-20(fp)
  80e708:	e13ffb17 	ldw	r4,-20(fp)
  80e70c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  80e710:	e0800417 	ldw	r2,16(fp)
  80e714:	10800058 	cmpnei	r2,r2,1
  80e718:	1000041e 	bne	r2,zero,80e72c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  80e71c:	e0bfe817 	ldw	r2,-96(fp)
  80e720:	10800c17 	ldw	r2,48(r2)
  80e724:	e0bfed15 	stw	r2,-76(fp)
  80e728:	00000306 	br	80e738 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  80e72c:	e0bfe817 	ldw	r2,-96(fp)
  80e730:	10800b17 	ldw	r2,44(r2)
  80e734:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  80e738:	e0fff603 	ldbu	r3,-40(fp)
  80e73c:	18803fcc 	andi	r2,r3,255
  80e740:	1080201c 	xori	r2,r2,128
  80e744:	10bfe004 	addi	r2,r2,-128
  80e748:	10800050 	cmplti	r2,r2,1
  80e74c:	10000c1e 	bne	r2,zero,80e780 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  80e750:	e13ffa17 	ldw	r4,-24(fp)
  80e754:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  80e758:	e0bff917 	ldw	r2,-28(fp)
  80e75c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  80e760:	e0fff317 	ldw	r3,-52(fp)
  80e764:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  80e768:	e13ff817 	ldw	r4,-32(fp)
  80e76c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  80e770:	e0bff717 	ldw	r2,-36(fp)
  80e774:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  80e778:	e0fff317 	ldw	r3,-52(fp)
  80e77c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  80e780:	e13ff817 	ldw	r4,-32(fp)
  80e784:	e0bffa17 	ldw	r2,-24(fp)
  80e788:	20800c0e 	bge	r4,r2,80e7bc <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  80e78c:	e0fffa17 	ldw	r3,-24(fp)
  80e790:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  80e794:	e13ff817 	ldw	r4,-32(fp)
  80e798:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  80e79c:	e0bff317 	ldw	r2,-52(fp)
  80e7a0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  80e7a4:	e0fff917 	ldw	r3,-28(fp)
  80e7a8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  80e7ac:	e13ff717 	ldw	r4,-36(fp)
  80e7b0:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  80e7b4:	e0bff317 	ldw	r2,-52(fp)
  80e7b8:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  80e7bc:	e0fff817 	ldw	r3,-32(fp)
  80e7c0:	e13ffa17 	ldw	r4,-24(fp)
  80e7c4:	1907c83a 	sub	r3,r3,r4
  80e7c8:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  80e7cc:	e0fff717 	ldw	r3,-36(fp)
  80e7d0:	e13ff917 	ldw	r4,-28(fp)
  80e7d4:	1905c83a 	sub	r2,r3,r4
  80e7d8:	e0bff415 	stw	r2,-48(fp)
  80e7dc:	e0fff417 	ldw	r3,-48(fp)
  80e7e0:	1804403a 	cmpge	r2,r3,zero
  80e7e4:	1000031e 	bne	r2,zero,80e7f4 <alt_up_pixel_buffer_dma_draw_line+0x220>
  80e7e8:	e13ff417 	ldw	r4,-48(fp)
  80e7ec:	0109c83a 	sub	r4,zero,r4
  80e7f0:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  80e7f4:	e0fff517 	ldw	r3,-44(fp)
  80e7f8:	1804d7fa 	srli	r2,r3,31
  80e7fc:	e13ff517 	ldw	r4,-44(fp)
  80e800:	1105883a 	add	r2,r2,r4
  80e804:	1005d07a 	srai	r2,r2,1
  80e808:	0085c83a 	sub	r2,zero,r2
  80e80c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  80e810:	e0bff917 	ldw	r2,-28(fp)
  80e814:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  80e818:	e0fff917 	ldw	r3,-28(fp)
  80e81c:	e13ff717 	ldw	r4,-36(fp)
  80e820:	1900030e 	bge	r3,r4,80e830 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  80e824:	00800044 	movi	r2,1
  80e828:	e0bff215 	stw	r2,-56(fp)
  80e82c:	00000206 	br	80e838 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  80e830:	00ffffc4 	movi	r3,-1
  80e834:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80e838:	e13ff603 	ldbu	r4,-40(fp)
  80e83c:	20803fcc 	andi	r2,r4,255
  80e840:	1080201c 	xori	r2,r2,128
  80e844:	10bfe004 	addi	r2,r2,-128
  80e848:	10800058 	cmpnei	r2,r2,1
  80e84c:	1000221e 	bne	r2,zero,80e8d8 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  80e850:	e0bffa17 	ldw	r2,-24(fp)
  80e854:	e0bff115 	stw	r2,-60(fp)
  80e858:	00001b06 	br	80e8c8 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  80e85c:	e0ffee17 	ldw	r3,-72(fp)
  80e860:	d8c00015 	stw	r3,0(sp)
  80e864:	e13fef17 	ldw	r4,-68(fp)
  80e868:	d9000115 	stw	r4,4(sp)
  80e86c:	e13fed17 	ldw	r4,-76(fp)
  80e870:	e17fec17 	ldw	r5,-80(fp)
  80e874:	e1bff017 	ldw	r6,-64(fp)
  80e878:	e1fff117 	ldw	r7,-60(fp)
  80e87c:	080e5040 	call	80e504 <helper_plot_pixel>
			error = error + deltay;
  80e880:	e0bff317 	ldw	r2,-52(fp)
  80e884:	e0fff417 	ldw	r3,-48(fp)
  80e888:	10c5883a 	add	r2,r2,r3
  80e88c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  80e890:	e13ff317 	ldw	r4,-52(fp)
  80e894:	20800050 	cmplti	r2,r4,1
  80e898:	1000081e 	bne	r2,zero,80e8bc <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  80e89c:	e0bff017 	ldw	r2,-64(fp)
  80e8a0:	e0fff217 	ldw	r3,-56(fp)
  80e8a4:	10c5883a 	add	r2,r2,r3
  80e8a8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  80e8ac:	e13ff317 	ldw	r4,-52(fp)
  80e8b0:	e0bff517 	ldw	r2,-44(fp)
  80e8b4:	2089c83a 	sub	r4,r4,r2
  80e8b8:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80e8bc:	e0fff117 	ldw	r3,-60(fp)
  80e8c0:	18c00044 	addi	r3,r3,1
  80e8c4:	e0fff115 	stw	r3,-60(fp)
  80e8c8:	e13ff817 	ldw	r4,-32(fp)
  80e8cc:	e0bff117 	ldw	r2,-60(fp)
  80e8d0:	20bfe20e 	bge	r4,r2,80e85c <alt_up_pixel_buffer_dma_draw_line+0x288>
  80e8d4:	00002106 	br	80e95c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80e8d8:	e0fffa17 	ldw	r3,-24(fp)
  80e8dc:	e0fff115 	stw	r3,-60(fp)
  80e8e0:	00001b06 	br	80e950 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  80e8e4:	e13fee17 	ldw	r4,-72(fp)
  80e8e8:	d9000015 	stw	r4,0(sp)
  80e8ec:	e0bfef17 	ldw	r2,-68(fp)
  80e8f0:	d8800115 	stw	r2,4(sp)
  80e8f4:	e13fed17 	ldw	r4,-76(fp)
  80e8f8:	e17fec17 	ldw	r5,-80(fp)
  80e8fc:	e1bff117 	ldw	r6,-60(fp)
  80e900:	e1fff017 	ldw	r7,-64(fp)
  80e904:	080e5040 	call	80e504 <helper_plot_pixel>
			error = error + deltay;
  80e908:	e0fff317 	ldw	r3,-52(fp)
  80e90c:	e13ff417 	ldw	r4,-48(fp)
  80e910:	1907883a 	add	r3,r3,r4
  80e914:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  80e918:	e0fff317 	ldw	r3,-52(fp)
  80e91c:	18800050 	cmplti	r2,r3,1
  80e920:	1000081e 	bne	r2,zero,80e944 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  80e924:	e13ff017 	ldw	r4,-64(fp)
  80e928:	e0bff217 	ldw	r2,-56(fp)
  80e92c:	2089883a 	add	r4,r4,r2
  80e930:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  80e934:	e0fff317 	ldw	r3,-52(fp)
  80e938:	e13ff517 	ldw	r4,-44(fp)
  80e93c:	1907c83a 	sub	r3,r3,r4
  80e940:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80e944:	e0bff117 	ldw	r2,-60(fp)
  80e948:	10800044 	addi	r2,r2,1
  80e94c:	e0bff115 	stw	r2,-60(fp)
  80e950:	e0fff817 	ldw	r3,-32(fp)
  80e954:	e13ff117 	ldw	r4,-60(fp)
  80e958:	193fe20e 	bge	r3,r4,80e8e4 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80e95c:	e037883a 	mov	sp,fp
  80e960:	dfc00117 	ldw	ra,4(sp)
  80e964:	df000017 	ldw	fp,0(sp)
  80e968:	dec00204 	addi	sp,sp,8
  80e96c:	f800283a 	ret

0080e970 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80e970:	defff404 	addi	sp,sp,-48
  80e974:	df000b15 	stw	fp,44(sp)
  80e978:	df000b04 	addi	fp,sp,44
  80e97c:	e13ffb15 	stw	r4,-20(fp)
  80e980:	e17ffc15 	stw	r5,-16(fp)
  80e984:	e1bffd15 	stw	r6,-12(fp)
  80e988:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80e98c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e990:	00802074 	movhi	r2,129
  80e994:	108e8e04 	addi	r2,r2,14904
  80e998:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80e99c:	1005003a 	cmpeq	r2,r2,zero
  80e9a0:	1000411e 	bne	r2,zero,80eaa8 <alt_alarm_start+0x138>
  {
    if (alarm)
  80e9a4:	e0bffb17 	ldw	r2,-20(fp)
  80e9a8:	1005003a 	cmpeq	r2,r2,zero
  80e9ac:	10003b1e 	bne	r2,zero,80ea9c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80e9b0:	e0fffb17 	ldw	r3,-20(fp)
  80e9b4:	e0bffd17 	ldw	r2,-12(fp)
  80e9b8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80e9bc:	e0fffb17 	ldw	r3,-20(fp)
  80e9c0:	e0bffe17 	ldw	r2,-8(fp)
  80e9c4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e9c8:	0005303a 	rdctl	r2,status
  80e9cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e9d0:	e0fff817 	ldw	r3,-32(fp)
  80e9d4:	00bfff84 	movi	r2,-2
  80e9d8:	1884703a 	and	r2,r3,r2
  80e9dc:	1001703a 	wrctl	status,r2
  
  return context;
  80e9e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80e9e4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80e9e8:	00802074 	movhi	r2,129
  80e9ec:	108e8f04 	addi	r2,r2,14908
  80e9f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80e9f4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80e9f8:	e0fffc17 	ldw	r3,-16(fp)
  80e9fc:	e0bff917 	ldw	r2,-28(fp)
  80ea00:	1885883a 	add	r2,r3,r2
  80ea04:	10c00044 	addi	r3,r2,1
  80ea08:	e0bffb17 	ldw	r2,-20(fp)
  80ea0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ea10:	e0bffb17 	ldw	r2,-20(fp)
  80ea14:	10c00217 	ldw	r3,8(r2)
  80ea18:	e0bff917 	ldw	r2,-28(fp)
  80ea1c:	1880042e 	bgeu	r3,r2,80ea30 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80ea20:	e0fffb17 	ldw	r3,-20(fp)
  80ea24:	00800044 	movi	r2,1
  80ea28:	18800405 	stb	r2,16(r3)
  80ea2c:	00000206 	br	80ea38 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80ea30:	e0bffb17 	ldw	r2,-20(fp)
  80ea34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ea38:	e0fffb17 	ldw	r3,-20(fp)
  80ea3c:	00802074 	movhi	r2,129
  80ea40:	10872104 	addi	r2,r2,7300
  80ea44:	e0bff615 	stw	r2,-40(fp)
  80ea48:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ea4c:	e0fff717 	ldw	r3,-36(fp)
  80ea50:	e0bff617 	ldw	r2,-40(fp)
  80ea54:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ea58:	e0bff617 	ldw	r2,-40(fp)
  80ea5c:	10c00017 	ldw	r3,0(r2)
  80ea60:	e0bff717 	ldw	r2,-36(fp)
  80ea64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ea68:	e0bff617 	ldw	r2,-40(fp)
  80ea6c:	10c00017 	ldw	r3,0(r2)
  80ea70:	e0bff717 	ldw	r2,-36(fp)
  80ea74:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ea78:	e0fff617 	ldw	r3,-40(fp)
  80ea7c:	e0bff717 	ldw	r2,-36(fp)
  80ea80:	18800015 	stw	r2,0(r3)
  80ea84:	e0bffa17 	ldw	r2,-24(fp)
  80ea88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea8c:	e0bff517 	ldw	r2,-44(fp)
  80ea90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80ea94:	e03fff15 	stw	zero,-4(fp)
  80ea98:	00000506 	br	80eab0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80ea9c:	00bffa84 	movi	r2,-22
  80eaa0:	e0bfff15 	stw	r2,-4(fp)
  80eaa4:	00000206 	br	80eab0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80eaa8:	00bfde84 	movi	r2,-134
  80eaac:	e0bfff15 	stw	r2,-4(fp)
  80eab0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80eab4:	e037883a 	mov	sp,fp
  80eab8:	df000017 	ldw	fp,0(sp)
  80eabc:	dec00104 	addi	sp,sp,4
  80eac0:	f800283a 	ret

0080eac4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80eac4:	defff904 	addi	sp,sp,-28
  80eac8:	dfc00615 	stw	ra,24(sp)
  80eacc:	df000515 	stw	fp,20(sp)
  80ead0:	df000504 	addi	fp,sp,20
  80ead4:	e13ffd15 	stw	r4,-12(fp)
  80ead8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80eadc:	e0bffd17 	ldw	r2,-12(fp)
  80eae0:	1005003a 	cmpeq	r2,r2,zero
  80eae4:	1000041e 	bne	r2,zero,80eaf8 <alt_dev_llist_insert+0x34>
  80eae8:	e0bffd17 	ldw	r2,-12(fp)
  80eaec:	10800217 	ldw	r2,8(r2)
  80eaf0:	1004c03a 	cmpne	r2,r2,zero
  80eaf4:	1000071e 	bne	r2,zero,80eb14 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80eaf8:	080eb780 	call	80eb78 <alt_get_errno>
  80eafc:	1007883a 	mov	r3,r2
  80eb00:	00800584 	movi	r2,22
  80eb04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80eb08:	00bffa84 	movi	r2,-22
  80eb0c:	e0bfff15 	stw	r2,-4(fp)
  80eb10:	00001306 	br	80eb60 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80eb14:	e0fffd17 	ldw	r3,-12(fp)
  80eb18:	e0bffe17 	ldw	r2,-8(fp)
  80eb1c:	e0bffb15 	stw	r2,-20(fp)
  80eb20:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80eb24:	e0fffc17 	ldw	r3,-16(fp)
  80eb28:	e0bffb17 	ldw	r2,-20(fp)
  80eb2c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80eb30:	e0bffb17 	ldw	r2,-20(fp)
  80eb34:	10c00017 	ldw	r3,0(r2)
  80eb38:	e0bffc17 	ldw	r2,-16(fp)
  80eb3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80eb40:	e0bffb17 	ldw	r2,-20(fp)
  80eb44:	10c00017 	ldw	r3,0(r2)
  80eb48:	e0bffc17 	ldw	r2,-16(fp)
  80eb4c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80eb50:	e0fffb17 	ldw	r3,-20(fp)
  80eb54:	e0bffc17 	ldw	r2,-16(fp)
  80eb58:	18800015 	stw	r2,0(r3)

  return 0;  
  80eb5c:	e03fff15 	stw	zero,-4(fp)
  80eb60:	e0bfff17 	ldw	r2,-4(fp)
}
  80eb64:	e037883a 	mov	sp,fp
  80eb68:	dfc00117 	ldw	ra,4(sp)
  80eb6c:	df000017 	ldw	fp,0(sp)
  80eb70:	dec00204 	addi	sp,sp,8
  80eb74:	f800283a 	ret

0080eb78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eb78:	defffd04 	addi	sp,sp,-12
  80eb7c:	dfc00215 	stw	ra,8(sp)
  80eb80:	df000115 	stw	fp,4(sp)
  80eb84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80eb88:	00802074 	movhi	r2,129
  80eb8c:	10871a04 	addi	r2,r2,7272
  80eb90:	10800017 	ldw	r2,0(r2)
  80eb94:	1005003a 	cmpeq	r2,r2,zero
  80eb98:	1000061e 	bne	r2,zero,80ebb4 <alt_get_errno+0x3c>
  80eb9c:	00802074 	movhi	r2,129
  80eba0:	10871a04 	addi	r2,r2,7272
  80eba4:	10800017 	ldw	r2,0(r2)
  80eba8:	103ee83a 	callr	r2
  80ebac:	e0bfff15 	stw	r2,-4(fp)
  80ebb0:	00000306 	br	80ebc0 <alt_get_errno+0x48>
  80ebb4:	00802074 	movhi	r2,129
  80ebb8:	108e8304 	addi	r2,r2,14860
  80ebbc:	e0bfff15 	stw	r2,-4(fp)
  80ebc0:	e0bfff17 	ldw	r2,-4(fp)
}
  80ebc4:	e037883a 	mov	sp,fp
  80ebc8:	dfc00117 	ldw	ra,4(sp)
  80ebcc:	df000017 	ldw	fp,0(sp)
  80ebd0:	dec00204 	addi	sp,sp,8
  80ebd4:	f800283a 	ret

0080ebd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ebd8:	defffd04 	addi	sp,sp,-12
  80ebdc:	dfc00215 	stw	ra,8(sp)
  80ebe0:	df000115 	stw	fp,4(sp)
  80ebe4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ebe8:	00bfff04 	movi	r2,-4
  80ebec:	00c02074 	movhi	r3,129
  80ebf0:	18fea204 	addi	r3,r3,-1400
  80ebf4:	1885883a 	add	r2,r3,r2
  80ebf8:	e0bfff15 	stw	r2,-4(fp)
  80ebfc:	00000606 	br	80ec18 <_do_ctors+0x40>
        (*ctor) (); 
  80ec00:	e0bfff17 	ldw	r2,-4(fp)
  80ec04:	10800017 	ldw	r2,0(r2)
  80ec08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ec0c:	e0bfff17 	ldw	r2,-4(fp)
  80ec10:	10bfff04 	addi	r2,r2,-4
  80ec14:	e0bfff15 	stw	r2,-4(fp)
  80ec18:	e0ffff17 	ldw	r3,-4(fp)
  80ec1c:	00802074 	movhi	r2,129
  80ec20:	10bea104 	addi	r2,r2,-1404
  80ec24:	18bff62e 	bgeu	r3,r2,80ec00 <_do_ctors+0x28>
        (*ctor) (); 
}
  80ec28:	e037883a 	mov	sp,fp
  80ec2c:	dfc00117 	ldw	ra,4(sp)
  80ec30:	df000017 	ldw	fp,0(sp)
  80ec34:	dec00204 	addi	sp,sp,8
  80ec38:	f800283a 	ret

0080ec3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ec3c:	defffd04 	addi	sp,sp,-12
  80ec40:	dfc00215 	stw	ra,8(sp)
  80ec44:	df000115 	stw	fp,4(sp)
  80ec48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ec4c:	00bfff04 	movi	r2,-4
  80ec50:	00c02074 	movhi	r3,129
  80ec54:	18fea204 	addi	r3,r3,-1400
  80ec58:	1885883a 	add	r2,r3,r2
  80ec5c:	e0bfff15 	stw	r2,-4(fp)
  80ec60:	00000606 	br	80ec7c <_do_dtors+0x40>
        (*dtor) (); 
  80ec64:	e0bfff17 	ldw	r2,-4(fp)
  80ec68:	10800017 	ldw	r2,0(r2)
  80ec6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ec70:	e0bfff17 	ldw	r2,-4(fp)
  80ec74:	10bfff04 	addi	r2,r2,-4
  80ec78:	e0bfff15 	stw	r2,-4(fp)
  80ec7c:	e0ffff17 	ldw	r3,-4(fp)
  80ec80:	00802074 	movhi	r2,129
  80ec84:	10bea204 	addi	r2,r2,-1400
  80ec88:	18bff62e 	bgeu	r3,r2,80ec64 <_do_dtors+0x28>
        (*dtor) (); 
}
  80ec8c:	e037883a 	mov	sp,fp
  80ec90:	dfc00117 	ldw	ra,4(sp)
  80ec94:	df000017 	ldw	fp,0(sp)
  80ec98:	dec00204 	addi	sp,sp,8
  80ec9c:	f800283a 	ret

0080eca0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80eca0:	defff904 	addi	sp,sp,-28
  80eca4:	dfc00615 	stw	ra,24(sp)
  80eca8:	df000515 	stw	fp,20(sp)
  80ecac:	df000504 	addi	fp,sp,20
  80ecb0:	e13ffd15 	stw	r4,-12(fp)
  80ecb4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80ecb8:	e0bffe17 	ldw	r2,-8(fp)
  80ecbc:	10800017 	ldw	r2,0(r2)
  80ecc0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80ecc4:	e13ffd17 	ldw	r4,-12(fp)
  80ecc8:	08085800 	call	808580 <strlen>
  80eccc:	10800044 	addi	r2,r2,1
  80ecd0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ecd4:	00000d06 	br	80ed0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80ecd8:	e0bffc17 	ldw	r2,-16(fp)
  80ecdc:	11000217 	ldw	r4,8(r2)
  80ece0:	e1bffb17 	ldw	r6,-20(fp)
  80ece4:	e17ffd17 	ldw	r5,-12(fp)
  80ece8:	080f8700 	call	80f870 <memcmp>
  80ecec:	1004c03a 	cmpne	r2,r2,zero
  80ecf0:	1000031e 	bne	r2,zero,80ed00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80ecf4:	e0bffc17 	ldw	r2,-16(fp)
  80ecf8:	e0bfff15 	stw	r2,-4(fp)
  80ecfc:	00000706 	br	80ed1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80ed00:	e0bffc17 	ldw	r2,-16(fp)
  80ed04:	10800017 	ldw	r2,0(r2)
  80ed08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ed0c:	e0fffe17 	ldw	r3,-8(fp)
  80ed10:	e0bffc17 	ldw	r2,-16(fp)
  80ed14:	10fff01e 	bne	r2,r3,80ecd8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80ed18:	e03fff15 	stw	zero,-4(fp)
  80ed1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed20:	e037883a 	mov	sp,fp
  80ed24:	dfc00117 	ldw	ra,4(sp)
  80ed28:	df000017 	ldw	fp,0(sp)
  80ed2c:	dec00204 	addi	sp,sp,8
  80ed30:	f800283a 	ret

0080ed34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80ed34:	defffe04 	addi	sp,sp,-8
  80ed38:	dfc00115 	stw	ra,4(sp)
  80ed3c:	df000015 	stw	fp,0(sp)
  80ed40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80ed44:	0009883a 	mov	r4,zero
  80ed48:	01440004 	movi	r5,4096
  80ed4c:	080f7cc0 	call	80f7cc <alt_icache_flush>
#endif
}
  80ed50:	e037883a 	mov	sp,fp
  80ed54:	dfc00117 	ldw	ra,4(sp)
  80ed58:	df000017 	ldw	fp,0(sp)
  80ed5c:	dec00204 	addi	sp,sp,8
  80ed60:	f800283a 	ret

0080ed64 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ed64:	defff904 	addi	sp,sp,-28
  80ed68:	dfc00615 	stw	ra,24(sp)
  80ed6c:	df000515 	stw	fp,20(sp)
  80ed70:	df000504 	addi	fp,sp,20
  80ed74:	e13ffc15 	stw	r4,-16(fp)
  80ed78:	e17ffd15 	stw	r5,-12(fp)
  80ed7c:	e1bffe15 	stw	r6,-8(fp)
  80ed80:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80ed84:	e0800217 	ldw	r2,8(fp)
  80ed88:	d8800015 	stw	r2,0(sp)
  80ed8c:	e13ffc17 	ldw	r4,-16(fp)
  80ed90:	e17ffd17 	ldw	r5,-12(fp)
  80ed94:	e1bffe17 	ldw	r6,-8(fp)
  80ed98:	e1ffff17 	ldw	r7,-4(fp)
  80ed9c:	080ef380 	call	80ef38 <alt_iic_isr_register>
}  
  80eda0:	e037883a 	mov	sp,fp
  80eda4:	dfc00117 	ldw	ra,4(sp)
  80eda8:	df000017 	ldw	fp,0(sp)
  80edac:	dec00204 	addi	sp,sp,8
  80edb0:	f800283a 	ret

0080edb4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80edb4:	defff904 	addi	sp,sp,-28
  80edb8:	df000615 	stw	fp,24(sp)
  80edbc:	df000604 	addi	fp,sp,24
  80edc0:	e13ffe15 	stw	r4,-8(fp)
  80edc4:	e17fff15 	stw	r5,-4(fp)
  80edc8:	e0bfff17 	ldw	r2,-4(fp)
  80edcc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edd0:	0005303a 	rdctl	r2,status
  80edd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edd8:	e0fffb17 	ldw	r3,-20(fp)
  80eddc:	00bfff84 	movi	r2,-2
  80ede0:	1884703a 	and	r2,r3,r2
  80ede4:	1001703a 	wrctl	status,r2
  
  return context;
  80ede8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80edec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80edf0:	e0fffc17 	ldw	r3,-16(fp)
  80edf4:	00800044 	movi	r2,1
  80edf8:	10c4983a 	sll	r2,r2,r3
  80edfc:	1007883a 	mov	r3,r2
  80ee00:	00802074 	movhi	r2,129
  80ee04:	108e8a04 	addi	r2,r2,14888
  80ee08:	10800017 	ldw	r2,0(r2)
  80ee0c:	1886b03a 	or	r3,r3,r2
  80ee10:	00802074 	movhi	r2,129
  80ee14:	108e8a04 	addi	r2,r2,14888
  80ee18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ee1c:	00802074 	movhi	r2,129
  80ee20:	108e8a04 	addi	r2,r2,14888
  80ee24:	10800017 	ldw	r2,0(r2)
  80ee28:	100170fa 	wrctl	ienable,r2
  80ee2c:	e0bffd17 	ldw	r2,-12(fp)
  80ee30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee34:	e0bffa17 	ldw	r2,-24(fp)
  80ee38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ee3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80ee40:	e037883a 	mov	sp,fp
  80ee44:	df000017 	ldw	fp,0(sp)
  80ee48:	dec00104 	addi	sp,sp,4
  80ee4c:	f800283a 	ret

0080ee50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ee50:	defff904 	addi	sp,sp,-28
  80ee54:	df000615 	stw	fp,24(sp)
  80ee58:	df000604 	addi	fp,sp,24
  80ee5c:	e13ffe15 	stw	r4,-8(fp)
  80ee60:	e17fff15 	stw	r5,-4(fp)
  80ee64:	e0bfff17 	ldw	r2,-4(fp)
  80ee68:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee6c:	0005303a 	rdctl	r2,status
  80ee70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee74:	e0fffb17 	ldw	r3,-20(fp)
  80ee78:	00bfff84 	movi	r2,-2
  80ee7c:	1884703a 	and	r2,r3,r2
  80ee80:	1001703a 	wrctl	status,r2
  
  return context;
  80ee84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ee88:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80ee8c:	e0fffc17 	ldw	r3,-16(fp)
  80ee90:	00800044 	movi	r2,1
  80ee94:	10c4983a 	sll	r2,r2,r3
  80ee98:	0084303a 	nor	r2,zero,r2
  80ee9c:	1007883a 	mov	r3,r2
  80eea0:	00802074 	movhi	r2,129
  80eea4:	108e8a04 	addi	r2,r2,14888
  80eea8:	10800017 	ldw	r2,0(r2)
  80eeac:	1886703a 	and	r3,r3,r2
  80eeb0:	00802074 	movhi	r2,129
  80eeb4:	108e8a04 	addi	r2,r2,14888
  80eeb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80eebc:	00802074 	movhi	r2,129
  80eec0:	108e8a04 	addi	r2,r2,14888
  80eec4:	10800017 	ldw	r2,0(r2)
  80eec8:	100170fa 	wrctl	ienable,r2
  80eecc:	e0bffd17 	ldw	r2,-12(fp)
  80eed0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eed4:	e0bffa17 	ldw	r2,-24(fp)
  80eed8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80eedc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80eee0:	e037883a 	mov	sp,fp
  80eee4:	df000017 	ldw	fp,0(sp)
  80eee8:	dec00104 	addi	sp,sp,4
  80eeec:	f800283a 	ret

0080eef0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80eef0:	defffc04 	addi	sp,sp,-16
  80eef4:	df000315 	stw	fp,12(sp)
  80eef8:	df000304 	addi	fp,sp,12
  80eefc:	e13ffe15 	stw	r4,-8(fp)
  80ef00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80ef04:	000530fa 	rdctl	r2,ienable
  80ef08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80ef0c:	e0ffff17 	ldw	r3,-4(fp)
  80ef10:	00800044 	movi	r2,1
  80ef14:	10c4983a 	sll	r2,r2,r3
  80ef18:	1007883a 	mov	r3,r2
  80ef1c:	e0bffd17 	ldw	r2,-12(fp)
  80ef20:	1884703a 	and	r2,r3,r2
  80ef24:	1004c03a 	cmpne	r2,r2,zero
}
  80ef28:	e037883a 	mov	sp,fp
  80ef2c:	df000017 	ldw	fp,0(sp)
  80ef30:	dec00104 	addi	sp,sp,4
  80ef34:	f800283a 	ret

0080ef38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ef38:	defff404 	addi	sp,sp,-48
  80ef3c:	dfc00b15 	stw	ra,44(sp)
  80ef40:	df000a15 	stw	fp,40(sp)
  80ef44:	df000a04 	addi	fp,sp,40
  80ef48:	e13ffb15 	stw	r4,-20(fp)
  80ef4c:	e17ffc15 	stw	r5,-16(fp)
  80ef50:	e1bffd15 	stw	r6,-12(fp)
  80ef54:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80ef58:	00bffa84 	movi	r2,-22
  80ef5c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ef60:	e0bffc17 	ldw	r2,-16(fp)
  80ef64:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ef68:	e0bff917 	ldw	r2,-28(fp)
  80ef6c:	10800808 	cmpgei	r2,r2,32
  80ef70:	1000291e 	bne	r2,zero,80f018 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef74:	0005303a 	rdctl	r2,status
  80ef78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef7c:	e0fff717 	ldw	r3,-36(fp)
  80ef80:	00bfff84 	movi	r2,-2
  80ef84:	1884703a 	and	r2,r3,r2
  80ef88:	1001703a 	wrctl	status,r2
  
  return context;
  80ef8c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80ef90:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80ef94:	e0bff917 	ldw	r2,-28(fp)
  80ef98:	00c02074 	movhi	r3,129
  80ef9c:	18ce9a04 	addi	r3,r3,14952
  80efa0:	100490fa 	slli	r2,r2,3
  80efa4:	10c7883a 	add	r3,r2,r3
  80efa8:	e0bffd17 	ldw	r2,-12(fp)
  80efac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80efb0:	e0bff917 	ldw	r2,-28(fp)
  80efb4:	00c02074 	movhi	r3,129
  80efb8:	18ce9a04 	addi	r3,r3,14952
  80efbc:	100490fa 	slli	r2,r2,3
  80efc0:	10c5883a 	add	r2,r2,r3
  80efc4:	10c00104 	addi	r3,r2,4
  80efc8:	e0bffe17 	ldw	r2,-8(fp)
  80efcc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80efd0:	e0bffd17 	ldw	r2,-12(fp)
  80efd4:	1005003a 	cmpeq	r2,r2,zero
  80efd8:	1000051e 	bne	r2,zero,80eff0 <alt_iic_isr_register+0xb8>
  80efdc:	e17ff917 	ldw	r5,-28(fp)
  80efe0:	e13ffb17 	ldw	r4,-20(fp)
  80efe4:	080edb40 	call	80edb4 <alt_ic_irq_enable>
  80efe8:	e0bfff15 	stw	r2,-4(fp)
  80efec:	00000406 	br	80f000 <alt_iic_isr_register+0xc8>
  80eff0:	e17ff917 	ldw	r5,-28(fp)
  80eff4:	e13ffb17 	ldw	r4,-20(fp)
  80eff8:	080ee500 	call	80ee50 <alt_ic_irq_disable>
  80effc:	e0bfff15 	stw	r2,-4(fp)
  80f000:	e0bfff17 	ldw	r2,-4(fp)
  80f004:	e0bffa15 	stw	r2,-24(fp)
  80f008:	e0bff817 	ldw	r2,-32(fp)
  80f00c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f010:	e0bff617 	ldw	r2,-40(fp)
  80f014:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80f018:	e0bffa17 	ldw	r2,-24(fp)
}
  80f01c:	e037883a 	mov	sp,fp
  80f020:	dfc00117 	ldw	ra,4(sp)
  80f024:	df000017 	ldw	fp,0(sp)
  80f028:	dec00204 	addi	sp,sp,8
  80f02c:	f800283a 	ret

0080f030 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f030:	defff904 	addi	sp,sp,-28
  80f034:	dfc00615 	stw	ra,24(sp)
  80f038:	df000515 	stw	fp,20(sp)
  80f03c:	df000504 	addi	fp,sp,20
  80f040:	e13ffc15 	stw	r4,-16(fp)
  80f044:	e17ffd15 	stw	r5,-12(fp)
  80f048:	e1bffe15 	stw	r6,-8(fp)
  80f04c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f050:	e13ffd17 	ldw	r4,-12(fp)
  80f054:	e17ffe17 	ldw	r5,-8(fp)
  80f058:	e1bfff17 	ldw	r6,-4(fp)
  80f05c:	080f2480 	call	80f248 <open>
  80f060:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f064:	e0bffb17 	ldw	r2,-20(fp)
  80f068:	1004803a 	cmplt	r2,r2,zero
  80f06c:	10001c1e 	bne	r2,zero,80f0e0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f070:	e0bffb17 	ldw	r2,-20(fp)
  80f074:	00c02074 	movhi	r3,129
  80f078:	18c25904 	addi	r3,r3,2404
  80f07c:	10800324 	muli	r2,r2,12
  80f080:	10c5883a 	add	r2,r2,r3
  80f084:	10c00017 	ldw	r3,0(r2)
  80f088:	e0bffc17 	ldw	r2,-16(fp)
  80f08c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f090:	e0bffb17 	ldw	r2,-20(fp)
  80f094:	00c02074 	movhi	r3,129
  80f098:	18c25904 	addi	r3,r3,2404
  80f09c:	10800324 	muli	r2,r2,12
  80f0a0:	10c5883a 	add	r2,r2,r3
  80f0a4:	10800104 	addi	r2,r2,4
  80f0a8:	10c00017 	ldw	r3,0(r2)
  80f0ac:	e0bffc17 	ldw	r2,-16(fp)
  80f0b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f0b4:	e0bffb17 	ldw	r2,-20(fp)
  80f0b8:	00c02074 	movhi	r3,129
  80f0bc:	18c25904 	addi	r3,r3,2404
  80f0c0:	10800324 	muli	r2,r2,12
  80f0c4:	10c5883a 	add	r2,r2,r3
  80f0c8:	10800204 	addi	r2,r2,8
  80f0cc:	10c00017 	ldw	r3,0(r2)
  80f0d0:	e0bffc17 	ldw	r2,-16(fp)
  80f0d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80f0d8:	e13ffb17 	ldw	r4,-20(fp)
  80f0dc:	080baac0 	call	80baac <alt_release_fd>
  }
} 
  80f0e0:	e037883a 	mov	sp,fp
  80f0e4:	dfc00117 	ldw	ra,4(sp)
  80f0e8:	df000017 	ldw	fp,0(sp)
  80f0ec:	dec00204 	addi	sp,sp,8
  80f0f0:	f800283a 	ret

0080f0f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f0f4:	defffb04 	addi	sp,sp,-20
  80f0f8:	dfc00415 	stw	ra,16(sp)
  80f0fc:	df000315 	stw	fp,12(sp)
  80f100:	df000304 	addi	fp,sp,12
  80f104:	e13ffd15 	stw	r4,-12(fp)
  80f108:	e17ffe15 	stw	r5,-8(fp)
  80f10c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f110:	01002074 	movhi	r4,129
  80f114:	21025c04 	addi	r4,r4,2416
  80f118:	e17ffd17 	ldw	r5,-12(fp)
  80f11c:	01800044 	movi	r6,1
  80f120:	01c07fc4 	movi	r7,511
  80f124:	080f0300 	call	80f030 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f128:	01002074 	movhi	r4,129
  80f12c:	21025904 	addi	r4,r4,2404
  80f130:	e17ffe17 	ldw	r5,-8(fp)
  80f134:	000d883a 	mov	r6,zero
  80f138:	01c07fc4 	movi	r7,511
  80f13c:	080f0300 	call	80f030 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f140:	01002074 	movhi	r4,129
  80f144:	21025f04 	addi	r4,r4,2428
  80f148:	e17fff17 	ldw	r5,-4(fp)
  80f14c:	01800044 	movi	r6,1
  80f150:	01c07fc4 	movi	r7,511
  80f154:	080f0300 	call	80f030 <alt_open_fd>
}  
  80f158:	e037883a 	mov	sp,fp
  80f15c:	dfc00117 	ldw	ra,4(sp)
  80f160:	df000017 	ldw	fp,0(sp)
  80f164:	dec00204 	addi	sp,sp,8
  80f168:	f800283a 	ret

0080f16c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f16c:	defffc04 	addi	sp,sp,-16
  80f170:	df000315 	stw	fp,12(sp)
  80f174:	df000304 	addi	fp,sp,12
  80f178:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f17c:	e0bffe17 	ldw	r2,-8(fp)
  80f180:	10800217 	ldw	r2,8(r2)
  80f184:	10d00034 	orhi	r3,r2,16384
  80f188:	e0bffe17 	ldw	r2,-8(fp)
  80f18c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f190:	e03ffd15 	stw	zero,-12(fp)
  80f194:	00002006 	br	80f218 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f198:	e0bffd17 	ldw	r2,-12(fp)
  80f19c:	00c02074 	movhi	r3,129
  80f1a0:	18c25904 	addi	r3,r3,2404
  80f1a4:	10800324 	muli	r2,r2,12
  80f1a8:	10c5883a 	add	r2,r2,r3
  80f1ac:	10c00017 	ldw	r3,0(r2)
  80f1b0:	e0bffe17 	ldw	r2,-8(fp)
  80f1b4:	10800017 	ldw	r2,0(r2)
  80f1b8:	1880141e 	bne	r3,r2,80f20c <alt_file_locked+0xa0>
  80f1bc:	e0bffd17 	ldw	r2,-12(fp)
  80f1c0:	00c02074 	movhi	r3,129
  80f1c4:	18c25904 	addi	r3,r3,2404
  80f1c8:	10800324 	muli	r2,r2,12
  80f1cc:	10c5883a 	add	r2,r2,r3
  80f1d0:	10800204 	addi	r2,r2,8
  80f1d4:	10800017 	ldw	r2,0(r2)
  80f1d8:	1004403a 	cmpge	r2,r2,zero
  80f1dc:	10000b1e 	bne	r2,zero,80f20c <alt_file_locked+0xa0>
  80f1e0:	e0bffd17 	ldw	r2,-12(fp)
  80f1e4:	10800324 	muli	r2,r2,12
  80f1e8:	1007883a 	mov	r3,r2
  80f1ec:	00802074 	movhi	r2,129
  80f1f0:	10825904 	addi	r2,r2,2404
  80f1f4:	1887883a 	add	r3,r3,r2
  80f1f8:	e0bffe17 	ldw	r2,-8(fp)
  80f1fc:	18800326 	beq	r3,r2,80f20c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f200:	00bffcc4 	movi	r2,-13
  80f204:	e0bfff15 	stw	r2,-4(fp)
  80f208:	00000a06 	br	80f234 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f20c:	e0bffd17 	ldw	r2,-12(fp)
  80f210:	10800044 	addi	r2,r2,1
  80f214:	e0bffd15 	stw	r2,-12(fp)
  80f218:	00802074 	movhi	r2,129
  80f21c:	10871904 	addi	r2,r2,7268
  80f220:	10800017 	ldw	r2,0(r2)
  80f224:	1007883a 	mov	r3,r2
  80f228:	e0bffd17 	ldw	r2,-12(fp)
  80f22c:	18bfda2e 	bgeu	r3,r2,80f198 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f230:	e03fff15 	stw	zero,-4(fp)
  80f234:	e0bfff17 	ldw	r2,-4(fp)
}
  80f238:	e037883a 	mov	sp,fp
  80f23c:	df000017 	ldw	fp,0(sp)
  80f240:	dec00104 	addi	sp,sp,4
  80f244:	f800283a 	ret

0080f248 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f248:	defff404 	addi	sp,sp,-48
  80f24c:	dfc00b15 	stw	ra,44(sp)
  80f250:	df000a15 	stw	fp,40(sp)
  80f254:	df000a04 	addi	fp,sp,40
  80f258:	e13ffb15 	stw	r4,-20(fp)
  80f25c:	e17ffc15 	stw	r5,-16(fp)
  80f260:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f264:	00bfffc4 	movi	r2,-1
  80f268:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80f26c:	00bffb44 	movi	r2,-19
  80f270:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80f274:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f278:	e13ffb17 	ldw	r4,-20(fp)
  80f27c:	01402074 	movhi	r5,129
  80f280:	29471704 	addi	r5,r5,7260
  80f284:	080eca00 	call	80eca0 <alt_find_dev>
  80f288:	e0bffa15 	stw	r2,-24(fp)
  80f28c:	e0bffa17 	ldw	r2,-24(fp)
  80f290:	1004c03a 	cmpne	r2,r2,zero
  80f294:	1000051e 	bne	r2,zero,80f2ac <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f298:	e13ffb17 	ldw	r4,-20(fp)
  80f29c:	080f5f40 	call	80f5f4 <alt_find_file>
  80f2a0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80f2a4:	00800044 	movi	r2,1
  80f2a8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f2ac:	e0bffa17 	ldw	r2,-24(fp)
  80f2b0:	1005003a 	cmpeq	r2,r2,zero
  80f2b4:	1000301e 	bne	r2,zero,80f378 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f2b8:	e13ffa17 	ldw	r4,-24(fp)
  80f2bc:	080f7140 	call	80f714 <alt_get_fd>
  80f2c0:	e0bff815 	stw	r2,-32(fp)
  80f2c4:	e0bff817 	ldw	r2,-32(fp)
  80f2c8:	1004403a 	cmpge	r2,r2,zero
  80f2cc:	1000031e 	bne	r2,zero,80f2dc <open+0x94>
    {
      status = index;
  80f2d0:	e0bff817 	ldw	r2,-32(fp)
  80f2d4:	e0bff715 	stw	r2,-36(fp)
  80f2d8:	00002906 	br	80f380 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f2dc:	e0bff817 	ldw	r2,-32(fp)
  80f2e0:	10800324 	muli	r2,r2,12
  80f2e4:	1007883a 	mov	r3,r2
  80f2e8:	00802074 	movhi	r2,129
  80f2ec:	10825904 	addi	r2,r2,2404
  80f2f0:	1885883a 	add	r2,r3,r2
  80f2f4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f2f8:	e0fffc17 	ldw	r3,-16(fp)
  80f2fc:	00900034 	movhi	r2,16384
  80f300:	10bfffc4 	addi	r2,r2,-1
  80f304:	1886703a 	and	r3,r3,r2
  80f308:	e0bff917 	ldw	r2,-28(fp)
  80f30c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f310:	e0bff617 	ldw	r2,-40(fp)
  80f314:	1004c03a 	cmpne	r2,r2,zero
  80f318:	1000061e 	bne	r2,zero,80f334 <open+0xec>
  80f31c:	e13ff917 	ldw	r4,-28(fp)
  80f320:	080f16c0 	call	80f16c <alt_file_locked>
  80f324:	e0bff715 	stw	r2,-36(fp)
  80f328:	e0bff717 	ldw	r2,-36(fp)
  80f32c:	1004803a 	cmplt	r2,r2,zero
  80f330:	1000131e 	bne	r2,zero,80f380 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f334:	e0bffa17 	ldw	r2,-24(fp)
  80f338:	10800317 	ldw	r2,12(r2)
  80f33c:	1005003a 	cmpeq	r2,r2,zero
  80f340:	1000091e 	bne	r2,zero,80f368 <open+0x120>
  80f344:	e0bffa17 	ldw	r2,-24(fp)
  80f348:	10800317 	ldw	r2,12(r2)
  80f34c:	e13ff917 	ldw	r4,-28(fp)
  80f350:	e17ffb17 	ldw	r5,-20(fp)
  80f354:	e1bffc17 	ldw	r6,-16(fp)
  80f358:	e1fffd17 	ldw	r7,-12(fp)
  80f35c:	103ee83a 	callr	r2
  80f360:	e0bfff15 	stw	r2,-4(fp)
  80f364:	00000106 	br	80f36c <open+0x124>
  80f368:	e03fff15 	stw	zero,-4(fp)
  80f36c:	e0bfff17 	ldw	r2,-4(fp)
  80f370:	e0bff715 	stw	r2,-36(fp)
  80f374:	00000206 	br	80f380 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f378:	00bffb44 	movi	r2,-19
  80f37c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f380:	e0bff717 	ldw	r2,-36(fp)
  80f384:	1004403a 	cmpge	r2,r2,zero
  80f388:	1000091e 	bne	r2,zero,80f3b0 <open+0x168>
  {
    alt_release_fd (index);  
  80f38c:	e13ff817 	ldw	r4,-32(fp)
  80f390:	080baac0 	call	80baac <alt_release_fd>
    ALT_ERRNO = -status;
  80f394:	080f3d00 	call	80f3d0 <alt_get_errno>
  80f398:	e0fff717 	ldw	r3,-36(fp)
  80f39c:	00c7c83a 	sub	r3,zero,r3
  80f3a0:	10c00015 	stw	r3,0(r2)
    return -1;
  80f3a4:	00bfffc4 	movi	r2,-1
  80f3a8:	e0bffe15 	stw	r2,-8(fp)
  80f3ac:	00000206 	br	80f3b8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80f3b0:	e0bff817 	ldw	r2,-32(fp)
  80f3b4:	e0bffe15 	stw	r2,-8(fp)
  80f3b8:	e0bffe17 	ldw	r2,-8(fp)
}
  80f3bc:	e037883a 	mov	sp,fp
  80f3c0:	dfc00117 	ldw	ra,4(sp)
  80f3c4:	df000017 	ldw	fp,0(sp)
  80f3c8:	dec00204 	addi	sp,sp,8
  80f3cc:	f800283a 	ret

0080f3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f3d0:	defffd04 	addi	sp,sp,-12
  80f3d4:	dfc00215 	stw	ra,8(sp)
  80f3d8:	df000115 	stw	fp,4(sp)
  80f3dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f3e0:	00802074 	movhi	r2,129
  80f3e4:	10871a04 	addi	r2,r2,7272
  80f3e8:	10800017 	ldw	r2,0(r2)
  80f3ec:	1005003a 	cmpeq	r2,r2,zero
  80f3f0:	1000061e 	bne	r2,zero,80f40c <alt_get_errno+0x3c>
  80f3f4:	00802074 	movhi	r2,129
  80f3f8:	10871a04 	addi	r2,r2,7272
  80f3fc:	10800017 	ldw	r2,0(r2)
  80f400:	103ee83a 	callr	r2
  80f404:	e0bfff15 	stw	r2,-4(fp)
  80f408:	00000306 	br	80f418 <alt_get_errno+0x48>
  80f40c:	00802074 	movhi	r2,129
  80f410:	108e8304 	addi	r2,r2,14860
  80f414:	e0bfff15 	stw	r2,-4(fp)
  80f418:	e0bfff17 	ldw	r2,-4(fp)
}
  80f41c:	e037883a 	mov	sp,fp
  80f420:	dfc00117 	ldw	ra,4(sp)
  80f424:	df000017 	ldw	fp,0(sp)
  80f428:	dec00204 	addi	sp,sp,8
  80f42c:	f800283a 	ret

0080f430 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80f430:	defffa04 	addi	sp,sp,-24
  80f434:	df000515 	stw	fp,20(sp)
  80f438:	df000504 	addi	fp,sp,20
  80f43c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f440:	0005303a 	rdctl	r2,status
  80f444:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f448:	e0fffd17 	ldw	r3,-12(fp)
  80f44c:	00bfff84 	movi	r2,-2
  80f450:	1884703a 	and	r2,r3,r2
  80f454:	1001703a 	wrctl	status,r2
  
  return context;
  80f458:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80f45c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80f460:	e0bfff17 	ldw	r2,-4(fp)
  80f464:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80f468:	e0bffc17 	ldw	r2,-16(fp)
  80f46c:	10c00017 	ldw	r3,0(r2)
  80f470:	e0bffc17 	ldw	r2,-16(fp)
  80f474:	10800117 	ldw	r2,4(r2)
  80f478:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80f47c:	e0bffc17 	ldw	r2,-16(fp)
  80f480:	10c00117 	ldw	r3,4(r2)
  80f484:	e0bffc17 	ldw	r2,-16(fp)
  80f488:	10800017 	ldw	r2,0(r2)
  80f48c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80f490:	e0fffc17 	ldw	r3,-16(fp)
  80f494:	e0bffc17 	ldw	r2,-16(fp)
  80f498:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80f49c:	e0fffc17 	ldw	r3,-16(fp)
  80f4a0:	e0bffc17 	ldw	r2,-16(fp)
  80f4a4:	18800015 	stw	r2,0(r3)
  80f4a8:	e0bffe17 	ldw	r2,-8(fp)
  80f4ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4b0:	e0bffb17 	ldw	r2,-20(fp)
  80f4b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80f4b8:	e037883a 	mov	sp,fp
  80f4bc:	df000017 	ldw	fp,0(sp)
  80f4c0:	dec00104 	addi	sp,sp,4
  80f4c4:	f800283a 	ret

0080f4c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80f4c8:	defffb04 	addi	sp,sp,-20
  80f4cc:	dfc00415 	stw	ra,16(sp)
  80f4d0:	df000315 	stw	fp,12(sp)
  80f4d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80f4d8:	d0a01217 	ldw	r2,-32696(gp)
  80f4dc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80f4e0:	d0a78017 	ldw	r2,-25088(gp)
  80f4e4:	10800044 	addi	r2,r2,1
  80f4e8:	d0a78015 	stw	r2,-25088(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f4ec:	00003106 	br	80f5b4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80f4f0:	e0bffe17 	ldw	r2,-8(fp)
  80f4f4:	10800017 	ldw	r2,0(r2)
  80f4f8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80f4fc:	e0bffe17 	ldw	r2,-8(fp)
  80f500:	10800403 	ldbu	r2,16(r2)
  80f504:	10803fcc 	andi	r2,r2,255
  80f508:	1005003a 	cmpeq	r2,r2,zero
  80f50c:	1000051e 	bne	r2,zero,80f524 <alt_tick+0x5c>
  80f510:	d0a78017 	ldw	r2,-25088(gp)
  80f514:	1004c03a 	cmpne	r2,r2,zero
  80f518:	1000021e 	bne	r2,zero,80f524 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80f51c:	e0bffe17 	ldw	r2,-8(fp)
  80f520:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80f524:	e0bffe17 	ldw	r2,-8(fp)
  80f528:	10c00217 	ldw	r3,8(r2)
  80f52c:	d0a78017 	ldw	r2,-25088(gp)
  80f530:	10c01e36 	bltu	r2,r3,80f5ac <alt_tick+0xe4>
  80f534:	e0bffe17 	ldw	r2,-8(fp)
  80f538:	10800403 	ldbu	r2,16(r2)
  80f53c:	10803fcc 	andi	r2,r2,255
  80f540:	1004c03a 	cmpne	r2,r2,zero
  80f544:	1000191e 	bne	r2,zero,80f5ac <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80f548:	e0bffe17 	ldw	r2,-8(fp)
  80f54c:	10c00317 	ldw	r3,12(r2)
  80f550:	e0bffe17 	ldw	r2,-8(fp)
  80f554:	11000517 	ldw	r4,20(r2)
  80f558:	183ee83a 	callr	r3
  80f55c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80f560:	e0bffd17 	ldw	r2,-12(fp)
  80f564:	1004c03a 	cmpne	r2,r2,zero
  80f568:	1000031e 	bne	r2,zero,80f578 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80f56c:	e13ffe17 	ldw	r4,-8(fp)
  80f570:	080f4300 	call	80f430 <alt_alarm_stop>
  80f574:	00000d06 	br	80f5ac <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80f578:	e0bffe17 	ldw	r2,-8(fp)
  80f57c:	10c00217 	ldw	r3,8(r2)
  80f580:	e0bffd17 	ldw	r2,-12(fp)
  80f584:	1887883a 	add	r3,r3,r2
  80f588:	e0bffe17 	ldw	r2,-8(fp)
  80f58c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80f590:	e0bffe17 	ldw	r2,-8(fp)
  80f594:	10c00217 	ldw	r3,8(r2)
  80f598:	d0a78017 	ldw	r2,-25088(gp)
  80f59c:	1880032e 	bgeu	r3,r2,80f5ac <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80f5a0:	e0fffe17 	ldw	r3,-8(fp)
  80f5a4:	00800044 	movi	r2,1
  80f5a8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80f5ac:	e0bfff17 	ldw	r2,-4(fp)
  80f5b0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f5b4:	d0e01204 	addi	r3,gp,-32696
  80f5b8:	e0bffe17 	ldw	r2,-8(fp)
  80f5bc:	10ffcc1e 	bne	r2,r3,80f4f0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80f5c0:	e037883a 	mov	sp,fp
  80f5c4:	dfc00117 	ldw	ra,4(sp)
  80f5c8:	df000017 	ldw	fp,0(sp)
  80f5cc:	dec00204 	addi	sp,sp,8
  80f5d0:	f800283a 	ret

0080f5d4 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  80f5d4:	deffff04 	addi	sp,sp,-4
  80f5d8:	df000015 	stw	fp,0(sp)
  80f5dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80f5e0:	000170fa 	wrctl	ienable,zero
}
  80f5e4:	e037883a 	mov	sp,fp
  80f5e8:	df000017 	ldw	fp,0(sp)
  80f5ec:	dec00104 	addi	sp,sp,4
  80f5f0:	f800283a 	ret

0080f5f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f5f4:	defffa04 	addi	sp,sp,-24
  80f5f8:	dfc00515 	stw	ra,20(sp)
  80f5fc:	df000415 	stw	fp,16(sp)
  80f600:	df000404 	addi	fp,sp,16
  80f604:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f608:	00802074 	movhi	r2,129
  80f60c:	10871504 	addi	r2,r2,7252
  80f610:	10800017 	ldw	r2,0(r2)
  80f614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f618:	00003306 	br	80f6e8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80f61c:	e0bffd17 	ldw	r2,-12(fp)
  80f620:	11000217 	ldw	r4,8(r2)
  80f624:	08085800 	call	808580 <strlen>
  80f628:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80f62c:	e0bffd17 	ldw	r2,-12(fp)
  80f630:	10c00217 	ldw	r3,8(r2)
  80f634:	e0bffc17 	ldw	r2,-16(fp)
  80f638:	1885883a 	add	r2,r3,r2
  80f63c:	10bfffc4 	addi	r2,r2,-1
  80f640:	10800003 	ldbu	r2,0(r2)
  80f644:	10803fcc 	andi	r2,r2,255
  80f648:	1080201c 	xori	r2,r2,128
  80f64c:	10bfe004 	addi	r2,r2,-128
  80f650:	10800bd8 	cmpnei	r2,r2,47
  80f654:	1000031e 	bne	r2,zero,80f664 <alt_find_file+0x70>
    {
      len -= 1;
  80f658:	e0bffc17 	ldw	r2,-16(fp)
  80f65c:	10bfffc4 	addi	r2,r2,-1
  80f660:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f664:	e0bffc17 	ldw	r2,-16(fp)
  80f668:	1007883a 	mov	r3,r2
  80f66c:	e0bffe17 	ldw	r2,-8(fp)
  80f670:	1885883a 	add	r2,r3,r2
  80f674:	10800003 	ldbu	r2,0(r2)
  80f678:	10803fcc 	andi	r2,r2,255
  80f67c:	1080201c 	xori	r2,r2,128
  80f680:	10bfe004 	addi	r2,r2,-128
  80f684:	10800be0 	cmpeqi	r2,r2,47
  80f688:	10000a1e 	bne	r2,zero,80f6b4 <alt_find_file+0xc0>
  80f68c:	e0bffc17 	ldw	r2,-16(fp)
  80f690:	1007883a 	mov	r3,r2
  80f694:	e0bffe17 	ldw	r2,-8(fp)
  80f698:	1885883a 	add	r2,r3,r2
  80f69c:	10800003 	ldbu	r2,0(r2)
  80f6a0:	10803fcc 	andi	r2,r2,255
  80f6a4:	1080201c 	xori	r2,r2,128
  80f6a8:	10bfe004 	addi	r2,r2,-128
  80f6ac:	1004c03a 	cmpne	r2,r2,zero
  80f6b0:	10000a1e 	bne	r2,zero,80f6dc <alt_find_file+0xe8>
  80f6b4:	e0bffd17 	ldw	r2,-12(fp)
  80f6b8:	11000217 	ldw	r4,8(r2)
  80f6bc:	e1bffc17 	ldw	r6,-16(fp)
  80f6c0:	e17ffe17 	ldw	r5,-8(fp)
  80f6c4:	080f8700 	call	80f870 <memcmp>
  80f6c8:	1004c03a 	cmpne	r2,r2,zero
  80f6cc:	1000031e 	bne	r2,zero,80f6dc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f6d0:	e0bffd17 	ldw	r2,-12(fp)
  80f6d4:	e0bfff15 	stw	r2,-4(fp)
  80f6d8:	00000806 	br	80f6fc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80f6dc:	e0bffd17 	ldw	r2,-12(fp)
  80f6e0:	10800017 	ldw	r2,0(r2)
  80f6e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f6e8:	00c02074 	movhi	r3,129
  80f6ec:	18c71504 	addi	r3,r3,7252
  80f6f0:	e0bffd17 	ldw	r2,-12(fp)
  80f6f4:	10ffc91e 	bne	r2,r3,80f61c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f6f8:	e03fff15 	stw	zero,-4(fp)
  80f6fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f700:	e037883a 	mov	sp,fp
  80f704:	dfc00117 	ldw	ra,4(sp)
  80f708:	df000017 	ldw	fp,0(sp)
  80f70c:	dec00204 	addi	sp,sp,8
  80f710:	f800283a 	ret

0080f714 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f714:	defffc04 	addi	sp,sp,-16
  80f718:	df000315 	stw	fp,12(sp)
  80f71c:	df000304 	addi	fp,sp,12
  80f720:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f724:	00bffa04 	movi	r2,-24
  80f728:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f72c:	e03ffe15 	stw	zero,-8(fp)
  80f730:	00001e06 	br	80f7ac <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80f734:	e0bffe17 	ldw	r2,-8(fp)
  80f738:	00c02074 	movhi	r3,129
  80f73c:	18c25904 	addi	r3,r3,2404
  80f740:	10800324 	muli	r2,r2,12
  80f744:	10c5883a 	add	r2,r2,r3
  80f748:	10800017 	ldw	r2,0(r2)
  80f74c:	1004c03a 	cmpne	r2,r2,zero
  80f750:	1000131e 	bne	r2,zero,80f7a0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80f754:	e0bffe17 	ldw	r2,-8(fp)
  80f758:	00c02074 	movhi	r3,129
  80f75c:	18c25904 	addi	r3,r3,2404
  80f760:	10800324 	muli	r2,r2,12
  80f764:	10c7883a 	add	r3,r2,r3
  80f768:	e0bfff17 	ldw	r2,-4(fp)
  80f76c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80f770:	00802074 	movhi	r2,129
  80f774:	10871904 	addi	r2,r2,7268
  80f778:	10c00017 	ldw	r3,0(r2)
  80f77c:	e0bffe17 	ldw	r2,-8(fp)
  80f780:	1880040e 	bge	r3,r2,80f794 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80f784:	00c02074 	movhi	r3,129
  80f788:	18c71904 	addi	r3,r3,7268
  80f78c:	e0bffe17 	ldw	r2,-8(fp)
  80f790:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80f794:	e0bffe17 	ldw	r2,-8(fp)
  80f798:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80f79c:	00000606 	br	80f7b8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f7a0:	e0bffe17 	ldw	r2,-8(fp)
  80f7a4:	10800044 	addi	r2,r2,1
  80f7a8:	e0bffe15 	stw	r2,-8(fp)
  80f7ac:	e0bffe17 	ldw	r2,-8(fp)
  80f7b0:	10800810 	cmplti	r2,r2,32
  80f7b4:	103fdf1e 	bne	r2,zero,80f734 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80f7b8:	e0bffd17 	ldw	r2,-12(fp)
}
  80f7bc:	e037883a 	mov	sp,fp
  80f7c0:	df000017 	ldw	fp,0(sp)
  80f7c4:	dec00104 	addi	sp,sp,4
  80f7c8:	f800283a 	ret

0080f7cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80f7cc:	defffb04 	addi	sp,sp,-20
  80f7d0:	df000415 	stw	fp,16(sp)
  80f7d4:	df000404 	addi	fp,sp,16
  80f7d8:	e13ffe15 	stw	r4,-8(fp)
  80f7dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80f7e0:	e0bfff17 	ldw	r2,-4(fp)
  80f7e4:	10840070 	cmpltui	r2,r2,4097
  80f7e8:	1000021e 	bne	r2,zero,80f7f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80f7ec:	00840004 	movi	r2,4096
  80f7f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80f7f4:	e0fffe17 	ldw	r3,-8(fp)
  80f7f8:	e0bfff17 	ldw	r2,-4(fp)
  80f7fc:	1885883a 	add	r2,r3,r2
  80f800:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f804:	e0bffe17 	ldw	r2,-8(fp)
  80f808:	e0bffd15 	stw	r2,-12(fp)
  80f80c:	00000506 	br	80f824 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80f810:	e0bffd17 	ldw	r2,-12(fp)
  80f814:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f818:	e0bffd17 	ldw	r2,-12(fp)
  80f81c:	10800804 	addi	r2,r2,32
  80f820:	e0bffd15 	stw	r2,-12(fp)
  80f824:	e0fffd17 	ldw	r3,-12(fp)
  80f828:	e0bffc17 	ldw	r2,-16(fp)
  80f82c:	18bff836 	bltu	r3,r2,80f810 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80f830:	e0bffe17 	ldw	r2,-8(fp)
  80f834:	108007cc 	andi	r2,r2,31
  80f838:	1005003a 	cmpeq	r2,r2,zero
  80f83c:	1000021e 	bne	r2,zero,80f848 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80f840:	e0bffd17 	ldw	r2,-12(fp)
  80f844:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80f848:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80f84c:	e037883a 	mov	sp,fp
  80f850:	df000017 	ldw	fp,0(sp)
  80f854:	dec00104 	addi	sp,sp,4
  80f858:	f800283a 	ret

0080f85c <atexit>:
  80f85c:	200b883a 	mov	r5,r4
  80f860:	000d883a 	mov	r6,zero
  80f864:	0009883a 	mov	r4,zero
  80f868:	000f883a 	mov	r7,zero
  80f86c:	080f8e41 	jmpi	80f8e4 <__register_exitproc>

0080f870 <memcmp>:
  80f870:	00c000c4 	movi	r3,3
  80f874:	1980032e 	bgeu	r3,r6,80f884 <memcmp+0x14>
  80f878:	2144b03a 	or	r2,r4,r5
  80f87c:	10c4703a 	and	r2,r2,r3
  80f880:	10000f26 	beq	r2,zero,80f8c0 <memcmp+0x50>
  80f884:	31ffffc4 	addi	r7,r6,-1
  80f888:	3000061e 	bne	r6,zero,80f8a4 <memcmp+0x34>
  80f88c:	00000a06 	br	80f8b8 <memcmp+0x48>
  80f890:	39ffffc4 	addi	r7,r7,-1
  80f894:	00bfffc4 	movi	r2,-1
  80f898:	21000044 	addi	r4,r4,1
  80f89c:	29400044 	addi	r5,r5,1
  80f8a0:	38800526 	beq	r7,r2,80f8b8 <memcmp+0x48>
  80f8a4:	20c00003 	ldbu	r3,0(r4)
  80f8a8:	28800003 	ldbu	r2,0(r5)
  80f8ac:	18bff826 	beq	r3,r2,80f890 <memcmp+0x20>
  80f8b0:	1885c83a 	sub	r2,r3,r2
  80f8b4:	f800283a 	ret
  80f8b8:	0005883a 	mov	r2,zero
  80f8bc:	f800283a 	ret
  80f8c0:	180f883a 	mov	r7,r3
  80f8c4:	20c00017 	ldw	r3,0(r4)
  80f8c8:	28800017 	ldw	r2,0(r5)
  80f8cc:	18bfed1e 	bne	r3,r2,80f884 <memcmp+0x14>
  80f8d0:	31bfff04 	addi	r6,r6,-4
  80f8d4:	21000104 	addi	r4,r4,4
  80f8d8:	29400104 	addi	r5,r5,4
  80f8dc:	39bff936 	bltu	r7,r6,80f8c4 <memcmp+0x54>
  80f8e0:	003fe806 	br	80f884 <memcmp+0x14>

0080f8e4 <__register_exitproc>:
  80f8e4:	defffa04 	addi	sp,sp,-24
  80f8e8:	00802074 	movhi	r2,129
  80f8ec:	10871004 	addi	r2,r2,7232
  80f8f0:	dc000015 	stw	r16,0(sp)
  80f8f4:	14000017 	ldw	r16,0(r2)
  80f8f8:	dd000415 	stw	r20,16(sp)
  80f8fc:	2829883a 	mov	r20,r5
  80f900:	81405217 	ldw	r5,328(r16)
  80f904:	dcc00315 	stw	r19,12(sp)
  80f908:	dc800215 	stw	r18,8(sp)
  80f90c:	dc400115 	stw	r17,4(sp)
  80f910:	dfc00515 	stw	ra,20(sp)
  80f914:	2023883a 	mov	r17,r4
  80f918:	3027883a 	mov	r19,r6
  80f91c:	3825883a 	mov	r18,r7
  80f920:	28002526 	beq	r5,zero,80f9b8 <__register_exitproc+0xd4>
  80f924:	29000117 	ldw	r4,4(r5)
  80f928:	008007c4 	movi	r2,31
  80f92c:	11002716 	blt	r2,r4,80f9cc <__register_exitproc+0xe8>
  80f930:	8800101e 	bne	r17,zero,80f974 <__register_exitproc+0x90>
  80f934:	2105883a 	add	r2,r4,r4
  80f938:	1085883a 	add	r2,r2,r2
  80f93c:	20c00044 	addi	r3,r4,1
  80f940:	1145883a 	add	r2,r2,r5
  80f944:	0009883a 	mov	r4,zero
  80f948:	15000215 	stw	r20,8(r2)
  80f94c:	28c00115 	stw	r3,4(r5)
  80f950:	2005883a 	mov	r2,r4
  80f954:	dfc00517 	ldw	ra,20(sp)
  80f958:	dd000417 	ldw	r20,16(sp)
  80f95c:	dcc00317 	ldw	r19,12(sp)
  80f960:	dc800217 	ldw	r18,8(sp)
  80f964:	dc400117 	ldw	r17,4(sp)
  80f968:	dc000017 	ldw	r16,0(sp)
  80f96c:	dec00604 	addi	sp,sp,24
  80f970:	f800283a 	ret
  80f974:	29802204 	addi	r6,r5,136
  80f978:	00800044 	movi	r2,1
  80f97c:	110e983a 	sll	r7,r2,r4
  80f980:	30c04017 	ldw	r3,256(r6)
  80f984:	2105883a 	add	r2,r4,r4
  80f988:	1085883a 	add	r2,r2,r2
  80f98c:	1185883a 	add	r2,r2,r6
  80f990:	19c6b03a 	or	r3,r3,r7
  80f994:	14802015 	stw	r18,128(r2)
  80f998:	14c00015 	stw	r19,0(r2)
  80f99c:	00800084 	movi	r2,2
  80f9a0:	30c04015 	stw	r3,256(r6)
  80f9a4:	88bfe31e 	bne	r17,r2,80f934 <__register_exitproc+0x50>
  80f9a8:	30804117 	ldw	r2,260(r6)
  80f9ac:	11c4b03a 	or	r2,r2,r7
  80f9b0:	30804115 	stw	r2,260(r6)
  80f9b4:	003fdf06 	br	80f934 <__register_exitproc+0x50>
  80f9b8:	00802074 	movhi	r2,129
  80f9bc:	108eda04 	addi	r2,r2,15208
  80f9c0:	100b883a 	mov	r5,r2
  80f9c4:	80805215 	stw	r2,328(r16)
  80f9c8:	003fd606 	br	80f924 <__register_exitproc+0x40>
  80f9cc:	00800034 	movhi	r2,0
  80f9d0:	10800004 	addi	r2,r2,0
  80f9d4:	1000021e 	bne	r2,zero,80f9e0 <__register_exitproc+0xfc>
  80f9d8:	013fffc4 	movi	r4,-1
  80f9dc:	003fdc06 	br	80f950 <__register_exitproc+0x6c>
  80f9e0:	01006404 	movi	r4,400
  80f9e4:	103ee83a 	callr	r2
  80f9e8:	1007883a 	mov	r3,r2
  80f9ec:	103ffa26 	beq	r2,zero,80f9d8 <__register_exitproc+0xf4>
  80f9f0:	80805217 	ldw	r2,328(r16)
  80f9f4:	180b883a 	mov	r5,r3
  80f9f8:	18000115 	stw	zero,4(r3)
  80f9fc:	18800015 	stw	r2,0(r3)
  80fa00:	80c05215 	stw	r3,328(r16)
  80fa04:	18006215 	stw	zero,392(r3)
  80fa08:	18006315 	stw	zero,396(r3)
  80fa0c:	0009883a 	mov	r4,zero
  80fa10:	883fc826 	beq	r17,zero,80f934 <__register_exitproc+0x50>
  80fa14:	003fd706 	br	80f974 <__register_exitproc+0x90>
  80fa18:	00000010 	cmplti	zero,zero,0
  80fa1c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  80fa20:	00527a01 	jmpi	527a0 <__alt_mem_sdram_0-0x7ad860>
  80fa24:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram_0-0x6e0840>
  80fa28:	001b0c0b 	ldhu	zero,27696(zero)
  80fa2c:	00000028 	cmpgeui	zero,zero,0
  80fa30:	00000018 	cmpnei	zero,zero,0
  80fa34:	00808bd4 	movui	r2,559
  80fa38:	000005dc 	xori	zero,zero,23
  80fa3c:	400e4400 	call	400e440 <__alt_data_end+0x37ee240>
  80fa40:	92099170 	cmpltui	r8,r18,9797
  80fa44:	95079308 	cmpgei	r20,r18,7756
  80fa48:	97049605 	stb	fp,4696(r18)
  80fa4c:	90019f03 	ldbu	zero,1660(r18)
  80fa50:	9c06940a 	0x9c06940a
  80fa54:	00000002 	0x2
  80fa58:	00000028 	cmpgeui	zero,zero,0
  80fa5c:	00000044 	movi	zero,1
  80fa60:	008091b0 	cmpltui	r2,zero,582
  80fa64:	000005b0 	cmpltui	zero,zero,22
  80fa68:	3c0e4400 	call	3c0e440 <__alt_data_end+0x33ee240>
  80fa6c:	92099168 	cmpgeui	r8,r18,9797
  80fa70:	95079308 	cmpgei	r20,r18,7756
  80fa74:	9c039705 	stb	r16,3676(r19)
  80fa78:	90019f02 	0x90019f02
  80fa7c:	9606940a 	0x9606940a
  80fa80:	00000004 	movi	zero,0
  80fa84:	00803564 	muli	r2,zero,213
